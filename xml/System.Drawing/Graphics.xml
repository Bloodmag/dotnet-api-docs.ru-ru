<Type Name="Graphics" FullName="System.Drawing.Graphics">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="86cf101ca8adcd29b4d106ff6e8a61264722043b" />
    <Meta Name="ms.sourcegitcommit" Value="d31dc2ede16f6f7bc64e90d9f897ff54c4e3869b" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="ru-RU" />
    <Meta Name="ms.lasthandoff" Value="04/03/2018" />
    <Meta Name="ms.locfileid" Value="30411268" />
  </Metadata>
  <TypeSignature Language="C#" Value="public sealed class Graphics : MarshalByRefObject, IDisposable, System.Drawing.IDeviceContext" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed beforefieldinit Graphics extends System.MarshalByRefObject implements class System.Drawing.IDeviceContext, class System.IDisposable" />
  <TypeSignature Language="DocId" Value="T:System.Drawing.Graphics" />
  <TypeSignature Language="VB.NET" Value="Public NotInheritable Class Graphics&#xA;Inherits MarshalByRefObject&#xA;Implements IDeviceContext, IDisposable" />
  <TypeSignature Language="C++ CLI" Value="public ref class Graphics sealed : MarshalByRefObject, IDisposable, System::Drawing::IDeviceContext" />
  <AssemblyInfo>
    <AssemblyName>System.Drawing</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.MarshalByRefObject</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>System.Drawing.IDeviceContext</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.IDisposable</InterfaceName>
    </Interface>
  </Interfaces>
  <Docs>
    <summary>Инкапсулирует поверхность рисования GDI+. Этот класс не наследуется.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Drawing.Graphics> Класс предоставляет методы для рисования объектов на устройстве отображения. Объект <xref:System.Drawing.Graphics> связан с конкретным контекстом устройства.  
  
 Вы можете получить <xref:System.Drawing.Graphics> путем вызова метода <xref:System.Windows.Forms.Control.CreateGraphics%2A?displayProperty=nameWithType> метод на объекте, который наследует от <xref:System.Windows.Forms.Control?displayProperty=nameWithType>, или путем обработки элемента управления <xref:System.Windows.Forms.Control.Paint?displayProperty=nameWithType> событий и доступ к <xref:System.Windows.Forms.PaintEventArgs.Graphics%2A> свойство <xref:System.Windows.Forms.PaintEventArgs?displayProperty=nameWithType> класса. Можно также создать <xref:System.Drawing.Graphics> объекта из образа с помощью <xref:System.Drawing.Graphics.FromImage%2A> метод. Дополнительные сведения о создании <xref:System.Drawing.Graphics> см. в разделе [как: Создание графических объектов для рисования](~/docs/framework/winforms/advanced/how-to-create-graphics-objects-for-drawing.md).  
  
 Множество различных фигур и линий можно нарисовать с помощью <xref:System.Drawing.Graphics> объекта. Дополнительные сведения о том, как рисование линий и фигур см. в разделе конкретный `Draw` *GraphicalElement* метод для строки или необходимо нарисовать фигуру. К этим методам относятся <xref:System.Drawing.Graphics.DrawLine%2A>, <xref:System.Drawing.Graphics.DrawArc%2A>, <xref:System.Drawing.Graphics.DrawClosedCurve%2A>, <xref:System.Drawing.Graphics.DrawPolygon%2A>, и <xref:System.Drawing.Graphics.DrawRectangle%2A>. Дополнительные сведения о том, как рисование линий и фигур см. в разделе [с помощью пера для рисования линий и фигур](~/docs/framework/winforms/advanced/using-a-pen-to-draw-lines-and-shapes.md) и [с использованием кисти для заливки фигур](~/docs/framework/winforms/advanced/using-a-brush-to-fill-shapes.md).  
  
 Также можно рисовать изображения и значки, используя <xref:System.Drawing.Graphics.DrawImage%2A> и <xref:System.Drawing.Graphics.DrawIcon%2A> методов, соответственно. Для выполнения перемещение набора битов данных о цвете с экрана на поверхность рисования объекта <xref:System.Drawing.Graphics> см. в разделе <xref:System.Drawing.Graphics.CopyFromScreen%2A>. Дополнительные сведения о том, как рисовать изображения с <xref:System.Drawing.Graphics> см. в разделе [работа с изображения, точечные рисунки, значки и метафайлы](~/docs/framework/winforms/advanced/working-with-images-bitmaps-icons-and-metafiles.md).  
  
 Кроме того, можно управлять используется система координат <xref:System.Drawing.Graphics> объекта. Дополнительные сведения о системе координат и управлять ими см. в разделе [системы координат и преобразования](~/docs/framework/winforms/advanced/coordinate-systems-and-transformations.md).  
  
   
  
## Examples  
 Следующий пример кода предназначен для работы с Windows Forms и требует <xref:System.Windows.Forms.PaintEventArgs> объекта. <xref:System.Windows.Forms.PaintEventArgs> Объект называется `e` и является параметром <xref:System.Windows.Forms.Control.Paint> обработчика событий. Код выполняет следующие действия.  
  
-   Создает образ, из файла в формате JPEG. Файл называется SampImag.jpg и находится в папке примера.  
  
-   Создает точку, в котором выполняется отрисовка верхнего левого угла изображения.  
  
-   Выводит на экран зависимым изображения с помощью <xref:System.Drawing.Graphics> объекта.  
  
 [!code-cpp[System.Drawing.ClassicGraphicsExamples#40](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples/CPP/form1.cpp#40)]
 [!code-csharp[System.Drawing.ClassicGraphicsExamples#40](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples/CS/form1.cs#40)]
 [!code-vb[System.Drawing.ClassicGraphicsExamples#40](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples/VB/form1.vb#40)]  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName="AddMetafileComment">
      <MemberSignature Language="C#" Value="public void AddMetafileComment (byte[] data);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void AddMetafileComment(unsigned int8[] data) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.AddMetafileComment(System.Byte[])" />
      <MemberSignature Language="VB.NET" Value="Public Sub AddMetafileComment (data As Byte())" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void AddMetafileComment(cli::array &lt;System::Byte&gt; ^ data);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="data" Type="System.Byte[]" />
      </Parameters>
      <Docs>
        <param name="data">Массив байтов, содержащий комментарий.</param>
        <summary>Добавляет комментарий к текущему объекту <see cref="T:System.Drawing.Imaging.Metafile" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Этот метод допустим, только если это <xref:System.Drawing.Graphics> связан с <xref:System.Drawing.Imaging.Metafile>.  
  
   
  
## Examples  
 Следующий пример кода предназначен для работы с Windows Forms, и для него необходим <xref:System.Windows.Forms.PaintEventArgs> `e`, которого является параметром <xref:System.Windows.Forms.Control.Paint> обработчика событий, а также `thisForm`, <xref:System.Windows.Forms.Form> для примера. Код выполняет следующие действия.  
  
-   Создает временный <xref:System.Drawing.Graphics> для создания метафайла и получает `hdc`, дескриптор контекста устройства.  
  
-   Создает новый метафайл, используя `hdc`.  
  
-   Создает <xref:System.Drawing.Graphics> для отображения метафайла из <xref:System.Drawing.Imaging.Metafile>.  
  
-   Рисует прямоугольник в метафайл.  
  
-   Добавляет комментарий в метафайл.  
  
-   Удаляет <xref:System.Drawing.Graphics> для метафайла, в результате чего метафайл закрывается.  
  
-   Удаляет метафайл.  
  
-   Освобождает временный `hdc`.  
  
-   Уничтожает временный <xref:System.Drawing.Graphics>.  
  
-   Создает второй метафайл из ранее созданного файла.  
  
-   Выводит метафайл на экране.  
  
-   Удаляет метафайл.  
  
 [!code-cpp[System.Drawing.ClassicGraphicsExamples#1](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples/CPP/form1.cpp#1)]
 [!code-csharp[System.Drawing.ClassicGraphicsExamples#1](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples/CS/form1.cs#1)]
 [!code-vb[System.Drawing.ClassicGraphicsExamples#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples/VB/form1.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="BeginContainer">
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Сохраняет графический контейнер, содержащий текущее состояние данного объекта <see cref="T:System.Drawing.Graphics" />, а затем открывает и использует новый графический контейнер.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="BeginContainer">
      <MemberSignature Language="C#" Value="public System.Drawing.Drawing2D.GraphicsContainer BeginContainer ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Drawing.Drawing2D.GraphicsContainer BeginContainer() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.BeginContainer" />
      <MemberSignature Language="VB.NET" Value="Public Function BeginContainer () As GraphicsContainer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Drawing::Drawing2D::GraphicsContainer ^ BeginContainer();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Drawing.Drawing2D.GraphicsContainer</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Сохраняет графический контейнер, содержащий текущее состояние данного объекта <see cref="T:System.Drawing.Graphics" />, а затем открывает и использует новый графический контейнер.</summary>
        <returns>Данный метод возвращает объект <see cref="T:System.Drawing.Drawing2D.GraphicsContainer" />, который представляет состояние объекта <see cref="T:System.Drawing.Graphics" /> на момент вызова метода.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Этот метод используется с <xref:System.Drawing.Graphics.EndContainer%2A> метод для создания вложенных графических контейнеров. Графические контейнеры сохраняют состояние графики, например преобразования, отсеченной области и свойства отображения.  
  
 При вызове <xref:System.Drawing.Graphics.BeginContainer%2A> метод <xref:System.Drawing.Graphics>, информационный блок, содержащий состояние объекта <xref:System.Drawing.Graphics> помещается в стек. <xref:System.Drawing.Graphics.BeginContainer%2A> Возвращает метод <xref:System.Drawing.Drawing2D.GraphicsContainer> , идентифицирующий этот блок сведений. При передаче определяющего объекта <xref:System.Drawing.Graphics.EndContainer%2A> метод, блок данных удаляется из стека и используется для восстановления <xref:System.Drawing.Graphics> в состояние на момент <xref:System.Drawing.Graphics.BeginContainer%2A> вызова метода.  
  
 Контейнеры могут быть вложенными; то есть, можно вызвать <xref:System.Drawing.Graphics.BeginContainer%2A> метода несколько раз перед вызовом метода <xref:System.Drawing.Graphics.EndContainer%2A> метод. Каждый раз при вызове <xref:System.Drawing.Graphics.BeginContainer%2A> , метод информационный блок помещается в стек, и вы получаете <xref:System.Drawing.Drawing2D.GraphicsContainer> для блока сведений. При передаче одного из этих объектов <xref:System.Drawing.Graphics.EndContainer%2A> метода <xref:System.Drawing.Graphics> возвращается в состояние на момент <xref:System.Drawing.Graphics.BeginContainer%2A> вызов метода, который возвращен данный <xref:System.Drawing.Drawing2D.GraphicsContainer>. Блок данных помещается в стек, который <xref:System.Drawing.Graphics.BeginContainer%2A> вызова метода удаляется из стека, а все информационные блоки, помещенные в стек после <xref:System.Drawing.Graphics.BeginContainer%2A> вызов метода также удаляются.  
  
 Вызовы <xref:System.Drawing.Graphics.Save%2A> метод информационные блоки помещаются в тот же стек, что и при вызове <xref:System.Drawing.Graphics.BeginContainer%2A> метода. Так же, как <xref:System.Drawing.Graphics.EndContainer%2A> вызова метода объединяется с <xref:System.Drawing.Graphics.BeginContainer%2A> вызов метода <xref:System.Drawing.Graphics.Restore%2A> вызова метода объединяется с <xref:System.Drawing.Graphics.Save%2A> вызова метода.  
  
 При вызове <xref:System.Drawing.Graphics.EndContainer%2A> метод, все блоки сведения помещаются в стек (по <xref:System.Drawing.Graphics.Save%2A> метода или с помощью <xref:System.Drawing.Graphics.BeginContainer%2A> метод) после соответствующего вызова <xref:System.Drawing.Graphics.BeginContainer%2A> метод удаляются из стека. Аналогично, при вызове <xref:System.Drawing.Graphics.Restore%2A> метод, все блоки сведения помещаются в стек (по <xref:System.Drawing.Graphics.Save%2A> метод или <xref:System.Drawing.Graphics.BeginContainer%2A> метод) после соответствующего вызова <xref:System.Drawing.Graphics.Save%2A> метод удаляются из стека.  
  
 Состояние графики, установленное <xref:System.Drawing.Graphics.BeginContainer%2A> метод включает качествами отрисовки графики состояние по умолчанию; изменения состояния качество отображения, при вызове метода сбрасываются в значения по умолчанию.  
  
   
  
## Examples  
 Следующий пример кода предназначен для работы с Windows Forms, и для него необходим <xref:System.Windows.Forms.PaintEventArgs> `e`, который является параметром <xref:System.Windows.Forms.Control.Paint> обработчика событий. Код выполняет следующие действия.  
  
-   Открывает новый графический контейнер и сохраняет предыдущий.  
  
-   Переводит универсальные координаты в контейнере.  
  
-   Заполняет красный прямоугольник (преобразовать координаты) нового контейнера.  
  
-   Закрывает новый контейнер и восстанавливает сохраненный.  
  
-   Выполняет заливку зеленого прямоугольника сохраненного контейнера (в его непреобразованных координатах).  
  
 Результатом является зеленый прямоугольник, который перекрывает красный прямоугольник такого же размера.  
  
 [!code-cpp[System.Drawing.ClassicGraphicsExamples#2](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples/CPP/form1.cpp#2)]
 [!code-csharp[System.Drawing.ClassicGraphicsExamples#2](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples/CS/form1.cs#2)]
 [!code-vb[System.Drawing.ClassicGraphicsExamples#2](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples/VB/form1.vb#2)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="BeginContainer">
      <MemberSignature Language="C#" Value="public System.Drawing.Drawing2D.GraphicsContainer BeginContainer (System.Drawing.Rectangle dstrect, System.Drawing.Rectangle srcrect, System.Drawing.GraphicsUnit unit);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Drawing.Drawing2D.GraphicsContainer BeginContainer(valuetype System.Drawing.Rectangle dstrect, valuetype System.Drawing.Rectangle srcrect, valuetype System.Drawing.GraphicsUnit unit) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.BeginContainer(System.Drawing.Rectangle,System.Drawing.Rectangle,System.Drawing.GraphicsUnit)" />
      <MemberSignature Language="VB.NET" Value="Public Function BeginContainer (dstrect As Rectangle, srcrect As Rectangle, unit As GraphicsUnit) As GraphicsContainer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Drawing::Drawing2D::GraphicsContainer ^ BeginContainer(System::Drawing::Rectangle dstrect, System::Drawing::Rectangle srcrect, System::Drawing::GraphicsUnit unit);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Drawing.Drawing2D.GraphicsContainer</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="dstrect" Type="System.Drawing.Rectangle" />
        <Parameter Name="srcrect" Type="System.Drawing.Rectangle" />
        <Parameter Name="unit" Type="System.Drawing.GraphicsUnit" />
      </Parameters>
      <Docs>
        <param name="dstrect">
          Структура <see cref="T:System.Drawing.Rectangle" />, которая вместе с параметром <c>srcrect</c> задает преобразование масштаба для контейнера.</param>
        <param name="srcrect">
          Структура <see cref="T:System.Drawing.Rectangle" />, которая вместе с параметром <c>dstrect</c> задает преобразование масштаба для контейнера.</param>
        <param name="unit">Элемент перечисления <see cref="T:System.Drawing.GraphicsUnit" />, задающий единицу измерения для контейнера.</param>
        <summary>Сохраняет графический контейнер, содержащий текущее состояние данного объекта <see cref="T:System.Drawing.Graphics" />, а также открывает и использует новый графический контейнер с указанным преобразованием масштаба.</summary>
        <returns>Данный метод возвращает объект <see cref="T:System.Drawing.Drawing2D.GraphicsContainer" />, который представляет состояние объекта <see cref="T:System.Drawing.Graphics" /> на момент вызова метода.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Этот метод используется с <xref:System.Drawing.Graphics.EndContainer%2A> метод для создания вложенных графических контейнеров. Графические контейнеры сохраняют состояние графики, например преобразования, отсеченной области и свойства отображения.  
  
 При вызове <xref:System.Drawing.Graphics.BeginContainer%2A> метод <xref:System.Drawing.Graphics>, информационный блок, содержащий состояние объекта <xref:System.Drawing.Graphics> помещается в стек. <xref:System.Drawing.Graphics.BeginContainer%2A> Возвращает метод <xref:System.Drawing.Drawing2D.GraphicsContainer> , идентифицирующий этот блок сведений. При передаче определяющего объекта <xref:System.Drawing.Graphics.EndContainer%2A> метод, блок данных удаляется из стека и используется для восстановления <xref:System.Drawing.Graphics> в состояние на момент <xref:System.Drawing.Graphics.BeginContainer%2A> вызова метода.  
  
 Контейнеры могут быть вложенными; то есть, можно вызвать <xref:System.Drawing.Graphics.BeginContainer%2A> метода несколько раз перед вызовом метода <xref:System.Drawing.Graphics.EndContainer%2A> метод. Каждый раз при вызове <xref:System.Drawing.Graphics.BeginContainer%2A> , метод информационный блок помещается в стек, и вы получаете <xref:System.Drawing.Drawing2D.GraphicsContainer> для блока сведений. При передаче одного из этих объектов <xref:System.Drawing.Graphics.EndContainer%2A> метода <xref:System.Drawing.Graphics> возвращается в состояние на момент <xref:System.Drawing.Graphics.BeginContainer%2A> вызов метода, который возвращен данный <xref:System.Drawing.Drawing2D.GraphicsContainer>. Блок данных помещается в стек, который <xref:System.Drawing.Graphics.BeginContainer%2A> вызова метода удаляется из стека, а все информационные блоки, помещенные в стек после <xref:System.Drawing.Graphics.BeginContainer%2A> вызов метода также удаляются.  
  
 Вызовы <xref:System.Drawing.Graphics.Save%2A> метод информационные блоки помещаются в тот же стек, что и при вызове <xref:System.Drawing.Graphics.BeginContainer%2A> метода. Так же, как <xref:System.Drawing.Graphics.EndContainer%2A> вызова метода объединяется с <xref:System.Drawing.Graphics.BeginContainer%2A> вызов метода <xref:System.Drawing.Graphics.Restore%2A> вызова метода объединяется с <xref:System.Drawing.Graphics.Save%2A> вызова метода.  
  
 При вызове <xref:System.Drawing.Graphics.EndContainer%2A> метод, все блоки сведения помещаются в стек (по <xref:System.Drawing.Graphics.Save%2A> метода или с помощью <xref:System.Drawing.Graphics.BeginContainer%2A> метод) после соответствующего вызова <xref:System.Drawing.Graphics.BeginContainer%2A> метод удаляются из стека. Аналогично, при вызове <xref:System.Drawing.Graphics.Restore%2A> метод, все блоки сведения помещаются в стек (по <xref:System.Drawing.Graphics.Save%2A> метод или <xref:System.Drawing.Graphics.BeginContainer%2A> метод) после соответствующего вызова <xref:System.Drawing.Graphics.Save%2A> метод удаляются из стека.  
  
 Этот метод задает преобразование масштаба для нового графического контейнера с `dstrect` и `srcrect` параметров. Масштаб равен преобразование, при применении к `srcrect`, в результате `dstrect`.  
  
 Состояние графики, установленное <xref:System.Drawing.Graphics.BeginContainer%2A> метод включает качествами отрисовки графики состояние по умолчанию; изменения состояния качество отображения, при вызове метода сбрасываются в значения по умолчанию.  
  
   
  
## Examples  
 Следующий пример кода предназначен для работы с Windows Forms, и для него необходим <xref:System.Windows.Forms.PaintEventArgs> `e`, который является параметром <xref:System.Windows.Forms.Control.Paint> обработчика событий. Код выполняет следующие действия.  
  
-   Создает два прямоугольника, чтобы указать преобразование масштаба для нового контейнера.  
  
-   Открывает новый графический контейнер и сохраняет предыдущий.  
  
-   Заполняет красный прямоугольник (масштабированных координатах) нового контейнера.  
  
-   Закрывает новый контейнер и восстанавливает сохраненный.  
  
-   Выполняет заливку зеленого прямоугольника сохраненного контейнера (в зависимым координатах).  
  
 Результатом является зеленый прямоугольник, который перекрывает красный прямоугольник меньшего размера.  
  
 [!code-cpp[System.Drawing.ClassicGraphicsExamples#3](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples/CPP/form1.cpp#3)]
 [!code-csharp[System.Drawing.ClassicGraphicsExamples#3](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples/CS/form1.cs#3)]
 [!code-vb[System.Drawing.ClassicGraphicsExamples#3](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples/VB/form1.vb#3)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="BeginContainer">
      <MemberSignature Language="C#" Value="public System.Drawing.Drawing2D.GraphicsContainer BeginContainer (System.Drawing.RectangleF dstrect, System.Drawing.RectangleF srcrect, System.Drawing.GraphicsUnit unit);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Drawing.Drawing2D.GraphicsContainer BeginContainer(valuetype System.Drawing.RectangleF dstrect, valuetype System.Drawing.RectangleF srcrect, valuetype System.Drawing.GraphicsUnit unit) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.BeginContainer(System.Drawing.RectangleF,System.Drawing.RectangleF,System.Drawing.GraphicsUnit)" />
      <MemberSignature Language="VB.NET" Value="Public Function BeginContainer (dstrect As RectangleF, srcrect As RectangleF, unit As GraphicsUnit) As GraphicsContainer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Drawing::Drawing2D::GraphicsContainer ^ BeginContainer(System::Drawing::RectangleF dstrect, System::Drawing::RectangleF srcrect, System::Drawing::GraphicsUnit unit);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Drawing.Drawing2D.GraphicsContainer</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="dstrect" Type="System.Drawing.RectangleF" />
        <Parameter Name="srcrect" Type="System.Drawing.RectangleF" />
        <Parameter Name="unit" Type="System.Drawing.GraphicsUnit" />
      </Parameters>
      <Docs>
        <param name="dstrect">
          Структура <see cref="T:System.Drawing.RectangleF" />, которая вместе с параметром <c>srcrect</c> задает преобразование масштаба для нового графического контейнера.</param>
        <param name="srcrect">
          Структура <see cref="T:System.Drawing.RectangleF" />, которая вместе с параметром <c>dstrect</c> задает преобразование масштаба для нового графического контейнера.</param>
        <param name="unit">Элемент перечисления <see cref="T:System.Drawing.GraphicsUnit" />, задающий единицу измерения для контейнера.</param>
        <summary>Сохраняет графический контейнер, содержащий текущее состояние данного объекта <see cref="T:System.Drawing.Graphics" />, а также открывает и использует новый графический контейнер с указанным преобразованием масштаба.</summary>
        <returns>Данный метод возвращает объект <see cref="T:System.Drawing.Drawing2D.GraphicsContainer" />, который представляет состояние объекта <see cref="T:System.Drawing.Graphics" /> на момент вызова метода.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Этот метод используется с <xref:System.Drawing.Graphics.EndContainer%2A> метод для создания вложенных графических контейнеров. Графические контейнеры сохраняют состояние графики, например преобразования, отсеченной области и свойства отображения.  
  
 При вызове <xref:System.Drawing.Graphics.BeginContainer%2A> метод <xref:System.Drawing.Graphics>, информационный блок, содержащий состояние объекта <xref:System.Drawing.Graphics> помещается в стек. <xref:System.Drawing.Graphics.BeginContainer%2A> Возвращает метод <xref:System.Drawing.Drawing2D.GraphicsContainer> , идентифицирующий этот блок сведений. При передаче определяющего объекта <xref:System.Drawing.Graphics.EndContainer%2A> метод, блок данных удаляется из стека и используется для восстановления <xref:System.Drawing.Graphics> в состояние на момент <xref:System.Drawing.Graphics.BeginContainer%2A> вызова метода.  
  
 Контейнеры могут быть вложенными; то есть, можно вызвать <xref:System.Drawing.Graphics.BeginContainer%2A> метода несколько раз перед вызовом метода <xref:System.Drawing.Graphics.EndContainer%2A> метод. Каждый раз при вызове <xref:System.Drawing.Graphics.BeginContainer%2A> , метод информационный блок помещается в стек, и вы получаете <xref:System.Drawing.Drawing2D.GraphicsContainer> для блока сведений. При передаче одного из этих объектов <xref:System.Drawing.Graphics.EndContainer%2A> метода <xref:System.Drawing.Graphics> возвращается в состояние на момент <xref:System.Drawing.Graphics.BeginContainer%2A> вызов метода, который возвращен данный <xref:System.Drawing.Drawing2D.GraphicsContainer>. Блок данных помещается в стек, который <xref:System.Drawing.Graphics.BeginContainer%2A> вызова метода удаляется из стека, а все информационные блоки, помещенные в стек после <xref:System.Drawing.Graphics.BeginContainer%2A> вызов метода также удаляются.  
  
 Вызовы <xref:System.Drawing.Graphics.Save%2A> метод информационные блоки помещаются в тот же стек, что и при вызове <xref:System.Drawing.Graphics.BeginContainer%2A> метода. Так же, как <xref:System.Drawing.Graphics.EndContainer%2A> вызова метода объединяется с <xref:System.Drawing.Graphics.BeginContainer%2A> вызов метода <xref:System.Drawing.Graphics.Restore%2A> вызова метода объединяется с <xref:System.Drawing.Graphics.Save%2A> вызова метода.  
  
 При вызове <xref:System.Drawing.Graphics.EndContainer%2A> метод, все блоки сведения помещаются в стек (по `Save` метода или с помощью <xref:System.Drawing.Graphics.BeginContainer%2A> метод) после соответствующего вызова <xref:System.Drawing.Graphics.BeginContainer%2A> метод удаляются из стека. Аналогично, при вызове <xref:System.Drawing.Graphics.Restore%2A> метод, все блоки сведения помещаются в стек (по <xref:System.Drawing.Graphics.Save%2A> метод или <xref:System.Drawing.Graphics.BeginContainer%2A> метод) после соответствующего вызова <xref:System.Drawing.Graphics.Save%2A> метод удаляются из стека.  
  
 Этот метод задает преобразование масштаба для нового графического контейнера с `dstrect` и `srcrect` параметров. Масштаб равен преобразование, при применении к `srcrect`, в результате `dstrect`.  
  
 Состояние графики, установленное <xref:System.Drawing.Graphics.BeginContainer%2A> метод включает качествами отрисовки графики состояние по умолчанию; изменения состояния качество отображения, при вызове метода сбрасываются в значения по умолчанию.  
  
   
  
## Examples  
 Следующий пример кода предназначен для работы с Windows Forms, и для него необходим <xref:System.Windows.Forms.PaintEventArgs> `e`, который является параметром <xref:System.Windows.Forms.Control.Paint> обработчика событий. Код выполняет следующие действия.  
  
-   Создает два прямоугольника, чтобы указать преобразование масштаба для нового контейнера.  
  
-   Открывает новый графический контейнер и сохраняет предыдущий.  
  
-   Заполняет красный прямоугольник (масштабированных координатах) нового контейнера.  
  
-   Закрывает новый контейнер и восстанавливает сохраненный.  
  
-   Выполняет заливку зеленого прямоугольника сохраненного контейнера (в зависимым координатах).  
  
 Результатом является зеленый прямоугольник, который перекрывает красный прямоугольник меньшего размера.  
  
 [!code-cpp[System.Drawing.ClassicGraphicsExamples#4](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples/CPP/form1.cpp#4)]
 [!code-csharp[System.Drawing.ClassicGraphicsExamples#4](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples/CS/form1.cs#4)]
 [!code-vb[System.Drawing.ClassicGraphicsExamples#4](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples/VB/form1.vb#4)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Clear">
      <MemberSignature Language="C#" Value="public void Clear (System.Drawing.Color color);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Clear(valuetype System.Drawing.Color color) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.Clear(System.Drawing.Color)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Clear(System::Drawing::Color color);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="color" Type="System.Drawing.Color" />
      </Parameters>
      <Docs>
        <param name="color">
          Структура <see cref="T:System.Drawing.Color" />, которая представляет собой цвет фона для поверхности рисования.</param>
        <summary>Очищает всю поверхность рисования и выполняет заливку поверхности указанным цветом фона.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Drawing.Graphics.Clear%2A> Метод очищает состояние объекта графики и не должен вызываться, когда не удается обновить объект графики. Например если <xref:System.Drawing.Graphics.Clear%2A> метод будет вызван на безопасном рабочем столе в сеансе сервера терминалов <xref:System.Runtime.InteropServices.ExternalException> может возникнуть, если оставить <xref:System.Drawing.Graphics> объекта в несогласованном состоянии.  
  
   
  
## Examples  
 Следующий пример кода предназначен для работы с Windows Forms, и для него необходим <xref:System.Windows.Forms.PaintEventArgs> `e`, который является параметром <xref:System.Windows.Forms.Control.Paint> обработчика событий. Код очищает поверхность рисования объекта <xref:System.Drawing.Graphics> и задает цвет фона системные сине-зеленый цвет.  
  
 [!code-cpp[System.Drawing.ClassicGraphicsExamples#5](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples/CPP/form1.cpp#5)]
 [!code-csharp[System.Drawing.ClassicGraphicsExamples#5](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples/CS/form1.cs#5)]
 [!code-vb[System.Drawing.ClassicGraphicsExamples#5](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples/VB/form1.vb#5)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Clip">
      <MemberSignature Language="C#" Value="public System.Drawing.Region Clip { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Drawing.Region Clip" />
      <MemberSignature Language="DocId" Value="P:System.Drawing.Graphics.Clip" />
      <MemberSignature Language="VB.NET" Value="Public Property Clip As Region" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Drawing::Region ^ Clip { System::Drawing::Region ^ get(); void set(System::Drawing::Region ^ value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Drawing.Region</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Возвращает или задает объект <see cref="T:System.Drawing.Region" />, ограничивающий область рисования данного объекта <see cref="T:System.Drawing.Graphics" />.</summary>
        <value>Объект <see cref="T:System.Drawing.Region" />, ограничивающий часть данного объекта <see cref="T:System.Drawing.Graphics" />, доступную для рисования в текущий момент.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Изменение <xref:System.Drawing.Region> объект, возвращаемый <xref:System.Drawing.Graphics.Clip%2A> свойства не влияет на последующие Рисование с <xref:System.Drawing.Graphics> объекта. Чтобы изменить область обрезки, замените <xref:System.Drawing.Graphics.Clip%2A> значение свойства с новым <xref:System.Drawing.Region> объекта. Чтобы определить, является ли отсеченная область бесконечный, необходимо получить <xref:System.Drawing.Graphics.Clip%2A> свойство и вызвать его <xref:System.Drawing.Region.IsInfinite%2A> метод.  
  
   
  
## Examples  
 В следующем примере кода показано использование <xref:System.Drawing.Graphics.Clip%2A> свойство. Этот пример предназначен для использования с Windows Forms. Вставьте код в форму и вызовите `SetAndFillClip` метод при обработке формы <xref:System.Windows.Forms.Control.Paint> передачи событий `e` как <xref:System.Windows.Forms.PaintEventArgs>.  
  
 [!code-cpp[System.Drawing.GraphicsProperties#4](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.GraphicsProperties/CPP/form1.cpp#4)]
 [!code-csharp[System.Drawing.GraphicsProperties#4](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.GraphicsProperties/CS/form1.cs#4)]
 [!code-vb[System.Drawing.GraphicsProperties#4](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.GraphicsProperties/VB/form1.vb#4)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ClipBounds">
      <MemberSignature Language="C#" Value="public System.Drawing.RectangleF ClipBounds { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Drawing.RectangleF ClipBounds" />
      <MemberSignature Language="DocId" Value="P:System.Drawing.Graphics.ClipBounds" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property ClipBounds As RectangleF" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Drawing::RectangleF ClipBounds { System::Drawing::RectangleF get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Drawing.RectangleF</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Возвращает структуру <see cref="T:System.Drawing.RectangleF" />, которая  ограничивает отсеченную область данного объекта <see cref="T:System.Drawing.Graphics" />.</summary>
        <value>Структура <see cref="T:System.Drawing.RectangleF" />, представляющая ограничивающий прямоугольник для отсеченной области данного объекта <see cref="T:System.Drawing.Graphics" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Единица измерения для полученного прямоугольника обозначается <xref:System.Drawing.Graphics.PageUnit%2A> свойство. Единицы измерения по умолчанию — пикселей. Объект <xref:System.Drawing.Graphics> обычно связана с элементом управления и начало координат прямоугольника будет относительно клиентской области этого элемента управления.  
  
 Если отсеченная область является бесконечным, <xref:System.Drawing.Graphics.ClipBounds%2A> свойство возвращает большой прямоугольник. Чтобы определить, является ли отсеченная область бесконечный, необходимо получить <xref:System.Drawing.Graphics.Clip%2A> свойство и вызвать его <xref:System.Drawing.Region.IsInfinite%2A> метод.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="CompositingMode">
      <MemberSignature Language="C#" Value="public System.Drawing.Drawing2D.CompositingMode CompositingMode { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Drawing.Drawing2D.CompositingMode CompositingMode" />
      <MemberSignature Language="DocId" Value="P:System.Drawing.Graphics.CompositingMode" />
      <MemberSignature Language="VB.NET" Value="Public Property CompositingMode As CompositingMode" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Drawing::Drawing2D::CompositingMode CompositingMode { System::Drawing::Drawing2D::CompositingMode get(); void set(System::Drawing::Drawing2D::CompositingMode value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Drawing.Drawing2D.CompositingMode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Возвращает значение, задающее способ рисования составных изображений в данном объекте <see cref="T:System.Drawing.Graphics" />.</summary>
        <value>Это свойство задает элемент перечисления <see cref="T:System.Drawing.Drawing2D.CompositingMode" />. Значение по умолчанию: <see cref="F:System.Drawing.Drawing2D.CompositingMode.SourceOver" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Режим композиции определяет заменяют точки исходного изображения или объединяются с фона пикселей.  
  
> [!NOTE]
>  Не следует использовать <xref:System.Drawing.Graphics.CompositingMode%2A> значение свойства <xref:System.Drawing.Drawing2D.CompositingMode.SourceCopy> при <xref:System.Drawing.Graphics.TextRenderingHint%2A> свойству <xref:System.Drawing.Text.TextRenderingHint.ClearTypeGridFit>. Может возникнуть исключение или изображения, могут отображаться некорректно.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="CompositingQuality">
      <MemberSignature Language="C#" Value="public System.Drawing.Drawing2D.CompositingQuality CompositingQuality { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Drawing.Drawing2D.CompositingQuality CompositingQuality" />
      <MemberSignature Language="DocId" Value="P:System.Drawing.Graphics.CompositingQuality" />
      <MemberSignature Language="VB.NET" Value="Public Property CompositingQuality As CompositingQuality" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Drawing::Drawing2D::CompositingQuality CompositingQuality { System::Drawing::Drawing2D::CompositingQuality get(); void set(System::Drawing::Drawing2D::CompositingQuality value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Drawing.Drawing2D.CompositingQuality</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Возвращает или задает качество отрисовки составных изображений, которые формируются в данном объекте <see cref="T:System.Drawing.Graphics" />.</summary>
        <value>Это свойство задает элемент перечисления <see cref="T:System.Drawing.Drawing2D.CompositingQuality" />. Значение по умолчанию: <see cref="F:System.Drawing.Drawing2D.CompositingQuality.Default" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Качество композиции определяет качество отображения составных изображений.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="CopyFromScreen">
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Выполняет перемещение набора битов данных о цвете с экрана на поверхность рисования объекта <see cref="T:System.Drawing.Graphics" />.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="CopyFromScreen">
      <MemberSignature Language="C#" Value="public void CopyFromScreen (System.Drawing.Point upperLeftSource, System.Drawing.Point upperLeftDestination, System.Drawing.Size blockRegionSize);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void CopyFromScreen(valuetype System.Drawing.Point upperLeftSource, valuetype System.Drawing.Point upperLeftDestination, valuetype System.Drawing.Size blockRegionSize) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.CopyFromScreen(System.Drawing.Point,System.Drawing.Point,System.Drawing.Size)" />
      <MemberSignature Language="VB.NET" Value="Public Sub CopyFromScreen (upperLeftSource As Point, upperLeftDestination As Point, blockRegionSize As Size)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void CopyFromScreen(System::Drawing::Point upperLeftSource, System::Drawing::Point upperLeftDestination, System::Drawing::Size blockRegionSize);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="upperLeftSource" Type="System.Drawing.Point" />
        <Parameter Name="upperLeftDestination" Type="System.Drawing.Point" />
        <Parameter Name="blockRegionSize" Type="System.Drawing.Size" />
      </Parameters>
      <Docs>
        <param name="upperLeftSource">Точка в верхнем левом углу исходного прямоугольника.</param>
        <param name="upperLeftDestination">Точка в верхнем левом углу целевого прямоугольника.</param>
        <param name="blockRegionSize">Размер передаваемой области.</param>
        <summary>Выполняет перемещение набора битов данных о цвете, соответствующих прямоугольнику пикселей, с экрана на поверхность рисования объекта <see cref="T:System.Drawing.Graphics" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Drawing.Graphics.CopyFromScreen%2A> Методы полезны для слоев одного образа в другую. Чтобы указать, как исходный и конечный цвета смешиваются, используйте один из <xref:System.Drawing.Graphics.CopyFromScreen%2A> методов, принимающих <xref:System.Drawing.CopyPixelOperation> параметра.  
  
   
  
## Examples  
 В следующем примере показано использование метода <xref:System.Drawing.Graphics.CopyFromScreen%2A>. Чтобы выполнить этот пример, вставьте его в форму Windows Forms. Обрабатывать формы <xref:System.Windows.Forms.Control.Paint> событий и вызовов `CopyPixels1` метод <xref:System.Windows.Forms.Control.Paint> метод обработки событий, передав `e` как <xref:System.Windows.Forms.PaintEventArgs>.  
  
 [!code-csharp[System.Drawing.MiscWhidbeySnippets#4](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.MiscWhidbeySnippets/CS/Form1.cs#4)]
 [!code-vb[System.Drawing.MiscWhidbeySnippets#4](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.MiscWhidbeySnippets/VB/Form1.vb#4)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ComponentModel.Win32Exception">Операция выполнена со сбоем.</exception>
        <permission cref="T:System.Security.Permissions.UIPermission">для доступа ко всем окнам. Связанные перечисления: <see cref="F:System.Security.Permissions.UIPermissionWindow.AllWindows" />.</permission>
      </Docs>
    </Member>
    <Member MemberName="CopyFromScreen">
      <MemberSignature Language="C#" Value="public void CopyFromScreen (System.Drawing.Point upperLeftSource, System.Drawing.Point upperLeftDestination, System.Drawing.Size blockRegionSize, System.Drawing.CopyPixelOperation copyPixelOperation);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void CopyFromScreen(valuetype System.Drawing.Point upperLeftSource, valuetype System.Drawing.Point upperLeftDestination, valuetype System.Drawing.Size blockRegionSize, valuetype System.Drawing.CopyPixelOperation copyPixelOperation) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.CopyFromScreen(System.Drawing.Point,System.Drawing.Point,System.Drawing.Size,System.Drawing.CopyPixelOperation)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void CopyFromScreen(System::Drawing::Point upperLeftSource, System::Drawing::Point upperLeftDestination, System::Drawing::Size blockRegionSize, System::Drawing::CopyPixelOperation copyPixelOperation);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="upperLeftSource" Type="System.Drawing.Point" />
        <Parameter Name="upperLeftDestination" Type="System.Drawing.Point" />
        <Parameter Name="blockRegionSize" Type="System.Drawing.Size" />
        <Parameter Name="copyPixelOperation" Type="System.Drawing.CopyPixelOperation" />
      </Parameters>
      <Docs>
        <param name="upperLeftSource">Точка в верхнем левом углу исходного прямоугольника.</param>
        <param name="upperLeftDestination">Точка в верхнем левом углу целевого прямоугольника.</param>
        <param name="blockRegionSize">Размер передаваемой области.</param>
        <param name="copyPixelOperation">Одно из значений перечисления <see cref="T:System.Drawing.CopyPixelOperation" />.</param>
        <summary>Выполняет перемещение набора битов данных о цвете, соответствующих прямоугольнику пикселей, с экрана на поверхность рисования объекта <see cref="T:System.Drawing.Graphics" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Drawing.Graphics.CopyFromScreen%2A> Методы полезны для слоев одного образа в другую. `copyPixelOperation` Параметр позволяет указать, если и как исходные цвета смешивались цветами в области назначения.  
  
   
  
## Examples  
 В следующем примере показано использование метода <xref:System.Drawing.Graphics.CopyFromScreen%2A>. Чтобы выполнить этот пример, вставьте его в форму Windows Forms. Обрабатывать формы <xref:System.Windows.Forms.Control.Paint> событий и вызовов `CopyPixels2` метод <xref:System.Windows.Forms.Control.Paint> метод обработки событий, передав `e` как <xref:System.Windows.Forms.PaintEventArgs>.  
  
 [!code-csharp[System.Drawing.MiscWhidbeySnippets#5](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.MiscWhidbeySnippets/CS/Form1.cs#5)]
 [!code-vb[System.Drawing.MiscWhidbeySnippets#5](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.MiscWhidbeySnippets/VB/Form1.vb#5)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ComponentModel.InvalidEnumArgumentException">
          Объект <paramref name="copyPixelOperation" /> не является членом <see cref="T:System.Drawing.CopyPixelOperation" />.</exception>
        <exception cref="T:System.ComponentModel.Win32Exception">Операция выполнена со сбоем.</exception>
        <permission cref="T:System.Security.Permissions.UIPermission">для доступа ко всем окнам. Связанные перечисления: <see cref="F:System.Security.Permissions.UIPermissionWindow.AllWindows" />.</permission>
      </Docs>
    </Member>
    <Member MemberName="CopyFromScreen">
      <MemberSignature Language="C#" Value="public void CopyFromScreen (int sourceX, int sourceY, int destinationX, int destinationY, System.Drawing.Size blockRegionSize);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void CopyFromScreen(int32 sourceX, int32 sourceY, int32 destinationX, int32 destinationY, valuetype System.Drawing.Size blockRegionSize) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.CopyFromScreen(System.Int32,System.Int32,System.Int32,System.Int32,System.Drawing.Size)" />
      <MemberSignature Language="VB.NET" Value="Public Sub CopyFromScreen (sourceX As Integer, sourceY As Integer, destinationX As Integer, destinationY As Integer, blockRegionSize As Size)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void CopyFromScreen(int sourceX, int sourceY, int destinationX, int destinationY, System::Drawing::Size blockRegionSize);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="sourceX" Type="System.Int32" />
        <Parameter Name="sourceY" Type="System.Int32" />
        <Parameter Name="destinationX" Type="System.Int32" />
        <Parameter Name="destinationY" Type="System.Int32" />
        <Parameter Name="blockRegionSize" Type="System.Drawing.Size" />
      </Parameters>
      <Docs>
        <param name="sourceX">Координата X точки в верхнем левом углу исходного прямоугольника.</param>
        <param name="sourceY">Координата Y точки в верхнем левом углу исходного прямоугольника.</param>
        <param name="destinationX">Координата X точки в верхнем левом углу целевого прямоугольника.</param>
        <param name="destinationY">Координата Y точки в верхнем левом углу целевого прямоугольника.</param>
        <param name="blockRegionSize">Размер передаваемой области.</param>
        <summary>Выполняет перемещение набора битов данных о цвете, соответствующих прямоугольнику пикселей, с экрана на поверхность рисования объекта <see cref="T:System.Drawing.Graphics" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Drawing.Graphics.CopyFromScreen%2A> Методы полезны для слоев одного образа в другую. Чтобы указать, как исходный и конечный цвета смешиваются, используйте один из <xref:System.Drawing.Graphics.CopyFromScreen%2A> методов, принимающих <xref:System.Drawing.CopyPixelOperation> параметра.  
  
   
  
## Examples  
 В следующем примере кода демонстрируется использование <xref:System.Drawing.Graphics.CopyFromScreen%2A> для печати копии текущей формы.  
  
 [!code-csharp[System.Drawing.Graphics.CopyFromScreen#1](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.Graphics.CopyFromScreen/CS/Form1.cs#1)]
 [!code-vb[System.Drawing.Graphics.CopyFromScreen#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.Graphics.CopyFromScreen/VB/Form1.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ComponentModel.Win32Exception">Операция выполнена со сбоем.</exception>
        <permission cref="T:System.Security.Permissions.UIPermission">для доступа ко всем окнам. Связанные перечисления: <see cref="F:System.Security.Permissions.UIPermissionWindow.AllWindows" />.</permission>
      </Docs>
    </Member>
    <Member MemberName="CopyFromScreen">
      <MemberSignature Language="C#" Value="public void CopyFromScreen (int sourceX, int sourceY, int destinationX, int destinationY, System.Drawing.Size blockRegionSize, System.Drawing.CopyPixelOperation copyPixelOperation);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void CopyFromScreen(int32 sourceX, int32 sourceY, int32 destinationX, int32 destinationY, valuetype System.Drawing.Size blockRegionSize, valuetype System.Drawing.CopyPixelOperation copyPixelOperation) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.CopyFromScreen(System.Int32,System.Int32,System.Int32,System.Int32,System.Drawing.Size,System.Drawing.CopyPixelOperation)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void CopyFromScreen(int sourceX, int sourceY, int destinationX, int destinationY, System::Drawing::Size blockRegionSize, System::Drawing::CopyPixelOperation copyPixelOperation);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="sourceX" Type="System.Int32" />
        <Parameter Name="sourceY" Type="System.Int32" />
        <Parameter Name="destinationX" Type="System.Int32" />
        <Parameter Name="destinationY" Type="System.Int32" />
        <Parameter Name="blockRegionSize" Type="System.Drawing.Size" />
        <Parameter Name="copyPixelOperation" Type="System.Drawing.CopyPixelOperation" />
      </Parameters>
      <Docs>
        <param name="sourceX">Координата X точки в верхнем левом углу исходного прямоугольника.</param>
        <param name="sourceY">Координата Y точки в верхнем левом углу исходного прямоугольника.</param>
        <param name="destinationX">Координата X точки в верхнем левом углу целевого прямоугольника.</param>
        <param name="destinationY">Координата Y точки в верхнем левом углу целевого прямоугольника.</param>
        <param name="blockRegionSize">Размер передаваемой области.</param>
        <param name="copyPixelOperation">Одно из значений перечисления <see cref="T:System.Drawing.CopyPixelOperation" />.</param>
        <summary>Выполняет перемещение набора битов данных о цвете, соответствующих прямоугольнику пикселей, с экрана на поверхность рисования объекта <see cref="T:System.Drawing.Graphics" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Drawing.Graphics.CopyFromScreen%2A> Методы полезны для слоев одного образа в другую. `copyPixelOperation` Параметр позволяет указать, если и как исходные цвета смешивались цветами в области назначения.  
  
   
  
## Examples  
 В следующем примере показано использование метода <xref:System.Drawing.Graphics.CopyFromScreen%2A>. Чтобы выполнить этот пример, вставьте его в форму Windows Forms. Обрабатывать формы <xref:System.Windows.Forms.Control.Paint> событий и вызовов `CopyPixels4` метод <xref:System.Windows.Forms.Control.Paint> метод обработки событий, передав `e` как <xref:System.Windows.Forms.PaintEventArgs>.  
  
 [!code-csharp[System.Drawing.MiscWhidbeySnippets#7](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.MiscWhidbeySnippets/CS/Form1.cs#7)]
 [!code-vb[System.Drawing.MiscWhidbeySnippets#7](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.MiscWhidbeySnippets/VB/Form1.vb#7)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ComponentModel.InvalidEnumArgumentException">
          Объект <paramref name="copyPixelOperation" /> не является членом <see cref="T:System.Drawing.CopyPixelOperation" />.</exception>
        <exception cref="T:System.ComponentModel.Win32Exception">Операция выполнена со сбоем.</exception>
        <permission cref="T:System.Security.Permissions.UIPermission">для доступа ко всем окнам. Связанные перечисления: <see cref="F:System.Security.Permissions.UIPermissionWindow.AllWindows" />.</permission>
      </Docs>
    </Member>
    <Member MemberName="Dispose">
      <MemberSignature Language="C#" Value="public void Dispose ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Dispose() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.Dispose" />
      <MemberSignature Language="VB.NET" Value="Public Sub Dispose ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void Dispose();" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.IDisposable.Dispose</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Освобождает все ресурсы, используемые этим объектом <see cref="T:System.Drawing.Graphics" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Вызов <xref:System.Drawing.Graphics.Dispose%2A> позволяет ресурсы, используемые <xref:System.Drawing.Graphics> перераспределить для других целей.  
  
   
  
## Examples  
 Следующий пример кода предназначен для работы с Windows Forms, и для него необходим <xref:System.Windows.Forms.PaintEventArgs> `e`, который является параметром <xref:System.Windows.Forms.Control.Paint> обработчика событий. Код выполняет следующие действия.  
  
-   Создает <xref:System.Drawing.Image> из графического файла SampImag.jpg в каталоге.  
  
-   Создает <xref:System.Drawing.Graphics> из <xref:System.Drawing.Image>.  
  
-   Изменяет изображение, выполняя заливку прямоугольника внутри него.  
  
-   Рисует <xref:System.Drawing.Image> на экране.  
  
-   Освобождает созданный <xref:System.Drawing.Graphics>.  
  
 [!code-cpp[System.Drawing.ClassicGraphicsExamples#6](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples/CPP/form1.cpp#6)]
 [!code-csharp[System.Drawing.ClassicGraphicsExamples#6](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples/CS/form1.cs#6)]
 [!code-vb[System.Drawing.ClassicGraphicsExamples#6](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples/VB/form1.vb#6)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="DpiX">
      <MemberSignature Language="C#" Value="public float DpiX { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance float32 DpiX" />
      <MemberSignature Language="DocId" Value="P:System.Drawing.Graphics.DpiX" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property DpiX As Single" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property float DpiX { float get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Single</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Возвращает горизонтальное разрешение данного объекта <see cref="T:System.Drawing.Graphics" />.</summary>
        <value>Значение горизонтального разрешения в точках на дюйм, поддерживаемое данным объектом <see cref="T:System.Drawing.Graphics" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Дополнительные сведения о создании приложений с высоким разрешением см. в разделе  
  
 [Высокое разрешение](http://go.microsoft.com/fwlink/?LinkId=159804).  
  
   
  
## Examples  
 В следующем методе показано использование <xref:System.Drawing.Graphics.DpiX%2A> и <xref:System.Drawing.Graphics.DpiY%2A> свойства. Этот пример предназначен для использования с Windows Form. Чтобы выполнить этот пример, вставьте его в форму, содержащую <xref:System.Windows.Forms.ListBox> с именем listBox1 и вызовите этот метод из конструктора формы.  
  
 [!code-cpp[System.Drawing.MiscExamples#4](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.MiscExamples/CPP/form1.cpp#4)]
 [!code-csharp[System.Drawing.MiscExamples#4](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.MiscExamples/CS/form1.cs#4)]
 [!code-vb[System.Drawing.MiscExamples#4](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.MiscExamples/VB/form1.vb#4)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="DpiY">
      <MemberSignature Language="C#" Value="public float DpiY { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance float32 DpiY" />
      <MemberSignature Language="DocId" Value="P:System.Drawing.Graphics.DpiY" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property DpiY As Single" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property float DpiY { float get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Single</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Возвращает вертикальное разрешение данного объекта <see cref="T:System.Drawing.Graphics" />.</summary>
        <value>Значение вертикального разрешения в точках на дюйм, поддерживаемое данным объектом <see cref="T:System.Drawing.Graphics" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Дополнительные сведения о создании приложений с высоким разрешением см. в разделе  
  
 [Высокое разрешение](http://go.microsoft.com/fwlink/?LinkId=159804).  
  
   
  
## Examples  
 В следующем методе показано использование <xref:System.Drawing.Graphics.DpiX%2A> и <xref:System.Drawing.Graphics.DpiY%2A> свойства. Этот пример предназначен для использования с Windows Form. Чтобы выполнить этот пример, вставьте его в форму, содержащую <xref:System.Windows.Forms.ListBox> с именем listBox1 и вызовите этот метод из конструктора формы.  
  
 [!code-cpp[System.Drawing.MiscExamples#4](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.MiscExamples/CPP/form1.cpp#4)]
 [!code-csharp[System.Drawing.MiscExamples#4](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.MiscExamples/CS/form1.cs#4)]
 [!code-vb[System.Drawing.MiscExamples#4](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.MiscExamples/VB/form1.vb#4)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="DrawArc">
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Рисует дугу, которая является частью эллипса, заданного парой координат, шириной и высотой.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="DrawArc">
      <MemberSignature Language="C#" Value="public void DrawArc (System.Drawing.Pen pen, System.Drawing.Rectangle rect, float startAngle, float sweepAngle);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void DrawArc(class System.Drawing.Pen pen, valuetype System.Drawing.Rectangle rect, float32 startAngle, float32 sweepAngle) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.DrawArc(System.Drawing.Pen,System.Drawing.Rectangle,System.Single,System.Single)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void DrawArc(System::Drawing::Pen ^ pen, System::Drawing::Rectangle rect, float startAngle, float sweepAngle);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="pen" Type="System.Drawing.Pen" />
        <Parameter Name="rect" Type="System.Drawing.Rectangle" />
        <Parameter Name="startAngle" Type="System.Single" />
        <Parameter Name="sweepAngle" Type="System.Single" />
      </Parameters>
      <Docs>
        <param name="pen">
          Объект <see cref="T:System.Drawing.Pen" />, определяющий цвет, ширину и стиль дуги.</param>
        <param name="rect">
          Структура <see cref="T:System.Drawing.RectangleF" />, определяющая границы эллипса.</param>
        <param name="startAngle">Угол (в градусах), который измеряется по часовой стрелке, начиная от оси X и заканчивая начальной точкой дуги.</param>
        <param name="sweepAngle">Угол (в градусах), который измеряется по часовой стрелке, начиная от значения параметра <c>startAngle</c> и заканчивая конечной точкой дуги.</param>
        <summary>Рисует дугу, которая является частью эллипса, заданного структурой <see cref="T:System.Drawing.Rectangle" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Этот метод рисует дугу, которая является частью периметра эллипса. Эллипс определяется границами прямоугольника. Дуга является частью периметра эллипса между `startAngle` параметр и `startAngle`  +  `sweepAngle` параметров.  
  
   
  
## Examples  
 Следующий пример кода предназначен для работы с Windows Forms, и для него необходим <xref:System.Windows.Forms.PaintEventArgs> `e`, который является параметром <xref:System.Windows.Forms.Control.Paint> обработчика событий. Код выполняет следующие действия.  
  
-   Создает черного пера.  
  
-   Создает прямоугольник, который будет ограничивать эллипс.  
  
-   Определяет начальную (45 градусов) и углы поворота (270 градусов).  
  
-   Выводит на экран эллиптической дуги.  
  
 Результатом является частичной эллипс отсутствует сегмент между + и - 45 градусов по оси x.  
  
 [!code-cpp[System.Drawing.ClassicGraphicsExamples#7](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples/CPP/form1.cpp#7)]
 [!code-csharp[System.Drawing.ClassicGraphicsExamples#7](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples/CS/form1.cs#7)]
 [!code-vb[System.Drawing.ClassicGraphicsExamples#7](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples/VB/form1.vb#7)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          Свойство <paramref name="pen" /> имеет значение <see langword="null" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="DrawArc">
      <MemberSignature Language="C#" Value="public void DrawArc (System.Drawing.Pen pen, System.Drawing.RectangleF rect, float startAngle, float sweepAngle);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void DrawArc(class System.Drawing.Pen pen, valuetype System.Drawing.RectangleF rect, float32 startAngle, float32 sweepAngle) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.DrawArc(System.Drawing.Pen,System.Drawing.RectangleF,System.Single,System.Single)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void DrawArc(System::Drawing::Pen ^ pen, System::Drawing::RectangleF rect, float startAngle, float sweepAngle);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="pen" Type="System.Drawing.Pen" />
        <Parameter Name="rect" Type="System.Drawing.RectangleF" />
        <Parameter Name="startAngle" Type="System.Single" />
        <Parameter Name="sweepAngle" Type="System.Single" />
      </Parameters>
      <Docs>
        <param name="pen">
          Объект <see cref="T:System.Drawing.Pen" />, определяющий цвет, ширину и стиль дуги.</param>
        <param name="rect">
          Структура <see cref="T:System.Drawing.RectangleF" />, определяющая границы эллипса.</param>
        <param name="startAngle">Угол (в градусах), который измеряется по часовой стрелке, начиная от оси X и заканчивая начальной точкой дуги.</param>
        <param name="sweepAngle">Угол (в градусах), который измеряется по часовой стрелке, начиная от значения параметра <c>startAngle</c> и заканчивая конечной точкой дуги.</param>
        <summary>Рисует дугу, которая является частью эллипса, заданного структурой <see cref="T:System.Drawing.RectangleF" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Этот метод рисует дугу, которая является частью периметра эллипса. Эллипс определяется границами прямоугольника. Дуга является частью периметра эллипса между `startAngle` параметр и `startAngle`  +  `sweepAngle` параметров.  
  
   
  
## Examples  
 Следующий пример кода предназначен для работы с Windows Forms, и для него необходим <xref:System.Windows.Forms.PaintEventArgs> `e`, который является параметром <xref:System.Windows.Forms.Control.Paint> обработчика событий. Код выполняет следующие действия.  
  
-   Создает черного пера.  
  
-   Создает прямоугольник, который будет ограничивать эллипс.  
  
-   Определяет начальную (45 градусов) и углы поворота (270 градусов).  
  
-   Выводит на экран эллиптической дуги.  
  
 Результатом является частичной эллипс отсутствует сегмент между + и - 45 градусов по оси x.  
  
 [!code-cpp[System.Drawing.ClassicGraphicsExamples#8](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples/CPP/form1.cpp#8)]
 [!code-csharp[System.Drawing.ClassicGraphicsExamples#8](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples/CS/form1.cs#8)]
 [!code-vb[System.Drawing.ClassicGraphicsExamples#8](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples/VB/form1.vb#8)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="pen" /> равно <see langword="null" /></exception>
      </Docs>
    </Member>
    <Member MemberName="DrawArc">
      <MemberSignature Language="C#" Value="public void DrawArc (System.Drawing.Pen pen, int x, int y, int width, int height, int startAngle, int sweepAngle);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void DrawArc(class System.Drawing.Pen pen, int32 x, int32 y, int32 width, int32 height, int32 startAngle, int32 sweepAngle) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.DrawArc(System.Drawing.Pen,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void DrawArc(System::Drawing::Pen ^ pen, int x, int y, int width, int height, int startAngle, int sweepAngle);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="pen" Type="System.Drawing.Pen" />
        <Parameter Name="x" Type="System.Int32" />
        <Parameter Name="y" Type="System.Int32" />
        <Parameter Name="width" Type="System.Int32" />
        <Parameter Name="height" Type="System.Int32" />
        <Parameter Name="startAngle" Type="System.Int32" />
        <Parameter Name="sweepAngle" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="pen">
          Объект <see cref="T:System.Drawing.Pen" />, определяющий цвет, ширину и стиль дуги.</param>
        <param name="x">Координата X верхнего левого угла прямоугольника, определяющего эллипс.</param>
        <param name="y">Координата Y верхнего левого угла прямоугольника, определяющего эллипс.</param>
        <param name="width">Ширина прямоугольника, определяющего эллипс.</param>
        <param name="height">Высота прямоугольника, определяющего эллипс.</param>
        <param name="startAngle">Угол (в градусах), который измеряется по часовой стрелке, начиная от оси X и заканчивая начальной точкой дуги.</param>
        <param name="sweepAngle">Угол (в градусах), который измеряется по часовой стрелке, начиная от значения параметра <c>startAngle</c> и заканчивая конечной точкой дуги.</param>
        <summary>Рисует дугу, которая является частью эллипса, заданного парой координат, шириной и высотой.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Этот метод рисует дугу, которая является частью периметра эллипса. Эллипс определяется границами прямоугольника. Дуга является частью периметра эллипса между `startAngle` параметр и `startAngle`  +  `sweepAngle` параметров.  
  
   
  
## Examples  
 Следующий пример кода предназначен для работы с Windows Forms, и для него необходим <xref:System.Windows.Forms.PaintEventArgs> `e`, который является параметром <xref:System.Windows.Forms.Control.Paint> обработчика событий. Код выполняет следующие действия.  
  
-   Создает черного пера.  
  
-   Определяет положение и размер прямоугольника, который будет ограничивать эллипс.  
  
-   Определяет начальную (45 градусов) и углы поворота (270 градусов).  
  
-   Выводит на экран эллиптической дуги.  
  
 Результатом является частичной эллипс отсутствует сегмент между + и - 45 градусов по оси x.  
  
 [!code-cpp[System.Drawing.ClassicGraphicsExamples#9](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples/CPP/form1.cpp#9)]
 [!code-csharp[System.Drawing.ClassicGraphicsExamples#9](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples/CS/form1.cs#9)]
 [!code-vb[System.Drawing.ClassicGraphicsExamples#9](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples/VB/form1.vb#9)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="rects" /> представляет собой массив нулевой длины.</exception>
      </Docs>
    </Member>
    <Member MemberName="DrawArc">
      <MemberSignature Language="C#" Value="public void DrawArc (System.Drawing.Pen pen, float x, float y, float width, float height, float startAngle, float sweepAngle);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void DrawArc(class System.Drawing.Pen pen, float32 x, float32 y, float32 width, float32 height, float32 startAngle, float32 sweepAngle) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.DrawArc(System.Drawing.Pen,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void DrawArc(System::Drawing::Pen ^ pen, float x, float y, float width, float height, float startAngle, float sweepAngle);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="pen" Type="System.Drawing.Pen" />
        <Parameter Name="x" Type="System.Single" />
        <Parameter Name="y" Type="System.Single" />
        <Parameter Name="width" Type="System.Single" />
        <Parameter Name="height" Type="System.Single" />
        <Parameter Name="startAngle" Type="System.Single" />
        <Parameter Name="sweepAngle" Type="System.Single" />
      </Parameters>
      <Docs>
        <param name="pen">
          Объект <see cref="T:System.Drawing.Pen" />, определяющий цвет, ширину и стиль дуги.</param>
        <param name="x">Координата X верхнего левого угла прямоугольника, определяющего эллипс.</param>
        <param name="y">Координата Y верхнего левого угла прямоугольника, определяющего эллипс.</param>
        <param name="width">Ширина прямоугольника, определяющего эллипс.</param>
        <param name="height">Высота прямоугольника, определяющего эллипс.</param>
        <param name="startAngle">Угол (в градусах), который измеряется по часовой стрелке, начиная от оси X и заканчивая начальной точкой дуги.</param>
        <param name="sweepAngle">Угол (в градусах), который измеряется по часовой стрелке, начиная от значения параметра <c>startAngle</c> и заканчивая конечной точкой дуги.</param>
        <summary>Рисует дугу, которая является частью эллипса, заданного парой координат, шириной и высотой.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Этот метод рисует дугу, которая является частью периметра эллипса. Эллипс определяется границами прямоугольника. Дуга является частью периметра эллипса между `startAngle` параметр и `startAngle`  +  `sweepAngle` параметров.  
  
   
  
## Examples  
 Следующий пример кода предназначен для работы с Windows Forms, и для него необходим <xref:System.Windows.Forms.PaintEventArgs> `e`, который является параметром <xref:System.Windows.Forms.Control.Paint> обработчика событий. Код выполняет следующие действия.  
  
-   Создает черного пера.  
  
-   Определяет положение и размер прямоугольника, который будет ограничивать эллипс.  
  
-   Определяет начальную (45 градусов) и углы поворота (270 градусов).  
  
-   Выводит на экран эллиптической дуги.  
  
 Результатом является частичной эллипс отсутствует сегмент между + и - 45 градусов по оси x.  
  
 [!code-cpp[System.Drawing.ClassicGraphicsExamples#10](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples/CPP/form1.cpp#10)]
 [!code-csharp[System.Drawing.ClassicGraphicsExamples#10](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples/CS/form1.cs#10)]
 [!code-vb[System.Drawing.ClassicGraphicsExamples#10](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples/VB/form1.vb#10)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          Свойство <paramref name="pen" /> имеет значение <see langword="null" />.</exception>
      </Docs>
    </Member>
    <MemberGroup MemberName="DrawBezier">
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Строит сплайн Безье, определяемый четырьмя структурами <see cref="T:System.Drawing.Point" />.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="DrawBezier">
      <MemberSignature Language="C#" Value="public void DrawBezier (System.Drawing.Pen pen, System.Drawing.Point pt1, System.Drawing.Point pt2, System.Drawing.Point pt3, System.Drawing.Point pt4);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void DrawBezier(class System.Drawing.Pen pen, valuetype System.Drawing.Point pt1, valuetype System.Drawing.Point pt2, valuetype System.Drawing.Point pt3, valuetype System.Drawing.Point pt4) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.DrawBezier(System.Drawing.Pen,System.Drawing.Point,System.Drawing.Point,System.Drawing.Point,System.Drawing.Point)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void DrawBezier(System::Drawing::Pen ^ pen, System::Drawing::Point pt1, System::Drawing::Point pt2, System::Drawing::Point pt3, System::Drawing::Point pt4);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="pen" Type="System.Drawing.Pen" />
        <Parameter Name="pt1" Type="System.Drawing.Point" />
        <Parameter Name="pt2" Type="System.Drawing.Point" />
        <Parameter Name="pt3" Type="System.Drawing.Point" />
        <Parameter Name="pt4" Type="System.Drawing.Point" />
      </Parameters>
      <Docs>
        <param name="pen">
          Структура <see cref="T:System.Drawing.Pen" />, определяющая цвет, ширину и стиль кривой.</param>
        <param name="pt1">
          Структура <see cref="T:System.Drawing.Point" />, представляющая начальную точку кривой.</param>
        <param name="pt2">
          Структура <see cref="T:System.Drawing.Point" />, представляющая первую контрольную точку кривой.</param>
        <param name="pt3">
          Структура <see cref="T:System.Drawing.Point" />, представляющая вторую контрольную точку кривой.</param>
        <param name="pt4">
          Структура <see cref="T:System.Drawing.Point" />, представляющая конечную точку кривой.</param>
        <summary>Строит сплайн Безье, определяемый четырьмя структурами <see cref="T:System.Drawing.Point" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Кривая Безье рисуется с первой точки к четвертой точке. Второй и третьей точек, контрольные точки, которые определяют форму кривой.  
  
   
  
## Examples  
 Следующий пример кода предназначен для работы с Windows Forms, и для него необходим <xref:System.Windows.Forms.PaintEventArgs> `e`, который является параметром <xref:System.Windows.Forms.Control.Paint> обработчика событий. Код выполняет следующие действия.  
  
-   Создает черного пера.  
  
-   Создает начала, окончания и две контрольные точки кривой.  
  
-   Выводит на экран кривую Безье.  
  
 [!code-cpp[System.Drawing.ClassicGraphicsExamples#11](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples/CPP/form1.cpp#11)]
 [!code-csharp[System.Drawing.ClassicGraphicsExamples#11](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples/CS/form1.cs#11)]
 [!code-vb[System.Drawing.ClassicGraphicsExamples#11](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples/VB/form1.vb#11)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          Свойство <paramref name="pen" /> имеет значение <see langword="null" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="DrawBezier">
      <MemberSignature Language="C#" Value="public void DrawBezier (System.Drawing.Pen pen, System.Drawing.PointF pt1, System.Drawing.PointF pt2, System.Drawing.PointF pt3, System.Drawing.PointF pt4);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void DrawBezier(class System.Drawing.Pen pen, valuetype System.Drawing.PointF pt1, valuetype System.Drawing.PointF pt2, valuetype System.Drawing.PointF pt3, valuetype System.Drawing.PointF pt4) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.DrawBezier(System.Drawing.Pen,System.Drawing.PointF,System.Drawing.PointF,System.Drawing.PointF,System.Drawing.PointF)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void DrawBezier(System::Drawing::Pen ^ pen, System::Drawing::PointF pt1, System::Drawing::PointF pt2, System::Drawing::PointF pt3, System::Drawing::PointF pt4);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="pen" Type="System.Drawing.Pen" />
        <Parameter Name="pt1" Type="System.Drawing.PointF" />
        <Parameter Name="pt2" Type="System.Drawing.PointF" />
        <Parameter Name="pt3" Type="System.Drawing.PointF" />
        <Parameter Name="pt4" Type="System.Drawing.PointF" />
      </Parameters>
      <Docs>
        <param name="pen">
          Структура <see cref="T:System.Drawing.Pen" />, определяющая цвет, ширину и стиль кривой.</param>
        <param name="pt1">
          Структура <see cref="T:System.Drawing.PointF" />, представляющая начальную точку кривой.</param>
        <param name="pt2">
          Структура <see cref="T:System.Drawing.PointF" />, представляющая первую контрольную точку кривой.</param>
        <param name="pt3">
          Структура <see cref="T:System.Drawing.PointF" />, представляющая вторую контрольную точку кривой.</param>
        <param name="pt4">
          Структура <see cref="T:System.Drawing.PointF" />, представляющая конечную точку кривой.</param>
        <summary>Строит сплайн Безье, определяемый четырьмя структурами <see cref="T:System.Drawing.PointF" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Кривая Безье рисуется от первой точки к четвертой точке. Второй и третьей точек, контрольные точки, которые определяют форму кривой.  
  
   
  
## Examples  
 Следующий пример кода предназначен для работы с Windows Forms, и для него необходим <xref:System.Windows.Forms.PaintEventArgs> `e`, который является параметром <xref:System.Windows.Forms.Control.Paint> обработчика событий. Код выполняет следующие действия.  
  
-   Создает черного пера.  
  
-   Создает начала, окончания и две контрольные точки кривой.  
  
-   Выводит на экран кривую Безье.  
  
 [!code-cpp[System.Drawing.ClassicGraphicsExamples#12](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples/CPP/form1.cpp#12)]
 [!code-csharp[System.Drawing.ClassicGraphicsExamples#12](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples/CS/form1.cs#12)]
 [!code-vb[System.Drawing.ClassicGraphicsExamples#12](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples/VB/form1.vb#12)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          Свойство <paramref name="pen" /> имеет значение <see langword="null" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="DrawBezier">
      <MemberSignature Language="C#" Value="public void DrawBezier (System.Drawing.Pen pen, float x1, float y1, float x2, float y2, float x3, float y3, float x4, float y4);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void DrawBezier(class System.Drawing.Pen pen, float32 x1, float32 y1, float32 x2, float32 y2, float32 x3, float32 y3, float32 x4, float32 y4) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.DrawBezier(System.Drawing.Pen,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void DrawBezier(System::Drawing::Pen ^ pen, float x1, float y1, float x2, float y2, float x3, float y3, float x4, float y4);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="pen" Type="System.Drawing.Pen" />
        <Parameter Name="x1" Type="System.Single" />
        <Parameter Name="y1" Type="System.Single" />
        <Parameter Name="x2" Type="System.Single" />
        <Parameter Name="y2" Type="System.Single" />
        <Parameter Name="x3" Type="System.Single" />
        <Parameter Name="y3" Type="System.Single" />
        <Parameter Name="x4" Type="System.Single" />
        <Parameter Name="y4" Type="System.Single" />
      </Parameters>
      <Docs>
        <param name="pen">
          Структура <see cref="T:System.Drawing.Pen" />, определяющая цвет, ширину и стиль кривой.</param>
        <param name="x1">Координата X начальной точки кривой.</param>
        <param name="y1">Координата Y начальной точки кривой.</param>
        <param name="x2">Координата X первой контрольной точки кривой.</param>
        <param name="y2">Координата Y первой контрольной точки кривой.</param>
        <param name="x3">Координата X второй контрольной точки кривой.</param>
        <param name="y3">Координата Y второй контрольной точки кривой.</param>
        <param name="x4">Координата X конечной точки кривой.</param>
        <param name="y4">Координата Y конечной точки кривой.</param>
        <summary>Строит сплайн Безье, определяемый четырьмя упорядоченными парами координат, которые представляют точки.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Кривая Безье рисуется от первой точки к четвертой точке. Второй и третьей точек, контрольные точки, которые определяют форму кривой.  
  
   
  
## Examples  
 Следующий пример кода предназначен для работы с Windows Forms, и для него необходим <xref:System.Windows.Forms.PaintEventArgs> `e`, который является параметром <xref:System.Windows.Forms.Control.Paint> обработчика событий. Код выполняет следующие действия.  
  
-   Создает черного пера.  
  
-   Определяет координаты начала, окончания и две контрольные точки кривой.  
  
-   Выводит на экран кривую Безье.  
  
 [!code-cpp[System.Drawing.ClassicGraphicsExamples#13](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples/CPP/form1.cpp#13)]
 [!code-csharp[System.Drawing.ClassicGraphicsExamples#13](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples/CS/form1.cs#13)]
 [!code-vb[System.Drawing.ClassicGraphicsExamples#13](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples/VB/form1.vb#13)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          Свойство <paramref name="pen" /> имеет значение <see langword="null" />.</exception>
      </Docs>
    </Member>
    <MemberGroup MemberName="DrawBeziers">
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Строит последовательность сплайнов Безье из массива структур <see cref="T:System.Drawing.Point" />.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="DrawBeziers">
      <MemberSignature Language="C#" Value="public void DrawBeziers (System.Drawing.Pen pen, System.Drawing.Point[] points);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void DrawBeziers(class System.Drawing.Pen pen, valuetype System.Drawing.Point[] points) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.DrawBeziers(System.Drawing.Pen,System.Drawing.Point[])" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void DrawBeziers(System::Drawing::Pen ^ pen, cli::array &lt;System::Drawing::Point&gt; ^ points);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="pen" Type="System.Drawing.Pen" />
        <Parameter Name="points" Type="System.Drawing.Point[]" />
      </Parameters>
      <Docs>
        <param name="pen">
          Структура <see cref="T:System.Drawing.Pen" />, определяющая цвет, ширину и стиль кривой.</param>
        <param name="points">Массив структур <see cref="T:System.Drawing.Point" />, представляющий точки, которые  определяют кривую. Количество точек в массиве должно быть кратно трем плюс 1, например 4, 7 или 10.</param>
        <summary>Строит последовательность сплайнов Безье из массива структур <see cref="T:System.Drawing.Point" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Количество точек в массиве должно быть кратно трем плюс 1, поскольку первый сплайн требует 4 точки и любые другие сплайнов требует трех точек. Первая кривая Безье строится с первой точки к четвертой точке в массиве точек. Второй и третьей точек, контрольные точки, которые определяют форму кривой. Каждой последующей кривой нужны ровно три точки: две дополнительные контрольные точки и одна конечная точка. Конечной точки предыдущей кривой используется в качестве отправной точки для каждой дополнительной кривой.  
  
   
  
## Examples  
 Следующий пример кода предназначен для работы с Windows Forms, и для него необходим <xref:System.Windows.Forms.PaintEventArgs> `e`, который является параметром <xref:System.Windows.Forms.Control.Paint> обработчика событий. Код выполняет следующие действия.  
  
-   Создает черного пера.  
  
-   Создает начала, окончания и две контрольные точки для первой кривой, конечную точку и две контрольные точки для второй кривой.  
  
-   Рисование кривых Безье на экране.  
  
 [!code-cpp[System.Drawing.ClassicGraphicsExamples#14](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples/CPP/form1.cpp#14)]
 [!code-csharp[System.Drawing.ClassicGraphicsExamples#14](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples/CS/form1.cs#14)]
 [!code-vb[System.Drawing.ClassicGraphicsExamples#14](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples/VB/form1.vb#14)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          Свойство <paramref name="pen" /> имеет значение <see langword="null" />.  
  
 - или -  
  
 Свойство <paramref name="points" /> имеет значение <see langword="null" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="DrawBeziers">
      <MemberSignature Language="C#" Value="public void DrawBeziers (System.Drawing.Pen pen, System.Drawing.PointF[] points);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void DrawBeziers(class System.Drawing.Pen pen, valuetype System.Drawing.PointF[] points) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.DrawBeziers(System.Drawing.Pen,System.Drawing.PointF[])" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void DrawBeziers(System::Drawing::Pen ^ pen, cli::array &lt;System::Drawing::PointF&gt; ^ points);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="pen" Type="System.Drawing.Pen" />
        <Parameter Name="points" Type="System.Drawing.PointF[]" />
      </Parameters>
      <Docs>
        <param name="pen">
          Структура <see cref="T:System.Drawing.Pen" />, определяющая цвет, ширину и стиль кривой.</param>
        <param name="points">Массив структур <see cref="T:System.Drawing.PointF" />, представляющий точки, которые  определяют кривую. Количество точек в массиве должно быть кратно трем плюс 1, например 4, 7 или 10.</param>
        <summary>Строит последовательность сплайнов Безье из массива структур <see cref="T:System.Drawing.PointF" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Количество точек в массиве должно быть кратно трем плюс 1, поскольку первый сплайн требует 4 точки и любые другие сплайнов требует трех точек. Первая кривая Безье рисуется от первой точки к четвертой точке в массиве точек. Второй и третьей точек, контрольные точки, которые определяют форму кривой. Каждой последующей кривой нужны ровно три точки: две дополнительные контрольные точки и одна конечная точка. Конечной точки предыдущей кривой используется в качестве отправной точки для каждой дополнительной кривой.  
  
   
  
## Examples  
 Следующий пример кода предназначен для работы с Windows Forms, и для него необходим <xref:System.Windows.Forms.PaintEventArgs> `e`, который является параметром <xref:System.Windows.Forms.Control.Paint> обработчика событий. Код выполняет следующие действия.  
  
-   Создает черного пера.  
  
-   Создает начала, окончания и две контрольные точки для первой кривой, конечную точку и две контрольные точки для второй кривой.  
  
-   Рисование кривых Безье на экране.  
  
 [!code-cpp[System.Drawing.ClassicGraphicsExamples#15](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples/CPP/form1.cpp#15)]
 [!code-csharp[System.Drawing.ClassicGraphicsExamples#15](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples/CS/form1.cs#15)]
 [!code-vb[System.Drawing.ClassicGraphicsExamples#15](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples/VB/form1.vb#15)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          Свойство <paramref name="pen" /> имеет значение <see langword="null" />.  
  
 - или -  
  
 Свойство <paramref name="points" /> имеет значение <see langword="null" />.</exception>
      </Docs>
    </Member>
    <MemberGroup MemberName="DrawClosedCurve">
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Строит замкнутый фундаментальный сплайн, определяемый массивом структур <see cref="T:System.Drawing.Point" />.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="DrawClosedCurve">
      <MemberSignature Language="C#" Value="public void DrawClosedCurve (System.Drawing.Pen pen, System.Drawing.Point[] points);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void DrawClosedCurve(class System.Drawing.Pen pen, valuetype System.Drawing.Point[] points) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.DrawClosedCurve(System.Drawing.Pen,System.Drawing.Point[])" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void DrawClosedCurve(System::Drawing::Pen ^ pen, cli::array &lt;System::Drawing::Point&gt; ^ points);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="pen" Type="System.Drawing.Pen" />
        <Parameter Name="points" Type="System.Drawing.Point[]" />
      </Parameters>
      <Docs>
        <param name="pen">
          Структура <see cref="T:System.Drawing.Pen" />, определяющая цвет, ширину и высоту кривой.</param>
        <param name="points">Массив структур <see cref="T:System.Drawing.Point" />, определяющий сплайн.</param>
        <summary>Строит замкнутый фундаментальный сплайн, определяемый массивом структур <see cref="T:System.Drawing.Point" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Этот метод строит замкнутый фундаментальный сплайн, который проходит через все точки в массиве. Если конечная точка не совпадает с начальной, дополнительный отрезок кривой добавляется с последней точки первой точки для создания замкнутой фигуры.  
  
 Массив точек должен содержать по крайней мере четыре <xref:System.Drawing.Point> структуры.  
  
 Этот метод использует натяжение по умолчанию, равное 0,5.  
  
   
  
## Examples  
 Следующий пример кода предназначен для работы с Windows Forms, и для него необходим <xref:System.Windows.Forms.PaintEventArgs> `e`, который является параметром <xref:System.Windows.Forms.Control.Paint> обработчика событий. Код выполняет следующие действия.  
  
-   Создает перья красной и зеленой.  
  
-   Создает семь точек для определения кривой.  
  
-   Рисует семь прямых линий красного цвета между семь точек для образуют замкнутый многоугольник.  
  
-   Рисование зеленого замкнутой кривой через семь точек.  
  
 Метод использует натяжение по умолчанию, равное 0,5.  
  
 [!code-cpp[System.Drawing.ClassicGraphicsExamples#16](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples/CPP/form1.cpp#16)]
 [!code-csharp[System.Drawing.ClassicGraphicsExamples#16](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples/CS/form1.cs#16)]
 [!code-vb[System.Drawing.ClassicGraphicsExamples#16](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples/VB/form1.vb#16)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          Свойство <paramref name="pen" /> имеет значение <see langword="null" />.  
  
 - или -  
  
 Свойство <paramref name="points" /> имеет значение <see langword="null" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="DrawClosedCurve">
      <MemberSignature Language="C#" Value="public void DrawClosedCurve (System.Drawing.Pen pen, System.Drawing.PointF[] points);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void DrawClosedCurve(class System.Drawing.Pen pen, valuetype System.Drawing.PointF[] points) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.DrawClosedCurve(System.Drawing.Pen,System.Drawing.PointF[])" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void DrawClosedCurve(System::Drawing::Pen ^ pen, cli::array &lt;System::Drawing::PointF&gt; ^ points);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="pen" Type="System.Drawing.Pen" />
        <Parameter Name="points" Type="System.Drawing.PointF[]" />
      </Parameters>
      <Docs>
        <param name="pen">
          Структура <see cref="T:System.Drawing.Pen" />, определяющая цвет, ширину и высоту кривой.</param>
        <param name="points">Массив структур <see cref="T:System.Drawing.PointF" />, определяющий сплайн.</param>
        <summary>Строит замкнутый фундаментальный сплайн, определяемый массивом структур <see cref="T:System.Drawing.PointF" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Этот метод строит замкнутый фундаментальный сплайн, который проходит через все точки в массиве. Если конечная точка не совпадает с начальной, дополнительный отрезок кривой добавляется с последней точки первой точки, чтобы закрыть его.  
  
 Массив точек должен содержать по крайней мере четыре <xref:System.Drawing.PointF> структуры.  
  
 Этот метод использует натяжение по умолчанию, равное 0,5.  
  
   
  
## Examples  
 Следующий пример кода предназначен для работы с Windows Forms, и для него необходим <xref:System.Windows.Forms.PaintEventArgs> `e`, который является параметром <xref:System.Windows.Forms.Control.Paint> обработчика событий. Код выполняет следующие действия.  
  
-   Создает перья красной и зеленой.  
  
-   Создает семь точек для определения кривой.  
  
-   Рисует семь прямых линий красного цвета между семь точек для образуют замкнутый многоугольник.  
  
-   Рисование зеленого замкнутой кривой через семь точек.  
  
 Метод использует натяжение по умолчанию, равное 0,5.  
  
 [!code-cpp[System.Drawing.ClassicGraphicsExamples#18](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples/CPP/form1.cpp#18)]
 [!code-csharp[System.Drawing.ClassicGraphicsExamples#18](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples/CS/form1.cs#18)]
 [!code-vb[System.Drawing.ClassicGraphicsExamples#18](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples/VB/form1.vb#18)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          Свойство <paramref name="pen" /> имеет значение <see langword="null" />.  
  
 - или -  
  
 Свойство <paramref name="points" /> имеет значение <see langword="null" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="DrawClosedCurve">
      <MemberSignature Language="C#" Value="public void DrawClosedCurve (System.Drawing.Pen pen, System.Drawing.Point[] points, float tension, System.Drawing.Drawing2D.FillMode fillmode);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void DrawClosedCurve(class System.Drawing.Pen pen, valuetype System.Drawing.Point[] points, float32 tension, valuetype System.Drawing.Drawing2D.FillMode fillmode) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.DrawClosedCurve(System.Drawing.Pen,System.Drawing.Point[],System.Single,System.Drawing.Drawing2D.FillMode)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void DrawClosedCurve(System::Drawing::Pen ^ pen, cli::array &lt;System::Drawing::Point&gt; ^ points, float tension, System::Drawing::Drawing2D::FillMode fillmode);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="pen" Type="System.Drawing.Pen" />
        <Parameter Name="points" Type="System.Drawing.Point[]" />
        <Parameter Name="tension" Type="System.Single" />
        <Parameter Name="fillmode" Type="System.Drawing.Drawing2D.FillMode" />
      </Parameters>
      <Docs>
        <param name="pen">
          Структура <see cref="T:System.Drawing.Pen" />, определяющая цвет, ширину и высоту кривой.</param>
        <param name="points">Массив структур <see cref="T:System.Drawing.Point" />, определяющий сплайн.</param>
        <param name="tension">Значение не ниже 0,0F, которое задает натяжение кривой.</param>
        <param name="fillmode">Элемент перечисления <see cref="T:System.Drawing.Drawing2D.FillMode" />, определяющий способ заполнения кривой. Данный параметр является обязательным, однако не обрабатывается.</param>
        <summary>Строит замкнутый фундаментальный сплайн, определяемый массивом структур <see cref="T:System.Drawing.Point" />, с указанным натяжением.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Этот метод строит замкнутый фундаментальный сплайн, который проходит через все точки в массиве. Если конечная точка не совпадает с начальной, дополнительный отрезок кривой добавляется с последней точки первой точки, чтобы закрыть его.  
  
 Массив точек должен содержать по крайней мере четыре <xref:System.Drawing.Point> структуры.  
  
 `tension` Параметр определяет форму кривой. Если значение `tension` параметр равен 0, 0f, этот метод формирует сегменты прямой линии, соединяющие точки. Как правило `tension` меньше или равно 1, 0f. Значения свыше 1.0F выдают необычные результаты.  
  
   
  
## Examples  
 Следующий пример кода предназначен для работы с Windows Forms, и для него необходим <xref:System.Windows.Forms.PaintEventArgs> `e`, который является параметром <xref:System.Windows.Forms.Control.Paint> обработчика событий. Код выполняет следующие действия.  
  
-   Создает перья красной и зеленой.  
  
-   Создает семь точек для определения кривой.  
  
-   Рисует семь прямых линий красного цвета между семь точек, которые образуют многоугольник.  
  
-   Создает параметры режима натяжение и заливки.  
  
-   Рисование зеленого замкнутой кривой через семь точек.  
  
 Метод использует натяжение 1.0 и задает режим заполнения `FillMode.Alternate`.  
  
 [!code-cpp[System.Drawing.ClassicGraphicsExamples#17](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples/CPP/form1.cpp#17)]
 [!code-csharp[System.Drawing.ClassicGraphicsExamples#17](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples/CS/form1.cs#17)]
 [!code-vb[System.Drawing.ClassicGraphicsExamples#17](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples/VB/form1.vb#17)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          Свойство <paramref name="pen" /> имеет значение <see langword="null" />.  
  
 - или -  
  
 Свойство <paramref name="points" /> имеет значение <see langword="null" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="DrawClosedCurve">
      <MemberSignature Language="C#" Value="public void DrawClosedCurve (System.Drawing.Pen pen, System.Drawing.PointF[] points, float tension, System.Drawing.Drawing2D.FillMode fillmode);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void DrawClosedCurve(class System.Drawing.Pen pen, valuetype System.Drawing.PointF[] points, float32 tension, valuetype System.Drawing.Drawing2D.FillMode fillmode) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.DrawClosedCurve(System.Drawing.Pen,System.Drawing.PointF[],System.Single,System.Drawing.Drawing2D.FillMode)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void DrawClosedCurve(System::Drawing::Pen ^ pen, cli::array &lt;System::Drawing::PointF&gt; ^ points, float tension, System::Drawing::Drawing2D::FillMode fillmode);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="pen" Type="System.Drawing.Pen" />
        <Parameter Name="points" Type="System.Drawing.PointF[]" />
        <Parameter Name="tension" Type="System.Single" />
        <Parameter Name="fillmode" Type="System.Drawing.Drawing2D.FillMode" />
      </Parameters>
      <Docs>
        <param name="pen">
          Структура <see cref="T:System.Drawing.Pen" />, определяющая цвет, ширину и высоту кривой.</param>
        <param name="points">Массив структур <see cref="T:System.Drawing.PointF" />, определяющий сплайн.</param>
        <param name="tension">Значение не ниже 0,0F, которое задает натяжение кривой.</param>
        <param name="fillmode">Элемент перечисления <see cref="T:System.Drawing.Drawing2D.FillMode" />, определяющий способ заполнения кривой. Данный параметр является обязательным, однако не обрабатывается.</param>
        <summary>Строит замкнутый фундаментальный сплайн, определяемый массивом структур <see cref="T:System.Drawing.PointF" />, с указанным натяжением.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Этот метод строит замкнутый фундаментальный сплайн, который проходит через все точки в массиве. Если конечная точка не совпадает с начальной, дополнительный отрезок кривой добавляется с последней точки первой точки, чтобы закрыть его.  
  
 Массив точек должен содержать по крайней мере четыре <xref:System.Drawing.PointF> структуры.  
  
 `tension` Параметр определяет форму кривой. Если значение `tension` параметр равен 0, 0f, этот метод формирует сегменты прямой линии, соединяющие точки. Как правило `tension` меньше или равно 1, 0f. Значения свыше 1.0F выдают необычные результаты.  
  
   
  
## Examples  
 Следующий пример кода предназначен для работы с Windows Forms, и для него необходим <xref:System.Windows.Forms.PaintEventArgs> `e`, который является параметром <xref:System.Windows.Forms.Control.Paint> обработчика событий. Код выполняет следующие действия.  
  
-   Создает перья красной и зеленой.  
  
-   Создает семь точек для определения кривой.  
  
-   Рисует семь прямых линий красного цвета между семь точек, которые образуют многоугольник.  
  
-   Создает параметры режима натяжение и заливки.  
  
-   Рисование зеленого замкнутой кривой через семь точек.  
  
 Метод использует натяжение 1.0 и задает режим заполнения `FillMode.Alternate`.  
  
 [!code-cpp[System.Drawing.ClassicGraphicsExamples#19](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples/CPP/form1.cpp#19)]
 [!code-csharp[System.Drawing.ClassicGraphicsExamples#19](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples/CS/form1.cs#19)]
 [!code-vb[System.Drawing.ClassicGraphicsExamples#19](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples/VB/form1.vb#19)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          Свойство <paramref name="pen" /> имеет значение <see langword="null" />.  
  
 - или -  
  
 Свойство <paramref name="points" /> имеет значение <see langword="null" />.</exception>
      </Docs>
    </Member>
    <MemberGroup MemberName="DrawCurve">
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Строит фундаментальный сплайн через точки указанного массива структур <see cref="T:System.Drawing.Point" />.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="DrawCurve">
      <MemberSignature Language="C#" Value="public void DrawCurve (System.Drawing.Pen pen, System.Drawing.Point[] points);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void DrawCurve(class System.Drawing.Pen pen, valuetype System.Drawing.Point[] points) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.DrawCurve(System.Drawing.Pen,System.Drawing.Point[])" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void DrawCurve(System::Drawing::Pen ^ pen, cli::array &lt;System::Drawing::Point&gt; ^ points);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="pen" Type="System.Drawing.Pen" />
        <Parameter Name="points" Type="System.Drawing.Point[]" />
      </Parameters>
      <Docs>
        <param name="pen">
          Структура <see cref="T:System.Drawing.Pen" />, определяющая цвет, ширину и высоту кривой.</param>
        <param name="points">Массив структур <see cref="T:System.Drawing.Point" />, определяющий сплайн.</param>
        <summary>Строит фундаментальный сплайн через точки указанного массива структур <see cref="T:System.Drawing.Point" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Этот метод строит фундаментальный сплайн, который проходит через все точки в массиве.  
  
 Массив точек должен содержать по крайней мере трех <xref:System.Drawing.Point> структур для кривой для отрисовки.  
  
 Этот метод использует натяжение по умолчанию, равное 0,5.  
  
   
  
## Examples  
 Следующий пример кода предназначен для работы с Windows Forms, и для него необходим <xref:System.Windows.Forms.PaintEventArgs> `e`, который является параметром <xref:System.Windows.Forms.Control.Paint> обработчика событий. Код выполняет следующие действия.  
  
-   Создает перья красной и зеленой.  
  
-   Создает семь точек для определения кривой.  
  
-   Рисует шесть прямых линий красного цвета между семь точек для формирования незамкнутый многоугольник.  
  
-   Проводит незамкнутую кривую зеленого через семь точек.  
  
 Метод использует натяжение по умолчанию, равное 0,5.  
  
 [!code-cpp[System.Drawing.ClassicGraphicsExamples#20](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples/CPP/form1.cpp#20)]
 [!code-csharp[System.Drawing.ClassicGraphicsExamples#20](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples/CS/form1.cs#20)]
 [!code-vb[System.Drawing.ClassicGraphicsExamples#20](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples/VB/form1.vb#20)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          Свойство <paramref name="pen" /> имеет значение <see langword="null" />.  
  
 - или -  
  
 Свойство <paramref name="points" /> имеет значение <see langword="null" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="DrawCurve">
      <MemberSignature Language="C#" Value="public void DrawCurve (System.Drawing.Pen pen, System.Drawing.PointF[] points);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void DrawCurve(class System.Drawing.Pen pen, valuetype System.Drawing.PointF[] points) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.DrawCurve(System.Drawing.Pen,System.Drawing.PointF[])" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void DrawCurve(System::Drawing::Pen ^ pen, cli::array &lt;System::Drawing::PointF&gt; ^ points);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="pen" Type="System.Drawing.Pen" />
        <Parameter Name="points" Type="System.Drawing.PointF[]" />
      </Parameters>
      <Docs>
        <param name="pen">
          Структура <see cref="T:System.Drawing.Pen" />, определяющая цвет, ширину и стиль кривой.</param>
        <param name="points">Массив структур <see cref="T:System.Drawing.PointF" />, определяющий сплайн.</param>
        <summary>Строит фундаментальный сплайн через точки указанного массива структур <see cref="T:System.Drawing.PointF" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Этот метод строит фундаментальный сплайн, который проходит через все точки в массиве.  
  
 Массив точек должен содержать по крайней мере трех <xref:System.Drawing.PointF> структур для кривой для отрисовки.  
  
 Этот метод использует натяжение по умолчанию, равное 0,5.  
  
   
  
## Examples  
 Следующий пример кода предназначен для работы с Windows Forms, и для него необходим <xref:System.Windows.Forms.PaintEventArgs> `e`, который является параметром <xref:System.Windows.Forms.Control.Paint> обработчика событий. Код выполняет следующие действия.  
  
-   Создает перья красной и зеленой.  
  
-   Создает семь точек для определения кривой.  
  
-   Рисует шесть прямых линий красного цвета между семь точек для формирования незамкнутый многоугольник.  
  
-   Проводит незамкнутую кривую зеленого через семь точек.  
  
 Метод использует натяжение по умолчанию, равное 0,5.  
  
 [!code-cpp[System.Drawing.ClassicGraphicsExamples#23](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples/CPP/form1.cpp#23)]
 [!code-csharp[System.Drawing.ClassicGraphicsExamples#23](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples/CS/form1.cs#23)]
 [!code-vb[System.Drawing.ClassicGraphicsExamples#23](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples/VB/form1.vb#23)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          Свойство <paramref name="pen" /> имеет значение <see langword="null" />.  
  
 - или -  
  
 Свойство <paramref name="points" /> имеет значение <see langword="null" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="DrawCurve">
      <MemberSignature Language="C#" Value="public void DrawCurve (System.Drawing.Pen pen, System.Drawing.Point[] points, float tension);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void DrawCurve(class System.Drawing.Pen pen, valuetype System.Drawing.Point[] points, float32 tension) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.DrawCurve(System.Drawing.Pen,System.Drawing.Point[],System.Single)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void DrawCurve(System::Drawing::Pen ^ pen, cli::array &lt;System::Drawing::Point&gt; ^ points, float tension);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="pen" Type="System.Drawing.Pen" />
        <Parameter Name="points" Type="System.Drawing.Point[]" />
        <Parameter Name="tension" Type="System.Single" />
      </Parameters>
      <Docs>
        <param name="pen">
          Структура <see cref="T:System.Drawing.Pen" />, определяющая цвет, ширину и стиль кривой.</param>
        <param name="points">Массив структур <see cref="T:System.Drawing.Point" />, определяющий сплайн.</param>
        <param name="tension">Значение не ниже 0,0F, которое задает натяжение кривой.</param>
        <summary>Строит фундаментальный сплайн через точки указанного массива структур <see cref="T:System.Drawing.Point" /> с указанным натяжением.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Этот метод строит фундаментальный сплайн, который проходит через все точки в массиве.  
  
 Массив точек должен содержать по крайней мере трех <xref:System.Drawing.Point> структур для кривой для отрисовки.  
  
 `tension` Параметр определяет форму кривой. Если значение `tension` параметр равен 0, 0f, этот метод формирует сегменты прямой линии, соединяющие точки. Как правило `tension` меньше или равно 1, 0f. Значения свыше 1.0F выдают необычные результаты.  
  
   
  
## Examples  
 Следующий пример кода предназначен для работы с Windows Forms, и для него необходим <xref:System.Windows.Forms.PaintEventArgs> `e`, который является параметром <xref:System.Windows.Forms.Control.Paint> обработчика событий. Код выполняет следующие действия.  
  
-   Создает перья красной и зеленой.  
  
-   Создает семь точек для определения кривой.  
  
-   Рисует шесть прямых линий красного цвета между семь точек для формирования незамкнутый многоугольник.  
  
-   Создает параметр натяжения.  
  
-   Рисует замкнутую кривую зеленого цвета через семь точек.  
  
 Метод использует натяжение 1.0.  
  
 [!code-cpp[System.Drawing.ClassicGraphicsExamples#22](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples/CPP/form1.cpp#22)]
 [!code-csharp[System.Drawing.ClassicGraphicsExamples#22](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples/CS/form1.cs#22)]
 [!code-vb[System.Drawing.ClassicGraphicsExamples#22](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples/VB/form1.vb#22)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          Свойство <paramref name="pen" /> имеет значение <see langword="null" />.  
  
 - или -  
  
 Свойство <paramref name="points" /> имеет значение <see langword="null" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="DrawCurve">
      <MemberSignature Language="C#" Value="public void DrawCurve (System.Drawing.Pen pen, System.Drawing.PointF[] points, float tension);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void DrawCurve(class System.Drawing.Pen pen, valuetype System.Drawing.PointF[] points, float32 tension) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.DrawCurve(System.Drawing.Pen,System.Drawing.PointF[],System.Single)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void DrawCurve(System::Drawing::Pen ^ pen, cli::array &lt;System::Drawing::PointF&gt; ^ points, float tension);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="pen" Type="System.Drawing.Pen" />
        <Parameter Name="points" Type="System.Drawing.PointF[]" />
        <Parameter Name="tension" Type="System.Single" />
      </Parameters>
      <Docs>
        <param name="pen">
          Структура <see cref="T:System.Drawing.Pen" />, определяющая цвет, ширину и стиль кривой.</param>
        <param name="points">Массив структур <see cref="T:System.Drawing.PointF" />, представляющий точки, которые определяют кривую.</param>
        <param name="tension">Значение не ниже 0,0F, которое задает натяжение кривой.</param>
        <summary>Строит фундаментальный сплайн через точки указанного массива структур <see cref="T:System.Drawing.PointF" /> с указанным натяжением.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Этот метод строит фундаментальный сплайн, который проходит через все точки в массиве.  
  
 Массив точек должен содержать по крайней мере трех <xref:System.Drawing.PointF> структур для кривой для отрисовки.  
  
 `tension` Параметр определяет форму кривой. Если значение `tension` параметр равен 0, 0f, этот метод формирует сегменты прямой линии, соединяющие точки. Как правило `tension` меньше или равно 1, 0f. Значения свыше 1.0F выдают необычные результаты.  
  
   
  
## Examples  
 Следующий пример кода предназначен для работы с Windows Forms, и для него необходим <xref:System.Windows.Forms.PaintEventArgs> `e`, который является параметром <xref:System.Windows.Forms.Control.Paint> обработчика событий. Код выполняет следующие действия.  
  
-   Создает перья красной и зеленой.  
  
-   Создает семь точек для определения кривой.  
  
-   Рисует шесть прямых линий красного цвета между семь точек для формирования незамкнутый многоугольник.  
  
-   Создает параметр натяжения.  
  
-   Рисует замкнутую кривую зеленого цвета через семь точек.  
  
 Метод использует натяжение 1.0.  
  
 [!code-cpp[System.Drawing.ClassicGraphicsExamples#26](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples/CPP/form1.cpp#26)]
 [!code-csharp[System.Drawing.ClassicGraphicsExamples#26](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples/CS/form1.cs#26)]
 [!code-vb[System.Drawing.ClassicGraphicsExamples#26](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples/VB/form1.vb#26)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          Свойство <paramref name="pen" /> имеет значение <see langword="null" />.  
  
 - или -  
  
 Свойство <paramref name="points" /> имеет значение <see langword="null" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="DrawCurve">
      <MemberSignature Language="C#" Value="public void DrawCurve (System.Drawing.Pen pen, System.Drawing.PointF[] points, int offset, int numberOfSegments);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void DrawCurve(class System.Drawing.Pen pen, valuetype System.Drawing.PointF[] points, int32 offset, int32 numberOfSegments) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.DrawCurve(System.Drawing.Pen,System.Drawing.PointF[],System.Int32,System.Int32)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void DrawCurve(System::Drawing::Pen ^ pen, cli::array &lt;System::Drawing::PointF&gt; ^ points, int offset, int numberOfSegments);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="pen" Type="System.Drawing.Pen" />
        <Parameter Name="points" Type="System.Drawing.PointF[]" />
        <Parameter Name="offset" Type="System.Int32" />
        <Parameter Name="numberOfSegments" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="pen">
          Структура <see cref="T:System.Drawing.Pen" />, определяющая цвет, ширину и стиль кривой.</param>
        <param name="points">Массив структур <see cref="T:System.Drawing.PointF" />, определяющий сплайн.</param>
        <param name="offset">Смещение от первого элемента в массиве параметра <c>points</c> до начальной точки кривой.</param>
        <param name="numberOfSegments">Количество сегментов, включаемых в кривую после начальной точки.</param>
        <summary>Строит фундаментальный сплайн через точки указанного массива структур <see cref="T:System.Drawing.PointF" />. Смещение при рисовании начинается от начала массива.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Этот метод строит фундаментальный сплайн, который проходит через все точки в массиве.  
  
 Массив точек должен содержать по крайней мере трех <xref:System.Drawing.PointF> структур для кривой для отрисовки.  
  
 Значение `offset` указывает количество пропускаемых элементов в массиве. Первый элемент после пропущенных элементов представляет начальную точку кривой.  
  
 Значение `numberOfSegments` параметр задает число сегментов, после начальной точки кривой. Значение `numberOfSegments` параметр должен быть не меньше 1. Значение `offset` параметра, а также значение `numberOfSegments` параметр должен быть меньше, чем число элементов в массиве `points` параметра.  
  
 Этот метод использует натяжение по умолчанию, равное 0,5.  
  
   
  
## Examples  
 Следующий пример кода предназначен для работы с Windows Forms, и для него необходим <xref:System.Windows.Forms.PaintEventArgs> `e`, который является параметром <xref:System.Windows.Forms.Control.Paint> обработчика событий. Код выполняет следующие действия.  
  
-   Создает перья красной и зеленой.  
  
-   Создает семь точек для определения кривой.  
  
-   Рисует шесть прямых линий красного цвета между семь точек для формирования незамкнутый многоугольник.  
  
-   Определяет смещение начальной точки и количество сегментов.  
  
-   Рисует незамкнутую кривую зеленого цвета (начиная с третьей точки) через последние пять точек.  
  
 Метод использует натяжение по умолчанию, равное 0,5.  
  
 [!code-cpp[System.Drawing.ClassicGraphicsExamples#24](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples/CPP/form1.cpp#24)]
 [!code-csharp[System.Drawing.ClassicGraphicsExamples#24](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples/CS/form1.cs#24)]
 [!code-vb[System.Drawing.ClassicGraphicsExamples#24](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples/VB/form1.vb#24)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          Свойство <paramref name="pen" /> имеет значение <see langword="null" />.  
  
 - или -  
  
 Свойство <paramref name="points" /> имеет значение <see langword="null" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="DrawCurve">
      <MemberSignature Language="C#" Value="public void DrawCurve (System.Drawing.Pen pen, System.Drawing.Point[] points, int offset, int numberOfSegments, float tension);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void DrawCurve(class System.Drawing.Pen pen, valuetype System.Drawing.Point[] points, int32 offset, int32 numberOfSegments, float32 tension) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.DrawCurve(System.Drawing.Pen,System.Drawing.Point[],System.Int32,System.Int32,System.Single)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void DrawCurve(System::Drawing::Pen ^ pen, cli::array &lt;System::Drawing::Point&gt; ^ points, int offset, int numberOfSegments, float tension);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="pen" Type="System.Drawing.Pen" />
        <Parameter Name="points" Type="System.Drawing.Point[]" />
        <Parameter Name="offset" Type="System.Int32" />
        <Parameter Name="numberOfSegments" Type="System.Int32" />
        <Parameter Name="tension" Type="System.Single" />
      </Parameters>
      <Docs>
        <param name="pen">
          Структура <see cref="T:System.Drawing.Pen" />, определяющая цвет, ширину и стиль кривой.</param>
        <param name="points">Массив структур <see cref="T:System.Drawing.Point" />, определяющий сплайн.</param>
        <param name="offset">Смещение от первого элемента в массиве параметра <c>points</c> до начальной точки кривой.</param>
        <param name="numberOfSegments">Количество сегментов, включаемых в кривую после начальной точки.</param>
        <param name="tension">Значение не ниже 0,0F, которое задает натяжение кривой.</param>
        <summary>Строит фундаментальный сплайн через точки указанного массива структур <see cref="T:System.Drawing.Point" /> с указанным натяжением.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Этот метод строит фундаментальный сплайн, который проходит через все точки в массиве.  
  
 Массив точек должен содержать по крайней мере трех <xref:System.Drawing.Point> структур для кривой для отрисовки.  
  
 Значение `offset` указывает количество пропускаемых элементов в массиве. Первый элемент после пропущенных элементов представляет начальную точку кривой.  
  
 Значение `numberOfSegments` параметр задает число сегментов, после начальной точки кривой. Значение `numberOfSegments` параметр должен быть не меньше 1. Значение `offset` параметра, а также значение `numberOfSegments` параметр должен быть меньше, чем число элементов в массиве `points` параметра.  
  
 `tension` Параметр определяет форму кривой. Если значение `tension` параметр равен 0, 0f, этот метод формирует сегменты прямой линии, соединяющие точки. Как правило `tension` меньше или равно 1, 0f. Значения свыше 1.0F выдают необычные результаты.  
  
   
  
## Examples  
 Следующий пример кода предназначен для работы с Windows Forms, и для него необходим <xref:System.Windows.Forms.PaintEventArgs> `e`, который является параметром <xref:System.Windows.Forms.Control.Paint> обработчика событий. Код выполняет следующие действия.  
  
-   Создает перья красной и зеленой.  
  
-   Создает семь точек для определения кривой.  
  
-   Рисует шесть прямых линий красного цвета между семь точек для формирования незамкнутый многоугольник.  
  
-   Определяет смещение начальной точки и количество сегментов.  
  
-   Определяет натяжение.  
  
-   Рисует незамкнутую кривую зеленого цвета (начиная с третьей точки) через последние пять точек.  
  
 Метод задает натяжение равным 1,0.  
  
 [!code-cpp[System.Drawing.ClassicGraphicsExamples#21](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples/CPP/form1.cpp#21)]
 [!code-csharp[System.Drawing.ClassicGraphicsExamples#21](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples/CS/form1.cs#21)]
 [!code-vb[System.Drawing.ClassicGraphicsExamples#21](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples/VB/form1.vb#21)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          Свойство <paramref name="pen" /> имеет значение <see langword="null" />.  
  
 - или -  
  
 Свойство <paramref name="points" /> имеет значение <see langword="null" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="DrawCurve">
      <MemberSignature Language="C#" Value="public void DrawCurve (System.Drawing.Pen pen, System.Drawing.PointF[] points, int offset, int numberOfSegments, float tension);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void DrawCurve(class System.Drawing.Pen pen, valuetype System.Drawing.PointF[] points, int32 offset, int32 numberOfSegments, float32 tension) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.DrawCurve(System.Drawing.Pen,System.Drawing.PointF[],System.Int32,System.Int32,System.Single)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void DrawCurve(System::Drawing::Pen ^ pen, cli::array &lt;System::Drawing::PointF&gt; ^ points, int offset, int numberOfSegments, float tension);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="pen" Type="System.Drawing.Pen" />
        <Parameter Name="points" Type="System.Drawing.PointF[]" />
        <Parameter Name="offset" Type="System.Int32" />
        <Parameter Name="numberOfSegments" Type="System.Int32" />
        <Parameter Name="tension" Type="System.Single" />
      </Parameters>
      <Docs>
        <param name="pen">
          Структура <see cref="T:System.Drawing.Pen" />, определяющая цвет, ширину и стиль кривой.</param>
        <param name="points">Массив структур <see cref="T:System.Drawing.PointF" />, определяющий сплайн.</param>
        <param name="offset">Смещение от первого элемента в массиве параметра <c>points</c> до начальной точки кривой.</param>
        <param name="numberOfSegments">Количество сегментов, включаемых в кривую после начальной точки.</param>
        <param name="tension">Значение не ниже 0,0F, которое задает натяжение кривой.</param>
        <summary>Строит фундаментальный сплайн через точки указанного массива структур <see cref="T:System.Drawing.PointF" /> с указанным натяжением. Смещение при рисовании начинается от начала массива.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Этот метод строит фундаментальный сплайн, который проходит через все точки в массиве.  
  
 Массив точек должен содержать по крайней мере трех <xref:System.Drawing.PointF> структур для кривой для отрисовки.  
  
 Значение `offset` указывает количество пропускаемых элементов в массиве. Первый элемент после пропущенных элементов представляет начальную точку кривой.  
  
 Значение `numberOfSegments` параметр задает число сегментов, после начальной точки кривой. Значение `numberOfSegments` параметр должен быть не меньше 1. Значение `offset` параметра, а также значение `numberOfSegments` параметр должен быть меньше, чем число элементов в массиве `points` параметра.  
  
 `tension` Параметр определяет форму кривой. Если значение `tension` параметр равен 0, 0f, этот метод формирует сегменты прямой линии, соединяющие точки. Как правило `tension` меньше или равно 1, 0f. Значения свыше 1.0F выдают необычные результаты.  
  
   
  
## Examples  
 Следующий пример кода предназначен для работы с Windows Forms, и для него необходим <xref:System.Windows.Forms.PaintEventArgs> `e`, который является параметром <xref:System.Windows.Forms.Control.Paint> обработчика событий. Код выполняет следующие действия.  
  
-   Создает перья красной и зеленой.  
  
-   Создает семь точек для определения кривой.  
  
-   Рисует шесть прямых линий красного цвета между семь точек для формирования незамкнутый многоугольник.  
  
-   Определяет смещение начальной точки и количество сегментов.  
  
-   Определяет натяжение.  
  
-   Рисует незамкнутую кривую зеленого цвета (начиная с третьей точки) через последние пять точек.  
  
 Метод задает натяжение равным 1,0.  
  
 [!code-cpp[System.Drawing.ClassicGraphicsExamples#25](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples/CPP/form1.cpp#25)]
 [!code-csharp[System.Drawing.ClassicGraphicsExamples#25](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples/CS/form1.cs#25)]
 [!code-vb[System.Drawing.ClassicGraphicsExamples#25](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples/VB/form1.vb#25)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          Свойство <paramref name="pen" /> имеет значение <see langword="null" />.  
  
 - или -  
  
 Свойство <paramref name="points" /> имеет значение <see langword="null" />.</exception>
      </Docs>
    </Member>
    <MemberGroup MemberName="DrawEllipse">
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Рисует эллипс, определяемый ограничивающим прямоугольником, заданным с помощью пары координат, ширины и высоты.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="DrawEllipse">
      <MemberSignature Language="C#" Value="public void DrawEllipse (System.Drawing.Pen pen, System.Drawing.Rectangle rect);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void DrawEllipse(class System.Drawing.Pen pen, valuetype System.Drawing.Rectangle rect) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.DrawEllipse(System.Drawing.Pen,System.Drawing.Rectangle)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void DrawEllipse(System::Drawing::Pen ^ pen, System::Drawing::Rectangle rect);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="pen" Type="System.Drawing.Pen" />
        <Parameter Name="rect" Type="System.Drawing.Rectangle" />
      </Parameters>
      <Docs>
        <param name="pen">
          Структура <see cref="T:System.Drawing.Pen" />, определяющая цвет, ширину и стиль эллипса.</param>
        <param name="rect">
          Структура <see cref="T:System.Drawing.Rectangle" />, определяющая границы эллипса.</param>
        <summary>Рисует эллипс, определяемый ограничивающей структурой <see cref="T:System.Drawing.Rectangle" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Этот метод рисует эллипс, определяемый ограничивающим прямоугольником, заданным с `rect` параметра.  
  
   
  
## Examples  
 Следующий пример кода предназначен для работы с Windows Forms, и для него необходим <xref:System.Windows.Forms.PaintEventArgs> `e`, который является параметром <xref:System.Windows.Forms.Control.Paint> обработчика событий. Код выполняет следующие действия.  
  
-   Создает черного пера.  
  
-   Создает прямоугольник, который будет ограничивать эллипс.  
  
-   Рисует эллипс на экране.  
  
 [!code-cpp[System.Drawing.ClassicGraphicsExamples#27](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples/CPP/form1.cpp#27)]
 [!code-csharp[System.Drawing.ClassicGraphicsExamples#27](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples/CS/form1.cs#27)]
 [!code-vb[System.Drawing.ClassicGraphicsExamples#27](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples/VB/form1.vb#27)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          Свойство <paramref name="pen" /> имеет значение <see langword="null" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="DrawEllipse">
      <MemberSignature Language="C#" Value="public void DrawEllipse (System.Drawing.Pen pen, System.Drawing.RectangleF rect);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void DrawEllipse(class System.Drawing.Pen pen, valuetype System.Drawing.RectangleF rect) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.DrawEllipse(System.Drawing.Pen,System.Drawing.RectangleF)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void DrawEllipse(System::Drawing::Pen ^ pen, System::Drawing::RectangleF rect);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="pen" Type="System.Drawing.Pen" />
        <Parameter Name="rect" Type="System.Drawing.RectangleF" />
      </Parameters>
      <Docs>
        <param name="pen">
          Структура <see cref="T:System.Drawing.Pen" />, определяющая цвет, ширину и стиль эллипса.</param>
        <param name="rect">
          Структура <see cref="T:System.Drawing.RectangleF" />, определяющая границы эллипса.</param>
        <summary>Рисует эллипс, определяемый ограничивающей структурой <see cref="T:System.Drawing.RectangleF" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Этот метод рисует эллипс, определяемый ограничивающим прямоугольником, заданным с `rect` параметра.  
  
   
  
## Examples  
 Следующий пример кода предназначен для работы с Windows Forms, и для него необходим <xref:System.Windows.Forms.PaintEventArgs> `e`, который является параметром <xref:System.Windows.Forms.Control.Paint> обработчика событий. Код выполняет следующие действия.  
  
-   Создает черного пера.  
  
-   Создает прямоугольник, который будет ограничивать эллипс.  
  
-   Рисует эллипс на экране.  
  
 [!code-cpp[System.Drawing.ClassicGraphicsExamples#28](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples/CPP/form1.cpp#28)]
 [!code-csharp[System.Drawing.ClassicGraphicsExamples#28](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples/CS/form1.cs#28)]
 [!code-vb[System.Drawing.ClassicGraphicsExamples#28](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples/VB/form1.vb#28)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          Свойство <paramref name="pen" /> имеет значение <see langword="null" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="DrawEllipse">
      <MemberSignature Language="C#" Value="public void DrawEllipse (System.Drawing.Pen pen, int x, int y, int width, int height);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void DrawEllipse(class System.Drawing.Pen pen, int32 x, int32 y, int32 width, int32 height) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.DrawEllipse(System.Drawing.Pen,System.Int32,System.Int32,System.Int32,System.Int32)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void DrawEllipse(System::Drawing::Pen ^ pen, int x, int y, int width, int height);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="pen" Type="System.Drawing.Pen" />
        <Parameter Name="x" Type="System.Int32" />
        <Parameter Name="y" Type="System.Int32" />
        <Parameter Name="width" Type="System.Int32" />
        <Parameter Name="height" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="pen">
          Структура <see cref="T:System.Drawing.Pen" />, определяющая цвет, ширину и стиль эллипса.</param>
        <param name="x">Координата X верхнего левого угла ограничивающего прямоугольника, который определяет эллипс.</param>
        <param name="y">Координата Y верхнего левого угла ограничивающего прямоугольника, который определяет эллипс.</param>
        <param name="width">Ширина ограничивающего прямоугольника, который определяет эллипс.</param>
        <param name="height">Высота ограничивающего прямоугольника, который определяет эллипс.</param>
        <summary>Рисует эллипс, определяемый ограничивающим прямоугольником, заданным с помощью координат верхнего левого угла прямоугольника, высоты и ширины.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Этот метод рисует эллипс, определяемый ограничивающим прямоугольником, описываемого `x`, `y`, `width`, и `height` параметров.  
  
   
  
## Examples  
 Следующий пример кода предназначен для работы с Windows Forms, и для него необходим <xref:System.Windows.Forms.PaintEventArgs> `e`, который является параметром <xref:System.Windows.Forms.Control.Paint> обработчика событий. Код выполняет следующие действия.  
  
-   Создает черного пера.  
  
-   Определяет положение и размер прямоугольника, который будет ограничивать эллипс.  
  
-   Рисует эллипс на экране.  
  
 [!code-cpp[System.Drawing.ClassicGraphicsExamples#29](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples/CPP/form1.cpp#29)]
 [!code-csharp[System.Drawing.ClassicGraphicsExamples#29](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples/CS/form1.cs#29)]
 [!code-vb[System.Drawing.ClassicGraphicsExamples#29](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples/VB/form1.vb#29)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          Свойство <paramref name="pen" /> имеет значение <see langword="null" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="DrawEllipse">
      <MemberSignature Language="C#" Value="public void DrawEllipse (System.Drawing.Pen pen, float x, float y, float width, float height);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void DrawEllipse(class System.Drawing.Pen pen, float32 x, float32 y, float32 width, float32 height) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.DrawEllipse(System.Drawing.Pen,System.Single,System.Single,System.Single,System.Single)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void DrawEllipse(System::Drawing::Pen ^ pen, float x, float y, float width, float height);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="pen" Type="System.Drawing.Pen" />
        <Parameter Name="x" Type="System.Single" />
        <Parameter Name="y" Type="System.Single" />
        <Parameter Name="width" Type="System.Single" />
        <Parameter Name="height" Type="System.Single" />
      </Parameters>
      <Docs>
        <param name="pen">
          Структура <see cref="T:System.Drawing.Pen" />, определяющая цвет, ширину и стиль эллипса.</param>
        <param name="x">Координата X верхнего левого угла ограничивающего прямоугольника, который определяет эллипс.</param>
        <param name="y">Координата Y верхнего левого угла ограничивающего прямоугольника, который определяет эллипс.</param>
        <param name="width">Ширина ограничивающего прямоугольника, который определяет эллипс.</param>
        <param name="height">Высота ограничивающего прямоугольника, который определяет эллипс.</param>
        <summary>Рисует эллипс, определяемый ограничивающим прямоугольником, заданным с помощью пары координат, ширины и высоты.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Этот метод рисует эллипс, определяемый ограничивающим прямоугольником, описываемого `x`, `y`, `width`, и `height` параметров.  
  
   
  
## Examples  
 Следующий пример кода предназначен для работы с Windows Forms, и для него необходим <xref:System.Windows.Forms.PaintEventArgs> `e`, который является параметром <xref:System.Windows.Forms.Control.Paint> обработчика событий. Код выполняет следующие действия.  
  
-   Создает черного пера.  
  
-   Определяет положение и размер прямоугольника, который будет ограничивать эллипс.  
  
-   Рисует эллипс на экране.  
  
 [!code-cpp[System.Drawing.ClassicGraphicsExamples#30](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples/CPP/form1.cpp#30)]
 [!code-csharp[System.Drawing.ClassicGraphicsExamples#30](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples/CS/form1.cs#30)]
 [!code-vb[System.Drawing.ClassicGraphicsExamples#30](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples/VB/form1.vb#30)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          Свойство <paramref name="pen" /> имеет значение <see langword="null" />.</exception>
      </Docs>
    </Member>
    <MemberGroup MemberName="DrawIcon">
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Формирует изображение, представленное указанным объектом <see cref="T:System.Drawing.Icon" />, в указанных координатах.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="DrawIcon">
      <MemberSignature Language="C#" Value="public void DrawIcon (System.Drawing.Icon icon, System.Drawing.Rectangle targetRect);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void DrawIcon(class System.Drawing.Icon icon, valuetype System.Drawing.Rectangle targetRect) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.DrawIcon(System.Drawing.Icon,System.Drawing.Rectangle)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void DrawIcon(System::Drawing::Icon ^ icon, System::Drawing::Rectangle targetRect);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="icon" Type="System.Drawing.Icon" />
        <Parameter Name="targetRect" Type="System.Drawing.Rectangle" />
      </Parameters>
      <Docs>
        <param name="icon">
          Объект <see cref="T:System.Drawing.Icon" /> для рисования.</param>
        <param name="targetRect">
          Структура <see cref="T:System.Drawing.Rectangle" />, которая задает расположение и размер создаваемого изображения на экране. Изображение, содержащееся в параметре <c>icon</c>, масштабируется по размерам этой прямоугольной области.</param>
        <summary>Формирует изображение, представленное указанным объектом <see cref="T:System.Drawing.Icon" />, в пределах области, заданной структурой <see cref="T:System.Drawing.Rectangle" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 Следующий пример кода предназначен для работы с Windows Forms, и для него необходим <xref:System.Windows.Forms.PaintEventArgs> `e`, который является параметром <xref:System.Windows.Forms.Control.Paint> обработчика событий. Код выполняет следующие действия.  
  
-   Создает значок из стандартного файла значка Windows SampIcon.ico, содержащегося в папке примера.  
  
-   Создает прямоугольник, в котором отображается этот значок.  
  
-   Отображает значок на экране.  
  
 Положение прямоугольника определяет размещение значка на экране, а размер прямоугольника определяет масштабирования значка.  
  
 [!code-cpp[System.Drawing.ClassicGraphicsExamples#31](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples/CPP/form1.cpp#31)]
 [!code-csharp[System.Drawing.ClassicGraphicsExamples#31](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples/CS/form1.cs#31)]
 [!code-vb[System.Drawing.ClassicGraphicsExamples#31](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples/VB/form1.vb#31)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          Свойство <paramref name="icon" /> имеет значение <see langword="null" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="DrawIcon">
      <MemberSignature Language="C#" Value="public void DrawIcon (System.Drawing.Icon icon, int x, int y);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void DrawIcon(class System.Drawing.Icon icon, int32 x, int32 y) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.DrawIcon(System.Drawing.Icon,System.Int32,System.Int32)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void DrawIcon(System::Drawing::Icon ^ icon, int x, int y);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="icon" Type="System.Drawing.Icon" />
        <Parameter Name="x" Type="System.Int32" />
        <Parameter Name="y" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="icon">
          Объект <see cref="T:System.Drawing.Icon" /> для рисования.</param>
        <param name="x">Координата X верхнего левого угла формируемого изображения.</param>
        <param name="y">Координата Y верхнего левого угла формируемого изображения.</param>
        <summary>Формирует изображение, представленное указанным объектом <see cref="T:System.Drawing.Icon" />, в указанных координатах.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 Следующий пример кода предназначен для работы с Windows Forms, и для него необходим <xref:System.Windows.Forms.PaintEventArgs> `e`, который является параметром <xref:System.Windows.Forms.Control.Paint> обработчика событий. Код выполняет следующие действия.  
  
-   Создает значок из стандартного файла значка Windows SampIcon.ico, содержащегося в папке примера.  
  
-   Определяет координаты верхнего левого угла, в которой будет создан значок.  
  
-   Отображает значок на экране.  
  
 Созданный значок является зависимым.  
  
 [!code-cpp[System.Drawing.ClassicGraphicsExamples#32](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples/CPP/form1.cpp#32)]
 [!code-csharp[System.Drawing.ClassicGraphicsExamples#32](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples/CS/form1.cs#32)]
 [!code-vb[System.Drawing.ClassicGraphicsExamples#32](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples/VB/form1.vb#32)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          Свойство <paramref name="icon" /> имеет значение <see langword="null" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="DrawIconUnstretched">
      <MemberSignature Language="C#" Value="public void DrawIconUnstretched (System.Drawing.Icon icon, System.Drawing.Rectangle targetRect);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void DrawIconUnstretched(class System.Drawing.Icon icon, valuetype System.Drawing.Rectangle targetRect) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.DrawIconUnstretched(System.Drawing.Icon,System.Drawing.Rectangle)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void DrawIconUnstretched(System::Drawing::Icon ^ icon, System::Drawing::Rectangle targetRect);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="icon" Type="System.Drawing.Icon" />
        <Parameter Name="targetRect" Type="System.Drawing.Rectangle" />
      </Parameters>
      <Docs>
        <param name="icon">
          Объект <see cref="T:System.Drawing.Icon" /> для рисования.</param>
        <param name="targetRect">
          Структура <see cref="T:System.Drawing.Rectangle" />, которая задает расположение и размер создаваемого изображения. Изображение не масштабируется до размеров данного прямоугольника и сохраняет свой исходный размер. Если изображение больше этого прямоугольника, то оно обрезается до его размеров.</param>
        <summary>Формирует изображение, представленное указанным объектом <see cref="T:System.Drawing.Icon" />, без его масштабирования.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 Следующий пример кода предназначен для работы с Windows Forms, и для него необходим <xref:System.Windows.Forms.PaintEventArgs> `e`, который является параметром <xref:System.Windows.Forms.Control.Paint> обработчика событий. Код выполняет следующие действия.  
  
-   Создает значок из стандартного файла значка Windows SampIcon.ico, содержащегося в папке примера.  
  
-   Создает прямоугольник, в котором отображается этот значок.  
  
-   Отображает значок на экране.  
  
 Положение прямоугольника определяет размещение значка на экране и значка немасштабируемые и Необрезанный.  
  
 [!code-cpp[System.Drawing.ClassicGraphicsExamples#33](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples/CPP/form1.cpp#33)]
 [!code-csharp[System.Drawing.ClassicGraphicsExamples#33](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples/CS/form1.cs#33)]
 [!code-vb[System.Drawing.ClassicGraphicsExamples#33](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples/VB/form1.vb#33)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          Свойство <paramref name="icon" /> имеет значение <see langword="null" />.</exception>
      </Docs>
    </Member>
    <MemberGroup MemberName="DrawImage">
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Рисует указанный объект <see cref="T:System.Drawing.Image" /> в заданном месте, используя исходный размер.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="DrawImage">
      <MemberSignature Language="C#" Value="public void DrawImage (System.Drawing.Image image, System.Drawing.Point point);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void DrawImage(class System.Drawing.Image image, valuetype System.Drawing.Point point) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.DrawImage(System.Drawing.Image,System.Drawing.Point)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void DrawImage(System::Drawing::Image ^ image, System::Drawing::Point point);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="image" Type="System.Drawing.Image" />
        <Parameter Name="point" Type="System.Drawing.Point" />
      </Parameters>
      <Docs>
        <param name="image">
          Объект <see cref="T:System.Drawing.Image" /> для рисования.</param>
        <param name="point">
          Структура <see cref="T:System.Drawing.Point" />, представляющая расположение верхнего левого угла изображения.</param>
        <summary>Рисует заданный объект <see cref="T:System.Drawing.Image" /> в указанном месте, используя его исходный фактический размер.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Drawing.Image> Сохраняет значение ширины в точках и значение горизонтального разрешения (точек на дюйм). Фактическая ширина, в дюймах изображения является ширина пикселей, деленная на разрешение по горизонтали. Например изображение с ширину 216 точек, при горизонтальном разрешении 72 точек на дюйм будет иметь фактическую ширину 3 дюйма. Аналогичным образом вычисляются высота в точках и фактическая высота.  
  
 Этот метод создает изображение с его фактический размер, поэтому изображение будет иметь правильный размер в дюймах, независимо от того, разрешение (точек на дюйм) устройства отображения. Например предположим, что образ имеет ширину 216 точек, при горизонтальном разрешении 72 точек на дюйм. Если вызвать этот метод для отображения рисунка на устройстве, разрешение которого 96 точек на дюйм, ширина в пикселях подготовленного изображения будет (216/72) * 96 = 288.  
  
   
  
## Examples  
 Следующий пример кода предназначен для работы с Windows Forms, и для него необходим <xref:System.Windows.Forms.PaintEventArgs> `e`, который является параметром <xref:System.Windows.Forms.Control.Paint> обработчика событий. Код выполняет следующие действия.  
  
-   Создает образ, из файла в формате JPEG SampImag.jpg в папке примера.  
  
-   Создает точку, в котором выполняется отрисовка верхнего левого угла изображения.  
  
-   Рисует зависимым изображение на экране.  
  
 [!code-cpp[System.Drawing.ClassicGraphicsExamples#34](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples/CPP/form1.cpp#34)]
 [!code-csharp[System.Drawing.ClassicGraphicsExamples#34](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples/CS/form1.cs#34)]
 [!code-vb[System.Drawing.ClassicGraphicsExamples#34](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples/VB/form1.vb#34)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          Свойство <paramref name="image" /> имеет значение <see langword="null" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="DrawImage">
      <MemberSignature Language="C#" Value="public void DrawImage (System.Drawing.Image image, System.Drawing.Point[] destPoints);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void DrawImage(class System.Drawing.Image image, valuetype System.Drawing.Point[] destPoints) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.DrawImage(System.Drawing.Image,System.Drawing.Point[])" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void DrawImage(System::Drawing::Image ^ image, cli::array &lt;System::Drawing::Point&gt; ^ destPoints);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="image" Type="System.Drawing.Image" />
        <Parameter Name="destPoints" Type="System.Drawing.Point[]" />
      </Parameters>
      <Docs>
        <param name="image">
          Объект <see cref="T:System.Drawing.Image" /> для рисования.</param>
        <param name="destPoints">Массив из трех структур <see cref="T:System.Drawing.Point" />, определяющих параллелограмм.</param>
        <summary>Рисует указанный объект <see cref="T:System.Drawing.Image" /> в заданном месте, используя указанную форму и размер.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 `destPoints` Параметр задает три точки параллелограмма. Три <xref:System.Drawing.Point> структуры представляют собой левый верхний, правый верхний и левый нижний углы параллелограмма. Четвертая точка определяется по первым трем параллелограмма.  
  
 Изображение, представленное `image` параметр масштабируется и обрезается таким образом, чтобы он заполнял параллелограмм, заданный параметром `destPoints` параметров.  
  
   
  
## Examples  
 Следующий пример кода предназначен для работы с Windows Forms, и для него необходим <xref:System.Windows.Forms.PaintEventArgs> `e`, который является параметром <xref:System.Windows.Forms.Control.Paint> обработчика событий. Код выполняет следующие действия.  
  
-   Создает образ, из файла в формате JPEG SampImag.jpg в папке примера.  
  
-   Создает точки, определяющие параллелограмм, в котором будет рисоваться изображение.  
  
-   Рисует изображение на экране.  
  
 Положение параллелограмма определяет размещение рисунка на экране, а размер исходного изображения, размер и форма параллелограмма определяют масштабирование и наклон формируемого изображения.  
  
 [!code-cpp[System.Drawing.ClassicGraphicsExamples#35](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples/CPP/form1.cpp#35)]
 [!code-csharp[System.Drawing.ClassicGraphicsExamples#35](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples/CS/form1.cs#35)]
 [!code-vb[System.Drawing.ClassicGraphicsExamples#35](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples/VB/form1.vb#35)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          Свойство <paramref name="image" /> имеет значение <see langword="null" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="DrawImage">
      <MemberSignature Language="C#" Value="public void DrawImage (System.Drawing.Image image, System.Drawing.PointF point);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void DrawImage(class System.Drawing.Image image, valuetype System.Drawing.PointF point) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.DrawImage(System.Drawing.Image,System.Drawing.PointF)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void DrawImage(System::Drawing::Image ^ image, System::Drawing::PointF point);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="image" Type="System.Drawing.Image" />
        <Parameter Name="point" Type="System.Drawing.PointF" />
      </Parameters>
      <Docs>
        <param name="image">
          Объект <see cref="T:System.Drawing.Image" /> для рисования.</param>
        <param name="point">
          Структура <see cref="T:System.Drawing.PointF" />, задающая расположение верхнего левого угла формируемого изображения.</param>
        <summary>Рисует заданный объект <see cref="T:System.Drawing.Image" /> в указанном месте, используя его исходный фактический размер.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Drawing.Image> Сохраняет значение ширины в точках и значение горизонтального разрешения (точек на дюйм). Фактическая ширина, в дюймах изображения является ширина пикселей, деленная на разрешение по горизонтали. Например изображение с ширину 216 точек, при горизонтальном разрешении 72 точек на дюйм будет иметь фактическую ширину 3 дюйма. Аналогичным образом вычисляются высота в точках и фактическая высота.  
  
 Этот метод создает изображение с его фактический размер, поэтому изображение будет иметь правильный размер в дюймах, независимо от того, разрешение (точек на дюйм) устройства отображения. Например предположим, что образ имеет ширину 216 точек, при горизонтальном разрешении 72 точек на дюйм. Если вызвать этот метод для отображения рисунка на устройстве, разрешение которого 96 точек на дюйм, ширина в пикселях подготовленного изображения будет (216/72) * 96 = 288.  
  
   
  
## Examples  
 Следующий пример кода предназначен для работы с Windows Forms, и для него необходим <xref:System.Windows.Forms.PaintEventArgs> `e`, который является параметром <xref:System.Windows.Forms.Control.Paint> обработчика событий. Код выполняет следующие действия.  
  
-   Создает образ, из файла в формате JPEG SampImag.jpg в папке примера.  
  
-   Создает точку, в котором выполняется отрисовка верхнего левого угла изображения.  
  
-   Рисует зависимым изображение на экране.  
  
 [!code-cpp[System.Drawing.ClassicGraphicsExamples#40](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples/CPP/form1.cpp#40)]
 [!code-csharp[System.Drawing.ClassicGraphicsExamples#40](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples/CS/form1.cs#40)]
 [!code-vb[System.Drawing.ClassicGraphicsExamples#40](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples/VB/form1.vb#40)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          Свойство <paramref name="image" /> имеет значение <see langword="null" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="DrawImage">
      <MemberSignature Language="C#" Value="public void DrawImage (System.Drawing.Image image, System.Drawing.PointF[] destPoints);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void DrawImage(class System.Drawing.Image image, valuetype System.Drawing.PointF[] destPoints) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.DrawImage(System.Drawing.Image,System.Drawing.PointF[])" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void DrawImage(System::Drawing::Image ^ image, cli::array &lt;System::Drawing::PointF&gt; ^ destPoints);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="image" Type="System.Drawing.Image" />
        <Parameter Name="destPoints" Type="System.Drawing.PointF[]" />
      </Parameters>
      <Docs>
        <param name="image">
          Объект <see cref="T:System.Drawing.Image" /> для рисования.</param>
        <param name="destPoints">Массив из трех структур <see cref="T:System.Drawing.PointF" />, определяющих параллелограмм.</param>
        <summary>Рисует указанный объект <see cref="T:System.Drawing.Image" /> в заданном месте, используя указанную форму и размер.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 `destPoints` Параметр задает три точки параллелограмма. Три <xref:System.Drawing.PointF> структуры представляют собой левый верхний, правый верхний и левый нижний углы параллелограмма. Четвертая точка определяется по первым трем параллелограмма.  
  
 Изображение, представленное `image` объект масштабируется и обрезается таким образом, чтобы он заполнял параллелограмм, заданный параметром `destPoints` параметр.  
  
   
  
## Examples  
 Следующий пример кода предназначен для работы с Windows Forms, и для него необходим <xref:System.Windows.Forms.PaintEventArgs> `e`, который является параметром <xref:System.Windows.Forms.Control.Paint> обработчика событий. Код выполняет следующие действия.  
  
-   Создает образ, из файла в формате JPEG SampImag.jpg в папке примера.  
  
-   Создает точки, определяющие параллелограмм, в котором будет рисоваться изображение.  
  
-   Рисует изображение на экране.  
  
 Положение параллелограмма определяет размещение рисунка на экране, а размер исходного изображения, размер и форма параллелограмма определяют масштабирование и наклон формируемого изображения.  
  
 [!code-cpp[System.Drawing.ClassicGraphicsExamples#41](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples/CPP/form1.cpp#41)]
 [!code-csharp[System.Drawing.ClassicGraphicsExamples#41](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples/CS/form1.cs#41)]
 [!code-vb[System.Drawing.ClassicGraphicsExamples#41](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples/VB/form1.vb#41)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          Свойство <paramref name="image" /> имеет значение <see langword="null" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="DrawImage">
      <MemberSignature Language="C#" Value="public void DrawImage (System.Drawing.Image image, System.Drawing.Rectangle rect);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void DrawImage(class System.Drawing.Image image, valuetype System.Drawing.Rectangle rect) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.DrawImage(System.Drawing.Image,System.Drawing.Rectangle)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void DrawImage(System::Drawing::Image ^ image, System::Drawing::Rectangle rect);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="image" Type="System.Drawing.Image" />
        <Parameter Name="rect" Type="System.Drawing.Rectangle" />
      </Parameters>
      <Docs>
        <param name="image">
          Объект <see cref="T:System.Drawing.Image" /> для рисования.</param>
        <param name="rect">
          Структура <see cref="T:System.Drawing.Rectangle" />, которая задает расположение и размер формируемого изображения.</param>
        <summary>Рисует заданный объект <see cref="T:System.Drawing.Image" /> в заданном месте, используя указанный размер.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Изображение, представленное `image` объект масштабируется по размерам `rect` прямоугольник.  
  
   
  
## Examples  
 Следующий пример кода предназначен для работы с Windows Forms, и для него необходим <xref:System.Windows.Forms.PaintEventArgs> `e`, который является параметром <xref:System.Windows.Forms.Control.Paint> обработчика событий. Код выполняет следующие действия.  
  
-   Создает образ, из файла в формате JPEG SampImag.jpg в папке примера.  
  
-   Создает прямоугольник, в котором будет рисоваться изображение.  
  
-   Рисует изображение на экране.  
  
 Положение прямоугольника изображения на экране определяет размещение, а размер исходного изображения и размер прямоугольника — масштабирование.  
  
 [!code-cpp[System.Drawing.ClassicGraphicsExamples#46](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples/CPP/form1.cpp#46)]
 [!code-csharp[System.Drawing.ClassicGraphicsExamples#46](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples/CS/form1.cs#46)]
 [!code-vb[System.Drawing.ClassicGraphicsExamples#46](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples/VB/form1.vb#46)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          Свойство <paramref name="image" /> имеет значение <see langword="null" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="DrawImage">
      <MemberSignature Language="C#" Value="public void DrawImage (System.Drawing.Image image, System.Drawing.RectangleF rect);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void DrawImage(class System.Drawing.Image image, valuetype System.Drawing.RectangleF rect) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.DrawImage(System.Drawing.Image,System.Drawing.RectangleF)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void DrawImage(System::Drawing::Image ^ image, System::Drawing::RectangleF rect);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="image" Type="System.Drawing.Image" />
        <Parameter Name="rect" Type="System.Drawing.RectangleF" />
      </Parameters>
      <Docs>
        <param name="image">
          Объект <see cref="T:System.Drawing.Image" /> для рисования.</param>
        <param name="rect">
          Структура <see cref="T:System.Drawing.RectangleF" />, которая задает расположение и размер формируемого изображения.</param>
        <summary>Рисует заданный объект <see cref="T:System.Drawing.Image" /> в заданном месте, используя указанный размер.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Изображение, представленное `image` объект масштабируется по размерам `rect` прямоугольник.  
  
   
  
## Examples  
 Следующий пример кода предназначен для работы с Windows Forms, и для него необходим <xref:System.Windows.Forms.PaintEventArgs> `e`, который является параметром <xref:System.Windows.Forms.Control.Paint> обработчика событий. Код выполняет следующие действия.  
  
-   Создает образ, из файла в формате JPEG SampImag.jpg в папке примера.  
  
-   Создает прямоугольник, в котором будет рисоваться изображение.  
  
-   Рисует изображение на экране.  
  
 Положение прямоугольника изображения на экране определяет размещение, а исходный размер изображения и размер прямоугольника — масштабирование.  
  
 [!code-cpp[System.Drawing.ClassicGraphicsExamples2#56](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples2/CPP/form1.cpp#56)]
 [!code-csharp[System.Drawing.ClassicGraphicsExamples2#56](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples2/CS/form1.cs#56)]
 [!code-vb[System.Drawing.ClassicGraphicsExamples2#56](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples2/VB/form1.vb#56)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          Свойство <paramref name="image" /> имеет значение <see langword="null" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="DrawImage">
      <MemberSignature Language="C#" Value="public void DrawImage (System.Drawing.Image image, int x, int y);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void DrawImage(class System.Drawing.Image image, int32 x, int32 y) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.DrawImage(System.Drawing.Image,System.Int32,System.Int32)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void DrawImage(System::Drawing::Image ^ image, int x, int y);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="image" Type="System.Drawing.Image" />
        <Parameter Name="x" Type="System.Int32" />
        <Parameter Name="y" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="image">
          Объект <see cref="T:System.Drawing.Image" /> для рисования.</param>
        <param name="x">Координата X верхнего левого угла формируемого изображения.</param>
        <param name="y">Координата Y верхнего левого угла формируемого изображения.</param>
        <summary>Рисует указанное изображение, используя его исходный фактический размер, в месте, заданном парой координат.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Drawing.Image> Сохраняет значение ширины в точках и значение горизонтального разрешения (точек на дюйм). Фактическая ширина, в дюймах изображения является ширина пикселей, деленная на разрешение по горизонтали. Например изображение с ширину 216 точек, при горизонтальном разрешении 72 точек на дюйм будет иметь фактическую ширину 3 дюйма. Аналогичным образом вычисляются высота в точках и фактическая высота.  
  
 <xref:System.Drawing.Graphics.DrawImage%2A> Метод создает изображение с его фактический размер, поэтому изображение будет иметь правильный размер в дюймах, независимо от того, разрешение (точек на дюйм) устройства отображения. Например предположим, что образ имеет ширину 216 точек, при горизонтальном разрешении 72 точек на дюйм. При вызове метода <xref:System.Drawing.Graphics.DrawImage%2A> для отображения этого образа на устройстве с разрешением 96 точек на дюйм, ширина в пикселях подготовленного изображения будет (216/72) * 96 = 288.  
  
   
  
## Examples  
 Следующий пример кода предназначен для работы с Windows Forms, и для него необходим <xref:System.Windows.Forms.PaintEventArgs> `e`, который является параметром <xref:System.Windows.Forms.Control.Paint> обработчика событий. Код выполняет следующие действия.  
  
-   Создает образ, из файла в формате JPEG SampImag.jpg в папке примера SampImag.jpg в папке примера.  
  
-   Определяет координаты точки, в котором выполняется отрисовка верхнего левого угла изображения.  
  
-   Формирует изображение, зависимым.  
  
 [!code-cpp[System.Drawing.ClassicGraphicsExamples2#58](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples2/CPP/form1.cpp#58)]
 [!code-csharp[System.Drawing.ClassicGraphicsExamples2#58](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples2/CS/form1.cs#58)]
 [!code-vb[System.Drawing.ClassicGraphicsExamples2#58](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples2/VB/form1.vb#58)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          Свойство <paramref name="image" /> имеет значение <see langword="null" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="DrawImage">
      <MemberSignature Language="C#" Value="public void DrawImage (System.Drawing.Image image, float x, float y);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void DrawImage(class System.Drawing.Image image, float32 x, float32 y) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.DrawImage(System.Drawing.Image,System.Single,System.Single)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void DrawImage(System::Drawing::Image ^ image, float x, float y);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="image" Type="System.Drawing.Image" />
        <Parameter Name="x" Type="System.Single" />
        <Parameter Name="y" Type="System.Single" />
      </Parameters>
      <Docs>
        <param name="image">
          Объект <see cref="T:System.Drawing.Image" /> для рисования.</param>
        <param name="x">Координата X верхнего левого угла формируемого изображения.</param>
        <param name="y">Координата Y верхнего левого угла формируемого изображения.</param>
        <summary>Рисует заданный объект <see cref="T:System.Drawing.Image" /> в указанном месте, используя его исходный фактический размер.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Drawing.Image> Сохраняет значение ширины в точках и значение горизонтального разрешения (точек на дюйм). Фактическая ширина, в дюймах изображения является ширина пикселей, деленная на разрешение по горизонтали. Например изображение с ширину 216 точек, при горизонтальном разрешении 72 точек на дюйм будет иметь фактическую ширину 3 дюйма. Аналогичным образом вычисляются высота в точках и фактическая высота.  
  
 Этот метод создает изображение с его фактический размер, поэтому изображение будет иметь правильный размер в дюймах, независимо от того, разрешение (точек на дюйм) устройства отображения. Например предположим, что образ имеет ширину 216 точек, при горизонтальном разрешении 72 точек на дюйм. Если вызвать этот метод для отображения рисунка на устройстве, разрешение которого 96 точек на дюйм, ширина в пикселях подготовленного изображения будет (216/72) * 96 = 288.  
  
   
  
## Examples  
 Следующий пример кода предназначен для работы с Windows Forms, и для него необходим <xref:System.Windows.Forms.PaintEventArgs> `e`, который является параметром <xref:System.Windows.Forms.Control.Paint> обработчика событий. Код выполняет следующие действия.  
  
-   Создает образ, из файла в формате JPEG SampImag.jpg в папке примера.  
  
-   Определяет координаты точки, в котором выполняется отрисовка верхнего левого угла изображения.  
  
-   Рисует зависимым изображение на экране.  
  
 [!code-cpp[System.Drawing.ClassicGraphicsExamples2#61](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples2/CPP/form1.cpp#61)]
 [!code-csharp[System.Drawing.ClassicGraphicsExamples2#61](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples2/CS/form1.cs#61)]
 [!code-vb[System.Drawing.ClassicGraphicsExamples2#61](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples2/VB/form1.vb#61)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          Свойство <paramref name="image" /> имеет значение <see langword="null" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="DrawImage">
      <MemberSignature Language="C#" Value="public void DrawImage (System.Drawing.Image image, System.Drawing.Point[] destPoints, System.Drawing.Rectangle srcRect, System.Drawing.GraphicsUnit srcUnit);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void DrawImage(class System.Drawing.Image image, valuetype System.Drawing.Point[] destPoints, valuetype System.Drawing.Rectangle srcRect, valuetype System.Drawing.GraphicsUnit srcUnit) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.DrawImage(System.Drawing.Image,System.Drawing.Point[],System.Drawing.Rectangle,System.Drawing.GraphicsUnit)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void DrawImage(System::Drawing::Image ^ image, cli::array &lt;System::Drawing::Point&gt; ^ destPoints, System::Drawing::Rectangle srcRect, System::Drawing::GraphicsUnit srcUnit);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="image" Type="System.Drawing.Image" />
        <Parameter Name="destPoints" Type="System.Drawing.Point[]" />
        <Parameter Name="srcRect" Type="System.Drawing.Rectangle" />
        <Parameter Name="srcUnit" Type="System.Drawing.GraphicsUnit" />
      </Parameters>
      <Docs>
        <param name="image">
          Объект <see cref="T:System.Drawing.Image" /> для рисования.</param>
        <param name="destPoints">Массив из трех структур <see cref="T:System.Drawing.Point" />, определяющих параллелограмм.</param>
        <param name="srcRect">
          Структура <see cref="T:System.Drawing.Rectangle" />, которая задает часть объекта <c>image</c> для рисования.</param>
        <param name="srcUnit">Элемент перечисления <see cref="T:System.Drawing.GraphicsUnit" />, задающий единицы измерения, используемые параметром <c>srcRect</c>.</param>
        <summary>Рисует заданную часть указанного объекта <see cref="T:System.Drawing.Image" /> в заданном месте, используя заданный размер.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 `destPoints` Параметр задает три точки параллелограмма. Три <xref:System.Drawing.Point> структуры представляют собой левый верхний, правый верхний и левый нижний углы параллелограмма. Четвертая точка определяется по первым трем параллелограмма.  
  
 `srcRect` Указывает Прямоугольный фрагмент `image` для рисования. Эта часть масштабируется и обрезается по размерам параллелограмм, заданный параметром `destPoints` параметр.  
  
   
  
## Examples  
 Следующий пример кода предназначен для работы с Windows Forms, и для него необходим <xref:System.Windows.Forms.PaintEventArgs> `e`, который является параметром <xref:System.Windows.Forms.Control.Paint> обработчика событий. Код выполняет следующие действия.  
  
-   Создает образ, из файла в формате JPEG SampImag.jpg в папке примера.  
  
-   Создает точки, определяющие параллелограмм, в котором будет рисоваться изображение.  
  
-   Создает прямоугольник, чтобы выбрать часть изображения для рисования.  
  
-   Назначает точку единицей рисования.  
  
-   Рисует изображение на экране.  
  
 Положение параллелограмма определяет размещение рисунка на экране, и размер прямоугольника, размер и форма параллелограмма определяют масштабирование и наклон формируемого изображения.  
  
 [!code-cpp[System.Drawing.ClassicGraphicsExamples#36](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples/CPP/form1.cpp#36)]
 [!code-csharp[System.Drawing.ClassicGraphicsExamples#36](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples/CS/form1.cs#36)]
 [!code-vb[System.Drawing.ClassicGraphicsExamples#36](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples/VB/form1.vb#36)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          Свойство <paramref name="image" /> имеет значение <see langword="null" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="DrawImage">
      <MemberSignature Language="C#" Value="public void DrawImage (System.Drawing.Image image, System.Drawing.PointF[] destPoints, System.Drawing.RectangleF srcRect, System.Drawing.GraphicsUnit srcUnit);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void DrawImage(class System.Drawing.Image image, valuetype System.Drawing.PointF[] destPoints, valuetype System.Drawing.RectangleF srcRect, valuetype System.Drawing.GraphicsUnit srcUnit) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.DrawImage(System.Drawing.Image,System.Drawing.PointF[],System.Drawing.RectangleF,System.Drawing.GraphicsUnit)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void DrawImage(System::Drawing::Image ^ image, cli::array &lt;System::Drawing::PointF&gt; ^ destPoints, System::Drawing::RectangleF srcRect, System::Drawing::GraphicsUnit srcUnit);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="image" Type="System.Drawing.Image" />
        <Parameter Name="destPoints" Type="System.Drawing.PointF[]" />
        <Parameter Name="srcRect" Type="System.Drawing.RectangleF" />
        <Parameter Name="srcUnit" Type="System.Drawing.GraphicsUnit" />
      </Parameters>
      <Docs>
        <param name="image">
          Объект <see cref="T:System.Drawing.Image" /> для рисования.</param>
        <param name="destPoints">Массив из трех структур <see cref="T:System.Drawing.PointF" />, определяющих параллелограмм.</param>
        <param name="srcRect">
          Структура <see cref="T:System.Drawing.RectangleF" />, которая задает часть объекта <c>image</c> для рисования.</param>
        <param name="srcUnit">Элемент перечисления <see cref="T:System.Drawing.GraphicsUnit" />, задающий единицы измерения, используемые параметром <c>srcRect</c>.</param>
        <summary>Рисует заданную часть указанного объекта <see cref="T:System.Drawing.Image" /> в заданном месте, используя заданный размер.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 `destPoints` Параметр задает три точки параллелограмма. Три <xref:System.Drawing.PointF> структуры представляют собой левый верхний, правый верхний и левый нижний углы параллелограмма. Четвертая точка определяется по первым трем параллелограмма.  
  
 `srcRect` Указывает Прямоугольный фрагмент `image` для рисования. Эта часть масштабируется и обрезается по размерам параллелограмм, заданный параметром `destPoints` параметр.  
  
   
  
## Examples  
 Следующий пример кода предназначен для работы с Windows Forms, и для него необходим <xref:System.Windows.Forms.PaintEventArgs> `e`, который является параметром <xref:System.Windows.Forms.Control.Paint> обработчика событий. Код выполняет следующие действия.  
  
-   Создает образ, из файла в формате JPEG SampImag.jpg в папке примера.  
  
-   Создает точки, определяющие конечный параллелограмм, в котором будет рисоваться изображение.  
  
-   Создает исходный прямоугольник, из которого требуется извлечь часть изображения.  
  
-   Задает единицы измерения исходного прямоугольника в пикселях.  
  
-   Рисует изображение на экране.  
  
 Положение конечного параллелограмма определяет размещение рисунка на экране, размер исходного прямоугольника, размер и форма конечного параллелограмма определяют масштабирование и наклон изображения и определяет размер прямоугольника на экран выводится части исходного изображения.  
  
 [!code-cpp[System.Drawing.ClassicGraphicsExamples#42](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples/CPP/form1.cpp#42)]
 [!code-csharp[System.Drawing.ClassicGraphicsExamples#42](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples/CS/form1.cs#42)]
 [!code-vb[System.Drawing.ClassicGraphicsExamples#42](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples/VB/form1.vb#42)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          Свойство <paramref name="image" /> имеет значение <see langword="null" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="DrawImage">
      <MemberSignature Language="C#" Value="public void DrawImage (System.Drawing.Image image, System.Drawing.Rectangle destRect, System.Drawing.Rectangle srcRect, System.Drawing.GraphicsUnit srcUnit);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void DrawImage(class System.Drawing.Image image, valuetype System.Drawing.Rectangle destRect, valuetype System.Drawing.Rectangle srcRect, valuetype System.Drawing.GraphicsUnit srcUnit) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.DrawImage(System.Drawing.Image,System.Drawing.Rectangle,System.Drawing.Rectangle,System.Drawing.GraphicsUnit)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void DrawImage(System::Drawing::Image ^ image, System::Drawing::Rectangle destRect, System::Drawing::Rectangle srcRect, System::Drawing::GraphicsUnit srcUnit);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="image" Type="System.Drawing.Image" />
        <Parameter Name="destRect" Type="System.Drawing.Rectangle" />
        <Parameter Name="srcRect" Type="System.Drawing.Rectangle" />
        <Parameter Name="srcUnit" Type="System.Drawing.GraphicsUnit" />
      </Parameters>
      <Docs>
        <param name="image">
          Объект <see cref="T:System.Drawing.Image" /> для рисования.</param>
        <param name="destRect">
          Структура <see cref="T:System.Drawing.Rectangle" />, которая задает расположение и размер формируемого изображения. Изображение масштабируется по размерам прямоугольника.</param>
        <param name="srcRect">
          Структура <see cref="T:System.Drawing.Rectangle" />, которая задает часть объекта <c>image</c> для рисования.</param>
        <param name="srcUnit">Элемент перечисления <see cref="T:System.Drawing.GraphicsUnit" />, задающий единицы измерения, используемые параметром <c>srcRect</c>.</param>
        <summary>Рисует заданную часть указанного объекта <see cref="T:System.Drawing.Image" /> в заданном месте, используя заданный размер.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 `srcRect` Указывает Прямоугольный фрагмент `image` для рисования. Эта часть масштабируется по размерам прямоугольника, заданного параметром `destRect` параметр.  
  
   
  
## Examples  
 Следующий пример кода предназначен для работы с Windows Forms, и для него необходим <xref:System.Windows.Forms.PaintEventArgs> `e`, который является параметром <xref:System.Windows.Forms.Control.Paint> обработчика событий. Код выполняет следующие действия.  
  
-   Создает образ, из файла в формате JPEG SampImag.jpg в папке примера.  
  
-   Создает конечный прямоугольник, в котором будет рисоваться изображение.  
  
-   Создает исходный прямоугольник, из которого требуется извлечь часть изображения.  
  
-   Задает единицы измерения исходного прямоугольника в пикселях.  
  
-   Рисует изображение на экране.  
  
 Положение прямоугольника назначения размещение рисунка на экране, размеры исходного и конечного прямоугольников — масштабирование изображения и размер исходного прямоугольника определяет строится, какая часть исходного изображения экран.  
  
 [!code-cpp[System.Drawing.ClassicGraphicsExamples#47](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples/CPP/form1.cpp#47)]
 [!code-csharp[System.Drawing.ClassicGraphicsExamples#47](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples/CS/form1.cs#47)]
 [!code-vb[System.Drawing.ClassicGraphicsExamples#47](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples/VB/form1.vb#47)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          Свойство <paramref name="image" /> имеет значение <see langword="null" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="DrawImage">
      <MemberSignature Language="C#" Value="public void DrawImage (System.Drawing.Image image, System.Drawing.RectangleF destRect, System.Drawing.RectangleF srcRect, System.Drawing.GraphicsUnit srcUnit);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void DrawImage(class System.Drawing.Image image, valuetype System.Drawing.RectangleF destRect, valuetype System.Drawing.RectangleF srcRect, valuetype System.Drawing.GraphicsUnit srcUnit) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.DrawImage(System.Drawing.Image,System.Drawing.RectangleF,System.Drawing.RectangleF,System.Drawing.GraphicsUnit)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void DrawImage(System::Drawing::Image ^ image, System::Drawing::RectangleF destRect, System::Drawing::RectangleF srcRect, System::Drawing::GraphicsUnit srcUnit);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="image" Type="System.Drawing.Image" />
        <Parameter Name="destRect" Type="System.Drawing.RectangleF" />
        <Parameter Name="srcRect" Type="System.Drawing.RectangleF" />
        <Parameter Name="srcUnit" Type="System.Drawing.GraphicsUnit" />
      </Parameters>
      <Docs>
        <param name="image">
          Объект <see cref="T:System.Drawing.Image" /> для рисования.</param>
        <param name="destRect">
          Структура <see cref="T:System.Drawing.RectangleF" />, которая задает расположение и размер формируемого изображения. Изображение масштабируется по размерам прямоугольника.</param>
        <param name="srcRect">
          Структура <see cref="T:System.Drawing.RectangleF" />, которая задает часть объекта <c>image</c> для рисования.</param>
        <param name="srcUnit">Элемент перечисления <see cref="T:System.Drawing.GraphicsUnit" />, задающий единицы измерения, используемые параметром <c>srcRect</c>.</param>
        <summary>Рисует заданную часть указанного объекта <see cref="T:System.Drawing.Image" /> в заданном месте, используя заданный размер.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 `srcRect` Указывает Прямоугольный фрагмент `image` для рисования. Эта часть масштабируется по размерам прямоугольника, заданного параметром `destRect` параметр.  
  
   
  
## Examples  
 Следующий пример кода предназначен для работы с Windows Forms, и для него необходим <xref:System.Windows.Forms.PaintEventArgs> `e`, который является параметром <xref:System.Windows.Forms.Control.Paint> обработчика событий. Код выполняет следующие действия.  
  
-   Создает образ, из файла в формате JPEG SampImag.jpg в папке примера.  
  
-   Создает конечный прямоугольник, в котором будет рисоваться изображение.  
  
-   Создает исходный прямоугольник, из которого требуется извлечь часть изображения.  
  
-   Задает единицы измерения исходного прямоугольника в пикселях.  
  
-   Рисует изображение на экране.  
  
 Положение прямоугольника назначения размещение рисунка на экране, размеры исходного и конечного прямоугольников — масштабирование изображения и размер исходного прямоугольника определяет строится, какая часть исходного изображения экран.  
  
 [!code-cpp[System.Drawing.ClassicGraphicsExamples2#57](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples2/CPP/form1.cpp#57)]
 [!code-csharp[System.Drawing.ClassicGraphicsExamples2#57](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples2/CS/form1.cs#57)]
 [!code-vb[System.Drawing.ClassicGraphicsExamples2#57](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples2/VB/form1.vb#57)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          Свойство <paramref name="image" /> имеет значение <see langword="null" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="DrawImage">
      <MemberSignature Language="C#" Value="public void DrawImage (System.Drawing.Image image, System.Drawing.Point[] destPoints, System.Drawing.Rectangle srcRect, System.Drawing.GraphicsUnit srcUnit, System.Drawing.Imaging.ImageAttributes imageAttr);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void DrawImage(class System.Drawing.Image image, valuetype System.Drawing.Point[] destPoints, valuetype System.Drawing.Rectangle srcRect, valuetype System.Drawing.GraphicsUnit srcUnit, class System.Drawing.Imaging.ImageAttributes imageAttr) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.DrawImage(System.Drawing.Image,System.Drawing.Point[],System.Drawing.Rectangle,System.Drawing.GraphicsUnit,System.Drawing.Imaging.ImageAttributes)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void DrawImage(System::Drawing::Image ^ image, cli::array &lt;System::Drawing::Point&gt; ^ destPoints, System::Drawing::Rectangle srcRect, System::Drawing::GraphicsUnit srcUnit, System::Drawing::Imaging::ImageAttributes ^ imageAttr);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="image" Type="System.Drawing.Image" />
        <Parameter Name="destPoints" Type="System.Drawing.Point[]" />
        <Parameter Name="srcRect" Type="System.Drawing.Rectangle" />
        <Parameter Name="srcUnit" Type="System.Drawing.GraphicsUnit" />
        <Parameter Name="imageAttr" Type="System.Drawing.Imaging.ImageAttributes" />
      </Parameters>
      <Docs>
        <param name="image">
          Объект <see cref="T:System.Drawing.Image" /> для рисования.</param>
        <param name="destPoints">Массив из трех структур <see cref="T:System.Drawing.Point" />, определяющих параллелограмм.</param>
        <param name="srcRect">
          Структура <see cref="T:System.Drawing.Rectangle" />, которая задает часть объекта <c>image</c> для рисования.</param>
        <param name="srcUnit">Элемент перечисления <see cref="T:System.Drawing.GraphicsUnit" />, задающий единицы измерения, используемые параметром <c>srcRect</c>.</param>
        <param name="imageAttr">
          Атрибуты <see cref="T:System.Drawing.Imaging.ImageAttributes" />, содержащие сведения о гамме и перекрашивании для объекта <c>image</c>.</param>
        <summary>Рисует заданную часть указанного объекта <see cref="T:System.Drawing.Image" /> в заданном месте.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 `destPoints` Параметр задает три точки параллелограмма. Три <xref:System.Drawing.Point> структуры представляют собой левый верхний, правый верхний и левый нижний углы параллелограмма. Четвертая точка определяется по первым трем параллелограмма.  
  
 `srcRect` Указывает Прямоугольный фрагмент`image` для рисования. Эта часть масштабируется и обрезается по размерам параллелограмм, заданный параметром `destPoints` параметр.  
  
   
  
## Examples  
 Следующий пример кода предназначен для работы с Windows Forms, и для него необходим <xref:System.Windows.Forms.PaintEventArgs> `e`, который является параметром <xref:System.Windows.Forms.Control.Paint> обработчика событий. Код выполняет следующие действия.  
  
-   Создает образ, из файла в формате JPEG SampImag.jpg в папке примера.  
  
-   Создает точки, определяющие параллелограмм, в котором будет рисоваться изображение.  
  
-   Создает прямоугольник, чтобы выбрать часть изображения для рисования.  
  
-   Назначает точку единицей рисования.  
  
-   Выводит на экран исходного изображения.  
  
-   Создает дополнительный параллелограмм для рисования настроенного изображения.  
  
-   Создает и задает атрибуты настраиваемого изображения для получения большего размера — от обычные гамма-значение.  
  
-   Отображает настроенное изображение на экране.  
  
 Для исходного ненастроенного параллелограмма позиция определяет местоположение изображения на экране и размер прямоугольника, размер и форма параллелограмма определяют масштабирование и наклон формируемого изображения.  
  
 [!code-cpp[System.Drawing.ClassicGraphicsExamples#37](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples/CPP/form1.cpp#37)]
 [!code-csharp[System.Drawing.ClassicGraphicsExamples#37](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples/CS/form1.cs#37)]
 [!code-vb[System.Drawing.ClassicGraphicsExamples#37](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples/VB/form1.vb#37)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          Свойство <paramref name="image" /> имеет значение <see langword="null" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="DrawImage">
      <MemberSignature Language="C#" Value="public void DrawImage (System.Drawing.Image image, System.Drawing.PointF[] destPoints, System.Drawing.RectangleF srcRect, System.Drawing.GraphicsUnit srcUnit, System.Drawing.Imaging.ImageAttributes imageAttr);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void DrawImage(class System.Drawing.Image image, valuetype System.Drawing.PointF[] destPoints, valuetype System.Drawing.RectangleF srcRect, valuetype System.Drawing.GraphicsUnit srcUnit, class System.Drawing.Imaging.ImageAttributes imageAttr) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.DrawImage(System.Drawing.Image,System.Drawing.PointF[],System.Drawing.RectangleF,System.Drawing.GraphicsUnit,System.Drawing.Imaging.ImageAttributes)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void DrawImage(System::Drawing::Image ^ image, cli::array &lt;System::Drawing::PointF&gt; ^ destPoints, System::Drawing::RectangleF srcRect, System::Drawing::GraphicsUnit srcUnit, System::Drawing::Imaging::ImageAttributes ^ imageAttr);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="image" Type="System.Drawing.Image" />
        <Parameter Name="destPoints" Type="System.Drawing.PointF[]" />
        <Parameter Name="srcRect" Type="System.Drawing.RectangleF" />
        <Parameter Name="srcUnit" Type="System.Drawing.GraphicsUnit" />
        <Parameter Name="imageAttr" Type="System.Drawing.Imaging.ImageAttributes" />
      </Parameters>
      <Docs>
        <param name="image">
          Объект <see cref="T:System.Drawing.Image" /> для рисования.</param>
        <param name="destPoints">Массив из трех структур <see cref="T:System.Drawing.PointF" />, определяющих параллелограмм.</param>
        <param name="srcRect">
          Структура <see cref="T:System.Drawing.RectangleF" />, которая задает часть объекта <c>image</c> для рисования.</param>
        <param name="srcUnit">Элемент перечисления <see cref="T:System.Drawing.GraphicsUnit" />, задающий единицы измерения, используемые параметром <c>srcRect</c>.</param>
        <param name="imageAttr">
          Атрибуты <see cref="T:System.Drawing.Imaging.ImageAttributes" />, содержащие сведения о гамме и перекрашивании для объекта <c>image</c>.</param>
        <summary>Рисует заданную часть указанного объекта <see cref="T:System.Drawing.Image" /> в заданном месте, используя заданный размер.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 `destPoints` Параметр задает три точки параллелограмма. Три <xref:System.Drawing.PointF> структуры представляют собой левый верхний, правый верхний и левый нижний углы параллелограмма. Четвертая точка определяется по первым трем параллелограмма.  
  
 `srcRect` Указывает Прямоугольный фрагмент `image` для рисования. Эта часть масштабируется и обрезается по размерам параллелограмм, заданный параметром `destPoints` параметр.  
  
   
  
## Examples  
 Следующий пример кода предназначен для работы с Windows Forms, и для него необходим <xref:System.Windows.Forms.PaintEventArgs> `e`, который является параметром <xref:System.Windows.Forms.Control.Paint> обработчика событий. Код выполняет следующие действия.  
  
-   Создает образ, из файла в формате JPEG SampImag.jpg в папке примера.  
  
-   Создает точки, определяющие конечный параллелограмм, в котором будет рисоваться изображение.  
  
-   Создает исходный прямоугольник, из которого требуется извлечь часть изображения.  
  
-   Задает единицы измерения исходного прямоугольника в пикселях.  
  
-   Выводит на экран исходного изображения.  
  
-   Создает дополнительный параллелограмм для рисования настроенного изображения.  
  
-   Создает и задает атрибуты настраиваемого изображения для получения большего размера — от обычные гамма-значение.  
  
-   Отображает настроенное изображение на экране.  
  
 Для исходного ненастроенного конечного параллелограмма позиция определяет местоположение изображения на экране, размер исходного прямоугольника и размер и форма конечного параллелограмма определяют масштабирование и обрезку изображения и размер прямоугольник определяет, какая часть исходного изображения выводится на экран.  
  
 [!code-cpp[System.Drawing.ClassicGraphicsExamples#43](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples/CPP/form1.cpp#43)]
 [!code-csharp[System.Drawing.ClassicGraphicsExamples#43](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples/CS/form1.cs#43)]
 [!code-vb[System.Drawing.ClassicGraphicsExamples#43](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples/VB/form1.vb#43)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          Свойство <paramref name="image" /> имеет значение <see langword="null" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="DrawImage">
      <MemberSignature Language="C#" Value="public void DrawImage (System.Drawing.Image image, int x, int y, System.Drawing.Rectangle srcRect, System.Drawing.GraphicsUnit srcUnit);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void DrawImage(class System.Drawing.Image image, int32 x, int32 y, valuetype System.Drawing.Rectangle srcRect, valuetype System.Drawing.GraphicsUnit srcUnit) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.DrawImage(System.Drawing.Image,System.Int32,System.Int32,System.Drawing.Rectangle,System.Drawing.GraphicsUnit)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void DrawImage(System::Drawing::Image ^ image, int x, int y, System::Drawing::Rectangle srcRect, System::Drawing::GraphicsUnit srcUnit);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="image" Type="System.Drawing.Image" />
        <Parameter Name="x" Type="System.Int32" />
        <Parameter Name="y" Type="System.Int32" />
        <Parameter Name="srcRect" Type="System.Drawing.Rectangle" />
        <Parameter Name="srcUnit" Type="System.Drawing.GraphicsUnit" />
      </Parameters>
      <Docs>
        <param name="image">
          Объект <see cref="T:System.Drawing.Image" /> для рисования.</param>
        <param name="x">Координата X верхнего левого угла формируемого изображения.</param>
        <param name="y">Координата Y верхнего левого угла формируемого изображения.</param>
        <param name="srcRect">
          Структура <see cref="T:System.Drawing.Rectangle" />, которая задает часть объекта <c>image</c> для рисования.</param>
        <param name="srcUnit">Элемент перечисления <see cref="T:System.Drawing.GraphicsUnit" />, задающий единицы измерения, используемые параметром <c>srcRect</c>.</param>
        <summary>Рисует часть изображения в заданном месте.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Drawing.Image> Сохраняет значение ширины в точках и значение горизонтального разрешения (точек на дюйм). Фактическая ширина, в дюймах изображения является ширина пикселей, деленная на разрешение по горизонтали. Например рисунок, имеющий ширину 360 точек, при горизонтальном разрешении 72 точек на дюйм будет фактическую ширину 5 дюймов. Аналогичным образом вычисляются высота в точках и фактическая высота.  
  
 Этот метод рисует часть изображения с помощью его фактический размер, поэтому часть изображения будет иметь правильный размер в дюймах, независимо от того, разрешение (точек на дюйм) устройства отображения. Например предположим, что фрагмента рисунка имеет ширину 216 точек, при горизонтальном разрешении 72 точек на дюйм. Если вызвать этот метод для создания части рисунка на устройстве, разрешение которого 96 точек на дюйм, ширина в пикселях отрисованного изображения со списком будут (216/72) * 96 = 288.  
  
   
  
## Examples  
 Следующий пример кода предназначен для работы с Windows Forms, и для него необходим <xref:System.Windows.Forms.PaintEventArgs> `e`, который является параметром <xref:System.Windows.Forms.Control.Paint> обработчика событий. Код выполняет следующие действия.  
  
-   Создает образ, из файла в формате JPEG SampImag.jpg в папке примера.  
  
-   Создает координаты нарисовать верхнего левого угла изображения.  
  
-   Создает исходный прямоугольник, из которого требуется извлечь часть изображения.  
  
-   Задает единицы измерения исходного прямоугольника в пикселях.  
  
-   Рисует изображение на экране.  
  
 Размер исходного прямоугольника определяет, какая часть зависимым исходное изображение выводится на экран.  
  
 [!code-cpp[System.Drawing.ClassicGraphicsExamples2#59](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples2/CPP/form1.cpp#59)]
 [!code-csharp[System.Drawing.ClassicGraphicsExamples2#59](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples2/CS/form1.cs#59)]
 [!code-vb[System.Drawing.ClassicGraphicsExamples2#59](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples2/VB/form1.vb#59)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          Свойство <paramref name="image" /> имеет значение <see langword="null" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="DrawImage">
      <MemberSignature Language="C#" Value="public void DrawImage (System.Drawing.Image image, int x, int y, int width, int height);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void DrawImage(class System.Drawing.Image image, int32 x, int32 y, int32 width, int32 height) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.DrawImage(System.Drawing.Image,System.Int32,System.Int32,System.Int32,System.Int32)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void DrawImage(System::Drawing::Image ^ image, int x, int y, int width, int height);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="image" Type="System.Drawing.Image" />
        <Parameter Name="x" Type="System.Int32" />
        <Parameter Name="y" Type="System.Int32" />
        <Parameter Name="width" Type="System.Int32" />
        <Parameter Name="height" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="image">
          Объект <see cref="T:System.Drawing.Image" /> для рисования.</param>
        <param name="x">Координата X верхнего левого угла формируемого изображения.</param>
        <param name="y">Координата Y верхнего левого угла формируемого изображения.</param>
        <param name="width">Ширина формируемого изображения.</param>
        <param name="height">Высота формируемого изображения.</param>
        <summary>Рисует заданный объект <see cref="T:System.Drawing.Image" /> в заданном месте, используя указанный размер.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Прямоугольник, определяемый `x`, `y`, `width`, и `height` параметров определяет положение и Размер формируемого изображения.  
  
   
  
## Examples  
 Следующий пример кода предназначен для работы с Windows Forms, и для него необходим <xref:System.Windows.Forms.PaintEventArgs> `e`, который является параметром <xref:System.Windows.Forms.Control.Paint> обработчика событий. Код выполняет следующие действия.  
  
-   Создает образ, из файла в формате JPEG SampImag.jpg в папке примера.  
  
-   Определяет положение и размер прямоугольника, в котором будет рисоваться изображение.  
  
-   Рисует изображение на экране.  
  
 Положение прямоугольника изображения на экране определяет размещение, а размер исходного изображения и размер прямоугольника — масштабирование.  
  
 [!code-cpp[System.Drawing.ClassicGraphicsExamples2#60](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples2/CPP/form1.cpp#60)]
 [!code-csharp[System.Drawing.ClassicGraphicsExamples2#60](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples2/CS/form1.cs#60)]
 [!code-vb[System.Drawing.ClassicGraphicsExamples2#60](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples2/VB/form1.vb#60)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          Свойство <paramref name="image" /> имеет значение <see langword="null" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="DrawImage">
      <MemberSignature Language="C#" Value="public void DrawImage (System.Drawing.Image image, float x, float y, System.Drawing.RectangleF srcRect, System.Drawing.GraphicsUnit srcUnit);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void DrawImage(class System.Drawing.Image image, float32 x, float32 y, valuetype System.Drawing.RectangleF srcRect, valuetype System.Drawing.GraphicsUnit srcUnit) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.DrawImage(System.Drawing.Image,System.Single,System.Single,System.Drawing.RectangleF,System.Drawing.GraphicsUnit)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void DrawImage(System::Drawing::Image ^ image, float x, float y, System::Drawing::RectangleF srcRect, System::Drawing::GraphicsUnit srcUnit);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="image" Type="System.Drawing.Image" />
        <Parameter Name="x" Type="System.Single" />
        <Parameter Name="y" Type="System.Single" />
        <Parameter Name="srcRect" Type="System.Drawing.RectangleF" />
        <Parameter Name="srcUnit" Type="System.Drawing.GraphicsUnit" />
      </Parameters>
      <Docs>
        <param name="image">
          Объект <see cref="T:System.Drawing.Image" /> для рисования.</param>
        <param name="x">Координата X верхнего левого угла формируемого изображения.</param>
        <param name="y">Координата Y верхнего левого угла формируемого изображения.</param>
        <param name="srcRect">
          Структура <see cref="T:System.Drawing.RectangleF" />, которая задает часть объекта <see cref="T:System.Drawing.Image" /> для рисования.</param>
        <param name="srcUnit">Элемент перечисления <see cref="T:System.Drawing.GraphicsUnit" />, задающий единицы измерения, используемые параметром <c>srcRect</c>.</param>
        <summary>Рисует часть изображения в заданном месте.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Drawing.Image> Сохраняет значение ширины в точках и значение горизонтального разрешения (точек на дюйм). Фактическая ширина, в дюймах изображения является ширина пикселей, деленная на разрешение по горизонтали. Например рисунок, имеющий ширину 360 точек, при горизонтальном разрешении 72 точек на дюйм будет фактическую ширину 5 дюймов. Аналогичным образом вычисляются высота в точках и фактическая высота.  
  
 Этот метод рисует часть изображения с помощью его фактический размер, поэтому часть изображения будет иметь правильный размер в дюймах, независимо от того, разрешение (точек на дюйм) устройства отображения. Например предположим, что фрагмента рисунка имеет ширину 216 точек, при горизонтальном разрешении 72 точек на дюйм. Если вызвать этот метод для создания части рисунка на устройстве, разрешение которого 96 точек на дюйм, ширина в пикселях отрисованного изображения со списком будут (216/72) * 96 = 288.  
  
   
  
## Examples  
 Следующий пример кода предназначен для работы с Windows Forms, и для него необходим <xref:System.Windows.Forms.PaintEventArgs> `e`, который является параметром <xref:System.Windows.Forms.Control.Paint> обработчика событий. Код выполняет следующие действия.  
  
-   Создает образ, из файла в формате JPEG SampImag.jpg в папке примера.  
  
-   Создает координаты нарисовать верхнего левого угла изображения.  
  
-   Создает исходный прямоугольник, из которого требуется извлечь часть изображения.  
  
-   Задает единицы измерения исходного прямоугольника в пикселях.  
  
-   Рисует изображение на экране.  
  
 Размер исходного прямоугольника определяет, какая часть зависимым исходное изображение выводится на экран.  
  
 [!code-cpp[System.Drawing.ClassicGraphicsExamples2#62](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples2/CPP/form1.cpp#62)]
 [!code-csharp[System.Drawing.ClassicGraphicsExamples2#62](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples2/CS/form1.cs#62)]
 [!code-vb[System.Drawing.ClassicGraphicsExamples2#62](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples2/VB/form1.vb#62)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          Свойство <paramref name="image" /> имеет значение <see langword="null" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="DrawImage">
      <MemberSignature Language="C#" Value="public void DrawImage (System.Drawing.Image image, float x, float y, float width, float height);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void DrawImage(class System.Drawing.Image image, float32 x, float32 y, float32 width, float32 height) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.DrawImage(System.Drawing.Image,System.Single,System.Single,System.Single,System.Single)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void DrawImage(System::Drawing::Image ^ image, float x, float y, float width, float height);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="image" Type="System.Drawing.Image" />
        <Parameter Name="x" Type="System.Single" />
        <Parameter Name="y" Type="System.Single" />
        <Parameter Name="width" Type="System.Single" />
        <Parameter Name="height" Type="System.Single" />
      </Parameters>
      <Docs>
        <param name="image">
          Объект <see cref="T:System.Drawing.Image" /> для рисования.</param>
        <param name="x">Координата X верхнего левого угла формируемого изображения.</param>
        <param name="y">Координата Y верхнего левого угла формируемого изображения.</param>
        <param name="width">Ширина формируемого изображения.</param>
        <param name="height">Высота формируемого изображения.</param>
        <summary>Рисует заданный объект <see cref="T:System.Drawing.Image" /> в заданном месте, используя указанный размер.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Прямоугольник, определяемый `x`, `y`, `width`, и `height` параметров определяет положение и Размер формируемого изображения.  
  
   
  
## Examples  
 Следующий пример кода предназначен для работы с Windows Forms, и для него необходим <xref:System.Windows.Forms.PaintEventArgs> `e`, который является параметром <xref:System.Windows.Forms.Control.Paint> обработчика событий. Код выполняет следующие действия.  
  
-   Создает образ, из файла в формате JPEG SampImag.jpg в папке примера.  
  
-   Определяет положение и размер прямоугольника, в котором будет рисоваться изображение.  
  
-   Рисует изображение на экране.  
  
 Положение прямоугольника изображения на экране определяет размещение, а размер исходного изображения и размер прямоугольника — масштабирование.  
  
 [!code-cpp[System.Drawing.ClassicGraphicsExamples2#63](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples2/CPP/form1.cpp#63)]
 [!code-csharp[System.Drawing.ClassicGraphicsExamples2#63](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples2/CS/form1.cs#63)]
 [!code-vb[System.Drawing.ClassicGraphicsExamples2#63](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples2/VB/form1.vb#63)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          Свойство <paramref name="image" /> имеет значение <see langword="null" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="DrawImage">
      <MemberSignature Language="C#" Value="public void DrawImage (System.Drawing.Image image, System.Drawing.Point[] destPoints, System.Drawing.Rectangle srcRect, System.Drawing.GraphicsUnit srcUnit, System.Drawing.Imaging.ImageAttributes imageAttr, System.Drawing.Graphics.DrawImageAbort callback);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void DrawImage(class System.Drawing.Image image, valuetype System.Drawing.Point[] destPoints, valuetype System.Drawing.Rectangle srcRect, valuetype System.Drawing.GraphicsUnit srcUnit, class System.Drawing.Imaging.ImageAttributes imageAttr, class System.Drawing.Graphics/DrawImageAbort callback) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.DrawImage(System.Drawing.Image,System.Drawing.Point[],System.Drawing.Rectangle,System.Drawing.GraphicsUnit,System.Drawing.Imaging.ImageAttributes,System.Drawing.Graphics.DrawImageAbort)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void DrawImage(System::Drawing::Image ^ image, cli::array &lt;System::Drawing::Point&gt; ^ destPoints, System::Drawing::Rectangle srcRect, System::Drawing::GraphicsUnit srcUnit, System::Drawing::Imaging::ImageAttributes ^ imageAttr, System::Drawing::Graphics::DrawImageAbort ^ callback);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="image" Type="System.Drawing.Image" />
        <Parameter Name="destPoints" Type="System.Drawing.Point[]" />
        <Parameter Name="srcRect" Type="System.Drawing.Rectangle" />
        <Parameter Name="srcUnit" Type="System.Drawing.GraphicsUnit" />
        <Parameter Name="imageAttr" Type="System.Drawing.Imaging.ImageAttributes" />
        <Parameter Name="callback" Type="System.Drawing.Graphics+DrawImageAbort" />
      </Parameters>
      <Docs>
        <param name="image">
          Объект <see cref="T:System.Drawing.Image" /> для рисования.</param>
        <param name="destPoints">Массив из трех структур <see cref="T:System.Drawing.PointF" />, определяющих параллелограмм.</param>
        <param name="srcRect">
          Структура <see cref="T:System.Drawing.Rectangle" />, которая задает часть объекта <c>image</c> для рисования.</param>
        <param name="srcUnit">Элемент перечисления <see cref="T:System.Drawing.GraphicsUnit" />, задающий единицы измерения, используемые параметром <c>srcRect</c>.</param>
        <param name="imageAttr">
          Атрибуты <see cref="T:System.Drawing.Imaging.ImageAttributes" />, содержащие сведения о гамме и перекрашивании для объекта <c>image</c>.</param>
        <param name="callback">
          Делегат <see cref="T:System.Drawing.Graphics.DrawImageAbort" />, который задает метод, вызываемый в процессе создания изображения. Этот метод часто вызывается, чтобы проверить, следует ли остановить выполнение метода <see cref="M:System.Drawing.Graphics.DrawImage(System.Drawing.Image,System.Drawing.Point[],System.Drawing.Rectangle,System.Drawing.GraphicsUnit,System.Drawing.Imaging.ImageAttributes,System.Drawing.Graphics.DrawImageAbort)" /> в соответствии с условиями, определяемыми приложением.</param>
        <summary>Рисует заданную часть указанного объекта <see cref="T:System.Drawing.Image" /> в заданном месте, используя заданный размер.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 `destPoints` Параметр задает три точки параллелограмма. Три <xref:System.Drawing.PointF> структуры представляют собой левый верхний, правый верхний и левый нижний углы параллелограмма. Четвертая точка определяется по первым трем параллелограмма.  
  
 `srcRect` Указывает Прямоугольный фрагмент `image` для рисования. Эта часть масштабируется и обрезается по размерам параллелограмм, заданный параметром `destPoints` параметр.  
  
 Эту перегрузку с `callback` параметра позволяет прекратить рисование изображения оно запускается в соответствии с условиями, определенными в приложении. Например приложение может рисовать большое изображение, и пользователь может воспользоваться прокруткой изображения на экране, в котором то приложение может прекратить рисование.  
  
   
  
## Examples  
 Следующий пример кода предназначен для работы с Windows Forms, и для него необходим <xref:System.Windows.Forms.PaintEventArgs> `e`, который является параметром <xref:System.Windows.Forms.Control.Paint> обработчика событий. Сначала код определяет метод обратного вызова для <xref:System.Drawing.Graphics.DrawImageAbort> делегата; определение является упрощенным и служит для проверки ли <xref:System.Drawing.Graphics.DrawImage%2A> вызывает его метод со значением null `callBackData` параметра. Основной текст в примере выполняет следующие действия:  
  
-   Создает экземпляр <xref:System.Drawing.Graphics.DrawImageAbort> метод обратного вызова:  
  
-   Создает образ, из файла в формате JPEG SampImag.jpg в папке примера.  
  
-   Создает точки, определяющие параллелограмм, в котором будет рисоваться изображение.  
  
-   Создает прямоугольник, чтобы выбрать часть изображения для рисования.  
  
-   Назначает точку единицей рисования.  
  
-   Выводит на экран исходного изображения.  
  
-   Создает дополнительный параллелограмм для рисования настроенного изображения.  
  
-   Создает и задает атрибуты настраиваемого изображения для получения большего размера — от обычные гамма-значение.  
  
-   Отображает настроенное изображение на экране.  
  
 Для исходного ненастроенного параллелограмма позиция определяет местоположение изображения на экране и размер прямоугольника, размер и форма параллелограмма определяют масштабирование и наклон формируемого изображения.  
  
 Поскольку в этом примере используется перегрузка, не прошедшие `callBackData` параметра, <xref:System.Drawing.Graphics.DrawImageAbort> обратного вызова возвращает `true`, приведет <xref:System.Drawing.Graphics.DrawImage%2A> метод для интерфейса и код обработки исключений, включенный в пример выводит текст исключения, а не рисование изображения.  
  
 [!code-cpp[System.Drawing.ClassicGraphicsExamples#38](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples/CPP/form1.cpp#38)]
 [!code-csharp[System.Drawing.ClassicGraphicsExamples#38](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples/CS/form1.cs#38)]
 [!code-vb[System.Drawing.ClassicGraphicsExamples#38](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples/VB/form1.vb#38)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          Свойство <paramref name="image" /> имеет значение <see langword="null" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="DrawImage">
      <MemberSignature Language="C#" Value="public void DrawImage (System.Drawing.Image image, System.Drawing.PointF[] destPoints, System.Drawing.RectangleF srcRect, System.Drawing.GraphicsUnit srcUnit, System.Drawing.Imaging.ImageAttributes imageAttr, System.Drawing.Graphics.DrawImageAbort callback);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void DrawImage(class System.Drawing.Image image, valuetype System.Drawing.PointF[] destPoints, valuetype System.Drawing.RectangleF srcRect, valuetype System.Drawing.GraphicsUnit srcUnit, class System.Drawing.Imaging.ImageAttributes imageAttr, class System.Drawing.Graphics/DrawImageAbort callback) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.DrawImage(System.Drawing.Image,System.Drawing.PointF[],System.Drawing.RectangleF,System.Drawing.GraphicsUnit,System.Drawing.Imaging.ImageAttributes,System.Drawing.Graphics.DrawImageAbort)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void DrawImage(System::Drawing::Image ^ image, cli::array &lt;System::Drawing::PointF&gt; ^ destPoints, System::Drawing::RectangleF srcRect, System::Drawing::GraphicsUnit srcUnit, System::Drawing::Imaging::ImageAttributes ^ imageAttr, System::Drawing::Graphics::DrawImageAbort ^ callback);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="image" Type="System.Drawing.Image" />
        <Parameter Name="destPoints" Type="System.Drawing.PointF[]" />
        <Parameter Name="srcRect" Type="System.Drawing.RectangleF" />
        <Parameter Name="srcUnit" Type="System.Drawing.GraphicsUnit" />
        <Parameter Name="imageAttr" Type="System.Drawing.Imaging.ImageAttributes" />
        <Parameter Name="callback" Type="System.Drawing.Graphics+DrawImageAbort" />
      </Parameters>
      <Docs>
        <param name="image">
          Объект <see cref="T:System.Drawing.Image" /> для рисования.</param>
        <param name="destPoints">Массив из трех структур <see cref="T:System.Drawing.PointF" />, определяющих параллелограмм.</param>
        <param name="srcRect">
          Структура <see cref="T:System.Drawing.RectangleF" />, которая задает часть объекта <c>image</c> для рисования.</param>
        <param name="srcUnit">Элемент перечисления <see cref="T:System.Drawing.GraphicsUnit" />, задающий единицы измерения, используемые параметром <c>srcRect</c>.</param>
        <param name="imageAttr">
          Атрибуты <see cref="T:System.Drawing.Imaging.ImageAttributes" />, содержащие сведения о гамме и перекрашивании для объекта <c>image</c>.</param>
        <param name="callback">
          Делегат <see cref="T:System.Drawing.Graphics.DrawImageAbort" />, который задает метод, вызываемый в процессе создания изображения. Этот метод часто вызывается, чтобы проверить, следует ли остановить выполнение метода <see cref="M:System.Drawing.Graphics.DrawImage(System.Drawing.Image,System.Drawing.PointF[],System.Drawing.RectangleF,System.Drawing.GraphicsUnit,System.Drawing.Imaging.ImageAttributes,System.Drawing.Graphics.DrawImageAbort)" /> в соответствии с условиями, определяемыми приложением.</param>
        <summary>Рисует заданную часть указанного объекта <see cref="T:System.Drawing.Image" /> в заданном месте, используя заданный размер.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 `destPoints` Параметр задает три точки параллелограмма. Три <xref:System.Drawing.PointF> структуры представляют собой левый верхний, правый верхний и левый нижний углы параллелограмма. Четвертая точка определяется по первым трем параллелограмма.  
  
 `srcRect` Указывает Прямоугольный фрагмент `image` для рисования. Эта часть масштабируется и обрезается по размерам параллелограмм, заданный параметром `destPoints` параметр.  
  
 Эту перегрузку с `callback` параметра позволяет прекратить рисование изображения оно запускается в соответствии с условиями, определенными в приложении. Например приложение может рисовать большое изображение, и пользователь может воспользоваться прокруткой изображения на экране, в котором то приложение может прекратить рисование.  
  
   
  
## Examples  
 Следующий пример кода предназначен для работы с Windows Forms, и для него необходим <xref:System.Windows.Forms.PaintEventArgs> `e`, который является параметром <xref:System.Windows.Forms.Control.Paint> обработчика событий. Сначала код определяет метод обратного вызова для <xref:System.Drawing.Graphics.DrawImageAbort> делегата; определение является упрощенным и служит для проверки ли <xref:System.Drawing.Graphics.DrawImage%2A> вызывает его метод со значением null `callBackData` параметра. Основной текст в примере выполняет следующие действия:  
  
-   Создает экземпляр <xref:System.Drawing.Graphics.DrawImageAbort> метод обратного вызова.  
  
-   Создает образ, из файла в формате JPEG SampImag.jpg в папке примера.  
  
-   Создает точки, определяющие параллелограмм, в котором будет рисоваться изображение.  
  
-   Создает прямоугольник, чтобы выбрать часть изображения для рисования.  
  
-   Назначает точку единицей рисования.  
  
-   Выводит на экран исходного изображения.  
  
-   Создает дополнительный параллелограмм для рисования настроенного изображения.  
  
-   Создает и задает атрибуты настраиваемого изображения для получения большего размера — от обычные гамма-значение.  
  
-   Отображает настроенное изображение на экране.  
  
 Для исходного ненастроенного параллелограмма позиция определяет местоположение изображения на экране и размер прямоугольника, размер и форма параллелограмма определяют масштабирование и наклон формируемого изображения.  
  
 Поскольку в этом примере используется перегрузка, не прошедшие `callBackData` параметра, <xref:System.Drawing.Graphics.DrawImageAbort> обратного вызова возвращает `true`, приведет <xref:System.Drawing.Graphics.DrawImage%2A> метод для интерфейса и код обработки исключений, включенный в пример выводит текст исключения, а не рисование изображения.  
  
 [!code-cpp[System.Drawing.ClassicGraphicsExamples#44](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples/CPP/form1.cpp#44)]
 [!code-csharp[System.Drawing.ClassicGraphicsExamples#44](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples/CS/form1.cs#44)]
 [!code-vb[System.Drawing.ClassicGraphicsExamples#44](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples/VB/form1.vb#44)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          Свойство <paramref name="image" /> имеет значение <see langword="null" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="DrawImage">
      <MemberSignature Language="C#" Value="public void DrawImage (System.Drawing.Image image, System.Drawing.Point[] destPoints, System.Drawing.Rectangle srcRect, System.Drawing.GraphicsUnit srcUnit, System.Drawing.Imaging.ImageAttributes imageAttr, System.Drawing.Graphics.DrawImageAbort callback, int callbackData);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void DrawImage(class System.Drawing.Image image, valuetype System.Drawing.Point[] destPoints, valuetype System.Drawing.Rectangle srcRect, valuetype System.Drawing.GraphicsUnit srcUnit, class System.Drawing.Imaging.ImageAttributes imageAttr, class System.Drawing.Graphics/DrawImageAbort callback, int32 callbackData) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.DrawImage(System.Drawing.Image,System.Drawing.Point[],System.Drawing.Rectangle,System.Drawing.GraphicsUnit,System.Drawing.Imaging.ImageAttributes,System.Drawing.Graphics.DrawImageAbort,System.Int32)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void DrawImage(System::Drawing::Image ^ image, cli::array &lt;System::Drawing::Point&gt; ^ destPoints, System::Drawing::Rectangle srcRect, System::Drawing::GraphicsUnit srcUnit, System::Drawing::Imaging::ImageAttributes ^ imageAttr, System::Drawing::Graphics::DrawImageAbort ^ callback, int callbackData);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="image" Type="System.Drawing.Image" />
        <Parameter Name="destPoints" Type="System.Drawing.Point[]" />
        <Parameter Name="srcRect" Type="System.Drawing.Rectangle" />
        <Parameter Name="srcUnit" Type="System.Drawing.GraphicsUnit" />
        <Parameter Name="imageAttr" Type="System.Drawing.Imaging.ImageAttributes" />
        <Parameter Name="callback" Type="System.Drawing.Graphics+DrawImageAbort" />
        <Parameter Name="callbackData" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="image">
          Объект <see cref="T:System.Drawing.Image" /> для рисования.</param>
        <param name="destPoints">Массив из трех структур <see cref="T:System.Drawing.PointF" />, определяющих параллелограмм.</param>
        <param name="srcRect">
          Структура <see cref="T:System.Drawing.Rectangle" />, которая задает часть объекта <c>image</c> для рисования.</param>
        <param name="srcUnit">Элемент перечисления <see cref="T:System.Drawing.GraphicsUnit" />, задающий единицы измерения, используемые параметром <c>srcRect</c>.</param>
        <param name="imageAttr">
          Атрибуты <see cref="T:System.Drawing.Imaging.ImageAttributes" />, содержащие сведения о гамме и перекрашивании для объекта <c>image</c>.</param>
        <param name="callback">
          Делегат <see cref="T:System.Drawing.Graphics.DrawImageAbort" />, который задает метод, вызываемый в процессе создания изображения. Этот метод часто вызывается, чтобы проверить, следует ли остановить выполнение метода <see cref="M:System.Drawing.Graphics.DrawImage(System.Drawing.Image,System.Drawing.Point[],System.Drawing.Rectangle,System.Drawing.GraphicsUnit,System.Drawing.Imaging.ImageAttributes,System.Drawing.Graphics.DrawImageAbort,System.Int32)" /> в соответствии с условиями, определяемыми приложением.</param>
        <param name="callbackData">Значение, содержащее дополнительные данные для делегата <see cref="T:System.Drawing.Graphics.DrawImageAbort" />, которые используются при проверке необходимости остановки выполнения метода <see cref="M:System.Drawing.Graphics.DrawImage(System.Drawing.Image,System.Drawing.Point[],System.Drawing.Rectangle,System.Drawing.GraphicsUnit,System.Drawing.Imaging.ImageAttributes,System.Drawing.Graphics.DrawImageAbort,System.Int32)" />.</param>
        <summary>Рисует заданную часть указанного объекта <see cref="T:System.Drawing.Image" /> в заданном месте, используя заданный размер.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 `destPoints` Параметр задает три точки параллелограмма. Три <xref:System.Drawing.PointF> структуры представляют собой левый верхний, правый верхний и левый нижний углы параллелограмма. Четвертая точка определяется по первым трем параллелограмма.  
  
 `srcRect` Указывает Прямоугольный фрагмент `image` для рисования. Эта часть масштабируется и обрезается по размерам параллелограмм, заданный параметром `destPoints` параметр.  
  
 Эту перегрузку с `callback` и `callbackData` параметров позволяет прекратить рисование изображения оно запускается в соответствии с условиями и данными, определяется приложением. Например приложение может рисовать большое изображение, и пользователь может воспользоваться прокруткой изображения на экране, в котором то приложение может прекратить рисование.  
  
   
  
## Examples  
 Следующий пример кода предназначен для работы с Windows Forms, и для него необходим <xref:System.Windows.Forms.PaintEventArgs> `e`, который является параметром <xref:System.Windows.Forms.Control.Paint> обработчика событий. Сначала код определяет метод обратного вызова для <xref:System.Drawing.Graphics.DrawImageAbort> делегата; определение является упрощенным и служит для проверки ли <xref:System.Drawing.Graphics.DrawImage%2A> вызывает его метод со значением null `callBackData` параметра. Основной текст в примере выполняет следующие действия:  
  
-   Создает экземпляр <xref:System.Drawing.Graphics.DrawImageAbort> метод обратного вызова.  
  
-   Создает образ, из файла в формате JPEG SampImag.jpg в папке примера.  
  
-   Создает точки, определяющие параллелограмм, в котором будет рисоваться изображение.  
  
-   Создает прямоугольник, чтобы выбрать часть изображения для рисования.  
  
-   Назначает точку единицей рисования.  
  
-   Выводит на экран исходного изображения.  
  
-   Создает дополнительный параллелограмм для рисования настроенного изображения.  
  
-   Создает и задает атрибуты настраиваемого изображения для получения большего размера — от обычные гамма-значение.  
  
-   Отображает настроенное изображение на экране.  
  
 Для исходного ненастроенного параллелограмма позиция определяет местоположение изображения на экране и размер прямоугольника, размер и форма параллелограмма определяют масштабирование и наклон формируемого изображения.  
  
 Так как в этом примере используется перегрузка, передает `callBackData` параметра, <xref:System.Drawing.Graphics.DrawImageAbort> обратного вызова возвращает `false`, чего <xref:System.Drawing.Graphics.DrawImage%2A> метод, чтобы продолжить, а также пример выводит на экран настроенного изображения.  
  
 [!code-cpp[System.Drawing.ClassicGraphicsExamples#39](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples/CPP/form1.cpp#39)]
 [!code-csharp[System.Drawing.ClassicGraphicsExamples#39](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples/CS/form1.cs#39)]
 [!code-vb[System.Drawing.ClassicGraphicsExamples#39](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples/VB/form1.vb#39)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="DrawImage">
      <MemberSignature Language="C#" Value="public void DrawImage (System.Drawing.Image image, System.Drawing.PointF[] destPoints, System.Drawing.RectangleF srcRect, System.Drawing.GraphicsUnit srcUnit, System.Drawing.Imaging.ImageAttributes imageAttr, System.Drawing.Graphics.DrawImageAbort callback, int callbackData);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void DrawImage(class System.Drawing.Image image, valuetype System.Drawing.PointF[] destPoints, valuetype System.Drawing.RectangleF srcRect, valuetype System.Drawing.GraphicsUnit srcUnit, class System.Drawing.Imaging.ImageAttributes imageAttr, class System.Drawing.Graphics/DrawImageAbort callback, int32 callbackData) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.DrawImage(System.Drawing.Image,System.Drawing.PointF[],System.Drawing.RectangleF,System.Drawing.GraphicsUnit,System.Drawing.Imaging.ImageAttributes,System.Drawing.Graphics.DrawImageAbort,System.Int32)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void DrawImage(System::Drawing::Image ^ image, cli::array &lt;System::Drawing::PointF&gt; ^ destPoints, System::Drawing::RectangleF srcRect, System::Drawing::GraphicsUnit srcUnit, System::Drawing::Imaging::ImageAttributes ^ imageAttr, System::Drawing::Graphics::DrawImageAbort ^ callback, int callbackData);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="image" Type="System.Drawing.Image" />
        <Parameter Name="destPoints" Type="System.Drawing.PointF[]" />
        <Parameter Name="srcRect" Type="System.Drawing.RectangleF" />
        <Parameter Name="srcUnit" Type="System.Drawing.GraphicsUnit" />
        <Parameter Name="imageAttr" Type="System.Drawing.Imaging.ImageAttributes" />
        <Parameter Name="callback" Type="System.Drawing.Graphics+DrawImageAbort" />
        <Parameter Name="callbackData" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="image">
          Объект <see cref="T:System.Drawing.Image" /> для рисования.</param>
        <param name="destPoints">Массив из трех структур <see cref="T:System.Drawing.PointF" />, определяющих параллелограмм.</param>
        <param name="srcRect">
          Структура <see cref="T:System.Drawing.RectangleF" />, которая задает часть объекта <c>image</c> для рисования.</param>
        <param name="srcUnit">Элемент перечисления <see cref="T:System.Drawing.GraphicsUnit" />, задающий единицы измерения, используемые параметром <c>srcRect</c>.</param>
        <param name="imageAttr">
          Атрибуты <see cref="T:System.Drawing.Imaging.ImageAttributes" />, содержащие сведения о гамме и перекрашивании для объекта <c>image</c>.</param>
        <param name="callback">
          Делегат <see cref="T:System.Drawing.Graphics.DrawImageAbort" />, который задает метод, вызываемый в процессе создания изображения. Этот метод часто вызывается, чтобы проверить, следует ли остановить выполнение метода <see cref="M:System.Drawing.Graphics.DrawImage(System.Drawing.Image,System.Drawing.PointF[],System.Drawing.RectangleF,System.Drawing.GraphicsUnit,System.Drawing.Imaging.ImageAttributes,System.Drawing.Graphics.DrawImageAbort,System.Int32)" /> в соответствии с условиями, определяемыми приложением.</param>
        <param name="callbackData">Значение, содержащее дополнительные данные для делегата <see cref="T:System.Drawing.Graphics.DrawImageAbort" />, которые используются при проверке необходимости остановки выполнения метода <see cref="M:System.Drawing.Graphics.DrawImage(System.Drawing.Image,System.Drawing.PointF[],System.Drawing.RectangleF,System.Drawing.GraphicsUnit,System.Drawing.Imaging.ImageAttributes,System.Drawing.Graphics.DrawImageAbort,System.Int32)" />.</param>
        <summary>Рисует заданную часть указанного объекта <see cref="T:System.Drawing.Image" /> в заданном месте, используя заданный размер.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 `destPoints` Параметр задает три точки параллелограмма. Три <xref:System.Drawing.PointF> структуры представляют собой левый верхний, правый верхний и левый нижний углы параллелограмма. Четвертая точка определяется по первым трем параллелограмма.  
  
 `srcRect` Указывает Прямоугольный фрагмент `image` для рисования. Эта часть масштабируется и обрезается по размерам параллелограмм, заданный параметром `destPoints` параметр.  
  
 Эту перегрузку с `callback` и `callbackData` параметров позволяет прекратить рисование изображения оно запускается в соответствии с условиями и данными, определяется приложением. Например приложение может рисовать большое изображение, и пользователь может воспользоваться прокруткой изображения на экране, в котором то приложение может прекратить рисование.  
  
   
  
## Examples  
 Следующий пример кода предназначен для работы с Windows Forms, и для него необходим <xref:System.Windows.Forms.PaintEventArgs> `e`, который является параметром `Pa` <xref:System.Windows.Forms.Control.Paint> обработчик событий. Сначала код определяет метод обратного вызова для <xref:System.Drawing.Graphics.DrawImageAbort> делегата; определение является упрощенным и служит для проверки ли <xref:System.Drawing.Graphics.DrawImage%2A> вызывает его метод со значением null `callBackData` параметра. Основной текст в примере выполняет следующие действия:  
  
-   Создает экземпляр <xref:System.Drawing.Graphics.DrawImageAbort> метод обратного вызова.  
  
-   Создает образ, из файла в формате JPEG SampImag.jpg в папке примера.  
  
-   Создает точки, определяющие параллелограмм, в котором будет рисоваться изображение.  
  
-   Создает прямоугольник, чтобы выбрать часть изображения для рисования.  
  
-   Назначает точку единицей рисования.  
  
-   Выводит на экран исходного изображения.  
  
-   Создает дополнительный параллелограмм для рисования настроенного изображения.  
  
-   Создает и задает атрибуты настраиваемого изображения для получения большего размера — от обычные гамма-значение.  
  
-   Отображает настроенное изображение на экране.  
  
 Для исходного ненастроенного параллелограмма позиция определяет местоположение изображения на экране и размер прямоугольника, размер и форма параллелограмма определяют масштабирование и наклон формируемого изображения.  
  
 Так как в этом примере используется перегрузка, передает `callBackData` параметра, <xref:System.Drawing.Graphics.DrawImageAbort> обратного вызова возвращает `false`, чего <xref:System.Drawing.Graphics.DrawImage%2A> метод, чтобы продолжить, а также пример выводит на экран настроенного изображения.  
  
 [!code-cpp[System.Drawing.ClassicGraphicsExamples#45](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples/CPP/form1.cpp#45)]
 [!code-csharp[System.Drawing.ClassicGraphicsExamples#45](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples/CS/form1.cs#45)]
 [!code-vb[System.Drawing.ClassicGraphicsExamples#45](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples/VB/form1.vb#45)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          Свойство <paramref name="image" /> имеет значение <see langword="null" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="DrawImage">
      <MemberSignature Language="C#" Value="public void DrawImage (System.Drawing.Image image, System.Drawing.Rectangle destRect, int srcX, int srcY, int srcWidth, int srcHeight, System.Drawing.GraphicsUnit srcUnit);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void DrawImage(class System.Drawing.Image image, valuetype System.Drawing.Rectangle destRect, int32 srcX, int32 srcY, int32 srcWidth, int32 srcHeight, valuetype System.Drawing.GraphicsUnit srcUnit) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.DrawImage(System.Drawing.Image,System.Drawing.Rectangle,System.Int32,System.Int32,System.Int32,System.Int32,System.Drawing.GraphicsUnit)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void DrawImage(System::Drawing::Image ^ image, System::Drawing::Rectangle destRect, int srcX, int srcY, int srcWidth, int srcHeight, System::Drawing::GraphicsUnit srcUnit);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="image" Type="System.Drawing.Image" />
        <Parameter Name="destRect" Type="System.Drawing.Rectangle" />
        <Parameter Name="srcX" Type="System.Int32" />
        <Parameter Name="srcY" Type="System.Int32" />
        <Parameter Name="srcWidth" Type="System.Int32" />
        <Parameter Name="srcHeight" Type="System.Int32" />
        <Parameter Name="srcUnit" Type="System.Drawing.GraphicsUnit" />
      </Parameters>
      <Docs>
        <param name="image">
          Объект <see cref="T:System.Drawing.Image" /> для рисования.</param>
        <param name="destRect">
          Структура <see cref="T:System.Drawing.Rectangle" />, которая задает расположение и размер формируемого изображения. Изображение масштабируется по размерам прямоугольника.</param>
        <param name="srcX">Координата X верхнего левого угла отображаемой части исходного изображения.</param>
        <param name="srcY">Координата Y верхнего левого угла отображаемой части исходного изображения.</param>
        <param name="srcWidth">Ширина отображаемой части исходного изображения.</param>
        <param name="srcHeight">Высота отображаемой части исходного изображения.</param>
        <param name="srcUnit">Элемент перечисления <see cref="T:System.Drawing.GraphicsUnit" />, задающий единицы измерения, используемые для определения исходного прямоугольника.</param>
        <summary>Рисует заданную часть указанного объекта <see cref="T:System.Drawing.Image" /> в заданном месте, используя заданный размер.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 `srcX`, `srcY`, `srcWidth`, И `srcHeight` параметры определяют Прямоугольный фрагмент `image` для рисования. Прямоугольник определяется относительно верхнего левого угла исходного изображения. Эта часть масштабируется по размерам прямоугольника, заданного параметром `destRect` параметр.  
  
   
  
## Examples  
 Следующий пример кода предназначен для работы с Windows Forms, и для него необходим <xref:System.Windows.Forms.PaintEventArgs> `e`, который является параметром <xref:System.Windows.Forms.Control.Paint> обработчика событий. Код выполняет следующие действия.  
  
-   Создает образ, из файла в формате JPEG SampImag.jpg в папке примера.  
  
-   Создает конечный прямоугольник, в котором будет рисоваться изображение.  
  
-   Определяет координаты исходного прямоугольника, из которого требуется извлечь часть изображения.  
  
-   Задает единицы измерения исходного прямоугольника в пикселях.  
  
-   Рисует изображение на экране.  
  
 Положение прямоугольника назначения изображения на экране и определить размеры исходного и конечного прямоугольников — масштабирование определяет размещение, а размер исходного прямоугольника строится, какая часть исходного изображения экран.  
  
 [!code-cpp[System.Drawing.ClassicGraphicsExamples#48](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples/CPP/form1.cpp#48)]
 [!code-csharp[System.Drawing.ClassicGraphicsExamples#48](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples/CS/form1.cs#48)]
 [!code-vb[System.Drawing.ClassicGraphicsExamples#48](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples/VB/form1.vb#48)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          Свойство <paramref name="image" /> имеет значение <see langword="null" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="DrawImage">
      <MemberSignature Language="C#" Value="public void DrawImage (System.Drawing.Image image, System.Drawing.Rectangle destRect, float srcX, float srcY, float srcWidth, float srcHeight, System.Drawing.GraphicsUnit srcUnit);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void DrawImage(class System.Drawing.Image image, valuetype System.Drawing.Rectangle destRect, float32 srcX, float32 srcY, float32 srcWidth, float32 srcHeight, valuetype System.Drawing.GraphicsUnit srcUnit) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.DrawImage(System.Drawing.Image,System.Drawing.Rectangle,System.Single,System.Single,System.Single,System.Single,System.Drawing.GraphicsUnit)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void DrawImage(System::Drawing::Image ^ image, System::Drawing::Rectangle destRect, float srcX, float srcY, float srcWidth, float srcHeight, System::Drawing::GraphicsUnit srcUnit);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="image" Type="System.Drawing.Image" />
        <Parameter Name="destRect" Type="System.Drawing.Rectangle" />
        <Parameter Name="srcX" Type="System.Single" />
        <Parameter Name="srcY" Type="System.Single" />
        <Parameter Name="srcWidth" Type="System.Single" />
        <Parameter Name="srcHeight" Type="System.Single" />
        <Parameter Name="srcUnit" Type="System.Drawing.GraphicsUnit" />
      </Parameters>
      <Docs>
        <param name="image">
          Объект <see cref="T:System.Drawing.Image" /> для рисования.</param>
        <param name="destRect">
          Структура <see cref="T:System.Drawing.Rectangle" />, которая задает расположение и размер формируемого изображения. Изображение масштабируется по размерам прямоугольника.</param>
        <param name="srcX">Координата X верхнего левого угла отображаемой части исходного изображения.</param>
        <param name="srcY">Координата Y верхнего левого угла отображаемой части исходного изображения.</param>
        <param name="srcWidth">Ширина отображаемой части исходного изображения.</param>
        <param name="srcHeight">Высота отображаемой части исходного изображения.</param>
        <param name="srcUnit">Элемент перечисления <see cref="T:System.Drawing.GraphicsUnit" />, задающий единицы измерения, используемые для определения исходного прямоугольника.</param>
        <summary>Рисует заданную часть указанного объекта <see cref="T:System.Drawing.Image" /> в заданном месте, используя заданный размер.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 `srcX`, `srcY`, `srcWidth`, И `srcHeight` параметры определяют Прямоугольный фрагмент `image` для рисования. Прямоугольник определяется относительно верхнего левого угла исходного изображения. Эта часть масштабируется по размерам прямоугольника, заданного параметром `destRect` параметр.  
  
   
  
## Examples  
 Следующий пример кода предназначен для работы с Windows Forms, и для него необходим <xref:System.Windows.Forms.PaintEventArgs> `e`, который является параметром <xref:System.Windows.Forms.Control.Paint> обработчика событий. Код выполняет следующие действия.  
  
-   Создает образ, из файла в формате JPEG SampImag.jpg в папке примера.  
  
-   Определяет координаты прямоугольника, в котором будет рисоваться изображение.  
  
-   Создает исходный прямоугольник, из которого требуется извлечь часть изображения.  
  
-   Задает единицы измерения исходного прямоугольника в пикселях.  
  
-   Рисует изображение на экране.  
  
 Положение прямоугольника назначения размещение рисунка на экране, размеры исходного и конечного прямоугольников — масштабирование изображения и размер исходного прямоугольника определяет строится, какая часть исходного изображения экран.  
  
 [!code-cpp[System.Drawing.ClassicGraphicsExamples#52](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples/CPP/form1.cpp#52)]
 [!code-csharp[System.Drawing.ClassicGraphicsExamples#52](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples/CS/form1.cs#52)]
 [!code-vb[System.Drawing.ClassicGraphicsExamples#52](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples/VB/form1.vb#52)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          Свойство <paramref name="image" /> имеет значение <see langword="null" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="DrawImage">
      <MemberSignature Language="C#" Value="public void DrawImage (System.Drawing.Image image, System.Drawing.Rectangle destRect, int srcX, int srcY, int srcWidth, int srcHeight, System.Drawing.GraphicsUnit srcUnit, System.Drawing.Imaging.ImageAttributes imageAttr);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void DrawImage(class System.Drawing.Image image, valuetype System.Drawing.Rectangle destRect, int32 srcX, int32 srcY, int32 srcWidth, int32 srcHeight, valuetype System.Drawing.GraphicsUnit srcUnit, class System.Drawing.Imaging.ImageAttributes imageAttr) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.DrawImage(System.Drawing.Image,System.Drawing.Rectangle,System.Int32,System.Int32,System.Int32,System.Int32,System.Drawing.GraphicsUnit,System.Drawing.Imaging.ImageAttributes)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void DrawImage(System::Drawing::Image ^ image, System::Drawing::Rectangle destRect, int srcX, int srcY, int srcWidth, int srcHeight, System::Drawing::GraphicsUnit srcUnit, System::Drawing::Imaging::ImageAttributes ^ imageAttr);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="image" Type="System.Drawing.Image" />
        <Parameter Name="destRect" Type="System.Drawing.Rectangle" />
        <Parameter Name="srcX" Type="System.Int32" />
        <Parameter Name="srcY" Type="System.Int32" />
        <Parameter Name="srcWidth" Type="System.Int32" />
        <Parameter Name="srcHeight" Type="System.Int32" />
        <Parameter Name="srcUnit" Type="System.Drawing.GraphicsUnit" />
        <Parameter Name="imageAttr" Type="System.Drawing.Imaging.ImageAttributes" />
      </Parameters>
      <Docs>
        <param name="image">
          Объект <see cref="T:System.Drawing.Image" /> для рисования.</param>
        <param name="destRect">
          Структура <see cref="T:System.Drawing.Rectangle" />, которая задает расположение и размер формируемого изображения. Изображение масштабируется по размерам прямоугольника.</param>
        <param name="srcX">Координата X верхнего левого угла отображаемой части исходного изображения.</param>
        <param name="srcY">Координата Y верхнего левого угла отображаемой части исходного изображения.</param>
        <param name="srcWidth">Ширина отображаемой части исходного изображения.</param>
        <param name="srcHeight">Высота отображаемой части исходного изображения.</param>
        <param name="srcUnit">Элемент перечисления <see cref="T:System.Drawing.GraphicsUnit" />, задающий единицы измерения, используемые для определения исходного прямоугольника.</param>
        <param name="imageAttr">
          Атрибуты <see cref="T:System.Drawing.Imaging.ImageAttributes" />, содержащие сведения о гамме и перекрашивании для объекта <c>image</c>.</param>
        <summary>Рисует заданную часть указанного объекта <see cref="T:System.Drawing.Image" /> в заданном месте, используя заданный размер.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 `srcX`, `srcY`, `srcWidth`, И `srcHeight` параметры определяют Прямоугольный фрагмент `image` для рисования. Прямоугольник определяется относительно верхнего левого угла исходного изображения. Эта часть масштабируется по размерам прямоугольника, заданного параметром `destRect` параметр.  
  
   
  
## Examples  
 Следующий пример кода предназначен для работы с Windows Forms, и для него необходим <xref:System.Windows.Forms.PaintEventArgs> `e`, который является параметром <xref:System.Windows.Forms.Control.Paint> обработчика событий. Код выполняет следующие действия.  
  
-   Создает образ, из файла в формате JPEG SampImag.jpg в папке примера.  
  
-   Создает конечный прямоугольник, в котором будет рисоваться изображение.  
  
-   Определяет координаты исходного прямоугольника, из которого требуется извлечь часть изображения.  
  
-   Задает единицы измерения исходного прямоугольника в пикселях.  
  
-   Выводит на экран исходного изображения.  
  
-   Создает дополнительный прямоугольник для рисования настроенного изображения.  
  
-   Создает и задает атрибуты настраиваемого изображения для получения большего размера — от обычные гамма-значение.  
  
-   Отображает настроенное изображение на экране.  
  
 Для исходного ненастроенного конечного прямоугольника позицией определяется изображения на экране и размеры исходного и конечного прямоугольников — масштабирование изображения и размер исходного прямоугольника определяет, какая часть исходное изображение отображается на экране.  
  
 [!code-cpp[System.Drawing.ClassicGraphicsExamples#49](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples/CPP/form1.cpp#49)]
 [!code-csharp[System.Drawing.ClassicGraphicsExamples#49](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples/CS/form1.cs#49)]
 [!code-vb[System.Drawing.ClassicGraphicsExamples#49](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples/VB/form1.vb#49)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          Свойство <paramref name="image" /> имеет значение <see langword="null" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="DrawImage">
      <MemberSignature Language="C#" Value="public void DrawImage (System.Drawing.Image image, System.Drawing.Rectangle destRect, float srcX, float srcY, float srcWidth, float srcHeight, System.Drawing.GraphicsUnit srcUnit, System.Drawing.Imaging.ImageAttributes imageAttrs);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void DrawImage(class System.Drawing.Image image, valuetype System.Drawing.Rectangle destRect, float32 srcX, float32 srcY, float32 srcWidth, float32 srcHeight, valuetype System.Drawing.GraphicsUnit srcUnit, class System.Drawing.Imaging.ImageAttributes imageAttrs) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.DrawImage(System.Drawing.Image,System.Drawing.Rectangle,System.Single,System.Single,System.Single,System.Single,System.Drawing.GraphicsUnit,System.Drawing.Imaging.ImageAttributes)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void DrawImage(System::Drawing::Image ^ image, System::Drawing::Rectangle destRect, float srcX, float srcY, float srcWidth, float srcHeight, System::Drawing::GraphicsUnit srcUnit, System::Drawing::Imaging::ImageAttributes ^ imageAttrs);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="image" Type="System.Drawing.Image" />
        <Parameter Name="destRect" Type="System.Drawing.Rectangle" />
        <Parameter Name="srcX" Type="System.Single" />
        <Parameter Name="srcY" Type="System.Single" />
        <Parameter Name="srcWidth" Type="System.Single" />
        <Parameter Name="srcHeight" Type="System.Single" />
        <Parameter Name="srcUnit" Type="System.Drawing.GraphicsUnit" />
        <Parameter Name="imageAttrs" Type="System.Drawing.Imaging.ImageAttributes" />
      </Parameters>
      <Docs>
        <param name="image">
          Объект <see cref="T:System.Drawing.Image" /> для рисования.</param>
        <param name="destRect">
          Структура <see cref="T:System.Drawing.Rectangle" />, которая задает расположение и размер формируемого изображения. Изображение масштабируется по размерам прямоугольника.</param>
        <param name="srcX">Координата X верхнего левого угла отображаемой части исходного изображения.</param>
        <param name="srcY">Координата Y верхнего левого угла отображаемой части исходного изображения.</param>
        <param name="srcWidth">Ширина отображаемой части исходного изображения.</param>
        <param name="srcHeight">Высота отображаемой части исходного изображения.</param>
        <param name="srcUnit">Элемент перечисления <see cref="T:System.Drawing.GraphicsUnit" />, задающий единицы измерения, используемые для определения исходного прямоугольника.</param>
        <param name="imageAttrs">
          Атрибуты <see cref="T:System.Drawing.Imaging.ImageAttributes" />, содержащие сведения о гамме и перекрашивании для объекта <c>image</c>.</param>
        <summary>Рисует заданную часть указанного объекта <see cref="T:System.Drawing.Image" /> в заданном месте, используя заданный размер.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 `srcX`, `srcY`, `srcWidth`, И `srcHeight` параметры определяют Прямоугольный фрагмент `image` для рисования. Прямоугольник определяется относительно верхнего левого угла исходного изображения. Эта часть масштабируется по размерам прямоугольника, заданного параметром `destRect` параметр.  
  
   
  
## Examples  
 Следующий пример кода предназначен для работы с Windows Forms, и для него необходим <xref:System.Windows.Forms.PaintEventArgs> `e`, который является параметром <xref:System.Windows.Forms.Control.Paint> обработчика событий. Код выполняет следующие действия.  
  
-   Создает образ, из файла в формате JPEG SampImag.jpg в папке примера.  
  
-   Создает конечный прямоугольник, в котором будет рисоваться изображение.  
  
-   Определяет координаты исходного прямоугольника, из которого требуется извлечь часть изображения.  
  
-   Задает единицы измерения исходного прямоугольника в пикселях.  
  
-   Выводит на экран исходного изображения.  
  
-   Создает дополнительный прямоугольник для рисования настроенного изображения.  
  
-   Создает и задает атрибуты настраиваемого изображения для получения большего размера — от обычные гамма-значение.  
  
-   Отображает настроенное изображение на экране.  
  
 Для исходного ненастроенного конечного прямоугольника позицией определяется изображения на экране и размеры исходного и конечного прямоугольников — масштабирование изображения и размер исходного прямоугольника определяет, какая часть исходное изображение отображается на экране.  
  
 [!code-cpp[System.Drawing.ClassicGraphicsExamples#53](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples/CPP/form1.cpp#53)]
 [!code-csharp[System.Drawing.ClassicGraphicsExamples#53](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples/CS/form1.cs#53)]
 [!code-vb[System.Drawing.ClassicGraphicsExamples#53](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples/VB/form1.vb#53)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          Свойство <paramref name="image" /> имеет значение <see langword="null" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="DrawImage">
      <MemberSignature Language="C#" Value="public void DrawImage (System.Drawing.Image image, System.Drawing.Rectangle destRect, int srcX, int srcY, int srcWidth, int srcHeight, System.Drawing.GraphicsUnit srcUnit, System.Drawing.Imaging.ImageAttributes imageAttr, System.Drawing.Graphics.DrawImageAbort callback);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void DrawImage(class System.Drawing.Image image, valuetype System.Drawing.Rectangle destRect, int32 srcX, int32 srcY, int32 srcWidth, int32 srcHeight, valuetype System.Drawing.GraphicsUnit srcUnit, class System.Drawing.Imaging.ImageAttributes imageAttr, class System.Drawing.Graphics/DrawImageAbort callback) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.DrawImage(System.Drawing.Image,System.Drawing.Rectangle,System.Int32,System.Int32,System.Int32,System.Int32,System.Drawing.GraphicsUnit,System.Drawing.Imaging.ImageAttributes,System.Drawing.Graphics.DrawImageAbort)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void DrawImage(System::Drawing::Image ^ image, System::Drawing::Rectangle destRect, int srcX, int srcY, int srcWidth, int srcHeight, System::Drawing::GraphicsUnit srcUnit, System::Drawing::Imaging::ImageAttributes ^ imageAttr, System::Drawing::Graphics::DrawImageAbort ^ callback);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="image" Type="System.Drawing.Image" />
        <Parameter Name="destRect" Type="System.Drawing.Rectangle" />
        <Parameter Name="srcX" Type="System.Int32" />
        <Parameter Name="srcY" Type="System.Int32" />
        <Parameter Name="srcWidth" Type="System.Int32" />
        <Parameter Name="srcHeight" Type="System.Int32" />
        <Parameter Name="srcUnit" Type="System.Drawing.GraphicsUnit" />
        <Parameter Name="imageAttr" Type="System.Drawing.Imaging.ImageAttributes" />
        <Parameter Name="callback" Type="System.Drawing.Graphics+DrawImageAbort" />
      </Parameters>
      <Docs>
        <param name="image">
          Объект <see cref="T:System.Drawing.Image" /> для рисования.</param>
        <param name="destRect">
          Структура <see cref="T:System.Drawing.Rectangle" />, которая задает расположение и размер формируемого изображения. Изображение масштабируется по размерам прямоугольника.</param>
        <param name="srcX">Координата X верхнего левого угла отображаемой части исходного изображения.</param>
        <param name="srcY">Координата Y верхнего левого угла отображаемой части исходного изображения.</param>
        <param name="srcWidth">Ширина отображаемой части исходного изображения.</param>
        <param name="srcHeight">Высота отображаемой части исходного изображения.</param>
        <param name="srcUnit">Элемент перечисления <see cref="T:System.Drawing.GraphicsUnit" />, задающий единицы измерения, используемые для определения исходного прямоугольника.</param>
        <param name="imageAttr">
          Атрибуты <see cref="T:System.Drawing.Imaging.ImageAttributes" />, содержащие сведения о гамме и перекрашивании объекта <c>image</c>.</param>
        <param name="callback">
          Делегат <see cref="T:System.Drawing.Graphics.DrawImageAbort" />, который задает метод, вызываемый в процессе создания изображения. Этот метод часто вызывается, чтобы проверить, следует ли остановить выполнение метода <see cref="M:System.Drawing.Graphics.DrawImage(System.Drawing.Image,System.Drawing.Rectangle,System.Int32,System.Int32,System.Int32,System.Int32,System.Drawing.GraphicsUnit,System.Drawing.Imaging.ImageAttributes,System.Drawing.Graphics.DrawImageAbort)" /> в соответствии с условиями, определяемыми приложением.</param>
        <summary>Рисует заданную часть указанного объекта <see cref="T:System.Drawing.Image" /> в заданном месте, используя заданный размер.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 `srcX`, `srcY`, `srcWidth`, И `srcHeight` параметры определяют Прямоугольный фрагмент `image` для рисования. Прямоугольник определяется относительно верхнего левого угла исходного изображения. Эта часть масштабируется по размерам прямоугольника, заданного параметром `destRect` объекта.  
  
 Эту перегрузку с `callback` параметра позволяет прекратить рисование изображения оно запускается в соответствии с условиями, определенными в приложении. Например приложение может рисовать большое изображение, и пользователь может воспользоваться прокруткой изображения на экране, в котором то приложение может прекратить рисование.  
  
   
  
## Examples  
 Следующий пример кода предназначен для работы с Windows Forms, и для него необходим <xref:System.Windows.Forms.PaintEventArgs> `e`, который является параметром <xref:System.Windows.Forms.Control.Paint> обработчика событий. Сначала код определяет метод обратного вызова для <xref:System.Drawing.Graphics.DrawImageAbort> делегата; определение является упрощенным и служит для проверки ли <xref:System.Drawing.Graphics.DrawImage%2A> вызывает его метод со значением null `callBackData` параметра. Основной текст в примере выполняет следующие действия:  
  
-   Создает экземпляр <xref:System.Drawing.Graphics.DrawImageAbort> метод обратного вызова.  
  
-   Создает образ, из файла в формате JPEG SampImag.jpg в папке примера.  
  
-   Создает точки, определяющие конечный прямоугольник, в котором будет рисоваться изображение.  
  
-   Создает исходный прямоугольник, чтобы выбрать часть изображения для рисования.  
  
-   Назначает точку единицей рисования.  
  
-   Выводит на экран исходного изображения.  
  
-   Создает дополнительный конечный прямоугольник для рисования настроенного изображения.  
  
-   Создает и задает атрибуты настраиваемого изображения для получения большего размера — от обычные гамма-значение.  
  
-   Отображает настроенное изображение на экране.  
  
 Для исходного ненастроенного конечного прямоугольника, положение изображения на экране определяет размещение, а размер исходного прямоугольника, размер и форма конечного прямоугольника — масштабирование.  
  
 Поскольку в этом примере используется перегрузка, не прошедшие `callBackData` параметра, <xref:System.Drawing.Graphics.DrawImageAbort> обратного вызова возвращает `true`, приведет <xref:System.Drawing.Graphics.DrawImage%2A> метод для интерфейса и код обработки исключений, включенный в пример выводит текст исключения, а не рисование изображения.  
  
 [!code-cpp[System.Drawing.ClassicGraphicsExamples#50](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples/CPP/form1.cpp#50)]
 [!code-csharp[System.Drawing.ClassicGraphicsExamples#50](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples/CS/form1.cs#50)]
 [!code-vb[System.Drawing.ClassicGraphicsExamples#50](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples/VB/form1.vb#50)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          Свойство <paramref name="image" /> имеет значение <see langword="null" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="DrawImage">
      <MemberSignature Language="C#" Value="public void DrawImage (System.Drawing.Image image, System.Drawing.Rectangle destRect, float srcX, float srcY, float srcWidth, float srcHeight, System.Drawing.GraphicsUnit srcUnit, System.Drawing.Imaging.ImageAttributes imageAttrs, System.Drawing.Graphics.DrawImageAbort callback);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void DrawImage(class System.Drawing.Image image, valuetype System.Drawing.Rectangle destRect, float32 srcX, float32 srcY, float32 srcWidth, float32 srcHeight, valuetype System.Drawing.GraphicsUnit srcUnit, class System.Drawing.Imaging.ImageAttributes imageAttrs, class System.Drawing.Graphics/DrawImageAbort callback) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.DrawImage(System.Drawing.Image,System.Drawing.Rectangle,System.Single,System.Single,System.Single,System.Single,System.Drawing.GraphicsUnit,System.Drawing.Imaging.ImageAttributes,System.Drawing.Graphics.DrawImageAbort)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void DrawImage(System::Drawing::Image ^ image, System::Drawing::Rectangle destRect, float srcX, float srcY, float srcWidth, float srcHeight, System::Drawing::GraphicsUnit srcUnit, System::Drawing::Imaging::ImageAttributes ^ imageAttrs, System::Drawing::Graphics::DrawImageAbort ^ callback);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="image" Type="System.Drawing.Image" />
        <Parameter Name="destRect" Type="System.Drawing.Rectangle" />
        <Parameter Name="srcX" Type="System.Single" />
        <Parameter Name="srcY" Type="System.Single" />
        <Parameter Name="srcWidth" Type="System.Single" />
        <Parameter Name="srcHeight" Type="System.Single" />
        <Parameter Name="srcUnit" Type="System.Drawing.GraphicsUnit" />
        <Parameter Name="imageAttrs" Type="System.Drawing.Imaging.ImageAttributes" />
        <Parameter Name="callback" Type="System.Drawing.Graphics+DrawImageAbort" />
      </Parameters>
      <Docs>
        <param name="image">
          Объект <see cref="T:System.Drawing.Image" /> для рисования.</param>
        <param name="destRect">
          Структура <see cref="T:System.Drawing.Rectangle" />, которая задает расположение и размер формируемого изображения. Изображение масштабируется по размерам прямоугольника.</param>
        <param name="srcX">Координата X верхнего левого угла отображаемой части исходного изображения.</param>
        <param name="srcY">Координата Y верхнего левого угла отображаемой части исходного изображения.</param>
        <param name="srcWidth">Ширина отображаемой части исходного изображения.</param>
        <param name="srcHeight">Высота отображаемой части исходного изображения.</param>
        <param name="srcUnit">Элемент перечисления <see cref="T:System.Drawing.GraphicsUnit" />, задающий единицы измерения, используемые для определения исходного прямоугольника.</param>
        <param name="imageAttrs">
          Атрибуты <see cref="T:System.Drawing.Imaging.ImageAttributes" />, содержащие сведения о гамме и перекрашивании для объекта <c>image</c>.</param>
        <param name="callback">
          Делегат <see cref="T:System.Drawing.Graphics.DrawImageAbort" />, который задает метод, вызываемый в процессе создания изображения. Этот метод часто вызывается, чтобы проверить, следует ли остановить выполнение метода <see cref="M:System.Drawing.Graphics.DrawImage(System.Drawing.Image,System.Drawing.Rectangle,System.Single,System.Single,System.Single,System.Single,System.Drawing.GraphicsUnit,System.Drawing.Imaging.ImageAttributes,System.Drawing.Graphics.DrawImageAbort)" /> в соответствии с условиями, определяемыми приложением.</param>
        <summary>Рисует заданную часть указанного объекта <see cref="T:System.Drawing.Image" /> в заданном месте, используя заданный размер.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 `srcX`, `srcY`, `srcWidth`, И `srcHeight` параметры определяют Прямоугольный фрагмент `image` для рисования. Прямоугольник определяется относительно верхнего левого угла исходного изображения. Эта часть масштабируется по размерам прямоугольника, заданного параметром `destRect` параметр.  
  
 Эту перегрузку с `callback` параметра позволяет прекратить рисование изображения оно запускается в соответствии с условиями, определенными в приложении. Например приложение может рисовать большое изображение, и пользователь может воспользоваться прокруткой изображения на экране, в котором то приложение может прекратить рисование.  
  
   
  
## Examples  
 Следующий пример кода предназначен для работы с Windows Forms, и для него необходим <xref:System.Windows.Forms.PaintEventArgs> `e`, который является параметром <xref:System.Windows.Forms.Control.Paint> обработчика событий. Сначала код определяет метод обратного вызова для <xref:System.Drawing.Graphics.DrawImageAbort> делегата; определение является упрощенным и служит для проверки ли <xref:System.Drawing.Graphics.DrawImage%2A> вызывает его метод со значением null `callBackData` параметра. Основной текст в примере выполняет следующие действия:  
  
-   Создает экземпляр <xref:System.Drawing.Graphics.DrawImageAbort> метод обратного вызова.  
  
-   Создает образ, из файла в формате JPEG SampImag.jpg в папке примера.  
  
-   Создает точки, определяющие конечный прямоугольник, в котором будет рисоваться изображение.  
  
-   Создает исходный прямоугольник, чтобы выбрать часть изображения для рисования.  
  
-   Назначает точку единицей рисования.  
  
-   Выводит на экран исходного изображения.  
  
-   Создает дополнительный конечный прямоугольник для рисования настроенного изображения.  
  
-   Создает и задает атрибуты настраиваемого изображения для получения большего размера — от обычные гамма-значение.  
  
-   Отображает настроенное изображение на экране.  
  
 Для исходного ненастроенного конечного прямоугольника, положение изображения на экране определяет размещение, а размер исходного прямоугольника, размер и форма конечного прямоугольника — масштабирование.  
  
 Поскольку в этом примере используется перегрузка, не прошедшие `callBackData` параметра, <xref:System.Drawing.Graphics.DrawImageAbort> обратного вызова возвращает `true`, приведет <xref:System.Drawing.Graphics.DrawImage%2A> метод для интерфейса и код обработки исключений, включенный в пример выводит текст исключения, а не рисование изображения.  
  
 [!code-cpp[System.Drawing.ClassicGraphicsExamples#54](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples/CPP/form1.cpp#54)]
 [!code-csharp[System.Drawing.ClassicGraphicsExamples#54](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples/CS/form1.cs#54)]
 [!code-vb[System.Drawing.ClassicGraphicsExamples#54](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples/VB/form1.vb#54)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          Свойство <paramref name="image" /> имеет значение <see langword="null" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="DrawImage">
      <MemberSignature Language="C#" Value="public void DrawImage (System.Drawing.Image image, System.Drawing.Rectangle destRect, int srcX, int srcY, int srcWidth, int srcHeight, System.Drawing.GraphicsUnit srcUnit, System.Drawing.Imaging.ImageAttributes imageAttrs, System.Drawing.Graphics.DrawImageAbort callback, IntPtr callbackData);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void DrawImage(class System.Drawing.Image image, valuetype System.Drawing.Rectangle destRect, int32 srcX, int32 srcY, int32 srcWidth, int32 srcHeight, valuetype System.Drawing.GraphicsUnit srcUnit, class System.Drawing.Imaging.ImageAttributes imageAttrs, class System.Drawing.Graphics/DrawImageAbort callback, native int callbackData) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.DrawImage(System.Drawing.Image,System.Drawing.Rectangle,System.Int32,System.Int32,System.Int32,System.Int32,System.Drawing.GraphicsUnit,System.Drawing.Imaging.ImageAttributes,System.Drawing.Graphics.DrawImageAbort,System.IntPtr)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void DrawImage(System::Drawing::Image ^ image, System::Drawing::Rectangle destRect, int srcX, int srcY, int srcWidth, int srcHeight, System::Drawing::GraphicsUnit srcUnit, System::Drawing::Imaging::ImageAttributes ^ imageAttrs, System::Drawing::Graphics::DrawImageAbort ^ callback, IntPtr callbackData);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="image" Type="System.Drawing.Image" />
        <Parameter Name="destRect" Type="System.Drawing.Rectangle" />
        <Parameter Name="srcX" Type="System.Int32" />
        <Parameter Name="srcY" Type="System.Int32" />
        <Parameter Name="srcWidth" Type="System.Int32" />
        <Parameter Name="srcHeight" Type="System.Int32" />
        <Parameter Name="srcUnit" Type="System.Drawing.GraphicsUnit" />
        <Parameter Name="imageAttrs" Type="System.Drawing.Imaging.ImageAttributes" />
        <Parameter Name="callback" Type="System.Drawing.Graphics+DrawImageAbort" />
        <Parameter Name="callbackData" Type="System.IntPtr" />
      </Parameters>
      <Docs>
        <param name="image">
          Объект <see cref="T:System.Drawing.Image" /> для рисования.</param>
        <param name="destRect">
          Структура <see cref="T:System.Drawing.Rectangle" />, которая задает расположение и размер формируемого изображения. Изображение масштабируется по размерам прямоугольника.</param>
        <param name="srcX">Координата X верхнего левого угла отображаемой части исходного изображения.</param>
        <param name="srcY">Координата Y верхнего левого угла отображаемой части исходного изображения.</param>
        <param name="srcWidth">Ширина отображаемой части исходного изображения.</param>
        <param name="srcHeight">Высота отображаемой части исходного изображения.</param>
        <param name="srcUnit">Элемент перечисления <see cref="T:System.Drawing.GraphicsUnit" />, задающий единицы измерения, используемые для определения исходного прямоугольника.</param>
        <param name="imageAttrs">
          Атрибуты <see cref="T:System.Drawing.Imaging.ImageAttributes" />, содержащие сведения о гамме и перекрашивании для объекта <c>image</c>.</param>
        <param name="callback">
          Делегат <see cref="T:System.Drawing.Graphics.DrawImageAbort" />, который задает метод, вызываемый в процессе создания изображения. Этот метод часто вызывается, чтобы проверить, следует ли остановить выполнение метода <see cref="M:System.Drawing.Graphics.DrawImage(System.Drawing.Image,System.Drawing.Rectangle,System.Int32,System.Int32,System.Int32,System.Int32,System.Drawing.GraphicsUnit,System.Drawing.Imaging.ImageAttributes,System.Drawing.Graphics.DrawImageAbort,System.IntPtr)" /> в соответствии с условиями, определяемыми приложением.</param>
        <param name="callbackData">Значение, содержащее дополнительные данные для делегата <see cref="T:System.Drawing.Graphics.DrawImageAbort" />, которые используются при проверке необходимости остановки выполнения метода <see langword="DrawImage" />.</param>
        <summary>Рисует заданную часть указанного объекта <see cref="T:System.Drawing.Image" /> в заданном месте, используя заданный размер.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 `srcX`, `srcY`, `srcWidth`, И `srcHeight` параметры определяют Прямоугольный фрагмент `image` для рисования. Прямоугольник определяется относительно верхнего левого угла исходного изображения. Эта часть масштабируется по размерам прямоугольника, заданного параметром `destRect` параметр.  
  
 Эту перегрузку с `callback` и `callbackData` параметров позволяет прекратить рисование изображения оно запускается в соответствии с условиями и данными, определяется приложением. Например приложение может рисовать большое изображение, и пользователь может воспользоваться прокруткой изображения на экране, в котором то приложение может прекратить рисование.  
  
   
  
## Examples  
 Следующий пример кода предназначен для работы с Windows Forms, и для него необходим <xref:System.Windows.Forms.PaintEventArgs> `e`, который является параметром <xref:System.Windows.Forms.Control.Paint> обработчика событий. Сначала код определяет метод обратного вызова для <xref:System.Drawing.Graphics.DrawImageAbort> делегата; определение является упрощенным и служит для проверки ли <xref:System.Drawing.Graphics.DrawImage%2A> вызывает его метод со значением null `callBackData` параметра. Основной текст в примере выполняет следующие действия:  
  
-   Создает экземпляр <xref:System.Drawing.Graphics.DrawImageAbort> метод обратного вызова.  
  
-   Создает образ, из файла в формате JPEG SampImag.jpg в папке примера.  
  
-   Создает точки, определяющие конечный прямоугольник, в котором будет рисоваться изображение.  
  
-   Создает исходный прямоугольник, чтобы выбрать часть изображения для рисования.  
  
-   Назначает точку единицей рисования.  
  
-   Выводит на экран исходного изображения.  
  
-   Создает дополнительный конечный прямоугольник для рисования настроенного изображения.  
  
-   Создает и задает атрибуты настраиваемого изображения для получения большего размера — от обычные гамма-значение.  
  
-   Отображает настроенное изображение на экране.  
  
 Для исходного ненастроенного конечного прямоугольника, положение изображения на экране определяет размещение, а размер исходного прямоугольника, размер и форма конечного прямоугольника — масштабирование.  
  
 Так как в этом примере используется перегрузка, передает `callBackData` параметра, <xref:System.Drawing.Graphics.DrawImageAbort> обратного вызова возвращает `false`, чего <xref:System.Drawing.Graphics.DrawImage%2A> метод, чтобы продолжить, а также пример выводит на экран настроенного изображения.  
  
 [!code-cpp[System.Drawing.ClassicGraphicsExamples#51](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples/CPP/form1.cpp#51)]
 [!code-csharp[System.Drawing.ClassicGraphicsExamples#51](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples/CS/form1.cs#51)]
 [!code-vb[System.Drawing.ClassicGraphicsExamples#51](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples/VB/form1.vb#51)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          Свойство <paramref name="image" /> имеет значение <see langword="null" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="DrawImage">
      <MemberSignature Language="C#" Value="public void DrawImage (System.Drawing.Image image, System.Drawing.Rectangle destRect, float srcX, float srcY, float srcWidth, float srcHeight, System.Drawing.GraphicsUnit srcUnit, System.Drawing.Imaging.ImageAttributes imageAttrs, System.Drawing.Graphics.DrawImageAbort callback, IntPtr callbackData);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void DrawImage(class System.Drawing.Image image, valuetype System.Drawing.Rectangle destRect, float32 srcX, float32 srcY, float32 srcWidth, float32 srcHeight, valuetype System.Drawing.GraphicsUnit srcUnit, class System.Drawing.Imaging.ImageAttributes imageAttrs, class System.Drawing.Graphics/DrawImageAbort callback, native int callbackData) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.DrawImage(System.Drawing.Image,System.Drawing.Rectangle,System.Single,System.Single,System.Single,System.Single,System.Drawing.GraphicsUnit,System.Drawing.Imaging.ImageAttributes,System.Drawing.Graphics.DrawImageAbort,System.IntPtr)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void DrawImage(System::Drawing::Image ^ image, System::Drawing::Rectangle destRect, float srcX, float srcY, float srcWidth, float srcHeight, System::Drawing::GraphicsUnit srcUnit, System::Drawing::Imaging::ImageAttributes ^ imageAttrs, System::Drawing::Graphics::DrawImageAbort ^ callback, IntPtr callbackData);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="image" Type="System.Drawing.Image" />
        <Parameter Name="destRect" Type="System.Drawing.Rectangle" />
        <Parameter Name="srcX" Type="System.Single" />
        <Parameter Name="srcY" Type="System.Single" />
        <Parameter Name="srcWidth" Type="System.Single" />
        <Parameter Name="srcHeight" Type="System.Single" />
        <Parameter Name="srcUnit" Type="System.Drawing.GraphicsUnit" />
        <Parameter Name="imageAttrs" Type="System.Drawing.Imaging.ImageAttributes" />
        <Parameter Name="callback" Type="System.Drawing.Graphics+DrawImageAbort" />
        <Parameter Name="callbackData" Type="System.IntPtr" />
      </Parameters>
      <Docs>
        <param name="image">
          Объект <see cref="T:System.Drawing.Image" /> для рисования.</param>
        <param name="destRect">
          Структура <see cref="T:System.Drawing.Rectangle" />, которая задает расположение и размер формируемого изображения. Изображение масштабируется по размерам прямоугольника.</param>
        <param name="srcX">Координата X верхнего левого угла отображаемой части исходного изображения.</param>
        <param name="srcY">Координата Y верхнего левого угла отображаемой части исходного изображения.</param>
        <param name="srcWidth">Ширина отображаемой части исходного изображения.</param>
        <param name="srcHeight">Высота отображаемой части исходного изображения.</param>
        <param name="srcUnit">Элемент перечисления <see cref="T:System.Drawing.GraphicsUnit" />, задающий единицы измерения, используемые для определения исходного прямоугольника.</param>
        <param name="imageAttrs">
          Атрибуты <see cref="T:System.Drawing.Imaging.ImageAttributes" />, содержащие сведения о гамме и перекрашивании для объекта <c>image</c>.</param>
        <param name="callback">
          Делегат <see cref="T:System.Drawing.Graphics.DrawImageAbort" />, который задает метод, вызываемый в процессе создания изображения. Этот метод часто вызывается, чтобы проверить, следует ли остановить выполнение метода <see cref="M:System.Drawing.Graphics.DrawImage(System.Drawing.Image,System.Drawing.Rectangle,System.Single,System.Single,System.Single,System.Single,System.Drawing.GraphicsUnit,System.Drawing.Imaging.ImageAttributes,System.Drawing.Graphics.DrawImageAbort,System.IntPtr)" /> в соответствии с условиями, определяемыми приложением.</param>
        <param name="callbackData">Значение, содержащее дополнительные данные для делегата <see cref="T:System.Drawing.Graphics.DrawImageAbort" />, которые используются при проверке необходимости остановки выполнения метода <see langword="DrawImage" />.</param>
        <summary>Рисует заданную часть указанного объекта <see cref="T:System.Drawing.Image" /> в заданном месте, используя заданный размер.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 `srcX`, `srcY`, `srcWidth`, И `srcHeight` параметры определяют Прямоугольный фрагмент `image` для рисования. Прямоугольник определяется относительно верхнего левого угла исходного изображения. Эта часть масштабируется по размерам прямоугольника, заданного параметром `destRect` параметр.  
  
 Эту перегрузку с `callback` и `callbackData` параметров позволяет прекратить рисование изображения оно запускается в соответствии с условиями и данными, определяется приложением. Например приложение может рисовать большое изображение, и пользователь может воспользоваться прокруткой изображения на экране, в котором то приложение может прекратить рисование.  
  
   
  
## Examples  
 Следующий пример кода предназначен для работы с Windows Forms, и для него необходим <xref:System.Windows.Forms.PaintEventArgs> `e`, который является параметром <xref:System.Windows.Forms.Control.Paint> обработчика событий. Сначала код определяет метод обратного вызова для <xref:System.Drawing.Graphics.DrawImageAbort> делегата; определение является упрощенным и служит для проверки ли <xref:System.Drawing.Graphics.DrawImage%2A> вызывает его метод со значением null `callBackData` параметра. Основной текст в примере выполняет следующие действия:  
  
-   Создает экземпляр <xref:System.Drawing.Graphics.DrawImageAbort> метод обратного вызова.  
  
-   Создает образ, из файла в формате JPEG SampImag.jpg в папке примера.  
  
-   Создает точки, определяющие конечный прямоугольник, в котором будет рисоваться изображение.  
  
-   Создает исходный прямоугольник, чтобы выбрать часть изображения для рисования.  
  
-   Назначает точку единицей рисования.  
  
-   Выводит на экран исходного изображения.  
  
-   Создает дополнительный конечный прямоугольник для рисования настроенного изображения.  
  
-   Создает и задает атрибуты настраиваемого изображения для получения большего размера — от обычные гамма-значение.  
  
-   Отображает настроенное изображение на экране.  
  
 Для исходного ненастроенного конечного прямоугольника, положение изображения на экране определяет размещение, а размер исходного прямоугольника, размер и форма конечного прямоугольника — масштабирование.  
  
 Так как в этом примере используется перегрузка, передает `callBackData` параметра, <xref:System.Drawing.Graphics.DrawImageAbort> обратного вызова возвращает `false`, чего <xref:System.Drawing.Graphics.DrawImage%2A> метод, чтобы продолжить, а также пример выводит на экран настроенного изображения.  
  
 [!code-cpp[System.Drawing.ClassicGraphicsExamples2#55](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples2/CPP/form1.cpp#55)]
 [!code-csharp[System.Drawing.ClassicGraphicsExamples2#55](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples2/CS/form1.cs#55)]
 [!code-vb[System.Drawing.ClassicGraphicsExamples2#55](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples2/VB/form1.vb#55)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          Свойство <paramref name="image" /> имеет значение <see langword="null" />.</exception>
      </Docs>
    </Member>
    <MemberGroup MemberName="DrawImageUnscaled">
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Рисует заданное изображение, используя его исходный фактический размер, в месте, указанном парой координат.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="DrawImageUnscaled">
      <MemberSignature Language="C#" Value="public void DrawImageUnscaled (System.Drawing.Image image, System.Drawing.Point point);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void DrawImageUnscaled(class System.Drawing.Image image, valuetype System.Drawing.Point point) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.DrawImageUnscaled(System.Drawing.Image,System.Drawing.Point)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void DrawImageUnscaled(System::Drawing::Image ^ image, System::Drawing::Point point);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="image" Type="System.Drawing.Image" />
        <Parameter Name="point" Type="System.Drawing.Point" />
      </Parameters>
      <Docs>
        <param name="image">
          Объект <see cref="T:System.Drawing.Image" /> для рисования.</param>
        <param name="point">
          Структура <see cref="T:System.Drawing.Point" />, задающая верхний левый угол создаваемого рисунка.</param>
        <summary>Рисует заданное изображение в заданном месте, используя его исходный фактический размер.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Drawing.Image> Сохраняет значение ширины в точках и значение горизонтального разрешения (точек на дюйм). Фактическая ширина, в дюймах изображения является ширина пикселей, деленная на разрешение по горизонтали. Например изображение с ширину 216 точек, при горизонтальном разрешении 72 точек на дюйм будет иметь фактическую ширину 3 дюйма. Аналогичным образом вычисляются высота в точках и фактическая высота.  
  
 <xref:System.Drawing.Graphics.DrawImageUnscaled%2A> Метод создает изображение с его фактический размер, поэтому изображение будет иметь правильный размер в дюймах, независимо от того, разрешение (точек на дюйм) устройства отображения. Например предположим, что образ имеет ширину 216 точек, при горизонтальном разрешении 72 точек на дюйм. При вызове метода <xref:System.Drawing.Graphics.DrawImageUnscaled%2A> для отображения этого образа на устройстве с разрешением 96 точек на дюйм, ширина в пикселях подготовленного изображения будет (216/72) * 96 = 288.  
  
   
  
## Examples  
 Следующий пример кода предназначен для работы с Windows Forms, и для него необходим <xref:System.Windows.Forms.PaintEventArgs> `e`, который является параметром <xref:System.Windows.Forms.Control.Paint> обработчика событий. Код выполняет следующие действия.  
  
-   Создает образ, из файла в формате JPEG SampImag.jpg в папке примера.  
  
-   Создает точку, в котором выполняется отрисовка верхнего левого угла изображения.  
  
-   Рисует все изображение, используя его фактический размер.  
  
 [!code-cpp[System.Drawing.ClassicGraphicsExamples2#64](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples2/CPP/form1.cpp#64)]
 [!code-csharp[System.Drawing.ClassicGraphicsExamples2#64](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples2/CS/form1.cs#64)]
 [!code-vb[System.Drawing.ClassicGraphicsExamples2#64](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples2/VB/form1.vb#64)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          Свойство <paramref name="image" /> имеет значение <see langword="null" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="DrawImageUnscaled">
      <MemberSignature Language="C#" Value="public void DrawImageUnscaled (System.Drawing.Image image, System.Drawing.Rectangle rect);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void DrawImageUnscaled(class System.Drawing.Image image, valuetype System.Drawing.Rectangle rect) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.DrawImageUnscaled(System.Drawing.Image,System.Drawing.Rectangle)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void DrawImageUnscaled(System::Drawing::Image ^ image, System::Drawing::Rectangle rect);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="image" Type="System.Drawing.Image" />
        <Parameter Name="rect" Type="System.Drawing.Rectangle" />
      </Parameters>
      <Docs>
        <param name="image">
          Объект <see cref="T:System.Drawing.Image" /> для рисования.</param>
        <param name="rect">
          Структура <see cref="T:System.Drawing.Rectangle" />, задающая верхний левый угол создаваемого рисунка. Свойства X и Y прямоугольника определяют верхний левый угол. Свойства ширины и высоты не обрабатываются.</param>
        <summary>Рисует заданное изображение в заданном месте, используя его исходный фактический размер.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Drawing.Image> Сохраняет значение ширины в точках и значение горизонтального разрешения (точек на дюйм). Фактическая ширина, в дюймах изображения является ширина пикселей, деленная на разрешение по горизонтали. Например изображение с ширину 216 точек, при горизонтальном разрешении 72 точек на дюйм будет иметь фактическую ширину 3 дюйма. Аналогичным образом вычисляются высота в точках и фактическая высота.  
  
 <xref:System.Drawing.Graphics.DrawImageUnscaled%2A> Метод создает изображение с его фактический размер, поэтому изображение будет иметь правильный размер в дюймах, независимо от того, разрешение (точек на дюйм) устройства отображения. Например предположим, что образ имеет ширину 216 точек, при горизонтальном разрешении 72 точек на дюйм. При вызове метода <xref:System.Drawing.Graphics.DrawImageUnscaled%2A> для отображения этого образа на устройстве с разрешением 96 точек на дюйм, ширина в пикселях подготовленного изображения будет (216/72) * 96 = 288.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          Свойство <paramref name="image" /> имеет значение <see langword="null" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="DrawImageUnscaled">
      <MemberSignature Language="C#" Value="public void DrawImageUnscaled (System.Drawing.Image image, int x, int y);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void DrawImageUnscaled(class System.Drawing.Image image, int32 x, int32 y) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.DrawImageUnscaled(System.Drawing.Image,System.Int32,System.Int32)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void DrawImageUnscaled(System::Drawing::Image ^ image, int x, int y);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="image" Type="System.Drawing.Image" />
        <Parameter Name="x" Type="System.Int32" />
        <Parameter Name="y" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="image">
          Объект <see cref="T:System.Drawing.Image" /> для рисования.</param>
        <param name="x">Координата X верхнего левого угла формируемого изображения.</param>
        <param name="y">Координата Y верхнего левого угла формируемого изображения.</param>
        <summary>Рисует заданное изображение, используя его исходный фактический размер, в месте, указанном парой координат.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Drawing.Image> Сохраняет значение ширины в точках и значение горизонтального разрешения (точек на дюйм). Фактическая ширина, в дюймах изображения является ширина пикселей, деленная на разрешение по горизонтали. Например изображение с ширину 216 точек, при горизонтальном разрешении 72 точек на дюйм будет иметь фактическую ширину 3 дюйма. Аналогичным образом вычисляются высота в точках и фактическая высота.  
  
 <xref:System.Drawing.Graphics.DrawImageUnscaled%2A> Метод создает изображение с его фактический размер, поэтому изображение будет иметь правильный размер в дюймах, независимо от того, разрешение (точек на дюйм) устройства отображения. Например предположим, что образ имеет ширину 216 точек, при горизонтальном разрешении 72 точек на дюйм. При вызове метода <xref:System.Drawing.Graphics.DrawImageUnscaled%2A> для отображения этого образа на устройстве с разрешением 96 точек на дюйм, ширина в пикселях подготовленного изображения будет (216/72) * 96 = 288.  
  
   
  
## Examples  
 Следующий пример кода предназначен для работы с Windows Forms, и для него необходим <xref:System.Windows.Forms.PaintEventArgs> `e`, который является параметром <xref:System.Windows.Forms.Control.Paint> обработчика событий. Код выполняет следующие действия.  
  
-   Создает образ, из файла в формате JPEG, SampImag.jpg в папке примера.  
  
-   Создает точку, в котором выполняется отрисовка верхнего левого угла изображения.  
  
-   Рисует все изображение, используя его фактический размер.  
  
 [!code-cpp[System.Drawing.ClassicGraphicsExamples2#65](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples2/CPP/form1.cpp#65)]
 [!code-csharp[System.Drawing.ClassicGraphicsExamples2#65](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples2/CS/form1.cs#65)]
 [!code-vb[System.Drawing.ClassicGraphicsExamples2#65](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples2/VB/form1.vb#65)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          Свойство <paramref name="image" /> имеет значение <see langword="null" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="DrawImageUnscaled">
      <MemberSignature Language="C#" Value="public void DrawImageUnscaled (System.Drawing.Image image, int x, int y, int width, int height);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void DrawImageUnscaled(class System.Drawing.Image image, int32 x, int32 y, int32 width, int32 height) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.DrawImageUnscaled(System.Drawing.Image,System.Int32,System.Int32,System.Int32,System.Int32)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void DrawImageUnscaled(System::Drawing::Image ^ image, int x, int y, int width, int height);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="image" Type="System.Drawing.Image" />
        <Parameter Name="x" Type="System.Int32" />
        <Parameter Name="y" Type="System.Int32" />
        <Parameter Name="width" Type="System.Int32" />
        <Parameter Name="height" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="image">
          Объект <see cref="T:System.Drawing.Image" /> для рисования.</param>
        <param name="x">Координата X верхнего левого угла формируемого изображения.</param>
        <param name="y">Координата Y верхнего левого угла формируемого изображения.</param>
        <param name="width">Не используется.</param>
        <param name="height">Не используется.</param>
        <summary>Рисует заданное изображение в заданном месте, используя его исходный фактический размер.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Drawing.Image> Сохраняет значение ширины в точках и значение горизонтального разрешения (точек на дюйм). Фактическая ширина, в дюймах изображения является ширина пикселей, деленная на разрешение по горизонтали. Например изображение с ширину 216 точек, при горизонтальном разрешении 72 точек на дюйм будет иметь фактическую ширину 3 дюйма. Аналогичным образом вычисляются высота в точках и фактическая высота.  
  
 <xref:System.Drawing.Graphics.DrawImageUnscaled%2A> Метод создает изображение с его фактический размер, поэтому изображение будет иметь правильный размер в дюймах, независимо от того, разрешение (точек на дюйм) устройства отображения. Например предположим, что образ имеет ширину 216 точек, при горизонтальном разрешении 72 точек на дюйм. При вызове метода <xref:System.Drawing.Graphics.DrawImageUnscaled%2A> для отображения этого образа на устройстве с разрешением 96 точек на дюйм, ширина в пикселях подготовленного изображения будет (216/72) * 96 = 288.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          Свойство <paramref name="image" /> имеет значение <see langword="null" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="DrawImageUnscaledAndClipped">
      <MemberSignature Language="C#" Value="public void DrawImageUnscaledAndClipped (System.Drawing.Image image, System.Drawing.Rectangle rect);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void DrawImageUnscaledAndClipped(class System.Drawing.Image image, valuetype System.Drawing.Rectangle rect) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.DrawImageUnscaledAndClipped(System.Drawing.Image,System.Drawing.Rectangle)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void DrawImageUnscaledAndClipped(System::Drawing::Image ^ image, System::Drawing::Rectangle rect);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="image" Type="System.Drawing.Image" />
        <Parameter Name="rect" Type="System.Drawing.Rectangle" />
      </Parameters>
      <Docs>
        <param name="image">Изображение <see cref="T:System.Drawing.Image" /> для отрисовки.</param>
        <param name="rect">Прямоугольник <see cref="T:System.Drawing.Rectangle" />, в котором должно быть нарисовано изображение.</param>
        <summary>Рисует заданное изображение без масштабирования и при необходимости обрезает его, чтобы оно вмещалось в указываемом прямоугольнике.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 В следующем примере показано использование метода <xref:System.Drawing.Graphics.DrawImageUnscaledAndClipped%2A>. Чтобы выполнить этот пример, вставьте его в форму Windows Forms. Обрабатывать формы <xref:System.Windows.Forms.Control.Paint> событий и вызовов `DrawImageUnscaled` метод <xref:System.Windows.Forms.Control.Paint> метод обработки событий, передав `e` как <xref:System.Windows.Forms.PaintEventArgs>.  
  
 [!code-csharp[System.Drawing.MiscWhidbeySnippets#8](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.MiscWhidbeySnippets/CS/Form1.cs#8)]
 [!code-vb[System.Drawing.MiscWhidbeySnippets#8](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.MiscWhidbeySnippets/VB/Form1.vb#8)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          Свойство <paramref name="image" /> имеет значение <see langword="null" />.</exception>
      </Docs>
    </Member>
    <MemberGroup MemberName="DrawLine">
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Проводит линию, соединяющую две точки, задаваемые парами координат.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="DrawLine">
      <MemberSignature Language="C#" Value="public void DrawLine (System.Drawing.Pen pen, System.Drawing.Point pt1, System.Drawing.Point pt2);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void DrawLine(class System.Drawing.Pen pen, valuetype System.Drawing.Point pt1, valuetype System.Drawing.Point pt2) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.DrawLine(System.Drawing.Pen,System.Drawing.Point,System.Drawing.Point)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void DrawLine(System::Drawing::Pen ^ pen, System::Drawing::Point pt1, System::Drawing::Point pt2);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="pen" Type="System.Drawing.Pen" />
        <Parameter Name="pt1" Type="System.Drawing.Point" />
        <Parameter Name="pt2" Type="System.Drawing.Point" />
      </Parameters>
      <Docs>
        <param name="pen">
          Структура <see cref="T:System.Drawing.Pen" />, определяющая цвет, ширину и стиль линии.</param>
        <param name="pt1">
          Структура <see cref="T:System.Drawing.Point" />, представляющая первую точку для соединения.</param>
        <param name="pt2">
          Структура <see cref="T:System.Drawing.Point" />, представляющая вторую точка для соединения.</param>
        <summary>Проводит линию, соединяющую две структуры <see cref="T:System.Drawing.Point" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 Следующий пример кода предназначен для работы с Windows Forms, и для него необходим <xref:System.Windows.Forms.PaintEventArgs> `e`, который является параметром <xref:System.Windows.Forms.Control.Paint> обработчика событий. Код выполняет следующие действия.  
  
-   Создает черного пера.  
  
-   Создает конечные точки линии.  
  
-   Выводит на экран строку.  
  
 [!code-cpp[System.Drawing.ClassicGraphicsExamples2#66](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples2/CPP/form1.cpp#66)]
 [!code-csharp[System.Drawing.ClassicGraphicsExamples2#66](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples2/CS/form1.cs#66)]
 [!code-vb[System.Drawing.ClassicGraphicsExamples2#66](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples2/VB/form1.vb#66)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          Свойство <paramref name="pen" /> имеет значение <see langword="null" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="DrawLine">
      <MemberSignature Language="C#" Value="public void DrawLine (System.Drawing.Pen pen, System.Drawing.PointF pt1, System.Drawing.PointF pt2);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void DrawLine(class System.Drawing.Pen pen, valuetype System.Drawing.PointF pt1, valuetype System.Drawing.PointF pt2) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.DrawLine(System.Drawing.Pen,System.Drawing.PointF,System.Drawing.PointF)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void DrawLine(System::Drawing::Pen ^ pen, System::Drawing::PointF pt1, System::Drawing::PointF pt2);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="pen" Type="System.Drawing.Pen" />
        <Parameter Name="pt1" Type="System.Drawing.PointF" />
        <Parameter Name="pt2" Type="System.Drawing.PointF" />
      </Parameters>
      <Docs>
        <param name="pen">
          Структура <see cref="T:System.Drawing.Pen" />, определяющая цвет, ширину и стиль линии.</param>
        <param name="pt1">
          Структура <see cref="T:System.Drawing.PointF" />, представляющая первую точку для соединения.</param>
        <param name="pt2">
          Структура <see cref="T:System.Drawing.PointF" />, представляющая вторую точка для соединения.</param>
        <summary>Проводит линию, соединяющую две структуры <see cref="T:System.Drawing.PointF" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Этот метод проводит линию, соединяющую две точки, задаваемые по `pt1` и p`2` параметров.  
  
   
  
## Examples  
 Следующий пример кода предназначен для работы с Windows Forms, и для него необходим <xref:System.Windows.Forms.PaintEventArgs> `e`, который является параметром <xref:System.Windows.Forms.Control.Paint> обработчика событий. Код выполняет следующие действия.  
  
-   Создает черного пера.  
  
-   Создает конечные точки линии.  
  
-   Выводит на экран строку.  
  
 [!code-cpp[System.Drawing.ClassicGraphicsExamples2#67](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples2/CPP/form1.cpp#67)]
 [!code-csharp[System.Drawing.ClassicGraphicsExamples2#67](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples2/CS/form1.cs#67)]
 [!code-vb[System.Drawing.ClassicGraphicsExamples2#67](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples2/VB/form1.vb#67)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          Свойство <paramref name="pen" /> имеет значение <see langword="null" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="DrawLine">
      <MemberSignature Language="C#" Value="public void DrawLine (System.Drawing.Pen pen, int x1, int y1, int x2, int y2);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void DrawLine(class System.Drawing.Pen pen, int32 x1, int32 y1, int32 x2, int32 y2) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.DrawLine(System.Drawing.Pen,System.Int32,System.Int32,System.Int32,System.Int32)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void DrawLine(System::Drawing::Pen ^ pen, int x1, int y1, int x2, int y2);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="pen" Type="System.Drawing.Pen" />
        <Parameter Name="x1" Type="System.Int32" />
        <Parameter Name="y1" Type="System.Int32" />
        <Parameter Name="x2" Type="System.Int32" />
        <Parameter Name="y2" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="pen">
          Структура <see cref="T:System.Drawing.Pen" />, определяющая цвет, ширину и стиль линии.</param>
        <param name="x1">Координата X первой точки.</param>
        <param name="y1">Координата Y первой точки.</param>
        <param name="x2">Координата X второй точки.</param>
        <param name="y2">Координата Y второй точки.</param>
        <summary>Проводит линию, соединяющую две точки, задаваемые парами координат.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Этот метод проводит линию, соединяющую две точки, задаваемые по `x1`, `y1`, `x2`, и `y2` параметров.  
  
   
  
## Examples  
 Следующий пример кода предназначен для работы с Windows Forms, и для него необходим <xref:System.Windows.Forms.PaintEventArgs> `e`, который является параметром <xref:System.Windows.Forms.Control.Paint> обработчика событий. Код выполняет следующие действия.  
  
-   Создает черного пера.  
  
-   Определяет координаты конечные точки линии.  
  
-   Выводит на экран строку.  
  
 [!code-cpp[System.Drawing.ClassicGraphicsExamples2#68](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples2/CPP/form1.cpp#68)]
 [!code-csharp[System.Drawing.ClassicGraphicsExamples2#68](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples2/CS/form1.cs#68)]
 [!code-vb[System.Drawing.ClassicGraphicsExamples2#68](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples2/VB/form1.vb#68)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          Свойство <paramref name="pen" /> имеет значение <see langword="null" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="DrawLine">
      <MemberSignature Language="C#" Value="public void DrawLine (System.Drawing.Pen pen, float x1, float y1, float x2, float y2);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void DrawLine(class System.Drawing.Pen pen, float32 x1, float32 y1, float32 x2, float32 y2) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.DrawLine(System.Drawing.Pen,System.Single,System.Single,System.Single,System.Single)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void DrawLine(System::Drawing::Pen ^ pen, float x1, float y1, float x2, float y2);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="pen" Type="System.Drawing.Pen" />
        <Parameter Name="x1" Type="System.Single" />
        <Parameter Name="y1" Type="System.Single" />
        <Parameter Name="x2" Type="System.Single" />
        <Parameter Name="y2" Type="System.Single" />
      </Parameters>
      <Docs>
        <param name="pen">
          Структура <see cref="T:System.Drawing.Pen" />, определяющая цвет, ширину и стиль линии.</param>
        <param name="x1">Координата X первой точки.</param>
        <param name="y1">Координата Y первой точки.</param>
        <param name="x2">Координата X второй точки.</param>
        <param name="y2">Координата Y второй точки.</param>
        <summary>Проводит линию, соединяющую две точки, задаваемые парами координат.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Этот метод проводит линию, соединяющую две точки, задаваемые по `x1`, `y1`, `x2`, и `y2` параметров.  
  
   
  
## Examples  
 Следующий пример кода предназначен для работы с Windows Forms, и для него необходим <xref:System.Windows.Forms.PaintEventArgs> `e`, который является параметром <xref:System.Windows.Forms.Control.Paint> обработчика событий. Код выполняет следующие действия.  
  
-   Создает черного пера.  
  
-   Определяет координаты конечные точки линии.  
  
-   Выводит на экран строку.  
  
 [!code-cpp[System.Drawing.ClassicGraphicsExamples2#69](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples2/CPP/form1.cpp#69)]
 [!code-csharp[System.Drawing.ClassicGraphicsExamples2#69](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples2/CS/form1.cs#69)]
 [!code-vb[System.Drawing.ClassicGraphicsExamples2#69](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples2/VB/form1.vb#69)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          Свойство <paramref name="pen" /> имеет значение <see langword="null" />.</exception>
      </Docs>
    </Member>
    <MemberGroup MemberName="DrawLines">
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Рисует ряд сегментов линий, которые соединяют массив структур <see cref="T:System.Drawing.Point" />.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="DrawLines">
      <MemberSignature Language="C#" Value="public void DrawLines (System.Drawing.Pen pen, System.Drawing.Point[] points);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void DrawLines(class System.Drawing.Pen pen, valuetype System.Drawing.Point[] points) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.DrawLines(System.Drawing.Pen,System.Drawing.Point[])" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void DrawLines(System::Drawing::Pen ^ pen, cli::array &lt;System::Drawing::Point&gt; ^ points);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="pen" Type="System.Drawing.Pen" />
        <Parameter Name="points" Type="System.Drawing.Point[]" />
      </Parameters>
      <Docs>
        <param name="pen">
          Структура <see cref="T:System.Drawing.Pen" />, определяющая цвет, ширину и стиль сегментов линии.</param>
        <param name="points">Массив структур <see cref="T:System.Drawing.Point" />, представляющий точки для соединения.</param>
        <summary>Рисует ряд сегментов линий, которые соединяют массив структур <see cref="T:System.Drawing.Point" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Этот метод формирует набор линий, соединяющих массив конечных точек. Первые две точки в массиве Укажите первую строку. Каждая дополнительная точка определяет конец сегмента линии, начальной точкой которого служит конечная точка предыдущего сегмента линии.  
  
   
  
## Examples  
 Следующий пример кода предназначен для работы с Windows Forms, и для него необходим <xref:System.Windows.Forms.PaintEventArgs> `e`, который является параметром <xref:System.Windows.Forms.Control.Paint> обработчика событий. Код выполняет следующие действия.  
  
-   Создает черного пера.  
  
-   Создает массив точек из сегментов линии.  
  
-   Выводит на экран сегменты линии.  
  
 [!code-cpp[System.Drawing.ClassicGraphicsExamples2#70](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples2/CPP/form1.cpp#70)]
 [!code-csharp[System.Drawing.ClassicGraphicsExamples2#70](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples2/CS/form1.cs#70)]
 [!code-vb[System.Drawing.ClassicGraphicsExamples2#70](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples2/VB/form1.vb#70)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          Свойство <paramref name="pen" /> имеет значение <see langword="null" />.  
  
 - или -  
  
 Свойство <paramref name="points" /> имеет значение <see langword="null" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="DrawLines">
      <MemberSignature Language="C#" Value="public void DrawLines (System.Drawing.Pen pen, System.Drawing.PointF[] points);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void DrawLines(class System.Drawing.Pen pen, valuetype System.Drawing.PointF[] points) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.DrawLines(System.Drawing.Pen,System.Drawing.PointF[])" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void DrawLines(System::Drawing::Pen ^ pen, cli::array &lt;System::Drawing::PointF&gt; ^ points);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="pen" Type="System.Drawing.Pen" />
        <Parameter Name="points" Type="System.Drawing.PointF[]" />
      </Parameters>
      <Docs>
        <param name="pen">
          Структура <see cref="T:System.Drawing.Pen" />, определяющая цвет, ширину и стиль сегментов линии.</param>
        <param name="points">Массив структур <see cref="T:System.Drawing.PointF" />, представляющий точки для соединения.</param>
        <summary>Рисует ряд сегментов линий, которые соединяют массив структур <see cref="T:System.Drawing.PointF" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Этот метод формирует набор линий, соединяющих массив конечных точек. Первые две точки в массиве Укажите первую строку. Каждая дополнительная точка определяет конец сегмента линии, начальной точкой которого служит конечная точка предыдущего сегмента линии.  
  
   
  
## Examples  
 Следующий пример кода предназначен для работы с Windows Forms, и для него необходим <xref:System.Windows.Forms.PaintEventArgs> `e`, который является параметром <xref:System.Windows.Forms.Control.Paint> обработчика событий. Код выполняет следующие действия.  
  
-   Код создает черного пера.  
  
-   Создает массив точек из сегментов линии.  
  
-   Выводит на экран сегменты линии.  
  
 [!code-cpp[System.Drawing.ClassicGraphicsExamples2#71](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples2/CPP/form1.cpp#71)]
 [!code-csharp[System.Drawing.ClassicGraphicsExamples2#71](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples2/CS/form1.cs#71)]
 [!code-vb[System.Drawing.ClassicGraphicsExamples2#71](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples2/VB/form1.vb#71)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          Свойство <paramref name="pen" /> имеет значение <see langword="null" />.  
  
 - или -  
  
 Свойство <paramref name="points" /> имеет значение <see langword="null" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="DrawPath">
      <MemberSignature Language="C#" Value="public void DrawPath (System.Drawing.Pen pen, System.Drawing.Drawing2D.GraphicsPath path);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void DrawPath(class System.Drawing.Pen pen, class System.Drawing.Drawing2D.GraphicsPath path) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.DrawPath(System.Drawing.Pen,System.Drawing.Drawing2D.GraphicsPath)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void DrawPath(System::Drawing::Pen ^ pen, System::Drawing::Drawing2D::GraphicsPath ^ path);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="pen" Type="System.Drawing.Pen" />
        <Parameter Name="path" Type="System.Drawing.Drawing2D.GraphicsPath" />
      </Parameters>
      <Docs>
        <param name="pen">
          Структура <see cref="T:System.Drawing.Pen" />, определяющая цвет, ширину и стиль контура.</param>
        <param name="path">
          Объект <see cref="T:System.Drawing.Drawing2D.GraphicsPath" /> для рисования.</param>
        <summary>Рисует объект <see cref="T:System.Drawing.Drawing2D.GraphicsPath" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Текущее преобразование в графическом контексте применяется к <xref:System.Drawing.Drawing2D.GraphicsPath> до его рисования.  
  
   
  
## Examples  
 Следующий пример кода предназначен для работы с Windows Forms, и для него необходим <xref:System.Windows.Forms.PaintEventArgs> `e`, который является параметром <xref:System.Windows.Forms.Control.Paint> обработчика событий. Код выполняет следующие действия.  
  
-   Создает графический объект контура и добавляет к нему эллипс.  
  
-   Создает черного пера.  
  
-   Выводит на экран графический контур.  
  
 [!code-cpp[System.Drawing.ClassicGraphicsExamples2#72](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples2/CPP/form1.cpp#72)]
 [!code-csharp[System.Drawing.ClassicGraphicsExamples2#72](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples2/CS/form1.cs#72)]
 [!code-vb[System.Drawing.ClassicGraphicsExamples2#72](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples2/VB/form1.vb#72)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          Свойство <paramref name="pen" /> имеет значение <see langword="null" />.  
  
 - или -  
  
 Свойство <paramref name="path" /> имеет значение <see langword="null" />.</exception>
      </Docs>
    </Member>
    <MemberGroup MemberName="DrawPie">
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Рисует сектор, определяемый эллипсом, который задан парой координат, шириной, высотой и двумя радиальными линиями.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="DrawPie">
      <MemberSignature Language="C#" Value="public void DrawPie (System.Drawing.Pen pen, System.Drawing.Rectangle rect, float startAngle, float sweepAngle);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void DrawPie(class System.Drawing.Pen pen, valuetype System.Drawing.Rectangle rect, float32 startAngle, float32 sweepAngle) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.DrawPie(System.Drawing.Pen,System.Drawing.Rectangle,System.Single,System.Single)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void DrawPie(System::Drawing::Pen ^ pen, System::Drawing::Rectangle rect, float startAngle, float sweepAngle);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="pen" Type="System.Drawing.Pen" />
        <Parameter Name="rect" Type="System.Drawing.Rectangle" />
        <Parameter Name="startAngle" Type="System.Single" />
        <Parameter Name="sweepAngle" Type="System.Single" />
      </Parameters>
      <Docs>
        <param name="pen">
          Объект <see cref="T:System.Drawing.Pen" />, определяющий цвет, ширину и стиль сектора.</param>
        <param name="rect">
          Структура <see cref="T:System.Drawing.Rectangle" />, представляющая ограничивающий прямоугольник, определяющий эллипс, частью которого является данный сектор.</param>
        <param name="startAngle">Угол (в градусах), который измеряется по часовой стрелке, начиная от оси X и заканчивая первой стороной сектора.</param>
        <param name="sweepAngle">Угол (в градусах), который измеряется по часовой стрелке, начиная от значения параметра <c>startAngle</c> и заканчивая второй стороной сектора.</param>
        <summary>Рисует сектор, который определяется эллипсом, заданным структурой <see cref="T:System.Drawing.Rectangle" /> и двумя радиальными линиями.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Этот метод рисует сектор, определяемый дугой эллипса и двумя радиальными линиями, которые пересекаются с конечными точками дуги. Эллипс определяется исходя из ограничивающего прямоугольника. Сектор состоит из двумя радиальными линиями, определяется `startAngle` и `sweepAngle` параметры и дуги между пересечения этих линий с эллипсом.  
  
 Если `sweepAngle` параметра больше 360 или меньше-360 градусов, он интерпретируется как если бы он был 360 или -360 градусов, соответственно.  
  
   
  
## Examples  
 Следующий пример кода предназначен для работы с Windows Forms, и для него необходим <xref:System.Windows.Forms.PaintEventArgs> `e`, который является параметром <xref:System.Windows.Forms.Control.Paint> обработчика событий. Код выполняет следующие действия.  
  
-   Создает черного пера.  
  
-   Создает прямоугольник, ограничивающий полный эллипс.  
  
-   Определяет углы, с которой начинается рисования (относительно оси x) и через которую (отсчитываются по часовой стрелке).  
  
-   Рисует сектор на экране.  
  
 [!code-cpp[System.Drawing.ClassicGraphicsExamples2#73](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples2/CPP/form1.cpp#73)]
 [!code-csharp[System.Drawing.ClassicGraphicsExamples2#73](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples2/CS/form1.cs#73)]
 [!code-vb[System.Drawing.ClassicGraphicsExamples2#73](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples2/VB/form1.vb#73)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          Свойство <paramref name="pen" /> имеет значение <see langword="null" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="DrawPie">
      <MemberSignature Language="C#" Value="public void DrawPie (System.Drawing.Pen pen, System.Drawing.RectangleF rect, float startAngle, float sweepAngle);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void DrawPie(class System.Drawing.Pen pen, valuetype System.Drawing.RectangleF rect, float32 startAngle, float32 sweepAngle) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.DrawPie(System.Drawing.Pen,System.Drawing.RectangleF,System.Single,System.Single)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void DrawPie(System::Drawing::Pen ^ pen, System::Drawing::RectangleF rect, float startAngle, float sweepAngle);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="pen" Type="System.Drawing.Pen" />
        <Parameter Name="rect" Type="System.Drawing.RectangleF" />
        <Parameter Name="startAngle" Type="System.Single" />
        <Parameter Name="sweepAngle" Type="System.Single" />
      </Parameters>
      <Docs>
        <param name="pen">
          Объект <see cref="T:System.Drawing.Pen" />, определяющий цвет, ширину и стиль сектора.</param>
        <param name="rect">
          Структура <see cref="T:System.Drawing.RectangleF" />, представляющая ограничивающий прямоугольник, определяющий эллипс, частью которого является данный сектор.</param>
        <param name="startAngle">Угол (в градусах), который измеряется по часовой стрелке, начиная от оси X и заканчивая первой стороной сектора.</param>
        <param name="sweepAngle">Угол (в градусах), который измеряется по часовой стрелке, начиная от значения параметра <c>startAngle</c> и заканчивая второй стороной сектора.</param>
        <summary>Рисует сектор, который определяется эллипсом, заданным структурой <see cref="T:System.Drawing.RectangleF" /> и двумя радиальными линиями.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Этот метод рисует сектор, определяемый дугой эллипса и двумя радиальными линиями, которые пересекаются с конечными точками дуги. Эллипс определяется исходя из ограничивающего прямоугольника. Сектор состоит из двумя радиальными линиями, определяется `startAngle` и `sweepAngle` параметры и дуги между пересечения этих линий с эллипсом.  
  
 Если `sweepAngle` параметра больше 360 или меньше-360 градусов, он интерпретируется как если бы он был 360 или -360 градусов, соответственно.  
  
   
  
## Examples  
 Следующий пример кода предназначен для работы с Windows Forms, и для него необходим <xref:System.Windows.Forms.PaintEventArgs> `e`, который является параметром <xref:System.Windows.Forms.Control.Paint> обработчика событий. Код выполняет следующие действия.  
  
-   Создает черного пера.  
  
-   Создает прямоугольник, ограничивающий полный эллипс.  
  
-   Определяет углы, с которой начинается рисования (относительно оси x) и через которую (отсчитываются по часовой стрелке).  
  
-   Рисует сектор на экране.  
  
 [!code-cpp[System.Drawing.ClassicGraphicsExamples2#74](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples2/CPP/form1.cpp#74)]
 [!code-csharp[System.Drawing.ClassicGraphicsExamples2#74](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples2/CS/form1.cs#74)]
 [!code-vb[System.Drawing.ClassicGraphicsExamples2#74](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples2/VB/form1.vb#74)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          Свойство <paramref name="pen" /> имеет значение <see langword="null" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="DrawPie">
      <MemberSignature Language="C#" Value="public void DrawPie (System.Drawing.Pen pen, int x, int y, int width, int height, int startAngle, int sweepAngle);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void DrawPie(class System.Drawing.Pen pen, int32 x, int32 y, int32 width, int32 height, int32 startAngle, int32 sweepAngle) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.DrawPie(System.Drawing.Pen,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void DrawPie(System::Drawing::Pen ^ pen, int x, int y, int width, int height, int startAngle, int sweepAngle);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="pen" Type="System.Drawing.Pen" />
        <Parameter Name="x" Type="System.Int32" />
        <Parameter Name="y" Type="System.Int32" />
        <Parameter Name="width" Type="System.Int32" />
        <Parameter Name="height" Type="System.Int32" />
        <Parameter Name="startAngle" Type="System.Int32" />
        <Parameter Name="sweepAngle" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="pen">
          Объект <see cref="T:System.Drawing.Pen" />, определяющий цвет, ширину и стиль сектора.</param>
        <param name="x">Координата X верхнего левого угла ограничивающего прямоугольника, определяющего эллипс, частью которого является сектор.</param>
        <param name="y">Координата Y верхнего левого угла ограничивающего прямоугольника, определяющего эллипс, частью которого является сектор.</param>
        <param name="width">Ширина ограничивающего прямоугольника, определяющего эллипс, частью которого является данный сектор.</param>
        <param name="height">Высота ограничивающего прямоугольника, определяющего эллипс, частью которого является данный сектор.</param>
        <param name="startAngle">Угол (в градусах), который измеряется по часовой стрелке, начиная от оси X и заканчивая первой стороной сектора.</param>
        <param name="sweepAngle">Угол (в градусах), который измеряется по часовой стрелке, начиная от значения параметра <c>startAngle</c> и заканчивая второй стороной сектора.</param>
        <summary>Рисует сектор, определяемый эллипсом, который задан парой координат, шириной, высотой и двумя радиальными линиями.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Этот метод рисует сектор, определяемый дугой эллипса и двумя радиальными линиями, которые пересекаются с конечными точками дуги. Эллипс определяется ограничивающим прямоугольником, описываемого `x`, `y`, `width`, и `height` параметров. Сектор состоит из двумя радиальными линиями, определяется `startAngle` и `sweepAngle` параметры и дуги между пересечения этих линий с эллипсом.  
  
 Если `sweepAngle` параметра больше 360 или меньше-360 градусов, он интерпретируется как если бы он был 360 или -360 градусов, соответственно.  
  
   
  
## Examples  
 Следующий пример кода предназначен для работы с Windows Forms, и для него необходим <xref:System.Windows.Forms.PaintEventArgs> `e`, который является параметром <xref:System.Windows.Forms.Control.Paint> обработчика событий. Код выполняет следующие действия.  
  
-   Создает черного пера.  
  
-   Определяет положение и размер прямоугольника, ограничивающего полный эллипс.  
  
-   Определяет углы, с которой начинается рисования (относительно оси x) и через которую (отсчитываются по часовой стрелке).  
  
-   Рисует сектор на экране.  
  
 [!code-cpp[System.Drawing.ClassicGraphicsExamples2#75](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples2/CPP/form1.cpp#75)]
 [!code-csharp[System.Drawing.ClassicGraphicsExamples2#75](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples2/CS/form1.cs#75)]
 [!code-vb[System.Drawing.ClassicGraphicsExamples2#75](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples2/VB/form1.vb#75)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          Свойство <paramref name="pen" /> имеет значение <see langword="null" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="DrawPie">
      <MemberSignature Language="C#" Value="public void DrawPie (System.Drawing.Pen pen, float x, float y, float width, float height, float startAngle, float sweepAngle);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void DrawPie(class System.Drawing.Pen pen, float32 x, float32 y, float32 width, float32 height, float32 startAngle, float32 sweepAngle) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.DrawPie(System.Drawing.Pen,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void DrawPie(System::Drawing::Pen ^ pen, float x, float y, float width, float height, float startAngle, float sweepAngle);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="pen" Type="System.Drawing.Pen" />
        <Parameter Name="x" Type="System.Single" />
        <Parameter Name="y" Type="System.Single" />
        <Parameter Name="width" Type="System.Single" />
        <Parameter Name="height" Type="System.Single" />
        <Parameter Name="startAngle" Type="System.Single" />
        <Parameter Name="sweepAngle" Type="System.Single" />
      </Parameters>
      <Docs>
        <param name="pen">
          Объект <see cref="T:System.Drawing.Pen" />, определяющий цвет, ширину и стиль сектора.</param>
        <param name="x">Координата X верхнего левого угла ограничивающего прямоугольника, определяющего эллипс, частью которого является сектор.</param>
        <param name="y">Координата Y верхнего левого угла ограничивающего прямоугольника, определяющего эллипс, частью которого является сектор.</param>
        <param name="width">Ширина ограничивающего прямоугольника, определяющего эллипс, частью которого является данный сектор.</param>
        <param name="height">Высота ограничивающего прямоугольника, определяющего эллипс, частью которого является данный сектор.</param>
        <param name="startAngle">Угол (в градусах), который измеряется по часовой стрелке, начиная от оси X и заканчивая первой стороной сектора.</param>
        <param name="sweepAngle">Угол (в градусах), который измеряется по часовой стрелке, начиная от значения параметра <c>startAngle</c> и заканчивая второй стороной сектора.</param>
        <summary>Рисует сектор, определяемый эллипсом, который задан парой координат, шириной, высотой и двумя радиальными линиями.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Этот метод рисует сектор, определяемый дугой эллипса и двумя радиальными линиями, которые пересекаются с конечными точками дуги. Эллипс определяется ограничивающим прямоугольником, описываемого `x`, `y`, `width`, и `height` параметров. Сектор состоит из двумя радиальными линиями, определяется `startAngle` и `sweepAngle` параметры и дуги между пересечения этих линий с эллипсом.  
  
 Если `sweepAngle` параметра больше 360 или меньше-360 градусов, он интерпретируется как если бы он был 360 или -360 градусов, соответственно.  
  
   
  
## Examples  
 Следующий пример кода предназначен для работы с Windows Forms, и для него необходим <xref:System.Windows.Forms.PaintEventArgs> `e`, который является параметром <xref:System.Windows.Forms.Control.Paint> обработчика событий. Код выполняет следующие действия.  
  
-   Создает черного пера.  
  
-   Определяет положение и размер прямоугольника, ограничивающего полный эллипс.  
  
-   Определяет углы, с которой начинается рисования (относительно оси x) и через которую (отсчитываются по часовой стрелке).  
  
-   Рисует сектор на экране.  
  
 [!code-cpp[System.Drawing.ClassicGraphicsExamples2#76](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples2/CPP/form1.cpp#76)]
 [!code-csharp[System.Drawing.ClassicGraphicsExamples2#76](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples2/CS/form1.cs#76)]
 [!code-vb[System.Drawing.ClassicGraphicsExamples2#76](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples2/VB/form1.vb#76)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          Свойство <paramref name="pen" /> имеет значение <see langword="null" />.</exception>
      </Docs>
    </Member>
    <MemberGroup MemberName="DrawPolygon">
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Рисует многоугольник, определяемый массивом структур <see cref="T:System.Drawing.Point" />.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="DrawPolygon">
      <MemberSignature Language="C#" Value="public void DrawPolygon (System.Drawing.Pen pen, System.Drawing.Point[] points);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void DrawPolygon(class System.Drawing.Pen pen, valuetype System.Drawing.Point[] points) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.DrawPolygon(System.Drawing.Pen,System.Drawing.Point[])" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void DrawPolygon(System::Drawing::Pen ^ pen, cli::array &lt;System::Drawing::Point&gt; ^ points);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="pen" Type="System.Drawing.Pen" />
        <Parameter Name="points" Type="System.Drawing.Point[]" />
      </Parameters>
      <Docs>
        <param name="pen">
          Структура <see cref="T:System.Drawing.Pen" />, определяющая цвет, ширину и стиль многоугольника.</param>
        <param name="points">Массив структур <see cref="T:System.Drawing.Point" />, которые представляют вершины многоугольника.</param>
        <summary>Рисует многоугольник, определяемый массивом структур <see cref="T:System.Drawing.Point" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Каждая пара из двух последовательных точек в массиве указывает сторону многоугольника. Кроме того Если последняя и первая точка массива не совпадают, они определяют последнюю сторону многоугольника.  
  
   
  
## Examples  
 Следующий пример кода предназначен для работы с Windows Forms, и для него необходим <xref:System.Windows.Forms.PaintEventArgs> `e`, который является параметром <xref:System.Windows.Forms.Control.Paint> обработчика событий. Код выполняет следующие действия.  
  
-   Создает черного пера.  
  
-   Создает массив из семи точек для вершин многоугольника.  
  
-   Выводит на экран многоугольника.  
  
 [!code-cpp[System.Drawing.ClassicGraphicsExamples2#78](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples2/CPP/form1.cpp#78)]
 [!code-csharp[System.Drawing.ClassicGraphicsExamples2#78](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples2/CS/form1.cs#78)]
 [!code-vb[System.Drawing.ClassicGraphicsExamples2#78](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples2/VB/form1.vb#78)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          Свойство <paramref name="pen" /> имеет значение <see langword="null" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="DrawPolygon">
      <MemberSignature Language="C#" Value="public void DrawPolygon (System.Drawing.Pen pen, System.Drawing.PointF[] points);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void DrawPolygon(class System.Drawing.Pen pen, valuetype System.Drawing.PointF[] points) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.DrawPolygon(System.Drawing.Pen,System.Drawing.PointF[])" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void DrawPolygon(System::Drawing::Pen ^ pen, cli::array &lt;System::Drawing::PointF&gt; ^ points);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="pen" Type="System.Drawing.Pen" />
        <Parameter Name="points" Type="System.Drawing.PointF[]" />
      </Parameters>
      <Docs>
        <param name="pen">
          Структура <see cref="T:System.Drawing.Pen" />, определяющая цвет, ширину и стиль многоугольника.</param>
        <param name="points">Массив структур <see cref="T:System.Drawing.PointF" />, которые представляют вершины многоугольника.</param>
        <summary>Рисует многоугольник, определяемый массивом структур <see cref="T:System.Drawing.PointF" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Каждая пара из двух последовательных точек в массиве указывает сторону многоугольника. Кроме того Если последняя и первой точки массива не совпадают, они определяют последнюю сторону многоугольника.  
  
   
  
## Examples  
 Следующий пример кода предназначен для работы с Windows Forms, и для него необходим <xref:System.Windows.Forms.PaintEventArgs> `e`, который является параметром <xref:System.Windows.Forms.Control.Paint> обработчика событий. Код выполняет следующие действия.  
  
-   Создает черного пера.  
  
-   Создает массив из семи точек для вершин многоугольника.  
  
-   Выводит на экран многоугольника.  
  
 [!code-cpp[System.Drawing.ClassicGraphicsExamples2#77](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples2/CPP/form1.cpp#77)]
 [!code-csharp[System.Drawing.ClassicGraphicsExamples2#77](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples2/CS/form1.cs#77)]
 [!code-vb[System.Drawing.ClassicGraphicsExamples2#77](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples2/VB/form1.vb#77)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          Свойство <paramref name="pen" /> имеет значение <see langword="null" />.  
  
 - или -  
  
 Свойство <paramref name="points" /> имеет значение <see langword="null" />.</exception>
      </Docs>
    </Member>
    <MemberGroup MemberName="DrawRectangle">
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Рисует прямоугольник, определяемый парой координат, шириной и высотой.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="DrawRectangle">
      <MemberSignature Language="C#" Value="public void DrawRectangle (System.Drawing.Pen pen, System.Drawing.Rectangle rect);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void DrawRectangle(class System.Drawing.Pen pen, valuetype System.Drawing.Rectangle rect) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.DrawRectangle(System.Drawing.Pen,System.Drawing.Rectangle)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void DrawRectangle(System::Drawing::Pen ^ pen, System::Drawing::Rectangle rect);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="pen" Type="System.Drawing.Pen" />
        <Parameter Name="rect" Type="System.Drawing.Rectangle" />
      </Parameters>
      <Docs>
        <param name="pen">Структура <see cref="T:System.Drawing.Pen" />, определяющая цвет, ширину и стиль прямоугольника.</param>
        <param name="rect">Структура <see cref="T:System.Drawing.Rectangle" />, представляющая прямоугольник для рисования.</param>
        <summary>Рисует прямоугольник, определяемый структурой <see cref="T:System.Drawing.Rectangle" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Дополнительные сведения о создании <xref:System.Drawing.RectangleF>, в разделе <xref:System.Drawing.Graphics.DrawRectangles%28System.Drawing.Pen%2CSystem.Drawing.RectangleF%5B%5D%29>.  
  
   
  
## Examples  
 Следующий пример кода предназначен для работы с Windows Forms, и для него необходим <xref:System.Windows.Forms.PaintEventArgs> `e`, который является параметром <xref:System.Windows.Forms.Control.Paint> обработчика событий. Код выполняет следующие действия.  
  
-   Создает черного пера.  
  
-   Создает прямоугольник.  
  
-   Рисует прямоугольник на экране.  
  
 [!code-cpp[System.Drawing.ClassicGraphicsExamples2#79](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples2/CPP/form1.cpp#79)]
 [!code-csharp[System.Drawing.ClassicGraphicsExamples2#79](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples2/CS/form1.cs#79)]
 [!code-vb[System.Drawing.ClassicGraphicsExamples2#79](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples2/VB/form1.vb#79)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          Свойство <paramref name="pen" /> имеет значение <see langword="null" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="DrawRectangle">
      <MemberSignature Language="C#" Value="public void DrawRectangle (System.Drawing.Pen pen, int x, int y, int width, int height);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void DrawRectangle(class System.Drawing.Pen pen, int32 x, int32 y, int32 width, int32 height) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.DrawRectangle(System.Drawing.Pen,System.Int32,System.Int32,System.Int32,System.Int32)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void DrawRectangle(System::Drawing::Pen ^ pen, int x, int y, int width, int height);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="pen" Type="System.Drawing.Pen" />
        <Parameter Name="x" Type="System.Int32" />
        <Parameter Name="y" Type="System.Int32" />
        <Parameter Name="width" Type="System.Int32" />
        <Parameter Name="height" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="pen">
          Структура <see cref="T:System.Drawing.Pen" />, определяющая цвет, ширину и стиль прямоугольника.</param>
        <param name="x">Координата X верхнего левого угла прямоугольника для рисования.</param>
        <param name="y">Координата Y верхнего левого угла прямоугольника для рисования.</param>
        <param name="width">Ширина прямоугольника для рисования.</param>
        <param name="height">Высота прямоугольника для рисования.</param>
        <summary>Рисует прямоугольник, определяемый парой координат, шириной и высотой.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Дополнительные сведения о создании <xref:System.Drawing.RectangleF>, в разделе <xref:System.Drawing.Graphics.DrawRectangles%28System.Drawing.Pen%2CSystem.Drawing.RectangleF%5B%5D%29>.  
  
   
  
## Examples  
 Следующий пример кода предназначен для работы с Windows Forms, и для него необходим <xref:System.Windows.Forms.PaintEventArgs> `e`, который является параметром <xref:System.Windows.Forms.Control.Paint> обработчика событий. Код выполняет следующие действия.  
  
-   Создает черного пера.  
  
-   Определяет положение и размер прямоугольника.  
  
-   Рисует прямоугольник на экране.  
  
 [!code-cpp[System.Drawing.ClassicGraphicsExamples2#80](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples2/CPP/form1.cpp#80)]
 [!code-csharp[System.Drawing.ClassicGraphicsExamples2#80](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples2/CS/form1.cs#80)]
 [!code-vb[System.Drawing.ClassicGraphicsExamples2#80](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples2/VB/form1.vb#80)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          Свойство <paramref name="pen" /> имеет значение <see langword="null" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="DrawRectangle">
      <MemberSignature Language="C#" Value="public void DrawRectangle (System.Drawing.Pen pen, float x, float y, float width, float height);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void DrawRectangle(class System.Drawing.Pen pen, float32 x, float32 y, float32 width, float32 height) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.DrawRectangle(System.Drawing.Pen,System.Single,System.Single,System.Single,System.Single)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void DrawRectangle(System::Drawing::Pen ^ pen, float x, float y, float width, float height);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="pen" Type="System.Drawing.Pen" />
        <Parameter Name="x" Type="System.Single" />
        <Parameter Name="y" Type="System.Single" />
        <Parameter Name="width" Type="System.Single" />
        <Parameter Name="height" Type="System.Single" />
      </Parameters>
      <Docs>
        <param name="pen">Структура <see cref="T:System.Drawing.Pen" />, определяющая цвет, ширину и стиль прямоугольника.</param>
        <param name="x">Координата X верхнего левого угла прямоугольника для рисования.</param>
        <param name="y">Координата Y верхнего левого угла прямоугольника для рисования.</param>
        <param name="width">Ширина прямоугольника для рисования.</param>
        <param name="height">Высота прямоугольника для рисования.</param>
        <summary>Рисует прямоугольник, определяемый парой координат, шириной и высотой.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Дополнительные сведения о создании <xref:System.Drawing.RectangleF>, в разделе <xref:System.Drawing.Graphics.DrawRectangles%28System.Drawing.Pen%2CSystem.Drawing.RectangleF%5B%5D%29>.  
  
   
  
## Examples  
 Следующий пример кода предназначен для работы с Windows Forms, и для него необходим <xref:System.Windows.Forms.PaintEventArgs> `e`, который является параметром <xref:System.Windows.Forms.Control.Paint> обработчика событий. Код выполняет следующие действия.  
  
-   Создает черного пера.  
  
-   Определяет положение и размер прямоугольника.  
  
-   Рисует прямоугольник на экране.  
  
 [!code-cpp[System.Drawing.ClassicGraphicsExamples2#81](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples2/CPP/form1.cpp#81)]
 [!code-csharp[System.Drawing.ClassicGraphicsExamples2#81](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples2/CS/form1.cs#81)]
 [!code-vb[System.Drawing.ClassicGraphicsExamples2#81](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples2/VB/form1.vb#81)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          Свойство <paramref name="pen" /> имеет значение <see langword="null" />.</exception>
      </Docs>
    </Member>
    <MemberGroup MemberName="DrawRectangles">
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Рисует набор прямоугольников, определяемых структурами <see cref="T:System.Drawing.Rectangle" />.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="DrawRectangles">
      <MemberSignature Language="C#" Value="public void DrawRectangles (System.Drawing.Pen pen, System.Drawing.Rectangle[] rects);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void DrawRectangles(class System.Drawing.Pen pen, valuetype System.Drawing.Rectangle[] rects) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.DrawRectangles(System.Drawing.Pen,System.Drawing.Rectangle[])" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void DrawRectangles(System::Drawing::Pen ^ pen, cli::array &lt;System::Drawing::Rectangle&gt; ^ rects);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="pen" Type="System.Drawing.Pen" />
        <Parameter Name="rects" Type="System.Drawing.Rectangle[]" />
      </Parameters>
      <Docs>
        <param name="pen">
          Объект <see cref="T:System.Drawing.Pen" />, определяющий цвет, ширину и стиль контуров прямоугольников.</param>
        <param name="rects">Массив структур <see cref="T:System.Drawing.Rectangle" />, которые представляют прямоугольники для рисования.</param>
        <summary>Рисует набор прямоугольников, определяемых структурами <see cref="T:System.Drawing.Rectangle" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 Следующий пример кода предназначен для работы с Windows Forms, и для него необходим <xref:System.Windows.Forms.PaintEventArgs> `e`, который является параметром <xref:System.Windows.Forms.Control.Paint> обработчика событий. Код выполняет следующие действия.  
  
-   Создает черного пера.  
  
-   Создает массив из трех прямоугольников.  
  
-   Рисование прямоугольников на экране.  
  
 [!code-cpp[System.Drawing.ClassicGraphicsExamples2#82](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples2/CPP/form1.cpp#82)]
 [!code-csharp[System.Drawing.ClassicGraphicsExamples2#82](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples2/CS/form1.cs#82)]
 [!code-vb[System.Drawing.ClassicGraphicsExamples2#82](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples2/VB/form1.vb#82)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          Свойство <paramref name="pen" /> имеет значение <see langword="null" />.  
  
 - или -  
  
 Свойство <paramref name="rects" /> имеет значение <see langword="null" />.</exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="rects" /> представляет собой массив нулевой длины.</exception>
      </Docs>
    </Member>
    <Member MemberName="DrawRectangles">
      <MemberSignature Language="C#" Value="public void DrawRectangles (System.Drawing.Pen pen, System.Drawing.RectangleF[] rects);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void DrawRectangles(class System.Drawing.Pen pen, valuetype System.Drawing.RectangleF[] rects) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.DrawRectangles(System.Drawing.Pen,System.Drawing.RectangleF[])" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void DrawRectangles(System::Drawing::Pen ^ pen, cli::array &lt;System::Drawing::RectangleF&gt; ^ rects);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="pen" Type="System.Drawing.Pen" />
        <Parameter Name="rects" Type="System.Drawing.RectangleF[]" />
      </Parameters>
      <Docs>
        <param name="pen">
          Объект <see cref="T:System.Drawing.Pen" />, определяющий цвет, ширину и стиль контуров прямоугольников.</param>
        <param name="rects">Массив структур <see cref="T:System.Drawing.RectangleF" />, которые представляют прямоугольники для рисования.</param>
        <summary>Рисует набор прямоугольников, определяемых структурами <see cref="T:System.Drawing.RectangleF" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 Следующий пример кода предназначен для работы с Windows Forms, и для него необходим <xref:System.Windows.Forms.PaintEventArgs> `e`, который является параметром <xref:System.Windows.Forms.Control.Paint> обработчика событий. Код выполняет следующие действия.  
  
-   Создает черного пера.  
  
-   Создает массив из трех прямоугольников.  
  
-   Рисование прямоугольников на экране.  
  
 [!code-cpp[System.Drawing.ClassicGraphicsExamples2#83](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples2/CPP/form1.cpp#83)]
 [!code-csharp[System.Drawing.ClassicGraphicsExamples2#83](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples2/CS/form1.cs#83)]
 [!code-vb[System.Drawing.ClassicGraphicsExamples2#83](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples2/VB/form1.vb#83)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          Свойство <paramref name="pen" /> имеет значение <see langword="null" />.  
  
 - или -  
  
 Свойство <paramref name="rects" /> имеет значение <see langword="null" />.</exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="rects" /> представляет собой массив нулевой длины.</exception>
      </Docs>
    </Member>
    <MemberGroup MemberName="DrawString">
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Создает заданную текстовую строку в указанном месте с помощью заданных объектов <see cref="T:System.Drawing.Brush" /> и <see cref="T:System.Drawing.Font" />.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="DrawString">
      <MemberSignature Language="C#" Value="public void DrawString (string s, System.Drawing.Font font, System.Drawing.Brush brush, System.Drawing.PointF point);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void DrawString(string s, class System.Drawing.Font font, class System.Drawing.Brush brush, valuetype System.Drawing.PointF point) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.DrawString(System.String,System.Drawing.Font,System.Drawing.Brush,System.Drawing.PointF)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void DrawString(System::String ^ s, System::Drawing::Font ^ font, System::Drawing::Brush ^ brush, System::Drawing::PointF point);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="s" Type="System.String" />
        <Parameter Name="font" Type="System.Drawing.Font" />
        <Parameter Name="brush" Type="System.Drawing.Brush" />
        <Parameter Name="point" Type="System.Drawing.PointF" />
      </Parameters>
      <Docs>
        <param name="s">Строка для рисования.</param>
        <param name="font">
          Объект <see cref="T:System.Drawing.Font" />, определяющий формат текста строки.</param>
        <param name="brush">
          Объект <see cref="T:System.Drawing.Brush" />, определяющий цвет и текстуру создаваемого текста.</param>
        <param name="point">
          Структура <see cref="T:System.Drawing.PointF" />, задающая верхний левый угол создаваемого текста.</param>
        <summary>Создает заданную текстовую строку в указанном месте с помощью заданных объектов <see cref="T:System.Drawing.Brush" /> и <see cref="T:System.Drawing.Font" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 Следующий пример кода предназначен для работы с Windows Forms, и для него необходим <xref:System.Windows.Forms.PaintEventArgs> `e`, который является параметром <xref:System.Windows.Forms.Control.Paint> обработчика событий. Код выполняет следующие действия.  
  
-   Создает текстовую строку для отображения.  
  
-   Определяет в качестве шрифта Arial (16пт).  
  
-   Создает сплошной, черный кисть рисования с.  
  
-   Создает точку для верхнего левого угла, в которой будет создан текст.  
  
-   Отображает строку на экран с помощью шрифт, кисть и конечную точку.  
  
 [!code-cpp[System.Drawing.ClassicGraphicsExamples2#84](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples2/CPP/form1.cpp#84)]
 [!code-csharp[System.Drawing.ClassicGraphicsExamples2#84](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples2/CS/form1.cs#84)]
 [!code-vb[System.Drawing.ClassicGraphicsExamples2#84](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples2/VB/form1.vb#84)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          Свойство <paramref name="brush" /> имеет значение <see langword="null" />.  
  
 - или -  
  
 Свойство <paramref name="s" /> имеет значение <see langword="null" />.</exception>
        <altmember cref="M:System.Windows.Forms.TextRenderer.DrawText(System.Drawing.IDeviceContext,System.String,System.Drawing.Font,System.Drawing.Point,System.Drawing.Color)" />
      </Docs>
    </Member>
    <Member MemberName="DrawString">
      <MemberSignature Language="C#" Value="public void DrawString (string s, System.Drawing.Font font, System.Drawing.Brush brush, System.Drawing.RectangleF layoutRectangle);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void DrawString(string s, class System.Drawing.Font font, class System.Drawing.Brush brush, valuetype System.Drawing.RectangleF layoutRectangle) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.DrawString(System.String,System.Drawing.Font,System.Drawing.Brush,System.Drawing.RectangleF)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void DrawString(System::String ^ s, System::Drawing::Font ^ font, System::Drawing::Brush ^ brush, System::Drawing::RectangleF layoutRectangle);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="s" Type="System.String" />
        <Parameter Name="font" Type="System.Drawing.Font" />
        <Parameter Name="brush" Type="System.Drawing.Brush" />
        <Parameter Name="layoutRectangle" Type="System.Drawing.RectangleF" />
      </Parameters>
      <Docs>
        <param name="s">Строка для рисования.</param>
        <param name="font">
          Объект <see cref="T:System.Drawing.Font" />, определяющий формат текста строки.</param>
        <param name="brush">
          Объект <see cref="T:System.Drawing.Brush" />, определяющий цвет и текстуру создаваемого текста.</param>
        <param name="layoutRectangle">
          Структура <see cref="T:System.Drawing.RectangleF" />, которая задает расположение создаваемого текста.</param>
        <summary>Создает заданную текстовую строку в указанном прямоугольнике с помощью заданных объектов <see cref="T:System.Drawing.Brush" /> и <see cref="T:System.Drawing.Font" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Текст, определяемый `s` параметра отображается внутри прямоугольника, определяемого `layoutRectangle` параметра. Если текст не помещается в прямоугольнике, оно усекается до ближайшего слова. Для дальнейших операций как строка отображается внутри прямоугольника использование <xref:System.Drawing.Graphics.DrawString%2A> перегрузку, принимающую <xref:System.Drawing.StringFormat>.  
  
   
  
## Examples  
 Следующий пример кода предназначен для работы с Windows Forms, и для него необходим <xref:System.Windows.Forms.PaintEventArgs> `e`, который является параметром <xref:System.Windows.Forms.Control.Paint> обработчика событий. Код выполняет следующие действия.  
  
-   Создает текстовую строку для отображения.  
  
-   Определяет в качестве шрифта Arial (16пт).  
  
-   Создает сплошной, черный кисть рисования с.  
  
-   Создает прямоугольник, в котором необходимо отрисовать текст.  
  
-   Рисует прямоугольник на экране.  
  
-   Отображает строку на экран с помощью шрифта, кисти и прямоугольника назначения.  
  
 [!code-cpp[System.Drawing.ClassicGraphicsExamples2#86](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples2/CPP/form1.cpp#86)]
 [!code-csharp[System.Drawing.ClassicGraphicsExamples2#86](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples2/CS/form1.cs#86)]
 [!code-vb[System.Drawing.ClassicGraphicsExamples2#86](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples2/VB/form1.vb#86)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          Свойство <paramref name="brush" /> имеет значение <see langword="null" />.  
  
 - или -  
  
 Свойство <paramref name="s" /> имеет значение <see langword="null" />.</exception>
        <altmember cref="M:System.Windows.Forms.TextRenderer.DrawText(System.Drawing.IDeviceContext,System.String,System.Drawing.Font,System.Drawing.Point,System.Drawing.Color)" />
      </Docs>
    </Member>
    <Member MemberName="DrawString">
      <MemberSignature Language="C#" Value="public void DrawString (string s, System.Drawing.Font font, System.Drawing.Brush brush, System.Drawing.PointF point, System.Drawing.StringFormat format);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void DrawString(string s, class System.Drawing.Font font, class System.Drawing.Brush brush, valuetype System.Drawing.PointF point, class System.Drawing.StringFormat format) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.DrawString(System.String,System.Drawing.Font,System.Drawing.Brush,System.Drawing.PointF,System.Drawing.StringFormat)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void DrawString(System::String ^ s, System::Drawing::Font ^ font, System::Drawing::Brush ^ brush, System::Drawing::PointF point, System::Drawing::StringFormat ^ format);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="s" Type="System.String" />
        <Parameter Name="font" Type="System.Drawing.Font" />
        <Parameter Name="brush" Type="System.Drawing.Brush" />
        <Parameter Name="point" Type="System.Drawing.PointF" />
        <Parameter Name="format" Type="System.Drawing.StringFormat" />
      </Parameters>
      <Docs>
        <param name="s">Строка для рисования.</param>
        <param name="font">
          Объект <see cref="T:System.Drawing.Font" />, определяющий формат текста строки.</param>
        <param name="brush">
          Объект <see cref="T:System.Drawing.Brush" />, определяющий цвет и текстуру создаваемого текста.</param>
        <param name="point">
          Структура <see cref="T:System.Drawing.PointF" />, задающая верхний левый угол создаваемого текста.</param>
        <param name="format">
          Объект <see cref="T:System.Drawing.StringFormat" />, определяющий атрибуты форматирования, такие как межстрочный интервал и выравнивание, которые применяются к создаваемому тексту.</param>
        <summary>Создает заданную текстовую строку в указанном месте с помощью заданных объектов <see cref="T:System.Drawing.Brush" /> и <see cref="T:System.Drawing.Font" />, используя атрибуты форматирования заданного формата <see cref="T:System.Drawing.StringFormat" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 Следующий пример кода предназначен для работы с Windows Forms, и для него необходим <xref:System.Windows.Forms.PaintEventArgs> `e`, который является параметром <xref:System.Windows.Forms.Control.Paint> обработчика событий. Код выполняет следующие действия.  
  
-   Создает текстовую строку для отображения.  
  
-   Определяет в качестве шрифта Arial (16пт).  
  
-   Создает сплошной, черный кисть рисования с.  
  
-   Создает точку для верхнего левого угла, в которой будет создан текст.  
  
-   Задает формат вертикальной строки.  
  
-   Выводит на экран, с использованием шрифта, кисть, конечную точку и формат строки.  
  
 [!code-cpp[System.Drawing.ClassicGraphicsExamples2#85](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples2/CPP/form1.cpp#85)]
 [!code-csharp[System.Drawing.ClassicGraphicsExamples2#85](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples2/CS/form1.cs#85)]
 [!code-vb[System.Drawing.ClassicGraphicsExamples2#85](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples2/VB/form1.vb#85)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          Свойство <paramref name="brush" /> имеет значение <see langword="null" />.  
  
 - или -  
  
 Свойство <paramref name="s" /> имеет значение <see langword="null" />.</exception>
        <altmember cref="M:System.Windows.Forms.TextRenderer.DrawText(System.Drawing.IDeviceContext,System.String,System.Drawing.Font,System.Drawing.Point,System.Drawing.Color)" />
      </Docs>
    </Member>
    <Member MemberName="DrawString">
      <MemberSignature Language="C#" Value="public void DrawString (string s, System.Drawing.Font font, System.Drawing.Brush brush, System.Drawing.RectangleF layoutRectangle, System.Drawing.StringFormat format);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void DrawString(string s, class System.Drawing.Font font, class System.Drawing.Brush brush, valuetype System.Drawing.RectangleF layoutRectangle, class System.Drawing.StringFormat format) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.DrawString(System.String,System.Drawing.Font,System.Drawing.Brush,System.Drawing.RectangleF,System.Drawing.StringFormat)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void DrawString(System::String ^ s, System::Drawing::Font ^ font, System::Drawing::Brush ^ brush, System::Drawing::RectangleF layoutRectangle, System::Drawing::StringFormat ^ format);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="s" Type="System.String" />
        <Parameter Name="font" Type="System.Drawing.Font" />
        <Parameter Name="brush" Type="System.Drawing.Brush" />
        <Parameter Name="layoutRectangle" Type="System.Drawing.RectangleF" />
        <Parameter Name="format" Type="System.Drawing.StringFormat" />
      </Parameters>
      <Docs>
        <param name="s">Строка для рисования.</param>
        <param name="font">
          Объект <see cref="T:System.Drawing.Font" />, определяющий формат текста строки.</param>
        <param name="brush">
          Объект <see cref="T:System.Drawing.Brush" />, определяющий цвет и текстуру создаваемого текста.</param>
        <param name="layoutRectangle">
          Структура <see cref="T:System.Drawing.RectangleF" />, которая задает расположение создаваемого текста.</param>
        <param name="format">
          Объект <see cref="T:System.Drawing.StringFormat" />, определяющий атрибуты форматирования, такие как межстрочный интервал и выравнивание, которые применяются к создаваемому тексту.</param>
        <summary>Создает заданную текстовую строку в указанном прямоугольнике с помощью заданных объектов <see cref="T:System.Drawing.Brush" /> и <see cref="T:System.Drawing.Font" />, используя атрибуты форматирования заданного формата <see cref="T:System.Drawing.StringFormat" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Текст, определяемый `s` параметра отображается внутри прямоугольника, определяемого `layoutRectangle` параметра. Если текст не помещается в прямоугольнике, обрезается до ближайшего слова, если не указано иначе с `format` параметра.  
  
   
  
## Examples  
 Следующий пример кода предназначен для работы с Windows Forms, и для него необходим <xref:System.Windows.Forms.PaintEventArgs> `e`, который является параметром <xref:System.Windows.Forms.Control.Paint> обработчика событий. Код выполняет следующие действия.  
  
-   Создает текстовую строку для отображения.  
  
-   Определяет в качестве шрифта Arial (16пт).  
  
-   Создает сплошной, черный кисть рисования с.  
  
-   Создает прямоугольник, в котором необходимо отрисовать текст.  
  
-   Рисует прямоугольник на экране.  
  
-   Задает формат строки по центру прямоугольника.  
  
-   Отображает строку на экран с помощью шрифта, кисти и прямоугольника назначения.  
  
 [!code-cpp[System.Drawing.ClassicGraphicsExamples2#87](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples2/CPP/form1.cpp#87)]
 [!code-csharp[System.Drawing.ClassicGraphicsExamples2#87](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples2/CS/form1.cs#87)]
 [!code-vb[System.Drawing.ClassicGraphicsExamples2#87](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples2/VB/form1.vb#87)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          Свойство <paramref name="brush" /> имеет значение <see langword="null" />.  
  
 - или -  
  
 Свойство <paramref name="s" /> имеет значение <see langword="null" />.</exception>
        <altmember cref="M:System.Windows.Forms.TextRenderer.DrawText(System.Drawing.IDeviceContext,System.String,System.Drawing.Font,System.Drawing.Point,System.Drawing.Color)" />
      </Docs>
    </Member>
    <Member MemberName="DrawString">
      <MemberSignature Language="C#" Value="public void DrawString (string s, System.Drawing.Font font, System.Drawing.Brush brush, float x, float y);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void DrawString(string s, class System.Drawing.Font font, class System.Drawing.Brush brush, float32 x, float32 y) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.DrawString(System.String,System.Drawing.Font,System.Drawing.Brush,System.Single,System.Single)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void DrawString(System::String ^ s, System::Drawing::Font ^ font, System::Drawing::Brush ^ brush, float x, float y);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="s" Type="System.String" />
        <Parameter Name="font" Type="System.Drawing.Font" />
        <Parameter Name="brush" Type="System.Drawing.Brush" />
        <Parameter Name="x" Type="System.Single" />
        <Parameter Name="y" Type="System.Single" />
      </Parameters>
      <Docs>
        <param name="s">Строка для рисования.</param>
        <param name="font">
          Объект <see cref="T:System.Drawing.Font" />, определяющий формат текста строки.</param>
        <param name="brush">
          Объект <see cref="T:System.Drawing.Brush" />, определяющий цвет и текстуру создаваемого текста.</param>
        <param name="x">Координата X верхнего левого угла отображаемого текста.</param>
        <param name="y">Координата Y верхнего левого угла отображаемого текста.</param>
        <summary>Создает заданную текстовую строку в указанном месте с помощью заданных объектов <see cref="T:System.Drawing.Brush" /> и <see cref="T:System.Drawing.Font" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 Следующий пример кода предназначен для работы с Windows Forms, и для него необходим <xref:System.Windows.Forms.PaintEventArgs> `e`, который является параметром <xref:System.Windows.Forms.Control.Paint> обработчика событий. Код выполняет следующие действия.  
  
-   Создает текстовую строку для отображения.  
  
-   Определяет в качестве шрифта Arial (16пт).  
  
-   Создает сплошной кисти для рисования с черным.  
  
-   Создает точку для верхнего левого угла, в которой будет создан текст.  
  
-   Отображает строку на экран с помощью шрифт, кисть и конечную точку.  
  
 [!code-cpp[System.Drawing.ClassicGraphicsExamples2#88](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples2/CPP/form1.cpp#88)]
 [!code-csharp[System.Drawing.ClassicGraphicsExamples2#88](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples2/CS/form1.cs#88)]
 [!code-vb[System.Drawing.ClassicGraphicsExamples2#88](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples2/VB/form1.vb#88)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          Свойство <paramref name="brush" /> имеет значение <see langword="null" />.  
  
 - или -  
  
 Свойство <paramref name="s" /> имеет значение <see langword="null" />.</exception>
        <altmember cref="M:System.Windows.Forms.TextRenderer.DrawText(System.Drawing.IDeviceContext,System.String,System.Drawing.Font,System.Drawing.Point,System.Drawing.Color)" />
      </Docs>
    </Member>
    <Member MemberName="DrawString">
      <MemberSignature Language="C#" Value="public void DrawString (string s, System.Drawing.Font font, System.Drawing.Brush brush, float x, float y, System.Drawing.StringFormat format);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void DrawString(string s, class System.Drawing.Font font, class System.Drawing.Brush brush, float32 x, float32 y, class System.Drawing.StringFormat format) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.DrawString(System.String,System.Drawing.Font,System.Drawing.Brush,System.Single,System.Single,System.Drawing.StringFormat)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void DrawString(System::String ^ s, System::Drawing::Font ^ font, System::Drawing::Brush ^ brush, float x, float y, System::Drawing::StringFormat ^ format);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="s" Type="System.String" />
        <Parameter Name="font" Type="System.Drawing.Font" />
        <Parameter Name="brush" Type="System.Drawing.Brush" />
        <Parameter Name="x" Type="System.Single" />
        <Parameter Name="y" Type="System.Single" />
        <Parameter Name="format" Type="System.Drawing.StringFormat" />
      </Parameters>
      <Docs>
        <param name="s">Строка для рисования.</param>
        <param name="font">
          Объект <see cref="T:System.Drawing.Font" />, определяющий формат текста строки.</param>
        <param name="brush">
          Объект <see cref="T:System.Drawing.Brush" />, определяющий цвет и текстуру создаваемого текста.</param>
        <param name="x">Координата X верхнего левого угла отображаемого текста.</param>
        <param name="y">Координата Y верхнего левого угла отображаемого текста.</param>
        <param name="format">
          Объект <see cref="T:System.Drawing.StringFormat" />, определяющий атрибуты форматирования, такие как межстрочный интервал и выравнивание, которые применяются к создаваемому тексту.</param>
        <summary>Создает заданную текстовую строку в указанном месте с помощью заданных объектов <see cref="T:System.Drawing.Brush" /> и <see cref="T:System.Drawing.Font" />, используя атрибуты форматирования заданного формата <see cref="T:System.Drawing.StringFormat" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 Следующий пример кода предназначен для работы с Windows Forms, и для него необходим <xref:System.Windows.Forms.PaintEventArgs> `e`, который является параметром <xref:System.Windows.Forms.Control.Paint> обработчика событий. Код выполняет следующие действия.  
  
-   Создает текстовую строку для отображения.  
  
-   Определяет в качестве шрифта Arial (16пт).  
  
-   Создает сплошной, черный кисть рисования с.  
  
-   Создает координаты точки для верхнего левого угла, в которой будет создан текст.  
  
-   Задает формат строки вертикальный  
  
-   Выводит на экран, с использованием шрифта, кисть, конечную точку и формат строки.  
  
 [!code-cpp[System.Drawing.ClassicGraphicsExamples2#89](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples2/CPP/form1.cpp#89)]
 [!code-csharp[System.Drawing.ClassicGraphicsExamples2#89](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples2/CS/form1.cs#89)]
 [!code-vb[System.Drawing.ClassicGraphicsExamples2#89](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples2/VB/form1.vb#89)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          Свойство <paramref name="brush" /> имеет значение <see langword="null" />.  
  
 - или -  
  
 Свойство <paramref name="s" /> имеет значение <see langword="null" />.</exception>
        <altmember cref="M:System.Windows.Forms.TextRenderer.DrawText(System.Drawing.IDeviceContext,System.String,System.Drawing.Font,System.Drawing.Point,System.Drawing.Color)" />
      </Docs>
    </Member>
    <Member MemberName="EndContainer">
      <MemberSignature Language="C#" Value="public void EndContainer (System.Drawing.Drawing2D.GraphicsContainer container);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void EndContainer(class System.Drawing.Drawing2D.GraphicsContainer container) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.EndContainer(System.Drawing.Drawing2D.GraphicsContainer)" />
      <MemberSignature Language="VB.NET" Value="Public Sub EndContainer (container As GraphicsContainer)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void EndContainer(System::Drawing::Drawing2D::GraphicsContainer ^ container);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="container" Type="System.Drawing.Drawing2D.GraphicsContainer" />
      </Parameters>
      <Docs>
        <param name="container">
          Объект <see cref="T:System.Drawing.Drawing2D.GraphicsContainer" />, представляющий контейнер, восстанавливаемый этим методом.</param>
        <summary>Закрывает текущий графический контейнер и восстанавливает состояние данного объекта <see cref="T:System.Drawing.Graphics" />, которое было сохранено при вызове метода <see cref="M:System.Drawing.Graphics.BeginContainer" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Этот метод используется с <xref:System.Drawing.Graphics.BeginContainer%2A> метод для создания вложенных графических контейнеров. Графические контейнеры сохраняют состояние графики, например преобразования, отсеченной области и свойства отображения.  
  
 При вызове <xref:System.Drawing.Graphics.BeginContainer%2A> метод <xref:System.Drawing.Graphics>, информационный блок, содержащий состояние объекта <xref:System.Drawing.Graphics> помещается в стек. <xref:System.Drawing.Graphics.BeginContainer%2A> Возвращает метод <xref:System.Drawing.Drawing2D.GraphicsContainer> , идентифицирующий этот блок сведений. При передаче определяющего объекта <xref:System.Drawing.Graphics.EndContainer%2A> метод, блок данных удаляется из стека и используется для восстановления <xref:System.Drawing.Graphics> в состояние на момент <xref:System.Drawing.Graphics.BeginContainer%2A> вызова метода.  
  
 Контейнеры могут быть вложенными; то есть, можно вызвать <xref:System.Drawing.Graphics.BeginContainer%2A> метода несколько раз перед вызовом метода <xref:System.Drawing.Graphics.EndContainer%2A> метод. Каждый раз при вызове <xref:System.Drawing.Graphics.BeginContainer%2A> , метод информационный блок помещается в стек, и вы получаете <xref:System.Drawing.Drawing2D.GraphicsContainer> для блока сведений. При передаче одного из этих объектов <xref:System.Drawing.Graphics.EndContainer%2A> метода <xref:System.Drawing.Graphics> возвращается в состояние на момент <xref:System.Drawing.Graphics.BeginContainer%2A> вызов метода, который возвращен данный <xref:System.Drawing.Drawing2D.GraphicsContainer>. Блок данных помещается в стек, который <xref:System.Drawing.Graphics.BeginContainer%2A> вызова метода удаляется из стека, а все информационные блоки, помещенные в стек после <xref:System.Drawing.Graphics.BeginContainer%2A> вызов метода также удаляются.  
  
 Вызовы <xref:System.Drawing.Graphics.Save%2A> метод информационные блоки помещаются в тот же стек, что и при вызове <xref:System.Drawing.Graphics.BeginContainer%2A> метода. Так же, как <xref:System.Drawing.Graphics.EndContainer%2A> вызова метода объединяется с <xref:System.Drawing.Graphics.BeginContainer%2A> вызов метода <xref:System.Drawing.Graphics.Restore%2A> вызова метода объединяется с <xref:System.Drawing.Graphics.Save%2A> вызова метода.  
  
 При вызове <xref:System.Drawing.Graphics.EndContainer%2A> метод, все блоки сведения помещаются в стек (по <xref:System.Drawing.Graphics.Save%2A> метода или с помощью <xref:System.Drawing.Graphics.BeginContainer%2A> метод) после соответствующего вызова <xref:System.Drawing.Graphics.BeginContainer%2A> метод удаляются из стека. Аналогично, при вызове <xref:System.Drawing.Graphics.Restore%2A> метод, все блоки сведения помещаются в стек (по <xref:System.Drawing.Graphics.Save%2A> метод или <xref:System.Drawing.Graphics.BeginContainer%2A> метод) после соответствующего вызова <xref:System.Drawing.Graphics.Save%2A> метод удаляются из стека.  
  
   
  
## Examples  
 Следующий пример кода предназначен для работы с Windows Forms, и для него необходим <xref:System.Windows.Forms.PaintEventArgs> `e`, который является параметром <xref:System.Windows.Forms.Control.Paint> обработчика событий. Код выполняет следующие действия.  
  
-   Открывает новый графический контейнер и сохраняет предыдущий.  
  
-   Переводит универсальные координаты в контейнере.  
  
-   Заполняет красный прямоугольник (преобразовать координаты) нового контейнера.  
  
-   Закрывает новый контейнер и восстанавливает сохраненный.  
  
-   Выполняет заливку зеленого прямоугольника сохраненного контейнера (в его непреобразованных координатах).  
  
 Результатом является зеленый прямоугольник, который перекрывает красный прямоугольник такого же размера.  
  
 [!code-cpp[System.Drawing.ClassicGraphicsExamples2#90](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples2/CPP/form1.cpp#90)]
 [!code-csharp[System.Drawing.ClassicGraphicsExamples2#90](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples2/CS/form1.cs#90)]
 [!code-vb[System.Drawing.ClassicGraphicsExamples2#90](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples2/VB/form1.vb#90)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="EnumerateMetafile">
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Отправляет записи указанного объекта <see cref="T:System.Drawing.Imaging.Metafile" /> по одной записи за раз в метод обратного вызова, который отображает их в заданной точке.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="EnumerateMetafile">
      <MemberSignature Language="C#" Value="public void EnumerateMetafile (System.Drawing.Imaging.Metafile metafile, System.Drawing.Point destPoint, System.Drawing.Graphics.EnumerateMetafileProc callback);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void EnumerateMetafile(class System.Drawing.Imaging.Metafile metafile, valuetype System.Drawing.Point destPoint, class System.Drawing.Graphics/EnumerateMetafileProc callback) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.EnumerateMetafile(System.Drawing.Imaging.Metafile,System.Drawing.Point,System.Drawing.Graphics.EnumerateMetafileProc)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void EnumerateMetafile(System::Drawing::Imaging::Metafile ^ metafile, System::Drawing::Point destPoint, System::Drawing::Graphics::EnumerateMetafileProc ^ callback);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="metafile" Type="System.Drawing.Imaging.Metafile" />
        <Parameter Name="destPoint" Type="System.Drawing.Point" />
        <Parameter Name="callback" Type="System.Drawing.Graphics+EnumerateMetafileProc" />
      </Parameters>
      <Docs>
        <param name="metafile">
          Объект <see cref="T:System.Drawing.Imaging.Metafile" /> для перечисления. </param>
        <param name="destPoint">
          Структура <see cref="T:System.Drawing.Point" />, задающая положение верхнего левого угла отображаемого метафайла.</param>
        <param name="callback">
          Делегат <see cref="T:System.Drawing.Graphics.EnumerateMetafileProc" />, задающий метод, в который отправляются записи метафайлов.</param>
        <summary>Отправляет записи указанного объекта <see cref="T:System.Drawing.Imaging.Metafile" /> по одной записи за раз в метод обратного вызова, который отображает их в заданной точке.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Этот метод перечисляет записи, содержащиеся в указанном метафайле. Каждая запись отдельно отправляется в метод обратного вызова, заданные `callback` параметра. Как правило, метод обратного вызова вызывает <xref:System.Drawing.Imaging.Metafile.PlayRecord%2A> метод «воспроизведение», или draw, запись.  
  
 Если метод обратного вызова вызывает <xref:System.Drawing.Imaging.Metafile.PlayRecord%2A>, он должен сделать это путем вызова <xref:System.Drawing.Imaging.Metafile.PlayRecord%2A> метод конкретной <xref:System.Drawing.Imaging.Metafile> перечисляемого.  
  
   
  
## Examples  
 В следующем примере кода создается форма, содержащая <xref:System.Drawing.Imaging.Metafile> как один из его закрытых членов. <xref:System.Windows.Forms.Control.OnPaint%2A> Вызовы метода <xref:System.Drawing.Graphics.EnumerateMetafile%2A>, который вызывает формы `MetafileCallback` метод для каждой записи в метафайл. Метод `MetafileCallback` вызывает метод <xref:System.Drawing.Imaging.Metafile.PlayRecord%2A>. Обратите внимание, что `MetafileCallback` метод получает данные в виде записи <xref:System.IntPtr>, но <xref:System.Drawing.Imaging.Metafile.PlayRecord%2A> метод ожидает данных записи в массиве байтов. Вызов <xref:System.Runtime.InteropServices.Marshal.Copy%2A> копирует запись данных в массив байтов, чтобы ее можно передать в <xref:System.Drawing.Imaging.Metafile.PlayRecord%2A>.  
  
 [!code-csharp[System.Drawing.Graphics.EnumerateMetafile#1](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.Graphics.EnumerateMetafile/CS/Form1.cs#1)]
 [!code-vb[System.Drawing.Graphics.EnumerateMetafile#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.Graphics.EnumerateMetafile/VB/Form1.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="EnumerateMetafile">
      <MemberSignature Language="C#" Value="public void EnumerateMetafile (System.Drawing.Imaging.Metafile metafile, System.Drawing.Point[] destPoints, System.Drawing.Graphics.EnumerateMetafileProc callback);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void EnumerateMetafile(class System.Drawing.Imaging.Metafile metafile, valuetype System.Drawing.Point[] destPoints, class System.Drawing.Graphics/EnumerateMetafileProc callback) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.EnumerateMetafile(System.Drawing.Imaging.Metafile,System.Drawing.Point[],System.Drawing.Graphics.EnumerateMetafileProc)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void EnumerateMetafile(System::Drawing::Imaging::Metafile ^ metafile, cli::array &lt;System::Drawing::Point&gt; ^ destPoints, System::Drawing::Graphics::EnumerateMetafileProc ^ callback);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="metafile" Type="System.Drawing.Imaging.Metafile" />
        <Parameter Name="destPoints" Type="System.Drawing.Point[]" />
        <Parameter Name="callback" Type="System.Drawing.Graphics+EnumerateMetafileProc" />
      </Parameters>
      <Docs>
        <param name="metafile">
          Объект <see cref="T:System.Drawing.Imaging.Metafile" /> для перечисления. </param>
        <param name="destPoints">Массив из трех структур <see cref="T:System.Drawing.Point" />, определяющих параллелограмм, который задает размер и расположение отображаемого метафайла.</param>
        <param name="callback">
          Делегат <see cref="T:System.Drawing.Graphics.EnumerateMetafileProc" />, задающий метод, в который отправляются записи метафайлов.</param>
        <summary>Отправляет записи указанного объекта <see cref="T:System.Drawing.Imaging.Metafile" /> по одной записи за раз в метод обратного вызова для их отображения в заданном параллелограмме.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Этот метод перечисляет записи, содержащиеся в указанном метафайле. Каждая запись отдельно отправляется в метод обратного вызова, заданные `callback` параметра. Как правило, метод обратного вызова вызывает <xref:System.Drawing.Imaging.Metafile.PlayRecord%2A> метод «воспроизведение», или draw, запись.  
  
 Если метод обратного вызова вызывает <xref:System.Drawing.Imaging.Metafile.PlayRecord%2A>, он должен сделать это путем вызова <xref:System.Drawing.Imaging.Metafile.PlayRecord%2A> метод конкретной <xref:System.Drawing.Imaging.Metafile> перечисляемого.  
  
   
  
## Examples  
 Пример кода см. в разделе <xref:System.Drawing.Graphics.EnumerateMetafile%28System.Drawing.Imaging.Metafile%2CSystem.Drawing.Point%2CSystem.Drawing.Graphics.EnumerateMetafileProc%29>.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="EnumerateMetafile">
      <MemberSignature Language="C#" Value="public void EnumerateMetafile (System.Drawing.Imaging.Metafile metafile, System.Drawing.PointF destPoint, System.Drawing.Graphics.EnumerateMetafileProc callback);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void EnumerateMetafile(class System.Drawing.Imaging.Metafile metafile, valuetype System.Drawing.PointF destPoint, class System.Drawing.Graphics/EnumerateMetafileProc callback) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.EnumerateMetafile(System.Drawing.Imaging.Metafile,System.Drawing.PointF,System.Drawing.Graphics.EnumerateMetafileProc)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void EnumerateMetafile(System::Drawing::Imaging::Metafile ^ metafile, System::Drawing::PointF destPoint, System::Drawing::Graphics::EnumerateMetafileProc ^ callback);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="metafile" Type="System.Drawing.Imaging.Metafile" />
        <Parameter Name="destPoint" Type="System.Drawing.PointF" />
        <Parameter Name="callback" Type="System.Drawing.Graphics+EnumerateMetafileProc" />
      </Parameters>
      <Docs>
        <param name="metafile">
          Объект <see cref="T:System.Drawing.Imaging.Metafile" /> для перечисления. </param>
        <param name="destPoint">
          Структура <see cref="T:System.Drawing.PointF" />, задающая положение верхнего левого угла отображаемого метафайла.</param>
        <param name="callback">
          Делегат <see cref="T:System.Drawing.Graphics.EnumerateMetafileProc" />, задающий метод, в который отправляются записи метафайлов.</param>
        <summary>Отправляет записи указанного объекта <see cref="T:System.Drawing.Imaging.Metafile" /> по одной записи за раз в метод обратного вызова, который отображает их в заданной точке.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Этот метод перечисляет записи, содержащиеся в указанном метафайле. Каждая запись отдельно отправляется в метод обратного вызова, заданные `callback` параметра. Как правило, метод обратного вызова вызывает <xref:System.Drawing.Imaging.Metafile.PlayRecord%2A> метод «воспроизведение», или draw, запись.  
  
 Если метод обратного вызова вызывает <xref:System.Drawing.Imaging.Metafile.PlayRecord%2A>, он должен сделать это путем вызова <xref:System.Drawing.Imaging.Metafile.PlayRecord%2A> метод конкретной <xref:System.Drawing.Imaging.Metafile> перечисляемого.  
  
   
  
## Examples  
 Пример кода см. в разделе <xref:System.Drawing.Graphics.EnumerateMetafile%28System.Drawing.Imaging.Metafile%2CSystem.Drawing.Point%2CSystem.Drawing.Graphics.EnumerateMetafileProc%29>.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="EnumerateMetafile">
      <MemberSignature Language="C#" Value="public void EnumerateMetafile (System.Drawing.Imaging.Metafile metafile, System.Drawing.PointF[] destPoints, System.Drawing.Graphics.EnumerateMetafileProc callback);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void EnumerateMetafile(class System.Drawing.Imaging.Metafile metafile, valuetype System.Drawing.PointF[] destPoints, class System.Drawing.Graphics/EnumerateMetafileProc callback) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.EnumerateMetafile(System.Drawing.Imaging.Metafile,System.Drawing.PointF[],System.Drawing.Graphics.EnumerateMetafileProc)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void EnumerateMetafile(System::Drawing::Imaging::Metafile ^ metafile, cli::array &lt;System::Drawing::PointF&gt; ^ destPoints, System::Drawing::Graphics::EnumerateMetafileProc ^ callback);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="metafile" Type="System.Drawing.Imaging.Metafile" />
        <Parameter Name="destPoints" Type="System.Drawing.PointF[]" />
        <Parameter Name="callback" Type="System.Drawing.Graphics+EnumerateMetafileProc" />
      </Parameters>
      <Docs>
        <param name="metafile">
          Объект <see cref="T:System.Drawing.Imaging.Metafile" /> для перечисления. </param>
        <param name="destPoints">Массив из трех структур <see cref="T:System.Drawing.PointF" />, определяющих параллелограмм, который задает размер и расположение отображаемого метафайла.</param>
        <param name="callback">
          Делегат <see cref="T:System.Drawing.Graphics.EnumerateMetafileProc" />, задающий метод, в который отправляются записи метафайлов.</param>
        <summary>Отправляет записи указанного объекта <see cref="T:System.Drawing.Imaging.Metafile" /> по одной записи за раз в метод обратного вызова для их отображения в заданном параллелограмме.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Этот метод перечисляет записи, содержащиеся в указанном метафайле. Каждая запись отдельно отправляется в метод обратного вызова, заданные `callback` параметра. Как правило, метод обратного вызова вызывает <xref:System.Drawing.Imaging.Metafile.PlayRecord%2A> метод «воспроизведение», или draw, запись.  
  
 Если метод обратного вызова вызывает <xref:System.Drawing.Imaging.Metafile.PlayRecord%2A>, он должен сделать это путем вызова <xref:System.Drawing.Imaging.Metafile.PlayRecord%2A> метод конкретной <xref:System.Drawing.Imaging.Metafile> перечисляемого.  
  
 `destPoints` Параметр задает три точки параллелограмма. Три <xref:System.Drawing.PointF> структуры представляют собой левый верхний, правый верхний и левый нижний углы параллелограмма. Четвертая точка определяется по первым трем параллелограмма. Масштабируется и обрезается по размерам параллелограмма отображаемого метафайла.  
  
   
  
## Examples  
 Пример кода см. в разделе <xref:System.Drawing.Graphics.EnumerateMetafile%28System.Drawing.Imaging.Metafile%2CSystem.Drawing.Point%2CSystem.Drawing.Graphics.EnumerateMetafileProc%29>.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="EnumerateMetafile">
      <MemberSignature Language="C#" Value="public void EnumerateMetafile (System.Drawing.Imaging.Metafile metafile, System.Drawing.Rectangle destRect, System.Drawing.Graphics.EnumerateMetafileProc callback);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void EnumerateMetafile(class System.Drawing.Imaging.Metafile metafile, valuetype System.Drawing.Rectangle destRect, class System.Drawing.Graphics/EnumerateMetafileProc callback) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.EnumerateMetafile(System.Drawing.Imaging.Metafile,System.Drawing.Rectangle,System.Drawing.Graphics.EnumerateMetafileProc)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void EnumerateMetafile(System::Drawing::Imaging::Metafile ^ metafile, System::Drawing::Rectangle destRect, System::Drawing::Graphics::EnumerateMetafileProc ^ callback);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="metafile" Type="System.Drawing.Imaging.Metafile" />
        <Parameter Name="destRect" Type="System.Drawing.Rectangle" />
        <Parameter Name="callback" Type="System.Drawing.Graphics+EnumerateMetafileProc" />
      </Parameters>
      <Docs>
        <param name="metafile">
          Объект <see cref="T:System.Drawing.Imaging.Metafile" /> для перечисления. </param>
        <param name="destRect">
          Структура <see cref="T:System.Drawing.Rectangle" />, которая задает расположение и размер отображаемого метафайла.</param>
        <param name="callback">
          Делегат <see cref="T:System.Drawing.Graphics.EnumerateMetafileProc" />, задающий метод, в который отправляются записи метафайлов.</param>
        <summary>Отправляет записи указанного объекта <see cref="T:System.Drawing.Imaging.Metafile" /> по одной записи за раз в метод обратного вызова для их отображения в заданном прямоугольнике.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Этот метод перечисляет записи, содержащиеся в указанном метафайле. Каждая запись отдельно отправляется в метод обратного вызова, заданные `callback` параметра. Как правило, метод обратного вызова вызывает <xref:System.Drawing.Imaging.Metafile.PlayRecord%2A> метод «воспроизведение», или draw, запись.  
  
 Если метод обратного вызова вызывает <xref:System.Drawing.Imaging.Metafile.PlayRecord%2A>, он должен сделать это путем вызова <xref:System.Drawing.Imaging.Metafile.PlayRecord%2A> метод конкретной <xref:System.Drawing.Imaging.Metafile> перечисляемого.  
  
   
  
## Examples  
 Пример кода см. в разделе <xref:System.Drawing.Graphics.EnumerateMetafile%28System.Drawing.Imaging.Metafile%2CSystem.Drawing.Point%2CSystem.Drawing.Graphics.EnumerateMetafileProc%29>.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="EnumerateMetafile">
      <MemberSignature Language="C#" Value="public void EnumerateMetafile (System.Drawing.Imaging.Metafile metafile, System.Drawing.RectangleF destRect, System.Drawing.Graphics.EnumerateMetafileProc callback);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void EnumerateMetafile(class System.Drawing.Imaging.Metafile metafile, valuetype System.Drawing.RectangleF destRect, class System.Drawing.Graphics/EnumerateMetafileProc callback) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.EnumerateMetafile(System.Drawing.Imaging.Metafile,System.Drawing.RectangleF,System.Drawing.Graphics.EnumerateMetafileProc)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void EnumerateMetafile(System::Drawing::Imaging::Metafile ^ metafile, System::Drawing::RectangleF destRect, System::Drawing::Graphics::EnumerateMetafileProc ^ callback);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="metafile" Type="System.Drawing.Imaging.Metafile" />
        <Parameter Name="destRect" Type="System.Drawing.RectangleF" />
        <Parameter Name="callback" Type="System.Drawing.Graphics+EnumerateMetafileProc" />
      </Parameters>
      <Docs>
        <param name="metafile">
          Объект <see cref="T:System.Drawing.Imaging.Metafile" /> для перечисления. </param>
        <param name="destRect">
          Структура <see cref="T:System.Drawing.RectangleF" />, которая задает расположение и размер отображаемого метафайла.</param>
        <param name="callback">
          Делегат <see cref="T:System.Drawing.Graphics.EnumerateMetafileProc" />, задающий метод, в который отправляются записи метафайлов.</param>
        <summary>Отправляет записи указанного объекта <see cref="T:System.Drawing.Imaging.Metafile" /> по одной записи за раз в метод обратного вызова для их отображения в заданном прямоугольнике.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Этот метод перечисляет записи, содержащиеся в указанном метафайле. Каждая запись отдельно отправляется в метод обратного вызова, заданные `callback` параметра. Как правило, метод обратного вызова вызывает <xref:System.Drawing.Imaging.Metafile.PlayRecord%2A> метод «воспроизведение», или draw, запись.  
  
 Если метод обратного вызова вызывает <xref:System.Drawing.Imaging.Metafile.PlayRecord%2A>, он должен сделать это путем вызова <xref:System.Drawing.Imaging.Metafile.PlayRecord%2A> метод конкретной <xref:System.Drawing.Imaging.Metafile> перечисляемого.  
  
   
  
## Examples  
 Пример кода см. в разделе <xref:System.Drawing.Graphics.EnumerateMetafile%28System.Drawing.Imaging.Metafile%2CSystem.Drawing.Point%2CSystem.Drawing.Graphics.EnumerateMetafileProc%29>.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="EnumerateMetafile">
      <MemberSignature Language="C#" Value="public void EnumerateMetafile (System.Drawing.Imaging.Metafile metafile, System.Drawing.Point destPoint, System.Drawing.Graphics.EnumerateMetafileProc callback, IntPtr callbackData);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void EnumerateMetafile(class System.Drawing.Imaging.Metafile metafile, valuetype System.Drawing.Point destPoint, class System.Drawing.Graphics/EnumerateMetafileProc callback, native int callbackData) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.EnumerateMetafile(System.Drawing.Imaging.Metafile,System.Drawing.Point,System.Drawing.Graphics.EnumerateMetafileProc,System.IntPtr)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void EnumerateMetafile(System::Drawing::Imaging::Metafile ^ metafile, System::Drawing::Point destPoint, System::Drawing::Graphics::EnumerateMetafileProc ^ callback, IntPtr callbackData);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="metafile" Type="System.Drawing.Imaging.Metafile" />
        <Parameter Name="destPoint" Type="System.Drawing.Point" />
        <Parameter Name="callback" Type="System.Drawing.Graphics+EnumerateMetafileProc" />
        <Parameter Name="callbackData" Type="System.IntPtr" />
      </Parameters>
      <Docs>
        <param name="metafile">
          Объект <see cref="T:System.Drawing.Imaging.Metafile" /> для перечисления. </param>
        <param name="destPoint">
          Структура <see cref="T:System.Drawing.Point" />, задающая положение верхнего левого угла отображаемого метафайла.</param>
        <param name="callback">
          Делегат <see cref="T:System.Drawing.Graphics.EnumerateMetafileProc" />, задающий метод, в который отправляются записи метафайлов.</param>
        <param name="callbackData">Внутренний указатель, который является обязательным, однако не обрабатывается. Для этого параметра можно передать объект <see cref="F:System.IntPtr.Zero" />.</param>
        <summary>Отправляет записи указанного объекта <see cref="T:System.Drawing.Imaging.Metafile" /> по одной записи за раз в метод обратного вызова, который отображает их в заданной точке.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Этот метод перечисляет записи, содержащиеся в указанном метафайле. Каждая запись отдельно отправляется в метод обратного вызова, заданные `callback` параметра. Как правило, метод обратного вызова вызывает <xref:System.Drawing.Imaging.Metafile.PlayRecord%2A> метод «воспроизведение», или draw, запись.  
  
 Если метод обратного вызова вызывает <xref:System.Drawing.Imaging.Metafile.PlayRecord%2A>, он должен сделать это путем вызова <xref:System.Drawing.Imaging.Metafile.PlayRecord%2A> метод конкретной <xref:System.Drawing.Imaging.Metafile> перечисляемого.  
  
   
  
## Examples  
 Пример кода см. в разделе <xref:System.Drawing.Graphics.EnumerateMetafile%2A>.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="EnumerateMetafile">
      <MemberSignature Language="C#" Value="public void EnumerateMetafile (System.Drawing.Imaging.Metafile metafile, System.Drawing.Point[] destPoints, System.Drawing.Graphics.EnumerateMetafileProc callback, IntPtr callbackData);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void EnumerateMetafile(class System.Drawing.Imaging.Metafile metafile, valuetype System.Drawing.Point[] destPoints, class System.Drawing.Graphics/EnumerateMetafileProc callback, native int callbackData) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.EnumerateMetafile(System.Drawing.Imaging.Metafile,System.Drawing.Point[],System.Drawing.Graphics.EnumerateMetafileProc,System.IntPtr)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void EnumerateMetafile(System::Drawing::Imaging::Metafile ^ metafile, cli::array &lt;System::Drawing::Point&gt; ^ destPoints, System::Drawing::Graphics::EnumerateMetafileProc ^ callback, IntPtr callbackData);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="metafile" Type="System.Drawing.Imaging.Metafile" />
        <Parameter Name="destPoints" Type="System.Drawing.Point[]" />
        <Parameter Name="callback" Type="System.Drawing.Graphics+EnumerateMetafileProc" />
        <Parameter Name="callbackData" Type="System.IntPtr" />
      </Parameters>
      <Docs>
        <param name="metafile">
          Объект <see cref="T:System.Drawing.Imaging.Metafile" /> для перечисления. </param>
        <param name="destPoints">Массив из трех структур <see cref="T:System.Drawing.Point" />, определяющих параллелограмм, который задает размер и расположение отображаемого метафайла.</param>
        <param name="callback">
          Делегат <see cref="T:System.Drawing.Graphics.EnumerateMetafileProc" />, задающий метод, в который отправляются записи метафайлов.</param>
        <param name="callbackData">Внутренний указатель, который является обязательным, однако не обрабатывается. Для этого параметра можно передать объект <see cref="F:System.IntPtr.Zero" />.</param>
        <summary>Отправляет записи указанного объекта <see cref="T:System.Drawing.Imaging.Metafile" /> по одной записи за раз в метод обратного вызова для их отображения в заданном параллелограмме.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Этот метод перечисляет записи, содержащиеся в указанном метафайле. Каждая запись отдельно отправляется в метод обратного вызова, заданные `callback` параметра. Как правило, метод обратного вызова вызывает <xref:System.Drawing.Imaging.Metafile.PlayRecord%2A> метод «воспроизведение», или draw, запись.  
  
 Если метод обратного вызова вызывает <xref:System.Drawing.Imaging.Metafile.PlayRecord%2A>, он должен сделать это путем вызова <xref:System.Drawing.Imaging.Metafile.PlayRecord%2A> метод конкретной <xref:System.Drawing.Imaging.Metafile> перечисляемого.  
  
   
  
## Examples  
 Пример кода см. в разделе <xref:System.Drawing.Graphics.EnumerateMetafile%28System.Drawing.Imaging.Metafile%2CSystem.Drawing.Point%2CSystem.Drawing.Graphics.EnumerateMetafileProc%29>.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="EnumerateMetafile">
      <MemberSignature Language="C#" Value="public void EnumerateMetafile (System.Drawing.Imaging.Metafile metafile, System.Drawing.PointF destPoint, System.Drawing.Graphics.EnumerateMetafileProc callback, IntPtr callbackData);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void EnumerateMetafile(class System.Drawing.Imaging.Metafile metafile, valuetype System.Drawing.PointF destPoint, class System.Drawing.Graphics/EnumerateMetafileProc callback, native int callbackData) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.EnumerateMetafile(System.Drawing.Imaging.Metafile,System.Drawing.PointF,System.Drawing.Graphics.EnumerateMetafileProc,System.IntPtr)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void EnumerateMetafile(System::Drawing::Imaging::Metafile ^ metafile, System::Drawing::PointF destPoint, System::Drawing::Graphics::EnumerateMetafileProc ^ callback, IntPtr callbackData);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="metafile" Type="System.Drawing.Imaging.Metafile" />
        <Parameter Name="destPoint" Type="System.Drawing.PointF" />
        <Parameter Name="callback" Type="System.Drawing.Graphics+EnumerateMetafileProc" />
        <Parameter Name="callbackData" Type="System.IntPtr" />
      </Parameters>
      <Docs>
        <param name="metafile">
          Объект <see cref="T:System.Drawing.Imaging.Metafile" /> для перечисления. </param>
        <param name="destPoint">
          Структура <see cref="T:System.Drawing.PointF" />, задающая положение верхнего левого угла отображаемого метафайла.</param>
        <param name="callback">
          Делегат <see cref="T:System.Drawing.Graphics.EnumerateMetafileProc" />, задающий метод, в который отправляются записи метафайлов.</param>
        <param name="callbackData">Внутренний указатель, который является обязательным, однако не обрабатывается. Для этого параметра можно передать объект <see cref="F:System.IntPtr.Zero" />.</param>
        <summary>Отправляет записи указанного объекта <see cref="T:System.Drawing.Imaging.Metafile" /> по одной записи за раз в метод обратного вызова, который отображает их в заданной точке.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Этот метод перечисляет записи, содержащиеся в указанном метафайле. Каждая запись отдельно отправляется в метод обратного вызова, заданные `callback` параметра. Как правило, метод обратного вызова вызывает <xref:System.Drawing.Imaging.Metafile.PlayRecord%2A> метод «воспроизведение», или draw, запись.  
  
 Если метод обратного вызова вызывает <xref:System.Drawing.Imaging.Metafile.PlayRecord%2A>, он должен сделать это путем вызова <xref:System.Drawing.Imaging.Metafile.PlayRecord%2A> метод конкретной <xref:System.Drawing.Imaging.Metafile> перечисляемого.  
  
   
  
## Examples  
 Пример кода см. в разделе <xref:System.Drawing.Graphics.EnumerateMetafile%28System.Drawing.Imaging.Metafile%2CSystem.Drawing.Point%2CSystem.Drawing.Graphics.EnumerateMetafileProc%29>.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="EnumerateMetafile">
      <MemberSignature Language="C#" Value="public void EnumerateMetafile (System.Drawing.Imaging.Metafile metafile, System.Drawing.PointF[] destPoints, System.Drawing.Graphics.EnumerateMetafileProc callback, IntPtr callbackData);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void EnumerateMetafile(class System.Drawing.Imaging.Metafile metafile, valuetype System.Drawing.PointF[] destPoints, class System.Drawing.Graphics/EnumerateMetafileProc callback, native int callbackData) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.EnumerateMetafile(System.Drawing.Imaging.Metafile,System.Drawing.PointF[],System.Drawing.Graphics.EnumerateMetafileProc,System.IntPtr)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void EnumerateMetafile(System::Drawing::Imaging::Metafile ^ metafile, cli::array &lt;System::Drawing::PointF&gt; ^ destPoints, System::Drawing::Graphics::EnumerateMetafileProc ^ callback, IntPtr callbackData);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="metafile" Type="System.Drawing.Imaging.Metafile" />
        <Parameter Name="destPoints" Type="System.Drawing.PointF[]" />
        <Parameter Name="callback" Type="System.Drawing.Graphics+EnumerateMetafileProc" />
        <Parameter Name="callbackData" Type="System.IntPtr" />
      </Parameters>
      <Docs>
        <param name="metafile">
          Объект <see cref="T:System.Drawing.Imaging.Metafile" /> для перечисления. </param>
        <param name="destPoints">Массив из трех структур <see cref="T:System.Drawing.PointF" />, определяющих параллелограмм, который задает размер и расположение отображаемого метафайла.</param>
        <param name="callback">
          Делегат <see cref="T:System.Drawing.Graphics.EnumerateMetafileProc" />, задающий метод, в который отправляются записи метафайлов.</param>
        <param name="callbackData">Внутренний указатель, который является обязательным, однако не обрабатывается. Для этого параметра можно передать объект <see cref="F:System.IntPtr.Zero" />.</param>
        <summary>Отправляет записи указанного объекта <see cref="T:System.Drawing.Imaging.Metafile" /> по одной записи за раз в метод обратного вызова для их отображения в заданном параллелограмме.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Этот метод перечисляет записи, содержащиеся в указанном метафайле. Каждая запись отдельно отправляется в метод обратного вызова, заданные `callback` параметра. Как правило, метод обратного вызова вызывает <xref:System.Drawing.Imaging.Metafile.PlayRecord%2A> метод «воспроизведение», или draw, запись.  
  
 Если метод обратного вызова вызывает <xref:System.Drawing.Imaging.Metafile.PlayRecord%2A>, он должен сделать это путем вызова <xref:System.Drawing.Imaging.Metafile.PlayRecord%2A> метод конкретной <xref:System.Drawing.Imaging.Metafile> перечисляемого.  
  
 `destPoints` Параметр задает три точки параллелограмма. Три <xref:System.Drawing.PointF> структуры представляют собой левый верхний, правый верхний и левый нижний углы параллелограмма. Четвертая точка определяется по первым трем параллелограмма. Масштабируется и обрезается по размерам параллелограмма отображаемого метафайла.  
  
   
  
## Examples  
 Пример кода см. в разделе <xref:System.Drawing.Graphics.EnumerateMetafile%28System.Drawing.Imaging.Metafile%2CSystem.Drawing.Point%2CSystem.Drawing.Graphics.EnumerateMetafileProc%29>.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="EnumerateMetafile">
      <MemberSignature Language="C#" Value="public void EnumerateMetafile (System.Drawing.Imaging.Metafile metafile, System.Drawing.Rectangle destRect, System.Drawing.Graphics.EnumerateMetafileProc callback, IntPtr callbackData);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void EnumerateMetafile(class System.Drawing.Imaging.Metafile metafile, valuetype System.Drawing.Rectangle destRect, class System.Drawing.Graphics/EnumerateMetafileProc callback, native int callbackData) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.EnumerateMetafile(System.Drawing.Imaging.Metafile,System.Drawing.Rectangle,System.Drawing.Graphics.EnumerateMetafileProc,System.IntPtr)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void EnumerateMetafile(System::Drawing::Imaging::Metafile ^ metafile, System::Drawing::Rectangle destRect, System::Drawing::Graphics::EnumerateMetafileProc ^ callback, IntPtr callbackData);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="metafile" Type="System.Drawing.Imaging.Metafile" />
        <Parameter Name="destRect" Type="System.Drawing.Rectangle" />
        <Parameter Name="callback" Type="System.Drawing.Graphics+EnumerateMetafileProc" />
        <Parameter Name="callbackData" Type="System.IntPtr" />
      </Parameters>
      <Docs>
        <param name="metafile">
          Объект <see cref="T:System.Drawing.Imaging.Metafile" /> для перечисления. </param>
        <param name="destRect">
          Структура <see cref="T:System.Drawing.Rectangle" />, которая задает расположение и размер отображаемого метафайла.</param>
        <param name="callback">
          Делегат <see cref="T:System.Drawing.Graphics.EnumerateMetafileProc" />, задающий метод, в который отправляются записи метафайлов.</param>
        <param name="callbackData">Внутренний указатель, который является обязательным, однако не обрабатывается. Для этого параметра можно передать объект <see cref="F:System.IntPtr.Zero" />.</param>
        <summary>Отправляет записи указанного объекта <see cref="T:System.Drawing.Imaging.Metafile" /> по одной записи за раз в метод обратного вызова для их отображения в заданном прямоугольнике.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Этот метод перечисляет записи, содержащиеся в указанном метафайле. Каждая запись отдельно отправляется в метод обратного вызова, заданные `callback` параметра. Как правило, метод обратного вызова вызывает <xref:System.Drawing.Imaging.Metafile.PlayRecord%2A> метод «воспроизведение», или draw, запись.  
  
 Если метод обратного вызова вызывает <xref:System.Drawing.Imaging.Metafile.PlayRecord%2A>, он должен сделать это путем вызова <xref:System.Drawing.Imaging.Metafile.PlayRecord%2A> метод конкретной <xref:System.Drawing.Imaging.Metafile> перечисляемого.  
  
   
  
## Examples  
 Пример кода см. в разделе <xref:System.Drawing.Graphics.EnumerateMetafile%28System.Drawing.Imaging.Metafile%2CSystem.Drawing.Point%2CSystem.Drawing.Graphics.EnumerateMetafileProc%29>.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="EnumerateMetafile">
      <MemberSignature Language="C#" Value="public void EnumerateMetafile (System.Drawing.Imaging.Metafile metafile, System.Drawing.RectangleF destRect, System.Drawing.Graphics.EnumerateMetafileProc callback, IntPtr callbackData);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void EnumerateMetafile(class System.Drawing.Imaging.Metafile metafile, valuetype System.Drawing.RectangleF destRect, class System.Drawing.Graphics/EnumerateMetafileProc callback, native int callbackData) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.EnumerateMetafile(System.Drawing.Imaging.Metafile,System.Drawing.RectangleF,System.Drawing.Graphics.EnumerateMetafileProc,System.IntPtr)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void EnumerateMetafile(System::Drawing::Imaging::Metafile ^ metafile, System::Drawing::RectangleF destRect, System::Drawing::Graphics::EnumerateMetafileProc ^ callback, IntPtr callbackData);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="metafile" Type="System.Drawing.Imaging.Metafile" />
        <Parameter Name="destRect" Type="System.Drawing.RectangleF" />
        <Parameter Name="callback" Type="System.Drawing.Graphics+EnumerateMetafileProc" />
        <Parameter Name="callbackData" Type="System.IntPtr" />
      </Parameters>
      <Docs>
        <param name="metafile">
          Объект <see cref="T:System.Drawing.Imaging.Metafile" /> для перечисления. </param>
        <param name="destRect">
          Структура <see cref="T:System.Drawing.RectangleF" />, которая задает расположение и размер отображаемого метафайла.</param>
        <param name="callback">
          Делегат <see cref="T:System.Drawing.Graphics.EnumerateMetafileProc" />, задающий метод, в который отправляются записи метафайлов.</param>
        <param name="callbackData">Внутренний указатель, который является обязательным, однако не обрабатывается. Для этого параметра можно передать объект <see cref="F:System.IntPtr.Zero" />.</param>
        <summary>Отправляет записи указанного объекта <see cref="T:System.Drawing.Imaging.Metafile" /> по одной записи за раз в метод обратного вызова для их отображения в заданном прямоугольнике.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Этот метод перечисляет записи, содержащиеся в указанном метафайле. Каждая запись отдельно отправляется в метод обратного вызова, заданные `callback` параметра. Как правило, метод обратного вызова вызывает <xref:System.Drawing.Imaging.Metafile.PlayRecord%2A> метод «воспроизведение», или draw, запись.  
  
 Если метод обратного вызова вызывает <xref:System.Drawing.Imaging.Metafile.PlayRecord%2A>, он должен сделать это путем вызова <xref:System.Drawing.Imaging.Metafile.PlayRecord%2A> метод конкретной <xref:System.Drawing.Imaging.Metafile> перечисляемого.  
  
   
  
## Examples  
 Пример кода см. в разделе <xref:System.Drawing.Graphics.EnumerateMetafile%28System.Drawing.Imaging.Metafile%2CSystem.Drawing.Point%2CSystem.Drawing.Graphics.EnumerateMetafileProc%29>.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="EnumerateMetafile">
      <MemberSignature Language="C#" Value="public void EnumerateMetafile (System.Drawing.Imaging.Metafile metafile, System.Drawing.Point destPoint, System.Drawing.Graphics.EnumerateMetafileProc callback, IntPtr callbackData, System.Drawing.Imaging.ImageAttributes imageAttr);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void EnumerateMetafile(class System.Drawing.Imaging.Metafile metafile, valuetype System.Drawing.Point destPoint, class System.Drawing.Graphics/EnumerateMetafileProc callback, native int callbackData, class System.Drawing.Imaging.ImageAttributes imageAttr) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.EnumerateMetafile(System.Drawing.Imaging.Metafile,System.Drawing.Point,System.Drawing.Graphics.EnumerateMetafileProc,System.IntPtr,System.Drawing.Imaging.ImageAttributes)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void EnumerateMetafile(System::Drawing::Imaging::Metafile ^ metafile, System::Drawing::Point destPoint, System::Drawing::Graphics::EnumerateMetafileProc ^ callback, IntPtr callbackData, System::Drawing::Imaging::ImageAttributes ^ imageAttr);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="metafile" Type="System.Drawing.Imaging.Metafile" />
        <Parameter Name="destPoint" Type="System.Drawing.Point" />
        <Parameter Name="callback" Type="System.Drawing.Graphics+EnumerateMetafileProc" />
        <Parameter Name="callbackData" Type="System.IntPtr" />
        <Parameter Name="imageAttr" Type="System.Drawing.Imaging.ImageAttributes" />
      </Parameters>
      <Docs>
        <param name="metafile">
          Объект <see cref="T:System.Drawing.Imaging.Metafile" /> для перечисления. </param>
        <param name="destPoint">
          Структура <see cref="T:System.Drawing.Point" />, задающая положение верхнего левого угла отображаемого метафайла.</param>
        <param name="callback">
          Делегат <see cref="T:System.Drawing.Graphics.EnumerateMetafileProc" />, задающий метод, в который отправляются записи метафайлов.</param>
        <param name="callbackData">Внутренний указатель, который является обязательным, однако не обрабатывается. Для этого параметра можно передать объект <see cref="F:System.IntPtr.Zero" />.</param>
        <param name="imageAttr">
          Объект <see cref="T:System.Drawing.Imaging.ImageAttributes" />, задающий сведения об атрибутах формируемого изображения.</param>
        <summary>Отправляет записи указанного объекта <see cref="T:System.Drawing.Imaging.Metafile" /> по одной записи за раз в метод обратного вызова, который отображает их в заданной точке, используя указанные атрибуты изображения.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Этот метод перечисляет записи, содержащиеся в указанном метафайле. Каждая запись отдельно отправляется в метод обратного вызова, заданные `callback` параметра. Как правило, метод обратного вызова вызывает <xref:System.Drawing.Imaging.Metafile.PlayRecord%2A> метод «воспроизведение», или draw, запись.  
  
 Если метод обратного вызова вызывает <xref:System.Drawing.Imaging.Metafile.PlayRecord%2A>, он должен сделать это путем вызова <xref:System.Drawing.Imaging.Metafile.PlayRecord%2A> метод конкретной <xref:System.Drawing.Imaging.Metafile> перечисляемого.  
  
   
  
## Examples  
 Пример кода см. в разделе <xref:System.Drawing.Graphics.EnumerateMetafile%28System.Drawing.Imaging.Metafile%2CSystem.Drawing.Point%2CSystem.Drawing.Graphics.EnumerateMetafileProc%29>.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="EnumerateMetafile">
      <MemberSignature Language="C#" Value="public void EnumerateMetafile (System.Drawing.Imaging.Metafile metafile, System.Drawing.Point destPoint, System.Drawing.Rectangle srcRect, System.Drawing.GraphicsUnit srcUnit, System.Drawing.Graphics.EnumerateMetafileProc callback);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void EnumerateMetafile(class System.Drawing.Imaging.Metafile metafile, valuetype System.Drawing.Point destPoint, valuetype System.Drawing.Rectangle srcRect, valuetype System.Drawing.GraphicsUnit srcUnit, class System.Drawing.Graphics/EnumerateMetafileProc callback) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.EnumerateMetafile(System.Drawing.Imaging.Metafile,System.Drawing.Point,System.Drawing.Rectangle,System.Drawing.GraphicsUnit,System.Drawing.Graphics.EnumerateMetafileProc)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void EnumerateMetafile(System::Drawing::Imaging::Metafile ^ metafile, System::Drawing::Point destPoint, System::Drawing::Rectangle srcRect, System::Drawing::GraphicsUnit srcUnit, System::Drawing::Graphics::EnumerateMetafileProc ^ callback);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="metafile" Type="System.Drawing.Imaging.Metafile" />
        <Parameter Name="destPoint" Type="System.Drawing.Point" />
        <Parameter Name="srcRect" Type="System.Drawing.Rectangle" />
        <Parameter Name="srcUnit" Type="System.Drawing.GraphicsUnit" />
        <Parameter Name="callback" Type="System.Drawing.Graphics+EnumerateMetafileProc" />
      </Parameters>
      <Docs>
        <param name="metafile">
          Объект <see cref="T:System.Drawing.Imaging.Metafile" /> для перечисления. </param>
        <param name="destPoint">
          Структура <see cref="T:System.Drawing.Point" />, задающая положение верхнего левого угла отображаемого метафайла.</param>
        <param name="srcRect">
          Структура <see cref="T:System.Drawing.Rectangle" />, задающая часть метафайла, предназначенную для рисования, относительно его верхнего левого угла.</param>
        <param name="srcUnit">Элемент перечисления <see cref="T:System.Drawing.GraphicsUnit" />, задающий единицу измерения, которая должна использоваться для определения части метафайла, содержащейся в прямоугольнике, указываемом параметром <c>srcRect</c>.</param>
        <param name="callback">
          Делегат <see cref="T:System.Drawing.Graphics.EnumerateMetafileProc" />, задающий метод, в который отправляются записи метафайлов.</param>
        <summary>Отправляет записи в выбранном прямоугольнике из объекта <see cref="T:System.Drawing.Imaging.Metafile" /> по одной записи за раз в метод обратного вызова, который отображает их в заданной точке.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Этот метод перечисляет записи, содержащиеся в указанном метафайле. Каждая запись отдельно отправляется в метод обратного вызова, заданные `callback` параметра. Как правило, метод обратного вызова вызывает <xref:System.Drawing.Imaging.Metafile.PlayRecord%2A> метод «воспроизведение», или draw, запись.  
  
 Если метод обратного вызова вызывает <xref:System.Drawing.Imaging.Metafile.PlayRecord%2A>, он должен сделать это путем вызова <xref:System.Drawing.Imaging.Metafile.PlayRecord%2A> метод конкретной <xref:System.Drawing.Imaging.Metafile> перечисляемого.  
  
   
  
## Examples  
 Пример кода см. в разделе <xref:System.Drawing.Graphics.EnumerateMetafile%28System.Drawing.Imaging.Metafile%2CSystem.Drawing.Point%2CSystem.Drawing.Graphics.EnumerateMetafileProc%29>.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="EnumerateMetafile">
      <MemberSignature Language="C#" Value="public void EnumerateMetafile (System.Drawing.Imaging.Metafile metafile, System.Drawing.Point[] destPoints, System.Drawing.Graphics.EnumerateMetafileProc callback, IntPtr callbackData, System.Drawing.Imaging.ImageAttributes imageAttr);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void EnumerateMetafile(class System.Drawing.Imaging.Metafile metafile, valuetype System.Drawing.Point[] destPoints, class System.Drawing.Graphics/EnumerateMetafileProc callback, native int callbackData, class System.Drawing.Imaging.ImageAttributes imageAttr) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.EnumerateMetafile(System.Drawing.Imaging.Metafile,System.Drawing.Point[],System.Drawing.Graphics.EnumerateMetafileProc,System.IntPtr,System.Drawing.Imaging.ImageAttributes)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void EnumerateMetafile(System::Drawing::Imaging::Metafile ^ metafile, cli::array &lt;System::Drawing::Point&gt; ^ destPoints, System::Drawing::Graphics::EnumerateMetafileProc ^ callback, IntPtr callbackData, System::Drawing::Imaging::ImageAttributes ^ imageAttr);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="metafile" Type="System.Drawing.Imaging.Metafile" />
        <Parameter Name="destPoints" Type="System.Drawing.Point[]" />
        <Parameter Name="callback" Type="System.Drawing.Graphics+EnumerateMetafileProc" />
        <Parameter Name="callbackData" Type="System.IntPtr" />
        <Parameter Name="imageAttr" Type="System.Drawing.Imaging.ImageAttributes" />
      </Parameters>
      <Docs>
        <param name="metafile">
          Объект <see cref="T:System.Drawing.Imaging.Metafile" /> для перечисления. </param>
        <param name="destPoints">Массив из трех структур <see cref="T:System.Drawing.Point" />, определяющих параллелограмм, который задает размер и расположение отображаемого метафайла.</param>
        <param name="callback">
          Делегат <see cref="T:System.Drawing.Graphics.EnumerateMetafileProc" />, задающий метод, в который отправляются записи метафайлов.</param>
        <param name="callbackData">Внутренний указатель, который является обязательным, однако не обрабатывается. Для этого параметра можно передать объект <see cref="F:System.IntPtr.Zero" />.</param>
        <param name="imageAttr">
          Объект <see cref="T:System.Drawing.Imaging.ImageAttributes" />, задающий сведения об атрибутах формируемого изображения.</param>
        <summary>Отправляет записи указанного объекта <see cref="T:System.Drawing.Imaging.Metafile" /> по одной записи за раз в метод обратного вызова, который отображает их в заданном параллелограмме, используя указанные атрибуты изображения.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Этот метод перечисляет записи, содержащиеся в указанном метафайле. Каждая запись отдельно отправляется в метод обратного вызова, заданные `callback` параметра. Как правило, метод обратного вызова вызывает <xref:System.Drawing.Imaging.Metafile.PlayRecord%2A> метод «воспроизведение», или draw, запись.  
  
 Если метод обратного вызова вызывает <xref:System.Drawing.Imaging.Metafile.PlayRecord%2A>, он должен сделать это путем вызова <xref:System.Drawing.Imaging.Metafile.PlayRecord%2A> метод конкретной <xref:System.Drawing.Imaging.Metafile> перечисляемого.  
  
 `destPoints` Параметр задает три точки параллелограмма. Три <xref:System.Drawing.Point> структуры представляют собой левый верхний, правый верхний и левый нижний углы параллелограмма. Четвертая точка определяется по первым трем параллелограмма. Масштабируется и обрезается по размерам параллелограмма отображаемого метафайла.  
  
 Изображение атрибутами, заданными `imageAttr` параметр replace, те, указанного при записи метафайла.  
  
   
  
## Examples  
 Пример кода см. в разделе <xref:System.Drawing.Graphics.EnumerateMetafile%28System.Drawing.Imaging.Metafile%2CSystem.Drawing.Point%2CSystem.Drawing.Graphics.EnumerateMetafileProc%29>.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="EnumerateMetafile">
      <MemberSignature Language="C#" Value="public void EnumerateMetafile (System.Drawing.Imaging.Metafile metafile, System.Drawing.Point[] destPoints, System.Drawing.Rectangle srcRect, System.Drawing.GraphicsUnit srcUnit, System.Drawing.Graphics.EnumerateMetafileProc callback);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void EnumerateMetafile(class System.Drawing.Imaging.Metafile metafile, valuetype System.Drawing.Point[] destPoints, valuetype System.Drawing.Rectangle srcRect, valuetype System.Drawing.GraphicsUnit srcUnit, class System.Drawing.Graphics/EnumerateMetafileProc callback) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.EnumerateMetafile(System.Drawing.Imaging.Metafile,System.Drawing.Point[],System.Drawing.Rectangle,System.Drawing.GraphicsUnit,System.Drawing.Graphics.EnumerateMetafileProc)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void EnumerateMetafile(System::Drawing::Imaging::Metafile ^ metafile, cli::array &lt;System::Drawing::Point&gt; ^ destPoints, System::Drawing::Rectangle srcRect, System::Drawing::GraphicsUnit srcUnit, System::Drawing::Graphics::EnumerateMetafileProc ^ callback);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="metafile" Type="System.Drawing.Imaging.Metafile" />
        <Parameter Name="destPoints" Type="System.Drawing.Point[]" />
        <Parameter Name="srcRect" Type="System.Drawing.Rectangle" />
        <Parameter Name="srcUnit" Type="System.Drawing.GraphicsUnit" />
        <Parameter Name="callback" Type="System.Drawing.Graphics+EnumerateMetafileProc" />
      </Parameters>
      <Docs>
        <param name="metafile">
          Объект <see cref="T:System.Drawing.Imaging.Metafile" /> для перечисления. </param>
        <param name="destPoints">Массив из трех структур <see cref="T:System.Drawing.Point" />, определяющих параллелограмм, который задает размер и расположение отображаемого метафайла.</param>
        <param name="srcRect">
          Структура <see cref="T:System.Drawing.Rectangle" />, задающая часть метафайла, предназначенную для рисования, относительно его верхнего левого угла.</param>
        <param name="srcUnit">Элемент перечисления <see cref="T:System.Drawing.GraphicsUnit" />, задающий единицу измерения, которая должна использоваться для определения части метафайла, содержащейся в прямоугольнике, указываемом параметром <c>srcRect</c>.</param>
        <param name="callback">
          Делегат <see cref="T:System.Drawing.Graphics.EnumerateMetafileProc" />, задающий метод, в который отправляются записи метафайлов.</param>
        <summary>Отправляет записи в выбранном прямоугольнике из объекта <see cref="T:System.Drawing.Imaging.Metafile" /> по одной записи за раз в метод обратного вызова, который отображает их в заданном параллелограмме.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Этот метод перечисляет записи, содержащиеся в указанном метафайле. Каждая запись отдельно отправляется в метод обратного вызова, заданные `callback` параметра. Как правило, метод обратного вызова вызывает <xref:System.Drawing.Imaging.Metafile.PlayRecord%2A> метод «воспроизведение», или draw, запись.  
  
 Если метод обратного вызова вызывает <xref:System.Drawing.Imaging.Metafile.PlayRecord%2A>, он должен сделать это путем вызова <xref:System.Drawing.Imaging.Metafile.PlayRecord%2A> метод конкретной <xref:System.Drawing.Imaging.Metafile> перечисляемого.  
  
 `destPoints` Параметр задает три точки параллелограмма. Три <xref:System.Drawing.Point> структуры представляют собой левый верхний, правый верхний и левый нижний углы параллелограмма. Четвертая точка определяется по первым трем параллелограмма. Масштабируется и обрезается по размерам параллелограмма отображаемого метафайла.  
  
 Изображение, расположенное вне прямоугольника, заданного параметром `srcRect` параметр учитывается.  
  
   
  
## Examples  
 Пример кода см. в разделе <xref:System.Drawing.Graphics.EnumerateMetafile%28System.Drawing.Imaging.Metafile%2CSystem.Drawing.Point%2CSystem.Drawing.Graphics.EnumerateMetafileProc%29>.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="EnumerateMetafile">
      <MemberSignature Language="C#" Value="public void EnumerateMetafile (System.Drawing.Imaging.Metafile metafile, System.Drawing.PointF destPoint, System.Drawing.Graphics.EnumerateMetafileProc callback, IntPtr callbackData, System.Drawing.Imaging.ImageAttributes imageAttr);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void EnumerateMetafile(class System.Drawing.Imaging.Metafile metafile, valuetype System.Drawing.PointF destPoint, class System.Drawing.Graphics/EnumerateMetafileProc callback, native int callbackData, class System.Drawing.Imaging.ImageAttributes imageAttr) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.EnumerateMetafile(System.Drawing.Imaging.Metafile,System.Drawing.PointF,System.Drawing.Graphics.EnumerateMetafileProc,System.IntPtr,System.Drawing.Imaging.ImageAttributes)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void EnumerateMetafile(System::Drawing::Imaging::Metafile ^ metafile, System::Drawing::PointF destPoint, System::Drawing::Graphics::EnumerateMetafileProc ^ callback, IntPtr callbackData, System::Drawing::Imaging::ImageAttributes ^ imageAttr);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="metafile" Type="System.Drawing.Imaging.Metafile" />
        <Parameter Name="destPoint" Type="System.Drawing.PointF" />
        <Parameter Name="callback" Type="System.Drawing.Graphics+EnumerateMetafileProc" />
        <Parameter Name="callbackData" Type="System.IntPtr" />
        <Parameter Name="imageAttr" Type="System.Drawing.Imaging.ImageAttributes" />
      </Parameters>
      <Docs>
        <param name="metafile">
          Объект <see cref="T:System.Drawing.Imaging.Metafile" /> для перечисления. </param>
        <param name="destPoint">
          Структура <see cref="T:System.Drawing.PointF" />, задающая положение верхнего левого угла отображаемого метафайла.</param>
        <param name="callback">
          Делегат <see cref="T:System.Drawing.Graphics.EnumerateMetafileProc" />, задающий метод, в который отправляются записи метафайлов.</param>
        <param name="callbackData">Внутренний указатель, который является обязательным, однако не обрабатывается. Для этого параметра можно передать объект <see cref="F:System.IntPtr.Zero" />.</param>
        <param name="imageAttr">
          Объект <see cref="T:System.Drawing.Imaging.ImageAttributes" />, задающий сведения об атрибутах формируемого изображения.</param>
        <summary>Отправляет записи указанного объекта <see cref="T:System.Drawing.Imaging.Metafile" /> по одной записи за раз в метод обратного вызова, который отображает их в заданной точке, используя указанные атрибуты изображения.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Этот метод перечисляет записи, содержащиеся в указанном метафайле. Каждая запись отдельно отправляется в метод обратного вызова, заданные `callback` параметра. Как правило, метод обратного вызова вызывает <xref:System.Drawing.Imaging.Metafile.PlayRecord%2A> метод «воспроизведение», или draw, запись.  
  
 Если метод обратного вызова вызывает <xref:System.Drawing.Imaging.Metafile.PlayRecord%2A>, он должен сделать это с помощью вызова метода конкретной <xref:System.Drawing.Imaging.Metafile> перечисляемого.  
  
 Изображение атрибутами, заданными `imageAttr` параметр replace, те, указанного при записи метафайла.  
  
   
  
## Examples  
 Пример кода см. в разделе <xref:System.Drawing.Graphics.EnumerateMetafile%28System.Drawing.Imaging.Metafile%2CSystem.Drawing.Point%2CSystem.Drawing.Graphics.EnumerateMetafileProc%29>.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="EnumerateMetafile">
      <MemberSignature Language="C#" Value="public void EnumerateMetafile (System.Drawing.Imaging.Metafile metafile, System.Drawing.PointF destPoint, System.Drawing.RectangleF srcRect, System.Drawing.GraphicsUnit srcUnit, System.Drawing.Graphics.EnumerateMetafileProc callback);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void EnumerateMetafile(class System.Drawing.Imaging.Metafile metafile, valuetype System.Drawing.PointF destPoint, valuetype System.Drawing.RectangleF srcRect, valuetype System.Drawing.GraphicsUnit srcUnit, class System.Drawing.Graphics/EnumerateMetafileProc callback) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.EnumerateMetafile(System.Drawing.Imaging.Metafile,System.Drawing.PointF,System.Drawing.RectangleF,System.Drawing.GraphicsUnit,System.Drawing.Graphics.EnumerateMetafileProc)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void EnumerateMetafile(System::Drawing::Imaging::Metafile ^ metafile, System::Drawing::PointF destPoint, System::Drawing::RectangleF srcRect, System::Drawing::GraphicsUnit srcUnit, System::Drawing::Graphics::EnumerateMetafileProc ^ callback);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="metafile" Type="System.Drawing.Imaging.Metafile" />
        <Parameter Name="destPoint" Type="System.Drawing.PointF" />
        <Parameter Name="srcRect" Type="System.Drawing.RectangleF" />
        <Parameter Name="srcUnit" Type="System.Drawing.GraphicsUnit" />
        <Parameter Name="callback" Type="System.Drawing.Graphics+EnumerateMetafileProc" />
      </Parameters>
      <Docs>
        <param name="metafile">
          Объект <see cref="T:System.Drawing.Imaging.Metafile" /> для перечисления. </param>
        <param name="destPoint">
          Структура <see cref="T:System.Drawing.PointF" />, задающая положение верхнего левого угла отображаемого метафайла.</param>
        <param name="srcRect">
          Структура <see cref="T:System.Drawing.RectangleF" />, задающая часть метафайла, предназначенную для рисования, относительно его верхнего левого угла.</param>
        <param name="srcUnit">Элемент перечисления <see cref="T:System.Drawing.GraphicsUnit" />, задающий единицу измерения, которая должна использоваться для определения части метафайла, содержащейся в прямоугольнике, указываемом параметром <c>srcRect</c>.</param>
        <param name="callback">
          Делегат <see cref="T:System.Drawing.Graphics.EnumerateMetafileProc" />, задающий метод, в который отправляются записи метафайлов.</param>
        <summary>Отправляет записи в выбранном прямоугольнике из объекта <see cref="T:System.Drawing.Imaging.Metafile" /> по одной записи за раз в метод обратного вызова, который отображает их в заданной точке.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Этот метод перечисляет записи, содержащиеся в указанном метафайле. Каждая запись отдельно отправляется в метод обратного вызова, заданные `callback` параметра. Как правило, метод обратного вызова вызывает <xref:System.Drawing.Imaging.Metafile.PlayRecord%2A> метод «воспроизведение», или draw, запись.  
  
 Если метод обратного вызова вызывает <xref:System.Drawing.Imaging.Metafile.PlayRecord%2A>, он должен сделать это путем вызова <xref:System.Drawing.Imaging.Metafile.PlayRecord%2A> метод конкретной <xref:System.Drawing.Imaging.Metafile> перечисляемого.  
  
 Изображение, расположенное вне прямоугольника, заданного параметром `srcRect` параметр учитывается.  
  
   
  
## Examples  
 Пример кода см. в разделе <xref:System.Drawing.Graphics.EnumerateMetafile%28System.Drawing.Imaging.Metafile%2CSystem.Drawing.Point%2CSystem.Drawing.Graphics.EnumerateMetafileProc%29>.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="EnumerateMetafile">
      <MemberSignature Language="C#" Value="public void EnumerateMetafile (System.Drawing.Imaging.Metafile metafile, System.Drawing.PointF[] destPoints, System.Drawing.Graphics.EnumerateMetafileProc callback, IntPtr callbackData, System.Drawing.Imaging.ImageAttributes imageAttr);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void EnumerateMetafile(class System.Drawing.Imaging.Metafile metafile, valuetype System.Drawing.PointF[] destPoints, class System.Drawing.Graphics/EnumerateMetafileProc callback, native int callbackData, class System.Drawing.Imaging.ImageAttributes imageAttr) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.EnumerateMetafile(System.Drawing.Imaging.Metafile,System.Drawing.PointF[],System.Drawing.Graphics.EnumerateMetafileProc,System.IntPtr,System.Drawing.Imaging.ImageAttributes)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void EnumerateMetafile(System::Drawing::Imaging::Metafile ^ metafile, cli::array &lt;System::Drawing::PointF&gt; ^ destPoints, System::Drawing::Graphics::EnumerateMetafileProc ^ callback, IntPtr callbackData, System::Drawing::Imaging::ImageAttributes ^ imageAttr);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="metafile" Type="System.Drawing.Imaging.Metafile" />
        <Parameter Name="destPoints" Type="System.Drawing.PointF[]" />
        <Parameter Name="callback" Type="System.Drawing.Graphics+EnumerateMetafileProc" />
        <Parameter Name="callbackData" Type="System.IntPtr" />
        <Parameter Name="imageAttr" Type="System.Drawing.Imaging.ImageAttributes" />
      </Parameters>
      <Docs>
        <param name="metafile">
          Объект <see cref="T:System.Drawing.Imaging.Metafile" /> для перечисления. </param>
        <param name="destPoints">Массив из трех структур <see cref="T:System.Drawing.PointF" />, определяющих параллелограмм, который задает размер и расположение отображаемого метафайла.</param>
        <param name="callback">
          Делегат <see cref="T:System.Drawing.Graphics.EnumerateMetafileProc" />, задающий метод, в который отправляются записи метафайлов.</param>
        <param name="callbackData">Внутренний указатель, который является обязательным, однако не обрабатывается. Для этого параметра можно передать объект <see cref="F:System.IntPtr.Zero" />.</param>
        <param name="imageAttr">
          Объект <see cref="T:System.Drawing.Imaging.ImageAttributes" />, задающий сведения об атрибутах формируемого изображения.</param>
        <summary>Отправляет записи указанного объекта <see cref="T:System.Drawing.Imaging.Metafile" /> по одной записи за раз в метод обратного вызова, который отображает их в заданном параллелограмме, используя указанные атрибуты изображения.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Этот метод перечисляет записи, содержащиеся в указанном метафайле. Каждая запись отдельно отправляется в метод обратного вызова, заданные `callback` параметра. Как правило, метод обратного вызова вызывает <xref:System.Drawing.Imaging.Metafile.PlayRecord%2A> метод «воспроизведение», или draw, запись.  
  
 Если метод обратного вызова вызывает <xref:System.Drawing.Imaging.Metafile.PlayRecord%2A>, он должен сделать это путем вызова <xref:System.Drawing.Imaging.Metafile.PlayRecord%2A> метод конкретной <xref:System.Drawing.Imaging.Metafile> перечисляемого.  
  
 `destPoints` Параметр задает три точки параллелограмма. Три <xref:System.Drawing.PointF> структуры представляют собой левый верхний, правый верхний и левый нижний углы параллелограмма. Четвертая точка определяется по первым трем параллелограмма. Масштабируется и обрезается по размерам параллелограмма отображаемого метафайла.  
  
 Изображение атрибутами, заданными `imageAttr` параметр replace, те, указанного при записи метафайла.  
  
   
  
## Examples  
 Пример кода см. в разделе <xref:System.Drawing.Graphics.EnumerateMetafile%28System.Drawing.Imaging.Metafile%2CSystem.Drawing.Point%2CSystem.Drawing.Graphics.EnumerateMetafileProc%29>.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="EnumerateMetafile">
      <MemberSignature Language="C#" Value="public void EnumerateMetafile (System.Drawing.Imaging.Metafile metafile, System.Drawing.PointF[] destPoints, System.Drawing.RectangleF srcRect, System.Drawing.GraphicsUnit srcUnit, System.Drawing.Graphics.EnumerateMetafileProc callback);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void EnumerateMetafile(class System.Drawing.Imaging.Metafile metafile, valuetype System.Drawing.PointF[] destPoints, valuetype System.Drawing.RectangleF srcRect, valuetype System.Drawing.GraphicsUnit srcUnit, class System.Drawing.Graphics/EnumerateMetafileProc callback) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.EnumerateMetafile(System.Drawing.Imaging.Metafile,System.Drawing.PointF[],System.Drawing.RectangleF,System.Drawing.GraphicsUnit,System.Drawing.Graphics.EnumerateMetafileProc)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void EnumerateMetafile(System::Drawing::Imaging::Metafile ^ metafile, cli::array &lt;System::Drawing::PointF&gt; ^ destPoints, System::Drawing::RectangleF srcRect, System::Drawing::GraphicsUnit srcUnit, System::Drawing::Graphics::EnumerateMetafileProc ^ callback);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="metafile" Type="System.Drawing.Imaging.Metafile" />
        <Parameter Name="destPoints" Type="System.Drawing.PointF[]" />
        <Parameter Name="srcRect" Type="System.Drawing.RectangleF" />
        <Parameter Name="srcUnit" Type="System.Drawing.GraphicsUnit" />
        <Parameter Name="callback" Type="System.Drawing.Graphics+EnumerateMetafileProc" />
      </Parameters>
      <Docs>
        <param name="metafile">
          Объект <see cref="T:System.Drawing.Imaging.Metafile" /> для перечисления. </param>
        <param name="destPoints">Массив из трех структур <see cref="T:System.Drawing.PointF" />, определяющих параллелограмм, который задает размер и расположение отображаемого метафайла.</param>
        <param name="srcRect">
          Структура <see cref="T:System.Drawing.RectangleF" />, задающая часть метафайла, предназначенную для рисования, относительно его верхнего левого угла.</param>
        <param name="srcUnit">Элемент перечисления <see cref="T:System.Drawing.GraphicsUnit" />, задающий единицу измерения, которая должна использоваться для определения части метафайла, содержащейся в прямоугольнике, указываемом параметром <c>srcRect</c>.</param>
        <param name="callback">
          Делегат <see cref="T:System.Drawing.Graphics.EnumerateMetafileProc" />, задающий метод, в который отправляются записи метафайлов.</param>
        <summary>Отправляет записи в выбранном прямоугольнике из объекта <see cref="T:System.Drawing.Imaging.Metafile" /> по одной записи за раз в метод обратного вызова, который отображает их в заданном параллелограмме.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Этот метод перечисляет записи, содержащиеся в указанном метафайле. Каждая запись отдельно отправляется в метод обратного вызова, заданные `callback` параметра. Как правило, метод обратного вызова вызывает <xref:System.Drawing.Imaging.Metafile.PlayRecord%2A> метод «воспроизведение», или draw, запись.  
  
 Если метод обратного вызова вызывает <xref:System.Drawing.Imaging.Metafile.PlayRecord%2A>, он должен сделать это путем вызова <xref:System.Drawing.Imaging.Metafile.PlayRecord%2A> метод конкретной <xref:System.Drawing.Imaging.Metafile> перечисляемого.  
  
 `destPoints` Параметр задает три точки параллелограмма. Три <xref:System.Drawing.Point> структуры представляют собой левый верхний, правый верхний и левый нижний углы параллелограмма. Четвертая точка определяется по первым трем параллелограмма. Масштабируется и обрезается по размерам параллелограмма отображаемого метафайла.  
  
 Изображение, расположенное вне прямоугольника, заданного параметром `srcRect` параметр учитывается.  
  
   
  
## Examples  
 Пример кода см. в разделе <xref:System.Drawing.Graphics.EnumerateMetafile%28System.Drawing.Imaging.Metafile%2CSystem.Drawing.Point%2CSystem.Drawing.Graphics.EnumerateMetafileProc%29>.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="EnumerateMetafile">
      <MemberSignature Language="C#" Value="public void EnumerateMetafile (System.Drawing.Imaging.Metafile metafile, System.Drawing.Rectangle destRect, System.Drawing.Graphics.EnumerateMetafileProc callback, IntPtr callbackData, System.Drawing.Imaging.ImageAttributes imageAttr);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void EnumerateMetafile(class System.Drawing.Imaging.Metafile metafile, valuetype System.Drawing.Rectangle destRect, class System.Drawing.Graphics/EnumerateMetafileProc callback, native int callbackData, class System.Drawing.Imaging.ImageAttributes imageAttr) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.EnumerateMetafile(System.Drawing.Imaging.Metafile,System.Drawing.Rectangle,System.Drawing.Graphics.EnumerateMetafileProc,System.IntPtr,System.Drawing.Imaging.ImageAttributes)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void EnumerateMetafile(System::Drawing::Imaging::Metafile ^ metafile, System::Drawing::Rectangle destRect, System::Drawing::Graphics::EnumerateMetafileProc ^ callback, IntPtr callbackData, System::Drawing::Imaging::ImageAttributes ^ imageAttr);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="metafile" Type="System.Drawing.Imaging.Metafile" />
        <Parameter Name="destRect" Type="System.Drawing.Rectangle" />
        <Parameter Name="callback" Type="System.Drawing.Graphics+EnumerateMetafileProc" />
        <Parameter Name="callbackData" Type="System.IntPtr" />
        <Parameter Name="imageAttr" Type="System.Drawing.Imaging.ImageAttributes" />
      </Parameters>
      <Docs>
        <param name="metafile">
          Объект <see cref="T:System.Drawing.Imaging.Metafile" /> для перечисления. </param>
        <param name="destRect">
          Структура <see cref="T:System.Drawing.Rectangle" />, которая задает расположение и размер отображаемого метафайла.</param>
        <param name="callback">
          Делегат <see cref="T:System.Drawing.Graphics.EnumerateMetafileProc" />, задающий метод, в который отправляются записи метафайлов.</param>
        <param name="callbackData">Внутренний указатель, который является обязательным, однако не обрабатывается. Для этого параметра можно передать объект <see cref="F:System.IntPtr.Zero" />.</param>
        <param name="imageAttr">
          Объект <see cref="T:System.Drawing.Imaging.ImageAttributes" />, задающий сведения об атрибутах формируемого изображения.</param>
        <summary>Отправляет записи указанного объекта <see cref="T:System.Drawing.Imaging.Metafile" /> по одной записи за раз в метод обратного вызова, который отображает их в заданном прямоугольнике, используя указанные атрибуты изображения.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Этот метод перечисляет записи, содержащиеся в указанном метафайле. Каждая запись отдельно отправляется в метод обратного вызова, заданные `callback` параметра. Как правило, метод обратного вызова вызывает <xref:System.Drawing.Imaging.Metafile.PlayRecord%2A> метод «воспроизведение», или draw, запись.  
  
 Если метод обратного вызова вызывает <xref:System.Drawing.Imaging.Metafile.PlayRecord%2A>, он должен сделать это путем вызова <xref:System.Drawing.Imaging.Metafile.PlayRecord%2A> метод конкретной <xref:System.Drawing.Imaging.Metafile> перечисляемого.  
  
 Изображение атрибутами, заданными `imageAttr` параметр replace, те, указанного при записи метафайла.  
  
   
  
## Examples  
 Пример кода см. в разделе <xref:System.Drawing.Graphics.EnumerateMetafile%28System.Drawing.Imaging.Metafile%2CSystem.Drawing.Point%2CSystem.Drawing.Graphics.EnumerateMetafileProc%29>.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="EnumerateMetafile">
      <MemberSignature Language="C#" Value="public void EnumerateMetafile (System.Drawing.Imaging.Metafile metafile, System.Drawing.Rectangle destRect, System.Drawing.Rectangle srcRect, System.Drawing.GraphicsUnit srcUnit, System.Drawing.Graphics.EnumerateMetafileProc callback);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void EnumerateMetafile(class System.Drawing.Imaging.Metafile metafile, valuetype System.Drawing.Rectangle destRect, valuetype System.Drawing.Rectangle srcRect, valuetype System.Drawing.GraphicsUnit srcUnit, class System.Drawing.Graphics/EnumerateMetafileProc callback) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.EnumerateMetafile(System.Drawing.Imaging.Metafile,System.Drawing.Rectangle,System.Drawing.Rectangle,System.Drawing.GraphicsUnit,System.Drawing.Graphics.EnumerateMetafileProc)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void EnumerateMetafile(System::Drawing::Imaging::Metafile ^ metafile, System::Drawing::Rectangle destRect, System::Drawing::Rectangle srcRect, System::Drawing::GraphicsUnit srcUnit, System::Drawing::Graphics::EnumerateMetafileProc ^ callback);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="metafile" Type="System.Drawing.Imaging.Metafile" />
        <Parameter Name="destRect" Type="System.Drawing.Rectangle" />
        <Parameter Name="srcRect" Type="System.Drawing.Rectangle" />
        <Parameter Name="srcUnit" Type="System.Drawing.GraphicsUnit" />
        <Parameter Name="callback" Type="System.Drawing.Graphics+EnumerateMetafileProc" />
      </Parameters>
      <Docs>
        <param name="metafile">
          Объект <see cref="T:System.Drawing.Imaging.Metafile" /> для перечисления. </param>
        <param name="destRect">
          Структура <see cref="T:System.Drawing.Rectangle" />, которая задает расположение и размер отображаемого метафайла.</param>
        <param name="srcRect">
          Структура <see cref="T:System.Drawing.Rectangle" />, задающая часть метафайла, предназначенную для рисования, относительно его верхнего левого угла.</param>
        <param name="srcUnit">Элемент перечисления <see cref="T:System.Drawing.GraphicsUnit" />, задающий единицу измерения, которая должна использоваться для определения части метафайла, содержащейся в прямоугольнике, указываемом параметром <c>srcRect</c>.</param>
        <param name="callback">
          Делегат <see cref="T:System.Drawing.Graphics.EnumerateMetafileProc" />, задающий метод, в который отправляются записи метафайлов.</param>
        <summary>Отправляет записи в выбранном прямоугольнике из объекта <see cref="T:System.Drawing.Imaging.Metafile" /> по одной записи за раз в метод обратного вызова, который отображает их в заданном прямоугольнике.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Этот метод перечисляет записи, содержащиеся в указанном метафайле. Каждая запись отдельно отправляется в метод обратного вызова, заданные `callback` параметра. Как правило, метод обратного вызова вызывает <xref:System.Drawing.Imaging.Metafile.PlayRecord%2A> метод «воспроизведение», или draw, запись.  
  
 Если метод обратного вызова вызывает <xref:System.Drawing.Imaging.Metafile.PlayRecord%2A>, он должен сделать это путем вызова <xref:System.Drawing.Imaging.Metafile.PlayRecord%2A> метод конкретной <xref:System.Drawing.Imaging.Metafile> перечисляемого.  
  
 Изображение, расположенное вне прямоугольника, заданного параметром `srcRect` параметр учитывается.  
  
   
  
## Examples  
 Пример кода см. в разделе <xref:System.Drawing.Graphics.EnumerateMetafile%28System.Drawing.Imaging.Metafile%2CSystem.Drawing.Point%2CSystem.Drawing.Graphics.EnumerateMetafileProc%29>.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="EnumerateMetafile">
      <MemberSignature Language="C#" Value="public void EnumerateMetafile (System.Drawing.Imaging.Metafile metafile, System.Drawing.RectangleF destRect, System.Drawing.Graphics.EnumerateMetafileProc callback, IntPtr callbackData, System.Drawing.Imaging.ImageAttributes imageAttr);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void EnumerateMetafile(class System.Drawing.Imaging.Metafile metafile, valuetype System.Drawing.RectangleF destRect, class System.Drawing.Graphics/EnumerateMetafileProc callback, native int callbackData, class System.Drawing.Imaging.ImageAttributes imageAttr) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.EnumerateMetafile(System.Drawing.Imaging.Metafile,System.Drawing.RectangleF,System.Drawing.Graphics.EnumerateMetafileProc,System.IntPtr,System.Drawing.Imaging.ImageAttributes)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void EnumerateMetafile(System::Drawing::Imaging::Metafile ^ metafile, System::Drawing::RectangleF destRect, System::Drawing::Graphics::EnumerateMetafileProc ^ callback, IntPtr callbackData, System::Drawing::Imaging::ImageAttributes ^ imageAttr);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="metafile" Type="System.Drawing.Imaging.Metafile" />
        <Parameter Name="destRect" Type="System.Drawing.RectangleF" />
        <Parameter Name="callback" Type="System.Drawing.Graphics+EnumerateMetafileProc" />
        <Parameter Name="callbackData" Type="System.IntPtr" />
        <Parameter Name="imageAttr" Type="System.Drawing.Imaging.ImageAttributes" />
      </Parameters>
      <Docs>
        <param name="metafile">
          Объект <see cref="T:System.Drawing.Imaging.Metafile" /> для перечисления. </param>
        <param name="destRect">
          Структура <see cref="T:System.Drawing.RectangleF" />, которая задает расположение и размер отображаемого метафайла.</param>
        <param name="callback">
          Делегат <see cref="T:System.Drawing.Graphics.EnumerateMetafileProc" />, задающий метод, в который отправляются записи метафайлов.</param>
        <param name="callbackData">Внутренний указатель, который является обязательным, однако не обрабатывается. Для этого параметра можно передать объект <see cref="F:System.IntPtr.Zero" />.</param>
        <param name="imageAttr">
          Объект <see cref="T:System.Drawing.Imaging.ImageAttributes" />, задающий сведения об атрибутах формируемого изображения.</param>
        <summary>Отправляет записи указанного объекта <see cref="T:System.Drawing.Imaging.Metafile" /> по одной записи за раз в метод обратного вызова, который отображает их в заданном прямоугольнике, используя указанные атрибуты изображения.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Этот метод перечисляет записи, содержащиеся в указанном метафайле. Каждая запись отдельно отправляется в метод обратного вызова, заданные `callback` параметра. Как правило, метод обратного вызова вызывает <xref:System.Drawing.Imaging.Metafile.PlayRecord%2A> метод «воспроизведение», или draw, запись.  
  
 Если метод обратного вызова вызывает <xref:System.Drawing.Imaging.Metafile.PlayRecord%2A>, он должен сделать это путем вызова <xref:System.Drawing.Imaging.Metafile.PlayRecord%2A> метод конкретной <xref:System.Drawing.Imaging.Metafile> перечисляемого.  
  
 Изображение атрибутами, заданными `imageAttr` параметр replace, те, указанного при записи метафайла.  
  
   
  
## Examples  
 Пример кода см. в разделе <xref:System.Drawing.Graphics.EnumerateMetafile%28System.Drawing.Imaging.Metafile%2CSystem.Drawing.Point%2CSystem.Drawing.Graphics.EnumerateMetafileProc%29>.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="EnumerateMetafile">
      <MemberSignature Language="C#" Value="public void EnumerateMetafile (System.Drawing.Imaging.Metafile metafile, System.Drawing.RectangleF destRect, System.Drawing.RectangleF srcRect, System.Drawing.GraphicsUnit srcUnit, System.Drawing.Graphics.EnumerateMetafileProc callback);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void EnumerateMetafile(class System.Drawing.Imaging.Metafile metafile, valuetype System.Drawing.RectangleF destRect, valuetype System.Drawing.RectangleF srcRect, valuetype System.Drawing.GraphicsUnit srcUnit, class System.Drawing.Graphics/EnumerateMetafileProc callback) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.EnumerateMetafile(System.Drawing.Imaging.Metafile,System.Drawing.RectangleF,System.Drawing.RectangleF,System.Drawing.GraphicsUnit,System.Drawing.Graphics.EnumerateMetafileProc)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void EnumerateMetafile(System::Drawing::Imaging::Metafile ^ metafile, System::Drawing::RectangleF destRect, System::Drawing::RectangleF srcRect, System::Drawing::GraphicsUnit srcUnit, System::Drawing::Graphics::EnumerateMetafileProc ^ callback);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="metafile" Type="System.Drawing.Imaging.Metafile" />
        <Parameter Name="destRect" Type="System.Drawing.RectangleF" />
        <Parameter Name="srcRect" Type="System.Drawing.RectangleF" />
        <Parameter Name="srcUnit" Type="System.Drawing.GraphicsUnit" />
        <Parameter Name="callback" Type="System.Drawing.Graphics+EnumerateMetafileProc" />
      </Parameters>
      <Docs>
        <param name="metafile">
          Объект <see cref="T:System.Drawing.Imaging.Metafile" /> для перечисления. </param>
        <param name="destRect">
          Структура <see cref="T:System.Drawing.RectangleF" />, которая задает расположение и размер отображаемого метафайла.</param>
        <param name="srcRect">
          Структура <see cref="T:System.Drawing.RectangleF" />, задающая часть метафайла, предназначенную для рисования, относительно его верхнего левого угла.</param>
        <param name="srcUnit">Элемент перечисления <see cref="T:System.Drawing.GraphicsUnit" />, задающий единицу измерения, которая должна использоваться для определения части метафайла, содержащейся в прямоугольнике, указываемом параметром <c>srcRect</c>.</param>
        <param name="callback">
          Делегат <see cref="T:System.Drawing.Graphics.EnumerateMetafileProc" />, задающий метод, в который отправляются записи метафайлов.</param>
        <summary>Отправляет записи в выбранном прямоугольнике из объекта <see cref="T:System.Drawing.Imaging.Metafile" /> по одной записи за раз в метод обратного вызова, который отображает их в заданном прямоугольнике.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Этот метод перечисляет записи, содержащиеся в указанном метафайле. Каждая запись отдельно отправляется в метод обратного вызова, заданные `callback` параметра. Как правило, метод обратного вызова вызывает <xref:System.Drawing.Imaging.Metafile.PlayRecord%2A> метод «воспроизведение», или draw, запись.  
  
 Если метод обратного вызова вызывает <xref:System.Drawing.Imaging.Metafile.PlayRecord%2A>, он должен сделать это путем вызова <xref:System.Drawing.Imaging.Metafile.PlayRecord%2A> метод конкретной <xref:System.Drawing.Imaging.Metafile> перечисляемого.  
  
 Изображение, расположенное вне прямоугольника, заданного параметром `srcRect` параметр учитывается.  
  
   
  
## Examples  
 Пример кода см. в разделе <xref:System.Drawing.Graphics.EnumerateMetafile%28System.Drawing.Imaging.Metafile%2CSystem.Drawing.Point%2CSystem.Drawing.Graphics.EnumerateMetafileProc%29>.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="EnumerateMetafile">
      <MemberSignature Language="C#" Value="public void EnumerateMetafile (System.Drawing.Imaging.Metafile metafile, System.Drawing.Point destPoint, System.Drawing.Rectangle srcRect, System.Drawing.GraphicsUnit srcUnit, System.Drawing.Graphics.EnumerateMetafileProc callback, IntPtr callbackData);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void EnumerateMetafile(class System.Drawing.Imaging.Metafile metafile, valuetype System.Drawing.Point destPoint, valuetype System.Drawing.Rectangle srcRect, valuetype System.Drawing.GraphicsUnit srcUnit, class System.Drawing.Graphics/EnumerateMetafileProc callback, native int callbackData) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.EnumerateMetafile(System.Drawing.Imaging.Metafile,System.Drawing.Point,System.Drawing.Rectangle,System.Drawing.GraphicsUnit,System.Drawing.Graphics.EnumerateMetafileProc,System.IntPtr)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void EnumerateMetafile(System::Drawing::Imaging::Metafile ^ metafile, System::Drawing::Point destPoint, System::Drawing::Rectangle srcRect, System::Drawing::GraphicsUnit srcUnit, System::Drawing::Graphics::EnumerateMetafileProc ^ callback, IntPtr callbackData);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="metafile" Type="System.Drawing.Imaging.Metafile" />
        <Parameter Name="destPoint" Type="System.Drawing.Point" />
        <Parameter Name="srcRect" Type="System.Drawing.Rectangle" />
        <Parameter Name="srcUnit" Type="System.Drawing.GraphicsUnit" />
        <Parameter Name="callback" Type="System.Drawing.Graphics+EnumerateMetafileProc" />
        <Parameter Name="callbackData" Type="System.IntPtr" />
      </Parameters>
      <Docs>
        <param name="metafile">
          Объект <see cref="T:System.Drawing.Imaging.Metafile" /> для перечисления. </param>
        <param name="destPoint">
          Структура <see cref="T:System.Drawing.Point" />, задающая положение верхнего левого угла отображаемого метафайла.</param>
        <param name="srcRect">
          Структура <see cref="T:System.Drawing.Rectangle" />, задающая часть метафайла, предназначенную для рисования, относительно его верхнего левого угла.</param>
        <param name="srcUnit">Элемент перечисления <see cref="T:System.Drawing.GraphicsUnit" />, задающий единицу измерения, которая должна использоваться для определения части метафайла, содержащейся в прямоугольнике, указываемом параметром <c>srcRect</c>.</param>
        <param name="callback">
          Делегат <see cref="T:System.Drawing.Graphics.EnumerateMetafileProc" />, задающий метод, в который отправляются записи метафайлов.</param>
        <param name="callbackData">Внутренний указатель, который является обязательным, однако не обрабатывается. Для этого параметра можно передать объект <see cref="F:System.IntPtr.Zero" />.</param>
        <summary>Отправляет записи в выбранном прямоугольнике из объекта <see cref="T:System.Drawing.Imaging.Metafile" /> по одной записи за раз в метод обратного вызова, который отображает их в заданной точке.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Этот метод перечисляет записи, содержащиеся в указанном метафайле. Каждая запись отдельно отправляется в метод обратного вызова, заданные `callback` параметра. Как правило, метод обратного вызова вызывает <xref:System.Drawing.Imaging.Metafile.PlayRecord%2A> метод «воспроизведение», или draw, запись.  
  
 Если метод обратного вызова вызывает <xref:System.Drawing.Imaging.Metafile.PlayRecord%2A>, он должен сделать это путем вызова <xref:System.Drawing.Imaging.Metafile.PlayRecord%2A> метод конкретной <xref:System.Drawing.Imaging.Metafile> перечисляемого.  
  
   
  
## Examples  
 Пример кода см. в разделе <xref:System.Drawing.Graphics.EnumerateMetafile%28System.Drawing.Imaging.Metafile%2CSystem.Drawing.Point%2CSystem.Drawing.Graphics.EnumerateMetafileProc%29>.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="EnumerateMetafile">
      <MemberSignature Language="C#" Value="public void EnumerateMetafile (System.Drawing.Imaging.Metafile metafile, System.Drawing.Point[] destPoints, System.Drawing.Rectangle srcRect, System.Drawing.GraphicsUnit srcUnit, System.Drawing.Graphics.EnumerateMetafileProc callback, IntPtr callbackData);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void EnumerateMetafile(class System.Drawing.Imaging.Metafile metafile, valuetype System.Drawing.Point[] destPoints, valuetype System.Drawing.Rectangle srcRect, valuetype System.Drawing.GraphicsUnit srcUnit, class System.Drawing.Graphics/EnumerateMetafileProc callback, native int callbackData) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.EnumerateMetafile(System.Drawing.Imaging.Metafile,System.Drawing.Point[],System.Drawing.Rectangle,System.Drawing.GraphicsUnit,System.Drawing.Graphics.EnumerateMetafileProc,System.IntPtr)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void EnumerateMetafile(System::Drawing::Imaging::Metafile ^ metafile, cli::array &lt;System::Drawing::Point&gt; ^ destPoints, System::Drawing::Rectangle srcRect, System::Drawing::GraphicsUnit srcUnit, System::Drawing::Graphics::EnumerateMetafileProc ^ callback, IntPtr callbackData);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="metafile" Type="System.Drawing.Imaging.Metafile" />
        <Parameter Name="destPoints" Type="System.Drawing.Point[]" />
        <Parameter Name="srcRect" Type="System.Drawing.Rectangle" />
        <Parameter Name="srcUnit" Type="System.Drawing.GraphicsUnit" />
        <Parameter Name="callback" Type="System.Drawing.Graphics+EnumerateMetafileProc" />
        <Parameter Name="callbackData" Type="System.IntPtr" />
      </Parameters>
      <Docs>
        <param name="metafile">
          Объект <see cref="T:System.Drawing.Imaging.Metafile" /> для перечисления. </param>
        <param name="destPoints">Массив из трех структур <see cref="T:System.Drawing.Point" />, определяющих параллелограмм, который задает размер и расположение отображаемого метафайла.</param>
        <param name="srcRect">
          Структура <see cref="T:System.Drawing.Rectangle" />, задающая часть метафайла, предназначенную для рисования, относительно его верхнего левого угла.</param>
        <param name="srcUnit">Элемент перечисления <see cref="T:System.Drawing.GraphicsUnit" />, задающий единицу измерения, которая должна использоваться для определения части метафайла, содержащейся в прямоугольнике, указываемом параметром <c>srcRect</c>.</param>
        <param name="callback">
          Делегат <see cref="T:System.Drawing.Graphics.EnumerateMetafileProc" />, задающий метод, в который отправляются записи метафайлов.</param>
        <param name="callbackData">Внутренний указатель, который является обязательным, однако не обрабатывается. Для этого параметра можно передать объект <see cref="F:System.IntPtr.Zero" />.</param>
        <summary>Отправляет записи в выбранном прямоугольнике из объекта <see cref="T:System.Drawing.Imaging.Metafile" /> по одной записи за раз в метод обратного вызова, который отображает их в заданном параллелограмме.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Этот метод перечисляет записи, содержащиеся в указанном метафайле. Каждая запись отдельно отправляется в метод обратного вызова, заданные `callback` параметра. Как правило, метод обратного вызова вызывает <xref:System.Drawing.Imaging.Metafile.PlayRecord%2A> метод «воспроизведение», или draw, запись.  
  
 Если метод обратного вызова вызывает <xref:System.Drawing.Imaging.Metafile.PlayRecord%2A>, он должен сделать это путем вызова <xref:System.Drawing.Imaging.Metafile.PlayRecord%2A> метод конкретной <xref:System.Drawing.Imaging.Metafile> перечисляемого.  
  
 `destPoints` Параметр задает три точки параллелограмма. Три <xref:System.Drawing.Point> структуры представляют собой левый верхний, правый верхний и левый нижний углы параллелограмма. Четвертая точка определяется по первым трем параллелограмма. Масштабируется и обрезается по размерам параллелограмма отображаемого метафайла.  
  
 Изображение, расположенное вне прямоугольника, заданного параметром `srcRect` параметр учитывается.  
  
   
  
## Examples  
 Пример кода см. в разделе <xref:System.Drawing.Graphics.EnumerateMetafile%28System.Drawing.Imaging.Metafile%2CSystem.Drawing.Point%2CSystem.Drawing.Graphics.EnumerateMetafileProc%29>.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="EnumerateMetafile">
      <MemberSignature Language="C#" Value="public void EnumerateMetafile (System.Drawing.Imaging.Metafile metafile, System.Drawing.PointF destPoint, System.Drawing.RectangleF srcRect, System.Drawing.GraphicsUnit srcUnit, System.Drawing.Graphics.EnumerateMetafileProc callback, IntPtr callbackData);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void EnumerateMetafile(class System.Drawing.Imaging.Metafile metafile, valuetype System.Drawing.PointF destPoint, valuetype System.Drawing.RectangleF srcRect, valuetype System.Drawing.GraphicsUnit srcUnit, class System.Drawing.Graphics/EnumerateMetafileProc callback, native int callbackData) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.EnumerateMetafile(System.Drawing.Imaging.Metafile,System.Drawing.PointF,System.Drawing.RectangleF,System.Drawing.GraphicsUnit,System.Drawing.Graphics.EnumerateMetafileProc,System.IntPtr)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void EnumerateMetafile(System::Drawing::Imaging::Metafile ^ metafile, System::Drawing::PointF destPoint, System::Drawing::RectangleF srcRect, System::Drawing::GraphicsUnit srcUnit, System::Drawing::Graphics::EnumerateMetafileProc ^ callback, IntPtr callbackData);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="metafile" Type="System.Drawing.Imaging.Metafile" />
        <Parameter Name="destPoint" Type="System.Drawing.PointF" />
        <Parameter Name="srcRect" Type="System.Drawing.RectangleF" />
        <Parameter Name="srcUnit" Type="System.Drawing.GraphicsUnit" />
        <Parameter Name="callback" Type="System.Drawing.Graphics+EnumerateMetafileProc" />
        <Parameter Name="callbackData" Type="System.IntPtr" />
      </Parameters>
      <Docs>
        <param name="metafile">
          Объект <see cref="T:System.Drawing.Imaging.Metafile" /> для перечисления. </param>
        <param name="destPoint">
          Структура <see cref="T:System.Drawing.PointF" />, задающая положение верхнего левого угла отображаемого метафайла.</param>
        <param name="srcRect">
          Структура <see cref="T:System.Drawing.RectangleF" />, задающая часть метафайла, предназначенную для рисования, относительно его верхнего левого угла.</param>
        <param name="srcUnit">Элемент перечисления <see cref="T:System.Drawing.GraphicsUnit" />, задающий единицу измерения, которая должна использоваться для определения части метафайла, содержащейся в прямоугольнике, указываемом параметром <c>srcRect</c>.</param>
        <param name="callback">
          Делегат <see cref="T:System.Drawing.Graphics.EnumerateMetafileProc" />, задающий метод, в который отправляются записи метафайлов.</param>
        <param name="callbackData">Внутренний указатель, который является обязательным, однако не обрабатывается. Для этого параметра можно передать объект <see cref="F:System.IntPtr.Zero" />.</param>
        <summary>Отправляет записи в выбранном прямоугольнике из объекта <see cref="T:System.Drawing.Imaging.Metafile" /> по одной записи за раз в метод обратного вызова, который отображает их в заданной точке.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Этот метод перечисляет записи, содержащиеся в указанном метафайле. Каждая запись отдельно отправляется в метод обратного вызова, заданные `callback` параметра. Как правило, метод обратного вызова вызывает <xref:System.Drawing.Imaging.Metafile.PlayRecord%2A> метод «воспроизведение», или draw, запись.  
  
 Если метод обратного вызова вызывает <xref:System.Drawing.Imaging.Metafile.PlayRecord%2A>, он должен сделать это путем вызова <xref:System.Drawing.Imaging.Metafile.PlayRecord%2A> метод конкретной <xref:System.Drawing.Imaging.Metafile> перечисляемого.  
  
 Изображение, расположенное вне прямоугольника, заданного параметром `srcRect` параметр учитывается.  
  
   
  
## Examples  
 Пример кода см. в разделе <xref:System.Drawing.Graphics.EnumerateMetafile%28System.Drawing.Imaging.Metafile%2CSystem.Drawing.Point%2CSystem.Drawing.Graphics.EnumerateMetafileProc%29>.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="EnumerateMetafile">
      <MemberSignature Language="C#" Value="public void EnumerateMetafile (System.Drawing.Imaging.Metafile metafile, System.Drawing.PointF[] destPoints, System.Drawing.RectangleF srcRect, System.Drawing.GraphicsUnit srcUnit, System.Drawing.Graphics.EnumerateMetafileProc callback, IntPtr callbackData);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void EnumerateMetafile(class System.Drawing.Imaging.Metafile metafile, valuetype System.Drawing.PointF[] destPoints, valuetype System.Drawing.RectangleF srcRect, valuetype System.Drawing.GraphicsUnit srcUnit, class System.Drawing.Graphics/EnumerateMetafileProc callback, native int callbackData) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.EnumerateMetafile(System.Drawing.Imaging.Metafile,System.Drawing.PointF[],System.Drawing.RectangleF,System.Drawing.GraphicsUnit,System.Drawing.Graphics.EnumerateMetafileProc,System.IntPtr)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void EnumerateMetafile(System::Drawing::Imaging::Metafile ^ metafile, cli::array &lt;System::Drawing::PointF&gt; ^ destPoints, System::Drawing::RectangleF srcRect, System::Drawing::GraphicsUnit srcUnit, System::Drawing::Graphics::EnumerateMetafileProc ^ callback, IntPtr callbackData);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="metafile" Type="System.Drawing.Imaging.Metafile" />
        <Parameter Name="destPoints" Type="System.Drawing.PointF[]" />
        <Parameter Name="srcRect" Type="System.Drawing.RectangleF" />
        <Parameter Name="srcUnit" Type="System.Drawing.GraphicsUnit" />
        <Parameter Name="callback" Type="System.Drawing.Graphics+EnumerateMetafileProc" />
        <Parameter Name="callbackData" Type="System.IntPtr" />
      </Parameters>
      <Docs>
        <param name="metafile">
          Объект <see cref="T:System.Drawing.Imaging.Metafile" /> для перечисления. </param>
        <param name="destPoints">Массив из трех структур <see cref="T:System.Drawing.PointF" />, определяющих параллелограмм, который задает размер и расположение отображаемого метафайла.</param>
        <param name="srcRect">
          Структура <see cref="T:System.Drawing.RectangleF" />, задающая часть метафайла, предназначенную для рисования, относительно его верхнего левого угла.</param>
        <param name="srcUnit">Элемент перечисления <see cref="T:System.Drawing.GraphicsUnit" />, задающий единицу измерения, которая должна использоваться для определения части метафайла, содержащейся в прямоугольнике, указываемом параметром <c>srcRect</c>.</param>
        <param name="callback">
          Делегат <see cref="T:System.Drawing.Graphics.EnumerateMetafileProc" />, задающий метод, в который отправляются записи метафайлов.</param>
        <param name="callbackData">Внутренний указатель, который является обязательным, однако не обрабатывается. Для этого параметра можно передать объект <see cref="F:System.IntPtr.Zero" />.</param>
        <summary>Отправляет записи в выбранном прямоугольнике из объекта <see cref="T:System.Drawing.Imaging.Metafile" /> по одной записи за раз в метод обратного вызова, который отображает их в заданном параллелограмме.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Этот метод перечисляет записи, содержащиеся в указанном метафайле. Каждая запись отдельно отправляется в метод обратного вызова, заданные `callback` параметра. Как правило, метод обратного вызова вызывает <xref:System.Drawing.Imaging.Metafile.PlayRecord%2A> метод «воспроизведение», или draw, запись.  
  
 Если метод обратного вызова вызывает <xref:System.Drawing.Imaging.Metafile.PlayRecord%2A>, он должен сделать это путем вызова <xref:System.Drawing.Imaging.Metafile.PlayRecord%2A> метод конкретной <xref:System.Drawing.Imaging.Metafile> перечисляемого.  
  
 `destPoints` Параметр задает три точки параллелограмма. Три <xref:System.Drawing.PointF> структуры представляют собой левый верхний, правый верхний и левый нижний углы параллелограмма. Четвертая точка определяется по первым трем параллелограмма. Масштабируется и обрезается по размерам параллелограмма отображаемого метафайла.  
  
 Изображение, расположенное вне прямоугольника, заданного параметром `srcRect` параметр учитывается.  
  
   
  
## Examples  
 Пример кода см. в разделе <xref:System.Drawing.Graphics.EnumerateMetafile%28System.Drawing.Imaging.Metafile%2CSystem.Drawing.Point%2CSystem.Drawing.Graphics.EnumerateMetafileProc%29>.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="EnumerateMetafile">
      <MemberSignature Language="C#" Value="public void EnumerateMetafile (System.Drawing.Imaging.Metafile metafile, System.Drawing.Rectangle destRect, System.Drawing.Rectangle srcRect, System.Drawing.GraphicsUnit srcUnit, System.Drawing.Graphics.EnumerateMetafileProc callback, IntPtr callbackData);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void EnumerateMetafile(class System.Drawing.Imaging.Metafile metafile, valuetype System.Drawing.Rectangle destRect, valuetype System.Drawing.Rectangle srcRect, valuetype System.Drawing.GraphicsUnit srcUnit, class System.Drawing.Graphics/EnumerateMetafileProc callback, native int callbackData) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.EnumerateMetafile(System.Drawing.Imaging.Metafile,System.Drawing.Rectangle,System.Drawing.Rectangle,System.Drawing.GraphicsUnit,System.Drawing.Graphics.EnumerateMetafileProc,System.IntPtr)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void EnumerateMetafile(System::Drawing::Imaging::Metafile ^ metafile, System::Drawing::Rectangle destRect, System::Drawing::Rectangle srcRect, System::Drawing::GraphicsUnit srcUnit, System::Drawing::Graphics::EnumerateMetafileProc ^ callback, IntPtr callbackData);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="metafile" Type="System.Drawing.Imaging.Metafile" />
        <Parameter Name="destRect" Type="System.Drawing.Rectangle" />
        <Parameter Name="srcRect" Type="System.Drawing.Rectangle" />
        <Parameter Name="srcUnit" Type="System.Drawing.GraphicsUnit" />
        <Parameter Name="callback" Type="System.Drawing.Graphics+EnumerateMetafileProc" />
        <Parameter Name="callbackData" Type="System.IntPtr" />
      </Parameters>
      <Docs>
        <param name="metafile">
          Объект <see cref="T:System.Drawing.Imaging.Metafile" /> для перечисления. </param>
        <param name="destRect">
          Структура <see cref="T:System.Drawing.Rectangle" />, которая задает расположение и размер отображаемого метафайла.</param>
        <param name="srcRect">
          Структура <see cref="T:System.Drawing.Rectangle" />, задающая часть метафайла, предназначенную для рисования, относительно его верхнего левого угла.</param>
        <param name="srcUnit">Элемент перечисления <see cref="T:System.Drawing.GraphicsUnit" />, задающий единицу измерения, которая должна использоваться для определения части метафайла, содержащейся в прямоугольнике, указываемом параметром <c>srcRect</c>.</param>
        <param name="callback">
          Делегат <see cref="T:System.Drawing.Graphics.EnumerateMetafileProc" />, задающий метод, в который отправляются записи метафайлов.</param>
        <param name="callbackData">Внутренний указатель, который является обязательным, однако не обрабатывается. Для этого параметра можно передать объект <see cref="F:System.IntPtr.Zero" />.</param>
        <summary>Отправляет записи в выбранном прямоугольнике из объекта <see cref="T:System.Drawing.Imaging.Metafile" /> по одной записи за раз в метод обратного вызова, который отображает их в заданном прямоугольнике.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Этот метод перечисляет записи, содержащиеся в указанном метафайле. Каждая запись отдельно отправляется в метод обратного вызова, заданные `callback` параметра. Как правило, метод обратного вызова вызывает <xref:System.Drawing.Imaging.Metafile.PlayRecord%2A> метод «воспроизведение», или draw, запись.  
  
 Если метод обратного вызова вызывает <xref:System.Drawing.Imaging.Metafile.PlayRecord%2A>, он должен сделать это путем вызова <xref:System.Drawing.Imaging.Metafile.PlayRecord%2A> метод конкретной <xref:System.Drawing.Imaging.Metafile> перечисляемого.  
  
 Изображение, расположенное вне прямоугольника, заданного параметром `srcRect` параметр учитывается.  
  
   
  
## Examples  
 Пример кода см. в разделе <xref:System.Drawing.Graphics.EnumerateMetafile%28System.Drawing.Imaging.Metafile%2CSystem.Drawing.Point%2CSystem.Drawing.Graphics.EnumerateMetafileProc%29>.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="EnumerateMetafile">
      <MemberSignature Language="C#" Value="public void EnumerateMetafile (System.Drawing.Imaging.Metafile metafile, System.Drawing.RectangleF destRect, System.Drawing.RectangleF srcRect, System.Drawing.GraphicsUnit srcUnit, System.Drawing.Graphics.EnumerateMetafileProc callback, IntPtr callbackData);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void EnumerateMetafile(class System.Drawing.Imaging.Metafile metafile, valuetype System.Drawing.RectangleF destRect, valuetype System.Drawing.RectangleF srcRect, valuetype System.Drawing.GraphicsUnit srcUnit, class System.Drawing.Graphics/EnumerateMetafileProc callback, native int callbackData) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.EnumerateMetafile(System.Drawing.Imaging.Metafile,System.Drawing.RectangleF,System.Drawing.RectangleF,System.Drawing.GraphicsUnit,System.Drawing.Graphics.EnumerateMetafileProc,System.IntPtr)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void EnumerateMetafile(System::Drawing::Imaging::Metafile ^ metafile, System::Drawing::RectangleF destRect, System::Drawing::RectangleF srcRect, System::Drawing::GraphicsUnit srcUnit, System::Drawing::Graphics::EnumerateMetafileProc ^ callback, IntPtr callbackData);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="metafile" Type="System.Drawing.Imaging.Metafile" />
        <Parameter Name="destRect" Type="System.Drawing.RectangleF" />
        <Parameter Name="srcRect" Type="System.Drawing.RectangleF" />
        <Parameter Name="srcUnit" Type="System.Drawing.GraphicsUnit" />
        <Parameter Name="callback" Type="System.Drawing.Graphics+EnumerateMetafileProc" />
        <Parameter Name="callbackData" Type="System.IntPtr" />
      </Parameters>
      <Docs>
        <param name="metafile">
          Объект <see cref="T:System.Drawing.Imaging.Metafile" /> для перечисления. </param>
        <param name="destRect">
          Структура <see cref="T:System.Drawing.RectangleF" />, которая задает расположение и размер отображаемого метафайла.</param>
        <param name="srcRect">
          Структура <see cref="T:System.Drawing.RectangleF" />, задающая часть метафайла, предназначенную для рисования, относительно его верхнего левого угла.</param>
        <param name="srcUnit">Элемент перечисления <see cref="T:System.Drawing.GraphicsUnit" />, задающий единицу измерения, которая должна использоваться для определения части метафайла, содержащейся в прямоугольнике, указываемом параметром <c>srcRect</c>.</param>
        <param name="callback">
          Делегат <see cref="T:System.Drawing.Graphics.EnumerateMetafileProc" />, задающий метод, в который отправляются записи метафайлов.</param>
        <param name="callbackData">Внутренний указатель, который является обязательным, однако не обрабатывается. Для этого параметра можно передать объект <see cref="F:System.IntPtr.Zero" />.</param>
        <summary>Отправляет записи в выбранном прямоугольнике из объекта <see cref="T:System.Drawing.Imaging.Metafile" /> по одной записи за раз в метод обратного вызова, который отображает их в заданном прямоугольнике.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Этот метод перечисляет записи, содержащиеся в указанном метафайле. Каждая запись отдельно отправляется в метод обратного вызова, заданные`callback` параметра. Как правило, метод обратного вызова вызывает <xref:System.Drawing.Imaging.Metafile.PlayRecord%2A> метод «воспроизведение», или draw, запись.  
  
 Если метод обратного вызова вызывает <xref:System.Drawing.Imaging.Metafile.PlayRecord%2A>, он должен сделать это путем вызова <xref:System.Drawing.Imaging.Metafile.PlayRecord%2A> метод конкретной <xref:System.Drawing.Imaging.Metafile> перечисляемого.  
  
 Изображение, расположенное вне прямоугольника, заданного параметром `srcRect` параметр учитывается.  
  
   
  
## Examples  
 Пример кода см. в разделе <xref:System.Drawing.Graphics.EnumerateMetafile%28System.Drawing.Imaging.Metafile%2CSystem.Drawing.Point%2CSystem.Drawing.Graphics.EnumerateMetafileProc%29>.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="EnumerateMetafile">
      <MemberSignature Language="C#" Value="public void EnumerateMetafile (System.Drawing.Imaging.Metafile metafile, System.Drawing.Point destPoint, System.Drawing.Rectangle srcRect, System.Drawing.GraphicsUnit unit, System.Drawing.Graphics.EnumerateMetafileProc callback, IntPtr callbackData, System.Drawing.Imaging.ImageAttributes imageAttr);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void EnumerateMetafile(class System.Drawing.Imaging.Metafile metafile, valuetype System.Drawing.Point destPoint, valuetype System.Drawing.Rectangle srcRect, valuetype System.Drawing.GraphicsUnit unit, class System.Drawing.Graphics/EnumerateMetafileProc callback, native int callbackData, class System.Drawing.Imaging.ImageAttributes imageAttr) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.EnumerateMetafile(System.Drawing.Imaging.Metafile,System.Drawing.Point,System.Drawing.Rectangle,System.Drawing.GraphicsUnit,System.Drawing.Graphics.EnumerateMetafileProc,System.IntPtr,System.Drawing.Imaging.ImageAttributes)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void EnumerateMetafile(System::Drawing::Imaging::Metafile ^ metafile, System::Drawing::Point destPoint, System::Drawing::Rectangle srcRect, System::Drawing::GraphicsUnit unit, System::Drawing::Graphics::EnumerateMetafileProc ^ callback, IntPtr callbackData, System::Drawing::Imaging::ImageAttributes ^ imageAttr);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="metafile" Type="System.Drawing.Imaging.Metafile" />
        <Parameter Name="destPoint" Type="System.Drawing.Point" />
        <Parameter Name="srcRect" Type="System.Drawing.Rectangle" />
        <Parameter Name="unit" Type="System.Drawing.GraphicsUnit" />
        <Parameter Name="callback" Type="System.Drawing.Graphics+EnumerateMetafileProc" />
        <Parameter Name="callbackData" Type="System.IntPtr" />
        <Parameter Name="imageAttr" Type="System.Drawing.Imaging.ImageAttributes" />
      </Parameters>
      <Docs>
        <param name="metafile">
          Объект <see cref="T:System.Drawing.Imaging.Metafile" /> для перечисления. </param>
        <param name="destPoint">
          Структура <see cref="T:System.Drawing.Point" />, задающая положение верхнего левого угла отображаемого метафайла.</param>
        <param name="srcRect">
          Структура <see cref="T:System.Drawing.Rectangle" />, задающая часть метафайла, предназначенную для рисования, относительно его верхнего левого угла.</param>
        <param name="unit">Элемент перечисления <see cref="T:System.Drawing.GraphicsUnit" />, задающий единицу измерения, которая должна использоваться для определения части метафайла, содержащейся в прямоугольнике, указываемом параметром <c>srcRect</c>.</param>
        <param name="callback">
          Делегат <see cref="T:System.Drawing.Graphics.EnumerateMetafileProc" />, задающий метод, в который отправляются записи метафайлов.</param>
        <param name="callbackData">Внутренний указатель, который является обязательным, однако не обрабатывается. Для этого параметра можно передать объект <see cref="F:System.IntPtr.Zero" />.</param>
        <param name="imageAttr">
          Объект <see cref="T:System.Drawing.Imaging.ImageAttributes" />, задающий сведения об атрибутах формируемого изображения.</param>
        <summary>Отправляет записи в выбранном прямоугольнике из объекта <see cref="T:System.Drawing.Imaging.Metafile" /> по одной записи за раз в метод обратного вызова, который отображает их в заданной точке, используя указанные атрибуты изображения.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Этот метод перечисляет записи, содержащиеся в указанном метафайле. Каждая запись отдельно отправляется в метод обратного вызова, заданные `callback` параметра. Как правило, метод обратного вызова вызывает <xref:System.Drawing.Imaging.Metafile.PlayRecord%2A> метод «воспроизведение», или draw, запись.  
  
 Если метод обратного вызова вызывает <xref:System.Drawing.Imaging.Metafile.PlayRecord%2A>, он должен сделать это путем вызова <xref:System.Drawing.Imaging.Metafile.PlayRecord%2A> метод конкретной <xref:System.Drawing.Imaging.Metafile> перечисляемого.  
  
   
  
## Examples  
 Пример кода см. в разделе <xref:System.Drawing.Graphics.EnumerateMetafile%28System.Drawing.Imaging.Metafile%2CSystem.Drawing.Point%2CSystem.Drawing.Graphics.EnumerateMetafileProc%29>.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="EnumerateMetafile">
      <MemberSignature Language="C#" Value="public void EnumerateMetafile (System.Drawing.Imaging.Metafile metafile, System.Drawing.Point[] destPoints, System.Drawing.Rectangle srcRect, System.Drawing.GraphicsUnit unit, System.Drawing.Graphics.EnumerateMetafileProc callback, IntPtr callbackData, System.Drawing.Imaging.ImageAttributes imageAttr);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void EnumerateMetafile(class System.Drawing.Imaging.Metafile metafile, valuetype System.Drawing.Point[] destPoints, valuetype System.Drawing.Rectangle srcRect, valuetype System.Drawing.GraphicsUnit unit, class System.Drawing.Graphics/EnumerateMetafileProc callback, native int callbackData, class System.Drawing.Imaging.ImageAttributes imageAttr) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.EnumerateMetafile(System.Drawing.Imaging.Metafile,System.Drawing.Point[],System.Drawing.Rectangle,System.Drawing.GraphicsUnit,System.Drawing.Graphics.EnumerateMetafileProc,System.IntPtr,System.Drawing.Imaging.ImageAttributes)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void EnumerateMetafile(System::Drawing::Imaging::Metafile ^ metafile, cli::array &lt;System::Drawing::Point&gt; ^ destPoints, System::Drawing::Rectangle srcRect, System::Drawing::GraphicsUnit unit, System::Drawing::Graphics::EnumerateMetafileProc ^ callback, IntPtr callbackData, System::Drawing::Imaging::ImageAttributes ^ imageAttr);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="metafile" Type="System.Drawing.Imaging.Metafile" />
        <Parameter Name="destPoints" Type="System.Drawing.Point[]" />
        <Parameter Name="srcRect" Type="System.Drawing.Rectangle" />
        <Parameter Name="unit" Type="System.Drawing.GraphicsUnit" />
        <Parameter Name="callback" Type="System.Drawing.Graphics+EnumerateMetafileProc" />
        <Parameter Name="callbackData" Type="System.IntPtr" />
        <Parameter Name="imageAttr" Type="System.Drawing.Imaging.ImageAttributes" />
      </Parameters>
      <Docs>
        <param name="metafile">
          Объект <see cref="T:System.Drawing.Imaging.Metafile" /> для перечисления. </param>
        <param name="destPoints">Массив из трех структур <see cref="T:System.Drawing.Point" />, определяющих параллелограмм, который задает размер и расположение отображаемого метафайла.</param>
        <param name="srcRect">
          Структура <see cref="T:System.Drawing.Rectangle" />, задающая часть метафайла, предназначенную для рисования, относительно его верхнего левого угла.</param>
        <param name="unit">Элемент перечисления <see cref="T:System.Drawing.GraphicsUnit" />, задающий единицу измерения, которая должна использоваться для определения части метафайла, содержащейся в прямоугольнике, указываемом параметром <c>srcRect</c>.</param>
        <param name="callback">
          Делегат <see cref="T:System.Drawing.Graphics.EnumerateMetafileProc" />, задающий метод, в который отправляются записи метафайлов.</param>
        <param name="callbackData">Внутренний указатель, который является обязательным, однако не обрабатывается. Для этого параметра можно передать объект <see cref="F:System.IntPtr.Zero" />.</param>
        <param name="imageAttr">
          Объект <see cref="T:System.Drawing.Imaging.ImageAttributes" />, задающий сведения об атрибутах формируемого изображения.</param>
        <summary>Отправляет записи в выбранном прямоугольнике из объекта <see cref="T:System.Drawing.Imaging.Metafile" /> по одной записи за раз в метод обратного вызова, который отображает их в заданном параллелограмме, используя указанные атрибуты изображения.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Этот метод перечисляет записи, содержащиеся в указанном метафайле. Каждая запись отдельно отправляется в метод обратного вызова, заданные `callback` параметра. Как правило, метод обратного вызова вызывает <xref:System.Drawing.Imaging.Metafile.PlayRecord%2A> метод «воспроизведение», или draw, запись.  
  
 Если метод обратного вызова вызывает <xref:System.Drawing.Imaging.Metafile.PlayRecord%2A>, он должен сделать это путем вызова <xref:System.Drawing.Imaging.Metafile.PlayRecord%2A> метод конкретной <xref:System.Drawing.Imaging.Metafile> перечисляемого.  
  
 `destPoints` Параметр задает три точки параллелограмма. Три <xref:System.Drawing.Point> структуры представляют собой левый верхний, правый верхний и левый нижний углы параллелограмма. Четвертая точка определяется по первым трем параллелограмма. Масштабируется и обрезается по размерам параллелограмма отображаемого метафайла.  
  
 Изображение, расположенное вне прямоугольника, заданного параметром `srcRect` параметр учитывается.  
  
 Изображение атрибутами, заданными `imageAttr` параметр replace, те, указанного при записи метафайла.  
  
   
  
## Examples  
 Пример кода см. в разделе <xref:System.Drawing.Graphics.EnumerateMetafile%28System.Drawing.Imaging.Metafile%2CSystem.Drawing.Point%2CSystem.Drawing.Graphics.EnumerateMetafileProc%29>.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="EnumerateMetafile">
      <MemberSignature Language="C#" Value="public void EnumerateMetafile (System.Drawing.Imaging.Metafile metafile, System.Drawing.PointF destPoint, System.Drawing.RectangleF srcRect, System.Drawing.GraphicsUnit unit, System.Drawing.Graphics.EnumerateMetafileProc callback, IntPtr callbackData, System.Drawing.Imaging.ImageAttributes imageAttr);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void EnumerateMetafile(class System.Drawing.Imaging.Metafile metafile, valuetype System.Drawing.PointF destPoint, valuetype System.Drawing.RectangleF srcRect, valuetype System.Drawing.GraphicsUnit unit, class System.Drawing.Graphics/EnumerateMetafileProc callback, native int callbackData, class System.Drawing.Imaging.ImageAttributes imageAttr) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.EnumerateMetafile(System.Drawing.Imaging.Metafile,System.Drawing.PointF,System.Drawing.RectangleF,System.Drawing.GraphicsUnit,System.Drawing.Graphics.EnumerateMetafileProc,System.IntPtr,System.Drawing.Imaging.ImageAttributes)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void EnumerateMetafile(System::Drawing::Imaging::Metafile ^ metafile, System::Drawing::PointF destPoint, System::Drawing::RectangleF srcRect, System::Drawing::GraphicsUnit unit, System::Drawing::Graphics::EnumerateMetafileProc ^ callback, IntPtr callbackData, System::Drawing::Imaging::ImageAttributes ^ imageAttr);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="metafile" Type="System.Drawing.Imaging.Metafile" />
        <Parameter Name="destPoint" Type="System.Drawing.PointF" />
        <Parameter Name="srcRect" Type="System.Drawing.RectangleF" />
        <Parameter Name="unit" Type="System.Drawing.GraphicsUnit" />
        <Parameter Name="callback" Type="System.Drawing.Graphics+EnumerateMetafileProc" />
        <Parameter Name="callbackData" Type="System.IntPtr" />
        <Parameter Name="imageAttr" Type="System.Drawing.Imaging.ImageAttributes" />
      </Parameters>
      <Docs>
        <param name="metafile">
          Объект <see cref="T:System.Drawing.Imaging.Metafile" /> для перечисления. </param>
        <param name="destPoint">
          Структура <see cref="T:System.Drawing.PointF" />, задающая положение верхнего левого угла отображаемого метафайла.</param>
        <param name="srcRect">
          Структура <see cref="T:System.Drawing.RectangleF" />, задающая часть метафайла, предназначенную для рисования, относительно его верхнего левого угла.</param>
        <param name="unit">Элемент перечисления <see cref="T:System.Drawing.GraphicsUnit" />, задающий единицу измерения, которая должна использоваться для определения части метафайла, содержащейся в прямоугольнике, указываемом параметром <c>srcRect</c>.</param>
        <param name="callback">
          Делегат <see cref="T:System.Drawing.Graphics.EnumerateMetafileProc" />, задающий метод, в который отправляются записи метафайлов.</param>
        <param name="callbackData">Внутренний указатель, который является обязательным, однако не обрабатывается. Для этого параметра можно передать объект <see cref="F:System.IntPtr.Zero" />.</param>
        <param name="imageAttr">
          Объект <see cref="T:System.Drawing.Imaging.ImageAttributes" />, задающий сведения об атрибутах формируемого изображения.</param>
        <summary>Отправляет записи в выбранном прямоугольнике из объекта <see cref="T:System.Drawing.Imaging.Metafile" /> по одной записи за раз в метод обратного вызова, который отображает их в заданной точке, используя указанные атрибуты изображения.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Этот метод перечисляет записи, содержащиеся в указанном метафайле. Каждая запись отдельно отправляется в метод обратного вызова, заданные `callback` параметра. Как правило, метод обратного вызова вызывает <xref:System.Drawing.Imaging.Metafile.PlayRecord%2A> метод «воспроизведение», или draw, запись.  
  
 Если метод обратного вызова вызывает <xref:System.Drawing.Imaging.Metafile.PlayRecord%2A>, он должен сделать это путем вызова <xref:System.Drawing.Imaging.Metafile.PlayRecord%2A> метод конкретной <xref:System.Drawing.Imaging.Metafile> перечисляемого.  
  
 Изображение, расположенное вне прямоугольника, заданного параметром `srcRect` параметр учитывается.  
  
 Изображение атрибутами, заданными `imageAttr` параметр replace, те, указанного при записи метафайла.  
  
   
  
## Examples  
 Пример кода см. в разделе <xref:System.Drawing.Graphics.EnumerateMetafile%28System.Drawing.Imaging.Metafile%2CSystem.Drawing.Point%2CSystem.Drawing.Graphics.EnumerateMetafileProc%29>.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="EnumerateMetafile">
      <MemberSignature Language="C#" Value="public void EnumerateMetafile (System.Drawing.Imaging.Metafile metafile, System.Drawing.PointF[] destPoints, System.Drawing.RectangleF srcRect, System.Drawing.GraphicsUnit unit, System.Drawing.Graphics.EnumerateMetafileProc callback, IntPtr callbackData, System.Drawing.Imaging.ImageAttributes imageAttr);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void EnumerateMetafile(class System.Drawing.Imaging.Metafile metafile, valuetype System.Drawing.PointF[] destPoints, valuetype System.Drawing.RectangleF srcRect, valuetype System.Drawing.GraphicsUnit unit, class System.Drawing.Graphics/EnumerateMetafileProc callback, native int callbackData, class System.Drawing.Imaging.ImageAttributes imageAttr) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.EnumerateMetafile(System.Drawing.Imaging.Metafile,System.Drawing.PointF[],System.Drawing.RectangleF,System.Drawing.GraphicsUnit,System.Drawing.Graphics.EnumerateMetafileProc,System.IntPtr,System.Drawing.Imaging.ImageAttributes)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void EnumerateMetafile(System::Drawing::Imaging::Metafile ^ metafile, cli::array &lt;System::Drawing::PointF&gt; ^ destPoints, System::Drawing::RectangleF srcRect, System::Drawing::GraphicsUnit unit, System::Drawing::Graphics::EnumerateMetafileProc ^ callback, IntPtr callbackData, System::Drawing::Imaging::ImageAttributes ^ imageAttr);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="metafile" Type="System.Drawing.Imaging.Metafile" />
        <Parameter Name="destPoints" Type="System.Drawing.PointF[]" />
        <Parameter Name="srcRect" Type="System.Drawing.RectangleF" />
        <Parameter Name="unit" Type="System.Drawing.GraphicsUnit" />
        <Parameter Name="callback" Type="System.Drawing.Graphics+EnumerateMetafileProc" />
        <Parameter Name="callbackData" Type="System.IntPtr" />
        <Parameter Name="imageAttr" Type="System.Drawing.Imaging.ImageAttributes" />
      </Parameters>
      <Docs>
        <param name="metafile">
          Объект <see cref="T:System.Drawing.Imaging.Metafile" /> для перечисления. </param>
        <param name="destPoints">Массив из трех структур <see cref="T:System.Drawing.PointF" />, определяющих параллелограмм, который задает размер и расположение отображаемого метафайла.</param>
        <param name="srcRect">
          Структура <see cref="T:System.Drawing.RectangleF" />, задающая часть метафайла, предназначенную для рисования, относительно его верхнего левого угла.</param>
        <param name="unit">Элемент перечисления <see cref="T:System.Drawing.GraphicsUnit" />, задающий единицу измерения, которая должна использоваться для определения части метафайла, содержащейся в прямоугольнике, указываемом параметром <c>srcRect</c>.</param>
        <param name="callback">
          Делегат <see cref="T:System.Drawing.Graphics.EnumerateMetafileProc" />, задающий метод, в который отправляются записи метафайлов.</param>
        <param name="callbackData">Внутренний указатель, который является обязательным, однако не обрабатывается. Для этого параметра можно передать объект <see cref="F:System.IntPtr.Zero" />.</param>
        <param name="imageAttr">
          Объект <see cref="T:System.Drawing.Imaging.ImageAttributes" />, задающий сведения об атрибутах формируемого изображения.</param>
        <summary>Отправляет записи в выбранном прямоугольнике из объекта <see cref="T:System.Drawing.Imaging.Metafile" /> по одной записи за раз в метод обратного вызова, который отображает их в заданном параллелограмме, используя указанные атрибуты изображения.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Этот метод перечисляет записи, содержащиеся в указанном метафайле. Каждая запись отдельно отправляется в метод обратного вызова, заданные `callback` параметра. Как правило, метод обратного вызова вызывает <xref:System.Drawing.Imaging.Metafile.PlayRecord%2A> метод «воспроизведение», или draw, запись.  
  
 Если метод обратного вызова вызывает <xref:System.Drawing.Imaging.Metafile.PlayRecord%2A>, он должен сделать это путем вызова <xref:System.Drawing.Imaging.Metafile.PlayRecord%2A> метод конкретной <xref:System.Drawing.Imaging.Metafile> перечисляемого.  
  
 `destPoints` Параметр задает три точки параллелограмма. Три <xref:System.Drawing.PointF> структуры представляют собой левый верхний, правый верхний и левый нижний углы параллелограмма. Четвертая точка определяется по первым трем параллелограмма. Масштабируется и обрезается по размерам параллелограмма отображаемого метафайла.  
  
 Изображение, расположенное вне прямоугольника, заданного параметром `srcRect` параметр учитывается.  
  
 Изображение атрибутами, заданными `imageAttr` параметр replace, те, указанного при записи метафайла.  
  
   
  
## Examples  
 Пример кода см. в разделе <xref:System.Drawing.Graphics.EnumerateMetafile%28System.Drawing.Imaging.Metafile%2CSystem.Drawing.Point%2CSystem.Drawing.Graphics.EnumerateMetafileProc%29>.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="EnumerateMetafile">
      <MemberSignature Language="C#" Value="public void EnumerateMetafile (System.Drawing.Imaging.Metafile metafile, System.Drawing.Rectangle destRect, System.Drawing.Rectangle srcRect, System.Drawing.GraphicsUnit unit, System.Drawing.Graphics.EnumerateMetafileProc callback, IntPtr callbackData, System.Drawing.Imaging.ImageAttributes imageAttr);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void EnumerateMetafile(class System.Drawing.Imaging.Metafile metafile, valuetype System.Drawing.Rectangle destRect, valuetype System.Drawing.Rectangle srcRect, valuetype System.Drawing.GraphicsUnit unit, class System.Drawing.Graphics/EnumerateMetafileProc callback, native int callbackData, class System.Drawing.Imaging.ImageAttributes imageAttr) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.EnumerateMetafile(System.Drawing.Imaging.Metafile,System.Drawing.Rectangle,System.Drawing.Rectangle,System.Drawing.GraphicsUnit,System.Drawing.Graphics.EnumerateMetafileProc,System.IntPtr,System.Drawing.Imaging.ImageAttributes)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void EnumerateMetafile(System::Drawing::Imaging::Metafile ^ metafile, System::Drawing::Rectangle destRect, System::Drawing::Rectangle srcRect, System::Drawing::GraphicsUnit unit, System::Drawing::Graphics::EnumerateMetafileProc ^ callback, IntPtr callbackData, System::Drawing::Imaging::ImageAttributes ^ imageAttr);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="metafile" Type="System.Drawing.Imaging.Metafile" />
        <Parameter Name="destRect" Type="System.Drawing.Rectangle" />
        <Parameter Name="srcRect" Type="System.Drawing.Rectangle" />
        <Parameter Name="unit" Type="System.Drawing.GraphicsUnit" />
        <Parameter Name="callback" Type="System.Drawing.Graphics+EnumerateMetafileProc" />
        <Parameter Name="callbackData" Type="System.IntPtr" />
        <Parameter Name="imageAttr" Type="System.Drawing.Imaging.ImageAttributes" />
      </Parameters>
      <Docs>
        <param name="metafile">
          Объект <see cref="T:System.Drawing.Imaging.Metafile" /> для перечисления. </param>
        <param name="destRect">
          Структура <see cref="T:System.Drawing.Rectangle" />, которая задает расположение и размер отображаемого метафайла.</param>
        <param name="srcRect">
          Структура <see cref="T:System.Drawing.Rectangle" />, задающая часть метафайла, предназначенную для рисования, относительно его верхнего левого угла.</param>
        <param name="unit">Элемент перечисления <see cref="T:System.Drawing.GraphicsUnit" />, задающий единицу измерения, которая должна использоваться для определения части метафайла, содержащейся в прямоугольнике, указываемом параметром <c>srcRect</c>.</param>
        <param name="callback">
          Делегат <see cref="T:System.Drawing.Graphics.EnumerateMetafileProc" />, задающий метод, в который отправляются записи метафайлов.</param>
        <param name="callbackData">Внутренний указатель, который является обязательным, однако не обрабатывается. Для этого параметра можно передать объект <see cref="F:System.IntPtr.Zero" />.</param>
        <param name="imageAttr">
          Объект <see cref="T:System.Drawing.Imaging.ImageAttributes" />, задающий сведения об атрибутах формируемого изображения.</param>
        <summary>Отправляет записи в выбранном прямоугольнике из объекта <see cref="T:System.Drawing.Imaging.Metafile" /> по одной записи за раз в метод обратного вызова, который отображает их в заданном прямоугольнике, используя указанные атрибуты изображения.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Этот метод перечисляет записи, содержащиеся в указанном метафайле. Каждая запись отдельно отправляется в метод обратного вызова, заданные `callback` параметра. Как правило, метод обратного вызова вызывает <xref:System.Drawing.Imaging.Metafile.PlayRecord%2A> метод «воспроизведение», или draw, запись.  
  
 Если метод обратного вызова вызывает <xref:System.Drawing.Imaging.Metafile.PlayRecord%2A>, он должен сделать это путем вызова <xref:System.Drawing.Imaging.Metafile.PlayRecord%2A> метод конкретной <xref:System.Drawing.Imaging.Metafile> перечисляемого.  
  
 Изображение, расположенное вне прямоугольника, заданного параметром `srcRect` параметр учитывается.  
  
 Изображение атрибутами, заданными `imageAttr` параметр replace, те, указанного при записи метафайла.  
  
   
  
## Examples  
 Пример кода см. в разделе <xref:System.Drawing.Graphics.EnumerateMetafile%28System.Drawing.Imaging.Metafile%2CSystem.Drawing.Point%2CSystem.Drawing.Graphics.EnumerateMetafileProc%29>.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="EnumerateMetafile">
      <MemberSignature Language="C#" Value="public void EnumerateMetafile (System.Drawing.Imaging.Metafile metafile, System.Drawing.RectangleF destRect, System.Drawing.RectangleF srcRect, System.Drawing.GraphicsUnit unit, System.Drawing.Graphics.EnumerateMetafileProc callback, IntPtr callbackData, System.Drawing.Imaging.ImageAttributes imageAttr);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void EnumerateMetafile(class System.Drawing.Imaging.Metafile metafile, valuetype System.Drawing.RectangleF destRect, valuetype System.Drawing.RectangleF srcRect, valuetype System.Drawing.GraphicsUnit unit, class System.Drawing.Graphics/EnumerateMetafileProc callback, native int callbackData, class System.Drawing.Imaging.ImageAttributes imageAttr) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.EnumerateMetafile(System.Drawing.Imaging.Metafile,System.Drawing.RectangleF,System.Drawing.RectangleF,System.Drawing.GraphicsUnit,System.Drawing.Graphics.EnumerateMetafileProc,System.IntPtr,System.Drawing.Imaging.ImageAttributes)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void EnumerateMetafile(System::Drawing::Imaging::Metafile ^ metafile, System::Drawing::RectangleF destRect, System::Drawing::RectangleF srcRect, System::Drawing::GraphicsUnit unit, System::Drawing::Graphics::EnumerateMetafileProc ^ callback, IntPtr callbackData, System::Drawing::Imaging::ImageAttributes ^ imageAttr);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="metafile" Type="System.Drawing.Imaging.Metafile" />
        <Parameter Name="destRect" Type="System.Drawing.RectangleF" />
        <Parameter Name="srcRect" Type="System.Drawing.RectangleF" />
        <Parameter Name="unit" Type="System.Drawing.GraphicsUnit" />
        <Parameter Name="callback" Type="System.Drawing.Graphics+EnumerateMetafileProc" />
        <Parameter Name="callbackData" Type="System.IntPtr" />
        <Parameter Name="imageAttr" Type="System.Drawing.Imaging.ImageAttributes" />
      </Parameters>
      <Docs>
        <param name="metafile">
          Объект <see cref="T:System.Drawing.Imaging.Metafile" /> для перечисления. </param>
        <param name="destRect">
          Структура <see cref="T:System.Drawing.RectangleF" />, которая задает расположение и размер отображаемого метафайла.</param>
        <param name="srcRect">
          Структура <see cref="T:System.Drawing.RectangleF" />, задающая часть метафайла, предназначенную для рисования, относительно его верхнего левого угла.</param>
        <param name="unit">Элемент перечисления <see cref="T:System.Drawing.GraphicsUnit" />, задающий единицу измерения, которая должна использоваться для определения части метафайла, содержащейся в прямоугольнике, указываемом параметром <c>srcRect</c>.</param>
        <param name="callback">
          Делегат <see cref="T:System.Drawing.Graphics.EnumerateMetafileProc" />, задающий метод, в который отправляются записи метафайлов.</param>
        <param name="callbackData">Внутренний указатель, который является обязательным, однако не обрабатывается. Для этого параметра можно передать объект <see cref="F:System.IntPtr.Zero" />.</param>
        <param name="imageAttr">
          Объект <see cref="T:System.Drawing.Imaging.ImageAttributes" />, задающий сведения об атрибутах формируемого изображения.</param>
        <summary>Отправляет записи в выбранном прямоугольнике из объекта <see cref="T:System.Drawing.Imaging.Metafile" /> по одной записи за раз в метод обратного вызова, который отображает их в заданном прямоугольнике, используя указанные атрибуты изображения.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Этот метод перечисляет записи, содержащиеся в указанном метафайле. Каждая запись отдельно отправляется в метод обратного вызова, заданные `callback` параметра. Как правило, метод обратного вызова вызывает <xref:System.Drawing.Imaging.Metafile.PlayRecord%2A> метод «воспроизведение», или draw, запись.  
  
 Если метод обратного вызова вызывает <xref:System.Drawing.Imaging.Metafile.PlayRecord%2A>, он должен сделать это путем вызова <xref:System.Drawing.Imaging.Metafile.PlayRecord%2A> метод конкретной <xref:System.Drawing.Imaging.Metafile> перечисляемого.  
  
 Изображение, расположенное вне прямоугольника, заданного параметром `srcRect` параметр учитывается.  
  
 Изображение атрибутами, заданными `imageAttr` параметр replace, те, указанного при записи метафайла.  
  
   
  
## Examples  
 Пример кода см. в разделе <xref:System.Drawing.Graphics.EnumerateMetafile%28System.Drawing.Imaging.Metafile%2CSystem.Drawing.Point%2CSystem.Drawing.Graphics.EnumerateMetafileProc%29>.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="ExcludeClip">
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Обновляет отсеченную область данного объекта <see cref="T:System.Drawing.Graphics" />, чтобы исключить из нее часть, определяемую структурой <see cref="T:System.Drawing.Rectangle" />.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="ExcludeClip">
      <MemberSignature Language="C#" Value="public void ExcludeClip (System.Drawing.Rectangle rect);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void ExcludeClip(valuetype System.Drawing.Rectangle rect) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.ExcludeClip(System.Drawing.Rectangle)" />
      <MemberSignature Language="VB.NET" Value="Public Sub ExcludeClip (rect As Rectangle)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void ExcludeClip(System::Drawing::Rectangle rect);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="rect" Type="System.Drawing.Rectangle" />
      </Parameters>
      <Docs>
        <param name="rect">
          Структура <see cref="T:System.Drawing.Rectangle" />, которая задает прямоугольник, исключаемый из отсеченной области.</param>
        <summary>Обновляет отсеченную область данного объекта <see cref="T:System.Drawing.Graphics" />, чтобы исключить из нее часть, определяемую структурой <see cref="T:System.Drawing.Rectangle" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Этот метод исключает области, указанной `rect` параметра из текущей отсеченной области и назначает получившуюся область <xref:System.Drawing.Graphics.Clip%2A> этого <xref:System.Drawing.Graphics>.  
  
   
  
## Examples  
 Следующий пример кода предназначен для работы с Windows Forms, и для него необходим <xref:System.Windows.Forms.PaintEventArgs> `e`, который является параметром <xref:System.Windows.Forms.Control.Paint> обработчика событий. Код выполняет следующие действия.  
  
-   Создает размером 100, 100 пикселей прямоугольника, верхний левый угол имеет координаты (100, 100).  
  
-   Создает область, определенную прямоугольником.  
  
-   Задает область усечения для исключения прямоугольной области.  
  
-   Заполняет 300 пикселей прямоугольником 300 пикселей, левый верхний угол имеет координаты (0, 0) с помощью сплошной кисти синего цвета.  
  
 Результатом является голубой прямоугольник с квадратный участок отсутствует его нижнего правого угла.  
  
 [!code-cpp[System.Drawing.ClassicGraphicsExamples2#92](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples2/CPP/form1.cpp#92)]
 [!code-csharp[System.Drawing.ClassicGraphicsExamples2#92](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples2/CS/form1.cs#92)]
 [!code-vb[System.Drawing.ClassicGraphicsExamples2#92](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples2/VB/form1.vb#92)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ExcludeClip">
      <MemberSignature Language="C#" Value="public void ExcludeClip (System.Drawing.Region region);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void ExcludeClip(class System.Drawing.Region region) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.ExcludeClip(System.Drawing.Region)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void ExcludeClip(System::Drawing::Region ^ region);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="region" Type="System.Drawing.Region" />
      </Parameters>
      <Docs>
        <param name="region">
          Объект <see cref="T:System.Drawing.Region" />, который задает область, исключаемую из отсеченной области.</param>
        <summary>Обновляет отсеченную область данного объекта <see cref="T:System.Drawing.Graphics" />, чтобы исключить из нее часть, определяемую структурой <see cref="T:System.Drawing.Region" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Этот метод исключает области, указанной `region` параметра из текущей отсеченной области и назначает получившуюся область <xref:System.Drawing.Graphics.Clip%2A> этого <xref:System.Drawing.Graphics>.  
  
   
  
## Examples  
 Следующий пример кода предназначен для работы с Windows Forms, и для него необходим <xref:System.Windows.Forms.PaintEventArgs> `e`, который является параметром <xref:System.Windows.Forms.Control.Paint> обработчика событий. Код выполняет следующие действия.  
  
-   Создает размером 100, 100 пикселей прямоугольника, верхний левый угол имеет координаты (100, 100).  
  
-   Задает область усечения для исключения прямоугольника.  
  
-   Заполняет 300 пикселей прямоугольником 300 пикселей, левый верхний угол имеет координаты (0, 0) с помощью сплошной кисти синего цвета.  
  
 Результатом является голубой прямоугольник с квадратный участок отсутствует его нижнего правого угла.  
  
 [!code-cpp[System.Drawing.ClassicGraphicsExamples2#91](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples2/CPP/form1.cpp#91)]
 [!code-csharp[System.Drawing.ClassicGraphicsExamples2#91](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples2/CS/form1.cs#91)]
 [!code-vb[System.Drawing.ClassicGraphicsExamples2#91](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples2/VB/form1.vb#91)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="FillClosedCurve">
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Заполняет внутреннюю часть замкнутой фундаментальной кривой, определяемой массивом структур <see cref="T:System.Drawing.Point" />.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="FillClosedCurve">
      <MemberSignature Language="C#" Value="public void FillClosedCurve (System.Drawing.Brush brush, System.Drawing.Point[] points);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void FillClosedCurve(class System.Drawing.Brush brush, valuetype System.Drawing.Point[] points) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.FillClosedCurve(System.Drawing.Brush,System.Drawing.Point[])" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void FillClosedCurve(System::Drawing::Brush ^ brush, cli::array &lt;System::Drawing::Point&gt; ^ points);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="brush" Type="System.Drawing.Brush" />
        <Parameter Name="points" Type="System.Drawing.Point[]" />
      </Parameters>
      <Docs>
        <param name="brush">
          Объект <see cref="T:System.Drawing.Brush" />, определяющий параметры заливки.</param>
        <param name="points">Массив структур <see cref="T:System.Drawing.Point" />, определяющий сплайн.</param>
        <summary>Заполняет внутреннюю часть замкнутой фундаментальной кривой, определяемой массивом структур <see cref="T:System.Drawing.Point" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Этот метод заполняет внутреннюю часть замкнутой фундаментальной сплайновой, который проходит через все точки в массиве. Если конечная точка не совпадает с начальной, дополнительный отрезок кривой добавляется с последней точки первой точки, чтобы закрыть его.  
  
 Массив точек должен содержать по крайней мере четыре <xref:System.Drawing.Point> структуры.  
  
 Этот метод использует натяжение по умолчанию, равное 0,5.  
  
   
  
## Examples  
 Следующий пример кода предназначен для работы с Windows Forms, и для него необходим <xref:System.Windows.Forms.PaintEventArgs> `e`, который является параметром <xref:System.Windows.Forms.Control.Paint> обработчика событий. Код выполняет следующие действия.  
  
-   Создает сплошной кисти красного цвета.  
  
-   Создает массив из четырех точек для определения кривой.  
  
-   Заполняет кривую на экране.  
  
 Кривая имеет натяжение по умолчанию, равное 0,5.  
  
 [!code-cpp[System.Drawing.ClassicGraphicsExamples2#93](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples2/CPP/form1.cpp#93)]
 [!code-csharp[System.Drawing.ClassicGraphicsExamples2#93](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples2/CS/form1.cs#93)]
 [!code-vb[System.Drawing.ClassicGraphicsExamples2#93](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples2/VB/form1.vb#93)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          Свойство <paramref name="brush" /> имеет значение <see langword="null" />.  
  
 - или -  
  
 Свойство <paramref name="points" /> имеет значение <see langword="null" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="FillClosedCurve">
      <MemberSignature Language="C#" Value="public void FillClosedCurve (System.Drawing.Brush brush, System.Drawing.PointF[] points);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void FillClosedCurve(class System.Drawing.Brush brush, valuetype System.Drawing.PointF[] points) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.FillClosedCurve(System.Drawing.Brush,System.Drawing.PointF[])" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void FillClosedCurve(System::Drawing::Brush ^ brush, cli::array &lt;System::Drawing::PointF&gt; ^ points);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="brush" Type="System.Drawing.Brush" />
        <Parameter Name="points" Type="System.Drawing.PointF[]" />
      </Parameters>
      <Docs>
        <param name="brush">
          Объект <see cref="T:System.Drawing.Brush" />, определяющий параметры заливки.</param>
        <param name="points">Массив структур <see cref="T:System.Drawing.PointF" />, определяющий сплайн.</param>
        <summary>Заполняет внутреннюю часть замкнутой фундаментальной кривой, определяемой массивом структур <see cref="T:System.Drawing.PointF" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Этот метод заполняет внутреннюю часть замкнутой фундаментальной сплайновой, который проходит через все точки в массиве. Если конечная точка не совпадает с начальной, дополнительный отрезок кривой добавляется с последней точки первой точки, чтобы закрыть его.  
  
 Массив точек должен содержать по крайней мере четыре <xref:System.Drawing.PointF> структуры.  
  
 Этот метод использует натяжение по умолчанию, равное 0,5.  
  
   
  
## Examples  
 Следующий пример кода предназначен для работы с Windows Forms, и для него необходим <xref:System.Windows.Forms.PaintEventArgs> `e`, который является параметром <xref:System.Windows.Forms.Control.Paint> обработчика событий. Код выполняет следующие действия.  
  
-   Создает сплошной кисти красного цвета.  
  
-   Создает массив из четырех точек для определения кривой.  
  
-   Заполняет кривую на экране.  
  
 Кривая имеет натяжение по умолчанию, равное 0,5.  
  
 [!code-cpp[System.Drawing.ClassicGraphicsExamples2#96](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples2/CPP/form1.cpp#96)]
 [!code-csharp[System.Drawing.ClassicGraphicsExamples2#96](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples2/CS/form1.cs#96)]
 [!code-vb[System.Drawing.ClassicGraphicsExamples2#96](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples2/VB/form1.vb#96)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          Свойство <paramref name="brush" /> имеет значение <see langword="null" />.  
  
 - или -  
  
 Свойство <paramref name="points" /> имеет значение <see langword="null" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="FillClosedCurve">
      <MemberSignature Language="C#" Value="public void FillClosedCurve (System.Drawing.Brush brush, System.Drawing.Point[] points, System.Drawing.Drawing2D.FillMode fillmode);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void FillClosedCurve(class System.Drawing.Brush brush, valuetype System.Drawing.Point[] points, valuetype System.Drawing.Drawing2D.FillMode fillmode) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.FillClosedCurve(System.Drawing.Brush,System.Drawing.Point[],System.Drawing.Drawing2D.FillMode)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void FillClosedCurve(System::Drawing::Brush ^ brush, cli::array &lt;System::Drawing::Point&gt; ^ points, System::Drawing::Drawing2D::FillMode fillmode);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="brush" Type="System.Drawing.Brush" />
        <Parameter Name="points" Type="System.Drawing.Point[]" />
        <Parameter Name="fillmode" Type="System.Drawing.Drawing2D.FillMode" />
      </Parameters>
      <Docs>
        <param name="brush">
          Объект <see cref="T:System.Drawing.Brush" />, определяющий параметры заливки.</param>
        <param name="points">Массив структур <see cref="T:System.Drawing.Point" />, определяющий сплайн.</param>
        <param name="fillmode">Элемент перечисления <see cref="T:System.Drawing.Drawing2D.FillMode" />, определяющий способ заполнения кривой.</param>
        <summary>Заполняет внутреннюю часть замкнутой фундаментальной сплайновой кривой, определяемой массивом структур <see cref="T:System.Drawing.Point" />, используя указанный режим заливки.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Этот метод заполняет внутреннюю часть замкнутой фундаментальной сплайновой, который проходит через все точки в массиве. Если конечная точка не совпадает с начальной, дополнительный отрезок кривой добавляется с последней точки первой точки, чтобы закрыть его.  
  
 Массив точек должен содержать по крайней мере четыре <xref:System.Drawing.Point> структуры.  
  
 Этот метод использует натяжение по умолчанию, равное 0,5.  
  
   
  
## Examples  
 Следующий пример кода предназначен для работы с Windows Forms, и для него необходим <xref:System.Windows.Forms.PaintEventArgs> `e`, который является параметром <xref:System.Windows.Forms.Control.Paint> обработчика событий. Код выполняет следующие действия.  
  
-   Создает сплошной кисти красного цвета.  
  
-   Создает массив из четырех точек для определения кривой.  
  
-   Задает режим заполнения <xref:System.Drawing.Drawing2D.FillMode.Winding>.  
  
-   Заполняет кривую на экране.  
  
 Кривая имеет натяжение по умолчанию, равное 0,5.  
  
 [!code-cpp[System.Drawing.ClassicGraphicsExamples2#94](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples2/CPP/form1.cpp#94)]
 [!code-csharp[System.Drawing.ClassicGraphicsExamples2#94](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples2/CS/form1.cs#94)]
 [!code-vb[System.Drawing.ClassicGraphicsExamples2#94](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples2/VB/form1.vb#94)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          Свойство <paramref name="brush" /> имеет значение <see langword="null" />.  
  
 - или -  
  
 Свойство <paramref name="points" /> имеет значение <see langword="null" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="FillClosedCurve">
      <MemberSignature Language="C#" Value="public void FillClosedCurve (System.Drawing.Brush brush, System.Drawing.PointF[] points, System.Drawing.Drawing2D.FillMode fillmode);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void FillClosedCurve(class System.Drawing.Brush brush, valuetype System.Drawing.PointF[] points, valuetype System.Drawing.Drawing2D.FillMode fillmode) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.FillClosedCurve(System.Drawing.Brush,System.Drawing.PointF[],System.Drawing.Drawing2D.FillMode)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void FillClosedCurve(System::Drawing::Brush ^ brush, cli::array &lt;System::Drawing::PointF&gt; ^ points, System::Drawing::Drawing2D::FillMode fillmode);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="brush" Type="System.Drawing.Brush" />
        <Parameter Name="points" Type="System.Drawing.PointF[]" />
        <Parameter Name="fillmode" Type="System.Drawing.Drawing2D.FillMode" />
      </Parameters>
      <Docs>
        <param name="brush">
          Объект <see cref="T:System.Drawing.Brush" />, определяющий параметры заливки.</param>
        <param name="points">Массив структур <see cref="T:System.Drawing.PointF" />, определяющий сплайн.</param>
        <param name="fillmode">Элемент перечисления <see cref="T:System.Drawing.Drawing2D.FillMode" />, определяющий способ заполнения кривой.</param>
        <summary>Заполняет внутреннюю часть замкнутой фундаментальной сплайновой кривой, определяемой массивом структур <see cref="T:System.Drawing.PointF" />, используя указанный режим заливки.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Этот метод заполняет внутреннюю часть замкнутой фундаментальной сплайновой, который проходит через все точки в массиве. Если конечная точка не совпадает с начальной, дополнительный отрезок кривой добавляется с последней точки первой точки, чтобы закрыть его.  
  
 Массив точек должен содержать по крайней мере четыре <xref:System.Drawing.Point> структуры.  
  
 Этот метод использует натяжение по умолчанию, равное 0,5.  
  
   
  
## Examples  
 Следующий пример кода предназначен для работы с Windows Forms, и для него необходим <xref:System.Windows.Forms.PaintEventArgs> `e`, который является параметром <xref:System.Windows.Forms.Control.Paint> обработчика событий. Код выполняет следующие действия.  
  
-   Создает сплошной кисти красного цвета.  
  
-   Создает массив из четырех точек для определения кривой.  
  
-   Задает режим заполнения <xref:System.Drawing.Drawing2D.FillMode.Winding>.  
  
-   Заполняет кривую на экране.  
  
 Кривая имеет натяжение по умолчанию, равное 0,5.  
  
 [!code-cpp[System.Drawing.ClassicGraphicsExamples2#97](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples2/CPP/form1.cpp#97)]
 [!code-csharp[System.Drawing.ClassicGraphicsExamples2#97](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples2/CS/form1.cs#97)]
 [!code-vb[System.Drawing.ClassicGraphicsExamples2#97](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples2/VB/form1.vb#97)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          Свойство <paramref name="brush" /> имеет значение <see langword="null" />.  
  
 - или -  
  
 Свойство <paramref name="points" /> имеет значение <see langword="null" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="FillClosedCurve">
      <MemberSignature Language="C#" Value="public void FillClosedCurve (System.Drawing.Brush brush, System.Drawing.Point[] points, System.Drawing.Drawing2D.FillMode fillmode, float tension);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void FillClosedCurve(class System.Drawing.Brush brush, valuetype System.Drawing.Point[] points, valuetype System.Drawing.Drawing2D.FillMode fillmode, float32 tension) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.FillClosedCurve(System.Drawing.Brush,System.Drawing.Point[],System.Drawing.Drawing2D.FillMode,System.Single)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void FillClosedCurve(System::Drawing::Brush ^ brush, cli::array &lt;System::Drawing::Point&gt; ^ points, System::Drawing::Drawing2D::FillMode fillmode, float tension);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="brush" Type="System.Drawing.Brush" />
        <Parameter Name="points" Type="System.Drawing.Point[]" />
        <Parameter Name="fillmode" Type="System.Drawing.Drawing2D.FillMode" />
        <Parameter Name="tension" Type="System.Single" />
      </Parameters>
      <Docs>
        <param name="brush">
          Объект <see cref="T:System.Drawing.Brush" />, определяющий параметры заливки.</param>
        <param name="points">Массив структур <see cref="T:System.Drawing.Point" />, определяющий сплайн.</param>
        <param name="fillmode">Элемент перечисления <see cref="T:System.Drawing.Drawing2D.FillMode" />, определяющий способ заполнения кривой.</param>
        <param name="tension">Значение не ниже 0,0F, которое задает натяжение кривой.</param>
        <summary>Заполняет внутреннюю часть замкнутой фундаментальной сплайновой кривой, определяемой массивом структур <see cref="T:System.Drawing.Point" />, используя указанный режим заливки и натяжение.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Этот метод заполняет внутреннюю часть замкнутой фундаментальной сплайновой, который проходит через все точки в массиве. Если конечная точка не совпадает с начальной, дополнительный отрезок кривой добавляется с последней точки первой точки, чтобы закрыть его.  
  
 Массив точек должен содержать по крайней мере четыре <xref:System.Drawing.Point> структуры.  
  
 `tension` Параметр определяет форму кривой. Если значение `tension` параметр равен 0, 0f, этот метод формирует сегменты прямой линии, соединяющие точки. Как правило `tension` меньше или равно 1, 0f. Значения свыше 1.0F выдают необычные результаты.  
  
   
  
## Examples  
 Следующий пример кода предназначен для работы с Windows Forms, и для него необходим <xref:System.Windows.Forms.PaintEventArgs> `e`, который является параметром <xref:System.Windows.Forms.Control.Paint> обработчика событий. Код выполняет следующие действия.  
  
-   Создает сплошной кисти красного цвета.  
  
-   Создает массив из четырех точек для определения кривой.  
  
-   Задает режим заполнения <xref:System.Drawing.Drawing2D.FillMode.Winding>.  
  
-   Задает натяжение равным 1,0.  
  
-   Заполняет кривую на экране.  
  
 [!code-cpp[System.Drawing.ClassicGraphicsExamples2#95](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples2/CPP/form1.cpp#95)]
 [!code-csharp[System.Drawing.ClassicGraphicsExamples2#95](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples2/CS/form1.cs#95)]
 [!code-vb[System.Drawing.ClassicGraphicsExamples2#95](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples2/VB/form1.vb#95)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          Свойство <paramref name="brush" /> имеет значение <see langword="null" />.  
  
 - или -  
  
 Свойство <paramref name="points" /> имеет значение <see langword="null" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="FillClosedCurve">
      <MemberSignature Language="C#" Value="public void FillClosedCurve (System.Drawing.Brush brush, System.Drawing.PointF[] points, System.Drawing.Drawing2D.FillMode fillmode, float tension);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void FillClosedCurve(class System.Drawing.Brush brush, valuetype System.Drawing.PointF[] points, valuetype System.Drawing.Drawing2D.FillMode fillmode, float32 tension) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.FillClosedCurve(System.Drawing.Brush,System.Drawing.PointF[],System.Drawing.Drawing2D.FillMode,System.Single)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void FillClosedCurve(System::Drawing::Brush ^ brush, cli::array &lt;System::Drawing::PointF&gt; ^ points, System::Drawing::Drawing2D::FillMode fillmode, float tension);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="brush" Type="System.Drawing.Brush" />
        <Parameter Name="points" Type="System.Drawing.PointF[]" />
        <Parameter Name="fillmode" Type="System.Drawing.Drawing2D.FillMode" />
        <Parameter Name="tension" Type="System.Single" />
      </Parameters>
      <Docs>
        <param name="brush">Объект <see cref="T:System.Drawing.Brush" />, определяющий параметры заливки.</param>
        <param name="points">Массив структур <see cref="T:System.Drawing.PointF" />, определяющий сплайн.</param>
        <param name="fillmode">Элемент перечисления <see cref="T:System.Drawing.Drawing2D.FillMode" />, определяющий способ заполнения кривой.</param>
        <param name="tension">Значение не ниже 0,0F, которое задает натяжение кривой.</param>
        <summary>Заполняет внутреннюю часть замкнутой фундаментальной сплайновой кривой, определяемой массивом структур <see cref="T:System.Drawing.PointF" />, используя указанный режим заливки и натяжение.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Этот метод заполняет внутреннюю часть замкнутой фундаментальной сплайновой, который проходит через все точки в массиве. Если конечная точка не совпадает с начальной, дополнительный отрезок кривой добавляется с последней точки первой точки, чтобы закрыть его.  
  
 Массив точек должен содержать по крайней мере четыре <xref:System.Drawing.Point> структуры.  
  
 `tension` Параметр определяет форму кривой. Если значение `tension` параметр равен 0, 0f, этот метод формирует сегменты прямой линии, соединяющие точки. Как правило `tension` меньше или равно 1, 0f. Значения свыше 1.0F выдают необычные результаты.  
  
   
  
## Examples  
 Следующий пример кода предназначен для работы с Windows Forms, и для него необходим <xref:System.Windows.Forms.PaintEventArgs> `e`, который является параметром <xref:System.Windows.Forms.Control.Paint> обработчика событий. Код выполняет следующие действия.  
  
-   Создает сплошной кисти красного цвета.  
  
-   Создает массив из четырех точек для определения кривой.  
  
-   Задает режим заполнения <xref:System.Drawing.Drawing2D.FillMode.Winding>.  
  
-   Задает натяжение равным 1,0.  
  
-   Заполняет кривую на экране.  
  
 [!code-cpp[System.Drawing.ClassicGraphicsExamples2#98](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples2/CPP/form1.cpp#98)]
 [!code-csharp[System.Drawing.ClassicGraphicsExamples2#98](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples2/CS/form1.cs#98)]
 [!code-vb[System.Drawing.ClassicGraphicsExamples2#98](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples2/VB/form1.vb#98)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          Свойство <paramref name="brush" /> имеет значение <see langword="null" />.  
  
 - или -  
  
 Свойство <paramref name="points" /> имеет значение <see langword="null" />.</exception>
      </Docs>
    </Member>
    <MemberGroup MemberName="FillEllipse">
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Заполняет внутреннюю часть эллипса, определяемого ограничивающим прямоугольником, заданным с помощью пары координат, ширины и высоты.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="FillEllipse">
      <MemberSignature Language="C#" Value="public void FillEllipse (System.Drawing.Brush brush, System.Drawing.Rectangle rect);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void FillEllipse(class System.Drawing.Brush brush, valuetype System.Drawing.Rectangle rect) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.FillEllipse(System.Drawing.Brush,System.Drawing.Rectangle)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void FillEllipse(System::Drawing::Brush ^ brush, System::Drawing::Rectangle rect);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="brush" Type="System.Drawing.Brush" />
        <Parameter Name="rect" Type="System.Drawing.Rectangle" />
      </Parameters>
      <Docs>
        <param name="brush">
          Объект <see cref="T:System.Drawing.Brush" />, определяющий параметры заливки.</param>
        <param name="rect">
          Структура <see cref="T:System.Drawing.Rectangle" />, представляющая ограничивающий прямоугольник, который определяет эллипс.</param>
        <summary>Заполняет внутреннюю часть эллипса, определяемого ограничивающим прямоугольником, который задан структурой <see cref="T:System.Drawing.Rectangle" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Этот метод заполняет внутреннюю часть эллипса с <xref:System.Drawing.Brush>. Эллипс, определяемый ограничивающего прямоугольника, который представлен `rect` параметра.  
  
   
  
## Examples  
 Следующий пример кода предназначен для работы с Windows Forms, и для него необходим <xref:System.Windows.Forms.PaintEventArgs> `e`, который является параметром <xref:System.Windows.Forms.Control.Paint> обработчика событий. Код выполняет следующие действия.  
  
-   Создает сплошной кисти красного цвета.  
  
-   Создает прямоугольник, ограничивающий эллипс.  
  
-   Заполняет эллипс на экране.  
  
 [!code-cpp[System.Drawing.ClassicGraphicsExamples2#99](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples2/CPP/form1.cpp#99)]
 [!code-csharp[System.Drawing.ClassicGraphicsExamples2#99](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples2/CS/form1.cs#99)]
 [!code-vb[System.Drawing.ClassicGraphicsExamples2#99](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples2/VB/form1.vb#99)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          Свойство <paramref name="brush" /> имеет значение <see langword="null" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="FillEllipse">
      <MemberSignature Language="C#" Value="public void FillEllipse (System.Drawing.Brush brush, System.Drawing.RectangleF rect);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void FillEllipse(class System.Drawing.Brush brush, valuetype System.Drawing.RectangleF rect) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.FillEllipse(System.Drawing.Brush,System.Drawing.RectangleF)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void FillEllipse(System::Drawing::Brush ^ brush, System::Drawing::RectangleF rect);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="brush" Type="System.Drawing.Brush" />
        <Parameter Name="rect" Type="System.Drawing.RectangleF" />
      </Parameters>
      <Docs>
        <param name="brush">
          Объект <see cref="T:System.Drawing.Brush" />, определяющий параметры заливки.</param>
        <param name="rect">
          Структура <see cref="T:System.Drawing.RectangleF" />, представляющая ограничивающий прямоугольник, который определяет эллипс.</param>
        <summary>Заполняет внутреннюю часть эллипса, определяемого ограничивающим прямоугольником, который задан структурой <see cref="T:System.Drawing.RectangleF" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Этот метод заполняет внутреннюю часть эллипса с <xref:System.Drawing.Brush>. Эллипс, определяемый ограничивающего прямоугольника, который представлен `rect` параметра.  
  
   
  
## Examples  
 Следующий пример кода предназначен для работы с Windows Forms, и для него необходим <xref:System.Windows.Forms.PaintEventArgs> `e`, который является параметром <xref:System.Windows.Forms.Control.Paint> обработчика событий. Код выполняет следующие действия.  
  
-   Создает сплошной кисти красного цвета.  
  
-   Создает прямоугольник, ограничивающий эллипс.  
  
-   Заполняет эллипс на экране.  
  
 [!code-cpp[System.Drawing.ClassicGraphicsExamples2#100](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples2/CPP/form1.cpp#100)]
 [!code-csharp[System.Drawing.ClassicGraphicsExamples2#100](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples2/CS/form1.cs#100)]
 [!code-vb[System.Drawing.ClassicGraphicsExamples2#100](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples2/VB/form1.vb#100)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          Свойство <paramref name="brush" /> имеет значение <see langword="null" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="FillEllipse">
      <MemberSignature Language="C#" Value="public void FillEllipse (System.Drawing.Brush brush, int x, int y, int width, int height);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void FillEllipse(class System.Drawing.Brush brush, int32 x, int32 y, int32 width, int32 height) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.FillEllipse(System.Drawing.Brush,System.Int32,System.Int32,System.Int32,System.Int32)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void FillEllipse(System::Drawing::Brush ^ brush, int x, int y, int width, int height);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="brush" Type="System.Drawing.Brush" />
        <Parameter Name="x" Type="System.Int32" />
        <Parameter Name="y" Type="System.Int32" />
        <Parameter Name="width" Type="System.Int32" />
        <Parameter Name="height" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="brush">
          Объект <see cref="T:System.Drawing.Brush" />, определяющий параметры заливки.</param>
        <param name="x">Координата X верхнего левого угла ограничивающего прямоугольника, который определяет эллипс.</param>
        <param name="y">Координата Y верхнего левого угла ограничивающего прямоугольника, который определяет эллипс.</param>
        <param name="width">Ширина ограничивающего прямоугольника, который определяет эллипс.</param>
        <param name="height">Высота ограничивающего прямоугольника, который определяет эллипс.</param>
        <summary>Заполняет внутреннюю часть эллипса, определяемого ограничивающим прямоугольником, заданным с помощью пары координат, ширины и высоты.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Этот метод заполняет внутреннюю часть эллипса с <xref:System.Drawing.Brush>. Эллипс, определяемый ограничивающего прямоугольника, который представлен `x`, `y`, `width`, и `height` параметров.  
  
   
  
## Examples  
 Следующий пример кода предназначен для работы с Windows Forms, и для него необходим <xref:System.Windows.Forms.PaintEventArgs> `e`, который является параметром <xref:System.Windows.Forms.Control.Paint> обработчика событий. Код выполняет следующие действия.  
  
-   Создает сплошной кисти красного цвета.  
  
-   Определяет положение и размер прямоугольника, который ограничивает эллипс.  
  
-   Заполняет эллипс на экране.  
  
 [!code-cpp[System.Drawing.ClassicGraphicsExamples2#101](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples2/CPP/form1.cpp#101)]
 [!code-csharp[System.Drawing.ClassicGraphicsExamples2#101](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples2/CS/form1.cs#101)]
 [!code-vb[System.Drawing.ClassicGraphicsExamples2#101](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples2/VB/form1.vb#101)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          Свойство <paramref name="brush" /> имеет значение <see langword="null" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="FillEllipse">
      <MemberSignature Language="C#" Value="public void FillEllipse (System.Drawing.Brush brush, float x, float y, float width, float height);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void FillEllipse(class System.Drawing.Brush brush, float32 x, float32 y, float32 width, float32 height) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.FillEllipse(System.Drawing.Brush,System.Single,System.Single,System.Single,System.Single)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void FillEllipse(System::Drawing::Brush ^ brush, float x, float y, float width, float height);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="brush" Type="System.Drawing.Brush" />
        <Parameter Name="x" Type="System.Single" />
        <Parameter Name="y" Type="System.Single" />
        <Parameter Name="width" Type="System.Single" />
        <Parameter Name="height" Type="System.Single" />
      </Parameters>
      <Docs>
        <param name="brush">
          Объект <see cref="T:System.Drawing.Brush" />, определяющий параметры заливки.</param>
        <param name="x">Координата X верхнего левого угла ограничивающего прямоугольника, который определяет эллипс.</param>
        <param name="y">Координата Y верхнего левого угла ограничивающего прямоугольника, который определяет эллипс.</param>
        <param name="width">Ширина ограничивающего прямоугольника, который определяет эллипс.</param>
        <param name="height">Высота ограничивающего прямоугольника, который определяет эллипс.</param>
        <summary>Заполняет внутреннюю часть эллипса, определяемого ограничивающим прямоугольником, заданным с помощью пары координат, ширины и высоты.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Этот метод заполняет внутреннюю часть эллипса с <xref:System.Drawing.Brush>. Эллипс, определяемый ограничивающего прямоугольника, который представлен `x`, `y`, `width`, и `height` параметров.  
  
   
  
## Examples  
 Следующий пример кода предназначен для работы с Windows Forms, и для него необходим <xref:System.Windows.Forms.PaintEventArgs> `e`, который является параметром <xref:System.Windows.Forms.Control.Paint> обработчика событий. Код выполняет следующие действия.  
  
-   Создает сплошной кисти красного цвета.  
  
-   Определяет положение и размер прямоугольника, который ограничивает эллипс.  
  
-   Заполняет эллипс на экране.  
  
 [!code-cpp[System.Drawing.ClassicGraphicsExamples2#102](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples2/CPP/form1.cpp#102)]
 [!code-csharp[System.Drawing.ClassicGraphicsExamples2#102](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples2/CS/form1.cs#102)]
 [!code-vb[System.Drawing.ClassicGraphicsExamples2#102](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples2/VB/form1.vb#102)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          Свойство <paramref name="brush" /> имеет значение <see langword="null" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="FillPath">
      <MemberSignature Language="C#" Value="public void FillPath (System.Drawing.Brush brush, System.Drawing.Drawing2D.GraphicsPath path);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void FillPath(class System.Drawing.Brush brush, class System.Drawing.Drawing2D.GraphicsPath path) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.FillPath(System.Drawing.Brush,System.Drawing.Drawing2D.GraphicsPath)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void FillPath(System::Drawing::Brush ^ brush, System::Drawing::Drawing2D::GraphicsPath ^ path);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="brush" Type="System.Drawing.Brush" />
        <Parameter Name="path" Type="System.Drawing.Drawing2D.GraphicsPath" />
      </Parameters>
      <Docs>
        <param name="brush">
          Объект <see cref="T:System.Drawing.Brush" />, определяющий параметры заливки.</param>
        <param name="path">
          Объект <see cref="T:System.Drawing.Drawing2D.GraphicsPath" />, представляющий контур для заливки.</param>
        <summary>Заполняет внутреннюю часть объекта <see cref="T:System.Drawing.Drawing2D.GraphicsPath" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Объект <xref:System.Drawing.Drawing2D.GraphicsPath> состоит из ряда сегментов линий и кривых. Если путь, представленный `path` параметра не закрыта, дополнительный сегмент добавляется между последней точки замкнуть контур.  
  
   
  
## Examples  
 Следующий пример кода предназначен для работы с Windows Forms, и для него необходим <xref:System.Windows.Forms.PaintEventArgs> `e`, который является параметром <xref:System.Windows.Forms.Control.Paint> обработчика событий. Код выполняет следующие действия.  
  
-   Создает сплошной кисти красного цвета.  
  
-   Создает графический объект контура.  
  
-   Добавляет эллипс графический контур.  
  
-   Заполняет контур на экране.  
  
 [!code-cpp[System.Drawing.ClassicGraphicsExamples2#103](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples2/CPP/form1.cpp#103)]
 [!code-csharp[System.Drawing.ClassicGraphicsExamples2#103](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples2/CS/form1.cs#103)]
 [!code-vb[System.Drawing.ClassicGraphicsExamples2#103](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples2/VB/form1.vb#103)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          Свойство <paramref name="brush" /> имеет значение <see langword="null" />.  
  
 - или -  
  
 Свойство <paramref name="path" /> имеет значение <see langword="null" />.</exception>
      </Docs>
    </Member>
    <MemberGroup MemberName="FillPie">
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Заполняет внутреннюю часть сектора, определяемого эллипсом, который задан парой координат, шириной, высотой и двумя радиальными линиями.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="FillPie">
      <MemberSignature Language="C#" Value="public void FillPie (System.Drawing.Brush brush, System.Drawing.Rectangle rect, float startAngle, float sweepAngle);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void FillPie(class System.Drawing.Brush brush, valuetype System.Drawing.Rectangle rect, float32 startAngle, float32 sweepAngle) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.FillPie(System.Drawing.Brush,System.Drawing.Rectangle,System.Single,System.Single)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void FillPie(System::Drawing::Brush ^ brush, System::Drawing::Rectangle rect, float startAngle, float sweepAngle);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="brush" Type="System.Drawing.Brush" />
        <Parameter Name="rect" Type="System.Drawing.Rectangle" />
        <Parameter Name="startAngle" Type="System.Single" />
        <Parameter Name="sweepAngle" Type="System.Single" />
      </Parameters>
      <Docs>
        <param name="brush">
          Объект <see cref="T:System.Drawing.Brush" />, определяющий параметры заливки.</param>
        <param name="rect">
          Структура <see cref="T:System.Drawing.Rectangle" />, представляющая ограничивающий прямоугольник, определяющий эллипс, частью которого является данный сектор.</param>
        <param name="startAngle">Угол (в градусах), который измеряется по часовой стрелке, начиная от оси X и заканчивая первой стороной сектора.</param>
        <param name="sweepAngle">Угол (в градусах), который измеряется по часовой стрелке, начиная от значения параметра <c>startAngle</c> и заканчивая второй стороной сектора.</param>
        <summary>Заполняет внутреннюю часть сектора, определяемого эллипсом, который задан структурой <see cref="T:System.Drawing.RectangleF" /> и двумя радиальными линиями.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Этот метод заполняет внутреннюю часть сектора, определяемого дугой эллипса и двумя радиальными линиями, которые пересекаются с конечными точками дуги. Эллипс определяется исходя из ограничивающего прямоугольника. Сектор состоит из двумя радиальными линиями, определяется `startAngle` и `sweepAngle` и дуги между пересечения этих линий с эллипсом.  
  
 Если `sweepAngle` параметра больше 360 или меньше-360 градусов, он интерпретируется как если бы он был 360 или -360 градусов, соответственно.  
  
   
  
## Examples  
 Следующий пример кода предназначен для работы с Windows Forms, и для него необходим <xref:System.Windows.Forms.PaintEventArgs> `e`, который является параметром <xref:System.Windows.Forms.Control.Paint> обработчика событий. Код выполняет следующие действия.  
  
-   Создает сплошной кисти красного цвета.  
  
-   Создает прямоугольник, ограничивающий эллипс.  
  
-   Определяет начальный угол (относительно оси x) и угол поворота (как по часовой стрелке).  
  
-   Заполняет область сектор эллипса на экране.  
  
 [!code-cpp[System.Drawing.ClassicGraphicsExamples2#104](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples2/CPP/form1.cpp#104)]
 [!code-csharp[System.Drawing.ClassicGraphicsExamples2#104](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples2/CS/form1.cs#104)]
 [!code-vb[System.Drawing.ClassicGraphicsExamples2#104](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples2/VB/form1.vb#104)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          Свойство <paramref name="brush" /> имеет значение <see langword="null" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="FillPie">
      <MemberSignature Language="C#" Value="public void FillPie (System.Drawing.Brush brush, int x, int y, int width, int height, int startAngle, int sweepAngle);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void FillPie(class System.Drawing.Brush brush, int32 x, int32 y, int32 width, int32 height, int32 startAngle, int32 sweepAngle) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.FillPie(System.Drawing.Brush,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void FillPie(System::Drawing::Brush ^ brush, int x, int y, int width, int height, int startAngle, int sweepAngle);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="brush" Type="System.Drawing.Brush" />
        <Parameter Name="x" Type="System.Int32" />
        <Parameter Name="y" Type="System.Int32" />
        <Parameter Name="width" Type="System.Int32" />
        <Parameter Name="height" Type="System.Int32" />
        <Parameter Name="startAngle" Type="System.Int32" />
        <Parameter Name="sweepAngle" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="brush">
          Объект <see cref="T:System.Drawing.Brush" />, определяющий параметры заливки.</param>
        <param name="x">Координата X верхнего левого угла ограничивающего прямоугольника, определяющего эллипс, частью которого является сектор.</param>
        <param name="y">Координата Y верхнего левого угла ограничивающего прямоугольника, определяющего эллипс, частью которого является сектор.</param>
        <param name="width">Ширина ограничивающего прямоугольника, определяющего эллипс, частью которого является данный сектор.</param>
        <param name="height">Высота ограничивающего прямоугольника, определяющего эллипс, частью которого является данный сектор.</param>
        <param name="startAngle">Угол (в градусах), который измеряется по часовой стрелке, начиная от оси X и заканчивая первой стороной сектора.</param>
        <param name="sweepAngle">Угол (в градусах), который измеряется по часовой стрелке, начиная от значения параметра <c>startAngle</c> и заканчивая второй стороной сектора.</param>
        <summary>Заполняет внутреннюю часть сектора, определяемого эллипсом, который задан парой координат, шириной, высотой и двумя радиальными линиями.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Этот метод заполняет внутреннюю часть сектора, определяемого дугой эллипса и двумя радиальными линиями, которые пересекаются с конечными точками дуги. Эллипс определяется исходя из ограничивающего прямоугольника. Сектор состоит из двумя радиальными линиями, определяется `startAngle` и `sweepAngle` и дуги между пересечения этих линий с эллипсом.  
  
 Если `sweepAngle` параметра больше 360 или меньше-360 градусов, он интерпретируется как если бы он был 360 или -360 градусов, соответственно.  
  
   
  
## Examples  
 Следующий пример кода предназначен для работы с Windows Forms, и для него необходим <xref:System.Windows.Forms.PaintEventArgs> `e`, который является параметром <xref:System.Windows.Forms.Control.Paint> обработчика событий. Код выполняет следующие действия.  
  
-   Создает сплошной кисти красного цвета.  
  
-   Определяет положение и размер прямоугольника, который ограничивает эллипс.  
  
-   Определяет начальный угол (относительно оси x) и угол поворота (как по часовой стрелке).  
  
-   Заполняет область сектор эллипса на экране.  
  
 [!code-cpp[System.Drawing.ClassicGraphicsExamples2#105](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples2/CPP/form1.cpp#105)]
 [!code-csharp[System.Drawing.ClassicGraphicsExamples2#105](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples2/CS/form1.cs#105)]
 [!code-vb[System.Drawing.ClassicGraphicsExamples2#105](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples2/VB/form1.vb#105)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          Свойство <paramref name="brush" /> имеет значение <see langword="null" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="FillPie">
      <MemberSignature Language="C#" Value="public void FillPie (System.Drawing.Brush brush, float x, float y, float width, float height, float startAngle, float sweepAngle);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void FillPie(class System.Drawing.Brush brush, float32 x, float32 y, float32 width, float32 height, float32 startAngle, float32 sweepAngle) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.FillPie(System.Drawing.Brush,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void FillPie(System::Drawing::Brush ^ brush, float x, float y, float width, float height, float startAngle, float sweepAngle);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="brush" Type="System.Drawing.Brush" />
        <Parameter Name="x" Type="System.Single" />
        <Parameter Name="y" Type="System.Single" />
        <Parameter Name="width" Type="System.Single" />
        <Parameter Name="height" Type="System.Single" />
        <Parameter Name="startAngle" Type="System.Single" />
        <Parameter Name="sweepAngle" Type="System.Single" />
      </Parameters>
      <Docs>
        <param name="brush">
          Объект <see cref="T:System.Drawing.Brush" />, определяющий параметры заливки.</param>
        <param name="x">Координата X верхнего левого угла ограничивающего прямоугольника, определяющего эллипс, частью которого является сектор.</param>
        <param name="y">Координата Y верхнего левого угла ограничивающего прямоугольника, определяющего эллипс, частью которого является сектор.</param>
        <param name="width">Ширина ограничивающего прямоугольника, определяющего эллипс, частью которого является данный сектор.</param>
        <param name="height">Высота ограничивающего прямоугольника, определяющего эллипс, частью которого является данный сектор.</param>
        <param name="startAngle">Угол (в градусах), который измеряется по часовой стрелке, начиная от оси X и заканчивая первой стороной сектора.</param>
        <param name="sweepAngle">Угол (в градусах), который измеряется по часовой стрелке, начиная от значения параметра <c>startAngle</c> и заканчивая второй стороной сектора.</param>
        <summary>Заполняет внутреннюю часть сектора, определяемого эллипсом, который задан парой координат, шириной, высотой и двумя радиальными линиями.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Этот метод заполняет внутреннюю часть сектора, определяемого дугой эллипса и двумя радиальными линиями, которые пересекаются с конечными точками дуги. Эллипс определяется исходя из ограничивающего прямоугольника. Сектор состоит из двумя радиальными линиями, определяется `startAngle` и `sweepAngle` параметры и дуги между пересечения этих линий с эллипсом.  
  
 Если `sweepAngle` параметра больше 360 или меньше-360 градусов, он интерпретируется как если бы он был 360 или -360 градусов, соответственно.  
  
   
  
## Examples  
 Следующий пример кода предназначен для работы с Windows Forms, и для него необходим <xref:System.Windows.Forms.PaintEventArgs> `e`, который является параметром <xref:System.Windows.Forms.Control.Paint> обработчика событий. Код выполняет следующие действия.  
  
-   Создает сплошной кисти красного цвета.  
  
-   Определяет положение и размер прямоугольника, который ограничивает эллипс.  
  
-   Определяет начальный угол (относительно оси x) и угол поворота (как по часовой стрелке).  
  
-   Заполняет область сектор эллипса на экране.  
  
 [!code-cpp[System.Drawing.ClassicGraphicsExamples2#106](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples2/CPP/form1.cpp#106)]
 [!code-csharp[System.Drawing.ClassicGraphicsExamples2#106](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples2/CS/form1.cs#106)]
 [!code-vb[System.Drawing.ClassicGraphicsExamples2#106](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples2/VB/form1.vb#106)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          Свойство <paramref name="brush" /> имеет значение <see langword="null" />.</exception>
      </Docs>
    </Member>
    <MemberGroup MemberName="FillPolygon">
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Заполняет внутреннюю часть многоугольника, определяемого массивом точек, заданных структурами <see cref="T:System.Drawing.Point" />.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="FillPolygon">
      <MemberSignature Language="C#" Value="public void FillPolygon (System.Drawing.Brush brush, System.Drawing.Point[] points);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void FillPolygon(class System.Drawing.Brush brush, valuetype System.Drawing.Point[] points) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.FillPolygon(System.Drawing.Brush,System.Drawing.Point[])" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void FillPolygon(System::Drawing::Brush ^ brush, cli::array &lt;System::Drawing::Point&gt; ^ points);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="brush" Type="System.Drawing.Brush" />
        <Parameter Name="points" Type="System.Drawing.Point[]" />
      </Parameters>
      <Docs>
        <param name="brush">
          Объект <see cref="T:System.Drawing.Brush" />, определяющий параметры заливки.</param>
        <param name="points">Массив структур <see cref="T:System.Drawing.Point" />, которые представляют вершины закрашиваемого многоугольника.</param>
        <summary>Заполняет внутреннюю часть многоугольника, определяемого массивом точек, заданных структурами <see cref="T:System.Drawing.Point" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Каждые два последовательных точек в массиве определяет сторону многоугольника. Кроме того Если последняя и первая точка не совпадают, они определяют закрытия части многоугольника.  
  
   
  
## Examples  
 Следующий пример кода предназначен для работы с Windows Forms, и для него необходим <xref:System.Windows.Forms.PaintEventArgs> `e`, который является параметром <xref:System.Windows.Forms.Control.Paint> обработчика событий. Код выполняет следующие действия.  
  
-   Создает сплошной кисти синего цвета.  
  
-   Создает массив из семи точек для определения многоугольника.  
  
-   Заполняет область многоугольника на экране.  
  
 [!code-cpp[System.Drawing.ClassicGraphicsExamples2#107](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples2/CPP/form1.cpp#107)]
 [!code-csharp[System.Drawing.ClassicGraphicsExamples2#107](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples2/CS/form1.cs#107)]
 [!code-vb[System.Drawing.ClassicGraphicsExamples2#107](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples2/VB/form1.vb#107)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          Свойство <paramref name="brush" /> имеет значение <see langword="null" />.  
  
 - или -  
  
 Свойство <paramref name="points" /> имеет значение <see langword="null" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="FillPolygon">
      <MemberSignature Language="C#" Value="public void FillPolygon (System.Drawing.Brush brush, System.Drawing.PointF[] points);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void FillPolygon(class System.Drawing.Brush brush, valuetype System.Drawing.PointF[] points) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.FillPolygon(System.Drawing.Brush,System.Drawing.PointF[])" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void FillPolygon(System::Drawing::Brush ^ brush, cli::array &lt;System::Drawing::PointF&gt; ^ points);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="brush" Type="System.Drawing.Brush" />
        <Parameter Name="points" Type="System.Drawing.PointF[]" />
      </Parameters>
      <Docs>
        <param name="brush">
          Объект <see cref="T:System.Drawing.Brush" />, определяющий параметры заливки.</param>
        <param name="points">Массив структур <see cref="T:System.Drawing.PointF" />, которые представляют вершины закрашиваемого многоугольника.</param>
        <summary>Заполняет внутреннюю часть многоугольника, определяемого массивом точек, заданных структурами <see cref="T:System.Drawing.PointF" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Каждые два последовательных точек в массиве определяет сторону многоугольника. Кроме того Если последняя и первая точка не совпадают, они определяют закрытия части многоугольника.  
  
   
  
## Examples  
 Следующий пример кода предназначен для работы с Windows Forms, и для него необходим <xref:System.Windows.Forms.PaintEventArgs> `e`, который является параметром <xref:System.Windows.Forms.Control.Paint> обработчика событий. Код выполняет следующие действия.  
  
-   Создает сплошной кисти синего цвета.  
  
-   Создает массив из семи точек для определения многоугольника.  
  
-   Заполняет область многоугольника на экране.  
  
 [!code-cpp[System.Drawing.ClassicGraphicsExamples2#109](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples2/CPP/form1.cpp#109)]
 [!code-csharp[System.Drawing.ClassicGraphicsExamples2#109](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples2/CS/form1.cs#109)]
 [!code-vb[System.Drawing.ClassicGraphicsExamples2#109](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples2/VB/form1.vb#109)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          Свойство <paramref name="brush" /> имеет значение <see langword="null" />.  
  
 - или -  
  
 Свойство <paramref name="points" /> имеет значение <see langword="null" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="FillPolygon">
      <MemberSignature Language="C#" Value="public void FillPolygon (System.Drawing.Brush brush, System.Drawing.Point[] points, System.Drawing.Drawing2D.FillMode fillMode);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void FillPolygon(class System.Drawing.Brush brush, valuetype System.Drawing.Point[] points, valuetype System.Drawing.Drawing2D.FillMode fillMode) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.FillPolygon(System.Drawing.Brush,System.Drawing.Point[],System.Drawing.Drawing2D.FillMode)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void FillPolygon(System::Drawing::Brush ^ brush, cli::array &lt;System::Drawing::Point&gt; ^ points, System::Drawing::Drawing2D::FillMode fillMode);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="brush" Type="System.Drawing.Brush" />
        <Parameter Name="points" Type="System.Drawing.Point[]" />
        <Parameter Name="fillMode" Type="System.Drawing.Drawing2D.FillMode" />
      </Parameters>
      <Docs>
        <param name="brush">
          Объект <see cref="T:System.Drawing.Brush" />, определяющий параметры заливки.</param>
        <param name="points">Массив структур <see cref="T:System.Drawing.Point" />, которые представляют вершины закрашиваемого многоугольника.</param>
        <param name="fillMode">Элемент перечисления <see cref="T:System.Drawing.Drawing2D.FillMode" />, определяющий стиль заливки.</param>
        <summary>Заполняет внутреннюю часть многоугольника, определенного массивом точек, которые задаются структурами <see cref="T:System.Drawing.Point" />, используя указанный режим заливки.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Каждые два последовательных точек в массиве определяет сторону многоугольника. Кроме того Если последняя и первая точка не совпадают, они определяют закрытия части многоугольника.  
  
   
  
## Examples  
 Следующий пример кода предназначен для работы с Windows Forms, и для него необходим <xref:System.Windows.Forms.PaintEventArgs> `e`, который является параметром <xref:System.Windows.Forms.Control.Paint> обработчика событий. Код выполняет следующие действия.  
  
-   Создает сплошной кисти синего цвета.  
  
-   Создает массив из семи точек для определения многоугольника.  
  
-   Задает режим заполнения <xref:System.Drawing.Drawing2D.FillMode.Winding>.  
  
-   Заполняет область многоугольника на экране.  
  
 [!code-cpp[System.Drawing.ClassicGraphicsExamples2#108](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples2/CPP/form1.cpp#108)]
 [!code-csharp[System.Drawing.ClassicGraphicsExamples2#108](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples2/CS/form1.cs#108)]
 [!code-vb[System.Drawing.ClassicGraphicsExamples2#108](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples2/VB/form1.vb#108)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          Свойство <paramref name="brush" /> имеет значение <see langword="null" />.  
  
 - или -  
  
 Свойство <paramref name="points" /> имеет значение <see langword="null" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="FillPolygon">
      <MemberSignature Language="C#" Value="public void FillPolygon (System.Drawing.Brush brush, System.Drawing.PointF[] points, System.Drawing.Drawing2D.FillMode fillMode);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void FillPolygon(class System.Drawing.Brush brush, valuetype System.Drawing.PointF[] points, valuetype System.Drawing.Drawing2D.FillMode fillMode) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.FillPolygon(System.Drawing.Brush,System.Drawing.PointF[],System.Drawing.Drawing2D.FillMode)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void FillPolygon(System::Drawing::Brush ^ brush, cli::array &lt;System::Drawing::PointF&gt; ^ points, System::Drawing::Drawing2D::FillMode fillMode);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="brush" Type="System.Drawing.Brush" />
        <Parameter Name="points" Type="System.Drawing.PointF[]" />
        <Parameter Name="fillMode" Type="System.Drawing.Drawing2D.FillMode" />
      </Parameters>
      <Docs>
        <param name="brush">
          Объект <see cref="T:System.Drawing.Brush" />, определяющий параметры заливки.</param>
        <param name="points">Массив структур <see cref="T:System.Drawing.PointF" />, которые представляют вершины закрашиваемого многоугольника.</param>
        <param name="fillMode">Элемент перечисления <see cref="T:System.Drawing.Drawing2D.FillMode" />, определяющий стиль заливки.</param>
        <summary>Заполняет внутреннюю часть многоугольника, определенного массивом точек, которые задаются структурами <see cref="T:System.Drawing.PointF" />, используя указанный режим заливки.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Каждые два последовательных точек в массиве определяет сторону многоугольника. Кроме того Если последняя и первая точка не совпадают, они определяют закрытия части многоугольника.  
  
   
  
## Examples  
 Следующий пример кода предназначен для работы с Windows Forms, и для него необходим <xref:System.Windows.Forms.PaintEventArgs> `e`, который является параметром <xref:System.Windows.Forms.Control.Paint> обработчика событий. Код выполняет следующие действия.  
  
-   Создает сплошной кисти синего цвета.  
  
-   Создает массив из семи точек для определения многоугольника.  
  
-   Задает режим заполнения <xref:System.Drawing.Drawing2D.FillMode.Winding>.  
  
-   Заполняет область многоугольника на экране.  
  
 [!code-cpp[System.Drawing.ClassicGraphicsExamples2#110](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples2/CPP/form1.cpp#110)]
 [!code-csharp[System.Drawing.ClassicGraphicsExamples2#110](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples2/CS/form1.cs#110)]
 [!code-vb[System.Drawing.ClassicGraphicsExamples2#110](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples2/VB/form1.vb#110)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          Свойство <paramref name="brush" /> имеет значение <see langword="null" />.  
  
 - или -  
  
 Свойство <paramref name="points" /> имеет значение <see langword="null" />.</exception>
      </Docs>
    </Member>
    <MemberGroup MemberName="FillRectangle">
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Заполняет внутреннюю часть прямоугольника, который задается парой координат, шириной и высотой.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="FillRectangle">
      <MemberSignature Language="C#" Value="public void FillRectangle (System.Drawing.Brush brush, System.Drawing.Rectangle rect);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void FillRectangle(class System.Drawing.Brush brush, valuetype System.Drawing.Rectangle rect) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.FillRectangle(System.Drawing.Brush,System.Drawing.Rectangle)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void FillRectangle(System::Drawing::Brush ^ brush, System::Drawing::Rectangle rect);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="brush" Type="System.Drawing.Brush" />
        <Parameter Name="rect" Type="System.Drawing.Rectangle" />
      </Parameters>
      <Docs>
        <param name="brush">
          Объект <see cref="T:System.Drawing.Brush" />, определяющий параметры заливки.</param>
        <param name="rect">
          Структура <see cref="T:System.Drawing.Rectangle" />, представляющая прямоугольник для заливки.</param>
        <summary>Заполняет внутреннюю часть прямоугольника, определяемого структурой <see cref="T:System.Drawing.Rectangle" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Этот метод заполняет внутреннюю часть прямоугольника, определяемого `rect` параметр, включая указанного верхнего левого угла и вычисляемые нижние границы.  
  
   
  
## Examples  
 Следующий пример кода предназначен для работы с Windows Forms, и для него необходим <xref:System.Windows.Forms.PaintEventArgs> `e`, который является параметром <xref:System.Windows.Forms.Control.Paint> обработчика событий. Код выполняет следующие действия.  
  
-   Создает сплошной кисти синего цвета.  
  
-   Создает прямоугольник.  
  
-   Заполняет прямоугольную область на экране.  
  
 [!code-cpp[System.Drawing.ClassicGraphicsExamples3#111](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples3/CPP/form1.cpp#111)]
 [!code-csharp[System.Drawing.ClassicGraphicsExamples3#111](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples3/CS/form1.cs#111)]
 [!code-vb[System.Drawing.ClassicGraphicsExamples3#111](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples3/VB/form1.vb#111)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          Свойство <paramref name="brush" /> имеет значение <see langword="null" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="FillRectangle">
      <MemberSignature Language="C#" Value="public void FillRectangle (System.Drawing.Brush brush, System.Drawing.RectangleF rect);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void FillRectangle(class System.Drawing.Brush brush, valuetype System.Drawing.RectangleF rect) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.FillRectangle(System.Drawing.Brush,System.Drawing.RectangleF)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void FillRectangle(System::Drawing::Brush ^ brush, System::Drawing::RectangleF rect);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="brush" Type="System.Drawing.Brush" />
        <Parameter Name="rect" Type="System.Drawing.RectangleF" />
      </Parameters>
      <Docs>
        <param name="brush">
          Объект <see cref="T:System.Drawing.Brush" />, определяющий параметры заливки.</param>
        <param name="rect">
          Структура <see cref="T:System.Drawing.RectangleF" />, представляющая прямоугольник для заливки.</param>
        <summary>Заполняет внутреннюю часть прямоугольника, определяемого структурой <see cref="T:System.Drawing.RectangleF" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Этот метод заполняет внутреннюю часть прямоугольника, определяемого `rect` параметр, включая указанного верхнего левого угла и вычисляемые нижние границы.  
  
   
  
## Examples  
 Следующий пример кода предназначен для работы с Windows Forms, и для него необходим <xref:System.Windows.Forms.PaintEventArgs> `e`, который является параметром <xref:System.Windows.Forms.Control.Paint> обработчика событий. Код выполняет следующие действия.  
  
-   Создает сплошной кисти синего цвета.  
  
-   Создает прямоугольник.  
  
-   Заполняет прямоугольную область на экране.  
  
 [!code-cpp[System.Drawing.ClassicGraphicsExamples3#112](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples3/CPP/form1.cpp#112)]
 [!code-csharp[System.Drawing.ClassicGraphicsExamples3#112](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples3/CS/form1.cs#112)]
 [!code-vb[System.Drawing.ClassicGraphicsExamples3#112](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples3/VB/form1.vb#112)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          Свойство <paramref name="brush" /> имеет значение <see langword="null" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="FillRectangle">
      <MemberSignature Language="C#" Value="public void FillRectangle (System.Drawing.Brush brush, int x, int y, int width, int height);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void FillRectangle(class System.Drawing.Brush brush, int32 x, int32 y, int32 width, int32 height) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.FillRectangle(System.Drawing.Brush,System.Int32,System.Int32,System.Int32,System.Int32)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void FillRectangle(System::Drawing::Brush ^ brush, int x, int y, int width, int height);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="brush" Type="System.Drawing.Brush" />
        <Parameter Name="x" Type="System.Int32" />
        <Parameter Name="y" Type="System.Int32" />
        <Parameter Name="width" Type="System.Int32" />
        <Parameter Name="height" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="brush">
          Объект <see cref="T:System.Drawing.Brush" />, определяющий параметры заливки.</param>
        <param name="x">Координата X верхнего левого угла прямоугольника для заливки.</param>
        <param name="y">Координата Y верхнего левого угла прямоугольника для заливки.</param>
        <param name="width">Ширина прямоугольника для заливки.</param>
        <param name="height">Высота прямоугольника для заливки.</param>
        <summary>Заполняет внутреннюю часть прямоугольника, который задается парой координат, шириной и высотой.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Этот метод заполняет внутреннюю часть прямоугольника, определяемого`x`, `y`, `width`, и `height` параметров, включая указанного верхнего левого угла и вычисляемые нижние и нижнему краю.  
  
   
  
## Examples  
 Следующий пример кода предназначен для работы с Windows Forms, и для него необходим <xref:System.Windows.Forms.PaintEventArgs> `e`, который является параметром <xref:System.Windows.Forms.Control.Paint> обработчика событий. Код выполняет следующие действия.  
  
-   Создает сплошной кисти синего цвета.  
  
-   Определяет положение и размер прямоугольника.  
  
-   Заполняет прямоугольную область на экране.  
  
 [!code-cpp[System.Drawing.ClassicGraphicsExamples3#113](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples3/CPP/form1.cpp#113)]
 [!code-csharp[System.Drawing.ClassicGraphicsExamples3#113](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples3/CS/form1.cs#113)]
 [!code-vb[System.Drawing.ClassicGraphicsExamples3#113](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples3/VB/form1.vb#113)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          Свойство <paramref name="brush" /> имеет значение <see langword="null" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="FillRectangle">
      <MemberSignature Language="C#" Value="public void FillRectangle (System.Drawing.Brush brush, float x, float y, float width, float height);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void FillRectangle(class System.Drawing.Brush brush, float32 x, float32 y, float32 width, float32 height) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.FillRectangle(System.Drawing.Brush,System.Single,System.Single,System.Single,System.Single)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void FillRectangle(System::Drawing::Brush ^ brush, float x, float y, float width, float height);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="brush" Type="System.Drawing.Brush" />
        <Parameter Name="x" Type="System.Single" />
        <Parameter Name="y" Type="System.Single" />
        <Parameter Name="width" Type="System.Single" />
        <Parameter Name="height" Type="System.Single" />
      </Parameters>
      <Docs>
        <param name="brush">
          Объект <see cref="T:System.Drawing.Brush" />, определяющий параметры заливки.</param>
        <param name="x">Координата X верхнего левого угла прямоугольника для заливки.</param>
        <param name="y">Координата Y верхнего левого угла прямоугольника для заливки.</param>
        <param name="width">Ширина прямоугольника для заливки.</param>
        <param name="height">Высота прямоугольника для заливки.</param>
        <summary>Заполняет внутреннюю часть прямоугольника, который задается парой координат, шириной и высотой.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Этот метод заполняет внутреннюю часть прямоугольника, определяемого `x`, `y`, `width`, и `height` параметров, включая указанного верхнего левого угла и вычисляемые нижние и нижнему краю.  
  
   
  
## Examples  
 Следующий пример кода предназначен для работы с Windows Forms, и для него необходим <xref:System.Windows.Forms.PaintEventArgs> `e`, который является параметром <xref:System.Windows.Forms.Control.Paint> обработчика событий. Код выполняет следующие действия.  
  
-   Создает сплошной кисти синего цвета.  
  
-   Определяет положение и размер прямоугольника.  
  
-   Заполняет прямоугольную область на экране.  
  
 [!code-cpp[System.Drawing.ClassicGraphicsExamples3#114](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples3/CPP/form1.cpp#114)]
 [!code-csharp[System.Drawing.ClassicGraphicsExamples3#114](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples3/CS/form1.cs#114)]
 [!code-vb[System.Drawing.ClassicGraphicsExamples3#114](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples3/VB/form1.vb#114)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          Свойство <paramref name="brush" /> имеет значение <see langword="null" />.</exception>
      </Docs>
    </Member>
    <MemberGroup MemberName="FillRectangles">
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Заполняет внутреннюю часть набора прямоугольников, определяемых структурами <see cref="T:System.Drawing.Rectangle" />.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="FillRectangles">
      <MemberSignature Language="C#" Value="public void FillRectangles (System.Drawing.Brush brush, System.Drawing.Rectangle[] rects);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void FillRectangles(class System.Drawing.Brush brush, valuetype System.Drawing.Rectangle[] rects) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.FillRectangles(System.Drawing.Brush,System.Drawing.Rectangle[])" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void FillRectangles(System::Drawing::Brush ^ brush, cli::array &lt;System::Drawing::Rectangle&gt; ^ rects);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="brush" Type="System.Drawing.Brush" />
        <Parameter Name="rects" Type="System.Drawing.Rectangle[]" />
      </Parameters>
      <Docs>
        <param name="brush">
          Объект <see cref="T:System.Drawing.Brush" />, определяющий параметры заливки.</param>
        <param name="rects">Массив структур <see cref="T:System.Drawing.Rectangle" />, которые представляют прямоугольники для заливки.</param>
        <summary>Заполняет внутреннюю часть набора прямоугольников, определяемых структурами <see cref="T:System.Drawing.Rectangle" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 Следующий пример кода предназначен для работы с Windows Forms, и для него необходим <xref:System.Windows.Forms.PaintEventArgs> `e`, который является параметром <xref:System.Windows.Forms.Control.Paint> обработчика событий. Код выполняет следующие действия.  
  
-   Создает сплошной кисти синего цвета.  
  
-   Создает массив из трех прямоугольников.  
  
-   Заполняет три прямоугольной области, на экране.  
  
 [!code-cpp[System.Drawing.ClassicGraphicsExamples3#115](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples3/CPP/form1.cpp#115)]
 [!code-csharp[System.Drawing.ClassicGraphicsExamples3#115](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples3/CS/form1.cs#115)]
 [!code-vb[System.Drawing.ClassicGraphicsExamples3#115](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples3/VB/form1.vb#115)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          Свойство <paramref name="brush" /> имеет значение <see langword="null" />.  
  
 - или -  
  
 Свойство <paramref name="rects" /> имеет значение <see langword="null" />.</exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="rects" /> представляет собой массив нулевой длины.</exception>
      </Docs>
    </Member>
    <Member MemberName="FillRectangles">
      <MemberSignature Language="C#" Value="public void FillRectangles (System.Drawing.Brush brush, System.Drawing.RectangleF[] rects);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void FillRectangles(class System.Drawing.Brush brush, valuetype System.Drawing.RectangleF[] rects) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.FillRectangles(System.Drawing.Brush,System.Drawing.RectangleF[])" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void FillRectangles(System::Drawing::Brush ^ brush, cli::array &lt;System::Drawing::RectangleF&gt; ^ rects);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="brush" Type="System.Drawing.Brush" />
        <Parameter Name="rects" Type="System.Drawing.RectangleF[]" />
      </Parameters>
      <Docs>
        <param name="brush">
          Объект <see cref="T:System.Drawing.Brush" />, определяющий параметры заливки.</param>
        <param name="rects">Массив структур <see cref="T:System.Drawing.RectangleF" />, которые представляют прямоугольники для заливки.</param>
        <summary>Заполняет внутреннюю часть набора прямоугольников, определяемых структурами <see cref="T:System.Drawing.RectangleF" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 Следующий пример кода предназначен для работы с Windows Forms, и для него необходим <xref:System.Windows.Forms.PaintEventArgs> `e`, который является параметром <xref:System.Windows.Forms.Control.Paint> обработчика событий. Код выполняет следующие действия.  
  
-   Создает сплошной кисти синего цвета.  
  
-   Создает массив из трех прямоугольников.  
  
-   Заполняет три прямоугольной области, на экране.  
  
 [!code-cpp[System.Drawing.ClassicGraphicsExamples3#116](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples3/CPP/form1.cpp#116)]
 [!code-csharp[System.Drawing.ClassicGraphicsExamples3#116](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples3/CS/form1.cs#116)]
 [!code-vb[System.Drawing.ClassicGraphicsExamples3#116](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples3/VB/form1.vb#116)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          Свойство <paramref name="brush" /> имеет значение <see langword="null" />.  
  
 - или -  
  
 Свойство <paramref name="rects" /> имеет значение <see langword="null" />.</exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="Rects" /> представляет собой массив нулевой длины.</exception>
      </Docs>
    </Member>
    <Member MemberName="FillRegion">
      <MemberSignature Language="C#" Value="public void FillRegion (System.Drawing.Brush brush, System.Drawing.Region region);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void FillRegion(class System.Drawing.Brush brush, class System.Drawing.Region region) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.FillRegion(System.Drawing.Brush,System.Drawing.Region)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void FillRegion(System::Drawing::Brush ^ brush, System::Drawing::Region ^ region);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="brush" Type="System.Drawing.Brush" />
        <Parameter Name="region" Type="System.Drawing.Region" />
      </Parameters>
      <Docs>
        <param name="brush">
          Объект <see cref="T:System.Drawing.Brush" />, определяющий параметры заливки.</param>
        <param name="region">
          Объект <see cref="T:System.Drawing.Region" />, представляющий область для заливки.</param>
        <summary>Заполняет внутреннюю часть объекта <see cref="T:System.Drawing.Region" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Объект <xref:System.Drawing.Region> состоит из прямоугольников и контуров. Если область не закрыта, дополнительный сегмент добавляется с последней точки первой точки, чтобы закрыть его.  
  
   
  
## Examples  
 Следующий пример кода предназначен для работы с Windows Forms, и для него необходим <xref:System.Windows.Forms.PaintEventArgs> `e`, который является параметром <xref:System.Windows.Forms.Control.Paint> обработчика событий. Код выполняет следующие действия.  
  
-   Создает сплошной кисти синего цвета.  
  
-   Создает прямоугольник.  
  
-   Создает прямоугольной области.  
  
-   Заполняет прямоугольную область на экране.  
  
 [!code-cpp[System.Drawing.ClassicGraphicsExamples3#117](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples3/CPP/form1.cpp#117)]
 [!code-csharp[System.Drawing.ClassicGraphicsExamples3#117](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples3/CS/form1.cs#117)]
 [!code-vb[System.Drawing.ClassicGraphicsExamples3#117](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples3/VB/form1.vb#117)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          Свойство <paramref name="brush" /> имеет значение <see langword="null" />.  
  
 - или -  
  
 Свойство <paramref name="region" /> имеет значение <see langword="null" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="Finalize">
      <MemberSignature Language="C#" Value="~Graphics ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance void Finalize() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.Finalize" />
      <MemberSignature Language="VB.NET" Value="Finalize ()" />
      <MemberSignature Language="C++ CLI" Value="!Graphics ()" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Позволяет объекту попытаться освободить ресурсы и выполнить другие операции очистки, перед тем как он будет уничтожен во время сборки мусора.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="Flush">
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Вызывает принудительное выполнение всех отложенных графических операций и немедленно возвращается, не дожидаясь их окончания.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Flush">
      <MemberSignature Language="C#" Value="public void Flush ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Flush() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.Flush" />
      <MemberSignature Language="VB.NET" Value="Public Sub Flush ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Flush();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Вызывает принудительное выполнение всех отложенных графических операций и немедленно возвращается, не дожидаясь их окончания.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Этот метод вызывает сброс и немедленно возвращается, не дожидаясь завершения текущей выполняемой операции графики.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Flush">
      <MemberSignature Language="C#" Value="public void Flush (System.Drawing.Drawing2D.FlushIntention intention);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Flush(valuetype System.Drawing.Drawing2D.FlushIntention intention) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.Flush(System.Drawing.Drawing2D.FlushIntention)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Flush (intention As FlushIntention)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Flush(System::Drawing::Drawing2D::FlushIntention intention);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="intention" Type="System.Drawing.Drawing2D.FlushIntention" />
      </Parameters>
      <Docs>
        <param name="intention">Элемент перечисления <see cref="T:System.Drawing.Drawing2D.FlushIntention" />, который определяет, будет ли метод выполнять немедленный возврат, или будет ожидать окончания всех выполняемых операций.</param>
        <summary>Вызывает принудительное выполнение всех отложенных графических операций. При этом в соответствии с настройкой метод дожидается или не дожидается окончания операций для возврата.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Значение <xref:System.Drawing.Drawing2D.FlushIntention.Flush> для `intention` параметр указывает, что метод возвращает сразу же после начала сброса, в то время как значение из <xref:System.Drawing.Drawing2D.FlushIntention.Sync> указывает, что метод ожидания перед возвращением до окончания всех выполняемых операций.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="FromHdc">
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Создает новый объект <see cref="T:System.Drawing.Graphics" /> из указанного дескриптора для контекста устройств.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="FromHdc">
      <MemberSignature Language="C#" Value="public static System.Drawing.Graphics FromHdc (IntPtr hdc);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Drawing.Graphics FromHdc(native int hdc) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.FromHdc(System.IntPtr)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function FromHdc (hdc As IntPtr) As Graphics" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Drawing::Graphics ^ FromHdc(IntPtr hdc);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Drawing.Graphics</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="hdc" Type="System.IntPtr" />
      </Parameters>
      <Docs>
        <param name="hdc">Дескриптор контекста устройства.</param>
        <summary>Создает новый объект <see cref="T:System.Drawing.Graphics" /> из указанного дескриптора для контекста устройств.</summary>
        <returns>Этот метод возвращает новый объект <see cref="T:System.Drawing.Graphics" /> для заданного контекста устройств.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Следует всегда вызывать <xref:System.Drawing.Graphics.Dispose%2A> метод для освобождения <xref:System.Drawing.Graphics> и связанные с ним ресурсы, созданные <xref:System.Drawing.Graphics.FromHdc%2A> метод.  
  
 Даже если устройство отображения имеет связанный цветовой профиль ICM, [!INCLUDE[ndptecgdiplus](~/includes/ndptecgdiplus-md.md)] не будет использовать этот профиль по умолчанию. Чтобы включить ICM для <xref:System.Drawing.Graphics>, создания <xref:System.Drawing.Graphics> из HDC после передачи HDC (и ICM_ON) для `SetICMMode` функции. Затем рисования, выполняемые <xref:System.Drawing.Graphics> будут настраиваться в соответствии с профилем ICM, связанным с устройством отображения. Включение ICM приведет к снижению производительности.  
  
 Состояние контекста устройства (режим сопоставления, логическое устройство и т. д) во время вызова <xref:System.Drawing.Graphics.FromHdc%2A> может повлиять на отображение выполненную <xref:System.Drawing.Graphics>.  
  
   
  
## Examples  
 Следующий пример кода предназначен для работы с Windows Forms, и для него необходим <xref:System.Windows.Forms.PaintEventArgs> `e`, который является параметром <xref:System.Windows.Forms.Control.Paint> обработчика событий. Код выполняет следующие действия.  
  
-   Создает переменную типа внутреннего указателя `hdc` и назначает ей значение дескриптора контекста устройства графического объекта в форме.  
  
-   Создает новый графический объект, используя `hdc`.  
  
-   Рисует прямоугольник с новым графическим объектом (на экране).  
  
-   Освобождает новый графический объект, используя `hdc`.  
  
 [!code-cpp[System.Drawing.ClassicGraphicsExamples3#118](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples3/CPP/form1.cpp#118)]
 [!code-csharp[System.Drawing.ClassicGraphicsExamples3#118](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples3/CS/form1.cs#118)]
 [!code-vb[System.Drawing.ClassicGraphicsExamples3#118](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples3/VB/form1.vb#118)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="FromHdc">
      <MemberSignature Language="C#" Value="public static System.Drawing.Graphics FromHdc (IntPtr hdc, IntPtr hdevice);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Drawing.Graphics FromHdc(native int hdc, native int hdevice) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.FromHdc(System.IntPtr,System.IntPtr)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function FromHdc (hdc As IntPtr, hdevice As IntPtr) As Graphics" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Drawing::Graphics ^ FromHdc(IntPtr hdc, IntPtr hdevice);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Drawing.Graphics</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="hdc" Type="System.IntPtr" />
        <Parameter Name="hdevice" Type="System.IntPtr" />
      </Parameters>
      <Docs>
        <param name="hdc">Дескриптор контекста устройства.</param>
        <param name="hdevice">Дескриптор устройства.</param>
        <summary>Создает новый объект <see cref="T:System.Drawing.Graphics" /> из указанного дескриптора контекста устройства и дескриптора устройства.</summary>
        <returns>Этот метод возвращает новый объект <see cref="T:System.Drawing.Graphics" /> для заданного контекста устройств и самого устройства.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Следует всегда вызывать <xref:System.Drawing.Graphics.Dispose%2A> метод для освобождения <xref:System.Drawing.Graphics> и связанные с ним ресурсы, созданные <xref:System.Drawing.Graphics.FromHdc%2A> метод.  
  
 Даже если устройство отображения имеет связанный цветовой профиль ICM, [!INCLUDE[ndptecgdiplus](~/includes/ndptecgdiplus-md.md)] не будет использовать этот профиль по умолчанию. Чтобы включить ICM для <xref:System.Drawing.Graphics>, создания <xref:System.Drawing.Graphics> из HDC после передачи HDC (и ICM_ON) для `SetICMMode` функции. Затем рисования, выполняемые <xref:System.Drawing.Graphics> будут настраиваться в соответствии с профилем ICM, связанным с устройством отображения. Включение ICM приведет к снижению производительности.  
  
 Состояние контекста устройства (режим сопоставления, логическое устройство и т. д) во время вызова <xref:System.Drawing.Graphics.FromHdc%2A> может повлиять на отображение выполненную <xref:System.Drawing.Graphics>.  
  
 Дескриптор устройства обычно используется для запроса конкретных возможностей принтера.  
  
 ]]></format>
        </remarks>
        <permission cref="T:System.Security.Permissions.SecurityPermission">для доступа к неуправляемому коду. Связанные перечисления: <see cref="F:System.Security.Permissions.SecurityPermissionFlag.UnmanagedCode" />.</permission>
      </Docs>
    </Member>
    <Member MemberName="FromHdcInternal">
      <MemberSignature Language="C#" Value="public static System.Drawing.Graphics FromHdcInternal (IntPtr hdc);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Drawing.Graphics FromHdcInternal(native int hdc) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.FromHdcInternal(System.IntPtr)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function FromHdcInternal (hdc As IntPtr) As Graphics" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Drawing::Graphics ^ FromHdcInternal(IntPtr hdc);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Drawing.Graphics</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="hdc" Type="System.IntPtr" />
      </Parameters>
      <Docs>
        <param name="hdc">Дескриптор контекста устройства.</param>
        <summary>Возвращает объект <see cref="T:System.Drawing.Graphics" /> для заданного контекста устройств.</summary>
        <returns>Объект <see cref="T:System.Drawing.Graphics" /> для заданного контекста устройств.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Этот метод использовать не следует.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="FromHwnd">
      <MemberSignature Language="C#" Value="public static System.Drawing.Graphics FromHwnd (IntPtr hwnd);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Drawing.Graphics FromHwnd(native int hwnd) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.FromHwnd(System.IntPtr)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function FromHwnd (hwnd As IntPtr) As Graphics" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Drawing::Graphics ^ FromHwnd(IntPtr hwnd);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Drawing.Graphics</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="hwnd" Type="System.IntPtr" />
      </Parameters>
      <Docs>
        <param name="hwnd">Дескриптор окна.</param>
        <summary>Создает новый объект <see cref="T:System.Drawing.Graphics" /> из указанного дескриптора окна.</summary>
        <returns>Этот метод возвращает новый объект <see cref="T:System.Drawing.Graphics" /> для заданного дескриптора окна.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Следует всегда вызывать <xref:System.Drawing.Graphics.Dispose%2A> метод для освобождения <xref:System.Drawing.Graphics> и связанные с ним ресурсы, созданные <xref:System.Drawing.Graphics.FromHwnd%2A> метод.  
  
   
  
## Examples  
 Следующий пример кода предназначен для работы с Windows Forms, и для него необходим <xref:System.Windows.Forms.PaintEventArgs> `e`, которого является параметром <xref:System.Windows.Forms.Control.Paint> обработчика событий, а также `thisForm`, <xref:System.Windows.Forms.Form> для примера. Код выполняет следующие действия.  
  
-   Создает новую переменную внутреннего указателя `hwnd` и назначает ей значение дескриптора формы в примере.  
  
-   Создает новый <xref:System.Drawing.Graphics> из дескриптора.  
  
-   Рисует прямоугольник к новому <xref:System.Drawing.Graphics> с помощью красного пера.  
  
-   Уничтожает новый <xref:System.Drawing.Graphics>.  
  
 [!code-cpp[System.Drawing.ClassicGraphicsExamples3#119](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples3/CPP/form1.cpp#119)]
 [!code-csharp[System.Drawing.ClassicGraphicsExamples3#119](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples3/CS/form1.cs#119)]
 [!code-vb[System.Drawing.ClassicGraphicsExamples3#119](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples3/VB/form1.vb#119)]  
  
 ]]></format>
        </remarks>
        <permission cref="T:System.Security.Permissions.SecurityPermission">для доступа к неуправляемому коду. Связанные перечисления: <see cref="F:System.Security.Permissions.SecurityPermissionFlag.UnmanagedCode" />.</permission>
      </Docs>
    </Member>
    <Member MemberName="FromHwndInternal">
      <MemberSignature Language="C#" Value="public static System.Drawing.Graphics FromHwndInternal (IntPtr hwnd);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Drawing.Graphics FromHwndInternal(native int hwnd) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.FromHwndInternal(System.IntPtr)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function FromHwndInternal (hwnd As IntPtr) As Graphics" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Drawing::Graphics ^ FromHwndInternal(IntPtr hwnd);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Drawing.Graphics</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="hwnd" Type="System.IntPtr" />
      </Parameters>
      <Docs>
        <param name="hwnd">Дескриптор окна.</param>
        <summary>Создает новый объект <see cref="T:System.Drawing.Graphics" /> для указанного дескриптора окна.</summary>
        <returns>Объект <see cref="T:System.Drawing.Graphics" /> для указанного дескриптора окна.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Этот метод использовать не следует.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="FromImage">
      <MemberSignature Language="C#" Value="public static System.Drawing.Graphics FromImage (System.Drawing.Image image);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Drawing.Graphics FromImage(class System.Drawing.Image image) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.FromImage(System.Drawing.Image)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Drawing::Graphics ^ FromImage(System::Drawing::Image ^ image);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Drawing.Graphics</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="image" Type="System.Drawing.Image" />
      </Parameters>
      <Docs>
        <param name="image">
          Объект <see cref="T:System.Drawing.Image" />, на основе которого будет создан новый объект <see cref="T:System.Drawing.Graphics" />.</param>
        <summary>Создает новый объект <see cref="T:System.Drawing.Graphics" /> из указанного объекта <see cref="T:System.Drawing.Image" />.</summary>
        <returns>Этот метод возвращает новый объект <see cref="T:System.Drawing.Graphics" /> для указанного объекта <see cref="T:System.Drawing.Image" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Если изображение имеет индексированный формат пикселей, этот метод создает исключение с сообщением, «графический объект не может создаваться из образа, который имеет индексированный формат пикселей.» В следующем списке показаны форматы индексированных пикселей.  
  
-   <xref:System.Drawing.Imaging.PixelFormat.Format1bppIndexed>  
  
-   <xref:System.Drawing.Imaging.PixelFormat.Format4bppIndexed>  
  
-   <xref:System.Drawing.Imaging.PixelFormat.Format8bppIndexed>  
  
 Об индексированном изображении можно сохранить в виде другой формат с помощью <xref:System.Drawing.Image.Save%28System.String%2CSystem.Drawing.Imaging.ImageFormat%29> метода и затем извлекать <xref:System.Drawing.Graphics> объекта для нового образа.  
  
 Этот метод также вызывает исключение, если рисунок имеет один из следующих форматов пикселей.  
  
-   <xref:System.Drawing.Imaging.PixelFormat.Undefined>  
  
-   <xref:System.Drawing.Imaging.PixelFormat.DontCare>  
  
-   <xref:System.Drawing.Imaging.PixelFormat.Format16bppArgb1555>  
  
-   <xref:System.Drawing.Imaging.PixelFormat.Format16bppGrayScale>  
  
 Следует всегда вызывать <xref:System.Drawing.Graphics.Dispose%2A> метод для освобождения <xref:System.Drawing.Graphics> и связанные с ним ресурсы, созданные <xref:System.Drawing.Graphics.FromImage%2A> метод.  
  
   
  
## Examples  
 Следующий пример кода предназначен для работы с Windows Forms, и для него необходим <xref:System.Windows.Forms.PaintEventArgs> `e`, который является параметром <xref:System.Windows.Forms.Control.Paint> обработчика событий. Код выполняет следующие действия.  
  
-   Создает <xref:System.Drawing.Image> из графического файла SampImag.jpg в папке примера.  
  
-   Создает <xref:System.Drawing.Graphics> из <xref:System.Drawing.Image>.  
  
-   Изменяет изображение, выполняя заливку прямоугольника внутри него.  
  
-   Рисует <xref:System.Drawing.Image> на экране.  
  
-   Освобождает созданный <xref:System.Drawing.Graphics>.  
  
 [!code-cpp[System.Drawing.ClassicGraphicsExamples3#120](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples3/CPP/form1.cpp#120)]
 [!code-csharp[System.Drawing.ClassicGraphicsExamples3#120](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples3/CS/form1.cs#120)]
 [!code-vb[System.Drawing.ClassicGraphicsExamples3#120](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples3/VB/form1.vb#120)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          Свойство <paramref name="image" /> имеет значение <see langword="null" />.</exception>
        <exception cref="T:System.Exception">
          Объект <paramref name="image" /> имеет индексированный формат пикселей или его формат не определен.</exception>
      </Docs>
    </Member>
    <Member MemberName="GetContextInfo">
      <MemberSignature Language="C#" Value="public object GetContextInfo ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance object GetContextInfo() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.GetContextInfo" />
      <MemberSignature Language="VB.NET" Value="Public Function GetContextInfo () As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Object ^ GetContextInfo();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Возвращает кумулятивный контекст графики.</summary>
        <returns>Объект <see cref="T:System.Object" />, представляющий кумулятивный контекст графики.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Возвращаемое значение является массив объектов, где первый элемент содержит совокупную вырезанную область, а второй элемент матрицу совокупное сдвига/преобразования.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetHalftonePalette">
      <MemberSignature Language="C#" Value="public static IntPtr GetHalftonePalette ();" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig native int GetHalftonePalette() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.GetHalftonePalette" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function GetHalftonePalette () As IntPtr" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static IntPtr GetHalftonePalette();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IntPtr</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Возвращает дескриптор текущей полутоновой палитры Windows.</summary>
        <returns>Внутренний указатель, который задает дескриптор палитры.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Назначение <xref:System.Drawing.Graphics.GetHalftonePalette%2A> метода является возможность [!INCLUDE[ndptecgdiplus](~/includes/ndptecgdiplus-md.md)] для создания более полутоновой качества при использовании на экране 8 бит на пиксель. Для отображения изображения с помощью полутоновой палитры, используйте следующую процедуру.  
  
   
  
## Examples  
 Следующий пример кода предназначен для работы с Windows Forms, и для него необходим <xref:System.Windows.Forms.PaintEventArgs> `e`, который является параметром <xref:System.Windows.Forms.Control.Paint> обработчика событий. Код выполняет следующие действия.  
  
-   Определяет взаимодействие <xref:System.Runtime.InteropServices.DllImportAttribute> gdi32.dll файл библиотеки DLL Windows, который содержит необходимые атрибуты [!INCLUDE[ndptecgdi](~/includes/ndptecgdi-md.md)] функции.  
  
-   Определяет `SelectPalette` и `RealizePalette` функции в этой библиотеке DLL в качестве внешней.  
  
-   Создает образ из существующего файла изображения SampImag.jpg (который должен быть в той же папке, как в примере кода файла) и выводит изображение на экране.  
  
-   Создает переменные типа внутреннего указателя и задает их значения дескриптор текущей полутоновой палитры Windows и объект graphics соответственно.  
  
-   Выбирает и реализует полутоновой палитры.  
  
-   Создает новый графический объект, используя `hdc` параметра.  
  
-   Рисует изображение еще раз.  
  
-   Освобождает дескриптор контекста устройства.  
  
 Результат получается два варианта рисунка: с 16-разрядной палитрой и с 8-разрядной палитрой.  
  
 [!code-cpp[System.Drawing.ClassicGraphicsExamples3#121](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples3/CPP/form1.cpp#121)]
 [!code-csharp[System.Drawing.ClassicGraphicsExamples3#121](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples3/CS/form1.cs#121)]
 [!code-vb[System.Drawing.ClassicGraphicsExamples3#121](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples3/VB/form1.vb#121)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetHdc">
      <MemberSignature Language="C#" Value="public IntPtr GetHdc ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance native int GetHdc() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.GetHdc" />
      <MemberSignature Language="VB.NET" Value="Public Function GetHdc () As IntPtr" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual IntPtr GetHdc();" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Drawing.IDeviceContext.GetHdc</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IntPtr</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Возвращает дескриптор контекста устройства, связанный с данным объектом <see cref="T:System.Drawing.Graphics" />.</summary>
        <returns>Дескриптор контекста устройства, связанный с данным объектом <see cref="T:System.Drawing.Graphics" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Контекст устройства — это структура Windows, на основе [!INCLUDE[ndptecgdi](~/includes/ndptecgdi-md.md)] , определяющий набор графических объектов и связанные с ними атрибуты, а также графические режимы, которые влияют на выходные данные. Этот метод возвращает данный контекст устройства за исключением шрифта. Поскольку шрифт не установлен, вызовы <xref:System.Drawing.Font.FromHdc%2A> метода с помощью дескриптора, возвращенного из <xref:System.Drawing.Graphics.GetHdc%2A> метод завершится с ошибкой.  
  
 Вызовы <xref:System.Drawing.Graphics.GetHdc%2A> и <xref:System.Drawing.Graphics.ReleaseHdc%2A> методы должны располагаться попарно. При выполнении <xref:System.Drawing.Graphics.GetHdc%2A> и <xref:System.Drawing.Graphics.ReleaseHdc%2A> пары методов вы обычно вызываются только [!INCLUDE[ndptecgdi](~/includes/ndptecgdi-md.md)] функции. Вызовы, адресованные области [!INCLUDE[ndptecgdiplus](~/includes/ndptecgdiplus-md.md)] методы <xref:System.Drawing.Graphics> , создавший `hdc` завершаться параметр `ObjectBusy` ошибки. Кроме того [!INCLUDE[ndptecgdiplus](~/includes/ndptecgdiplus-md.md)] игнорирует любые изменения состояния для <xref:System.Drawing.Graphics> из `hdc` параметр в последующих операциях.  
  
   
  
## Examples  
 Следующий пример кода предназначен для работы с Windows Forms, и для него необходим <xref:System.Windows.Forms.PaintEventArgs> `e`, который является параметром <xref:System.Windows.Forms.Control.Paint> обработчика событий. В примере демонстрируется вызов Windows [!INCLUDE[ndptecgdi](~/includes/ndptecgdi-md.md)] функцию для выполнения той же задачи [!INCLUDE[ndptecgdiplus](~/includes/ndptecgdiplus-md.md)] <xref:System.Drawing.Graphics> метод. Код выполняет следующие действия.  
  
-   Определяет взаимодействие <xref:System.Runtime.InteropServices.DllImportAttribute> атрибут для gdi32.dll файл библиотеки DLL Windows. Эта библиотека DLL содержит нужный [!INCLUDE[ndptecgdi](~/includes/ndptecgdi-md.md)] функции.  
  
-   Определяет <xref:System.Drawing.Rectangle> функции в этой библиотеке DLL в качестве внешней.  
  
-   Создает красное перо.  
  
-   С помощью пера рисует прямоугольник на экран с помощью [!INCLUDE[ndptecgdiplus](~/includes/ndptecgdiplus-md.md)] <xref:System.Drawing.Graphics.DrawRectangle%2A> метод.  
  
-   Определяет переменную типа внутреннего указателя `hdc` и присваивает ей значение дескриптора контекста устройства формы.  
  
-   Рисует прямоугольник на экран с помощью [!INCLUDE[ndptecgdi](~/includes/ndptecgdi-md.md)] <xref:System.Drawing.Rectangle> функции.  
  
-   Освобождает контекст устройства, представленный `hdc` параметра.  
  
 [!code-cpp[System.Drawing.ClassicGraphicsExamples3#122](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples3/CPP/form1.cpp#122)]
 [!code-csharp[System.Drawing.ClassicGraphicsExamples3#122](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples3/CS/form1.cs#122)]
 [!code-vb[System.Drawing.ClassicGraphicsExamples3#122](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples3/VB/form1.vb#122)]  
  
 ]]></format>
        </remarks>
        <permission cref="T:System.Security.Permissions.SecurityPermission">для доступа к неуправляемому коду. Связанные перечисления: <see cref="F:System.Security.Permissions.SecurityPermissionFlag.UnmanagedCode" />.</permission>
      </Docs>
    </Member>
    <Member MemberName="GetNearestColor">
      <MemberSignature Language="C#" Value="public System.Drawing.Color GetNearestColor (System.Drawing.Color color);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype System.Drawing.Color GetNearestColor(valuetype System.Drawing.Color color) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.GetNearestColor(System.Drawing.Color)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Drawing::Color GetNearestColor(System::Drawing::Color color);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Drawing.Color</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="color" Type="System.Drawing.Color" />
      </Parameters>
      <Docs>
        <param name="color">
          Структура <see cref="T:System.Drawing.Color" />, для которой необходимо найти соответствие.</param>
        <summary>Возвращает цвет, ближайший к указанной структуре <see cref="T:System.Drawing.Color" />.</summary>
        <returns>Структура <see cref="T:System.Drawing.Color" />, представляющая цвет, ближайший к цвету, определяемому с помощью параметра <paramref name="color" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 Следующий пример кода предназначен для работы с Windows Forms, и для него необходим <xref:System.Windows.Forms.PaintEventArgs> `e`, который является параметром <xref:System.Windows.Forms.Control.Paint> обработчика событий. Код выполняет следующие действия.  
  
-   Создает произвольный цвет с координатами ARGB (255, 165, 63, 136).  
  
-   Создает сплошной кисти и задает ее цвет указанным цветом.  
  
-   Заполняет эллипс, используя произвольный цвет.  
  
-   Создает второй цвет и задает в качестве значения ближайший системный цвет ARGB.  
  
-   Заполняет второй эллипс этого цвета.  
  
 В результате получаются два эллипса: один из них создан с помощью произвольного указанного цвета, а второй — с помощью системного цвета, ближайшего к указанному.  
  
 [!code-cpp[System.Drawing.ClassicGraphicsExamples3#123](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples3/CPP/form1.cpp#123)]
 [!code-csharp[System.Drawing.ClassicGraphicsExamples3#123](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples3/CS/form1.cs#123)]
 [!code-vb[System.Drawing.ClassicGraphicsExamples3#123](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples3/VB/form1.vb#123)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="InterpolationMode">
      <MemberSignature Language="C#" Value="public System.Drawing.Drawing2D.InterpolationMode InterpolationMode { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Drawing.Drawing2D.InterpolationMode InterpolationMode" />
      <MemberSignature Language="DocId" Value="P:System.Drawing.Graphics.InterpolationMode" />
      <MemberSignature Language="VB.NET" Value="Public Property InterpolationMode As InterpolationMode" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Drawing::Drawing2D::InterpolationMode InterpolationMode { System::Drawing::Drawing2D::InterpolationMode get(); void set(System::Drawing::Drawing2D::InterpolationMode value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Drawing.Drawing2D.InterpolationMode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Возвращает или задает режим интерполяции, связанный с данным объектом <see cref="T:System.Drawing.Graphics" />.</summary>
        <value>Одно из значений перечисления <see cref="T:System.Drawing.Drawing2D.InterpolationMode" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Режим интерполяции определяет, каким образом промежуточных значений между двумя конечными точками, вычисляются.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="IntersectClip">
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Обновляет отсеченную область данного объекта <see cref="T:System.Drawing.Graphics" />, включая в нее пересечение текущей отсеченной области и указанной структуры <see cref="T:System.Drawing.Rectangle" />.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="IntersectClip">
      <MemberSignature Language="C#" Value="public void IntersectClip (System.Drawing.Rectangle rect);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void IntersectClip(valuetype System.Drawing.Rectangle rect) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.IntersectClip(System.Drawing.Rectangle)" />
      <MemberSignature Language="VB.NET" Value="Public Sub IntersectClip (rect As Rectangle)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void IntersectClip(System::Drawing::Rectangle rect);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="rect" Type="System.Drawing.Rectangle" />
      </Parameters>
      <Docs>
        <param name="rect">
          Структура <see cref="T:System.Drawing.Rectangle" />, пересекающаяся с текущей вырезанной областью.</param>
        <summary>Обновляет отсеченную область данного объекта <see cref="T:System.Drawing.Graphics" />, включая в нее пересечение текущей отсеченной области и указанной структуры <see cref="T:System.Drawing.Rectangle" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Этот метод назначает <xref:System.Drawing.Graphics.Clip%2A> этого <xref:System.Drawing.Graphics> область представляет собой пересечение текущей отсеченной области и прямоугольник, задаваемый параметром `rect` параметр.  
  
   
  
## Examples  
 Следующий пример кода предназначен для работы с Windows Forms, и для него необходим <xref:System.Windows.Forms.PaintEventArgs> `e`, который является параметром <xref:System.Windows.Forms.Control.Paint> обработчика событий. Код выполняет следующие действия.  
  
-   Создает прямоугольник с левого верхнего угла на (0, 0) и задает отсеченную область для этого прямоугольника.  
  
-   Создает второй прямоугольник с левого верхнего угла в (100, 100) и задает отсеченную область пересечение этого прямоугольника и текущей вырезанной области (первого прямоугольника).  
  
-   Заполняет большой прямоугольник, включающий оба предыдущих прямоугольника со сплошной кисти синего цвета.  
  
-   Сбрасывает отсеченную область значение бесконечности.  
  
-   Рисует прямоугольники вокруг указанных областей обрезки. Используется черный перо для первого отсекающего прямоугольника и красное перо для второй области обрезки.  
  
 Результатом является то, что синим цветом заполняется только пересечение двух прямоугольников.  
  
 [!code-cpp[System.Drawing.ClassicGraphicsExamples3#124](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples3/CPP/form1.cpp#124)]
 [!code-csharp[System.Drawing.ClassicGraphicsExamples3#124](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples3/CS/form1.cs#124)]
 [!code-vb[System.Drawing.ClassicGraphicsExamples3#124](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples3/VB/form1.vb#124)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IntersectClip">
      <MemberSignature Language="C#" Value="public void IntersectClip (System.Drawing.RectangleF rect);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void IntersectClip(valuetype System.Drawing.RectangleF rect) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.IntersectClip(System.Drawing.RectangleF)" />
      <MemberSignature Language="VB.NET" Value="Public Sub IntersectClip (rect As RectangleF)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void IntersectClip(System::Drawing::RectangleF rect);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="rect" Type="System.Drawing.RectangleF" />
      </Parameters>
      <Docs>
        <param name="rect">
          Структура <see cref="T:System.Drawing.RectangleF" />, пересекающаяся с текущей вырезанной областью.</param>
        <summary>Обновляет отсеченную область данного объекта <see cref="T:System.Drawing.Graphics" />, включая в нее пересечение текущей отсеченной области и указанной структуры <see cref="T:System.Drawing.RectangleF" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Этот метод назначает <xref:System.Drawing.Graphics.Clip%2A> этого <xref:System.Drawing.Graphics> область представляет собой пересечение текущей отсеченной области и прямоугольник, задаваемый параметром `rect` параметр.  
  
   
  
## Examples  
 Следующий пример кода предназначен для работы с Windows Forms, и для него необходим <xref:System.Windows.Forms.PaintEventArgs> `e`, который является параметром <xref:System.Windows.Forms.Control.Paint> обработчика событий. Код выполняет следующие действия.  
  
-   Создает прямоугольник с левого верхнего угла на (0, 0) и задает отсеченную область для этого прямоугольника.  
  
-   Создает второй прямоугольник с левого верхнего угла в (100, 100) и задает отсеченную область пересечение этого прямоугольника и текущей вырезанной области (первого прямоугольника).  
  
-   Заполняет большой прямоугольник, включающий оба предыдущих прямоугольника со сплошной кисти синего цвета.  
  
-   Сбрасывает отсеченную область значение бесконечности.  
  
-   Рисует прямоугольники вокруг указанных областей обрезки. Используется черный перо для первого отсекающего прямоугольника и красное перо для второй области обрезки.  
  
 Результатом является то, что синим цветом заполняется только пересечение двух прямоугольников.  
  
 [!code-cpp[System.Drawing.ClassicGraphicsExamples3#125](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples3/CPP/form1.cpp#125)]
 [!code-csharp[System.Drawing.ClassicGraphicsExamples3#125](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples3/CS/form1.cs#125)]
 [!code-vb[System.Drawing.ClassicGraphicsExamples3#125](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples3/VB/form1.vb#125)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IntersectClip">
      <MemberSignature Language="C#" Value="public void IntersectClip (System.Drawing.Region region);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void IntersectClip(class System.Drawing.Region region) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.IntersectClip(System.Drawing.Region)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void IntersectClip(System::Drawing::Region ^ region);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="region" Type="System.Drawing.Region" />
      </Parameters>
      <Docs>
        <param name="region">
          Объект <see cref="T:System.Drawing.Region" />, пересекающийся с текущей областью.</param>
        <summary>Обновляет отсеченную область данного объекта <see cref="T:System.Drawing.Graphics" />, включая в нее пересечение текущей отсеченной области и указанной области <see cref="T:System.Drawing.Region" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Этот метод назначает <xref:System.Drawing.Graphics.Clip%2A> этого <xref:System.Drawing.Graphics> область представляет собой пересечение текущей отсеченной области и области, заданной параметром `region` параметр.  
  
   
  
## Examples  
 Следующий пример кода предназначен для работы с Windows Forms, и для него необходим <xref:System.Windows.Forms.PaintEventArgs> `e`, который является параметром <xref:System.Windows.Forms.Control.Paint> обработчика событий. Код выполняет следующие действия.  
  
-   Создает прямоугольник с левого верхнего угла на (0, 0).  
  
-   Создает область и задает его в прямоугольник и задает отсеченную область для этой области.  
  
-   Создает второй прямоугольник с левого верхнего угла в (100, 100).  
  
-   Создает область и задает его второй прямоугольник и задает отсеченную область пересечение данной области и текущей вырезанной области (первого прямоугольника), используя совместный режим <xref:System.Drawing.Drawing2D.CombineMode.Replace>.  
  
-   Заполняет большой прямоугольник, включающий обе предыдущие области, с помощью сплошной кисти синего цвета.  
  
-   Сбрасывает отсеченную область значение бесконечности.  
  
-   Рисует прямоугольники вокруг указанных областей обрезки. Для первой области обрезки и для второй вырезанной красное перо используется черного пера.  
  
 Результатом является то, что синим цветом заполняется только пересечение двух областей.  
  
 [!code-cpp[System.Drawing.ClassicGraphicsExamples3#126](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples3/CPP/form1.cpp#126)]
 [!code-csharp[System.Drawing.ClassicGraphicsExamples3#126](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples3/CS/form1.cs#126)]
 [!code-vb[System.Drawing.ClassicGraphicsExamples3#126](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples3/VB/form1.vb#126)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsClipEmpty">
      <MemberSignature Language="C#" Value="public bool IsClipEmpty { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsClipEmpty" />
      <MemberSignature Language="DocId" Value="P:System.Drawing.Graphics.IsClipEmpty" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsClipEmpty As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsClipEmpty { bool get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Возвращает значение, которое указывает, является ли отсеченная область данного объекта <see cref="T:System.Drawing.Graphics" /> пустой.</summary>
        <value>
          Значение <see langword="true" />, если вырезанная область данного объекта <see cref="T:System.Drawing.Graphics" /> является пустой; в противном случае устанавливается значение <see langword="false" />.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="IsVisible">
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Указывает, содержится ли точка, задаваемая с помощью пары координат, в видимой отсеченной области данного объекта <see cref="T:System.Drawing.Graphics" />.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="IsVisible">
      <MemberSignature Language="C#" Value="public bool IsVisible (System.Drawing.Point point);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool IsVisible(valuetype System.Drawing.Point point) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.IsVisible(System.Drawing.Point)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool IsVisible(System::Drawing::Point point);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="point" Type="System.Drawing.Point" />
      </Parameters>
      <Docs>
        <param name="point">
          Структура <see cref="T:System.Drawing.Point" /> для проверки видимости.</param>
        <summary>Указывает, содержится ли заданная структура <see cref="T:System.Drawing.Point" /> в видимой отсеченной области данного объекта <see cref="T:System.Drawing.Graphics" />.</summary>
        <returns>
          Значение <see langword="true" />, если точка, задаваемая параметром <paramref name="point" />, содержится в видимой вырезанной области данного объекта <see cref="T:System.Drawing.Graphics" />; в противном случае устанавливается значение <see langword="false" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 Следующий пример кода предназначен для работы с Windows Forms, и для него необходим <xref:System.Windows.Forms.PaintEventArgs> `e`, который является параметром <xref:System.Windows.Forms.Control.Paint> обработчика событий. Код выполняет следующие действия.  
  
-   Создает вырезанную область прямоугольной и задает его в качестве области отсечения для графического объекта в форме с помощью <xref:System.Drawing.Drawing2D.CombineMode.Replace>.  
  
-   Создает две точки: внутри области обрезки и за пределами.  
  
-   Проверяет каждый из точек и рисует только видимую точку.  
  
 Результатом является один небольшой красный кружок, в пределах отсеченную область.  
  
 [!code-cpp[System.Drawing.ClassicGraphicsExamples3#127](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples3/CPP/form1.cpp#127)]
 [!code-csharp[System.Drawing.ClassicGraphicsExamples3#127](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples3/CS/form1.cs#127)]
 [!code-vb[System.Drawing.ClassicGraphicsExamples3#127](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples3/VB/form1.vb#127)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsVisible">
      <MemberSignature Language="C#" Value="public bool IsVisible (System.Drawing.PointF point);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool IsVisible(valuetype System.Drawing.PointF point) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.IsVisible(System.Drawing.PointF)" />
      <MemberSignature Language="VB.NET" Value="Public Function IsVisible (point As PointF) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool IsVisible(System::Drawing::PointF point);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="point" Type="System.Drawing.PointF" />
      </Parameters>
      <Docs>
        <param name="point">
          Структура <see cref="T:System.Drawing.PointF" /> для проверки видимости.</param>
        <summary>Указывает, содержится ли заданная структура <see cref="T:System.Drawing.PointF" /> в видимой отсеченной области данного объекта <see cref="T:System.Drawing.Graphics" />.</summary>
        <returns>
          Значение <see langword="true" />, если точка, задаваемая параметром <paramref name="point" />, содержится в видимой вырезанной области данного объекта <see cref="T:System.Drawing.Graphics" />; в противном случае устанавливается значение <see langword="false" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 Следующий пример кода предназначен для работы с Windows Forms, и для него необходим <xref:System.Windows.Forms.PaintEventArgs> `e`, который является параметром <xref:System.Windows.Forms.Control.Paint> обработчика событий. Код выполняет следующие действия.  
  
-   Создает вырезанную область прямоугольной и задает его в качестве области отсечения для графического элемента управления с помощью <xref:System.Drawing.Drawing2D.CombineMode.Replace>.  
  
-   Создает две точки: внутри области обрезки и за пределами.  
  
-   Проверяет каждый из точек и рисует только видимую точку.  
  
 Результатом является один небольшой красный кружок, в пределах отсеченную область.  
  
 [!code-cpp[System.Drawing.ClassicGraphicsExamples3#128](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples3/CPP/form1.cpp#128)]
 [!code-csharp[System.Drawing.ClassicGraphicsExamples3#128](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples3/CS/form1.cs#128)]
 [!code-vb[System.Drawing.ClassicGraphicsExamples3#128](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples3/VB/form1.vb#128)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsVisible">
      <MemberSignature Language="C#" Value="public bool IsVisible (System.Drawing.Rectangle rect);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool IsVisible(valuetype System.Drawing.Rectangle rect) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.IsVisible(System.Drawing.Rectangle)" />
      <MemberSignature Language="VB.NET" Value="Public Function IsVisible (rect As Rectangle) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool IsVisible(System::Drawing::Rectangle rect);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="rect" Type="System.Drawing.Rectangle" />
      </Parameters>
      <Docs>
        <param name="rect">
          Структура <see cref="T:System.Drawing.Rectangle" /> для проверки видимости.</param>
        <summary>Указывает, содержится ли прямоугольник, задаваемый структурой <see cref="T:System.Drawing.Rectangle" />, в видимой отсеченной области данного объекта <see cref="T:System.Drawing.Graphics" />.</summary>
        <returns>
          Значение <see langword="true" />, если прямоугольник, задаваемый параметром <paramref name="rect" />, содержится в видимой отсеченной области данного объекта <see cref="T:System.Drawing.Graphics" />; в противном случае значение <see langword="false" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 Следующий пример кода предназначен для работы с Windows Forms, и для него необходим <xref:System.Windows.Forms.PaintEventArgs> `e`, который является параметром <xref:System.Windows.Forms.Control.Paint> обработчика событий. Код выполняет следующие действия.  
  
-   Создает вырезанную область прямоугольной и задает его в качестве области отсечения для графического объекта в форме с помощью <xref:System.Drawing.Drawing2D.CombineMode.Replace>.  
  
-   Создает, расположение и размер двух прямоугольников, один в качестве отсеченной области и за пределами.  
  
-   Проверяет каждый из прямоугольников и рисует только видимую точку.  
  
 Результатом является один небольшой красный прямоугольник, в пределах отсеченную область.  
  
 [!code-cpp[System.Drawing.ClassicGraphicsExamples3#129](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples3/CPP/form1.cpp#129)]
 [!code-csharp[System.Drawing.ClassicGraphicsExamples3#129](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples3/CS/form1.cs#129)]
 [!code-vb[System.Drawing.ClassicGraphicsExamples3#129](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples3/VB/form1.vb#129)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsVisible">
      <MemberSignature Language="C#" Value="public bool IsVisible (System.Drawing.RectangleF rect);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool IsVisible(valuetype System.Drawing.RectangleF rect) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.IsVisible(System.Drawing.RectangleF)" />
      <MemberSignature Language="VB.NET" Value="Public Function IsVisible (rect As RectangleF) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool IsVisible(System::Drawing::RectangleF rect);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="rect" Type="System.Drawing.RectangleF" />
      </Parameters>
      <Docs>
        <param name="rect">
          Структура <see cref="T:System.Drawing.RectangleF" /> для проверки видимости.</param>
        <summary>Указывает, содержится ли прямоугольник, задаваемый структурой <see cref="T:System.Drawing.RectangleF" />, в видимой отсеченной области данного объекта <see cref="T:System.Drawing.Graphics" />.</summary>
        <returns>
          Значение <see langword="true" />, если прямоугольник, задаваемый параметром <paramref name="rect" />, содержится в видимой отсеченной области данного объекта <see cref="T:System.Drawing.Graphics" />; в противном случае значение <see langword="false" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 Следующий пример кода предназначен для работы с Windows Forms, и для него необходим <xref:System.Windows.Forms.PaintEventArgs> `e`, который является параметром <xref:System.Windows.Forms.Control.Paint> обработчика событий. Код выполняет следующие действия.  
  
-   Создает вырезанную область прямоугольной и задает его в качестве области отсечения для графического объекта в форме с помощью <xref:System.Drawing.Drawing2D.CombineMode.Replace>.  
  
-   Создает два прямоугольника: внутри области обрезки и за пределами.  
  
-   Проверяет каждый из прямоугольников и рисует только видимую точку.  
  
 Результатом является один небольшой красный прямоугольник, в пределах отсеченную область.  
  
 [!code-cpp[System.Drawing.ClassicGraphicsExamples3#130](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples3/CPP/form1.cpp#130)]
 [!code-csharp[System.Drawing.ClassicGraphicsExamples3#130](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples3/CS/form1.cs#130)]
 [!code-vb[System.Drawing.ClassicGraphicsExamples3#130](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples3/VB/form1.vb#130)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsVisible">
      <MemberSignature Language="C#" Value="public bool IsVisible (int x, int y);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool IsVisible(int32 x, int32 y) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.IsVisible(System.Int32,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Function IsVisible (x As Integer, y As Integer) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool IsVisible(int x, int y);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="x" Type="System.Int32" />
        <Parameter Name="y" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="x">Координата X точки для проверки на видимость.</param>
        <param name="y">Координата Y точки для проверки на видимость.</param>
        <summary>Указывает, содержится ли точка, задаваемая с помощью пары координат, в видимой отсеченной области данного объекта <see cref="T:System.Drawing.Graphics" />.</summary>
        <returns>
          Значение <see langword="true" />, если точка, определяемая параметрами <paramref name="x" /> и <paramref name="y" />, содержится внутри видимой вырезанной области данного объекта <see cref="T:System.Drawing.Graphics" />; в противном случае устанавливается значение <see langword="false" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 Следующий пример кода предназначен для работы с Windows Forms, и для него необходим <xref:System.Windows.Forms.PaintEventArgs> `e`, который является параметром <xref:System.Windows.Forms.Control.Paint> обработчика событий. Код выполняет следующие действия.  
  
-   Создает вырезанную область прямоугольной и задает его в качестве области отсечения для графического объекта в форме с помощью <xref:System.Drawing.Drawing2D.CombineMode.Replace>.  
  
-   Создает две точки: внутри области обрезки и за пределами.  
  
-   Проверяет каждый из точек и рисует только видимую точку.  
  
 Результатом является один небольшой красный кружок, в пределах отсеченную область.  
  
 [!code-cpp[System.Drawing.ClassicGraphicsExamples3#131](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples3/CPP/form1.cpp#131)]
 [!code-csharp[System.Drawing.ClassicGraphicsExamples3#131](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples3/CS/form1.cs#131)]
 [!code-vb[System.Drawing.ClassicGraphicsExamples3#131](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples3/VB/form1.vb#131)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsVisible">
      <MemberSignature Language="C#" Value="public bool IsVisible (float x, float y);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool IsVisible(float32 x, float32 y) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.IsVisible(System.Single,System.Single)" />
      <MemberSignature Language="VB.NET" Value="Public Function IsVisible (x As Single, y As Single) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool IsVisible(float x, float y);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="x" Type="System.Single" />
        <Parameter Name="y" Type="System.Single" />
      </Parameters>
      <Docs>
        <param name="x">Координата X точки для проверки на видимость.</param>
        <param name="y">Координата Y точки для проверки на видимость.</param>
        <summary>Указывает, содержится ли точка, задаваемая с помощью пары координат, в видимой отсеченной области данного объекта <see cref="T:System.Drawing.Graphics" />.</summary>
        <returns>
          Значение <see langword="true" />, если точка, определяемая параметрами <paramref name="x" /> и <paramref name="y" />, содержится внутри видимой вырезанной области данного объекта <see cref="T:System.Drawing.Graphics" />; в противном случае устанавливается значение <see langword="false" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 Следующий пример кода предназначен для работы с Windows Forms, и для него необходим <xref:System.Windows.Forms.PaintEventArgs> `e`, который является параметром <xref:System.Windows.Forms.Control.Paint> обработчика событий. Код выполняет следующие действия.  
  
-   Создает вырезанную область прямоугольной и задает его в качестве области отсечения для графического объекта в форме с помощью <xref:System.Drawing.Drawing2D.CombineMode.Replace>.  
  
-   Создает две точки: внутри области обрезки и за пределами.  
  
-   Проверяет каждый из точек и рисует только видимую точку.  
  
 Результатом является один небольшой красный кружок, в пределах отсеченную область.  
  
 [!code-cpp[System.Drawing.ClassicGraphicsExamples3#133](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples3/CPP/form1.cpp#133)]
 [!code-csharp[System.Drawing.ClassicGraphicsExamples3#133](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples3/CS/form1.cs#133)]
 [!code-vb[System.Drawing.ClassicGraphicsExamples3#133](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples3/VB/form1.vb#133)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsVisible">
      <MemberSignature Language="C#" Value="public bool IsVisible (int x, int y, int width, int height);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool IsVisible(int32 x, int32 y, int32 width, int32 height) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.IsVisible(System.Int32,System.Int32,System.Int32,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Function IsVisible (x As Integer, y As Integer, width As Integer, height As Integer) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool IsVisible(int x, int y, int width, int height);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="x" Type="System.Int32" />
        <Parameter Name="y" Type="System.Int32" />
        <Parameter Name="width" Type="System.Int32" />
        <Parameter Name="height" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="x">Координата X верхнего левого угла прямоугольника для проверки на видимость.</param>
        <param name="y">Координата Y верхнего левого угла прямоугольника для проверки на видимость.</param>
        <param name="width">Ширина прямоугольника для проверки на видимость.</param>
        <param name="height">Высота прямоугольника для проверки на видимость.</param>
        <summary>Указывает, содержится ли прямоугольник, задаваемый с помощью пары координат, ширины и высоты, в видимой отсеченной области данного объекта <see cref="T:System.Drawing.Graphics" />.</summary>
        <returns>
          Значение <see langword="true" />, если прямоугольник, определяемый параметрами <paramref name="x" />, <paramref name="y" />, <paramref name="width" /> и <paramref name="height" />, содержится внутри видимой отсеченной области данного объекта <see cref="T:System.Drawing.Graphics" />; в противном случае значение <see langword="false" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 Следующий пример кода предназначен для работы с Windows Forms, и для него необходим <xref:System.Windows.Forms.PaintEventArgs> `e`, который является параметром <xref:System.Windows.Forms.Control.Paint> обработчика событий. Код выполняет следующие действия.  
  
-   Создает вырезанную область прямоугольной и задает его в качестве области отсечения для графического объекта в форме с помощью <xref:System.Drawing.Drawing2D.CombineMode.Replace>.  
  
-   Создает, расположение и размер двух прямоугольников, один в качестве отсеченной области и за пределами.  
  
-   Проверяет каждый из прямоугольников и рисует только видимую точку.  
  
 Результатом является один небольшой красный прямоугольник, в пределах отсеченную область.  
  
 [!code-cpp[System.Drawing.ClassicGraphicsExamples3#132](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples3/CPP/form1.cpp#132)]
 [!code-csharp[System.Drawing.ClassicGraphicsExamples3#132](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples3/CS/form1.cs#132)]
 [!code-vb[System.Drawing.ClassicGraphicsExamples3#132](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples3/VB/form1.vb#132)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsVisible">
      <MemberSignature Language="C#" Value="public bool IsVisible (float x, float y, float width, float height);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool IsVisible(float32 x, float32 y, float32 width, float32 height) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.IsVisible(System.Single,System.Single,System.Single,System.Single)" />
      <MemberSignature Language="VB.NET" Value="Public Function IsVisible (x As Single, y As Single, width As Single, height As Single) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool IsVisible(float x, float y, float width, float height);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="x" Type="System.Single" />
        <Parameter Name="y" Type="System.Single" />
        <Parameter Name="width" Type="System.Single" />
        <Parameter Name="height" Type="System.Single" />
      </Parameters>
      <Docs>
        <param name="x">Координата X верхнего левого угла прямоугольника для проверки на видимость.</param>
        <param name="y">Координата Y верхнего левого угла прямоугольника для проверки на видимость.</param>
        <param name="width">Ширина прямоугольника для проверки на видимость.</param>
        <param name="height">Высота прямоугольника для проверки на видимость.</param>
        <summary>Указывает, содержится ли прямоугольник, задаваемый с помощью пары координат, ширины и высоты, в видимой отсеченной области данного объекта <see cref="T:System.Drawing.Graphics" />.</summary>
        <returns>
          Значение <see langword="true" />, если прямоугольник, определяемый параметрами <paramref name="x" />, <paramref name="y" />, <paramref name="width" /> и <paramref name="height" />, содержится внутри видимой отсеченной области данного объекта <see cref="T:System.Drawing.Graphics" />; в противном случае значение <see langword="false" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 Следующий пример кода предназначен для работы с Windows Forms, и для него необходим <xref:System.Windows.Forms.PaintEventArgs> `e`, который является параметром <xref:System.Windows.Forms.Control.Paint> обработчика событий. Код выполняет следующие действия.  
  
-   Создает вырезанную область прямоугольной и задает его в качестве области отсечения для графического объекта в форме с помощью <xref:System.Drawing.Drawing2D.CombineMode.Replace>.  
  
-   Создает, расположение и размер двух прямоугольников, один в качестве отсеченной области и за пределами.  
  
-   Проверяет каждый из прямоугольников и рисует только видимую точку.  
  
 Результатом является один небольшой красный прямоугольник, в пределах отсеченную область.  
  
 [!code-cpp[System.Drawing.ClassicGraphicsExamples3#134](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples3/CPP/form1.cpp#134)]
 [!code-csharp[System.Drawing.ClassicGraphicsExamples3#134](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples3/CS/form1.cs#134)]
 [!code-vb[System.Drawing.ClassicGraphicsExamples3#134](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples3/VB/form1.vb#134)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsVisibleClipEmpty">
      <MemberSignature Language="C#" Value="public bool IsVisibleClipEmpty { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsVisibleClipEmpty" />
      <MemberSignature Language="DocId" Value="P:System.Drawing.Graphics.IsVisibleClipEmpty" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsVisibleClipEmpty As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsVisibleClipEmpty { bool get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Возвращает значение, которое указывает, является ли видимая отсеченная область данного объекта <see cref="T:System.Drawing.Graphics" /> пустой.</summary>
        <value>
          Значение <see langword="true" />, если видимая часть отсеченной области данного объекта <see cref="T:System.Drawing.Graphics" /> является пустой; в противном случае значение <see langword="false" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Видимая отсеченная область представляет собой пересечение отсеченная область данного объекта `Graphics` и вырезанной области окна.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="MeasureCharacterRanges">
      <MemberSignature Language="C#" Value="public System.Drawing.Region[] MeasureCharacterRanges (string text, System.Drawing.Font font, System.Drawing.RectangleF layoutRect, System.Drawing.StringFormat stringFormat);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Drawing.Region[] MeasureCharacterRanges(string text, class System.Drawing.Font font, valuetype System.Drawing.RectangleF layoutRect, class System.Drawing.StringFormat stringFormat) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.MeasureCharacterRanges(System.String,System.Drawing.Font,System.Drawing.RectangleF,System.Drawing.StringFormat)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; cli::array &lt;System::Drawing::Region ^&gt; ^ MeasureCharacterRanges(System::String ^ text, System::Drawing::Font ^ font, System::Drawing::RectangleF layoutRect, System::Drawing::StringFormat ^ stringFormat);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Drawing.Region[]</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="text" Type="System.String" />
        <Parameter Name="font" Type="System.Drawing.Font" />
        <Parameter Name="layoutRect" Type="System.Drawing.RectangleF" />
        <Parameter Name="stringFormat" Type="System.Drawing.StringFormat" />
      </Parameters>
      <Docs>
        <param name="text">Строка для измерения.</param>
        <param name="font">
          Объект <see cref="T:System.Drawing.Font" />, определяющий формат текста строки.</param>
        <param name="layoutRect">
          Структура <see cref="T:System.Drawing.RectangleF" />, которая задает прямоугольник компоновки для строки.</param>
        <param name="stringFormat">
          Объект <see cref="T:System.Drawing.StringFormat" />, представляющий сведения о форматировании для строки, например межстрочный интервал.</param>
        <summary>Возвращает массив объектов <see cref="T:System.Drawing.Region" />, каждый из которых ограничивает диапазон позиций символов в рамках указанной строки.</summary>
        <returns>Этот метод возвращает массив объектов <see cref="T:System.Drawing.Region" />, каждый из которых ограничивает диапазон позиций символов в рамках указанной строки.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Области, возвращаемый этим методом, зависят от разрешения, поэтому может возникнуть небольшая потеря точности, если строки будут записаны в метафайл с одним разрешением и впоследствии воспроизведены с другим разрешением.  
  
   
  
## Examples  
 Следующий пример кода предназначен для работы с Windows Forms, и для него необходим <xref:System.Windows.Forms.PaintEventArgs> `e`, который является параметром <xref:System.Windows.Forms.Control.Paint> обработчика событий. Код выполняет следующие действия.  
  
-   Задает строку «первый и второй диапазоны» и шрифт для отображения строки («Times New Roman», 16 пт).  
  
-   Задает два диапазона символов в пределах строки (которые соответствуют словам "First" и "Second").  
  
-   Создает прямоугольник, в котором для отображения строки.  
  
-   Задает форматирование строки "" включая два диапазона символов.  
  
-   Выводит на экран строку.  
  
-   Измеряет диапазоны знаков, определяет прямоугольников, связывающих двух указанных диапазонов.  
  
-   Выводит на экран двух прямоугольников.  
  
 Результатом является отображается строка, первый диапазон («First») связан с красным прямоугольником, а второй диапазон ("Second") — с синим прямоугольником.  
  
 [!code-cpp[System.Drawing.ClassicGraphicsExamples3#135](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples3/CPP/form1.cpp#135)]
 [!code-csharp[System.Drawing.ClassicGraphicsExamples3#135](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples3/CS/form1.cs#135)]
 [!code-vb[System.Drawing.ClassicGraphicsExamples3#135](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples3/VB/form1.vb#135)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Drawing.Graphics.MeasureString(System.String,System.Drawing.Font)" />
        <altmember cref="M:System.Windows.Forms.TextRenderer.MeasureText(System.Drawing.IDeviceContext,System.String,System.Drawing.Font,System.Drawing.Size,System.Windows.Forms.TextFormatFlags)" />
      </Docs>
    </Member>
    <MemberGroup MemberName="MeasureString">
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Измеряет указанную строку в процессе ее создания с помощью заданного объекта <see cref="T:System.Drawing.Font" />.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="MeasureString">
      <MemberSignature Language="C#" Value="public System.Drawing.SizeF MeasureString (string text, System.Drawing.Font font);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype System.Drawing.SizeF MeasureString(string text, class System.Drawing.Font font) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.MeasureString(System.String,System.Drawing.Font)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Drawing::SizeF MeasureString(System::String ^ text, System::Drawing::Font ^ font);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Drawing.SizeF</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="text" Type="System.String" />
        <Parameter Name="font" Type="System.Drawing.Font" />
      </Parameters>
      <Docs>
        <param name="text">Строка для измерения.</param>
        <param name="font">
          Объект <see cref="T:System.Drawing.Font" />, определяющий формат текста строки.</param>
        <summary>Измеряет указанную строку в процессе ее создания с помощью заданного объекта <see cref="T:System.Drawing.Font" />.</summary>
        <returns>Этот метод возвращает структуру <see cref="T:System.Drawing.SizeF" />, представляющую размер в единицах, задаваемых свойством <see cref="P:System.Drawing.Graphics.PageUnit" />, для строки, которая определяется параметром <paramref name="text" /> в процессе рисования с использованием шрифта <paramref name="font" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Drawing.Graphics.MeasureString%2A> Метод предназначен для использования с отдельными строками и поэтому включает небольшое количество дополнительных пробелов до и после строки, которые предназначены для нависающих глифов. Кроме того <xref:System.Drawing.Graphics.DrawString%2A> метод настраивает точки глифов с целью оптимизации качества отображения и возможно отображение более узких, чем указано в значении строки <xref:System.Drawing.Graphics.MeasureString%2A>. Чтобы получить метрики, подходящей для соседних строк (например, если реализуется отформатированный текст), используйте <xref:System.Drawing.Graphics.MeasureCharacterRanges%2A> метода или одного из <xref:System.Drawing.Graphics.MeasureString%2A> методов, принимающих <xref:System.Drawing.StringFormat>и передать <xref:System.Drawing.StringFormat.GenericTypographic%2A>. Кроме того, необходимо <xref:System.Drawing.Graphics.TextRenderingHint%2A> для <xref:System.Drawing.Graphics> — <xref:System.Drawing.Text.TextRenderingHint.AntiAlias>.  
  
   
  
## Examples  
 Следующий пример кода предназначен для работы с Windows Forms, и для него необходим <xref:System.Windows.Forms.PaintEventArgs> `e`, который является параметром <xref:System.Windows.Forms.Control.Paint> обработчика событий. Код выполняет следующие действия.  
  
-   Создает строку для измерения.  
  
-   Создает объект шрифта и задает его Arial (16 пт).  
  
-   Создает объект размера и использует его и объект шрифта для измерения размера строки.  
  
-   Рисует прямоугольник красного цвета, используя полученный размер строки.  
  
-   Отображает строку в формируемого прямоугольника.  
  
 [!code-cpp[System.Drawing.ClassicGraphicsExamples3#136](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples3/CPP/form1.cpp#136)]
 [!code-csharp[System.Drawing.ClassicGraphicsExamples3#136](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples3/CS/form1.cs#136)]
 [!code-vb[System.Drawing.ClassicGraphicsExamples3#136](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples3/VB/form1.vb#136)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          Свойство <paramref name="font" /> имеет значение <see langword="null" />.</exception>
        <altmember cref="M:System.Windows.Forms.TextRenderer.MeasureText(System.Drawing.IDeviceContext,System.String,System.Drawing.Font,System.Drawing.Size,System.Windows.Forms.TextFormatFlags)" />
        <altmember cref="M:System.Drawing.Graphics.MeasureCharacterRanges(System.String,System.Drawing.Font,System.Drawing.RectangleF,System.Drawing.StringFormat)" />
      </Docs>
    </Member>
    <Member MemberName="MeasureString">
      <MemberSignature Language="C#" Value="public System.Drawing.SizeF MeasureString (string text, System.Drawing.Font font, System.Drawing.SizeF layoutArea);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype System.Drawing.SizeF MeasureString(string text, class System.Drawing.Font font, valuetype System.Drawing.SizeF layoutArea) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.MeasureString(System.String,System.Drawing.Font,System.Drawing.SizeF)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Drawing::SizeF MeasureString(System::String ^ text, System::Drawing::Font ^ font, System::Drawing::SizeF layoutArea);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Drawing.SizeF</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="text" Type="System.String" />
        <Parameter Name="font" Type="System.Drawing.Font" />
        <Parameter Name="layoutArea" Type="System.Drawing.SizeF" />
      </Parameters>
      <Docs>
        <param name="text">Строка для измерения.</param>
        <param name="font">
          Объект <see cref="T:System.Drawing.Font" /> определяет формат текстовой строки.</param>
        <param name="layoutArea">
          Структура <see cref="T:System.Drawing.SizeF" />, которая задает максимальную область размещения для текста.</param>
        <summary>Измеряет указанную строку в процессе ее создания с заданным шрифтом <see cref="T:System.Drawing.Font" /> в пределах заданной области макета.</summary>
        <returns>Этот метод возвращает структуру <see cref="T:System.Drawing.SizeF" />, представляющую размер в единицах, задаваемых свойством <see cref="P:System.Drawing.Graphics.PageUnit" />, для строки, которая определяется параметром <paramref name="text" /> в процессе рисования с использованием шрифта <paramref name="font" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Drawing.Graphics.MeasureString%2A> Метод предназначен для использования с отдельными строками и поэтому включает небольшое количество дополнительных пробелов до и после строки, которые предназначены для нависающих глифов. Кроме того <xref:System.Drawing.Graphics.DrawString%2A> метод настраивает точки глифов с целью оптимизации качества отображения и возможно отображение более узких, чем указано в значении строки <xref:System.Drawing.Graphics.MeasureString%2A>. Чтобы получить метрики, подходящей для соседних строк (например, если реализуется отформатированный текст), используйте <xref:System.Drawing.Graphics.MeasureCharacterRanges%2A> метода или одного из <xref:System.Drawing.Graphics.MeasureString%2A> методов, принимающих <xref:System.Drawing.StringFormat>и передать <xref:System.Drawing.StringFormat.GenericTypographic%2A>. Кроме того, необходимо <xref:System.Drawing.Graphics.TextRenderingHint%2A> для <xref:System.Drawing.Graphics> — <xref:System.Drawing.Text.TextRenderingHint.AntiAlias>.  
  
   
  
## Examples  
 Следующий пример кода предназначен для работы с Windows Forms, и для него необходим <xref:System.Windows.Forms.PaintEventArgs> `e`, который является параметром <xref:System.Windows.Forms.Control.Paint> обработчика событий. Код выполняет следующие действия.  
  
-   Создает строку для измерения и объект шрифта со значением Arial (16 пт).  
  
-   Задает максимальный размер размещения строки.  
  
-   Создает объект размера и использует его, объект шрифта и максимальный размер размещения для измерения размера строки.  
  
-   Рисует прямоугольник красного цвета, используя полученный размер строки.  
  
-   Отображает строку в формируемого прямоугольника.  
  
 [!code-cpp[System.Drawing.ClassicGraphicsExamples3#138](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples3/CPP/form1.cpp#138)]
 [!code-csharp[System.Drawing.ClassicGraphicsExamples3#138](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples3/CS/form1.cs#138)]
 [!code-vb[System.Drawing.ClassicGraphicsExamples3#138](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples3/VB/form1.vb#138)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          Свойство <paramref name="font" /> имеет значение <see langword="null" />.</exception>
        <altmember cref="M:System.Windows.Forms.TextRenderer.MeasureText(System.Drawing.IDeviceContext,System.String,System.Drawing.Font,System.Drawing.Size,System.Windows.Forms.TextFormatFlags)" />
        <altmember cref="M:System.Drawing.Graphics.MeasureCharacterRanges(System.String,System.Drawing.Font,System.Drawing.RectangleF,System.Drawing.StringFormat)" />
      </Docs>
    </Member>
    <Member MemberName="MeasureString">
      <MemberSignature Language="C#" Value="public System.Drawing.SizeF MeasureString (string text, System.Drawing.Font font, int width);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype System.Drawing.SizeF MeasureString(string text, class System.Drawing.Font font, int32 width) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.MeasureString(System.String,System.Drawing.Font,System.Int32)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Drawing::SizeF MeasureString(System::String ^ text, System::Drawing::Font ^ font, int width);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Drawing.SizeF</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="text" Type="System.String" />
        <Parameter Name="font" Type="System.Drawing.Font" />
        <Parameter Name="width" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="text">Строка для измерения.</param>
        <param name="font">
          Объект <see cref="T:System.Drawing.Font" />, определяющий формат текстовой строки.</param>
        <param name="width">Максимальная ширина строки (в пикселях).</param>
        <summary>Измеряет указанную строку в процессе ее создания с помощью заданного объекта <see cref="T:System.Drawing.Font" />.</summary>
        <returns>Этот метод возвращает структуру <see cref="T:System.Drawing.SizeF" />, представляющую размер в единицах, задаваемых свойством <see cref="P:System.Drawing.Graphics.PageUnit" /> для строки, которая определяется параметром <paramref name="text" /> в процессе рисования с использованием шрифта <paramref name="font" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 `width` Параметр определяет максимальное значение компонента ширины возвращаемого <xref:System.Drawing.SizeF> структуры (<xref:System.Drawing.SizeF.Width%2A>). Если `width` параметр меньше фактической ширины строки, возвращаемый <xref:System.Drawing.SizeF.Width%2A> компонент усекается до значение, представляющее максимальное число символов, которые могут уместиться в пределах заданной ширины. Чтобы разместить всю строку, возвращенный <xref:System.Drawing.SizeF.Height%2A> компонент настраивается в значение, которое разрешает вывод строки с переносом знаков.  
  
 <xref:System.Drawing.Graphics.MeasureString%2A> Метод предназначен для использования с отдельными строками и поэтому включает небольшое количество дополнительных пробелов до и после строки, которые предназначены для нависающих глифов. Кроме того <xref:System.Drawing.Graphics.DrawString%2A> метод настраивает точки глифов с целью оптимизации качества отображения и возможно отображение более узких, чем указано в значении строки <xref:System.Drawing.Graphics.MeasureString%2A>. Чтобы получить метрики, подходящей для соседних строк (например, если реализуется отформатированный текст), используйте <xref:System.Drawing.Graphics.MeasureCharacterRanges%2A> метода или одного из <xref:System.Drawing.Graphics.MeasureString%2A> методов, принимающих <xref:System.Drawing.StringFormat>и передать <xref:System.Drawing.StringFormat.GenericTypographic%2A>. Кроме того, необходимо <xref:System.Drawing.Graphics.TextRenderingHint%2A> для <xref:System.Drawing.Graphics> — <xref:System.Drawing.Text.TextRenderingHint.AntiAlias>.  
  
   
  
## Examples  
 Следующий пример кода предназначен для работы с Windows Forms, и для него необходим <xref:System.Windows.Forms.PaintEventArgs> `e`, который является параметром <xref:System.Windows.Forms.Control.Paint> обработчика событий. Код выполняет следующие действия.  
  
-   Создает строку для измерения и объект шрифта со значением Arial (16 пт).  
  
-   Задает максимальную ширину строки.  
  
-   Создает объект размера и использует его, объект шрифта и максимальную ширину строки для измерения размера строки.  
  
-   Рисует прямоугольник красного цвета, используя полученный размер строки.  
  
-   Отображает строку в формируемого прямоугольника.  
  
 [!code-cpp[System.Drawing.ClassicGraphicsExamples3#141](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples3/CPP/form1.cpp#141)]
 [!code-csharp[System.Drawing.ClassicGraphicsExamples3#141](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples3/CS/form1.cs#141)]
 [!code-vb[System.Drawing.ClassicGraphicsExamples3#141](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples3/VB/form1.vb#141)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          Свойство <paramref name="font" /> имеет значение <see langword="null" />.</exception>
        <altmember cref="M:System.Windows.Forms.TextRenderer.MeasureText(System.Drawing.IDeviceContext,System.String,System.Drawing.Font,System.Drawing.Size,System.Windows.Forms.TextFormatFlags)" />
        <altmember cref="M:System.Drawing.Graphics.MeasureCharacterRanges(System.String,System.Drawing.Font,System.Drawing.RectangleF,System.Drawing.StringFormat)" />
      </Docs>
    </Member>
    <Member MemberName="MeasureString">
      <MemberSignature Language="C#" Value="public System.Drawing.SizeF MeasureString (string text, System.Drawing.Font font, System.Drawing.PointF origin, System.Drawing.StringFormat stringFormat);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype System.Drawing.SizeF MeasureString(string text, class System.Drawing.Font font, valuetype System.Drawing.PointF origin, class System.Drawing.StringFormat stringFormat) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.MeasureString(System.String,System.Drawing.Font,System.Drawing.PointF,System.Drawing.StringFormat)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Drawing::SizeF MeasureString(System::String ^ text, System::Drawing::Font ^ font, System::Drawing::PointF origin, System::Drawing::StringFormat ^ stringFormat);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Drawing.SizeF</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="text" Type="System.String" />
        <Parameter Name="font" Type="System.Drawing.Font" />
        <Parameter Name="origin" Type="System.Drawing.PointF" />
        <Parameter Name="stringFormat" Type="System.Drawing.StringFormat" />
      </Parameters>
      <Docs>
        <param name="text">Строка для измерения.</param>
        <param name="font">
          Объект <see cref="T:System.Drawing.Font" /> определяет формат текстовой строки.</param>
        <param name="origin">
          Структура <see cref="T:System.Drawing.PointF" />, представляющая расположение верхнего левого угла строки.</param>
        <param name="stringFormat">
          Объект <see cref="T:System.Drawing.StringFormat" />, представляющий сведения о форматировании для строки, например межстрочный интервал.</param>
        <summary>Измеряет указанную строку при ее отображении с заданным шрифтом <see cref="T:System.Drawing.Font" /> и отформатированную с помощью заданного формата <see cref="T:System.Drawing.StringFormat" />.</summary>
        <returns>Этот метод возвращает структуру <see cref="T:System.Drawing.SizeF" />, представляющую размер в единицах, задаваемых свойством <see cref="P:System.Drawing.Graphics.PageUnit" />, для строки, которая определяется параметром <paramref name="text" /> при отображении с шрифтом <paramref name="font" /> и форматом <paramref name="stringFormat" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Drawing.Graphics.MeasureString%2A> Метод предназначен для использования с отдельными строками и поэтому включает небольшое количество дополнительных пробелов до и после строки, которые предназначены для нависающих глифов. Кроме того <xref:System.Drawing.Graphics.DrawString%2A> метод настраивает точки глифов с целью оптимизации качества отображения и возможно отображение более узких, чем указано в значении строки <xref:System.Drawing.Graphics.MeasureString%2A>. Чтобы получить метрики, подходящей для соседних строк (например, если реализуется отформатированный текст), используйте <xref:System.Drawing.Graphics.MeasureCharacterRanges%2A> метода или одного из <xref:System.Drawing.Graphics.MeasureString%2A> методов, принимающих <xref:System.Drawing.StringFormat>и передать <xref:System.Drawing.StringFormat.GenericTypographic%2A>. Кроме того, необходимо <xref:System.Drawing.Graphics.TextRenderingHint%2A> для <xref:System.Drawing.Graphics> — <xref:System.Drawing.Text.TextRenderingHint.AntiAlias>.  
  
   
  
## Examples  
 Следующий пример кода предназначен для работы с Windows Forms, и для него необходим <xref:System.Windows.Forms.PaintEventArgs> `e`, который является параметром <xref:System.Windows.Forms.Control.Paint> обработчика событий. Код выполняет следующие действия.  
  
-   Создает строку для измерения и объект шрифта со значением Arial (16 пт)  
  
-   Создает точку, чтобы найти верхнего левого угла строки.  
  
-   Создает объект форматирования строки и присваивает его флаги формата <xref:System.Drawing.StringFormatFlags.DirectionVertical>.  
  
-   Создает объект размера для измерения строки.  
  
-   Измеряет размер строки, используя строку, объект шрифта, опорную точку и формат строки.  
  
-   Рисует прямоугольник красного цвета, используя опорную точку и полученный размер строки.  
  
-   Отображает строку в формируемого прямоугольника.  
  
 Результатом является вертикальный прямоугольник, содержащий вертикальную строку.  
  
 [!code-cpp[System.Drawing.ClassicGraphicsExamples3#137](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples3/CPP/form1.cpp#137)]
 [!code-csharp[System.Drawing.ClassicGraphicsExamples3#137](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples3/CS/form1.cs#137)]
 [!code-vb[System.Drawing.ClassicGraphicsExamples3#137](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples3/VB/form1.vb#137)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          Свойство <paramref name="font" /> имеет значение <see langword="null" />.</exception>
        <altmember cref="M:System.Windows.Forms.TextRenderer.MeasureText(System.Drawing.IDeviceContext,System.String,System.Drawing.Font,System.Drawing.Size,System.Windows.Forms.TextFormatFlags)" />
        <altmember cref="M:System.Drawing.Graphics.MeasureCharacterRanges(System.String,System.Drawing.Font,System.Drawing.RectangleF,System.Drawing.StringFormat)" />
      </Docs>
    </Member>
    <Member MemberName="MeasureString">
      <MemberSignature Language="C#" Value="public System.Drawing.SizeF MeasureString (string text, System.Drawing.Font font, System.Drawing.SizeF layoutArea, System.Drawing.StringFormat stringFormat);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype System.Drawing.SizeF MeasureString(string text, class System.Drawing.Font font, valuetype System.Drawing.SizeF layoutArea, class System.Drawing.StringFormat stringFormat) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.MeasureString(System.String,System.Drawing.Font,System.Drawing.SizeF,System.Drawing.StringFormat)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Drawing::SizeF MeasureString(System::String ^ text, System::Drawing::Font ^ font, System::Drawing::SizeF layoutArea, System::Drawing::StringFormat ^ stringFormat);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Drawing.SizeF</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="text" Type="System.String" />
        <Parameter Name="font" Type="System.Drawing.Font" />
        <Parameter Name="layoutArea" Type="System.Drawing.SizeF" />
        <Parameter Name="stringFormat" Type="System.Drawing.StringFormat" />
      </Parameters>
      <Docs>
        <param name="text">Строка для измерения.</param>
        <param name="font">
          Объект <see cref="T:System.Drawing.Font" /> определяет формат текстовой строки.</param>
        <param name="layoutArea">
          Структура <see cref="T:System.Drawing.SizeF" />, которая задает максимальную область размещения для текста.</param>
        <param name="stringFormat">
          Объект <see cref="T:System.Drawing.StringFormat" />, представляющий сведения о форматировании для строки, например межстрочный интервал.</param>
        <summary>Измеряет указанную строку при ее отображении с заданным шрифтом <see cref="T:System.Drawing.Font" /> и отформатированную с помощью заданного формата <see cref="T:System.Drawing.StringFormat" />.</summary>
        <returns>Этот метод возвращает структуру <see cref="T:System.Drawing.SizeF" />, представляющую размер в единицах, задаваемых свойством <see cref="P:System.Drawing.Graphics.PageUnit" />, для строки, которая определяется параметром <paramref name="text" /> при отображении с шрифтом <paramref name="font" /> и форматом <paramref name="stringFormat" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Drawing.Graphics.MeasureString%2A> Метод предназначен для использования с отдельными строками и поэтому включает небольшое количество дополнительных пробелов до и после строки, которые предназначены для нависающих глифов. Кроме того <xref:System.Drawing.Graphics.DrawString%2A> метод настраивает точки глифов с целью оптимизации качества отображения и возможно отображение более узких, чем указано в значении строки <xref:System.Drawing.Graphics.MeasureString%2A>. Чтобы получить метрики, подходящей для соседних строк (например, если реализуется отформатированный текст), используйте <xref:System.Drawing.Graphics.MeasureCharacterRanges%2A> метода или одного из <xref:System.Drawing.Graphics.MeasureString%2A> методов, принимающих <xref:System.Drawing.StringFormat>и передать <xref:System.Drawing.StringFormat.GenericTypographic%2A>. Кроме того, необходимо <xref:System.Drawing.Graphics.TextRenderingHint%2A> для <xref:System.Drawing.Graphics> — <xref:System.Drawing.Text.TextRenderingHint.AntiAlias>.  
  
   
  
## Examples  
 Следующий пример кода предназначен для работы с Windows Forms, и для него необходим <xref:System.Windows.Forms.PaintEventArgs> `e`, который является параметром <xref:System.Windows.Forms.Control.Paint> обработчика событий. Код выполняет следующие действия.  
  
-   Создает строку для измерения и объект шрифта со значением Arial (16 пт).  
  
-   Задает максимальный размер размещения строки, создавая объект размера для измерения строки.  
  
-   Создает объект форматирования строки и присваивает его флаги формата <xref:System.Drawing.StringFormatFlags.DirectionVertical>.  
  
-   Измеряет размер строки, используя строку, объект шрифта, максимальный размер размещения и формат строки.  
  
-   Рисует прямоугольник красного цвета, используя полученный размер строки.  
  
-   Отображает строку в формируемого прямоугольника.  
  
 Результатом является вертикальный прямоугольник, содержащий вертикальную строку.  
  
 [!code-cpp[System.Drawing.ClassicGraphicsExamples3#139](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples3/CPP/form1.cpp#139)]
 [!code-csharp[System.Drawing.ClassicGraphicsExamples3#139](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples3/CS/form1.cs#139)]
 [!code-vb[System.Drawing.ClassicGraphicsExamples3#139](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples3/VB/form1.vb#139)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          Свойство <paramref name="font" /> имеет значение <see langword="null" />.</exception>
        <altmember cref="M:System.Windows.Forms.TextRenderer.MeasureText(System.Drawing.IDeviceContext,System.String,System.Drawing.Font,System.Drawing.Size,System.Windows.Forms.TextFormatFlags)" />
        <altmember cref="M:System.Drawing.Graphics.MeasureCharacterRanges(System.String,System.Drawing.Font,System.Drawing.RectangleF,System.Drawing.StringFormat)" />
      </Docs>
    </Member>
    <Member MemberName="MeasureString">
      <MemberSignature Language="C#" Value="public System.Drawing.SizeF MeasureString (string text, System.Drawing.Font font, int width, System.Drawing.StringFormat format);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype System.Drawing.SizeF MeasureString(string text, class System.Drawing.Font font, int32 width, class System.Drawing.StringFormat format) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.MeasureString(System.String,System.Drawing.Font,System.Int32,System.Drawing.StringFormat)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Drawing::SizeF MeasureString(System::String ^ text, System::Drawing::Font ^ font, int width, System::Drawing::StringFormat ^ format);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Drawing.SizeF</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="text" Type="System.String" />
        <Parameter Name="font" Type="System.Drawing.Font" />
        <Parameter Name="width" Type="System.Int32" />
        <Parameter Name="format" Type="System.Drawing.StringFormat" />
      </Parameters>
      <Docs>
        <param name="text">Строка для измерения.</param>
        <param name="font">
          Объект <see cref="T:System.Drawing.Font" />, определяющий формат текста строки.</param>
        <param name="width">Максимальная ширина строки.</param>
        <param name="format">
          Объект <see cref="T:System.Drawing.StringFormat" />, представляющий сведения о форматировании для строки, например межстрочный интервал.</param>
        <summary>Измеряет указанную строку при ее отображении с заданным шрифтом <see cref="T:System.Drawing.Font" /> и отформатированную с помощью заданного формата <see cref="T:System.Drawing.StringFormat" />.</summary>
        <returns>Этот метод возвращает структуру <see cref="T:System.Drawing.SizeF" />, представляющую размер в единицах, задаваемых свойством <see cref="P:System.Drawing.Graphics.PageUnit" />, для строки, которая определяется параметром <paramref name="text" /> при отображении с шрифтом <paramref name="font" /> и форматом <paramref name="stringFormat" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Drawing.Graphics.MeasureString%2A> Метод предназначен для использования с отдельными строками и поэтому включает небольшое количество дополнительных пробелов до и после строки, которые предназначены для нависающих глифов. Кроме того <xref:System.Drawing.Graphics.DrawString%2A> метод настраивает точки глифов с целью оптимизации качества отображения и возможно отображение более узких, чем указано в значении строки <xref:System.Drawing.Graphics.MeasureString%2A>. Чтобы получить метрики, подходящей для соседних строк (например, если реализуется отформатированный текст), используйте <xref:System.Drawing.Graphics.MeasureCharacterRanges%2A> метода или одного из <xref:System.Drawing.Graphics.MeasureString%2A> методов, принимающих <xref:System.Drawing.StringFormat>и передать <xref:System.Drawing.StringFormat.GenericTypographic%2A>. Кроме того, необходимо <xref:System.Drawing.Graphics.TextRenderingHint%2A> для <xref:System.Drawing.Graphics> — <xref:System.Drawing.Text.TextRenderingHint.AntiAlias>.  
  
   
  
## Examples  
 Следующий пример кода предназначен для работы с Windows Forms, и для него необходим <xref:System.Windows.Forms.PaintEventArgs> `e`, который является параметром <xref:System.Windows.Forms.Control.Paint> обработчика событий. Код выполняет следующие действия.  
  
-   Создает строку для измерения и объект шрифта значение Arial (16 пт).  
  
-   Задает максимальную ширину строки.  
  
-   Создает объект форматирования строки и присваивает его флаги формата <xref:System.Drawing.StringFormatFlags.DirectionVertical>.  
  
-   Создает объект размера для измерения строки.  
  
-   Измеряет размер строки, используя строку, объект шрифта, максимальную ширину и формат строки.  
  
-   Рисует прямоугольник красного цвета, используя полученный размер строки.  
  
-   Отображает строку в формируемого прямоугольника.  
  
 Результатом является вертикальный прямоугольник, содержащий вертикальную строку.  
  
 [!code-cpp[System.Drawing.ClassicGraphicsExamples3#142](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples3/CPP/form1.cpp#142)]
 [!code-csharp[System.Drawing.ClassicGraphicsExamples3#142](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples3/CS/form1.cs#142)]
 [!code-vb[System.Drawing.ClassicGraphicsExamples3#142](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples3/VB/form1.vb#142)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          Свойство <paramref name="font" /> имеет значение <see langword="null" />.</exception>
        <altmember cref="M:System.Windows.Forms.TextRenderer.MeasureText(System.Drawing.IDeviceContext,System.String,System.Drawing.Font,System.Drawing.Size,System.Windows.Forms.TextFormatFlags)" />
        <altmember cref="M:System.Drawing.Graphics.MeasureCharacterRanges(System.String,System.Drawing.Font,System.Drawing.RectangleF,System.Drawing.StringFormat)" />
      </Docs>
    </Member>
    <Member MemberName="MeasureString">
      <MemberSignature Language="C#" Value="public System.Drawing.SizeF MeasureString (string text, System.Drawing.Font font, System.Drawing.SizeF layoutArea, System.Drawing.StringFormat stringFormat, out int charactersFitted, out int linesFilled);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype System.Drawing.SizeF MeasureString(string text, class System.Drawing.Font font, valuetype System.Drawing.SizeF layoutArea, class System.Drawing.StringFormat stringFormat, [out] int32&amp; charactersFitted, [out] int32&amp; linesFilled) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.MeasureString(System.String,System.Drawing.Font,System.Drawing.SizeF,System.Drawing.StringFormat,System.Int32@,System.Int32@)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Drawing::SizeF MeasureString(System::String ^ text, System::Drawing::Font ^ font, System::Drawing::SizeF layoutArea, System::Drawing::StringFormat ^ stringFormat, [Runtime::InteropServices::Out] int % charactersFitted, [Runtime::InteropServices::Out] int % linesFilled);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Drawing.SizeF</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="text" Type="System.String" />
        <Parameter Name="font" Type="System.Drawing.Font" />
        <Parameter Name="layoutArea" Type="System.Drawing.SizeF" />
        <Parameter Name="stringFormat" Type="System.Drawing.StringFormat" />
        <Parameter Name="charactersFitted" Type="System.Int32&amp;" RefType="out" />
        <Parameter Name="linesFilled" Type="System.Int32&amp;" RefType="out" />
      </Parameters>
      <Docs>
        <param name="text">Строка для измерения.</param>
        <param name="font">
          Объект <see cref="T:System.Drawing.Font" />, определяющий формат текста строки.</param>
        <param name="layoutArea">
          Структура <see cref="T:System.Drawing.SizeF" />, которая задает максимальную область размещения для текста.</param>
        <param name="stringFormat">
          Объект <see cref="T:System.Drawing.StringFormat" />, представляющий сведения о форматировании для строки, например межстрочный интервал.</param>
        <param name="charactersFitted">Количество знаков в строке.</param>
        <param name="linesFilled">Количество строк текста в строке.</param>
        <summary>Измеряет указанную строку при ее отображении с заданным шрифтом <see cref="T:System.Drawing.Font" /> и отформатированную с помощью заданного формата <see cref="T:System.Drawing.StringFormat" />.</summary>
        <returns>Этот метод возвращает структуру <see cref="T:System.Drawing.SizeF" />, представляющую размер строки, в единицах, задаваемых свойством <see cref="P:System.Drawing.Graphics.PageUnit" /> параметра <paramref name="text" />, при отображении с использованием шрифта <paramref name="font" /> и формата <paramref name="stringFormat" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Drawing.Graphics.MeasureString%2A> Метод предназначен для использования с отдельными строками и поэтому включает небольшое количество дополнительных пробелов до и после строки, которые предназначены для нависающих глифов. Кроме того <xref:System.Drawing.Graphics.DrawString%2A> метод настраивает точки глифов с целью оптимизации качества отображения и возможно отображение более узких, чем указано в значении строки <xref:System.Drawing.Graphics.MeasureString%2A>. Чтобы получить метрики, подходящей для соседних строк (например, если реализуется отформатированный текст), используйте <xref:System.Drawing.Graphics.MeasureCharacterRanges%2A> метода или одного из <xref:System.Drawing.Graphics.MeasureString%2A> методов, принимающих <xref:System.Drawing.StringFormat> и передать <xref:System.Drawing.StringFormat.GenericTypographic%2A>. Обеспечьте наличие <xref:System.Drawing.Graphics.TextRenderingHint%2A> для <xref:System.Drawing.Graphics> — <xref:System.Drawing.Text.TextRenderingHint.AntiAlias>.  
  
   
  
## Examples  
 Следующий пример кода предназначен для работы с Windows Forms, и для него необходим <xref:System.Windows.Forms.PaintEventArgs> `e`, который является параметром <xref:System.Windows.Forms.Control.Paint> обработчика событий. Код выполняет следующие действия.  
  
-   Создает строку для измерения и объект шрифта со значением Arial (16 пт)  
  
-   Задает максимальный размер размещения строки.  
  
-   Создает объект форматирования строки и присваивает его флаги формата <xref:System.Drawing.StringFormatFlags.DirectionVertical>.  
  
-   Создает целочисленных переменных `charactersFitted` и `linesFilled` и объект размера для измерения строки.  
  
-   Измеряет размер строки и определяет количество символов и строк, используя строку, объект шрифта, максимальный размер размещения и формат строки.  
  
-   Рисует прямоугольник красного цвета, используя полученный размер строки.  
  
-   Отображает строку в формируемого прямоугольника.  
  
-   Выводит значения количество символов и строк.  
  
 Результатом является вертикальный прямоугольник, содержащий вертикальную строку.  
  
 [!code-cpp[System.Drawing.ClassicGraphicsExamples3#140](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples3/CPP/form1.cpp#140)]
 [!code-csharp[System.Drawing.ClassicGraphicsExamples3#140](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples3/CS/form1.cs#140)]
 [!code-vb[System.Drawing.ClassicGraphicsExamples3#140](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples3/VB/form1.vb#140)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          Свойство <paramref name="font" /> имеет значение <see langword="null" />.</exception>
        <altmember cref="M:System.Windows.Forms.TextRenderer.MeasureText(System.Drawing.IDeviceContext,System.String,System.Drawing.Font,System.Drawing.Size,System.Windows.Forms.TextFormatFlags)" />
        <altmember cref="M:System.Drawing.Graphics.MeasureCharacterRanges(System.String,System.Drawing.Font,System.Drawing.RectangleF,System.Drawing.StringFormat)" />
      </Docs>
    </Member>
    <MemberGroup MemberName="MultiplyTransform">
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Умножает мировое преобразование данного объекта <see cref="T:System.Drawing.Graphics" /> на указываемый объект <see cref="T:System.Drawing.Drawing2D.Matrix" />.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="MultiplyTransform">
      <MemberSignature Language="C#" Value="public void MultiplyTransform (System.Drawing.Drawing2D.Matrix matrix);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void MultiplyTransform(class System.Drawing.Drawing2D.Matrix matrix) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.MultiplyTransform(System.Drawing.Drawing2D.Matrix)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void MultiplyTransform(System::Drawing::Drawing2D::Matrix ^ matrix);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="matrix" Type="System.Drawing.Drawing2D.Matrix" />
      </Parameters>
      <Docs>
        <param name="matrix">Матрица <see cref="T:System.Drawing.Drawing2D.Matrix" /> 4x4, на которую умножается мировое преобразование.</param>
        <summary>Умножает мировое преобразование данного объекта <see cref="T:System.Drawing.Graphics" /> на указываемый объект <see cref="T:System.Drawing.Drawing2D.Matrix" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Этот метод добавляет матрицу, заданную параметром `matrix` параметр, таким образом, результат `matrix` x мировое преобразование.  
  
   
  
## Examples  
 Следующий пример кода предназначен для работы с Windows Forms, и для него необходим <xref:System.Windows.Forms.PaintEventArgs> `e`, который является параметром <xref:System.Windows.Forms.Control.Paint> обработчика событий. Код выполняет следующие действия.  
  
-   Создает `transformMatrix` матрицы (два по два единичной матрицы, а также вектор нулевого смещения).  
  
-   Переводит матрицу преобразования с помощью вектора (200, 100).  
  
-   Поворачивает матрицу мирового преобразования формы Windows Forms на 30 градусов, добавляет матрицу вращения на 30 градусов к матрице преобразования формы.  
  
-   Умножает матрицу преобразования world повернутый на переведенный `transformMatrix`и добавляет `transformMatrix` в матрицу мирового преобразования.  
  
-   Рисует повернутый, преобразованный эллипс.  
  
 [!code-cpp[System.Drawing.ClassicGraphicsExamples3#143](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples3/CPP/form1.cpp#143)]
 [!code-csharp[System.Drawing.ClassicGraphicsExamples3#143](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples3/CS/form1.cs#143)]
 [!code-vb[System.Drawing.ClassicGraphicsExamples3#143](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples3/VB/form1.vb#143)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="MultiplyTransform">
      <MemberSignature Language="C#" Value="public void MultiplyTransform (System.Drawing.Drawing2D.Matrix matrix, System.Drawing.Drawing2D.MatrixOrder order);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void MultiplyTransform(class System.Drawing.Drawing2D.Matrix matrix, valuetype System.Drawing.Drawing2D.MatrixOrder order) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.MultiplyTransform(System.Drawing.Drawing2D.Matrix,System.Drawing.Drawing2D.MatrixOrder)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void MultiplyTransform(System::Drawing::Drawing2D::Matrix ^ matrix, System::Drawing::Drawing2D::MatrixOrder order);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="matrix" Type="System.Drawing.Drawing2D.Matrix" />
        <Parameter Name="order" Type="System.Drawing.Drawing2D.MatrixOrder" />
      </Parameters>
      <Docs>
        <param name="matrix">Матрица <see cref="T:System.Drawing.Drawing2D.Matrix" /> 4x4, на которую умножается мировое преобразование.</param>
        <param name="order">Член перечисления <see cref="T:System.Drawing.Drawing2D.MatrixOrder" />, определяющий порядок умножения.</param>
        <summary>Умножает мировое преобразование данного объекта <see cref="T:System.Drawing.Graphics" /> на указываемый объект <see cref="T:System.Drawing.Drawing2D.Matrix" /> в заданном порядке.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Значение <xref:System.Drawing.Drawing2D.MatrixOrder.Prepend> для `order` параметр указывает, что порядок умножения `matrix` x мировое преобразование. Значение <xref:System.Drawing.Drawing2D.MatrixOrder.Append> для `order` указывает, что порядок умножения мировое преобразование x `matrix`.  
  
   
  
## Examples  
 Следующий пример кода предназначен для работы с Windows Forms, и для него необходим <xref:System.Windows.Forms.PaintEventArgs> `e`, который является параметром <xref:System.Windows.Forms.Control.Paint> обработчика событий. Код выполняет следующие действия.  
  
-   Создает `transformMatrix` матрицы (два по два единичной матрицы, а также вектор нулевого смещения).  
  
-   Переводит матрицу преобразования с помощью вектора (200, 100).  
  
-   Поворачивает матрицу мирового преобразования формы Windows Forms на 30 градусов, добавляя матрицу вращения на 30 градусов к матрице преобразования формы.  
  
-   Умножает матрицу преобразования world повернутый на переведенный `transformMatrix`, добавляя `transformMatrix` в матрицу мирового преобразования.  
  
-   Рисует повернутый, преобразованный эллипс.  
  
 [!code-cpp[System.Drawing.ClassicGraphicsExamples3#144](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples3/CPP/form1.cpp#144)]
 [!code-csharp[System.Drawing.ClassicGraphicsExamples3#144](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples3/CS/form1.cs#144)]
 [!code-vb[System.Drawing.ClassicGraphicsExamples3#144](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples3/VB/form1.vb#144)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="PageScale">
      <MemberSignature Language="C#" Value="public float PageScale { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance float32 PageScale" />
      <MemberSignature Language="DocId" Value="P:System.Drawing.Graphics.PageScale" />
      <MemberSignature Language="VB.NET" Value="Public Property PageScale As Single" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property float PageScale { float get(); void set(float value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Single</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Возвращает или задает масштабирование между мировыми и страничными единицами измерения для данного объекта <see cref="T:System.Drawing.Graphics" />.</summary>
        <value>Это свойство задает значение для масштабирования между мировыми и страничными единицами измерения для данного объекта <see cref="T:System.Drawing.Graphics" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 В следующем примере кода демонстрируется использование <xref:System.Drawing.Graphics.PageScale%2A> и <xref:System.Drawing.Graphics.TranslateTransform%2A> члены для изменения масштаба и источника, если нарисовать прямоугольник.  
  
 Этот пример предназначен для использования с Windows Forms. Вставьте код в форму и вызовите `ChangePageScaleAndTranslateTransform` метод при обработке формы <xref:System.Windows.Forms.Control.Paint> передачи событий `e` как <xref:System.Windows.Forms.PaintEventArgs>.  
  
 [!code-cpp[System.Drawing.GraphicsProperties#2](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.GraphicsProperties/CPP/form1.cpp#2)]
 [!code-csharp[System.Drawing.GraphicsProperties#2](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.GraphicsProperties/CS/form1.cs#2)]
 [!code-vb[System.Drawing.GraphicsProperties#2](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.GraphicsProperties/VB/form1.vb#2)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="PageUnit">
      <MemberSignature Language="C#" Value="public System.Drawing.GraphicsUnit PageUnit { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Drawing.GraphicsUnit PageUnit" />
      <MemberSignature Language="DocId" Value="P:System.Drawing.Graphics.PageUnit" />
      <MemberSignature Language="VB.NET" Value="Public Property PageUnit As GraphicsUnit" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Drawing::GraphicsUnit PageUnit { System::Drawing::GraphicsUnit get(); void set(System::Drawing::GraphicsUnit value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Drawing.GraphicsUnit</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Возвращает или задает единицу измерения для страничных координат в данном объекте <see cref="T:System.Drawing.Graphics" />.</summary>
        <value>Одно из значений единиц измерения <see cref="T:System.Drawing.GraphicsUnit" />, отличное от <see cref="F:System.Drawing.GraphicsUnit.World" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Графики единица представляет собой единицу измерения для страничных координат в данном <xref:System.Drawing.Graphics>.  
  
   
  
## Examples  
 В следующем примере кода демонстрируется эффект от изменения <xref:System.Drawing.Graphics.PageUnit%2A> свойство.  
  
 Этот пример предназначен для использования с Windows Forms. Вставьте код в форму и вызовите `ChangePageUnit` метод при обработке формы <xref:System.Windows.Forms.Control.Paint> передачи событий `e` как <xref:System.Windows.Forms.PaintEventArgs>.  
  
 [!code-cpp[System.Drawing.GraphicsProperties#3](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.GraphicsProperties/CPP/form1.cpp#3)]
 [!code-csharp[System.Drawing.GraphicsProperties#3](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.GraphicsProperties/CS/form1.cs#3)]
 [!code-vb[System.Drawing.GraphicsProperties#3](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.GraphicsProperties/VB/form1.vb#3)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ComponentModel.InvalidEnumArgumentException">
          Объект <see cref="P:System.Drawing.Graphics.PageUnit" /> устанавливается равным значению <see cref="F:System.Drawing.GraphicsUnit.World" />, которое не является физической единицей измерения.</exception>
      </Docs>
    </Member>
    <Member MemberName="PixelOffsetMode">
      <MemberSignature Language="C#" Value="public System.Drawing.Drawing2D.PixelOffsetMode PixelOffsetMode { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Drawing.Drawing2D.PixelOffsetMode PixelOffsetMode" />
      <MemberSignature Language="DocId" Value="P:System.Drawing.Graphics.PixelOffsetMode" />
      <MemberSignature Language="VB.NET" Value="Public Property PixelOffsetMode As PixelOffsetMode" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Drawing::Drawing2D::PixelOffsetMode PixelOffsetMode { System::Drawing::Drawing2D::PixelOffsetMode get(); void set(System::Drawing::Drawing2D::PixelOffsetMode value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Drawing.Drawing2D.PixelOffsetMode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Возвращает или задает значение, которое задает порядок смещения пикселей во время отрисовки данного объекта <see cref="T:System.Drawing.Graphics" />.</summary>
        <value>Это свойство задает элемент перечисления <see cref="T:System.Drawing.Drawing2D.PixelOffsetMode" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Это свойство используется для указания либо выше качество медленнее отрисовки и более низкое качество ускоряет визуализацию содержимого содержимое этого <xref:System.Drawing.Graphics> объекта.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="ReleaseHdc">
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Освобождает дескриптор контекста устройства, полученный в результате предыдущего вызова метода <see cref="M:System.Drawing.Graphics.GetHdc" /> данного объекта <see cref="T:System.Drawing.Graphics" />.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="ReleaseHdc">
      <MemberSignature Language="C#" Value="public void ReleaseHdc ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void ReleaseHdc() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.ReleaseHdc" />
      <MemberSignature Language="VB.NET" Value="Public Sub ReleaseHdc ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void ReleaseHdc();" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Drawing.IDeviceContext.ReleaseHdc</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Освобождает дескриптор контекста устройства, полученный в результате предыдущего вызова метода <see cref="M:System.Drawing.Graphics.GetHdc" /> данного объекта <see cref="T:System.Drawing.Graphics" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Drawing.Graphics.GetHdc%2A> и <xref:System.Drawing.Graphics.ReleaseHdc%2A> двумя способами, которые дают возможность получить и освободить дескриптор для устройства Windows. Следует всегда придерживаться вызов <xref:System.Drawing.Graphics.GetHdc%2A> вызовом <xref:System.Drawing.Graphics.ReleaseHdc%2A> по окончании дескриптора Windows.  
  
 ]]></format>
        </remarks>
        <permission cref="T:System.Security.Permissions.SecurityPermission">для доступа к неуправляемому коду. Связанные перечисления: <see cref="F:System.Security.Permissions.SecurityPermissionFlag.UnmanagedCode" />.</permission>
        <altmember cref="T:System.Drawing.IDeviceContext" />
      </Docs>
    </Member>
    <Member MemberName="ReleaseHdc">
      <MemberSignature Language="C#" Value="public void ReleaseHdc (IntPtr hdc);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void ReleaseHdc(native int hdc) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.ReleaseHdc(System.IntPtr)" />
      <MemberSignature Language="VB.NET" Value="Public Sub ReleaseHdc (hdc As IntPtr)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void ReleaseHdc(IntPtr hdc);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="hdc" Type="System.IntPtr" />
      </Parameters>
      <Docs>
        <param name="hdc">Дескриптор контекста устройства, полученный в результате предыдущего вызова метода <see cref="M:System.Drawing.Graphics.GetHdc" /> данного объекта <see cref="T:System.Drawing.Graphics" />.</param>
        <summary>Освобождает дескриптор контекста устройства, полученный в результате предыдущего вызова метода <see cref="M:System.Drawing.Graphics.GetHdc" /> данного объекта <see cref="T:System.Drawing.Graphics" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Контекст устройства — это структура Windows, на основе [!INCLUDE[ndptecgdi](~/includes/ndptecgdi-md.md)] , определяющий набор графических объектов и связанные с ними атрибуты, а также графические режимы, которые влияют на выходные данные.  
  
 Вызовы <xref:System.Drawing.Graphics.GetHdc%2A> и <xref:System.Drawing.Graphics.ReleaseHdc%2A> методы должны располагаться попарно. При выполнении <xref:System.Drawing.Graphics.GetHdc%2A> и <xref:System.Drawing.Graphics.ReleaseHdc%2A> пары методов, обычно производятся вызовы только к [!INCLUDE[ndptecgdi](~/includes/ndptecgdi-md.md)] функции. Вызовы, адресованные области [!INCLUDE[ndptecgdiplus](~/includes/ndptecgdiplus-md.md)] методы <xref:System.Drawing.Graphics> , создавший `hdc` завершаться параметр `ObjectBusy` ошибки. Кроме того [!INCLUDE[ndptecgdiplus](~/includes/ndptecgdiplus-md.md)] игнорирует любые изменения состояния для <xref:System.Drawing.Graphics> из `hdc` параметр в последующих операциях.  
  
   
  
## Examples  
 Следующий пример кода предназначен для работы с Windows Forms, и для него необходим <xref:System.Windows.Forms.PaintEventArgs> `e`, который является параметром <xref:System.Windows.Forms.Control.Paint> обработчика событий. В примере демонстрируется вызов Windows [!INCLUDE[ndptecgdi](~/includes/ndptecgdi-md.md)] функцию для выполнения той же задачи [!INCLUDE[ndptecgdiplus](~/includes/ndptecgdiplus-md.md)] <xref:System.Drawing.Graphics> метод. Код выполняет следующие действия.  
  
-   Определяет взаимодействие <xref:System.Runtime.InteropServices.DllImportAttribute> атрибут для gdi32.dll файл библиотеки DLL Windows. Эта библиотека DLL содержит нужный [!INCLUDE[ndptecgdi](~/includes/ndptecgdi-md.md)] функции и определяет <xref:System.Drawing.Rectangle> функции в этой библиотеке DLL в качестве внешней.  
  
-   Создает красное перо.  
  
-   С помощью пера рисует прямоугольник на экран с помощью [!INCLUDE[ndptecgdiplus](~/includes/ndptecgdiplus-md.md)] <xref:System.Drawing.Graphics.DrawRectangle%2A> метод.  
  
-   Определяет переменную типа внутреннего указателя `hdc` и присваивает ей значение дескриптора контекста устройства формы.  
  
-   Рисует прямоугольник на экран с помощью [!INCLUDE[ndptecgdi](~/includes/ndptecgdi-md.md)] <xref:System.Drawing.Rectangle> функции.  
  
-   Освобождает контекст устройства, представленный `hdc` параметра.  
  
 [!code-cpp[System.Drawing.ClassicGraphicsExamples3#145](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples3/CPP/form1.cpp#145)]
 [!code-csharp[System.Drawing.ClassicGraphicsExamples3#145](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples3/CS/form1.cs#145)]
 [!code-vb[System.Drawing.ClassicGraphicsExamples3#145](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples3/VB/form1.vb#145)]  
  
 ]]></format>
        </remarks>
        <permission cref="T:System.Security.Permissions.SecurityPermission">для доступа к неуправляемому коду. Связанные перечисления: <see cref="F:System.Security.Permissions.SecurityPermissionFlag.UnmanagedCode" />.</permission>
      </Docs>
    </Member>
    <Member MemberName="ReleaseHdcInternal">
      <MemberSignature Language="C#" Value="public void ReleaseHdcInternal (IntPtr hdc);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void ReleaseHdcInternal(native int hdc) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.ReleaseHdcInternal(System.IntPtr)" />
      <MemberSignature Language="VB.NET" Value="Public Sub ReleaseHdcInternal (hdc As IntPtr)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void ReleaseHdcInternal(IntPtr hdc);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="hdc" Type="System.IntPtr" />
      </Parameters>
      <Docs>
        <param name="hdc">Дескриптор контекста устройства.</param>
        <summary>Освобождает дескриптор контекста устройства.</summary>
        <remarks>To be added.</remarks>
        <permission cref="T:System.Security.Permissions.SecurityPermission">для доступа к неуправляемому коду. Связанные перечисления: <see cref="F:System.Security.Permissions.SecurityPermissionFlag.UnmanagedCode" />.</permission>
      </Docs>
    </Member>
    <Member MemberName="RenderingOrigin">
      <MemberSignature Language="C#" Value="public System.Drawing.Point RenderingOrigin { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Drawing.Point RenderingOrigin" />
      <MemberSignature Language="DocId" Value="P:System.Drawing.Graphics.RenderingOrigin" />
      <MemberSignature Language="VB.NET" Value="Public Property RenderingOrigin As Point" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Drawing::Point RenderingOrigin { System::Drawing::Point get(); void set(System::Drawing::Point value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Drawing.Point</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Возвращает или задает начало координат при отрисовке данного объекта <see cref="T:System.Drawing.Graphics" /> для сглаживания и для кистей штриховки.</summary>
        <value>Структура <see cref="T:System.Drawing.Point" />, которая представляет начало координат для сглаживания с параметром 8 бит на пиксель и 16 бит на пиксель, а также используется для настройки начала координат кистей штриховки.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ResetClip">
      <MemberSignature Language="C#" Value="public void ResetClip ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void ResetClip() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.ResetClip" />
      <MemberSignature Language="VB.NET" Value="Public Sub ResetClip ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void ResetClip();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Сбрасывает отсеченную область данного объекта <see cref="T:System.Drawing.Graphics" /> и делает ее бесконечной.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Когда вырезанной <xref:System.Drawing.Graphics> является бесконечной, элементы, которые <xref:System.Drawing.Graphics> , не вырезаются.  
  
   
  
## Examples  
 Следующий пример кода предназначен для работы с Windows Forms, и для него необходим <xref:System.Windows.Forms.PaintEventArgs> `e`, который является параметром <xref:System.Windows.Forms.Control.Paint> обработчика событий. Код выполняет следующие действия.  
  
-   Создает прямоугольник с левого верхнего угла на (0, 0) и задает отсеченную область для этого прямоугольника.  
  
-   Создает второй прямоугольник с левого верхнего угла в (100, 100) и задает отсеченную область пересечение этого прямоугольника и текущей вырезанной области (первого прямоугольника).  
  
-   Заполняет большой прямоугольник, включающий оба предыдущих прямоугольника со сплошной кисти синего цвета.  
  
-   Сбрасывает отсеченную область значение бесконечности.  
  
-   Рисует прямоугольники вокруг области отсечения двух; используется черный перо для первого отсекающего прямоугольника и красное перо для второй области обрезки.  
  
 Результатом является то, что синим цветом заполняется только пересечение двух прямоугольников.  
  
 [!code-cpp[System.Drawing.ClassicGraphicsExamples3#146](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples3/CPP/form1.cpp#146)]
 [!code-csharp[System.Drawing.ClassicGraphicsExamples3#146](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples3/CS/form1.cs#146)]
 [!code-vb[System.Drawing.ClassicGraphicsExamples3#146](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples3/VB/form1.vb#146)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ResetTransform">
      <MemberSignature Language="C#" Value="public void ResetTransform ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void ResetTransform() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.ResetTransform" />
      <MemberSignature Language="VB.NET" Value="Public Sub ResetTransform ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void ResetTransform();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Сбрасывает матрицу мирового преобразования данного объекта <see cref="T:System.Drawing.Graphics" /> и делает ее единичной матрицей.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Единичная матрица представляет преобразование, без масштабирования, поворота или трансляции. Сброс мировое преобразование данного объекта <xref:System.Drawing.Graphics> единичной матрицей означает, что его мировое преобразование не приводит к изменению геометрию преобразованных элементов.  
  
   
  
## Examples  
 Следующий пример кода предназначен для работы с Windows Forms, и для него необходим <xref:System.Windows.Forms.PaintEventArgs> `e`, который является параметром <xref:System.Windows.Forms.Control.Paint> обработчика событий. Код выполняет следующие действия.  
  
-   Преобразует универсальное преобразование формы Windows Forms с помощью вектора (100, 0).  
  
-   Сохраняет состояние графики формы.  
  
-   Сбрасывает универсальное преобразование формы с удостоверением и заполняет прямоугольник с сплошной кисти красного цвета.  
  
-   Восстанавливает преобразованное графическое состояние и заполняет прямоугольник с синей сплошной кисти.  
  
 Результатом является непреобразованный прямоугольник с красной заливкой и переведенный прямоугольник с синей заливкой.  
  
 [!code-cpp[System.Drawing.ClassicGraphicsExamples3#147](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples3/CPP/form1.cpp#147)]
 [!code-csharp[System.Drawing.ClassicGraphicsExamples3#147](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples3/CS/form1.cs#147)]
 [!code-vb[System.Drawing.ClassicGraphicsExamples3#147](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples3/VB/form1.vb#147)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Restore">
      <MemberSignature Language="C#" Value="public void Restore (System.Drawing.Drawing2D.GraphicsState gstate);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Restore(class System.Drawing.Drawing2D.GraphicsState gstate) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.Restore(System.Drawing.Drawing2D.GraphicsState)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Restore (gstate As GraphicsState)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Restore(System::Drawing::Drawing2D::GraphicsState ^ gstate);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="gstate" Type="System.Drawing.Drawing2D.GraphicsState" />
      </Parameters>
      <Docs>
        <param name="gstate">
          Объект <see cref="T:System.Drawing.Drawing2D.GraphicsState" />, представляющий состояние, в которое должен восстанавливаться данный объект <see cref="T:System.Drawing.Graphics" />.</param>
        <summary>Восстанавливает состояние данного объекта <see cref="T:System.Drawing.Graphics" /> в состояние, представленное объектом <see cref="T:System.Drawing.Drawing2D.GraphicsState" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 При вызове <xref:System.Drawing.Graphics.Save%2A> метод <xref:System.Drawing.Graphics>, информационный блок, содержащий состояние объекта <xref:System.Drawing.Graphics> помещается в стек. <xref:System.Drawing.Graphics.Save%2A> Возвращает метод <xref:System.Drawing.Drawing2D.GraphicsState> , идентифицирующий этот блок сведений. При передаче определяющего <xref:System.Drawing.Drawing2D.GraphicsState> для <xref:System.Drawing.Graphics.Restore%2A> метод, блок данных удаляется из стека и используется для восстановления <xref:System.Drawing.Graphics> в состояние на момент <xref:System.Drawing.Graphics.Save%2A> вызова метода. Обратите внимание, что <xref:System.Drawing.Drawing2D.GraphicsState> возвращенный данного вызова <xref:System.Drawing.Graphics.Save%2A> метод может быть передан только один раз `Restore` метод.  
  
 Вызовы <xref:System.Drawing.Graphics.Save%2A> метода могут быть вложенными; то есть, можно вызвать <xref:System.Drawing.Graphics.Save%2A> метода несколько раз перед вызовом метода <xref:System.Drawing.Graphics.Restore%2A> метод. Каждый раз при вызове <xref:System.Drawing.Graphics.Save%2A> , метод информационный блок помещается в стек, и вы получаете <xref:System.Drawing.Drawing2D.GraphicsState> для блока сведений. При передаче одного из этих объектов <xref:System.Drawing.Graphics.Restore%2A> метода <xref:System.Drawing.Graphics> возвращается в состояние на момент <xref:System.Drawing.Graphics.Save%2A> вызов метода, который возвращен данный <xref:System.Drawing.Drawing2D.GraphicsState>. Блок данных помещается в стек, который <xref:System.Drawing.Graphics.Save%2A> вызова метода удаляется из стека, а все информационные блоки, помещенные в стек после <xref:System.Drawing.Graphics.Save%2A> вызов метода также удаляются.  
  
 Вызовы <xref:System.Drawing.Graphics.BeginContainer%2A> метод информационные блоки помещаются в тот же стек, что и при вызове <xref:System.Drawing.Graphics.Save%2A> метода. Так же, как <xref:System.Drawing.Graphics.Restore%2A> объединяется с <xref:System.Drawing.Graphics.Save%2A> вызвать, <xref:System.Drawing.Graphics.EndContainer%2A> вызова метода объединяется с <xref:System.Drawing.Graphics.BeginContainer%2A> вызова метода.  
  
 При вызове <xref:System.Drawing.Graphics.Restore%2A> метод, все блоки сведения помещаются в стек (по <xref:System.Drawing.Graphics.Save%2A> метода или с помощью <xref:System.Drawing.Graphics.BeginContainer%2A> метод) после соответствующего вызова <xref:System.Drawing.Graphics.Save%2A> метод удаляются из стека. Аналогично, при вызове <xref:System.Drawing.Graphics.EndContainer%2A> метод, все блоки сведения помещаются в стек (по <xref:System.Drawing.Graphics.Save%2A> метод или <xref:System.Drawing.Graphics.BeginContainer%2A> метод) после соответствующего вызова <xref:System.Drawing.Graphics.BeginContainer%2A> метод удаляются из стека.  
  
   
  
## Examples  
 Следующий пример кода предназначен для работы с Windows Forms, и для него необходим <xref:System.Windows.Forms.PaintEventArgs> `e`, который является параметром <xref:System.Windows.Forms.Control.Paint> обработчика событий. Код выполняет следующие действия.  
  
-   Преобразует универсальное преобразование формы Windows Forms с помощью вектора (100, 0).  
  
-   Сохраняет состояние графики формы.  
  
-   Сбрасывает универсальное преобразование формы с удостоверением и заполняет прямоугольник с сплошной кисти красного цвета.  
  
-   Восстанавливает преобразованное графическое состояние и заполняет второй прямоугольник с сплошной кисти синего цвета.  
  
 Результатом является непреобразованный прямоугольник с красной заливкой и переведенный прямоугольник с синей заливкой.  
  
 [!code-cpp[System.Drawing.ClassicGraphicsExamples3#148](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples3/CPP/form1.cpp#148)]
 [!code-csharp[System.Drawing.ClassicGraphicsExamples3#148](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples3/CS/form1.cs#148)]
 [!code-vb[System.Drawing.ClassicGraphicsExamples3#148](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples3/VB/form1.vb#148)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="RotateTransform">
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Применяет заданный поворот к матрице преобразования данного объекта <see cref="T:System.Drawing.Graphics" />.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="RotateTransform">
      <MemberSignature Language="C#" Value="public void RotateTransform (float angle);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void RotateTransform(float32 angle) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.RotateTransform(System.Single)" />
      <MemberSignature Language="VB.NET" Value="Public Sub RotateTransform (angle As Single)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void RotateTransform(float angle);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="angle" Type="System.Single" />
      </Parameters>
      <Docs>
        <param name="angle">Угол поворота в градусах.</param>
        <summary>Применяет заданный поворот к матрице преобразования данного объекта <see cref="T:System.Drawing.Graphics" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Операция поворота заключается в умножении матрицы преобразования на матрицу, элементы которого являются производными от `angle` параметра. Этот метод применяет поворот путем ее добавления перед матрицей преобразования.  
  
   
  
## Examples  
 Следующий пример кода предназначен для работы с Windows Forms, и для него необходим <xref:System.Windows.Forms.PaintEventArgs> `e`, который является параметром <xref:System.Windows.Forms.Control.Paint> обработчика событий. Код выполняет следующие действия.  
  
-   Сдвигает универсальное преобразование формы Windows Forms на вектор (100, 0).  
  
-   Поворачивает мировое преобразование с углом 30 градусов, добавляя к матрице преобразования world матрица поворота.  
  
-   Рисует повернутый, преобразованный эллипс с помощью синего пера.  
  
 [!code-cpp[System.Drawing.ClassicGraphicsExamples3#149](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples3/CPP/form1.cpp#149)]
 [!code-csharp[System.Drawing.ClassicGraphicsExamples3#149](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples3/CS/form1.cs#149)]
 [!code-vb[System.Drawing.ClassicGraphicsExamples3#149](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples3/VB/form1.vb#149)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="RotateTransform">
      <MemberSignature Language="C#" Value="public void RotateTransform (float angle, System.Drawing.Drawing2D.MatrixOrder order);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void RotateTransform(float32 angle, valuetype System.Drawing.Drawing2D.MatrixOrder order) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.RotateTransform(System.Single,System.Drawing.Drawing2D.MatrixOrder)" />
      <MemberSignature Language="VB.NET" Value="Public Sub RotateTransform (angle As Single, order As MatrixOrder)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void RotateTransform(float angle, System::Drawing::Drawing2D::MatrixOrder order);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="angle" Type="System.Single" />
        <Parameter Name="order" Type="System.Drawing.Drawing2D.MatrixOrder" />
      </Parameters>
      <Docs>
        <param name="angle">Угол поворота в градусах.</param>
        <param name="order">Элемент перечисления <see cref="T:System.Drawing.Drawing2D.MatrixOrder" />, который указывает, добавляется ли поворот к началу или к концу матричного преобразования.</param>
        <summary>Применяет заданный поворот к матрице преобразования данного объекта <see cref="T:System.Drawing.Graphics" /> в указанном порядке.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Операция поворота заключается в умножении матрицы преобразования на матрицу, элементы которого являются производными от `angle` параметра. Этот метод добавляет или добавляет к матрице преобразования объекта <xref:System.Drawing.Graphics> матрицу вращения в соответствии с `order` параметра.  
  
   
  
## Examples  
 Следующий пример кода предназначен для работы с Windows Forms, и для него необходим <xref:System.Windows.Forms.PaintEventArgs> `e`, который является параметром <xref:System.Windows.Forms.Control.Paint> обработчика событий. Код выполняет следующие действия.  
  
-   Сдвигает универсальное преобразование формы Windows Forms на вектор (100, 0).  
  
-   Поворачивает универсального преобразования углом 30 градусов, добавляя матрицу поворота на матрицу мирового преобразования с <xref:System.Drawing.Drawing2D.MatrixOrder.Append>.  
  
-   Рисует преобразованный, повернутый эллипс с помощью синего пера.  
  
 [!code-cpp[System.Drawing.ClassicGraphicsExamples3#150](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples3/CPP/form1.cpp#150)]
 [!code-csharp[System.Drawing.ClassicGraphicsExamples3#150](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples3/CS/form1.cs#150)]
 [!code-vb[System.Drawing.ClassicGraphicsExamples3#150](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples3/VB/form1.vb#150)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Save">
      <MemberSignature Language="C#" Value="public System.Drawing.Drawing2D.GraphicsState Save ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Drawing.Drawing2D.GraphicsState Save() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.Save" />
      <MemberSignature Language="VB.NET" Value="Public Function Save () As GraphicsState" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Drawing::Drawing2D::GraphicsState ^ Save();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Drawing.Drawing2D.GraphicsState</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Сохраняет текущее состояние данного объекта <see cref="T:System.Drawing.Graphics" /> и связывает сохраненное состояние с объектом <see cref="T:System.Drawing.Drawing2D.GraphicsState" />.</summary>
        <returns>Этот метод возвращает объект <see cref="T:System.Drawing.Drawing2D.GraphicsState" />, который представляет сохраненное состояние данного объекта <see cref="T:System.Drawing.Graphics" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 При вызове <xref:System.Drawing.Graphics.Save%2A> метод <xref:System.Drawing.Graphics>, информационный блок, содержащий состояние объекта <xref:System.Drawing.Graphics> помещается в стек. <xref:System.Drawing.Graphics.Save%2A> Возвращает метод <xref:System.Drawing.Drawing2D.GraphicsState> , идентифицирующий этот блок сведений. При передаче определяющего <xref:System.Drawing.Drawing2D.GraphicsState> для <xref:System.Drawing.Graphics.Restore%2A> метод, блок данных удаляется из стека и используется для восстановления <xref:System.Drawing.Graphics> в состояние на момент <xref:System.Drawing.Graphics.Save%2A> вызова метода. Обратите внимание, что <xref:System.Drawing.Drawing2D.GraphicsState> возвращенный данного вызова <xref:System.Drawing.Graphics.Save%2A> метод может быть передан только один раз <xref:System.Drawing.Graphics.Restore%2A> метод.  
  
 Вызовы <xref:System.Drawing.Graphics.Save%2A> метода могут быть вложенными; то есть, можно вызвать <xref:System.Drawing.Graphics.Save%2A> метода несколько раз перед вызовом метода <xref:System.Drawing.Graphics.Restore%2A> метод. Каждый раз при вызове <xref:System.Drawing.Graphics.Save%2A> , метод информационный блок помещается в стек, и вы получаете <xref:System.Drawing.Drawing2D.GraphicsState> для блока сведений. При передаче одного из этих объектов <xref:System.Drawing.Graphics.Restore%2A> метода <xref:System.Drawing.Graphics> возвращается в состояние на момент <xref:System.Drawing.Graphics.Save%2A> вызов метода, который возвращен данный <xref:System.Drawing.Drawing2D.GraphicsState>. Блок данных помещается в стек, который <xref:System.Drawing.Graphics.Save%2A> вызова метода удаляется из стека, а все информационные блоки, помещенные в стек после <xref:System.Drawing.Graphics.Save%2A> вызов метода также удаляются.  
  
 Вызовы <xref:System.Drawing.Graphics.BeginContainer%2A> метод информационные блоки помещаются в тот же стек, что и при вызове <xref:System.Drawing.Graphics.Save%2A> метода. Так же, как <xref:System.Drawing.Graphics.Restore%2A> объединяется с <xref:System.Drawing.Graphics.Save%2A> вызвать, <xref:System.Drawing.Graphics.EndContainer%2A> вызова метода объединяется с <xref:System.Drawing.Graphics.BeginContainer%2A> вызова метода.  
  
 При вызове <xref:System.Drawing.Graphics.Restore%2A> метод, все блоки сведения помещаются в стек (по <xref:System.Drawing.Graphics.Save%2A> метода или с помощью <xref:System.Drawing.Graphics.BeginContainer%2A> метод) после соответствующего вызова <xref:System.Drawing.Graphics.Save%2A> метод удаляются из стека. Аналогично, при вызове <xref:System.Drawing.Graphics.EndContainer%2A> метод, все блоки сведения помещаются в стек (по <xref:System.Drawing.Graphics.Save%2A> метод или <xref:System.Drawing.Graphics.BeginContainer%2A> метод) после соответствующего вызова <xref:System.Drawing.Graphics.BeginContainer%2A> метод удаляются из стека.  
  
   
  
## Examples  
 Следующий пример кода предназначен для работы с Windows Forms, и для него необходим <xref:System.Windows.Forms.PaintEventArgs> `e`, который является параметром <xref:System.Windows.Forms.Control.Paint> обработчика событий. Код выполняет следующие действия.  
  
-   Преобразует универсальное преобразование формы Windows Forms с помощью вектора (100, 0).  
  
-   Сохраняет состояние графики формы.  
  
-   Сбрасывает универсальное преобразование формы единичным (единичная матрица 2 x 2 плюс нулевой вектор смещения) и заполняет прямоугольник с сплошной кисти красного цвета.  
  
-   Восстанавливает преобразованное графическое состояние и заполняет прямоугольник с синей сплошной кисти.  
  
 Результатом является непреобразованный прямоугольник с красной заливкой слева и переведенный прямоугольник синей заливкой справа от формы.  
  
 [!code-cpp[System.Drawing.ClassicGraphicsExamples3#151](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples3/CPP/form1.cpp#151)]
 [!code-csharp[System.Drawing.ClassicGraphicsExamples3#151](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples3/CS/form1.cs#151)]
 [!code-vb[System.Drawing.ClassicGraphicsExamples3#151](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples3/VB/form1.vb#151)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="ScaleTransform">
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Применяет заданную операцию масштабирования к матрице преобразования данного объекта <see cref="T:System.Drawing.Graphics" /> путем ее добавления перед матрицей преобразования объекта.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="ScaleTransform">
      <MemberSignature Language="C#" Value="public void ScaleTransform (float sx, float sy);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void ScaleTransform(float32 sx, float32 sy) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.ScaleTransform(System.Single,System.Single)" />
      <MemberSignature Language="VB.NET" Value="Public Sub ScaleTransform (sx As Single, sy As Single)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void ScaleTransform(float sx, float sy);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="sx" Type="System.Single" />
        <Parameter Name="sy" Type="System.Single" />
      </Parameters>
      <Docs>
        <param name="sx">Коэффициент масштабирования по оси X.</param>
        <param name="sy">Коэффициент масштабирования по оси Y.</param>
        <summary>Применяет заданную операцию масштабирования к матрице преобразования данного объекта <see cref="T:System.Drawing.Graphics" /> путем ее добавления перед матрицей преобразования объекта.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Операция масштабирования заключается в умножении матрицы преобразования, элементы которого являются диагональным матрицы (`sx`, `sy`, 1). Этот метод добавляет матрицу преобразования <xref:System.Drawing.Graphics> матрица масштабирования.  
  
   
  
## Examples  
 Следующий пример кода предназначен для работы с Windows Forms, и для него необходим <xref:System.Windows.Forms.PaintEventArgs> `e`, который является параметром <xref:System.Windows.Forms.Control.Paint> обработчика событий. Код выполняет следующие действия.  
  
-   Поворачивает матрицу мирового преобразования формы Windows Forms на 30 градусов.  
  
-   Масштабирует данную матрицу с коэффициентом 3 по оси x и коэффициентом 1 по оси y, добавляя преобразование масштабирования.  
  
-   Рисует прямоугольник масштабированный, повернутый с помощью синего пера.  
  
 Результат по-прежнему прямоугольник.  
  
 [!code-cpp[System.Drawing.ClassicGraphicsExamples3#152](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples3/CPP/form1.cpp#152)]
 [!code-csharp[System.Drawing.ClassicGraphicsExamples3#152](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples3/CS/form1.cs#152)]
 [!code-vb[System.Drawing.ClassicGraphicsExamples3#152](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples3/VB/form1.vb#152)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ScaleTransform">
      <MemberSignature Language="C#" Value="public void ScaleTransform (float sx, float sy, System.Drawing.Drawing2D.MatrixOrder order);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void ScaleTransform(float32 sx, float32 sy, valuetype System.Drawing.Drawing2D.MatrixOrder order) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.ScaleTransform(System.Single,System.Single,System.Drawing.Drawing2D.MatrixOrder)" />
      <MemberSignature Language="VB.NET" Value="Public Sub ScaleTransform (sx As Single, sy As Single, order As MatrixOrder)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void ScaleTransform(float sx, float sy, System::Drawing::Drawing2D::MatrixOrder order);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="sx" Type="System.Single" />
        <Parameter Name="sy" Type="System.Single" />
        <Parameter Name="order" Type="System.Drawing.Drawing2D.MatrixOrder" />
      </Parameters>
      <Docs>
        <param name="sx">Коэффициент масштабирования по оси X.</param>
        <param name="sy">Коэффициент масштабирования по оси Y.</param>
        <param name="order">Элемент перечисления <see cref="T:System.Drawing.Drawing2D.MatrixOrder" />, указывающий порядок добавления операции масштабирования: перед матрицей преобразования или после нее.</param>
        <summary>Применяет заданную операцию масштабирования к матрице преобразования данного объекта <see cref="T:System.Drawing.Graphics" /> в указанном порядке.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Операция масштабирования заключается в умножении матрицы преобразования, элементы которого являются диагональным матрицы (`sx`, `sy`, 1). Этот метод добавляет или добавляет к матрице преобразования объекта <xref:System.Drawing.Graphics> матрица масштабирования согласно `order` параметра.  
  
   
  
## Examples  
 Следующий пример кода предназначен для работы с Windows Forms, и для него необходим <xref:System.Windows.Forms.PaintEventArgs> `e`, который является параметром <xref:System.Windows.Forms.Control.Paint> обработчика событий. Код выполняет следующие действия.  
  
-   Поворачивает матрицу мирового преобразования формы Windows Forms на 30 градусов.  
  
-   Масштабирует данную матрицу с коэффициентом 3 по оси x и коэффициентом 1 по оси y, добавляя соответствующие преобразования масштабирования с <xref:System.Drawing.Drawing2D.MatrixOrder.Append> член.  
  
-   Рисует прямоугольник повернутый, масштабированные с помощью синего пера.  
  
 Результатом является параллелограмм.  
  
 [!code-cpp[System.Drawing.ClassicGraphicsExamples3#153](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples3/CPP/form1.cpp#153)]
 [!code-csharp[System.Drawing.ClassicGraphicsExamples3#153](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples3/CS/form1.cs#153)]
 [!code-vb[System.Drawing.ClassicGraphicsExamples3#153](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples3/VB/form1.vb#153)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="SetClip">
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Задает в качестве отсеченной области данного объекта <see cref="T:System.Drawing.Graphics" /> значение свойства <see langword="Clip" /> указанного объекта <see cref="T:System.Drawing.Graphics" />.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="SetClip">
      <MemberSignature Language="C#" Value="public void SetClip (System.Drawing.Drawing2D.GraphicsPath path);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void SetClip(class System.Drawing.Drawing2D.GraphicsPath path) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.SetClip(System.Drawing.Drawing2D.GraphicsPath)" />
      <MemberSignature Language="VB.NET" Value="Public Sub SetClip (path As GraphicsPath)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void SetClip(System::Drawing::Drawing2D::GraphicsPath ^ path);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="path" Type="System.Drawing.Drawing2D.GraphicsPath" />
      </Parameters>
      <Docs>
        <param name="path">
          Объект <see cref="T:System.Drawing.Drawing2D.GraphicsPath" />, содержащий новую вырезанную область.</param>
        <summary>Задает в качестве отсеченной области данного объекта <see cref="T:System.Drawing.Graphics" /> указанный объект <see cref="T:System.Drawing.Drawing2D.GraphicsPath" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Если графический контур, представленный `path` параметра не закрыта, дополнительный сегмент добавляется между последней точки замкнуть контур.  
  
   
  
## Examples  
 Следующий пример кода предназначен для работы с Windows Forms, и для него необходим <xref:System.Windows.Forms.PaintEventArgs> `e`, который является параметром <xref:System.Windows.Forms.Control.Paint> обработчика событий. Код выполняет следующие действия.  
  
-   Создает графический контур и добавляет к нему эллипс.  
  
-   Задает область усечения контур в форме эллипса.  
  
-   Заполняет большой прямоугольник сплошную кисть черного цвета.  
  
 Результатом является заливкой, черный эллипс.  
  
 [!code-cpp[System.Drawing.ClassicGraphicsExamples3#154](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples3/CPP/form1.cpp#154)]
 [!code-csharp[System.Drawing.ClassicGraphicsExamples3#154](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples3/CS/form1.cs#154)]
 [!code-vb[System.Drawing.ClassicGraphicsExamples3#154](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples3/VB/form1.vb#154)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="SetClip">
      <MemberSignature Language="C#" Value="public void SetClip (System.Drawing.Graphics g);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void SetClip(class System.Drawing.Graphics g) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.SetClip(System.Drawing.Graphics)" />
      <MemberSignature Language="VB.NET" Value="Public Sub SetClip (g As Graphics)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void SetClip(System::Drawing::Graphics ^ g);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="g" Type="System.Drawing.Graphics" />
      </Parameters>
      <Docs>
        <param name="g">
          Объект <see cref="T:System.Drawing.Graphics" />, из которого извлекается новая отсеченная область.</param>
        <summary>Задает в качестве отсеченной области данного объекта <see cref="T:System.Drawing.Graphics" /> значение свойства <see langword="Clip" /> указанного объекта <see cref="T:System.Drawing.Graphics" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 Следующий пример кода предназначен для работы с Windows Forms, и для него необходим <xref:System.Windows.Forms.PaintEventArgs> `e`, которого является параметром <xref:System.Windows.Forms.Control.Paint> обработчика событий, а также `thisForm`, <xref:System.Windows.Forms.Form> для примера. Код выполняет следующие действия.  
  
-   Создает временный <xref:System.Drawing.Graphics> из `thisForm` <xref:System.Windows.Forms.Form> примера.  
  
-   Задает отсеченную область временного <xref:System.Drawing.Graphics> небольшой квадрат.  
  
-   Обновляет отсеченную область графического объекта формы, временные <xref:System.Drawing.Graphics>.  
  
-   Заполняет большой прямоугольник сплошную кисть черного цвета.  
  
 Результатом является небольшой черный квадрат заливкой.  
  
 [!code-cpp[System.Drawing.ClassicGraphicsExamples3#156](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples3/CPP/form1.cpp#156)]
 [!code-csharp[System.Drawing.ClassicGraphicsExamples3#156](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples3/CS/form1.cs#156)]
 [!code-vb[System.Drawing.ClassicGraphicsExamples3#156](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples3/VB/form1.vb#156)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="SetClip">
      <MemberSignature Language="C#" Value="public void SetClip (System.Drawing.Rectangle rect);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void SetClip(valuetype System.Drawing.Rectangle rect) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.SetClip(System.Drawing.Rectangle)" />
      <MemberSignature Language="VB.NET" Value="Public Sub SetClip (rect As Rectangle)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void SetClip(System::Drawing::Rectangle rect);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="rect" Type="System.Drawing.Rectangle" />
      </Parameters>
      <Docs>
        <param name="rect">
          Структура <see cref="T:System.Drawing.Rectangle" />, представляющая новую отсеченную область.</param>
        <summary>Задает в качестве отсеченной области данного объекта <see cref="T:System.Drawing.Graphics" /> прямоугольник, задаваемый структурой <see cref="T:System.Drawing.Rectangle" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 Следующий пример кода предназначен для работы с Windows Forms, и для него необходим <xref:System.Windows.Forms.PaintEventArgs> `e`, который является параметром <xref:System.Windows.Forms.Control.Paint> обработчика событий. Код выполняет следующие действия.  
  
-   Создает маленький прямоугольник для отсеченной области.  
  
-   Задает область усечения в прямоугольник.  
  
-   Заполняет большой прямоугольник сплошную кисть черного цвета.  
  
 Результатом является небольшой черный прямоугольник заливкой.  
  
 [!code-cpp[System.Drawing.ClassicGraphicsExamples3#158](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples3/CPP/form1.cpp#158)]
 [!code-csharp[System.Drawing.ClassicGraphicsExamples3#158](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples3/CS/form1.cs#158)]
 [!code-vb[System.Drawing.ClassicGraphicsExamples3#158](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples3/VB/form1.vb#158)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="SetClip">
      <MemberSignature Language="C#" Value="public void SetClip (System.Drawing.RectangleF rect);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void SetClip(valuetype System.Drawing.RectangleF rect) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.SetClip(System.Drawing.RectangleF)" />
      <MemberSignature Language="VB.NET" Value="Public Sub SetClip (rect As RectangleF)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void SetClip(System::Drawing::RectangleF rect);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="rect" Type="System.Drawing.RectangleF" />
      </Parameters>
      <Docs>
        <param name="rect">
          Структура <see cref="T:System.Drawing.RectangleF" />, представляющая новую отсеченную область.</param>
        <summary>Задает в качестве отсеченной области данного объекта <see cref="T:System.Drawing.Graphics" /> прямоугольник, задаваемый структурой <see cref="T:System.Drawing.RectangleF" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 Следующий пример кода предназначен для работы с Windows Forms, и для него необходим <xref:System.Windows.Forms.PaintEventArgs> `e`, который является параметром <xref:System.Windows.Forms.Control.Paint> обработчика событий. Код выполняет следующие действия.  
  
-   Создает маленький прямоугольник для отсеченной области.  
  
-   Задает область усечения в прямоугольник.  
  
-   Заполняет большой прямоугольник сплошную кисть черного цвета.  
  
 Результатом является небольшой черный прямоугольник заливкой.  
  
 [!code-cpp[System.Drawing.ClassicGraphicsExamples3#160](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples3/CPP/form1.cpp#160)]
 [!code-csharp[System.Drawing.ClassicGraphicsExamples3#160](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples3/CS/form1.cs#160)]
 [!code-vb[System.Drawing.ClassicGraphicsExamples3#160](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples3/VB/form1.vb#160)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="SetClip">
      <MemberSignature Language="C#" Value="public void SetClip (System.Drawing.Drawing2D.GraphicsPath path, System.Drawing.Drawing2D.CombineMode combineMode);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void SetClip(class System.Drawing.Drawing2D.GraphicsPath path, valuetype System.Drawing.Drawing2D.CombineMode combineMode) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.SetClip(System.Drawing.Drawing2D.GraphicsPath,System.Drawing.Drawing2D.CombineMode)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void SetClip(System::Drawing::Drawing2D::GraphicsPath ^ path, System::Drawing::Drawing2D::CombineMode combineMode);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="path" Type="System.Drawing.Drawing2D.GraphicsPath" />
        <Parameter Name="combineMode" Type="System.Drawing.Drawing2D.CombineMode" />
      </Parameters>
      <Docs>
        <param name="path">
          Область <see cref="T:System.Drawing.Drawing2D.GraphicsPath" /> для объединения.</param>
        <param name="combineMode">Элемент перечисления <see cref="T:System.Drawing.Drawing2D.CombineMode" />, задающий используемую операцию объединения.</param>
        <summary>Задает в качестве отсеченной области данного объекта <see cref="T:System.Drawing.Graphics" /> результат указанной операции объединения текущей отсеченной области и заданной области <see cref="T:System.Drawing.Drawing2D.GraphicsPath" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Если графический контур, представленный `path` параметра не закрыта, дополнительный сегмент добавляется между последней точки замкнуть контур.  
  
   
  
## Examples  
 Следующий пример кода предназначен для работы с Windows Forms, и для него необходим <xref:System.Windows.Forms.PaintEventArgs> `e`, который является параметром <xref:System.Windows.Forms.Control.Paint> обработчика событий. Код выполняет следующие действия.  
  
-   Создает графический контур и добавляет к нему эллипс.  
  
-   Задает область усечения контур в форме эллипса с <xref:System.Drawing.Drawing2D.CombineMode.Replace> член.  
  
-   Заполняет большой прямоугольник сплошную кисть черного цвета.  
  
 Результатом является заливкой, черный эллипс.  
  
 [!code-cpp[System.Drawing.ClassicGraphicsExamples3#155](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples3/CPP/form1.cpp#155)]
 [!code-csharp[System.Drawing.ClassicGraphicsExamples3#155](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples3/CS/form1.cs#155)]
 [!code-vb[System.Drawing.ClassicGraphicsExamples3#155](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples3/VB/form1.vb#155)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="SetClip">
      <MemberSignature Language="C#" Value="public void SetClip (System.Drawing.Graphics g, System.Drawing.Drawing2D.CombineMode combineMode);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void SetClip(class System.Drawing.Graphics g, valuetype System.Drawing.Drawing2D.CombineMode combineMode) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.SetClip(System.Drawing.Graphics,System.Drawing.Drawing2D.CombineMode)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void SetClip(System::Drawing::Graphics ^ g, System::Drawing::Drawing2D::CombineMode combineMode);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="g" Type="System.Drawing.Graphics" />
        <Parameter Name="combineMode" Type="System.Drawing.Drawing2D.CombineMode" />
      </Parameters>
      <Docs>
        <param name="g">
          Объект <see cref="T:System.Drawing.Graphics" />, который задает отсеченную область для объединения.</param>
        <param name="combineMode">Элемент перечисления <see cref="T:System.Drawing.Drawing2D.CombineMode" />, задающий используемую операцию объединения.</param>
        <summary>Задает в качестве отсеченной области данного объекта <see cref="T:System.Drawing.Graphics" /> результат указанной операции объединения текущей отсеченной области и свойства <see cref="P:System.Drawing.Graphics.Clip" /> заданного объекта <see cref="T:System.Drawing.Graphics" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 Следующий пример кода предназначен для работы с Windows Forms, и для него необходим <xref:System.Windows.Forms.PaintEventArgs> `e`, которого является параметром <xref:System.Windows.Forms.Control.Paint> обработчика событий, а также `thisForm`, <xref:System.Windows.Forms.Form> для примера. Код выполняет следующие действия.  
  
-   Создает временный <xref:System.Drawing.Graphics> из `thisForm` <xref:System.Windows.Forms.Form> примера.  
  
-   Задает отсеченную область временного <xref:System.Drawing.Graphics> небольшой квадрат.  
  
-   Обновляет отсеченную область графического объекта формы, нового <xref:System.Drawing.Graphics> с <xref:System.Drawing.Drawing2D.CombineMode.Replace> член.  
  
-   Заполняет большой прямоугольник сплошную кисть черного цвета.  
  
 Результатом является небольшой черный квадрат заливкой.  
  
 [!code-cpp[System.Drawing.ClassicGraphicsExamples3#157](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples3/CPP/form1.cpp#157)]
 [!code-csharp[System.Drawing.ClassicGraphicsExamples3#157](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples3/CS/form1.cs#157)]
 [!code-vb[System.Drawing.ClassicGraphicsExamples3#157](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples3/VB/form1.vb#157)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="SetClip">
      <MemberSignature Language="C#" Value="public void SetClip (System.Drawing.Rectangle rect, System.Drawing.Drawing2D.CombineMode combineMode);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void SetClip(valuetype System.Drawing.Rectangle rect, valuetype System.Drawing.Drawing2D.CombineMode combineMode) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.SetClip(System.Drawing.Rectangle,System.Drawing.Drawing2D.CombineMode)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void SetClip(System::Drawing::Rectangle rect, System::Drawing::Drawing2D::CombineMode combineMode);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="rect" Type="System.Drawing.Rectangle" />
        <Parameter Name="combineMode" Type="System.Drawing.Drawing2D.CombineMode" />
      </Parameters>
      <Docs>
        <param name="rect">
          Структура <see cref="T:System.Drawing.Rectangle" /> для объединения.</param>
        <param name="combineMode">Элемент перечисления <see cref="T:System.Drawing.Drawing2D.CombineMode" />, задающий используемую операцию объединения.</param>
        <summary>Задает в качестве отсеченной области данного объекта <see cref="T:System.Drawing.Graphics" /> результат указанной операции объединения текущей отсеченной области и прямоугольника, задаваемого структурой <see cref="T:System.Drawing.Rectangle" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 Следующий пример кода предназначен для работы с Windows Forms, и для него необходим <xref:System.Windows.Forms.PaintEventArgs> `e`, который является параметром <xref:System.Windows.Forms.Control.Paint> обработчика событий. Код выполняет следующие действия.  
  
-   Создает маленький прямоугольник для отсеченной области.  
  
-   Задает область усечения в прямоугольник с <xref:System.Drawing.Drawing2D.CombineMode.Replace> член.  
  
-   Заполняет большой прямоугольник сплошную кисть черного цвета.  
  
 Результатом является небольшой черный прямоугольник заливкой.  
  
 [!code-cpp[System.Drawing.ClassicGraphicsExamples3#159](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples3/CPP/form1.cpp#159)]
 [!code-csharp[System.Drawing.ClassicGraphicsExamples3#159](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples3/CS/form1.cs#159)]
 [!code-vb[System.Drawing.ClassicGraphicsExamples3#159](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples3/VB/form1.vb#159)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="SetClip">
      <MemberSignature Language="C#" Value="public void SetClip (System.Drawing.RectangleF rect, System.Drawing.Drawing2D.CombineMode combineMode);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void SetClip(valuetype System.Drawing.RectangleF rect, valuetype System.Drawing.Drawing2D.CombineMode combineMode) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.SetClip(System.Drawing.RectangleF,System.Drawing.Drawing2D.CombineMode)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void SetClip(System::Drawing::RectangleF rect, System::Drawing::Drawing2D::CombineMode combineMode);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="rect" Type="System.Drawing.RectangleF" />
        <Parameter Name="combineMode" Type="System.Drawing.Drawing2D.CombineMode" />
      </Parameters>
      <Docs>
        <param name="rect">
          Структура <see cref="T:System.Drawing.RectangleF" /> для объединения.</param>
        <param name="combineMode">Элемент перечисления <see cref="T:System.Drawing.Drawing2D.CombineMode" />, задающий используемую операцию объединения.</param>
        <summary>Задает в качестве отсеченной области данного объекта <see cref="T:System.Drawing.Graphics" /> результат указанной операции объединения текущей отсеченной области и прямоугольника, задаваемого структурой <see cref="T:System.Drawing.RectangleF" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 Следующий пример кода предназначен для работы с Windows Forms, и для него необходим <xref:System.Windows.Forms.PaintEventArgs> `e`, который является параметром <xref:System.Windows.Forms.Control.Paint> обработчика событий. Код выполняет следующие действия.  
  
-   Создает маленький прямоугольник для отсеченной области.  
  
-   Задает область усечения в прямоугольник с <xref:System.Drawing.Drawing2D.CombineMode.Replace> член.  
  
-   Заполняет большой прямоугольник сплошную кисть черного цвета.  
  
 Результатом является небольшой черный прямоугольник заливкой.  
  
 [!code-cpp[System.Drawing.ClassicGraphicsExamples3#161](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples3/CPP/form1.cpp#161)]
 [!code-csharp[System.Drawing.ClassicGraphicsExamples3#161](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples3/CS/form1.cs#161)]
 [!code-vb[System.Drawing.ClassicGraphicsExamples3#161](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples3/VB/form1.vb#161)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="SetClip">
      <MemberSignature Language="C#" Value="public void SetClip (System.Drawing.Region region, System.Drawing.Drawing2D.CombineMode combineMode);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void SetClip(class System.Drawing.Region region, valuetype System.Drawing.Drawing2D.CombineMode combineMode) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.SetClip(System.Drawing.Region,System.Drawing.Drawing2D.CombineMode)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void SetClip(System::Drawing::Region ^ region, System::Drawing::Drawing2D::CombineMode combineMode);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="region" Type="System.Drawing.Region" />
        <Parameter Name="combineMode" Type="System.Drawing.Drawing2D.CombineMode" />
      </Parameters>
      <Docs>
        <param name="region">
          Область <see cref="T:System.Drawing.Region" /> для объединения.</param>
        <param name="combineMode">Элемент из перечисления <see cref="T:System.Drawing.Drawing2D.CombineMode" />, задающий используемую операцию объединения.</param>
        <summary>Задает в качестве отсеченной области данного объекта <see cref="T:System.Drawing.Graphics" /> результат указанной операции объединения текущей отсеченной области и заданной области <see cref="T:System.Drawing.Region" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 Следующий пример кода предназначен для работы с Windows Forms, и для него необходим <xref:System.Windows.Forms.PaintEventArgs> `e`, который является параметром <xref:System.Windows.Forms.Control.Paint> обработчика событий. Код выполняет следующие действия.  
  
-   Создает маленький прямоугольник для отсеченной области.  
  
-   Задает область усечения в прямоугольник с <xref:System.Drawing.Drawing2D.CombineMode.Replace> член.  
  
-   Заполняет большой прямоугольник сплошную кисть черного цвета.  
  
 Результатом является небольшой черный прямоугольник заливкой.  
  
 [!code-cpp[System.Drawing.ClassicGraphicsExamples3#162](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples3/CPP/form1.cpp#162)]
 [!code-csharp[System.Drawing.ClassicGraphicsExamples3#162](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples3/CS/form1.cs#162)]
 [!code-vb[System.Drawing.ClassicGraphicsExamples3#162](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples3/VB/form1.vb#162)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="SmoothingMode">
      <MemberSignature Language="C#" Value="public System.Drawing.Drawing2D.SmoothingMode SmoothingMode { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Drawing.Drawing2D.SmoothingMode SmoothingMode" />
      <MemberSignature Language="DocId" Value="P:System.Drawing.Graphics.SmoothingMode" />
      <MemberSignature Language="VB.NET" Value="Public Property SmoothingMode As SmoothingMode" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Drawing::Drawing2D::SmoothingMode SmoothingMode { System::Drawing::Drawing2D::SmoothingMode get(); void set(System::Drawing::Drawing2D::SmoothingMode value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Drawing.Drawing2D.SmoothingMode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Возвращает или задает качество отрисовки данного объекта <see cref="T:System.Drawing.Graphics" />.</summary>
        <value>Одно из значений перечисления <see cref="T:System.Drawing.Drawing2D.SmoothingMode" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Режим сглаживания указывает линий, кривых и границ заполненных областей использования сглаживания (также называемые сглаживания). Единственным исключением является то, что путь градиентные кисти не работают в режиме сглаживания. Заполнение области <xref:System.Drawing.Drawing2D.PathGradientBrush> подготавливаются к просмотру так же, как (псевдоним), независимо от <xref:System.Drawing.Graphics.SmoothingMode%2A> свойство.  
  
   
  
## Examples  
 Следующий метод демонстрируется действие параметра <xref:System.Drawing.Pen.DashCap%2A>, <xref:System.Drawing.Pen.DashPattern%2A>, и <xref:System.Drawing.Graphics.SmoothingMode%2A> свойства. На следующем рисунке показан результат выполнения примера.  
  
 ![Строки с применением и без применения сглаживания. ] (~/add/media/gdi-smoothingmode.png "Строки с применением и без применения сглаживания.")  
  
 Этот пример предназначен для использования с Windows Forms. Вставьте код в форму и вызовите `ShowPensAndSmoothingMode` метод при обработке формы <xref:System.Windows.Forms.Control.Paint> передачи событий `e` как <xref:System.Windows.Forms.PaintEventArgs>.  
  
 [!code-cpp[System.Drawing.PensExample#3](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.PensExample/CPP/form1.cpp#3)]
 [!code-csharp[System.Drawing.PensExample#3](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.PensExample/CS/form1.cs#3)]
 [!code-vb[System.Drawing.PensExample#3](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.PensExample/VB/form1.vb#3)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="TextContrast">
      <MemberSignature Language="C#" Value="public int TextContrast { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 TextContrast" />
      <MemberSignature Language="DocId" Value="P:System.Drawing.Graphics.TextContrast" />
      <MemberSignature Language="VB.NET" Value="Public Property TextContrast As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property int TextContrast { int get(); void set(int value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Возвращает или задает значение гамма-коррекции для отрисовки текста.</summary>
        <value>Значение гамма-коррекции, используемое для отрисовки сглаженного текста и текста ClearType.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Значение гамма-коррекции должно быть от 0 до 12. Значение по умолчанию — 4.  
  
   
  
## Examples  
 В следующем примере кода показано использование <xref:System.Drawing.Graphics.TextRenderingHint%2A> и <xref:System.Drawing.Graphics.TextContrast%2A> свойства.  
  
 Этот пример предназначен для использования с Windows Forms. Вставьте код в форму и вызовите `ChangeTextRenderingHintAndTextContrast` метод при обработке формы <xref:System.Windows.Forms.Control.Paint> передачи событий `e` как <xref:System.Windows.Forms.PaintEventArgs>.  
  
 [!code-cpp[System.Drawing.GraphicsProperties#5](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.GraphicsProperties/CPP/form1.cpp#5)]
 [!code-csharp[System.Drawing.GraphicsProperties#5](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.GraphicsProperties/CS/form1.cs#5)]
 [!code-vb[System.Drawing.GraphicsProperties#5](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.GraphicsProperties/VB/form1.vb#5)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="TextRenderingHint">
      <MemberSignature Language="C#" Value="public System.Drawing.Text.TextRenderingHint TextRenderingHint { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Drawing.Text.TextRenderingHint TextRenderingHint" />
      <MemberSignature Language="DocId" Value="P:System.Drawing.Graphics.TextRenderingHint" />
      <MemberSignature Language="VB.NET" Value="Public Property TextRenderingHint As TextRenderingHint" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Drawing::Text::TextRenderingHint TextRenderingHint { System::Drawing::Text::TextRenderingHint get(); void set(System::Drawing::Text::TextRenderingHint value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Drawing.Text.TextRenderingHint</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Возвращает или задает режим отрисовки для текста, связанного с данным объектом <see cref="T:System.Drawing.Graphics" />.</summary>
        <value>Одно из значений перечисления <see cref="T:System.Drawing.Text.TextRenderingHint" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Подсказка заполнения текста указывает, используется ли сглаживание при отображении текста.  
  
> [!NOTE]
>  Не следует использовать <xref:System.Drawing.Graphics.CompositingMode%2A> значение свойства <xref:System.Drawing.Drawing2D.CompositingMode.SourceCopy> при <xref:System.Drawing.Graphics.TextRenderingHint%2A> свойству <xref:System.Drawing.Text.TextRenderingHint.ClearTypeGridFit>. Может возникнуть исключение или изображения, могут отображаться некорректно.  
  
   
  
## Examples  
 В следующем примере кода показано использование <xref:System.Drawing.Graphics.TextRenderingHint%2A> и <xref:System.Drawing.Graphics.TextContrast%2A> свойства.  
  
 Этот пример предназначен для использования с Windows Forms. Вставьте код в форму и вызовите `ChangeTextRenderingHintAndTextContrast` метод при обработке формы <xref:System.Windows.Forms.Control.Paint> передачи событий `e` как <xref:System.Windows.Forms.PaintEventArgs>.  
  
 [!code-cpp[System.Drawing.GraphicsProperties#5](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.GraphicsProperties/CPP/form1.cpp#5)]
 [!code-csharp[System.Drawing.GraphicsProperties#5](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.GraphicsProperties/CS/form1.cs#5)]
 [!code-vb[System.Drawing.GraphicsProperties#5](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.GraphicsProperties/VB/form1.vb#5)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Transform">
      <MemberSignature Language="C#" Value="public System.Drawing.Drawing2D.Matrix Transform { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Drawing.Drawing2D.Matrix Transform" />
      <MemberSignature Language="DocId" Value="P:System.Drawing.Graphics.Transform" />
      <MemberSignature Language="VB.NET" Value="Public Property Transform As Matrix" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Drawing::Drawing2D::Matrix ^ Transform { System::Drawing::Drawing2D::Matrix ^ get(); void set(System::Drawing::Drawing2D::Matrix ^ value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Drawing.Drawing2D.Matrix</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Возвращает или задает копию геометрического мирового преобразования для данного объекта <see cref="T:System.Drawing.Graphics" />.</summary>
        <value>Копия матрицы <see cref="T:System.Drawing.Drawing2D.Matrix" />, которая представляет геометрическое мировое преобразование для данного объекта <see cref="T:System.Drawing.Graphics" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 GDI + используется три координатных пространства: мировое, страницы и устройства. Мировых координатах являются координаты, используемые для моделирования определенного графического мира и которые можно передать методу в .NET Framework. Страничные координаты система координат, используемая на поверхности, например формы или элемента управления. Координаты устройства — координат, используемая физического устройства выполняется рисование, таких как экран или принтер. <xref:System.Drawing.Graphics.Transform%2A> Свойство представляет мировое преобразование, которая сопоставляется страничных координат в мировых координатах.  
  
 Матрица возвращена и по <xref:System.Drawing.Graphics.Transform%2A> свойство представляет собой копию геометрического преобразования, следует освободить матрицы, когда он больше не нужен.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="TransformPoints">
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Преобразует массив точек из одной системы координат в другую, используя текущие мировое и страничное преобразования данного объекта <see cref="T:System.Drawing.Graphics" />.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="TransformPoints">
      <MemberSignature Language="C#" Value="public void TransformPoints (System.Drawing.Drawing2D.CoordinateSpace destSpace, System.Drawing.Drawing2D.CoordinateSpace srcSpace, System.Drawing.Point[] pts);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void TransformPoints(valuetype System.Drawing.Drawing2D.CoordinateSpace destSpace, valuetype System.Drawing.Drawing2D.CoordinateSpace srcSpace, valuetype System.Drawing.Point[] pts) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.TransformPoints(System.Drawing.Drawing2D.CoordinateSpace,System.Drawing.Drawing2D.CoordinateSpace,System.Drawing.Point[])" />
      <MemberSignature Language="VB.NET" Value="Public Sub TransformPoints (destSpace As CoordinateSpace, srcSpace As CoordinateSpace, pts As Point())" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void TransformPoints(System::Drawing::Drawing2D::CoordinateSpace destSpace, System::Drawing::Drawing2D::CoordinateSpace srcSpace, cli::array &lt;System::Drawing::Point&gt; ^ pts);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="destSpace" Type="System.Drawing.Drawing2D.CoordinateSpace" />
        <Parameter Name="srcSpace" Type="System.Drawing.Drawing2D.CoordinateSpace" />
        <Parameter Name="pts" Type="System.Drawing.Point[]" />
      </Parameters>
      <Docs>
        <param name="destSpace">Элемент перечисления <see cref="T:System.Drawing.Drawing2D.CoordinateSpace" />, задающий целевую систему координат.</param>
        <param name="srcSpace">Элемент перечисления <see cref="T:System.Drawing.Drawing2D.CoordinateSpace" />, задающий исходную систему координат.</param>
        <param name="pts">Массив структур <see cref="T:System.Drawing.Point" />, которые представляют точки для преобразования.</param>
        <summary>Преобразует массив точек из одной системы координат в другую, используя текущие мировое и страничное преобразования данного объекта <see cref="T:System.Drawing.Graphics" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 Следующий пример кода предназначен для работы с Windows Forms, и для него необходим <xref:System.Windows.Forms.PaintEventArgs> `e`, который является параметром <xref:System.Windows.Forms.Control.Paint> обработчика событий. Код выполняет следующие действия.  
  
-   Создает две точки и отображает синюю линию между ними.  
  
-   Задает универсальное преобразование для сдвига, используя значение 40 по оси x и значение 30 по оси y.  
  
-   Преобразует точки из мировых координатах (<xref:System.Drawing.Drawing2D.CoordinateSpace.World>) в координаты страницы (<xref:System.Drawing.Drawing2D.CoordinateSpace.Page>).  
  
-   Сбрасывает мировое преобразование удостоверения.  
  
-   Рисует красную линию между преобразованными точками.  
  
 Результатом является синюю линию и переведенные красная линия под ней.  
  
 [!code-cpp[System.Drawing.ClassicGraphicsExamples3#163](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples3/CPP/form1.cpp#163)]
 [!code-csharp[System.Drawing.ClassicGraphicsExamples3#163](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples3/CS/form1.cs#163)]
 [!code-vb[System.Drawing.ClassicGraphicsExamples3#163](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples3/VB/form1.vb#163)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="TransformPoints">
      <MemberSignature Language="C#" Value="public void TransformPoints (System.Drawing.Drawing2D.CoordinateSpace destSpace, System.Drawing.Drawing2D.CoordinateSpace srcSpace, System.Drawing.PointF[] pts);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void TransformPoints(valuetype System.Drawing.Drawing2D.CoordinateSpace destSpace, valuetype System.Drawing.Drawing2D.CoordinateSpace srcSpace, valuetype System.Drawing.PointF[] pts) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.TransformPoints(System.Drawing.Drawing2D.CoordinateSpace,System.Drawing.Drawing2D.CoordinateSpace,System.Drawing.PointF[])" />
      <MemberSignature Language="VB.NET" Value="Public Sub TransformPoints (destSpace As CoordinateSpace, srcSpace As CoordinateSpace, pts As PointF())" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void TransformPoints(System::Drawing::Drawing2D::CoordinateSpace destSpace, System::Drawing::Drawing2D::CoordinateSpace srcSpace, cli::array &lt;System::Drawing::PointF&gt; ^ pts);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="destSpace" Type="System.Drawing.Drawing2D.CoordinateSpace" />
        <Parameter Name="srcSpace" Type="System.Drawing.Drawing2D.CoordinateSpace" />
        <Parameter Name="pts" Type="System.Drawing.PointF[]" />
      </Parameters>
      <Docs>
        <param name="destSpace">Элемент перечисления <see cref="T:System.Drawing.Drawing2D.CoordinateSpace" />, задающий целевую систему координат.</param>
        <param name="srcSpace">Элемент перечисления <see cref="T:System.Drawing.Drawing2D.CoordinateSpace" />, задающий исходную систему координат.</param>
        <param name="pts">Массив структур <see cref="T:System.Drawing.PointF" />, которые представляют точки для преобразования.</param>
        <summary>Преобразует массив точек из одной системы координат в другую, используя текущие мировое и страничное преобразования данного объекта <see cref="T:System.Drawing.Graphics" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 Следующий пример кода предназначен для работы с Windows Forms, и для него необходим <xref:System.Windows.Forms.PaintEventArgs> `e`, который является параметром <xref:System.Windows.Forms.Control.Paint> обработчика событий. Код выполняет следующие действия.  
  
-   Создает две точки и отображает синюю линию между ними.  
  
-   Задает универсальное преобразование для сдвига, используя значение 40 по оси x и значение 30 по оси y.  
  
-   Преобразует точки из мировых координатах (<xref:System.Drawing.Drawing2D.CoordinateSpace.World>) в координаты страницы (<xref:System.Drawing.Drawing2D.CoordinateSpace.Page>).  
  
-   Сбрасывает мировое преобразование для удостоверения и рисует линию красного цвета между преобразованными точками.  
  
 Результатом является синюю линию и переведенные красная линия под ней.  
  
 [!code-cpp[System.Drawing.ClassicGraphicsExamples3#164](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples3/CPP/form1.cpp#164)]
 [!code-csharp[System.Drawing.ClassicGraphicsExamples3#164](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples3/CS/form1.cs#164)]
 [!code-vb[System.Drawing.ClassicGraphicsExamples3#164](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples3/VB/form1.vb#164)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="TranslateClip">
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Сдвигает отсеченную область данного объекта <see cref="T:System.Drawing.Graphics" /> на указанные значения в горизонтальном и вертикальном направлениях.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="TranslateClip">
      <MemberSignature Language="C#" Value="public void TranslateClip (int dx, int dy);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void TranslateClip(int32 dx, int32 dy) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.TranslateClip(System.Int32,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Sub TranslateClip (dx As Integer, dy As Integer)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void TranslateClip(int dx, int dy);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="dx" Type="System.Int32" />
        <Parameter Name="dy" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="dx">Координата X сдвига.</param>
        <param name="dy">Координата Y сдвига.</param>
        <summary>Сдвигает отсеченную область данного объекта <see cref="T:System.Drawing.Graphics" /> на указанные значения в горизонтальном и вертикальном направлениях.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 Следующий пример кода предназначен для работы с Windows Forms, и для него необходим <xref:System.Windows.Forms.PaintEventArgs> `e`, который является параметром <xref:System.Windows.Forms.Control.Paint> обработчика событий. Код выполняет следующие действия.  
  
-   Создает прямоугольник для отсеченной области.  
  
-   Задает область усечения в прямоугольник.  
  
-   Сдвигает отсеченную область с помощью вектора (50, 50).  
  
-   Заполняет большой прямоугольник сплошную кисть черного цвета.  
  
 Результат представляет собой небольшой преобразованный, черный прямоугольник.  
  
 [!code-cpp[System.Drawing.ClassicGraphicsExamples3#165](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples3/CPP/form1.cpp#165)]
 [!code-csharp[System.Drawing.ClassicGraphicsExamples3#165](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples3/CS/form1.cs#165)]
 [!code-vb[System.Drawing.ClassicGraphicsExamples3#165](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples3/VB/form1.vb#165)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="TranslateClip">
      <MemberSignature Language="C#" Value="public void TranslateClip (float dx, float dy);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void TranslateClip(float32 dx, float32 dy) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.TranslateClip(System.Single,System.Single)" />
      <MemberSignature Language="VB.NET" Value="Public Sub TranslateClip (dx As Single, dy As Single)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void TranslateClip(float dx, float dy);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="dx" Type="System.Single" />
        <Parameter Name="dy" Type="System.Single" />
      </Parameters>
      <Docs>
        <param name="dx">Координата X сдвига.</param>
        <param name="dy">Координата Y сдвига.</param>
        <summary>Сдвигает отсеченную область данного объекта <see cref="T:System.Drawing.Graphics" /> на указанные значения в горизонтальном и вертикальном направлениях.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 Следующий пример кода предназначен для работы с Windows Forms, и для него необходим <xref:System.Windows.Forms.PaintEventArgs> `e`, который является параметром <xref:System.Windows.Forms.Control.Paint> обработчика событий. Код выполняет следующие действия.  
  
-   Создает прямоугольник для отсеченной области.  
  
-   Задает область усечения в прямоугольник.  
  
-   Сдвигает отсеченную область с помощью вектора (50.0f, 50.0F).  
  
-   Заполняет большой прямоугольник сплошную кисть черного цвета.  
  
 Результат представляет собой небольшой преобразованный, черный прямоугольник.  
  
 [!code-cpp[System.Drawing.ClassicGraphicsExamples3#166](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples3/CPP/form1.cpp#166)]
 [!code-csharp[System.Drawing.ClassicGraphicsExamples3#166](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples3/CS/form1.cs#166)]
 [!code-vb[System.Drawing.ClassicGraphicsExamples3#166](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples3/VB/form1.vb#166)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="TranslateTransform">
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Изменяет начало системы координат путем добавления заданного сдвига перед матрицей преобразования данного объекта <see cref="T:System.Drawing.Graphics" />.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="TranslateTransform">
      <MemberSignature Language="C#" Value="public void TranslateTransform (float dx, float dy);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void TranslateTransform(float32 dx, float32 dy) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.TranslateTransform(System.Single,System.Single)" />
      <MemberSignature Language="VB.NET" Value="Public Sub TranslateTransform (dx As Single, dy As Single)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void TranslateTransform(float dx, float dy);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="dx" Type="System.Single" />
        <Parameter Name="dy" Type="System.Single" />
      </Parameters>
      <Docs>
        <param name="dx">Координата X сдвига.</param>
        <param name="dy">Координата Y сдвига.</param>
        <summary>Изменяет начало системы координат путем добавления заданного сдвига перед матрицей преобразования данного объекта <see cref="T:System.Drawing.Graphics" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Как правило, источником является верхний левый угол поверхности рисования.  Операция сдвига заключается в умножении матрицы преобразования на матрицу, частью преобразования являются `dx` и `dy` параметров. Этот метод осуществляет перевод путем добавления матрицы сдвига к матрице преобразования.  
  
   
  
## Examples  
 Следующий пример кода предназначен для работы с Windows Forms, и для него необходим <xref:System.Windows.Forms.PaintEventArgs> `e`, который является параметром <xref:System.Windows.Forms.Control.Paint> обработчика событий. Код выполняет следующие действия.  
  
-   Поворачивает матрицу мирового преобразования формы Windows Forms на 30.0F градусов.  
  
-   Перемещение начала координат объекта graphics путем вызова <xref:System.Drawing.Graphics.TranslateTransform%2A>, добавления сдвига к матрице преобразования перед.  
  
-   Рисует преобразованный, повернутый эллипс с помощью синего пера.  
  
 [!code-cpp[System.Drawing.ClassicGraphicsExamples3#167](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples3/CPP/form1.cpp#167)]
 [!code-csharp[System.Drawing.ClassicGraphicsExamples3#167](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples3/CS/form1.cs#167)]
 [!code-vb[System.Drawing.ClassicGraphicsExamples3#167](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples3/VB/form1.vb#167)]  
  
 Ниже показан результат выполнения приведенного выше кода.  
  
 ![Переведенное и преобразованный эллипс](~/add/media/ndp-tranlatetransform.png "переведенное и преобразованный эллипс")  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="TranslateTransform">
      <MemberSignature Language="C#" Value="public void TranslateTransform (float dx, float dy, System.Drawing.Drawing2D.MatrixOrder order);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void TranslateTransform(float32 dx, float32 dy, valuetype System.Drawing.Drawing2D.MatrixOrder order) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.TranslateTransform(System.Single,System.Single,System.Drawing.Drawing2D.MatrixOrder)" />
      <MemberSignature Language="VB.NET" Value="Public Sub TranslateTransform (dx As Single, dy As Single, order As MatrixOrder)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void TranslateTransform(float dx, float dy, System::Drawing::Drawing2D::MatrixOrder order);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="dx" Type="System.Single" />
        <Parameter Name="dy" Type="System.Single" />
        <Parameter Name="order" Type="System.Drawing.Drawing2D.MatrixOrder" />
      </Parameters>
      <Docs>
        <param name="dx">Координата X сдвига.</param>
        <param name="dy">Координата Y сдвига.</param>
        <param name="order">Элемент перечисления <see cref="T:System.Drawing.Drawing2D.MatrixOrder" />, задающий порядок добавления сдвига к матрице преобразования: перед матрицей или после нее.</param>
        <summary>Изменяет начало системы координат путем применения заданного сдвига к матрице преобразования данного объекта <see cref="T:System.Drawing.Graphics" /> в указанном порядке.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Операция сдвига заключается в умножении матрицы преобразования на матрицу, частью преобразования являются `dx` и `dy` параметров. Этот метод добавляет или добавляет к матрице преобразования объекта <xref:System.Drawing.Graphics> матрицу преобразования согласно `order` параметра.  
  
   
  
## Examples  
 Следующий пример кода предназначен для работы с Windows Forms, и для него необходим <xref:System.Windows.Forms.PaintEventArgs> `e`, который является параметром <xref:System.Windows.Forms.Control.Paint> обработчика событий. Код выполняет следующие действия.  
  
-   Поворачивает матрицу мирового преобразования формы Windows Forms на 30.0F градусов.  
  
-   Перемещает объект graphics источника путем вызова <xref:System.Drawing.Graphics.TranslateTransform%2A>, добавления сдвига к матрице преобразования world.  
  
-   Рисует повернутый, преобразованный эллипс с помощью синего пера.  
  
 [!code-cpp[System.Drawing.ClassicGraphicsExamples3#168](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples3/CPP/form1.cpp#168)]
 [!code-csharp[System.Drawing.ClassicGraphicsExamples3#168](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples3/CS/form1.cs#168)]
 [!code-vb[System.Drawing.ClassicGraphicsExamples3#168](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples3/VB/form1.vb#168)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="VisibleClipBounds">
      <MemberSignature Language="C#" Value="public System.Drawing.RectangleF VisibleClipBounds { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Drawing.RectangleF VisibleClipBounds" />
      <MemberSignature Language="DocId" Value="P:System.Drawing.Graphics.VisibleClipBounds" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property VisibleClipBounds As RectangleF" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Drawing::RectangleF VisibleClipBounds { System::Drawing::RectangleF get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Drawing.RectangleF</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Возвращает ограничивающий прямоугольник видимой отсеченной области данного объекта <see cref="T:System.Drawing.Graphics" />.</summary>
        <value>Структура <see cref="T:System.Drawing.RectangleF" />, представляющая ограничивающий прямоугольник для видимой отсеченной области данного объекта <see cref="T:System.Drawing.Graphics" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Единица измерения для полученного прямоугольника обозначается <xref:System.Drawing.Graphics.PageUnit%2A> свойство. Единицы измерения по умолчанию — пикселей. Объект <xref:System.Drawing.Graphics> обычно связана с элементом управления и начало координат прямоугольника будет относительно клиентской области этого элемента управления.  
  
 Видимая отсеченная область представляет собой пересечение отсеченная область данного объекта <xref:System.Drawing.Graphics> и вырезанной области окна.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>