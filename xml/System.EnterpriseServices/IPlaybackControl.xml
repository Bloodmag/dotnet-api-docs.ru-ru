<Type Name="IPlaybackControl" FullName="System.EnterpriseServices.IPlaybackControl">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="54fcf7590327e9d2356fc883bfae633d190f6a78" />
    <Meta Name="ms.sourcegitcommit" Value="d31dc2ede16f6f7bc64e90d9f897ff54c4e3869b" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="ru-RU" />
    <Meta Name="ms.lasthandoff" Value="04/03/2018" />
    <Meta Name="ms.locfileid" Value="30408888" />
  </Metadata>
  <TypeSignature Language="C#" Value="public interface IPlaybackControl" />
  <TypeSignature Language="ILAsm" Value=".class public interface auto ansi abstract IPlaybackControl" />
  <TypeSignature Language="DocId" Value="T:System.EnterpriseServices.IPlaybackControl" />
  <TypeSignature Language="VB.NET" Value="Public Interface IPlaybackControl" />
  <TypeSignature Language="C++ CLI" Value="public interface class IPlaybackControl" />
  <AssemblyInfo>
    <AssemblyName>System.EnterpriseServices</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Interfaces />
  <Attributes>
    <Attribute>
      <AttributeName>System.Runtime.InteropServices.Guid("51372AFD-CAE7-11CF-BE81-00AA00A2FA25")</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName>System.Runtime.InteropServices.InterfaceType</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>Работает в очередях компонентов при неправильной обработке серверных ошибок воспроизведения и ошибок клиентов в механизме доставки очереди сообщений.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Класс исключений, определенных для компонента в каталоге COM +, реализует интерфейс <xref:System.EnterpriseServices.IPlaybackControl> и интерфейс для исходного класса. Реализации методов интерфейса исходного класса используются для обработки для неудачных методов в самом классе исключений. Они будут вызываться после <xref:System.EnterpriseServices.IPlaybackControl.FinalClientRetry%2A> или <xref:System.EnterpriseServices.IPlaybackControl.FinalServerRetry%2A> для обработки исключений для изначально вызываемый метод.  
  
 Проигрыватель очередей компонентов вызывает методы <xref:System.EnterpriseServices.IPlaybackControl> для оповещения объекта обработчика исключений, что сообщение будет помещено в очередь окончательного хранения или недоставленных сообщений. Проигрыватель очередей компонентов тот же метод вызывает в объекте обработчика исключений при вызове исходного метода которого возникла ошибка. Объект обработчика исключений для реализации вместо того, к примеру, можно собирать сведения диагностики проблем, либо создавать объект или сообщение, оповещающее клиента о проблеме. Если приложение не реализует <xref:System.EnterpriseServices.IPlaybackControl>, подозрительное сообщение помещается в конечную очередь хранения или недоставленных сообщений, когда проигрыватель очередей компонентов выполнит все повторы.  
  
 Сообщение считается подозрительным, исключающий по какой-либо причине, возможно из-за проблемы с сервером или системы очереди сообщения. Откат транзакции, и сообщение о сбое переходит в начало очереди. При повторном выводе сообщения из очереди происходит одно условие. Это сообщение может повторяться бесконечно, пока предпринимаются действия для устранения проблемы. Служба очередей компонентов обрабатывает сообщение о повреждении с помощью ряда повторов. После нескольких неудачных попыток сообщение перемещается в очередь для окончательного хранения. Подозрительные сообщения остаются в очереди на хранение до переместить вручную с помощью средства программы перемещения сообщений в очереди компонентов.  
  
 Подозрительное сообщение ситуации можно также разрешить программно, с помощью <xref:System.EnterpriseServices.IPlaybackControl.FinalServerRetry%2A> метод, который уведомляет создатель серверный компонент, все попытки воспроизведения отложенной активации не были выполнены.  
  
 Если вы обнаружили подозрительных сообщений, можно быстро выяснить основную причину проблемы. Например если сервер находился в автономном режиме для какой-либо причине, можно подключить к сети сервера. Если быстро решить проблему невозможно, можно автоматически создать другую транзакцию, которая уведомляет запрашивающую сторону, транзакция не выполнена. Инициатор запроса можно внести компенсирующие транзакции, которая отменяет эффект зафиксированной транзакции.  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName="FinalClientRetry">
      <MemberSignature Language="C#" Value="public void FinalClientRetry ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void FinalClientRetry() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.EnterpriseServices.IPlaybackControl.FinalClientRetry" />
      <MemberSignature Language="VB.NET" Value="Public Sub FinalClientRetry ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void FinalClientRetry();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.EnterpriseServices</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Оповещает компонент обработчика исключений клиента о том, что все попытки очереди сообщений по доставке сообщения на сервер были отклонены, и сообщение оборвалось в очереди недоставленных сообщений об активных транзакциях клиента.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 При получении сообщений в очереди недоставленных сообщений Xact, COM + пытается вызвать обработчик исключений клиента, связанный с классом сервера для доставки уведомления. Это делается путем вызова метода <xref:System.EnterpriseServices.IPlaybackControl.FinalClientRetry%2A>, а затем вызывать версию обработки исключений сбой метода в объекте обработчика исключений. Метод исключений может использоваться действие исключения, например, запись о сбое, отправить сообщение электронной почты администратору или выполнить компенсирующее действие на стороне клиента (Отмена результата более ранней транзакции). Если метод исключения не был выполнен успешно, сообщение остается в очереди недоставленных сообщений активной транзакции.  
  
 Очереди недоставленных сообщений Xact можно просмотреть в обозревателе очереди сообщений Microsoft (MSMQ).  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="FinalServerRetry">
      <MemberSignature Language="C#" Value="public void FinalServerRetry ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void FinalServerRetry() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.EnterpriseServices.IPlaybackControl.FinalServerRetry" />
      <MemberSignature Language="VB.NET" Value="Public Sub FinalServerRetry ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void FinalServerRetry();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.EnterpriseServices</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Оповещает реализацию класса исключений сервера о том, что все попытки воспроизведения отложенной активации для сервера не были выполнены, и сообщение будет перемещено в очередь для окончательного хранения.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 При получении сообщений в очереди недоставленных сообщений Xact, COM + пытается вызвать обработчик исключений на стороне сервера, связанный с классом сервера для доставки уведомления. Это делается путем вызова метода <xref:System.EnterpriseServices.IPlaybackControl.FinalServerRetry%2A>, то вызов версия сбой метода в объекте обработчика исключений обработки исключений. Метод исключений может использоваться действие исключения, например, запись о сбое, отправить сообщение электронной почты администратору или выполнить компенсирующее действие на стороне клиента (Отмена результата более ранней транзакции). Объект сервера следует сделать все усилия для успешного завершения транзакции. В противном случае — для повторной обработки сообщения требуется ручное вмешательство. Если метод исключения не был выполнен успешно, сообщение перемещается в очередь для окончательного хранения.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>