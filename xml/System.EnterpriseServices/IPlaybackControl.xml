<Type Name="IPlaybackControl" FullName="System.EnterpriseServices.IPlaybackControl">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="6a2fa35f21d501233854b1e609716c45f5c69687" />
    <Meta Name="ms.sourcegitcommit" Value="6a0b904069161bbaec4ffd02aa7d9cf38c61e72e" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="ru-RU" />
    <Meta Name="ms.lasthandoff" Value="06/24/2018" />
    <Meta Name="ms.locfileid" Value="36563494" />
  </Metadata>
  <TypeSignature Language="C#" Value="public interface IPlaybackControl" />
  <TypeSignature Language="ILAsm" Value=".class public interface auto ansi abstract IPlaybackControl" />
  <TypeSignature Language="DocId" Value="T:System.EnterpriseServices.IPlaybackControl" />
  <TypeSignature Language="VB.NET" Value="Public Interface IPlaybackControl" />
  <TypeSignature Language="C++ CLI" Value="public interface class IPlaybackControl" />
  <TypeSignature Language="F#" Value="type IPlaybackControl = interface" />
  <AssemblyInfo>
    <AssemblyName>System.EnterpriseServices</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Interfaces />
  <Attributes>
    <Attribute>
      <AttributeName>System.Runtime.InteropServices.Guid("51372AFD-CAE7-11CF-BE81-00AA00A2FA25")</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName>System.Runtime.InteropServices.InterfaceType</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>
      <span data-ttu-id="31850-101">Работает в очередях компонентов при неправильной обработке серверных ошибок воспроизведения и ошибок клиентов в механизме доставки очереди сообщений.</span>
      <span class="sxs-lookup">
        <span data-stu-id="31850-101">Functions in Queued Components in the abnormal handling of server-side playback errors and client-side failures of the Message Queuing delivery mechanism.</span>
      </span>
    </summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="31850-102">Класс исключений, определенных для компонента в каталоге COM +, реализует интерфейс <xref:System.EnterpriseServices.IPlaybackControl> и интерфейс для исходного класса.</span><span class="sxs-lookup"><span data-stu-id="31850-102">The exception class defined for the component in the COM+ catalog implements both <xref:System.EnterpriseServices.IPlaybackControl> and the interface for the original class.</span></span> <span data-ttu-id="31850-103">Реализации методов интерфейса исходного класса используются для обработки для неудачных методов в самом классе исключений.</span><span class="sxs-lookup"><span data-stu-id="31850-103">The method implementations of the original class interface are used to perform the exception handling for the failed methods in the class itself.</span></span> <span data-ttu-id="31850-104">Они будут вызываться после <xref:System.EnterpriseServices.IPlaybackControl.FinalClientRetry%2A> или <xref:System.EnterpriseServices.IPlaybackControl.FinalServerRetry%2A> для обработки исключений для изначально вызываемый метод.</span><span class="sxs-lookup"><span data-stu-id="31850-104">They will be called after <xref:System.EnterpriseServices.IPlaybackControl.FinalClientRetry%2A> or <xref:System.EnterpriseServices.IPlaybackControl.FinalServerRetry%2A> to process exceptions for the method originally called.</span></span>  
  
 <span data-ttu-id="31850-105">Проигрыватель очередей компонентов вызывает методы <xref:System.EnterpriseServices.IPlaybackControl> для оповещения объекта обработчика исключений, что сообщение будет помещено в очередь окончательного хранения или недоставленных сообщений.</span><span class="sxs-lookup"><span data-stu-id="31850-105">The Queued Components Player calls the methods of <xref:System.EnterpriseServices.IPlaybackControl> to inform the exception-handler object that a message is about to be placed on the final resting or dead letter queue.</span></span> <span data-ttu-id="31850-106">Проигрыватель очередей компонентов тот же метод вызывает в объекте обработчика исключений при вызове исходного метода которого возникла ошибка.</span><span class="sxs-lookup"><span data-stu-id="31850-106">The Queued Components Player then calls the same method in the exception-handler object that had failed in the original method call.</span></span> <span data-ttu-id="31850-107">Объект обработчика исключений для реализации вместо того, к примеру, можно собирать сведения диагностики проблем, либо создавать объект или сообщение, оповещающее клиента о проблеме.</span><span class="sxs-lookup"><span data-stu-id="31850-107">The exception-handler object can implement an alternative, for example, by gathering problem diagnosis information or generating an object or message that informs the client of the problem.</span></span> <span data-ttu-id="31850-108">Если приложение не реализует <xref:System.EnterpriseServices.IPlaybackControl>, подозрительное сообщение помещается в конечную очередь хранения или недоставленных сообщений, когда проигрыватель очередей компонентов выполнит все повторы.</span><span class="sxs-lookup"><span data-stu-id="31850-108">If the application does not implement <xref:System.EnterpriseServices.IPlaybackControl>, the poison message is placed on the final resting or dead letter queue when the Queued Components Player exhausts all retries.</span></span>  
  
 <span data-ttu-id="31850-109">Сообщение считается подозрительным, исключающий по какой-либо причине, возможно из-за проблемы с сервером или системы очереди сообщения.</span><span class="sxs-lookup"><span data-stu-id="31850-109">A poison message is a message that cannot be processed for some reason, perhaps because of a problem with the server or queuing system.</span></span> <span data-ttu-id="31850-110">Откат транзакции, и сообщение о сбое переходит в начало очереди.</span><span class="sxs-lookup"><span data-stu-id="31850-110">The transaction is rolled back, and the poison message goes to the top of the queue.</span></span> <span data-ttu-id="31850-111">При повторном выводе сообщения из очереди происходит одно условие.</span><span class="sxs-lookup"><span data-stu-id="31850-111">When the message is dequeued again, the same condition occurs.</span></span> <span data-ttu-id="31850-112">Это сообщение может повторяться бесконечно, пока предпринимаются действия для устранения проблемы.</span><span class="sxs-lookup"><span data-stu-id="31850-112">This message can continue looping indefinitely until something is done to correct the problem.</span></span> <span data-ttu-id="31850-113">Служба очередей компонентов обрабатывает сообщение о повреждении с помощью ряда повторов.</span><span class="sxs-lookup"><span data-stu-id="31850-113">The Queued Components service handles the poison message by using a series of retries.</span></span> <span data-ttu-id="31850-114">После нескольких неудачных попыток сообщение перемещается в очередь для окончательного хранения.</span><span class="sxs-lookup"><span data-stu-id="31850-114">After several unsuccessful retries, the message is moved to a final resting queue.</span></span> <span data-ttu-id="31850-115">Подозрительные сообщения остаются в очереди на хранение до переместить вручную с помощью средства программы перемещения сообщений в очереди компонентов.</span><span class="sxs-lookup"><span data-stu-id="31850-115">Poison messages remain in the resting queue until manually moved by using the Queued Components Message Mover tool.</span></span>  
  
 <span data-ttu-id="31850-116">Подозрительное сообщение ситуации можно также разрешить программно, с помощью <xref:System.EnterpriseServices.IPlaybackControl.FinalServerRetry%2A> метод, который уведомляет создатель серверный компонент, все попытки воспроизведения отложенной активации не были выполнены.</span><span class="sxs-lookup"><span data-stu-id="31850-116">The poison message situation can also be resolved programmatically, using the <xref:System.EnterpriseServices.IPlaybackControl.FinalServerRetry%2A> method, which informs the server-side component author that all attempts to play back the deferred activation have failed.</span></span>  
  
 <span data-ttu-id="31850-117">Если вы обнаружили подозрительных сообщений, можно быстро выяснить основную причину проблемы.</span><span class="sxs-lookup"><span data-stu-id="31850-117">If you discover a poison message, you might be able to solve the underlying cause of the problem quickly.</span></span> <span data-ttu-id="31850-118">Например если сервер находился в автономном режиме для какой-либо причине, можно подключить к сети сервера.</span><span class="sxs-lookup"><span data-stu-id="31850-118">For example, if the server was offline for some reason, you can bring the server back online.</span></span> <span data-ttu-id="31850-119">Если быстро решить проблему невозможно, можно автоматически создать другую транзакцию, которая уведомляет запрашивающую сторону, транзакция не выполнена.</span><span class="sxs-lookup"><span data-stu-id="31850-119">If you cannot solve the problem quickly, you can automatically generate another transaction that notifies the requestor that the transaction did not occur.</span></span> <span data-ttu-id="31850-120">Инициатор запроса можно внести компенсирующие транзакции, которая отменяет эффект зафиксированной транзакции.</span><span class="sxs-lookup"><span data-stu-id="31850-120">The requestor can then make a compensating transaction that reverses the effect of a transaction that has already committed.</span></span>  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName="FinalClientRetry">
      <MemberSignature Language="C#" Value="public void FinalClientRetry ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void FinalClientRetry() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.EnterpriseServices.IPlaybackControl.FinalClientRetry" />
      <MemberSignature Language="VB.NET" Value="Public Sub FinalClientRetry ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void FinalClientRetry();" />
      <MemberSignature Language="F#" Value="abstract member FinalClientRetry : unit -&gt; unit" Usage="iPlaybackControl.FinalClientRetry " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.EnterpriseServices</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="31850-121">Оповещает компонент обработчика исключений клиента о том, что все попытки очереди сообщений по доставке сообщения на сервер были отклонены, и сообщение оборвалось в очереди недоставленных сообщений об активных транзакциях клиента.</span>
          <span class="sxs-lookup">
            <span data-stu-id="31850-121">Informs the client-side exception-handling component that all Message Queuing attempts to deliver the message to the server were rejected, and the message ended up on the client-side Xact Dead Letter queue.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="31850-122">При получении сообщений в очереди недоставленных сообщений Xact, COM + пытается вызвать обработчик исключений клиента, связанный с классом сервера для доставки уведомления.</span><span class="sxs-lookup"><span data-stu-id="31850-122">As messages arrive in the Xact Dead Letter queue, COM+ attempts to invoke a client-side exception handler related to the server class to deliver this notification.</span></span> <span data-ttu-id="31850-123">Это делается путем вызова метода <xref:System.EnterpriseServices.IPlaybackControl.FinalClientRetry%2A>, а затем вызывать версию обработки исключений сбой метода в объекте обработчика исключений.</span><span class="sxs-lookup"><span data-stu-id="31850-123">It does so by first calling <xref:System.EnterpriseServices.IPlaybackControl.FinalClientRetry%2A>, then calling the exception-handling version of the failed method in the exception-handler object.</span></span> <span data-ttu-id="31850-124">Метод исключений может использоваться действие исключения, например, запись о сбое, отправить сообщение электронной почты администратору или выполнить компенсирующее действие на стороне клиента (Отмена результата более ранней транзакции).</span><span class="sxs-lookup"><span data-stu-id="31850-124">This exception method can then take an exception action, such as recording the failure, sending a mail message to the administrator, or taking client-side compensating action (reversing the effect of an earlier transaction).</span></span> <span data-ttu-id="31850-125">Если метод исключения не был выполнен успешно, сообщение остается в очереди недоставленных сообщений активной транзакции.</span><span class="sxs-lookup"><span data-stu-id="31850-125">If the exception method is not successful, the message is left on the Xact Dead Letter queue.</span></span>  
  
 <span data-ttu-id="31850-126">Очереди недоставленных сообщений Xact можно просмотреть в обозревателе очереди сообщений Microsoft (MSMQ).</span><span class="sxs-lookup"><span data-stu-id="31850-126">The Xact Dead Letter queue can be viewed in the Microsoft Message Queue (MSMQ) Explorer.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="FinalServerRetry">
      <MemberSignature Language="C#" Value="public void FinalServerRetry ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void FinalServerRetry() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.EnterpriseServices.IPlaybackControl.FinalServerRetry" />
      <MemberSignature Language="VB.NET" Value="Public Sub FinalServerRetry ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void FinalServerRetry();" />
      <MemberSignature Language="F#" Value="abstract member FinalServerRetry : unit -&gt; unit" Usage="iPlaybackControl.FinalServerRetry " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.EnterpriseServices</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="31850-127">Оповещает реализацию класса исключений сервера о том, что все попытки воспроизведения отложенной активации для сервера не были выполнены, и сообщение будет перемещено в очередь для окончательного хранения.</span>
          <span class="sxs-lookup">
            <span data-stu-id="31850-127">Informs the server-side exception class implementation that all attempts to play back the deferred activation to the server have failed, and the message is about to be moved to its final resting queue.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="31850-128">При получении сообщений в очереди недоставленных сообщений Xact, COM + пытается вызвать обработчик исключений на стороне сервера, связанный с классом сервера для доставки уведомления.</span><span class="sxs-lookup"><span data-stu-id="31850-128">As messages arrive on the Xact Dead Letter queue, COM+ attempts to invoke a server-side exception handler related to the server class to deliver this notification.</span></span> <span data-ttu-id="31850-129">Это делается путем вызова метода <xref:System.EnterpriseServices.IPlaybackControl.FinalServerRetry%2A>, то вызов версия сбой метода в объекте обработчика исключений обработки исключений.</span><span class="sxs-lookup"><span data-stu-id="31850-129">It does so by first calling <xref:System.EnterpriseServices.IPlaybackControl.FinalServerRetry%2A>, then calling the exception handling version of the failed method in the exception handler object.</span></span> <span data-ttu-id="31850-130">Метод исключений может использоваться действие исключения, например, запись о сбое, отправить сообщение электронной почты администратору или выполнить компенсирующее действие на стороне клиента (Отмена результата более ранней транзакции).</span><span class="sxs-lookup"><span data-stu-id="31850-130">This exception method can then take an exception action, such as recording the failure, sending a mail message to the administrator, or taking client-side compensating action (reversing the effect of an earlier transaction).</span></span> <span data-ttu-id="31850-131">Объект сервера следует сделать все усилия для успешного завершения транзакции.</span><span class="sxs-lookup"><span data-stu-id="31850-131">The server object should make every effort to complete this transaction successfully.</span></span> <span data-ttu-id="31850-132">В противном случае — для повторной обработки сообщения требуется ручное вмешательство.</span><span class="sxs-lookup"><span data-stu-id="31850-132">Otherwise, manual intervention is required to reprocess the message.</span></span> <span data-ttu-id="31850-133">Если метод исключения не был выполнен успешно, сообщение перемещается в очередь для окончательного хранения.</span><span class="sxs-lookup"><span data-stu-id="31850-133">If the exception method is not successful, the message is moved to the final resting queue.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>