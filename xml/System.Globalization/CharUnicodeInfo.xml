<Type Name="CharUnicodeInfo" FullName="System.Globalization.CharUnicodeInfo">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="a8bee7b96cd712f99cea3c5b643e9b885b969b98" />
    <Meta Name="ms.sourcegitcommit" Value="df6cf590aa3087f6c7c202712eee781c6a3c8f96" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="ru-RU" />
    <Meta Name="ms.lasthandoff" Value="05/07/2018" />
    <Meta Name="ms.locfileid" Value="33682204" />
  </Metadata>
  <TypeSignature Language="C#" Value="public static class CharUnicodeInfo" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi abstract sealed beforefieldinit CharUnicodeInfo extends System.Object" />
  <TypeSignature Language="DocId" Value="T:System.Globalization.CharUnicodeInfo" />
  <TypeSignature Language="VB.NET" Value="Public Class CharUnicodeInfo" />
  <TypeSignature Language="C++ CLI" Value="public ref class CharUnicodeInfo abstract sealed" />
  <AssemblyInfo>
    <AssemblyName>System.Globalization</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.10.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>mscorlib</AssemblyName>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>System.Runtime</AssemblyName>
    <AssemblyVersion>4.2.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.1.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>Получает сведения о символе Юникода. Этот класс не наследуется.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 [Стандарт Юникод](http://go.microsoft.com/fwlink/?linkid=37123) определяет количество категории символов Юникода. Например символ может быть классифицируются как прописной буквы, строчные буквы, десятичным числом, буквы, цифры, разделитель абзацев, математическим символом или символ валюты. Приложение может использовать категорию символа для управления строковые операции, например анализ или извлечение подстроки с регулярными выражениями. <xref:System.Globalization.UnicodeCategory> Перечисление определяет категории возможных символов.  
  
 Вы используете <xref:System.Globalization.CharUnicodeInfo> для получения <xref:System.Globalization.UnicodeCategory> значение для определенных символов. <xref:System.Globalization.CharUnicodeInfo> Класс определяет методы, которые возвращают следующие значения знака Юникода:  
  
-   Определенную категорию, к которой принадлежит символ или суррогатную пару. Возвращаемое значение является членом <xref:System.Globalization.UnicodeCategory> перечисления.  
  
-   Числовое значение. Применяется только к числовым символам, включая дроби, индексы, надстрочный, римские цифры, числители валюты, обведенные числа и цифры конкретного скрипта.  
  
-   Цифровое значение. Применяется к числовым символам, которые могут быть объединены с другими числовыми символами для представления числа в системе нумерации.  
  
-   Значение в десятичное число. Применяется только к символов, представляющих десятичные цифры в системе десятичным (основание 10). Десятичное число может быть одним из десяти цифр от 0 – 9. Эти символы являются членами <xref:System.Globalization.UnicodeCategory.DecimalDigitNumber?displayProperty=nameWithType> категории.  
  
 Кроме того <xref:System.Globalization.CharUnicodeInfo> классе используется внутренним образом количество других типов платформы .NET Framework и методы, основанные на классификации символов. Сюда входит следующее.  
  
-   <xref:System.Globalization.StringInfo> Класс, который работает с элементами текстовое вместо одного символа в строке.  
  
-   Перегруженные версии <xref:System.Char.GetUnicodeCategory%2A?displayProperty=nameWithType> метод, который определяют категории, к которой принадлежит символ или суррогатную пару.  
  
-   [Классы символов](~/docs/standard/base-types/character-classes-in-regular-expressions.md) распознаются <xref:System.Text.RegularExpressions.Regex>, обработчик регулярных выражений .NET Framework.  
  
 При использовании этого класса в приложениях, сохранить в виду следующие замечаниях по программированию с использованием <xref:System.Char> типа. Тип может быть сложно использовать и рекомендуется для представления лингвистического содержимого не строки.  
  
-   Объект <xref:System.Char> объекта не всегда соответствует один символ. Несмотря на то что <xref:System.Char> тип представляет одно 16-разрядное значение, некоторые символы (например кластерами графем и суррогатные пары) состоят из двух или более частей кода UTF-16. Дополнительные сведения см. в разделе «Char объектов и символы Юникода» в <xref:System.String> класса.  
  
-   Понятие «character» также является гибкой. Символ часто воспринимается как глиф, но многие глифы требуют нескольких кодовых точек. Например, может быть ä, представленное на два кодовые точки («a» и U + 0308, являющийся diaeresis объединение), или объект одну кодовую точку («ä» или U + 00A4). В некоторых языках есть много букв, символов и глифов, которые требуют нескольких кодовых точек, что может привести к путанице лингвистического представления содержимого. Например имеется ΰ (U + 03B0, греческий строчная буква ипсилон с dialytika и тоносом), но нет без эквивалентные прописные буквы. Нижний такое значение просто возвращает исходное значение.  
  
   
  
## Examples  
 В следующем примере кода показаны значения, возвращенные каждым методом для разных типов символов.  
  
 [!code-cpp[System.Globalization.CharUnicodeInfo_Char#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Globalization.CharUnicodeInfo_Char/CPP/charunicodeinfo_char.cpp#1)]
 [!code-csharp[System.Globalization.CharUnicodeInfo_Char#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Globalization.CharUnicodeInfo_Char/CS/charunicodeinfo_char.cs#1)]
 [!code-vb[System.Globalization.CharUnicodeInfo_Char#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Globalization.CharUnicodeInfo_Char/VB/charunicodeinfo_char.vb#1)]  
  
 ]]></format>
    </remarks>
    <block subset="none" type="usage">
      <para>Распознанных символов и конкретные категории, к которым они принадлежат определены в стандарте Юникода и можно перейти с одной версии стандарта Юникод к другому. Классификация символов в соответствующей версии платформы .NET Framework основана на одну версию стандарта Юникод, независимо от базовой операционной системы, на котором работает .NET Framework. В следующей таблице перечислены версии платформы .NET Framework с момента [!INCLUDE[net_v40_long](~/includes/net-v40-long-md.md)] и версии в стандарте Юникода используется для классификации символов.  
  
 <list type="table"><listheader><term> Версии платформы .NET framework  
  
 </term><description> Версия стандарта Юникод  
  
 </description></listheader><item><term> [!INCLUDE[net_v40_long](~/includes/net-v40-long-md.md)]  
  
 </term><description> [В стандарте Юникода версии 5.0.0](https://www.unicode.org/versions/Unicode5.0.0/)  
  
 </description></item><item><term> [!INCLUDE[net_v45](~/includes/net-v45-md.md)]  
  
 </term><description> [В стандарте Юникода версии 5.0.0](https://www.unicode.org/versions/Unicode5.0.0/)  
  
 </description></item><item><term> [!INCLUDE[net_v451](~/includes/net-v451-md.md)]  
  
 </term><description> [В стандарте Юникода версии 5.0.0](https://www.unicode.org/versions/Unicode5.0.0/)  
  
 </description></item><item><term> [!INCLUDE[net_v452](~/includes/net-v452-md.md)]  
  
 </term><description> [В стандарте Юникода версии 5.0.0](https://www.unicode.org/versions/Unicode5.0.0/)  
  
 </description></item><item><term> [!INCLUDE[net_v46](~/includes/net-v46-md.md)]  
  
 </term><description> [В стандарте Юникода версии 6.3.0](https://www.unicode.org/versions/Unicode6.3.0/)  
  
 </description></item><item><term> [!INCLUDE[net_v461](~/includes/net-v461-md.md)]  
  
 </term><description> [В стандарте Юникода версии 6.3.0](https://www.unicode.org/versions/Unicode6.3.0/)  
  
 </description></item><item><term> [!INCLUDE[net_v462](~/includes/net-v462-md.md)]  
  
 </term><description> [В стандарте Юникода версии 8.0.0](https://www.unicode.org/versions/Unicode8.0.0/)  
  
 </description></item></list>  
  
 Каждая версия стандарта Юникод включает сведения об изменениях в базе данных символов Юникода с момента предыдущей версии. База данных символов Юникода используется <see cref="T:System.Globalization.CharUnicodeInfo" /> класс для классификации символов.</para>
    </block>
    <altmember cref="T:System.Globalization.UnicodeCategory" />
    <altmember cref="N:System.Text" />
  </Docs>
  <Members>
    <MemberGroup MemberName="GetDecimalDigitValue">
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Получает десятичное цифровое значение числового символа Юникода.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="GetDecimalDigitValue">
      <MemberSignature Language="C#" Value="public static int GetDecimalDigitValue (char ch);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig int32 GetDecimalDigitValue(char ch) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Globalization.CharUnicodeInfo.GetDecimalDigitValue(System.Char)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function GetDecimalDigitValue (ch As Char) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static int GetDecimalDigitValue(char ch);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="ch" Type="System.Char" />
      </Parameters>
      <Docs>
        <param name="ch">Символ Юникода, для которого следует получить десятичное цифровое значение.</param>
        <summary>Получает десятичное цифровое значение указанного числового символа.</summary>
        <returns>Десятичное цифровое значение указанного числового символа.  
  
 - или -  
  
 -1, если указанный символ не является десятичной цифрой.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Этот метод преобразует символов, представляющих десятичные цифры их эквивалентные целочисленного значения. Десятичные цифры, символы в <xref:System.Globalization.UnicodeCategory.DecimalDigitNumber> категорию, которая может представлять одну из десяти цифр в десятичном формате (основание 10) системы от нуля до девяти нумерации. Он включает символы, такие как U + 0030 (цифра ноль) до U + 0039 (цифра 9), U + 0660 (ARABIC-INDIC ЦИФРЫ ноль) до U + 0669 (ARABIC-INDIC цифра 9), U + 07 C 0 (ноль NKO ЦИФР) до U + 07C 9 (NKO цифра 9) и 1040 (МЬЯНМА ЦИФРЫ ноль) до U + 1049) МЬЯНМА ЦИФРА 9).  
  
 Дополнительные сведения о Юникоде см. в разделе [стандарт Юникод](http://go.microsoft.com/fwlink/?linkid=37123).  
  
   
  
## Examples  
 В следующем примере кода показаны значения, возвращенные каждым методом для разных типов символов.  
  
 [!code-cpp[System.Globalization.CharUnicodeInfo_Char#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Globalization.CharUnicodeInfo_Char/CPP/charunicodeinfo_char.cpp#1)]
 [!code-csharp[System.Globalization.CharUnicodeInfo_Char#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Globalization.CharUnicodeInfo_Char/CS/charunicodeinfo_char.cs#1)]
 [!code-vb[System.Globalization.CharUnicodeInfo_Char#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Globalization.CharUnicodeInfo_Char/VB/charunicodeinfo_char.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetDecimalDigitValue">
      <MemberSignature Language="C#" Value="public static int GetDecimalDigitValue (string s, int index);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig int32 GetDecimalDigitValue(string s, int32 index) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Globalization.CharUnicodeInfo.GetDecimalDigitValue(System.String,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function GetDecimalDigitValue (s As String, index As Integer) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static int GetDecimalDigitValue(System::String ^ s, int index);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="s" Type="System.String" />
        <Parameter Name="index" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="s">Параметр <see cref="T:System.String" />, содержащий символ Юникода, для которого следует получить десятичное цифровое значение.</param>
        <param name="index">Индекс символа Юникода, для которого следует получить десятичное цифровое значение.</param>
        <summary>Получает десятичное цифровое значение числового символа на месте указанного индекса указанной строки.</summary>
        <returns>Десятичное цифровое значение числового символа на месте указанного индекса указанной строки.  
  
 - или -  
  
 -1, если символ на месте указанного индекса указанной строки не является десятичной цифрой.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Этот метод преобразует символов, представляющих десятичные цифры их эквивалентные целочисленного значения. Десятичные цифры, символы в <xref:System.Globalization.UnicodeCategory.DecimalDigitNumber> категорию, которая может представлять одну из десяти цифр в десятичном формате (основание 10) системы от нуля до девяти нумерации. Он включает символы, такие как U + 0030 (цифра ноль) до U + 0039 (цифра 9), U + 0660 (ARABIC-INDIC ЦИФРЫ ноль) до U + 0669 (ARABIC-INDIC цифра 9), U + 07 C 0 (ноль NKO ЦИФР) до U + 07C 9 (NKO цифра 9) и 1040 (МЬЯНМА ЦИФРЫ ноль) до U + 1049) МЬЯНМА ЦИФРА 9).  
  
 Дополнительные сведения о Юникоде см. в разделе [стандарт Юникод](http://go.microsoft.com/fwlink/?linkid=37123).  
  
   
  
## Examples  
 В следующем примере кода показаны значения, возвращенные каждым методом для разных типов символов.  
  
 [!code-cpp[System.Globalization.CharUnicodeInfo_String#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Globalization.CharUnicodeInfo_String/CPP/charunicodeinfo_string.cpp#1)]
 [!code-csharp[System.Globalization.CharUnicodeInfo_String#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Globalization.CharUnicodeInfo_String/CS/charunicodeinfo_string.cs#1)]
 [!code-vb[System.Globalization.CharUnicodeInfo_String#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Globalization.CharUnicodeInfo_String/VB/charunicodeinfo_string.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          Свойство <paramref name="s" /> имеет значение <see langword="null" />.</exception>
        <exception cref="T:System.ArgumentOutOfRangeException">
          Значение <paramref name="index" /> находится вне диапазона допустимых индексов в <paramref name="s" />.</exception>
      </Docs>
    </Member>
    <MemberGroup MemberName="GetDigitValue">
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Получает цифровое значение числового символа Юникода.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="GetDigitValue">
      <MemberSignature Language="C#" Value="public static int GetDigitValue (char ch);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig int32 GetDigitValue(char ch) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Globalization.CharUnicodeInfo.GetDigitValue(System.Char)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function GetDigitValue (ch As Char) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static int GetDigitValue(char ch);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="ch" Type="System.Char" />
      </Parameters>
      <Docs>
        <param name="ch">Символ Юникода, для которого следует получить цифровое значение.</param>
        <summary>Получает цифровое значение указанного числового символа.</summary>
        <returns>Цифровое значение указанного числового символа.  
  
 - или -  
  
 -1, если указанный символ не является цифрой.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Цифровое значение — это свойство, которое применяется только к числовым символам, которые можно использовать в качестве цифр. Цифра — числовой символ, который может быть объединен с другими цифрами для представления числа в системе нумерации.  
  
 Дополнительные сведения о Юникоде см. в разделе [стандарт Юникод](http://go.microsoft.com/fwlink/?linkid=37123).  
  
   
  
## Examples  
 В следующем примере кода показаны значения, возвращенные каждым методом для разных типов символов.  
  
 [!code-cpp[System.Globalization.CharUnicodeInfo_Char#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Globalization.CharUnicodeInfo_Char/CPP/charunicodeinfo_char.cpp#1)]
 [!code-csharp[System.Globalization.CharUnicodeInfo_Char#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Globalization.CharUnicodeInfo_Char/CS/charunicodeinfo_char.cs#1)]
 [!code-vb[System.Globalization.CharUnicodeInfo_Char#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Globalization.CharUnicodeInfo_Char/VB/charunicodeinfo_char.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetDigitValue">
      <MemberSignature Language="C#" Value="public static int GetDigitValue (string s, int index);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig int32 GetDigitValue(string s, int32 index) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Globalization.CharUnicodeInfo.GetDigitValue(System.String,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function GetDigitValue (s As String, index As Integer) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static int GetDigitValue(System::String ^ s, int index);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="s" Type="System.String" />
        <Parameter Name="index" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="s">Параметр <see cref="T:System.String" />, содержащий символ Юникода, для которого следует получить цифровое значение.</param>
        <param name="index">Индекс символа Юникода, для которого следует получить цифровое значение.</param>
        <summary>Получает цифровое значение числового символа на месте указанного индекса указанной строки.</summary>
        <returns>Цифровое значение числового символа на месте указанного индекса указанной строки.  
  
 - или -  
  
 -1, если символ на месте указанного индекса указанной строки не является цифрой.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Цифровое значение — это свойство, которое применяется только к числовым символам, которые можно использовать в качестве цифр. Цифра — числовой символ, который может быть объединен с другими цифрами для представления числа в системе нумерации.  
  
 Дополнительные сведения о Юникоде см. в разделе [стандарт Юникод](http://go.microsoft.com/fwlink/?linkid=37123).  
  
   
  
## Examples  
 В следующем примере кода показаны значения, возвращенные каждым методом для разных типов символов.  
  
 [!code-cpp[System.Globalization.CharUnicodeInfo_String#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Globalization.CharUnicodeInfo_String/CPP/charunicodeinfo_string.cpp#1)]
 [!code-csharp[System.Globalization.CharUnicodeInfo_String#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Globalization.CharUnicodeInfo_String/CS/charunicodeinfo_string.cs#1)]
 [!code-vb[System.Globalization.CharUnicodeInfo_String#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Globalization.CharUnicodeInfo_String/VB/charunicodeinfo_string.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          Свойство <paramref name="s" /> имеет значение <see langword="null" />.</exception>
        <exception cref="T:System.ArgumentOutOfRangeException">
          Значение <paramref name="index" /> находится вне диапазона допустимых индексов в <paramref name="s" />.</exception>
      </Docs>
    </Member>
    <MemberGroup MemberName="GetNumericValue">
      <AssemblyInfo>
        <AssemblyName>System.Globalization</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Получает числовое значение, связанное с символом Юникода.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="GetNumericValue">
      <MemberSignature Language="C#" Value="public static double GetNumericValue (char ch);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig float64 GetNumericValue(char ch) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Globalization.CharUnicodeInfo.GetNumericValue(System.Char)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function GetNumericValue (ch As Char) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static double GetNumericValue(char ch);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Globalization</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="ch" Type="System.Char" />
      </Parameters>
      <Docs>
        <param name="ch">Символ Юникода, для которого следует получить числовое значение.</param>
        <summary>Получает числовое значение, связанное с указанным символом.</summary>
        <returns>Числовое значение, связанное с указанным символом.  
  
 - или -  
  
 -1, если указанный символ не является числовым символом.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Числовое значение — это свойство символов Юникода, которое применяется только к числовым символам, включая дроби, индексы, надстрочный, римские цифры, числители валюты, обведенные числа и цифры конкретного скрипта. Дополнительные сведения о Юникоде см. в разделе [стандарт Юникод](http://go.microsoft.com/fwlink/?linkid=37123).  
  
 <xref:System.Globalization.CharUnicodeInfo.GetNumericValue%28System.Char%29> Метод предполагает, что `ch` соответствует знаку лингвистические и проверяет, можно ли преобразовать этот символ десятичной цифрой. Тем не менее, некоторые числа в стандарте Юникода представлены двумя <xref:System.Char> объекты, которые суррогатную пару. Например Aegean системы нумерации состоит кодовых точек U + 10107 до U + 10133. В следующем примере используется <xref:System.Char.ConvertFromUtf32%2A> метод для создания экземпляра строка, представляющая AEGEAN номер один. Как видно в результатах показано в примере <xref:System.Globalization.CharUnicodeInfo.GetNumericValue%28System.Char%29> метод возвращает -1, если он передается старшим или младшим символом-заместителем этого символа.  
  
 [!code-csharp[System.Globalization.CharUnicodeInfo.GetNumericValue#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.globalization.charunicodeinfo.getnumericvalue/cs/getnumericvalue1.cs#2)]
 [!code-vb[System.Globalization.CharUnicodeInfo.GetNumericValue#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.globalization.charunicodeinfo.getnumericvalue/vb/getnumericvalue1.vb#2)]  
  
   
  
## Examples  
 В следующем примере кода показаны значения, возвращенные каждым методом для разных типов символов.  
  
 [!code-cpp[System.Globalization.CharUnicodeInfo_Char#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Globalization.CharUnicodeInfo_Char/CPP/charunicodeinfo_char.cpp#1)]
 [!code-csharp[System.Globalization.CharUnicodeInfo_Char#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Globalization.CharUnicodeInfo_Char/CS/charunicodeinfo_char.cs#1)]
 [!code-vb[System.Globalization.CharUnicodeInfo_Char#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Globalization.CharUnicodeInfo_Char/VB/charunicodeinfo_char.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetNumericValue">
      <MemberSignature Language="C#" Value="public static double GetNumericValue (string s, int index);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig float64 GetNumericValue(string s, int32 index) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Globalization.CharUnicodeInfo.GetNumericValue(System.String,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function GetNumericValue (s As String, index As Integer) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static double GetNumericValue(System::String ^ s, int index);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Globalization</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="s" Type="System.String" />
        <Parameter Name="index" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="s">Параметр <see cref="T:System.String" />, содержащий символ Юникода, для которого следует получить числовое значение.</param>
        <param name="index">Индекс символа Юникода, для которого следует получить числовое значение.</param>
        <summary>Получает числовое значение, связанное с символом, расположенным по указанному индексу в указанной строке.</summary>
        <returns>Числовое значение, связанное с символом, расположенным по указанному индексу в указанной строке.  
  
 - или -  
  
 -1, если символ на месте указанного индекса указанной строки не является числовым символом.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Числовое значение — это свойство символов Юникода, которое применяется только к числовым символам, включая дроби, индексы, надстрочный, римские цифры, числители валюты, обведенные числа и цифры конкретного скрипта. Дополнительные сведения о Юникоде см. в разделе [стандарт Юникод](http://go.microsoft.com/fwlink/?linkid=37123).  
  
 Если <xref:System.Char> объект в позиции `index` является первым символом допустимую суррогатную пару <xref:System.Globalization.CharUnicodeInfo.GetNumericValue%28System.String%2CSystem.Int32%29> метод определяет ли суррогатная пара форм цифры и, если это так, возвращает его числовое значение. Например Aegean системы нумерации состоит кодовых точек U + 10107 до U + 10133. В следующем примере используется <xref:System.Char.ConvertFromUtf32%2A> метод для создания экземпляра строка, представляющая номер каждого Aegean. Как видно в результатах показано в примере <xref:System.Globalization.CharUnicodeInfo.GetNumericValue%28System.String%2CSystem.Int32%29> метод возвращает верное числовое значение, если он передается старшим символом-заместителем Aegean номера. Тем не менее если он передается младшим символом-заместителем, рассматривает только младший заместитель изоляции и возвращает – 1.  
  
 [!code-csharp[System.Globalization.CharUnicodeInfo.GetNumericValue#3](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.globalization.charunicodeinfo.getnumericvalue/cs/getnumericvalue1.cs#3)]
 [!code-vb[System.Globalization.CharUnicodeInfo.GetNumericValue#3](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.globalization.charunicodeinfo.getnumericvalue/vb/getnumericvalue1.vb#3)]  
  
   
  
## Examples  
 В следующем примере кода показаны значения, возвращенные каждым методом для разных типов символов.  
  
 [!code-cpp[System.Globalization.CharUnicodeInfo_String#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Globalization.CharUnicodeInfo_String/CPP/charunicodeinfo_string.cpp#1)]
 [!code-csharp[System.Globalization.CharUnicodeInfo_String#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Globalization.CharUnicodeInfo_String/CS/charunicodeinfo_string.cs#1)]
 [!code-vb[System.Globalization.CharUnicodeInfo_String#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Globalization.CharUnicodeInfo_String/VB/charunicodeinfo_string.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          Свойство <paramref name="s" /> имеет значение <see langword="null" />.</exception>
        <exception cref="T:System.ArgumentOutOfRangeException">
          Значение <paramref name="index" /> находится вне диапазона допустимых индексов в <paramref name="s" />.</exception>
      </Docs>
    </Member>
    <MemberGroup MemberName="GetUnicodeCategory">
      <AssemblyInfo>
        <AssemblyName>System.Globalization</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Получает категорию Юникода, относящуюся к символу Юникода.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="GetUnicodeCategory">
      <MemberSignature Language="C#" Value="public static System.Globalization.UnicodeCategory GetUnicodeCategory (char ch);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.Globalization.UnicodeCategory GetUnicodeCategory(char ch) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Globalization.CharUnicodeInfo.GetUnicodeCategory(System.Char)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function GetUnicodeCategory (ch As Char) As UnicodeCategory" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Globalization::UnicodeCategory GetUnicodeCategory(char ch);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Globalization</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Globalization.UnicodeCategory</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="ch" Type="System.Char" />
      </Parameters>
      <Docs>
        <param name="ch">Символ Юникода, для которого следует получить категорию Юникода.</param>
        <summary>Получает категорию Юникода, относящуюся к указанному символу.</summary>
        <returns>Значение <see cref="T:System.Globalization.UnicodeCategory" />, указывающее категорию указанного символа.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Символы Юникода делятся на категории. Категория символа является одним из его свойств. Например символ может быть прописной буквы, строчные буквы, десятичным числом, буквы, цифры, знаком пунктуации соединителя, математическим символом или символ валюты. <xref:System.Globalization.UnicodeCategory> Класс возвращает диапазон символов Юникода. Дополнительные сведения о Юникоде см. в разделе [стандарт Юникод](http://go.microsoft.com/fwlink/?linkid=37123).  
  
 <xref:System.Globalization.CharUnicodeInfo.GetUnicodeCategory%2A> Метод предполагает, что `ch` соответствует знаку лингвистические и возвращает его категория. Это означает, что для суррогатных пар, она возвращает <xref:System.Globalization.UnicodeCategory.Surrogate?displayProperty=nameWithType> вместо категории, к которой принадлежит суррогат. Например Ugaritic алфавита занимает кодовые точки U + 10380 до U + 1039F. В следующем примере используется <xref:System.Char.ConvertFromUtf32%2A> метод для создания экземпляра строка, представляющая ALPA UGARITIC буквы (U + 10380), что это первая буква алфавита Ugaritic. Как видно в результатах показано в примере <xref:System.Char.IsNumber%28System.Char%29> возвращает метод `false` при передаче старший или младший символ-заместитель этот символ.  
  
 [!code-csharp[System.Globalization.CharUnicodeInfo.GetUnicodeCategory#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.globalization.charunicodeinfo.getunicodecategory/cs/getunicodecategory1.cs#1)]
 [!code-vb[System.Globalization.CharUnicodeInfo.GetUnicodeCategory#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.globalization.charunicodeinfo.getunicodecategory/vb/getunicodecategory1.vb#1)]  
  
 Обратите внимание, что <xref:System.Globalization.CharUnicodeInfo.GetUnicodeCategory%2A?displayProperty=nameWithType> не всегда возвращает такой же <xref:System.Globalization.UnicodeCategory> как <xref:System.Char.GetUnicodeCategory%2A?displayProperty=nameWithType> метод при передаче конкретного символа в качестве параметра. <xref:System.Globalization.CharUnicodeInfo.GetUnicodeCategory%2A?displayProperty=nameWithType> Метод создан в соответствии с текущей версией в стандарте Юникода. В отличие от этого несмотря на то что <xref:System.Char.GetUnicodeCategory%2A?displayProperty=nameWithType> метод обычно отражает текущую версию стандарта Юникод, он может возвращать категорию символа, основываясь на предыдущей версии стандарта, или он может возвращать категорию, отличающуюся от текущего стандарта для сохранения обратной совместимости.  
  
   
  
## Examples  
 В следующем примере кода показаны значения, возвращенные каждым методом для разных типов символов.  
  
 [!code-cpp[System.Globalization.CharUnicodeInfo_Char#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Globalization.CharUnicodeInfo_Char/CPP/charunicodeinfo_char.cpp#1)]
 [!code-csharp[System.Globalization.CharUnicodeInfo_Char#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Globalization.CharUnicodeInfo_Char/CS/charunicodeinfo_char.cs#1)]
 [!code-vb[System.Globalization.CharUnicodeInfo_Char#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Globalization.CharUnicodeInfo_Char/VB/charunicodeinfo_char.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Globalization.UnicodeCategory" />
      </Docs>
    </Member>
    <Member MemberName="GetUnicodeCategory">
      <MemberSignature Language="C#" Value="public static System.Globalization.UnicodeCategory GetUnicodeCategory (int codePoint);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.Globalization.UnicodeCategory GetUnicodeCategory(int32 codePoint) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Globalization.CharUnicodeInfo.GetUnicodeCategory(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function GetUnicodeCategory (codePoint As Integer) As UnicodeCategory" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Globalization::UnicodeCategory GetUnicodeCategory(int codePoint);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Globalization.UnicodeCategory</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="codePoint" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="codePoint">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetUnicodeCategory">
      <MemberSignature Language="C#" Value="public static System.Globalization.UnicodeCategory GetUnicodeCategory (string s, int index);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.Globalization.UnicodeCategory GetUnicodeCategory(string s, int32 index) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Globalization.CharUnicodeInfo.GetUnicodeCategory(System.String,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function GetUnicodeCategory (s As String, index As Integer) As UnicodeCategory" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Globalization::UnicodeCategory GetUnicodeCategory(System::String ^ s, int index);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Globalization</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Globalization.UnicodeCategory</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="s" Type="System.String" />
        <Parameter Name="index" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="s">Параметр <see cref="T:System.String" />, содержащий символ Юникода, для которого следует получить категорию Юникода.</param>
        <param name="index">Индекс символа Юникода, для которого следует получить категорию Юникода.</param>
        <summary>Получает категорию Юникода, относящуюся к символу, расположенному по заданному индексу в заданной строке.</summary>
        <returns>Значение <see cref="T:System.Globalization.UnicodeCategory" />, указывающее категорию Юникода, относящуюся к символу, расположенному по заданному индексу в заданной строке.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Символы Юникода делятся на категории. Категория символа является одним из его свойств. Например символ может быть прописной буквы, строчные буквы, десятичным числом, буквы, цифры, знаком пунктуации соединителя, математическим символом или символ валюты. <xref:System.Globalization.UnicodeCategory> Класс возвращает диапазон символов Юникода. Дополнительные сведения о Юникоде см. в разделе [стандарт Юникод](http://go.microsoft.com/fwlink/?linkid=37123).  
  
 Если <xref:System.Char> объект в позиции `index` является первым символом допустимую суррогатную пару <xref:System.Globalization.CharUnicodeInfo.GetUnicodeCategory%28System.String%2CSystem.Int32%29> метод возвращает категорию Юникода для пары символов-заместителей вместо возвращения <xref:System.Globalization.UnicodeCategory.Surrogate?displayProperty=nameWithType>. Например Ugaritic алфавита занимает кодовые точки U + 10380 до U + 1039F. В следующем примере используется <xref:System.Char.ConvertFromUtf32%2A> метод для создания экземпляра строка, представляющая ALPA UGARITIC буквы (U + 10380), что это первая буква алфавита Ugaritic. Как видно в результатах показано в примере <xref:System.Globalization.CharUnicodeInfo.GetUnicodeCategory%28System.String%2CSystem.Int32%29> возвращает <xref:System.Globalization.UnicodeCategory.OtherLetter?displayProperty=nameWithType> он передается старший символ-это символ, предполагает суррогатной пары. Тем не менее, если он передается младшим символом-заместителем, он считает, что только младший заместитель изоляции и возвращает <xref:System.Globalization.UnicodeCategory.Surrogate?displayProperty=nameWithType>.  
  
 [!code-csharp[System.Globalization.CharUnicodeInfo.GetUnicodeCategory#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.globalization.charunicodeinfo.getunicodecategory/cs/getunicodecategory1.cs#2)]
 [!code-vb[System.Globalization.CharUnicodeInfo.GetUnicodeCategory#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.globalization.charunicodeinfo.getunicodecategory/vb/getunicodecategory1.vb#2)]  
  
 Обратите внимание, что <xref:System.Globalization.CharUnicodeInfo.GetUnicodeCategory%2A?displayProperty=nameWithType> метод не всегда возвращает такой же <xref:System.Globalization.UnicodeCategory> как <xref:System.Char.GetUnicodeCategory%2A?displayProperty=nameWithType> метод при передаче конкретного символа в качестве параметра. <xref:System.Globalization.CharUnicodeInfo.GetUnicodeCategory%2A?displayProperty=nameWithType> Метод создан в соответствии с текущей версией в стандарте Юникода. В отличие от этого несмотря на то что <xref:System.Char.GetUnicodeCategory%2A?displayProperty=nameWithType> метод обычно отражает текущую версию стандарта Юникод, он может возвращать категорию символа, основываясь на предыдущей версии стандарта, или он может возвращать категорию, отличающуюся от текущего стандарта для сохранения обратной совместимости.  
  
   
  
## Examples  
 В следующем примере кода показаны значения, возвращенные каждым методом для разных типов символов.  
  
 [!code-cpp[System.Globalization.CharUnicodeInfo_String#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Globalization.CharUnicodeInfo_String/CPP/charunicodeinfo_string.cpp#1)]
 [!code-csharp[System.Globalization.CharUnicodeInfo_String#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Globalization.CharUnicodeInfo_String/CS/charunicodeinfo_string.cs#1)]
 [!code-vb[System.Globalization.CharUnicodeInfo_String#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Globalization.CharUnicodeInfo_String/VB/charunicodeinfo_string.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          Свойство <paramref name="s" /> имеет значение <see langword="null" />.</exception>
        <exception cref="T:System.ArgumentOutOfRangeException">
          Значение <paramref name="index" /> находится вне диапазона допустимых индексов в <paramref name="s" />.</exception>
        <altmember cref="T:System.Globalization.UnicodeCategory" />
      </Docs>
    </Member>
  </Members>
</Type>