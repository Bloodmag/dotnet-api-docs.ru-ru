<Type Name="CharUnicodeInfo" FullName="System.Globalization.CharUnicodeInfo">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="27fd45175764ebdd82dadcc980311bdf7989b4ec" />
    <Meta Name="ms.sourcegitcommit" Value="5a49536d99d2d0b54e4cb7280870903e043272df" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="ru-RU" />
    <Meta Name="ms.lasthandoff" Value="07/03/2018" />
    <Meta Name="ms.locfileid" Value="37655861" />
  </Metadata>
  <TypeSignature Language="C#" Value="public static class CharUnicodeInfo" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi abstract sealed beforefieldinit CharUnicodeInfo extends System.Object" />
  <TypeSignature Language="DocId" Value="T:System.Globalization.CharUnicodeInfo" />
  <TypeSignature Language="VB.NET" Value="Public Class CharUnicodeInfo" />
  <TypeSignature Language="C++ CLI" Value="public ref class CharUnicodeInfo abstract sealed" />
  <TypeSignature Language="F#" Value="type CharUnicodeInfo = class" />
  <AssemblyInfo>
    <AssemblyName>System.Globalization</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.10.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>mscorlib</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>System.Runtime</AssemblyName>
    <AssemblyVersion>4.2.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.1.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>Retrieves information about a Unicode character. This class cannot be inherited.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 [Стандарта Юникод](http://go.microsoft.com/fwlink/?linkid=37123) определяет несколько категорий символов Юникода. Например символ могут быть отнесены прописной буквой, буквой в нижнем регистре, десятичной цифрой, буквы, цифры, разделителем абзацев, математическим символом или символ валюты. Приложение может использовать категории символов для управления строковые операции, например синтаксического анализа или извлечении подстроки с регулярными выражениями. <xref:System.Globalization.UnicodeCategory> Перечисление определяет категории возможных символов.  
  
 Использовании <xref:System.Globalization.CharUnicodeInfo> для получения <xref:System.Globalization.UnicodeCategory> значение анализирует конкретный символ. <xref:System.Globalization.CharUnicodeInfo> Класс определяет методы, которые возвращают следующие символы Юникода:  
  
-   Определенной категории, к которому принадлежит символ или суррогатную пару. Возвращаемое значение является членом <xref:System.Globalization.UnicodeCategory> перечисления.  
  
-   Числовое значение. Применяется только к числовым символам, включая дроби, подстрочные знаки, надстрочные знаки, римские цифры, числители валюты, обведенные числа и цифры конкретного скрипта.  
  
-   Цифровое значение. Применяется к цифровых символов, которые могут быть объединены с другими числовыми символами для представления числа в системе нумерации.  
  
-   Десятичное цифровое значение. Применяется только к символов, представляющих десятичные цифры в системе десятичным (основание 10). Десятичная цифра может принимать одно из десяти цифр от 0 – 9. Эти символы являются членами <xref:System.Globalization.UnicodeCategory.DecimalDigitNumber?displayProperty=nameWithType> категории.  
  
 Кроме того <xref:System.Globalization.CharUnicodeInfo> класс, который используется многими другими типами .NET Framework и методы, основанные на классификации символов. Сюда входит следующее.  
  
-   <xref:System.Globalization.StringInfo> Класс, который работает с текстовые элементы, а не отдельные символы в строке.  
  
-   Перегрузки <xref:System.Char.GetUnicodeCategory%2A?displayProperty=nameWithType> метод, который определить категорию, к которому принадлежит символ или суррогатную пару.  
  
-   [Классы символов](~/docs/standard/base-types/character-classes-in-regular-expressions.md) распознаются <xref:System.Text.RegularExpressions.Regex>, обработчик регулярных выражений платформы .NET Framework.  
  
 При использовании этого класса в приложениях, сохранять в виду следующие замечаниях по программированию с помощью <xref:System.Char> типа. Тип может быть сложно использовать, и рекомендуется для представления лингвистического содержимого не строки.  
  
-   Объект <xref:System.Char> объекта не всегда соответствует один символ. Несмотря на то что <xref:System.Char> тип представляет одиночное значение 16-разрядное, некоторые символы (например кластерами графем и суррогатные пары) состоят из двух или более частей кода UTF-16. Дополнительные сведения см. в разделе «Char объектов и символы Юникода» в <xref:System.String> класса.  
  
-   Понятие «character» также является гибким. Символ часто воспринимается как глиф, но многие глифы требуют нескольких кодовых точек. Например, может быть д, представленное на два кодовые точки («a» и U + 0308, являющийся diaeresis объединения), или объект одну кодовую точку («д» или U + 00A4). Некоторые языки имеют много букв, символов и глифов, которые требуют нескольких кодовых позиций, которые могут привести к путанице лингвистического представления содержимого. Например ΰ (U + 03B0, греческую букву ипсилон с dialytika и тоносом), но есть без эквивалентные прописные буквы. Нижний такое значение просто извлекает исходное значение.  
  
   
  
## Examples  
 В следующем примере кода показано значений, возвращаемых каждым методом для разных типов символов.  
  
 [!code-cpp[System.Globalization.CharUnicodeInfo_Char#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Globalization.CharUnicodeInfo_Char/CPP/charunicodeinfo_char.cpp#1)]
 [!code-csharp[System.Globalization.CharUnicodeInfo_Char#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Globalization.CharUnicodeInfo_Char/CS/charunicodeinfo_char.cs#1)]
 [!code-vb[System.Globalization.CharUnicodeInfo_Char#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Globalization.CharUnicodeInfo_Char/VB/charunicodeinfo_char.vb#1)]  
  
 ]]></format>
    </remarks>
    <block subset="none" type="usage">
      <para>Распознанных символов и отдельные категории, к которым они принадлежат определены в стандарте Юникода и можно изменить с одной версии стандарта Юникод на другую. Классификация символов в определенной версии платформы .NET Framework основан на одну версию стандарта Юникод, независимо от базовой операционной системы, на котором запущена платформа .NET Framework. В следующей таблице перечислены версии .NET Framework, начиная с [! INCLUDE[net_v40_long](~/includes/NET-v40-Long-MD.MD)] и версии стандарта Юникод, используемый для классификации символов.  <list type="table"><listheader><term> Версии платформы .NET framework </term><description> версии стандарта Unicode </description></listheader><item><term> [! INCLUDE[net_v40_long](~/includes/NET-v40-Long-MD.MD)] </term><description> [стандарта Юникода, версия 5.0.0] (https://www.unicode.org/versions/Unicode5.0.0/) </description></item><item><term> [! INCLUDE[net_v45](~/includes/NET-v45-MD.MD)] </term><description> [стандарта Юникода, версия 5.0.0] (https://www.unicode.org/versions/Unicode5.0.0/) </description></item><item><term> [! INCLUDE[net_v451](~/includes/NET-v451-MD.MD)] </term><description> [стандарта Юникода, версия 5.0.0] (https://www.unicode.org/versions/Unicode5.0.0/) </description></item><item><term> [! INCLUDE[net_v452](~/includes/NET-v452-MD.MD)] </term><description> [стандарта Юникода, версия 5.0.0] (https://www.unicode.org/versions/Unicode5.0.0/) </description></item><item><term> [! INCLUDE[net_v46](~/includes/NET-v46-MD.MD)] </term><description> [стандарта Юникода, версия 6.3.0] (https://www.unicode.org/versions/Unicode6.3.0/) </description></item><item><term> [! INCLUDE[net_v461](~/includes/NET-v461-MD.MD)] </term><description> [стандарта Юникода, версия 6.3.0] (https://www.unicode.org/versions/Unicode6.3.0/) </description></item><item><term> [! INCLUDE[net_v462](~/includes/NET-v462-MD.MD)] </term><description> [The Unicode Standard, Version 8.0.0] (https://www.unicode.org/versions/Unicode8.0.0/) </description></item></list> каждой версии Юникода Standard включает в себя сведения об изменениях, чтобы база данных символов Юникода, с предыдущей версией.               База данных символов Юникода используется <see cref="T:System.Globalization.CharUnicodeInfo" /> класс для классификации символов.</para>
    </block>
    <altmember cref="T:System.Globalization.UnicodeCategory" />
    <altmember cref="N:System.Text" />
  </Docs>
  <Members>
    <MemberGroup MemberName="GetDecimalDigitValue">
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Gets the decimal digit value of a numeric Unicode character.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="GetDecimalDigitValue">
      <MemberSignature Language="C#" Value="public static int GetDecimalDigitValue (char ch);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig int32 GetDecimalDigitValue(char ch) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Globalization.CharUnicodeInfo.GetDecimalDigitValue(System.Char)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function GetDecimalDigitValue (ch As Char) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static int GetDecimalDigitValue(char ch);" />
      <MemberSignature Language="F#" Value="static member GetDecimalDigitValue : char -&gt; int" Usage="System.Globalization.CharUnicodeInfo.GetDecimalDigitValue ch" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="ch" Type="System.Char" />
      </Parameters>
      <Docs>
        <param name="ch">The Unicode character for which to get the decimal digit value.</param>
        <summary>Gets the decimal digit value of the specified numeric character.</summary>
        <returns>The decimal digit value of the specified numeric character.  -or-  -1, if the specified character is not a decimal digit.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Этот метод преобразует символы, представляющие десятичные цифры в их эквивалент целочисленного значения. Десятичные цифры, символы в <xref:System.Globalization.UnicodeCategory.DecimalDigitNumber> категории, который может представлять один из десяти цифр в десятичном формате (основание 10) системы, от нуля до девяти нумерации. Он содержит знаки, такие как U + 0030 (цифра ноль) до U + 0039 (цифра 9), U + 0660 (ARABIC-INDIC цифра ноль) до U + 0669 (ARABIC-INDIC цифра 9), U + 07 C 0 (ноль для НКО ЦИФР) до U + 07C 9 (для НКО цифра 9) и U + 1040 (МЬЯНМА цифра ноль) через 1049 (U + МЬЯНМА ЦИФРА 9).  
  
 Дополнительные сведения о символов Юникода, см. в разделе [стандарта Юникода](http://go.microsoft.com/fwlink/?linkid=37123).  
  
   
  
## Examples  
 В следующем примере кода показано значений, возвращаемых каждым методом для разных типов символов.  
  
 [!code-cpp[System.Globalization.CharUnicodeInfo_Char#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Globalization.CharUnicodeInfo_Char/CPP/charunicodeinfo_char.cpp#1)]
 [!code-csharp[System.Globalization.CharUnicodeInfo_Char#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Globalization.CharUnicodeInfo_Char/CS/charunicodeinfo_char.cs#1)]
 [!code-vb[System.Globalization.CharUnicodeInfo_Char#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Globalization.CharUnicodeInfo_Char/VB/charunicodeinfo_char.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetDecimalDigitValue">
      <MemberSignature Language="C#" Value="public static int GetDecimalDigitValue (string s, int index);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig int32 GetDecimalDigitValue(string s, int32 index) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Globalization.CharUnicodeInfo.GetDecimalDigitValue(System.String,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function GetDecimalDigitValue (s As String, index As Integer) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static int GetDecimalDigitValue(System::String ^ s, int index);" />
      <MemberSignature Language="F#" Value="static member GetDecimalDigitValue : string * int -&gt; int" Usage="System.Globalization.CharUnicodeInfo.GetDecimalDigitValue (s, index)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="s" Type="System.String" />
        <Parameter Name="index" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="s">The <see cref="T:System.String" /> containing the Unicode character for which to get the decimal digit value.</param>
        <param name="index">The index of the Unicode character for which to get the decimal digit value.</param>
        <summary>Gets the decimal digit value of the numeric character at the specified index of the specified string.</summary>
        <returns>The decimal digit value of the numeric character at the specified index of the specified string.  -or-  -1, if the character at the specified index of the specified string is not a decimal digit.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Этот метод преобразует символы, представляющие десятичные цифры в их эквивалент целочисленного значения. Десятичные цифры, символы в <xref:System.Globalization.UnicodeCategory.DecimalDigitNumber> категории, который может представлять один из десяти цифр в десятичном формате (основание 10) системы, от нуля до девяти нумерации. Он содержит знаки, такие как U + 0030 (цифра ноль) до U + 0039 (цифра 9), U + 0660 (ARABIC-INDIC цифра ноль) до U + 0669 (ARABIC-INDIC цифра 9), U + 07 C 0 (ноль для НКО ЦИФР) до U + 07C 9 (для НКО цифра 9) и U + 1040 (МЬЯНМА цифра ноль) через 1049 (U + МЬЯНМА ЦИФРА 9).  
  
 Дополнительные сведения о символов Юникода, см. в разделе [стандарта Юникода](http://go.microsoft.com/fwlink/?linkid=37123).  
  
   
  
## Examples  
 В следующем примере кода показано значений, возвращаемых каждым методом для разных типов символов.  
  
 [!code-cpp[System.Globalization.CharUnicodeInfo_String#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Globalization.CharUnicodeInfo_String/CPP/charunicodeinfo_string.cpp#1)]
 [!code-csharp[System.Globalization.CharUnicodeInfo_String#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Globalization.CharUnicodeInfo_String/CS/charunicodeinfo_string.cs#1)]
 [!code-vb[System.Globalization.CharUnicodeInfo_String#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Globalization.CharUnicodeInfo_String/VB/charunicodeinfo_string.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="s" /> is <see langword="null" />.</exception>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <paramref name="index" /> is outside the range of valid indexes in <paramref name="s" />.</exception>
      </Docs>
    </Member>
    <MemberGroup MemberName="GetDigitValue">
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Gets the digit value of a numeric Unicode character.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="GetDigitValue">
      <MemberSignature Language="C#" Value="public static int GetDigitValue (char ch);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig int32 GetDigitValue(char ch) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Globalization.CharUnicodeInfo.GetDigitValue(System.Char)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function GetDigitValue (ch As Char) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static int GetDigitValue(char ch);" />
      <MemberSignature Language="F#" Value="static member GetDigitValue : char -&gt; int" Usage="System.Globalization.CharUnicodeInfo.GetDigitValue ch" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="ch" Type="System.Char" />
      </Parameters>
      <Docs>
        <param name="ch">The Unicode character for which to get the digit value.</param>
        <summary>Gets the digit value of the specified numeric character.</summary>
        <returns>The digit value of the specified numeric character.  -or-  -1, if the specified character is not a digit.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Цифровое значение является свойством, которое применяется только к цифровых символов, которые могут использоваться как цифры. Цифра — числовой символ, который можно объединить с другими цифрами для представления числа в системе нумерации.  
  
 Дополнительные сведения о символов Юникода, см. в разделе [стандарта Юникода](http://go.microsoft.com/fwlink/?linkid=37123).  
  
   
  
## Examples  
 В следующем примере кода показано значений, возвращаемых каждым методом для разных типов символов.  
  
 [!code-cpp[System.Globalization.CharUnicodeInfo_Char#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Globalization.CharUnicodeInfo_Char/CPP/charunicodeinfo_char.cpp#1)]
 [!code-csharp[System.Globalization.CharUnicodeInfo_Char#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Globalization.CharUnicodeInfo_Char/CS/charunicodeinfo_char.cs#1)]
 [!code-vb[System.Globalization.CharUnicodeInfo_Char#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Globalization.CharUnicodeInfo_Char/VB/charunicodeinfo_char.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetDigitValue">
      <MemberSignature Language="C#" Value="public static int GetDigitValue (string s, int index);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig int32 GetDigitValue(string s, int32 index) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Globalization.CharUnicodeInfo.GetDigitValue(System.String,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function GetDigitValue (s As String, index As Integer) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static int GetDigitValue(System::String ^ s, int index);" />
      <MemberSignature Language="F#" Value="static member GetDigitValue : string * int -&gt; int" Usage="System.Globalization.CharUnicodeInfo.GetDigitValue (s, index)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="s" Type="System.String" />
        <Parameter Name="index" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="s">The <see cref="T:System.String" /> containing the Unicode character for which to get the digit value.</param>
        <param name="index">The index of the Unicode character for which to get the digit value.</param>
        <summary>Gets the digit value of the numeric character at the specified index of the specified string.</summary>
        <returns>The digit value of the numeric character at the specified index of the specified string.  -or-  -1, if the character at the specified index of the specified string is not a digit.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Цифровое значение является свойством, которое применяется только к цифровых символов, которые могут использоваться как цифры. Цифра — числовой символ, который можно объединить с другими цифрами для представления числа в системе нумерации.  
  
 Дополнительные сведения о символов Юникода, см. в разделе [стандарта Юникода](http://go.microsoft.com/fwlink/?linkid=37123).  
  
   
  
## Examples  
 В следующем примере кода показано значений, возвращаемых каждым методом для разных типов символов.  
  
 [!code-cpp[System.Globalization.CharUnicodeInfo_String#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Globalization.CharUnicodeInfo_String/CPP/charunicodeinfo_string.cpp#1)]
 [!code-csharp[System.Globalization.CharUnicodeInfo_String#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Globalization.CharUnicodeInfo_String/CS/charunicodeinfo_string.cs#1)]
 [!code-vb[System.Globalization.CharUnicodeInfo_String#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Globalization.CharUnicodeInfo_String/VB/charunicodeinfo_string.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="s" /> is <see langword="null" />.</exception>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <paramref name="index" /> is outside the range of valid indexes in <paramref name="s" />.</exception>
      </Docs>
    </Member>
    <MemberGroup MemberName="GetNumericValue">
      <AssemblyInfo>
        <AssemblyName>System.Globalization</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Gets the numeric value associated with a Unicode character.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="GetNumericValue">
      <MemberSignature Language="C#" Value="public static double GetNumericValue (char ch);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig float64 GetNumericValue(char ch) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Globalization.CharUnicodeInfo.GetNumericValue(System.Char)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function GetNumericValue (ch As Char) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static double GetNumericValue(char ch);" />
      <MemberSignature Language="F#" Value="static member GetNumericValue : char -&gt; double" Usage="System.Globalization.CharUnicodeInfo.GetNumericValue ch" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Globalization</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="ch" Type="System.Char" />
      </Parameters>
      <Docs>
        <param name="ch">The Unicode character for which to get the numeric value.</param>
        <summary>Gets the numeric value associated with the specified character.</summary>
        <returns>The numeric value associated with the specified character.  -or-  -1, if the specified character is not a numeric character.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Числовое значение — это свойство символов Юникода, которая применяется только к числовым символам, включая дроби, подстрочные знаки, надстрочные знаки, римские цифры, числители валюты, обведенные числа и цифры конкретного скрипта. Дополнительные сведения о символов Юникода, см. в разделе [стандарта Юникода](http://go.microsoft.com/fwlink/?linkid=37123).  
  
 <xref:System.Globalization.CharUnicodeInfo.GetNumericValue%28System.Char%29> Метод предполагает, что `ch` соответствует один символ лингвистические и проверяет, можно ли преобразовать этот символ для десятичной цифрой. Тем не менее, некоторые числа в стандарте Юникода представлены двумя <xref:System.Char> объекты, образующие суррогатную пару. Например Aegean системы нумерации состоит кодовых позиций U + 10107 до U + 10133. В следующем примере используется <xref:System.Char.ConvertFromUtf32%2A> метод для создания экземпляра строка, представляющая AEGEAN номер один. Как видно в результатах показано в примере <xref:System.Globalization.CharUnicodeInfo.GetNumericValue%28System.Char%29> метод возвращает -1, если он передается старшим или младшим символом-заместителем для кодировки этого символа.  
  
 [!code-csharp[System.Globalization.CharUnicodeInfo.GetNumericValue#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.globalization.charunicodeinfo.getnumericvalue/cs/getnumericvalue1.cs#2)]
 [!code-vb[System.Globalization.CharUnicodeInfo.GetNumericValue#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.globalization.charunicodeinfo.getnumericvalue/vb/getnumericvalue1.vb#2)]  
  
   
  
## Examples  
 В следующем примере кода показано значений, возвращаемых каждым методом для разных типов символов.  
  
 [!code-cpp[System.Globalization.CharUnicodeInfo_Char#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Globalization.CharUnicodeInfo_Char/CPP/charunicodeinfo_char.cpp#1)]
 [!code-csharp[System.Globalization.CharUnicodeInfo_Char#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Globalization.CharUnicodeInfo_Char/CS/charunicodeinfo_char.cs#1)]
 [!code-vb[System.Globalization.CharUnicodeInfo_Char#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Globalization.CharUnicodeInfo_Char/VB/charunicodeinfo_char.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetNumericValue">
      <MemberSignature Language="C#" Value="public static double GetNumericValue (string s, int index);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig float64 GetNumericValue(string s, int32 index) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Globalization.CharUnicodeInfo.GetNumericValue(System.String,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function GetNumericValue (s As String, index As Integer) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static double GetNumericValue(System::String ^ s, int index);" />
      <MemberSignature Language="F#" Value="static member GetNumericValue : string * int -&gt; double" Usage="System.Globalization.CharUnicodeInfo.GetNumericValue (s, index)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Globalization</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="s" Type="System.String" />
        <Parameter Name="index" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="s">The <see cref="T:System.String" /> containing the Unicode character for which to get the numeric value.</param>
        <param name="index">The index of the Unicode character for which to get the numeric value.</param>
        <summary>Gets the numeric value associated with the character at the specified index of the specified string.</summary>
        <returns>The numeric value associated with the character at the specified index of the specified string.  -or-  -1, if the character at the specified index of the specified string is not a numeric character.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Числовое значение — это свойство символов Юникода, которая применяется только к числовым символам, включая дроби, подстрочные знаки, надстрочные знаки, римские цифры, числители валюты, обведенные числа и цифры конкретного скрипта. Дополнительные сведения о символов Юникода, см. в разделе [стандарта Юникода](http://go.microsoft.com/fwlink/?linkid=37123).  
  
 Если <xref:System.Char> объект в позиции `index` является первым символом допустимым суррогатной пары, <xref:System.Globalization.CharUnicodeInfo.GetNumericValue%28System.String%2CSystem.Int32%29> метод определяет ли суррогатной пары форм цифры и, если это так, возвращает его числовое значение. Например Aegean системы нумерации состоит кодовых позиций U + 10107 до U + 10133. В следующем примере используется <xref:System.Char.ConvertFromUtf32%2A> метод для создания экземпляра строка, представляющая каждого Aegean числа. Как видно в результатах показано в примере <xref:System.Globalization.CharUnicodeInfo.GetNumericValue%28System.String%2CSystem.Int32%29> метод возвращает правильный числовое значение, если он передается старшим символом-заместителем Aegean номера. Тем не менее если он передается младший символ-заместитель, считает, что только младшего в изоляции и возвращает – 1.  
  
 [!code-csharp[System.Globalization.CharUnicodeInfo.GetNumericValue#3](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.globalization.charunicodeinfo.getnumericvalue/cs/getnumericvalue1.cs#3)]
 [!code-vb[System.Globalization.CharUnicodeInfo.GetNumericValue#3](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.globalization.charunicodeinfo.getnumericvalue/vb/getnumericvalue1.vb#3)]  
  
   
  
## Examples  
 В следующем примере кода показано значений, возвращаемых каждым методом для разных типов символов.  
  
 [!code-cpp[System.Globalization.CharUnicodeInfo_String#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Globalization.CharUnicodeInfo_String/CPP/charunicodeinfo_string.cpp#1)]
 [!code-csharp[System.Globalization.CharUnicodeInfo_String#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Globalization.CharUnicodeInfo_String/CS/charunicodeinfo_string.cs#1)]
 [!code-vb[System.Globalization.CharUnicodeInfo_String#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Globalization.CharUnicodeInfo_String/VB/charunicodeinfo_string.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="s" /> is <see langword="null" />.</exception>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <paramref name="index" /> is outside the range of valid indexes in <paramref name="s" />.</exception>
      </Docs>
    </Member>
    <MemberGroup MemberName="GetUnicodeCategory">
      <AssemblyInfo>
        <AssemblyName>System.Globalization</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Gets the Unicode category of a Unicode character.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="GetUnicodeCategory">
      <MemberSignature Language="C#" Value="public static System.Globalization.UnicodeCategory GetUnicodeCategory (char ch);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.Globalization.UnicodeCategory GetUnicodeCategory(char ch) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Globalization.CharUnicodeInfo.GetUnicodeCategory(System.Char)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function GetUnicodeCategory (ch As Char) As UnicodeCategory" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Globalization::UnicodeCategory GetUnicodeCategory(char ch);" />
      <MemberSignature Language="F#" Value="static member GetUnicodeCategory : char -&gt; System.Globalization.UnicodeCategory" Usage="System.Globalization.CharUnicodeInfo.GetUnicodeCategory ch" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Globalization</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Globalization.UnicodeCategory</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="ch" Type="System.Char" />
      </Parameters>
      <Docs>
        <param name="ch">The Unicode character for which to get the Unicode category.</param>
        <summary>Gets the Unicode category of the specified character.</summary>
        <returns>A <see cref="T:System.Globalization.UnicodeCategory" /> value indicating the category of the specified character.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Символы Юникода делятся на категории. Категория символа является одним из его свойств. Например символ может быть прописной буквой, буквой в нижнем регистре, десятичной цифрой, буквы, цифры, знаком пунктуации соединителя, математическим символом или символ валюты. <xref:System.Globalization.UnicodeCategory> Класс возвращает диапазон символов Юникода. Дополнительные сведения о символов Юникода, см. в разделе [стандарта Юникода](http://go.microsoft.com/fwlink/?linkid=37123).  
  
 <xref:System.Globalization.CharUnicodeInfo.GetUnicodeCategory%2A> Метод предполагает, что `ch` соответствует один символ лингвистические и возвращает его категории. Это означает, что для суррогатных пар, он возвращает <xref:System.Globalization.UnicodeCategory.Surrogate?displayProperty=nameWithType> вместо категории, к которой принадлежит суррогат. Например Ugaritic алфавита занимает кодовые точки U + 10380 до U + 1039F. В следующем примере используется <xref:System.Char.ConvertFromUtf32%2A> метод для создания экземпляра строка, представляющая ALPA UGARITIC букву (U + 10380), который является первой буквы алфавита Ugaritic. Как видно в результатах показано в примере <xref:System.Char.IsNumber%28System.Char%29> возвращает метод `false` если он передается старшим символом-заместителем или меньшим заменяющим значением этого символа.  
  
 [!code-csharp[System.Globalization.CharUnicodeInfo.GetUnicodeCategory#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.globalization.charunicodeinfo.getunicodecategory/cs/getunicodecategory1.cs#1)]
 [!code-vb[System.Globalization.CharUnicodeInfo.GetUnicodeCategory#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.globalization.charunicodeinfo.getunicodecategory/vb/getunicodecategory1.vb#1)]  
  
 Обратите внимание, что <xref:System.Globalization.CharUnicodeInfo.GetUnicodeCategory%2A?displayProperty=nameWithType> не всегда возвращает же <xref:System.Globalization.UnicodeCategory> значение как <xref:System.Char.GetUnicodeCategory%2A?displayProperty=nameWithType> метод при передаче конкретного символа в качестве параметра. <xref:System.Globalization.CharUnicodeInfo.GetUnicodeCategory%2A?displayProperty=nameWithType> Метод создан в соответствии с текущей версией стандарта Юникода. В противоположность этому несмотря на то что <xref:System.Char.GetUnicodeCategory%2A?displayProperty=nameWithType> метод обычно отражает текущую версию стандарта Юникод, он может возвращать категорию символа, основываясь на предыдущей версии стандарта или может быть возвращено категорию, которая отличается от текущего стандарта для сохранения обратной совместимости.  
  
   
  
## Examples  
 В следующем примере кода показано значений, возвращаемых каждым методом для разных типов символов.  
  
 [!code-cpp[System.Globalization.CharUnicodeInfo_Char#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Globalization.CharUnicodeInfo_Char/CPP/charunicodeinfo_char.cpp#1)]
 [!code-csharp[System.Globalization.CharUnicodeInfo_Char#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Globalization.CharUnicodeInfo_Char/CS/charunicodeinfo_char.cs#1)]
 [!code-vb[System.Globalization.CharUnicodeInfo_Char#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Globalization.CharUnicodeInfo_Char/VB/charunicodeinfo_char.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Globalization.UnicodeCategory" />
      </Docs>
    </Member>
    <Member MemberName="GetUnicodeCategory">
      <MemberSignature Language="C#" Value="public static System.Globalization.UnicodeCategory GetUnicodeCategory (int codePoint);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.Globalization.UnicodeCategory GetUnicodeCategory(int32 codePoint) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Globalization.CharUnicodeInfo.GetUnicodeCategory(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function GetUnicodeCategory (codePoint As Integer) As UnicodeCategory" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Globalization::UnicodeCategory GetUnicodeCategory(int codePoint);" />
      <MemberSignature Language="F#" Value="static member GetUnicodeCategory : int -&gt; System.Globalization.UnicodeCategory" Usage="System.Globalization.CharUnicodeInfo.GetUnicodeCategory codePoint" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Globalization.UnicodeCategory</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="codePoint" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="codePoint">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetUnicodeCategory">
      <MemberSignature Language="C#" Value="public static System.Globalization.UnicodeCategory GetUnicodeCategory (string s, int index);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.Globalization.UnicodeCategory GetUnicodeCategory(string s, int32 index) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Globalization.CharUnicodeInfo.GetUnicodeCategory(System.String,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function GetUnicodeCategory (s As String, index As Integer) As UnicodeCategory" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Globalization::UnicodeCategory GetUnicodeCategory(System::String ^ s, int index);" />
      <MemberSignature Language="F#" Value="static member GetUnicodeCategory : string * int -&gt; System.Globalization.UnicodeCategory" Usage="System.Globalization.CharUnicodeInfo.GetUnicodeCategory (s, index)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Globalization</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Globalization.UnicodeCategory</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="s" Type="System.String" />
        <Parameter Name="index" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="s">The <see cref="T:System.String" /> containing the Unicode character for which to get the Unicode category.</param>
        <param name="index">The index of the Unicode character for which to get the Unicode category.</param>
        <summary>Gets the Unicode category of the character at the specified index of the specified string.</summary>
        <returns>A <see cref="T:System.Globalization.UnicodeCategory" /> value indicating the category of the character at the specified index of the specified string.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Символы Юникода делятся на категории. Категория символа является одним из его свойств. Например символ может быть прописной буквой, буквой в нижнем регистре, десятичной цифрой, буквы, цифры, знаком пунктуации соединителя, математическим символом или символ валюты. <xref:System.Globalization.UnicodeCategory> Класс возвращает диапазон символов Юникода. Дополнительные сведения о символов Юникода, см. в разделе [стандарта Юникода](http://go.microsoft.com/fwlink/?linkid=37123).  
  
 Если <xref:System.Char> объект в позиции `index` является первым символом допустимым суррогатной пары, <xref:System.Globalization.CharUnicodeInfo.GetUnicodeCategory%28System.String%2CSystem.Int32%29> метод возвращает категорию Юникода суррогатной пары, вместо возвращения <xref:System.Globalization.UnicodeCategory.Surrogate?displayProperty=nameWithType>. Например Ugaritic алфавита занимает кодовые точки U + 10380 до U + 1039F. В следующем примере используется <xref:System.Char.ConvertFromUtf32%2A> метод для создания экземпляра строка, представляющая ALPA UGARITIC букву (U + 10380), который является первой буквы алфавита Ugaritic. Как видно в результатах показано в примере <xref:System.Globalization.CharUnicodeInfo.GetUnicodeCategory%28System.String%2CSystem.Int32%29> возвращает метод <xref:System.Globalization.UnicodeCategory.OtherLetter?displayProperty=nameWithType> он передается старшего этот символ, который указывает, что он считает, что пары символов-заместителей. Тем не менее, если он передается младший символ-заместитель, он считает, что только младшего изолированно и возвращает <xref:System.Globalization.UnicodeCategory.Surrogate?displayProperty=nameWithType>.  
  
 [!code-csharp[System.Globalization.CharUnicodeInfo.GetUnicodeCategory#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.globalization.charunicodeinfo.getunicodecategory/cs/getunicodecategory1.cs#2)]
 [!code-vb[System.Globalization.CharUnicodeInfo.GetUnicodeCategory#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.globalization.charunicodeinfo.getunicodecategory/vb/getunicodecategory1.vb#2)]  
  
 Обратите внимание, что <xref:System.Globalization.CharUnicodeInfo.GetUnicodeCategory%2A?displayProperty=nameWithType> метод всегда возвращает же <xref:System.Globalization.UnicodeCategory> значение как <xref:System.Char.GetUnicodeCategory%2A?displayProperty=nameWithType> метод при передаче конкретного символа в качестве параметра. <xref:System.Globalization.CharUnicodeInfo.GetUnicodeCategory%2A?displayProperty=nameWithType> Метод создан в соответствии с текущей версией стандарта Юникода. В противоположность этому несмотря на то что <xref:System.Char.GetUnicodeCategory%2A?displayProperty=nameWithType> метод обычно отражает текущую версию стандарта Юникод, он может возвращать категорию символа, основываясь на предыдущей версии стандарта или может быть возвращено категорию, которая отличается от текущего стандарта для сохранения обратной совместимости.  
  
   
  
## Examples  
 В следующем примере кода показано значений, возвращаемых каждым методом для разных типов символов.  
  
 [!code-cpp[System.Globalization.CharUnicodeInfo_String#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Globalization.CharUnicodeInfo_String/CPP/charunicodeinfo_string.cpp#1)]
 [!code-csharp[System.Globalization.CharUnicodeInfo_String#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Globalization.CharUnicodeInfo_String/CS/charunicodeinfo_string.cs#1)]
 [!code-vb[System.Globalization.CharUnicodeInfo_String#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Globalization.CharUnicodeInfo_String/VB/charunicodeinfo_string.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="s" /> is <see langword="null" />.</exception>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <paramref name="index" /> is outside the range of valid indexes in <paramref name="s" />.</exception>
        <altmember cref="T:System.Globalization.UnicodeCategory" />
      </Docs>
    </Member>
  </Members>
</Type>