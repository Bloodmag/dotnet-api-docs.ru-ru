<Type Name="CompareInfo" FullName="System.Globalization.CompareInfo">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="a42de7a60ea69dbfbe903a0a445bc3a7856a8f41" />
    <Meta Name="ms.sourcegitcommit" Value="5a49536d99d2d0b54e4cb7280870903e043272df" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="ru-RU" />
    <Meta Name="ms.lasthandoff" Value="07/03/2018" />
    <Meta Name="ms.locfileid" Value="37656511" />
  </Metadata>
  <TypeSignature Language="C#" Value="public class CompareInfo : System.Runtime.Serialization.IDeserializationCallback" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi serializable beforefieldinit CompareInfo extends System.Object implements class System.Runtime.Serialization.IDeserializationCallback" />
  <TypeSignature Language="DocId" Value="T:System.Globalization.CompareInfo" />
  <TypeSignature Language="VB.NET" Value="Public Class CompareInfo&#xA;Implements IDeserializationCallback" />
  <TypeSignature Language="C++ CLI" Value="public ref class CompareInfo : System::Runtime::Serialization::IDeserializationCallback" />
  <TypeSignature Language="F#" Value="type CompareInfo = class&#xA;    interface IDeserializationCallback" />
  <AssemblyInfo>
    <AssemblyName>System.Globalization</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.10.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>mscorlib</AssemblyName>
    <AssemblyVersion>1.0.5000.0</AssemblyVersion>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>System.Runtime</AssemblyName>
    <AssemblyVersion>4.2.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.1.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>System.Runtime.Serialization.IDeserializationCallback</InterfaceName>
    </Interface>
  </Interfaces>
  <Attributes>
    <Attribute>
      <AttributeName>System.Runtime.InteropServices.ComVisible(true)</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>Implements a set of methods for culture-sensitive string comparisons.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Соглашения для сравнения и сортировки данных зависят от языка и региональных параметров для языка и региональных параметров. Например порядок сортировки может быть основана на Фонетическое название или визуальное представление символов. В восточно-азиатских языков символы являются отсортированный обводкой и корнями идеограмм. Также сортировки зависит от порядка языков и использовать языки и региональные параметры для алфавита. Например датского языка есть символ «Æ», который в алфавите после «Z». Кроме того может быть сравнение зависеть от регистра символов и правила определения регистра также могут зависеть от языка и региональных параметров. <xref:System.Globalization.CompareInfo> Класс отвечает за обслуживание эти данные сравнения строк с учетом языка и региональных параметров, а также для выполнения операций строк с учетом языка и региональных параметров.  
  
 Как правило, нет необходимости создания экземпляра <xref:System.Globalization.CompareInfo> объекта непосредственно, поскольку один неявно используют все операции сравнения строк не порядковый номер, включая вызовы <xref:System.String.Compare%2A?displayProperty=nameWithType> метод. Тем не менее если вы хотите получить <xref:System.Globalization.CompareInfo> объекта, это можно сделать одним из следующих способов:  
  
-   Извлекая значение <xref:System.Globalization.CultureInfo.CompareInfo%2A?displayProperty=nameWithType> свойства для конкретного языка и региональных параметров.  
  
-   Путем вызова статического <xref:System.Globalization.CompareInfo.GetCompareInfo%2A> метод с именем языка и региональных параметров. Разрешает доступ с поздним связыванием для <xref:System.Globalization.CompareInfo> объекта.  
  
## <a name="ignored-search-values"></a>Пропущенные значения поиска  
 Наборы символов содержат игнорируемые символы, то есть символы, которые не учитываются при выполнении лингвистического сравнения или сравнения с учетом языка и региональных параметров. Сравнение методов, таких как <xref:System.Globalization.CompareInfo.IndexOf%2A> и <xref:System.Globalization.CompareInfo.LastIndexOf%2A> не учитывает такие символы при выполнении учитывающего культуру сравнения. Игнорируемые символы включают:  
  
-   <xref:System.String.Empty?displayProperty=nameWithType>. Сравнение с учетом языка и региональных параметров методы всегда будет найти пустую строку в начале искомая строка (нулевой индекс).  
  
-   Символ или строка, состоящая из символов, с помощью кодовых позиций, которые не учитываются во время выполнения операции из-за параметров сравнения, в частности, <xref:System.Globalization.CompareOptions.IgnoreNonSpace?displayProperty=nameWithType> и <xref:System.Globalization.CompareOptions.IgnoreSymbols?displayProperty=nameWithType> параметры выдают поисковые запросы, в какие символы и непробельные объединения символы учитываются.  
  
-   Строковое значение с помощью кодовых позиций, которые не имеют лингвистического значения. Например мягкий перенос (U + 00AD) всегда игнорируется при сравнении строк с учетом языка и региональных параметров.  
  
## <a name="security-considerations"></a>Замечания по безопасности  
 Если решение безопасности зависит от того, сравнения строк или изменения регистра, следует использовать <xref:System.Globalization.CultureInfo.InvariantCulture%2A> свойство, чтобы убедиться, что поведение согласована, независимо от настроек языка и региональных параметров операционной системы.  
  
> [!NOTE]
>  По возможности следует использовать методы сравнения строк, которые имеют параметр типа <xref:System.Globalization.CompareOptions> для указания ожидаемого вида сравнения. Как правило, используйте лингвистических параметров (с использованием текущего языка и региональных параметров) для сравнения строк, отображаемых в пользовательском интерфейсе и укажите <xref:System.Globalization.CompareOptions.Ordinal> или <xref:System.Globalization.CompareOptions.OrdinalIgnoreCase> для сравнений безопасности.  
  
   
  
## Examples  
 В следующем примере показан как <xref:System.Globalization.CompareInfo> объект, связанный с <xref:System.Globalization.CultureInfo> объект влияет на сравнение строк.  
  
 [!code-cpp[CompareInfo#1](~/samples/snippets/cpp/VS_Snippets_CLR/CompareInfo/cpp/CompareInfo.cpp#1)]
 [!code-csharp[CompareInfo#1](~/samples/snippets/csharp/VS_Snippets_CLR/CompareInfo/CS/CompareInfo.cs#1)]
 [!code-vb[CompareInfo#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/CompareInfo/VB/CompareInfo.vb#1)]  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <MemberGroup MemberName="Compare">
      <AssemblyInfo>
        <AssemblyName>System.Globalization</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Compares two strings.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Compare">
      <MemberSignature Language="C#" Value="public virtual int Compare (string string1, string string2);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance int32 Compare(string string1, string string2) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Globalization.CompareInfo.Compare(System.String,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function Compare (string1 As String, string2 As String) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual int Compare(System::String ^ string1, System::String ^ string2);" />
      <MemberSignature Language="F#" Value="abstract member Compare : string * string -&gt; int&#xA;override this.Compare : string * string -&gt; int" Usage="compareInfo.Compare (string1, string2)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Globalization</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="string1" Type="System.String" />
        <Parameter Name="string2" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="string1">The first string to compare.</param>
        <param name="string2">The second string to compare.</param>
        <summary>Compares two strings.</summary>
        <returns>A 32-bit signed integer indicating the lexical relationship between the two comparands.  
  
 <list type="table"><listheader><term> Value  </term><description> Condition  </description></listheader><item><term> zero  </term><description> The two strings are equal.  </description></item><item><term> less than zero  </term><description><paramref name="string1" /> is less than <paramref name="string2" />.  </description></item><item><term> greater than zero  </term><description><paramref name="string1" /> is greater than <paramref name="string2" />.  </description></item></list></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 По умолчанию сравнение выполняется с помощью <xref:System.Globalization.CompareOptions.None?displayProperty=nameWithType>. Если решение безопасности зависит от того, сравнения строк или изменения регистра, следует использовать <xref:System.Globalization.CultureInfo.InvariantCulture%2A> свойство, чтобы убедиться, что поведение было согласованным независимо от настроек языка и региональных параметров операционной системы.  
  
> [!NOTE]
>  По возможности следует вызывать строковое сравнение методов, которые имеют параметр типа <xref:System.Globalization.CompareOptions> для указания ожидаемого вида сравнения. Как правило, используйте лингвистических параметров (с использованием текущего языка и региональных параметров) для сравнения строк, отображаемых в пользовательском интерфейсе и укажите <xref:System.Globalization.CompareOptions.Ordinal> или <xref:System.Globalization.CompareOptions.OrdinalIgnoreCase> для сравнений безопасности.  
  
   
  
## Examples  
 В следующем примере сравниваются две строки с использованием различных частей <xref:System.Globalization.CompareInfo> объектов:  
  
-   <xref:System.Globalization.CompareInfo> Объект, связанный с языком и региональными параметрами испанский (Испания) с международная сортировка  
  
-   <xref:System.Globalization.CompareInfo> Объект, связанный с языком и региональными параметрами испанский (Испания) с традиционная сортировка  
  
-   <xref:System.Globalization.CompareInfo> Объект, связанный с <xref:System.Globalization.CultureInfo.InvariantCulture%2A>  
  
 [!code-cpp[System.Globalization.CompareInfo.CompareStrStr#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Globalization.CompareInfo.CompareStrStr/CPP/comparestrstr.cpp#1)]
 [!code-csharp[System.Globalization.CompareInfo.CompareStrStr#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Globalization.CompareInfo.CompareStrStr/CS/comparestrstr.cs#1)]
 [!code-vb[System.Globalization.CompareInfo.CompareStrStr#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Globalization.CompareInfo.CompareStrStr/VB/comparestrstr.vb#1)]  
  
 В следующем примере демонстрируется вызов метода <xref:System.Globalization.CompareInfo.Compare%2A>.  
  
 [!code-cpp[CompareInfo#1](~/samples/snippets/cpp/VS_Snippets_CLR/CompareInfo/cpp/CompareInfo.cpp#1)]
 [!code-csharp[CompareInfo#1](~/samples/snippets/csharp/VS_Snippets_CLR/CompareInfo/CS/CompareInfo.cs#1)]
 [!code-vb[CompareInfo#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/CompareInfo/VB/CompareInfo.vb#1)]  
  
 ]]></format>
        </remarks>
        <block subset="none" type="usage">
          <para>Наборы символов содержат игнорируемые символы, то есть символы, которые не учитываются при выполнении лингвистического или зависящих от языка и региональных параметров сравнения. <see cref="M:System.Globalization.CompareInfo.Compare(System.String,System.String)" /> Метод не учитывает такие символы, когда он выполняет сравнение с учетом языка и региональных параметров. Например сравнение с учетом языка и региональных параметров «Animal» с «ani использовать» (с помощью мягкий перенос или 00AD U +) указывает, что две строки равны, как показано в следующем примере.  [! code-vb[System.Globalization.CompareInfo.Compare#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.globalization.compareinfo.compare/vb/compare1.vb#1)]  Для распознавания игнорируемые символы в сравнении строк, вызвать <see cref="M:System.Globalization.CompareInfo.Compare(System.String,System.String,System.Globalization.CompareOptions)" /> метод и задать значение либо <see cref="F:System.Globalization.CompareOptions.Ordinal" /> или <see cref="F:System.Globalization.CompareOptions.OrdinalIgnoreCase" /> для <paramref name="options" /> параметра.</para>
        </block>
      </Docs>
    </Member>
    <Member MemberName="Compare">
      <MemberSignature Language="C#" Value="public virtual int Compare (string string1, string string2, System.Globalization.CompareOptions options);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance int32 Compare(string string1, string string2, valuetype System.Globalization.CompareOptions options) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Globalization.CompareInfo.Compare(System.String,System.String,System.Globalization.CompareOptions)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function Compare (string1 As String, string2 As String, options As CompareOptions) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual int Compare(System::String ^ string1, System::String ^ string2, System::Globalization::CompareOptions options);" />
      <MemberSignature Language="F#" Value="abstract member Compare : string * string * System.Globalization.CompareOptions -&gt; int&#xA;override this.Compare : string * string * System.Globalization.CompareOptions -&gt; int" Usage="compareInfo.Compare (string1, string2, options)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Globalization</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="string1" Type="System.String" />
        <Parameter Name="string2" Type="System.String" />
        <Parameter Name="options" Type="System.Globalization.CompareOptions" />
      </Parameters>
      <Docs>
        <param name="string1">The first string to compare.</param>
        <param name="string2">The second string to compare.</param>
        <param name="options">A value that defines how <c>string1</c> and <c>string2</c> should be compared. <c>options</c> is either the enumeration value <see cref="F:System.Globalization.CompareOptions.Ordinal" />, or a bitwise combination of one or more of the following values: <see cref="F:System.Globalization.CompareOptions.IgnoreCase" />, <see cref="F:System.Globalization.CompareOptions.IgnoreSymbols" />, <see cref="F:System.Globalization.CompareOptions.IgnoreNonSpace" />, <see cref="F:System.Globalization.CompareOptions.IgnoreWidth" />, <see cref="F:System.Globalization.CompareOptions.IgnoreKanaType" />, and <see cref="F:System.Globalization.CompareOptions.StringSort" />.</param>
        <summary>Compares two strings using the specified <see cref="T:System.Globalization.CompareOptions" /> value.</summary>
        <returns>A 32-bit signed integer indicating the lexical relationship between the two comparands.  
  
 <list type="table"><listheader><term> Value  </term><description> Condition  </description></listheader><item><term> zero  </term><description> The two strings are equal.  </description></item><item><term> less than zero  </term><description><paramref name="string1" /> is less than <paramref name="string2" />.  </description></item><item><term> greater than zero  </term><description><paramref name="string1" /> is greater than <paramref name="string2" />.  </description></item></list></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Если решение безопасности зависит от того, сравнения строк или изменения регистра, следует использовать <xref:System.Globalization.CultureInfo.InvariantCulture%2A> свойство, чтобы убедиться, что поведение было согласованным независимо от настроек языка и региональных параметров операционной системы.  
  
> [!NOTE]
>  По возможности следует вызывать строковое сравнение методов, которые имеют параметр типа <xref:System.Globalization.CompareOptions> для указания ожидаемого вида сравнения. Как правило, используйте лингвистических параметров (с использованием текущего языка и региональных параметров) для сравнения строк, отображаемых в пользовательском интерфейсе и укажите <xref:System.Globalization.CompareOptions.Ordinal> или <xref:System.Globalization.CompareOptions.OrdinalIgnoreCase> для сравнений безопасности.  
  
   
  
## Examples  
 В следующем примере сравниваются две строки с использованием разных <xref:System.Globalization.CompareOptions> параметры.  
  
 [!code-cpp[System.Globalization.CompareInfo.CompareStrStrOpt#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Globalization.CompareInfo.CompareStrStrOpt/CPP/comparestrstropt.cpp#1)]
 [!code-csharp[System.Globalization.CompareInfo.CompareStrStrOpt#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Globalization.CompareInfo.CompareStrStrOpt/CS/comparestrstropt.cs#1)]
 [!code-vb[System.Globalization.CompareInfo.CompareStrStrOpt#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Globalization.CompareInfo.CompareStrStrOpt/VB/comparestrstropt.vb#1)]  
  
 В следующем примере демонстрируется вызов метода <xref:System.Globalization.CompareInfo.Compare%2A>.  
  
 [!code-cpp[CompareInfo#1](~/samples/snippets/cpp/VS_Snippets_CLR/CompareInfo/cpp/CompareInfo.cpp#1)]
 [!code-csharp[CompareInfo#1](~/samples/snippets/csharp/VS_Snippets_CLR/CompareInfo/CS/CompareInfo.cs#1)]
 [!code-vb[CompareInfo#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/CompareInfo/VB/CompareInfo.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <paramref name="options" /> contains an invalid <see cref="T:System.Globalization.CompareOptions" /> value.</exception>
        <block subset="none" type="usage">
          <para>Наборы символов содержат игнорируемые символы, то есть символы, которые не учитываются при выполнении лингвистического или зависящих от языка и региональных параметров сравнения. <see cref="M:System.Globalization.CompareInfo.Compare(System.String,System.String,System.Globalization.CompareOptions)" /> Метод не учитывает такие символы, когда он выполняет сравнение с учетом языка и региональных параметров. Для распознавания игнорируемые символы в сравнение, укажите в качестве параметра <see cref="F:System.Globalization.CompareOptions.Ordinal" /> или <see cref="F:System.Globalization.CompareOptions.OrdinalIgnoreCase" /> для <paramref name="options" /> параметра.</para>
        </block>
        <altmember cref="T:System.Globalization.CompareOptions" />
      </Docs>
    </Member>
    <Member MemberName="Compare">
      <MemberSignature Language="C#" Value="public virtual int Compare (string string1, int offset1, string string2, int offset2);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance int32 Compare(string string1, int32 offset1, string string2, int32 offset2) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Globalization.CompareInfo.Compare(System.String,System.Int32,System.String,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function Compare (string1 As String, offset1 As Integer, string2 As String, offset2 As Integer) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual int Compare(System::String ^ string1, int offset1, System::String ^ string2, int offset2);" />
      <MemberSignature Language="F#" Value="abstract member Compare : string * int * string * int -&gt; int&#xA;override this.Compare : string * int * string * int -&gt; int" Usage="compareInfo.Compare (string1, offset1, string2, offset2)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Globalization</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="string1" Type="System.String" />
        <Parameter Name="offset1" Type="System.Int32" />
        <Parameter Name="string2" Type="System.String" />
        <Parameter Name="offset2" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="string1">The first string to compare.</param>
        <param name="offset1">The zero-based index of the character in <c>string1</c> at which to start comparing.</param>
        <param name="string2">The second string to compare.</param>
        <param name="offset2">The zero-based index of the character in <c>string2</c> at which to start comparing.</param>
        <summary>Compares the end section of a string with the end section of another string.</summary>
        <returns>A 32-bit signed integer indicating the lexical relationship between the two comparands.  
  
 <list type="table"><listheader><term> Value  </term><description> Condition  </description></listheader><item><term> zero  </term><description> The two strings are equal.  </description></item><item><term> less than zero  </term><description> The specified section of <paramref name="string1" /> is less than the specified section of <paramref name="string2" />.  </description></item><item><term> greater than zero  </term><description> The specified section of <paramref name="string1" /> is greater than the specified section of <paramref name="string2" />.  </description></item></list></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Если решение безопасности зависит от того, сравнения строк или изменения регистра, следует использовать <xref:System.Globalization.CultureInfo.InvariantCulture%2A> свойство, чтобы убедиться, что поведение было согласованным независимо от настроек языка и региональных параметров операционной системы.  
  
> [!NOTE]
>  По возможности следует вызывать строковое сравнение методов, которые имеют параметр типа <xref:System.Globalization.CompareOptions> для указания ожидаемого вида сравнения. Как правило, используйте лингвистических параметров (с использованием текущего языка и региональных параметров) для сравнения строк, отображаемых в пользовательском интерфейсе и укажите <xref:System.Globalization.CompareOptions.Ordinal> или <xref:System.Globalization.CompareOptions.OrdinalIgnoreCase> для сравнений безопасности.  
  
   
  
## Examples  
 В следующем примере сравниваются две строки с использованием различных частей <xref:System.Globalization.CompareInfo> объектов:  
  
-   <xref:System.Globalization.CompareInfo> Объект, связанный с языком и региональными параметрами испанский (Испания) с международная сортировка  
  
-   <xref:System.Globalization.CompareInfo> Объект, связанный с языком и региональными параметрами испанский (Испания) с традиционная сортировка  
  
-   <xref:System.Globalization.CompareInfo> Объект, связанный с <xref:System.Globalization.CultureInfo.InvariantCulture%2A>  
  
 [!code-cpp[System.Globalization.CompareInfo.CompareStrIntStrInt#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Globalization.CompareInfo.CompareStrIntStrInt/CPP/comparestrintstrint.cpp#1)]
 [!code-csharp[System.Globalization.CompareInfo.CompareStrIntStrInt#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Globalization.CompareInfo.CompareStrIntStrInt/CS/comparestrintstrint.cs#1)]
 [!code-vb[System.Globalization.CompareInfo.CompareStrIntStrInt#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Globalization.CompareInfo.CompareStrIntStrInt/VB/comparestrintstrint.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <paramref name="offset1" /> or <paramref name="offset2" /> is less than zero.  -or-  <paramref name="offset1" /> is greater than or equal to the number of characters in <paramref name="string1" />.  -or-  <paramref name="offset2" /> is greater than or equal to the number of characters in <paramref name="string2" />.</exception>
        <block subset="none" type="usage">
          <para>Наборы символов содержат игнорируемые символы. <see cref="M:System.Globalization.CompareInfo.Compare(System.String,System.Int32,System.String,System.Int32)" /> Метод не учитывает эти символы при выполнении лингвистического или зависящих от языка и региональных параметров сравнения. Для распознавания игнорируемые символы в сравнение, вызовите <see cref="M:System.Globalization.CompareInfo.Compare(System.String,System.Int32,System.String,System.Int32,System.Globalization.CompareOptions)" /> метод и указать значение <see cref="F:System.Globalization.CompareOptions.Ordinal" /> или <see cref="F:System.Globalization.CompareOptions.OrdinalIgnoreCase" /> для <paramref name="options" /> параметра.</para>
        </block>
      </Docs>
    </Member>
    <Member MemberName="Compare">
      <MemberSignature Language="C#" Value="public virtual int Compare (string string1, int offset1, string string2, int offset2, System.Globalization.CompareOptions options);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance int32 Compare(string string1, int32 offset1, string string2, int32 offset2, valuetype System.Globalization.CompareOptions options) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Globalization.CompareInfo.Compare(System.String,System.Int32,System.String,System.Int32,System.Globalization.CompareOptions)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function Compare (string1 As String, offset1 As Integer, string2 As String, offset2 As Integer, options As CompareOptions) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual int Compare(System::String ^ string1, int offset1, System::String ^ string2, int offset2, System::Globalization::CompareOptions options);" />
      <MemberSignature Language="F#" Value="abstract member Compare : string * int * string * int * System.Globalization.CompareOptions -&gt; int&#xA;override this.Compare : string * int * string * int * System.Globalization.CompareOptions -&gt; int" Usage="compareInfo.Compare (string1, offset1, string2, offset2, options)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Globalization</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="string1" Type="System.String" />
        <Parameter Name="offset1" Type="System.Int32" />
        <Parameter Name="string2" Type="System.String" />
        <Parameter Name="offset2" Type="System.Int32" />
        <Parameter Name="options" Type="System.Globalization.CompareOptions" />
      </Parameters>
      <Docs>
        <param name="string1">The first string to compare.</param>
        <param name="offset1">The zero-based index of the character in <c>string1</c> at which to start comparing.</param>
        <param name="string2">The second string to compare.</param>
        <param name="offset2">The zero-based index of the character in <c>string2</c> at which to start comparing.</param>
        <param name="options">A value that defines how <c>string1</c> and <c>string2</c> should be compared. <c>options</c> is either the enumeration value <see cref="F:System.Globalization.CompareOptions.Ordinal" />, or a bitwise combination of one or more of the following values: <see cref="F:System.Globalization.CompareOptions.IgnoreCase" />, <see cref="F:System.Globalization.CompareOptions.IgnoreSymbols" />, <see cref="F:System.Globalization.CompareOptions.IgnoreNonSpace" />, <see cref="F:System.Globalization.CompareOptions.IgnoreWidth" />, <see cref="F:System.Globalization.CompareOptions.IgnoreKanaType" />, and <see cref="F:System.Globalization.CompareOptions.StringSort" />.</param>
        <summary>Compares the end section of a string with the end section of another string using the specified <see cref="T:System.Globalization.CompareOptions" /> value.</summary>
        <returns>A 32-bit signed integer indicating the lexical relationship between the two comparands.  
  
 <list type="table"><listheader><term> Value  </term><description> Condition  </description></listheader><item><term> zero  </term><description> The two strings are equal.  </description></item><item><term> less than zero  </term><description> The specified section of <paramref name="string1" /> is less than the specified section of <paramref name="string2" />.  </description></item><item><term> greater than zero  </term><description> The specified section of <paramref name="string1" /> is greater than the specified section of <paramref name="string2" />.  </description></item></list></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Если решение безопасности зависит от того, сравнения строк или изменения регистра, следует использовать <xref:System.Globalization.CultureInfo.InvariantCulture%2A> свойство, чтобы убедиться, что поведение было согласованным независимо от настроек языка и региональных параметров операционной системы.  
  
> [!NOTE]
>  По возможности следует вызывать строковое сравнение методов, которые имеют параметр типа <xref:System.Globalization.CompareOptions> для указания ожидаемого вида сравнения. Как правило, используйте лингвистических параметров (с использованием текущего языка и региональных параметров) для сравнения строк, отображаемых в пользовательском интерфейсе и укажите <xref:System.Globalization.CompareOptions.Ordinal> или <xref:System.Globalization.CompareOptions.OrdinalIgnoreCase> для сравнений безопасности.  
  
   
  
## Examples  
 В следующем примере сравниваются две строки с использованием различных частей <xref:System.Globalization.CompareOptions> параметры.  
  
 [!code-cpp[System.Globalization.CompareInfo.CompareStrIntStrIntOpt#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Globalization.CompareInfo.CompareStrIntStrIntOpt/CPP/comparestrintstrintopt.cpp#1)]
 [!code-csharp[System.Globalization.CompareInfo.CompareStrIntStrIntOpt#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Globalization.CompareInfo.CompareStrIntStrIntOpt/CS/comparestrintstrintopt.cs#1)]
 [!code-vb[System.Globalization.CompareInfo.CompareStrIntStrIntOpt#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Globalization.CompareInfo.CompareStrIntStrIntOpt/VB/comparestrintstrintopt.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <paramref name="offset1" /> or <paramref name="offset2" /> is less than zero.  -or-  <paramref name="offset1" /> is greater than or equal to the number of characters in <paramref name="string1" />.  -or-  <paramref name="offset2" /> is greater than or equal to the number of characters in <paramref name="string2" />.</exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="options" /> contains an invalid <see cref="T:System.Globalization.CompareOptions" /> value.</exception>
        <block subset="none" type="usage">
          <para>Наборы символов содержат игнорируемые символы, то есть символы, которые не учитываются при выполнении лингвистического или зависящих от языка и региональных параметров сравнения. <see cref="M:System.Globalization.CompareInfo.Compare(System.String,System.Int32,System.String,System.Int32,System.Globalization.CompareOptions)" /> Метод не учитывает такие символы при выполнении учитывающего культуру сравнения. Для распознавания игнорируемые символы в сравнение, укажите в качестве параметра <see cref="F:System.Globalization.CompareOptions.Ordinal" /> или <see cref="F:System.Globalization.CompareOptions.OrdinalIgnoreCase" /> для <paramref name="options" /> параметра.</para>
        </block>
        <altmember cref="T:System.Globalization.CompareOptions" />
      </Docs>
    </Member>
    <Member MemberName="Compare">
      <MemberSignature Language="C#" Value="public virtual int Compare (string string1, int offset1, int length1, string string2, int offset2, int length2);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance int32 Compare(string string1, int32 offset1, int32 length1, string string2, int32 offset2, int32 length2) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Globalization.CompareInfo.Compare(System.String,System.Int32,System.Int32,System.String,System.Int32,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function Compare (string1 As String, offset1 As Integer, length1 As Integer, string2 As String, offset2 As Integer, length2 As Integer) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual int Compare(System::String ^ string1, int offset1, int length1, System::String ^ string2, int offset2, int length2);" />
      <MemberSignature Language="F#" Value="abstract member Compare : string * int * int * string * int * int -&gt; int&#xA;override this.Compare : string * int * int * string * int * int -&gt; int" Usage="compareInfo.Compare (string1, offset1, length1, string2, offset2, length2)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Globalization</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="string1" Type="System.String" />
        <Parameter Name="offset1" Type="System.Int32" />
        <Parameter Name="length1" Type="System.Int32" />
        <Parameter Name="string2" Type="System.String" />
        <Parameter Name="offset2" Type="System.Int32" />
        <Parameter Name="length2" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="string1">The first string to compare.</param>
        <param name="offset1">The zero-based index of the character in <c>string1</c> at which to start comparing.</param>
        <param name="length1">The number of consecutive characters in <c>string1</c> to compare.</param>
        <param name="string2">The second string to compare.</param>
        <param name="offset2">The zero-based index of the character in <c>string2</c> at which to start comparing.</param>
        <param name="length2">The number of consecutive characters in <c>string2</c> to compare.</param>
        <summary>Compares a section of one string with a section of another string.</summary>
        <returns>A 32-bit signed integer indicating the lexical relationship between the two comparands.  
  
 <list type="table"><listheader><term> Value  </term><description> Condition  </description></listheader><item><term> zero  </term><description> The two strings are equal.  </description></item><item><term> less than zero  </term><description> The specified section of <paramref name="string1" /> is less than the specified section of <paramref name="string2" />.  </description></item><item><term> greater than zero  </term><description> The specified section of <paramref name="string1" /> is greater than the specified section of <paramref name="string2" />.  </description></item></list></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Если решение безопасности зависит от того, сравнения строк или изменения регистра, следует использовать <xref:System.Globalization.CultureInfo.InvariantCulture%2A> свойство, чтобы убедиться, что поведение было согласованным независимо от настроек языка и региональных параметров операционной системы.  
  
> [!NOTE]
>  По возможности следует использовать методы сравнения строк, которые имеют параметр типа <xref:System.Globalization.CompareOptions> для указания ожидаемого вида сравнения. Как правило, используйте лингвистических параметров (с использованием текущего языка и региональных параметров) для сравнения строк, отображаемых в пользовательском интерфейсе и укажите <xref:System.Globalization.CompareOptions.Ordinal> или <xref:System.Globalization.CompareOptions.OrdinalIgnoreCase> для сравнений безопасности.  
  
   
  
## Examples  
 В следующем примере сравниваются две строки с использованием различных частей <xref:System.Globalization.CompareInfo> объектов:  
  
-   <xref:System.Globalization.CompareInfo> Объект, связанный с языком и региональными параметрами испанский (Испания) с международная сортировка  
  
-   <xref:System.Globalization.CompareInfo> Объект, связанный с языком и региональными параметрами испанский (Испания) с традиционная сортировка  
  
-   <xref:System.Globalization.CompareInfo> Объект, связанный с <xref:System.Globalization.CultureInfo.InvariantCulture%2A>  
  
 [!code-cpp[System.Globalization.CompareInfo.CompareStrIntIntStrIntInt#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Globalization.CompareInfo.CompareStrIntIntStrIntInt/CPP/comparestrintintstrintint.cpp#1)]
 [!code-csharp[System.Globalization.CompareInfo.CompareStrIntIntStrIntInt#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Globalization.CompareInfo.CompareStrIntIntStrIntInt/CS/comparestrintintstrintint.cs#1)]
 [!code-vb[System.Globalization.CompareInfo.CompareStrIntIntStrIntInt#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Globalization.CompareInfo.CompareStrIntIntStrIntInt/VB/comparestrintintstrintint.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <paramref name="offset1" /> or <paramref name="length1" /> or <paramref name="offset2" /> or <paramref name="length2" /> is less than zero.  -or-  <paramref name="offset1" /> is greater than or equal to the number of characters in <paramref name="string1" />.  -or-  <paramref name="offset2" /> is greater than or equal to the number of characters in <paramref name="string2" />.  -or-  <paramref name="length1" /> is greater than the number of characters from <paramref name="offset1" /> to the end of <paramref name="string1" />.  -or-  <paramref name="length2" /> is greater than the number of characters from <paramref name="offset2" /> to the end of <paramref name="string2" />.</exception>
        <block subset="none" type="usage">
          <para>Наборы символов содержат игнорируемые символы. <see cref="M:System.Globalization.CompareInfo.Compare(System.String,System.Int32,System.Int32,System.String,System.Int32,System.Int32)" /> Метод не учитывает эти символы при выполнении лингвистического или зависящих от языка и региональных параметров сравнения. Для распознавания игнорируемые символы в сравнение, вызовите <see cref="M:System.Globalization.CompareInfo.Compare(System.String,System.Int32,System.Int32,System.String,System.Int32,System.Int32,System.Globalization.CompareOptions)" /> метод и указать значение <see cref="F:System.Globalization.CompareOptions.Ordinal" /> или <see cref="F:System.Globalization.CompareOptions.OrdinalIgnoreCase" /> для <paramref name="options" /> параметра.</para>
        </block>
      </Docs>
    </Member>
    <Member MemberName="Compare">
      <MemberSignature Language="C#" Value="public virtual int Compare (string string1, int offset1, int length1, string string2, int offset2, int length2, System.Globalization.CompareOptions options);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance int32 Compare(string string1, int32 offset1, int32 length1, string string2, int32 offset2, int32 length2, valuetype System.Globalization.CompareOptions options) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Globalization.CompareInfo.Compare(System.String,System.Int32,System.Int32,System.String,System.Int32,System.Int32,System.Globalization.CompareOptions)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function Compare (string1 As String, offset1 As Integer, length1 As Integer, string2 As String, offset2 As Integer, length2 As Integer, options As CompareOptions) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual int Compare(System::String ^ string1, int offset1, int length1, System::String ^ string2, int offset2, int length2, System::Globalization::CompareOptions options);" />
      <MemberSignature Language="F#" Value="abstract member Compare : string * int * int * string * int * int * System.Globalization.CompareOptions -&gt; int&#xA;override this.Compare : string * int * int * string * int * int * System.Globalization.CompareOptions -&gt; int" Usage="compareInfo.Compare (string1, offset1, length1, string2, offset2, length2, options)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Globalization</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="string1" Type="System.String" />
        <Parameter Name="offset1" Type="System.Int32" />
        <Parameter Name="length1" Type="System.Int32" />
        <Parameter Name="string2" Type="System.String" />
        <Parameter Name="offset2" Type="System.Int32" />
        <Parameter Name="length2" Type="System.Int32" />
        <Parameter Name="options" Type="System.Globalization.CompareOptions" />
      </Parameters>
      <Docs>
        <param name="string1">The first string to compare.</param>
        <param name="offset1">The zero-based index of the character in <c>string1</c> at which to start comparing.</param>
        <param name="length1">The number of consecutive characters in <c>string1</c> to compare.</param>
        <param name="string2">The second string to compare.</param>
        <param name="offset2">The zero-based index of the character in <c>string2</c> at which to start comparing.</param>
        <param name="length2">The number of consecutive characters in <c>string2</c> to compare.</param>
        <param name="options">A value that defines how <c>string1</c> and <c>string2</c> should be compared. <c>options</c> is either the enumeration value <see cref="F:System.Globalization.CompareOptions.Ordinal" />, or a bitwise combination of one or more of the following values: <see cref="F:System.Globalization.CompareOptions.IgnoreCase" />, <see cref="F:System.Globalization.CompareOptions.IgnoreSymbols" />, <see cref="F:System.Globalization.CompareOptions.IgnoreNonSpace" />, <see cref="F:System.Globalization.CompareOptions.IgnoreWidth" />, <see cref="F:System.Globalization.CompareOptions.IgnoreKanaType" />, and <see cref="F:System.Globalization.CompareOptions.StringSort" />.</param>
        <summary>Compares a section of one string with a section of another string using the specified <see cref="T:System.Globalization.CompareOptions" /> value.</summary>
        <returns>A 32-bit signed integer indicating the lexical relationship between the two comparands.  
  
 <list type="table"><listheader><term> Value  </term><description> Condition  </description></listheader><item><term> zero  </term><description> The two strings are equal.  </description></item><item><term> less than zero  </term><description> The specified section of <paramref name="string1" /> is less than the specified section of <paramref name="string2" />.  </description></item><item><term> greater than zero  </term><description> The specified section of <paramref name="string1" /> is greater than the specified section of <paramref name="string2" />.  </description></item></list></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Если решение безопасности зависит от того, сравнения строк или изменения регистра, следует использовать <xref:System.Globalization.CultureInfo.InvariantCulture%2A> свойство, чтобы убедиться, что поведение было согласованным независимо от настроек языка и региональных параметров операционной системы.  
  
> [!NOTE]
>  По возможности следует вызывать строковое сравнение методов, которые имеют параметр типа <xref:System.Globalization.CompareOptions> для указания ожидаемого вида сравнения. Как правило, используйте лингвистических параметров (с использованием текущего языка и региональных параметров) для сравнения строк, отображаемых в пользовательском интерфейсе и укажите <xref:System.Globalization.CompareOptions.Ordinal> или <xref:System.Globalization.CompareOptions.OrdinalIgnoreCase> для сравнений безопасности.  
  
   
  
## Examples  
 В следующем примере сравниваются две строки с использованием различных частей <xref:System.Globalization.CompareOptions> параметры.  
  
 [!code-cpp[System.Globalization.CompareInfo.CompareStrIntIntStrIntIntOpt#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Globalization.CompareInfo.CompareStrIntIntStrIntIntOpt/CPP/comparestrintintstrintintopt.cpp#1)]
 [!code-csharp[System.Globalization.CompareInfo.CompareStrIntIntStrIntIntOpt#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Globalization.CompareInfo.CompareStrIntIntStrIntIntOpt/CS/comparestrintintstrintintopt.cs#1)]
 [!code-vb[System.Globalization.CompareInfo.CompareStrIntIntStrIntIntOpt#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Globalization.CompareInfo.CompareStrIntIntStrIntIntOpt/VB/comparestrintintstrintintopt.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <paramref name="offset1" /> or <paramref name="length1" /> or <paramref name="offset2" /> or <paramref name="length2" /> is less than zero.  -or-  <paramref name="offset1" /> is greater than or equal to the number of characters in <paramref name="string1" />.  -or-  <paramref name="offset2" /> is greater than or equal to the number of characters in <paramref name="string2" />.  -or-  <paramref name="length1" /> is greater than the number of characters from <paramref name="offset1" /> to the end of <paramref name="string1" />.  -or-  <paramref name="length2" /> is greater than the number of characters from <paramref name="offset2" /> to the end of <paramref name="string2" />.</exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="options" /> contains an invalid <see cref="T:System.Globalization.CompareOptions" /> value.</exception>
        <block subset="none" type="usage">
          <para>Наборы символов содержат игнорируемые символы. <see cref="M:System.Globalization.CompareInfo.Compare(System.String,System.Int32,System.Int32,System.String,System.Int32,System.Int32,System.Globalization.CompareOptions)" /> Метод не учитывает эти символы при выполнении учитывающего культуру сравнения. Для распознавания игнорируемые символы в сравнение, укажите в качестве параметра <see cref="F:System.Globalization.CompareOptions.Ordinal" /> или <see cref="F:System.Globalization.CompareOptions.OrdinalIgnoreCase" /> для <paramref name="options" /> параметра.</para>
        </block>
        <altmember cref="T:System.Globalization.CompareOptions" />
      </Docs>
    </Member>
    <Member MemberName="Equals">
      <MemberSignature Language="C#" Value="public override bool Equals (object value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance bool Equals(object value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Globalization.CompareInfo.Equals(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function Equals (value As Object) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override bool Equals(System::Object ^ value);" />
      <MemberSignature Language="F#" Value="override this.Equals : obj -&gt; bool" Usage="compareInfo.Equals value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Globalization</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="value">The object to compare with the current <see cref="T:System.Globalization.CompareInfo" />.</param>
        <summary>Determines whether the specified object is equal to the current <see cref="T:System.Globalization.CompareInfo" /> object.</summary>
        <returns>
          <see langword="true" /> if the specified object is equal to the current <see cref="T:System.Globalization.CompareInfo" />; otherwise, <see langword="false" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Два <xref:System.Globalization.CompareInfo> равны при их <xref:System.Globalization.CompareInfo.LCID%2A> и <xref:System.Globalization.CompareInfo.Name%2A> свойства равны.  
  
 Этот метод переопределяет <xref:System.Object.Equals%2A?displayProperty=nameWithType>.  
  
 Если решение безопасности зависит от того, сравнения строк или изменения регистра, следует использовать <xref:System.Globalization.CultureInfo.InvariantCulture%2A> свойство, чтобы убедиться, что поведение было согласованным независимо от настроек языка и региональных параметров операционной системы.  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Object.Equals(System.Object)" />
      </Docs>
    </Member>
    <MemberGroup MemberName="GetCompareInfo">
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Initializes a new <see cref="T:System.Globalization.CompareInfo" /> object.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="GetCompareInfo">
      <MemberSignature Language="C#" Value="public static System.Globalization.CompareInfo GetCompareInfo (int culture);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Globalization.CompareInfo GetCompareInfo(int32 culture) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Globalization.CompareInfo.GetCompareInfo(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function GetCompareInfo (culture As Integer) As CompareInfo" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Globalization::CompareInfo ^ GetCompareInfo(int culture);" />
      <MemberSignature Language="F#" Value="static member GetCompareInfo : int -&gt; System.Globalization.CompareInfo" Usage="System.Globalization.CompareInfo.GetCompareInfo culture" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Globalization.CompareInfo</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="culture" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="culture">An integer representing the culture identifier.</param>
        <summary>Initializes a new <see cref="T:System.Globalization.CompareInfo" /> object that is associated with the culture with the specified identifier.</summary>
        <returns>A new <see cref="T:System.Globalization.CompareInfo" /> object associated with the culture with the specified identifier and using string comparison methods in the current <see cref="T:System.Reflection.Assembly" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 В следующем примере сравниваются две строки с использованием различных частей <xref:System.Globalization.CompareInfo> объектов:  
  
-   <xref:System.Globalization.CompareInfo> Объект, связанный с языком и региональными параметрами испанский (Испания) с международная сортировка  
  
-   <xref:System.Globalization.CompareInfo> Объект, связанный с языком и региональными параметрами испанский (Испания) с традиционная сортировка  
  
-   <xref:System.Globalization.CompareInfo> Объект, связанный с <xref:System.Globalization.CultureInfo.InvariantCulture%2A>  
  
 [!code-cpp[System.Globalization.CompareInfo.CompareStrStr#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Globalization.CompareInfo.CompareStrStr/CPP/comparestrstr.cpp#1)]
 [!code-csharp[System.Globalization.CompareInfo.CompareStrStr#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Globalization.CompareInfo.CompareStrStr/CS/comparestrstr.cs#1)]
 [!code-vb[System.Globalization.CompareInfo.CompareStrStr#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Globalization.CompareInfo.CompareStrStr/VB/comparestrstr.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetCompareInfo">
      <MemberSignature Language="C#" Value="public static System.Globalization.CompareInfo GetCompareInfo (string name);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Globalization.CompareInfo GetCompareInfo(string name) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Globalization.CompareInfo.GetCompareInfo(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function GetCompareInfo (name As String) As CompareInfo" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Globalization::CompareInfo ^ GetCompareInfo(System::String ^ name);" />
      <MemberSignature Language="F#" Value="static member GetCompareInfo : string -&gt; System.Globalization.CompareInfo" Usage="System.Globalization.CompareInfo.GetCompareInfo name" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Globalization</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Globalization.CompareInfo</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="name">A string representing the culture name.</param>
        <summary>Initializes a new <see cref="T:System.Globalization.CompareInfo" /> object that is associated with the culture with the specified name.</summary>
        <returns>A new <see cref="T:System.Globalization.CompareInfo" /> object associated with the culture with the specified identifier and using string comparison methods in the current <see cref="T:System.Reflection.Assembly" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 В следующем примере сравниваются две строки с использованием различных частей <xref:System.Globalization.CompareInfo> объектов:  
  
-   <xref:System.Globalization.CompareInfo> Объект, связанный с языком и региональными параметрами испанский (Испания) с международная сортировка  
  
-   <xref:System.Globalization.CompareInfo> Объект, связанный с языком и региональными параметрами испанский (Испания) с традиционная сортировка  
  
-   <xref:System.Globalization.CompareInfo> Объект, связанный с <xref:System.Globalization.CultureInfo.InvariantCulture%2A>  
  
 [!code-cpp[System.Globalization.CompareInfo.CompareStrStr#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Globalization.CompareInfo.CompareStrStr/CPP/comparestrstr.cpp#1)]
 [!code-csharp[System.Globalization.CompareInfo.CompareStrStr#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Globalization.CompareInfo.CompareStrStr/CS/comparestrstr.cs#1)]
 [!code-vb[System.Globalization.CompareInfo.CompareStrStr#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Globalization.CompareInfo.CompareStrStr/VB/comparestrstr.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="name" /> is <see langword="null" />.</exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="name" /> is an invalid culture name.</exception>
      </Docs>
    </Member>
    <Member MemberName="GetCompareInfo">
      <MemberSignature Language="C#" Value="public static System.Globalization.CompareInfo GetCompareInfo (int culture, System.Reflection.Assembly assembly);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Globalization.CompareInfo GetCompareInfo(int32 culture, class System.Reflection.Assembly assembly) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Globalization.CompareInfo.GetCompareInfo(System.Int32,System.Reflection.Assembly)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Globalization::CompareInfo ^ GetCompareInfo(int culture, System::Reflection::Assembly ^ assembly);" />
      <MemberSignature Language="F#" Value="static member GetCompareInfo : int * System.Reflection.Assembly -&gt; System.Globalization.CompareInfo" Usage="System.Globalization.CompareInfo.GetCompareInfo (culture, assembly)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Globalization.CompareInfo</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="culture" Type="System.Int32" />
        <Parameter Name="assembly" Type="System.Reflection.Assembly" />
      </Parameters>
      <Docs>
        <param name="culture">An integer representing the culture identifier.</param>
        <param name="assembly">An <see cref="T:System.Reflection.Assembly" /> that contains the string comparison methods to use.</param>
        <summary>Initializes a new <see cref="T:System.Globalization.CompareInfo" /> object that is associated with the specified culture and that uses string comparison methods in the specified <see cref="T:System.Reflection.Assembly" />.</summary>
        <returns>A new <see cref="T:System.Globalization.CompareInfo" /> object associated with the culture with the specified identifier and using string comparison methods in the current <see cref="T:System.Reflection.Assembly" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
> [!NOTE]
>  Поведение этого метода будет непредсказуемым. Рекомендуется для вашего приложения для использования версии этого метода, которая не принимает входные данные сборки.  
  
 `assembly` Параметр должен иметь тот же тип, что <xref:System.Reflection.Module.Assembly%2A?displayProperty=nameWithType>.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="assembly" /> is <see langword="null" />.</exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="assembly" /> is of an invalid type.</exception>
        <altmember cref="P:System.Reflection.Module.Assembly" />
      </Docs>
    </Member>
    <Member MemberName="GetCompareInfo">
      <MemberSignature Language="C#" Value="public static System.Globalization.CompareInfo GetCompareInfo (string name, System.Reflection.Assembly assembly);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Globalization.CompareInfo GetCompareInfo(string name, class System.Reflection.Assembly assembly) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Globalization.CompareInfo.GetCompareInfo(System.String,System.Reflection.Assembly)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Globalization::CompareInfo ^ GetCompareInfo(System::String ^ name, System::Reflection::Assembly ^ assembly);" />
      <MemberSignature Language="F#" Value="static member GetCompareInfo : string * System.Reflection.Assembly -&gt; System.Globalization.CompareInfo" Usage="System.Globalization.CompareInfo.GetCompareInfo (name, assembly)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Globalization.CompareInfo</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
        <Parameter Name="assembly" Type="System.Reflection.Assembly" />
      </Parameters>
      <Docs>
        <param name="name">A string representing the culture name.</param>
        <param name="assembly">An <see cref="T:System.Reflection.Assembly" /> that contains the string comparison methods to use.</param>
        <summary>Initializes a new <see cref="T:System.Globalization.CompareInfo" /> object that is associated with the specified culture and that uses string comparison methods in the specified <see cref="T:System.Reflection.Assembly" />.</summary>
        <returns>A new <see cref="T:System.Globalization.CompareInfo" /> object associated with the culture with the specified identifier and using string comparison methods in the current <see cref="T:System.Reflection.Assembly" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
> [!NOTE]
>  Поведение этого метода будет непредсказуемым. Мы рекомендуем использовать версию этого метода, которая не принимает входные данные сборки.  
  
 `assembly` Параметр должен иметь тот же тип, что <xref:System.Reflection.Module.Assembly%2A?displayProperty=nameWithType>.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="name" /> is <see langword="null" />.  -or-  <paramref name="assembly" /> is <see langword="null" />.</exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="name" /> is an invalid culture name.  -or-  <paramref name="assembly" /> is of an invalid type.</exception>
        <altmember cref="P:System.Reflection.Module.Assembly" />
      </Docs>
    </Member>
    <MemberGroup MemberName="GetHashCode">
      <AssemblyInfo>
        <AssemblyName>System.Globalization</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Returns a hash code either for this <see cref="T:System.Globalization.CompareInfo" /> instance or for a particular string.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="GetHashCode">
      <MemberSignature Language="C#" Value="public override int GetHashCode ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance int32 GetHashCode() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Globalization.CompareInfo.GetHashCode" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function GetHashCode () As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override int GetHashCode();" />
      <MemberSignature Language="F#" Value="override this.GetHashCode : unit -&gt; int" Usage="compareInfo.GetHashCode " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Globalization</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Serves as a hash function for the current <see cref="T:System.Globalization.CompareInfo" /> for hashing algorithms and data structures, such as a hash table.</summary>
        <returns>A hash code for the current <see cref="T:System.Globalization.CompareInfo" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Этот метод переопределяет <xref:System.Object.GetHashCode%2A?displayProperty=nameWithType>.  
  
 Этот метод создает один и тот же хэш-код для двух объектов, которые равны в соответствии с методом <xref:System.Globalization.CompareInfo.Equals%2A>.  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Object.GetHashCode" />
        <altmember cref="T:System.Collections.Hashtable" />
        <altmember cref="M:System.Globalization.CompareInfo.Equals(System.Object)" />
      </Docs>
    </Member>
    <Member MemberName="GetHashCode">
      <MemberSignature Language="C#" Value="public virtual int GetHashCode (string source, System.Globalization.CompareOptions options);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance int32 GetHashCode(string source, valuetype System.Globalization.CompareOptions options) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Globalization.CompareInfo.GetHashCode(System.String,System.Globalization.CompareOptions)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetHashCode (source As String, options As CompareOptions) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual int GetHashCode(System::String ^ source, System::Globalization::CompareOptions options);" />
      <MemberSignature Language="F#" Value="override this.GetHashCode : string * System.Globalization.CompareOptions -&gt; int" Usage="compareInfo.GetHashCode (source, options)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Globalization</AssemblyName>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="source" Type="System.String" />
        <Parameter Name="options" Type="System.Globalization.CompareOptions" />
      </Parameters>
      <Docs>
        <param name="source">The string whose hash code is to be returned.</param>
        <param name="options">A value that determines how strings are compared.</param>
        <summary>Gets the hash code for a string based on specified comparison options.</summary>
        <returns>A 32-bit signed integer hash code.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Поведение <xref:System.Globalization.CompareInfo.GetHashCode%2A> зависит от его реализации, который может изменяться от одной версии общеязыковой среды выполнения в другой или с одной платформы .NET Framework в другой.  
  
> [!IMPORTANT]
>  Если два строковых объекта равны, <xref:System.Globalization.CompareInfo.GetHashCode%2A> метод возвращает одинаковые значения. Тем не менее не уникальный хэш-кодом для каждого уникального строкового значения. Различные строки могут возвращать одинаковый хэш-код.  
>   
>  Хэш-код, сам не обязательно быть нестабильным. Хэш-коды для одинаковых строк могут различаться, версии платформы .NET Framework и в разных платформ (например, 32-разрядных и 64-разрядные) в одной версии платформы .NET Framework. В некоторых случаях они могут даже отличаться по домену приложения.  
>   
>  В результате хэш кодов никогда не должно использоваться за пределами домена приложения, в котором они были созданы, они никогда не должны использоваться как ключевые поля в коллекции, и они никогда не должны сохраняться.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="source" /> is <see langword="null" />.</exception>
        <altmember cref="M:System.Object.GetHashCode" />
      </Docs>
    </Member>
    <MemberGroup MemberName="GetSortKey">
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Gets a <see cref="T:System.Globalization.SortKey" /> object for a string.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="GetSortKey">
      <MemberSignature Language="C#" Value="public virtual System.Globalization.SortKey GetSortKey (string source);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Globalization.SortKey GetSortKey(string source) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Globalization.CompareInfo.GetSortKey(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetSortKey (source As String) As SortKey" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::Globalization::SortKey ^ GetSortKey(System::String ^ source);" />
      <MemberSignature Language="F#" Value="abstract member GetSortKey : string -&gt; System.Globalization.SortKey&#xA;override this.GetSortKey : string -&gt; System.Globalization.SortKey" Usage="compareInfo.GetSortKey source" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Globalization.SortKey</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="source" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="source">The string for which a <see cref="T:System.Globalization.SortKey" /> object is obtained.</param>
        <summary>Gets the sort key for the specified string.</summary>
        <returns>The <see cref="T:System.Globalization.SortKey" /> object that contains the sort key for the specified string.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Каждый символ в строке дается несколько категорий весового значения сортировки, включая скрипт, является буквой алфавита, регистра и диакритический вес. Ключ сортировки служит хранилищем этих значений для определенной строки. Например ключ сортировки может содержать строку алфавитных весовых значений, за которым следует строка значения реестра и т. д. <xref:System.Globalization.CompareInfo.GetSortKey%2A> Метод эквивалентен методу Windows API `LCMapString` с флагом LCMAP_SORTKEY.  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Globalization.SortKey" />
      </Docs>
    </Member>
    <Member MemberName="GetSortKey">
      <MemberSignature Language="C#" Value="public virtual System.Globalization.SortKey GetSortKey (string source, System.Globalization.CompareOptions options);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Globalization.SortKey GetSortKey(string source, valuetype System.Globalization.CompareOptions options) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Globalization.CompareInfo.GetSortKey(System.String,System.Globalization.CompareOptions)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetSortKey (source As String, options As CompareOptions) As SortKey" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::Globalization::SortKey ^ GetSortKey(System::String ^ source, System::Globalization::CompareOptions options);" />
      <MemberSignature Language="F#" Value="abstract member GetSortKey : string * System.Globalization.CompareOptions -&gt; System.Globalization.SortKey&#xA;override this.GetSortKey : string * System.Globalization.CompareOptions -&gt; System.Globalization.SortKey" Usage="compareInfo.GetSortKey (source, options)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Globalization.SortKey</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="source" Type="System.String" />
        <Parameter Name="options" Type="System.Globalization.CompareOptions" />
      </Parameters>
      <Docs>
        <param name="source">The string for which a <see cref="T:System.Globalization.SortKey" /> object is obtained.</param>
        <param name="options">A bitwise combination of one or more of the following enumeration values that define how the sort key is calculated: <see cref="F:System.Globalization.CompareOptions.IgnoreCase" />, <see cref="F:System.Globalization.CompareOptions.IgnoreSymbols" />, <see cref="F:System.Globalization.CompareOptions.IgnoreNonSpace" />, <see cref="F:System.Globalization.CompareOptions.IgnoreWidth" />, <see cref="F:System.Globalization.CompareOptions.IgnoreKanaType" />, and <see cref="F:System.Globalization.CompareOptions.StringSort" />.</param>
        <summary>Gets a <see cref="T:System.Globalization.SortKey" /> object for the specified string using the specified <see cref="T:System.Globalization.CompareOptions" /> value.</summary>
        <returns>The <see cref="T:System.Globalization.SortKey" /> object that contains the sort key for the specified string.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Каждый символ в строке дается несколько категорий весового значения сортировки, включая скрипт, является буквой алфавита, регистра и диакритический вес. Ключ сортировки служит хранилищем этих значений для определенной строки. Например ключ сортировки может содержать строку алфавитных весовых значений, за которым следует строка значения реестра и т. д. <xref:System.Globalization.CompareInfo.GetSortKey%2A> Метод эквивалентен методу Windows API `LCMapString` с флагом LCMAP_SORTKEY.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <paramref name="options" /> contains an invalid <see cref="T:System.Globalization.CompareOptions" /> value.</exception>
        <altmember cref="T:System.Globalization.SortKey" />
        <altmember cref="T:System.Globalization.CompareOptions" />
      </Docs>
    </Member>
    <MemberGroup MemberName="IndexOf">
      <AssemblyInfo>
        <AssemblyName>System.Globalization</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Returns the zero-based index of the first occurrence of a value within a string or within a portion of it.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="IndexOf">
      <MemberSignature Language="C#" Value="public virtual int IndexOf (string source, char value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance int32 IndexOf(string source, char value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Globalization.CompareInfo.IndexOf(System.String,System.Char)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function IndexOf (source As String, value As Char) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual int IndexOf(System::String ^ source, char value);" />
      <MemberSignature Language="F#" Value="abstract member IndexOf : string * char -&gt; int&#xA;override this.IndexOf : string * char -&gt; int" Usage="compareInfo.IndexOf (source, value)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Globalization</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="source" Type="System.String" />
        <Parameter Name="value" Type="System.Char" />
      </Parameters>
      <Docs>
        <param name="source">The string to search.</param>
        <param name="value">The character to locate within <c>source</c>.</param>
        <summary>Searches for the specified character and returns the zero-based index of the first occurrence within the entire source string.</summary>
        <returns>The zero-based index of the first occurrence of <paramref name="value" />, if found, within <paramref name="source" />; otherwise, -1. Returns 0 (zero) if <paramref name="value" /> is an ignorable character.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Этот метод выполняет поиск строки источника от начала строки до конца строки.  
  
 Эта перегрузка выполняет поиск с учетом языка и региональных параметров. Если `value` представляет составной знак Юникода, например лигатура «?» (U + 00 C 6), он может рассматриваться как эквивалент любого вхождения его компонентов в правильной последовательности, например «AE» (U + 0041, U + 0045), в зависимости от языка и региональных параметров. Чтобы выполнить поиск по порядковым номерам (без учета языка и региональных параметров), где два знака считаются эквивалентными, только если их кодовых позиций Юникода совпадают, необходимо вызвать перегрузку, имеет параметр типа <xref:System.Globalization.CompareOptions> и использовать <xref:System.Globalization.CompareOptions.Ordinal?displayProperty=nameWithType> значение. В отличие от <xref:System.Globalization.CompareInfo.IndexOf%2A?displayProperty=nameWithType>, который выполняет сравнение с учетом языка и региональных параметров, перегрузки <xref:System.String.IndexOf%2A?displayProperty=nameWithType> метод, который поиск символа выполняют порядковое сравнение и перегрузки, которые поиск строки выполняют сравнение с учетом языка и региональных параметров.  
  
> [!NOTE]
>  По возможности следует использовать методы сравнения строк, которые имеют параметр типа <xref:System.Globalization.CompareOptions> для указания ожидаемого вида сравнения. Как правило, используйте лингвистических параметров (с использованием текущего языка и региональных параметров) для сравнения строк, отображаемых в пользовательском интерфейсе и укажите <xref:System.Globalization.CompareOptions.Ordinal?displayProperty=nameWithType> или <xref:System.Globalization.CompareOptions.OrdinalIgnoreCase?displayProperty=nameWithType> для сравнений безопасности.  
  
   
  
## Examples  
 В следующем примере определяется индексы первого и последнего вхождения символа или подстроки в строке.  
  
 [!code-cpp[System.Globalization.CompareInfo.IndexOf#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Globalization.CompareInfo.IndexOf/CPP/indexof.cpp#1)]
 [!code-csharp[System.Globalization.CompareInfo.IndexOf#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Globalization.CompareInfo.IndexOf/CS/indexof.cs#1)]
 [!code-vb[System.Globalization.CompareInfo.IndexOf#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Globalization.CompareInfo.IndexOf/VB/indexof.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="source" /> is <see langword="null" />.</exception>
        <block subset="none" type="usage">
          <para>Наборы символов содержат игнорируемые символы, то есть символы, которые не учитываются при выполнении лингвистического или зависящих от языка и региональных параметров сортировки. В поле поиска с учетом языка и региональных параметров Если <paramref name="value" /> — игнорируемый символ, результат аналогичен поиску с удаленным этим символом. В этом случае <see cref="M:System.Globalization.CompareInfo.IndexOf(System.String,System.Char)" /> метод всегда возвращает 0 (ноль), чтобы указать, что совпадения в начале <paramref name="source" />. В следующем примере <see cref="M:System.Globalization.CompareInfo.IndexOf(System.String,System.Char)" /> метод используется для поиска мягкий перенос (U + 00AD) в двух строках. Только одна из строк содержит мягкий перенос. В обоих случаях поскольку мягкий перенос является игнорируемым символом, метод возвращает 0 (ноль), чтобы указать, что были найдены совпадения в начале строки.  [! code-csharp [System.Globalization.CompareInfo.IndexOf#3] (~/samples/snippets/csharp/VS_Snippets_CLR_System/system. Globalization.CompareInfo.IndexOf/CS/ignorable2.cs#3)] [! код vb [System.Globalization.CompareInfo.IndexOf#3] (~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system. Globalization.CompareInfo.IndexOf/VB/ignorable2.vb#3)]</para>
        </block>
        <altmember cref="M:System.String.IndexOf(System.Char)" />
        <altmember cref="M:System.Globalization.CompareInfo.LastIndexOf(System.String,System.Char)" />
      </Docs>
    </Member>
    <Member MemberName="IndexOf">
      <MemberSignature Language="C#" Value="public virtual int IndexOf (string source, string value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance int32 IndexOf(string source, string value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Globalization.CompareInfo.IndexOf(System.String,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function IndexOf (source As String, value As String) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual int IndexOf(System::String ^ source, System::String ^ value);" />
      <MemberSignature Language="F#" Value="abstract member IndexOf : string * string -&gt; int&#xA;override this.IndexOf : string * string -&gt; int" Usage="compareInfo.IndexOf (source, value)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Globalization</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="source" Type="System.String" />
        <Parameter Name="value" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="source">The string to search.</param>
        <param name="value">The string to locate within <c>source</c>.</param>
        <summary>Searches for the specified substring and returns the zero-based index of the first occurrence within the entire source string.</summary>
        <returns>The zero-based index of the first occurrence of <paramref name="value" />, if found, within <paramref name="source" />; otherwise, -1. Returns 0 (zero) if <paramref name="value" /> is an ignorable character.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Исходная строка будет выполнен поиск вперед, начиная с начала строки и заканчивается в конце строки.  
  
 Эта перегрузка выполняет поиск с учетом языка и региональных параметров. Значение Юникода, представляющее составной знак, например лигатура «?» (U + 00 C 6), может рассматриваться как эквивалент любого вхождения компонентов символа в правильной последовательности, например «AE» (U + 0041, U + 0045), в зависимости от языка и региональных параметров. Чтобы выполнить поиск по порядковым номерам (без учета языка и региональных параметров), где сравниваются значения в кодировке Юникод, следует использовать одну из перегрузок, которые имеет параметр типа <xref:System.Globalization.CompareOptions> и использовать <xref:System.Globalization.CompareOptions.Ordinal> значение.  
  
> [!NOTE]
>  По возможности следует вызывать строковое сравнение методов, которые имеют параметр типа <xref:System.Globalization.CompareOptions> для указания ожидаемого вида сравнения. Как правило, используйте лингвистических параметров (с использованием текущего языка и региональных параметров) для сравнения строк, отображаемых в пользовательском интерфейсе и укажите <xref:System.Globalization.CompareOptions.Ordinal?displayProperty=nameWithType> или <xref:System.Globalization.CompareOptions.OrdinalIgnoreCase?displayProperty=nameWithType> для сравнений безопасности.  
  
   
  
## Examples  
 В следующем примере определяется индексы первого и последнего вхождения символа или подстроки в строке.  
  
 [!code-cpp[System.Globalization.CompareInfo.IndexOf#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Globalization.CompareInfo.IndexOf/CPP/indexof.cpp#1)]
 [!code-csharp[System.Globalization.CompareInfo.IndexOf#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Globalization.CompareInfo.IndexOf/CS/indexof.cs#1)]
 [!code-vb[System.Globalization.CompareInfo.IndexOf#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Globalization.CompareInfo.IndexOf/VB/indexof.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="source" /> is <see langword="null" />.  -or-  <paramref name="value" /> is <see langword="null" />.</exception>
        <block subset="none" type="usage">
          <para>Наборы символов содержат игнорируемые символы, то есть символы, которые не учитываются при выполнении лингвистического или зависящих от языка и региональных параметров сортировки. Если при поиске с учетом языка и региональных параметров параметр <paramref name="value" /> содержит игнорируемый символ, результат аналогичен поиску с удаленным этим символом. Если <paramref name="value" /> состоит только из одного или нескольких символов можно игнорировать, <see cref="M:System.Globalization.CompareInfo.IndexOf(System.String,System.String)" /> метод всегда возвращает 0 (ноль), чтобы указать, что совпадения в начале <paramref name="source" />. В следующем примере <see cref="M:System.Globalization.CompareInfo.IndexOf(System.String,System.String)" /> метод используется для поиска подстроки три (мягкий перенос (U + 00AD), Мягкий перенос перед буквой «n» и мягкий перенос перед буквой «m») в двух строках. Только одна из строк содержит мягкий перенос. В каждом случае, поскольку мягкий перенос является игнорируемым символом, результат аналогичен так, как если бы мягкий перенос не были включены в <paramref name="value" />. При поиске мягкий перенос, метод возвращает 0 (ноль), чтобы указать, что он найдено совпадение в начале строки.  [! code-csharp [System.Globalization.CompareInfo.IndexOf#2] (~/samples/snippets/csharp/VS_Snippets_CLR_System/system. Globalization.CompareInfo.IndexOf/CS/ignorable1.cs#2)] [! код vb [System.Globalization.CompareInfo.IndexOf#2] (~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system. Globalization.CompareInfo.IndexOf/VB/ignorable1.vb#2)]</para>
        </block>
        <altmember cref="M:System.Globalization.CompareInfo.LastIndexOf(System.String,System.Char)" />
      </Docs>
    </Member>
    <Member MemberName="IndexOf">
      <MemberSignature Language="C#" Value="public virtual int IndexOf (string source, char value, System.Globalization.CompareOptions options);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance int32 IndexOf(string source, char value, valuetype System.Globalization.CompareOptions options) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Globalization.CompareInfo.IndexOf(System.String,System.Char,System.Globalization.CompareOptions)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function IndexOf (source As String, value As Char, options As CompareOptions) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual int IndexOf(System::String ^ source, char value, System::Globalization::CompareOptions options);" />
      <MemberSignature Language="F#" Value="abstract member IndexOf : string * char * System.Globalization.CompareOptions -&gt; int&#xA;override this.IndexOf : string * char * System.Globalization.CompareOptions -&gt; int" Usage="compareInfo.IndexOf (source, value, options)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Globalization</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="source" Type="System.String" />
        <Parameter Name="value" Type="System.Char" />
        <Parameter Name="options" Type="System.Globalization.CompareOptions" />
      </Parameters>
      <Docs>
        <param name="source">The string to search.</param>
        <param name="value">The character to locate within <c>source</c>.</param>
        <param name="options">A value that defines how the strings should be compared. <c>options</c> is either the enumeration value <see cref="F:System.Globalization.CompareOptions.Ordinal" />, or a bitwise combination of one or more of the following values: <see cref="F:System.Globalization.CompareOptions.IgnoreCase" />, <see cref="F:System.Globalization.CompareOptions.IgnoreSymbols" />, <see cref="F:System.Globalization.CompareOptions.IgnoreNonSpace" />, <see cref="F:System.Globalization.CompareOptions.IgnoreWidth" />, and <see cref="F:System.Globalization.CompareOptions.IgnoreKanaType" />.</param>
        <summary>Searches for the specified character and returns the zero-based index of the first occurrence within the entire source string using the specified <see cref="T:System.Globalization.CompareOptions" /> value.</summary>
        <returns>The zero-based index of the first occurrence of <paramref name="value" />, if found, within <paramref name="source" />, using the specified comparison options; otherwise, -1. Returns 0 (zero) if <paramref name="value" /> is an ignorable character.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Исходная строка будет выполнен поиск вперед, начиная с начала строки и заканчивается в конце строки.  
  
 <xref:System.Globalization.CompareOptions.StringSort?displayProperty=nameWithType> Значение недопустимо для этого метода.  
  
 Если `options` не включает <xref:System.Globalization.CompareOptions.Ordinal> значение, эта перегрузка выполняет поиск с учетом языка и региональных параметров. Если символ Юникода, представляющее составной знак, например лигатура «?» (U + 00 C 6), он может считаться равным любому вхождению его компонентов в правильной последовательности, например «AE» (U + 0041, U + 0045), в зависимости от языка и региональных параметров. Если `options` включает в себя <xref:System.Globalization.CompareOptions.Ordinal> значение, эта перегрузка выполняет поиск по порядковым номерам (без учета языка и региональных параметров). Считаются эквивалентными только в том случае, если совпадают значения в кодировке Юникод. Перегруженные версии <xref:System.String.IndexOf%2A?displayProperty=nameWithType> , поиск символа выполняют поиск по порядковым номерам, в то время, как выполняющие поиск строки выполнения поиска с учетом языка и региональных параметров.  
  
> [!NOTE]
>  По возможности следует использовать методы сравнения строк, которые имеют параметр типа <xref:System.Globalization.CompareOptions> для указания ожидаемого вида сравнения. Как правило, используйте лингвистических параметров (с использованием текущего языка и региональных параметров) для сравнения строк, отображаемых в пользовательском интерфейсе и укажите <xref:System.Globalization.CompareOptions.Ordinal?displayProperty=nameWithType> или <xref:System.Globalization.CompareOptions.OrdinalIgnoreCase?displayProperty=nameWithType> для сравнений безопасности.  
  
   
  
## Examples  
 В следующем примере определяется индексы первого и последнего вхождения символа или подстроки в строке.  
  
 [!code-cpp[System.Globalization.CompareInfo.IndexOf#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Globalization.CompareInfo.IndexOf/CPP/indexof.cpp#1)]
 [!code-csharp[System.Globalization.CompareInfo.IndexOf#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Globalization.CompareInfo.IndexOf/CS/indexof.cs#1)]
 [!code-vb[System.Globalization.CompareInfo.IndexOf#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Globalization.CompareInfo.IndexOf/VB/indexof.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="source" /> is <see langword="null" />.</exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="options" /> contains an invalid <see cref="T:System.Globalization.CompareOptions" /> value.</exception>
        <block subset="none" type="usage">
          <para>Наборы символов содержат игнорируемые символы, то есть символы, которые не учитываются при выполнении лингвистического или зависящих от языка и региональных параметров сортировки. В поле поиска с учетом языка и региональных параметров Если <paramref name="value" /> — игнорируемый символ, результат аналогичен поиску с удаленным этим символом. В этом случае <see cref="M:System.Globalization.CompareInfo.IndexOf(System.String,System.Char,System.Globalization.CompareOptions)" /> метод всегда возвращает 0 (ноль), чтобы указать, что совпадения в начале <paramref name="source" />. В следующем примере <see cref="M:System.Globalization.CompareInfo.IndexOf(System.String,System.Char,System.Globalization.CompareOptions)" /> метод используется для поиска мягкий перенос (U + 00AD) в двух строках. Только одна из строк содержит мягкий перенос. В обоих случаях поскольку мягкий перенос является игнорируемым символом, поиск с учетом языка и региональных параметров возвращает 0 (ноль), чтобы указать, что были найдены совпадения в начале строки. Поиск по порядковым номерам, однако успешно находит мягкий перенос в одной строке и сообщает, что он отсутствует из второй строки.  [! code-csharp [System.Globalization.CompareInfo.IndexOf#4] (~/samples/snippets/csharp/VS_Snippets_CLR_System/system. Globalization.CompareInfo.IndexOf/CS/ignorable3.cs#4)] [! код vb [System.Globalization.CompareInfo.IndexOf#4] (~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system. Globalization.CompareInfo.IndexOf/VB/ignorable3.vb#4)]</para>
        </block>
        <altmember cref="M:System.Globalization.CompareInfo.LastIndexOf(System.String,System.Char)" />
        <altmember cref="T:System.Globalization.CompareOptions" />
      </Docs>
    </Member>
    <Member MemberName="IndexOf">
      <MemberSignature Language="C#" Value="public virtual int IndexOf (string source, char value, int startIndex);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance int32 IndexOf(string source, char value, int32 startIndex) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Globalization.CompareInfo.IndexOf(System.String,System.Char,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function IndexOf (source As String, value As Char, startIndex As Integer) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual int IndexOf(System::String ^ source, char value, int startIndex);" />
      <MemberSignature Language="F#" Value="abstract member IndexOf : string * char * int -&gt; int&#xA;override this.IndexOf : string * char * int -&gt; int" Usage="compareInfo.IndexOf (source, value, startIndex)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="source" Type="System.String" />
        <Parameter Name="value" Type="System.Char" />
        <Parameter Name="startIndex" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="source">The string to search.</param>
        <param name="value">The character to locate within <c>source</c>.</param>
        <param name="startIndex">The zero-based starting index of the search.</param>
        <summary>Searches for the specified character and returns the zero-based index of the first occurrence within the section of the source string that extends from the specified index to the end of the string.</summary>
        <returns>The zero-based index of the first occurrence of <paramref name="value" />, if found, within the section of <paramref name="source" /> that extends from <paramref name="startIndex" /> to the end of <paramref name="source" />; otherwise, -1. Returns <paramref name="startIndex" /> if <paramref name="value" /> is an ignorable character.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Исходная строка выполняется от в `startIndex` и заканчивается в конце строки.  
  
 Эта перегрузка выполняет поиск с учетом языка и региональных параметров. Если символ Юникода, представляющее составной знак, например лигатура «?» (U + 00 C 6), он может считаться равным любому вхождению его компонентов в правильной последовательности, например «AE» (U + 0041, U + 0045), в зависимости от языка и региональных параметров. Чтобы выполнить поиск по порядковым номерам (без учета языка и региональных параметров), в котором символ считаются эквивалентными, только в том случае, если совпадают значения в кодировке Юникод, следует вызвать одну из перегрузок, которые имеет параметр типа <xref:System.Globalization.CompareOptions> и использовать <xref:System.Globalization.CompareOptions.Ordinal> значение. Перегруженные версии <xref:System.String.IndexOf%2A?displayProperty=nameWithType> , поиск символа выполняют поиск по порядковым номерам, в то время, как выполняющие поиск строки выполнения поиска с учетом языка и региональных параметров.  
  
> [!NOTE]
>  По возможности следует вызывать строковое сравнение методов, которые имеют параметр типа <xref:System.Globalization.CompareOptions> для указания ожидаемого вида сравнения. Как правило, используйте лингвистических параметров (с использованием текущего языка и региональных параметров) для сравнения строк, отображаемых в пользовательском интерфейсе и укажите <xref:System.Globalization.CompareOptions.Ordinal?displayProperty=nameWithType> или <xref:System.Globalization.CompareOptions.OrdinalIgnoreCase?displayProperty=nameWithType> для сравнений безопасности.  
  
   
  
## Examples  
 В следующем примере определяется индексы первого и последнего вхождения символа или подстроки в часть строки. Обратите внимание, что <xref:System.Globalization.CompareInfo.IndexOf%2A> и <xref:System.Globalization.CompareInfo.LastIndexOf%2A> поиск в различных частей строки, даже с теми же `startIndex` параметра.  
  
 [!code-cpp[System.Globalization.CompareInfo.IndexOfInt#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Globalization.CompareInfo.IndexOfInt/CPP/indexofint.cpp#1)]
 [!code-csharp[System.Globalization.CompareInfo.IndexOfInt#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Globalization.CompareInfo.IndexOfInt/CS/indexofint.cs#1)]
 [!code-vb[System.Globalization.CompareInfo.IndexOfInt#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Globalization.CompareInfo.IndexOfInt/VB/indexofint.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="source" /> is <see langword="null" />.</exception>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <paramref name="startIndex" /> is outside the range of valid indexes for <paramref name="source" />.</exception>
        <block subset="none" type="usage">
          <para>Наборы символов содержат игнорируемые символы, то есть символы, которые не учитываются при выполнении лингвистического или зависящих от языка и региональных параметров сортировки. В поле поиска с учетом языка и региональных параметров Если <paramref name="value" /> — игнорируемый символ, результат аналогичен поиску с удаленным этим символом. В этом случае <see cref="M:System.Globalization.CompareInfo.IndexOf(System.String,System.Char,System.Int32)" /> метод всегда возвращает <paramref name="startIndex" />, который является позицию символа, с которого начинается поиск. В следующем примере <see cref="M:System.Globalization.CompareInfo.IndexOf(System.String,System.Char,System.Int32)" /> метод используется для поиска мягкий перенос (U + 00AD) после «n» в двух строках. Только одна из строк содержит мягкий перенос. В обоих случаях поскольку мягкий перенос является игнорируемым символом, метод возвращает 1, чтобы указать, что были найдены совпадения в позиции «n».  [! code-csharp [System.Globalization.CompareInfo.IndexOf#5] (~/samples/snippets/csharp/VS_Snippets_CLR_System/system. Globalization.CompareInfo.IndexOf/CS/ignorable4.cs#5)] [! код vb [System.Globalization.CompareInfo.IndexOf#5] (~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system. Globalization.CompareInfo.IndexOf/VB/ignorable4.vb#5)]</para>
        </block>
        <altmember cref="M:System.Globalization.CompareInfo.LastIndexOf(System.String,System.Char)" />
      </Docs>
    </Member>
    <Member MemberName="IndexOf">
      <MemberSignature Language="C#" Value="public virtual int IndexOf (string source, string value, System.Globalization.CompareOptions options);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance int32 IndexOf(string source, string value, valuetype System.Globalization.CompareOptions options) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Globalization.CompareInfo.IndexOf(System.String,System.String,System.Globalization.CompareOptions)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function IndexOf (source As String, value As String, options As CompareOptions) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual int IndexOf(System::String ^ source, System::String ^ value, System::Globalization::CompareOptions options);" />
      <MemberSignature Language="F#" Value="abstract member IndexOf : string * string * System.Globalization.CompareOptions -&gt; int&#xA;override this.IndexOf : string * string * System.Globalization.CompareOptions -&gt; int" Usage="compareInfo.IndexOf (source, value, options)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Globalization</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="source" Type="System.String" />
        <Parameter Name="value" Type="System.String" />
        <Parameter Name="options" Type="System.Globalization.CompareOptions" />
      </Parameters>
      <Docs>
        <param name="source">The string to search.</param>
        <param name="value">The string to locate within <c>source</c>.</param>
        <param name="options">A value that defines how <c>source</c> and <c>value</c> should be compared. <c>options</c> is either the enumeration value <see cref="F:System.Globalization.CompareOptions.Ordinal" />, or a bitwise combination of one or more of the following values: <see cref="F:System.Globalization.CompareOptions.IgnoreCase" />, <see cref="F:System.Globalization.CompareOptions.IgnoreSymbols" />, <see cref="F:System.Globalization.CompareOptions.IgnoreNonSpace" />, <see cref="F:System.Globalization.CompareOptions.IgnoreWidth" />, and <see cref="F:System.Globalization.CompareOptions.IgnoreKanaType" />.</param>
        <summary>Searches for the specified substring and returns the zero-based index of the first occurrence within the entire source string using the specified <see cref="T:System.Globalization.CompareOptions" /> value.</summary>
        <returns>The zero-based index of the first occurrence of <paramref name="value" />, if found, within <paramref name="source" />, using the specified comparison options; otherwise, -1. Returns 0 (zero) if <paramref name="value" /> is an ignorable character.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Исходная строка будет выполнен поиск вперед, начиная с начала строки и заканчивается в конце строки.  
  
 <xref:System.Globalization.CompareOptions.StringSort?displayProperty=nameWithType> Значение недопустимо для этого метода.  
  
 Если `options` не включает <xref:System.Globalization.CompareOptions.Ordinal> значение, эта перегрузка выполняет поиск с учетом языка и региональных параметров. Значение Юникода, представляющее составной знак, например лигатура «?» (U + 00 C 6), может рассматриваться как эквивалент любого вхождения компонентов символа в правильной последовательности, например «AE» (U + 0041, U + 0045), в зависимости от языка и региональных параметров. Если `options` включает в себя <xref:System.Globalization.CompareOptions.Ordinal> значение, эта перегрузка выполняет поиск по порядковым номерам (без учета языка и региональных параметров), где сравниваются значения в кодировке Юникод.  
  
> [!NOTE]
>  По возможности следует вызывать строковое сравнение методов, которые имеют параметр типа <xref:System.Globalization.CompareOptions> для указания ожидаемого вида сравнения. Как правило, используйте лингвистических параметров (с использованием текущего языка и региональных параметров) для сравнения строк, отображаемых в пользовательском интерфейсе и укажите <xref:System.Globalization.CompareOptions.Ordinal?displayProperty=nameWithType> или <xref:System.Globalization.CompareOptions.OrdinalIgnoreCase?displayProperty=nameWithType> для сравнений безопасности.  
  
   
  
## Examples  
 В следующем примере определяется индексы первого и последнего вхождения символа или подстроки в строке.  
  
 [!code-cpp[System.Globalization.CompareInfo.IndexOf#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Globalization.CompareInfo.IndexOf/CPP/indexof.cpp#1)]
 [!code-csharp[System.Globalization.CompareInfo.IndexOf#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Globalization.CompareInfo.IndexOf/CS/indexof.cs#1)]
 [!code-vb[System.Globalization.CompareInfo.IndexOf#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Globalization.CompareInfo.IndexOf/VB/indexof.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="source" /> is <see langword="null" />.  -or-  <paramref name="value" /> is <see langword="null" />.</exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="options" /> contains an invalid <see cref="T:System.Globalization.CompareOptions" /> value.</exception>
        <block subset="none" type="usage">
          <para>Наборы символов содержат игнорируемые символы, то есть символы, которые не учитываются при выполнении лингвистического или зависящих от языка и региональных параметров сортировки. Если при поиске с учетом языка и региональных параметров (то есть, если параметр <paramref name="options" /> не имеет значение <see cref="F:System.Globalization.CompareOptions.Ordinal" /> или <see cref="F:System.Globalization.CompareOptions.OrdinalIgnoreCase" />) параметр <paramref name="value" /> содержит игнорируемый символ, результат аналогичен поиску с удаленным этим символом. Если <paramref name="value" /> состоит только из одного или нескольких символов можно игнорировать, <see cref="M:System.Globalization.CompareInfo.IndexOf(System.String,System.String,System.Globalization.CompareOptions)" /> метод всегда возвращает 0 (ноль), чтобы указать, что совпадения в начале <paramref name="source" />. В следующем примере <see cref="M:System.Globalization.CompareInfo.IndexOf(System.String,System.String,System.Globalization.CompareOptions)" /> метод используется для поиска подстроки три (мягкий перенос (U + 00AD), Мягкий перенос перед буквой «n» и мягкий перенос перед буквой «m») в двух строках. Только одна из строк содержит мягкий перенос. Поскольку мягкий перенос является игнорируемым символом, поиска с учетом языка и региональных параметров возвращает значение, оно возвратит, если мягкий перенос не были включены в строку поиска. Поиск по порядковым номерам, однако успешно находит мягкий перенос в одной строке и сообщает, что он отсутствует из второй строки.  [! code-csharp [System.Globalization.CompareInfo.IndexOf#6] (~/samples/snippets/csharp/VS_Snippets_CLR_System/system. Globalization.CompareInfo.IndexOf/CS/ignorable5.cs#6)] [! код vb [System.Globalization.CompareInfo.IndexOf#6] (~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system. Globalization.CompareInfo.IndexOf/VB/ignorable5.vb#6)]</para>
        </block>
        <altmember cref="M:System.Globalization.CompareInfo.LastIndexOf(System.String,System.Char)" />
        <altmember cref="T:System.Globalization.CompareOptions" />
      </Docs>
    </Member>
    <Member MemberName="IndexOf">
      <MemberSignature Language="C#" Value="public virtual int IndexOf (string source, string value, int startIndex);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance int32 IndexOf(string source, string value, int32 startIndex) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Globalization.CompareInfo.IndexOf(System.String,System.String,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function IndexOf (source As String, value As String, startIndex As Integer) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual int IndexOf(System::String ^ source, System::String ^ value, int startIndex);" />
      <MemberSignature Language="F#" Value="abstract member IndexOf : string * string * int -&gt; int&#xA;override this.IndexOf : string * string * int -&gt; int" Usage="compareInfo.IndexOf (source, value, startIndex)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="source" Type="System.String" />
        <Parameter Name="value" Type="System.String" />
        <Parameter Name="startIndex" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="source">The string to search.</param>
        <param name="value">The string to locate within <c>source</c>.</param>
        <param name="startIndex">The zero-based starting index of the search.</param>
        <summary>Searches for the specified substring and returns the zero-based index of the first occurrence within the section of the source string that extends from the specified index to the end of the string.</summary>
        <returns>The zero-based index of the first occurrence of <paramref name="value" />, if found, within the section of <paramref name="source" /> that extends from <paramref name="startIndex" /> to the end of <paramref name="source" />; otherwise, -1. Returns <paramref name="startIndex" /> if <paramref name="value" /> is an ignorable character.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Исходная строка выполняется от в `startIndex` и заканчивается в конце строки.  
  
 Эта перегрузка выполняет поиск с учетом языка и региональных параметров. Значение Юникода, представляющее составной знак, например лигатура «?» (U + 00 C 6), может рассматриваться как эквивалент любого вхождения компонентов символа в правильной последовательности, например «AE» (U + 0041, U + 0045), в зависимости от языка и региональных параметров. Чтобы выполнить поиск по порядковым номерам (без учета языка и региональных параметров), в котором сравниваются значения в кодировке Юникод, следует вызвать одну из перегрузок, которые имеет параметр типа <xref:System.Globalization.CompareOptions> и использовать <xref:System.Globalization.CompareOptions.Ordinal> значение.  
  
> [!NOTE]
>  По возможности следует вызывать строковое сравнение методов, которые имеют параметр типа <xref:System.Globalization.CompareOptions> для указания ожидаемого вида сравнения. Как правило, используйте лингвистических параметров (с использованием текущего языка и региональных параметров) для сравнения строк, отображаемых в пользовательском интерфейсе и укажите <xref:System.Globalization.CompareOptions.Ordinal?displayProperty=nameWithType> или <xref:System.Globalization.CompareOptions.OrdinalIgnoreCase?displayProperty=nameWithType> для сравнений безопасности.  
  
   
  
## Examples  
 В следующем примере определяется индексы первого и последнего вхождения символа или подстроки в часть строки. Обратите внимание, что <xref:System.Globalization.CompareInfo.IndexOf%2A> и <xref:System.Globalization.CompareInfo.LastIndexOf%2A> поиск в различных частей строки, даже с теми же `startIndex` параметра.  
  
 [!code-cpp[System.Globalization.CompareInfo.IndexOfInt#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Globalization.CompareInfo.IndexOfInt/CPP/indexofint.cpp#1)]
 [!code-csharp[System.Globalization.CompareInfo.IndexOfInt#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Globalization.CompareInfo.IndexOfInt/CS/indexofint.cs#1)]
 [!code-vb[System.Globalization.CompareInfo.IndexOfInt#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Globalization.CompareInfo.IndexOfInt/VB/indexofint.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="source" /> is <see langword="null" />.  -or-  <paramref name="value" /> is <see langword="null" />.</exception>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <paramref name="startIndex" /> is outside the range of valid indexes for <paramref name="source" />.</exception>
        <block subset="none" type="usage">
          <para>Наборы символов содержат игнорируемые символы, то есть символы, которые не учитываются при выполнении лингвистического или зависящих от языка и региональных параметров сортировки. Если при поиске с учетом языка и региональных параметров параметр <paramref name="value" /> содержит игнорируемый символ, результат аналогичен поиску с удаленным этим символом. Если <paramref name="value" /> состоит только из одного или нескольких символов можно игнорировать, <see cref="M:System.Globalization.CompareInfo.IndexOf(System.String,System.String,System.Int32)" /> метод всегда возвращает <paramref name="startIndex" />, который является позицию символа, с которого начинается поиск.  В следующем примере <see cref="M:System.Globalization.CompareInfo.IndexOf(System.String,System.String,System.Int32)" /> метод позволяет найти позицию мягкий перенос (U + 00AD) следуют «m» в двух строках. Только одна из строк содержит требуемую подстроку. В обоих случаях поскольку мягкий перенос является игнорируемым символом, метод возвращает индекс «m» в строке. Обратите внимание, что в случае первой строки, содержащей мягкий перенос перед буквой «m», метод возвращает не индекс мягкого переноса, но вместо этого возвращает индекс «m».  [! code-csharp [System.Globalization.CompareInfo.IndexOf#14] (~/samples/snippets/csharp/VS_Snippets_CLR_System/system. Globalization.CompareInfo.IndexOf/CS/ignorable13.cs#14)] [! код vb [System.Globalization.CompareInfo.IndexOf#14] (~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system. Globalization.CompareInfo.IndexOf/VB/ignorable13.vb#14)]</para>
        </block>
        <altmember cref="M:System.Globalization.CompareInfo.LastIndexOf(System.String,System.Char)" />
      </Docs>
    </Member>
    <Member MemberName="IndexOf">
      <MemberSignature Language="C#" Value="public virtual int IndexOf (string source, char value, int startIndex, System.Globalization.CompareOptions options);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance int32 IndexOf(string source, char value, int32 startIndex, valuetype System.Globalization.CompareOptions options) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Globalization.CompareInfo.IndexOf(System.String,System.Char,System.Int32,System.Globalization.CompareOptions)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function IndexOf (source As String, value As Char, startIndex As Integer, options As CompareOptions) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual int IndexOf(System::String ^ source, char value, int startIndex, System::Globalization::CompareOptions options);" />
      <MemberSignature Language="F#" Value="abstract member IndexOf : string * char * int * System.Globalization.CompareOptions -&gt; int&#xA;override this.IndexOf : string * char * int * System.Globalization.CompareOptions -&gt; int" Usage="compareInfo.IndexOf (source, value, startIndex, options)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Globalization</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="source" Type="System.String" />
        <Parameter Name="value" Type="System.Char" />
        <Parameter Name="startIndex" Type="System.Int32" />
        <Parameter Name="options" Type="System.Globalization.CompareOptions" />
      </Parameters>
      <Docs>
        <param name="source">The string to search.</param>
        <param name="value">The character to locate within <c>source</c>.</param>
        <param name="startIndex">The zero-based starting index of the search.</param>
        <param name="options">A value that defines how <c>source</c> and <c>value</c> should be compared. <c>options</c> is either the enumeration value <see cref="F:System.Globalization.CompareOptions.Ordinal" />, or a bitwise combination of one or more of the following values: <see cref="F:System.Globalization.CompareOptions.IgnoreCase" />, <see cref="F:System.Globalization.CompareOptions.IgnoreSymbols" />, <see cref="F:System.Globalization.CompareOptions.IgnoreNonSpace" />, <see cref="F:System.Globalization.CompareOptions.IgnoreWidth" />, and <see cref="F:System.Globalization.CompareOptions.IgnoreKanaType" />.</param>
        <summary>Searches for the specified character and returns the zero-based index of the first occurrence within the section of the source string that extends from the specified index to the end of the string using the specified <see cref="T:System.Globalization.CompareOptions" /> value.</summary>
        <returns>The zero-based index of the first occurrence of <paramref name="value" />, if found, within the section of <paramref name="source" /> that extends from <paramref name="startIndex" /> to the end of <paramref name="source" />, using the specified comparison options; otherwise, -1. Returns <paramref name="startIndex" /> if <paramref name="value" /> is an ignorable character.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Исходная строка выполняется от в `startIndex` и заканчивается в конце строки.  
  
 <xref:System.Globalization.CompareOptions.StringSort?displayProperty=nameWithType> Значение недопустимо для этого метода.  
  
 Если `options` не включает <xref:System.Globalization.CompareOptions.Ordinal> значение, эта перегрузка выполняет поиск с учетом языка и региональных параметров. Если символ Юникода, представляющее составной знак, например лигатура «?» (U + 00 C 6), он может считаться равным любому вхождению его компонентов в правильной последовательности, например «AE» (U + 0041, U + 0045), в зависимости от языка и региональных параметров. Если `options` включает в себя <xref:System.Globalization.CompareOptions.Ordinal> значение, эта перегрузка выполняет поиск по порядковым номерам (без учета языка и региональных параметров). Считаются эквивалентными только в том случае, если совпадают значения в кодировке Юникод. Перегруженные версии <xref:System.String.IndexOf%2A?displayProperty=nameWithType> , поиск символа выполняют поиск по порядковым номерам, в то время, как выполняющие поиск строки выполнения поиска с учетом языка и региональных параметров.  
  
> [!NOTE]
>  По возможности следует вызывать строковое сравнение методов, которые имеют параметр типа <xref:System.Globalization.CompareOptions> для указания ожидаемого вида сравнения. Как правило, используйте лингвистических параметров (с использованием текущего языка и региональных параметров) для сравнения строк, отображаемых в пользовательском интерфейсе и укажите <xref:System.Globalization.CompareOptions.Ordinal?displayProperty=nameWithType> или <xref:System.Globalization.CompareOptions.OrdinalIgnoreCase?displayProperty=nameWithType> для сравнений безопасности.  
  
   
  
## Examples  
 В следующем примере определяется индексы первого и последнего вхождения символа или подстроки в часть строки. Обратите внимание, что <xref:System.Globalization.CompareInfo.IndexOf%2A> и <xref:System.Globalization.CompareInfo.LastIndexOf%2A> поиск в различных частей строки, даже с теми же `startIndex` параметра.  
  
 [!code-cpp[System.Globalization.CompareInfo.IndexOfInt#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Globalization.CompareInfo.IndexOfInt/CPP/indexofint.cpp#1)]
 [!code-csharp[System.Globalization.CompareInfo.IndexOfInt#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Globalization.CompareInfo.IndexOfInt/CS/indexofint.cs#1)]
 [!code-vb[System.Globalization.CompareInfo.IndexOfInt#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Globalization.CompareInfo.IndexOfInt/VB/indexofint.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="source" /> is <see langword="null" />.</exception>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <paramref name="startIndex" /> is outside the range of valid indexes for <paramref name="source" />.</exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="options" /> contains an invalid <see cref="T:System.Globalization.CompareOptions" /> value.</exception>
        <block subset="none" type="usage">
          <para>Наборы символов содержат игнорируемые символы, то есть символы, которые не учитываются при выполнении лингвистического или зависящих от языка и региональных параметров сортировки. В поле поиска с учетом языка и региональных параметров Если <paramref name="value" /> — игнорируемый символ, результат аналогичен поиску с удаленным этим символом. В этом случае <see cref="M:System.Globalization.CompareInfo.IndexOf(System.String,System.Char,System.Int32,System.Globalization.CompareOptions)" /> метод всегда возвращает <paramref name="startIndex" />, позицию символа, впервые начали поиска. В следующем примере <see cref="M:System.Globalization.CompareInfo.IndexOf(System.String,System.Char,System.Int32,System.Globalization.CompareOptions)" /> метод используется для поиска мягкий перенос (U + 00AD) после «n» в двух строках. Только одна из строк содержит мягкий перенос. В обоих случаях поскольку мягкий перенос является игнорируемым символом, поиск с учетом языка и региональных параметров возвращает 1, чтобы указать, что были найдены совпадения в позиции «n». Поиск по порядковым номерам, однако успешно находит мягкий перенос в одной строке и сообщает, что он отсутствует из второй строки.  [! code-csharp [System.Globalization.CompareInfo.IndexOf#8] (~/samples/snippets/csharp/VS_Snippets_CLR_System/system. Globalization.CompareInfo.IndexOf/CS/ignorable7.cs#8)] [! код vb [System.Globalization.CompareInfo.IndexOf#8] (~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system. Globalization.CompareInfo.IndexOf/VB/ignorable7.vb#8)]</para>
        </block>
        <altmember cref="M:System.Globalization.CompareInfo.LastIndexOf(System.String,System.Char)" />
        <altmember cref="T:System.Globalization.CompareOptions" />
      </Docs>
    </Member>
    <Member MemberName="IndexOf">
      <MemberSignature Language="C#" Value="public virtual int IndexOf (string source, char value, int startIndex, int count);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance int32 IndexOf(string source, char value, int32 startIndex, int32 count) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Globalization.CompareInfo.IndexOf(System.String,System.Char,System.Int32,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function IndexOf (source As String, value As Char, startIndex As Integer, count As Integer) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual int IndexOf(System::String ^ source, char value, int startIndex, int count);" />
      <MemberSignature Language="F#" Value="abstract member IndexOf : string * char * int * int -&gt; int&#xA;override this.IndexOf : string * char * int * int -&gt; int" Usage="compareInfo.IndexOf (source, value, startIndex, count)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Globalization</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="source" Type="System.String" />
        <Parameter Name="value" Type="System.Char" />
        <Parameter Name="startIndex" Type="System.Int32" />
        <Parameter Name="count" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="source">The string to search.</param>
        <param name="value">The character to locate within <c>source</c>.</param>
        <param name="startIndex">The zero-based starting index of the search.</param>
        <param name="count">The number of elements in the section to search.</param>
        <summary>Searches for the specified character and returns the zero-based index of the first occurrence within the section of the source string that starts at the specified index and contains the specified number of elements.</summary>
        <returns>The zero-based index of the first occurrence of <paramref name="value" />, if found, within the section of <paramref name="source" /> that starts at <paramref name="startIndex" /> and contains the number of elements specified by <paramref name="count" />; otherwise, -1. Returns <paramref name="startIndex" /> if <paramref name="value" /> is an ignorable character.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Исходная строка выполняется от в `startIndex` и заканчивая `startIndex`  +  `count` - 1.  
  
 Эта перегрузка выполняет поиск с учетом языка и региональных параметров. Если символ Юникода, представляющее составной знак, например лигатура «?» (U + 00 C 6), он может считаться равным любому вхождению его компонентов в правильной последовательности, например «AE» (U + 0041, U + 0045), в зависимости от языка и региональных параметров. Чтобы выполнить поиск по порядковым номерам (без учета языка и региональных параметров), в котором символ считаются эквивалентными, только в том случае, если совпадают значения в кодировке Юникод, следует вызвать одну из перегрузок, которые имеет параметр типа <xref:System.Globalization.CompareOptions> и использовать <xref:System.Globalization.CompareOptions.Ordinal> значение. Перегруженные версии <xref:System.String.IndexOf%2A?displayProperty=nameWithType> , поиск символа выполняют поиск по порядковым номерам, в то время, как выполняющие поиск строки выполнения поиска с учетом языка и региональных параметров.  
  
> [!NOTE]
>  По возможности следует вызывать строковое сравнение методов, которые имеют параметр типа <xref:System.Globalization.CompareOptions> для указания ожидаемого вида сравнения. Как правило, используйте лингвистических параметров (с использованием текущего языка и региональных параметров) для сравнения строк, отображаемых в пользовательском интерфейсе и укажите <xref:System.Globalization.CompareOptions.Ordinal?displayProperty=nameWithType> или <xref:System.Globalization.CompareOptions.OrdinalIgnoreCase?displayProperty=nameWithType> для сравнений безопасности.  
  
   
  
## Examples  
 В следующем примере определяется индексы первого и последнего вхождения символа или подстроки в часть строки.  
  
 [!code-cpp[System.Globalization.CompareInfo.IndexOfIntInt#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Globalization.CompareInfo.IndexOfIntInt/CPP/indexofintint.cpp#1)]
 [!code-csharp[System.Globalization.CompareInfo.IndexOfIntInt#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Globalization.CompareInfo.IndexOfIntInt/CS/indexofintint.cs#1)]
 [!code-vb[System.Globalization.CompareInfo.IndexOfIntInt#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Globalization.CompareInfo.IndexOfIntInt/VB/indexofintint.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="source" /> is <see langword="null" />.</exception>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <paramref name="startIndex" /> is outside the range of valid indexes for <paramref name="source" />.  -or-  <paramref name="count" /> is less than zero.  -or-  <paramref name="startIndex" /> and <paramref name="count" /> do not specify a valid section in <paramref name="source" />.</exception>
        <block subset="none" type="usage">
          <para>Наборы символов содержат игнорируемые символы, то есть символы, которые не учитываются при выполнении лингвистического или зависящих от языка и региональных параметров сортировки. В поле поиска с учетом языка и региональных параметров Если <paramref name="value" /> — игнорируемый символ, результат аналогичен поиску с удаленным этим символом. В этом случае <see cref="M:System.Globalization.CompareInfo.IndexOf(System.String,System.Char,System.Int32,System.Int32)" /> метод всегда возвращает <paramref name="startIndex" />, являющийся позицию символа, впервые начали поиска. В следующем примере <see cref="M:System.Globalization.CompareInfo.IndexOf(System.String,System.Char,System.Int32,System.Int32)" /> метод используется для поиска мягкий перенос (U + 00AD) после «n» в двух строках. Только одна из строк содержит мягкий перенос. В обоих случаях поскольку мягкий перенос является игнорируемым символом, метод возвращает 1, чтобы указать, что были найдены совпадения в позиции «n».  [! code-csharp [System.Globalization.CompareInfo.IndexOf#9] (~/samples/snippets/csharp/VS_Snippets_CLR_System/system. Globalization.CompareInfo.IndexOf/CS/ignorable8.cs#9)] [! код vb [System.Globalization.CompareInfo.IndexOf#9] (~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system. Globalization.CompareInfo.IndexOf/VB/ignorable8.vb#9)]</para>
        </block>
        <altmember cref="M:System.Globalization.CompareInfo.LastIndexOf(System.String,System.Char)" />
      </Docs>
    </Member>
    <Member MemberName="IndexOf">
      <MemberSignature Language="C#" Value="public virtual int IndexOf (string source, string value, int startIndex, System.Globalization.CompareOptions options);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance int32 IndexOf(string source, string value, int32 startIndex, valuetype System.Globalization.CompareOptions options) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Globalization.CompareInfo.IndexOf(System.String,System.String,System.Int32,System.Globalization.CompareOptions)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function IndexOf (source As String, value As String, startIndex As Integer, options As CompareOptions) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual int IndexOf(System::String ^ source, System::String ^ value, int startIndex, System::Globalization::CompareOptions options);" />
      <MemberSignature Language="F#" Value="abstract member IndexOf : string * string * int * System.Globalization.CompareOptions -&gt; int&#xA;override this.IndexOf : string * string * int * System.Globalization.CompareOptions -&gt; int" Usage="compareInfo.IndexOf (source, value, startIndex, options)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Globalization</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="source" Type="System.String" />
        <Parameter Name="value" Type="System.String" />
        <Parameter Name="startIndex" Type="System.Int32" />
        <Parameter Name="options" Type="System.Globalization.CompareOptions" />
      </Parameters>
      <Docs>
        <param name="source">The string to search.</param>
        <param name="value">The string to locate within <c>source</c>.</param>
        <param name="startIndex">The zero-based starting index of the search.</param>
        <param name="options">A value that defines how <c>source</c> and <c>value</c> should be compared. <c>options</c> is either the enumeration value <see cref="F:System.Globalization.CompareOptions.Ordinal" />, or a bitwise combination of one or more of the following values: <see cref="F:System.Globalization.CompareOptions.IgnoreCase" />, <see cref="F:System.Globalization.CompareOptions.IgnoreSymbols" />, <see cref="F:System.Globalization.CompareOptions.IgnoreNonSpace" />, <see cref="F:System.Globalization.CompareOptions.IgnoreWidth" />, and <see cref="F:System.Globalization.CompareOptions.IgnoreKanaType" />.</param>
        <summary>Searches for the specified substring and returns the zero-based index of the first occurrence within the section of the source string that extends from the specified index to the end of the string using the specified <see cref="T:System.Globalization.CompareOptions" /> value.</summary>
        <returns>The zero-based index of the first occurrence of <paramref name="value" />, if found, within the section of <paramref name="source" /> that extends from <paramref name="startIndex" /> to the end of <paramref name="source" />, using the specified comparison options; otherwise, -1. Returns <paramref name="startIndex" /> if <paramref name="value" /> is an ignorable character.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Исходная строка выполняется от в `startIndex` и заканчивается в конце строки.  
  
 <xref:System.Globalization.CompareOptions.StringSort?displayProperty=nameWithType> Значение недопустимо для этого метода.  
  
 Если `options` не включает <xref:System.Globalization.CompareOptions.Ordinal> значение, эта перегрузка выполняет поиск с учетом языка и региональных параметров. Значение Юникода, представляющее составной знак, например лигатура «?» (U + 00 C 6), может рассматриваться как эквивалент любого вхождения компонентов символа в правильной последовательности, например «AE» (U + 0041, U + 0045), в зависимости от языка и региональных параметров. Если `options` включает в себя <xref:System.Globalization.CompareOptions.Ordinal> значение, эта перегрузка выполняет поиск по порядковым номерам (без учета языка и региональных параметров), где сравниваются значения в кодировке Юникод.  
  
> [!NOTE]
>  По возможности следует вызывать строковое сравнение методов, которые имеют параметр типа <xref:System.Globalization.CompareOptions> для указания ожидаемого вида сравнения. Как правило, используйте лингвистических параметров (с использованием текущего языка и региональных параметров) для сравнения строк, отображаемых в пользовательском интерфейсе и укажите <xref:System.Globalization.CompareOptions.Ordinal?displayProperty=nameWithType> или <xref:System.Globalization.CompareOptions.OrdinalIgnoreCase?displayProperty=nameWithType> для сравнений безопасности.  
  
   
  
## Examples  
 В следующем примере определяется индексы первого и последнего вхождения символа или подстроки в часть строки. Обратите внимание, что <xref:System.Globalization.CompareInfo.IndexOf%2A> и <xref:System.Globalization.CompareInfo.LastIndexOf%2A> поиск в различных частей строки, даже с теми же `startIndex` параметра.  
  
 [!code-cpp[System.Globalization.CompareInfo.IndexOfInt#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Globalization.CompareInfo.IndexOfInt/CPP/indexofint.cpp#1)]
 [!code-csharp[System.Globalization.CompareInfo.IndexOfInt#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Globalization.CompareInfo.IndexOfInt/CS/indexofint.cs#1)]
 [!code-vb[System.Globalization.CompareInfo.IndexOfInt#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Globalization.CompareInfo.IndexOfInt/VB/indexofint.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="source" /> is <see langword="null" />.  -or-  <paramref name="value" /> is <see langword="null" />.</exception>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <paramref name="startIndex" /> is outside the range of valid indexes for <paramref name="source" />.</exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="options" /> contains an invalid <see cref="T:System.Globalization.CompareOptions" /> value.</exception>
        <block subset="none" type="usage">
          <para>Наборы символов содержат игнорируемые символы, то есть символы, которые не учитываются при выполнении лингвистического или зависящих от языка и региональных параметров сортировки. Если при поиске с учетом языка и региональных параметров (то есть, если параметр <paramref name="options" /> не имеет значение <see cref="F:System.Globalization.CompareOptions.Ordinal" /> или <see cref="F:System.Globalization.CompareOptions.OrdinalIgnoreCase" />) параметр <paramref name="value" /> содержит игнорируемый символ, результат аналогичен поиску с удаленным этим символом. Если <paramref name="value" /> состоит только из одного или нескольких символов можно игнорировать, <see cref="M:System.Globalization.CompareInfo.IndexOf(System.String,System.String,System.Int32,System.Globalization.CompareOptions)" /> метод всегда возвращает <paramref name="startIndex" />, который является позицию символа, с которого начинается поиск.  В следующем примере <see cref="M:System.Globalization.CompareInfo.IndexOf(System.String,System.String,System.Int32,System.Globalization.CompareOptions)" /> метод позволяет найти позицию мягкий перенос (U + 00AD) следуют «m», начиная с третьей позиции символа в двух строках. Только одна из строк содержит требуемую подстроку. Поскольку мягкий перенос является игнорируемым символом, в обоих случаях при сравнении с учетом языка и региональных параметров метод возвращает индекс символа "m" в строке. Обратите внимание, что в случае первой строки, содержащей мягкий перенос перед буквой "m", этот метод возвращает не индекс мягкого переноса, а индекс буквы "m". Метод возвращает индекс мягкого переноса в первой строке только в том случае, когда он выполняет порядковое сравнение.  [! code-csharp [System.Globalization.CompareInfo.IndexOf#15] (~/samples/snippets/csharp/VS_Snippets_CLR_System/system. Globalization.CompareInfo.IndexOf/CS/ignorable14.cs#15)] [! код vb [System.Globalization.CompareInfo.IndexOf#15] (~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system. Globalization.CompareInfo.IndexOf/VB/ignorable14.vb#15)]</para>
        </block>
        <altmember cref="M:System.Globalization.CompareInfo.LastIndexOf(System.String,System.Char)" />
        <altmember cref="T:System.Globalization.CompareOptions" />
      </Docs>
    </Member>
    <Member MemberName="IndexOf">
      <MemberSignature Language="C#" Value="public virtual int IndexOf (string source, string value, int startIndex, int count);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance int32 IndexOf(string source, string value, int32 startIndex, int32 count) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Globalization.CompareInfo.IndexOf(System.String,System.String,System.Int32,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function IndexOf (source As String, value As String, startIndex As Integer, count As Integer) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual int IndexOf(System::String ^ source, System::String ^ value, int startIndex, int count);" />
      <MemberSignature Language="F#" Value="abstract member IndexOf : string * string * int * int -&gt; int&#xA;override this.IndexOf : string * string * int * int -&gt; int" Usage="compareInfo.IndexOf (source, value, startIndex, count)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Globalization</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="source" Type="System.String" />
        <Parameter Name="value" Type="System.String" />
        <Parameter Name="startIndex" Type="System.Int32" />
        <Parameter Name="count" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="source">The string to search.</param>
        <param name="value">The string to locate within <c>source</c>.</param>
        <param name="startIndex">The zero-based starting index of the search.</param>
        <param name="count">The number of elements in the section to search.</param>
        <summary>Searches for the specified substring and returns the zero-based index of the first occurrence within the section of the source string that starts at the specified index and contains the specified number of elements.</summary>
        <returns>The zero-based index of the first occurrence of <paramref name="value" />, if found, within the section of <paramref name="source" /> that starts at <paramref name="startIndex" /> and contains the number of elements specified by <paramref name="count" />; otherwise, -1. Returns <paramref name="startIndex" /> if <paramref name="value" /> is an ignorable character.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Исходная строка выполняется от в `startIndex` и заканчивая `startIndex`  +  `count` - 1.  
  
 Эта перегрузка выполняет поиск с учетом языка и региональных параметров. Значение Юникода, представляющее составной знак, например лигатура «?» (U + 00 C 6), может рассматриваться как эквивалент любого вхождения компонентов символа в правильной последовательности, например «AE» (U + 0041, U + 0045), в зависимости от языка и региональных параметров. Чтобы выполнить поиск по порядковым номерам (без учета языка и региональных параметров), в котором сравниваются значения в кодировке Юникод, следует вызвать одну из перегрузок, которые имеет параметр типа <xref:System.Globalization.CompareOptions> и использовать <xref:System.Globalization.CompareOptions.Ordinal> значение.  
  
> [!NOTE]
>  По возможности следует вызывать строковое сравнение методов, которые имеют параметр типа <xref:System.Globalization.CompareOptions> для указания ожидаемого вида сравнения. Как правило, используйте лингвистических параметров (с использованием текущего языка и региональных параметров) для сравнения строк, отображаемых в пользовательском интерфейсе и укажите <xref:System.Globalization.CompareOptions.Ordinal?displayProperty=nameWithType> или <xref:System.Globalization.CompareOptions.OrdinalIgnoreCase?displayProperty=nameWithType> для сравнений безопасности.  
  
   
  
## Examples  
 В следующем примере определяется индексы первого и последнего вхождения символа или подстроки в часть строки.  
  
 [!code-cpp[System.Globalization.CompareInfo.IndexOfIntInt#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Globalization.CompareInfo.IndexOfIntInt/CPP/indexofintint.cpp#1)]
 [!code-csharp[System.Globalization.CompareInfo.IndexOfIntInt#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Globalization.CompareInfo.IndexOfIntInt/CS/indexofintint.cs#1)]
 [!code-vb[System.Globalization.CompareInfo.IndexOfIntInt#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Globalization.CompareInfo.IndexOfIntInt/VB/indexofintint.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="source" /> is <see langword="null" />.  -or-  <paramref name="value" /> is <see langword="null" />.</exception>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <paramref name="startIndex" /> is outside the range of valid indexes for <paramref name="source" />.  -or-  <paramref name="count" /> is less than zero.  -or-  <paramref name="startIndex" /> and <paramref name="count" /> do not specify a valid section in <paramref name="source" />.</exception>
        <block subset="none" type="usage">
          <para>Наборы символов содержат игнорируемые символы, то есть символы, которые не учитываются при выполнении лингвистического или зависящих от языка и региональных параметров сортировки. Если при поиске с учетом языка и региональных параметров параметр <paramref name="value" /> содержит игнорируемый символ, результат аналогичен поиску с удаленным этим символом. Если <paramref name="value" /> состоит только из одного или нескольких символов можно игнорировать, <see cref="M:System.Globalization.CompareInfo.IndexOf(System.String,System.String,System.Int32,System.Int32)" /> метод всегда возвращает <paramref name="startIndex" />, который является позицию символа, с которого начинается поиск.  В следующем примере <see cref="M:System.Globalization.CompareInfo.IndexOf(System.String,System.String,System.Int32,System.Int32)" /> метод позволяет найти позицию мягкий перенос (U + 00AD) следуют «m», начиная с третьего по шестой позиций знаков в две строки. Только одна из строк содержит требуемую подстроку. Поскольку мягкий перенос является игнорируемым символом, в обоих случаях при сравнении с учетом языка и региональных параметров метод возвращает индекс символа "m" в строке. Обратите внимание, что в случае первой строки, содержащей мягкий перенос перед буквой «m», метод возвращает не индекс мягкого переноса, но вместо этого возвращает индекс «m».  [! code-csharp [System.Globalization.CompareInfo.IndexOf#17] (~/samples/snippets/csharp/VS_Snippets_CLR_System/system. Globalization.CompareInfo.IndexOf/CS/ignorable16.cs#17)] [! код vb [System.Globalization.CompareInfo.IndexOf#17] (~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system. Globalization.CompareInfo.IndexOf/VB/ignorable16.vb#17)]</para>
        </block>
        <altmember cref="M:System.Globalization.CompareInfo.LastIndexOf(System.String,System.Char)" />
      </Docs>
    </Member>
    <Member MemberName="IndexOf">
      <MemberSignature Language="C#" Value="public virtual int IndexOf (string source, char value, int startIndex, int count, System.Globalization.CompareOptions options);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance int32 IndexOf(string source, char value, int32 startIndex, int32 count, valuetype System.Globalization.CompareOptions options) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Globalization.CompareInfo.IndexOf(System.String,System.Char,System.Int32,System.Int32,System.Globalization.CompareOptions)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function IndexOf (source As String, value As Char, startIndex As Integer, count As Integer, options As CompareOptions) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual int IndexOf(System::String ^ source, char value, int startIndex, int count, System::Globalization::CompareOptions options);" />
      <MemberSignature Language="F#" Value="abstract member IndexOf : string * char * int * int * System.Globalization.CompareOptions -&gt; int&#xA;override this.IndexOf : string * char * int * int * System.Globalization.CompareOptions -&gt; int" Usage="compareInfo.IndexOf (source, value, startIndex, count, options)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Globalization</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="source" Type="System.String" />
        <Parameter Name="value" Type="System.Char" />
        <Parameter Name="startIndex" Type="System.Int32" />
        <Parameter Name="count" Type="System.Int32" />
        <Parameter Name="options" Type="System.Globalization.CompareOptions" />
      </Parameters>
      <Docs>
        <param name="source">The string to search.</param>
        <param name="value">The character to locate within <c>source</c>.</param>
        <param name="startIndex">The zero-based starting index of the search.</param>
        <param name="count">The number of elements in the section to search.</param>
        <param name="options">A value that defines how <c>source</c> and <c>value</c> should be compared. <c>options</c> is either the enumeration value <see cref="F:System.Globalization.CompareOptions.Ordinal" />, or a bitwise combination of one or more of the following values: <see cref="F:System.Globalization.CompareOptions.IgnoreCase" />, <see cref="F:System.Globalization.CompareOptions.IgnoreSymbols" />, <see cref="F:System.Globalization.CompareOptions.IgnoreNonSpace" />, <see cref="F:System.Globalization.CompareOptions.IgnoreWidth" />, and <see cref="F:System.Globalization.CompareOptions.IgnoreKanaType" />.</param>
        <summary>Searches for the specified character and returns the zero-based index of the first occurrence within the section of the source string that starts at the specified index and contains the specified number of elements using the specified <see cref="T:System.Globalization.CompareOptions" /> value.</summary>
        <returns>The zero-based index of the first occurrence of <paramref name="value" />, if found, within the section of <paramref name="source" /> that starts at <paramref name="startIndex" /> and contains the number of elements specified by <paramref name="count" />, using the specified comparison options; otherwise, -1. Returns <paramref name="startIndex" /> if <paramref name="value" /> is an ignorable character.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Исходная строка выполняется от в `startIndex` и заканчивая `startIndex`  +  `count` - 1.  
  
 <xref:System.Globalization.CompareOptions.StringSort?displayProperty=nameWithType> Значение недопустимо для этого метода.  
  
 Если `options` не включает <xref:System.Globalization.CompareOptions.Ordinal> значение, эта перегрузка выполняет поиск с учетом языка и региональных параметров. Если символ Юникода, представляющее составной знак, например лигатура «?» (U + 00 C 6), он может считаться равным любому вхождению его компонентов в правильной последовательности, например «AE» (U + 0041, U + 0045), в зависимости от языка и региональных параметров. Если `options` включает в себя <xref:System.Globalization.CompareOptions.Ordinal> значение, эта перегрузка выполняет поиск по порядковым номерам (без учета языка и региональных параметров). Считаются эквивалентными только в том случае, если совпадают значения в кодировке Юникод. Перегруженные версии <xref:System.String.IndexOf%2A?displayProperty=nameWithType> , поиск символа выполняют поиск по порядковым номерам, в то время, как выполняющие поиск строки выполнения поиска с учетом языка и региональных параметров.  
  
> [!NOTE]
>  По возможности следует вызывать строковое сравнение методов, которые имеют параметр типа <xref:System.Globalization.CompareOptions> для указания ожидаемого вида сравнения. Как правило, используйте лингвистических параметров (с использованием текущего языка и региональных параметров) для сравнения строк, отображаемых в пользовательском интерфейсе и укажите <xref:System.Globalization.CompareOptions.Ordinal?displayProperty=nameWithType> или <xref:System.Globalization.CompareOptions.OrdinalIgnoreCase?displayProperty=nameWithType> для сравнений безопасности.  
  
   
  
## Examples  
 В следующем примере определяется индексы первого и последнего вхождения символа или подстроки в часть строки.  
  
 [!code-cpp[System.Globalization.CompareInfo.IndexOfIntInt#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Globalization.CompareInfo.IndexOfIntInt/CPP/indexofintint.cpp#1)]
 [!code-csharp[System.Globalization.CompareInfo.IndexOfIntInt#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Globalization.CompareInfo.IndexOfIntInt/CS/indexofintint.cs#1)]
 [!code-vb[System.Globalization.CompareInfo.IndexOfIntInt#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Globalization.CompareInfo.IndexOfIntInt/VB/indexofintint.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="source" /> is <see langword="null" />.</exception>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <paramref name="startIndex" /> is outside the range of valid indexes for <paramref name="source" />.  -or-  <paramref name="count" /> is less than zero.  -or-  <paramref name="startIndex" /> and <paramref name="count" /> do not specify a valid section in <paramref name="source" />.</exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="options" /> contains an invalid <see cref="T:System.Globalization.CompareOptions" /> value.</exception>
        <block subset="none" type="usage">
          <para>Наборы символов содержат игнорируемые символы, то есть символы, которые не учитываются при выполнении лингвистического или зависящих от языка и региональных параметров сортировки. В поле поиска с учетом языка и региональных параметров Если <paramref name="value" /> — игнорируемый символ, результат аналогичен поиску с удаленным этим символом. В этом случае <see cref="M:System.Globalization.CompareInfo.IndexOf(System.String,System.Char,System.Int32,System.Int32,System.Globalization.CompareOptions)" /> метод всегда возвращает <paramref name="startIndex" />, являющийся позицию символа, впервые начали поиска. В следующем примере <see cref="M:System.Globalization.CompareInfo.IndexOf(System.String,System.Char,System.Int32,System.Int32,System.Globalization.CompareOptions)" /> метод используется для поиска мягкий перенос (U + 00AD) после «n» в двух строках. Только одна из строк содержит мягкий перенос. В обоих случаях поскольку мягкий перенос является игнорируемым символом, поиск с учетом языка и региональных параметров возвращает 1, чтобы указать, что были найдены совпадения в позиции «n». Поиск по порядковым номерам, однако успешно находит мягкий перенос в одной строке и сообщает, что он отсутствует из второй строки.  [! code-csharp [System.Globalization.CompareInfo.IndexOf#12] (~/samples/snippets/csharp/VS_Snippets_CLR_System/system. Globalization.CompareInfo.IndexOf/CS/ignorable11.cs#12)] [! код vb [System.Globalization.CompareInfo.IndexOf#12] (~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system. Globalization.CompareInfo.IndexOf/VB/ignorable11.vb#12)]</para>
        </block>
        <altmember cref="M:System.Globalization.CompareInfo.LastIndexOf(System.String,System.Char)" />
        <altmember cref="T:System.Globalization.CompareOptions" />
      </Docs>
    </Member>
    <Member MemberName="IndexOf">
      <MemberSignature Language="C#" Value="public virtual int IndexOf (string source, string value, int startIndex, int count, System.Globalization.CompareOptions options);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance int32 IndexOf(string source, string value, int32 startIndex, int32 count, valuetype System.Globalization.CompareOptions options) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Globalization.CompareInfo.IndexOf(System.String,System.String,System.Int32,System.Int32,System.Globalization.CompareOptions)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function IndexOf (source As String, value As String, startIndex As Integer, count As Integer, options As CompareOptions) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual int IndexOf(System::String ^ source, System::String ^ value, int startIndex, int count, System::Globalization::CompareOptions options);" />
      <MemberSignature Language="F#" Value="abstract member IndexOf : string * string * int * int * System.Globalization.CompareOptions -&gt; int&#xA;override this.IndexOf : string * string * int * int * System.Globalization.CompareOptions -&gt; int" Usage="compareInfo.IndexOf (source, value, startIndex, count, options)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Globalization</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="source" Type="System.String" />
        <Parameter Name="value" Type="System.String" />
        <Parameter Name="startIndex" Type="System.Int32" />
        <Parameter Name="count" Type="System.Int32" />
        <Parameter Name="options" Type="System.Globalization.CompareOptions" />
      </Parameters>
      <Docs>
        <param name="source">The string to search.</param>
        <param name="value">The string to locate within <c>source</c>.</param>
        <param name="startIndex">The zero-based starting index of the search.</param>
        <param name="count">The number of elements in the section to search.</param>
        <param name="options">A value that defines how <c>source</c> and <c>value</c> should be compared. <c>options</c> is either the enumeration value <see cref="F:System.Globalization.CompareOptions.Ordinal" />, or a bitwise combination of one or more of the following values: <see cref="F:System.Globalization.CompareOptions.IgnoreCase" />, <see cref="F:System.Globalization.CompareOptions.IgnoreSymbols" />, <see cref="F:System.Globalization.CompareOptions.IgnoreNonSpace" />, <see cref="F:System.Globalization.CompareOptions.IgnoreWidth" />, and <see cref="F:System.Globalization.CompareOptions.IgnoreKanaType" />.</param>
        <summary>Searches for the specified substring and returns the zero-based index of the first occurrence within the section of the source string that starts at the specified index and contains the specified number of elements using the specified <see cref="T:System.Globalization.CompareOptions" /> value.</summary>
        <returns>The zero-based index of the first occurrence of <paramref name="value" />, if found, within the section of <paramref name="source" /> that starts at <paramref name="startIndex" /> and contains the number of elements specified by <paramref name="count" />, using the specified comparison options; otherwise, -1. Returns <paramref name="startIndex" /> if <paramref name="value" /> is an ignorable character.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Исходная строка выполняется от в `startIndex` и заканчивая `startIndex`  +  `count` - 1.  
  
 <xref:System.Globalization.CompareOptions.StringSort?displayProperty=nameWithType> Значение недопустимо для этого метода.  
  
 Если `options` не включает <xref:System.Globalization.CompareOptions.Ordinal> значение, эта перегрузка выполняет поиск с учетом языка и региональных параметров. Значение Юникода, представляющее составной знак, например лигатура «?» (U + 00 C 6), может рассматриваться как эквивалент любого вхождения компонентов символа в правильной последовательности, например «AE» (U + 0041, U + 0045), в зависимости от языка и региональных параметров. Если `options` включает в себя <xref:System.Globalization.CompareOptions.Ordinal> значение, эта перегрузка выполняет поиск по порядковым номерам (без учета языка и региональных параметров), где сравниваются значения в кодировке Юникод.  
  
> [!NOTE]
>  По возможности следует вызывать строковое сравнение методов, которые имеют параметр типа <xref:System.Globalization.CompareOptions> для указания ожидаемого вида сравнения. Как правило, используйте лингвистических параметров (с использованием текущего языка и региональных параметров) для сравнения строк, отображаемых в пользовательском интерфейсе и укажите <xref:System.Globalization.CompareOptions.Ordinal?displayProperty=nameWithType> или <xref:System.Globalization.CompareOptions.OrdinalIgnoreCase?displayProperty=nameWithType> для сравнений безопасности.  
  
   
  
## Examples  
 В следующем примере определяется индексы первого и последнего вхождения символа или подстроки в часть строки.  
  
 [!code-cpp[System.Globalization.CompareInfo.IndexOfIntInt#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Globalization.CompareInfo.IndexOfIntInt/CPP/indexofintint.cpp#1)]
 [!code-csharp[System.Globalization.CompareInfo.IndexOfIntInt#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Globalization.CompareInfo.IndexOfIntInt/CS/indexofintint.cs#1)]
 [!code-vb[System.Globalization.CompareInfo.IndexOfIntInt#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Globalization.CompareInfo.IndexOfIntInt/VB/indexofintint.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="source" /> is <see langword="null" />.  -or-  <paramref name="value" /> is <see langword="null" />.</exception>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <paramref name="startIndex" /> is outside the range of valid indexes for <paramref name="source" />.  -or-  <paramref name="count" /> is less than zero.  -or-  <paramref name="startIndex" /> and <paramref name="count" /> do not specify a valid section in <paramref name="source" />.</exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="options" /> contains an invalid <see cref="T:System.Globalization.CompareOptions" /> value.</exception>
        <block subset="none" type="usage">
          <para>Наборы символов содержат игнорируемые символы, то есть символы, которые не учитываются при выполнении лингвистического или зависящих от языка и региональных параметров сортировки. Если при поиске с учетом языка и региональных параметров (то есть, если параметр <paramref name="options" /> не имеет значение <see cref="F:System.Globalization.CompareOptions.Ordinal" /> или <see cref="F:System.Globalization.CompareOptions.OrdinalIgnoreCase" />) параметр <paramref name="value" /> содержит игнорируемый символ, результат аналогичен поиску с удаленным этим символом. Если <paramref name="value" /> состоит только из одного или нескольких символов можно игнорировать, <see cref="M:System.Globalization.CompareInfo.IndexOf(System.String,System.String,System.Int32,System.Int32,System.Globalization.CompareOptions)" /> метод всегда возвращает <paramref name="startIndex" />, который является позицию символа, с которого начинается поиск.  В следующем примере <see cref="M:System.Globalization.CompareInfo.IndexOf(System.String,System.String,System.Int32,System.Int32,System.Globalization.CompareOptions)" /> метод позволяет найти позицию мягкий перенос (U + 00AD) следуют «m», начиная с третьего по шестой позиций знаков в две строки. Только одна из строк содержит требуемую подстроку. Поскольку мягкий перенос является игнорируемым символом, в обоих случаях при сравнении с учетом языка и региональных параметров метод возвращает индекс символа "m" в строке. Когда он выполняет порядковое сравнение, однако она находит подстрока только в первой строке. Обратите внимание, что в случае первой строки, содержащей мягкий перенос перед буквой «m», метод возвращает не индекс мягкого переноса, но вместо этого возвращает индекс «m», когда он выполняет сравнение с учетом языка и региональных параметров. Метод возвращает индекс мягкого переноса в первой строке только в том случае, когда он выполняет порядковое сравнение.  [! code-csharp [System.Globalization.CompareInfo.IndexOf#16] (~/samples/snippets/csharp/VS_Snippets_CLR_System/system. Globalization.CompareInfo.IndexOf/CS/ignorable15.cs#16)] [! код vb [System.Globalization.CompareInfo.IndexOf#16] (~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system. Globalization.CompareInfo.IndexOf/VB/ignorable15.vb#16)]</para>
        </block>
        <altmember cref="M:System.Globalization.CompareInfo.LastIndexOf(System.String,System.Char)" />
        <altmember cref="T:System.Globalization.CompareOptions" />
      </Docs>
    </Member>
    <MemberGroup MemberName="IsPrefix">
      <AssemblyInfo>
        <AssemblyName>System.Globalization</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Determines whether a string starts with a specific prefix.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="IsPrefix">
      <MemberSignature Language="C#" Value="public virtual bool IsPrefix (string source, string prefix);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool IsPrefix(string source, string prefix) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Globalization.CompareInfo.IsPrefix(System.String,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function IsPrefix (source As String, prefix As String) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual bool IsPrefix(System::String ^ source, System::String ^ prefix);" />
      <MemberSignature Language="F#" Value="abstract member IsPrefix : string * string -&gt; bool&#xA;override this.IsPrefix : string * string -&gt; bool" Usage="compareInfo.IsPrefix (source, prefix)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Globalization</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="source" Type="System.String" />
        <Parameter Name="prefix" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="source">The string to search in.</param>
        <param name="prefix">The string to compare with the beginning of <c>source</c>.</param>
        <summary>Determines whether the specified source string starts with the specified prefix.</summary>
        <returns>
          <see langword="true" /> if the length of <paramref name="prefix" /> is less than or equal to the length of <paramref name="source" /> and <paramref name="source" /> starts with <paramref name="prefix" />; otherwise, <see langword="false" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Каждая строка начинается и заканчивается пустой подстрокой (»»); Таким образом Если `prefix` является пустой строкой, этот метод возвращает `true`.  
  
> [!NOTE]
>  По возможности следует вызывать строковое сравнение методов, которые имеют параметр типа <xref:System.Globalization.CompareOptions> для указания ожидаемого вида сравнения. Как правило, используйте лингвистических параметров (с использованием текущего языка и региональных параметров) для сравнения строк, отображаемых в пользовательском интерфейсе и укажите <xref:System.Globalization.CompareOptions.Ordinal?displayProperty=nameWithType> или <xref:System.Globalization.CompareOptions.OrdinalIgnoreCase?displayProperty=nameWithType> для сравнений безопасности.  
  
   
  
## Examples  
 В следующем примере определяется, является ли строка в префиксе или суффиксе другой строки.  
  
 [!code-cpp[System.Globalization.CompareInfo.IsPrefixSuffix#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Globalization.CompareInfo.IsPrefixSuffix/CPP/isprefixsuffix.cpp#1)]
 [!code-csharp[System.Globalization.CompareInfo.IsPrefixSuffix#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Globalization.CompareInfo.IsPrefixSuffix/CS/isprefixsuffix.cs#1)]
 [!code-vb[System.Globalization.CompareInfo.IsPrefixSuffix#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Globalization.CompareInfo.IsPrefixSuffix/VB/isprefixsuffix.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="source" /> is <see langword="null" />.  -or-  <paramref name="prefix" /> is <see langword="null" />.</exception>
        <altmember cref="M:System.Globalization.CompareInfo.IsSuffix(System.String,System.String,System.Globalization.CompareOptions)" />
      </Docs>
    </Member>
    <Member MemberName="IsPrefix">
      <MemberSignature Language="C#" Value="public virtual bool IsPrefix (string source, string prefix, System.Globalization.CompareOptions options);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool IsPrefix(string source, string prefix, valuetype System.Globalization.CompareOptions options) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Globalization.CompareInfo.IsPrefix(System.String,System.String,System.Globalization.CompareOptions)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function IsPrefix (source As String, prefix As String, options As CompareOptions) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual bool IsPrefix(System::String ^ source, System::String ^ prefix, System::Globalization::CompareOptions options);" />
      <MemberSignature Language="F#" Value="abstract member IsPrefix : string * string * System.Globalization.CompareOptions -&gt; bool&#xA;override this.IsPrefix : string * string * System.Globalization.CompareOptions -&gt; bool" Usage="compareInfo.IsPrefix (source, prefix, options)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Globalization</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="source" Type="System.String" />
        <Parameter Name="prefix" Type="System.String" />
        <Parameter Name="options" Type="System.Globalization.CompareOptions" />
      </Parameters>
      <Docs>
        <param name="source">The string to search in.</param>
        <param name="prefix">The string to compare with the beginning of <c>source</c>.</param>
        <param name="options">A value that defines how <c>source</c> and <c>prefix</c> should be compared. <c>options</c> is either the enumeration value <see cref="F:System.Globalization.CompareOptions.Ordinal" />, or a bitwise combination of one or more of the following values: <see cref="F:System.Globalization.CompareOptions.IgnoreCase" />, <see cref="F:System.Globalization.CompareOptions.IgnoreSymbols" />, <see cref="F:System.Globalization.CompareOptions.IgnoreNonSpace" />, <see cref="F:System.Globalization.CompareOptions.IgnoreWidth" />, and <see cref="F:System.Globalization.CompareOptions.IgnoreKanaType" />.</param>
        <summary>Determines whether the specified source string starts with the specified prefix using the specified <see cref="T:System.Globalization.CompareOptions" /> value.</summary>
        <returns>
          <see langword="true" /> if the length of <paramref name="prefix" /> is less than or equal to the length of <paramref name="source" /> and <paramref name="source" /> starts with <paramref name="prefix" />; otherwise, <see langword="false" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Каждая строка начинается и заканчивается пустой подстрокой (»»); Таким образом Если `prefix` является пустой строкой, этот метод возвращает `true`.  
  
 <xref:System.Globalization.CompareOptions.StringSort?displayProperty=nameWithType> Значение недопустимо для этого метода.  
  
> [!NOTE]
>  По возможности следует вызывать строковое сравнение методов, которые имеют параметр типа <xref:System.Globalization.CompareOptions> для указания ожидаемого вида сравнения. Как правило, используйте лингвистических параметров (с использованием текущего языка и региональных параметров) для сравнения строк, отображаемых в пользовательском интерфейсе и укажите <xref:System.Globalization.CompareOptions.Ordinal?displayProperty=nameWithType> или <xref:System.Globalization.CompareOptions.OrdinalIgnoreCase?displayProperty=nameWithType> для сравнений безопасности.  
  
   
  
## Examples  
 В следующем примере определяется, является ли строка префикса или суффикса другой строки с помощью <xref:System.Globalization.CompareOptions>.  
  
 [!code-cpp[System.Globalization.CompareInfo.IsPrefixSuffixOpt#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Globalization.CompareInfo.IsPrefixSuffixOpt/CPP/isprefixsuffixopt.cpp#1)]
 [!code-csharp[System.Globalization.CompareInfo.IsPrefixSuffixOpt#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Globalization.CompareInfo.IsPrefixSuffixOpt/CS/isprefixsuffixopt.cs#1)]
 [!code-vb[System.Globalization.CompareInfo.IsPrefixSuffixOpt#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Globalization.CompareInfo.IsPrefixSuffixOpt/VB/isprefixsuffixopt.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="source" /> is <see langword="null" />.  -or-  <paramref name="prefix" /> is <see langword="null" />.</exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="options" /> contains an invalid <see cref="T:System.Globalization.CompareOptions" /> value.</exception>
        <altmember cref="M:System.Globalization.CompareInfo.IsSuffix(System.String,System.String,System.Globalization.CompareOptions)" />
        <altmember cref="T:System.Globalization.CompareOptions" />
      </Docs>
    </Member>
    <MemberGroup MemberName="IsSortable">
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Indicates whether a specified Unicode character or string is sortable.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="IsSortable">
      <MemberSignature Language="C#" Value="public static bool IsSortable (char ch);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool IsSortable(char ch) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Globalization.CompareInfo.IsSortable(System.Char)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function IsSortable (ch As Char) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool IsSortable(char ch);" />
      <MemberSignature Language="F#" Value="static member IsSortable : char -&gt; bool" Usage="System.Globalization.CompareInfo.IsSortable ch" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.ComVisible(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="ch" Type="System.Char" />
      </Parameters>
      <Docs>
        <param name="ch">A Unicode character.</param>
        <summary>Indicates whether a specified Unicode character is sortable.</summary>
        <returns>
          <see langword="true" /> if the <paramref name="ch" /> parameter is sortable; otherwise, <see langword="false" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 `ch` Параметр сортировки, если это знак Юникода, который определен во внутреннем <xref:System.Globalization.CompareInfo> класса таблицы сортировки и не является частным или непарные низкой или высокой символ.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsSortable">
      <MemberSignature Language="C#" Value="public static bool IsSortable (string text);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool IsSortable(string text) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Globalization.CompareInfo.IsSortable(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function IsSortable (text As String) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool IsSortable(System::String ^ text);" />
      <MemberSignature Language="F#" Value="static member IsSortable : string -&gt; bool" Usage="System.Globalization.CompareInfo.IsSortable text" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.ComVisible(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="text" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="text">A string of zero or more Unicode characters.</param>
        <summary>Indicates whether a specified Unicode string is sortable.</summary>
        <returns>
          <see langword="true" /> if the <paramref name="str" /> parameter is not an empty string ("") and all the Unicode characters in <paramref name="str" /> are sortable; otherwise, <see langword="false" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Каждый символ Юникода в `str` параметр представляет собой один или несколько UTF-16 в кодировке <xref:System.Char> объектов. `str` Параметр сортировки, если каждый символ Юникода определен во внутреннем <xref:System.Globalization.CompareInfo> класса таблицы сортировки и не является частным или непарные низкой или высокой символ.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="str" /> is <see langword="null" />.</exception>
      </Docs>
    </Member>
    <MemberGroup MemberName="IsSuffix">
      <AssemblyInfo>
        <AssemblyName>System.Globalization</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Determines whether a string ends with a specific suffix.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="IsSuffix">
      <MemberSignature Language="C#" Value="public virtual bool IsSuffix (string source, string suffix);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool IsSuffix(string source, string suffix) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Globalization.CompareInfo.IsSuffix(System.String,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function IsSuffix (source As String, suffix As String) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual bool IsSuffix(System::String ^ source, System::String ^ suffix);" />
      <MemberSignature Language="F#" Value="abstract member IsSuffix : string * string -&gt; bool&#xA;override this.IsSuffix : string * string -&gt; bool" Usage="compareInfo.IsSuffix (source, suffix)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Globalization</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="source" Type="System.String" />
        <Parameter Name="suffix" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="source">The string to search in.</param>
        <param name="suffix">The string to compare with the end of <c>source</c>.</param>
        <summary>Determines whether the specified source string ends with the specified suffix.</summary>
        <returns>
          <see langword="true" /> if the length of <paramref name="suffix" /> is less than or equal to the length of <paramref name="source" /> and <paramref name="source" /> ends with <paramref name="suffix" />; otherwise, <see langword="false" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Каждая строка начинается и заканчивается пустой подстрокой (»»); Таким образом Если `suffix` является пустой строкой, этот метод возвращает `true`.  
  
> [!NOTE]
>  По возможности следует вызывать строковое сравнение методов, которые имеют параметр типа <xref:System.Globalization.CompareOptions> для указания ожидаемого вида сравнения. Как правило, используйте лингвистических параметров (с использованием текущего языка и региональных параметров) для сравнения строк, отображаемых в пользовательском интерфейсе и укажите <xref:System.Globalization.CompareOptions.Ordinal?displayProperty=nameWithType> или <xref:System.Globalization.CompareOptions.OrdinalIgnoreCase?displayProperty=nameWithType> для сравнений безопасности.  
  
   
  
## Examples  
 В следующем примере определяется, является ли строка в префиксе или суффиксе другой строки.  
  
 [!code-cpp[System.Globalization.CompareInfo.IsPrefixSuffix#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Globalization.CompareInfo.IsPrefixSuffix/CPP/isprefixsuffix.cpp#1)]
 [!code-csharp[System.Globalization.CompareInfo.IsPrefixSuffix#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Globalization.CompareInfo.IsPrefixSuffix/CS/isprefixsuffix.cs#1)]
 [!code-vb[System.Globalization.CompareInfo.IsPrefixSuffix#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Globalization.CompareInfo.IsPrefixSuffix/VB/isprefixsuffix.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="source" /> is <see langword="null" />.  -or-  <paramref name="suffix" /> is <see langword="null" />.</exception>
        <altmember cref="M:System.Globalization.CompareInfo.IsPrefix(System.String,System.String,System.Globalization.CompareOptions)" />
      </Docs>
    </Member>
    <Member MemberName="IsSuffix">
      <MemberSignature Language="C#" Value="public virtual bool IsSuffix (string source, string suffix, System.Globalization.CompareOptions options);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool IsSuffix(string source, string suffix, valuetype System.Globalization.CompareOptions options) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Globalization.CompareInfo.IsSuffix(System.String,System.String,System.Globalization.CompareOptions)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function IsSuffix (source As String, suffix As String, options As CompareOptions) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual bool IsSuffix(System::String ^ source, System::String ^ suffix, System::Globalization::CompareOptions options);" />
      <MemberSignature Language="F#" Value="abstract member IsSuffix : string * string * System.Globalization.CompareOptions -&gt; bool&#xA;override this.IsSuffix : string * string * System.Globalization.CompareOptions -&gt; bool" Usage="compareInfo.IsSuffix (source, suffix, options)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Globalization</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="source" Type="System.String" />
        <Parameter Name="suffix" Type="System.String" />
        <Parameter Name="options" Type="System.Globalization.CompareOptions" />
      </Parameters>
      <Docs>
        <param name="source">The string to search in.</param>
        <param name="suffix">The string to compare with the end of <c>source</c>.</param>
        <param name="options">A value that defines how <c>source</c> and <c>suffix</c> should be compared. <c>options</c> is either the enumeration value <see cref="F:System.Globalization.CompareOptions.Ordinal" /> used by itself, or the bitwise combination of one or more of the following values: <see cref="F:System.Globalization.CompareOptions.IgnoreCase" />, <see cref="F:System.Globalization.CompareOptions.IgnoreSymbols" />, <see cref="F:System.Globalization.CompareOptions.IgnoreNonSpace" />, <see cref="F:System.Globalization.CompareOptions.IgnoreWidth" />, and <see cref="F:System.Globalization.CompareOptions.IgnoreKanaType" />.</param>
        <summary>Determines whether the specified source string ends with the specified suffix using the specified <see cref="T:System.Globalization.CompareOptions" /> value.</summary>
        <returns>
          <see langword="true" /> if the length of <paramref name="suffix" /> is less than or equal to the length of <paramref name="source" /> and <paramref name="source" /> ends with <paramref name="suffix" />; otherwise, <see langword="false" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Каждая строка начинается и заканчивается пустой подстрокой (»»); Таким образом Если `suffix` является пустой строкой, этот метод возвращает `true`.  
  
 <xref:System.Globalization.CompareOptions.StringSort?displayProperty=nameWithType> Значение недопустимо для этого метода.  
  
> [!NOTE]
>  По возможности следует вызывать строковое сравнение методов, которые имеют параметр типа <xref:System.Globalization.CompareOptions> для указания ожидаемого вида сравнения. Как правило, используйте лингвистических параметров (с использованием текущего языка и региональных параметров) для сравнения строк, отображаемых в пользовательском интерфейсе и укажите <xref:System.Globalization.CompareOptions.Ordinal?displayProperty=nameWithType> или <xref:System.Globalization.CompareOptions.OrdinalIgnoreCase?displayProperty=nameWithType> для сравнений безопасности.  
  
   
  
## Examples  
 В следующем примере определяется, является ли строка префикса или суффикса другой строки с помощью <xref:System.Globalization.CompareOptions>.  
  
 [!code-cpp[System.Globalization.CompareInfo.IsPrefixSuffixOpt#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Globalization.CompareInfo.IsPrefixSuffixOpt/CPP/isprefixsuffixopt.cpp#1)]
 [!code-csharp[System.Globalization.CompareInfo.IsPrefixSuffixOpt#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Globalization.CompareInfo.IsPrefixSuffixOpt/CS/isprefixsuffixopt.cs#1)]
 [!code-vb[System.Globalization.CompareInfo.IsPrefixSuffixOpt#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Globalization.CompareInfo.IsPrefixSuffixOpt/VB/isprefixsuffixopt.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="source" /> is <see langword="null" />.  -or-  <paramref name="suffix" /> is <see langword="null" />.</exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="options" /> contains an invalid <see cref="T:System.Globalization.CompareOptions" /> value.</exception>
        <altmember cref="M:System.Globalization.CompareInfo.IsPrefix(System.String,System.String,System.Globalization.CompareOptions)" />
        <altmember cref="T:System.Globalization.CompareOptions" />
      </Docs>
    </Member>
    <MemberGroup MemberName="LastIndexOf">
      <AssemblyInfo>
        <AssemblyName>System.Globalization</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Returns the zero-based index of the last occurrence of a value within a string or within a portion of it.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="LastIndexOf">
      <MemberSignature Language="C#" Value="public virtual int LastIndexOf (string source, char value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance int32 LastIndexOf(string source, char value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Globalization.CompareInfo.LastIndexOf(System.String,System.Char)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function LastIndexOf (source As String, value As Char) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual int LastIndexOf(System::String ^ source, char value);" />
      <MemberSignature Language="F#" Value="abstract member LastIndexOf : string * char -&gt; int&#xA;override this.LastIndexOf : string * char -&gt; int" Usage="compareInfo.LastIndexOf (source, value)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Globalization</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="source" Type="System.String" />
        <Parameter Name="value" Type="System.Char" />
      </Parameters>
      <Docs>
        <param name="source">The string to search.</param>
        <param name="value">The character to locate within <c>source</c>.</param>
        <summary>Searches for the specified character and returns the zero-based index of the last occurrence within the entire source string.</summary>
        <returns>The zero-based index of the last occurrence of <paramref name="value" />, if found, within <paramref name="source" />; otherwise, -1.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Исходная строка осуществляется в обратном направлении, начиная с конца строки и заканчивается в начале строки.  
  
 Эта перегрузка выполняет поиск с учетом языка и региональных параметров. Если символ Юникода, представляющее составной знак, например лигатура «?» (U + 00 C 6), он может считаться равным любому вхождению его компонентов в правильной последовательности, например «AE» (U + 0041, U + 0045), в зависимости от языка и региональных параметров. Чтобы выполнить поиск по порядковым номерам (без учета языка и региональных параметров), в котором символ считаются эквивалентными, только в том случае, если совпадают значения в кодировке Юникод, следует вызвать одну из перегрузок, которые имеет параметр типа <xref:System.Globalization.CompareOptions> и использовать <xref:System.Globalization.CompareOptions.Ordinal> значение. Перегруженные версии <xref:System.String.LastIndexOf%2A?displayProperty=nameWithType> , поиск символа выполняют поиск по порядковым номерам, в то время, как выполняющие поиск строки выполнения поиска с учетом языка и региональных параметров.  
  
> [!NOTE]
>  По возможности следует вызывать строковое сравнение методов, которые имеют параметр типа <xref:System.Globalization.CompareOptions> для указания ожидаемого вида сравнения. Как правило, используйте лингвистических параметров (с использованием текущего языка и региональных параметров) для сравнения строк, отображаемых в пользовательском интерфейсе и укажите <xref:System.Globalization.CompareOptions.Ordinal?displayProperty=nameWithType> или <xref:System.Globalization.CompareOptions.OrdinalIgnoreCase?displayProperty=nameWithType> для сравнений безопасности.  
  
   
  
## Examples  
 В следующем примере определяется индексы первого и последнего вхождения символа или подстроки в строке.  
  
 [!code-cpp[System.Globalization.CompareInfo.IndexOf#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Globalization.CompareInfo.IndexOf/CPP/indexof.cpp#1)]
 [!code-csharp[System.Globalization.CompareInfo.IndexOf#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Globalization.CompareInfo.IndexOf/CS/indexof.cs#1)]
 [!code-vb[System.Globalization.CompareInfo.IndexOf#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Globalization.CompareInfo.IndexOf/VB/indexof.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="source" /> is <see langword="null" />.</exception>
        <block subset="none" type="usage">
          <para>Наборы символов содержат игнорируемые символы, то есть символы, которые не учитываются при выполнении лингвистического или зависящих от языка и региональных параметров сортировки. В поле поиска с учетом языка и региональных параметров Если <paramref name="value" /> — игнорируемый символ, результат аналогичен поиску с удаленным этим символом. В этом случае <see cref="M:System.Globalization.CompareInfo.LastIndexOf(System.String,System.Char)" /> метод всегда возвращает последняя позиция в индексе <paramref name="source" /> для указания, что совпадения в конце <paramref name="source" />. В следующем примере <see cref="M:System.Globalization.CompareInfo.LastIndexOf(System.String,System.Char)" /> метод используется для поиска мягкий перенос (U + 00AD) в двух строках. Только одна из строк содержит мягкий перенос. В обоих случаях поскольку мягкий перенос является игнорируемым символом, метод возвращает последнего значения индекса в строку, чтобы указать, что были найдены совпадения в конце строки.  [! code-csharp[System.Globalization.CompareInfo.LastIndexOf#3](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.globalization.compareinfo.lastindexof/cs/lastignorable2.cs#3)] [! code-vb[System.Globalization.CompareInfo.LastIndexOf#3](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.globalization.compareinfo.lastindexof/vb/lastignorable2.vb#3)]</para>
        </block>
        <altmember cref="M:System.Globalization.CompareInfo.IndexOf(System.String,System.Char)" />
      </Docs>
    </Member>
    <Member MemberName="LastIndexOf">
      <MemberSignature Language="C#" Value="public virtual int LastIndexOf (string source, string value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance int32 LastIndexOf(string source, string value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Globalization.CompareInfo.LastIndexOf(System.String,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function LastIndexOf (source As String, value As String) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual int LastIndexOf(System::String ^ source, System::String ^ value);" />
      <MemberSignature Language="F#" Value="abstract member LastIndexOf : string * string -&gt; int&#xA;override this.LastIndexOf : string * string -&gt; int" Usage="compareInfo.LastIndexOf (source, value)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Globalization</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="source" Type="System.String" />
        <Parameter Name="value" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="source">The string to search.</param>
        <param name="value">The string to locate within <c>source</c>.</param>
        <summary>Searches for the specified substring and returns the zero-based index of the last occurrence within the entire source string.</summary>
        <returns>The zero-based index of the last occurrence of <paramref name="value" />, if found, within <paramref name="source" />; otherwise, -1.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Исходная строка осуществляется в обратном направлении, начиная с конца строки и заканчивается в начале строки.  
  
 Эта перегрузка выполняет поиск с учетом языка и региональных параметров. Значение Юникода, представляющее составной знак, например лигатура «?» (U + 00 C 6), может рассматриваться как эквивалент любого вхождения компонентов символа в правильной последовательности, например «AE» (U + 0041, U + 0045), в зависимости от языка и региональных параметров. Чтобы выполнить поиск по порядковым номерам (без учета языка и региональных параметров), в котором сравниваются значения в кодировке Юникод, следует вызвать одну из перегрузок, которые имеет параметр типа <xref:System.Globalization.CompareOptions> и использовать <xref:System.Globalization.CompareOptions.Ordinal?displayProperty=nameWithType> значение.  
  
> [!NOTE]
>  По возможности следует вызывать строковое сравнение методов, которые имеют параметр типа <xref:System.Globalization.CompareOptions> для указания ожидаемого вида сравнения. Как правило, используйте лингвистических параметров (с использованием текущего языка и региональных параметров) для сравнения строк, отображаемых в пользовательском интерфейсе и укажите <xref:System.Globalization.CompareOptions.Ordinal?displayProperty=nameWithType> или <xref:System.Globalization.CompareOptions.OrdinalIgnoreCase?displayProperty=nameWithType> для сравнений безопасности.  
  
   
  
## Examples  
 В следующем примере определяется индексы первого и последнего вхождения символа или подстроки в строке.  
  
 [!code-cpp[System.Globalization.CompareInfo.IndexOf#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Globalization.CompareInfo.IndexOf/CPP/indexof.cpp#1)]
 [!code-csharp[System.Globalization.CompareInfo.IndexOf#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Globalization.CompareInfo.IndexOf/CS/indexof.cs#1)]
 [!code-vb[System.Globalization.CompareInfo.IndexOf#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Globalization.CompareInfo.IndexOf/VB/indexof.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="source" /> is <see langword="null" />.  -or-  <paramref name="value" /> is <see langword="null" />.</exception>
        <block subset="none" type="usage">
          <para>Наборы символов содержат игнорируемые символы, то есть символы, которые не учитываются при выполнении лингвистического или зависящих от языка и региональных параметров сортировки. Если при поиске с учетом языка и региональных параметров параметр <paramref name="value" /> содержит игнорируемый символ, результат аналогичен поиску с удаленным этим символом. Если <paramref name="value" /> состоит только из одного или нескольких символов можно игнорировать, <see cref="M:System.Globalization.CompareInfo.LastIndexOf(System.String,System.String)" /> метод всегда возвращает <paramref name="source" />.<see cref="P:System.String.Length" /> – 1, представляющее последняя позиция в индексе <paramref name="source" />. В следующем примере <see cref="M:System.Globalization.CompareInfo.LastIndexOf(System.String,System.String)" /> метод используется для поиска подстроки три (мягкий перенос (U + 00AD), Мягкий перенос перед буквой «n» и мягкий перенос перед буквой «m») в двух строках. Только одна из строк содержит мягкий перенос. В каждом случае, поскольку мягкий перенос является игнорируемым символом, результат аналогичен так, как если бы мягкий перенос не были включены в <paramref name="value" />. При поиске мягкий перенос, метод возвращает 6 и 5. Эти значения соответствуют индекс последнего символа в две строки.  [! code-csharp[System.Globalization.CompareInfo.LastIndexOf#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.globalization.compareinfo.lastindexof/cs/lastignorable1.cs#2)] [! code-vb[System.Globalization.CompareInfo.LastIndexOf#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.globalization.compareinfo.lastindexof/vb/lastignorable1.vb#2)]</para>
        </block>
        <altmember cref="M:System.Globalization.CompareInfo.IndexOf(System.String,System.Char)" />
      </Docs>
    </Member>
    <Member MemberName="LastIndexOf">
      <MemberSignature Language="C#" Value="public virtual int LastIndexOf (string source, char value, System.Globalization.CompareOptions options);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance int32 LastIndexOf(string source, char value, valuetype System.Globalization.CompareOptions options) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Globalization.CompareInfo.LastIndexOf(System.String,System.Char,System.Globalization.CompareOptions)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function LastIndexOf (source As String, value As Char, options As CompareOptions) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual int LastIndexOf(System::String ^ source, char value, System::Globalization::CompareOptions options);" />
      <MemberSignature Language="F#" Value="abstract member LastIndexOf : string * char * System.Globalization.CompareOptions -&gt; int&#xA;override this.LastIndexOf : string * char * System.Globalization.CompareOptions -&gt; int" Usage="compareInfo.LastIndexOf (source, value, options)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Globalization</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="source" Type="System.String" />
        <Parameter Name="value" Type="System.Char" />
        <Parameter Name="options" Type="System.Globalization.CompareOptions" />
      </Parameters>
      <Docs>
        <param name="source">The string to search.</param>
        <param name="value">The character to locate within <c>source</c>.</param>
        <param name="options">A value that defines how <c>source</c> and <c>value</c> should be compared. <c>options</c> is either the enumeration value <see cref="F:System.Globalization.CompareOptions.Ordinal" />, or a bitwise combination of one or more of the following values: <see cref="F:System.Globalization.CompareOptions.IgnoreCase" />, <see cref="F:System.Globalization.CompareOptions.IgnoreSymbols" />, <see cref="F:System.Globalization.CompareOptions.IgnoreNonSpace" />, <see cref="F:System.Globalization.CompareOptions.IgnoreWidth" />, and <see cref="F:System.Globalization.CompareOptions.IgnoreKanaType" />.</param>
        <summary>Searches for the specified character and returns the zero-based index of the last occurrence within the entire source string using the specified <see cref="T:System.Globalization.CompareOptions" /> value.</summary>
        <returns>The zero-based index of the last occurrence of <paramref name="value" />, if found, within <paramref name="source" />, using the specified comparison options; otherwise, -1.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Исходная строка осуществляется в обратном направлении, начиная с конца строки и заканчивается в начале строки.  
  
 <xref:System.Globalization.CompareOptions.StringSort?displayProperty=nameWithType> Значение недопустимо для этого метода.  
  
 Если `options` не включает <xref:System.Globalization.CompareOptions.Ordinal> значение, эта перегрузка выполняет поиск с учетом языка и региональных параметров. Если символ Юникода, представляющее составной знак, например лигатура «?» (U + 00 C 6), он может считаться равным любому вхождению его компонентов в правильной последовательности, например «AE» (U + 0041, U + 0045), в зависимости от языка и региональных параметров. Если `options` включает в себя <xref:System.Globalization.CompareOptions.Ordinal> значение, эта перегрузка выполняет поиск по порядковым номерам (без учета языка и региональных параметров). Считаются эквивалентными только в том случае, если совпадают значения в кодировке Юникод. Перегруженные версии <xref:System.String.LastIndexOf%2A?displayProperty=nameWithType> , поиск символа выполняют поиск по порядковым номерам, в то время, как выполняющие поиск строки выполнения поиска с учетом языка и региональных параметров.  
  
> [!NOTE]
>  По возможности следует вызывать строковое сравнение методов, которые имеют параметр типа <xref:System.Globalization.CompareOptions> для указания ожидаемого вида сравнения. Как правило, используйте лингвистических параметров (с использованием текущего языка и региональных параметров) для сравнения строк, отображаемых в пользовательском интерфейсе и укажите <xref:System.Globalization.CompareOptions.Ordinal?displayProperty=nameWithType> или <xref:System.Globalization.CompareOptions.OrdinalIgnoreCase?displayProperty=nameWithType> для сравнений безопасности.  
  
   
  
## Examples  
 В следующем примере определяется индексы первого и последнего вхождения символа или подстроки в строке.  
  
 [!code-cpp[System.Globalization.CompareInfo.IndexOf#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Globalization.CompareInfo.IndexOf/CPP/indexof.cpp#1)]
 [!code-csharp[System.Globalization.CompareInfo.IndexOf#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Globalization.CompareInfo.IndexOf/CS/indexof.cs#1)]
 [!code-vb[System.Globalization.CompareInfo.IndexOf#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Globalization.CompareInfo.IndexOf/VB/indexof.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="source" /> is <see langword="null" />.</exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="options" /> contains an invalid <see cref="T:System.Globalization.CompareOptions" /> value.</exception>
        <block subset="none" type="usage">
          <para>Наборы символов содержат игнорируемые символы, то есть символы, которые не учитываются при выполнении лингвистического или зависящих от языка и региональных параметров сортировки. В поле поиска с учетом языка и региональных параметров Если <paramref name="value" /> — игнорируемый символ, результат аналогичен поиску с удаленным этим символом. В этом случае <see cref="M:System.Globalization.CompareInfo.LastIndexOf(System.String,System.Char,System.Globalization.CompareOptions)" /> метод всегда возвращает позицию последнего символа в <paramref name="source" /> для указания, что совпадения в конце <paramref name="source" />. В следующем примере <see cref="M:System.Globalization.CompareInfo.LastIndexOf(System.String,System.Char,System.Globalization.CompareOptions)" /> метод используется для поиска мягкий перенос (U + 00AD) в двух строках. Только одна из строк содержит мягкий перенос. В обоих случаях поскольку мягкий перенос является игнорируемым символом, поиск с учетом языка и региональных параметров возвращает последнего значения индекса в исходной строке. Напротив, поиск по порядковым номерам успешно находит мягкий перенос в одной строке и сообщает, что он отсутствует из второй строки.  [! code-csharp[System.Globalization.CompareInfo.LastIndexOf#4](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.globalization.compareinfo.lastindexof/cs/lastignorable3.cs#4)] [! code-vb[System.Globalization.CompareInfo.LastIndexOf#4](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.globalization.compareinfo.lastindexof/vb/lastignorable3.vb#4)]</para>
        </block>
        <altmember cref="M:System.Globalization.CompareInfo.IndexOf(System.String,System.Char)" />
        <altmember cref="T:System.Globalization.CompareOptions" />
      </Docs>
    </Member>
    <Member MemberName="LastIndexOf">
      <MemberSignature Language="C#" Value="public virtual int LastIndexOf (string source, char value, int startIndex);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance int32 LastIndexOf(string source, char value, int32 startIndex) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Globalization.CompareInfo.LastIndexOf(System.String,System.Char,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function LastIndexOf (source As String, value As Char, startIndex As Integer) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual int LastIndexOf(System::String ^ source, char value, int startIndex);" />
      <MemberSignature Language="F#" Value="abstract member LastIndexOf : string * char * int -&gt; int&#xA;override this.LastIndexOf : string * char * int -&gt; int" Usage="compareInfo.LastIndexOf (source, value, startIndex)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="source" Type="System.String" />
        <Parameter Name="value" Type="System.Char" />
        <Parameter Name="startIndex" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="source">The string to search.</param>
        <param name="value">The character to locate within <c>source</c>.</param>
        <param name="startIndex">The zero-based starting index of the backward search.</param>
        <summary>Searches for the specified character and returns the zero-based index of the last occurrence within the section of the source string that extends from the beginning of the string to the specified index.</summary>
        <returns>The zero-based index of the last occurrence of <paramref name="value" />, if found, within the section of <paramref name="source" /> that extends from the beginning of <paramref name="source" /> to <paramref name="startIndex" />; otherwise, -1. Returns <paramref name="startIndex" /> if <paramref name="value" /> is an ignorable character.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Исходная строка не выполняется в обратном направлении в `startIndex` и заканчивается в начале строки.  
  
 Эта перегрузка выполняет поиск с учетом языка и региональных параметров. Если символ Юникода, представляющее составной знак, например лигатура «?» (U + 00 C 6), он может считаться равным любому вхождению его компонентов в правильной последовательности, например «AE» (U + 0041, U + 0045), в зависимости от языка и региональных параметров. Чтобы выполнить поиск по порядковым номерам (без учета языка и региональных параметров), в котором символ считаются эквивалентными, только в том случае, если совпадают значения в кодировке Юникод, следует вызвать одну из перегрузок, которые имеет параметр типа <xref:System.Globalization.CompareOptions> и использовать <xref:System.Globalization.CompareOptions.Ordinal> значение. Перегруженные версии <xref:System.String.LastIndexOf%2A?displayProperty=nameWithType> , поиск символа выполняют поиск по порядковым номерам, в то время, как выполняющие поиск строки выполнения поиска с учетом языка и региональных параметров.  
  
> [!NOTE]
>  По возможности следует вызывать строковое сравнение методов, которые имеют параметр типа <xref:System.Globalization.CompareOptions> для указания ожидаемого вида сравнения. Как правило, используйте лингвистических параметров (с использованием текущего языка и региональных параметров) для сравнения строк, отображаемых в пользовательском интерфейсе и укажите <xref:System.Globalization.CompareOptions.Ordinal?displayProperty=nameWithType> или <xref:System.Globalization.CompareOptions.OrdinalIgnoreCase?displayProperty=nameWithType> для сравнений безопасности.  
  
   
  
## Examples  
 В следующем примере определяется индексы первого и последнего вхождения символа или подстроки в часть строки. Обратите внимание, что <xref:System.Globalization.CompareInfo.IndexOf%2A> и <xref:System.Globalization.CompareInfo.LastIndexOf%2A> поиск в различных частей строки, даже с теми же `startIndex` параметра.  
  
 [!code-cpp[System.Globalization.CompareInfo.IndexOfInt#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Globalization.CompareInfo.IndexOfInt/CPP/indexofint.cpp#1)]
 [!code-csharp[System.Globalization.CompareInfo.IndexOfInt#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Globalization.CompareInfo.IndexOfInt/CS/indexofint.cs#1)]
 [!code-vb[System.Globalization.CompareInfo.IndexOfInt#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Globalization.CompareInfo.IndexOfInt/VB/indexofint.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="source" /> is <see langword="null" />.</exception>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <paramref name="startIndex" /> is outside the range of valid indexes for <paramref name="source" />.</exception>
        <block subset="none" type="usage">
          <para>Наборы символов содержат игнорируемые символы, то есть символы, которые не учитываются при выполнении лингвистического или зависящих от языка и региональных параметров сортировки. В поле поиска с учетом языка и региональных параметров Если <paramref name="value" /> — игнорируемый символ, результат аналогичен поиску с удаленным этим символом. В этом случае <see cref="M:System.Globalization.CompareInfo.LastIndexOf(System.String,System.Char,System.Int32)" /> метод всегда возвращает <paramref name="startIndex" />, который является позицию символа, с которого начинается поиск. В следующем примере <see cref="M:System.Globalization.CompareInfo.LastIndexOf(System.String,System.Char,System.Int32)" /> метод используется для поиска мягкий перенос (U + 00AD) перед последней точкой «m» в двух строках. Только одна из строк содержит мягкий перенос. В обоих случаях, поскольку мягкий перенос является игнорируемым символом, метод возвращает позицию индекса «m», которое является значением из <paramref name="startIndex" />.  [! code-csharp[System.Globalization.CompareInfo.LastIndexOf#5](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.globalization.compareinfo.lastindexof/cs/lastignorable4.cs#5)] [! code-vb[System.Globalization.CompareInfo.LastIndexOf#5](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.globalization.compareinfo.lastindexof/vb/lastignorable4.vb#5)]</para>
        </block>
        <altmember cref="M:System.Globalization.CompareInfo.IndexOf(System.String,System.Char)" />
      </Docs>
    </Member>
    <Member MemberName="LastIndexOf">
      <MemberSignature Language="C#" Value="public virtual int LastIndexOf (string source, string value, System.Globalization.CompareOptions options);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance int32 LastIndexOf(string source, string value, valuetype System.Globalization.CompareOptions options) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Globalization.CompareInfo.LastIndexOf(System.String,System.String,System.Globalization.CompareOptions)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function LastIndexOf (source As String, value As String, options As CompareOptions) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual int LastIndexOf(System::String ^ source, System::String ^ value, System::Globalization::CompareOptions options);" />
      <MemberSignature Language="F#" Value="abstract member LastIndexOf : string * string * System.Globalization.CompareOptions -&gt; int&#xA;override this.LastIndexOf : string * string * System.Globalization.CompareOptions -&gt; int" Usage="compareInfo.LastIndexOf (source, value, options)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Globalization</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="source" Type="System.String" />
        <Parameter Name="value" Type="System.String" />
        <Parameter Name="options" Type="System.Globalization.CompareOptions" />
      </Parameters>
      <Docs>
        <param name="source">The string to search.</param>
        <param name="value">The string to locate within <c>source</c>.</param>
        <param name="options">A value that defines how <c>source</c> and <c>value</c> should be compared. <c>options</c> is either the enumeration value <see cref="F:System.Globalization.CompareOptions.Ordinal" />, or a bitwise combination of one or more of the following values: <see cref="F:System.Globalization.CompareOptions.IgnoreCase" />, <see cref="F:System.Globalization.CompareOptions.IgnoreSymbols" />, <see cref="F:System.Globalization.CompareOptions.IgnoreNonSpace" />, <see cref="F:System.Globalization.CompareOptions.IgnoreWidth" />, and <see cref="F:System.Globalization.CompareOptions.IgnoreKanaType" />.</param>
        <summary>Searches for the specified substring and returns the zero-based index of the last occurrence within the entire source string using the specified <see cref="T:System.Globalization.CompareOptions" /> value.</summary>
        <returns>The zero-based index of the last occurrence of <paramref name="value" />, if found, within <paramref name="source" />, using the specified comparison options; otherwise, -1.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Исходная строка осуществляется в обратном направлении, начиная с конца строки и заканчивается в начале строки.  
  
 <xref:System.Globalization.CompareOptions.StringSort?displayProperty=nameWithType> Значение недопустимо для этого метода.  
  
 Если `options` не включает <xref:System.Globalization.CompareOptions.Ordinal> значение, эта перегрузка выполняет поиск с учетом языка и региональных параметров. Значение Юникода, представляющее составной знак, например лигатура «?» (U + 00 C 6), может рассматриваться как эквивалент любого вхождения компонентов символа в правильной последовательности, например «AE» (U + 0041, U + 0045), в зависимости от языка и региональных параметров. Если `options` включает в себя <xref:System.Globalization.CompareOptions.Ordinal> значение, эта перегрузка выполняет поиск по порядковым номерам (без учета языка и региональных параметров), где сравниваются значения в кодировке Юникод.  
  
> [!NOTE]
>  По возможности следует вызывать строковое сравнение методов, которые имеют параметр типа <xref:System.Globalization.CompareOptions> для указания ожидаемого вида сравнения. Как правило, используйте лингвистических параметров (с использованием текущего языка и региональных параметров) для сравнения строк, отображаемых в пользовательском интерфейсе и укажите <xref:System.Globalization.CompareOptions.Ordinal?displayProperty=nameWithType> или <xref:System.Globalization.CompareOptions.OrdinalIgnoreCase?displayProperty=nameWithType> для сравнений безопасности.  
  
   
  
## Examples  
 В следующем примере определяется индексы первого и последнего вхождения символа или подстроки в строке.  
  
 [!code-cpp[System.Globalization.CompareInfo.IndexOf#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Globalization.CompareInfo.IndexOf/CPP/indexof.cpp#1)]
 [!code-csharp[System.Globalization.CompareInfo.IndexOf#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Globalization.CompareInfo.IndexOf/CS/indexof.cs#1)]
 [!code-vb[System.Globalization.CompareInfo.IndexOf#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Globalization.CompareInfo.IndexOf/VB/indexof.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="source" /> is <see langword="null" />.  -or-  <paramref name="value" /> is <see langword="null" />.</exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="options" /> contains an invalid <see cref="T:System.Globalization.CompareOptions" /> value.</exception>
        <block subset="none" type="usage">
          <para>Наборы символов содержат игнорируемые символы, то есть символы, которые не учитываются при выполнении лингвистического или зависящих от языка и региональных параметров сортировки. Если при поиске с учетом языка и региональных параметров (то есть, если параметр <paramref name="options" /> не имеет значение <see cref="F:System.Globalization.CompareOptions.Ordinal" /> или <see cref="F:System.Globalization.CompareOptions.OrdinalIgnoreCase" />) параметр <paramref name="value" /> содержит игнорируемый символ, результат аналогичен поиску с удаленным этим символом. Если <paramref name="value" /> состоит только из одного или нескольких символов можно игнорировать, <see cref="M:System.Globalization.CompareInfo.LastIndexOf(System.String,System.String,System.Globalization.CompareOptions)" /> метод всегда возвращает <paramref name="source" />.<see cref="P:System.String.Length" /> – 1, представляющее последняя позиция в индексе <paramref name="source" />. В следующем примере <see cref="M:System.Globalization.CompareInfo.LastIndexOf(System.String,System.String,System.Globalization.CompareOptions)" /> метод используется для поиска подстроки три (мягкий перенос (U + 00AD), Мягкий перенос перед буквой «n» и мягкий перенос перед буквой «m») в двух строках. Только одна из строк содержит мягкий перенос. Поскольку мягкий перенос является игнорируемым символом, поиска с учетом языка и региональных параметров возвращает значение, оно возвратит, если мягкий перенос не были включены в строку поиска. Поиск по порядковым номерам, однако успешно находит мягкий перенос в одной строке и сообщает, что он отсутствует из второй строки.  [! code-csharp[System.Globalization.CompareInfo.LastIndexOf#6](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.globalization.compareinfo.lastindexof/cs/lastignorable5.cs#6)] [! code-vb[System.Globalization.CompareInfo.LastIndexOf#6](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.globalization.compareinfo.lastindexof/vb/lastignorable5.vb#6)]</para>
        </block>
        <altmember cref="M:System.Globalization.CompareInfo.IndexOf(System.String,System.Char)" />
        <altmember cref="T:System.Globalization.CompareOptions" />
      </Docs>
    </Member>
    <Member MemberName="LastIndexOf">
      <MemberSignature Language="C#" Value="public virtual int LastIndexOf (string source, string value, int startIndex);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance int32 LastIndexOf(string source, string value, int32 startIndex) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Globalization.CompareInfo.LastIndexOf(System.String,System.String,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function LastIndexOf (source As String, value As String, startIndex As Integer) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual int LastIndexOf(System::String ^ source, System::String ^ value, int startIndex);" />
      <MemberSignature Language="F#" Value="abstract member LastIndexOf : string * string * int -&gt; int&#xA;override this.LastIndexOf : string * string * int -&gt; int" Usage="compareInfo.LastIndexOf (source, value, startIndex)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="source" Type="System.String" />
        <Parameter Name="value" Type="System.String" />
        <Parameter Name="startIndex" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="source">The string to search.</param>
        <param name="value">The string to locate within <c>source</c>.</param>
        <param name="startIndex">The zero-based starting index of the backward search.</param>
        <summary>Searches for the specified substring and returns the zero-based index of the last occurrence within the section of the source string that extends from the beginning of the string to the specified index.</summary>
        <returns>The zero-based index of the last occurrence of <paramref name="value" />, if found, within the section of <paramref name="source" /> that extends from the beginning of <paramref name="source" /> to <paramref name="startIndex" />; otherwise, -1. Returns <paramref name="startIndex" /> if <paramref name="value" /> is an ignorable character.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Исходная строка не выполняется в обратном направлении в `startIndex` и заканчивается в начале строки.  
  
 Эта перегрузка выполняет поиск с учетом языка и региональных параметров. Значение Юникода, представляющее составной знак, например лигатура «?» (U + 00 C 6), может рассматриваться как эквивалент любого вхождения компонентов символа в правильной последовательности, например «AE» (U + 0041, U + 0045), в зависимости от языка и региональных параметров. Чтобы выполнить поиск по порядковым номерам (без учета языка и региональных параметров), в котором сравниваются значения в кодировке Юникод, следует вызвать одну из перегрузок, которые имеет параметр типа <xref:System.Globalization.CompareOptions> и использовать <xref:System.Globalization.CompareOptions.Ordinal?displayProperty=nameWithType> значение.  
  
> [!NOTE]
>  По возможности следует вызывать строковое сравнение методов, которые имеют параметр типа <xref:System.Globalization.CompareOptions> для указания ожидаемого вида сравнения. Как правило, используйте лингвистических параметров (с использованием текущего языка и региональных параметров) для сравнения строк, отображаемых в пользовательском интерфейсе и укажите <xref:System.Globalization.CompareOptions.Ordinal?displayProperty=nameWithType> или <xref:System.Globalization.CompareOptions.OrdinalIgnoreCase?displayProperty=nameWithType> для сравнений безопасности.  
  
   
  
## Examples  
 В следующем примере определяется индексы первого и последнего вхождения символа или подстроки в часть строки. Обратите внимание, что <xref:System.Globalization.CompareInfo.IndexOf%2A> и <xref:System.Globalization.CompareInfo.LastIndexOf%2A> поиск в различных частей строки, даже с теми же `startIndex` параметра.  
  
 [!code-cpp[System.Globalization.CompareInfo.IndexOfInt#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Globalization.CompareInfo.IndexOfInt/CPP/indexofint.cpp#1)]
 [!code-csharp[System.Globalization.CompareInfo.IndexOfInt#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Globalization.CompareInfo.IndexOfInt/CS/indexofint.cs#1)]
 [!code-vb[System.Globalization.CompareInfo.IndexOfInt#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Globalization.CompareInfo.IndexOfInt/VB/indexofint.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="source" /> is <see langword="null" />.  -or-  <paramref name="value" /> is <see langword="null" />.</exception>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <paramref name="startIndex" /> is outside the range of valid indexes for <paramref name="source" />.</exception>
        <block subset="none" type="usage">
          <para>Наборы символов содержат игнорируемые символы, то есть символы, которые не учитываются при выполнении лингвистического или зависящих от языка и региональных параметров сортировки. Если при поиске с учетом языка и региональных параметров параметр <paramref name="value" /> содержит игнорируемый символ, результат аналогичен поиску с удаленным этим символом. Если <paramref name="value" /> состоит только из одного или нескольких символов можно игнорировать, <see cref="M:System.Globalization.CompareInfo.LastIndexOf(System.String,System.String,System.Int32)" /> метод всегда возвращает <paramref name="startIndex" />, который является позицию символа, с которого начинается поиск. В следующем примере <see cref="M:System.Globalization.CompareInfo.LastIndexOf(System.String,System.String,System.Int32)" /> метод используется для поиска подстроки, включающий мягкий перенос (U + 00AD) и предшествует или включает последний «m» в строке. Поскольку мягкий перенос в строке поиска учитывается, вызов метода подстроку, состоящую из мягкий перенос и «m» возвращает позицию «m» в строке, в то время как вызов его для поиска подстроки, состоящий из мягкого переноса, и возвращает «n»  положение «n». Строка поиска должна содержать только мягкий перенос, метод возвращает индекс «m», который представляет значение <paramref name="startIndex" />.  [! code-csharp[System.Globalization.CompareInfo.LastIndexOf#7](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.globalization.compareinfo.lastindexof/cs/lastignorable6.cs#7)] [! code-vb[System.Globalization.CompareInfo.LastIndexOf#7](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.globalization.compareinfo.lastindexof/vb/lastignorable6.vb#7)]</para>
        </block>
        <altmember cref="M:System.Globalization.CompareInfo.IndexOf(System.String,System.Char)" />
      </Docs>
    </Member>
    <Member MemberName="LastIndexOf">
      <MemberSignature Language="C#" Value="public virtual int LastIndexOf (string source, char value, int startIndex, System.Globalization.CompareOptions options);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance int32 LastIndexOf(string source, char value, int32 startIndex, valuetype System.Globalization.CompareOptions options) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Globalization.CompareInfo.LastIndexOf(System.String,System.Char,System.Int32,System.Globalization.CompareOptions)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function LastIndexOf (source As String, value As Char, startIndex As Integer, options As CompareOptions) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual int LastIndexOf(System::String ^ source, char value, int startIndex, System::Globalization::CompareOptions options);" />
      <MemberSignature Language="F#" Value="abstract member LastIndexOf : string * char * int * System.Globalization.CompareOptions -&gt; int&#xA;override this.LastIndexOf : string * char * int * System.Globalization.CompareOptions -&gt; int" Usage="compareInfo.LastIndexOf (source, value, startIndex, options)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Globalization</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="source" Type="System.String" />
        <Parameter Name="value" Type="System.Char" />
        <Parameter Name="startIndex" Type="System.Int32" />
        <Parameter Name="options" Type="System.Globalization.CompareOptions" />
      </Parameters>
      <Docs>
        <param name="source">The string to search.</param>
        <param name="value">The character to locate within <c>source</c>.</param>
        <param name="startIndex">The zero-based starting index of the backward search.</param>
        <param name="options">A value that defines how <c>source</c> and <c>value</c> should be compared. <c>options</c> is either the enumeration value <see cref="F:System.Globalization.CompareOptions.Ordinal" />, or a bitwise combination of one or more of the following values: <see cref="F:System.Globalization.CompareOptions.IgnoreCase" />, <see cref="F:System.Globalization.CompareOptions.IgnoreSymbols" />, <see cref="F:System.Globalization.CompareOptions.IgnoreNonSpace" />, <see cref="F:System.Globalization.CompareOptions.IgnoreWidth" />, and <see cref="F:System.Globalization.CompareOptions.IgnoreKanaType" />.</param>
        <summary>Searches for the specified character and returns the zero-based index of the last occurrence within the section of the source string that extends from the beginning of the string to the specified index using the specified <see cref="T:System.Globalization.CompareOptions" /> value.</summary>
        <returns>The zero-based index of the last occurrence of <paramref name="value" />, if found, within the section of <paramref name="source" /> that extends from the beginning of <paramref name="source" /> to <paramref name="startIndex" />, using the specified comparison options; otherwise, -1. Returns <paramref name="startIndex" /> if <paramref name="value" /> is an ignorable character.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Исходная строка не выполняется в обратном направлении в `startIndex` и заканчивается в начале строки.  
  
 <xref:System.Globalization.CompareOptions.StringSort?displayProperty=nameWithType> Значение недопустимо для этого метода.  
  
 Если `options` не включает <xref:System.Globalization.CompareOptions.Ordinal> значение, эта перегрузка выполняет поиск с учетом языка и региональных параметров. Если символ Юникода, представляющее составной знак, например лигатура «?» (U + 00 C 6), он может считаться равным любому вхождению его компонентов в правильной последовательности, например «AE» (U + 0041, U + 0045), в зависимости от языка и региональных параметров. Если `options` включает в себя <xref:System.Globalization.CompareOptions.Ordinal> значение, эта перегрузка выполняет поиск по порядковым номерам (без учета языка и региональных параметров). Считаются эквивалентными только в том случае, если совпадают значения в кодировке Юникод. Перегруженные версии <xref:System.String.LastIndexOf%2A?displayProperty=nameWithType> , поиск символа выполняют поиск по порядковым номерам, в то время, как выполняющие поиск строки выполнения поиска с учетом языка и региональных параметров.  
  
> [!NOTE]
>  По возможности следует вызывать строковое сравнение методов, которые имеют параметр типа <xref:System.Globalization.CompareOptions> для указания ожидаемого вида сравнения. Как правило, используйте лингвистических параметров (с использованием текущего языка и региональных параметров) для сравнения строк, отображаемых в пользовательском интерфейсе и укажите <xref:System.Globalization.CompareOptions.Ordinal?displayProperty=nameWithType> или <xref:System.Globalization.CompareOptions.OrdinalIgnoreCase?displayProperty=nameWithType> для сравнений безопасности.  
  
   
  
## Examples  
 В следующем примере определяется индексы первого и последнего вхождения символа или подстроки в часть строки. Обратите внимание, что <xref:System.Globalization.CompareInfo.IndexOf%2A> и <xref:System.Globalization.CompareInfo.LastIndexOf%2A> поиск в различных частей строки, даже с теми же `startIndex` параметра.  
  
 [!code-cpp[System.Globalization.CompareInfo.IndexOfInt#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Globalization.CompareInfo.IndexOfInt/CPP/indexofint.cpp#1)]
 [!code-csharp[System.Globalization.CompareInfo.IndexOfInt#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Globalization.CompareInfo.IndexOfInt/CS/indexofint.cs#1)]
 [!code-vb[System.Globalization.CompareInfo.IndexOfInt#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Globalization.CompareInfo.IndexOfInt/VB/indexofint.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="source" /> is <see langword="null" />.</exception>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <paramref name="startIndex" /> is outside the range of valid indexes for <paramref name="source" />.</exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="options" /> contains an invalid <see cref="T:System.Globalization.CompareOptions" /> value.</exception>
        <block subset="none" type="usage">
          <para>Наборы символов содержат игнорируемые символы, то есть символы, которые не учитываются при выполнении лингвистического или зависящих от языка и региональных параметров сортировки. В поле поиска с учетом языка и региональных параметров Если <paramref name="value" /> — игнорируемый символ, результат аналогичен поиску с удаленным этим символом. В этом случае <see cref="M:System.Globalization.CompareInfo.LastIndexOf(System.String,System.Char,System.Int32,System.Globalization.CompareOptions)" /> метод всегда возвращает <paramref name="startIndex" />, который является позицию символа, с которого начинается поиск. В следующем примере <see cref="M:System.Globalization.CompareInfo.LastIndexOf(System.String,System.Char,System.Int32,System.Globalization.CompareOptions)" /> метод используется для поиска мягкий перенос (U + 00AD) перед последней точкой «m» в двух строках. Только одна из строк содержит мягкий перенос. В обоих случаях поскольку мягкий перенос является игнорируемым символом, поиск с учетом языка и региональных параметров возвращает позицию индекса «m». Поиск по порядковым номерам, однако успешно находит мягкий перенос в одной строке и сообщает, что он отсутствует из второй строки.  [! code-csharp[System.Globalization.CompareInfo.LastIndexOf#8](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.globalization.compareinfo.lastindexof/cs/lastignorable7.cs#8)] [! code-vb[System.Globalization.CompareInfo.LastIndexOf#8](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.globalization.compareinfo.lastindexof/vb/lastignorable7.vb#8)]</para>
        </block>
        <altmember cref="M:System.Globalization.CompareInfo.IndexOf(System.String,System.Char)" />
        <altmember cref="T:System.Globalization.CompareOptions" />
      </Docs>
    </Member>
    <Member MemberName="LastIndexOf">
      <MemberSignature Language="C#" Value="public virtual int LastIndexOf (string source, char value, int startIndex, int count);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance int32 LastIndexOf(string source, char value, int32 startIndex, int32 count) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Globalization.CompareInfo.LastIndexOf(System.String,System.Char,System.Int32,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function LastIndexOf (source As String, value As Char, startIndex As Integer, count As Integer) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual int LastIndexOf(System::String ^ source, char value, int startIndex, int count);" />
      <MemberSignature Language="F#" Value="abstract member LastIndexOf : string * char * int * int -&gt; int&#xA;override this.LastIndexOf : string * char * int * int -&gt; int" Usage="compareInfo.LastIndexOf (source, value, startIndex, count)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Globalization</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="source" Type="System.String" />
        <Parameter Name="value" Type="System.Char" />
        <Parameter Name="startIndex" Type="System.Int32" />
        <Parameter Name="count" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="source">The string to search.</param>
        <param name="value">The character to locate within <c>source</c>.</param>
        <param name="startIndex">The zero-based starting index of the backward search.</param>
        <param name="count">The number of elements in the section to search.</param>
        <summary>Searches for the specified character and returns the zero-based index of the last occurrence within the section of the source string that contains the specified number of elements and ends at the specified index.</summary>
        <returns>The zero-based index of the last occurrence of <paramref name="value" />, if found, within the section of <paramref name="source" /> that contains the number of elements specified by <paramref name="count" /> and that ends at <paramref name="startIndex" />; otherwise, -1. Returns <paramref name="startIndex" /> if <paramref name="value" /> is an ignorable character.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Исходная строка не выполняется в обратном направлении в `startIndex` и заканчивая `startIndex`  -  `count` + 1.  
  
 Эта перегрузка выполняет поиск с учетом языка и региональных параметров. Если символ Юникода, представляющее составной знак, например лигатура «?» (U + 00 C 6), он может считаться равным любому вхождению его компонентов в правильной последовательности, например «AE» (U + 0041, U + 0045), в зависимости от языка и региональных параметров. Чтобы выполнить поиск по порядковым номерам (без учета языка и региональных параметров), в котором символ считаются эквивалентными, только в том случае, если совпадают значения в кодировке Юникод, следует вызвать одну из перегрузок, которые имеет параметр типа <xref:System.Globalization.CompareOptions> и использовать <xref:System.Globalization.CompareOptions.Ordinal> значение. Перегруженные версии <xref:System.String.LastIndexOf%2A?displayProperty=nameWithType> , поиск символа выполняют поиск по порядковым номерам, в то время, как выполняющие поиск строки выполнения поиска с учетом языка и региональных параметров.  
  
> [!NOTE]
>  По возможности следует вызывать строковое сравнение методов, которые имеют параметр типа <xref:System.Globalization.CompareOptions> для указания ожидаемого вида сравнения. Как правило, используйте лингвистических параметров (с использованием текущего языка и региональных параметров) для сравнения строк, отображаемых в пользовательском интерфейсе и укажите <xref:System.Globalization.CompareOptions.Ordinal?displayProperty=nameWithType> или <xref:System.Globalization.CompareOptions.OrdinalIgnoreCase?displayProperty=nameWithType> для сравнений безопасности.  
  
   
  
## Examples  
 В следующем примере определяется индексы первого и последнего вхождения символа или подстроки в часть строки.  
  
 [!code-cpp[System.Globalization.CompareInfo.IndexOfIntInt#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Globalization.CompareInfo.IndexOfIntInt/CPP/indexofintint.cpp#1)]
 [!code-csharp[System.Globalization.CompareInfo.IndexOfIntInt#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Globalization.CompareInfo.IndexOfIntInt/CS/indexofintint.cs#1)]
 [!code-vb[System.Globalization.CompareInfo.IndexOfIntInt#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Globalization.CompareInfo.IndexOfIntInt/VB/indexofintint.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="source" /> is <see langword="null" />.</exception>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <paramref name="startIndex" /> is outside the range of valid indexes for <paramref name="source" />.  -or-  <paramref name="count" /> is less than zero.  -or-  <paramref name="startIndex" /> and <paramref name="count" /> do not specify a valid section in <paramref name="source" />.</exception>
        <block subset="none" type="usage">
          <para>Наборы символов содержат игнорируемые символы, то есть символы, которые не учитываются при выполнении лингвистического или зависящих от языка и региональных параметров сортировки. В поле поиска с учетом языка и региональных параметров Если <paramref name="value" /> — игнорируемый символ, результат аналогичен поиску с удаленным этим символом. В этом случае <see cref="M:System.Globalization.CompareInfo.LastIndexOf(System.String,System.Char,System.Int32,System.Int32)" /> метод всегда возвращает <paramref name="startIndex" />, который является позицию символа, с которого начинается поиск. В следующем примере <see cref="M:System.Globalization.CompareInfo.LastIndexOf(System.String,System.Char,System.Int32,System.Int32)" /> метод используется для поиска мягкий перенос (U + 00AD) перед последней точкой «m» в двух строках. Только одна из строк содержит мягкий перенос. В обоих случаях, поскольку мягкий перенос является игнорируемым символом, метод возвращает позицию индекса «m», которое является значением из <paramref name="startIndex" />.  [! code-csharp[System.Globalization.CompareInfo.LastIndexOf#9](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.globalization.compareinfo.lastindexof/cs/lastignorable8.cs#9)] [! code-vb[System.Globalization.CompareInfo.LastIndexOf#9](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.globalization.compareinfo.lastindexof/vb/lastignorable8.vb#9)]</para>
        </block>
        <altmember cref="M:System.Globalization.CompareInfo.IndexOf(System.String,System.Char)" />
      </Docs>
    </Member>
    <Member MemberName="LastIndexOf">
      <MemberSignature Language="C#" Value="public virtual int LastIndexOf (string source, string value, int startIndex, System.Globalization.CompareOptions options);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance int32 LastIndexOf(string source, string value, int32 startIndex, valuetype System.Globalization.CompareOptions options) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Globalization.CompareInfo.LastIndexOf(System.String,System.String,System.Int32,System.Globalization.CompareOptions)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function LastIndexOf (source As String, value As String, startIndex As Integer, options As CompareOptions) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual int LastIndexOf(System::String ^ source, System::String ^ value, int startIndex, System::Globalization::CompareOptions options);" />
      <MemberSignature Language="F#" Value="abstract member LastIndexOf : string * string * int * System.Globalization.CompareOptions -&gt; int&#xA;override this.LastIndexOf : string * string * int * System.Globalization.CompareOptions -&gt; int" Usage="compareInfo.LastIndexOf (source, value, startIndex, options)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Globalization</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="source" Type="System.String" />
        <Parameter Name="value" Type="System.String" />
        <Parameter Name="startIndex" Type="System.Int32" />
        <Parameter Name="options" Type="System.Globalization.CompareOptions" />
      </Parameters>
      <Docs>
        <param name="source">The string to search.</param>
        <param name="value">The string to locate within <c>source</c>.</param>
        <param name="startIndex">The zero-based starting index of the backward search.</param>
        <param name="options">A value that defines how <c>source</c> and <c>value</c> should be compared. <c>options</c> is either the enumeration value <see cref="F:System.Globalization.CompareOptions.Ordinal" />, or a bitwise combination of one or more of the following values: <see cref="F:System.Globalization.CompareOptions.IgnoreCase" />, <see cref="F:System.Globalization.CompareOptions.IgnoreSymbols" />, <see cref="F:System.Globalization.CompareOptions.IgnoreNonSpace" />, <see cref="F:System.Globalization.CompareOptions.IgnoreWidth" />, and <see cref="F:System.Globalization.CompareOptions.IgnoreKanaType" />.</param>
        <summary>Searches for the specified substring and returns the zero-based index of the last occurrence within the section of the source string that extends from the beginning of the string to the specified index using the specified <see cref="T:System.Globalization.CompareOptions" /> value.</summary>
        <returns>The zero-based index of the last occurrence of <paramref name="value" />, if found, within the section of <paramref name="source" /> that extends from the beginning of <paramref name="source" /> to <paramref name="startIndex" />, using the specified comparison options; otherwise, -1. Returns <paramref name="startIndex" /> if <paramref name="value" /> is an ignorable character.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Исходная строка не выполняется в обратном направлении в `startIndex` и заканчивается в начале строки.  
  
 <xref:System.Globalization.CompareOptions.StringSort?displayProperty=nameWithType> Значение недопустимо для этого метода.  
  
 Если `options` не включает <xref:System.Globalization.CompareOptions.Ordinal> значение, эта перегрузка выполняет поиск с учетом языка и региональных параметров. Значение Юникода, представляющее составной знак, например лигатура «?» (U + 00 C 6), может рассматриваться как эквивалент любого вхождения компонентов символа в правильной последовательности, например «AE» (U + 0041, U + 0045), в зависимости от языка и региональных параметров. Если `options` включает в себя <xref:System.Globalization.CompareOptions.Ordinal> значение, эта перегрузка выполняет поиск по порядковым номерам (без учета языка и региональных параметров), где сравниваются значения в кодировке Юникод.  
  
> [!NOTE]
>  По возможности следует вызывать строковое сравнение методов, которые имеют параметр типа <xref:System.Globalization.CompareOptions> для указания ожидаемого вида сравнения. Как правило, используйте лингвистических параметров (с использованием текущего языка и региональных параметров) для сравнения строк, отображаемых в пользовательском интерфейсе и укажите <xref:System.Globalization.CompareOptions.Ordinal?displayProperty=nameWithType> или <xref:System.Globalization.CompareOptions.OrdinalIgnoreCase?displayProperty=nameWithType> для сравнений безопасности.  
  
   
  
## Examples  
 В следующем примере определяется индексы первого и последнего вхождения символа или подстроки в часть строки. Обратите внимание, что <xref:System.Globalization.CompareInfo.IndexOf%2A> и <xref:System.Globalization.CompareInfo.LastIndexOf%2A> поиск в различных частей строки, даже с теми же `startIndex` параметра.  
  
 [!code-cpp[System.Globalization.CompareInfo.IndexOfInt#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Globalization.CompareInfo.IndexOfInt/CPP/indexofint.cpp#1)]
 [!code-csharp[System.Globalization.CompareInfo.IndexOfInt#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Globalization.CompareInfo.IndexOfInt/CS/indexofint.cs#1)]
 [!code-vb[System.Globalization.CompareInfo.IndexOfInt#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Globalization.CompareInfo.IndexOfInt/VB/indexofint.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="source" /> is <see langword="null" />.  -or-  <paramref name="value" /> is <see langword="null" />.</exception>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <paramref name="startIndex" /> is outside the range of valid indexes for <paramref name="source" />.</exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="options" /> contains an invalid <see cref="T:System.Globalization.CompareOptions" /> value.</exception>
        <block subset="none" type="usage">
          <para>Наборы символов содержат игнорируемые символы, то есть символы, которые не учитываются при выполнении лингвистического или зависящих от языка и региональных параметров сортировки. Если при поиске с учетом языка и региональных параметров (то есть, если параметр <paramref name="options" /> не имеет значение <see cref="F:System.Globalization.CompareOptions.Ordinal" /> или <see cref="F:System.Globalization.CompareOptions.OrdinalIgnoreCase" />) параметр <paramref name="value" /> содержит игнорируемый символ, результат аналогичен поиску с удаленным этим символом. Если <paramref name="value" /> состоит только из одного или нескольких символов можно игнорировать, <see cref="M:System.Globalization.CompareInfo.LastIndexOf(System.String,System.String,System.Int32,System.Globalization.CompareOptions)" /> метод всегда возвращает <paramref name="startIndex" />, который является позицию символа, с которого начинается поиск.  В следующем примере <see cref="M:System.Globalization.CompareInfo.LastIndexOf(System.String,System.String,System.Int32,System.Globalization.CompareOptions)" /> метод позволяет найти позицию мягкий перенос (U + 00AD) следуют «m», начиная с последней «m» в двух строках. Только одна из строк содержит требуемую подстроку. Поскольку мягкий перенос является игнорируемым символом, в обоих случаях при сравнении с учетом языка и региональных параметров метод возвращает индекс символа "m" в строке. Обратите внимание, что в случае первой строки, содержащей мягкий перенос перед буквой "m", этот метод возвращает не индекс мягкого переноса, а индекс буквы "m". Метод возвращает индекс мягкого переноса в первой строке только в том случае, когда он выполняет порядковое сравнение.  [! code-csharp[System.Globalization.CompareInfo.LastIndexOf#15](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.globalization.compareinfo.lastindexof/cs/lastignorable14.cs#15)] [! code-vb[System.Globalization.CompareInfo.LastIndexOf#15](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.globalization.compareinfo.lastindexof/vb/lastignorable14.vb#15)]</para>
        </block>
        <altmember cref="M:System.Globalization.CompareInfo.IndexOf(System.String,System.Char)" />
        <altmember cref="T:System.Globalization.CompareOptions" />
      </Docs>
    </Member>
    <Member MemberName="LastIndexOf">
      <MemberSignature Language="C#" Value="public virtual int LastIndexOf (string source, string value, int startIndex, int count);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance int32 LastIndexOf(string source, string value, int32 startIndex, int32 count) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Globalization.CompareInfo.LastIndexOf(System.String,System.String,System.Int32,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function LastIndexOf (source As String, value As String, startIndex As Integer, count As Integer) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual int LastIndexOf(System::String ^ source, System::String ^ value, int startIndex, int count);" />
      <MemberSignature Language="F#" Value="abstract member LastIndexOf : string * string * int * int -&gt; int&#xA;override this.LastIndexOf : string * string * int * int -&gt; int" Usage="compareInfo.LastIndexOf (source, value, startIndex, count)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Globalization</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="source" Type="System.String" />
        <Parameter Name="value" Type="System.String" />
        <Parameter Name="startIndex" Type="System.Int32" />
        <Parameter Name="count" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="source">The string to search.</param>
        <param name="value">The string to locate within <c>source</c>.</param>
        <param name="startIndex">The zero-based starting index of the backward search.</param>
        <param name="count">The number of elements in the section to search.</param>
        <summary>Searches for the specified substring and returns the zero-based index of the last occurrence within the section of the source string that contains the specified number of elements and ends at the specified index.</summary>
        <returns>The zero-based index of the last occurrence of <paramref name="value" />, if found, within the section of <paramref name="source" /> that contains the number of elements specified by <paramref name="count" /> and that ends at <paramref name="startIndex" />; otherwise, -1. Returns <paramref name="startIndex" /> if <paramref name="value" /> is an ignorable character.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Исходная строка не выполняется в обратном направлении в `startIndex` и заканчивая `startIndex`  -  `count` + 1.  
  
 Эта перегрузка выполняет поиск с учетом языка и региональных параметров. Значение Юникода, представляющее составной знак, например лигатура «?» (U + 00 C 6), может рассматриваться как эквивалент любого вхождения компонентов символа в правильной последовательности, например «AE» (U + 0041, U + 0045), в зависимости от языка и региональных параметров. Чтобы выполнить поиск по порядковым номерам (без учета языка и региональных параметров), в котором сравниваются значения в кодировке Юникод, следует вызвать одну из перегрузок, которые имеет параметр типа <xref:System.Globalization.CompareOptions> и использовать <xref:System.Globalization.CompareOptions.Ordinal> значение.  
  
> [!NOTE]
>  По возможности следует вызывать строковое сравнение методов, которые имеют параметр типа <xref:System.Globalization.CompareOptions> для указания ожидаемого вида сравнения. Как правило, используйте лингвистических параметров (с использованием текущего языка и региональных параметров) для сравнения строк, отображаемых в пользовательском интерфейсе и укажите <xref:System.Globalization.CompareOptions.Ordinal?displayProperty=nameWithType> или <xref:System.Globalization.CompareOptions.OrdinalIgnoreCase?displayProperty=nameWithType> для сравнений безопасности.  
  
   
  
## Examples  
 В следующем примере определяется индексы первого и последнего вхождения символа или подстроки в часть строки.  
  
 [!code-cpp[System.Globalization.CompareInfo.IndexOfIntInt#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Globalization.CompareInfo.IndexOfIntInt/CPP/indexofintint.cpp#1)]
 [!code-csharp[System.Globalization.CompareInfo.IndexOfIntInt#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Globalization.CompareInfo.IndexOfIntInt/CS/indexofintint.cs#1)]
 [!code-vb[System.Globalization.CompareInfo.IndexOfIntInt#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Globalization.CompareInfo.IndexOfIntInt/VB/indexofintint.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="source" /> is <see langword="null" />.  -or-  <paramref name="value" /> is <see langword="null" />.</exception>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <paramref name="startIndex" /> is outside the range of valid indexes for <paramref name="source" />.  -or-  <paramref name="count" /> is less than zero.  -or-  <paramref name="startIndex" /> and <paramref name="count" /> do not specify a valid section in <paramref name="source" />.</exception>
        <block subset="none" type="usage">
          <para>Наборы символов содержат игнорируемые символы, то есть символы, которые не учитываются при выполнении лингвистического или зависящих от языка и региональных параметров сортировки. Если при поиске с учетом языка и региональных параметров параметр <paramref name="value" /> содержит игнорируемый символ, результат аналогичен поиску с удаленным этим символом. Если <paramref name="value" /> состоит только из одного или нескольких символов можно игнорировать, <see cref="M:System.Globalization.CompareInfo.LastIndexOf(System.String,System.String,System.Int32,System.Int32)" /> метод всегда возвращает <paramref name="startIndex" />, который является позицию символа, с которого начинается поиск.  В следующем примере <see cref="M:System.Globalization.CompareInfo.LastIndexOf(System.String,System.String,System.Int32,System.Int32)" /> метод позволяет найти позицию мягкий перенос (U + 00AD) следуют «m» в трех символы перед последней «m» двух строк. Только одна из строк содержит требуемую подстроку. Поскольку мягкий перенос является игнорируемым символом, в обоих случаях при сравнении с учетом языка и региональных параметров метод возвращает индекс символа "m" в строке. Обратите внимание, что в случае первой строки, содержащей мягкий перенос перед буквой «m», метод возвращает не индекс мягкого переноса, но вместо этого возвращает индекс «m».  [! code-csharp[System.Globalization.CompareInfo.LastIndexOf#17](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.globalization.compareinfo.lastindexof/cs/lastignorable16.cs#17)] [! code-vb[System.Globalization.CompareInfo.LastIndexOf#17](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.globalization.compareinfo.lastindexof/vb/lastignorable16.vb#17)]</para>
        </block>
        <altmember cref="M:System.Globalization.CompareInfo.IndexOf(System.String,System.Char)" />
      </Docs>
    </Member>
    <Member MemberName="LastIndexOf">
      <MemberSignature Language="C#" Value="public virtual int LastIndexOf (string source, char value, int startIndex, int count, System.Globalization.CompareOptions options);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance int32 LastIndexOf(string source, char value, int32 startIndex, int32 count, valuetype System.Globalization.CompareOptions options) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Globalization.CompareInfo.LastIndexOf(System.String,System.Char,System.Int32,System.Int32,System.Globalization.CompareOptions)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function LastIndexOf (source As String, value As Char, startIndex As Integer, count As Integer, options As CompareOptions) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual int LastIndexOf(System::String ^ source, char value, int startIndex, int count, System::Globalization::CompareOptions options);" />
      <MemberSignature Language="F#" Value="abstract member LastIndexOf : string * char * int * int * System.Globalization.CompareOptions -&gt; int&#xA;override this.LastIndexOf : string * char * int * int * System.Globalization.CompareOptions -&gt; int" Usage="compareInfo.LastIndexOf (source, value, startIndex, count, options)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Globalization</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="source" Type="System.String" />
        <Parameter Name="value" Type="System.Char" />
        <Parameter Name="startIndex" Type="System.Int32" />
        <Parameter Name="count" Type="System.Int32" />
        <Parameter Name="options" Type="System.Globalization.CompareOptions" />
      </Parameters>
      <Docs>
        <param name="source">The string to search.</param>
        <param name="value">The character to locate within <c>source</c>.</param>
        <param name="startIndex">The zero-based starting index of the backward search.</param>
        <param name="count">The number of elements in the section to search.</param>
        <param name="options">A value that defines how <c>source</c> and <c>value</c> should be compared. <c>options</c> is either the enumeration value <see cref="F:System.Globalization.CompareOptions.Ordinal" />, or a bitwise combination of one or more of the following values: <see cref="F:System.Globalization.CompareOptions.IgnoreCase" />, <see cref="F:System.Globalization.CompareOptions.IgnoreSymbols" />, <see cref="F:System.Globalization.CompareOptions.IgnoreNonSpace" />, <see cref="F:System.Globalization.CompareOptions.IgnoreWidth" />, and <see cref="F:System.Globalization.CompareOptions.IgnoreKanaType" />.</param>
        <summary>Searches for the specified character and returns the zero-based index of the last occurrence within the section of the source string that contains the specified number of elements and ends at the specified index using the specified <see cref="T:System.Globalization.CompareOptions" /> value.</summary>
        <returns>The zero-based index of the last occurrence of <paramref name="value" />, if found, within the section of <paramref name="source" /> that contains the number of elements specified by <paramref name="count" /> and that ends at <paramref name="startIndex" />, using the specified comparison options; otherwise, -1. Returns <paramref name="startIndex" /> if <paramref name="value" /> is an ignorable character.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Исходная строка не выполняется в обратном направлении в `startIndex` и заканчивая `startIndex`  -  `count` + 1.  
  
 <xref:System.Globalization.CompareOptions.StringSort?displayProperty=nameWithType> Значение недопустимо для этого метода.  
  
 Если `options` не включает <xref:System.Globalization.CompareOptions.Ordinal> значение, эта перегрузка выполняет поиск с учетом языка и региональных параметров. Если символ Юникода, представляющее составной знак, например лигатура «?» (U + 00 C 6), он может считаться равным любому вхождению его компонентов в правильной последовательности, например «AE» (U + 0041, U + 0045), в зависимости от языка и региональных параметров. Если `options` включает в себя <xref:System.Globalization.CompareOptions.Ordinal> значение, эта перегрузка выполняет поиск по порядковым номерам (без учета языка и региональных параметров). Считаются эквивалентными только в том случае, если совпадают значения в кодировке Юникод. Перегруженные версии <xref:System.String.LastIndexOf%2A?displayProperty=nameWithType> , поиск символа выполняют поиск по порядковым номерам, в то время, как выполняющие поиск строки выполнения поиска с учетом языка и региональных параметров.  
  
> [!NOTE]
>  По возможности следует вызывать строковое сравнение методов, которые имеют параметр типа <xref:System.Globalization.CompareOptions> для указания ожидаемого вида сравнения. Как правило, используйте лингвистических параметров (с использованием текущего языка и региональных параметров) для сравнения строк, отображаемых в пользовательском интерфейсе и укажите <xref:System.Globalization.CompareOptions.Ordinal?displayProperty=nameWithType> или <xref:System.Globalization.CompareOptions.OrdinalIgnoreCase?displayProperty=nameWithType> для сравнений безопасности.  
  
   
  
## Examples  
 В следующем примере определяется индексы первого и последнего вхождения символа или подстроки в часть строки.  
  
 [!code-cpp[System.Globalization.CompareInfo.IndexOfIntInt#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Globalization.CompareInfo.IndexOfIntInt/CPP/indexofintint.cpp#1)]
 [!code-csharp[System.Globalization.CompareInfo.IndexOfIntInt#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Globalization.CompareInfo.IndexOfIntInt/CS/indexofintint.cs#1)]
 [!code-vb[System.Globalization.CompareInfo.IndexOfIntInt#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Globalization.CompareInfo.IndexOfIntInt/VB/indexofintint.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="source" /> is <see langword="null" />.</exception>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <paramref name="startIndex" /> is outside the range of valid indexes for <paramref name="source" />.  -or-  <paramref name="count" /> is less than zero.  -or-  <paramref name="startIndex" /> and <paramref name="count" /> do not specify a valid section in <paramref name="source" />.</exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="options" /> contains an invalid <see cref="T:System.Globalization.CompareOptions" /> value.</exception>
        <block subset="none" type="usage">
          <para>Наборы символов содержат игнорируемые символы, то есть символы, которые не учитываются при выполнении лингвистического или зависящих от языка и региональных параметров сортировки. В поле поиска с учетом языка и региональных параметров Если <paramref name="value" /> — игнорируемый символ, результат аналогичен поиску с удаленным этим символом. В этом случае <see cref="M:System.Globalization.CompareInfo.LastIndexOf(System.String,System.Char,System.Int32,System.Int32,System.Globalization.CompareOptions)" /> метод всегда возвращает <paramref name="startIndex" />, который является позицию символа, с которого начинается поиск. В следующем примере <see cref="M:System.Globalization.CompareInfo.LastIndexOf(System.String,System.Char,System.Int32,System.Int32,System.Globalization.CompareOptions)" /> метод используется для поиска мягкий перенос (U + 00AD) перед последней точкой «m» в двух строках. Только одна из строк содержит мягкий перенос. В обоих случаях, поскольку мягкий перенос является игнорируемым символом, поиска с учетом языка и региональных параметров возвращает позицию индекса «m», которое является значением из <paramref name="startIndex" />. Поиск по порядковым номерам, однако успешно находит мягкий перенос в одной строке и сообщает, что он отсутствует из второй строки.  [! code-csharp[System.Globalization.CompareInfo.LastIndexOf#12](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.globalization.compareinfo.lastindexof/cs/lastignorable11.cs#12)] [! code-vb[System.Globalization.CompareInfo.LastIndexOf#12](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.globalization.compareinfo.lastindexof/vb/lastignorable11.vb#12)]</para>
        </block>
        <altmember cref="M:System.Globalization.CompareInfo.IndexOf(System.String,System.Char)" />
        <altmember cref="T:System.Globalization.CompareOptions" />
      </Docs>
    </Member>
    <Member MemberName="LastIndexOf">
      <MemberSignature Language="C#" Value="public virtual int LastIndexOf (string source, string value, int startIndex, int count, System.Globalization.CompareOptions options);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance int32 LastIndexOf(string source, string value, int32 startIndex, int32 count, valuetype System.Globalization.CompareOptions options) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Globalization.CompareInfo.LastIndexOf(System.String,System.String,System.Int32,System.Int32,System.Globalization.CompareOptions)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function LastIndexOf (source As String, value As String, startIndex As Integer, count As Integer, options As CompareOptions) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual int LastIndexOf(System::String ^ source, System::String ^ value, int startIndex, int count, System::Globalization::CompareOptions options);" />
      <MemberSignature Language="F#" Value="abstract member LastIndexOf : string * string * int * int * System.Globalization.CompareOptions -&gt; int&#xA;override this.LastIndexOf : string * string * int * int * System.Globalization.CompareOptions -&gt; int" Usage="compareInfo.LastIndexOf (source, value, startIndex, count, options)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Globalization</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="source" Type="System.String" />
        <Parameter Name="value" Type="System.String" />
        <Parameter Name="startIndex" Type="System.Int32" />
        <Parameter Name="count" Type="System.Int32" />
        <Parameter Name="options" Type="System.Globalization.CompareOptions" />
      </Parameters>
      <Docs>
        <param name="source">The string to search.</param>
        <param name="value">The string to locate within <c>source</c>.</param>
        <param name="startIndex">The zero-based starting index of the backward search.</param>
        <param name="count">The number of elements in the section to search.</param>
        <param name="options">A value that defines how <c>source</c> and <c>value</c> should be compared. <c>options</c> is either the enumeration value <see cref="F:System.Globalization.CompareOptions.Ordinal" />, or a bitwise combination of one or more of the following values: <see cref="F:System.Globalization.CompareOptions.IgnoreCase" />, <see cref="F:System.Globalization.CompareOptions.IgnoreSymbols" />, <see cref="F:System.Globalization.CompareOptions.IgnoreNonSpace" />, <see cref="F:System.Globalization.CompareOptions.IgnoreWidth" />, and <see cref="F:System.Globalization.CompareOptions.IgnoreKanaType" />.</param>
        <summary>Searches for the specified substring and returns the zero-based index of the last occurrence within the section of the source string that contains the specified number of elements and ends at the specified index using the specified <see cref="T:System.Globalization.CompareOptions" /> value.</summary>
        <returns>The zero-based index of the last occurrence of <paramref name="value" />, if found, within the section of <paramref name="source" /> that contains the number of elements specified by <paramref name="count" /> and that ends at <paramref name="startIndex" />, using the specified comparison options; otherwise, -1. Returns <paramref name="startIndex" /> if <paramref name="value" /> is an ignorable character.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Исходная строка не выполняется в обратном направлении в `startIndex` и заканчивая `startIndex`  -  `count` + 1.  
  
 <xref:System.Globalization.CompareOptions.StringSort?displayProperty=nameWithType> Значение недопустимо для этого метода.  
  
 Если `options` не включает <xref:System.Globalization.CompareOptions.Ordinal> значение, эта перегрузка выполняет поиск с учетом языка и региональных параметров. Значение Юникода, представляющее составной знак, например лигатура «?» (U + 00 C 6), может рассматриваться как эквивалент любого вхождения компонентов символа в правильной последовательности, например «AE» (U + 0041, U + 0045), в зависимости от языка и региональных параметров. Если `options` включает в себя <xref:System.Globalization.CompareOptions.Ordinal> значение, эта перегрузка выполняет поиск по порядковым номерам (без учета языка и региональных параметров), где сравниваются значения в кодировке Юникод.  
  
> [!NOTE]
>  По возможности следует вызывать строковое сравнение методов, которые имеют параметр типа <xref:System.Globalization.CompareOptions> для указания ожидаемого вида сравнения. Как правило, используйте лингвистических параметров (с использованием текущего языка и региональных параметров) для сравнения строк, отображаемых в пользовательском интерфейсе и укажите <xref:System.Globalization.CompareOptions.Ordinal?displayProperty=nameWithType> или <xref:System.Globalization.CompareOptions.OrdinalIgnoreCase?displayProperty=nameWithType> для сравнений безопасности.  
  
   
  
## Examples  
 В следующем примере определяется индексы первого и последнего вхождения символа или подстроки в часть строки.  
  
 [!code-cpp[System.Globalization.CompareInfo.IndexOfIntInt#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Globalization.CompareInfo.IndexOfIntInt/CPP/indexofintint.cpp#1)]
 [!code-csharp[System.Globalization.CompareInfo.IndexOfIntInt#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Globalization.CompareInfo.IndexOfIntInt/CS/indexofintint.cs#1)]
 [!code-vb[System.Globalization.CompareInfo.IndexOfIntInt#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Globalization.CompareInfo.IndexOfIntInt/VB/indexofintint.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="source" /> is <see langword="null" />.  -or-  <paramref name="value" /> is <see langword="null" />.</exception>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <paramref name="startIndex" /> is outside the range of valid indexes for <paramref name="source" />.  -or-  <paramref name="count" /> is less than zero.  -or-  <paramref name="startIndex" /> and <paramref name="count" /> do not specify a valid section in <paramref name="source" />.</exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="options" /> contains an invalid <see cref="T:System.Globalization.CompareOptions" /> value.</exception>
        <block subset="none" type="usage">
          <para>Наборы символов содержат игнорируемые символы, то есть символы, которые не учитываются при выполнении лингвистического или зависящих от языка и региональных параметров сортировки. Если при поиске с учетом языка и региональных параметров (то есть, если параметр <paramref name="options" /> не имеет значение <see cref="F:System.Globalization.CompareOptions.Ordinal" /> или <see cref="F:System.Globalization.CompareOptions.OrdinalIgnoreCase" />) параметр <paramref name="value" /> содержит игнорируемый символ, результат аналогичен поиску с удаленным этим символом. Если <paramref name="value" /> состоит только из одного или нескольких символов можно игнорировать, <see cref="M:System.Globalization.CompareInfo.LastIndexOf(System.String,System.String,System.Int32,System.Int32,System.Globalization.CompareOptions)" /> метод всегда возвращает <paramref name="startIndex" />, который является позицию символа, с которого начинается поиск.  В следующем примере <see cref="M:System.Globalization.CompareInfo.LastIndexOf(System.String,System.String,System.Int32,System.Int32,System.Globalization.CompareOptions)" /> метод используется для поиска следуют «m» во всех позиций мягкий перенос (U + 00AD), но месте первого символа перед последней «m» в двух строках. Только одна из строк содержит требуемую подстроку. Поскольку мягкий перенос является игнорируемым символом, в обоих случаях при сравнении с учетом языка и региональных параметров метод возвращает индекс символа "m" в строке. Когда он выполняет порядковое сравнение, однако она находит подстрока только в первой строке. Обратите внимание, что в случае первой строки, содержащей мягкий перенос перед буквой «m», метод возвращает не индекс мягкого переноса, но вместо этого возвращает индекс «m», когда он выполняет сравнение с учетом языка и региональных параметров. Метод возвращает индекс мягкого переноса в первой строке только в том случае, когда он выполняет порядковое сравнение.  [! code-vb[System.Globalization.CompareInfo.LastIndexOf#16](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.globalization.compareinfo.lastindexof/vb/lastignorable15.vb#16)]</para>
        </block>
        <altmember cref="M:System.Globalization.CompareInfo.IndexOf(System.String,System.Char)" />
        <altmember cref="T:System.Globalization.CompareOptions" />
      </Docs>
    </Member>
    <Member MemberName="LCID">
      <MemberSignature Language="C#" Value="public int LCID { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 LCID" />
      <MemberSignature Language="DocId" Value="P:System.Globalization.CompareInfo.LCID" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property LCID As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property int LCID { int get(); };" />
      <MemberSignature Language="F#" Value="member this.LCID : int" Usage="System.Globalization.CompareInfo.LCID" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets the properly formed culture identifier for the current <see cref="T:System.Globalization.CompareInfo" />.</summary>
        <value>Идентификатор культуры для текущего <see cref="T:System.Globalization.CompareInfo" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 В следующем примере демонстрируется <xref:System.Globalization.CompareInfo.LCID%2A> свойство.  
  
 [!code-cpp[CompareInfo#1](~/samples/snippets/cpp/VS_Snippets_CLR/CompareInfo/cpp/CompareInfo.cpp#1)]
 [!code-csharp[CompareInfo#1](~/samples/snippets/csharp/VS_Snippets_CLR/CompareInfo/CS/CompareInfo.cs#1)]
 [!code-vb[CompareInfo#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/CompareInfo/VB/CompareInfo.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Name">
      <MemberSignature Language="C#" Value="public virtual string Name { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string Name" />
      <MemberSignature Language="DocId" Value="P:System.Globalization.CompareInfo.Name" />
      <MemberSignature Language="VB.NET" Value="Public Overridable ReadOnly Property Name As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property System::String ^ Name { System::String ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.Name : string" Usage="System.Globalization.CompareInfo.Name" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Globalization</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.ComVisible(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets the name of the culture used for sorting operations by this <see cref="T:System.Globalization.CompareInfo" /> object.</summary>
        <value>Имя языка и региональных параметров.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Globalization.CompareInfo.Name%2A> И <xref:System.Globalization.CultureInfo.Name?displayProperty=nameWithType> свойства могут иметь разные значения. Например <xref:System.Globalization.CompareInfo.LCID%2A> идентифицирует значение свойства из шестнадцатеричных 0x10407 сортировки альтернативный язык и региональные параметры, как они отображаются в немецкой телефонной книге. <xref:System.Globalization.CompareInfo.Name%2A> Свойство имеет значение «de-de_phoneb», тогда как <xref:System.Globalization.CultureInfo.Name?displayProperty=nameWithType> свойства связанного языка и региональных параметров немецкий (Германия) имеет значение «de-DE».  
  
   
  
## Examples  
 В следующем примере сравниваются три строки с использованием языков и региональных параметров fr-FR и ja-JP. <xref:System.Globalization.CultureInfo.Name%2A> Свойство используется для отображения имени каждого языка и региональных параметров.  
  
 [!code-cpp[CompareInfo#1](~/samples/snippets/cpp/VS_Snippets_CLR/CompareInfo/cpp/CompareInfo.cpp#1)]
 [!code-csharp[CompareInfo#1](~/samples/snippets/csharp/VS_Snippets_CLR/CompareInfo/CS/CompareInfo.cs#1)]
 [!code-vb[CompareInfo#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/CompareInfo/VB/CompareInfo.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="System.Runtime.Serialization.IDeserializationCallback.OnDeserialization">
      <MemberSignature Language="C#" Value="void IDeserializationCallback.OnDeserialization (object sender);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance void System.Runtime.Serialization.IDeserializationCallback.OnDeserialization(object sender) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Globalization.CompareInfo.System#Runtime#Serialization#IDeserializationCallback#OnDeserialization(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Sub OnDeserialization (sender As Object) Implements IDeserializationCallback.OnDeserialization" />
      <MemberSignature Language="C++ CLI" Value=" virtual void System.Runtime.Serialization.IDeserializationCallback.OnDeserialization(System::Object ^ sender) = System::Runtime::Serialization::IDeserializationCallback::OnDeserialization;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Runtime.Serialization.IDeserializationCallback.OnDeserialization(System.Object)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="sender" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="sender">The object that initiated the callback.</param>
        <summary>Runs when the entire object graph has been deserialized.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Этот член является явной реализации члена интерфейса, можно использовать только тогда, когда текущий <xref:System.Globalization.CompareInfo> объект приведен к <xref:System.Runtime.Serialization.IDeserializationCallback> интерфейс. Дополнительные сведения см. в описании метода <xref:System.Runtime.Serialization.IDeserializationCallback.OnDeserialization%2A>.  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Runtime.Serialization.IDeserializationCallback" />
      </Docs>
    </Member>
    <Member MemberName="ToString">
      <MemberSignature Language="C#" Value="public override string ToString ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance string ToString() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Globalization.CompareInfo.ToString" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function ToString () As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override System::String ^ ToString();" />
      <MemberSignature Language="F#" Value="override this.ToString : unit -&gt; string" Usage="compareInfo.ToString " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Globalization</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Returns a string that represents the current <see cref="T:System.Globalization.CompareInfo" /> object.</summary>
        <returns>A string that represents the current <see cref="T:System.Globalization.CompareInfo" /> object.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Этот метод переопределяет <xref:System.Object.ToString%2A?displayProperty=nameWithType> метод. Возвращает строку, которая состоит из имени класса и значение экземпляра <xref:System.Globalization.CompareInfo.Name%2A> свойств, разделенных дефисом.  
  
 ]]></format>
        </remarks>
        <block subset="none" type="usage">
          <para>Начиная с .NET Framework 4, <see cref="M:System.Globalization.CompareInfo.ToString" /> метод возвращает имя класса, а затем пробел, дефис, пробел и значение <see cref="P:System.Globalization.CompareInfo.Name" /> свойства. Например, для <see cref="T:System.Globalization.CompareInfo" /> , представляющий культуру en US, <see cref="M:System.Globalization.CompareInfo.ToString" /> метод возвращает «CompareInfo - en US». В предыдущих версиях .NET Framework, она возвращает имя класса, а затем пробел, дефис, пробел и значение <see cref="P:System.Globalization.CompareInfo.LCID" /> свойства. Например, для <see cref="T:System.Globalization.CompareInfo" /> , представляющий культуру en US, <see cref="M:System.Globalization.CompareInfo.ToString" /> метод возвращает «CompareInfo - 1033».</para>
        </block>
        <altmember cref="M:System.Object.ToString" />
      </Docs>
    </Member>
    <Member MemberName="Version">
      <MemberSignature Language="C#" Value="public System.Globalization.SortVersion Version { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Globalization.SortVersion Version" />
      <MemberSignature Language="DocId" Value="P:System.Globalization.CompareInfo.Version" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Version As SortVersion" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Globalization::SortVersion ^ Version { System::Globalization::SortVersion ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.Version : System.Globalization.SortVersion" Usage="System.Globalization.CompareInfo.Version" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>get: System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Globalization.SortVersion</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets information about the version of Unicode used for comparing and sorting strings.</summary>
        <value>Объект, содержащий сведения о версии Юникода, используемой для сравнения и сортировки строк.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Вес отдельных символов и, следовательно, способ в котором строки определенный по сравнению с или упорядоченные, зависит от версии спецификации Юникода, которая реализует определенной версии платформы .NET Framework. В [!INCLUDE[net_v45](~/includes/net-v45-md.md)], это также зависит от операционной системы, как показано в следующей таблице. Обратите внимание, что этот список поддерживаемых версий Юникода применяется только к сравнению и сортировке символов. Он не применяется для классификации символов Юникода по категориям.  
  
|Версия платформы .NET Framework|Операционная система|Версия Юникода|  
|----------------------------|----------------------|---------------------|  
|[!INCLUDE[net_v40_short](~/includes/net-v40-short-md.md)]|Все операционные системы|Юникод 5.0|  
|[!INCLUDE[net_v45](~/includes/net-v45-md.md)] и более поздних версий|[!INCLUDE[win7](~/includes/win7-md.md)]|Юникод 5.0|  
|[!INCLUDE[net_v45](~/includes/net-v45-md.md)] и более поздних версий|[!INCLUDE[win8](~/includes/win8-md.md)] и более поздних версиях операционной системы Windows|Юникода 6.3|  
  
 <xref:System.Globalization.SortVersion> Объект, возвращаемый <xref:System.Globalization.CompareInfo.Version%2A> свойство идентифицирует точные версии Юникода, используемой для сравнения строк. Это полезно только в том случае, при сравнении двух <xref:System.Globalization.SortVersion> объектов, чтобы определить, используют ли они той же версией Юникода и язык и региональные параметры для сравнения строк. Дополнительные сведения и пример см. в разделе <xref:System.Globalization.SortVersion> справочной странице.  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Globalization.SortVersion" />
      </Docs>
    </Member>
  </Members>
</Type>