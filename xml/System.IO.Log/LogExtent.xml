<Type Name="LogExtent" FullName="System.IO.Log.LogExtent">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="ea122874cb8efbdc9e0db79388cf69953c810bcc" />
    <Meta Name="ms.sourcegitcommit" Value="d31dc2ede16f6f7bc64e90d9f897ff54c4e3869b" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="ru-RU" />
    <Meta Name="ms.lasthandoff" Value="04/03/2018" />
    <Meta Name="ms.locfileid" Value="30415228" />
  </Metadata>
  <TypeSignature Language="C#" Value="public sealed class LogExtent" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed beforefieldinit LogExtent extends System.Object" />
  <TypeSignature Language="DocId" Value="T:System.IO.Log.LogExtent" />
  <TypeSignature Language="VB.NET" Value="Public NotInheritable Class LogExtent" />
  <TypeSignature Language="C++ CLI" Value="public ref class LogExtent sealed" />
  <AssemblyInfo>
    <AssemblyName>System.IO.Log</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>Представляет область диска, в которой хранятся данные журнала.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Экземпляр <xref:System.IO.Log.LogStore> хранит данные в коллекции областей диска, представленных экземплярами <xref:System.IO.Log.LogExtent>. Конкретная область <xref:System.IO.Log.LogExtent> связана ровно с одним экземпляром <xref:System.IO.Log.LogStore>, и объекты <xref:System.IO.Log.LogExtent> в одном <xref:System.IO.Log.LogStore> имеют одинаковый размер. Пространство добавляется и удаляется из экземпляра <xref:System.IO.Log.LogStore> с шагом в области диска.  
  
 Несмотря на то что объекты <xref:System.IO.Log.LogExtent> представлены на диске в виде файлов, их не следует перемещать или удалять как обычные файлы. Чтобы удалить экземпляр <xref:System.IO.Log.LogExtent>, необходимо удалить его из коллекции <xref:System.IO.Log.LogExtentCollection>, в которой он содержится.  
  
   
  
## Examples  
 В этом примере показано, как использовать класс <xref:System.IO.Log.LogExtent> для добавления и эмуляции областей в последовательности журнала.  
  
 [!code-csharp[S_UELogRecordSequence#0](~/samples/snippets/csharp/VS_Snippets_CFX/s_uelogrecordsequence/cs/mylogrecordsequence.cs#0)]
 [!code-vb[S_UELogRecordSequence#0](~/samples/snippets/visualbasic/VS_Snippets_CFX/s_uelogrecordsequence/vb/mylogrecordsequence.vb#0)]  
  
 ]]></format>
    </remarks>
    <altmember cref="T:System.IO.Log.LogExtentCollection" />
    <altmember cref="T:System.IO.Log.LogStore" />
  </Docs>
  <Members>
    <Member MemberName="Path">
      <MemberSignature Language="C#" Value="public string Path { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string Path" />
      <MemberSignature Language="DocId" Value="P:System.IO.Log.LogExtent.Path" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Path As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ Path { System::String ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IO.Log</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Возвращает полный путь данного экземпляра <see cref="T:System.IO.Log.LogExtent" />.</summary>
        <value>Полный путь данного экземпляра <see cref="T:System.IO.Log.LogExtent" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Несмотря на то что объекты <xref:System.IO.Log.LogExtent> представлены на диске в виде файлов, их не следует перемещать или удалять как обычные файлы. Чтобы удалить экземпляр <xref:System.IO.Log.LogExtent>, необходимо удалить его из коллекции <xref:System.IO.Log.LogExtentCollection>, в которой он содержится.  
  
   
  
## Examples  
 В этом примере показано, как использовать класс <xref:System.IO.Log.LogExtent> для добавления и эмуляции областей в последовательности журнала.  
  
 [!code-csharp[S_UELogRecordSequence#0](~/samples/snippets/csharp/VS_Snippets_CFX/s_uelogrecordsequence/cs/mylogrecordsequence.cs#0)]
 [!code-vb[S_UELogRecordSequence#0](~/samples/snippets/visualbasic/VS_Snippets_CFX/s_uelogrecordsequence/vb/mylogrecordsequence.vb#0)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Size">
      <MemberSignature Language="C#" Value="public long Size { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int64 Size" />
      <MemberSignature Language="DocId" Value="P:System.IO.Log.LogExtent.Size" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Size As Long" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property long Size { long get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IO.Log</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int64</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Возвращает размер данного экземпляра <see cref="T:System.IO.Log.LogExtent" /> в байтах.</summary>
        <value>Размер данного экземпляра <see cref="T:System.IO.Log.LogExtent" /> в байтах.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 В этом примере показано, как использовать класс <xref:System.IO.Log.LogExtent> для добавления и эмуляции областей в последовательности журнала.  
  
 [!code-csharp[S_UELogRecordSequence#0](~/samples/snippets/csharp/VS_Snippets_CFX/s_uelogrecordsequence/cs/mylogrecordsequence.cs#0)]
 [!code-vb[S_UELogRecordSequence#0](~/samples/snippets/visualbasic/VS_Snippets_CFX/s_uelogrecordsequence/vb/mylogrecordsequence.vb#0)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="State">
      <MemberSignature Language="C#" Value="public System.IO.Log.LogExtentState State { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.IO.Log.LogExtentState State" />
      <MemberSignature Language="DocId" Value="P:System.IO.Log.LogExtent.State" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property State As LogExtentState" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::IO::Log::LogExtentState State { System::IO::Log::LogExtentState get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IO.Log</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IO.Log.LogExtentState</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Возвращает состояние данного экземпляра <see cref="T:System.IO.Log.LogExtent" />.</summary>
        <value>Состояние экземпляра <see cref="T:System.IO.Log.LogExtent" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 В этом примере показано, как использовать класс <xref:System.IO.Log.LogExtent> для добавления и эмуляции областей в последовательности журнала.  
  
 [!code-csharp[S_UELogRecordSequence#0](~/samples/snippets/csharp/VS_Snippets_CFX/s_uelogrecordsequence/cs/mylogrecordsequence.cs#0)]
 [!code-vb[S_UELogRecordSequence#0](~/samples/snippets/visualbasic/VS_Snippets_CFX/s_uelogrecordsequence/vb/mylogrecordsequence.vb#0)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>