<Type Name="PackageDigitalSignatureManager" FullName="System.IO.Packaging.PackageDigitalSignatureManager">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="6e16960f0bc3887a47bf8d05b3f52441e0df89ed" />
    <Meta Name="ms.sourcegitcommit" Value="df6cf590aa3087f6c7c202712eee781c6a3c8f96" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="ru-RU" />
    <Meta Name="ms.lasthandoff" Value="05/07/2018" />
    <Meta Name="ms.locfileid" Value="33682588" />
  </Metadata>
  <TypeSignature Language="C#" Value="public sealed class PackageDigitalSignatureManager" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed beforefieldinit PackageDigitalSignatureManager extends System.Object" />
  <TypeSignature Language="DocId" Value="T:System.IO.Packaging.PackageDigitalSignatureManager" />
  <TypeSignature Language="VB.NET" Value="Public NotInheritable Class PackageDigitalSignatureManager" />
  <TypeSignature Language="C++ CLI" Value="public ref class PackageDigitalSignatureManager sealed" />
  <AssemblyInfo>
    <AssemblyName>WindowsBase</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>Provides a utility class for the creation and verification of digital signatures in a <see cref="T:System.IO.Packaging.Package" />.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.IO.Packaging.PackageDigitalSignatureManager> Создает на основе архитектуры платформы .NET Framework в классы цифровую подпись и предоставляет служебный класс для выполнения общих задач с помощью цифровых подписей с <xref:System.IO.Packaging.Package> элементов.  
  
 Дополнительные сведения о цифровых подписях см. в статье MSDN Framework цифровой подписи из спецификации Open Packaging Conventions найти по адресу [ http://go.microsoft.com/fwlink/?LinkId=74494 ](http://go.microsoft.com/fwlink/?LinkId=74494).  
  
   
  
## Examples  
 В следующем примере показано, как использовать <xref:System.IO.Packaging.PackageDigitalSignatureManager>.  Полный пример см. в разделе [создания пакета с помощью цифровой подписи образца](http://go.microsoft.com/fwlink/?LinkID=159966).  
  
  
  
 ]]></format>
    </remarks>
    <altmember cref="T:System.IO.Packaging.Package" />
    <altmember cref="T:System.IO.Packaging.PackageDigitalSignature" />
    <altmember cref="T:System.Windows.Xps.Packaging.XpsDigitalSignature" />
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public PackageDigitalSignatureManager (System.IO.Packaging.Package package);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.IO.Packaging.Package package) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IO.Packaging.PackageDigitalSignatureManager.#ctor(System.IO.Packaging.Package)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; PackageDigitalSignatureManager(System::IO::Packaging::Package ^ package);" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="package" Type="System.IO.Packaging.Package" />
      </Parameters>
      <Docs>
        <param name="package">The package associated with this signature manager.</param>
        <summary>Initializes a new instance of the <see cref="T:System.IO.Packaging.PackageDigitalSignatureManager" /> class for use with a specified <see cref="T:System.IO.Packaging.Package" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Целевой пакет, связанный с диспетчером сигнатур, задается при инициализации. После выполнения этой установки, не может изменяться пакет, связанный с диспетчером сигнатур. Создайте новую подпись диспетчер для каждого пакета, при необходимости.  
  
   
  
## Examples  
 В следующем примере показано, как использовать этот конструктор.  Полный пример см. в разделе [создания пакета с помощью цифровой подписи образца](http://go.microsoft.com/fwlink/?LinkID=159966).  
  
  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.IO.Packaging.PackageDigitalSignature" />
      </Docs>
    </Member>
    <Member MemberName="CertificateOption">
      <MemberSignature Language="C#" Value="public System.IO.Packaging.CertificateEmbeddingOption CertificateOption { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.IO.Packaging.CertificateEmbeddingOption CertificateOption" />
      <MemberSignature Language="DocId" Value="P:System.IO.Packaging.PackageDigitalSignatureManager.CertificateOption" />
      <MemberSignature Language="VB.NET" Value="Public Property CertificateOption As CertificateEmbeddingOption" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::IO::Packaging::CertificateEmbeddingOption CertificateOption { System::IO::Packaging::CertificateEmbeddingOption get(); void set(System::IO::Packaging::CertificateEmbeddingOption value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IO.Packaging.CertificateEmbeddingOption</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets or sets the X.509 certificate embedding option used by the <see cref="M:System.IO.Packaging.PackageDigitalSignatureManager.Sign(System.Collections.Generic.IEnumerable{System.Uri})" /> method to digitally sign package parts.</summary>
        <value>Одно из значений перечисления <see cref="T:System.IO.Packaging.CertificateEmbeddingOption" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Это свойство указывает, где будет храниться сертификат X.509 подписавшего при добавлении цифровой подписи в рамках.  
  
   
  
## Examples  
 В следующем примере показано, как задать это свойство в процессе подготовки для создания цифровой подписи частей в пакете.  Полный пример см. в разделе [создания пакета с помощью цифровой подписи образца](http://go.microsoft.com/fwlink/?LinkID=159966).  
  
  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="Countersign">
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Countersigns signatures in the package with a specified X.509 certificate.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Countersign">
      <MemberSignature Language="C#" Value="public System.IO.Packaging.PackageDigitalSignature Countersign ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.IO.Packaging.PackageDigitalSignature Countersign() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IO.Packaging.PackageDigitalSignatureManager.Countersign" />
      <MemberSignature Language="VB.NET" Value="Public Function Countersign () As PackageDigitalSignature" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::IO::Packaging::PackageDigitalSignature ^ Countersign();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IO.Packaging.PackageDigitalSignature</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Countersigns all the signatures in the package with a user-selected X.509 certificate.</summary>
        <returns>The signature that was added as a countersign; or <see langword="null" /> if no certificate could be located or the user canceled the certificate selection dialog.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Если сертификат X.509 не задан в вызове, этот метод открывает диалоговое окно выбора сертификата, который предлагает пользователю выбрать сертификат, используемый для подписания.  
  
 Задать для дескриптора окна <xref:System.IO.Packaging.PackageDigitalSignatureManager.ParentWindow%2A> свойство перед вызовом <xref:System.IO.Packaging.PackageDigitalSignatureManager.Countersign%2A> вносить для заданного окна модальное диалоговое окно выбора сертификата.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Countersign">
      <MemberSignature Language="C#" Value="public System.IO.Packaging.PackageDigitalSignature Countersign (System.Security.Cryptography.X509Certificates.X509Certificate certificate);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.IO.Packaging.PackageDigitalSignature Countersign(class System.Security.Cryptography.X509Certificates.X509Certificate certificate) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IO.Packaging.PackageDigitalSignatureManager.Countersign(System.Security.Cryptography.X509Certificates.X509Certificate)" />
      <MemberSignature Language="VB.NET" Value="Public Function Countersign (certificate As X509Certificate) As PackageDigitalSignature" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::IO::Packaging::PackageDigitalSignature ^ Countersign(System::Security::Cryptography::X509Certificates::X509Certificate ^ certificate);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IO.Packaging.PackageDigitalSignature</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="certificate" Type="System.Security.Cryptography.X509Certificates.X509Certificate" />
      </Parameters>
      <Docs>
        <param name="certificate">The X.509 certificate to add as a countersign signature.</param>
        <summary>Countersigns all the signatures in the package with a specified X.509 certificate.</summary>
        <returns>The signature that was added as a countersign.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="certificate" /> is <see langword="null" /></exception>
      </Docs>
    </Member>
    <Member MemberName="Countersign">
      <MemberSignature Language="C#" Value="public System.IO.Packaging.PackageDigitalSignature Countersign (System.Security.Cryptography.X509Certificates.X509Certificate certificate, System.Collections.Generic.IEnumerable&lt;Uri&gt; signatures);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.IO.Packaging.PackageDigitalSignature Countersign(class System.Security.Cryptography.X509Certificates.X509Certificate certificate, class System.Collections.Generic.IEnumerable`1&lt;class System.Uri&gt; signatures) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IO.Packaging.PackageDigitalSignatureManager.Countersign(System.Security.Cryptography.X509Certificates.X509Certificate,System.Collections.Generic.IEnumerable{System.Uri})" />
      <MemberSignature Language="VB.NET" Value="Public Function Countersign (certificate As X509Certificate, signatures As IEnumerable(Of Uri)) As PackageDigitalSignature" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::IO::Packaging::PackageDigitalSignature ^ Countersign(System::Security::Cryptography::X509Certificates::X509Certificate ^ certificate, System::Collections::Generic::IEnumerable&lt;Uri ^&gt; ^ signatures);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IO.Packaging.PackageDigitalSignature</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="certificate" Type="System.Security.Cryptography.X509Certificates.X509Certificate" />
        <Parameter Name="signatures" Type="System.Collections.Generic.IEnumerable&lt;System.Uri&gt;" />
      </Parameters>
      <Docs>
        <param name="certificate">The X.509 certificate to countersign each of the specified <c>signatures</c>.</param>
        <param name="signatures">The list of signatures to countersign.</param>
        <summary>Countersigns a list of signatures with a given X.509 certificate.</summary>
        <returns>The digital signature used to countersign each of the <paramref name="signatures" />.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">Either the <paramref name="certificate" /> or <paramref name="signatures" /> parameter is <see langword="null" />.</exception>
        <exception cref="T:System.InvalidOperationException">The package contains no signed <see cref="T:System.IO.Packaging.PackagePart" /> objects.</exception>
        <exception cref="T:System.ArgumentException">The package contains no <see cref="T:System.IO.Packaging.PackageDigitalSignature" /> parts.</exception>
      </Docs>
    </Member>
    <Member MemberName="DefaultHashAlgorithm">
      <MemberSignature Language="C#" Value="public static string DefaultHashAlgorithm { get; }" />
      <MemberSignature Language="ILAsm" Value=".property string DefaultHashAlgorithm" />
      <MemberSignature Language="DocId" Value="P:System.IO.Packaging.PackageDigitalSignatureManager.DefaultHashAlgorithm" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Property DefaultHashAlgorithm As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static property System::String ^ DefaultHashAlgorithm { System::String ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets a [!INCLUDE[TLA2#tla_uri](~/includes/tla2sharptla-uri-md.md)] string that identifies the default hash algorithm used to create and verify signatures.</summary>
        <value>Объект [!INCLUDE[TLA2#tla_uri](~/includes/tla2sharptla-uri-md.md)] строку, которая идентифицирует алгоритм хэширования по умолчанию, используемый для создания и проверки подписи.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Алгоритм хэширования по умолчанию для стандартных <xref:System.IO.Packaging.PackageDigitalSignatureManager> класс <xref:System.Security.Cryptography.Xml.SignedXml.XmlDsigSHA1Url> ([!INCLUDE[TLA#tla_sha1](~/includes/tlasharptla-sha1-md.md)]).  
  
 <xref:System.IO.Packaging.PackageDigitalSignatureManager.HashAlgorithm%2A> Возвращает или задает фактический хэш-алгоритм используется для создания и проверки сигнатур.  
  
 <xref:System.IO.Packaging.PackageDigitalSignatureManager.DefaultHashAlgorithm%2A> Свойство обычно используется для сброса <xref:System.IO.Packaging.PackageDigitalSignatureManager.HashAlgorithm%2A> свойства по умолчанию после временные изменения.  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Security.Cryptography.Xml.SignedXml" />
        <altmember cref="T:System.Security.Cryptography.HashAlgorithm" />
      </Docs>
    </Member>
    <Member MemberName="GetSignature">
      <MemberSignature Language="C#" Value="public System.IO.Packaging.PackageDigitalSignature GetSignature (Uri signatureUri);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.IO.Packaging.PackageDigitalSignature GetSignature(class System.Uri signatureUri) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IO.Packaging.PackageDigitalSignatureManager.GetSignature(System.Uri)" />
      <MemberSignature Language="VB.NET" Value="Public Function GetSignature (signatureUri As Uri) As PackageDigitalSignature" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::IO::Packaging::PackageDigitalSignature ^ GetSignature(Uri ^ signatureUri);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IO.Packaging.PackageDigitalSignature</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="signatureUri" Type="System.Uri" />
      </Parameters>
      <Docs>
        <param name="signatureUri">The [!INCLUDE[TLA2#tla_uri](~/includes/tla2sharptla-uri-md.md)] of the digital signature to return.</param>
        <summary>Returns the digital signature for a given signature [!INCLUDE[TLA#tla_uri](~/includes/tlasharptla-uri-md.md)].</summary>
        <returns>The digital signature for the specified <paramref name="signatureUri" />, or <see langword="null" /> if a signature for the given <paramref name="signatureUri" /> cannot be found.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="HashAlgorithm">
      <MemberSignature Language="C#" Value="public string HashAlgorithm { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string HashAlgorithm" />
      <MemberSignature Language="DocId" Value="P:System.IO.Packaging.PackageDigitalSignatureManager.HashAlgorithm" />
      <MemberSignature Language="VB.NET" Value="Public Property HashAlgorithm As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ HashAlgorithm { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets or sets the [!INCLUDE[TLA2#tla_uri](~/includes/tla2sharptla-uri-md.md)] identifier for the <see cref="T:System.Security.Cryptography.HashAlgorithm" /> instance used to create and verify signatures.</summary>
        <value>
          <see cref="T:System.Security.Cryptography.Xml.SignedXml" /> [!INCLUDE[TLA2#tla_uri](~/includes/tla2sharptla-uri-md.md)] Идентификатор <see cref="T:System.Security.Cryptography.HashAlgorithm" /> экземпляр, используемый для создания и проверки сигнатур.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Идентификатор хэш-алгоритма по умолчанию для диспетчера Стандартная цифровая подпись — <xref:System.Security.Cryptography.Xml.SignedXml.XmlDsigSHA1Url> (<xref:System.Security.Cryptography.SHA1>— алгоритм SHA версии 1.0).  
  
 Если явно набор в противном случае — это свойство возвращает то же значение, что <xref:System.IO.Packaging.PackageDigitalSignatureManager.DefaultHashAlgorithm%2A>.  
  
 <xref:System.IO.Packaging.PackageDigitalSignatureManager.HashAlgorithm%2A> Свойство обычно не изменяется относительно значения по умолчанию. Это свойство необходимо изменить только в том случае, если подпись, которая использует другой известные и доступен <xref:System.Security.Cryptography.HashAlgorithm> встречается.  После завершения работы с подпись, которая использует алгоритм хэширования, вызовите <xref:System.IO.Packaging.PackageDigitalSignatureManager.DefaultHashAlgorithm%2A> Сброс <xref:System.IO.Packaging.PackageDigitalSignatureManager.HashAlgorithm%2A> свойства по умолчанию.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">The string for the [!INCLUDE[TLA2#tla_uri](~/includes/tla2sharptla-uri-md.md)] to set is <see langword="null" />.</exception>
        <exception cref="T:System.ArgumentException">The string for the [!INCLUDE[TLA2#tla_uri](~/includes/tla2sharptla-uri-md.md)] to set is empty.</exception>
        <altmember cref="T:System.Security.Cryptography.Xml.SignedXml" />
        <altmember cref="P:System.IO.Packaging.PackageDigitalSignatureManager.DefaultHashAlgorithm" />
        <altmember cref="P:System.IO.Packaging.PackageDigitalSignature.SignatureValue" />
      </Docs>
    </Member>
    <Member MemberName="InvalidSignatureEvent">
      <MemberSignature Language="C#" Value="public event System.IO.Packaging.InvalidSignatureEventHandler InvalidSignatureEvent;" />
      <MemberSignature Language="ILAsm" Value=".event class System.IO.Packaging.InvalidSignatureEventHandler InvalidSignatureEvent" />
      <MemberSignature Language="DocId" Value="E:System.IO.Packaging.PackageDigitalSignatureManager.InvalidSignatureEvent" />
      <MemberSignature Language="VB.NET" Value="Public Event InvalidSignatureEvent As InvalidSignatureEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event System::IO::Packaging::InvalidSignatureEventHandler ^ InvalidSignatureEvent;" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IO.Packaging.InvalidSignatureEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Occurs when <see cref="M:System.IO.Packaging.PackageDigitalSignatureManager.VerifySignatures(System.Boolean)" /> encounters an invalid signature.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="IsSigned">
      <MemberSignature Language="C#" Value="public bool IsSigned { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsSigned" />
      <MemberSignature Language="DocId" Value="P:System.IO.Packaging.PackageDigitalSignatureManager.IsSigned" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsSigned As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsSigned { bool get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets a value that indicates whether the package contains any signatures.</summary>
        <value>
          <see langword="true" /> Если пакет содержит подписи; в противном случае <see langword="false" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.IO.Packaging.PackageDigitalSignatureManager.IsSigned%2A> Свойство не выполняет проверки подписи. Если подписи присутствуют и <xref:System.IO.Packaging.PackageDigitalSignatureManager.IsSigned%2A> — `true`, один или несколько подписей может оказаться недопустимым.  Вызовите <xref:System.IO.Packaging.PackageDigitalSignatureManager.VerifySignatures%2A> для убедитесь, что подписи являются допустимыми и не были изменены.  
  
   
  
## Examples  
 В следующем примере показано, как использовать <xref:System.IO.Packaging.PackageDigitalSignatureManager.IsSigned%2A> свойства, чтобы определить, если пакет содержит цифровые подписи.  Полный пример см. в разделе [создания пакета с помощью цифровой подписи образца](http://go.microsoft.com/fwlink/?LinkID=159966).  
  
 [!code-csharp[PackageDigitalSignature#PackageDigSigValidate](~/samples/snippets/csharp/VS_Snippets_Wpf/PackageDigitalSignature/CSharp/PackageDigitalSignature.cs#packagedigsigvalidate)]
 [!code-vb[PackageDigitalSignature#PackageDigSigValidate](~/samples/snippets/visualbasic/VS_Snippets_Wpf/PackageDigitalSignature/visualbasic/packagedigitalsignature.vb#packagedigsigvalidate)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.IO.Packaging.PackageDigitalSignatureManager.VerifySignatures(System.Boolean)" />
      </Docs>
    </Member>
    <Member MemberName="ParentWindow">
      <MemberSignature Language="C#" Value="public IntPtr ParentWindow { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance native int ParentWindow" />
      <MemberSignature Language="DocId" Value="P:System.IO.Packaging.PackageDigitalSignatureManager.ParentWindow" />
      <MemberSignature Language="VB.NET" Value="Public Property ParentWindow As IntPtr" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property IntPtr ParentWindow { IntPtr get(); void set(IntPtr value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IntPtr</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets or sets a handle to the parent window for displaying a certificate selection dialog box.</summary>
        <value>Дескриптор родительского окна, используемый для отображения диалоговое окно выбора сертификата.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Диалоговое окно выбора сертификата выводится только в том случае, если <xref:System.IO.Packaging.PackageDigitalSignatureManager.Sign%2A> вызова не содержит сертификатов. Если сертификаты не указаны, <xref:System.IO.Packaging.PackageDigitalSignatureManager.Sign%2A> отобразит диалоговое окно выбора сертификата, который позволяет пользователю выбрать сертификат, который должен использоваться для подписи.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="RemoveAllSignatures">
      <MemberSignature Language="C#" Value="public void RemoveAllSignatures ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void RemoveAllSignatures() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IO.Packaging.PackageDigitalSignatureManager.RemoveAllSignatures" />
      <MemberSignature Language="VB.NET" Value="Public Sub RemoveAllSignatures ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void RemoveAllSignatures();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Removes all digital signatures from the package.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Этот метод также удаляет все сертификаты X.509 из пакета.  После удаления всех подписи и сертификатов, вызовите <xref:System.IO.Packaging.Package.Flush%2A> для сохранения всех изменений в хранилище.  
  
 ]]></format>
        </remarks>
        <altmember cref="Overload:System.IO.Packaging.PackageDigitalSignatureManager.Sign" />
        <altmember cref="M:System.IO.Packaging.PackageDigitalSignatureManager.RemoveSignature(System.Uri)" />
        <altmember cref="T:System.IO.Packaging.PackageDigitalSignature" />
      </Docs>
    </Member>
    <Member MemberName="RemoveSignature">
      <MemberSignature Language="C#" Value="public void RemoveSignature (Uri signatureUri);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void RemoveSignature(class System.Uri signatureUri) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IO.Packaging.PackageDigitalSignatureManager.RemoveSignature(System.Uri)" />
      <MemberSignature Language="VB.NET" Value="Public Sub RemoveSignature (signatureUri As Uri)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void RemoveSignature(Uri ^ signatureUri);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="signatureUri" Type="System.Uri" />
      </Parameters>
      <Docs>
        <param name="signatureUri">The [!INCLUDE[TLA2#tla_uri](~/includes/tla2sharptla-uri-md.md)] of the <see cref="T:System.IO.Packaging.PackageDigitalSignature" /> to remove.</param>
        <summary>Removes the digital signature with a given signature [!INCLUDE[TLA#tla_uri](~/includes/tlasharptla-uri-md.md)].</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Этот метод также удаляет соответствующий сертификат X.509, если не ссылаются другие цифровые подписи.  
  
 После удаления подписи, вызовите <xref:System.IO.Packaging.Package.Flush%2A> для сохранения изменений в хранилище.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="Sign">
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Signs a list of package parts with a specified X.509 certificate.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 В следующем примере показано шаги для создания цифровой подписи список частей в <xref:System.IO.Packaging.Package>.  Полный пример см. в разделе [создания пакета с помощью цифровой подписи образца](http://go.microsoft.com/fwlink/?LinkID=159966).  
  
 [!code-csharp[PackageDigitalSignature#PackageDigSigSign](~/samples/snippets/csharp/VS_Snippets_Wpf/PackageDigitalSignature/CSharp/PackageDigitalSignature.cs#packagedigsigsign)]
 [!code-vb[PackageDigitalSignature#PackageDigSigSign](~/samples/snippets/visualbasic/VS_Snippets_Wpf/PackageDigitalSignature/visualbasic/packagedigitalsignature.vb#packagedigsigsign)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </MemberGroup>
    <Member MemberName="Sign">
      <MemberSignature Language="C#" Value="public System.IO.Packaging.PackageDigitalSignature Sign (System.Collections.Generic.IEnumerable&lt;Uri&gt; parts);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.IO.Packaging.PackageDigitalSignature Sign(class System.Collections.Generic.IEnumerable`1&lt;class System.Uri&gt; parts) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IO.Packaging.PackageDigitalSignatureManager.Sign(System.Collections.Generic.IEnumerable{System.Uri})" />
      <MemberSignature Language="VB.NET" Value="Public Function Sign (parts As IEnumerable(Of Uri)) As PackageDigitalSignature" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::IO::Packaging::PackageDigitalSignature ^ Sign(System::Collections::Generic::IEnumerable&lt;Uri ^&gt; ^ parts);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IO.Packaging.PackageDigitalSignature</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="parts" Type="System.Collections.Generic.IEnumerable&lt;System.Uri&gt;" />
      </Parameters>
      <Docs>
        <param name="parts">The list of [!INCLUDE[TLA#tla_uri#plural](~/includes/tlasharptla-urisharpplural-md.md)] for the <see cref="T:System.IO.Packaging.PackagePart" /> elements to sign.</param>
        <summary>Prompts the user for an X.509 certificate, which is then used to digitally sign a specified list of package parts.</summary>
        <returns>The digital signature used to sign the list of <paramref name="parts" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Чтобы сделать для конкретного окна модальное диалоговое окно выбора сертификата, установите <xref:System.IO.Packaging.PackageDigitalSignatureManager.ParentWindow%2A> свойство перед вызовом <xref:System.IO.Packaging.PackageDigitalSignatureManager.Sign%2A>.  
  
 <xref:System.IO.Packaging.PackageDigitalSignatureManager.Sign%2A> не будет запрашивать сертификаты, если их нет в хранилище сертификатов по умолчанию.  
  
   
  
## Examples  
 В следующем примере показано, как подписывать список частей пакета.  Полный пример см. в разделе [создания пакета с помощью цифровой подписи образца](http://go.microsoft.com/fwlink/?LinkID=159966).  
  
 [!code-csharp[PackageDigitalSignature#PackageDigSigSign](~/samples/snippets/csharp/VS_Snippets_Wpf/PackageDigitalSignature/CSharp/PackageDigitalSignature.cs#packagedigsigsign)]
 [!code-vb[PackageDigitalSignature#PackageDigSigSign](~/samples/snippets/visualbasic/VS_Snippets_Wpf/PackageDigitalSignature/visualbasic/packagedigitalsignature.vb#packagedigsigsign)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Sign">
      <MemberSignature Language="C#" Value="public System.IO.Packaging.PackageDigitalSignature Sign (System.Collections.Generic.IEnumerable&lt;Uri&gt; parts, System.Security.Cryptography.X509Certificates.X509Certificate certificate);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.IO.Packaging.PackageDigitalSignature Sign(class System.Collections.Generic.IEnumerable`1&lt;class System.Uri&gt; parts, class System.Security.Cryptography.X509Certificates.X509Certificate certificate) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IO.Packaging.PackageDigitalSignatureManager.Sign(System.Collections.Generic.IEnumerable{System.Uri},System.Security.Cryptography.X509Certificates.X509Certificate)" />
      <MemberSignature Language="VB.NET" Value="Public Function Sign (parts As IEnumerable(Of Uri), certificate As X509Certificate) As PackageDigitalSignature" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::IO::Packaging::PackageDigitalSignature ^ Sign(System::Collections::Generic::IEnumerable&lt;Uri ^&gt; ^ parts, System::Security::Cryptography::X509Certificates::X509Certificate ^ certificate);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IO.Packaging.PackageDigitalSignature</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="parts" Type="System.Collections.Generic.IEnumerable&lt;System.Uri&gt;" />
        <Parameter Name="certificate" Type="System.Security.Cryptography.X509Certificates.X509Certificate" />
      </Parameters>
      <Docs>
        <param name="parts">The list of [!INCLUDE[TLA#tla_uri#plural](~/includes/tlasharptla-urisharpplural-md.md)] for the <see cref="T:System.IO.Packaging.PackagePart" /> elements to sign.</param>
        <param name="certificate">The X.509 certificate to use to digitally sign each of the specified <c>parts</c>.</param>
        <summary>Signs a list of package parts with a given X.509 certificate.</summary>
        <returns>The digital signature used to sign the given list of <paramref name="parts" />; or <see langword="null" /> if no certificate could be found or the user clicked "Cancel" in the certificate selection dialog box.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 Приведенный ниже показано, как подписывать список частей в <xref:System.IO.Packaging.Package>.  Полный пример см. в разделе [создания пакета с помощью цифровой подписи образца](http://go.microsoft.com/fwlink/?LinkID=159966).  
  
 [!code-csharp[PackageDigitalSignature#PackageDigSigSign](~/samples/snippets/csharp/VS_Snippets_Wpf/PackageDigitalSignature/CSharp/PackageDigitalSignature.cs#packagedigsigsign)]
 [!code-vb[PackageDigitalSignature#PackageDigSigSign](~/samples/snippets/visualbasic/VS_Snippets_Wpf/PackageDigitalSignature/visualbasic/packagedigitalsignature.vb#packagedigsigsign)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Sign">
      <MemberSignature Language="C#" Value="public System.IO.Packaging.PackageDigitalSignature Sign (System.Collections.Generic.IEnumerable&lt;Uri&gt; parts, System.Security.Cryptography.X509Certificates.X509Certificate certificate, System.Collections.Generic.IEnumerable&lt;System.IO.Packaging.PackageRelationshipSelector&gt; relationshipSelectors);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.IO.Packaging.PackageDigitalSignature Sign(class System.Collections.Generic.IEnumerable`1&lt;class System.Uri&gt; parts, class System.Security.Cryptography.X509Certificates.X509Certificate certificate, class System.Collections.Generic.IEnumerable`1&lt;class System.IO.Packaging.PackageRelationshipSelector&gt; relationshipSelectors) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IO.Packaging.PackageDigitalSignatureManager.Sign(System.Collections.Generic.IEnumerable{System.Uri},System.Security.Cryptography.X509Certificates.X509Certificate,System.Collections.Generic.IEnumerable{System.IO.Packaging.PackageRelationshipSelector})" />
      <MemberSignature Language="VB.NET" Value="Public Function Sign (parts As IEnumerable(Of Uri), certificate As X509Certificate, relationshipSelectors As IEnumerable(Of PackageRelationshipSelector)) As PackageDigitalSignature" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::IO::Packaging::PackageDigitalSignature ^ Sign(System::Collections::Generic::IEnumerable&lt;Uri ^&gt; ^ parts, System::Security::Cryptography::X509Certificates::X509Certificate ^ certificate, System::Collections::Generic::IEnumerable&lt;System::IO::Packaging::PackageRelationshipSelector ^&gt; ^ relationshipSelectors);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IO.Packaging.PackageDigitalSignature</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="parts" Type="System.Collections.Generic.IEnumerable&lt;System.Uri&gt;" />
        <Parameter Name="certificate" Type="System.Security.Cryptography.X509Certificates.X509Certificate" />
        <Parameter Name="relationshipSelectors" Type="System.Collections.Generic.IEnumerable&lt;System.IO.Packaging.PackageRelationshipSelector&gt;" />
      </Parameters>
      <Docs>
        <param name="parts">The list of [!INCLUDE[TLA#tla_uri#plural](~/includes/tlasharptla-urisharpplural-md.md)] for the <see cref="T:System.IO.Packaging.PackagePart" /> objects to sign.</param>
        <param name="certificate">The X.509 certificate to use to digitally sign each of the specified parts and relationships.</param>
        <param name="relationshipSelectors">The list of <see cref="T:System.IO.Packaging.PackageRelationship" /> objects to sign.</param>
        <summary>Signs a list of package parts and package relationships with a given X.509 certificate.</summary>
        <returns>The digital signature used to sign the elements specified in the <paramref name="parts" /> and <paramref name="relationshipSelectors" /> lists.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Между `parts` и `relationshipSelectors` должен быть по крайней мере один элемент для подписи.  
  
   
  
## Examples  
 В следующем примере показано, как подписывать список частей пакета.  Полный пример см. в разделе [создания пакета с помощью цифровой подписи образца](http://go.microsoft.com/fwlink/?LinkID=159966).  
  
 [!code-csharp[PackageDigitalSignature#PackageDigSigSign](~/samples/snippets/csharp/VS_Snippets_Wpf/PackageDigitalSignature/CSharp/PackageDigitalSignature.cs#packagedigsigsign)]
 [!code-vb[PackageDigitalSignature#PackageDigSigSign](~/samples/snippets/visualbasic/VS_Snippets_Wpf/PackageDigitalSignature/visualbasic/packagedigitalsignature.vb#packagedigsigsign)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">Neither <paramref name="parts" /> nor <paramref name="relationshipSelectors" /> specify any objects to sign.</exception>
      </Docs>
    </Member>
    <Member MemberName="Sign">
      <MemberSignature Language="C#" Value="public System.IO.Packaging.PackageDigitalSignature Sign (System.Collections.Generic.IEnumerable&lt;Uri&gt; parts, System.Security.Cryptography.X509Certificates.X509Certificate certificate, System.Collections.Generic.IEnumerable&lt;System.IO.Packaging.PackageRelationshipSelector&gt; relationshipSelectors, string signatureId);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.IO.Packaging.PackageDigitalSignature Sign(class System.Collections.Generic.IEnumerable`1&lt;class System.Uri&gt; parts, class System.Security.Cryptography.X509Certificates.X509Certificate certificate, class System.Collections.Generic.IEnumerable`1&lt;class System.IO.Packaging.PackageRelationshipSelector&gt; relationshipSelectors, string signatureId) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IO.Packaging.PackageDigitalSignatureManager.Sign(System.Collections.Generic.IEnumerable{System.Uri},System.Security.Cryptography.X509Certificates.X509Certificate,System.Collections.Generic.IEnumerable{System.IO.Packaging.PackageRelationshipSelector},System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function Sign (parts As IEnumerable(Of Uri), certificate As X509Certificate, relationshipSelectors As IEnumerable(Of PackageRelationshipSelector), signatureId As String) As PackageDigitalSignature" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::IO::Packaging::PackageDigitalSignature ^ Sign(System::Collections::Generic::IEnumerable&lt;Uri ^&gt; ^ parts, System::Security::Cryptography::X509Certificates::X509Certificate ^ certificate, System::Collections::Generic::IEnumerable&lt;System::IO::Packaging::PackageRelationshipSelector ^&gt; ^ relationshipSelectors, System::String ^ signatureId);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IO.Packaging.PackageDigitalSignature</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="parts" Type="System.Collections.Generic.IEnumerable&lt;System.Uri&gt;" />
        <Parameter Name="certificate" Type="System.Security.Cryptography.X509Certificates.X509Certificate" />
        <Parameter Name="relationshipSelectors" Type="System.Collections.Generic.IEnumerable&lt;System.IO.Packaging.PackageRelationshipSelector&gt;" />
        <Parameter Name="signatureId" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="parts">The list of [!INCLUDE[TLA#tla_uri#plural](~/includes/tlasharptla-urisharpplural-md.md)] for the <see cref="T:System.IO.Packaging.PackagePart" /> objects to sign.</param>
        <param name="certificate">The X.509 certificate to use to digitally sign each of the specified parts and relationships.</param>
        <param name="relationshipSelectors">The list of <see cref="T:System.IO.Packaging.PackageRelationship" /> objects to sign.</param>
        <param name="signatureId">An identification string to associate with the signature.</param>
        <summary>Signs a list of package parts and package relationships with a given X.509 certificate and [!INCLUDE[TLA#tla_id](~/includes/tlasharptla-id-md.md)].</summary>
        <returns>The digital signature used to sign the elements specified in the <paramref name="parts" /> and <paramref name="relationshipSelectors" /> lists.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 `parts` Список может быть пустым или `null` Если `relationshipSelectors` содержит по крайней мере одну запись.  
  
 `relationshipSelectors` Список может быть пустым или `null` Если `parts` содержит по крайней мере одну запись.  
  
 Между `parts` списка и `relationshipSelectors` должен быть по крайней мере один элемент для подписи.  
  
   
  
## Examples  
 В следующем примере показано, как подписывать список частей пакета.  Полный пример см. в разделе [создания пакета с помощью цифровой подписи образца](http://go.microsoft.com/fwlink/?LinkID=159966).  
  
 [!code-csharp[PackageDigitalSignature#PackageDigSigSign](~/samples/snippets/csharp/VS_Snippets_Wpf/PackageDigitalSignature/CSharp/PackageDigitalSignature.cs#packagedigsigsign)]
 [!code-vb[PackageDigitalSignature#PackageDigSigSign](~/samples/snippets/visualbasic/VS_Snippets_Wpf/PackageDigitalSignature/visualbasic/packagedigitalsignature.vb#packagedigsigsign)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">Neither <paramref name="parts" /> nor <paramref name="relationshipSelectors" /> specify any elements to sign.</exception>
      </Docs>
    </Member>
    <Member MemberName="Sign">
      <MemberSignature Language="C#" Value="public System.IO.Packaging.PackageDigitalSignature Sign (System.Collections.Generic.IEnumerable&lt;Uri&gt; parts, System.Security.Cryptography.X509Certificates.X509Certificate certificate, System.Collections.Generic.IEnumerable&lt;System.IO.Packaging.PackageRelationshipSelector&gt; relationshipSelectors, string signatureId, System.Collections.Generic.IEnumerable&lt;System.Security.Cryptography.Xml.DataObject&gt; signatureObjects, System.Collections.Generic.IEnumerable&lt;System.Security.Cryptography.Xml.Reference&gt; objectReferences);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.IO.Packaging.PackageDigitalSignature Sign(class System.Collections.Generic.IEnumerable`1&lt;class System.Uri&gt; parts, class System.Security.Cryptography.X509Certificates.X509Certificate certificate, class System.Collections.Generic.IEnumerable`1&lt;class System.IO.Packaging.PackageRelationshipSelector&gt; relationshipSelectors, string signatureId, class System.Collections.Generic.IEnumerable`1&lt;class System.Security.Cryptography.Xml.DataObject&gt; signatureObjects, class System.Collections.Generic.IEnumerable`1&lt;class System.Security.Cryptography.Xml.Reference&gt; objectReferences) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IO.Packaging.PackageDigitalSignatureManager.Sign(System.Collections.Generic.IEnumerable{System.Uri},System.Security.Cryptography.X509Certificates.X509Certificate,System.Collections.Generic.IEnumerable{System.IO.Packaging.PackageRelationshipSelector},System.String,System.Collections.Generic.IEnumerable{System.Security.Cryptography.Xml.DataObject},System.Collections.Generic.IEnumerable{System.Security.Cryptography.Xml.Reference})" />
      <MemberSignature Language="VB.NET" Value="Public Function Sign (parts As IEnumerable(Of Uri), certificate As X509Certificate, relationshipSelectors As IEnumerable(Of PackageRelationshipSelector), signatureId As String, signatureObjects As IEnumerable(Of DataObject), objectReferences As IEnumerable(Of Reference)) As PackageDigitalSignature" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::IO::Packaging::PackageDigitalSignature ^ Sign(System::Collections::Generic::IEnumerable&lt;Uri ^&gt; ^ parts, System::Security::Cryptography::X509Certificates::X509Certificate ^ certificate, System::Collections::Generic::IEnumerable&lt;System::IO::Packaging::PackageRelationshipSelector ^&gt; ^ relationshipSelectors, System::String ^ signatureId, System::Collections::Generic::IEnumerable&lt;System::Security::Cryptography::Xml::DataObject ^&gt; ^ signatureObjects, System::Collections::Generic::IEnumerable&lt;System::Security::Cryptography::Xml::Reference ^&gt; ^ objectReferences);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Security.SecurityCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.IO.Packaging.PackageDigitalSignature</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="parts" Type="System.Collections.Generic.IEnumerable&lt;System.Uri&gt;" />
        <Parameter Name="certificate" Type="System.Security.Cryptography.X509Certificates.X509Certificate" />
        <Parameter Name="relationshipSelectors" Type="System.Collections.Generic.IEnumerable&lt;System.IO.Packaging.PackageRelationshipSelector&gt;" />
        <Parameter Name="signatureId" Type="System.String" />
        <Parameter Name="signatureObjects" Type="System.Collections.Generic.IEnumerable&lt;System.Security.Cryptography.Xml.DataObject&gt;" />
        <Parameter Name="objectReferences" Type="System.Collections.Generic.IEnumerable&lt;System.Security.Cryptography.Xml.Reference&gt;" />
      </Parameters>
      <Docs>
        <param name="parts">The list of [!INCLUDE[TLA#tla_uri#plural](~/includes/tlasharptla-urisharpplural-md.md)] for the <see cref="T:System.IO.Packaging.PackagePart" /> objects to sign.</param>
        <param name="certificate">The X.509 certificate to use to digitally sign each of the specified parts and relationships.</param>
        <param name="relationshipSelectors">The list of <see cref="T:System.IO.Packaging.PackageRelationship" /> objects to sign.</param>
        <param name="signatureId">An identification string to associate with the signature.</param>
        <param name="signatureObjects">A list of custom data objects to sign.</param>
        <param name="objectReferences">A list of references to custom objects to sign.</param>
        <summary>Signs a list of package parts, package relationships, or custom objects with a specified X.509 certificate and signature [!INCLUDE[TLA#tla_id](~/includes/tlasharptla-id-md.md)].</summary>
        <returns>The digital signature used to sign the elements specified in the <paramref name="parts" /> and <paramref name="relationshipSelectors" /> lists.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Должен быть по крайней мере один элемент для входа в `parts`, `relationshipSelectors`, `signatureObjects`, или `objectReferences`.  
  
> [!NOTE]
>  Условия `Object`, `Manifest`, `Reference`, `SignatureProperties`, и `Transform` в следующих двух примечания ссылаться на типы элементов и тегов, определенных в спецификации W3C XML-Signature Syntax and Processing см. в разделе [ https://www.w3.org/TR/xmldsig-core/ ](https://www.w3.org/TR/xmldsig-core/).  
  
 Этот и другие <xref:System.IO.Packaging.PackageDigitalSignatureManager.Sign%2A> перегрузки методов использования текущих <xref:System.IO.Packaging.PackageDigitalSignatureManager.TransformMapping%2A> словарь, который определяет `Transform` для применения на основе части пакета <xref:System.IO.Packaging.PackagePart.ContentType%2A>.  Спецификация Microsoft Open Packaging Conventions (OPC) в настоящее время позволяет только два допустимых `Transform` алгоритмы: C14 и C14N.  Стандарт W3C XML-Signature Syntax and Processing не разрешает пустой `Manifest` тегов.  Также требуется спецификации Open Packaging Conventions <xref:System.IO.Packaging.Package>-конкретных `Object` тег, который содержит как `Manifest` и `SignatureProperties` тегов.  Каждый `Manifest` тег Дополнительно также включать по крайней мере один `Reference` тег.  Эти теги требуют каждой подписи выполнить вход по крайней мере один <xref:System.IO.Packaging.PackagePart> (непустых частей тег) или <xref:System.IO.Packaging.PackageRelationship> (непустой `relationshipSelectors`) даже если подпись требуется только для подписи `signatureObjects` или `objectReferences`.  
  
 Это <xref:System.IO.Packaging.PackageDigitalSignatureManager.Sign%2A> метод игнорирует <xref:System.Security.Cryptography.Xml.Reference.DigestMethod%2A> свойства, связанные с каждым <xref:System.Security.Cryptography.Xml.Reference> определенные в `objectReferences`.  
  
 Это <xref:System.IO.Packaging.PackageDigitalSignatureManager.Sign%2A> перегрузка предоставляет поддержку для создания [!INCLUDE[TLA#tla_xml](~/includes/tlasharptla-xml-md.md)] подписей, которые требуют пользовательских `Object` тегов.  Для любых предоставленных `Object` тег для подписания, соответствующий `Reference` тег должен быть предоставлен с [!INCLUDE[TLA#tla_uri](~/includes/tlasharptla-uri-md.md)] , указывающий `Object` тег в синтаксисе локального фрагмента.  Например если `Object` тег имеет идентификатор «myObject», URI в `Reference` тег будет «#myObject».  Для неподписанных объектов, не `Reference` является обязательным.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">Neither <paramref name="parts" />, <paramref name="relationshipSelectors" />, <paramref name="signatureObjects" />, nor <paramref name="objectReferences" /> specify any elements to sign.</exception>
        <exception cref="T:System.InvalidOperationException">A <see cref="P:System.IO.Packaging.PackagePart.ContentType" /> of a part being signed references an empty, <see langword="null" />, or undefined <see cref="P:System.IO.Packaging.PackageDigitalSignatureManager.TransformMapping" />.</exception>
        <exception cref="T:System.Xml.XmlException">
          <paramref name="signatureId" /> is not <see langword="null" /> and is not a valid [!INCLUDE[TLA#tla_xml](~/includes/tlasharptla-xml-md.md)] schema ID (for example, begins with a leading numeric digit).</exception>
      </Docs>
    </Member>
    <Member MemberName="SignatureOrigin">
      <MemberSignature Language="C#" Value="public Uri SignatureOrigin { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Uri SignatureOrigin" />
      <MemberSignature Language="DocId" Value="P:System.IO.Packaging.PackageDigitalSignatureManager.SignatureOrigin" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property SignatureOrigin As Uri" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property Uri ^ SignatureOrigin { Uri ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Uri</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets the [!INCLUDE[TLA#tla_uri](~/includes/tlasharptla-uri-md.md)] of the signature origin part.</summary>
        <value>[!INCLUDE[TLA2#tla_uri](~/includes/tla2sharptla-uri-md.md)] Части источника подписи.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.IO.Packaging.PackageDigitalSignatureManager.SignatureOrigin%2A> [!INCLUDE[TLA#tla_uri](~/includes/tlasharptla-uri-md.md)] Меняется в зависимости от пакета, так как имя формально не определен. Хотя эта реализация обычно будет использовать то же значение по умолчанию, значение, возвращаемое этим свойством будет отражать источник, уже существует в текущей <xref:System.IO.Packaging.Package>.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="SignatureOriginRelationshipType">
      <MemberSignature Language="C#" Value="public static string SignatureOriginRelationshipType { get; }" />
      <MemberSignature Language="ILAsm" Value=".property string SignatureOriginRelationshipType" />
      <MemberSignature Language="DocId" Value="P:System.IO.Packaging.PackageDigitalSignatureManager.SignatureOriginRelationshipType" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Property SignatureOriginRelationshipType As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static property System::String ^ SignatureOriginRelationshipType { System::String ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets the type of default signature origin relationship.</summary>
        <value>Тип связи источника подписи по умолчанию.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Signatures">
      <MemberSignature Language="C#" Value="public System.Collections.ObjectModel.ReadOnlyCollection&lt;System.IO.Packaging.PackageDigitalSignature&gt; Signatures { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Collections.ObjectModel.ReadOnlyCollection`1&lt;class System.IO.Packaging.PackageDigitalSignature&gt; Signatures" />
      <MemberSignature Language="DocId" Value="P:System.IO.Packaging.PackageDigitalSignatureManager.Signatures" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Signatures As ReadOnlyCollection(Of PackageDigitalSignature)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Collections::ObjectModel::ReadOnlyCollection&lt;System::IO::Packaging::PackageDigitalSignature ^&gt; ^ Signatures { System::Collections::ObjectModel::ReadOnlyCollection&lt;System::IO::Packaging::PackageDigitalSignature ^&gt; ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.ObjectModel.ReadOnlyCollection&lt;System.IO.Packaging.PackageDigitalSignature&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets a collection of all the signatures contained in the package.</summary>
        <value>Коллекция всех <see cref="T:System.IO.Packaging.PackageDigitalSignature" /> объектов.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="TimeFormat">
      <MemberSignature Language="C#" Value="public string TimeFormat { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string TimeFormat" />
      <MemberSignature Language="DocId" Value="P:System.IO.Packaging.PackageDigitalSignatureManager.TimeFormat" />
      <MemberSignature Language="VB.NET" Value="Public Property TimeFormat As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ TimeFormat { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets or sets the date/time format used to create a signature <see cref="P:System.IO.Packaging.PackageDigitalSignature.SigningTime" />.</summary>
        <value>Формат даты и времени, используемый для создания подписи <see cref="P:System.IO.Packaging.PackageDigitalSignature.SigningTime" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Значение по умолчанию <xref:System.IO.Packaging.PackageDigitalSignatureManager.TimeFormat%2A> является «Гггг-мм-DDThh:mm:ss.sTZD».  
  
 Дата и время форматы соответствуют синтаксису спецификации «W3C форматы даты и времени» по [ http://www.w3.org/TR/Note-datetime.html ](http://www.w3.org/TR/Note-datetime.html). Компоненты, приведенные ниже должен присутствовать и используйте синтаксис и знаки пунктуации, как определено.  
  
|TimeFormat|Описание|Пример|  
|----------------|-----------------|-------------|  
|ГГГГ|Year|2005|  
|ГГГГ ММ|Год и месяц|2005-07|  
|ГГГГ-ММ-ДД|Дата завершения|2005-07-28|  
|ГГГГ-мм-DDThh:mmTZD|Полная дата плюс часы и минуты|2005-07-28T19:20-01:00|  
|ГГГГ-мм-DDThh:mm:ssTZD|Полная дата плюс часы, минуты и секунды|2005-07-28T19:20:45-01:00|  
|ГГГГ мм DDThh:mm:ss.sTZD|Полная дата плюс часы, минуты и секунды с десятичной дробью|2005-07-28T19:20:45.75-01:00|  
  
 Здесь:  
  
|||  
|-|-|  
|ГГГГ|год из четырех цифр (например, 2005)|  
|ММ|двузначным месяцем (01 = январь)|  
|DD|двузначным днем месяца (от 01 до 31)|  
|Thh|час из двух цифр (от 00 до 23, 24-часовом формате)|  
|мм|двузначное число минут (00 – 59)|  
|ss|двузначное число секунд (00 – 59)|  
|s|один или несколько цифр, представляющих десятичной дроби доли секунды|  
|TZD|часовой пояс (Z или + чч: мм и - чч: мм)|  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.IO.Packaging.PackageDigitalSignature.SigningTime" />
      </Docs>
    </Member>
    <Member MemberName="TransformMapping">
      <MemberSignature Language="C#" Value="public System.Collections.Generic.Dictionary&lt;string,string&gt; TransformMapping { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Collections.Generic.Dictionary`2&lt;string, string&gt; TransformMapping" />
      <MemberSignature Language="DocId" Value="P:System.IO.Packaging.PackageDigitalSignatureManager.TransformMapping" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property TransformMapping As Dictionary(Of String, String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Collections::Generic::Dictionary&lt;System::String ^, System::String ^&gt; ^ TransformMapping { System::Collections::Generic::Dictionary&lt;System::String ^, System::String ^&gt; ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.Dictionary&lt;System.String,System.String&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets a dictionary that contains each defined <see cref="P:System.IO.Packaging.PackagePart.ContentType" /> and its associated [!INCLUDE[TLA#tla_xml](~/includes/tlasharptla-xml-md.md)] <see cref="T:System.Security.Cryptography.Xml.Transform" />.<see cref="P:System.Security.Cryptography.Xml.Transform.Algorithm" /> identifier.</summary>
        <value>Словарь, содержащий все определенные <see cref="P:System.IO.Packaging.PackagePart.ContentType" /> и связанный с ним [!INCLUDE[TLA#tla_xml](~/includes/tlasharptla-xml-md.md)] <see cref="T:System.Security.Cryptography.Xml.Transform" />.<see cref="P:System.Security.Cryptography.Xml.Transform.Algorithm" /> .</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Во время операции входа применяется алгоритм связанные преобразования для каждого типа содержимого перед <xref:System.IO.Packaging.PackageDigitalSignatureManager.HashAlgorithm%2A> выполняется.  
  
 Следующие сопоставления содержимого и преобразования по умолчанию.  
  
|Content|ContentType|Идентификатор алгоритма преобразования|  
|-------------|-----------------|------------------------------------|  
|Relationship|«application/vnd.openxmlformats-package.relationships+xml»|<xref:System.Security.Cryptography.Xml.SignedXml.XmlDsigC14NTransformUrl>|  
|Цифровая подпись|«application/vnd.openxmlformats-package.digital-signature-xmlsignature+xml»|<xref:System.Security.Cryptography.Xml.SignedXml.XmlDsigC14NTransformUrl>|  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="VerifyCertificate">
      <MemberSignature Language="C#" Value="public static System.Security.Cryptography.X509Certificates.X509ChainStatusFlags VerifyCertificate (System.Security.Cryptography.X509Certificates.X509Certificate certificate);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.Security.Cryptography.X509Certificates.X509ChainStatusFlags VerifyCertificate(class System.Security.Cryptography.X509Certificates.X509Certificate certificate) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IO.Packaging.PackageDigitalSignatureManager.VerifyCertificate(System.Security.Cryptography.X509Certificates.X509Certificate)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function VerifyCertificate (certificate As X509Certificate) As X509ChainStatusFlags" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Security::Cryptography::X509Certificates::X509ChainStatusFlags VerifyCertificate(System::Security::Cryptography::X509Certificates::X509Certificate ^ certificate);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Security.SecurityCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Security.Cryptography.X509Certificates.X509ChainStatusFlags</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="certificate" Type="System.Security.Cryptography.X509Certificates.X509Certificate" />
      </Parameters>
      <Docs>
        <param name="certificate">The X.509 certificate to verify.</param>
        <summary>Verifies a given X.509 certificate.</summary>
        <returns>
          <see cref="F:System.Security.Cryptography.X509Certificates.X509ChainStatusFlags.NoError" /> (value 0) if the certificate verified successfully; otherwise, a bitwise enumeration of error flags.</returns>
        <remarks>To be added.</remarks>
        <altmember cref="M:System.IO.Packaging.PackageDigitalSignatureManager.VerifySignatures(System.Boolean)" />
      </Docs>
    </Member>
    <Member MemberName="VerifySignatures">
      <MemberSignature Language="C#" Value="public System.IO.Packaging.VerifyResult VerifySignatures (bool exitOnFailure);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype System.IO.Packaging.VerifyResult VerifySignatures(bool exitOnFailure) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IO.Packaging.PackageDigitalSignatureManager.VerifySignatures(System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Function VerifySignatures (exitOnFailure As Boolean) As VerifyResult" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::IO::Packaging::VerifyResult VerifySignatures(bool exitOnFailure);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IO.Packaging.VerifyResult</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="exitOnFailure" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="exitOnFailure">
          <see langword="true" /> to exit on first failure; otherwise, <see langword="false" /> to continue and check all signatures.</param>
        <summary>Verifies the signatures on all signed parts within the package.</summary>
        <returns>
          <see cref="F:System.IO.Packaging.VerifyResult.Success" /> (value 0) if all signatures are verified successfully; otherwise, an enumeration that identifies the error.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Этот метод проверяет цифровые подписи; не выполняет проверку связанных сертификатов X.509.  <xref:System.IO.Packaging.PackageDigitalSignatureManager.VerifyCertificate%2A> Метод может использоваться для проверки сертификатов X.509.  
  
   
  
## Examples  
 В следующем примере показано применение этого метода для проверки всех подписанных частей в пакете.  Полный пример см. в разделе [создания пакета с помощью цифровой подписи образца](http://go.microsoft.com/fwlink/?LinkID=159966).  
  
 [!code-csharp[PackageDigitalSignature#PackageDigSigValidate](~/samples/snippets/csharp/VS_Snippets_Wpf/PackageDigitalSignature/CSharp/PackageDigitalSignature.cs#packagedigsigvalidate)]
 [!code-vb[PackageDigitalSignature#PackageDigSigValidate](~/samples/snippets/visualbasic/VS_Snippets_Wpf/PackageDigitalSignature/visualbasic/packagedigitalsignature.vb#packagedigsigvalidate)]  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.IO.Packaging.PackageDigitalSignatureManager.InvalidSignatureEvent" />
        <altmember cref="M:System.IO.Packaging.PackageDigitalSignatureManager.VerifyCertificate(System.Security.Cryptography.X509Certificates.X509Certificate)" />
        <altmember cref="T:System.IO.Packaging.InvalidSignatureEventHandler" />
      </Docs>
    </Member>
  </Members>
</Type>