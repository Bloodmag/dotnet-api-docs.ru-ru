<Type Name="Expression" FullName="System.Linq.Expressions.Expression">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="bfa7ae83c61b273e7c1b0bbd7bfaff643a4eeb76" />
    <Meta Name="ms.sourcegitcommit" Value="434f60616a9793fa8436744549fc856e94f7a648" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="ru-RU" />
    <Meta Name="ms.lasthandoff" Value="08/25/2018" />
    <Meta Name="ms.locfileid" Value="39913524" />
  </Metadata>
  <TypeSignature Language="C#" Value="public abstract class Expression" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi abstract beforefieldinit Expression extends System.Object" />
  <TypeSignature Language="DocId" Value="T:System.Linq.Expressions.Expression" />
  <TypeSignature Language="VB.NET" Value="Public MustInherit Class Expression" />
  <TypeSignature Language="C++ CLI" Value="public ref class Expression abstract" />
  <TypeSignature Language="F#" Value="type Expression = class" />
  <AssemblyInfo>
    <AssemblyName>System.Linq.Expressions</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.10.0</AssemblyVersion>
    <AssemblyVersion>4.1.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.1.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>System.Core</AssemblyName>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>3.5.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>
      <span data-ttu-id="fef91-101">Предоставляет базовый класс, производными от которого являются классы, представляющие узлы дерева выражения.</span>
      <span class="sxs-lookup">
        <span data-stu-id="fef91-101">Provides the base class from which the classes that represent expression tree nodes are derived.</span>
      </span>
      <span data-ttu-id="fef91-102">Также содержит методы фабрики <see langword="static" /> (<see langword="Shared" /> в Visual Basic) для создания различных типов узлов.</span>
      <span class="sxs-lookup">
        <span data-stu-id="fef91-102">It also contains <see langword="static" /> (<see langword="Shared" /> in Visual Basic) factory methods to create the various node types.</span>
      </span>
      <span data-ttu-id="fef91-103">Это класс <see langword="abstract" />.</span>
      <span class="sxs-lookup">
        <span data-stu-id="fef91-103">This is an <see langword="abstract" /> class.</span>
      </span>
    </summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Examples  
 <span data-ttu-id="fef91-104">В следующем примере кода показано, как создать выражение блока.</span><span class="sxs-lookup"><span data-stu-id="fef91-104">The following code example shows how to create a block expression.</span></span> <span data-ttu-id="fef91-105">Блокировать выражение состоит из двух <xref:System.Linq.Expressions.MethodCallExpression> объектов и второй <xref:System.Linq.Expressions.ConstantExpression> объекта.</span><span class="sxs-lookup"><span data-stu-id="fef91-105">The block expression consists of two <xref:System.Linq.Expressions.MethodCallExpression> objects and one <xref:System.Linq.Expressions.ConstantExpression> object.</span></span>  
  
 [!code-csharp[System.Linq.Expressions.ExpressionDev10#13](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.linq.expressions.expressiondev10/cs/program.cs#13)]
 [!code-vb[System.Linq.Expressions.ExpressionDev10#13](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.linq.expressions.expressiondev10/vb/module1.vb#13)]  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <MemberGroup MemberName=".ctor">
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="fef91-106">Создает новый экземпляр класса <see cref="T:System.Linq.Expressions.Expression" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fef91-106">Constructs a new instance of <see cref="T:System.Linq.Expressions.Expression" />.</span>
          </span>
        </summary>
      </Docs>
    </MemberGroup>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="protected Expression ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.#ctor" />
      <MemberSignature Language="VB.NET" Value="Protected Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; Expression();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="fef91-107">Создает новый экземпляр класса <see cref="T:System.Linq.Expressions.Expression" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fef91-107">Constructs a new instance of <see cref="T:System.Linq.Expressions.Expression" />.</span>
          </span>
        </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="protected Expression (System.Linq.Expressions.ExpressionType nodeType, Type type);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig specialname rtspecialname instance void .ctor(valuetype System.Linq.Expressions.ExpressionType nodeType, class System.Type type) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.#ctor(System.Linq.Expressions.ExpressionType,System.Type)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; Expression(System::Linq::Expressions::ExpressionType nodeType, Type ^ type);" />
      <MemberSignature Language="F#" Value="new System.Linq.Expressions.Expression : System.Linq.Expressions.ExpressionType * Type -&gt; System.Linq.Expressions.Expression" Usage="new System.Linq.Expressions.Expression (nodeType, type)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netcore-2.0;netcore-2.1;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0">
          <AttributeName>System.Obsolete("use a different constructor that does not take ExpressionType. Then override NodeType and Type properties to provide the values that would be specified to this constructor.")</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters>
        <Parameter Name="nodeType" Type="System.Linq.Expressions.ExpressionType" />
        <Parameter Name="type" Type="System.Type" />
      </Parameters>
      <Docs>
        <param name="nodeType">
          <span data-ttu-id="fef91-108">Значение <see cref="T:System.Linq.Expressions.ExpressionType" /> для установки в качестве типа узла.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fef91-108">The <see cref="T:System.Linq.Expressions.ExpressionType" /> to set as the node type.</span>
          </span>
        </param>
        <param name="type">
          <span data-ttu-id="fef91-109">
            <see cref="P:System.Linq.Expressions.Expression.Type" /> данного объекта <see cref="T:System.Linq.Expressions.Expression" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fef91-109">The <see cref="P:System.Linq.Expressions.Expression.Type" /> of this <see cref="T:System.Linq.Expressions.Expression" />.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="fef91-110">Инициализирует новый экземпляр класса <see cref="T:System.Linq.Expressions.Expression" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fef91-110">Initializes a new instance of the <see cref="T:System.Linq.Expressions.Expression" /> class.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="fef91-111">Этот конструктор вызывается из конструкторов в производных классах.</span><span class="sxs-lookup"><span data-stu-id="fef91-111">This constructor is called from constructors in derived classes.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Accept">
      <MemberSignature Language="C#" Value="protected internal virtual System.Linq.Expressions.Expression Accept (System.Linq.Expressions.ExpressionVisitor visitor);" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblyhidebysig newslot virtual instance class System.Linq.Expressions.Expression Accept(class System.Linq.Expressions.ExpressionVisitor visitor) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.Accept(System.Linq.Expressions.ExpressionVisitor)" />
      <MemberSignature Language="VB.NET" Value="Protected Friend Overridable Function Accept (visitor As ExpressionVisitor) As Expression" />
      <MemberSignature Language="C++ CLI" Value="protected public:&#xA; virtual System::Linq::Expressions::Expression ^ Accept(System::Linq::Expressions::ExpressionVisitor ^ visitor);" />
      <MemberSignature Language="F#" Value="abstract member Accept : System.Linq.Expressions.ExpressionVisitor -&gt; System.Linq.Expressions.Expression&#xA;override this.Accept : System.Linq.Expressions.ExpressionVisitor -&gt; System.Linq.Expressions.Expression" Usage="expression.Accept visitor" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.Expression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="visitor" Type="System.Linq.Expressions.ExpressionVisitor" />
      </Parameters>
      <Docs>
        <param name="visitor">
          <span data-ttu-id="fef91-112">Посетитель, с помощью которого выполняется посещение этого узла.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fef91-112">The visitor to visit this node with.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="fef91-113">Отправляет в конкретный метод Visit для данного типа узла.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fef91-113">Dispatches to the specific visit method for this node type.</span>
          </span>
          <span data-ttu-id="fef91-114">Например, объект <see cref="T:System.Linq.Expressions.MethodCallExpression" /> вызывает метод <see cref="M:System.Linq.Expressions.ExpressionVisitor.VisitMethodCall(System.Linq.Expressions.MethodCallExpression)" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fef91-114">For example, <see cref="T:System.Linq.Expressions.MethodCallExpression" /> calls the <see cref="M:System.Linq.Expressions.ExpressionVisitor.VisitMethodCall(System.Linq.Expressions.MethodCallExpression)" />.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="fef91-115">Результат посещения этого узла.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fef91-115">The result of visiting this node.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="fef91-116">Эта реализация по умолчанию для <xref:System.Linq.Expressions.ExpressionType.Extension> вызовы узлы <xref:System.Linq.Expressions.ExpressionVisitor.VisitExtension%2A>.</span><span class="sxs-lookup"><span data-stu-id="fef91-116">This default implementation for <xref:System.Linq.Expressions.ExpressionType.Extension> nodes calls <xref:System.Linq.Expressions.ExpressionVisitor.VisitExtension%2A>.</span></span> <span data-ttu-id="fef91-117">Переопределите этот метод для вызова более определенный метод в классе производном посетителя <xref:System.Linq.Expressions.ExpressionVisitor> класса.</span><span class="sxs-lookup"><span data-stu-id="fef91-117">Override this method to call into a more specific method on a derived visitor class of the <xref:System.Linq.Expressions.ExpressionVisitor> class.</span></span> <span data-ttu-id="fef91-118">Тем не менее, по-прежнему должен поддерживать Неизвестный посетителей путем вызова <xref:System.Linq.Expressions.ExpressionVisitor.VisitExtension%2A>.</span><span class="sxs-lookup"><span data-stu-id="fef91-118">However, it should still support unknown visitors by calling <xref:System.Linq.Expressions.ExpressionVisitor.VisitExtension%2A>.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="Add">
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="fef91-119">Создает объект <see cref="T:System.Linq.Expressions.BinaryExpression" />, представляющий операцию арифметического сложения, не содержащую проверку переполнения.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fef91-119">Creates a <see cref="T:System.Linq.Expressions.BinaryExpression" /> that represents an arithmetic addition operation that does not have overflow checking.</span>
          </span>
        </summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Add">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.BinaryExpression Add (System.Linq.Expressions.Expression left, System.Linq.Expressions.Expression right);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.BinaryExpression Add(class System.Linq.Expressions.Expression left, class System.Linq.Expressions.Expression right) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.Add(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Add (left As Expression, right As Expression) As BinaryExpression" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Linq::Expressions::BinaryExpression ^ Add(System::Linq::Expressions::Expression ^ left, System::Linq::Expressions::Expression ^ right);" />
      <MemberSignature Language="F#" Value="static member Add : System.Linq.Expressions.Expression * System.Linq.Expressions.Expression -&gt; System.Linq.Expressions.BinaryExpression" Usage="System.Linq.Expressions.Expression.Add (left, right)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.BinaryExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="left" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="right" Type="System.Linq.Expressions.Expression" />
      </Parameters>
      <Docs>
        <param name="left">
          <span data-ttu-id="fef91-120">Объект <see cref="T:System.Linq.Expressions.Expression" />, который следует задать в качестве значения свойства <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fef91-120">A <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> property equal to.</span>
          </span>
        </param>
        <param name="right">
          <span data-ttu-id="fef91-121">Объект <see cref="T:System.Linq.Expressions.Expression" />, который следует задать в качестве значения свойства <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fef91-121">A <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> property equal to.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="fef91-122">Создает объект <see cref="T:System.Linq.Expressions.BinaryExpression" />, представляющий операцию арифметического сложения, не содержащую проверку переполнения.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fef91-122">Creates a <see cref="T:System.Linq.Expressions.BinaryExpression" /> that represents an arithmetic addition operation that does not have overflow checking.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="fef91-123">Выражение <see cref="T:System.Linq.Expressions.BinaryExpression" /> со свойством<see cref="P:System.Linq.Expressions.Expression.NodeType" />, равным <see cref="F:System.Linq.Expressions.ExpressionType.Add" />, и свойствами <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> и <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />, для которых заданы указанные значения.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fef91-123">A <see cref="T:System.Linq.Expressions.BinaryExpression" /> that has the <see cref="P:System.Linq.Expressions.Expression.NodeType" /> property equal to <see cref="F:System.Linq.Expressions.ExpressionType.Add" /> and the <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> and <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> properties set to the specified values.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="fef91-124">Полученный в результате <xref:System.Linq.Expressions.BinaryExpression> имеет <xref:System.Linq.Expressions.BinaryExpression.Method%2A> свойство присвоено метод реализации.</span><span class="sxs-lookup"><span data-stu-id="fef91-124">The resulting <xref:System.Linq.Expressions.BinaryExpression> has the <xref:System.Linq.Expressions.BinaryExpression.Method%2A> property set to the implementing method.</span></span> <span data-ttu-id="fef91-125"><xref:System.Linq.Expressions.Expression.Type%2A> Свойству присваивается тип узла.</span><span class="sxs-lookup"><span data-stu-id="fef91-125">The <xref:System.Linq.Expressions.Expression.Type%2A> property is set to the type of the node.</span></span> <span data-ttu-id="fef91-126">Если узел удаляется, <xref:System.Linq.Expressions.BinaryExpression.IsLifted%2A> и <xref:System.Linq.Expressions.BinaryExpression.IsLiftedToNull%2A> оба являются свойства `true`.</span><span class="sxs-lookup"><span data-stu-id="fef91-126">If the node is lifted, the <xref:System.Linq.Expressions.BinaryExpression.IsLifted%2A> and <xref:System.Linq.Expressions.BinaryExpression.IsLiftedToNull%2A> properties are both `true`.</span></span> <span data-ttu-id="fef91-127">В противном случае они `false`.</span><span class="sxs-lookup"><span data-stu-id="fef91-127">Otherwise, they are `false`.</span></span> <span data-ttu-id="fef91-128">Значение свойства <xref:System.Linq.Expressions.BinaryExpression.Conversion%2A> — `null`.</span><span class="sxs-lookup"><span data-stu-id="fef91-128">The <xref:System.Linq.Expressions.BinaryExpression.Conversion%2A> property is `null`.</span></span>  
  
 <span data-ttu-id="fef91-129">Ниже описывается метод реализации, тип узла и ликвидирован ли данный узел.</span><span class="sxs-lookup"><span data-stu-id="fef91-129">The following information describes the implementing method, the node type, and whether a node is lifted.</span></span>  
  
#### <a name="implementing-method"></a><span data-ttu-id="fef91-130">Реализация метода</span><span class="sxs-lookup"><span data-stu-id="fef91-130">Implementing Method</span></span>  
 <span data-ttu-id="fef91-131">Следующие правила определяют выбранный метод реализации для операции:</span><span class="sxs-lookup"><span data-stu-id="fef91-131">The following rules determine the selected implementing method for the operation:</span></span>  
  
-   <span data-ttu-id="fef91-132">Если <xref:System.Linq.Expressions.Expression.Type%2A> свойству `left` или `right` представляет определяемый пользователем тип, который перегружает оператор сложения <xref:System.Reflection.MethodInfo> , представляющий, что метод является методом реализации.</span><span class="sxs-lookup"><span data-stu-id="fef91-132">If the <xref:System.Linq.Expressions.Expression.Type%2A> property of either `left` or `right` represents a user-defined type that overloads the addition operator, the <xref:System.Reflection.MethodInfo> that represents that method is the implementing method.</span></span>  
  
-   <span data-ttu-id="fef91-133">В противном случае, если `left`. Тип и `right`. Тип: числовые типы, метод реализации является `null`.</span><span class="sxs-lookup"><span data-stu-id="fef91-133">Otherwise, if `left`.Type and `right`.Type are numeric types, the implementing method is `null`.</span></span>  
  
#### <a name="node-type-and-lifted-versus-non-lifted"></a><span data-ttu-id="fef91-134">Тип узла с ликвидацией или без</span><span class="sxs-lookup"><span data-stu-id="fef91-134">Node Type and Lifted versus Non-Lifted</span></span>  
 <span data-ttu-id="fef91-135">Если метод реализации не `null`:</span><span class="sxs-lookup"><span data-stu-id="fef91-135">If the implementing method is not `null`:</span></span>  
  
-   <span data-ttu-id="fef91-136">Если `left`. Тип и `right`. Тип могут быть присвоены соответствующие типы аргументов метода реализации, узел не удаляется.</span><span class="sxs-lookup"><span data-stu-id="fef91-136">If `left`.Type and `right`.Type are assignable to the corresponding argument types of the implementing method, the node is not lifted.</span></span> <span data-ttu-id="fef91-137">Тип узла — тип возвращаемого значения метода реализации.</span><span class="sxs-lookup"><span data-stu-id="fef91-137">The type of the node is the return type of the implementing method.</span></span>  
  
-   <span data-ttu-id="fef91-138">Если выполняются два следующих условия, узел удаляется, а тип узла — обнуляемый тип, соответствующий тип возвращаемого значения метода реализации:</span><span class="sxs-lookup"><span data-stu-id="fef91-138">If the following two conditions are satisfied, the node is lifted and the type of the node is the nullable type that corresponds to the return type of the implementing method:</span></span>  
  
    -   <span data-ttu-id="fef91-139">`left`. Тип и `right`. Тип: обоих типов значений, из которых хотя бы один допускает значения NULL и соответствующие типы, не допускающие значения null равны соответствующие типы аргументов метода реализации.</span><span class="sxs-lookup"><span data-stu-id="fef91-139">`left`.Type and `right`.Type are both value types of which at least one is nullable and the corresponding non-nullable types are equal to the corresponding argument types of the implementing method.</span></span>  
  
    -   <span data-ttu-id="fef91-140">Тип возвращаемого значения метода реализации является типом значения, не допускающие значения NULL.</span><span class="sxs-lookup"><span data-stu-id="fef91-140">The return type of the implementing method is a non-nullable value type.</span></span>  
  
 <span data-ttu-id="fef91-141">Если метод реализации `null`:</span><span class="sxs-lookup"><span data-stu-id="fef91-141">If the implementing method is `null`:</span></span>  
  
-   <span data-ttu-id="fef91-142">Если `left`. Тип и `right`. Тип: оба не поддерживающими значение NULL, узел не удаляется.</span><span class="sxs-lookup"><span data-stu-id="fef91-142">If `left`.Type and `right`.Type are both non-nullable, the node is not lifted.</span></span> <span data-ttu-id="fef91-143">Тип узла является типом результата определенного оператора сложения.</span><span class="sxs-lookup"><span data-stu-id="fef91-143">The type of the node is the result type of the predefined addition operator.</span></span>  
  
-   <span data-ttu-id="fef91-144">Если `left`. Тип и `right`. Тип: значение NULL, узел удаляется.</span><span class="sxs-lookup"><span data-stu-id="fef91-144">If `left`.Type and `right`.Type are both nullable, the node is lifted.</span></span> <span data-ttu-id="fef91-145">Тип узла — обнуляемый тип, соответствующий тип результата определенного оператора сложения.</span><span class="sxs-lookup"><span data-stu-id="fef91-145">The type of the node is the nullable type that corresponds to the result type of the predefined addition operator.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="fef91-146">В следующем примере кода показано, как создать выражение, которое добавляет два целых числа.</span><span class="sxs-lookup"><span data-stu-id="fef91-146">The following code example shows how to create an expression that adds two integers.</span></span>  
  
 [!code-csharp[System.Linq.Expressions.ExpressionDev10#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.linq.expressions.expressiondev10/cs/program.cs#1)]
 [!code-vb[System.Linq.Expressions.ExpressionDev10#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.linq.expressions.expressiondev10/vb/module1.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="fef91-147">Значение параметра <paramref name="left" /> или <paramref name="right" /> — <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fef91-147">
              <paramref name="left" /> or <paramref name="right" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.InvalidOperationException">
          <span data-ttu-id="fef91-148">Оператор сложения не определен для типов <paramref name="left" />.Type и <paramref name="right" />.Type.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fef91-148">The addition operator is not defined for <paramref name="left" />.Type and <paramref name="right" />.Type.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="Add">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.BinaryExpression Add (System.Linq.Expressions.Expression left, System.Linq.Expressions.Expression right, System.Reflection.MethodInfo method);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.BinaryExpression Add(class System.Linq.Expressions.Expression left, class System.Linq.Expressions.Expression right, class System.Reflection.MethodInfo method) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.Add(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Add (left As Expression, right As Expression, method As MethodInfo) As BinaryExpression" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Linq::Expressions::BinaryExpression ^ Add(System::Linq::Expressions::Expression ^ left, System::Linq::Expressions::Expression ^ right, System::Reflection::MethodInfo ^ method);" />
      <MemberSignature Language="F#" Value="static member Add : System.Linq.Expressions.Expression * System.Linq.Expressions.Expression * System.Reflection.MethodInfo -&gt; System.Linq.Expressions.BinaryExpression" Usage="System.Linq.Expressions.Expression.Add (left, right, method)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.BinaryExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="left" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="right" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="method" Type="System.Reflection.MethodInfo" />
      </Parameters>
      <Docs>
        <param name="left">
          <span data-ttu-id="fef91-149">Объект <see cref="T:System.Linq.Expressions.Expression" />, который следует задать в качестве значения свойства <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fef91-149">A <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> property equal to.</span>
          </span>
        </param>
        <param name="right">
          <span data-ttu-id="fef91-150">Объект <see cref="T:System.Linq.Expressions.Expression" />, который следует задать в качестве значения свойства <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fef91-150">A <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> property equal to.</span>
          </span>
        </param>
        <param name="method">
          <span data-ttu-id="fef91-151">Объект <see cref="T:System.Reflection.MethodInfo" />, который следует задать в качестве значения свойства <see cref="P:System.Linq.Expressions.BinaryExpression.Method" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fef91-151">A <see cref="T:System.Reflection.MethodInfo" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Method" /> property equal to.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="fef91-152">Создает объект <see cref="T:System.Linq.Expressions.BinaryExpression" />, представляющий операцию арифметического сложения, не содержащую проверку переполнения.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fef91-152">Creates a <see cref="T:System.Linq.Expressions.BinaryExpression" /> that represents an arithmetic addition operation that does not have overflow checking.</span>
          </span>
          <span data-ttu-id="fef91-153">Может быть указан метод реализации.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fef91-153">The implementing method can be specified.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="fef91-154">Выражение <see cref="T:System.Linq.Expressions.BinaryExpression" /> со свойством <see cref="P:System.Linq.Expressions.Expression.NodeType" />, равным <see cref="F:System.Linq.Expressions.ExpressionType.Add" />, и свойствами <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />, <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> и <see cref="P:System.Linq.Expressions.BinaryExpression.Method" />, для которых заданы указанные значения.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fef91-154">A <see cref="T:System.Linq.Expressions.BinaryExpression" /> that has the <see cref="P:System.Linq.Expressions.Expression.NodeType" /> property equal to <see cref="F:System.Linq.Expressions.ExpressionType.Add" /> and the <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />, <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> and <see cref="P:System.Linq.Expressions.BinaryExpression.Method" /> properties set to the specified values.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="fef91-155">Полученный в результате <xref:System.Linq.Expressions.BinaryExpression> имеет <xref:System.Linq.Expressions.BinaryExpression.Method%2A> свойство присвоено метод реализации.</span><span class="sxs-lookup"><span data-stu-id="fef91-155">The resulting <xref:System.Linq.Expressions.BinaryExpression> has the <xref:System.Linq.Expressions.BinaryExpression.Method%2A> property set to the implementing method.</span></span> <span data-ttu-id="fef91-156"><xref:System.Linq.Expressions.Expression.Type%2A> Свойству присваивается тип узла.</span><span class="sxs-lookup"><span data-stu-id="fef91-156">The <xref:System.Linq.Expressions.Expression.Type%2A> property is set to the type of the node.</span></span> <span data-ttu-id="fef91-157">Если узел удаляется, <xref:System.Linq.Expressions.BinaryExpression.IsLifted%2A> и <xref:System.Linq.Expressions.BinaryExpression.IsLiftedToNull%2A> оба являются свойства `true`.</span><span class="sxs-lookup"><span data-stu-id="fef91-157">If the node is lifted, the <xref:System.Linq.Expressions.BinaryExpression.IsLifted%2A> and <xref:System.Linq.Expressions.BinaryExpression.IsLiftedToNull%2A> properties are both `true`.</span></span> <span data-ttu-id="fef91-158">В противном случае они `false`.</span><span class="sxs-lookup"><span data-stu-id="fef91-158">Otherwise, they are `false`.</span></span> <span data-ttu-id="fef91-159">Значение свойства <xref:System.Linq.Expressions.BinaryExpression.Conversion%2A> — `null`.</span><span class="sxs-lookup"><span data-stu-id="fef91-159">The <xref:System.Linq.Expressions.BinaryExpression.Conversion%2A> property is `null`.</span></span>  
  
 <span data-ttu-id="fef91-160">Ниже описывается метод реализации, тип узла и ликвидирован ли данный узел.</span><span class="sxs-lookup"><span data-stu-id="fef91-160">The following information describes the implementing method, the node type, and whether a node is lifted.</span></span>  
  
#### <a name="implementing-method"></a><span data-ttu-id="fef91-161">Реализация метода</span><span class="sxs-lookup"><span data-stu-id="fef91-161">Implementing Method</span></span>  
 <span data-ttu-id="fef91-162">Следующие правила определяют метод реализации для операции:</span><span class="sxs-lookup"><span data-stu-id="fef91-162">The following rules determine the implementing method for the operation:</span></span>  
  
-   <span data-ttu-id="fef91-163">Если `method` не `null` , и это отличный от void, `static` (`Shared` в Visual Basic) метода, принимающего два аргумента, это метод реализации для узла.</span><span class="sxs-lookup"><span data-stu-id="fef91-163">If `method` is not `null` and it represents a non-void, `static` (`Shared` in Visual Basic) method that takes two arguments, it is the implementing method for the node.</span></span>  
  
-   <span data-ttu-id="fef91-164">В противном случае, если <xref:System.Linq.Expressions.Expression.Type%2A> свойству `left` или `right` представляет определяемый пользователем тип, который перегружает оператор сложения <xref:System.Reflection.MethodInfo> , представляющий, что метод является методом реализации.</span><span class="sxs-lookup"><span data-stu-id="fef91-164">Otherwise, if the <xref:System.Linq.Expressions.Expression.Type%2A> property of either `left` or `right` represents a user-defined type that overloads the addition operator, the <xref:System.Reflection.MethodInfo> that represents that method is the implementing method.</span></span>  
  
-   <span data-ttu-id="fef91-165">В противном случае, если `left`. Тип и `right`. Тип: числовые типы, метод реализации является `null`.</span><span class="sxs-lookup"><span data-stu-id="fef91-165">Otherwise, if `left`.Type and `right`.Type are numeric types, the implementing method is `null`.</span></span>  
  
#### <a name="node-type-and-lifted-versus-non-lifted"></a><span data-ttu-id="fef91-166">Тип узла с ликвидацией или без</span><span class="sxs-lookup"><span data-stu-id="fef91-166">Node Type and Lifted versus Non-Lifted</span></span>  
 <span data-ttu-id="fef91-167">Если метод реализации не `null`:</span><span class="sxs-lookup"><span data-stu-id="fef91-167">If the implementing method is not `null`:</span></span>  
  
-   <span data-ttu-id="fef91-168">Если `left`. Тип и `right`. Тип могут быть присвоены соответствующие типы аргументов метода реализации, узел не удаляется.</span><span class="sxs-lookup"><span data-stu-id="fef91-168">If `left`.Type and `right`.Type are assignable to the corresponding argument types of the implementing method, the node is not lifted.</span></span> <span data-ttu-id="fef91-169">Тип узла — тип возвращаемого значения метода реализации.</span><span class="sxs-lookup"><span data-stu-id="fef91-169">The type of the node is the return type of the implementing method.</span></span>  
  
-   <span data-ttu-id="fef91-170">Если выполняются два следующих условия, узел удаляется, а тип узла — обнуляемый тип, соответствующий тип возвращаемого значения метода реализации:</span><span class="sxs-lookup"><span data-stu-id="fef91-170">If the following two conditions are satisfied, the node is lifted and the type of the node is the nullable type that corresponds to the return type of the implementing method:</span></span>  
  
    -   <span data-ttu-id="fef91-171">`left`. Тип и `right`. Тип: обоих типов значений, из которых хотя бы один допускает значения NULL и соответствующие типы, не допускающие значения null равны соответствующие типы аргументов метода реализации.</span><span class="sxs-lookup"><span data-stu-id="fef91-171">`left`.Type and `right`.Type are both value types of which at least one is nullable and the corresponding non-nullable types are equal to the corresponding argument types of the implementing method.</span></span>  
  
    -   <span data-ttu-id="fef91-172">Тип возвращаемого значения метода реализации является типом значения, не допускающие значения NULL.</span><span class="sxs-lookup"><span data-stu-id="fef91-172">The return type of the implementing method is a non-nullable value type.</span></span>  
  
 <span data-ttu-id="fef91-173">Если метод реализации `null`:</span><span class="sxs-lookup"><span data-stu-id="fef91-173">If the implementing method is `null`:</span></span>  
  
-   <span data-ttu-id="fef91-174">Если `left`. Тип и `right`. Тип: оба не поддерживающими значение NULL, узел не удаляется.</span><span class="sxs-lookup"><span data-stu-id="fef91-174">If `left`.Type and `right`.Type are both non-nullable, the node is not lifted.</span></span> <span data-ttu-id="fef91-175">Тип узла является типом результата определенного оператора сложения.</span><span class="sxs-lookup"><span data-stu-id="fef91-175">The type of the node is the result type of the predefined addition operator.</span></span>  
  
-   <span data-ttu-id="fef91-176">Если `left`. Тип и `right`. Тип: значение NULL, узел удаляется.</span><span class="sxs-lookup"><span data-stu-id="fef91-176">If `left`.Type and `right`.Type are both nullable, the node is lifted.</span></span> <span data-ttu-id="fef91-177">Тип узла — обнуляемый тип, соответствующий тип результата определенного оператора сложения.</span><span class="sxs-lookup"><span data-stu-id="fef91-177">The type of the node is the nullable type that corresponds to the result type of the predefined addition operator.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="fef91-178">Значение параметра <paramref name="left" /> или <paramref name="right" /> — <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fef91-178">
              <paramref name="left" /> or <paramref name="right" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="fef91-179">Значение параметра <paramref name="method" /> не равно <see langword="null" />, и метод, который оно представляет, возвращает <see langword="void" />, не является <see langword="static" /> (<see langword="Shared" /> в Visual Basic) и не принимает ровно два аргумента.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fef91-179">
              <paramref name="method" /> is not <see langword="null" /> and the method it represents returns <see langword="void" />, is not <see langword="static" /> (<see langword="Shared" /> in Visual Basic), or does not take exactly two arguments.</span>
          </span>
        </exception>
        <exception cref="T:System.InvalidOperationException">
          <span data-ttu-id="fef91-180">
            <paramref name="method" /> равен <see langword="null" />, и оператор сложения не определен для типов <paramref name="left" />.Type и <paramref name="right" />.Type.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fef91-180">
              <paramref name="method" /> is <see langword="null" /> and the addition operator is not defined for <paramref name="left" />.Type and <paramref name="right" />.Type.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <MemberGroup MemberName="AddAssign">
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="fef91-181">Создает объект <see cref="T:System.Linq.Expressions.BinaryExpression" />, представляющий операцию присваивания сложения, не содержащую проверку переполнения.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fef91-181">Creates a <see cref="T:System.Linq.Expressions.BinaryExpression" /> that represents an addition assignment operation that does not have overflow checking.</span>
          </span>
        </summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="AddAssign">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.BinaryExpression AddAssign (System.Linq.Expressions.Expression left, System.Linq.Expressions.Expression right);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.BinaryExpression AddAssign(class System.Linq.Expressions.Expression left, class System.Linq.Expressions.Expression right) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.AddAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function AddAssign (left As Expression, right As Expression) As BinaryExpression" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Linq::Expressions::BinaryExpression ^ AddAssign(System::Linq::Expressions::Expression ^ left, System::Linq::Expressions::Expression ^ right);" />
      <MemberSignature Language="F#" Value="static member AddAssign : System.Linq.Expressions.Expression * System.Linq.Expressions.Expression -&gt; System.Linq.Expressions.BinaryExpression" Usage="System.Linq.Expressions.Expression.AddAssign (left, right)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.BinaryExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="left" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="right" Type="System.Linq.Expressions.Expression" />
      </Parameters>
      <Docs>
        <param name="left">
          <span data-ttu-id="fef91-182">Объект <see cref="T:System.Linq.Expressions.Expression" />, который следует задать в качестве значения свойства <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fef91-182">An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> property equal to.</span>
          </span>
        </param>
        <param name="right">
          <span data-ttu-id="fef91-183">Объект <see cref="T:System.Linq.Expressions.Expression" />, который следует задать в качестве значения свойства <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fef91-183">An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> property equal to.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="fef91-184">Создает объект <see cref="T:System.Linq.Expressions.BinaryExpression" />, представляющий операцию присваивания сложения, не содержащую проверку переполнения.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fef91-184">Creates a <see cref="T:System.Linq.Expressions.BinaryExpression" /> that represents an addition assignment operation that does not have overflow checking.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="fef91-185">Выражение <see cref="T:System.Linq.Expressions.BinaryExpression" /> со свойством<see cref="P:System.Linq.Expressions.Expression.NodeType" />, равным <see cref="F:System.Linq.Expressions.ExpressionType.AddAssign" />, и свойствами <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> и <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />, для которых заданы указанные значения.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fef91-185">A <see cref="T:System.Linq.Expressions.BinaryExpression" /> that has the <see cref="P:System.Linq.Expressions.Expression.NodeType" /> property equal to <see cref="F:System.Linq.Expressions.ExpressionType.AddAssign" /> and the <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> and <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> properties set to the specified values.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 <span data-ttu-id="fef91-186">В следующем примере кода показано, как создать выражение, которое добавляет значение к целочисленной переменной, а затем присваивает переменной результат операции.</span><span class="sxs-lookup"><span data-stu-id="fef91-186">The following code example shows how to create an expression that adds a value to an integer variable and then assigns the result of the operation to the variable.</span></span>  
  
 [!code-csharp[System.Linq.Expressions.ExpressionDev10#18](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.linq.expressions.expressiondev10/cs/program.cs#18)]
 [!code-vb[System.Linq.Expressions.ExpressionDev10#18](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.linq.expressions.expressiondev10/vb/module1.vb#18)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="AddAssign">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.BinaryExpression AddAssign (System.Linq.Expressions.Expression left, System.Linq.Expressions.Expression right, System.Reflection.MethodInfo method);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.BinaryExpression AddAssign(class System.Linq.Expressions.Expression left, class System.Linq.Expressions.Expression right, class System.Reflection.MethodInfo method) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.AddAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function AddAssign (left As Expression, right As Expression, method As MethodInfo) As BinaryExpression" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Linq::Expressions::BinaryExpression ^ AddAssign(System::Linq::Expressions::Expression ^ left, System::Linq::Expressions::Expression ^ right, System::Reflection::MethodInfo ^ method);" />
      <MemberSignature Language="F#" Value="static member AddAssign : System.Linq.Expressions.Expression * System.Linq.Expressions.Expression * System.Reflection.MethodInfo -&gt; System.Linq.Expressions.BinaryExpression" Usage="System.Linq.Expressions.Expression.AddAssign (left, right, method)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.BinaryExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="left" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="right" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="method" Type="System.Reflection.MethodInfo" />
      </Parameters>
      <Docs>
        <param name="left">
          <span data-ttu-id="fef91-187">Объект <see cref="T:System.Linq.Expressions.Expression" />, который следует задать в качестве значения свойства <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fef91-187">An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> property equal to.</span>
          </span>
        </param>
        <param name="right">
          <span data-ttu-id="fef91-188">Объект <see cref="T:System.Linq.Expressions.Expression" />, который следует задать в качестве значения свойства <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fef91-188">An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> property equal to.</span>
          </span>
        </param>
        <param name="method">
          <span data-ttu-id="fef91-189">Объект <see cref="T:System.Reflection.MethodInfo" />, который следует задать в качестве значения свойства <see cref="P:System.Linq.Expressions.BinaryExpression.Method" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fef91-189">A <see cref="T:System.Reflection.MethodInfo" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Method" /> property equal to.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="fef91-190">Создает объект <see cref="T:System.Linq.Expressions.BinaryExpression" />, представляющий операцию присваивания сложения, не содержащую проверку переполнения.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fef91-190">Creates a <see cref="T:System.Linq.Expressions.BinaryExpression" /> that represents an addition assignment operation that does not have overflow checking.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="fef91-191">Выражение <see cref="T:System.Linq.Expressions.BinaryExpression" /> со свойством <see cref="P:System.Linq.Expressions.Expression.NodeType" />, равным <see cref="F:System.Linq.Expressions.ExpressionType.AddAssign" />, и свойствами <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />, <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> и <see cref="P:System.Linq.Expressions.BinaryExpression.Method" />, для которых заданы указанные значения.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fef91-191">A <see cref="T:System.Linq.Expressions.BinaryExpression" /> that has the <see cref="P:System.Linq.Expressions.Expression.NodeType" /> property equal to <see cref="F:System.Linq.Expressions.ExpressionType.AddAssign" /> and the <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />, <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />, and <see cref="P:System.Linq.Expressions.BinaryExpression.Method" /> properties set to the specified values.</span>
          </span>
        </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="AddAssign">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.BinaryExpression AddAssign (System.Linq.Expressions.Expression left, System.Linq.Expressions.Expression right, System.Reflection.MethodInfo method, System.Linq.Expressions.LambdaExpression conversion);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.BinaryExpression AddAssign(class System.Linq.Expressions.Expression left, class System.Linq.Expressions.Expression right, class System.Reflection.MethodInfo method, class System.Linq.Expressions.LambdaExpression conversion) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.AddAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo,System.Linq.Expressions.LambdaExpression)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function AddAssign (left As Expression, right As Expression, method As MethodInfo, conversion As LambdaExpression) As BinaryExpression" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Linq::Expressions::BinaryExpression ^ AddAssign(System::Linq::Expressions::Expression ^ left, System::Linq::Expressions::Expression ^ right, System::Reflection::MethodInfo ^ method, System::Linq::Expressions::LambdaExpression ^ conversion);" />
      <MemberSignature Language="F#" Value="static member AddAssign : System.Linq.Expressions.Expression * System.Linq.Expressions.Expression * System.Reflection.MethodInfo * System.Linq.Expressions.LambdaExpression -&gt; System.Linq.Expressions.BinaryExpression" Usage="System.Linq.Expressions.Expression.AddAssign (left, right, method, conversion)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.BinaryExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="left" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="right" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="method" Type="System.Reflection.MethodInfo" />
        <Parameter Name="conversion" Type="System.Linq.Expressions.LambdaExpression" />
      </Parameters>
      <Docs>
        <param name="left">
          <span data-ttu-id="fef91-192">Объект <see cref="T:System.Linq.Expressions.Expression" />, который следует задать в качестве значения свойства <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fef91-192">An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> property equal to.</span>
          </span>
        </param>
        <param name="right">
          <span data-ttu-id="fef91-193">Объект <see cref="T:System.Linq.Expressions.Expression" />, который следует задать в качестве значения свойства <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fef91-193">An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> property equal to.</span>
          </span>
        </param>
        <param name="method">
          <span data-ttu-id="fef91-194">Объект <see cref="T:System.Reflection.MethodInfo" />, который следует задать в качестве значения свойства <see cref="P:System.Linq.Expressions.BinaryExpression.Method" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fef91-194">A <see cref="T:System.Reflection.MethodInfo" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Method" /> property equal to.</span>
          </span>
        </param>
        <param name="conversion">
          <span data-ttu-id="fef91-195">Объект <see cref="T:System.Linq.Expressions.LambdaExpression" />, который следует задать в качестве значения свойства <see cref="P:System.Linq.Expressions.BinaryExpression.Conversion" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fef91-195">A <see cref="T:System.Linq.Expressions.LambdaExpression" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Conversion" /> property equal to.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="fef91-196">Создает объект <see cref="T:System.Linq.Expressions.BinaryExpression" />, представляющий операцию присваивания сложения, не содержащую проверку переполнения.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fef91-196">Creates a <see cref="T:System.Linq.Expressions.BinaryExpression" /> that represents an addition assignment operation that does not have overflow checking.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="fef91-197">Выражение <see cref="T:System.Linq.Expressions.BinaryExpression" />, содержащее свойство <see cref="P:System.Linq.Expressions.Expression.NodeType" />, равное <see cref="F:System.Linq.Expressions.ExpressionType.AddAssign" /> и <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />, <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />, <see cref="P:System.Linq.Expressions.BinaryExpression.Method" />, и свойства <see cref="P:System.Linq.Expressions.BinaryExpression.Conversion" />, для которых заданы указанные значения.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fef91-197">A <see cref="T:System.Linq.Expressions.BinaryExpression" /> that has the <see cref="P:System.Linq.Expressions.Expression.NodeType" /> property equal to <see cref="F:System.Linq.Expressions.ExpressionType.AddAssign" /> and the <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />, <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />, <see cref="P:System.Linq.Expressions.BinaryExpression.Method" />, and <see cref="P:System.Linq.Expressions.BinaryExpression.Conversion" /> properties set to the specified values.</span>
          </span>
        </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="AddAssignChecked">
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="fef91-198">Создает объект <see cref="T:System.Linq.Expressions.BinaryExpression" />, представляющий операцию присваивания сложения, содержащую проверку переполнения.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fef91-198">Creates a <see cref="T:System.Linq.Expressions.BinaryExpression" /> that represents an addition assignment operation that has overflow checking.</span>
          </span>
        </summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="AddAssignChecked">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.BinaryExpression AddAssignChecked (System.Linq.Expressions.Expression left, System.Linq.Expressions.Expression right);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.BinaryExpression AddAssignChecked(class System.Linq.Expressions.Expression left, class System.Linq.Expressions.Expression right) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.AddAssignChecked(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function AddAssignChecked (left As Expression, right As Expression) As BinaryExpression" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Linq::Expressions::BinaryExpression ^ AddAssignChecked(System::Linq::Expressions::Expression ^ left, System::Linq::Expressions::Expression ^ right);" />
      <MemberSignature Language="F#" Value="static member AddAssignChecked : System.Linq.Expressions.Expression * System.Linq.Expressions.Expression -&gt; System.Linq.Expressions.BinaryExpression" Usage="System.Linq.Expressions.Expression.AddAssignChecked (left, right)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.BinaryExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="left" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="right" Type="System.Linq.Expressions.Expression" />
      </Parameters>
      <Docs>
        <param name="left">
          <span data-ttu-id="fef91-199">Объект <see cref="T:System.Linq.Expressions.Expression" />, который следует задать в качестве значения свойства <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fef91-199">An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> property equal to.</span>
          </span>
        </param>
        <param name="right">
          <span data-ttu-id="fef91-200">Объект <see cref="T:System.Linq.Expressions.Expression" />, который следует задать в качестве значения свойства <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fef91-200">An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> property equal to.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="fef91-201">Создает объект <see cref="T:System.Linq.Expressions.BinaryExpression" />, представляющий операцию присваивания сложения, содержащую проверку переполнения.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fef91-201">Creates a <see cref="T:System.Linq.Expressions.BinaryExpression" /> that represents an addition assignment operation that has overflow checking.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="fef91-202">Выражение <see cref="T:System.Linq.Expressions.BinaryExpression" /> со свойством<see cref="P:System.Linq.Expressions.Expression.NodeType" />, равным <see cref="F:System.Linq.Expressions.ExpressionType.AddAssignChecked" />, и свойствами <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> и <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />, для которых заданы указанные значения.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fef91-202">A <see cref="T:System.Linq.Expressions.BinaryExpression" /> that has the <see cref="P:System.Linq.Expressions.Expression.NodeType" /> property equal to <see cref="F:System.Linq.Expressions.ExpressionType.AddAssignChecked" /> and the <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> and <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> properties set to the specified values.</span>
          </span>
        </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="AddAssignChecked">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.BinaryExpression AddAssignChecked (System.Linq.Expressions.Expression left, System.Linq.Expressions.Expression right, System.Reflection.MethodInfo method);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.BinaryExpression AddAssignChecked(class System.Linq.Expressions.Expression left, class System.Linq.Expressions.Expression right, class System.Reflection.MethodInfo method) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.AddAssignChecked(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function AddAssignChecked (left As Expression, right As Expression, method As MethodInfo) As BinaryExpression" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Linq::Expressions::BinaryExpression ^ AddAssignChecked(System::Linq::Expressions::Expression ^ left, System::Linq::Expressions::Expression ^ right, System::Reflection::MethodInfo ^ method);" />
      <MemberSignature Language="F#" Value="static member AddAssignChecked : System.Linq.Expressions.Expression * System.Linq.Expressions.Expression * System.Reflection.MethodInfo -&gt; System.Linq.Expressions.BinaryExpression" Usage="System.Linq.Expressions.Expression.AddAssignChecked (left, right, method)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.BinaryExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="left" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="right" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="method" Type="System.Reflection.MethodInfo" />
      </Parameters>
      <Docs>
        <param name="left">
          <span data-ttu-id="fef91-203">Объект <see cref="T:System.Linq.Expressions.Expression" />, который следует задать в качестве значения свойства <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fef91-203">An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> property equal to.</span>
          </span>
        </param>
        <param name="right">
          <span data-ttu-id="fef91-204">Объект <see cref="T:System.Linq.Expressions.Expression" />, который следует задать в качестве значения свойства <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fef91-204">An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> property equal to.</span>
          </span>
        </param>
        <param name="method">
          <span data-ttu-id="fef91-205">Объект <see cref="T:System.Reflection.MethodInfo" />, который следует задать в качестве значения свойства <see cref="P:System.Linq.Expressions.BinaryExpression.Method" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fef91-205">A <see cref="T:System.Reflection.MethodInfo" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Method" /> property equal to.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="fef91-206">Создает объект <see cref="T:System.Linq.Expressions.BinaryExpression" />, представляющий операцию присваивания сложения, содержащую проверку переполнения.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fef91-206">Creates a <see cref="T:System.Linq.Expressions.BinaryExpression" /> that represents an addition assignment operation that has overflow checking.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="fef91-207">Выражение <see cref="T:System.Linq.Expressions.BinaryExpression" /> со свойством <see cref="P:System.Linq.Expressions.Expression.NodeType" />, равным <see cref="F:System.Linq.Expressions.ExpressionType.AddAssignChecked" />, и свойствами <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />, <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> и <see cref="P:System.Linq.Expressions.BinaryExpression.Method" />, для которых заданы указанные значения.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fef91-207">A <see cref="T:System.Linq.Expressions.BinaryExpression" /> that has the <see cref="P:System.Linq.Expressions.Expression.NodeType" /> property equal to <see cref="F:System.Linq.Expressions.ExpressionType.AddAssignChecked" /> and the <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />, <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />, and <see cref="P:System.Linq.Expressions.BinaryExpression.Method" /> properties set to the specified values.</span>
          </span>
        </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="AddAssignChecked">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.BinaryExpression AddAssignChecked (System.Linq.Expressions.Expression left, System.Linq.Expressions.Expression right, System.Reflection.MethodInfo method, System.Linq.Expressions.LambdaExpression conversion);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.BinaryExpression AddAssignChecked(class System.Linq.Expressions.Expression left, class System.Linq.Expressions.Expression right, class System.Reflection.MethodInfo method, class System.Linq.Expressions.LambdaExpression conversion) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.AddAssignChecked(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo,System.Linq.Expressions.LambdaExpression)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function AddAssignChecked (left As Expression, right As Expression, method As MethodInfo, conversion As LambdaExpression) As BinaryExpression" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Linq::Expressions::BinaryExpression ^ AddAssignChecked(System::Linq::Expressions::Expression ^ left, System::Linq::Expressions::Expression ^ right, System::Reflection::MethodInfo ^ method, System::Linq::Expressions::LambdaExpression ^ conversion);" />
      <MemberSignature Language="F#" Value="static member AddAssignChecked : System.Linq.Expressions.Expression * System.Linq.Expressions.Expression * System.Reflection.MethodInfo * System.Linq.Expressions.LambdaExpression -&gt; System.Linq.Expressions.BinaryExpression" Usage="System.Linq.Expressions.Expression.AddAssignChecked (left, right, method, conversion)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.BinaryExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="left" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="right" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="method" Type="System.Reflection.MethodInfo" />
        <Parameter Name="conversion" Type="System.Linq.Expressions.LambdaExpression" />
      </Parameters>
      <Docs>
        <param name="left">
          <span data-ttu-id="fef91-208">Объект <see cref="T:System.Linq.Expressions.Expression" />, который следует задать в качестве значения свойства <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fef91-208">An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> property equal to.</span>
          </span>
        </param>
        <param name="right">
          <span data-ttu-id="fef91-209">Объект <see cref="T:System.Linq.Expressions.Expression" />, который следует задать в качестве значения свойства <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fef91-209">An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> property equal to.</span>
          </span>
        </param>
        <param name="method">
          <span data-ttu-id="fef91-210">Объект <see cref="T:System.Reflection.MethodInfo" />, который следует задать в качестве значения свойства <see cref="P:System.Linq.Expressions.BinaryExpression.Method" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fef91-210">A <see cref="T:System.Reflection.MethodInfo" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Method" /> property equal to.</span>
          </span>
        </param>
        <param name="conversion">
          <span data-ttu-id="fef91-211">Объект <see cref="T:System.Linq.Expressions.LambdaExpression" />, который следует задать в качестве значения свойства <see cref="P:System.Linq.Expressions.BinaryExpression.Conversion" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fef91-211">A <see cref="T:System.Linq.Expressions.LambdaExpression" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Conversion" /> property equal to.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="fef91-212">Создает объект <see cref="T:System.Linq.Expressions.BinaryExpression" />, представляющий операцию присваивания сложения, содержащую проверку переполнения.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fef91-212">Creates a <see cref="T:System.Linq.Expressions.BinaryExpression" /> that represents an addition assignment operation that has overflow checking.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="fef91-213">Выражение <see cref="T:System.Linq.Expressions.BinaryExpression" />, содержащее свойство <see cref="P:System.Linq.Expressions.Expression.NodeType" />, равное <see cref="F:System.Linq.Expressions.ExpressionType.AddAssignChecked" /> и <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />, <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />, <see cref="P:System.Linq.Expressions.BinaryExpression.Method" />, и свойства <see cref="P:System.Linq.Expressions.BinaryExpression.Conversion" />, для которых заданы указанные значения.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fef91-213">A <see cref="T:System.Linq.Expressions.BinaryExpression" /> that has the <see cref="P:System.Linq.Expressions.Expression.NodeType" /> property equal to <see cref="F:System.Linq.Expressions.ExpressionType.AddAssignChecked" /> and the <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />, <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />, <see cref="P:System.Linq.Expressions.BinaryExpression.Method" />, and <see cref="P:System.Linq.Expressions.BinaryExpression.Conversion" /> properties set to the specified values.</span>
          </span>
        </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="AddChecked">
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="fef91-214">Создает <see cref="T:System.Linq.Expressions.BinaryExpression" />, представляющий операцию арифметического сложения, содержащую проверку переполнения.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fef91-214">Creates a <see cref="T:System.Linq.Expressions.BinaryExpression" /> that represents an arithmetic addition operation that has overflow checking.</span>
          </span>
        </summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="AddChecked">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.BinaryExpression AddChecked (System.Linq.Expressions.Expression left, System.Linq.Expressions.Expression right);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.BinaryExpression AddChecked(class System.Linq.Expressions.Expression left, class System.Linq.Expressions.Expression right) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.AddChecked(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function AddChecked (left As Expression, right As Expression) As BinaryExpression" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Linq::Expressions::BinaryExpression ^ AddChecked(System::Linq::Expressions::Expression ^ left, System::Linq::Expressions::Expression ^ right);" />
      <MemberSignature Language="F#" Value="static member AddChecked : System.Linq.Expressions.Expression * System.Linq.Expressions.Expression -&gt; System.Linq.Expressions.BinaryExpression" Usage="System.Linq.Expressions.Expression.AddChecked (left, right)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.BinaryExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="left" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="right" Type="System.Linq.Expressions.Expression" />
      </Parameters>
      <Docs>
        <param name="left">
          <span data-ttu-id="fef91-215">Объект <see cref="T:System.Linq.Expressions.Expression" />, который следует задать в качестве значения свойства <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fef91-215">A <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> property equal to.</span>
          </span>
        </param>
        <param name="right">
          <span data-ttu-id="fef91-216">Объект <see cref="T:System.Linq.Expressions.Expression" />, который следует задать в качестве значения свойства <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fef91-216">A <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> property equal to.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="fef91-217">Создает <see cref="T:System.Linq.Expressions.BinaryExpression" />, представляющий операцию арифметического сложения, содержащую проверку переполнения.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fef91-217">Creates a <see cref="T:System.Linq.Expressions.BinaryExpression" /> that represents an arithmetic addition operation that has overflow checking.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="fef91-218">Выражение <see cref="T:System.Linq.Expressions.BinaryExpression" /> со свойством<see cref="P:System.Linq.Expressions.Expression.NodeType" />, равным <see cref="F:System.Linq.Expressions.ExpressionType.AddChecked" />, и свойствами <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> и <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />, для которых заданы указанные значения.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fef91-218">A <see cref="T:System.Linq.Expressions.BinaryExpression" /> that has the <see cref="P:System.Linq.Expressions.Expression.NodeType" /> property equal to <see cref="F:System.Linq.Expressions.ExpressionType.AddChecked" /> and the <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> and <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> properties set to the specified values.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="fef91-219">Полученный в результате <xref:System.Linq.Expressions.BinaryExpression> имеет <xref:System.Linq.Expressions.BinaryExpression.Method%2A> свойство присвоено метод реализации.</span><span class="sxs-lookup"><span data-stu-id="fef91-219">The resulting <xref:System.Linq.Expressions.BinaryExpression> has the <xref:System.Linq.Expressions.BinaryExpression.Method%2A> property set to the implementing method.</span></span> <span data-ttu-id="fef91-220"><xref:System.Linq.Expressions.Expression.Type%2A> Свойству присваивается тип узла.</span><span class="sxs-lookup"><span data-stu-id="fef91-220">The <xref:System.Linq.Expressions.Expression.Type%2A> property is set to the type of the node.</span></span> <span data-ttu-id="fef91-221">Если узел удаляется, <xref:System.Linq.Expressions.BinaryExpression.IsLifted%2A> и <xref:System.Linq.Expressions.BinaryExpression.IsLiftedToNull%2A> оба являются свойства `true`.</span><span class="sxs-lookup"><span data-stu-id="fef91-221">If the node is lifted, the <xref:System.Linq.Expressions.BinaryExpression.IsLifted%2A> and <xref:System.Linq.Expressions.BinaryExpression.IsLiftedToNull%2A> properties are both `true`.</span></span> <span data-ttu-id="fef91-222">В противном случае они `false`.</span><span class="sxs-lookup"><span data-stu-id="fef91-222">Otherwise, they are `false`.</span></span> <span data-ttu-id="fef91-223">Значение свойства <xref:System.Linq.Expressions.BinaryExpression.Conversion%2A> — `null`.</span><span class="sxs-lookup"><span data-stu-id="fef91-223">The <xref:System.Linq.Expressions.BinaryExpression.Conversion%2A> property is `null`.</span></span>  
  
 <span data-ttu-id="fef91-224">Ниже описывается метод реализации, тип узла и ликвидирован ли данный узел.</span><span class="sxs-lookup"><span data-stu-id="fef91-224">The following information describes the implementing method, the node type, and whether a node is lifted.</span></span>  
  
#### <a name="implementing-method"></a><span data-ttu-id="fef91-225">Реализация метода</span><span class="sxs-lookup"><span data-stu-id="fef91-225">Implementing Method</span></span>  
 <span data-ttu-id="fef91-226">Следующие правила определяют метод реализации для операции:</span><span class="sxs-lookup"><span data-stu-id="fef91-226">The following rules determine the implementing method for the operation:</span></span>  
  
-   <span data-ttu-id="fef91-227">Если <xref:System.Linq.Expressions.Expression.Type%2A> свойству `left` или `right` представляет определяемый пользователем тип, который перегружает оператор сложения <xref:System.Reflection.MethodInfo> , представляющий, что метод является методом реализации.</span><span class="sxs-lookup"><span data-stu-id="fef91-227">If the <xref:System.Linq.Expressions.Expression.Type%2A> property of either `left` or `right` represents a user-defined type that overloads the addition operator, the <xref:System.Reflection.MethodInfo> that represents that method is the implementing method.</span></span>  
  
-   <span data-ttu-id="fef91-228">В противном случае, если `left`. Тип и `right`. Тип: числовые типы, метод реализации является `null`.</span><span class="sxs-lookup"><span data-stu-id="fef91-228">Otherwise, if `left`.Type and `right`.Type are numeric types, the implementing method is `null`.</span></span>  
  
#### <a name="node-type-and-lifted-versus-non-lifted"></a><span data-ttu-id="fef91-229">Тип узла с ликвидацией или без</span><span class="sxs-lookup"><span data-stu-id="fef91-229">Node Type and Lifted versus Non-Lifted</span></span>  
 <span data-ttu-id="fef91-230">Если метод реализации не `null`:</span><span class="sxs-lookup"><span data-stu-id="fef91-230">If the implementing method is not `null`:</span></span>  
  
-   <span data-ttu-id="fef91-231">Если `left`. Тип и `right`. Тип могут быть присвоены соответствующие типы аргументов метода реализации, узел не удаляется.</span><span class="sxs-lookup"><span data-stu-id="fef91-231">If `left`.Type and `right`.Type are assignable to the corresponding argument types of the implementing method, the node is not lifted.</span></span> <span data-ttu-id="fef91-232">Тип узла — тип возвращаемого значения метода реализации.</span><span class="sxs-lookup"><span data-stu-id="fef91-232">The type of the node is the return type of the implementing method.</span></span>  
  
-   <span data-ttu-id="fef91-233">Если выполняются два следующих условия, узел удаляется, а тип узла — обнуляемый тип, соответствующий тип возвращаемого значения метода реализации:</span><span class="sxs-lookup"><span data-stu-id="fef91-233">If the following two conditions are satisfied, the node is lifted and the type of the node is the nullable type that corresponds to the return type of the implementing method:</span></span>  
  
    -   <span data-ttu-id="fef91-234">`left`. Тип и `right`. Тип: обоих типов значений, из которых хотя бы один допускает значения NULL и соответствующие типы, не допускающие значения null равны соответствующие типы аргументов метода реализации.</span><span class="sxs-lookup"><span data-stu-id="fef91-234">`left`.Type and `right`.Type are both value types of which at least one is nullable and the corresponding non-nullable types are equal to the corresponding argument types of the implementing method.</span></span>  
  
    -   <span data-ttu-id="fef91-235">Тип возвращаемого значения метода реализации является типом значения, не допускающие значения NULL.</span><span class="sxs-lookup"><span data-stu-id="fef91-235">The return type of the implementing method is a non-nullable value type.</span></span>  
  
 <span data-ttu-id="fef91-236">Если метод реализации `null`:</span><span class="sxs-lookup"><span data-stu-id="fef91-236">If the implementing method is `null`:</span></span>  
  
-   <span data-ttu-id="fef91-237">Если `left`. Тип и `right`. Тип: оба не поддерживающими значение NULL, узел не удаляется.</span><span class="sxs-lookup"><span data-stu-id="fef91-237">If `left`.Type and `right`.Type are both non-nullable, the node is not lifted.</span></span> <span data-ttu-id="fef91-238">Тип узла является типом результата определенного оператора сложения.</span><span class="sxs-lookup"><span data-stu-id="fef91-238">The type of the node is the result type of the predefined addition operator.</span></span>  
  
-   <span data-ttu-id="fef91-239">Если `left`. Тип и `right`. Тип: значение NULL, узел удаляется.</span><span class="sxs-lookup"><span data-stu-id="fef91-239">If `left`.Type and `right`.Type are both nullable, the node is lifted.</span></span> <span data-ttu-id="fef91-240">Тип узла — обнуляемый тип, соответствующий тип результата определенного оператора сложения.</span><span class="sxs-lookup"><span data-stu-id="fef91-240">The type of the node is the nullable type that corresponds to the result type of the predefined addition operator.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="fef91-241">Значение параметра <paramref name="left" /> или <paramref name="right" /> — <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fef91-241">
              <paramref name="left" /> or <paramref name="right" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.InvalidOperationException">
          <span data-ttu-id="fef91-242">Оператор сложения не определен для типов <paramref name="left" />.Type и <paramref name="right" />.Type.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fef91-242">The addition operator is not defined for <paramref name="left" />.Type and <paramref name="right" />.Type.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="AddChecked">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.BinaryExpression AddChecked (System.Linq.Expressions.Expression left, System.Linq.Expressions.Expression right, System.Reflection.MethodInfo method);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.BinaryExpression AddChecked(class System.Linq.Expressions.Expression left, class System.Linq.Expressions.Expression right, class System.Reflection.MethodInfo method) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.AddChecked(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function AddChecked (left As Expression, right As Expression, method As MethodInfo) As BinaryExpression" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Linq::Expressions::BinaryExpression ^ AddChecked(System::Linq::Expressions::Expression ^ left, System::Linq::Expressions::Expression ^ right, System::Reflection::MethodInfo ^ method);" />
      <MemberSignature Language="F#" Value="static member AddChecked : System.Linq.Expressions.Expression * System.Linq.Expressions.Expression * System.Reflection.MethodInfo -&gt; System.Linq.Expressions.BinaryExpression" Usage="System.Linq.Expressions.Expression.AddChecked (left, right, method)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.BinaryExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="left" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="right" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="method" Type="System.Reflection.MethodInfo" />
      </Parameters>
      <Docs>
        <param name="left">
          <span data-ttu-id="fef91-243">Объект <see cref="T:System.Linq.Expressions.Expression" />, который следует задать в качестве значения свойства <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fef91-243">A <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> property equal to.</span>
          </span>
        </param>
        <param name="right">
          <span data-ttu-id="fef91-244">Объект <see cref="T:System.Linq.Expressions.Expression" />, который следует задать в качестве значения свойства <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fef91-244">A <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> property equal to.</span>
          </span>
        </param>
        <param name="method">
          <span data-ttu-id="fef91-245">Объект <see cref="T:System.Reflection.MethodInfo" />, который следует задать в качестве значения свойства <see cref="P:System.Linq.Expressions.BinaryExpression.Method" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fef91-245">A <see cref="T:System.Reflection.MethodInfo" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Method" /> property equal to.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="fef91-246">Создает <see cref="T:System.Linq.Expressions.BinaryExpression" />, представляющий операцию арифметического сложения, содержащую проверку переполнения.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fef91-246">Creates a <see cref="T:System.Linq.Expressions.BinaryExpression" /> that represents an arithmetic addition operation that has overflow checking.</span>
          </span>
          <span data-ttu-id="fef91-247">Может быть указан метод реализации.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fef91-247">The implementing method can be specified.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="fef91-248">Выражение <see cref="T:System.Linq.Expressions.BinaryExpression" /> со свойством <see cref="P:System.Linq.Expressions.Expression.NodeType" />, равным <see cref="F:System.Linq.Expressions.ExpressionType.AddChecked" />, и свойствами <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />, <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> и <see cref="P:System.Linq.Expressions.BinaryExpression.Method" />, для которых заданы указанные значения.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fef91-248">A <see cref="T:System.Linq.Expressions.BinaryExpression" /> that has the <see cref="P:System.Linq.Expressions.Expression.NodeType" /> property equal to <see cref="F:System.Linq.Expressions.ExpressionType.AddChecked" /> and the <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />, <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> and <see cref="P:System.Linq.Expressions.BinaryExpression.Method" /> properties set to the specified values.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="fef91-249">Полученный в результате <xref:System.Linq.Expressions.BinaryExpression> имеет <xref:System.Linq.Expressions.BinaryExpression.Method%2A> свойство присвоено метод реализации.</span><span class="sxs-lookup"><span data-stu-id="fef91-249">The resulting <xref:System.Linq.Expressions.BinaryExpression> has the <xref:System.Linq.Expressions.BinaryExpression.Method%2A> property set to the implementing method.</span></span> <span data-ttu-id="fef91-250"><xref:System.Linq.Expressions.Expression.Type%2A> Свойству присваивается тип узла.</span><span class="sxs-lookup"><span data-stu-id="fef91-250">The <xref:System.Linq.Expressions.Expression.Type%2A> property is set to the type of the node.</span></span> <span data-ttu-id="fef91-251">Если узел удаляется, <xref:System.Linq.Expressions.BinaryExpression.IsLifted%2A> и <xref:System.Linq.Expressions.BinaryExpression.IsLiftedToNull%2A> оба являются свойства `true`.</span><span class="sxs-lookup"><span data-stu-id="fef91-251">If the node is lifted, the <xref:System.Linq.Expressions.BinaryExpression.IsLifted%2A> and <xref:System.Linq.Expressions.BinaryExpression.IsLiftedToNull%2A> properties are both `true`.</span></span> <span data-ttu-id="fef91-252">В противном случае они `false`.</span><span class="sxs-lookup"><span data-stu-id="fef91-252">Otherwise, they are `false`.</span></span> <span data-ttu-id="fef91-253">Значение свойства <xref:System.Linq.Expressions.BinaryExpression.Conversion%2A> — `null`.</span><span class="sxs-lookup"><span data-stu-id="fef91-253">The <xref:System.Linq.Expressions.BinaryExpression.Conversion%2A> property is `null`.</span></span>  
  
 <span data-ttu-id="fef91-254">Ниже описывается метод реализации, тип узла и ликвидирован ли данный узел.</span><span class="sxs-lookup"><span data-stu-id="fef91-254">The following information describes the implementing method, the node type, and whether a node is lifted.</span></span>  
  
#### <a name="implementing-method"></a><span data-ttu-id="fef91-255">Реализация метода</span><span class="sxs-lookup"><span data-stu-id="fef91-255">Implementing Method</span></span>  
 <span data-ttu-id="fef91-256">Метод реализации для операции, зависит от следующих правил:</span><span class="sxs-lookup"><span data-stu-id="fef91-256">The implementing method for the operation is chosen based on the following rules:</span></span>  
  
-   <span data-ttu-id="fef91-257">Если `method` не `null` , и это отличный от void, `static` (`Shared` в Visual Basic) метода, принимающего два аргумента, это метод реализации для узла.</span><span class="sxs-lookup"><span data-stu-id="fef91-257">If `method` is not `null` and it represents a non-void, `static` (`Shared` in Visual Basic) method that takes two arguments, it is the implementing method for the node.</span></span>  
  
-   <span data-ttu-id="fef91-258">В противном случае, если <xref:System.Linq.Expressions.Expression.Type%2A> свойству `left` или `right` представляет определяемый пользователем тип, который перегружает оператор сложения <xref:System.Reflection.MethodInfo> , представляющий, что метод является методом реализации.</span><span class="sxs-lookup"><span data-stu-id="fef91-258">Otherwise, if the <xref:System.Linq.Expressions.Expression.Type%2A> property of either `left` or `right` represents a user-defined type that overloads the addition operator, the <xref:System.Reflection.MethodInfo> that represents that method is the implementing method.</span></span>  
  
-   <span data-ttu-id="fef91-259">В противном случае, если `left`. Тип и `right`. Тип: числовые типы, метод реализации является `null`.</span><span class="sxs-lookup"><span data-stu-id="fef91-259">Otherwise, if `left`.Type and `right`.Type are numeric types, the implementing method is `null`.</span></span>  
  
#### <a name="node-type-and-lifted-versus-non-lifted"></a><span data-ttu-id="fef91-260">Тип узла с ликвидацией или без</span><span class="sxs-lookup"><span data-stu-id="fef91-260">Node Type and Lifted versus Non-Lifted</span></span>  
 <span data-ttu-id="fef91-261">Если метод реализации не `null`:</span><span class="sxs-lookup"><span data-stu-id="fef91-261">If the implementing method is not `null`:</span></span>  
  
-   <span data-ttu-id="fef91-262">Если `left`. Тип и `right`. Тип могут быть присвоены соответствующие типы аргументов метода реализации, узел не удаляется.</span><span class="sxs-lookup"><span data-stu-id="fef91-262">If `left`.Type and `right`.Type are assignable to the corresponding argument types of the implementing method, the node is not lifted.</span></span> <span data-ttu-id="fef91-263">Тип узла — тип возвращаемого значения метода реализации.</span><span class="sxs-lookup"><span data-stu-id="fef91-263">The type of the node is the return type of the implementing method.</span></span>  
  
-   <span data-ttu-id="fef91-264">Если выполняются два следующих условия, узел удаляется, а тип узла — обнуляемый тип, соответствующий тип возвращаемого значения метода реализации:</span><span class="sxs-lookup"><span data-stu-id="fef91-264">If the following two conditions are satisfied, the node is lifted and the type of the node is the nullable type that corresponds to the return type of the implementing method:</span></span>  
  
    -   <span data-ttu-id="fef91-265">`left`. Тип и `right`. Тип: обоих типов значений, из которых хотя бы один допускает значения NULL и соответствующие типы, не допускающие значения null равны соответствующие типы аргументов метода реализации.</span><span class="sxs-lookup"><span data-stu-id="fef91-265">`left`.Type and `right`.Type are both value types of which at least one is nullable and the corresponding non-nullable types are equal to the corresponding argument types of the implementing method.</span></span>  
  
    -   <span data-ttu-id="fef91-266">Тип возвращаемого значения метода реализации является типом значения, не допускающие значения NULL.</span><span class="sxs-lookup"><span data-stu-id="fef91-266">The return type of the implementing method is a non-nullable value type.</span></span>  
  
 <span data-ttu-id="fef91-267">Если метод реализации `null`:</span><span class="sxs-lookup"><span data-stu-id="fef91-267">If the implementing method is `null`:</span></span>  
  
-   <span data-ttu-id="fef91-268">Если `left`. Тип и `right`. Тип: оба не поддерживающими значение NULL, узел не удаляется.</span><span class="sxs-lookup"><span data-stu-id="fef91-268">If `left`.Type and `right`.Type are both non-nullable, the node is not lifted.</span></span> <span data-ttu-id="fef91-269">Тип узла является типом результата определенного оператора сложения.</span><span class="sxs-lookup"><span data-stu-id="fef91-269">The type of the node is the result type of the predefined addition operator.</span></span>  
  
-   <span data-ttu-id="fef91-270">Если `left`. Тип и `right`. Тип: значение NULL, узел удаляется.</span><span class="sxs-lookup"><span data-stu-id="fef91-270">If `left`.Type and `right`.Type are both nullable, the node is lifted.</span></span> <span data-ttu-id="fef91-271">Тип узла — обнуляемый тип, соответствующий тип результата определенного оператора сложения.</span><span class="sxs-lookup"><span data-stu-id="fef91-271">The type of the node is the nullable type that corresponds to the result type of the predefined addition operator.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="fef91-272">Значение параметра <paramref name="left" /> или <paramref name="right" /> — <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fef91-272">
              <paramref name="left" /> or <paramref name="right" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="fef91-273">Значение параметра <paramref name="method" /> не равно <see langword="null" />, и метод, который оно представляет, возвращает <see langword="void" />, не является <see langword="static" /> (<see langword="Shared" /> в Visual Basic) и не принимает ровно два аргумента.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fef91-273">
              <paramref name="method" /> is not <see langword="null" /> and the method it represents returns <see langword="void" />, is not <see langword="static" /> (<see langword="Shared" /> in Visual Basic), or does not take exactly two arguments.</span>
          </span>
        </exception>
        <exception cref="T:System.InvalidOperationException">
          <span data-ttu-id="fef91-274">
            <paramref name="method" /> равен <see langword="null" />, и оператор сложения не определен для типов <paramref name="left" />.Type и <paramref name="right" />.Type.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fef91-274">
              <paramref name="method" /> is <see langword="null" /> and the addition operator is not defined for <paramref name="left" />.Type and <paramref name="right" />.Type.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <MemberGroup MemberName="And">
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="fef91-275">Создает выражение <see cref="T:System.Linq.Expressions.BinaryExpression" />, представляющее битовую операцию <see langword="AND" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fef91-275">Creates a <see cref="T:System.Linq.Expressions.BinaryExpression" /> that represents a bitwise <see langword="AND" /> operation.</span>
          </span>
        </summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="And">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.BinaryExpression And (System.Linq.Expressions.Expression left, System.Linq.Expressions.Expression right);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.BinaryExpression And(class System.Linq.Expressions.Expression left, class System.Linq.Expressions.Expression right) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.And(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function And (left As Expression, right As Expression) As BinaryExpression" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Linq::Expressions::BinaryExpression ^ And(System::Linq::Expressions::Expression ^ left, System::Linq::Expressions::Expression ^ right);" />
      <MemberSignature Language="F#" Value="static member And : System.Linq.Expressions.Expression * System.Linq.Expressions.Expression -&gt; System.Linq.Expressions.BinaryExpression" Usage="System.Linq.Expressions.Expression.And (left, right)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.BinaryExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="left" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="right" Type="System.Linq.Expressions.Expression" />
      </Parameters>
      <Docs>
        <param name="left">
          <span data-ttu-id="fef91-276">Объект <see cref="T:System.Linq.Expressions.Expression" />, который следует задать в качестве значения свойства <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fef91-276">A <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> property equal to.</span>
          </span>
        </param>
        <param name="right">
          <span data-ttu-id="fef91-277">Объект <see cref="T:System.Linq.Expressions.Expression" />, который следует задать в качестве значения свойства <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fef91-277">A <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> property equal to.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="fef91-278">Создает выражение <see cref="T:System.Linq.Expressions.BinaryExpression" />, представляющее битовую операцию <see langword="AND" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fef91-278">Creates a <see cref="T:System.Linq.Expressions.BinaryExpression" /> that represents a bitwise <see langword="AND" /> operation.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="fef91-279">Выражение <see cref="T:System.Linq.Expressions.BinaryExpression" /> со свойством<see cref="P:System.Linq.Expressions.Expression.NodeType" />, равным <see cref="F:System.Linq.Expressions.ExpressionType.And" />, и свойствами <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> и <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />, для которых заданы указанные значения.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fef91-279">A <see cref="T:System.Linq.Expressions.BinaryExpression" /> that has the <see cref="P:System.Linq.Expressions.Expression.NodeType" /> property equal to <see cref="F:System.Linq.Expressions.ExpressionType.And" /> and the <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> and <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> properties set to the specified values.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="fef91-280">Полученный в результате <xref:System.Linq.Expressions.BinaryExpression> имеет <xref:System.Linq.Expressions.BinaryExpression.Method%2A> свойство присвоено метод реализации.</span><span class="sxs-lookup"><span data-stu-id="fef91-280">The resulting <xref:System.Linq.Expressions.BinaryExpression> has the <xref:System.Linq.Expressions.BinaryExpression.Method%2A> property set to the implementing method.</span></span> <span data-ttu-id="fef91-281"><xref:System.Linq.Expressions.Expression.Type%2A> Свойству присваивается тип узла.</span><span class="sxs-lookup"><span data-stu-id="fef91-281">The <xref:System.Linq.Expressions.Expression.Type%2A> property is set to the type of the node.</span></span> <span data-ttu-id="fef91-282">Если узел удаляется, <xref:System.Linq.Expressions.BinaryExpression.IsLifted%2A> и <xref:System.Linq.Expressions.BinaryExpression.IsLiftedToNull%2A> оба являются свойства `true`.</span><span class="sxs-lookup"><span data-stu-id="fef91-282">If the node is lifted, the <xref:System.Linq.Expressions.BinaryExpression.IsLifted%2A> and <xref:System.Linq.Expressions.BinaryExpression.IsLiftedToNull%2A> properties are both `true`.</span></span> <span data-ttu-id="fef91-283">В противном случае они `false`.</span><span class="sxs-lookup"><span data-stu-id="fef91-283">Otherwise, they are `false`.</span></span> <span data-ttu-id="fef91-284">Значение свойства <xref:System.Linq.Expressions.BinaryExpression.Conversion%2A> — `null`.</span><span class="sxs-lookup"><span data-stu-id="fef91-284">The <xref:System.Linq.Expressions.BinaryExpression.Conversion%2A> property is `null`.</span></span>  
  
 <span data-ttu-id="fef91-285">Ниже описывается метод реализации, тип узла и ликвидирован ли данный узел.</span><span class="sxs-lookup"><span data-stu-id="fef91-285">The following information describes the implementing method, the node type, and whether a node is lifted.</span></span>  
  
#### <a name="implementing-method"></a><span data-ttu-id="fef91-286">Реализация метода</span><span class="sxs-lookup"><span data-stu-id="fef91-286">Implementing Method</span></span>  
 <span data-ttu-id="fef91-287">Следующие правила определяют метод реализации для операции:</span><span class="sxs-lookup"><span data-stu-id="fef91-287">The following rules determine the implementing method for the operation:</span></span>  
  
-   <span data-ttu-id="fef91-288">Если <xref:System.Linq.Expressions.Expression.Type%2A> свойству `left` или `right` представляет определяемый пользователем тип, который перегружает побитового `AND` оператор, <xref:System.Reflection.MethodInfo> , представляющий, что метод является методом реализации.</span><span class="sxs-lookup"><span data-stu-id="fef91-288">If the <xref:System.Linq.Expressions.Expression.Type%2A> property of either `left` or `right` represents a user-defined type that overloads the bitwise `AND` operator, the <xref:System.Reflection.MethodInfo> that represents that method is the implementing method.</span></span>  
  
-   <span data-ttu-id="fef91-289">В противном случае, если `left`. Тип и `right`. Являются целыми числами или логическое типами, метод реализации является `null`.</span><span class="sxs-lookup"><span data-stu-id="fef91-289">Otherwise, if `left`.Type and `right`.Type are integral or Boolean types, the implementing method is `null`.</span></span>  
  
#### <a name="node-type-and-lifted-versus-non-lifted"></a><span data-ttu-id="fef91-290">Тип узла с ликвидацией или без</span><span class="sxs-lookup"><span data-stu-id="fef91-290">Node Type and Lifted versus Non-Lifted</span></span>  
 <span data-ttu-id="fef91-291">Если метод реализации не `null`:</span><span class="sxs-lookup"><span data-stu-id="fef91-291">If the implementing method is not `null`:</span></span>  
  
-   <span data-ttu-id="fef91-292">Если `left`. Тип и `right`. Тип могут быть присвоены соответствующие типы аргументов метода реализации, узел не удаляется.</span><span class="sxs-lookup"><span data-stu-id="fef91-292">If `left`.Type and `right`.Type are assignable to the corresponding argument types of the implementing method, the node is not lifted.</span></span> <span data-ttu-id="fef91-293">Тип узла — тип возвращаемого значения метода реализации.</span><span class="sxs-lookup"><span data-stu-id="fef91-293">The type of the node is the return type of the implementing method.</span></span>  
  
-   <span data-ttu-id="fef91-294">Если выполняются два следующих условия, узел удаляется, а тип узла — обнуляемый тип, соответствующий тип возвращаемого значения метода реализации:</span><span class="sxs-lookup"><span data-stu-id="fef91-294">If the following two conditions are satisfied, the node is lifted and the type of the node is the nullable type that corresponds to the return type of the implementing method:</span></span>  
  
    -   <span data-ttu-id="fef91-295">`left`. Тип и `right`. Тип: обоих типов значений, из которых хотя бы один допускает значения NULL и соответствующие типы, не допускающие значения null равны соответствующие типы аргументов метода реализации.</span><span class="sxs-lookup"><span data-stu-id="fef91-295">`left`.Type and `right`.Type are both value types of which at least one is nullable and the corresponding non-nullable types are equal to the corresponding argument types of the implementing method.</span></span>  
  
    -   <span data-ttu-id="fef91-296">Тип возвращаемого значения метода реализации является типом значения, не допускающие значения NULL.</span><span class="sxs-lookup"><span data-stu-id="fef91-296">The return type of the implementing method is a non-nullable value type.</span></span>  
  
 <span data-ttu-id="fef91-297">Если метод реализации `null`:</span><span class="sxs-lookup"><span data-stu-id="fef91-297">If the implementing method is `null`:</span></span>  
  
-   <span data-ttu-id="fef91-298">Если `left`. Тип и `right`. Тип: оба не поддерживающими значение NULL, узел не удаляется.</span><span class="sxs-lookup"><span data-stu-id="fef91-298">If `left`.Type and `right`.Type are both non-nullable, the node is not lifted.</span></span> <span data-ttu-id="fef91-299">Тип узла является типом результата из предварительно определенных побитовое `AND` оператор.</span><span class="sxs-lookup"><span data-stu-id="fef91-299">The type of the node is the result type of the predefined bitwise `AND` operator.</span></span>  
  
-   <span data-ttu-id="fef91-300">Если `left`. Тип и `right`. Тип: значение NULL, узел удаляется.</span><span class="sxs-lookup"><span data-stu-id="fef91-300">If `left`.Type and `right`.Type are both nullable, the node is lifted.</span></span> <span data-ttu-id="fef91-301">Тип узла — обнуляемый тип, соответствующий типу результата из предварительно определенных побитовое `AND` оператор.</span><span class="sxs-lookup"><span data-stu-id="fef91-301">The type of the node is the nullable type that corresponds to the result type of the predefined bitwise `AND` operator.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="fef91-302">В следующем примере кода показано, как создать выражение, которое представляет логическую операцию и над двумя значениями типа Boolean.</span><span class="sxs-lookup"><span data-stu-id="fef91-302">The following code example shows how to create an expression that represents a logical AND operation on two Boolean values.</span></span>  
  
 [!code-csharp[System.Linq.Expressions.ExpressionDev10#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.linq.expressions.expressiondev10/cs/program.cs#2)]
 [!code-vb[System.Linq.Expressions.ExpressionDev10#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.linq.expressions.expressiondev10/vb/module1.vb#2)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="fef91-303">Значение параметра <paramref name="left" /> или <paramref name="right" /> — <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fef91-303">
              <paramref name="left" /> or <paramref name="right" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.InvalidOperationException">
          <span data-ttu-id="fef91-304">Битовый оператор <see langword="AND" /> не определен для типов <paramref name="left" />.Type и <paramref name="right" />.Type.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fef91-304">The bitwise <see langword="AND" /> operator is not defined for <paramref name="left" />.Type and <paramref name="right" />.Type.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="And">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.BinaryExpression And (System.Linq.Expressions.Expression left, System.Linq.Expressions.Expression right, System.Reflection.MethodInfo method);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.BinaryExpression And(class System.Linq.Expressions.Expression left, class System.Linq.Expressions.Expression right, class System.Reflection.MethodInfo method) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.And(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function And (left As Expression, right As Expression, method As MethodInfo) As BinaryExpression" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Linq::Expressions::BinaryExpression ^ And(System::Linq::Expressions::Expression ^ left, System::Linq::Expressions::Expression ^ right, System::Reflection::MethodInfo ^ method);" />
      <MemberSignature Language="F#" Value="static member And : System.Linq.Expressions.Expression * System.Linq.Expressions.Expression * System.Reflection.MethodInfo -&gt; System.Linq.Expressions.BinaryExpression" Usage="System.Linq.Expressions.Expression.And (left, right, method)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.BinaryExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="left" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="right" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="method" Type="System.Reflection.MethodInfo" />
      </Parameters>
      <Docs>
        <param name="left">
          <span data-ttu-id="fef91-305">Объект <see cref="T:System.Linq.Expressions.Expression" />, который следует задать в качестве значения свойства <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fef91-305">An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> property equal to.</span>
          </span>
        </param>
        <param name="right">
          <span data-ttu-id="fef91-306">Объект <see cref="T:System.Linq.Expressions.Expression" />, который следует задать в качестве значения свойства <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fef91-306">An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> property equal to.</span>
          </span>
        </param>
        <param name="method">
          <span data-ttu-id="fef91-307">Объект <see cref="T:System.Reflection.MethodInfo" />, который следует задать в качестве значения свойства <see cref="P:System.Linq.Expressions.BinaryExpression.Method" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fef91-307">A <see cref="T:System.Reflection.MethodInfo" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Method" /> property equal to.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="fef91-308">Создает выражение <see cref="T:System.Linq.Expressions.BinaryExpression" />, представляющее битовую операцию <see langword="AND" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fef91-308">Creates a <see cref="T:System.Linq.Expressions.BinaryExpression" /> that represents a bitwise <see langword="AND" /> operation.</span>
          </span>
          <span data-ttu-id="fef91-309">Может быть указан метод реализации.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fef91-309">The implementing method can be specified.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="fef91-310">Выражение <see cref="T:System.Linq.Expressions.BinaryExpression" /> со свойством <see cref="P:System.Linq.Expressions.Expression.NodeType" />, равным <see cref="F:System.Linq.Expressions.ExpressionType.And" />, и свойствами <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />, <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> и <see cref="P:System.Linq.Expressions.BinaryExpression.Method" />, для которых заданы указанные значения.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fef91-310">A <see cref="T:System.Linq.Expressions.BinaryExpression" /> that has the <see cref="P:System.Linq.Expressions.Expression.NodeType" /> property equal to <see cref="F:System.Linq.Expressions.ExpressionType.And" /> and the <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />, <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />, and <see cref="P:System.Linq.Expressions.BinaryExpression.Method" /> properties set to the specified values.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="fef91-311">Полученный в результате <xref:System.Linq.Expressions.BinaryExpression> имеет <xref:System.Linq.Expressions.BinaryExpression.Method%2A> свойство присвоено метод реализации.</span><span class="sxs-lookup"><span data-stu-id="fef91-311">The resulting <xref:System.Linq.Expressions.BinaryExpression> has the <xref:System.Linq.Expressions.BinaryExpression.Method%2A> property set to the implementing method.</span></span> <span data-ttu-id="fef91-312"><xref:System.Linq.Expressions.Expression.Type%2A> Свойству присваивается тип узла.</span><span class="sxs-lookup"><span data-stu-id="fef91-312">The <xref:System.Linq.Expressions.Expression.Type%2A> property is set to the type of the node.</span></span> <span data-ttu-id="fef91-313">Если узел удаляется, <xref:System.Linq.Expressions.BinaryExpression.IsLifted%2A> и <xref:System.Linq.Expressions.BinaryExpression.IsLiftedToNull%2A> оба являются свойства `true`.</span><span class="sxs-lookup"><span data-stu-id="fef91-313">If the node is lifted, the <xref:System.Linq.Expressions.BinaryExpression.IsLifted%2A> and <xref:System.Linq.Expressions.BinaryExpression.IsLiftedToNull%2A> properties are both `true`.</span></span> <span data-ttu-id="fef91-314">В противном случае они `false`.</span><span class="sxs-lookup"><span data-stu-id="fef91-314">Otherwise, they are `false`.</span></span> <span data-ttu-id="fef91-315">Значение свойства <xref:System.Linq.Expressions.BinaryExpression.Conversion%2A> — `null`.</span><span class="sxs-lookup"><span data-stu-id="fef91-315">The <xref:System.Linq.Expressions.BinaryExpression.Conversion%2A> property is `null`.</span></span>  
  
 <span data-ttu-id="fef91-316">Ниже описывается метод реализации, тип узла и ликвидирован ли данный узел.</span><span class="sxs-lookup"><span data-stu-id="fef91-316">The following information describes the implementing method, the node type, and whether a node is lifted.</span></span>  
  
#### <a name="implementing-method"></a><span data-ttu-id="fef91-317">Реализация метода</span><span class="sxs-lookup"><span data-stu-id="fef91-317">Implementing Method</span></span>  
 <span data-ttu-id="fef91-318">Метод реализации для операции, зависит от следующих правил:</span><span class="sxs-lookup"><span data-stu-id="fef91-318">The implementing method for the operation is chosen based on the following rules:</span></span>  
  
-   <span data-ttu-id="fef91-319">Если `method` не `null` , и это отличный от void, `static` (`Shared` в Visual Basic) метода, принимающего два аргумента, это метод реализации для узла.</span><span class="sxs-lookup"><span data-stu-id="fef91-319">If `method` is not `null` and it represents a non-void, `static` (`Shared` in Visual Basic) method that takes two arguments, it is the implementing method for the node.</span></span>  
  
-   <span data-ttu-id="fef91-320">В противном случае, если <xref:System.Linq.Expressions.Expression.Type%2A> свойству `left` или `right` представляет определяемый пользователем тип, который перегружает побитового `AND` оператор, <xref:System.Reflection.MethodInfo> , представляющий, что метод является методом реализации.</span><span class="sxs-lookup"><span data-stu-id="fef91-320">Otherwise, if the <xref:System.Linq.Expressions.Expression.Type%2A> property of either `left` or `right` represents a user-defined type that overloads the bitwise `AND` operator, the <xref:System.Reflection.MethodInfo> that represents that method is the implementing method.</span></span>  
  
-   <span data-ttu-id="fef91-321">В противном случае, если `left`. Тип и `right`. Являются целыми числами или логическое типами, метод реализации является `null`.</span><span class="sxs-lookup"><span data-stu-id="fef91-321">Otherwise, if `left`.Type and `right`.Type are integral or Boolean types, the implementing method is `null`.</span></span>  
  
#### <a name="node-type-and-lifted-versus-non-lifted"></a><span data-ttu-id="fef91-322">Тип узла с ликвидацией или без</span><span class="sxs-lookup"><span data-stu-id="fef91-322">Node Type and Lifted versus Non-Lifted</span></span>  
 <span data-ttu-id="fef91-323">Если метод реализации не `null`:</span><span class="sxs-lookup"><span data-stu-id="fef91-323">If the implementing method is not `null`:</span></span>  
  
-   <span data-ttu-id="fef91-324">Если `left`. Тип и `right`. Тип могут быть присвоены соответствующие типы аргументов метода реализации, узел не удаляется.</span><span class="sxs-lookup"><span data-stu-id="fef91-324">If `left`.Type and `right`.Type are assignable to the corresponding argument types of the implementing method, the node is not lifted.</span></span> <span data-ttu-id="fef91-325">Тип узла — тип возвращаемого значения метода реализации.</span><span class="sxs-lookup"><span data-stu-id="fef91-325">The type of the node is the return type of the implementing method.</span></span>  
  
-   <span data-ttu-id="fef91-326">Если выполняются два следующих условия, узел удаляется, а тип узла — обнуляемый тип, соответствующий тип возвращаемого значения метода реализации:</span><span class="sxs-lookup"><span data-stu-id="fef91-326">If the following two conditions are satisfied, the node is lifted and the type of the node is the nullable type that corresponds to the return type of the implementing method:</span></span>  
  
    -   <span data-ttu-id="fef91-327">`left`. Тип и `right`. Тип: обоих типов значений, из которых хотя бы один допускает значения NULL и соответствующие типы, не допускающие значения null равны соответствующие типы аргументов метода реализации.</span><span class="sxs-lookup"><span data-stu-id="fef91-327">`left`.Type and `right`.Type are both value types of which at least one is nullable and the corresponding non-nullable types are equal to the corresponding argument types of the implementing method.</span></span>  
  
    -   <span data-ttu-id="fef91-328">Тип возвращаемого значения метода реализации является типом значения, не допускающие значения NULL.</span><span class="sxs-lookup"><span data-stu-id="fef91-328">The return type of the implementing method is a non-nullable value type.</span></span>  
  
 <span data-ttu-id="fef91-329">Если метод реализации `null`:</span><span class="sxs-lookup"><span data-stu-id="fef91-329">If the implementing method is `null`:</span></span>  
  
-   <span data-ttu-id="fef91-330">Если `left`. Тип и `right`. Тип: оба не поддерживающими значение NULL, узел не удаляется.</span><span class="sxs-lookup"><span data-stu-id="fef91-330">If `left`.Type and `right`.Type are both non-nullable, the node is not lifted.</span></span> <span data-ttu-id="fef91-331">Тип узла является типом результата из предварительно определенных побитовое `AND` оператор.</span><span class="sxs-lookup"><span data-stu-id="fef91-331">The type of the node is the result type of the predefined bitwise `AND` operator.</span></span>  
  
-   <span data-ttu-id="fef91-332">Если `left`. Тип и `right`. Тип: значение NULL, узел удаляется.</span><span class="sxs-lookup"><span data-stu-id="fef91-332">If `left`.Type and `right`.Type are both nullable, the node is lifted.</span></span> <span data-ttu-id="fef91-333">Тип узла — обнуляемый тип, соответствующий типу результата из предварительно определенных побитовое `AND` оператор.</span><span class="sxs-lookup"><span data-stu-id="fef91-333">The type of the node is the nullable type that corresponds to the result type of the predefined bitwise `AND` operator.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="fef91-334">Значение параметра <paramref name="left" /> или <paramref name="right" /> — <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fef91-334">
              <paramref name="left" /> or <paramref name="right" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="fef91-335">
            <paramref name="method" /> не имеет значение <see langword="null" />, и метод, который он представляет, возвращает <see langword="void" />, а не <see langword="static" /> (<see langword="Shared" /> в Visual Basic), или не принимает ровно два аргумента.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fef91-335">
              <paramref name="method" /> is not <see langword="null" /> and the method it represents returns <see langword="void" />, is not <see langword="static" /> (<see langword="Shared" /> in Visual Basic), or does not take exactly two arguments.</span>
          </span>
        </exception>
        <exception cref="T:System.InvalidOperationException">
          <span data-ttu-id="fef91-336">Параметр <paramref name="method" /> имеет значение <see langword="null" />, и битовый оператор <see langword="AND" /> не определен для типов <paramref name="left" />.Type и <paramref name="right" />.Type.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fef91-336">
              <paramref name="method" /> is <see langword="null" /> and the bitwise <see langword="AND" /> operator is not defined for <paramref name="left" />.Type and <paramref name="right" />.Type.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <MemberGroup MemberName="AndAlso">
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="fef91-337">Создает выражение <see cref="T:System.Linq.Expressions.BinaryExpression" />, представляющее условную операцию <see langword="AND" />, вычисляющую второй операнд, только если первый операнд имеет значение <see langword="true" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fef91-337">Creates a <see cref="T:System.Linq.Expressions.BinaryExpression" /> that represents a conditional <see langword="AND" /> operation that evaluates the second operand only if the first operand evaluates to <see langword="true" />.</span>
          </span>
        </summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="AndAlso">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.BinaryExpression AndAlso (System.Linq.Expressions.Expression left, System.Linq.Expressions.Expression right);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.BinaryExpression AndAlso(class System.Linq.Expressions.Expression left, class System.Linq.Expressions.Expression right) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.AndAlso(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function AndAlso (left As Expression, right As Expression) As BinaryExpression" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Linq::Expressions::BinaryExpression ^ AndAlso(System::Linq::Expressions::Expression ^ left, System::Linq::Expressions::Expression ^ right);" />
      <MemberSignature Language="F#" Value="static member AndAlso : System.Linq.Expressions.Expression * System.Linq.Expressions.Expression -&gt; System.Linq.Expressions.BinaryExpression" Usage="System.Linq.Expressions.Expression.AndAlso (left, right)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.BinaryExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="left" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="right" Type="System.Linq.Expressions.Expression" />
      </Parameters>
      <Docs>
        <param name="left">
          <span data-ttu-id="fef91-338">Объект <see cref="T:System.Linq.Expressions.Expression" />, который следует задать в качестве значения свойства <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fef91-338">A <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> property equal to.</span>
          </span>
        </param>
        <param name="right">
          <span data-ttu-id="fef91-339">Объект <see cref="T:System.Linq.Expressions.Expression" />, который следует задать в качестве значения свойства <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fef91-339">A <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> property equal to.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="fef91-340">Создает выражение <see cref="T:System.Linq.Expressions.BinaryExpression" />, представляющее условную операцию <see langword="AND" />, вычисляющую второй операнд, только если первый операнд имеет значение <see langword="true" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fef91-340">Creates a <see cref="T:System.Linq.Expressions.BinaryExpression" /> that represents a conditional <see langword="AND" /> operation that evaluates the second operand only if the first operand evaluates to <see langword="true" />.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="fef91-341">Выражение <see cref="T:System.Linq.Expressions.BinaryExpression" /> со свойством<see cref="P:System.Linq.Expressions.Expression.NodeType" />, равным <see cref="F:System.Linq.Expressions.ExpressionType.AndAlso" />, и свойствами <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> и <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />, для которых заданы указанные значения.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fef91-341">A <see cref="T:System.Linq.Expressions.BinaryExpression" /> that has the <see cref="P:System.Linq.Expressions.Expression.NodeType" /> property equal to <see cref="F:System.Linq.Expressions.ExpressionType.AndAlso" /> and the <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> and <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> properties set to the specified values.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="fef91-342">Полученный в результате <xref:System.Linq.Expressions.BinaryExpression> имеет <xref:System.Linq.Expressions.BinaryExpression.Method%2A> свойство присвоено метод реализации.</span><span class="sxs-lookup"><span data-stu-id="fef91-342">The resulting <xref:System.Linq.Expressions.BinaryExpression> has the <xref:System.Linq.Expressions.BinaryExpression.Method%2A> property set to the implementing method.</span></span> <span data-ttu-id="fef91-343"><xref:System.Linq.Expressions.Expression.Type%2A> Свойству присваивается тип узла.</span><span class="sxs-lookup"><span data-stu-id="fef91-343">The <xref:System.Linq.Expressions.Expression.Type%2A> property is set to the type of the node.</span></span> <span data-ttu-id="fef91-344">Если узел удаляется, <xref:System.Linq.Expressions.BinaryExpression.IsLifted%2A> и <xref:System.Linq.Expressions.BinaryExpression.IsLiftedToNull%2A> оба являются свойства `true`.</span><span class="sxs-lookup"><span data-stu-id="fef91-344">If the node is lifted, the <xref:System.Linq.Expressions.BinaryExpression.IsLifted%2A> and <xref:System.Linq.Expressions.BinaryExpression.IsLiftedToNull%2A> properties are both `true`.</span></span> <span data-ttu-id="fef91-345">В противном случае они `false`.</span><span class="sxs-lookup"><span data-stu-id="fef91-345">Otherwise, they are `false`.</span></span> <span data-ttu-id="fef91-346">Значение свойства <xref:System.Linq.Expressions.BinaryExpression.Conversion%2A> — `null`.</span><span class="sxs-lookup"><span data-stu-id="fef91-346">The <xref:System.Linq.Expressions.BinaryExpression.Conversion%2A> property is `null`.</span></span>  
  
 <span data-ttu-id="fef91-347">Ниже описывается метод реализации, тип узла и ликвидирован ли данный узел.</span><span class="sxs-lookup"><span data-stu-id="fef91-347">The following information describes the implementing method, the node type, and whether a node is lifted.</span></span>  
  
#### <a name="implementing-method"></a><span data-ttu-id="fef91-348">Реализация метода</span><span class="sxs-lookup"><span data-stu-id="fef91-348">Implementing Method</span></span>  
 <span data-ttu-id="fef91-349">Следующие правила определяют метод реализации для операции:</span><span class="sxs-lookup"><span data-stu-id="fef91-349">The following rules determine the implementing method for the operation:</span></span>  
  
-   <span data-ttu-id="fef91-350">Если <xref:System.Linq.Expressions.Expression.Type%2A> свойству `left` или `right` представляет определяемый пользователем тип, который перегружает побитового `AND` оператор, <xref:System.Reflection.MethodInfo> , представляющий, что метод является методом реализации.</span><span class="sxs-lookup"><span data-stu-id="fef91-350">If the <xref:System.Linq.Expressions.Expression.Type%2A> property of either `left` or `right` represents a user-defined type that overloads the bitwise `AND` operator, the <xref:System.Reflection.MethodInfo> that represents that method is the implementing method.</span></span>  
  
    > [!NOTE]
    >  <span data-ttu-id="fef91-351">Условное `AND` оператор не может быть перегружен в C# или Visual Basic.</span><span class="sxs-lookup"><span data-stu-id="fef91-351">The conditional `AND` operator cannot be overloaded in C# or Visual Basic.</span></span> <span data-ttu-id="fef91-352">Тем не менее условное `AND` оператора определяется с помощью побитовой операции `AND` оператор.</span><span class="sxs-lookup"><span data-stu-id="fef91-352">However, the conditional `AND` operator is evaluated by using the bitwise `AND` operator.</span></span> <span data-ttu-id="fef91-353">Таким образом, определяемые пользователем перегрузка битовой `AND` оператор может быть реализацию метода для этого типа узла.</span><span class="sxs-lookup"><span data-stu-id="fef91-353">Thus, a user-defined overload of the bitwise `AND` operator can be the implementing method for this node type.</span></span>  
  
-   <span data-ttu-id="fef91-354">В противном случае, если `left`. Тип и `right`. Тип: логические типы, метод реализации будет `null`.</span><span class="sxs-lookup"><span data-stu-id="fef91-354">Otherwise, if `left`.Type and `right`.Type are Boolean types, the implementing method is `null`.</span></span>  
  
#### <a name="node-type-and-lifted-versus-non-lifted"></a><span data-ttu-id="fef91-355">Тип узла с ликвидацией или без</span><span class="sxs-lookup"><span data-stu-id="fef91-355">Node Type and Lifted versus Non-Lifted</span></span>  
 <span data-ttu-id="fef91-356">Если метод реализации не `null`:</span><span class="sxs-lookup"><span data-stu-id="fef91-356">If the implementing method is not `null`:</span></span>  
  
-   <span data-ttu-id="fef91-357">Если `left`. Тип и `right`. Тип могут быть присвоены соответствующие типы аргументов метода реализации, узел не удаляется.</span><span class="sxs-lookup"><span data-stu-id="fef91-357">If `left`.Type and `right`.Type are assignable to the corresponding argument types of the implementing method, the node is not lifted.</span></span> <span data-ttu-id="fef91-358">Тип узла — тип возвращаемого значения метода реализации.</span><span class="sxs-lookup"><span data-stu-id="fef91-358">The type of the node is the return type of the implementing method.</span></span>  
  
-   <span data-ttu-id="fef91-359">Если выполняются два следующих условия, узел удаляется, а тип узла — обнуляемый тип, соответствующий тип возвращаемого значения метода реализации:</span><span class="sxs-lookup"><span data-stu-id="fef91-359">If the following two conditions are satisfied, the node is lifted and the type of the node is the nullable type that corresponds to the return type of the implementing method:</span></span>  
  
    -   <span data-ttu-id="fef91-360">`left`. Тип и `right`. Тип: обоих типов значений, из которых хотя бы один допускает значения NULL, и соответствующие типы, не допускающие значения null равны соответствующие типы аргументов метода реализации.</span><span class="sxs-lookup"><span data-stu-id="fef91-360">`left`.Type and `right`.Type are both value types of which at least one is nullable, and the corresponding non-nullable types are equal to the corresponding argument types of the implementing method.</span></span>  
  
    -   <span data-ttu-id="fef91-361">Тип возвращаемого значения метода реализации является типом значения, не допускающие значения NULL.</span><span class="sxs-lookup"><span data-stu-id="fef91-361">The return type of the implementing method is a non-nullable value type.</span></span>  
  
 <span data-ttu-id="fef91-362">Если метод реализации `null`:</span><span class="sxs-lookup"><span data-stu-id="fef91-362">If the implementing method is `null`:</span></span>  
  
-   <span data-ttu-id="fef91-363">`left`. Тип и `right`. Тип: один и тот же логический тип.</span><span class="sxs-lookup"><span data-stu-id="fef91-363">`left`.Type and `right`.Type are the same Boolean type.</span></span>  
  
-   <span data-ttu-id="fef91-364">Если `left`. Тип и `right`. Тип, не допускающие значения NULL, узел не удаляется.</span><span class="sxs-lookup"><span data-stu-id="fef91-364">If `left`.Type and `right`.Type are non-nullable, the node is not lifted.</span></span> <span data-ttu-id="fef91-365">Тип узла является типом результата условного выражения предопределенные `AND` оператор.</span><span class="sxs-lookup"><span data-stu-id="fef91-365">The type of the node is the result type of the predefined conditional `AND` operator.</span></span>  
  
-   <span data-ttu-id="fef91-366">Если `left`. Тип и `right`. Тип, допускающий значение NULL, узел удаляется.</span><span class="sxs-lookup"><span data-stu-id="fef91-366">If `left`.Type and `right`.Type are nullable, the node is lifted.</span></span> <span data-ttu-id="fef91-367">Тип узла — обнуляемый тип, соответствующий тип результата условного выражения предопределенные `AND` оператор.</span><span class="sxs-lookup"><span data-stu-id="fef91-367">The type of the node is the nullable type that corresponds to the result type of the predefined conditional `AND` operator.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="fef91-368">В следующем примере кода показано, как создание выражения, которое выполняет логическую и операции на его два операнда только в том случае, если первый операнд имеет `true`.</span><span class="sxs-lookup"><span data-stu-id="fef91-368">The following code example shows how to create an expression that performs a logical AND operation on its two operands only if the first operand evaluates to `true`.</span></span>  
  
 [!code-csharp[System.Linq.Expressions.ExpressionDev10#19](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.linq.expressions.expressiondev10/cs/program.cs#19)]
 [!code-vb[System.Linq.Expressions.ExpressionDev10#19](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.linq.expressions.expressiondev10/vb/module1.vb#19)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="fef91-369">Значение параметра <paramref name="left" /> или <paramref name="right" /> — <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fef91-369">
              <paramref name="left" /> or <paramref name="right" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.InvalidOperationException">
          <span data-ttu-id="fef91-370">Битовый оператор <see langword="AND" /> не определен для типов <paramref name="left" />.Type и <paramref name="right" />.Type.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fef91-370">The bitwise <see langword="AND" /> operator is not defined for <paramref name="left" />.Type and <paramref name="right" />.Type.</span>
          </span>
          <span data-ttu-id="fef91-371">-или-</span>
          <span class="sxs-lookup">
            <span data-stu-id="fef91-371">-or-</span>
          </span>
          <span data-ttu-id="fef91-372">Типы <paramref name="left" />.Type и <paramref name="right" />.Type отличаются от логического типа.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fef91-372">
              <paramref name="left" />.Type and <paramref name="right" />.Type are not the same Boolean type.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="AndAlso">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.BinaryExpression AndAlso (System.Linq.Expressions.Expression left, System.Linq.Expressions.Expression right, System.Reflection.MethodInfo method);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.BinaryExpression AndAlso(class System.Linq.Expressions.Expression left, class System.Linq.Expressions.Expression right, class System.Reflection.MethodInfo method) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.AndAlso(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function AndAlso (left As Expression, right As Expression, method As MethodInfo) As BinaryExpression" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Linq::Expressions::BinaryExpression ^ AndAlso(System::Linq::Expressions::Expression ^ left, System::Linq::Expressions::Expression ^ right, System::Reflection::MethodInfo ^ method);" />
      <MemberSignature Language="F#" Value="static member AndAlso : System.Linq.Expressions.Expression * System.Linq.Expressions.Expression * System.Reflection.MethodInfo -&gt; System.Linq.Expressions.BinaryExpression" Usage="System.Linq.Expressions.Expression.AndAlso (left, right, method)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.BinaryExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="left" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="right" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="method" Type="System.Reflection.MethodInfo" />
      </Parameters>
      <Docs>
        <param name="left">
          <span data-ttu-id="fef91-373">Объект <see cref="T:System.Linq.Expressions.Expression" />, который следует задать в качестве значения свойства <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fef91-373">A <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> property equal to.</span>
          </span>
        </param>
        <param name="right">
          <span data-ttu-id="fef91-374">Объект <see cref="T:System.Linq.Expressions.Expression" />, который следует задать в качестве значения свойства <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fef91-374">A <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> property equal to.</span>
          </span>
        </param>
        <param name="method">
          <span data-ttu-id="fef91-375">Объект <see cref="T:System.Reflection.MethodInfo" />, который следует задать в качестве значения свойства <see cref="P:System.Linq.Expressions.BinaryExpression.Method" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fef91-375">A <see cref="T:System.Reflection.MethodInfo" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Method" /> property equal to.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="fef91-376">Создает выражение <see cref="T:System.Linq.Expressions.BinaryExpression" />, представляющее условную операцию <see langword="AND" />, вычисляющую второй операнд, только если первый операнд имеет значение true.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fef91-376">Creates a <see cref="T:System.Linq.Expressions.BinaryExpression" /> that represents a conditional <see langword="AND" /> operation that evaluates the second operand only if the first operand is resolved to true.</span>
          </span>
          <span data-ttu-id="fef91-377">Может быть указан метод реализации.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fef91-377">The implementing method can be specified.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="fef91-378">Выражение <see cref="T:System.Linq.Expressions.BinaryExpression" /> со свойством <see cref="P:System.Linq.Expressions.Expression.NodeType" />, равным <see cref="F:System.Linq.Expressions.ExpressionType.AndAlso" />, и свойствами <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />, <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> и <see cref="P:System.Linq.Expressions.BinaryExpression.Method" />, для которых заданы указанные значения.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fef91-378">A <see cref="T:System.Linq.Expressions.BinaryExpression" /> that has the <see cref="P:System.Linq.Expressions.Expression.NodeType" /> property equal to <see cref="F:System.Linq.Expressions.ExpressionType.AndAlso" /> and the <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />, <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />, and <see cref="P:System.Linq.Expressions.BinaryExpression.Method" /> properties set to the specified values.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="fef91-379">Полученный в результате <xref:System.Linq.Expressions.BinaryExpression> имеет <xref:System.Linq.Expressions.BinaryExpression.Method%2A> свойство присвоено метод реализации.</span><span class="sxs-lookup"><span data-stu-id="fef91-379">The resulting <xref:System.Linq.Expressions.BinaryExpression> has the <xref:System.Linq.Expressions.BinaryExpression.Method%2A> property set to the implementing method.</span></span> <span data-ttu-id="fef91-380"><xref:System.Linq.Expressions.Expression.Type%2A> Свойству присваивается тип узла.</span><span class="sxs-lookup"><span data-stu-id="fef91-380">The <xref:System.Linq.Expressions.Expression.Type%2A> property is set to the type of the node.</span></span> <span data-ttu-id="fef91-381">Если узел удаляется, <xref:System.Linq.Expressions.BinaryExpression.IsLifted%2A> и <xref:System.Linq.Expressions.BinaryExpression.IsLiftedToNull%2A> оба являются свойства `true`.</span><span class="sxs-lookup"><span data-stu-id="fef91-381">If the node is lifted, the <xref:System.Linq.Expressions.BinaryExpression.IsLifted%2A> and <xref:System.Linq.Expressions.BinaryExpression.IsLiftedToNull%2A> properties are both `true`.</span></span> <span data-ttu-id="fef91-382">В противном случае они `false`.</span><span class="sxs-lookup"><span data-stu-id="fef91-382">Otherwise, they are `false`.</span></span> <span data-ttu-id="fef91-383">Значение свойства <xref:System.Linq.Expressions.BinaryExpression.Conversion%2A> — `null`.</span><span class="sxs-lookup"><span data-stu-id="fef91-383">The <xref:System.Linq.Expressions.BinaryExpression.Conversion%2A> property is `null`.</span></span>  
  
 <span data-ttu-id="fef91-384">Ниже описывается метод реализации, тип узла и ликвидирован ли данный узел.</span><span class="sxs-lookup"><span data-stu-id="fef91-384">The following information describes the implementing method, the node type, and whether a node is lifted.</span></span>  
  
#### <a name="implementing-method"></a><span data-ttu-id="fef91-385">Реализация метода</span><span class="sxs-lookup"><span data-stu-id="fef91-385">Implementing Method</span></span>  
 <span data-ttu-id="fef91-386">Метод реализации для операции, зависит от следующих правил:</span><span class="sxs-lookup"><span data-stu-id="fef91-386">The implementing method for the operation is chosen based on the following rules:</span></span>  
  
-   <span data-ttu-id="fef91-387">Если `method` не `null` , и это отличный от void, `static` (`Shared` в Visual Basic) метода, принимающего два аргумента, это метод реализации для узла.</span><span class="sxs-lookup"><span data-stu-id="fef91-387">If `method` is not `null` and it represents a non-void, `static` (`Shared` in Visual Basic) method that takes two arguments, it is the implementing method for the node.</span></span>  
  
-   <span data-ttu-id="fef91-388">В противном случае, если <xref:System.Linq.Expressions.Expression.Type%2A> свойству `left` или `right` представляет определяемый пользователем тип, который перегружает побитового `AND` оператор, <xref:System.Reflection.MethodInfo> , представляющий, что метод является методом реализации.</span><span class="sxs-lookup"><span data-stu-id="fef91-388">Otherwise, if the <xref:System.Linq.Expressions.Expression.Type%2A> property of either `left` or `right` represents a user-defined type that overloads the bitwise `AND` operator, the <xref:System.Reflection.MethodInfo> that represents that method is the implementing method.</span></span>  
  
    > [!NOTE]
    >  <span data-ttu-id="fef91-389">Условное `AND` оператор не может быть перегружен в C# или Visual Basic.</span><span class="sxs-lookup"><span data-stu-id="fef91-389">The conditional `AND` operator cannot be overloaded in C# or Visual Basic.</span></span> <span data-ttu-id="fef91-390">Тем не менее условное `AND` оператора определяется с помощью побитовой операции `AND` оператор.</span><span class="sxs-lookup"><span data-stu-id="fef91-390">However, the conditional `AND` operator is evaluated by using the bitwise `AND` operator.</span></span> <span data-ttu-id="fef91-391">Таким образом, определяемые пользователем перегрузка битовой `AND` оператор может быть реализацию метода для этого типа узла.</span><span class="sxs-lookup"><span data-stu-id="fef91-391">Thus, a user-defined overload of the bitwise `AND` operator can be the implementing method for this node type.</span></span>  
  
-   <span data-ttu-id="fef91-392">В противном случае, если `left`. Тип и `right`. Тип: логические типы, метод реализации будет `null`.</span><span class="sxs-lookup"><span data-stu-id="fef91-392">Otherwise, if `left`.Type and `right`.Type are Boolean types, the implementing method is `null`.</span></span>  
  
#### <a name="node-type-and-lifted-versus-non-lifted"></a><span data-ttu-id="fef91-393">Тип узла с ликвидацией или без</span><span class="sxs-lookup"><span data-stu-id="fef91-393">Node Type and Lifted versus Non-Lifted</span></span>  
 <span data-ttu-id="fef91-394">Если метод реализации не `null`:</span><span class="sxs-lookup"><span data-stu-id="fef91-394">If the implementing method is not `null`:</span></span>  
  
-   <span data-ttu-id="fef91-395">Если `left`. Тип и `right`. Тип могут быть присвоены соответствующие типы аргументов метода реализации, узел не удаляется.</span><span class="sxs-lookup"><span data-stu-id="fef91-395">If `left`.Type and `right`.Type are assignable to the corresponding argument types of the implementing method, the node is not lifted.</span></span> <span data-ttu-id="fef91-396">Тип узла — тип возвращаемого значения метода реализации.</span><span class="sxs-lookup"><span data-stu-id="fef91-396">The type of the node is the return type of the implementing method.</span></span>  
  
-   <span data-ttu-id="fef91-397">Если выполняются два следующих условия, узел удаляется, а тип узла — обнуляемый тип, соответствующий тип возвращаемого значения метода реализации:</span><span class="sxs-lookup"><span data-stu-id="fef91-397">If the following two conditions are satisfied, the node is lifted and the type of the node is the nullable type that corresponds to the return type of the implementing method:</span></span>  
  
    -   <span data-ttu-id="fef91-398">`left`. Тип и `right`. Тип: обоих типов значений, из которых хотя бы один допускает значения NULL, и соответствующие типы, не допускающие значения null равны соответствующие типы аргументов метода реализации.</span><span class="sxs-lookup"><span data-stu-id="fef91-398">`left`.Type and `right`.Type are both value types of which at least one is nullable, and the corresponding non-nullable types are equal to the corresponding argument types of the implementing method.</span></span>  
  
    -   <span data-ttu-id="fef91-399">Тип возвращаемого значения метода реализации является типом значения, не допускающие значения NULL.</span><span class="sxs-lookup"><span data-stu-id="fef91-399">The return type of the implementing method is a non-nullable value type.</span></span>  
  
 <span data-ttu-id="fef91-400">Если метод реализации `null`:</span><span class="sxs-lookup"><span data-stu-id="fef91-400">If the implementing method is `null`:</span></span>  
  
-   <span data-ttu-id="fef91-401">`left`. Тип и `right`. Тип: один и тот же логический тип.</span><span class="sxs-lookup"><span data-stu-id="fef91-401">`left`.Type and `right`.Type are the same Boolean type.</span></span>  
  
-   <span data-ttu-id="fef91-402">Если `left`. Тип и `right`. Тип, не допускающие значения NULL, узел не удаляется.</span><span class="sxs-lookup"><span data-stu-id="fef91-402">If `left`.Type and `right`.Type are non-nullable, the node is not lifted.</span></span> <span data-ttu-id="fef91-403">Тип узла является типом результата условного выражения предопределенные `AND` оператор.</span><span class="sxs-lookup"><span data-stu-id="fef91-403">The type of the node is the result type of the predefined conditional `AND` operator.</span></span>  
  
-   <span data-ttu-id="fef91-404">Если `left`. Тип и `right`. Тип, допускающий значение NULL, узел удаляется.</span><span class="sxs-lookup"><span data-stu-id="fef91-404">If `left`.Type and `right`.Type are nullable, the node is lifted.</span></span> <span data-ttu-id="fef91-405">Тип узла — обнуляемый тип, соответствующий тип результата условного выражения предопределенные `AND` оператор.</span><span class="sxs-lookup"><span data-stu-id="fef91-405">The type of the node is the nullable type that corresponds to the result type of the predefined conditional `AND` operator.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="fef91-406">Значение параметра <paramref name="left" /> или <paramref name="right" /> — <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fef91-406">
              <paramref name="left" /> or <paramref name="right" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="fef91-407">
            <paramref name="method" /> не имеет значение <see langword="null" />, и метод, который он представляет, возвращает <see langword="void" />, а не <see langword="static" /> (<see langword="Shared" /> в Visual Basic), или не принимает ровно два аргумента.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fef91-407">
              <paramref name="method" /> is not <see langword="null" /> and the method it represents returns <see langword="void" />, is not <see langword="static" /> (<see langword="Shared" /> in Visual Basic), or does not take exactly two arguments.</span>
          </span>
        </exception>
        <exception cref="T:System.InvalidOperationException">
          <span data-ttu-id="fef91-408">Параметр <paramref name="method" /> имеет значение <see langword="null" />, и битовый оператор <see langword="AND" /> не определен для типов <paramref name="left" />.Type и <paramref name="right" />.Type.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fef91-408">
              <paramref name="method" /> is <see langword="null" /> and the bitwise <see langword="AND" /> operator is not defined for <paramref name="left" />.Type and <paramref name="right" />.Type.</span>
          </span>
          <span data-ttu-id="fef91-409">-или-</span>
          <span class="sxs-lookup">
            <span data-stu-id="fef91-409">-or-</span>
          </span>
          <span data-ttu-id="fef91-410">Метод <paramref name="method" /> равен <see langword="null" />, а типы <paramref name="left" />.Type и <paramref name="right" />.Type отличаются от логического типа.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fef91-410">
              <paramref name="method" /> is <see langword="null" /> and <paramref name="left" />.Type and <paramref name="right" />.Type are not the same Boolean type.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <MemberGroup MemberName="AndAssign">
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="fef91-411">Создает объект <see cref="T:System.Linq.Expressions.BinaryExpression" />, представляющий битовую операцию присваивания AND.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fef91-411">Creates a <see cref="T:System.Linq.Expressions.BinaryExpression" /> that represents a bitwise AND assignment operation.</span>
          </span>
        </summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="AndAssign">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.BinaryExpression AndAssign (System.Linq.Expressions.Expression left, System.Linq.Expressions.Expression right);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.BinaryExpression AndAssign(class System.Linq.Expressions.Expression left, class System.Linq.Expressions.Expression right) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.AndAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function AndAssign (left As Expression, right As Expression) As BinaryExpression" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Linq::Expressions::BinaryExpression ^ AndAssign(System::Linq::Expressions::Expression ^ left, System::Linq::Expressions::Expression ^ right);" />
      <MemberSignature Language="F#" Value="static member AndAssign : System.Linq.Expressions.Expression * System.Linq.Expressions.Expression -&gt; System.Linq.Expressions.BinaryExpression" Usage="System.Linq.Expressions.Expression.AndAssign (left, right)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.BinaryExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="left" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="right" Type="System.Linq.Expressions.Expression" />
      </Parameters>
      <Docs>
        <param name="left">
          <span data-ttu-id="fef91-412">Объект <see cref="T:System.Linq.Expressions.Expression" />, который следует задать в качестве значения свойства <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fef91-412">An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> property equal to.</span>
          </span>
        </param>
        <param name="right">
          <span data-ttu-id="fef91-413">Объект <see cref="T:System.Linq.Expressions.Expression" />, который следует задать в качестве значения свойства <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fef91-413">An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> property equal to.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="fef91-414">Создает объект <see cref="T:System.Linq.Expressions.BinaryExpression" />, представляющий битовую операцию присваивания AND.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fef91-414">Creates a <see cref="T:System.Linq.Expressions.BinaryExpression" /> that represents a bitwise AND assignment operation.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="fef91-415">Выражение <see cref="T:System.Linq.Expressions.BinaryExpression" /> со свойством<see cref="P:System.Linq.Expressions.Expression.NodeType" />, равным <see cref="F:System.Linq.Expressions.ExpressionType.AndAssign" />, и свойствами <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> и <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />, для которых заданы указанные значения.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fef91-415">A <see cref="T:System.Linq.Expressions.BinaryExpression" /> that has the <see cref="P:System.Linq.Expressions.Expression.NodeType" /> property equal to <see cref="F:System.Linq.Expressions.ExpressionType.AndAssign" /> and the <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> and <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> properties set to the specified values.</span>
          </span>
        </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="AndAssign">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.BinaryExpression AndAssign (System.Linq.Expressions.Expression left, System.Linq.Expressions.Expression right, System.Reflection.MethodInfo method);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.BinaryExpression AndAssign(class System.Linq.Expressions.Expression left, class System.Linq.Expressions.Expression right, class System.Reflection.MethodInfo method) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.AndAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function AndAssign (left As Expression, right As Expression, method As MethodInfo) As BinaryExpression" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Linq::Expressions::BinaryExpression ^ AndAssign(System::Linq::Expressions::Expression ^ left, System::Linq::Expressions::Expression ^ right, System::Reflection::MethodInfo ^ method);" />
      <MemberSignature Language="F#" Value="static member AndAssign : System.Linq.Expressions.Expression * System.Linq.Expressions.Expression * System.Reflection.MethodInfo -&gt; System.Linq.Expressions.BinaryExpression" Usage="System.Linq.Expressions.Expression.AndAssign (left, right, method)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.BinaryExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="left" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="right" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="method" Type="System.Reflection.MethodInfo" />
      </Parameters>
      <Docs>
        <param name="left">
          <span data-ttu-id="fef91-416">Объект <see cref="T:System.Linq.Expressions.Expression" />, который следует задать в качестве значения свойства <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fef91-416">An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> property equal to.</span>
          </span>
        </param>
        <param name="right">
          <span data-ttu-id="fef91-417">Объект <see cref="T:System.Linq.Expressions.Expression" />, который следует задать в качестве значения свойства <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fef91-417">An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> property equal to.</span>
          </span>
        </param>
        <param name="method">
          <span data-ttu-id="fef91-418">Объект <see cref="T:System.Reflection.MethodInfo" />, который следует задать в качестве значения свойства <see cref="P:System.Linq.Expressions.BinaryExpression.Method" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fef91-418">A <see cref="T:System.Reflection.MethodInfo" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Method" /> property equal to.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="fef91-419">Создает объект <see cref="T:System.Linq.Expressions.BinaryExpression" />, представляющий битовую операцию присваивания AND.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fef91-419">Creates a <see cref="T:System.Linq.Expressions.BinaryExpression" /> that represents a bitwise AND assignment operation.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="fef91-420">Выражение <see cref="T:System.Linq.Expressions.BinaryExpression" /> со свойством <see cref="P:System.Linq.Expressions.Expression.NodeType" />, равным <see cref="F:System.Linq.Expressions.ExpressionType.AndAssign" />, и свойствами <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />, <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> и <see cref="P:System.Linq.Expressions.BinaryExpression.Method" />, для которых заданы указанные значения.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fef91-420">A <see cref="T:System.Linq.Expressions.BinaryExpression" /> that has the <see cref="P:System.Linq.Expressions.Expression.NodeType" /> property equal to <see cref="F:System.Linq.Expressions.ExpressionType.AndAssign" /> and the <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />, <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />, and <see cref="P:System.Linq.Expressions.BinaryExpression.Method" /> properties set to the specified values.</span>
          </span>
        </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="AndAssign">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.BinaryExpression AndAssign (System.Linq.Expressions.Expression left, System.Linq.Expressions.Expression right, System.Reflection.MethodInfo method, System.Linq.Expressions.LambdaExpression conversion);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.BinaryExpression AndAssign(class System.Linq.Expressions.Expression left, class System.Linq.Expressions.Expression right, class System.Reflection.MethodInfo method, class System.Linq.Expressions.LambdaExpression conversion) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.AndAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo,System.Linq.Expressions.LambdaExpression)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function AndAssign (left As Expression, right As Expression, method As MethodInfo, conversion As LambdaExpression) As BinaryExpression" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Linq::Expressions::BinaryExpression ^ AndAssign(System::Linq::Expressions::Expression ^ left, System::Linq::Expressions::Expression ^ right, System::Reflection::MethodInfo ^ method, System::Linq::Expressions::LambdaExpression ^ conversion);" />
      <MemberSignature Language="F#" Value="static member AndAssign : System.Linq.Expressions.Expression * System.Linq.Expressions.Expression * System.Reflection.MethodInfo * System.Linq.Expressions.LambdaExpression -&gt; System.Linq.Expressions.BinaryExpression" Usage="System.Linq.Expressions.Expression.AndAssign (left, right, method, conversion)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.BinaryExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="left" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="right" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="method" Type="System.Reflection.MethodInfo" />
        <Parameter Name="conversion" Type="System.Linq.Expressions.LambdaExpression" />
      </Parameters>
      <Docs>
        <param name="left">
          <span data-ttu-id="fef91-421">Объект <see cref="T:System.Linq.Expressions.Expression" />, который следует задать в качестве значения свойства <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fef91-421">An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> property equal to.</span>
          </span>
        </param>
        <param name="right">
          <span data-ttu-id="fef91-422">Объект <see cref="T:System.Linq.Expressions.Expression" />, который следует задать в качестве значения свойства <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fef91-422">An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> property equal to.</span>
          </span>
        </param>
        <param name="method">
          <span data-ttu-id="fef91-423">Объект <see cref="T:System.Reflection.MethodInfo" />, который следует задать в качестве значения свойства <see cref="P:System.Linq.Expressions.BinaryExpression.Method" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fef91-423">A <see cref="T:System.Reflection.MethodInfo" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Method" /> property equal to.</span>
          </span>
        </param>
        <param name="conversion">
          <span data-ttu-id="fef91-424">Объект <see cref="T:System.Linq.Expressions.LambdaExpression" />, который следует задать в качестве значения свойства <see cref="P:System.Linq.Expressions.BinaryExpression.Conversion" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fef91-424">A <see cref="T:System.Linq.Expressions.LambdaExpression" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Conversion" /> property equal to.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="fef91-425">Создает объект <see cref="T:System.Linq.Expressions.BinaryExpression" />, представляющий битовую операцию присваивания AND.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fef91-425">Creates a <see cref="T:System.Linq.Expressions.BinaryExpression" /> that represents a bitwise AND assignment operation.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="fef91-426">Выражение <see cref="T:System.Linq.Expressions.BinaryExpression" />, содержащее свойство <see cref="P:System.Linq.Expressions.Expression.NodeType" />, равное <see cref="F:System.Linq.Expressions.ExpressionType.AndAssign" /> и <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />, <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />, <see cref="P:System.Linq.Expressions.BinaryExpression.Method" />, и свойства <see cref="P:System.Linq.Expressions.BinaryExpression.Conversion" />, для которых заданы указанные значения.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fef91-426">A <see cref="T:System.Linq.Expressions.BinaryExpression" /> that has the <see cref="P:System.Linq.Expressions.Expression.NodeType" /> property equal to <see cref="F:System.Linq.Expressions.ExpressionType.AndAssign" /> and the <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />, <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />, <see cref="P:System.Linq.Expressions.BinaryExpression.Method" />, and <see cref="P:System.Linq.Expressions.BinaryExpression.Conversion" /> properties set to the specified values.</span>
          </span>
        </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="ArrayAccess">
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="fef91-427">Создает объект <see cref="T:System.Linq.Expressions.IndexExpression" /> для доступа к массиву.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fef91-427">Creates an <see cref="T:System.Linq.Expressions.IndexExpression" /> to access an array.</span>
          </span>
        </summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="ArrayAccess">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.IndexExpression ArrayAccess (System.Linq.Expressions.Expression array, System.Collections.Generic.IEnumerable&lt;System.Linq.Expressions.Expression&gt; indexes);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.IndexExpression ArrayAccess(class System.Linq.Expressions.Expression array, class System.Collections.Generic.IEnumerable`1&lt;class System.Linq.Expressions.Expression&gt; indexes) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.ArrayAccess(System.Linq.Expressions.Expression,System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression})" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function ArrayAccess (array As Expression, indexes As IEnumerable(Of Expression)) As IndexExpression" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Linq::Expressions::IndexExpression ^ ArrayAccess(System::Linq::Expressions::Expression ^ array, System::Collections::Generic::IEnumerable&lt;System::Linq::Expressions::Expression ^&gt; ^ indexes);" />
      <MemberSignature Language="F#" Value="static member ArrayAccess : System.Linq.Expressions.Expression * seq&lt;System.Linq.Expressions.Expression&gt; -&gt; System.Linq.Expressions.IndexExpression" Usage="System.Linq.Expressions.Expression.ArrayAccess (array, indexes)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.IndexExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="array" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="indexes" Type="System.Collections.Generic.IEnumerable&lt;System.Linq.Expressions.Expression&gt;" />
      </Parameters>
      <Docs>
        <param name="array">
          <span data-ttu-id="fef91-428">Выражение, представляющее многомерный массив.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fef91-428">An expression that represents the multidimensional array.</span>
          </span>
        </param>
        <param name="indexes">
          <span data-ttu-id="fef91-429">Интерфейс <see cref="T:System.Collections.Generic.IEnumerable`1" />, содержащий выражения для индексации массива.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fef91-429">An <see cref="T:System.Collections.Generic.IEnumerable`1" /> containing expressions used to index the array.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="fef91-430">Создает объект <see cref="T:System.Linq.Expressions.IndexExpression" /> для доступа к многомерному массиву.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fef91-430">Creates an <see cref="T:System.Linq.Expressions.IndexExpression" /> to access a multidimensional array.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="fef91-431">Созданный <see cref="T:System.Linq.Expressions.IndexExpression" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fef91-431">The created <see cref="T:System.Linq.Expressions.IndexExpression" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="fef91-432">Выражение, представляющее массива можно получить с помощью <xref:System.Linq.Expressions.Expression.MakeMemberAccess%2A> метод, либо с помощью <xref:System.Linq.Expressions.Expression.NewArrayBounds%2A> или <xref:System.Linq.Expressions.Expression.NewArrayInit%2A>.</span><span class="sxs-lookup"><span data-stu-id="fef91-432">The expression that represents the array can be obtained by using the <xref:System.Linq.Expressions.Expression.MakeMemberAccess%2A> method, or through <xref:System.Linq.Expressions.Expression.NewArrayBounds%2A> or <xref:System.Linq.Expressions.Expression.NewArrayInit%2A>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="fef91-433">В следующем примере кода показано, как изменить значение элемента в многомерном массиве, с помощью `ArrayAccess` метод.</span><span class="sxs-lookup"><span data-stu-id="fef91-433">The following code example shows how to change the value of an element in a multidimensional array by using the `ArrayAccess` method.</span></span>  
  
 [!code-csharp[System.Linq.Expressions.ExpressionDev10#21](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.linq.expressions.expressiondev10/cs/program.cs#21)]
 [!code-vb[System.Linq.Expressions.ExpressionDev10#21](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.linq.expressions.expressiondev10/vb/module1.vb#21)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ArrayAccess">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.IndexExpression ArrayAccess (System.Linq.Expressions.Expression array, params System.Linq.Expressions.Expression[] indexes);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.IndexExpression ArrayAccess(class System.Linq.Expressions.Expression array, class System.Linq.Expressions.Expression[] indexes) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.ArrayAccess(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression[])" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function ArrayAccess (array As Expression, ParamArray indexes As Expression()) As IndexExpression" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Linq::Expressions::IndexExpression ^ ArrayAccess(System::Linq::Expressions::Expression ^ array, ... cli::array &lt;System::Linq::Expressions::Expression ^&gt; ^ indexes);" />
      <MemberSignature Language="F#" Value="static member ArrayAccess : System.Linq.Expressions.Expression * System.Linq.Expressions.Expression[] -&gt; System.Linq.Expressions.IndexExpression" Usage="System.Linq.Expressions.Expression.ArrayAccess (array, indexes)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.IndexExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="array" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="indexes" Type="System.Linq.Expressions.Expression[]">
          <Attributes>
            <Attribute>
              <AttributeName>System.ParamArray</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="array">
          <span data-ttu-id="fef91-434">Выражение, представляющее индексируемый массив.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fef91-434">An expression representing the array to index.</span>
          </span>
        </param>
        <param name="indexes">
          <span data-ttu-id="fef91-435">Массив, содержащий выражения для индексации массива.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fef91-435">An array that contains expressions used to index the array.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="fef91-436">Создает объект <see cref="T:System.Linq.Expressions.IndexExpression" /> для доступа к массиву.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fef91-436">Creates an <see cref="T:System.Linq.Expressions.IndexExpression" /> to access an array.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="fef91-437">Созданный <see cref="T:System.Linq.Expressions.IndexExpression" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fef91-437">The created <see cref="T:System.Linq.Expressions.IndexExpression" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="fef91-438">Выражение, представляющее массива можно получить с помощью <xref:System.Linq.Expressions.Expression.MakeMemberAccess%2A> метод, либо с помощью <xref:System.Linq.Expressions.Expression.NewArrayBounds%2A> или <xref:System.Linq.Expressions.Expression.NewArrayInit%2A>.</span><span class="sxs-lookup"><span data-stu-id="fef91-438">The expression that represents the array can be obtained by using the <xref:System.Linq.Expressions.Expression.MakeMemberAccess%2A> method, or through <xref:System.Linq.Expressions.Expression.NewArrayBounds%2A> or <xref:System.Linq.Expressions.Expression.NewArrayInit%2A>.</span></span>  
  
 <span data-ttu-id="fef91-439">Для многомерных массивах можно использовать <xref:System.Linq.Expressions.Expression.ArrayAccess%2A> метод.</span><span class="sxs-lookup"><span data-stu-id="fef91-439">For multidimensional arrays, use the <xref:System.Linq.Expressions.Expression.ArrayAccess%2A> method.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="fef91-440">В следующем примере кода показано, как изменить значение элемента массива с помощью `ArrayAccess` метод.</span><span class="sxs-lookup"><span data-stu-id="fef91-440">The following code example shows how to change a value of an array element by using the `ArrayAccess` method.</span></span>  
  
 [!code-csharp[System.Linq.Expressions.ExpressionDev10#20](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.linq.expressions.expressiondev10/cs/program.cs#20)]
 [!code-vb[System.Linq.Expressions.ExpressionDev10#20](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.linq.expressions.expressiondev10/vb/module1.vb#20)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="ArrayIndex">
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="fef91-441">Создает <see cref="T:System.Linq.Expressions.Expression" />,представляющее применение оператора индекса массива.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fef91-441">Creates an <see cref="T:System.Linq.Expressions.Expression" /> that represents applying an array index operator.</span>
          </span>
        </summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="ArrayIndex">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.MethodCallExpression ArrayIndex (System.Linq.Expressions.Expression array, System.Collections.Generic.IEnumerable&lt;System.Linq.Expressions.Expression&gt; indexes);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.MethodCallExpression ArrayIndex(class System.Linq.Expressions.Expression array, class System.Collections.Generic.IEnumerable`1&lt;class System.Linq.Expressions.Expression&gt; indexes) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.ArrayIndex(System.Linq.Expressions.Expression,System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression})" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function ArrayIndex (array As Expression, indexes As IEnumerable(Of Expression)) As MethodCallExpression" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Linq::Expressions::MethodCallExpression ^ ArrayIndex(System::Linq::Expressions::Expression ^ array, System::Collections::Generic::IEnumerable&lt;System::Linq::Expressions::Expression ^&gt; ^ indexes);" />
      <MemberSignature Language="F#" Value="static member ArrayIndex : System.Linq.Expressions.Expression * seq&lt;System.Linq.Expressions.Expression&gt; -&gt; System.Linq.Expressions.MethodCallExpression" Usage="System.Linq.Expressions.Expression.ArrayIndex (array, indexes)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.MethodCallExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="array" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="indexes" Type="System.Collections.Generic.IEnumerable&lt;System.Linq.Expressions.Expression&gt;" />
      </Parameters>
      <Docs>
        <param name="array">
          <span data-ttu-id="fef91-442">Объект <see cref="T:System.Linq.Expressions.Expression" />, который следует задать в качестве значения свойства <see cref="P:System.Linq.Expressions.MethodCallExpression.Object" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fef91-442">An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.MethodCallExpression.Object" /> property equal to.</span>
          </span>
        </param>
        <param name="indexes">
          <span data-ttu-id="fef91-443">
            <see cref="T:System.Collections.Generic.IEnumerable`1" />, содержащий все объекты <see cref="T:System.Linq.Expressions.Expression" />, используемые для заполнения коллекции <see cref="P:System.Linq.Expressions.MethodCallExpression.Arguments" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fef91-443">An <see cref="T:System.Collections.Generic.IEnumerable`1" /> that contains <see cref="T:System.Linq.Expressions.Expression" /> objects to use to populate the <see cref="P:System.Linq.Expressions.MethodCallExpression.Arguments" /> collection.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="fef91-444">Создает <see cref="T:System.Linq.Expressions.MethodCallExpression" />, представляющее применение оператора индекса массива к массиву с рангом более одного.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fef91-444">Creates a <see cref="T:System.Linq.Expressions.MethodCallExpression" /> that represents applying an array index operator to an array of rank more than one.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="fef91-445">Выражение <see cref="T:System.Linq.Expressions.MethodCallExpression" /> со свойством<see cref="P:System.Linq.Expressions.Expression.NodeType" />, равным <see cref="F:System.Linq.Expressions.ExpressionType.Call" />, и свойствами <see cref="P:System.Linq.Expressions.MethodCallExpression.Object" /> и <see cref="P:System.Linq.Expressions.MethodCallExpression.Arguments" />, для которых заданы указанные значения.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fef91-445">A <see cref="T:System.Linq.Expressions.MethodCallExpression" /> that has the <see cref="P:System.Linq.Expressions.Expression.NodeType" /> property equal to <see cref="F:System.Linq.Expressions.ExpressionType.Call" /> and the <see cref="P:System.Linq.Expressions.MethodCallExpression.Object" /> and <see cref="P:System.Linq.Expressions.MethodCallExpression.Arguments" /> properties set to the specified values.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="fef91-446">Каждый элемент `indexes` должен иметь <xref:System.Linq.Expressions.Expression.Type%2A> равным <xref:System.Int32>.</span><span class="sxs-lookup"><span data-stu-id="fef91-446">Each element of `indexes` must have <xref:System.Linq.Expressions.Expression.Type%2A> equal to <xref:System.Int32>.</span></span> <span data-ttu-id="fef91-447"><xref:System.Linq.Expressions.Expression.Type%2A> Свойство `array` должен представлять тип массива, ранг которого совпадает с количеством элементов в `indexes`.</span><span class="sxs-lookup"><span data-stu-id="fef91-447">The <xref:System.Linq.Expressions.Expression.Type%2A> property of `array` must represent an array type whose rank matches the number of elements in `indexes`.</span></span>  
  
 <span data-ttu-id="fef91-448">Если ранг `array`. Тип — 1, этот метод возвращает <xref:System.Linq.Expressions.BinaryExpression>.</span><span class="sxs-lookup"><span data-stu-id="fef91-448">If the rank of `array`.Type is 1, this method returns a <xref:System.Linq.Expressions.BinaryExpression>.</span></span> <span data-ttu-id="fef91-449"><xref:System.Linq.Expressions.BinaryExpression.Left%2A> Свойству `array` и <xref:System.Linq.Expressions.BinaryExpression.Right%2A> свойству единственный элемент `indexes`.</span><span class="sxs-lookup"><span data-stu-id="fef91-449">The <xref:System.Linq.Expressions.BinaryExpression.Left%2A> property is set to `array` and the <xref:System.Linq.Expressions.BinaryExpression.Right%2A> property is set to the single element of `indexes`.</span></span> <span data-ttu-id="fef91-450"><xref:System.Linq.Expressions.Expression.Type%2A> Свойство <xref:System.Linq.Expressions.BinaryExpression> представляет тип элемента `array`. Тип.</span><span class="sxs-lookup"><span data-stu-id="fef91-450">The <xref:System.Linq.Expressions.Expression.Type%2A> property of the <xref:System.Linq.Expressions.BinaryExpression> represents the element type of `array`.Type.</span></span>  
  
 <span data-ttu-id="fef91-451">Если ранг `array`. Тип является более чем одним, этот метод возвращает <xref:System.Linq.Expressions.MethodCallExpression>.</span><span class="sxs-lookup"><span data-stu-id="fef91-451">If the rank of `array`.Type is more than one, this method returns a <xref:System.Linq.Expressions.MethodCallExpression>.</span></span> <span data-ttu-id="fef91-452"><xref:System.Linq.Expressions.MethodCallExpression.Method%2A> Свойству <xref:System.Reflection.MethodInfo> , описывающий метод открытого экземпляра `Get` на тип, представленный <xref:System.Linq.Expressions.Expression.Type%2A> свойство `array`.</span><span class="sxs-lookup"><span data-stu-id="fef91-452">The <xref:System.Linq.Expressions.MethodCallExpression.Method%2A> property is set to the <xref:System.Reflection.MethodInfo> that describes the public instance method `Get` on the type represented by the <xref:System.Linq.Expressions.Expression.Type%2A> property of `array`.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="fef91-453">Следующий пример демонстрирует, как использовать <xref:System.Linq.Expressions.Expression.ArrayIndex%28System.Linq.Expressions.Expression%2CSystem.Linq.Expressions.Expression%5B%5D%29> метод для создания <xref:System.Linq.Expressions.MethodCallExpression> , представляющий индексации в двумерный массив.</span><span class="sxs-lookup"><span data-stu-id="fef91-453">The following example demonstrates how to use the <xref:System.Linq.Expressions.Expression.ArrayIndex%28System.Linq.Expressions.Expression%2CSystem.Linq.Expressions.Expression%5B%5D%29> method to create a <xref:System.Linq.Expressions.MethodCallExpression> that represents indexing into a two-dimensional array.</span></span>  
  
 [!code-csharp[System.Linq.Expressions.Expression#3](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Linq.Expressions.Expression/CS/Expression.cs#3)]
 [!code-vb[System.Linq.Expressions.Expression#3](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Linq.Expressions.Expression/VB/Expression.vb#3)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="fef91-454">Значение параметра <paramref name="array" /> или <paramref name="indexes" /> — <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fef91-454">
              <paramref name="array" /> or <paramref name="indexes" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="fef91-455">Тип <paramref name="array" />.Type не представляет тип массива.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fef91-455">
              <paramref name="array" />.Type does not represent an array type.</span>
          </span>
          <span data-ttu-id="fef91-456">-или-</span>
          <span class="sxs-lookup">
            <span data-stu-id="fef91-456">-or-</span>
          </span>
          <span data-ttu-id="fef91-457">Ранг типа <paramref name="array" />.Type не соответствует количеству элементов в <paramref name="indexes" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fef91-457">The rank of <paramref name="array" />.Type does not match the number of elements in <paramref name="indexes" />.</span>
          </span>
          <span data-ttu-id="fef91-458">-или-</span>
          <span class="sxs-lookup">
            <span data-stu-id="fef91-458">-or-</span>
          </span>
          <span data-ttu-id="fef91-459">Свойство <see cref="P:System.Linq.Expressions.Expression.Type" /> одного или нескольких элементов <paramref name="indexes" /> не представляет тип <see cref="T:System.Int32" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fef91-459">The <see cref="P:System.Linq.Expressions.Expression.Type" /> property of one or more elements of <paramref name="indexes" /> does not represent the <see cref="T:System.Int32" /> type.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="ArrayIndex">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.BinaryExpression ArrayIndex (System.Linq.Expressions.Expression array, System.Linq.Expressions.Expression index);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.BinaryExpression ArrayIndex(class System.Linq.Expressions.Expression array, class System.Linq.Expressions.Expression index) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.ArrayIndex(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function ArrayIndex (array As Expression, index As Expression) As BinaryExpression" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Linq::Expressions::BinaryExpression ^ ArrayIndex(System::Linq::Expressions::Expression ^ array, System::Linq::Expressions::Expression ^ index);" />
      <MemberSignature Language="F#" Value="static member ArrayIndex : System.Linq.Expressions.Expression * System.Linq.Expressions.Expression -&gt; System.Linq.Expressions.BinaryExpression" Usage="System.Linq.Expressions.Expression.ArrayIndex (array, index)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.BinaryExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="array" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="index" Type="System.Linq.Expressions.Expression" />
      </Parameters>
      <Docs>
        <param name="array">
          <span data-ttu-id="fef91-460">Объект <see cref="T:System.Linq.Expressions.Expression" />, который следует задать в качестве значения свойства <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fef91-460">A <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> property equal to.</span>
          </span>
        </param>
        <param name="index">
          <span data-ttu-id="fef91-461">Объект <see cref="T:System.Linq.Expressions.Expression" />, который следует задать в качестве значения свойства <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fef91-461">A <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> property equal to.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="fef91-462">Создает <see cref="T:System.Linq.Expressions.BinaryExpression" />, представляющее применение оператора индекса массива к массиву ранга один.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fef91-462">Creates a <see cref="T:System.Linq.Expressions.BinaryExpression" /> that represents applying an array index operator to an array of rank one.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="fef91-463">Выражение <see cref="T:System.Linq.Expressions.BinaryExpression" /> со свойством<see cref="P:System.Linq.Expressions.Expression.NodeType" />, равным <see cref="F:System.Linq.Expressions.ExpressionType.ArrayIndex" />, и свойствами <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> и <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />, для которых заданы указанные значения.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fef91-463">A <see cref="T:System.Linq.Expressions.BinaryExpression" /> that has the <see cref="P:System.Linq.Expressions.Expression.NodeType" /> property equal to <see cref="F:System.Linq.Expressions.ExpressionType.ArrayIndex" /> and the <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> and <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> properties set to the specified values.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="fef91-464">`index` должен представлять индекс типа <xref:System.Int32>.</span><span class="sxs-lookup"><span data-stu-id="fef91-464">`index` must represent an index of type <xref:System.Int32>.</span></span>  
  
 <span data-ttu-id="fef91-465"><xref:System.Linq.Expressions.BinaryExpression.Method%2A> Результирующего <xref:System.Linq.Expressions.BinaryExpression> — `null`и оба <xref:System.Linq.Expressions.BinaryExpression.IsLifted%2A> и <xref:System.Linq.Expressions.BinaryExpression.IsLiftedToNull%2A> присваивается `false`.</span><span class="sxs-lookup"><span data-stu-id="fef91-465">The <xref:System.Linq.Expressions.BinaryExpression.Method%2A> property of the resulting <xref:System.Linq.Expressions.BinaryExpression> is `null`, and both <xref:System.Linq.Expressions.BinaryExpression.IsLifted%2A> and <xref:System.Linq.Expressions.BinaryExpression.IsLiftedToNull%2A> are set to `false`.</span></span> <span data-ttu-id="fef91-466"><xref:System.Linq.Expressions.Expression.Type%2A> Равно тип элемента `array`. Тип.</span><span class="sxs-lookup"><span data-stu-id="fef91-466">The <xref:System.Linq.Expressions.Expression.Type%2A> property is equal to the element type of `array`.Type.</span></span> <span data-ttu-id="fef91-467">Значение свойства <xref:System.Linq.Expressions.BinaryExpression.Conversion%2A> — `null`.</span><span class="sxs-lookup"><span data-stu-id="fef91-467">The <xref:System.Linq.Expressions.BinaryExpression.Conversion%2A> property is `null`.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="fef91-468">Значение параметра <paramref name="array" /> или <paramref name="index" /> — <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fef91-468">
              <paramref name="array" /> or <paramref name="index" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="fef91-469">Тип <paramref name="array" />.Type не представляет тип массива.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fef91-469">
              <paramref name="array" />.Type does not represent an array type.</span>
          </span>
          <span data-ttu-id="fef91-470">-или-</span>
          <span class="sxs-lookup">
            <span data-stu-id="fef91-470">-or-</span>
          </span>
          <span data-ttu-id="fef91-471">Тип <paramref name="array" />.Type представляет тип массива, ранг которого не равен 1.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fef91-471">
              <paramref name="array" />.Type represents an array type whose rank is not 1.</span>
          </span>
          <span data-ttu-id="fef91-472">-или-</span>
          <span class="sxs-lookup">
            <span data-stu-id="fef91-472">-or-</span>
          </span>
          <span data-ttu-id="fef91-473">Тип <paramref name="index" />.Type не представляет тип <see cref="T:System.Int32" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fef91-473">
              <paramref name="index" />.Type does not represent the <see cref="T:System.Int32" /> type.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="ArrayIndex">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.MethodCallExpression ArrayIndex (System.Linq.Expressions.Expression array, params System.Linq.Expressions.Expression[] indexes);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.MethodCallExpression ArrayIndex(class System.Linq.Expressions.Expression array, class System.Linq.Expressions.Expression[] indexes) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.ArrayIndex(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression[])" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function ArrayIndex (array As Expression, ParamArray indexes As Expression()) As MethodCallExpression" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Linq::Expressions::MethodCallExpression ^ ArrayIndex(System::Linq::Expressions::Expression ^ array, ... cli::array &lt;System::Linq::Expressions::Expression ^&gt; ^ indexes);" />
      <MemberSignature Language="F#" Value="static member ArrayIndex : System.Linq.Expressions.Expression * System.Linq.Expressions.Expression[] -&gt; System.Linq.Expressions.MethodCallExpression" Usage="System.Linq.Expressions.Expression.ArrayIndex (array, indexes)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.MethodCallExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="array" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="indexes" Type="System.Linq.Expressions.Expression[]">
          <Attributes>
            <Attribute>
              <AttributeName>System.ParamArray</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="array">
          <span data-ttu-id="fef91-474">Массив экземпляров <see cref="T:System.Linq.Expressions.Expression" />, которые являются индексами для операции индекса массива.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fef91-474">An array of <see cref="T:System.Linq.Expressions.Expression" /> instances - indexes for the array index operation.</span>
          </span>
        </param>
        <param name="indexes">
          <span data-ttu-id="fef91-475">Массив объектов <see cref="T:System.Linq.Expressions.Expression" /> для заполнения коллекции <see cref="P:System.Linq.Expressions.MethodCallExpression.Arguments" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fef91-475">An array of <see cref="T:System.Linq.Expressions.Expression" /> objects to use to populate the <see cref="P:System.Linq.Expressions.MethodCallExpression.Arguments" /> collection.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="fef91-476">Создает выражение <see cref="T:System.Linq.Expressions.MethodCallExpression" />, представляющее применение оператора индекса массива к многомерному массиву.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fef91-476">Creates a <see cref="T:System.Linq.Expressions.MethodCallExpression" /> that represents applying an array index operator to a multidimensional array.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="fef91-477">Выражение <see cref="T:System.Linq.Expressions.MethodCallExpression" /> со свойством<see cref="P:System.Linq.Expressions.Expression.NodeType" />, равным <see cref="F:System.Linq.Expressions.ExpressionType.Call" />, и свойствами <see cref="P:System.Linq.Expressions.MethodCallExpression.Object" /> и <see cref="P:System.Linq.Expressions.MethodCallExpression.Arguments" />, для которых заданы указанные значения.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fef91-477">A <see cref="T:System.Linq.Expressions.MethodCallExpression" /> that has the <see cref="P:System.Linq.Expressions.Expression.NodeType" /> property equal to <see cref="F:System.Linq.Expressions.ExpressionType.Call" /> and the <see cref="P:System.Linq.Expressions.MethodCallExpression.Object" /> and <see cref="P:System.Linq.Expressions.MethodCallExpression.Arguments" /> properties set to the specified values.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="fef91-478">Каждый элемент `indexes` должен иметь <xref:System.Linq.Expressions.Expression.Type%2A> равным <xref:System.Int32>.</span><span class="sxs-lookup"><span data-stu-id="fef91-478">Each element of `indexes` must have <xref:System.Linq.Expressions.Expression.Type%2A> equal to <xref:System.Int32>.</span></span> <span data-ttu-id="fef91-479"><xref:System.Linq.Expressions.Expression.Type%2A> Свойство `array` должен представлять тип массива, ранг которого совпадает с количеством элементов в `indexes`.</span><span class="sxs-lookup"><span data-stu-id="fef91-479">The <xref:System.Linq.Expressions.Expression.Type%2A> property of `array` must represent an array type whose rank matches the number of elements in `indexes`.</span></span>  
  
 <span data-ttu-id="fef91-480">Если ранг `array`. Тип — 1, этот метод возвращает <xref:System.Linq.Expressions.BinaryExpression>.</span><span class="sxs-lookup"><span data-stu-id="fef91-480">If the rank of `array`.Type is 1, this method returns a <xref:System.Linq.Expressions.BinaryExpression>.</span></span> <span data-ttu-id="fef91-481"><xref:System.Linq.Expressions.BinaryExpression.Left%2A> Свойству `array` и <xref:System.Linq.Expressions.BinaryExpression.Right%2A> свойству единственный элемент `indexes`.</span><span class="sxs-lookup"><span data-stu-id="fef91-481">The <xref:System.Linq.Expressions.BinaryExpression.Left%2A> property is set to `array` and the <xref:System.Linq.Expressions.BinaryExpression.Right%2A> property is set to the single element of `indexes`.</span></span> <span data-ttu-id="fef91-482"><xref:System.Linq.Expressions.Expression.Type%2A> Свойство <xref:System.Linq.Expressions.BinaryExpression> представляет тип элемента `array`. Тип.</span><span class="sxs-lookup"><span data-stu-id="fef91-482">The <xref:System.Linq.Expressions.Expression.Type%2A> property of the <xref:System.Linq.Expressions.BinaryExpression> represents the element type of `array`.Type.</span></span>  
  
 <span data-ttu-id="fef91-483">Если ранг `array`. Тип является более чем одним, этот метод возвращает <xref:System.Linq.Expressions.MethodCallExpression>.</span><span class="sxs-lookup"><span data-stu-id="fef91-483">If the rank of `array`.Type is more than one, this method returns a <xref:System.Linq.Expressions.MethodCallExpression>.</span></span> <span data-ttu-id="fef91-484"><xref:System.Linq.Expressions.MethodCallExpression.Method%2A> Свойству <xref:System.Reflection.MethodInfo> , описывающий метод открытого экземпляра `Get` на тип, представленный <xref:System.Linq.Expressions.Expression.Type%2A> свойство `array`.</span><span class="sxs-lookup"><span data-stu-id="fef91-484">The <xref:System.Linq.Expressions.MethodCallExpression.Method%2A> property is set to the <xref:System.Reflection.MethodInfo> that describes the public instance method `Get` on the type represented by the <xref:System.Linq.Expressions.Expression.Type%2A> property of `array`.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="fef91-485">Следующий пример демонстрирует, как использовать <xref:System.Linq.Expressions.Expression.ArrayIndex%28System.Linq.Expressions.Expression%2CSystem.Linq.Expressions.Expression%5B%5D%29> метод для создания <xref:System.Linq.Expressions.MethodCallExpression> , представляющий индексации в двумерный массив.</span><span class="sxs-lookup"><span data-stu-id="fef91-485">The following example demonstrates how to use the <xref:System.Linq.Expressions.Expression.ArrayIndex%28System.Linq.Expressions.Expression%2CSystem.Linq.Expressions.Expression%5B%5D%29> method to create a <xref:System.Linq.Expressions.MethodCallExpression> that represents indexing into a two-dimensional array.</span></span>  
  
 [!code-csharp[System.Linq.Expressions.Expression#3](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Linq.Expressions.Expression/CS/Expression.cs#3)]
 [!code-vb[System.Linq.Expressions.Expression#3](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Linq.Expressions.Expression/VB/Expression.vb#3)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="fef91-486">Значение параметра <paramref name="array" /> или <paramref name="indexes" /> — <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fef91-486">
              <paramref name="array" /> or <paramref name="indexes" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="fef91-487">Тип <paramref name="array" />.Type не представляет тип массива.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fef91-487">
              <paramref name="array" />.Type does not represent an array type.</span>
          </span>
          <span data-ttu-id="fef91-488">-или-</span>
          <span class="sxs-lookup">
            <span data-stu-id="fef91-488">-or-</span>
          </span>
          <span data-ttu-id="fef91-489">Ранг типа <paramref name="array" />.Type не соответствует количеству элементов в <paramref name="indexes" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fef91-489">The rank of <paramref name="array" />.Type does not match the number of elements in <paramref name="indexes" />.</span>
          </span>
          <span data-ttu-id="fef91-490">-или-</span>
          <span class="sxs-lookup">
            <span data-stu-id="fef91-490">-or-</span>
          </span>
          <span data-ttu-id="fef91-491">Свойство <see cref="P:System.Linq.Expressions.Expression.Type" /> одного или нескольких элементов <paramref name="indexes" /> не представляет тип <see cref="T:System.Int32" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fef91-491">The <see cref="P:System.Linq.Expressions.Expression.Type" /> property of one or more elements of <paramref name="indexes" /> does not represent the <see cref="T:System.Int32" /> type.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="ArrayLength">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.UnaryExpression ArrayLength (System.Linq.Expressions.Expression array);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.UnaryExpression ArrayLength(class System.Linq.Expressions.Expression array) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.ArrayLength(System.Linq.Expressions.Expression)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function ArrayLength (array As Expression) As UnaryExpression" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Linq::Expressions::UnaryExpression ^ ArrayLength(System::Linq::Expressions::Expression ^ array);" />
      <MemberSignature Language="F#" Value="static member ArrayLength : System.Linq.Expressions.Expression -&gt; System.Linq.Expressions.UnaryExpression" Usage="System.Linq.Expressions.Expression.ArrayLength array" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.UnaryExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="array" Type="System.Linq.Expressions.Expression" />
      </Parameters>
      <Docs>
        <param name="array">
          <span data-ttu-id="fef91-492">Объект <see cref="T:System.Linq.Expressions.Expression" />, который следует задать в качестве значения свойства <see cref="P:System.Linq.Expressions.UnaryExpression.Operand" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fef91-492">An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.UnaryExpression.Operand" /> property equal to.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="fef91-493">Создает выражение <see cref="T:System.Linq.Expressions.UnaryExpression" /> для получения длины одномерного массива.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fef91-493">Creates a <see cref="T:System.Linq.Expressions.UnaryExpression" /> that represents an expression for obtaining the length of a one-dimensional array.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="fef91-494">Выражение <see cref="T:System.Linq.Expressions.UnaryExpression" />, содержащее свойство <see cref="P:System.Linq.Expressions.Expression.NodeType" />, равное <see cref="F:System.Linq.Expressions.ExpressionType.ArrayLength" />, и свойство <see cref="P:System.Linq.Expressions.UnaryExpression.Operand" />, равное <paramref name="array" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fef91-494">A <see cref="T:System.Linq.Expressions.UnaryExpression" /> that has the <see cref="P:System.Linq.Expressions.Expression.NodeType" /> property equal to <see cref="F:System.Linq.Expressions.ExpressionType.ArrayLength" /> and the <see cref="P:System.Linq.Expressions.UnaryExpression.Operand" /> property equal to <paramref name="array" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="fef91-495"><xref:System.Linq.Expressions.Expression.Type%2A> Свойство `array` должен представлять тип массива.</span><span class="sxs-lookup"><span data-stu-id="fef91-495">The <xref:System.Linq.Expressions.Expression.Type%2A> property of `array` must represent an array type.</span></span>  
  
 <span data-ttu-id="fef91-496"><xref:System.Linq.Expressions.Expression.Type%2A> Результирующего <xref:System.Linq.Expressions.UnaryExpression> равен <xref:System.Int32>.</span><span class="sxs-lookup"><span data-stu-id="fef91-496">The <xref:System.Linq.Expressions.Expression.Type%2A> property of the resulting <xref:System.Linq.Expressions.UnaryExpression> is equal to <xref:System.Int32>.</span></span> <span data-ttu-id="fef91-497"><xref:System.Linq.Expressions.UnaryExpression.Method%2A> Свойство `null`и оба <xref:System.Linq.Expressions.UnaryExpression.IsLifted%2A> и <xref:System.Linq.Expressions.UnaryExpression.IsLiftedToNull%2A> присваивается `false`.</span><span class="sxs-lookup"><span data-stu-id="fef91-497">The <xref:System.Linq.Expressions.UnaryExpression.Method%2A> property is `null`, and both <xref:System.Linq.Expressions.UnaryExpression.IsLifted%2A> and <xref:System.Linq.Expressions.UnaryExpression.IsLiftedToNull%2A> are set to `false`.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="fef91-498">
            <paramref name="array" /> — <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fef91-498">
              <paramref name="array" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="fef91-499">Тип <paramref name="array" />.Type не представляет тип массива.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fef91-499">
              <paramref name="array" />.Type does not represent an array type.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="Assign">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.BinaryExpression Assign (System.Linq.Expressions.Expression left, System.Linq.Expressions.Expression right);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.BinaryExpression Assign(class System.Linq.Expressions.Expression left, class System.Linq.Expressions.Expression right) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.Assign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Assign (left As Expression, right As Expression) As BinaryExpression" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Linq::Expressions::BinaryExpression ^ Assign(System::Linq::Expressions::Expression ^ left, System::Linq::Expressions::Expression ^ right);" />
      <MemberSignature Language="F#" Value="static member Assign : System.Linq.Expressions.Expression * System.Linq.Expressions.Expression -&gt; System.Linq.Expressions.BinaryExpression" Usage="System.Linq.Expressions.Expression.Assign (left, right)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.BinaryExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="left" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="right" Type="System.Linq.Expressions.Expression" />
      </Parameters>
      <Docs>
        <param name="left">
          <span data-ttu-id="fef91-500">Объект <see cref="T:System.Linq.Expressions.Expression" />, который следует задать в качестве значения свойства <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fef91-500">An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> property equal to.</span>
          </span>
        </param>
        <param name="right">
          <span data-ttu-id="fef91-501">Объект <see cref="T:System.Linq.Expressions.Expression" />, который следует задать в качестве значения свойства <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fef91-501">An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> property equal to.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="fef91-502">Создает выражение <see cref="T:System.Linq.Expressions.BinaryExpression" />, представляющее операцию присваивания.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fef91-502">Creates a <see cref="T:System.Linq.Expressions.BinaryExpression" /> that represents an assignment operation.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="fef91-503">Выражение <see cref="T:System.Linq.Expressions.BinaryExpression" /> со свойством<see cref="P:System.Linq.Expressions.Expression.NodeType" />, равным <see cref="F:System.Linq.Expressions.ExpressionType.Assign" />, и свойствами <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> и <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />, для которых заданы указанные значения.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fef91-503">A <see cref="T:System.Linq.Expressions.BinaryExpression" /> that has the <see cref="P:System.Linq.Expressions.Expression.NodeType" /> property equal to <see cref="F:System.Linq.Expressions.ExpressionType.Assign" /> and the <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> and <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> properties set to the specified values.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="fef91-504">`Assign` Выражение копирует значение для типов значений, а также копирует ссылку для ссылочных типов.</span><span class="sxs-lookup"><span data-stu-id="fef91-504">The `Assign` expression copies a value for value types, and it copies a reference for reference types.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="fef91-505">В следующем примере кода показано, как создать выражение, представляющее операцию присваивания.</span><span class="sxs-lookup"><span data-stu-id="fef91-505">The following code example shows how to create an expression that represents an assignment operation.</span></span>  
  
 [!code-csharp[System.Linq.Expressions.ExpressionDev10#12](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.linq.expressions.expressiondev10/cs/program.cs#12)]
 [!code-vb[System.Linq.Expressions.ExpressionDev10#12](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.linq.expressions.expressiondev10/vb/module1.vb#12)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="Bind">
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="fef91-506">Создает <see cref="T:System.Linq.Expressions.MemberAssignment" />, который представляет инициализацию элемента.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fef91-506">Creates a <see cref="T:System.Linq.Expressions.MemberAssignment" /> that represents the initialization of a member.</span>
          </span>
        </summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Bind">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.MemberAssignment Bind (System.Reflection.MemberInfo member, System.Linq.Expressions.Expression expression);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.MemberAssignment Bind(class System.Reflection.MemberInfo member, class System.Linq.Expressions.Expression expression) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.Bind(System.Reflection.MemberInfo,System.Linq.Expressions.Expression)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Linq::Expressions::MemberAssignment ^ Bind(System::Reflection::MemberInfo ^ member, System::Linq::Expressions::Expression ^ expression);" />
      <MemberSignature Language="F#" Value="static member Bind : System.Reflection.MemberInfo * System.Linq.Expressions.Expression -&gt; System.Linq.Expressions.MemberAssignment" Usage="System.Linq.Expressions.Expression.Bind (member, expression)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.MemberAssignment</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="member" Type="System.Reflection.MemberInfo" />
        <Parameter Name="expression" Type="System.Linq.Expressions.Expression" />
      </Parameters>
      <Docs>
        <param name="member">
          <span data-ttu-id="fef91-507">Объект <see cref="T:System.Reflection.MemberInfo" />, который следует задать в качестве значения свойства <see cref="P:System.Linq.Expressions.MemberBinding.Member" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fef91-507">A <see cref="T:System.Reflection.MemberInfo" /> to set the <see cref="P:System.Linq.Expressions.MemberBinding.Member" /> property equal to.</span>
          </span>
        </param>
        <param name="expression">
          <span data-ttu-id="fef91-508">Объект <see cref="T:System.Linq.Expressions.Expression" />, который следует задать в качестве значения свойства <see cref="P:System.Linq.Expressions.MemberAssignment.Expression" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fef91-508">An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.MemberAssignment.Expression" /> property equal to.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="fef91-509">Создает <see cref="T:System.Linq.Expressions.MemberAssignment" />, который представляет инициализацию поля или свойства.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fef91-509">Creates a <see cref="T:System.Linq.Expressions.MemberAssignment" /> that represents the initialization of a field or property.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="fef91-510">Выражение <see cref="T:System.Linq.Expressions.MemberAssignment" />, содержащее свойство <see cref="P:System.Linq.Expressions.MemberBinding.BindingType" />, равное <see cref="F:System.Linq.Expressions.MemberBindingType.Assignment" /> и <see cref="P:System.Linq.Expressions.MemberBinding.Member" />, и свойства <see cref="P:System.Linq.Expressions.MemberAssignment.Expression" />, для которых заданы указанные значения.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fef91-510">A <see cref="T:System.Linq.Expressions.MemberAssignment" /> that has <see cref="P:System.Linq.Expressions.MemberBinding.BindingType" /> equal to <see cref="F:System.Linq.Expressions.MemberBindingType.Assignment" /> and the <see cref="P:System.Linq.Expressions.MemberBinding.Member" /> and <see cref="P:System.Linq.Expressions.MemberAssignment.Expression" /> properties set to the specified values.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="fef91-511"><xref:System.Linq.Expressions.Expression.Type%2A> Свойство `expression` должен быть назначен типу, представленному <xref:System.Reflection.FieldInfo.FieldType%2A> или <xref:System.Reflection.PropertyInfo.PropertyType%2A> свойство `member`.</span><span class="sxs-lookup"><span data-stu-id="fef91-511">The <xref:System.Linq.Expressions.Expression.Type%2A> property of `expression` must be assignable to the type represented by the <xref:System.Reflection.FieldInfo.FieldType%2A> or <xref:System.Reflection.PropertyInfo.PropertyType%2A> property of `member`.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="fef91-512">Значение параметра <paramref name="member" /> или <paramref name="expression" /> — <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fef91-512">
              <paramref name="member" /> or <paramref name="expression" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="fef91-513">
            <paramref name="member" /> не представляет поле или свойство.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fef91-513">
              <paramref name="member" /> does not represent a field or property.</span>
          </span>
          <span data-ttu-id="fef91-514">-или-</span>
          <span class="sxs-lookup">
            <span data-stu-id="fef91-514">-or-</span>
          </span>
          <span data-ttu-id="fef91-515">Свойство, представленное <paramref name="member" />, не обладает доступа <see langword="set" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fef91-515">The property represented by <paramref name="member" /> does not have a <see langword="set" /> accessor.</span>
          </span>
          <span data-ttu-id="fef91-516">-или-</span>
          <span class="sxs-lookup">
            <span data-stu-id="fef91-516">-or-</span>
          </span>
          <span data-ttu-id="fef91-517">Тип <paramref name="expression" />.Type не может быть назначен типу поля или свойства, который представляет <paramref name="member" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fef91-517">
              <paramref name="expression" />.Type is not assignable to the type of the field or property that <paramref name="member" /> represents.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="Bind">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.MemberAssignment Bind (System.Reflection.MethodInfo propertyAccessor, System.Linq.Expressions.Expression expression);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.MemberAssignment Bind(class System.Reflection.MethodInfo propertyAccessor, class System.Linq.Expressions.Expression expression) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.Bind(System.Reflection.MethodInfo,System.Linq.Expressions.Expression)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Linq::Expressions::MemberAssignment ^ Bind(System::Reflection::MethodInfo ^ propertyAccessor, System::Linq::Expressions::Expression ^ expression);" />
      <MemberSignature Language="F#" Value="static member Bind : System.Reflection.MethodInfo * System.Linq.Expressions.Expression -&gt; System.Linq.Expressions.MemberAssignment" Usage="System.Linq.Expressions.Expression.Bind (propertyAccessor, expression)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.MemberAssignment</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="propertyAccessor" Type="System.Reflection.MethodInfo" />
        <Parameter Name="expression" Type="System.Linq.Expressions.Expression" />
      </Parameters>
      <Docs>
        <param name="propertyAccessor">
          <span data-ttu-id="fef91-518">
            <see cref="T:System.Reflection.MethodInfo" />, представляющий метод доступа свойства.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fef91-518">A <see cref="T:System.Reflection.MethodInfo" /> that represents a property accessor method.</span>
          </span>
        </param>
        <param name="expression">
          <span data-ttu-id="fef91-519">Объект <see cref="T:System.Linq.Expressions.Expression" />, который следует задать в качестве значения свойства <see cref="P:System.Linq.Expressions.MemberAssignment.Expression" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fef91-519">An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.MemberAssignment.Expression" /> property equal to.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="fef91-520">Создает объект <see cref="T:System.Linq.Expressions.MemberAssignment" />, который представляет инициализацию члена с помощью метода доступа к свойству.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fef91-520">Creates a <see cref="T:System.Linq.Expressions.MemberAssignment" /> that represents the initialization of a member by using a property accessor method.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="fef91-521">Выражение <see cref="T:System.Linq.Expressions.MemberAssignment" />, содержащее свойство <see cref="P:System.Linq.Expressions.MemberBinding.BindingType" />, равное <see cref="F:System.Linq.Expressions.MemberBindingType.Assignment" />, свойству <see cref="P:System.Linq.Expressions.MemberBinding.Member" /> присвоено значение <see cref="T:System.Reflection.PropertyInfo" />, представляющее свойство, доступ к которому осуществляется в <paramref name="propertyAccessor" />, и свойство <see cref="P:System.Linq.Expressions.MemberAssignment.Expression" />, для которого задано значение <paramref name="expression" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fef91-521">A <see cref="T:System.Linq.Expressions.MemberAssignment" /> that has the <see cref="P:System.Linq.Expressions.MemberBinding.BindingType" /> property equal to <see cref="F:System.Linq.Expressions.MemberBindingType.Assignment" />, the <see cref="P:System.Linq.Expressions.MemberBinding.Member" /> property set to the <see cref="T:System.Reflection.PropertyInfo" /> that represents the property accessed in <paramref name="propertyAccessor" />, and the <see cref="P:System.Linq.Expressions.MemberAssignment.Expression" /> property set to <paramref name="expression" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="fef91-522"><xref:System.Linq.Expressions.Expression.Type%2A> Свойство `expression` должен быть назначен типу, представленному <xref:System.Reflection.PropertyInfo.PropertyType%2A> свойство свойство с доступом в `propertyAccessor`.</span><span class="sxs-lookup"><span data-stu-id="fef91-522">The <xref:System.Linq.Expressions.Expression.Type%2A> property of `expression` must be assignable to the type represented by the <xref:System.Reflection.PropertyInfo.PropertyType%2A> property of the property accessed in `propertyAccessor`.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="fef91-523">Значение параметра <paramref name="propertyAccessor" /> или <paramref name="expression" /> — <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fef91-523">
              <paramref name="propertyAccessor" /> or <paramref name="expression" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="fef91-524">
            <paramref name="propertyAccessor" /> не представляет метод доступа к свойству.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fef91-524">
              <paramref name="propertyAccessor" /> does not represent a property accessor method.</span>
          </span>
          <span data-ttu-id="fef91-525">-или-</span>
          <span class="sxs-lookup">
            <span data-stu-id="fef91-525">-or-</span>
          </span>
          <span data-ttu-id="fef91-526">В свойстве, доступ к которому осуществляется с помощью параметра <paramref name="propertyAccessor" />, отсутствует метод доступа <see langword="set" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fef91-526">The property accessed by <paramref name="propertyAccessor" /> does not have a <see langword="set" /> accessor.</span>
          </span>
          <span data-ttu-id="fef91-527">-или-</span>
          <span class="sxs-lookup">
            <span data-stu-id="fef91-527">-or-</span>
          </span>
          <span data-ttu-id="fef91-528">Тип <paramref name="expression" />.Type не может быть назначен типу поля или свойства, который представляет <paramref name="member" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fef91-528">
              <paramref name="expression" />.Type is not assignable to the type of the field or property that <paramref name="member" /> represents.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <MemberGroup MemberName="Block">
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="fef91-529">Создает буфер <see cref="T:System.Linq.Expressions.BlockExpression" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fef91-529">Creates a <see cref="T:System.Linq.Expressions.BlockExpression" />.</span>
          </span>
        </summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Block">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.BlockExpression Block (System.Collections.Generic.IEnumerable&lt;System.Linq.Expressions.Expression&gt; expressions);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.BlockExpression Block(class System.Collections.Generic.IEnumerable`1&lt;class System.Linq.Expressions.Expression&gt; expressions) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.Block(System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression})" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Block (expressions As IEnumerable(Of Expression)) As BlockExpression" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Linq::Expressions::BlockExpression ^ Block(System::Collections::Generic::IEnumerable&lt;System::Linq::Expressions::Expression ^&gt; ^ expressions);" />
      <MemberSignature Language="F#" Value="static member Block : seq&lt;System.Linq.Expressions.Expression&gt; -&gt; System.Linq.Expressions.BlockExpression" Usage="System.Linq.Expressions.Expression.Block expressions" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.BlockExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="expressions" Type="System.Collections.Generic.IEnumerable&lt;System.Linq.Expressions.Expression&gt;" />
      </Parameters>
      <Docs>
        <param name="expressions">
          <span data-ttu-id="fef91-530">Выражения в блоке.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fef91-530">The expressions in the block.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="fef91-531">Создает объект <see cref="T:System.Linq.Expressions.BlockExpression" />, содержащий заданные выражения и не содержащий переменных.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fef91-531">Creates a <see cref="T:System.Linq.Expressions.BlockExpression" /> that contains the given expressions and has no variables.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="fef91-532">Созданный <see cref="T:System.Linq.Expressions.BlockExpression" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fef91-532">The created <see cref="T:System.Linq.Expressions.BlockExpression" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="fef91-533">При выполнении блока выражения возвращается значение последнего выражения в блоке.</span><span class="sxs-lookup"><span data-stu-id="fef91-533">When the block expression is executed, it returns the value of the last expression in the block.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Block">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.BlockExpression Block (params System.Linq.Expressions.Expression[] expressions);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.BlockExpression Block(class System.Linq.Expressions.Expression[] expressions) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.Block(System.Linq.Expressions.Expression[])" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Block (ParamArray expressions As Expression()) As BlockExpression" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Linq::Expressions::BlockExpression ^ Block(... cli::array &lt;System::Linq::Expressions::Expression ^&gt; ^ expressions);" />
      <MemberSignature Language="F#" Value="static member Block : System.Linq.Expressions.Expression[] -&gt; System.Linq.Expressions.BlockExpression" Usage="System.Linq.Expressions.Expression.Block expressions" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.BlockExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="expressions" Type="System.Linq.Expressions.Expression[]">
          <Attributes>
            <Attribute>
              <AttributeName>System.ParamArray</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="expressions">
          <span data-ttu-id="fef91-534">Выражения в блоке.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fef91-534">The expressions in the block.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="fef91-535">Создает объект <see cref="T:System.Linq.Expressions.BlockExpression" />, содержащий заданные выражения и не содержащий переменных.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fef91-535">Creates a <see cref="T:System.Linq.Expressions.BlockExpression" /> that contains the given expressions and has no variables.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="fef91-536">Созданный <see cref="T:System.Linq.Expressions.BlockExpression" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fef91-536">The created <see cref="T:System.Linq.Expressions.BlockExpression" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="fef91-537">При выполнении блока выражения возвращается значение последнего выражения в блоке.</span><span class="sxs-lookup"><span data-stu-id="fef91-537">When the block expression is executed, it returns the value of the last expression in the block.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="fef91-538">В следующем примере кода показано, как создать выражение блока.</span><span class="sxs-lookup"><span data-stu-id="fef91-538">The following code example shows how to create a block expression.</span></span> <span data-ttu-id="fef91-539">Блокировать выражение состоит из двух <xref:System.Linq.Expressions.MethodCallExpression> объектов и второй <xref:System.Linq.Expressions.ConstantExpression> объекта.</span><span class="sxs-lookup"><span data-stu-id="fef91-539">The block expression consists of two <xref:System.Linq.Expressions.MethodCallExpression> objects and one <xref:System.Linq.Expressions.ConstantExpression> object.</span></span>  
  
 [!code-csharp[System.Linq.Expressions.ExpressionDev10#13](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.linq.expressions.expressiondev10/cs/program.cs#13)]
 [!code-vb[System.Linq.Expressions.ExpressionDev10#13](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.linq.expressions.expressiondev10/vb/module1.vb#13)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Block">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.BlockExpression Block (System.Collections.Generic.IEnumerable&lt;System.Linq.Expressions.ParameterExpression&gt; variables, System.Collections.Generic.IEnumerable&lt;System.Linq.Expressions.Expression&gt; expressions);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.BlockExpression Block(class System.Collections.Generic.IEnumerable`1&lt;class System.Linq.Expressions.ParameterExpression&gt; variables, class System.Collections.Generic.IEnumerable`1&lt;class System.Linq.Expressions.Expression&gt; expressions) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.Block(System.Collections.Generic.IEnumerable{System.Linq.Expressions.ParameterExpression},System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression})" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Block (variables As IEnumerable(Of ParameterExpression), expressions As IEnumerable(Of Expression)) As BlockExpression" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Linq::Expressions::BlockExpression ^ Block(System::Collections::Generic::IEnumerable&lt;System::Linq::Expressions::ParameterExpression ^&gt; ^ variables, System::Collections::Generic::IEnumerable&lt;System::Linq::Expressions::Expression ^&gt; ^ expressions);" />
      <MemberSignature Language="F#" Value="static member Block : seq&lt;System.Linq.Expressions.ParameterExpression&gt; * seq&lt;System.Linq.Expressions.Expression&gt; -&gt; System.Linq.Expressions.BlockExpression" Usage="System.Linq.Expressions.Expression.Block (variables, expressions)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.BlockExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="variables" Type="System.Collections.Generic.IEnumerable&lt;System.Linq.Expressions.ParameterExpression&gt;" />
        <Parameter Name="expressions" Type="System.Collections.Generic.IEnumerable&lt;System.Linq.Expressions.Expression&gt;" />
      </Parameters>
      <Docs>
        <param name="variables">
          <span data-ttu-id="fef91-540">Переменные в блоке.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fef91-540">The variables in the block.</span>
          </span>
        </param>
        <param name="expressions">
          <span data-ttu-id="fef91-541">Выражения в блоке.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fef91-541">The expressions in the block.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="fef91-542">Создает выражение <see cref="T:System.Linq.Expressions.BlockExpression" />, содержащее указанные переменные и выражения.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fef91-542">Creates a <see cref="T:System.Linq.Expressions.BlockExpression" /> that contains the given variables and expressions.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="fef91-543">Созданный <see cref="T:System.Linq.Expressions.BlockExpression" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fef91-543">The created <see cref="T:System.Linq.Expressions.BlockExpression" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="fef91-544">При выполнении блока выражения возвращается значение последнего выражения в блоке.</span><span class="sxs-lookup"><span data-stu-id="fef91-544">When the block expression is executed, it returns the value of the last expression in the block.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="fef91-545">В следующем примере кода показано, как передавать параметр выражения блока и обрабатывает этот параметр в пределах блока.</span><span class="sxs-lookup"><span data-stu-id="fef91-545">The following code example shows how to pass a parameter to a block expression and process this parameter within a block.</span></span>  
  
 [!code-csharp[System.Linq.Expressions.ExpressionDev10#14](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.linq.expressions.expressiondev10/cs/program.cs#14)]
 [!code-vb[System.Linq.Expressions.ExpressionDev10#14](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.linq.expressions.expressiondev10/vb/module1.vb#14)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Block">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.BlockExpression Block (System.Collections.Generic.IEnumerable&lt;System.Linq.Expressions.ParameterExpression&gt; variables, params System.Linq.Expressions.Expression[] expressions);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.BlockExpression Block(class System.Collections.Generic.IEnumerable`1&lt;class System.Linq.Expressions.ParameterExpression&gt; variables, class System.Linq.Expressions.Expression[] expressions) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.Block(System.Collections.Generic.IEnumerable{System.Linq.Expressions.ParameterExpression},System.Linq.Expressions.Expression[])" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Block (variables As IEnumerable(Of ParameterExpression), ParamArray expressions As Expression()) As BlockExpression" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Linq::Expressions::BlockExpression ^ Block(System::Collections::Generic::IEnumerable&lt;System::Linq::Expressions::ParameterExpression ^&gt; ^ variables, ... cli::array &lt;System::Linq::Expressions::Expression ^&gt; ^ expressions);" />
      <MemberSignature Language="F#" Value="static member Block : seq&lt;System.Linq.Expressions.ParameterExpression&gt; * System.Linq.Expressions.Expression[] -&gt; System.Linq.Expressions.BlockExpression" Usage="System.Linq.Expressions.Expression.Block (variables, expressions)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.BlockExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="variables" Type="System.Collections.Generic.IEnumerable&lt;System.Linq.Expressions.ParameterExpression&gt;" />
        <Parameter Name="expressions" Type="System.Linq.Expressions.Expression[]">
          <Attributes>
            <Attribute>
              <AttributeName>System.ParamArray</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="variables">
          <span data-ttu-id="fef91-546">Переменные в блоке.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fef91-546">The variables in the block.</span>
          </span>
        </param>
        <param name="expressions">
          <span data-ttu-id="fef91-547">Выражения в блоке.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fef91-547">The expressions in the block.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="fef91-548">Создает выражение <see cref="T:System.Linq.Expressions.BlockExpression" />, содержащее указанные переменные и выражения.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fef91-548">Creates a <see cref="T:System.Linq.Expressions.BlockExpression" /> that contains the given variables and expressions.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="fef91-549">Созданный <see cref="T:System.Linq.Expressions.BlockExpression" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fef91-549">The created <see cref="T:System.Linq.Expressions.BlockExpression" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="fef91-550">При выполнении блока выражения возвращается значение последнего выражения в блоке.</span><span class="sxs-lookup"><span data-stu-id="fef91-550">When the block expression is executed, it returns the value of the last expression in the block.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Block">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.BlockExpression Block (System.Linq.Expressions.Expression arg0, System.Linq.Expressions.Expression arg1);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.BlockExpression Block(class System.Linq.Expressions.Expression arg0, class System.Linq.Expressions.Expression arg1) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.Block(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Block (arg0 As Expression, arg1 As Expression) As BlockExpression" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Linq::Expressions::BlockExpression ^ Block(System::Linq::Expressions::Expression ^ arg0, System::Linq::Expressions::Expression ^ arg1);" />
      <MemberSignature Language="F#" Value="static member Block : System.Linq.Expressions.Expression * System.Linq.Expressions.Expression -&gt; System.Linq.Expressions.BlockExpression" Usage="System.Linq.Expressions.Expression.Block (arg0, arg1)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.BlockExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="arg0" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="arg1" Type="System.Linq.Expressions.Expression" />
      </Parameters>
      <Docs>
        <param name="arg0">
          <span data-ttu-id="fef91-551">Первое выражение в блоке.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fef91-551">The first expression in the block.</span>
          </span>
        </param>
        <param name="arg1">
          <span data-ttu-id="fef91-552">Второе выражение в блоке.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fef91-552">The second expression in the block.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="fef91-553">Создает выражение <see cref="T:System.Linq.Expressions.BlockExpression" />, содержащее два выражения и не содержащее переменных.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fef91-553">Creates a <see cref="T:System.Linq.Expressions.BlockExpression" /> that contains two expressions and has no variables.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="fef91-554">Созданный <see cref="T:System.Linq.Expressions.BlockExpression" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fef91-554">The created <see cref="T:System.Linq.Expressions.BlockExpression" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="fef91-555">При выполнении блока выражения возвращается значение последнего выражения в блоке.</span><span class="sxs-lookup"><span data-stu-id="fef91-555">When the block expression is executed, it returns the value of the last expression in the block.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Block">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.BlockExpression Block (Type type, System.Collections.Generic.IEnumerable&lt;System.Linq.Expressions.Expression&gt; expressions);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.BlockExpression Block(class System.Type type, class System.Collections.Generic.IEnumerable`1&lt;class System.Linq.Expressions.Expression&gt; expressions) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.Block(System.Type,System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression})" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Linq::Expressions::BlockExpression ^ Block(Type ^ type, System::Collections::Generic::IEnumerable&lt;System::Linq::Expressions::Expression ^&gt; ^ expressions);" />
      <MemberSignature Language="F#" Value="static member Block : Type * seq&lt;System.Linq.Expressions.Expression&gt; -&gt; System.Linq.Expressions.BlockExpression" Usage="System.Linq.Expressions.Expression.Block (type, expressions)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.BlockExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="type" Type="System.Type" />
        <Parameter Name="expressions" Type="System.Collections.Generic.IEnumerable&lt;System.Linq.Expressions.Expression&gt;" />
      </Parameters>
      <Docs>
        <param name="type">
          <span data-ttu-id="fef91-556">Тип результата блока.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fef91-556">The result type of the block.</span>
          </span>
        </param>
        <param name="expressions">
          <span data-ttu-id="fef91-557">Выражения в блоке.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fef91-557">The expressions in the block.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="fef91-558">Создает выражение <see cref="T:System.Linq.Expressions.BlockExpression" />, содержащее данные выражения, не содержащее переменных и имеющее конкретный тип результатов.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fef91-558">Creates a <see cref="T:System.Linq.Expressions.BlockExpression" /> that contains the given expressions, has no variables and has specific result type.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="fef91-559">Созданный <see cref="T:System.Linq.Expressions.BlockExpression" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fef91-559">The created <see cref="T:System.Linq.Expressions.BlockExpression" />.</span>
          </span>
        </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Block">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.BlockExpression Block (Type type, params System.Linq.Expressions.Expression[] expressions);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.BlockExpression Block(class System.Type type, class System.Linq.Expressions.Expression[] expressions) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.Block(System.Type,System.Linq.Expressions.Expression[])" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Linq::Expressions::BlockExpression ^ Block(Type ^ type, ... cli::array &lt;System::Linq::Expressions::Expression ^&gt; ^ expressions);" />
      <MemberSignature Language="F#" Value="static member Block : Type * System.Linq.Expressions.Expression[] -&gt; System.Linq.Expressions.BlockExpression" Usage="System.Linq.Expressions.Expression.Block (type, expressions)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.BlockExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="type" Type="System.Type" />
        <Parameter Name="expressions" Type="System.Linq.Expressions.Expression[]">
          <Attributes>
            <Attribute>
              <AttributeName>System.ParamArray</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="type">
          <span data-ttu-id="fef91-560">Тип результата блока.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fef91-560">The result type of the block.</span>
          </span>
        </param>
        <param name="expressions">
          <span data-ttu-id="fef91-561">Выражения в блоке.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fef91-561">The expressions in the block.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="fef91-562">Создает выражение <see cref="T:System.Linq.Expressions.BlockExpression" />, содержащее данные выражения, не содержащее переменных и имеющее конкретный тип результатов.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fef91-562">Creates a <see cref="T:System.Linq.Expressions.BlockExpression" /> that contains the given expressions, has no variables and has specific result type.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="fef91-563">Созданный <see cref="T:System.Linq.Expressions.BlockExpression" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fef91-563">The created <see cref="T:System.Linq.Expressions.BlockExpression" />.</span>
          </span>
        </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Block">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.BlockExpression Block (System.Linq.Expressions.Expression arg0, System.Linq.Expressions.Expression arg1, System.Linq.Expressions.Expression arg2);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.BlockExpression Block(class System.Linq.Expressions.Expression arg0, class System.Linq.Expressions.Expression arg1, class System.Linq.Expressions.Expression arg2) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.Block(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Block (arg0 As Expression, arg1 As Expression, arg2 As Expression) As BlockExpression" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Linq::Expressions::BlockExpression ^ Block(System::Linq::Expressions::Expression ^ arg0, System::Linq::Expressions::Expression ^ arg1, System::Linq::Expressions::Expression ^ arg2);" />
      <MemberSignature Language="F#" Value="static member Block : System.Linq.Expressions.Expression * System.Linq.Expressions.Expression * System.Linq.Expressions.Expression -&gt; System.Linq.Expressions.BlockExpression" Usage="System.Linq.Expressions.Expression.Block (arg0, arg1, arg2)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.BlockExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="arg0" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="arg1" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="arg2" Type="System.Linq.Expressions.Expression" />
      </Parameters>
      <Docs>
        <param name="arg0">
          <span data-ttu-id="fef91-564">Первое выражение в блоке.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fef91-564">The first expression in the block.</span>
          </span>
        </param>
        <param name="arg1">
          <span data-ttu-id="fef91-565">Второе выражение в блоке.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fef91-565">The second expression in the block.</span>
          </span>
        </param>
        <param name="arg2">
          <span data-ttu-id="fef91-566">Третье выражение в блоке.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fef91-566">The third expression in the block.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="fef91-567">Создает выражение <see cref="T:System.Linq.Expressions.BlockExpression" />, содержащее три выражения и не содержащее переменных.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fef91-567">Creates a <see cref="T:System.Linq.Expressions.BlockExpression" /> that contains three expressions and has no variables.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="fef91-568">Созданный <see cref="T:System.Linq.Expressions.BlockExpression" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fef91-568">The created <see cref="T:System.Linq.Expressions.BlockExpression" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="fef91-569">При выполнении блока выражения возвращается значение последнего выражения в блоке.</span><span class="sxs-lookup"><span data-stu-id="fef91-569">When the block expression is executed, it returns the value of the last expression in the block.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Block">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.BlockExpression Block (Type type, System.Collections.Generic.IEnumerable&lt;System.Linq.Expressions.ParameterExpression&gt; variables, System.Collections.Generic.IEnumerable&lt;System.Linq.Expressions.Expression&gt; expressions);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.BlockExpression Block(class System.Type type, class System.Collections.Generic.IEnumerable`1&lt;class System.Linq.Expressions.ParameterExpression&gt; variables, class System.Collections.Generic.IEnumerable`1&lt;class System.Linq.Expressions.Expression&gt; expressions) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.Block(System.Type,System.Collections.Generic.IEnumerable{System.Linq.Expressions.ParameterExpression},System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression})" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Linq::Expressions::BlockExpression ^ Block(Type ^ type, System::Collections::Generic::IEnumerable&lt;System::Linq::Expressions::ParameterExpression ^&gt; ^ variables, System::Collections::Generic::IEnumerable&lt;System::Linq::Expressions::Expression ^&gt; ^ expressions);" />
      <MemberSignature Language="F#" Value="static member Block : Type * seq&lt;System.Linq.Expressions.ParameterExpression&gt; * seq&lt;System.Linq.Expressions.Expression&gt; -&gt; System.Linq.Expressions.BlockExpression" Usage="System.Linq.Expressions.Expression.Block (type, variables, expressions)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.BlockExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="type" Type="System.Type" />
        <Parameter Name="variables" Type="System.Collections.Generic.IEnumerable&lt;System.Linq.Expressions.ParameterExpression&gt;" />
        <Parameter Name="expressions" Type="System.Collections.Generic.IEnumerable&lt;System.Linq.Expressions.Expression&gt;" />
      </Parameters>
      <Docs>
        <param name="type">
          <span data-ttu-id="fef91-570">Тип результата блока.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fef91-570">The result type of the block.</span>
          </span>
        </param>
        <param name="variables">
          <span data-ttu-id="fef91-571">Переменные в блоке.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fef91-571">The variables in the block.</span>
          </span>
        </param>
        <param name="expressions">
          <span data-ttu-id="fef91-572">Выражения в блоке.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fef91-572">The expressions in the block.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="fef91-573">Создает выражение <see cref="T:System.Linq.Expressions.BlockExpression" />, содержащее указанные переменные и выражения.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fef91-573">Creates a <see cref="T:System.Linq.Expressions.BlockExpression" /> that contains the given variables and expressions.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="fef91-574">Созданный <see cref="T:System.Linq.Expressions.BlockExpression" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fef91-574">The created <see cref="T:System.Linq.Expressions.BlockExpression" />.</span>
          </span>
        </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Block">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.BlockExpression Block (Type type, System.Collections.Generic.IEnumerable&lt;System.Linq.Expressions.ParameterExpression&gt; variables, params System.Linq.Expressions.Expression[] expressions);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.BlockExpression Block(class System.Type type, class System.Collections.Generic.IEnumerable`1&lt;class System.Linq.Expressions.ParameterExpression&gt; variables, class System.Linq.Expressions.Expression[] expressions) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.Block(System.Type,System.Collections.Generic.IEnumerable{System.Linq.Expressions.ParameterExpression},System.Linq.Expressions.Expression[])" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Linq::Expressions::BlockExpression ^ Block(Type ^ type, System::Collections::Generic::IEnumerable&lt;System::Linq::Expressions::ParameterExpression ^&gt; ^ variables, ... cli::array &lt;System::Linq::Expressions::Expression ^&gt; ^ expressions);" />
      <MemberSignature Language="F#" Value="static member Block : Type * seq&lt;System.Linq.Expressions.ParameterExpression&gt; * System.Linq.Expressions.Expression[] -&gt; System.Linq.Expressions.BlockExpression" Usage="System.Linq.Expressions.Expression.Block (type, variables, expressions)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.BlockExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="type" Type="System.Type" />
        <Parameter Name="variables" Type="System.Collections.Generic.IEnumerable&lt;System.Linq.Expressions.ParameterExpression&gt;" />
        <Parameter Name="expressions" Type="System.Linq.Expressions.Expression[]">
          <Attributes>
            <Attribute>
              <AttributeName>System.ParamArray</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="type">
          <span data-ttu-id="fef91-575">Тип результата блока.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fef91-575">The result type of the block.</span>
          </span>
        </param>
        <param name="variables">
          <span data-ttu-id="fef91-576">Переменные в блоке.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fef91-576">The variables in the block.</span>
          </span>
        </param>
        <param name="expressions">
          <span data-ttu-id="fef91-577">Выражения в блоке.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fef91-577">The expressions in the block.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="fef91-578">Создает выражение <see cref="T:System.Linq.Expressions.BlockExpression" />, содержащее указанные переменные и выражения.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fef91-578">Creates a <see cref="T:System.Linq.Expressions.BlockExpression" /> that contains the given variables and expressions.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="fef91-579">Созданный <see cref="T:System.Linq.Expressions.BlockExpression" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fef91-579">The created <see cref="T:System.Linq.Expressions.BlockExpression" />.</span>
          </span>
        </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Block">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.BlockExpression Block (System.Linq.Expressions.Expression arg0, System.Linq.Expressions.Expression arg1, System.Linq.Expressions.Expression arg2, System.Linq.Expressions.Expression arg3);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.BlockExpression Block(class System.Linq.Expressions.Expression arg0, class System.Linq.Expressions.Expression arg1, class System.Linq.Expressions.Expression arg2, class System.Linq.Expressions.Expression arg3) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.Block(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Block (arg0 As Expression, arg1 As Expression, arg2 As Expression, arg3 As Expression) As BlockExpression" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Linq::Expressions::BlockExpression ^ Block(System::Linq::Expressions::Expression ^ arg0, System::Linq::Expressions::Expression ^ arg1, System::Linq::Expressions::Expression ^ arg2, System::Linq::Expressions::Expression ^ arg3);" />
      <MemberSignature Language="F#" Value="static member Block : System.Linq.Expressions.Expression * System.Linq.Expressions.Expression * System.Linq.Expressions.Expression * System.Linq.Expressions.Expression -&gt; System.Linq.Expressions.BlockExpression" Usage="System.Linq.Expressions.Expression.Block (arg0, arg1, arg2, arg3)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.BlockExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="arg0" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="arg1" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="arg2" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="arg3" Type="System.Linq.Expressions.Expression" />
      </Parameters>
      <Docs>
        <param name="arg0">
          <span data-ttu-id="fef91-580">Первое выражение в блоке.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fef91-580">The first expression in the block.</span>
          </span>
        </param>
        <param name="arg1">
          <span data-ttu-id="fef91-581">Второе выражение в блоке.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fef91-581">The second expression in the block.</span>
          </span>
        </param>
        <param name="arg2">
          <span data-ttu-id="fef91-582">Третье выражение в блоке.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fef91-582">The third expression in the block.</span>
          </span>
        </param>
        <param name="arg3">
          <span data-ttu-id="fef91-583">Четвертое выражение в блоке.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fef91-583">The fourth expression in the block.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="fef91-584">Создает выражение <see cref="T:System.Linq.Expressions.BlockExpression" />, содержащее четыре выражения и не содержащее переменных.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fef91-584">Creates a <see cref="T:System.Linq.Expressions.BlockExpression" /> that contains four expressions and has no variables.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="fef91-585">Созданный <see cref="T:System.Linq.Expressions.BlockExpression" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fef91-585">The created <see cref="T:System.Linq.Expressions.BlockExpression" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="fef91-586">При выполнении блока выражения возвращается значение последнего выражения в блоке.</span><span class="sxs-lookup"><span data-stu-id="fef91-586">When the block expression is executed, it returns the value of the last expression in the block.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Block">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.BlockExpression Block (System.Linq.Expressions.Expression arg0, System.Linq.Expressions.Expression arg1, System.Linq.Expressions.Expression arg2, System.Linq.Expressions.Expression arg3, System.Linq.Expressions.Expression arg4);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.BlockExpression Block(class System.Linq.Expressions.Expression arg0, class System.Linq.Expressions.Expression arg1, class System.Linq.Expressions.Expression arg2, class System.Linq.Expressions.Expression arg3, class System.Linq.Expressions.Expression arg4) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.Block(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Block (arg0 As Expression, arg1 As Expression, arg2 As Expression, arg3 As Expression, arg4 As Expression) As BlockExpression" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Linq::Expressions::BlockExpression ^ Block(System::Linq::Expressions::Expression ^ arg0, System::Linq::Expressions::Expression ^ arg1, System::Linq::Expressions::Expression ^ arg2, System::Linq::Expressions::Expression ^ arg3, System::Linq::Expressions::Expression ^ arg4);" />
      <MemberSignature Language="F#" Value="static member Block : System.Linq.Expressions.Expression * System.Linq.Expressions.Expression * System.Linq.Expressions.Expression * System.Linq.Expressions.Expression * System.Linq.Expressions.Expression -&gt; System.Linq.Expressions.BlockExpression" Usage="System.Linq.Expressions.Expression.Block (arg0, arg1, arg2, arg3, arg4)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.BlockExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="arg0" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="arg1" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="arg2" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="arg3" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="arg4" Type="System.Linq.Expressions.Expression" />
      </Parameters>
      <Docs>
        <param name="arg0">
          <span data-ttu-id="fef91-587">Первое выражение в блоке.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fef91-587">The first expression in the block.</span>
          </span>
        </param>
        <param name="arg1">
          <span data-ttu-id="fef91-588">Второе выражение в блоке.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fef91-588">The second expression in the block.</span>
          </span>
        </param>
        <param name="arg2">
          <span data-ttu-id="fef91-589">Третье выражение в блоке.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fef91-589">The third expression in the block.</span>
          </span>
        </param>
        <param name="arg3">
          <span data-ttu-id="fef91-590">Четвертое выражение в блоке.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fef91-590">The fourth expression in the block.</span>
          </span>
        </param>
        <param name="arg4">
          <span data-ttu-id="fef91-591">Пятое выражение в блоке.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fef91-591">The fifth expression in the block.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="fef91-592">Создает выражение <see cref="T:System.Linq.Expressions.BlockExpression" />, содержащее пять выражений и не содержащее переменных.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fef91-592">Creates a <see cref="T:System.Linq.Expressions.BlockExpression" /> that contains five expressions and has no variables.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="fef91-593">Созданный <see cref="T:System.Linq.Expressions.BlockExpression" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fef91-593">The created <see cref="T:System.Linq.Expressions.BlockExpression" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="fef91-594">При выполнении блока выражения возвращается значение последнего выражения в блоке.</span><span class="sxs-lookup"><span data-stu-id="fef91-594">When the block expression is executed, it returns the value of the last expression in the block.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="Break">
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="fef91-595">Создает объект <see cref="T:System.Linq.Expressions.GotoExpression" />, представляющий оператор break.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fef91-595">Creates a <see cref="T:System.Linq.Expressions.GotoExpression" /> representing a break statement.</span>
          </span>
        </summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Break">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.GotoExpression Break (System.Linq.Expressions.LabelTarget target);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.GotoExpression Break(class System.Linq.Expressions.LabelTarget target) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.Break(System.Linq.Expressions.LabelTarget)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Break (target As LabelTarget) As GotoExpression" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Linq::Expressions::GotoExpression ^ Break(System::Linq::Expressions::LabelTarget ^ target);" />
      <MemberSignature Language="F#" Value="static member Break : System.Linq.Expressions.LabelTarget -&gt; System.Linq.Expressions.GotoExpression" Usage="System.Linq.Expressions.Expression.Break target" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.GotoExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="target" Type="System.Linq.Expressions.LabelTarget" />
      </Parameters>
      <Docs>
        <param name="target">
          <span data-ttu-id="fef91-596">Объект <see cref="T:System.Linq.Expressions.LabelTarget" />, на который будет выполнен переход по <see cref="T:System.Linq.Expressions.GotoExpression" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fef91-596">The <see cref="T:System.Linq.Expressions.LabelTarget" /> that the <see cref="T:System.Linq.Expressions.GotoExpression" /> will jump to.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="fef91-597">Создает объект <see cref="T:System.Linq.Expressions.GotoExpression" />, представляющий оператор break.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fef91-597">Creates a <see cref="T:System.Linq.Expressions.GotoExpression" /> representing a break statement.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="fef91-598">Объект <see cref="T:System.Linq.Expressions.GotoExpression" />, свойство <see cref="P:System.Linq.Expressions.GotoExpression.Kind" /> которого имеет значение Break, свойство <see cref="P:System.Linq.Expressions.GotoExpression.Target" /> — значение в параметре <paramref name="target" />, а при переходе целевой метке передается значение NULL.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fef91-598">A <see cref="T:System.Linq.Expressions.GotoExpression" /> with <see cref="P:System.Linq.Expressions.GotoExpression.Kind" /> equal to Break, the <see cref="P:System.Linq.Expressions.GotoExpression.Target" /> property set to <paramref name="target" />, and a null value to be passed to the target label upon jumping.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 <span data-ttu-id="fef91-599">В следующем примере показано, как создать выражение, содержащее <xref:System.Linq.Expressions.LoopExpression> объект, который использует <xref:System.Linq.Expressions.Expression.Break%2A> метод.</span><span class="sxs-lookup"><span data-stu-id="fef91-599">The following example demonstrates how to create an expression that contains a <xref:System.Linq.Expressions.LoopExpression> object that uses the <xref:System.Linq.Expressions.Expression.Break%2A> method.</span></span>  
  
 [!code-csharp[System.Linq.Expressions.ExpressionDev10#44](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.linq.expressions.expressiondev10/cs/program.cs#44)]
 [!code-vb[System.Linq.Expressions.ExpressionDev10#44](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.linq.expressions.expressiondev10/vb/module1.vb#44)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Break">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.GotoExpression Break (System.Linq.Expressions.LabelTarget target, System.Linq.Expressions.Expression value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.GotoExpression Break(class System.Linq.Expressions.LabelTarget target, class System.Linq.Expressions.Expression value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.Break(System.Linq.Expressions.LabelTarget,System.Linq.Expressions.Expression)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Break (target As LabelTarget, value As Expression) As GotoExpression" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Linq::Expressions::GotoExpression ^ Break(System::Linq::Expressions::LabelTarget ^ target, System::Linq::Expressions::Expression ^ value);" />
      <MemberSignature Language="F#" Value="static member Break : System.Linq.Expressions.LabelTarget * System.Linq.Expressions.Expression -&gt; System.Linq.Expressions.GotoExpression" Usage="System.Linq.Expressions.Expression.Break (target, value)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.GotoExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="target" Type="System.Linq.Expressions.LabelTarget" />
        <Parameter Name="value" Type="System.Linq.Expressions.Expression" />
      </Parameters>
      <Docs>
        <param name="target">
          <span data-ttu-id="fef91-600">Объект <see cref="T:System.Linq.Expressions.LabelTarget" />, на который будет выполнен переход по <see cref="T:System.Linq.Expressions.GotoExpression" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fef91-600">The <see cref="T:System.Linq.Expressions.LabelTarget" /> that the <see cref="T:System.Linq.Expressions.GotoExpression" /> will jump to.</span>
          </span>
        </param>
        <param name="value">
          <span data-ttu-id="fef91-601">Значение, передаваемое связанной метке при переходе.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fef91-601">The value that will be passed to the associated label upon jumping.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="fef91-602">Создает объект <see cref="T:System.Linq.Expressions.GotoExpression" />, представляющий оператор break.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fef91-602">Creates a <see cref="T:System.Linq.Expressions.GotoExpression" /> representing a break statement.</span>
          </span>
          <span data-ttu-id="fef91-603">Можно указать значение, передаваемое метке при переходе.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fef91-603">The value passed to the label upon jumping can be specified.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="fef91-604">Выражение <see cref="T:System.Linq.Expressions.GotoExpression" />, свойство <see cref="P:System.Linq.Expressions.GotoExpression.Kind" /> которого имеет значение break, свойство <see cref="P:System.Linq.Expressions.GotoExpression.Target" /> — <paramref name="target" />, а при переходе целевой метке передается значение <paramref name="value" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fef91-604">A <see cref="T:System.Linq.Expressions.GotoExpression" /> with <see cref="P:System.Linq.Expressions.GotoExpression.Kind" /> equal to Break, the <see cref="P:System.Linq.Expressions.GotoExpression.Target" /> property set to <paramref name="target" />, and <paramref name="value" /> to be passed to the target label upon jumping.</span>
          </span>
        </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Break">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.GotoExpression Break (System.Linq.Expressions.LabelTarget target, Type type);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.GotoExpression Break(class System.Linq.Expressions.LabelTarget target, class System.Type type) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.Break(System.Linq.Expressions.LabelTarget,System.Type)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Linq::Expressions::GotoExpression ^ Break(System::Linq::Expressions::LabelTarget ^ target, Type ^ type);" />
      <MemberSignature Language="F#" Value="static member Break : System.Linq.Expressions.LabelTarget * Type -&gt; System.Linq.Expressions.GotoExpression" Usage="System.Linq.Expressions.Expression.Break (target, type)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.GotoExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="target" Type="System.Linq.Expressions.LabelTarget" />
        <Parameter Name="type" Type="System.Type" />
      </Parameters>
      <Docs>
        <param name="target">
          <span data-ttu-id="fef91-605">Объект <see cref="T:System.Linq.Expressions.LabelTarget" />, на который будет выполнен переход по <see cref="T:System.Linq.Expressions.GotoExpression" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fef91-605">The <see cref="T:System.Linq.Expressions.LabelTarget" /> that the <see cref="T:System.Linq.Expressions.GotoExpression" /> will jump to.</span>
          </span>
        </param>
        <param name="type">
          <span data-ttu-id="fef91-606">Объект <see cref="T:System.Type" />, который следует задать в качестве значения свойства <see cref="P:System.Linq.Expressions.Expression.Type" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fef91-606">An <see cref="T:System.Type" /> to set the <see cref="P:System.Linq.Expressions.Expression.Type" /> property equal to.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="fef91-607">Создает выражение <see cref="T:System.Linq.Expressions.GotoExpression" />, представляющее оператор break с указанным типом.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fef91-607">Creates a <see cref="T:System.Linq.Expressions.GotoExpression" /> representing a break statement with the specified type.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="fef91-608">Выражение <see cref="T:System.Linq.Expressions.GotoExpression" />, свойство <see cref="P:System.Linq.Expressions.GotoExpression.Kind" /> которого имеет значение break, свойство <see cref="P:System.Linq.Expressions.GotoExpression.Target" /> — <paramref name="target" />, а свойство <see cref="P:System.Linq.Expressions.Expression.Type" /> — <paramref name="type" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fef91-608">A <see cref="T:System.Linq.Expressions.GotoExpression" /> with <see cref="P:System.Linq.Expressions.GotoExpression.Kind" /> equal to Break, the <see cref="P:System.Linq.Expressions.GotoExpression.Target" /> property set to <paramref name="target" />, and the <see cref="P:System.Linq.Expressions.Expression.Type" /> property set to <paramref name="type" />.</span>
          </span>
        </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Break">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.GotoExpression Break (System.Linq.Expressions.LabelTarget target, System.Linq.Expressions.Expression value, Type type);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.GotoExpression Break(class System.Linq.Expressions.LabelTarget target, class System.Linq.Expressions.Expression value, class System.Type type) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.Break(System.Linq.Expressions.LabelTarget,System.Linq.Expressions.Expression,System.Type)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Linq::Expressions::GotoExpression ^ Break(System::Linq::Expressions::LabelTarget ^ target, System::Linq::Expressions::Expression ^ value, Type ^ type);" />
      <MemberSignature Language="F#" Value="static member Break : System.Linq.Expressions.LabelTarget * System.Linq.Expressions.Expression * Type -&gt; System.Linq.Expressions.GotoExpression" Usage="System.Linq.Expressions.Expression.Break (target, value, type)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.GotoExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="target" Type="System.Linq.Expressions.LabelTarget" />
        <Parameter Name="value" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="type" Type="System.Type" />
      </Parameters>
      <Docs>
        <param name="target">
          <span data-ttu-id="fef91-609">Объект <see cref="T:System.Linq.Expressions.LabelTarget" />, на который будет выполнен переход по <see cref="T:System.Linq.Expressions.GotoExpression" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fef91-609">The <see cref="T:System.Linq.Expressions.LabelTarget" /> that the <see cref="T:System.Linq.Expressions.GotoExpression" /> will jump to.</span>
          </span>
        </param>
        <param name="value">
          <span data-ttu-id="fef91-610">Значение, передаваемое связанной метке при переходе.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fef91-610">The value that will be passed to the associated label upon jumping.</span>
          </span>
        </param>
        <param name="type">
          <span data-ttu-id="fef91-611">Объект <see cref="T:System.Type" />, который следует задать в качестве значения свойства <see cref="P:System.Linq.Expressions.Expression.Type" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fef91-611">An <see cref="T:System.Type" /> to set the <see cref="P:System.Linq.Expressions.Expression.Type" /> property equal to.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="fef91-612">Создает выражение <see cref="T:System.Linq.Expressions.GotoExpression" />, представляющее оператор break с указанным типом.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fef91-612">Creates a <see cref="T:System.Linq.Expressions.GotoExpression" /> representing a break statement with the specified type.</span>
          </span>
          <span data-ttu-id="fef91-613">Можно указать значение, передаваемое метке при переходе.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fef91-613">The value passed to the label upon jumping can be specified.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="fef91-614">Выражение <see cref="T:System.Linq.Expressions.GotoExpression" />, свойство <see cref="P:System.Linq.Expressions.GotoExpression.Kind" /> которого имеет значение break, свойство <see cref="P:System.Linq.Expressions.GotoExpression.Target" /> — <paramref name="target" />, свойство <see cref="P:System.Linq.Expressions.Expression.Type" /> — <paramref name="type" />, а при переходе целевой метке передается значение <paramref name="value" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fef91-614">A <see cref="T:System.Linq.Expressions.GotoExpression" /> with <see cref="P:System.Linq.Expressions.GotoExpression.Kind" /> equal to Break, the <see cref="P:System.Linq.Expressions.GotoExpression.Target" /> property set to <paramref name="target" />, the <see cref="P:System.Linq.Expressions.Expression.Type" /> property set to <paramref name="type" />, and <paramref name="value" /> to be passed to the target label upon jumping.</span>
          </span>
        </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="Call">
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="fef91-615">Создает буфер <see cref="T:System.Linq.Expressions.MethodCallExpression" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fef91-615">Creates a <see cref="T:System.Linq.Expressions.MethodCallExpression" />.</span>
          </span>
        </summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Call">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.MethodCallExpression Call (System.Linq.Expressions.Expression instance, System.Reflection.MethodInfo method);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.MethodCallExpression Call(class System.Linq.Expressions.Expression instance, class System.Reflection.MethodInfo method) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.Call(System.Linq.Expressions.Expression,System.Reflection.MethodInfo)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Call (instance As Expression, method As MethodInfo) As MethodCallExpression" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Linq::Expressions::MethodCallExpression ^ Call(System::Linq::Expressions::Expression ^ instance, System::Reflection::MethodInfo ^ method);" />
      <MemberSignature Language="F#" Value="static member Call : System.Linq.Expressions.Expression * System.Reflection.MethodInfo -&gt; System.Linq.Expressions.MethodCallExpression" Usage="System.Linq.Expressions.Expression.Call (instance, method)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.MethodCallExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="instance" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="method" Type="System.Reflection.MethodInfo" />
      </Parameters>
      <Docs>
        <param name="instance">
          <span data-ttu-id="fef91-616">Выражение <see cref="T:System.Linq.Expressions.Expression" />, задающее экземпляр для вызова метода экземпляра(для метода <see langword="null" /> (<see langword="static" /> в Visual Basic) передается <see langword="Shared" />).</span>
          <span class="sxs-lookup">
            <span data-stu-id="fef91-616">An <see cref="T:System.Linq.Expressions.Expression" /> that specifies the instance for an instance method call (pass <see langword="null" /> for a <see langword="static" /> (<see langword="Shared" /> in Visual Basic) method).</span>
          </span>
        </param>
        <param name="method">
          <span data-ttu-id="fef91-617">Объект <see cref="T:System.Reflection.MethodInfo" />, который следует задать в качестве значения свойства <see cref="P:System.Linq.Expressions.MethodCallExpression.Method" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fef91-617">A <see cref="T:System.Reflection.MethodInfo" /> to set the <see cref="P:System.Linq.Expressions.MethodCallExpression.Method" /> property equal to.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="fef91-618">Создает выражение <see cref="T:System.Linq.Expressions.MethodCallExpression" />, представляющее вызов метода без аргументов.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fef91-618">Creates a <see cref="T:System.Linq.Expressions.MethodCallExpression" /> that represents a call to a method that takes no arguments.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="fef91-619">Выражение <see cref="T:System.Linq.Expressions.MethodCallExpression" /> со свойством<see cref="P:System.Linq.Expressions.Expression.NodeType" />, равным <see cref="F:System.Linq.Expressions.ExpressionType.Call" />, и свойствами <see cref="P:System.Linq.Expressions.MethodCallExpression.Object" /> и <see cref="P:System.Linq.Expressions.MethodCallExpression.Method" />, для которых заданы указанные значения.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fef91-619">A <see cref="T:System.Linq.Expressions.MethodCallExpression" /> that has the <see cref="P:System.Linq.Expressions.Expression.NodeType" /> property equal to <see cref="F:System.Linq.Expressions.ExpressionType.Call" /> and the <see cref="P:System.Linq.Expressions.MethodCallExpression.Object" /> and <see cref="P:System.Linq.Expressions.MethodCallExpression.Method" /> properties set to the specified values.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="fef91-620">Для представления вызов `static` (`Shared` в Visual Basic) метод, передав `null` для `instance` параметра при вызове этого метода.</span><span class="sxs-lookup"><span data-stu-id="fef91-620">To represent a call to a `static` (`Shared` in Visual Basic) method, pass in `null` for the `instance` parameter when you call this method.</span></span>  
  
 <span data-ttu-id="fef91-621">Если `method` представляет метод экземпляра, <xref:System.Linq.Expressions.Expression.Type%2A> свойство `instance` должен быть назначаемым в объявляющий тип метода, представленного свойством `method`.</span><span class="sxs-lookup"><span data-stu-id="fef91-621">If `method` represents an instance method, the <xref:System.Linq.Expressions.Expression.Type%2A> property of `instance` must be assignable to the declaring type of the method represented by `method`.</span></span>  
  
 <span data-ttu-id="fef91-622"><xref:System.Linq.Expressions.MethodCallExpression.Arguments%2A> Результирующего <xref:System.Linq.Expressions.MethodCallExpression> пуст.</span><span class="sxs-lookup"><span data-stu-id="fef91-622">The <xref:System.Linq.Expressions.MethodCallExpression.Arguments%2A> property of the resulting <xref:System.Linq.Expressions.MethodCallExpression> is empty.</span></span> <span data-ttu-id="fef91-623"><xref:System.Linq.Expressions.Expression.Type%2A> Равно тип возвращаемого значения метода, представленного свойством `method`.</span><span class="sxs-lookup"><span data-stu-id="fef91-623">The <xref:System.Linq.Expressions.Expression.Type%2A> property is equal to the return type of the method represented by `method`.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="fef91-624">В следующем примере кода показано, как создать выражение, которое вызывает метод без аргументов.</span><span class="sxs-lookup"><span data-stu-id="fef91-624">The following code example shows how to create an expression that calls a method without arguments.</span></span>  
  
 [!code-csharp[System.Linq.Expressions.ExpressionDev10#15](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.linq.expressions.expressiondev10/cs/program.cs#15)]
 [!code-vb[System.Linq.Expressions.ExpressionDev10#15](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.linq.expressions.expressiondev10/vb/module1.vb#15)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="fef91-625">
            <paramref name="method" /> — <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fef91-625">
              <paramref name="method" /> is <see langword="null" />.</span>
          </span>
          <span data-ttu-id="fef91-626">-или-</span>
          <span class="sxs-lookup">
            <span data-stu-id="fef91-626">-or-</span>
          </span>
          <span data-ttu-id="fef91-627">Параметр <paramref name="instance" /> является типом <see langword="null" />, и <paramref name="method" /> представляет метод экземпляра.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fef91-627">
              <paramref name="instance" /> is <see langword="null" /> and <paramref name="method" /> represents an instance method.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="fef91-628">Тип <paramref name="instance" />.Type не назначается объявляемому типу метода, представленному параметром <paramref name="method" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fef91-628">
              <paramref name="instance" />.Type is not assignable to the declaring type of the method represented by <paramref name="method" />.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="Call">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.MethodCallExpression Call (System.Reflection.MethodInfo method, System.Collections.Generic.IEnumerable&lt;System.Linq.Expressions.Expression&gt; arguments);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.MethodCallExpression Call(class System.Reflection.MethodInfo method, class System.Collections.Generic.IEnumerable`1&lt;class System.Linq.Expressions.Expression&gt; arguments) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.Call(System.Reflection.MethodInfo,System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression})" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Call (method As MethodInfo, arguments As IEnumerable(Of Expression)) As MethodCallExpression" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Linq::Expressions::MethodCallExpression ^ Call(System::Reflection::MethodInfo ^ method, System::Collections::Generic::IEnumerable&lt;System::Linq::Expressions::Expression ^&gt; ^ arguments);" />
      <MemberSignature Language="F#" Value="static member Call : System.Reflection.MethodInfo * seq&lt;System.Linq.Expressions.Expression&gt; -&gt; System.Linq.Expressions.MethodCallExpression" Usage="System.Linq.Expressions.Expression.Call (method, arguments)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.MethodCallExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="method" Type="System.Reflection.MethodInfo" />
        <Parameter Name="arguments" Type="System.Collections.Generic.IEnumerable&lt;System.Linq.Expressions.Expression&gt;" />
      </Parameters>
      <Docs>
        <param name="method">
          <span data-ttu-id="fef91-629">Объект <see cref="T:System.Reflection.MethodInfo" />, представляющий целевой метод.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fef91-629">The <see cref="T:System.Reflection.MethodInfo" /> that represents the target method.</span>
          </span>
        </param>
        <param name="arguments">
          <span data-ttu-id="fef91-630">Коллекция выражений <see cref="T:System.Linq.Expressions.Expression" />, представляющая аргументы вызова.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fef91-630">A collection of <see cref="T:System.Linq.Expressions.Expression" /> that represents the call arguments.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="fef91-631">Создает выражение <see cref="T:System.Linq.Expressions.MethodCallExpression" />, представляющее вызов статического метода (Shared в Visual Basic).</span>
          <span class="sxs-lookup">
            <span data-stu-id="fef91-631">Creates a <see cref="T:System.Linq.Expressions.MethodCallExpression" /> that represents a call to a static (Shared in Visual Basic) method.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="fef91-632">Выражение <see cref="T:System.Linq.Expressions.MethodCallExpression" /> со свойством<see cref="P:System.Linq.Expressions.Expression.NodeType" />, равным <see cref="F:System.Linq.Expressions.ExpressionType.Call" />, и свойствами <see cref="P:System.Linq.Expressions.MethodCallExpression.Object" /> и <see cref="P:System.Linq.Expressions.MethodCallExpression.Method" />, для которых заданы указанные значения.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fef91-632">A <see cref="T:System.Linq.Expressions.MethodCallExpression" /> that has the <see cref="P:System.Linq.Expressions.Expression.NodeType" /> property equal to <see cref="F:System.Linq.Expressions.ExpressionType.Call" /> and the <see cref="P:System.Linq.Expressions.MethodCallExpression.Object" /> and <see cref="P:System.Linq.Expressions.MethodCallExpression.Method" /> properties set to the specified values.</span>
          </span>
        </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Call">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.MethodCallExpression Call (System.Reflection.MethodInfo method, System.Linq.Expressions.Expression arg0);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.MethodCallExpression Call(class System.Reflection.MethodInfo method, class System.Linq.Expressions.Expression arg0) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.Call(System.Reflection.MethodInfo,System.Linq.Expressions.Expression)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Call (method As MethodInfo, arg0 As Expression) As MethodCallExpression" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Linq::Expressions::MethodCallExpression ^ Call(System::Reflection::MethodInfo ^ method, System::Linq::Expressions::Expression ^ arg0);" />
      <MemberSignature Language="F#" Value="static member Call : System.Reflection.MethodInfo * System.Linq.Expressions.Expression -&gt; System.Linq.Expressions.MethodCallExpression" Usage="System.Linq.Expressions.Expression.Call (method, arg0)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.MethodCallExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="method" Type="System.Reflection.MethodInfo" />
        <Parameter Name="arg0" Type="System.Linq.Expressions.Expression" />
      </Parameters>
      <Docs>
        <param name="method">
          <span data-ttu-id="fef91-633">Объект <see cref="T:System.Reflection.MethodInfo" />, который следует задать в качестве значения свойства <see cref="P:System.Linq.Expressions.MethodCallExpression.Method" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fef91-633">A <see cref="T:System.Reflection.MethodInfo" /> to set the <see cref="P:System.Linq.Expressions.MethodCallExpression.Method" /> property equal to.</span>
          </span>
        </param>
        <param name="arg0">
          <span data-ttu-id="fef91-634">Объект <see cref="T:System.Linq.Expressions.Expression" />, представляющий первый аргумент.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fef91-634">The <see cref="T:System.Linq.Expressions.Expression" /> that represents the first argument.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="fef91-635">Создает выражение <see cref="T:System.Linq.Expressions.MethodCallExpression" />, представляющее вызов метода <see langword="static" /> (<see langword="Shared" /> в Visual Basic), принимающего один аргумент.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fef91-635">Creates a <see cref="T:System.Linq.Expressions.MethodCallExpression" /> that represents a call to a <see langword="static" /> (<see langword="Shared" /> in Visual Basic) method that takes one argument.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="fef91-636">Выражение <see cref="T:System.Linq.Expressions.MethodCallExpression" /> со свойством<see cref="P:System.Linq.Expressions.Expression.NodeType" />, равным <see cref="F:System.Linq.Expressions.ExpressionType.Call" />, и свойствами <see cref="P:System.Linq.Expressions.MethodCallExpression.Object" /> и <see cref="P:System.Linq.Expressions.MethodCallExpression.Method" />, для которых заданы указанные значения.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fef91-636">A <see cref="T:System.Linq.Expressions.MethodCallExpression" /> that has the <see cref="P:System.Linq.Expressions.Expression.NodeType" /> property equal to <see cref="F:System.Linq.Expressions.ExpressionType.Call" /> and the <see cref="P:System.Linq.Expressions.MethodCallExpression.Object" /> and <see cref="P:System.Linq.Expressions.MethodCallExpression.Method" /> properties set to the specified values.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 <span data-ttu-id="fef91-637">В следующем примере показано, как создать выражение, которое вызывает `static` (`Shared` в Visual Basic) метода, принимающего один аргумент.</span><span class="sxs-lookup"><span data-stu-id="fef91-637">The following example demonstrates how to create an expression that calls a `static` (`Shared` in Visual Basic) method that takes one argument.</span></span>  
  
 [!code-csharp[System.Linq.Expressions.ExpressionDev10#16](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.linq.expressions.expressiondev10/cs/program.cs#16)]
 [!code-vb[System.Linq.Expressions.ExpressionDev10#16](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.linq.expressions.expressiondev10/vb/module1.vb#16)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="fef91-638">Значение параметра <paramref name="method" /> равно null.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fef91-638">
              <paramref name="method" /> is null.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="Call">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.MethodCallExpression Call (System.Reflection.MethodInfo method, params System.Linq.Expressions.Expression[] arguments);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.MethodCallExpression Call(class System.Reflection.MethodInfo method, class System.Linq.Expressions.Expression[] arguments) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.Call(System.Reflection.MethodInfo,System.Linq.Expressions.Expression[])" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Call (method As MethodInfo, ParamArray arguments As Expression()) As MethodCallExpression" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Linq::Expressions::MethodCallExpression ^ Call(System::Reflection::MethodInfo ^ method, ... cli::array &lt;System::Linq::Expressions::Expression ^&gt; ^ arguments);" />
      <MemberSignature Language="F#" Value="static member Call : System.Reflection.MethodInfo * System.Linq.Expressions.Expression[] -&gt; System.Linq.Expressions.MethodCallExpression" Usage="System.Linq.Expressions.Expression.Call (method, arguments)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.MethodCallExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="method" Type="System.Reflection.MethodInfo" />
        <Parameter Name="arguments" Type="System.Linq.Expressions.Expression[]">
          <Attributes>
            <Attribute>
              <AttributeName>System.ParamArray</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="method">
          <span data-ttu-id="fef91-639">
            <see cref="T:System.Reflection.MethodInfo" />, представляющий метод <see langword="static" /> (<see langword="Shared" /> в Visual Basic), чтобы задать значение <see cref="P:System.Linq.Expressions.MethodCallExpression.Method" /> для свойства.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fef91-639">A <see cref="T:System.Reflection.MethodInfo" /> that represents a <see langword="static" /> (<see langword="Shared" /> in Visual Basic) method to set the <see cref="P:System.Linq.Expressions.MethodCallExpression.Method" /> property equal to.</span>
          </span>
        </param>
        <param name="arguments">
          <span data-ttu-id="fef91-640">Массив объектов <see cref="T:System.Linq.Expressions.Expression" /> для заполнения коллекции <see cref="P:System.Linq.Expressions.MethodCallExpression.Arguments" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fef91-640">An array of <see cref="T:System.Linq.Expressions.Expression" /> objects to use to populate the <see cref="P:System.Linq.Expressions.MethodCallExpression.Arguments" /> collection.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="fef91-641">Создает выражение <see cref="T:System.Linq.Expressions.MethodCallExpression" />, представляющее вызов метода <see langword="static" /> (<see langword="Shared" /> в Visual Basic), принимающего аргументы.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fef91-641">Creates a <see cref="T:System.Linq.Expressions.MethodCallExpression" /> that represents a call to a <see langword="static" /> (<see langword="Shared" /> in Visual Basic) method that has arguments.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="fef91-642">Выражение <see cref="T:System.Linq.Expressions.MethodCallExpression" /> со свойством<see cref="P:System.Linq.Expressions.Expression.NodeType" />, равным <see cref="F:System.Linq.Expressions.ExpressionType.Call" />, и свойствами <see cref="P:System.Linq.Expressions.MethodCallExpression.Method" /> и <see cref="P:System.Linq.Expressions.MethodCallExpression.Arguments" />, для которых заданы указанные значения.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fef91-642">A <see cref="T:System.Linq.Expressions.MethodCallExpression" /> that has the <see cref="P:System.Linq.Expressions.Expression.NodeType" /> property equal to <see cref="F:System.Linq.Expressions.ExpressionType.Call" /> and the <see cref="P:System.Linq.Expressions.MethodCallExpression.Method" /> and <see cref="P:System.Linq.Expressions.MethodCallExpression.Arguments" /> properties set to the specified values.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="fef91-643">Если `arguments` не `null`, он должен иметь одинаковое количество элементов, как число параметров для метода, представленного свойством `method`.</span><span class="sxs-lookup"><span data-stu-id="fef91-643">If `arguments` is not `null`, it must have the same number of elements as the number of parameters for the method represented by `method`.</span></span> <span data-ttu-id="fef91-644">Каждый элемент `arguments` не должно быть `null` и должен быть назначен соответствующего параметра `method`, возможно после *заключения в кавычки*.</span><span class="sxs-lookup"><span data-stu-id="fef91-644">Each element in `arguments` must not be `null` and must be assignable to the corresponding parameter of `method`, possibly after *quoting*.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="fef91-645">Элемент будет заключаться в кавычки только в том случае, если соответствующий параметр метода имеет тип <xref:System.Linq.Expressions.Expression>.</span><span class="sxs-lookup"><span data-stu-id="fef91-645">An element will be quoted only if the corresponding method parameter is of type <xref:System.Linq.Expressions.Expression>.</span></span> <span data-ttu-id="fef91-646">Заключение в кавычки означает, что элемент помещается в <xref:System.Linq.Expressions.ExpressionType.Quote> узла.</span><span class="sxs-lookup"><span data-stu-id="fef91-646">Quoting means the element is wrapped in a <xref:System.Linq.Expressions.ExpressionType.Quote> node.</span></span> <span data-ttu-id="fef91-647">Полученный в результате узел является <xref:System.Linq.Expressions.UnaryExpression> которого <xref:System.Linq.Expressions.UnaryExpression.Operand%2A> свойство является элементом `arguments`.</span><span class="sxs-lookup"><span data-stu-id="fef91-647">The resulting node is a <xref:System.Linq.Expressions.UnaryExpression> whose <xref:System.Linq.Expressions.UnaryExpression.Operand%2A> property is the element of `arguments`.</span></span>  
  
 <span data-ttu-id="fef91-648"><xref:System.Linq.Expressions.MethodCallExpression.Arguments%2A> Результирующего <xref:System.Linq.Expressions.MethodCallExpression> пуст Если `arguments` является `null`.</span><span class="sxs-lookup"><span data-stu-id="fef91-648">The <xref:System.Linq.Expressions.MethodCallExpression.Arguments%2A> property of the resulting <xref:System.Linq.Expressions.MethodCallExpression> is empty if `arguments` is `null`.</span></span> <span data-ttu-id="fef91-649">В противном случае он содержит те же элементы, что `arguments`, некоторые из которых может быть заключено в кавычки.</span><span class="sxs-lookup"><span data-stu-id="fef91-649">Otherwise, it contains the same elements as `arguments`, some of which may be quoted.</span></span>  
  
 <span data-ttu-id="fef91-650"><xref:System.Linq.Expressions.Expression.Type%2A> Результирующего <xref:System.Linq.Expressions.MethodCallExpression> равен тип возвращаемого значения метода, представленного свойством `method`.</span><span class="sxs-lookup"><span data-stu-id="fef91-650">The <xref:System.Linq.Expressions.Expression.Type%2A> property of the resulting <xref:System.Linq.Expressions.MethodCallExpression> is equal to the return type of the method represented by `method`.</span></span> <span data-ttu-id="fef91-651">Значение свойства <xref:System.Linq.Expressions.MethodCallExpression.Object%2A> — `null`.</span><span class="sxs-lookup"><span data-stu-id="fef91-651">The <xref:System.Linq.Expressions.MethodCallExpression.Object%2A> property is `null`.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="fef91-652">
            <paramref name="method" /> — <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fef91-652">
              <paramref name="method" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="fef91-653">Количество элементов в параметре <paramref name="arguments" /> не равно количеству параметров метода, представленного параметром <paramref name="method" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fef91-653">The number of elements in <paramref name="arguments" /> does not equal the number of parameters for the method represented by <paramref name="method" />.</span>
          </span>
          <span data-ttu-id="fef91-654">-или-</span>
          <span class="sxs-lookup">
            <span data-stu-id="fef91-654">-or-</span>
          </span>
          <span data-ttu-id="fef91-655">Один или несколько элементов <paramref name="arguments" /> нельзя назначить для соответствующего параметра для метода, представленного параметром <paramref name="method" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fef91-655">One or more of the elements of <paramref name="arguments" /> is not assignable to the corresponding parameter for the method represented by <paramref name="method" />.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="Call">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.MethodCallExpression Call (System.Linq.Expressions.Expression instance, System.Reflection.MethodInfo method, System.Collections.Generic.IEnumerable&lt;System.Linq.Expressions.Expression&gt; arguments);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.MethodCallExpression Call(class System.Linq.Expressions.Expression instance, class System.Reflection.MethodInfo method, class System.Collections.Generic.IEnumerable`1&lt;class System.Linq.Expressions.Expression&gt; arguments) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.Call(System.Linq.Expressions.Expression,System.Reflection.MethodInfo,System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression})" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Call (instance As Expression, method As MethodInfo, arguments As IEnumerable(Of Expression)) As MethodCallExpression" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Linq::Expressions::MethodCallExpression ^ Call(System::Linq::Expressions::Expression ^ instance, System::Reflection::MethodInfo ^ method, System::Collections::Generic::IEnumerable&lt;System::Linq::Expressions::Expression ^&gt; ^ arguments);" />
      <MemberSignature Language="F#" Value="static member Call : System.Linq.Expressions.Expression * System.Reflection.MethodInfo * seq&lt;System.Linq.Expressions.Expression&gt; -&gt; System.Linq.Expressions.MethodCallExpression" Usage="System.Linq.Expressions.Expression.Call (instance, method, arguments)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.MethodCallExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="instance" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="method" Type="System.Reflection.MethodInfo" />
        <Parameter Name="arguments" Type="System.Collections.Generic.IEnumerable&lt;System.Linq.Expressions.Expression&gt;" />
      </Parameters>
      <Docs>
        <param name="instance">
          <span data-ttu-id="fef91-656">
            <see cref="T:System.Linq.Expressions.Expression" />, чтобы задать свойство <see cref="P:System.Linq.Expressions.MethodCallExpression.Object" />, равное (передать <see langword="null" /> для метода <see langword="static" /> (<see langword="Shared" /> в Visual Basic)).</span>
          <span class="sxs-lookup">
            <span data-stu-id="fef91-656">An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.MethodCallExpression.Object" /> property equal to (pass <see langword="null" /> for a <see langword="static" /> (<see langword="Shared" /> in Visual Basic) method).</span>
          </span>
        </param>
        <param name="method">
          <span data-ttu-id="fef91-657">Объект <see cref="T:System.Reflection.MethodInfo" />, который следует задать в качестве значения свойства <see cref="P:System.Linq.Expressions.MethodCallExpression.Method" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fef91-657">A <see cref="T:System.Reflection.MethodInfo" /> to set the <see cref="P:System.Linq.Expressions.MethodCallExpression.Method" /> property equal to.</span>
          </span>
        </param>
        <param name="arguments">
          <span data-ttu-id="fef91-658">
            <see cref="T:System.Collections.Generic.IEnumerable`1" />, содержащий все объекты <see cref="T:System.Linq.Expressions.Expression" />, используемые для заполнения коллекции <see cref="P:System.Linq.Expressions.MethodCallExpression.Arguments" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fef91-658">An <see cref="T:System.Collections.Generic.IEnumerable`1" /> that contains <see cref="T:System.Linq.Expressions.Expression" /> objects to use to populate the <see cref="P:System.Linq.Expressions.MethodCallExpression.Arguments" /> collection.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="fef91-659">Создает выражение <see cref="T:System.Linq.Expressions.MethodCallExpression" />, представляющее вызов метода, принимающего аргументы.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fef91-659">Creates a <see cref="T:System.Linq.Expressions.MethodCallExpression" /> that represents a call to a method that takes arguments.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="fef91-660">Выражение <see cref="T:System.Linq.Expressions.MethodCallExpression" /> со свойством <see cref="P:System.Linq.Expressions.Expression.NodeType" />, равным <see cref="F:System.Linq.Expressions.ExpressionType.Call" />, и свойствами <see cref="P:System.Linq.Expressions.MethodCallExpression.Object" />, <see cref="P:System.Linq.Expressions.MethodCallExpression.Method" /> и <see cref="P:System.Linq.Expressions.MethodCallExpression.Arguments" />, для которых заданы указанные значения.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fef91-660">A <see cref="T:System.Linq.Expressions.MethodCallExpression" /> that has the <see cref="P:System.Linq.Expressions.Expression.NodeType" /> property equal to <see cref="F:System.Linq.Expressions.ExpressionType.Call" /> and the <see cref="P:System.Linq.Expressions.MethodCallExpression.Object" />, <see cref="P:System.Linq.Expressions.MethodCallExpression.Method" />, and <see cref="P:System.Linq.Expressions.MethodCallExpression.Arguments" /> properties set to the specified values.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="fef91-661">Для представления вызов `static` (`Shared` в Visual Basic) метод, передав `null` для `instance` параметра при вызове этого метода или вызывать <xref:System.Linq.Expressions.Expression.Call%2A> вместо этого.</span><span class="sxs-lookup"><span data-stu-id="fef91-661">To represent a call to a `static` (`Shared` in Visual Basic) method, pass in `null` for the `instance` parameter when you call this method, or call <xref:System.Linq.Expressions.Expression.Call%2A> instead.</span></span>  
  
 <span data-ttu-id="fef91-662">Если `method` представляет метод экземпляра, <xref:System.Linq.Expressions.Expression.Type%2A> свойство `instance` должен быть назначаемым в объявляющий тип метода, представленного свойством `method`.</span><span class="sxs-lookup"><span data-stu-id="fef91-662">If `method` represents an instance method, the <xref:System.Linq.Expressions.Expression.Type%2A> property of `instance` must be assignable to the declaring type of the method represented by `method`.</span></span>  
  
 <span data-ttu-id="fef91-663">Если `arguments` не `null`, он должен иметь одинаковое количество элементов, как число параметров для метода, представленного свойством `method`.</span><span class="sxs-lookup"><span data-stu-id="fef91-663">If `arguments` is not `null`, it must have the same number of elements as the number of parameters for the method represented by `method`.</span></span> <span data-ttu-id="fef91-664">Каждый элемент `arguments` не должно быть `null` и должен быть назначен соответствующего параметра `method`, возможно после *заключения в кавычки*.</span><span class="sxs-lookup"><span data-stu-id="fef91-664">Each element in `arguments` must not be `null` and must be assignable to the corresponding parameter of `method`, possibly after *quoting*.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="fef91-665">Элемент будет заключаться в кавычки только в том случае, если соответствующий параметр метода имеет тип <xref:System.Linq.Expressions.Expression>.</span><span class="sxs-lookup"><span data-stu-id="fef91-665">An element will be quoted only if the corresponding method parameter is of type <xref:System.Linq.Expressions.Expression>.</span></span> <span data-ttu-id="fef91-666">Заключение в кавычки означает, что элемент помещается в <xref:System.Linq.Expressions.ExpressionType.Quote> узла.</span><span class="sxs-lookup"><span data-stu-id="fef91-666">Quoting means the element is wrapped in a <xref:System.Linq.Expressions.ExpressionType.Quote> node.</span></span> <span data-ttu-id="fef91-667">Полученный в результате узел является <xref:System.Linq.Expressions.UnaryExpression> которого <xref:System.Linq.Expressions.UnaryExpression.Operand%2A> свойство является элементом `arguments`.</span><span class="sxs-lookup"><span data-stu-id="fef91-667">The resulting node is a <xref:System.Linq.Expressions.UnaryExpression> whose <xref:System.Linq.Expressions.UnaryExpression.Operand%2A> property is the element of `arguments`.</span></span>  
  
 <span data-ttu-id="fef91-668"><xref:System.Linq.Expressions.MethodCallExpression.Arguments%2A> Результирующего <xref:System.Linq.Expressions.MethodCallExpression> пуст Если `arguments` является `null`.</span><span class="sxs-lookup"><span data-stu-id="fef91-668">The <xref:System.Linq.Expressions.MethodCallExpression.Arguments%2A> property of the resulting <xref:System.Linq.Expressions.MethodCallExpression> is empty if `arguments` is `null`.</span></span> <span data-ttu-id="fef91-669">В противном случае он содержит те же элементы, что `arguments`, некоторые из которых может быть заключено в кавычки.</span><span class="sxs-lookup"><span data-stu-id="fef91-669">Otherwise, it contains the same elements as `arguments`, some of which may be quoted.</span></span>  
  
 <span data-ttu-id="fef91-670"><xref:System.Linq.Expressions.Expression.Type%2A> Результирующего <xref:System.Linq.Expressions.MethodCallExpression> равен тип возвращаемого значения метода, представленного свойством `method`.</span><span class="sxs-lookup"><span data-stu-id="fef91-670">The <xref:System.Linq.Expressions.Expression.Type%2A> property of the resulting <xref:System.Linq.Expressions.MethodCallExpression> is equal to the return type of the method represented by `method`.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="fef91-671">
            <paramref name="method" /> — <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fef91-671">
              <paramref name="method" /> is <see langword="null" />.</span>
          </span>
          <span data-ttu-id="fef91-672">-или-</span>
          <span class="sxs-lookup">
            <span data-stu-id="fef91-672">-or-</span>
          </span>
          <span data-ttu-id="fef91-673">Параметр <paramref name="instance" /> является типом <see langword="null" />, и <paramref name="method" /> представляет метод экземпляра.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fef91-673">
              <paramref name="instance" /> is <see langword="null" /> and <paramref name="method" /> represents an instance method.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="fef91-674">Тип <paramref name="instance" />.Type не назначается объявляемому типу метода, представленному параметром <paramref name="method" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fef91-674">
              <paramref name="instance" />.Type is not assignable to the declaring type of the method represented by <paramref name="method" />.</span>
          </span>
          <span data-ttu-id="fef91-675">-или-</span>
          <span class="sxs-lookup">
            <span data-stu-id="fef91-675">-or-</span>
          </span>
          <span data-ttu-id="fef91-676">Число элементов в <paramref name="arguments" /> не соответствует числу параметров метода, представленного свойством <paramref name="method" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fef91-676">The number of elements in <paramref name="arguments" /> does not equal the number of parameters for the method represented by <paramref name="method" />.</span>
          </span>
          <span data-ttu-id="fef91-677">-или-</span>
          <span class="sxs-lookup">
            <span data-stu-id="fef91-677">-or-</span>
          </span>
          <span data-ttu-id="fef91-678">Один или несколько элементов <paramref name="arguments" /> нельзя назначить для соответствующего параметра для метода, представленного параметром <paramref name="method" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fef91-678">One or more of the elements of <paramref name="arguments" /> is not assignable to the corresponding parameter for the method represented by <paramref name="method" />.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="Call">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.MethodCallExpression Call (System.Linq.Expressions.Expression instance, System.Reflection.MethodInfo method, params System.Linq.Expressions.Expression[] arguments);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.MethodCallExpression Call(class System.Linq.Expressions.Expression instance, class System.Reflection.MethodInfo method, class System.Linq.Expressions.Expression[] arguments) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.Call(System.Linq.Expressions.Expression,System.Reflection.MethodInfo,System.Linq.Expressions.Expression[])" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Call (instance As Expression, method As MethodInfo, ParamArray arguments As Expression()) As MethodCallExpression" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Linq::Expressions::MethodCallExpression ^ Call(System::Linq::Expressions::Expression ^ instance, System::Reflection::MethodInfo ^ method, ... cli::array &lt;System::Linq::Expressions::Expression ^&gt; ^ arguments);" />
      <MemberSignature Language="F#" Value="static member Call : System.Linq.Expressions.Expression * System.Reflection.MethodInfo * System.Linq.Expressions.Expression[] -&gt; System.Linq.Expressions.MethodCallExpression" Usage="System.Linq.Expressions.Expression.Call (instance, method, arguments)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.MethodCallExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="instance" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="method" Type="System.Reflection.MethodInfo" />
        <Parameter Name="arguments" Type="System.Linq.Expressions.Expression[]">
          <Attributes>
            <Attribute>
              <AttributeName>System.ParamArray</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="instance">
          <span data-ttu-id="fef91-679">Выражение <see cref="T:System.Linq.Expressions.Expression" />, задающее экземпляр для вызова метода экземпляра(для метода <see langword="null" /> (<see langword="static" /> в Visual Basic) передается <see langword="Shared" />).</span>
          <span class="sxs-lookup">
            <span data-stu-id="fef91-679">An <see cref="T:System.Linq.Expressions.Expression" /> that specifies the instance for an instance method call (pass <see langword="null" /> for a <see langword="static" /> (<see langword="Shared" /> in Visual Basic) method).</span>
          </span>
        </param>
        <param name="method">
          <span data-ttu-id="fef91-680">Объект <see cref="T:System.Reflection.MethodInfo" />, который следует задать в качестве значения свойства <see cref="P:System.Linq.Expressions.MethodCallExpression.Method" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fef91-680">A <see cref="T:System.Reflection.MethodInfo" /> to set the <see cref="P:System.Linq.Expressions.MethodCallExpression.Method" /> property equal to.</span>
          </span>
        </param>
        <param name="arguments">
          <span data-ttu-id="fef91-681">Массив объектов <see cref="T:System.Linq.Expressions.Expression" /> для заполнения коллекции <see cref="P:System.Linq.Expressions.MethodCallExpression.Arguments" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fef91-681">An array of <see cref="T:System.Linq.Expressions.Expression" /> objects to use to populate the <see cref="P:System.Linq.Expressions.MethodCallExpression.Arguments" /> collection.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="fef91-682">Создает выражение <see cref="T:System.Linq.Expressions.MethodCallExpression" />, представляющее вызов метода, принимающего аргументы.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fef91-682">Creates a <see cref="T:System.Linq.Expressions.MethodCallExpression" /> that represents a call to a method that takes arguments.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="fef91-683">Выражение <see cref="T:System.Linq.Expressions.MethodCallExpression" /> со свойством <see cref="P:System.Linq.Expressions.Expression.NodeType" />, равным <see cref="F:System.Linq.Expressions.ExpressionType.Call" />, и свойствами <see cref="P:System.Linq.Expressions.MethodCallExpression.Object" />, <see cref="P:System.Linq.Expressions.MethodCallExpression.Method" /> и <see cref="P:System.Linq.Expressions.MethodCallExpression.Arguments" />, для которых заданы указанные значения.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fef91-683">A <see cref="T:System.Linq.Expressions.MethodCallExpression" /> that has the <see cref="P:System.Linq.Expressions.Expression.NodeType" /> property equal to <see cref="F:System.Linq.Expressions.ExpressionType.Call" /> and the <see cref="P:System.Linq.Expressions.MethodCallExpression.Object" />, <see cref="P:System.Linq.Expressions.MethodCallExpression.Method" />, and <see cref="P:System.Linq.Expressions.MethodCallExpression.Arguments" /> properties set to the specified values.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="fef91-684">Для представления вызов `static` (`Shared` в Visual Basic) метод, передав `null` для `instance` параметра при вызове этого метода или вызывать <xref:System.Linq.Expressions.Expression.Call%2A> вместо этого.</span><span class="sxs-lookup"><span data-stu-id="fef91-684">To represent a call to a `static` (`Shared` in Visual Basic) method, pass in `null` for the `instance` parameter when you call this method, or call <xref:System.Linq.Expressions.Expression.Call%2A> instead.</span></span>  
  
 <span data-ttu-id="fef91-685">Если `method` представляет метод экземпляра, <xref:System.Linq.Expressions.Expression.Type%2A> свойство `instance` должен быть назначаемым в объявляющий тип метода, представленного свойством `method`.</span><span class="sxs-lookup"><span data-stu-id="fef91-685">If `method` represents an instance method, the <xref:System.Linq.Expressions.Expression.Type%2A> property of `instance` must be assignable to the declaring type of the method represented by `method`.</span></span>  
  
 <span data-ttu-id="fef91-686">Если `arguments` не `null`, он должен иметь одинаковое количество элементов, как число параметров для метода, представленного свойством `method`.</span><span class="sxs-lookup"><span data-stu-id="fef91-686">If `arguments` is not `null`, it must have the same number of elements as the number of parameters for the method represented by `method`.</span></span> <span data-ttu-id="fef91-687">Каждый элемент `arguments` не должно быть `null` и должен быть назначен соответствующего параметра `method`, возможно после *заключения в кавычки*.</span><span class="sxs-lookup"><span data-stu-id="fef91-687">Each element in `arguments` must not be `null` and must be assignable to the corresponding parameter of `method`, possibly after *quoting*.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="fef91-688">Элемент будет заключаться в кавычки только в том случае, если соответствующий параметр метода имеет тип <xref:System.Linq.Expressions.Expression>.</span><span class="sxs-lookup"><span data-stu-id="fef91-688">An element will be quoted only if the corresponding method parameter is of type <xref:System.Linq.Expressions.Expression>.</span></span> <span data-ttu-id="fef91-689">Заключение в кавычки означает, что элемент помещается в <xref:System.Linq.Expressions.ExpressionType.Quote> узла.</span><span class="sxs-lookup"><span data-stu-id="fef91-689">Quoting means the element is wrapped in a <xref:System.Linq.Expressions.ExpressionType.Quote> node.</span></span> <span data-ttu-id="fef91-690">Полученный в результате узел является <xref:System.Linq.Expressions.UnaryExpression> которого <xref:System.Linq.Expressions.UnaryExpression.Operand%2A> свойство является элементом `arguments`.</span><span class="sxs-lookup"><span data-stu-id="fef91-690">The resulting node is a <xref:System.Linq.Expressions.UnaryExpression> whose <xref:System.Linq.Expressions.UnaryExpression.Operand%2A> property is the element of `arguments`.</span></span>  
  
 <span data-ttu-id="fef91-691"><xref:System.Linq.Expressions.MethodCallExpression.Arguments%2A> Результирующего <xref:System.Linq.Expressions.MethodCallExpression> пуст Если `arguments` является `null`.</span><span class="sxs-lookup"><span data-stu-id="fef91-691">The <xref:System.Linq.Expressions.MethodCallExpression.Arguments%2A> property of the resulting <xref:System.Linq.Expressions.MethodCallExpression> is empty if `arguments` is `null`.</span></span> <span data-ttu-id="fef91-692">В противном случае он содержит те же элементы, что `arguments`, некоторые из которых может быть заключено в кавычки.</span><span class="sxs-lookup"><span data-stu-id="fef91-692">Otherwise, it contains the same elements as `arguments`, some of which may be quoted.</span></span>  
  
 <span data-ttu-id="fef91-693"><xref:System.Linq.Expressions.Expression.Type%2A> Результирующего <xref:System.Linq.Expressions.MethodCallExpression> равен тип возвращаемого значения метода, представленного свойством `method`.</span><span class="sxs-lookup"><span data-stu-id="fef91-693">The <xref:System.Linq.Expressions.Expression.Type%2A> property of the resulting <xref:System.Linq.Expressions.MethodCallExpression> is equal to the return type of the method represented by `method`.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="fef91-694">
            <paramref name="method" /> — <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fef91-694">
              <paramref name="method" /> is <see langword="null" />.</span>
          </span>
          <span data-ttu-id="fef91-695">-или-</span>
          <span class="sxs-lookup">
            <span data-stu-id="fef91-695">-or-</span>
          </span>
          <span data-ttu-id="fef91-696">Свойство <paramref name="instance" /> имеет значение <see langword="null" />, а свойство <paramref name="method" /> представляет метод экземпляра.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fef91-696">
              <paramref name="instance" /> is <see langword="null" /> and <paramref name="method" /> represents an instance method.</span>
          </span>
          <span data-ttu-id="fef91-697">-или-</span>
          <span class="sxs-lookup">
            <span data-stu-id="fef91-697">-or-</span>
          </span>
          <span data-ttu-id="fef91-698">
            <paramref name="arguments" /> не является <see langword="null" /> и один или несколько его элементов является <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fef91-698">
              <paramref name="arguments" /> is not <see langword="null" /> and one or more of its elements is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="fef91-699">
            <paramref name="instance" />.Type не может быть назначен объявляющему типу метода, представленного свойством <paramref name="method" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fef91-699">
              <paramref name="instance" />.Type is not assignable to the declaring type of the method represented by <paramref name="method" />.</span>
          </span>
          <span data-ttu-id="fef91-700">-или-</span>
          <span class="sxs-lookup">
            <span data-stu-id="fef91-700">-or-</span>
          </span>
          <span data-ttu-id="fef91-701">Число элементов в <paramref name="arguments" /> не соответствует числу параметров метода, представленного свойством <paramref name="method" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fef91-701">The number of elements in <paramref name="arguments" /> does not equal the number of parameters for the method represented by <paramref name="method" />.</span>
          </span>
          <span data-ttu-id="fef91-702">-или-</span>
          <span class="sxs-lookup">
            <span data-stu-id="fef91-702">-or-</span>
          </span>
          <span data-ttu-id="fef91-703">Один или несколько элементов <paramref name="arguments" /> нельзя назначить для соответствующего параметра для метода, представленного параметром <paramref name="method" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fef91-703">One or more of the elements of <paramref name="arguments" /> is not assignable to the corresponding parameter for the method represented by <paramref name="method" />.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="Call">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.MethodCallExpression Call (System.Reflection.MethodInfo method, System.Linq.Expressions.Expression arg0, System.Linq.Expressions.Expression arg1);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.MethodCallExpression Call(class System.Reflection.MethodInfo method, class System.Linq.Expressions.Expression arg0, class System.Linq.Expressions.Expression arg1) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.Call(System.Reflection.MethodInfo,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Call (method As MethodInfo, arg0 As Expression, arg1 As Expression) As MethodCallExpression" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Linq::Expressions::MethodCallExpression ^ Call(System::Reflection::MethodInfo ^ method, System::Linq::Expressions::Expression ^ arg0, System::Linq::Expressions::Expression ^ arg1);" />
      <MemberSignature Language="F#" Value="static member Call : System.Reflection.MethodInfo * System.Linq.Expressions.Expression * System.Linq.Expressions.Expression -&gt; System.Linq.Expressions.MethodCallExpression" Usage="System.Linq.Expressions.Expression.Call (method, arg0, arg1)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.MethodCallExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="method" Type="System.Reflection.MethodInfo" />
        <Parameter Name="arg0" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="arg1" Type="System.Linq.Expressions.Expression" />
      </Parameters>
      <Docs>
        <param name="method">
          <span data-ttu-id="fef91-704">Объект <see cref="T:System.Reflection.MethodInfo" />, который следует задать в качестве значения свойства <see cref="P:System.Linq.Expressions.MethodCallExpression.Method" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fef91-704">A <see cref="T:System.Reflection.MethodInfo" /> to set the <see cref="P:System.Linq.Expressions.MethodCallExpression.Method" /> property equal to.</span>
          </span>
        </param>
        <param name="arg0">
          <span data-ttu-id="fef91-705">Объект <see cref="T:System.Linq.Expressions.Expression" />, представляющий первый аргумент.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fef91-705">The <see cref="T:System.Linq.Expressions.Expression" /> that represents the first argument.</span>
          </span>
        </param>
        <param name="arg1">
          <span data-ttu-id="fef91-706">Объект <see cref="T:System.Linq.Expressions.Expression" />, представляющий второй аргумент.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fef91-706">The <see cref="T:System.Linq.Expressions.Expression" /> that represents the second argument.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="fef91-707">Создает выражение <see cref="T:System.Linq.Expressions.MethodCallExpression" />, представляющее вызов статического метода, принимающего два аргумента.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fef91-707">Creates a <see cref="T:System.Linq.Expressions.MethodCallExpression" /> that represents a call to a static method that takes two arguments.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="fef91-708">Выражение <see cref="T:System.Linq.Expressions.MethodCallExpression" /> со свойством<see cref="P:System.Linq.Expressions.Expression.NodeType" />, равным <see cref="F:System.Linq.Expressions.ExpressionType.Call" />, и свойствами <see cref="P:System.Linq.Expressions.MethodCallExpression.Object" /> и <see cref="P:System.Linq.Expressions.MethodCallExpression.Method" />, для которых заданы указанные значения.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fef91-708">A <see cref="T:System.Linq.Expressions.MethodCallExpression" /> that has the <see cref="P:System.Linq.Expressions.Expression.NodeType" /> property equal to <see cref="F:System.Linq.Expressions.ExpressionType.Call" /> and the <see cref="P:System.Linq.Expressions.MethodCallExpression.Object" /> and <see cref="P:System.Linq.Expressions.MethodCallExpression.Method" /> properties set to the specified values.</span>
          </span>
        </returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="fef91-709">Значение параметра <paramref name="method" /> равно null.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fef91-709">
              <paramref name="method" /> is null.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="Call">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.MethodCallExpression Call (System.Linq.Expressions.Expression instance, System.Reflection.MethodInfo method, System.Linq.Expressions.Expression arg0, System.Linq.Expressions.Expression arg1);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.MethodCallExpression Call(class System.Linq.Expressions.Expression instance, class System.Reflection.MethodInfo method, class System.Linq.Expressions.Expression arg0, class System.Linq.Expressions.Expression arg1) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.Call(System.Linq.Expressions.Expression,System.Reflection.MethodInfo,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Call (instance As Expression, method As MethodInfo, arg0 As Expression, arg1 As Expression) As MethodCallExpression" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Linq::Expressions::MethodCallExpression ^ Call(System::Linq::Expressions::Expression ^ instance, System::Reflection::MethodInfo ^ method, System::Linq::Expressions::Expression ^ arg0, System::Linq::Expressions::Expression ^ arg1);" />
      <MemberSignature Language="F#" Value="static member Call : System.Linq.Expressions.Expression * System.Reflection.MethodInfo * System.Linq.Expressions.Expression * System.Linq.Expressions.Expression -&gt; System.Linq.Expressions.MethodCallExpression" Usage="System.Linq.Expressions.Expression.Call (instance, method, arg0, arg1)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.MethodCallExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="instance" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="method" Type="System.Reflection.MethodInfo" />
        <Parameter Name="arg0" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="arg1" Type="System.Linq.Expressions.Expression" />
      </Parameters>
      <Docs>
        <param name="instance">
          <span data-ttu-id="fef91-710">Выражение <see cref="T:System.Linq.Expressions.Expression" />, указывающее экземпляр для вызова экземпляра.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fef91-710">An <see cref="T:System.Linq.Expressions.Expression" /> that specifies the instance for an instance call.</span>
          </span>
          <span data-ttu-id="fef91-711">(Для статического метода (Shared в Visual Basic) передается NULL.)</span>
          <span class="sxs-lookup">
            <span data-stu-id="fef91-711">(pass null for a static (Shared in Visual Basic) method).</span>
          </span>
        </param>
        <param name="method">
          <span data-ttu-id="fef91-712">Объект <see cref="T:System.Reflection.MethodInfo" />, представляющий целевой метод.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fef91-712">The <see cref="T:System.Reflection.MethodInfo" /> that represents the target method.</span>
          </span>
        </param>
        <param name="arg0">
          <span data-ttu-id="fef91-713">Объект <see cref="T:System.Linq.Expressions.Expression" />, представляющий первый аргумент.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fef91-713">The <see cref="T:System.Linq.Expressions.Expression" /> that represents the first argument.</span>
          </span>
        </param>
        <param name="arg1">
          <span data-ttu-id="fef91-714">Объект <see cref="T:System.Linq.Expressions.Expression" />, представляющий второй аргумент.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fef91-714">The <see cref="T:System.Linq.Expressions.Expression" /> that represents the second argument.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="fef91-715">Создает выражение <see cref="T:System.Linq.Expressions.MethodCallExpression" />, представляющее вызов метода, принимающий два аргумента.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fef91-715">Creates a <see cref="T:System.Linq.Expressions.MethodCallExpression" /> that represents a call to a method that takes two arguments.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="fef91-716">Выражение <see cref="T:System.Linq.Expressions.MethodCallExpression" /> со свойством<see cref="P:System.Linq.Expressions.Expression.NodeType" />, равным <see cref="F:System.Linq.Expressions.ExpressionType.Call" />, и свойствами <see cref="P:System.Linq.Expressions.MethodCallExpression.Object" /> и <see cref="P:System.Linq.Expressions.MethodCallExpression.Method" />, для которых заданы указанные значения.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fef91-716">A <see cref="T:System.Linq.Expressions.MethodCallExpression" /> that has the <see cref="P:System.Linq.Expressions.Expression.NodeType" /> property equal to <see cref="F:System.Linq.Expressions.ExpressionType.Call" /> and the <see cref="P:System.Linq.Expressions.MethodCallExpression.Object" /> and <see cref="P:System.Linq.Expressions.MethodCallExpression.Method" /> properties set to the specified values.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 <span data-ttu-id="fef91-717">В следующем примере кода показано, как создать выражение, которое вызывает метод экземпляра с двумя аргументами.</span><span class="sxs-lookup"><span data-stu-id="fef91-717">The following code example shows how to create an expression that calls an instance method that has two arguments.</span></span>  
  
 [!code-csharp[System.Linq.Expressions.ExpressionDev10#17](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.linq.expressions.expressiondev10/cs/program.cs#17)]
 [!code-vb[System.Linq.Expressions.ExpressionDev10#17](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.linq.expressions.expressiondev10/vb/module1.vb#17)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Call">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.MethodCallExpression Call (System.Linq.Expressions.Expression instance, string methodName, Type[] typeArguments, params System.Linq.Expressions.Expression[] arguments);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.MethodCallExpression Call(class System.Linq.Expressions.Expression instance, string methodName, class System.Type[] typeArguments, class System.Linq.Expressions.Expression[] arguments) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.Call(System.Linq.Expressions.Expression,System.String,System.Type[],System.Linq.Expressions.Expression[])" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Call (instance As Expression, methodName As String, typeArguments As Type(), ParamArray arguments As Expression()) As MethodCallExpression" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Linq::Expressions::MethodCallExpression ^ Call(System::Linq::Expressions::Expression ^ instance, System::String ^ methodName, cli::array &lt;Type ^&gt; ^ typeArguments, ... cli::array &lt;System::Linq::Expressions::Expression ^&gt; ^ arguments);" />
      <MemberSignature Language="F#" Value="static member Call : System.Linq.Expressions.Expression * string * Type[] * System.Linq.Expressions.Expression[] -&gt; System.Linq.Expressions.MethodCallExpression" Usage="System.Linq.Expressions.Expression.Call (instance, methodName, typeArguments, arguments)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.MethodCallExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="instance" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="methodName" Type="System.String" />
        <Parameter Name="typeArguments" Type="System.Type[]" />
        <Parameter Name="arguments" Type="System.Linq.Expressions.Expression[]">
          <Attributes>
            <Attribute>
              <AttributeName>System.ParamArray</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="instance">
          <span data-ttu-id="fef91-718">
            <see cref="T:System.Linq.Expressions.Expression" />, для значения свойства <see cref="P:System.Linq.Expressions.Expression.Type" /> которого будет выполнен поиск определенного метода</span>
          <span class="sxs-lookup">
            <span data-stu-id="fef91-718">An <see cref="T:System.Linq.Expressions.Expression" /> whose <see cref="P:System.Linq.Expressions.Expression.Type" /> property value will be searched for a specific method.</span>
          </span>
        </param>
        <param name="methodName">
          <span data-ttu-id="fef91-719">Имя метода.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fef91-719">The name of the method.</span>
          </span>
        </param>
        <param name="typeArguments">
          <span data-ttu-id="fef91-720">Массив объектов <see cref="T:System.Type" />, указывающий тип параметров универсального метода.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fef91-720">An array of <see cref="T:System.Type" /> objects that specify the type parameters of the generic method.</span>
          </span>
          <span data-ttu-id="fef91-721">Если methodName задает неуниверсальный метод, данный аргумент должен иметь значение NULL.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fef91-721">This argument should be null when methodName specifies a non-generic method.</span>
          </span>
        </param>
        <param name="arguments">
          <span data-ttu-id="fef91-722">Массив объектов <see cref="T:System.Linq.Expressions.Expression" />, который представляет аргументы для метода.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fef91-722">An array of <see cref="T:System.Linq.Expressions.Expression" /> objects that represents the arguments to the method.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="fef91-723">Создает <see cref="T:System.Linq.Expressions.MethodCallExpression" />, представляющий вызов для метода, вызывая соответствующий заводской метод.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fef91-723">Creates a <see cref="T:System.Linq.Expressions.MethodCallExpression" /> that represents a call to a method by calling the appropriate factory method.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="fef91-724">Выражение <see cref="T:System.Linq.Expressions.MethodCallExpression" />, содержащее свойство <see cref="P:System.Linq.Expressions.Expression.NodeType" />, равное <see cref="F:System.Linq.Expressions.ExpressionType.Call" />, свойство <see cref="P:System.Linq.Expressions.MethodCallExpression.Object" />, равное <paramref name="instance" />, для <see cref="P:System.Linq.Expressions.MethodCallExpression.Method" />, задано значение <see cref="T:System.Reflection.MethodInfo" />, представляющее указанный метод экземпляра, а для указанных аргументов заданы значения <see cref="P:System.Linq.Expressions.MethodCallExpression.Arguments" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fef91-724">A <see cref="T:System.Linq.Expressions.MethodCallExpression" /> that has the <see cref="P:System.Linq.Expressions.Expression.NodeType" /> property equal to <see cref="F:System.Linq.Expressions.ExpressionType.Call" />, the <see cref="P:System.Linq.Expressions.MethodCallExpression.Object" /> property equal to <paramref name="instance" />, <see cref="P:System.Linq.Expressions.MethodCallExpression.Method" /> set to the <see cref="T:System.Reflection.MethodInfo" /> that represents the specified instance method, and <see cref="P:System.Linq.Expressions.MethodCallExpression.Arguments" /> set to the specified arguments.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="fef91-725"><xref:System.Linq.Expressions.Expression.Type%2A> Результирующего <xref:System.Linq.Expressions.MethodCallExpression> равен тип возвращаемого значения метода, обозначенное с помощью `methodName`.</span><span class="sxs-lookup"><span data-stu-id="fef91-725">The <xref:System.Linq.Expressions.Expression.Type%2A> property of the resulting <xref:System.Linq.Expressions.MethodCallExpression> is equal to the return type of the method denoted by `methodName`.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="fef91-726">Значение параметра <paramref name="instance" /> или <paramref name="methodName" /> — <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fef91-726">
              <paramref name="instance" /> or <paramref name="methodName" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.InvalidOperationException">
          <span data-ttu-id="fef91-727">Отсутствует метод с именем <paramref name="methodName" />, параметры типа которого соответствуют <paramref name="typeArguments" /> и типы параметров которого <paramref name="arguments" /> обнаружены в типе <paramref name="instance" />.Type или его базовых типах.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fef91-727">No method whose name is <paramref name="methodName" />, whose type parameters match <paramref name="typeArguments" />, and whose parameter types match <paramref name="arguments" /> is found in <paramref name="instance" />.Type or its base types.</span>
          </span>
          <span data-ttu-id="fef91-728">-или-</span>
          <span class="sxs-lookup">
            <span data-stu-id="fef91-728">-or-</span>
          </span>
          <span data-ttu-id="fef91-729">Больше одного метода с именем <paramref name="methodName" />, параметры типа которого соответствуют <paramref name="typeArguments" />, и типы параметров которого <paramref name="arguments" /> обнаружены в типе <paramref name="instance" />.Type или его базовых типах.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fef91-729">More than one method whose name is <paramref name="methodName" />, whose type parameters match <paramref name="typeArguments" />, and whose parameter types match <paramref name="arguments" /> is found in <paramref name="instance" />.Type or its base types.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="Call">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.MethodCallExpression Call (System.Reflection.MethodInfo method, System.Linq.Expressions.Expression arg0, System.Linq.Expressions.Expression arg1, System.Linq.Expressions.Expression arg2);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.MethodCallExpression Call(class System.Reflection.MethodInfo method, class System.Linq.Expressions.Expression arg0, class System.Linq.Expressions.Expression arg1, class System.Linq.Expressions.Expression arg2) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.Call(System.Reflection.MethodInfo,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Call (method As MethodInfo, arg0 As Expression, arg1 As Expression, arg2 As Expression) As MethodCallExpression" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Linq::Expressions::MethodCallExpression ^ Call(System::Reflection::MethodInfo ^ method, System::Linq::Expressions::Expression ^ arg0, System::Linq::Expressions::Expression ^ arg1, System::Linq::Expressions::Expression ^ arg2);" />
      <MemberSignature Language="F#" Value="static member Call : System.Reflection.MethodInfo * System.Linq.Expressions.Expression * System.Linq.Expressions.Expression * System.Linq.Expressions.Expression -&gt; System.Linq.Expressions.MethodCallExpression" Usage="System.Linq.Expressions.Expression.Call (method, arg0, arg1, arg2)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.MethodCallExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="method" Type="System.Reflection.MethodInfo" />
        <Parameter Name="arg0" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="arg1" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="arg2" Type="System.Linq.Expressions.Expression" />
      </Parameters>
      <Docs>
        <param name="method">
          <span data-ttu-id="fef91-730">Объект <see cref="T:System.Reflection.MethodInfo" />, который следует задать в качестве значения свойства <see cref="P:System.Linq.Expressions.MethodCallExpression.Method" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fef91-730">A <see cref="T:System.Reflection.MethodInfo" /> to set the <see cref="P:System.Linq.Expressions.MethodCallExpression.Method" /> property equal to.</span>
          </span>
        </param>
        <param name="arg0">
          <span data-ttu-id="fef91-731">Объект <see cref="T:System.Linq.Expressions.Expression" />, представляющий первый аргумент.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fef91-731">The <see cref="T:System.Linq.Expressions.Expression" /> that represents the first argument.</span>
          </span>
        </param>
        <param name="arg1">
          <span data-ttu-id="fef91-732">Объект <see cref="T:System.Linq.Expressions.Expression" />, представляющий второй аргумент.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fef91-732">The <see cref="T:System.Linq.Expressions.Expression" /> that represents the second argument.</span>
          </span>
        </param>
        <param name="arg2">
          <span data-ttu-id="fef91-733">Объект <see cref="T:System.Linq.Expressions.Expression" />, представляющий третий аргумент.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fef91-733">The <see cref="T:System.Linq.Expressions.Expression" /> that represents the third argument.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="fef91-734">Создает выражение <see cref="T:System.Linq.Expressions.MethodCallExpression" />, представляющее вызов статического метода, принимающего три аргумента.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fef91-734">Creates a <see cref="T:System.Linq.Expressions.MethodCallExpression" /> that represents a call to a static method that takes three arguments.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="fef91-735">Выражение <see cref="T:System.Linq.Expressions.MethodCallExpression" /> со свойством<see cref="P:System.Linq.Expressions.Expression.NodeType" />, равным <see cref="F:System.Linq.Expressions.ExpressionType.Call" />, и свойствами <see cref="P:System.Linq.Expressions.MethodCallExpression.Object" /> и <see cref="P:System.Linq.Expressions.MethodCallExpression.Method" />, для которых заданы указанные значения.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fef91-735">A <see cref="T:System.Linq.Expressions.MethodCallExpression" /> that has the <see cref="P:System.Linq.Expressions.Expression.NodeType" /> property equal to <see cref="F:System.Linq.Expressions.ExpressionType.Call" /> and the <see cref="P:System.Linq.Expressions.MethodCallExpression.Object" /> and <see cref="P:System.Linq.Expressions.MethodCallExpression.Method" /> properties set to the specified values.</span>
          </span>
        </returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="fef91-736">Значение параметра <paramref name="method" /> равно null.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fef91-736">
              <paramref name="method" /> is null.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="Call">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.MethodCallExpression Call (Type type, string methodName, Type[] typeArguments, params System.Linq.Expressions.Expression[] arguments);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.MethodCallExpression Call(class System.Type type, string methodName, class System.Type[] typeArguments, class System.Linq.Expressions.Expression[] arguments) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.Call(System.Type,System.String,System.Type[],System.Linq.Expressions.Expression[])" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Linq::Expressions::MethodCallExpression ^ Call(Type ^ type, System::String ^ methodName, cli::array &lt;Type ^&gt; ^ typeArguments, ... cli::array &lt;System::Linq::Expressions::Expression ^&gt; ^ arguments);" />
      <MemberSignature Language="F#" Value="static member Call : Type * string * Type[] * System.Linq.Expressions.Expression[] -&gt; System.Linq.Expressions.MethodCallExpression" Usage="System.Linq.Expressions.Expression.Call (type, methodName, typeArguments, arguments)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.MethodCallExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="type" Type="System.Type" />
        <Parameter Name="methodName" Type="System.String" />
        <Parameter Name="typeArguments" Type="System.Type[]" />
        <Parameter Name="arguments" Type="System.Linq.Expressions.Expression[]">
          <Attributes>
            <Attribute>
              <AttributeName>System.ParamArray</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="type">
          <span data-ttu-id="fef91-737">Объект <see cref="T:System.Type" />, указывающий тип, который содержит указанный метод <see langword="static" /> (<see langword="Shared" /> в Visual Basic).</span>
          <span class="sxs-lookup">
            <span data-stu-id="fef91-737">The <see cref="T:System.Type" /> that specifies the type that contains the specified <see langword="static" /> (<see langword="Shared" /> in Visual Basic) method.</span>
          </span>
        </param>
        <param name="methodName">
          <span data-ttu-id="fef91-738">Имя метода.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fef91-738">The name of the method.</span>
          </span>
        </param>
        <param name="typeArguments">
          <span data-ttu-id="fef91-739">Массив объектов <see cref="T:System.Type" />, указывающий тип параметров универсального метода.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fef91-739">An array of <see cref="T:System.Type" /> objects that specify the type parameters of the generic method.</span>
          </span>
          <span data-ttu-id="fef91-740">Если methodName задает неуниверсальный метод, данный аргумент должен иметь значение NULL.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fef91-740">This argument should be null when methodName specifies a non-generic method.</span>
          </span>
        </param>
        <param name="arguments">
          <span data-ttu-id="fef91-741">Массив объектов <see cref="T:System.Linq.Expressions.Expression" />, которые представляют аргументы для метода.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fef91-741">An array of <see cref="T:System.Linq.Expressions.Expression" /> objects that represent the arguments to the method.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="fef91-742">Создает <see cref="T:System.Linq.Expressions.MethodCallExpression" />, представляющий вызов для метода <see langword="static" /> (<see langword="Shared" /> в Visual Basic), вызывая соответствующий заводской метод.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fef91-742">Creates a <see cref="T:System.Linq.Expressions.MethodCallExpression" /> that represents a call to a <see langword="static" /> (<see langword="Shared" /> in Visual Basic) method by calling the appropriate factory method.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="fef91-743">Выражение <see cref="T:System.Linq.Expressions.MethodCallExpression" />, содержащее свойство <see cref="P:System.Linq.Expressions.Expression.NodeType" />, равное <see cref="F:System.Linq.Expressions.ExpressionType.Call" />, для свойства <see cref="P:System.Linq.Expressions.MethodCallExpression.Method" /> задано значение <see cref="T:System.Reflection.MethodInfo" />, представляющее указанный метод <see langword="static" /> (<see langword="Shared" /> в Visual Basic), а для свойства <see cref="P:System.Linq.Expressions.MethodCallExpression.Arguments" />  заданы указанные аргументы.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fef91-743">A <see cref="T:System.Linq.Expressions.MethodCallExpression" /> that has the <see cref="P:System.Linq.Expressions.Expression.NodeType" /> property equal to <see cref="F:System.Linq.Expressions.ExpressionType.Call" />, the <see cref="P:System.Linq.Expressions.MethodCallExpression.Method" /> property set to the <see cref="T:System.Reflection.MethodInfo" /> that represents the specified <see langword="static" /> (<see langword="Shared" /> in Visual Basic) method, and the <see cref="P:System.Linq.Expressions.MethodCallExpression.Arguments" /> property set to the specified arguments.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="fef91-744"><xref:System.Linq.Expressions.Expression.Type%2A> Результирующего <xref:System.Linq.Expressions.MethodCallExpression> равен тип возвращаемого значения метода, обозначенное с помощью `methodName`.</span><span class="sxs-lookup"><span data-stu-id="fef91-744">The <xref:System.Linq.Expressions.Expression.Type%2A> property of the resulting <xref:System.Linq.Expressions.MethodCallExpression> is equal to the return type of the method denoted by `methodName`.</span></span> <span data-ttu-id="fef91-745">Значение свойства <xref:System.Linq.Expressions.MethodCallExpression.Object%2A> — `null`.</span><span class="sxs-lookup"><span data-stu-id="fef91-745">The <xref:System.Linq.Expressions.MethodCallExpression.Object%2A> property is `null`.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="fef91-746">Значение параметра <paramref name="type" /> или <paramref name="methodName" /> — <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fef91-746">
              <paramref name="type" /> or <paramref name="methodName" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.InvalidOperationException">
          <span data-ttu-id="fef91-747">Отсутствует метод с именем <paramref name="methodName" />, параметры типа которого соответствуют <paramref name="typeArguments" /> и типы параметров которого <paramref name="arguments" /> обнаружены в типе <paramref name="type" /> или его базовых типах.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fef91-747">No method whose name is <paramref name="methodName" />, whose type parameters match <paramref name="typeArguments" />, and whose parameter types match <paramref name="arguments" /> is found in <paramref name="type" /> or its base types.</span>
          </span>
          <span data-ttu-id="fef91-748">-или-</span>
          <span class="sxs-lookup">
            <span data-stu-id="fef91-748">-or-</span>
          </span>
          <span data-ttu-id="fef91-749">Больше одного метода с именем <paramref name="methodName" />, параметры типа которого соответствуют <paramref name="typeArguments" />, и типы параметров которого <paramref name="arguments" /> обнаружены в типе <paramref name="type" /> или его базовых типах.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fef91-749">More than one method whose name is <paramref name="methodName" />, whose type parameters match <paramref name="typeArguments" />, and whose parameter types match <paramref name="arguments" /> is found in <paramref name="type" /> or its base types.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="Call">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.MethodCallExpression Call (System.Linq.Expressions.Expression instance, System.Reflection.MethodInfo method, System.Linq.Expressions.Expression arg0, System.Linq.Expressions.Expression arg1, System.Linq.Expressions.Expression arg2);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.MethodCallExpression Call(class System.Linq.Expressions.Expression instance, class System.Reflection.MethodInfo method, class System.Linq.Expressions.Expression arg0, class System.Linq.Expressions.Expression arg1, class System.Linq.Expressions.Expression arg2) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.Call(System.Linq.Expressions.Expression,System.Reflection.MethodInfo,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Call (instance As Expression, method As MethodInfo, arg0 As Expression, arg1 As Expression, arg2 As Expression) As MethodCallExpression" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Linq::Expressions::MethodCallExpression ^ Call(System::Linq::Expressions::Expression ^ instance, System::Reflection::MethodInfo ^ method, System::Linq::Expressions::Expression ^ arg0, System::Linq::Expressions::Expression ^ arg1, System::Linq::Expressions::Expression ^ arg2);" />
      <MemberSignature Language="F#" Value="static member Call : System.Linq.Expressions.Expression * System.Reflection.MethodInfo * System.Linq.Expressions.Expression * System.Linq.Expressions.Expression * System.Linq.Expressions.Expression -&gt; System.Linq.Expressions.MethodCallExpression" Usage="System.Linq.Expressions.Expression.Call (instance, method, arg0, arg1, arg2)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.MethodCallExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="instance" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="method" Type="System.Reflection.MethodInfo" />
        <Parameter Name="arg0" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="arg1" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="arg2" Type="System.Linq.Expressions.Expression" />
      </Parameters>
      <Docs>
        <param name="instance">
          <span data-ttu-id="fef91-750">Выражение <see cref="T:System.Linq.Expressions.Expression" />, указывающее экземпляр для вызова экземпляра.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fef91-750">An <see cref="T:System.Linq.Expressions.Expression" /> that specifies the instance for an instance call.</span>
          </span>
          <span data-ttu-id="fef91-751">(Для статического метода (Shared в Visual Basic) передается NULL.)</span>
          <span class="sxs-lookup">
            <span data-stu-id="fef91-751">(pass null for a static (Shared in Visual Basic) method).</span>
          </span>
        </param>
        <param name="method">
          <span data-ttu-id="fef91-752">Объект <see cref="T:System.Reflection.MethodInfo" />, представляющий целевой метод.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fef91-752">The <see cref="T:System.Reflection.MethodInfo" /> that represents the target method.</span>
          </span>
        </param>
        <param name="arg0">
          <span data-ttu-id="fef91-753">Объект <see cref="T:System.Linq.Expressions.Expression" />, представляющий первый аргумент.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fef91-753">The <see cref="T:System.Linq.Expressions.Expression" /> that represents the first argument.</span>
          </span>
        </param>
        <param name="arg1">
          <span data-ttu-id="fef91-754">Объект <see cref="T:System.Linq.Expressions.Expression" />, представляющий второй аргумент.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fef91-754">The <see cref="T:System.Linq.Expressions.Expression" /> that represents the second argument.</span>
          </span>
        </param>
        <param name="arg2">
          <span data-ttu-id="fef91-755">Объект <see cref="T:System.Linq.Expressions.Expression" />, представляющий третий аргумент.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fef91-755">The <see cref="T:System.Linq.Expressions.Expression" /> that represents the third argument.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="fef91-756">Создает <see cref="T:System.Linq.Expressions.MethodCallExpression" />, представляющий вызов метода с тремя аргументами.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fef91-756">Creates a <see cref="T:System.Linq.Expressions.MethodCallExpression" /> that represents a call to a method that takes three arguments.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="fef91-757">Выражение <see cref="T:System.Linq.Expressions.MethodCallExpression" /> со свойством<see cref="P:System.Linq.Expressions.Expression.NodeType" />, равным <see cref="F:System.Linq.Expressions.ExpressionType.Call" />, и свойствами <see cref="P:System.Linq.Expressions.MethodCallExpression.Object" /> и <see cref="P:System.Linq.Expressions.MethodCallExpression.Method" />, для которых заданы указанные значения.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fef91-757">A <see cref="T:System.Linq.Expressions.MethodCallExpression" /> that has the <see cref="P:System.Linq.Expressions.Expression.NodeType" /> property equal to <see cref="F:System.Linq.Expressions.ExpressionType.Call" /> and the <see cref="P:System.Linq.Expressions.MethodCallExpression.Object" /> and <see cref="P:System.Linq.Expressions.MethodCallExpression.Method" /> properties set to the specified values.</span>
          </span>
        </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Call">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.MethodCallExpression Call (System.Reflection.MethodInfo method, System.Linq.Expressions.Expression arg0, System.Linq.Expressions.Expression arg1, System.Linq.Expressions.Expression arg2, System.Linq.Expressions.Expression arg3);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.MethodCallExpression Call(class System.Reflection.MethodInfo method, class System.Linq.Expressions.Expression arg0, class System.Linq.Expressions.Expression arg1, class System.Linq.Expressions.Expression arg2, class System.Linq.Expressions.Expression arg3) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.Call(System.Reflection.MethodInfo,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Call (method As MethodInfo, arg0 As Expression, arg1 As Expression, arg2 As Expression, arg3 As Expression) As MethodCallExpression" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Linq::Expressions::MethodCallExpression ^ Call(System::Reflection::MethodInfo ^ method, System::Linq::Expressions::Expression ^ arg0, System::Linq::Expressions::Expression ^ arg1, System::Linq::Expressions::Expression ^ arg2, System::Linq::Expressions::Expression ^ arg3);" />
      <MemberSignature Language="F#" Value="static member Call : System.Reflection.MethodInfo * System.Linq.Expressions.Expression * System.Linq.Expressions.Expression * System.Linq.Expressions.Expression * System.Linq.Expressions.Expression -&gt; System.Linq.Expressions.MethodCallExpression" Usage="System.Linq.Expressions.Expression.Call (method, arg0, arg1, arg2, arg3)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.MethodCallExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="method" Type="System.Reflection.MethodInfo" />
        <Parameter Name="arg0" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="arg1" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="arg2" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="arg3" Type="System.Linq.Expressions.Expression" />
      </Parameters>
      <Docs>
        <param name="method">
          <span data-ttu-id="fef91-758">Объект <see cref="T:System.Reflection.MethodInfo" />, который следует задать в качестве значения свойства <see cref="P:System.Linq.Expressions.MethodCallExpression.Method" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fef91-758">A <see cref="T:System.Reflection.MethodInfo" /> to set the <see cref="P:System.Linq.Expressions.MethodCallExpression.Method" /> property equal to.</span>
          </span>
        </param>
        <param name="arg0">
          <span data-ttu-id="fef91-759">Объект <see cref="T:System.Linq.Expressions.Expression" />, представляющий первый аргумент.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fef91-759">The <see cref="T:System.Linq.Expressions.Expression" /> that represents the first argument.</span>
          </span>
        </param>
        <param name="arg1">
          <span data-ttu-id="fef91-760">Объект <see cref="T:System.Linq.Expressions.Expression" />, представляющий второй аргумент.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fef91-760">The <see cref="T:System.Linq.Expressions.Expression" /> that represents the second argument.</span>
          </span>
        </param>
        <param name="arg2">
          <span data-ttu-id="fef91-761">Объект <see cref="T:System.Linq.Expressions.Expression" />, представляющий третий аргумент.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fef91-761">The <see cref="T:System.Linq.Expressions.Expression" /> that represents the third argument.</span>
          </span>
        </param>
        <param name="arg3">
          <span data-ttu-id="fef91-762">Объект <see cref="T:System.Linq.Expressions.Expression" />, представляющий четвертый аргумент.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fef91-762">The <see cref="T:System.Linq.Expressions.Expression" /> that represents the fourth argument.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="fef91-763">Создает выражение <see cref="T:System.Linq.Expressions.MethodCallExpression" />, представляющее вызов статического метода, принимающего четыре аргумента.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fef91-763">Creates a <see cref="T:System.Linq.Expressions.MethodCallExpression" /> that represents a call to a static method that takes four arguments.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="fef91-764">Выражение <see cref="T:System.Linq.Expressions.MethodCallExpression" /> со свойством<see cref="P:System.Linq.Expressions.Expression.NodeType" />, равным <see cref="F:System.Linq.Expressions.ExpressionType.Call" />, и свойствами <see cref="P:System.Linq.Expressions.MethodCallExpression.Object" /> и <see cref="P:System.Linq.Expressions.MethodCallExpression.Method" />, для которых заданы указанные значения.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fef91-764">A <see cref="T:System.Linq.Expressions.MethodCallExpression" /> that has the <see cref="P:System.Linq.Expressions.Expression.NodeType" /> property equal to <see cref="F:System.Linq.Expressions.ExpressionType.Call" /> and the <see cref="P:System.Linq.Expressions.MethodCallExpression.Object" /> and <see cref="P:System.Linq.Expressions.MethodCallExpression.Method" /> properties set to the specified values.</span>
          </span>
        </returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="fef91-765">Значение параметра <paramref name="method" /> равно null.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fef91-765">
              <paramref name="method" /> is null.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="Call">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.MethodCallExpression Call (System.Reflection.MethodInfo method, System.Linq.Expressions.Expression arg0, System.Linq.Expressions.Expression arg1, System.Linq.Expressions.Expression arg2, System.Linq.Expressions.Expression arg3, System.Linq.Expressions.Expression arg4);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.MethodCallExpression Call(class System.Reflection.MethodInfo method, class System.Linq.Expressions.Expression arg0, class System.Linq.Expressions.Expression arg1, class System.Linq.Expressions.Expression arg2, class System.Linq.Expressions.Expression arg3, class System.Linq.Expressions.Expression arg4) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.Call(System.Reflection.MethodInfo,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Call (method As MethodInfo, arg0 As Expression, arg1 As Expression, arg2 As Expression, arg3 As Expression, arg4 As Expression) As MethodCallExpression" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Linq::Expressions::MethodCallExpression ^ Call(System::Reflection::MethodInfo ^ method, System::Linq::Expressions::Expression ^ arg0, System::Linq::Expressions::Expression ^ arg1, System::Linq::Expressions::Expression ^ arg2, System::Linq::Expressions::Expression ^ arg3, System::Linq::Expressions::Expression ^ arg4);" />
      <MemberSignature Language="F#" Value="static member Call : System.Reflection.MethodInfo * System.Linq.Expressions.Expression * System.Linq.Expressions.Expression * System.Linq.Expressions.Expression * System.Linq.Expressions.Expression * System.Linq.Expressions.Expression -&gt; System.Linq.Expressions.MethodCallExpression" Usage="System.Linq.Expressions.Expression.Call (method, arg0, arg1, arg2, arg3, arg4)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.MethodCallExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="method" Type="System.Reflection.MethodInfo" />
        <Parameter Name="arg0" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="arg1" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="arg2" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="arg3" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="arg4" Type="System.Linq.Expressions.Expression" />
      </Parameters>
      <Docs>
        <param name="method">
          <span data-ttu-id="fef91-766">Объект <see cref="T:System.Reflection.MethodInfo" />, который следует задать в качестве значения свойства <see cref="P:System.Linq.Expressions.MethodCallExpression.Method" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fef91-766">A <see cref="T:System.Reflection.MethodInfo" /> to set the <see cref="P:System.Linq.Expressions.MethodCallExpression.Method" /> property equal to.</span>
          </span>
        </param>
        <param name="arg0">
          <span data-ttu-id="fef91-767">Объект <see cref="T:System.Linq.Expressions.Expression" />, представляющий первый аргумент.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fef91-767">The <see cref="T:System.Linq.Expressions.Expression" /> that represents the first argument.</span>
          </span>
        </param>
        <param name="arg1">
          <span data-ttu-id="fef91-768">Объект <see cref="T:System.Linq.Expressions.Expression" />, представляющий второй аргумент.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fef91-768">The <see cref="T:System.Linq.Expressions.Expression" /> that represents the second argument.</span>
          </span>
        </param>
        <param name="arg2">
          <span data-ttu-id="fef91-769">Объект <see cref="T:System.Linq.Expressions.Expression" />, представляющий третий аргумент.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fef91-769">The <see cref="T:System.Linq.Expressions.Expression" /> that represents the third argument.</span>
          </span>
        </param>
        <param name="arg3">
          <span data-ttu-id="fef91-770">Объект <see cref="T:System.Linq.Expressions.Expression" />, представляющий четвертый аргумент.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fef91-770">The <see cref="T:System.Linq.Expressions.Expression" /> that represents the fourth argument.</span>
          </span>
        </param>
        <param name="arg4">
          <span data-ttu-id="fef91-771">Объект <see cref="T:System.Linq.Expressions.Expression" />, представляющий пятый аргумент.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fef91-771">The <see cref="T:System.Linq.Expressions.Expression" /> that represents the fifth argument.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="fef91-772">Создает выражение <see cref="T:System.Linq.Expressions.MethodCallExpression" />, представляющее вызов статического метода, принимающего пять аргументов.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fef91-772">Creates a <see cref="T:System.Linq.Expressions.MethodCallExpression" /> that represents a call to a static method that takes five arguments.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="fef91-773">Выражение <see cref="T:System.Linq.Expressions.MethodCallExpression" /> со свойством<see cref="P:System.Linq.Expressions.Expression.NodeType" />, равным <see cref="F:System.Linq.Expressions.ExpressionType.Call" />, и свойствами <see cref="P:System.Linq.Expressions.MethodCallExpression.Object" /> и <see cref="P:System.Linq.Expressions.MethodCallExpression.Method" />, для которых заданы указанные значения.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fef91-773">A <see cref="T:System.Linq.Expressions.MethodCallExpression" /> that has the <see cref="P:System.Linq.Expressions.Expression.NodeType" /> property equal to <see cref="F:System.Linq.Expressions.ExpressionType.Call" /> and the <see cref="P:System.Linq.Expressions.MethodCallExpression.Object" /> and <see cref="P:System.Linq.Expressions.MethodCallExpression.Method" /> properties set to the specified values.</span>
          </span>
        </returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="fef91-774">Значение параметра <paramref name="method" /> равно null.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fef91-774">
              <paramref name="method" /> is null.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="CanReduce">
      <MemberSignature Language="C#" Value="public virtual bool CanReduce { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool CanReduce" />
      <MemberSignature Language="DocId" Value="P:System.Linq.Expressions.Expression.CanReduce" />
      <MemberSignature Language="VB.NET" Value="Public Overridable ReadOnly Property CanReduce As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property bool CanReduce { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.CanReduce : bool" Usage="System.Linq.Expressions.Expression.CanReduce" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="fef91-775">Указывает, что узел можно сократить до более простого.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fef91-775">Indicates that the node can be reduced to a simpler node.</span>
          </span>
          <span data-ttu-id="fef91-776">Если возвращается значение true, для получения сокращенной формы можно вызвать Reduce().</span>
          <span class="sxs-lookup">
            <span data-stu-id="fef91-776">If this returns true, Reduce() can be called to produce the reduced form.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="fef91-777">Значение true, если узел можно сократить; в противном случае — значение false.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fef91-777">True if the node can be reduced, otherwise false.</span>
          </span>
        </value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="Catch">
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="fef91-778">Создает объект <see cref="T:System.Linq.Expressions.CatchBlock" />, представляющий оператор catch.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fef91-778">Creates a <see cref="T:System.Linq.Expressions.CatchBlock" /> representing a catch statement.</span>
          </span>
        </summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Catch">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.CatchBlock Catch (System.Linq.Expressions.ParameterExpression variable, System.Linq.Expressions.Expression body);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.CatchBlock Catch(class System.Linq.Expressions.ParameterExpression variable, class System.Linq.Expressions.Expression body) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.Catch(System.Linq.Expressions.ParameterExpression,System.Linq.Expressions.Expression)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Catch (variable As ParameterExpression, body As Expression) As CatchBlock" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Linq::Expressions::CatchBlock ^ Catch(System::Linq::Expressions::ParameterExpression ^ variable, System::Linq::Expressions::Expression ^ body);" />
      <MemberSignature Language="F#" Value="static member Catch : System.Linq.Expressions.ParameterExpression * System.Linq.Expressions.Expression -&gt; System.Linq.Expressions.CatchBlock" Usage="System.Linq.Expressions.Expression.Catch (variable, body)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.CatchBlock</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="variable" Type="System.Linq.Expressions.ParameterExpression" />
        <Parameter Name="body" Type="System.Linq.Expressions.Expression" />
      </Parameters>
      <Docs>
        <param name="variable">
          <span data-ttu-id="fef91-779">Объект <see cref="T:System.Linq.Expressions.ParameterExpression" />, представляющий ссылку на объект <see cref="T:System.Exception" />, перехваченный данным обработчиком.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fef91-779">A <see cref="T:System.Linq.Expressions.ParameterExpression" /> representing a reference to the <see cref="T:System.Exception" /> object caught by this handler.</span>
          </span>
        </param>
        <param name="body">
          <span data-ttu-id="fef91-780">Тело оператора catch.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fef91-780">The body of the catch statement.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="fef91-781">Создает объект <see cref="T:System.Linq.Expressions.CatchBlock" />, представляющий оператор catch со ссылкой на перехваченный объект <see cref="T:System.Exception" />, который используется в теле обработчика.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fef91-781">Creates a <see cref="T:System.Linq.Expressions.CatchBlock" /> representing a catch statement with a reference to the caught <see cref="T:System.Exception" /> object for use in the handler body.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="fef91-782">Созданный <see cref="T:System.Linq.Expressions.CatchBlock" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fef91-782">The created <see cref="T:System.Linq.Expressions.CatchBlock" />.</span>
          </span>
        </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Catch">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.CatchBlock Catch (Type type, System.Linq.Expressions.Expression body);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.CatchBlock Catch(class System.Type type, class System.Linq.Expressions.Expression body) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.Catch(System.Type,System.Linq.Expressions.Expression)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Linq::Expressions::CatchBlock ^ Catch(Type ^ type, System::Linq::Expressions::Expression ^ body);" />
      <MemberSignature Language="F#" Value="static member Catch : Type * System.Linq.Expressions.Expression -&gt; System.Linq.Expressions.CatchBlock" Usage="System.Linq.Expressions.Expression.Catch (type, body)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.CatchBlock</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="type" Type="System.Type" />
        <Parameter Name="body" Type="System.Linq.Expressions.Expression" />
      </Parameters>
      <Docs>
        <param name="type">
          <span data-ttu-id="fef91-783">Свойство <see cref="P:System.Linq.Expressions.Expression.Type" /> объекта <see cref="T:System.Exception" />, который будет обрабатываться этим объектом <see cref="T:System.Linq.Expressions.CatchBlock" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fef91-783">The <see cref="P:System.Linq.Expressions.Expression.Type" /> of <see cref="T:System.Exception" /> this <see cref="T:System.Linq.Expressions.CatchBlock" /> will handle.</span>
          </span>
        </param>
        <param name="body">
          <span data-ttu-id="fef91-784">Тело оператора catch.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fef91-784">The body of the catch statement.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="fef91-785">Создает объект <see cref="T:System.Linq.Expressions.CatchBlock" />, представляющий оператор catch.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fef91-785">Creates a <see cref="T:System.Linq.Expressions.CatchBlock" /> representing a catch statement.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="fef91-786">Созданный <see cref="T:System.Linq.Expressions.CatchBlock" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fef91-786">The created <see cref="T:System.Linq.Expressions.CatchBlock" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="fef91-787"><xref:System.Linq.Expressions.Expression.Type%2A> Из <xref:System.Exception> оказалось могут быть указаны, но нет ссылки на <xref:System.Exception> объект будет доступен для использования в <xref:System.Linq.Expressions.CatchBlock>.</span><span class="sxs-lookup"><span data-stu-id="fef91-787">The <xref:System.Linq.Expressions.Expression.Type%2A> of <xref:System.Exception> to be caught can be specified but no reference to the <xref:System.Exception> object will be available for use in the <xref:System.Linq.Expressions.CatchBlock>.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Catch">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.CatchBlock Catch (System.Linq.Expressions.ParameterExpression variable, System.Linq.Expressions.Expression body, System.Linq.Expressions.Expression filter);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.CatchBlock Catch(class System.Linq.Expressions.ParameterExpression variable, class System.Linq.Expressions.Expression body, class System.Linq.Expressions.Expression filter) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.Catch(System.Linq.Expressions.ParameterExpression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Catch (variable As ParameterExpression, body As Expression, filter As Expression) As CatchBlock" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Linq::Expressions::CatchBlock ^ Catch(System::Linq::Expressions::ParameterExpression ^ variable, System::Linq::Expressions::Expression ^ body, System::Linq::Expressions::Expression ^ filter);" />
      <MemberSignature Language="F#" Value="static member Catch : System.Linq.Expressions.ParameterExpression * System.Linq.Expressions.Expression * System.Linq.Expressions.Expression -&gt; System.Linq.Expressions.CatchBlock" Usage="System.Linq.Expressions.Expression.Catch (variable, body, filter)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.CatchBlock</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="variable" Type="System.Linq.Expressions.ParameterExpression" />
        <Parameter Name="body" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="filter" Type="System.Linq.Expressions.Expression" />
      </Parameters>
      <Docs>
        <param name="variable">
          <span data-ttu-id="fef91-788">Объект <see cref="T:System.Linq.Expressions.ParameterExpression" />, представляющий ссылку на объект <see cref="T:System.Exception" />, перехваченный данным обработчиком.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fef91-788">A <see cref="T:System.Linq.Expressions.ParameterExpression" /> representing a reference to the <see cref="T:System.Exception" /> object caught by this handler.</span>
          </span>
        </param>
        <param name="body">
          <span data-ttu-id="fef91-789">Тело оператора catch.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fef91-789">The body of the catch statement.</span>
          </span>
        </param>
        <param name="filter">
          <span data-ttu-id="fef91-790">Тело фильтра <see cref="T:System.Exception" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fef91-790">The body of the <see cref="T:System.Exception" /> filter.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="fef91-791">Создает объект <see cref="T:System.Linq.Expressions.CatchBlock" />, представляющий оператор catch с фильтром <see cref="T:System.Exception" /> и ссылкой на перехваченный объект <see cref="T:System.Exception" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fef91-791">Creates a <see cref="T:System.Linq.Expressions.CatchBlock" /> representing a catch statement with an <see cref="T:System.Exception" /> filter and a reference to the caught <see cref="T:System.Exception" /> object.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="fef91-792">Созданный <see cref="T:System.Linq.Expressions.CatchBlock" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fef91-792">The created <see cref="T:System.Linq.Expressions.CatchBlock" />.</span>
          </span>
        </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Catch">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.CatchBlock Catch (Type type, System.Linq.Expressions.Expression body, System.Linq.Expressions.Expression filter);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.CatchBlock Catch(class System.Type type, class System.Linq.Expressions.Expression body, class System.Linq.Expressions.Expression filter) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.Catch(System.Type,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Linq::Expressions::CatchBlock ^ Catch(Type ^ type, System::Linq::Expressions::Expression ^ body, System::Linq::Expressions::Expression ^ filter);" />
      <MemberSignature Language="F#" Value="static member Catch : Type * System.Linq.Expressions.Expression * System.Linq.Expressions.Expression -&gt; System.Linq.Expressions.CatchBlock" Usage="System.Linq.Expressions.Expression.Catch (type, body, filter)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.CatchBlock</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="type" Type="System.Type" />
        <Parameter Name="body" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="filter" Type="System.Linq.Expressions.Expression" />
      </Parameters>
      <Docs>
        <param name="type">
          <span data-ttu-id="fef91-793">Свойство <see cref="P:System.Linq.Expressions.Expression.Type" /> объекта <see cref="T:System.Exception" />, который будет обрабатываться этим объектом <see cref="T:System.Linq.Expressions.CatchBlock" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fef91-793">The <see cref="P:System.Linq.Expressions.Expression.Type" /> of <see cref="T:System.Exception" /> this <see cref="T:System.Linq.Expressions.CatchBlock" /> will handle.</span>
          </span>
        </param>
        <param name="body">
          <span data-ttu-id="fef91-794">Тело оператора catch.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fef91-794">The body of the catch statement.</span>
          </span>
        </param>
        <param name="filter">
          <span data-ttu-id="fef91-795">Тело фильтра <see cref="T:System.Exception" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fef91-795">The body of the <see cref="T:System.Exception" /> filter.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="fef91-796">Создает объект <see cref="T:System.Linq.Expressions.CatchBlock" />, представляющий оператор catch с фильтром <see cref="T:System.Exception" />, но без ссылки на перехваченный объект <see cref="T:System.Exception" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fef91-796">Creates a <see cref="T:System.Linq.Expressions.CatchBlock" /> representing a catch statement with an <see cref="T:System.Exception" /> filter but no reference to the caught <see cref="T:System.Exception" /> object.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="fef91-797">Созданный <see cref="T:System.Linq.Expressions.CatchBlock" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fef91-797">The created <see cref="T:System.Linq.Expressions.CatchBlock" />.</span>
          </span>
        </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ClearDebugInfo">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.DebugInfoExpression ClearDebugInfo (System.Linq.Expressions.SymbolDocumentInfo document);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.DebugInfoExpression ClearDebugInfo(class System.Linq.Expressions.SymbolDocumentInfo document) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.ClearDebugInfo(System.Linq.Expressions.SymbolDocumentInfo)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function ClearDebugInfo (document As SymbolDocumentInfo) As DebugInfoExpression" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Linq::Expressions::DebugInfoExpression ^ ClearDebugInfo(System::Linq::Expressions::SymbolDocumentInfo ^ document);" />
      <MemberSignature Language="F#" Value="static member ClearDebugInfo : System.Linq.Expressions.SymbolDocumentInfo -&gt; System.Linq.Expressions.DebugInfoExpression" Usage="System.Linq.Expressions.Expression.ClearDebugInfo document" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.DebugInfoExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="document" Type="System.Linq.Expressions.SymbolDocumentInfo" />
      </Parameters>
      <Docs>
        <param name="document">
          <span data-ttu-id="fef91-798">Объект <see cref="T:System.Linq.Expressions.SymbolDocumentInfo" />, представляющий исходный файл.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fef91-798">The <see cref="T:System.Linq.Expressions.SymbolDocumentInfo" /> that represents the source file.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="fef91-799">Создает выражение <see cref="T:System.Linq.Expressions.DebugInfoExpression" /> для очистки точки последовательности.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fef91-799">Creates a <see cref="T:System.Linq.Expressions.DebugInfoExpression" /> for clearing a sequence point.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="fef91-800">Экземпляр объекта <see cref="T:System.Linq.Expressions.DebugInfoExpression" /> для очистки точки следования.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fef91-800">An instance of <see cref="T:System.Linq.Expressions.DebugInfoExpression" /> for clearning a sequence point.</span>
          </span>
        </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="Coalesce">
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="fef91-801">Создает <see cref="T:System.Linq.Expressions.BinaryExpression" />, представляющий объединяющую операцию.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fef91-801">Creates a <see cref="T:System.Linq.Expressions.BinaryExpression" /> that represents a coalescing operation.</span>
          </span>
        </summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Coalesce">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.BinaryExpression Coalesce (System.Linq.Expressions.Expression left, System.Linq.Expressions.Expression right);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.BinaryExpression Coalesce(class System.Linq.Expressions.Expression left, class System.Linq.Expressions.Expression right) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.Coalesce(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Coalesce (left As Expression, right As Expression) As BinaryExpression" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Linq::Expressions::BinaryExpression ^ Coalesce(System::Linq::Expressions::Expression ^ left, System::Linq::Expressions::Expression ^ right);" />
      <MemberSignature Language="F#" Value="static member Coalesce : System.Linq.Expressions.Expression * System.Linq.Expressions.Expression -&gt; System.Linq.Expressions.BinaryExpression" Usage="System.Linq.Expressions.Expression.Coalesce (left, right)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.BinaryExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="left" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="right" Type="System.Linq.Expressions.Expression" />
      </Parameters>
      <Docs>
        <param name="left">
          <span data-ttu-id="fef91-802">Объект <see cref="T:System.Linq.Expressions.Expression" />, который следует задать в качестве значения свойства <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fef91-802">An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> property equal to.</span>
          </span>
        </param>
        <param name="right">
          <span data-ttu-id="fef91-803">Объект <see cref="T:System.Linq.Expressions.Expression" />, который следует задать в качестве значения свойства <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fef91-803">An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> property equal to.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="fef91-804">Создает <see cref="T:System.Linq.Expressions.BinaryExpression" />, представляющий объединяющую операцию.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fef91-804">Creates a <see cref="T:System.Linq.Expressions.BinaryExpression" /> that represents a coalescing operation.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="fef91-805">Выражение <see cref="T:System.Linq.Expressions.BinaryExpression" /> со свойством<see cref="P:System.Linq.Expressions.Expression.NodeType" />, равным <see cref="F:System.Linq.Expressions.ExpressionType.Coalesce" />, и свойствами <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> и <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />, для которых заданы указанные значения.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fef91-805">A <see cref="T:System.Linq.Expressions.BinaryExpression" /> that has the <see cref="P:System.Linq.Expressions.Expression.NodeType" /> property equal to <see cref="F:System.Linq.Expressions.ExpressionType.Coalesce" /> and the <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> and <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> properties set to the specified values.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="fef91-806"><xref:System.Linq.Expressions.BinaryExpression.Method%2A> Результирующего <xref:System.Linq.Expressions.BinaryExpression> — `null` и <xref:System.Linq.Expressions.BinaryExpression.IsLifted%2A> и <xref:System.Linq.Expressions.BinaryExpression.IsLiftedToNull%2A> присваивается `false`.</span><span class="sxs-lookup"><span data-stu-id="fef91-806">The <xref:System.Linq.Expressions.BinaryExpression.Method%2A> property of the resulting <xref:System.Linq.Expressions.BinaryExpression> is `null` and both <xref:System.Linq.Expressions.BinaryExpression.IsLifted%2A> and <xref:System.Linq.Expressions.BinaryExpression.IsLiftedToNull%2A> are set to `false`.</span></span> <span data-ttu-id="fef91-807"><xref:System.Linq.Expressions.Expression.Type%2A> Равно тип результата операции объединения.</span><span class="sxs-lookup"><span data-stu-id="fef91-807">The <xref:System.Linq.Expressions.Expression.Type%2A> property is equal to the result type of the coalescing operation.</span></span> <span data-ttu-id="fef91-808">Значение свойства <xref:System.Linq.Expressions.BinaryExpression.Conversion%2A> — `null`.</span><span class="sxs-lookup"><span data-stu-id="fef91-808">The <xref:System.Linq.Expressions.BinaryExpression.Conversion%2A> property is `null`.</span></span>  
  
#### <a name="result-type"></a><span data-ttu-id="fef91-809">Тип результата</span><span class="sxs-lookup"><span data-stu-id="fef91-809">Result Type</span></span>  
 <span data-ttu-id="fef91-810">Тип результата определяется следующими правилами:</span><span class="sxs-lookup"><span data-stu-id="fef91-810">The following rules determine the result type:</span></span>  
  
-   <span data-ttu-id="fef91-811">Если `left`. Тип представляет тип, допускающий значение NULL и `right`. Тип неявно преобразуется в соответствующий тип, не допускающие значения NULL, тип результата — не допускающие значения NULL эквивалентно `left`. Тип.</span><span class="sxs-lookup"><span data-stu-id="fef91-811">If `left`.Type represents a nullable type and `right`.Type is implicitly convertible to the corresponding non-nullable type, the result type is the non-nullable equivalent of `left`.Type.</span></span>  
  
-   <span data-ttu-id="fef91-812">В противном случае, если `right`. Тип может быть неявно преобразован `left`. Тип, тип результата — `left`. Тип.</span><span class="sxs-lookup"><span data-stu-id="fef91-812">Otherwise, if `right`.Type is implicitly convertible to `left`.Type, the result type is `left`.Type.</span></span>  
  
-   <span data-ttu-id="fef91-813">В противном случае, если не допускающие значения NULL эквивалентно `left`. Тип может быть неявно преобразован `right`. Тип, тип результата — `right`. Тип.</span><span class="sxs-lookup"><span data-stu-id="fef91-813">Otherwise, if the non-nullable equivalent of `left`.Type is implicitly convertible to `right`.Type, the result type is `right`.Type.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="fef91-814">Значение параметра <paramref name="left" /> или <paramref name="right" /> — <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fef91-814">
              <paramref name="left" /> or <paramref name="right" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.InvalidOperationException">
          <span data-ttu-id="fef91-815">Свойство <see cref="P:System.Linq.Expressions.Expression.Type" /> параметра <paramref name="left" /> не представляет тип ссылки или тип, поддерживающий значение null.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fef91-815">The <see cref="P:System.Linq.Expressions.Expression.Type" /> property of <paramref name="left" /> does not represent a reference type or a nullable value type.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="fef91-816">Типы <paramref name="left" />.Type и <paramref name="right" />.Type не преобразовываются друг в друга.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fef91-816">
              <paramref name="left" />.Type and <paramref name="right" />.Type are not convertible to each other.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="Coalesce">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.BinaryExpression Coalesce (System.Linq.Expressions.Expression left, System.Linq.Expressions.Expression right, System.Linq.Expressions.LambdaExpression conversion);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.BinaryExpression Coalesce(class System.Linq.Expressions.Expression left, class System.Linq.Expressions.Expression right, class System.Linq.Expressions.LambdaExpression conversion) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.Coalesce(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.LambdaExpression)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Coalesce (left As Expression, right As Expression, conversion As LambdaExpression) As BinaryExpression" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Linq::Expressions::BinaryExpression ^ Coalesce(System::Linq::Expressions::Expression ^ left, System::Linq::Expressions::Expression ^ right, System::Linq::Expressions::LambdaExpression ^ conversion);" />
      <MemberSignature Language="F#" Value="static member Coalesce : System.Linq.Expressions.Expression * System.Linq.Expressions.Expression * System.Linq.Expressions.LambdaExpression -&gt; System.Linq.Expressions.BinaryExpression" Usage="System.Linq.Expressions.Expression.Coalesce (left, right, conversion)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.BinaryExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="left" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="right" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="conversion" Type="System.Linq.Expressions.LambdaExpression" />
      </Parameters>
      <Docs>
        <param name="left">
          <span data-ttu-id="fef91-817">Объект <see cref="T:System.Linq.Expressions.Expression" />, который следует задать в качестве значения свойства <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fef91-817">An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> property equal to.</span>
          </span>
        </param>
        <param name="right">
          <span data-ttu-id="fef91-818">Объект <see cref="T:System.Linq.Expressions.Expression" />, который следует задать в качестве значения свойства <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fef91-818">An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> property equal to.</span>
          </span>
        </param>
        <param name="conversion">
          <span data-ttu-id="fef91-819">Объект <see cref="T:System.Linq.Expressions.LambdaExpression" />, который следует задать в качестве значения свойства <see cref="P:System.Linq.Expressions.BinaryExpression.Conversion" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fef91-819">A <see cref="T:System.Linq.Expressions.LambdaExpression" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Conversion" /> property equal to.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="fef91-820">Создает <see cref="T:System.Linq.Expressions.BinaryExpression" />, представляющий объединяющую операцию, заданную функции преобразования.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fef91-820">Creates a <see cref="T:System.Linq.Expressions.BinaryExpression" /> that represents a coalescing operation, given a conversion function.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="fef91-821">Выражение <see cref="T:System.Linq.Expressions.BinaryExpression" /> со свойством <see cref="P:System.Linq.Expressions.Expression.NodeType" />, равным <see cref="F:System.Linq.Expressions.ExpressionType.Coalesce" />, и свойствами <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />, <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> и <see cref="P:System.Linq.Expressions.BinaryExpression.Conversion" />, для которых заданы указанные значения.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fef91-821">A <see cref="T:System.Linq.Expressions.BinaryExpression" /> that has the <see cref="P:System.Linq.Expressions.Expression.NodeType" /> property equal to <see cref="F:System.Linq.Expressions.ExpressionType.Coalesce" /> and the <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />, <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> and <see cref="P:System.Linq.Expressions.BinaryExpression.Conversion" /> properties set to the specified values.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="fef91-822"><xref:System.Linq.Expressions.BinaryExpression.Method%2A> Результирующего <xref:System.Linq.Expressions.BinaryExpression> — `null` и <xref:System.Linq.Expressions.BinaryExpression.IsLifted%2A> и <xref:System.Linq.Expressions.BinaryExpression.IsLiftedToNull%2A> присваивается `false`.</span><span class="sxs-lookup"><span data-stu-id="fef91-822">The <xref:System.Linq.Expressions.BinaryExpression.Method%2A> property of the resulting <xref:System.Linq.Expressions.BinaryExpression> is `null` and both <xref:System.Linq.Expressions.BinaryExpression.IsLifted%2A> and <xref:System.Linq.Expressions.BinaryExpression.IsLiftedToNull%2A> are set to `false`.</span></span>  
  
 <span data-ttu-id="fef91-823"><xref:System.Linq.Expressions.Expression.Type%2A> Результирующего <xref:System.Linq.Expressions.BinaryExpression> равным тип результата операции объединения.</span><span class="sxs-lookup"><span data-stu-id="fef91-823">The <xref:System.Linq.Expressions.Expression.Type%2A> property of the resulting <xref:System.Linq.Expressions.BinaryExpression> is equal to the result type of the coalescing operation.</span></span>  
  
 <span data-ttu-id="fef91-824">Тип результата определяется следующими правилами:</span><span class="sxs-lookup"><span data-stu-id="fef91-824">The following rules determine the result type:</span></span>  
  
-   <span data-ttu-id="fef91-825">Если `left`. Тип представляет тип, допускающий значение NULL и `right`. Тип неявно преобразуется в соответствующий тип, не допускающие значения NULL, тип результата — не допускающие значения NULL эквивалентно `left`. Тип.</span><span class="sxs-lookup"><span data-stu-id="fef91-825">If `left`.Type represents a nullable type and `right`.Type is implicitly convertible to the corresponding non-nullable type, the result type is the non-nullable equivalent of `left`.Type.</span></span>  
  
-   <span data-ttu-id="fef91-826">В противном случае, если `right`. Тип может быть неявно преобразован `left`. Тип, тип результата — `left`. Тип.</span><span class="sxs-lookup"><span data-stu-id="fef91-826">Otherwise, if `right`.Type is implicitly convertible to `left`.Type, the result type is `left`.Type.</span></span>  
  
-   <span data-ttu-id="fef91-827">В противном случае, если не допускающие значения NULL эквивалентно `left`. Тип может быть неявно преобразован `right`. Тип, тип результата — `right`. Тип.</span><span class="sxs-lookup"><span data-stu-id="fef91-827">Otherwise, if the non-nullable equivalent of `left`.Type is implicitly convertible to `right`.Type, the result type is `right`.Type.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="fef91-828">Значение параметра <paramref name="left" /> или <paramref name="right" /> — <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fef91-828">
              <paramref name="left" /> or <paramref name="right" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="fef91-829">Типы <paramref name="left" />.Type и <paramref name="right" />.Type не преобразовываются друг в друга.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fef91-829">
              <paramref name="left" />.Type and <paramref name="right" />.Type are not convertible to each other.</span>
          </span>
          <span data-ttu-id="fef91-830">-или-</span>
          <span class="sxs-lookup">
            <span data-stu-id="fef91-830">-or-</span>
          </span>
          <span data-ttu-id="fef91-831">
            <paramref name="conversion" /> не является <see langword="null" />, а тип <paramref name="conversion" />.Type является типом делегата, не принимающим ровно один аргумент.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fef91-831">
              <paramref name="conversion" /> is not <see langword="null" /> and <paramref name="conversion" />.Type is a delegate type that does not take exactly one argument.</span>
          </span>
        </exception>
        <exception cref="T:System.InvalidOperationException">
          <span data-ttu-id="fef91-832">Свойство <see cref="P:System.Linq.Expressions.Expression.Type" /> параметра <paramref name="left" /> не представляет тип ссылки или тип, поддерживающий значение null.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fef91-832">The <see cref="P:System.Linq.Expressions.Expression.Type" /> property of <paramref name="left" /> does not represent a reference type or a nullable value type.</span>
          </span>
          <span data-ttu-id="fef91-833">-или-</span>
          <span class="sxs-lookup">
            <span data-stu-id="fef91-833">-or-</span>
          </span>
          <span data-ttu-id="fef91-834">Свойство <see cref="P:System.Linq.Expressions.Expression.Type" /><paramref name="left" /> представляет тип, который не назначается для типа параметра типа делегата <paramref name="conversion" />.Type.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fef91-834">The <see cref="P:System.Linq.Expressions.Expression.Type" /> property of <paramref name="left" /> represents a type that is not assignable to the parameter type of the delegate type <paramref name="conversion" />.Type.</span>
          </span>
          <span data-ttu-id="fef91-835">-или-</span>
          <span class="sxs-lookup">
            <span data-stu-id="fef91-835">-or-</span>
          </span>
          <span data-ttu-id="fef91-836">Свойство <see cref="P:System.Linq.Expressions.Expression.Type" /><paramref name="right" /> не равно типу возврата типа делегата <paramref name="conversion" />.Type.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fef91-836">The <see cref="P:System.Linq.Expressions.Expression.Type" /> property of <paramref name="right" /> is not equal to the return type of the delegate type <paramref name="conversion" />.Type.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <MemberGroup MemberName="Condition">
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="fef91-837">Создает объект <see cref="T:System.Linq.Expressions.ConditionalExpression" />, представляющий условный оператор.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fef91-837">Creates a <see cref="T:System.Linq.Expressions.ConditionalExpression" /> that represents a conditional statement.</span>
          </span>
        </summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Condition">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.ConditionalExpression Condition (System.Linq.Expressions.Expression test, System.Linq.Expressions.Expression ifTrue, System.Linq.Expressions.Expression ifFalse);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.ConditionalExpression Condition(class System.Linq.Expressions.Expression test, class System.Linq.Expressions.Expression ifTrue, class System.Linq.Expressions.Expression ifFalse) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.Condition(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Condition (test As Expression, ifTrue As Expression, ifFalse As Expression) As ConditionalExpression" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Linq::Expressions::ConditionalExpression ^ Condition(System::Linq::Expressions::Expression ^ test, System::Linq::Expressions::Expression ^ ifTrue, System::Linq::Expressions::Expression ^ ifFalse);" />
      <MemberSignature Language="F#" Value="static member Condition : System.Linq.Expressions.Expression * System.Linq.Expressions.Expression * System.Linq.Expressions.Expression -&gt; System.Linq.Expressions.ConditionalExpression" Usage="System.Linq.Expressions.Expression.Condition (test, ifTrue, ifFalse)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.ConditionalExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="test" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="ifTrue" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="ifFalse" Type="System.Linq.Expressions.Expression" />
      </Parameters>
      <Docs>
        <param name="test">
          <span data-ttu-id="fef91-838">Объект <see cref="T:System.Linq.Expressions.Expression" />, который следует задать в качестве значения свойства <see cref="P:System.Linq.Expressions.ConditionalExpression.Test" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fef91-838">An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.ConditionalExpression.Test" /> property equal to.</span>
          </span>
        </param>
        <param name="ifTrue">
          <span data-ttu-id="fef91-839">Объект <see cref="T:System.Linq.Expressions.Expression" />, который следует задать в качестве значения свойства <see cref="P:System.Linq.Expressions.ConditionalExpression.IfTrue" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fef91-839">An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.ConditionalExpression.IfTrue" /> property equal to.</span>
          </span>
        </param>
        <param name="ifFalse">
          <span data-ttu-id="fef91-840">Объект <see cref="T:System.Linq.Expressions.Expression" />, который следует задать в качестве значения свойства <see cref="P:System.Linq.Expressions.ConditionalExpression.IfFalse" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fef91-840">An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.ConditionalExpression.IfFalse" /> property equal to.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="fef91-841">Создает объект <see cref="T:System.Linq.Expressions.ConditionalExpression" />, представляющий условный оператор.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fef91-841">Creates a <see cref="T:System.Linq.Expressions.ConditionalExpression" /> that represents a conditional statement.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="fef91-842">Выражение <see cref="T:System.Linq.Expressions.ConditionalExpression" /> со свойством <see cref="P:System.Linq.Expressions.Expression.NodeType" />, равным <see cref="F:System.Linq.Expressions.ExpressionType.Conditional" />, и свойствами <see cref="P:System.Linq.Expressions.ConditionalExpression.Test" />, <see cref="P:System.Linq.Expressions.ConditionalExpression.IfTrue" /> и <see cref="P:System.Linq.Expressions.ConditionalExpression.IfFalse" />, для которых заданы указанные значения.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fef91-842">A <see cref="T:System.Linq.Expressions.ConditionalExpression" /> that has the <see cref="P:System.Linq.Expressions.Expression.NodeType" /> property equal to <see cref="F:System.Linq.Expressions.ExpressionType.Conditional" /> and the <see cref="P:System.Linq.Expressions.ConditionalExpression.Test" />, <see cref="P:System.Linq.Expressions.ConditionalExpression.IfTrue" />, and <see cref="P:System.Linq.Expressions.ConditionalExpression.IfFalse" /> properties set to the specified values.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="fef91-843"><xref:System.Linq.Expressions.Expression.Type%2A> Результирующего <xref:System.Linq.Expressions.ConditionalExpression> равен <xref:System.Linq.Expressions.Expression.Type%2A> свойство `ifTrue`.</span><span class="sxs-lookup"><span data-stu-id="fef91-843">The <xref:System.Linq.Expressions.Expression.Type%2A> property of the resulting <xref:System.Linq.Expressions.ConditionalExpression> is equal to the <xref:System.Linq.Expressions.Expression.Type%2A> property of `ifTrue`.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="fef91-844">В следующем примере кода показано, как создать выражение, которое представляет условный оператор.</span><span class="sxs-lookup"><span data-stu-id="fef91-844">The following code example shows how to create an expression that represents a conditional statement.</span></span> <span data-ttu-id="fef91-845">Если первый аргумент принимает значение `true`, второй аргумент выполнена; в противном случае выполняется третий аргумент.</span><span class="sxs-lookup"><span data-stu-id="fef91-845">If the first argument evaluates to `true`, the second argument is executed; otherwise, the third argument is executed.</span></span>  
  
 [!code-csharp[System.Linq.Expressions.ExpressionDev10#3](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.linq.expressions.expressiondev10/cs/program.cs#3)]
 [!code-vb[System.Linq.Expressions.ExpressionDev10#3](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.linq.expressions.expressiondev10/vb/module1.vb#3)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="fef91-846">Значение параметра <paramref name="test" />, <paramref name="ifTrue" /> или <paramref name="ifFalse" /> — <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fef91-846">
              <paramref name="test" /> or <paramref name="ifTrue" /> or <paramref name="ifFalse" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="fef91-847">Тип <paramref name="test" />.Type не является типом <see cref="T:System.Boolean" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fef91-847">
              <paramref name="test" />.Type is not <see cref="T:System.Boolean" />.</span>
          </span>
          <span data-ttu-id="fef91-848">-или-</span>
          <span class="sxs-lookup">
            <span data-stu-id="fef91-848">-or-</span>
          </span>
          <span data-ttu-id="fef91-849">Тип <paramref name="ifTrue" />.Type не равен типу <paramref name="ifFalse" />.Type.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fef91-849">
              <paramref name="ifTrue" />.Type is not equal to <paramref name="ifFalse" />.Type.</span>
          </span>
        </exception>
        <altmember cref="M:System.Linq.Expressions.Expression.IfThen(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)" />
        <altmember cref="M:System.Linq.Expressions.Expression.IfThenElse(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)" />
      </Docs>
    </Member>
    <Member MemberName="Condition">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.ConditionalExpression Condition (System.Linq.Expressions.Expression test, System.Linq.Expressions.Expression ifTrue, System.Linq.Expressions.Expression ifFalse, Type type);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.ConditionalExpression Condition(class System.Linq.Expressions.Expression test, class System.Linq.Expressions.Expression ifTrue, class System.Linq.Expressions.Expression ifFalse, class System.Type type) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.Condition(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Type)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Linq::Expressions::ConditionalExpression ^ Condition(System::Linq::Expressions::Expression ^ test, System::Linq::Expressions::Expression ^ ifTrue, System::Linq::Expressions::Expression ^ ifFalse, Type ^ type);" />
      <MemberSignature Language="F#" Value="static member Condition : System.Linq.Expressions.Expression * System.Linq.Expressions.Expression * System.Linq.Expressions.Expression * Type -&gt; System.Linq.Expressions.ConditionalExpression" Usage="System.Linq.Expressions.Expression.Condition (test, ifTrue, ifFalse, type)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.ConditionalExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="test" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="ifTrue" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="ifFalse" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="type" Type="System.Type" />
      </Parameters>
      <Docs>
        <param name="test">
          <span data-ttu-id="fef91-850">Объект <see cref="T:System.Linq.Expressions.Expression" />, который следует задать в качестве значения свойства <see cref="P:System.Linq.Expressions.ConditionalExpression.Test" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fef91-850">An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.ConditionalExpression.Test" /> property equal to.</span>
          </span>
        </param>
        <param name="ifTrue">
          <span data-ttu-id="fef91-851">Объект <see cref="T:System.Linq.Expressions.Expression" />, который следует задать в качестве значения свойства <see cref="P:System.Linq.Expressions.ConditionalExpression.IfTrue" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fef91-851">An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.ConditionalExpression.IfTrue" /> property equal to.</span>
          </span>
        </param>
        <param name="ifFalse">
          <span data-ttu-id="fef91-852">Объект <see cref="T:System.Linq.Expressions.Expression" />, который следует задать в качестве значения свойства <see cref="P:System.Linq.Expressions.ConditionalExpression.IfFalse" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fef91-852">An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.ConditionalExpression.IfFalse" /> property equal to.</span>
          </span>
        </param>
        <param name="type">
          <span data-ttu-id="fef91-853">Объект <see cref="P:System.Linq.Expressions.Expression.Type" />, который следует задать в качестве значения свойства <see cref="P:System.Linq.Expressions.Expression.Type" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fef91-853">A <see cref="P:System.Linq.Expressions.Expression.Type" /> to set the <see cref="P:System.Linq.Expressions.Expression.Type" /> property equal to.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="fef91-854">Создает объект <see cref="T:System.Linq.Expressions.ConditionalExpression" />, представляющий условный оператор.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fef91-854">Creates a <see cref="T:System.Linq.Expressions.ConditionalExpression" /> that represents a conditional statement.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="fef91-855">Выражение <see cref="T:System.Linq.Expressions.ConditionalExpression" /> со свойством <see cref="P:System.Linq.Expressions.Expression.NodeType" />, равным <see cref="F:System.Linq.Expressions.ExpressionType.Conditional" />, и свойствами <see cref="P:System.Linq.Expressions.ConditionalExpression.Test" />, <see cref="P:System.Linq.Expressions.ConditionalExpression.IfTrue" /> и <see cref="P:System.Linq.Expressions.ConditionalExpression.IfFalse" />, для которых заданы указанные значения.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fef91-855">A <see cref="T:System.Linq.Expressions.ConditionalExpression" /> that has the <see cref="P:System.Linq.Expressions.Expression.NodeType" /> property equal to <see cref="F:System.Linq.Expressions.ExpressionType.Conditional" /> and the <see cref="P:System.Linq.Expressions.ConditionalExpression.Test" />, <see cref="P:System.Linq.Expressions.ConditionalExpression.IfTrue" />, and <see cref="P:System.Linq.Expressions.ConditionalExpression.IfFalse" /> properties set to the specified values.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="fef91-856">Этот метод позволяет явно объединить результирующий тип условного выражения в случаях, где типы `ifTrue` и `ifFalse` выражения не равны.</span><span class="sxs-lookup"><span data-stu-id="fef91-856">This method allows explicitly unifying the result type of the conditional expression in cases where the types of `ifTrue` and `ifFalse` expressions are not equal.</span></span> <span data-ttu-id="fef91-857">Оба вида `ifTrue` и `ifFalse` должна быть неявная ссылка может быть назначен типу результата.</span><span class="sxs-lookup"><span data-stu-id="fef91-857">Types of both `ifTrue` and `ifFalse` must be implicitly reference assignable to the result type.</span></span> <span data-ttu-id="fef91-858">`type` Может быть <xref:System.Void>.</span><span class="sxs-lookup"><span data-stu-id="fef91-858">The `type` is allowed to be <xref:System.Void>.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="Constant">
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="fef91-859">Создает буфер <see cref="T:System.Linq.Expressions.ConstantExpression" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fef91-859">Creates a <see cref="T:System.Linq.Expressions.ConstantExpression" />.</span>
          </span>
        </summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Constant">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.ConstantExpression Constant (object value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.ConstantExpression Constant(object value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.Constant(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Constant (value As Object) As ConstantExpression" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Linq::Expressions::ConstantExpression ^ Constant(System::Object ^ value);" />
      <MemberSignature Language="F#" Value="static member Constant : obj -&gt; System.Linq.Expressions.ConstantExpression" Usage="System.Linq.Expressions.Expression.Constant value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.ConstantExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="value">
          <span data-ttu-id="fef91-860">Объект <see cref="T:System.Object" />, который следует задать в качестве значения свойства <see cref="P:System.Linq.Expressions.ConstantExpression.Value" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fef91-860">An <see cref="T:System.Object" /> to set the <see cref="P:System.Linq.Expressions.ConstantExpression.Value" /> property equal to.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="fef91-861">Создает <see cref="T:System.Linq.Expressions.ConstantExpression" />, для свойства <see cref="P:System.Linq.Expressions.ConstantExpression.Value" /> которого задано указанное значение.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fef91-861">Creates a <see cref="T:System.Linq.Expressions.ConstantExpression" /> that has the <see cref="P:System.Linq.Expressions.ConstantExpression.Value" /> property set to the specified value.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="fef91-862">Выражение <see cref="T:System.Linq.Expressions.ConstantExpression" /> со свойством <see cref="P:System.Linq.Expressions.Expression.NodeType" />, равным <see cref="F:System.Linq.Expressions.ExpressionType.Constant" />, и свойством <see cref="P:System.Linq.Expressions.ConstantExpression.Value" />, для которого задано указанное значение.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fef91-862">A <see cref="T:System.Linq.Expressions.ConstantExpression" /> that has the <see cref="P:System.Linq.Expressions.Expression.NodeType" /> property equal to <see cref="F:System.Linq.Expressions.ExpressionType.Constant" /> and the <see cref="P:System.Linq.Expressions.ConstantExpression.Value" /> property set to the specified value.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="fef91-863"><xref:System.Linq.Expressions.Expression.Type%2A> Результирующего <xref:System.Linq.Expressions.ConstantExpression> равен тип `value`.</span><span class="sxs-lookup"><span data-stu-id="fef91-863">The <xref:System.Linq.Expressions.Expression.Type%2A> property of the resulting <xref:System.Linq.Expressions.ConstantExpression> is equal to the type of `value`.</span></span> <span data-ttu-id="fef91-864">Если `value` — `null`, <xref:System.Linq.Expressions.Expression.Type%2A> равен <xref:System.Object>.</span><span class="sxs-lookup"><span data-stu-id="fef91-864">If `value` is `null`, <xref:System.Linq.Expressions.Expression.Type%2A> is equal to <xref:System.Object>.</span></span>  
  
 <span data-ttu-id="fef91-865">Для представления `null`, можно также использовать <xref:System.Linq.Expressions.Expression.Constant%28System.Object%2CSystem.Type%29> метод, с помощью которого можно явно указать тип.</span><span class="sxs-lookup"><span data-stu-id="fef91-865">To represent `null`, you can also use the <xref:System.Linq.Expressions.Expression.Constant%28System.Object%2CSystem.Type%29> method, with which you can explicitly specify the type.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="fef91-866">В следующем примере кода показано, как создать выражение, представляющее константное значение.</span><span class="sxs-lookup"><span data-stu-id="fef91-866">The following code example shows how to create an expression that represents a constant value.</span></span>  
  
 [!code-csharp[System.Linq.Expressions.ExpressionDev10#4](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.linq.expressions.expressiondev10/cs/program.cs#4)]
 [!code-vb[System.Linq.Expressions.ExpressionDev10#4](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.linq.expressions.expressiondev10/vb/module1.vb#4)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Constant">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.ConstantExpression Constant (object value, Type type);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.ConstantExpression Constant(object value, class System.Type type) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.Constant(System.Object,System.Type)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Linq::Expressions::ConstantExpression ^ Constant(System::Object ^ value, Type ^ type);" />
      <MemberSignature Language="F#" Value="static member Constant : obj * Type -&gt; System.Linq.Expressions.ConstantExpression" Usage="System.Linq.Expressions.Expression.Constant (value, type)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.ConstantExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Object" />
        <Parameter Name="type" Type="System.Type" />
      </Parameters>
      <Docs>
        <param name="value">
          <span data-ttu-id="fef91-867">Объект <see cref="T:System.Object" />, который следует задать в качестве значения свойства <see cref="P:System.Linq.Expressions.ConstantExpression.Value" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fef91-867">An <see cref="T:System.Object" /> to set the <see cref="P:System.Linq.Expressions.ConstantExpression.Value" /> property equal to.</span>
          </span>
        </param>
        <param name="type">
          <span data-ttu-id="fef91-868">Объект <see cref="T:System.Type" />, который следует задать в качестве значения свойства <see cref="P:System.Linq.Expressions.Expression.Type" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fef91-868">A <see cref="T:System.Type" /> to set the <see cref="P:System.Linq.Expressions.Expression.Type" /> property equal to.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="fef91-869">Создает <see cref="T:System.Linq.Expressions.ConstantExpression" />, содержащее свойства <see cref="P:System.Linq.Expressions.ConstantExpression.Value" /> и <see cref="P:System.Linq.Expressions.Expression.Type" />, для которых заданы указанные значения.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fef91-869">Creates a <see cref="T:System.Linq.Expressions.ConstantExpression" /> that has the <see cref="P:System.Linq.Expressions.ConstantExpression.Value" /> and <see cref="P:System.Linq.Expressions.Expression.Type" /> properties set to the specified values.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="fef91-870">Выражение <see cref="T:System.Linq.Expressions.ConstantExpression" /> со свойством<see cref="P:System.Linq.Expressions.Expression.NodeType" />, равным <see cref="F:System.Linq.Expressions.ExpressionType.Constant" />, и свойствами <see cref="P:System.Linq.Expressions.ConstantExpression.Value" /> и <see cref="P:System.Linq.Expressions.Expression.Type" />, для которых заданы указанные значения.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fef91-870">A <see cref="T:System.Linq.Expressions.ConstantExpression" /> that has the <see cref="P:System.Linq.Expressions.Expression.NodeType" /> property equal to <see cref="F:System.Linq.Expressions.ExpressionType.Constant" /> and the <see cref="P:System.Linq.Expressions.ConstantExpression.Value" /> and <see cref="P:System.Linq.Expressions.Expression.Type" /> properties set to the specified values.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="fef91-871">Этот метод можно использовать для представления значения обнуляемых типов.</span><span class="sxs-lookup"><span data-stu-id="fef91-871">This method can be useful for representing values of nullable types.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="fef91-872">В следующем примере кода показано, как создать выражение, которое представляет константу типа, допускающего значение NULL и присвойте ему значение `null`.</span><span class="sxs-lookup"><span data-stu-id="fef91-872">The following code example shows how to create an expression that represents a constant of the nullable type and set its value to `null`.</span></span>  
  
 [!code-csharp[System.Linq.Expressions.ExpressionDev10#22](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.linq.expressions.expressiondev10/cs/program.cs#22)]
 [!code-vb[System.Linq.Expressions.ExpressionDev10#22](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.linq.expressions.expressiondev10/vb/module1.vb#22)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="fef91-873">
            <paramref name="type" /> — <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fef91-873">
              <paramref name="type" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="fef91-874">Параметр <paramref name="value" /> не имеет значение <see langword="null" />, а <paramref name="type" /> не может быть назначен из динамического типа <paramref name="value" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fef91-874">
              <paramref name="value" /> is not <see langword="null" /> and <paramref name="type" /> is not assignable from the dynamic type of <paramref name="value" />.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <MemberGroup MemberName="Continue">
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="fef91-875">Создает объект <see cref="T:System.Linq.Expressions.GotoExpression" />, представляющий оператор continue.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fef91-875">Creates a <see cref="T:System.Linq.Expressions.GotoExpression" /> representing a continue statement.</span>
          </span>
        </summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Continue">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.GotoExpression Continue (System.Linq.Expressions.LabelTarget target);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.GotoExpression Continue(class System.Linq.Expressions.LabelTarget target) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.Continue(System.Linq.Expressions.LabelTarget)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Continue (target As LabelTarget) As GotoExpression" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Linq::Expressions::GotoExpression ^ Continue(System::Linq::Expressions::LabelTarget ^ target);" />
      <MemberSignature Language="F#" Value="static member Continue : System.Linq.Expressions.LabelTarget -&gt; System.Linq.Expressions.GotoExpression" Usage="System.Linq.Expressions.Expression.Continue target" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.GotoExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="target" Type="System.Linq.Expressions.LabelTarget" />
      </Parameters>
      <Docs>
        <param name="target">
          <span data-ttu-id="fef91-876">Объект <see cref="T:System.Linq.Expressions.LabelTarget" />, на который будет выполнен переход по <see cref="T:System.Linq.Expressions.GotoExpression" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fef91-876">The <see cref="T:System.Linq.Expressions.LabelTarget" /> that the <see cref="T:System.Linq.Expressions.GotoExpression" /> will jump to.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="fef91-877">Создает объект <see cref="T:System.Linq.Expressions.GotoExpression" />, представляющий оператор continue.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fef91-877">Creates a <see cref="T:System.Linq.Expressions.GotoExpression" /> representing a continue statement.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="fef91-878">Объект <see cref="T:System.Linq.Expressions.GotoExpression" />, свойство <see cref="P:System.Linq.Expressions.GotoExpression.Kind" /> которого имеет значение Continue, свойство <see cref="P:System.Linq.Expressions.GotoExpression.Target" /> — значение в параметре <paramref name="target" />, а при переходе целевой метке передается значение NULL.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fef91-878">A <see cref="T:System.Linq.Expressions.GotoExpression" /> with <see cref="P:System.Linq.Expressions.GotoExpression.Kind" /> equal to Continue, the <see cref="P:System.Linq.Expressions.GotoExpression.Target" /> property set to <paramref name="target" />, and a null value to be passed to the target label upon jumping.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 <span data-ttu-id="fef91-879">Следующий пример демонстрирует создание выражение цикла, который использует <xref:System.Linq.Expressions.Expression.Continue%2A> метод.</span><span class="sxs-lookup"><span data-stu-id="fef91-879">The following example demonstrates how to create a loop expression that uses the <xref:System.Linq.Expressions.Expression.Continue%2A> method.</span></span>  
  
 [!code-csharp[System.Linq.Expressions.ExpressionDev10#46](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.linq.expressions.expressiondev10/cs/program.cs#46)]
 [!code-vb[System.Linq.Expressions.ExpressionDev10#46](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.linq.expressions.expressiondev10/vb/module1.vb#46)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Continue">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.GotoExpression Continue (System.Linq.Expressions.LabelTarget target, Type type);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.GotoExpression Continue(class System.Linq.Expressions.LabelTarget target, class System.Type type) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.Continue(System.Linq.Expressions.LabelTarget,System.Type)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Linq::Expressions::GotoExpression ^ Continue(System::Linq::Expressions::LabelTarget ^ target, Type ^ type);" />
      <MemberSignature Language="F#" Value="static member Continue : System.Linq.Expressions.LabelTarget * Type -&gt; System.Linq.Expressions.GotoExpression" Usage="System.Linq.Expressions.Expression.Continue (target, type)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.GotoExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="target" Type="System.Linq.Expressions.LabelTarget" />
        <Parameter Name="type" Type="System.Type" />
      </Parameters>
      <Docs>
        <param name="target">
          <span data-ttu-id="fef91-880">Объект <see cref="T:System.Linq.Expressions.LabelTarget" />, на который будет выполнен переход по <see cref="T:System.Linq.Expressions.GotoExpression" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fef91-880">The <see cref="T:System.Linq.Expressions.LabelTarget" /> that the <see cref="T:System.Linq.Expressions.GotoExpression" /> will jump to.</span>
          </span>
        </param>
        <param name="type">
          <span data-ttu-id="fef91-881">Объект <see cref="T:System.Type" />, который следует задать в качестве значения свойства <see cref="P:System.Linq.Expressions.Expression.Type" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fef91-881">An <see cref="T:System.Type" /> to set the <see cref="P:System.Linq.Expressions.Expression.Type" /> property equal to.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="fef91-882">Создает объект <see cref="T:System.Linq.Expressions.GotoExpression" />, представляющий оператор continue с указанным типом.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fef91-882">Creates a <see cref="T:System.Linq.Expressions.GotoExpression" /> representing a continue statement with the specified type.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="fef91-883">Объект <see cref="T:System.Linq.Expressions.GotoExpression" />, свойство <see cref="P:System.Linq.Expressions.GotoExpression.Kind" /> которого имеет значение Continue, свойство <see cref="P:System.Linq.Expressions.GotoExpression.Target" /> — значение в параметре <paramref name="target" />, свойство <see cref="P:System.Linq.Expressions.Expression.Type" /> — значение в параметре <paramref name="type" />, а при переходе целевой метке передается значение NULL.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fef91-883">A <see cref="T:System.Linq.Expressions.GotoExpression" /> with <see cref="P:System.Linq.Expressions.GotoExpression.Kind" /> equal to Continue, the <see cref="P:System.Linq.Expressions.GotoExpression.Target" /> property set to <paramref name="target" />, the <see cref="P:System.Linq.Expressions.Expression.Type" /> property set to <paramref name="type" />, and a null value to be passed to the target label upon jumping.</span>
          </span>
        </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="Convert">
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="fef91-884">Создает выражение <see cref="T:System.Linq.Expressions.UnaryExpression" />, представляющее операцию преобразования типа.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fef91-884">Creates a <see cref="T:System.Linq.Expressions.UnaryExpression" /> that represents a type conversion operation.</span>
          </span>
        </summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Convert">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.UnaryExpression Convert (System.Linq.Expressions.Expression expression, Type type);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.UnaryExpression Convert(class System.Linq.Expressions.Expression expression, class System.Type type) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.Convert(System.Linq.Expressions.Expression,System.Type)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Linq::Expressions::UnaryExpression ^ Convert(System::Linq::Expressions::Expression ^ expression, Type ^ type);" />
      <MemberSignature Language="F#" Value="static member Convert : System.Linq.Expressions.Expression * Type -&gt; System.Linq.Expressions.UnaryExpression" Usage="System.Linq.Expressions.Expression.Convert (expression, type)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.UnaryExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="expression" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="type" Type="System.Type" />
      </Parameters>
      <Docs>
        <param name="expression">
          <span data-ttu-id="fef91-885">Объект <see cref="T:System.Linq.Expressions.Expression" />, который следует задать в качестве значения свойства <see cref="P:System.Linq.Expressions.UnaryExpression.Operand" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fef91-885">An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.UnaryExpression.Operand" /> property equal to.</span>
          </span>
        </param>
        <param name="type">
          <span data-ttu-id="fef91-886">Объект <see cref="T:System.Type" />, который следует задать в качестве значения свойства <see cref="P:System.Linq.Expressions.Expression.Type" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fef91-886">A <see cref="T:System.Type" /> to set the <see cref="P:System.Linq.Expressions.Expression.Type" /> property equal to.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="fef91-887">Создает выражение <see cref="T:System.Linq.Expressions.UnaryExpression" />, представляющее операцию преобразования типа.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fef91-887">Creates a <see cref="T:System.Linq.Expressions.UnaryExpression" /> that represents a type conversion operation.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="fef91-888">Выражение <see cref="T:System.Linq.Expressions.UnaryExpression" /> со свойством<see cref="P:System.Linq.Expressions.Expression.NodeType" />, равным <see cref="F:System.Linq.Expressions.ExpressionType.Convert" />, и свойствами <see cref="P:System.Linq.Expressions.UnaryExpression.Operand" /> и <see cref="P:System.Linq.Expressions.Expression.Type" />, для которых заданы указанные значения.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fef91-888">A <see cref="T:System.Linq.Expressions.UnaryExpression" /> that has the <see cref="P:System.Linq.Expressions.Expression.NodeType" /> property equal to <see cref="F:System.Linq.Expressions.ExpressionType.Convert" /> and the <see cref="P:System.Linq.Expressions.UnaryExpression.Operand" /> and <see cref="P:System.Linq.Expressions.Expression.Type" /> properties set to the specified values.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="fef91-889"><xref:System.Linq.Expressions.UnaryExpression.Method%2A> Результирующего <xref:System.Linq.Expressions.UnaryExpression> присваивается метод реализации.</span><span class="sxs-lookup"><span data-stu-id="fef91-889">The <xref:System.Linq.Expressions.UnaryExpression.Method%2A> property of the resulting <xref:System.Linq.Expressions.UnaryExpression> is set to the implementing method.</span></span> <span data-ttu-id="fef91-890">Значение свойства <xref:System.Linq.Expressions.UnaryExpression.IsLiftedToNull%2A> — `false`.</span><span class="sxs-lookup"><span data-stu-id="fef91-890">The <xref:System.Linq.Expressions.UnaryExpression.IsLiftedToNull%2A> property is `false`.</span></span> <span data-ttu-id="fef91-891">Если узел удаляется, <xref:System.Linq.Expressions.UnaryExpression.IsLifted%2A> является `true`.</span><span class="sxs-lookup"><span data-stu-id="fef91-891">If the node is lifted, <xref:System.Linq.Expressions.UnaryExpression.IsLifted%2A> is `true`.</span></span> <span data-ttu-id="fef91-892">В противном случае содержит значение `false`.</span><span class="sxs-lookup"><span data-stu-id="fef91-892">Otherwise, it is `false`.</span></span>  
  
#### <a name="implementing-method"></a><span data-ttu-id="fef91-893">Реализация метода</span><span class="sxs-lookup"><span data-stu-id="fef91-893">Implementing Method</span></span>  
 <span data-ttu-id="fef91-894">Следующие правила определяют метод реализации для операции:</span><span class="sxs-lookup"><span data-stu-id="fef91-894">The following rules determine the implementing method for the operation:</span></span>  
  
-   <span data-ttu-id="fef91-895">Если параметр `expression`. Тип или `type` является определяемого пользователем типа, который определяет оператора явного или неявного преобразования, <xref:System.Reflection.MethodInfo> , который представляет оператор — это метод реализации.</span><span class="sxs-lookup"><span data-stu-id="fef91-895">If either `expression`.Type or `type` is a user-defined type that defines an implicit or explicit conversion operator, the <xref:System.Reflection.MethodInfo> that represents that operator is the implementing method.</span></span>  
  
-   <span data-ttu-id="fef91-896">В противном случае:</span><span class="sxs-lookup"><span data-stu-id="fef91-896">Otherwise:</span></span>  
  
    -   <span data-ttu-id="fef91-897">Если оба `expression`. Тип и `type` представляют числовые или логические типы или типы перечислений, допускающие значение NULL или не допускающие значения NULL, метод реализации является `null`.</span><span class="sxs-lookup"><span data-stu-id="fef91-897">If both `expression`.Type and `type` represent numeric or Boolean types, or nullable or non-nullable enumeration types, the implementing method is `null`.</span></span>  
  
    -   <span data-ttu-id="fef91-898">Если параметр `expression`. Тип или `type` является ссылочным типом и явная упаковка, распаковка-преобразование, или существует преобразование ссылки из `expression`. Введите для `type`, реализация метода является `null`.</span><span class="sxs-lookup"><span data-stu-id="fef91-898">If either `expression`.Type or `type` is a reference type and an explicit boxing, unboxing, or reference conversion exists from `expression`.Type to `type`, the implementing method is `null`.</span></span>  
  
#### <a name="lifted-versus-non-lifted"></a><span data-ttu-id="fef91-899">Удален или без</span><span class="sxs-lookup"><span data-stu-id="fef91-899">Lifted versus Non-Lifted</span></span>  
 <span data-ttu-id="fef91-900">Если метод реализации не `null`:</span><span class="sxs-lookup"><span data-stu-id="fef91-900">If the implementing method is not `null`:</span></span>  
  
-   <span data-ttu-id="fef91-901">Если `expression`. Тип допускает присваивание типу аргумента метода реализации и тип возвращаемого значения метода реализации может быть назначен для `type`, узел не удаляется.</span><span class="sxs-lookup"><span data-stu-id="fef91-901">If `expression`.Type is assignable to the argument type of the implementing method and the return type of the implementing method is assignable to `type`, the node is not lifted.</span></span>  
  
-   <span data-ttu-id="fef91-902">Если один или оба из `expression`. Тип или `type` является типом значения, допускающие значение NULL, и соответствующие типы значений, не допускающие значения NULL считаются равными тип аргумента и тип возвращаемого значения метода реализации соответственно, узел удаляется.</span><span class="sxs-lookup"><span data-stu-id="fef91-902">If one or both of `expression`.Type or `type` is a nullable value type and the corresponding non-nullable value types are equal to the argument type and the return type of the implementing method respectively, the node is lifted.</span></span>  
  
 <span data-ttu-id="fef91-903">Если метод реализации `null`:</span><span class="sxs-lookup"><span data-stu-id="fef91-903">If the implementing method is `null`:</span></span>  
  
-   <span data-ttu-id="fef91-904">Если оба `expression`. Тип и `type` являются, не поддерживающими значение NULL, узел не удаляется.</span><span class="sxs-lookup"><span data-stu-id="fef91-904">If both `expression`.Type and `type` are non-nullable, the node is not lifted.</span></span>  
  
-   <span data-ttu-id="fef91-905">В противном случае узел удаляется.</span><span class="sxs-lookup"><span data-stu-id="fef91-905">Otherwise the node is lifted.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="fef91-906">В следующем примере кода показано, как создать выражение, представляющее операцию преобразования типа.</span><span class="sxs-lookup"><span data-stu-id="fef91-906">The following code example shows how to create an expression that represents a type convertion operation.</span></span>  
  
 [!code-csharp[System.Linq.Expressions.ExpressionDev10#23](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.linq.expressions.expressiondev10/cs/program.cs#23)]
 [!code-vb[System.Linq.Expressions.ExpressionDev10#23](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.linq.expressions.expressiondev10/vb/module1.vb#23)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="fef91-907">Значение параметра <paramref name="expression" /> или <paramref name="type" /> — <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fef91-907">
              <paramref name="expression" /> or <paramref name="type" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.InvalidOperationException">
          <span data-ttu-id="fef91-908">Оператор преобразования не определен для типов <paramref name="expression" />.Type и <paramref name="type" />.Type.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fef91-908">No conversion operator is defined between <paramref name="expression" />.Type and <paramref name="type" />.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="Convert">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.UnaryExpression Convert (System.Linq.Expressions.Expression expression, Type type, System.Reflection.MethodInfo method);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.UnaryExpression Convert(class System.Linq.Expressions.Expression expression, class System.Type type, class System.Reflection.MethodInfo method) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.Convert(System.Linq.Expressions.Expression,System.Type,System.Reflection.MethodInfo)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Linq::Expressions::UnaryExpression ^ Convert(System::Linq::Expressions::Expression ^ expression, Type ^ type, System::Reflection::MethodInfo ^ method);" />
      <MemberSignature Language="F#" Value="static member Convert : System.Linq.Expressions.Expression * Type * System.Reflection.MethodInfo -&gt; System.Linq.Expressions.UnaryExpression" Usage="System.Linq.Expressions.Expression.Convert (expression, type, method)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.UnaryExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="expression" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="type" Type="System.Type" />
        <Parameter Name="method" Type="System.Reflection.MethodInfo" />
      </Parameters>
      <Docs>
        <param name="expression">
          <span data-ttu-id="fef91-909">Объект <see cref="T:System.Linq.Expressions.Expression" />, который следует задать в качестве значения свойства <see cref="P:System.Linq.Expressions.UnaryExpression.Operand" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fef91-909">An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.UnaryExpression.Operand" /> property equal to.</span>
          </span>
        </param>
        <param name="type">
          <span data-ttu-id="fef91-910">Объект <see cref="T:System.Type" />, который следует задать в качестве значения свойства <see cref="P:System.Linq.Expressions.Expression.Type" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fef91-910">A <see cref="T:System.Type" /> to set the <see cref="P:System.Linq.Expressions.Expression.Type" /> property equal to.</span>
          </span>
        </param>
        <param name="method">
          <span data-ttu-id="fef91-911">Объект <see cref="T:System.Reflection.MethodInfo" />, который следует задать в качестве значения свойства <see cref="P:System.Linq.Expressions.UnaryExpression.Method" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fef91-911">A <see cref="T:System.Reflection.MethodInfo" /> to set the <see cref="P:System.Linq.Expressions.UnaryExpression.Method" /> property equal to.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="fef91-912">Создает <see cref="T:System.Linq.Expressions.UnaryExpression" />, который представляет операцию преобразования, для которой указан метод реализации.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fef91-912">Creates a <see cref="T:System.Linq.Expressions.UnaryExpression" /> that represents a conversion operation for which the implementing method is specified.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="fef91-913">Выражение <see cref="T:System.Linq.Expressions.UnaryExpression" /> со свойством <see cref="P:System.Linq.Expressions.Expression.NodeType" />, равным <see cref="F:System.Linq.Expressions.ExpressionType.Convert" />, и свойствами <see cref="P:System.Linq.Expressions.UnaryExpression.Operand" />, <see cref="P:System.Linq.Expressions.Expression.Type" /> и <see cref="P:System.Linq.Expressions.UnaryExpression.Method" />, для которых заданы указанные значения.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fef91-913">A <see cref="T:System.Linq.Expressions.UnaryExpression" /> that has the <see cref="P:System.Linq.Expressions.Expression.NodeType" /> property equal to <see cref="F:System.Linq.Expressions.ExpressionType.Convert" /> and the <see cref="P:System.Linq.Expressions.UnaryExpression.Operand" />, <see cref="P:System.Linq.Expressions.Expression.Type" />, and <see cref="P:System.Linq.Expressions.UnaryExpression.Method" /> properties set to the specified values.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="fef91-914"><xref:System.Linq.Expressions.UnaryExpression.Method%2A> Результирующего <xref:System.Linq.Expressions.UnaryExpression> присваивается метод реализации.</span><span class="sxs-lookup"><span data-stu-id="fef91-914">The <xref:System.Linq.Expressions.UnaryExpression.Method%2A> property of the resulting <xref:System.Linq.Expressions.UnaryExpression> is set to the implementing method.</span></span> <span data-ttu-id="fef91-915">Значение свойства <xref:System.Linq.Expressions.UnaryExpression.IsLiftedToNull%2A> — `false`.</span><span class="sxs-lookup"><span data-stu-id="fef91-915">The <xref:System.Linq.Expressions.UnaryExpression.IsLiftedToNull%2A> property is `false`.</span></span> <span data-ttu-id="fef91-916">Если узел удаляется, <xref:System.Linq.Expressions.UnaryExpression.IsLifted%2A> является `true`.</span><span class="sxs-lookup"><span data-stu-id="fef91-916">If the node is lifted, <xref:System.Linq.Expressions.UnaryExpression.IsLifted%2A> is `true`.</span></span> <span data-ttu-id="fef91-917">В противном случае содержит значение `false`.</span><span class="sxs-lookup"><span data-stu-id="fef91-917">Otherwise, it is `false`.</span></span>  
  
#### <a name="implementing-method"></a><span data-ttu-id="fef91-918">Реализация метода</span><span class="sxs-lookup"><span data-stu-id="fef91-918">Implementing Method</span></span>  
 <span data-ttu-id="fef91-919">Следующие правила определяют метод реализации для операции:</span><span class="sxs-lookup"><span data-stu-id="fef91-919">The following rules determine the implementing method for the operation:</span></span>  
  
-   <span data-ttu-id="fef91-920">Если метод не является `null`, он является методом реализации.</span><span class="sxs-lookup"><span data-stu-id="fef91-920">If method is not `null`, it is the implementing method.</span></span> <span data-ttu-id="fef91-921">Он должен быть отличным от void, `static` (`Shared` в Visual Basic) метода, принимающего один аргумент.</span><span class="sxs-lookup"><span data-stu-id="fef91-921">It must represent a non-void, `static` (`Shared` in Visual Basic) method that takes one argument.</span></span>  
  
-   <span data-ttu-id="fef91-922">В противном случае, если параметр `expression`. Тип или `type` является определяемого пользователем типа, который определяет оператора явного или неявного преобразования, <xref:System.Reflection.MethodInfo> , который представляет оператор — это метод реализации.</span><span class="sxs-lookup"><span data-stu-id="fef91-922">Otherwise, if either `expression`.Type or `type` is a user-defined type that defines an implicit or explicit conversion operator, the <xref:System.Reflection.MethodInfo> that represents that operator is the implementing method.</span></span>  
  
-   <span data-ttu-id="fef91-923">В противном случае:</span><span class="sxs-lookup"><span data-stu-id="fef91-923">Otherwise:</span></span>  
  
    -   <span data-ttu-id="fef91-924">Если оба `expression`. Тип и `type` представляют числовые или логические типы или типы перечислений, допускающие значение NULL или не допускающие значения NULL, метод реализации является `null`.</span><span class="sxs-lookup"><span data-stu-id="fef91-924">If both `expression`.Type and `type` represent numeric or Boolean types, or nullable or non-nullable enumeration types, the implementing method is `null`.</span></span>  
  
    -   <span data-ttu-id="fef91-925">Если параметр `expression`. Тип или `type` является ссылочным типом и явная упаковка, распаковка-преобразование, или существует преобразование ссылки из `expression`. Введите для `type`, реализация метода является `null`.</span><span class="sxs-lookup"><span data-stu-id="fef91-925">If either `expression`.Type or `type` is a reference type and an explicit boxing, unboxing, or reference conversion exists from `expression`.Type to `type`, the implementing method is `null`.</span></span>  
  
#### <a name="lifted-versus-non-lifted"></a><span data-ttu-id="fef91-926">Удален или без</span><span class="sxs-lookup"><span data-stu-id="fef91-926">Lifted versus Non-Lifted</span></span>  
 <span data-ttu-id="fef91-927">Если метод реализации не `null`:</span><span class="sxs-lookup"><span data-stu-id="fef91-927">If the implementing method is not `null`:</span></span>  
  
-   <span data-ttu-id="fef91-928">Если `expression`. Тип допускает присваивание типу аргумента метода реализации и тип возвращаемого значения метода реализации может быть назначен для `type`, узел не удаляется.</span><span class="sxs-lookup"><span data-stu-id="fef91-928">If `expression`.Type is assignable to the argument type of the implementing method and the return type of the implementing method is assignable to `type`, the node is not lifted.</span></span>  
  
-   <span data-ttu-id="fef91-929">Если один или оба из `expression`. Тип или `type` — это тип значение NULL и соответствующие типы значений, не допускающие значения NULL считаются равными тип аргумента и тип возвращаемого значения метода реализации соответственно, узел удаляется.</span><span class="sxs-lookup"><span data-stu-id="fef91-929">If either or both of `expression`.Type or `type` are a nullable value type and the corresponding non-nullable value types are equal to the argument type and the return type of the implementing method respectively, the node is lifted.</span></span>  
  
 <span data-ttu-id="fef91-930">Если метод реализации `null`:</span><span class="sxs-lookup"><span data-stu-id="fef91-930">If the implementing method is `null`:</span></span>  
  
-   <span data-ttu-id="fef91-931">Если оба `expression`. Тип и `type` являются, не поддерживающими значение NULL, узел не удаляется.</span><span class="sxs-lookup"><span data-stu-id="fef91-931">If both `expression`.Type and `type` are non-nullable, the node is not lifted.</span></span>  
  
-   <span data-ttu-id="fef91-932">В противном случае узел удаляется.</span><span class="sxs-lookup"><span data-stu-id="fef91-932">Otherwise the node is lifted.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="fef91-933">Значение параметра <paramref name="expression" /> или <paramref name="type" /> — <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fef91-933">
              <paramref name="expression" /> or <paramref name="type" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="fef91-934">Значение параметра <paramref name="method" /> не равно <see langword="null" />, и метод, который представляется этим параметром, возвращает значение <see langword="void" />, не является <see langword="static" /> (<see langword="Shared" /> в Visual Basic) и не принимает ровно один аргумент.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fef91-934">
              <paramref name="method" /> is not <see langword="null" /> and the method it represents returns <see langword="void" />, is not <see langword="static" /> (<see langword="Shared" /> in Visual Basic), or does not take exactly one argument.</span>
          </span>
        </exception>
        <exception cref="T:System.InvalidOperationException">
          <span data-ttu-id="fef91-935">Оператор преобразования не определен для типов <paramref name="expression" />.Type и <paramref name="type" />.Type.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fef91-935">No conversion operator is defined between <paramref name="expression" />.Type and <paramref name="type" />.</span>
          </span>
          <span data-ttu-id="fef91-936">-или-</span>
          <span class="sxs-lookup">
            <span data-stu-id="fef91-936">-or-</span>
          </span>
          <span data-ttu-id="fef91-937">Параметр <paramref name="expression" />.Type не назначается типу аргумента метода, представленному параметром <paramref name="method" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fef91-937">
              <paramref name="expression" />.Type is not assignable to the argument type of the method represented by <paramref name="method" />.</span>
          </span>
          <span data-ttu-id="fef91-938">-или-</span>
          <span class="sxs-lookup">
            <span data-stu-id="fef91-938">-or-</span>
          </span>
          <span data-ttu-id="fef91-939">Тип возврата метода, представленный <paramref name="method" />, не назначается для <paramref name="type" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fef91-939">The return type of the method represented by <paramref name="method" /> is not assignable to <paramref name="type" />.</span>
          </span>
          <span data-ttu-id="fef91-940">-или-</span>
          <span class="sxs-lookup">
            <span data-stu-id="fef91-940">-or-</span>
          </span>
          <span data-ttu-id="fef91-941">Тип <paramref name="expression" />.Type или <paramref name="type" /> поддерживает тип значения, а соответствующий тип, не поддерживающий значение null, не равен типу аргумента и типу возврата, соответственно метода, представленного <paramref name="method" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fef91-941">
              <paramref name="expression" />.Type or <paramref name="type" /> is a nullable value type and the corresponding non-nullable value type does not equal the argument type or the return type, respectively, of the method represented by <paramref name="method" />.</span>
          </span>
        </exception>
        <exception cref="T:System.Reflection.AmbiguousMatchException">
          <span data-ttu-id="fef91-942">Найдено более одного метода, соответствующего описанию <paramref name="method" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fef91-942">More than one method that matches the <paramref name="method" /> description was found.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <MemberGroup MemberName="ConvertChecked">
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="fef91-943">Создает <see cref="T:System.Linq.Expressions.UnaryExpression" />, представляющее операцию преобразования, создающую исключение, если целевой тип переполнен.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fef91-943">Creates a <see cref="T:System.Linq.Expressions.UnaryExpression" /> that represents a conversion operation that throws an exception if the target type is overflowed.</span>
          </span>
        </summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="ConvertChecked">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.UnaryExpression ConvertChecked (System.Linq.Expressions.Expression expression, Type type);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.UnaryExpression ConvertChecked(class System.Linq.Expressions.Expression expression, class System.Type type) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.ConvertChecked(System.Linq.Expressions.Expression,System.Type)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Linq::Expressions::UnaryExpression ^ ConvertChecked(System::Linq::Expressions::Expression ^ expression, Type ^ type);" />
      <MemberSignature Language="F#" Value="static member ConvertChecked : System.Linq.Expressions.Expression * Type -&gt; System.Linq.Expressions.UnaryExpression" Usage="System.Linq.Expressions.Expression.ConvertChecked (expression, type)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.UnaryExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="expression" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="type" Type="System.Type" />
      </Parameters>
      <Docs>
        <param name="expression">
          <span data-ttu-id="fef91-944">Объект <see cref="T:System.Linq.Expressions.Expression" />, который следует задать в качестве значения свойства <see cref="P:System.Linq.Expressions.UnaryExpression.Operand" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fef91-944">An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.UnaryExpression.Operand" /> property equal to.</span>
          </span>
        </param>
        <param name="type">
          <span data-ttu-id="fef91-945">Объект <see cref="T:System.Type" />, который следует задать в качестве значения свойства <see cref="P:System.Linq.Expressions.Expression.Type" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fef91-945">A <see cref="T:System.Type" /> to set the <see cref="P:System.Linq.Expressions.Expression.Type" /> property equal to.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="fef91-946">Создает <see cref="T:System.Linq.Expressions.UnaryExpression" />, представляющее операцию преобразования, создающую исключение, если целевой тип переполнен.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fef91-946">Creates a <see cref="T:System.Linq.Expressions.UnaryExpression" /> that represents a conversion operation that throws an exception if the target type is overflowed.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="fef91-947">Выражение <see cref="T:System.Linq.Expressions.UnaryExpression" /> со свойством<see cref="P:System.Linq.Expressions.Expression.NodeType" />, равным <see cref="F:System.Linq.Expressions.ExpressionType.ConvertChecked" />, и свойствами <see cref="P:System.Linq.Expressions.UnaryExpression.Operand" /> и <see cref="P:System.Linq.Expressions.Expression.Type" />, для которых заданы указанные значения.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fef91-947">A <see cref="T:System.Linq.Expressions.UnaryExpression" /> that has the <see cref="P:System.Linq.Expressions.Expression.NodeType" /> property equal to <see cref="F:System.Linq.Expressions.ExpressionType.ConvertChecked" /> and the <see cref="P:System.Linq.Expressions.UnaryExpression.Operand" /> and <see cref="P:System.Linq.Expressions.Expression.Type" /> properties set to the specified values.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="fef91-948"><xref:System.Linq.Expressions.UnaryExpression.Method%2A> Результирующего <xref:System.Linq.Expressions.UnaryExpression> присваивается метод реализации.</span><span class="sxs-lookup"><span data-stu-id="fef91-948">The <xref:System.Linq.Expressions.UnaryExpression.Method%2A> property of the resulting <xref:System.Linq.Expressions.UnaryExpression> is set to the implementing method.</span></span> <span data-ttu-id="fef91-949">Значение свойства <xref:System.Linq.Expressions.UnaryExpression.IsLiftedToNull%2A> — `false`.</span><span class="sxs-lookup"><span data-stu-id="fef91-949">The <xref:System.Linq.Expressions.UnaryExpression.IsLiftedToNull%2A> property is `false`.</span></span> <span data-ttu-id="fef91-950">Если узел удаляется, <xref:System.Linq.Expressions.UnaryExpression.IsLifted%2A> является `true`.</span><span class="sxs-lookup"><span data-stu-id="fef91-950">If the node is lifted, <xref:System.Linq.Expressions.UnaryExpression.IsLifted%2A> is `true`.</span></span> <span data-ttu-id="fef91-951">В противном случае содержит значение `false`.</span><span class="sxs-lookup"><span data-stu-id="fef91-951">Otherwise, it is `false`.</span></span>  
  
#### <a name="implementing-method"></a><span data-ttu-id="fef91-952">Реализация метода</span><span class="sxs-lookup"><span data-stu-id="fef91-952">Implementing Method</span></span>  
 <span data-ttu-id="fef91-953">Следующие правила определяют метод реализации для операции:</span><span class="sxs-lookup"><span data-stu-id="fef91-953">The following rules determine the implementing method for the operation:</span></span>  
  
-   <span data-ttu-id="fef91-954">Если параметр `expression`. Тип или `type` является определяемого пользователем типа, который определяет оператора явного или неявного преобразования, <xref:System.Reflection.MethodInfo> , который представляет оператор — это метод реализации.</span><span class="sxs-lookup"><span data-stu-id="fef91-954">If either `expression`.Type or `type` is a user-defined type that defines an implicit or explicit conversion operator, the <xref:System.Reflection.MethodInfo> that represents that operator is the implementing method.</span></span>  
  
-   <span data-ttu-id="fef91-955">В противном случае:</span><span class="sxs-lookup"><span data-stu-id="fef91-955">Otherwise:</span></span>  
  
    -   <span data-ttu-id="fef91-956">Если оба `expression`. Тип и `type` представляют числовые или логические типы или типы перечислений, допускающие значение NULL или не допускающие значения NULL, метод реализации является `null`.</span><span class="sxs-lookup"><span data-stu-id="fef91-956">If both `expression`.Type and `type` represent numeric or Boolean types, or nullable or non-nullable enumeration types, the implementing method is `null`.</span></span>  
  
    -   <span data-ttu-id="fef91-957">Если параметр `expression`. Тип или `type` является ссылочным типом и явная упаковка, распаковка-преобразование, или существует преобразование ссылки из `expression`. Введите для `type`, реализация метода является `null`.</span><span class="sxs-lookup"><span data-stu-id="fef91-957">If either `expression`.Type or `type` is a reference type and an explicit boxing, unboxing, or reference conversion exists from `expression`.Type to `type`, the implementing method is `null`.</span></span>  
  
#### <a name="lifted-versus-non-lifted"></a><span data-ttu-id="fef91-958">Удален или без</span><span class="sxs-lookup"><span data-stu-id="fef91-958">Lifted versus Non-Lifted</span></span>  
 <span data-ttu-id="fef91-959">Если метод реализации не `null`:</span><span class="sxs-lookup"><span data-stu-id="fef91-959">If the implementing method is not `null`:</span></span>  
  
-   <span data-ttu-id="fef91-960">Если `expression`. Тип допускает присваивание типу аргумента метода реализации и тип возвращаемого значения метода реализации может быть назначен для `type`, узел не удаляется.</span><span class="sxs-lookup"><span data-stu-id="fef91-960">If `expression`.Type is assignable to the argument type of the implementing method and the return type of the implementing method is assignable to `type`, the node is not lifted.</span></span>  
  
-   <span data-ttu-id="fef91-961">Если один или оба из `expression`. Тип или `type` — это тип значение NULL и соответствующие типы значений, не допускающие значения NULL считаются равными тип аргумента и тип возвращаемого значения метода реализации соответственно, узел удаляется.</span><span class="sxs-lookup"><span data-stu-id="fef91-961">If either or both of `expression`.Type or `type` are a nullable value type and the corresponding non-nullable value types are equal to the argument type and the return type of the implementing method respectively, the node is lifted.</span></span>  
  
 <span data-ttu-id="fef91-962">Если метод реализации `null`:</span><span class="sxs-lookup"><span data-stu-id="fef91-962">If the implementing method is `null`:</span></span>  
  
-   <span data-ttu-id="fef91-963">Если оба `expression`. Тип и `type` являются, не поддерживающими значение NULL, узел не удаляется.</span><span class="sxs-lookup"><span data-stu-id="fef91-963">If both `expression`.Type and `type` are non-nullable, the node is not lifted.</span></span>  
  
-   <span data-ttu-id="fef91-964">В противном случае узел удаляется.</span><span class="sxs-lookup"><span data-stu-id="fef91-964">Otherwise the node is lifted.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="fef91-965">Значение параметра <paramref name="expression" /> или <paramref name="type" /> — <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fef91-965">
              <paramref name="expression" /> or <paramref name="type" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.InvalidOperationException">
          <span data-ttu-id="fef91-966">Оператор преобразования не определен для типов <paramref name="expression" />.Type и <paramref name="type" />.Type.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fef91-966">No conversion operator is defined between <paramref name="expression" />.Type and <paramref name="type" />.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="ConvertChecked">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.UnaryExpression ConvertChecked (System.Linq.Expressions.Expression expression, Type type, System.Reflection.MethodInfo method);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.UnaryExpression ConvertChecked(class System.Linq.Expressions.Expression expression, class System.Type type, class System.Reflection.MethodInfo method) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.ConvertChecked(System.Linq.Expressions.Expression,System.Type,System.Reflection.MethodInfo)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Linq::Expressions::UnaryExpression ^ ConvertChecked(System::Linq::Expressions::Expression ^ expression, Type ^ type, System::Reflection::MethodInfo ^ method);" />
      <MemberSignature Language="F#" Value="static member ConvertChecked : System.Linq.Expressions.Expression * Type * System.Reflection.MethodInfo -&gt; System.Linq.Expressions.UnaryExpression" Usage="System.Linq.Expressions.Expression.ConvertChecked (expression, type, method)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.UnaryExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="expression" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="type" Type="System.Type" />
        <Parameter Name="method" Type="System.Reflection.MethodInfo" />
      </Parameters>
      <Docs>
        <param name="expression">
          <span data-ttu-id="fef91-967">Объект <see cref="T:System.Linq.Expressions.Expression" />, который следует задать в качестве значения свойства <see cref="P:System.Linq.Expressions.UnaryExpression.Operand" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fef91-967">An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.UnaryExpression.Operand" /> property equal to.</span>
          </span>
        </param>
        <param name="type">
          <span data-ttu-id="fef91-968">Объект <see cref="T:System.Type" />, который следует задать в качестве значения свойства <see cref="P:System.Linq.Expressions.Expression.Type" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fef91-968">A <see cref="T:System.Type" /> to set the <see cref="P:System.Linq.Expressions.Expression.Type" /> property equal to.</span>
          </span>
        </param>
        <param name="method">
          <span data-ttu-id="fef91-969">Объект <see cref="T:System.Reflection.MethodInfo" />, который следует задать в качестве значения свойства <see cref="P:System.Linq.Expressions.UnaryExpression.Method" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fef91-969">A <see cref="T:System.Reflection.MethodInfo" /> to set the <see cref="P:System.Linq.Expressions.UnaryExpression.Method" /> property equal to.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="fef91-970">Создает <see cref="T:System.Linq.Expressions.UnaryExpression" />, представляющий операцию преобразования, создающую исключение, если целевой тип переполнен, и для которой указан метод реализации.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fef91-970">Creates a <see cref="T:System.Linq.Expressions.UnaryExpression" /> that represents a conversion operation that throws an exception if the target type is overflowed and for which the implementing method is specified.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="fef91-971">Выражение <see cref="T:System.Linq.Expressions.UnaryExpression" /> со свойством <see cref="P:System.Linq.Expressions.Expression.NodeType" />, равным <see cref="F:System.Linq.Expressions.ExpressionType.ConvertChecked" />, и свойствами <see cref="P:System.Linq.Expressions.UnaryExpression.Operand" />, <see cref="P:System.Linq.Expressions.Expression.Type" /> и <see cref="P:System.Linq.Expressions.UnaryExpression.Method" />, для которых заданы указанные значения.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fef91-971">A <see cref="T:System.Linq.Expressions.UnaryExpression" /> that has the <see cref="P:System.Linq.Expressions.Expression.NodeType" /> property equal to <see cref="F:System.Linq.Expressions.ExpressionType.ConvertChecked" /> and the <see cref="P:System.Linq.Expressions.UnaryExpression.Operand" />, <see cref="P:System.Linq.Expressions.Expression.Type" />, and <see cref="P:System.Linq.Expressions.UnaryExpression.Method" /> properties set to the specified values.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="fef91-972"><xref:System.Linq.Expressions.UnaryExpression.Method%2A> Результирующего <xref:System.Linq.Expressions.UnaryExpression> присваивается метод реализации.</span><span class="sxs-lookup"><span data-stu-id="fef91-972">The <xref:System.Linq.Expressions.UnaryExpression.Method%2A> property of the resulting <xref:System.Linq.Expressions.UnaryExpression> is set to the implementing method.</span></span> <span data-ttu-id="fef91-973">Значение свойства <xref:System.Linq.Expressions.UnaryExpression.IsLiftedToNull%2A> — `false`.</span><span class="sxs-lookup"><span data-stu-id="fef91-973">The <xref:System.Linq.Expressions.UnaryExpression.IsLiftedToNull%2A> property is `false`.</span></span> <span data-ttu-id="fef91-974">Если узел удаляется, <xref:System.Linq.Expressions.UnaryExpression.IsLifted%2A> является `true`.</span><span class="sxs-lookup"><span data-stu-id="fef91-974">If the node is lifted, <xref:System.Linq.Expressions.UnaryExpression.IsLifted%2A> is `true`.</span></span> <span data-ttu-id="fef91-975">В противном случае содержит значение `false`.</span><span class="sxs-lookup"><span data-stu-id="fef91-975">Otherwise, it is `false`.</span></span>  
  
#### <a name="implementing-method"></a><span data-ttu-id="fef91-976">Реализация метода</span><span class="sxs-lookup"><span data-stu-id="fef91-976">Implementing Method</span></span>  
 <span data-ttu-id="fef91-977">Следующие правила определяют метод реализации для операции:</span><span class="sxs-lookup"><span data-stu-id="fef91-977">The following rules determine the implementing method for the operation:</span></span>  
  
-   <span data-ttu-id="fef91-978">Если метод не является `null`, он является методом реализации.</span><span class="sxs-lookup"><span data-stu-id="fef91-978">If method is not `null`, it is the implementing method.</span></span> <span data-ttu-id="fef91-979">Он должен быть отличным от void, `static` (`Shared` в Visual Basic) метода, принимающего один аргумент.</span><span class="sxs-lookup"><span data-stu-id="fef91-979">It must represent a non-void, `static` (`Shared` in Visual Basic) method that takes one argument.</span></span>  
  
-   <span data-ttu-id="fef91-980">В противном случае, если параметр `expression`. Тип или `type` является определяемого пользователем типа, который определяет оператора явного или неявного преобразования, <xref:System.Reflection.MethodInfo> , который представляет оператор — это метод реализации.</span><span class="sxs-lookup"><span data-stu-id="fef91-980">Otherwise, if either `expression`.Type or `type` is a user-defined type that defines an implicit or explicit conversion operator, the <xref:System.Reflection.MethodInfo> that represents that operator is the implementing method.</span></span>  
  
-   <span data-ttu-id="fef91-981">В противном случае:</span><span class="sxs-lookup"><span data-stu-id="fef91-981">Otherwise:</span></span>  
  
    -   <span data-ttu-id="fef91-982">Если оба `expression`. Тип и `type` представляют числовые или логические типы или типы перечислений, допускающие значение NULL или не допускающие значения NULL, метод реализации является `null`.</span><span class="sxs-lookup"><span data-stu-id="fef91-982">If both `expression`.Type and `type` represent numeric or Boolean types, or nullable or non-nullable enumeration types, the implementing method is `null`.</span></span>  
  
    -   <span data-ttu-id="fef91-983">Если параметр `expression`. Тип или `type` является ссылочным типом и явная упаковка, распаковка-преобразование, или существует преобразование ссылки из `expression`. Введите для `type`, реализация метода является `null`.</span><span class="sxs-lookup"><span data-stu-id="fef91-983">If either `expression`.Type or `type` is a reference type and an explicit boxing, unboxing, or reference conversion exists from `expression`.Type to `type`, the implementing method is `null`.</span></span>  
  
#### <a name="lifted-versus-non-lifted"></a><span data-ttu-id="fef91-984">Удален или без</span><span class="sxs-lookup"><span data-stu-id="fef91-984">Lifted versus Non-Lifted</span></span>  
 <span data-ttu-id="fef91-985">Если метод реализации не `null`:</span><span class="sxs-lookup"><span data-stu-id="fef91-985">If the implementing method is not `null`:</span></span>  
  
-   <span data-ttu-id="fef91-986">Если `expression`. Тип допускает присваивание типу аргумента метода реализации и тип возвращаемого значения метода реализации может быть назначен для `type`, узел не удаляется.</span><span class="sxs-lookup"><span data-stu-id="fef91-986">If `expression`.Type is assignable to the argument type of the implementing method and the return type of the implementing method is assignable to `type`, the node is not lifted.</span></span>  
  
-   <span data-ttu-id="fef91-987">Если один или оба из `expression`. Тип или `type` — это тип значение NULL и соответствующие типы значений, не допускающие значения NULL считаются равными тип аргумента и тип возвращаемого значения метода реализации соответственно, узел удаляется.</span><span class="sxs-lookup"><span data-stu-id="fef91-987">If either or both of `expression`.Type or `type` are a nullable value type and the corresponding non-nullable value types are equal to the argument type and the return type of the implementing method respectively, the node is lifted.</span></span>  
  
 <span data-ttu-id="fef91-988">Если метод реализации `null`:</span><span class="sxs-lookup"><span data-stu-id="fef91-988">If the implementing method is `null`:</span></span>  
  
-   <span data-ttu-id="fef91-989">Если оба `expression`. Тип и `type` являются, не поддерживающими значение NULL, узел не удаляется.</span><span class="sxs-lookup"><span data-stu-id="fef91-989">If both `expression`.Type and `type` are non-nullable, the node is not lifted.</span></span>  
  
-   <span data-ttu-id="fef91-990">В противном случае узел удаляется.</span><span class="sxs-lookup"><span data-stu-id="fef91-990">Otherwise the node is lifted.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="fef91-991">Значение параметра <paramref name="expression" /> или <paramref name="type" /> — <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fef91-991">
              <paramref name="expression" /> or <paramref name="type" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="fef91-992">Значение параметра <paramref name="method" /> не равно <see langword="null" />, и метод, который представляется этим параметром, возвращает значение <see langword="void" />, не является <see langword="static" /> (<see langword="Shared" /> в Visual Basic) и не принимает ровно один аргумент.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fef91-992">
              <paramref name="method" /> is not <see langword="null" /> and the method it represents returns <see langword="void" />, is not <see langword="static" /> (<see langword="Shared" /> in Visual Basic), or does not take exactly one argument.</span>
          </span>
        </exception>
        <exception cref="T:System.InvalidOperationException">
          <span data-ttu-id="fef91-993">Оператор преобразования не определен для типов <paramref name="expression" />.Type и <paramref name="type" />.Type.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fef91-993">No conversion operator is defined between <paramref name="expression" />.Type and <paramref name="type" />.</span>
          </span>
          <span data-ttu-id="fef91-994">-или-</span>
          <span class="sxs-lookup">
            <span data-stu-id="fef91-994">-or-</span>
          </span>
          <span data-ttu-id="fef91-995">Параметр <paramref name="expression" />.Type не назначается типу аргумента метода, представленному параметром <paramref name="method" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fef91-995">
              <paramref name="expression" />.Type is not assignable to the argument type of the method represented by <paramref name="method" />.</span>
          </span>
          <span data-ttu-id="fef91-996">-или-</span>
          <span class="sxs-lookup">
            <span data-stu-id="fef91-996">-or-</span>
          </span>
          <span data-ttu-id="fef91-997">Тип возврата метода, представленный <paramref name="method" />, не назначается для <paramref name="type" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fef91-997">The return type of the method represented by <paramref name="method" /> is not assignable to <paramref name="type" />.</span>
          </span>
          <span data-ttu-id="fef91-998">-или-</span>
          <span class="sxs-lookup">
            <span data-stu-id="fef91-998">-or-</span>
          </span>
          <span data-ttu-id="fef91-999">Тип <paramref name="expression" />.Type или <paramref name="type" /> поддерживает тип значения, а соответствующий тип, не поддерживающий значение null, не равен типу аргумента и типу возврата, соответственно метода, представленного <paramref name="method" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fef91-999">
              <paramref name="expression" />.Type or <paramref name="type" /> is a nullable value type and the corresponding non-nullable value type does not equal the argument type or the return type, respectively, of the method represented by <paramref name="method" />.</span>
          </span>
        </exception>
        <exception cref="T:System.Reflection.AmbiguousMatchException">
          <span data-ttu-id="fef91-1000">Найдено более одного метода, соответствующего описанию <paramref name="method" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fef91-1000">More than one method that matches the <paramref name="method" /> description was found.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="DebugInfo">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.DebugInfoExpression DebugInfo (System.Linq.Expressions.SymbolDocumentInfo document, int startLine, int startColumn, int endLine, int endColumn);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.DebugInfoExpression DebugInfo(class System.Linq.Expressions.SymbolDocumentInfo document, int32 startLine, int32 startColumn, int32 endLine, int32 endColumn) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.DebugInfo(System.Linq.Expressions.SymbolDocumentInfo,System.Int32,System.Int32,System.Int32,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function DebugInfo (document As SymbolDocumentInfo, startLine As Integer, startColumn As Integer, endLine As Integer, endColumn As Integer) As DebugInfoExpression" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Linq::Expressions::DebugInfoExpression ^ DebugInfo(System::Linq::Expressions::SymbolDocumentInfo ^ document, int startLine, int startColumn, int endLine, int endColumn);" />
      <MemberSignature Language="F#" Value="static member DebugInfo : System.Linq.Expressions.SymbolDocumentInfo * int * int * int * int -&gt; System.Linq.Expressions.DebugInfoExpression" Usage="System.Linq.Expressions.Expression.DebugInfo (document, startLine, startColumn, endLine, endColumn)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.DebugInfoExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="document" Type="System.Linq.Expressions.SymbolDocumentInfo" />
        <Parameter Name="startLine" Type="System.Int32" />
        <Parameter Name="startColumn" Type="System.Int32" />
        <Parameter Name="endLine" Type="System.Int32" />
        <Parameter Name="endColumn" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="document">
          <span data-ttu-id="fef91-1001">Объект <see cref="T:System.Linq.Expressions.SymbolDocumentInfo" />, представляющий исходный файл.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fef91-1001">The <see cref="T:System.Linq.Expressions.SymbolDocumentInfo" /> that represents the source file.</span>
          </span>
        </param>
        <param name="startLine">
          <span data-ttu-id="fef91-1002">Начальная строка данного выражения <see cref="T:System.Linq.Expressions.DebugInfoExpression" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fef91-1002">The start line of this <see cref="T:System.Linq.Expressions.DebugInfoExpression" />.</span>
          </span>
          <span data-ttu-id="fef91-1003">Должно быть больше 0.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fef91-1003">Must be greater than 0.</span>
          </span>
        </param>
        <param name="startColumn">
          <span data-ttu-id="fef91-1004">Начальный столбец данного выражения <see cref="T:System.Linq.Expressions.DebugInfoExpression" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fef91-1004">The start column of this <see cref="T:System.Linq.Expressions.DebugInfoExpression" />.</span>
          </span>
          <span data-ttu-id="fef91-1005">Должно быть больше 0.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fef91-1005">Must be greater than 0.</span>
          </span>
        </param>
        <param name="endLine">
          <span data-ttu-id="fef91-1006">Конечная строка данного выражения <see cref="T:System.Linq.Expressions.DebugInfoExpression" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fef91-1006">The end line of this <see cref="T:System.Linq.Expressions.DebugInfoExpression" />.</span>
          </span>
          <span data-ttu-id="fef91-1007">Значение должно быть больше или равно значению начальной строки.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fef91-1007">Must be greater or equal than the start line.</span>
          </span>
        </param>
        <param name="endColumn">
          <span data-ttu-id="fef91-1008">Конечный столбец данного объекта <see cref="T:System.Linq.Expressions.DebugInfoExpression" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fef91-1008">The end column of this <see cref="T:System.Linq.Expressions.DebugInfoExpression" />.</span>
          </span>
          <span data-ttu-id="fef91-1009">Если конечная строка совпадает с начальной строкой, это значение должно быть больше или равно значению начального столбца.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fef91-1009">If the end line is the same as the start line, it must be greater or equal than the start column.</span>
          </span>
          <span data-ttu-id="fef91-1010">В любом случае оно должно быть больше 0.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fef91-1010">In any case, must be greater than 0.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="fef91-1011">Создает выражение <see cref="T:System.Linq.Expressions.DebugInfoExpression" /> с заданным диапазоном.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fef91-1011">Creates a <see cref="T:System.Linq.Expressions.DebugInfoExpression" /> with the specified span.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="fef91-1012">Экземпляр <see cref="T:System.Linq.Expressions.DebugInfoExpression" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fef91-1012">An instance of <see cref="T:System.Linq.Expressions.DebugInfoExpression" />.</span>
          </span>
        </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="Decrement">
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="fef91-1013">Создает объект <see cref="T:System.Linq.Expressions.UnaryExpression" />, представляющий уменьшение выражения на 1.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fef91-1013">Creates a <see cref="T:System.Linq.Expressions.UnaryExpression" /> that represents the decrementing of the expression by 1.</span>
          </span>
        </summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Decrement">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.UnaryExpression Decrement (System.Linq.Expressions.Expression expression);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.UnaryExpression Decrement(class System.Linq.Expressions.Expression expression) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.Decrement(System.Linq.Expressions.Expression)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Linq::Expressions::UnaryExpression ^ Decrement(System::Linq::Expressions::Expression ^ expression);" />
      <MemberSignature Language="F#" Value="static member Decrement : System.Linq.Expressions.Expression -&gt; System.Linq.Expressions.UnaryExpression" Usage="System.Linq.Expressions.Expression.Decrement expression" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.UnaryExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="expression" Type="System.Linq.Expressions.Expression" />
      </Parameters>
      <Docs>
        <param name="expression">
          <span data-ttu-id="fef91-1014">Уменьшаемое выражение <see cref="T:System.Linq.Expressions.Expression" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fef91-1014">An <see cref="T:System.Linq.Expressions.Expression" /> to decrement.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="fef91-1015">Создает объект <see cref="T:System.Linq.Expressions.UnaryExpression" />, представляющий уменьшение выражения на 1.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fef91-1015">Creates a <see cref="T:System.Linq.Expressions.UnaryExpression" /> that represents the decrementing of the expression by 1.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="fef91-1016">Объект <see cref="T:System.Linq.Expressions.UnaryExpression" />, представляющий уменьшенное выражение.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fef91-1016">A <see cref="T:System.Linq.Expressions.UnaryExpression" /> that represents the decremented expression.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="fef91-1017">Это выражение функционирует и не изменяет значение объекта, переданного ему.</span><span class="sxs-lookup"><span data-stu-id="fef91-1017">This expression is functional and does not change the value of the object passed to it.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="fef91-1018">В следующем примере кода показано, как создать выражение, которое вычитает 1 из заданного значения.</span><span class="sxs-lookup"><span data-stu-id="fef91-1018">The following code example shows how to create an expression that substracts 1 from a given value.</span></span>  
  
 [!code-csharp[System.Linq.Expressions.ExpressionDev10#5](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.linq.expressions.expressiondev10/cs/program.cs#5)]
 [!code-vb[System.Linq.Expressions.ExpressionDev10#5](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.linq.expressions.expressiondev10/vb/module1.vb#5)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Decrement">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.UnaryExpression Decrement (System.Linq.Expressions.Expression expression, System.Reflection.MethodInfo method);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.UnaryExpression Decrement(class System.Linq.Expressions.Expression expression, class System.Reflection.MethodInfo method) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.Decrement(System.Linq.Expressions.Expression,System.Reflection.MethodInfo)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Linq::Expressions::UnaryExpression ^ Decrement(System::Linq::Expressions::Expression ^ expression, System::Reflection::MethodInfo ^ method);" />
      <MemberSignature Language="F#" Value="static member Decrement : System.Linq.Expressions.Expression * System.Reflection.MethodInfo -&gt; System.Linq.Expressions.UnaryExpression" Usage="System.Linq.Expressions.Expression.Decrement (expression, method)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.UnaryExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="expression" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="method" Type="System.Reflection.MethodInfo" />
      </Parameters>
      <Docs>
        <param name="expression">
          <span data-ttu-id="fef91-1019">Уменьшаемое выражение <see cref="T:System.Linq.Expressions.Expression" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fef91-1019">An <see cref="T:System.Linq.Expressions.Expression" /> to decrement.</span>
          </span>
        </param>
        <param name="method">
          <span data-ttu-id="fef91-1020">Объект <see cref="T:System.Reflection.MethodInfo" />, представляющий метод реализации.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fef91-1020">A <see cref="T:System.Reflection.MethodInfo" /> that represents the implementing method.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="fef91-1021">Создает объект <see cref="T:System.Linq.Expressions.UnaryExpression" />, представляющий уменьшение выражения на 1.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fef91-1021">Creates a <see cref="T:System.Linq.Expressions.UnaryExpression" /> that represents the decrementing of the expression by 1.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="fef91-1022">Объект <see cref="T:System.Linq.Expressions.UnaryExpression" />, представляющий уменьшенное выражение.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fef91-1022">A <see cref="T:System.Linq.Expressions.UnaryExpression" /> that represents the decremented expression.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="fef91-1023">Это выражение функционирует и не изменяет значение объекта, переданного ему.</span><span class="sxs-lookup"><span data-stu-id="fef91-1023">This expression is functional and does not change the value of the object passed to it.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Default">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.DefaultExpression Default (Type type);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.DefaultExpression Default(class System.Type type) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.Default(System.Type)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Linq::Expressions::DefaultExpression ^ Default(Type ^ type);" />
      <MemberSignature Language="F#" Value="static member Default : Type -&gt; System.Linq.Expressions.DefaultExpression" Usage="System.Linq.Expressions.Expression.Default type" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.DefaultExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="type" Type="System.Type" />
      </Parameters>
      <Docs>
        <param name="type">
          <span data-ttu-id="fef91-1024">Объект <see cref="T:System.Type" />, который следует задать в качестве значения свойства <see cref="P:System.Linq.Expressions.Expression.Type" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fef91-1024">A <see cref="T:System.Type" /> to set the <see cref="P:System.Linq.Expressions.Expression.Type" /> property equal to.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="fef91-1025">Создает объект <see cref="T:System.Linq.Expressions.DefaultExpression" />, для свойства <see cref="P:System.Linq.Expressions.Expression.Type" /> которого задан указанный тип.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fef91-1025">Creates a <see cref="T:System.Linq.Expressions.DefaultExpression" /> that has the <see cref="P:System.Linq.Expressions.Expression.Type" /> property set to the specified type.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="fef91-1026">Выражение <see cref="T:System.Linq.Expressions.DefaultExpression" /> со свойством <see cref="P:System.Linq.Expressions.Expression.NodeType" />, равным <see cref="F:System.Linq.Expressions.ExpressionType.Default" />, и свойством <see cref="P:System.Linq.Expressions.Expression.Type" />, для которого задан указанный тип.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fef91-1026">A <see cref="T:System.Linq.Expressions.DefaultExpression" /> that has the <see cref="P:System.Linq.Expressions.Expression.NodeType" /> property equal to <see cref="F:System.Linq.Expressions.ExpressionType.Default" /> and the <see cref="P:System.Linq.Expressions.Expression.Type" /> property set to the specified type.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 <span data-ttu-id="fef91-1027">В следующем примере кода показано, как создать выражение, которое представляет значение по умолчанию для данного типа.</span><span class="sxs-lookup"><span data-stu-id="fef91-1027">The following code example shows how to create an expression that represents a default vaule for a given type.</span></span>  
  
 [!code-csharp[System.Linq.Expressions.ExpressionDev10#6](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.linq.expressions.expressiondev10/cs/program.cs#6)]
 [!code-vb[System.Linq.Expressions.ExpressionDev10#6](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.linq.expressions.expressiondev10/vb/module1.vb#6)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="Divide">
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="fef91-1028">Создает <see cref="T:System.Linq.Expressions.BinaryExpression" />, представляющий операцию арифметического деления.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fef91-1028">Creates a <see cref="T:System.Linq.Expressions.BinaryExpression" /> that represents an arithmetic division operation.</span>
          </span>
        </summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Divide">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.BinaryExpression Divide (System.Linq.Expressions.Expression left, System.Linq.Expressions.Expression right);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.BinaryExpression Divide(class System.Linq.Expressions.Expression left, class System.Linq.Expressions.Expression right) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.Divide(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Divide (left As Expression, right As Expression) As BinaryExpression" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Linq::Expressions::BinaryExpression ^ Divide(System::Linq::Expressions::Expression ^ left, System::Linq::Expressions::Expression ^ right);" />
      <MemberSignature Language="F#" Value="static member Divide : System.Linq.Expressions.Expression * System.Linq.Expressions.Expression -&gt; System.Linq.Expressions.BinaryExpression" Usage="System.Linq.Expressions.Expression.Divide (left, right)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.BinaryExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="left" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="right" Type="System.Linq.Expressions.Expression" />
      </Parameters>
      <Docs>
        <param name="left">
          <span data-ttu-id="fef91-1029">Объект <see cref="T:System.Linq.Expressions.Expression" />, который следует присвоить свойству <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fef91-1029">An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> property to.</span>
          </span>
        </param>
        <param name="right">
          <span data-ttu-id="fef91-1030">Объект <see cref="T:System.Linq.Expressions.Expression" />, который следует присвоить свойству <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fef91-1030">An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> property to.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="fef91-1031">Создает <see cref="T:System.Linq.Expressions.BinaryExpression" />, представляющий операцию арифметического деления.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fef91-1031">Creates a <see cref="T:System.Linq.Expressions.BinaryExpression" /> that represents an arithmetic division operation.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="fef91-1032">Выражение <see cref="T:System.Linq.Expressions.BinaryExpression" /> со свойством<see cref="P:System.Linq.Expressions.Expression.NodeType" />, равным <see cref="F:System.Linq.Expressions.ExpressionType.Divide" />, и свойствами <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> и <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />, для которых заданы указанные значения.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fef91-1032">A <see cref="T:System.Linq.Expressions.BinaryExpression" /> that has the <see cref="P:System.Linq.Expressions.Expression.NodeType" /> property equal to <see cref="F:System.Linq.Expressions.ExpressionType.Divide" /> and the <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> and <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> properties set to the specified values.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="fef91-1033">Полученный в результате <xref:System.Linq.Expressions.BinaryExpression> имеет <xref:System.Linq.Expressions.BinaryExpression.Method%2A> свойство присвоено метод реализации.</span><span class="sxs-lookup"><span data-stu-id="fef91-1033">The resulting <xref:System.Linq.Expressions.BinaryExpression> has the <xref:System.Linq.Expressions.BinaryExpression.Method%2A> property set to the implementing method.</span></span> <span data-ttu-id="fef91-1034"><xref:System.Linq.Expressions.Expression.Type%2A> Свойству присваивается тип узла.</span><span class="sxs-lookup"><span data-stu-id="fef91-1034">The <xref:System.Linq.Expressions.Expression.Type%2A> property is set to the type of the node.</span></span> <span data-ttu-id="fef91-1035">Если узел удаляется, <xref:System.Linq.Expressions.BinaryExpression.IsLifted%2A> и <xref:System.Linq.Expressions.BinaryExpression.IsLiftedToNull%2A> оба являются свойства `true`.</span><span class="sxs-lookup"><span data-stu-id="fef91-1035">If the node is lifted, the <xref:System.Linq.Expressions.BinaryExpression.IsLifted%2A> and <xref:System.Linq.Expressions.BinaryExpression.IsLiftedToNull%2A> properties are both `true`.</span></span> <span data-ttu-id="fef91-1036">В противном случае они `false`.</span><span class="sxs-lookup"><span data-stu-id="fef91-1036">Otherwise, they are `false`.</span></span> <span data-ttu-id="fef91-1037">Значение свойства <xref:System.Linq.Expressions.BinaryExpression.Conversion%2A> — `null`.</span><span class="sxs-lookup"><span data-stu-id="fef91-1037">The <xref:System.Linq.Expressions.BinaryExpression.Conversion%2A> property is `null`.</span></span>  
  
 <span data-ttu-id="fef91-1038">Ниже описывается метод реализации, тип узла и ликвидирован ли данный узел.</span><span class="sxs-lookup"><span data-stu-id="fef91-1038">The following information describes the implementing method, the node type, and whether a node is lifted.</span></span>  
  
#### <a name="implementing-method"></a><span data-ttu-id="fef91-1039">Реализация метода</span><span class="sxs-lookup"><span data-stu-id="fef91-1039">Implementing Method</span></span>  
 <span data-ttu-id="fef91-1040">Следующие правила определяют метод реализации для операции:</span><span class="sxs-lookup"><span data-stu-id="fef91-1040">The following rules determine the implementing method for the operation:</span></span>  
  
-   <span data-ttu-id="fef91-1041">Если <xref:System.Linq.Expressions.Expression.Type%2A> свойству `left` или `right` представляет определяемый пользователем тип, который перегружает оператор деления <xref:System.Reflection.MethodInfo> , представляющий, что метод является методом реализации.</span><span class="sxs-lookup"><span data-stu-id="fef91-1041">If the <xref:System.Linq.Expressions.Expression.Type%2A> property of either `left` or `right` represents a user-defined type that overloads the division operator, the <xref:System.Reflection.MethodInfo> that represents that method is the implementing method.</span></span>  
  
-   <span data-ttu-id="fef91-1042">В противном случае, если `left`. Тип и `right`. Тип: числовые типы, метод реализации является `null`.</span><span class="sxs-lookup"><span data-stu-id="fef91-1042">Otherwise, if `left`.Type and `right`.Type are numeric types, the implementing method is `null`.</span></span>  
  
#### <a name="node-type-and-lifted-versus-non-lifted"></a><span data-ttu-id="fef91-1043">Тип узла с ликвидацией или без</span><span class="sxs-lookup"><span data-stu-id="fef91-1043">Node Type and Lifted versus Non-Lifted</span></span>  
 <span data-ttu-id="fef91-1044">Если метод реализации не `null`:</span><span class="sxs-lookup"><span data-stu-id="fef91-1044">If the implementing method is not `null`:</span></span>  
  
-   <span data-ttu-id="fef91-1045">Если `left`. Тип и `right`. Тип могут быть присвоены соответствующие типы аргументов метода реализации, узел не удаляется.</span><span class="sxs-lookup"><span data-stu-id="fef91-1045">If `left`.Type and `right`.Type are assignable to the corresponding argument types of the implementing method, the node is not lifted.</span></span> <span data-ttu-id="fef91-1046">Тип узла — тип возвращаемого значения метода реализации.</span><span class="sxs-lookup"><span data-stu-id="fef91-1046">The type of the node is the return type of the implementing method.</span></span>  
  
-   <span data-ttu-id="fef91-1047">Если выполняются два следующих условия, узел удаляется, а тип узла — обнуляемый тип, соответствующий тип возвращаемого значения метода реализации:</span><span class="sxs-lookup"><span data-stu-id="fef91-1047">If the following two conditions are satisfied, the node is lifted and the type of the node is the nullable type that corresponds to the return type of the implementing method:</span></span>  
  
    -   <span data-ttu-id="fef91-1048">`left`. Тип и `right`. Тип: обоих типов значений, из которых хотя бы один допускает значения NULL и соответствующие типы, не допускающие значения null равны соответствующие типы аргументов метода реализации.</span><span class="sxs-lookup"><span data-stu-id="fef91-1048">`left`.Type and `right`.Type are both value types of which at least one is nullable and the corresponding non-nullable types are equal to the corresponding argument types of the implementing method.</span></span>  
  
    -   <span data-ttu-id="fef91-1049">Тип возвращаемого значения метода реализации является типом значения, не допускающие значения NULL.</span><span class="sxs-lookup"><span data-stu-id="fef91-1049">The return type of the implementing method is a non-nullable value type.</span></span>  
  
 <span data-ttu-id="fef91-1050">Если метод реализации `null`:</span><span class="sxs-lookup"><span data-stu-id="fef91-1050">If the implementing method is `null`:</span></span>  
  
-   <span data-ttu-id="fef91-1051">Если `left`. Тип и `right`. Тип: оба не поддерживающими значение NULL, узел не удаляется.</span><span class="sxs-lookup"><span data-stu-id="fef91-1051">If `left`.Type and `right`.Type are both non-nullable, the node is not lifted.</span></span> <span data-ttu-id="fef91-1052">Тип узла является типом результата определенного оператора деления.</span><span class="sxs-lookup"><span data-stu-id="fef91-1052">The type of the node is the result type of the predefined division operator.</span></span>  
  
-   <span data-ttu-id="fef91-1053">Если `left`. Тип и `right`. Тип: значение NULL, узел удаляется.</span><span class="sxs-lookup"><span data-stu-id="fef91-1053">If `left`.Type and `right`.Type are both nullable, the node is lifted.</span></span> <span data-ttu-id="fef91-1054">Тип узла — обнуляемый тип, соответствующий тип результата определенного оператора деления.</span><span class="sxs-lookup"><span data-stu-id="fef91-1054">The type of the node is the nullable type that corresponds to the result type of the predefined division operator.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="fef91-1055">В следующем примере кода показано, как создать выражение, которое делит разделяет первого аргумента, второго аргумента.</span><span class="sxs-lookup"><span data-stu-id="fef91-1055">The following code example shows how to create an expression that divides divides its first argument by its second argument.</span></span>  
  
 [!code-csharp[System.Linq.Expressions.ExpressionDev10#7](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.linq.expressions.expressiondev10/cs/program.cs#7)]
 [!code-vb[System.Linq.Expressions.ExpressionDev10#7](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.linq.expressions.expressiondev10/vb/module1.vb#7)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="fef91-1056">Значение параметра <paramref name="left" /> или <paramref name="right" /> — <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fef91-1056">
              <paramref name="left" /> or <paramref name="right" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.InvalidOperationException">
          <span data-ttu-id="fef91-1057">Оператор деления не определен для типов <paramref name="left" /> и <paramref name="right" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fef91-1057">The division operator is not defined for <paramref name="left" />.Type and <paramref name="right" />.Type.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="Divide">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.BinaryExpression Divide (System.Linq.Expressions.Expression left, System.Linq.Expressions.Expression right, System.Reflection.MethodInfo method);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.BinaryExpression Divide(class System.Linq.Expressions.Expression left, class System.Linq.Expressions.Expression right, class System.Reflection.MethodInfo method) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.Divide(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Divide (left As Expression, right As Expression, method As MethodInfo) As BinaryExpression" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Linq::Expressions::BinaryExpression ^ Divide(System::Linq::Expressions::Expression ^ left, System::Linq::Expressions::Expression ^ right, System::Reflection::MethodInfo ^ method);" />
      <MemberSignature Language="F#" Value="static member Divide : System.Linq.Expressions.Expression * System.Linq.Expressions.Expression * System.Reflection.MethodInfo -&gt; System.Linq.Expressions.BinaryExpression" Usage="System.Linq.Expressions.Expression.Divide (left, right, method)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.BinaryExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="left" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="right" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="method" Type="System.Reflection.MethodInfo" />
      </Parameters>
      <Docs>
        <param name="left">
          <span data-ttu-id="fef91-1058">Объект <see cref="T:System.Linq.Expressions.Expression" />, который следует задать в качестве значения свойства <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fef91-1058">An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> property equal to.</span>
          </span>
        </param>
        <param name="right">
          <span data-ttu-id="fef91-1059">Объект <see cref="T:System.Linq.Expressions.Expression" />, который следует задать в качестве значения свойства <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fef91-1059">An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> property equal to.</span>
          </span>
        </param>
        <param name="method">
          <span data-ttu-id="fef91-1060">Объект <see cref="T:System.Reflection.MethodInfo" />, который следует задать в качестве значения свойства <see cref="P:System.Linq.Expressions.BinaryExpression.Method" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fef91-1060">A <see cref="T:System.Reflection.MethodInfo" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Method" /> property equal to.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="fef91-1061">Создает <see cref="T:System.Linq.Expressions.BinaryExpression" />, представляющий операцию арифметического деления.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fef91-1061">Creates a <see cref="T:System.Linq.Expressions.BinaryExpression" /> that represents an arithmetic division operation.</span>
          </span>
          <span data-ttu-id="fef91-1062">Может быть указан метод реализации.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fef91-1062">The implementing method can be specified.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="fef91-1063">Выражение <see cref="T:System.Linq.Expressions.BinaryExpression" /> со свойством <see cref="P:System.Linq.Expressions.Expression.NodeType" />, равным <see cref="F:System.Linq.Expressions.ExpressionType.Divide" />, и свойствами <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />, <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> и <see cref="P:System.Linq.Expressions.BinaryExpression.Method" />, для которых заданы указанные значения.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fef91-1063">A <see cref="T:System.Linq.Expressions.BinaryExpression" /> that has the <see cref="P:System.Linq.Expressions.Expression.NodeType" /> property equal to <see cref="F:System.Linq.Expressions.ExpressionType.Divide" /> and the <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />, <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />, and <see cref="P:System.Linq.Expressions.BinaryExpression.Method" /> properties set to the specified values.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="fef91-1064">Полученный в результате <xref:System.Linq.Expressions.BinaryExpression> имеет <xref:System.Linq.Expressions.BinaryExpression.Method%2A> свойство присвоено метод реализации.</span><span class="sxs-lookup"><span data-stu-id="fef91-1064">The resulting <xref:System.Linq.Expressions.BinaryExpression> has the <xref:System.Linq.Expressions.BinaryExpression.Method%2A> property set to the implementing method.</span></span> <span data-ttu-id="fef91-1065"><xref:System.Linq.Expressions.Expression.Type%2A> Свойству присваивается тип узла.</span><span class="sxs-lookup"><span data-stu-id="fef91-1065">The <xref:System.Linq.Expressions.Expression.Type%2A> property is set to the type of the node.</span></span> <span data-ttu-id="fef91-1066">Если узел удаляется, <xref:System.Linq.Expressions.BinaryExpression.IsLifted%2A> и <xref:System.Linq.Expressions.BinaryExpression.IsLiftedToNull%2A> оба являются свойства `true`.</span><span class="sxs-lookup"><span data-stu-id="fef91-1066">If the node is lifted, the <xref:System.Linq.Expressions.BinaryExpression.IsLifted%2A> and <xref:System.Linq.Expressions.BinaryExpression.IsLiftedToNull%2A> properties are both `true`.</span></span> <span data-ttu-id="fef91-1067">В противном случае они `false`.</span><span class="sxs-lookup"><span data-stu-id="fef91-1067">Otherwise, they are `false`.</span></span> <span data-ttu-id="fef91-1068">Значение свойства <xref:System.Linq.Expressions.BinaryExpression.Conversion%2A> — `null`.</span><span class="sxs-lookup"><span data-stu-id="fef91-1068">The <xref:System.Linq.Expressions.BinaryExpression.Conversion%2A> property is `null`.</span></span>  
  
 <span data-ttu-id="fef91-1069">Ниже описывается метод реализации, тип узла и ликвидирован ли данный узел.</span><span class="sxs-lookup"><span data-stu-id="fef91-1069">The following information describes the implementing method, the node type, and whether a node is lifted.</span></span>  
  
#### <a name="implementing-method"></a><span data-ttu-id="fef91-1070">Реализация метода</span><span class="sxs-lookup"><span data-stu-id="fef91-1070">Implementing Method</span></span>  
 <span data-ttu-id="fef91-1071">Следующие правила определяют метод реализации для операции:</span><span class="sxs-lookup"><span data-stu-id="fef91-1071">The following rules determine the implementing method for the operation:</span></span>  
  
-   <span data-ttu-id="fef91-1072">Если `method` не `null` , и это отличный от void, `static` (`Shared` в Visual Basic) метода, принимающего два аргумента, это метод реализации для узла.</span><span class="sxs-lookup"><span data-stu-id="fef91-1072">If `method` is not `null` and it represents a non-void, `static` (`Shared` in Visual Basic) method that takes two arguments, it is the implementing method for the node.</span></span>  
  
-   <span data-ttu-id="fef91-1073">В противном случае, если <xref:System.Linq.Expressions.Expression.Type%2A> свойству `left` или `right` представляет определяемый пользователем тип, который перегружает оператор деления <xref:System.Reflection.MethodInfo> , представляющий, что метод является методом реализации.</span><span class="sxs-lookup"><span data-stu-id="fef91-1073">Otherwise, if the <xref:System.Linq.Expressions.Expression.Type%2A> property of either `left` or `right` represents a user-defined type that overloads the division operator, the <xref:System.Reflection.MethodInfo> that represents that method is the implementing method.</span></span>  
  
-   <span data-ttu-id="fef91-1074">В противном случае, если `left`. Тип и `right`. Тип: числовые типы, метод реализации является `null`.</span><span class="sxs-lookup"><span data-stu-id="fef91-1074">Otherwise, if `left`.Type and `right`.Type are numeric types, the implementing method is `null`.</span></span>  
  
#### <a name="node-type-and-lifted-versus-non-lifted"></a><span data-ttu-id="fef91-1075">Тип узла с ликвидацией или без</span><span class="sxs-lookup"><span data-stu-id="fef91-1075">Node Type and Lifted versus Non-Lifted</span></span>  
 <span data-ttu-id="fef91-1076">Если метод реализации не `null`:</span><span class="sxs-lookup"><span data-stu-id="fef91-1076">If the implementing method is not `null`:</span></span>  
  
-   <span data-ttu-id="fef91-1077">Если `left`. Тип и `right`. Тип могут быть присвоены соответствующие типы аргументов метода реализации, узел не удаляется.</span><span class="sxs-lookup"><span data-stu-id="fef91-1077">If `left`.Type and `right`.Type are assignable to the corresponding argument types of the implementing method, the node is not lifted.</span></span> <span data-ttu-id="fef91-1078">Тип узла — тип возвращаемого значения метода реализации.</span><span class="sxs-lookup"><span data-stu-id="fef91-1078">The type of the node is the return type of the implementing method.</span></span>  
  
-   <span data-ttu-id="fef91-1079">Если выполняются два следующих условия, узел удаляется, а тип узла — обнуляемый тип, соответствующий тип возвращаемого значения метода реализации:</span><span class="sxs-lookup"><span data-stu-id="fef91-1079">If the following two conditions are satisfied, the node is lifted and the type of the node is the nullable type that corresponds to the return type of the implementing method:</span></span>  
  
    -   <span data-ttu-id="fef91-1080">`left`. Тип и `right`. Тип: обоих типов значений, из которых хотя бы один допускает значения NULL и соответствующие типы, не допускающие значения null равны соответствующие типы аргументов метода реализации.</span><span class="sxs-lookup"><span data-stu-id="fef91-1080">`left`.Type and `right`.Type are both value types of which at least one is nullable and the corresponding non-nullable types are equal to the corresponding argument types of the implementing method.</span></span>  
  
    -   <span data-ttu-id="fef91-1081">Тип возвращаемого значения метода реализации является типом значения, не допускающие значения NULL.</span><span class="sxs-lookup"><span data-stu-id="fef91-1081">The return type of the implementing method is a non-nullable value type.</span></span>  
  
 <span data-ttu-id="fef91-1082">Если метод реализации `null`:</span><span class="sxs-lookup"><span data-stu-id="fef91-1082">If the implementing method is `null`:</span></span>  
  
-   <span data-ttu-id="fef91-1083">Если `left`. Тип и `right`. Тип: оба не поддерживающими значение NULL, узел не удаляется.</span><span class="sxs-lookup"><span data-stu-id="fef91-1083">If `left`.Type and `right`.Type are both non-nullable, the node is not lifted.</span></span> <span data-ttu-id="fef91-1084">Тип узла является типом результата определенного оператора деления.</span><span class="sxs-lookup"><span data-stu-id="fef91-1084">The type of the node is the result type of the predefined division operator.</span></span>  
  
-   <span data-ttu-id="fef91-1085">Если `left`. Тип и `right`. Тип: значение NULL, узел удаляется.</span><span class="sxs-lookup"><span data-stu-id="fef91-1085">If `left`.Type and `right`.Type are both nullable, the node is lifted.</span></span> <span data-ttu-id="fef91-1086">Тип узла — обнуляемый тип, соответствующий тип результата определенного оператора деления.</span><span class="sxs-lookup"><span data-stu-id="fef91-1086">The type of the node is the nullable type that corresponds to the result type of the predefined division operator.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="fef91-1087">Значение параметра <paramref name="left" /> или <paramref name="right" /> — <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fef91-1087">
              <paramref name="left" /> or <paramref name="right" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="fef91-1088">Значение параметра <paramref name="method" /> не равно <see langword="null" />, и метод, который оно представляет, возвращает <see langword="void" />, не является <see langword="static" /> (<see langword="Shared" /> в Visual Basic) и не принимает ровно два аргумента.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fef91-1088">
              <paramref name="method" /> is not <see langword="null" /> and the method it represents returns <see langword="void" />, is not <see langword="static" /> (<see langword="Shared" /> in Visual Basic), or does not take exactly two arguments.</span>
          </span>
        </exception>
        <exception cref="T:System.InvalidOperationException">
          <span data-ttu-id="fef91-1089">
            <paramref name="method" /> равен <see langword="null" />, и оператор деления не определен для типов <paramref name="left" />.Type и <paramref name="right" />.Type.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fef91-1089">
              <paramref name="method" /> is <see langword="null" /> and the division operator is not defined for <paramref name="left" />.Type and <paramref name="right" />.Type.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <MemberGroup MemberName="DivideAssign">
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="fef91-1090">Создает объект <see cref="T:System.Linq.Expressions.BinaryExpression" />, представляющий операцию присваивания деления, не содержащую проверку переполнения.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fef91-1090">Creates a <see cref="T:System.Linq.Expressions.BinaryExpression" /> that represents a division assignment operation that does not have overflow checking.</span>
          </span>
        </summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="DivideAssign">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.BinaryExpression DivideAssign (System.Linq.Expressions.Expression left, System.Linq.Expressions.Expression right);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.BinaryExpression DivideAssign(class System.Linq.Expressions.Expression left, class System.Linq.Expressions.Expression right) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.DivideAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function DivideAssign (left As Expression, right As Expression) As BinaryExpression" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Linq::Expressions::BinaryExpression ^ DivideAssign(System::Linq::Expressions::Expression ^ left, System::Linq::Expressions::Expression ^ right);" />
      <MemberSignature Language="F#" Value="static member DivideAssign : System.Linq.Expressions.Expression * System.Linq.Expressions.Expression -&gt; System.Linq.Expressions.BinaryExpression" Usage="System.Linq.Expressions.Expression.DivideAssign (left, right)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.BinaryExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="left" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="right" Type="System.Linq.Expressions.Expression" />
      </Parameters>
      <Docs>
        <param name="left">
          <span data-ttu-id="fef91-1091">Объект <see cref="T:System.Linq.Expressions.Expression" />, который следует задать в качестве значения свойства <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fef91-1091">An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> property equal to.</span>
          </span>
        </param>
        <param name="right">
          <span data-ttu-id="fef91-1092">Объект <see cref="T:System.Linq.Expressions.Expression" />, который следует задать в качестве значения свойства <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fef91-1092">An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> property equal to.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="fef91-1093">Создает объект <see cref="T:System.Linq.Expressions.BinaryExpression" />, представляющий операцию присваивания деления, не содержащую проверку переполнения.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fef91-1093">Creates a <see cref="T:System.Linq.Expressions.BinaryExpression" /> that represents a division assignment operation that does not have overflow checking.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="fef91-1094">Выражение <see cref="T:System.Linq.Expressions.BinaryExpression" /> со свойством<see cref="P:System.Linq.Expressions.Expression.NodeType" />, равным <see cref="F:System.Linq.Expressions.ExpressionType.DivideAssign" />, и свойствами <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> и <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />, для которых заданы указанные значения.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fef91-1094">A <see cref="T:System.Linq.Expressions.BinaryExpression" /> that has the <see cref="P:System.Linq.Expressions.Expression.NodeType" /> property equal to <see cref="F:System.Linq.Expressions.ExpressionType.DivideAssign" /> and the <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> and <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> properties set to the specified values.</span>
          </span>
        </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="DivideAssign">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.BinaryExpression DivideAssign (System.Linq.Expressions.Expression left, System.Linq.Expressions.Expression right, System.Reflection.MethodInfo method);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.BinaryExpression DivideAssign(class System.Linq.Expressions.Expression left, class System.Linq.Expressions.Expression right, class System.Reflection.MethodInfo method) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.DivideAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function DivideAssign (left As Expression, right As Expression, method As MethodInfo) As BinaryExpression" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Linq::Expressions::BinaryExpression ^ DivideAssign(System::Linq::Expressions::Expression ^ left, System::Linq::Expressions::Expression ^ right, System::Reflection::MethodInfo ^ method);" />
      <MemberSignature Language="F#" Value="static member DivideAssign : System.Linq.Expressions.Expression * System.Linq.Expressions.Expression * System.Reflection.MethodInfo -&gt; System.Linq.Expressions.BinaryExpression" Usage="System.Linq.Expressions.Expression.DivideAssign (left, right, method)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.BinaryExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="left" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="right" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="method" Type="System.Reflection.MethodInfo" />
      </Parameters>
      <Docs>
        <param name="left">
          <span data-ttu-id="fef91-1095">Объект <see cref="T:System.Linq.Expressions.Expression" />, который следует задать в качестве значения свойства <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fef91-1095">An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> property equal to.</span>
          </span>
        </param>
        <param name="right">
          <span data-ttu-id="fef91-1096">Объект <see cref="T:System.Linq.Expressions.Expression" />, который следует задать в качестве значения свойства <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fef91-1096">An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> property equal to.</span>
          </span>
        </param>
        <param name="method">
          <span data-ttu-id="fef91-1097">Объект <see cref="T:System.Reflection.MethodInfo" />, который следует задать в качестве значения свойства <see cref="P:System.Linq.Expressions.BinaryExpression.Method" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fef91-1097">A <see cref="T:System.Reflection.MethodInfo" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Method" /> property equal to.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="fef91-1098">Создает объект <see cref="T:System.Linq.Expressions.BinaryExpression" />, представляющий операцию присваивания деления, не содержащую проверку переполнения.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fef91-1098">Creates a <see cref="T:System.Linq.Expressions.BinaryExpression" /> that represents a division assignment operation that does not have overflow checking.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="fef91-1099">Выражение <see cref="T:System.Linq.Expressions.BinaryExpression" /> со свойством <see cref="P:System.Linq.Expressions.Expression.NodeType" />, равным <see cref="F:System.Linq.Expressions.ExpressionType.DivideAssign" />, и свойствами <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />, <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> и <see cref="P:System.Linq.Expressions.BinaryExpression.Method" />, для которых заданы указанные значения.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fef91-1099">A <see cref="T:System.Linq.Expressions.BinaryExpression" /> that has the <see cref="P:System.Linq.Expressions.Expression.NodeType" /> property equal to <see cref="F:System.Linq.Expressions.ExpressionType.DivideAssign" /> and the <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />, <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />, and <see cref="P:System.Linq.Expressions.BinaryExpression.Method" /> properties set to the specified values.</span>
          </span>
        </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="DivideAssign">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.BinaryExpression DivideAssign (System.Linq.Expressions.Expression left, System.Linq.Expressions.Expression right, System.Reflection.MethodInfo method, System.Linq.Expressions.LambdaExpression conversion);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.BinaryExpression DivideAssign(class System.Linq.Expressions.Expression left, class System.Linq.Expressions.Expression right, class System.Reflection.MethodInfo method, class System.Linq.Expressions.LambdaExpression conversion) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.DivideAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo,System.Linq.Expressions.LambdaExpression)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function DivideAssign (left As Expression, right As Expression, method As MethodInfo, conversion As LambdaExpression) As BinaryExpression" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Linq::Expressions::BinaryExpression ^ DivideAssign(System::Linq::Expressions::Expression ^ left, System::Linq::Expressions::Expression ^ right, System::Reflection::MethodInfo ^ method, System::Linq::Expressions::LambdaExpression ^ conversion);" />
      <MemberSignature Language="F#" Value="static member DivideAssign : System.Linq.Expressions.Expression * System.Linq.Expressions.Expression * System.Reflection.MethodInfo * System.Linq.Expressions.LambdaExpression -&gt; System.Linq.Expressions.BinaryExpression" Usage="System.Linq.Expressions.Expression.DivideAssign (left, right, method, conversion)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.BinaryExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="left" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="right" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="method" Type="System.Reflection.MethodInfo" />
        <Parameter Name="conversion" Type="System.Linq.Expressions.LambdaExpression" />
      </Parameters>
      <Docs>
        <param name="left">
          <span data-ttu-id="fef91-1100">Объект <see cref="T:System.Linq.Expressions.Expression" />, который следует задать в качестве значения свойства <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fef91-1100">An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> property equal to.</span>
          </span>
        </param>
        <param name="right">
          <span data-ttu-id="fef91-1101">Объект <see cref="T:System.Linq.Expressions.Expression" />, который следует задать в качестве значения свойства <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fef91-1101">An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> property equal to.</span>
          </span>
        </param>
        <param name="method">
          <span data-ttu-id="fef91-1102">Объект <see cref="T:System.Reflection.MethodInfo" />, который следует задать в качестве значения свойства <see cref="P:System.Linq.Expressions.BinaryExpression.Method" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fef91-1102">A <see cref="T:System.Reflection.MethodInfo" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Method" /> property equal to.</span>
          </span>
        </param>
        <param name="conversion">
          <span data-ttu-id="fef91-1103">Объект <see cref="T:System.Linq.Expressions.LambdaExpression" />, который следует задать в качестве значения свойства <see cref="P:System.Linq.Expressions.BinaryExpression.Conversion" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fef91-1103">A <see cref="T:System.Linq.Expressions.LambdaExpression" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Conversion" /> property equal to.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="fef91-1104">Создает объект <see cref="T:System.Linq.Expressions.BinaryExpression" />, представляющий операцию присваивания деления, не содержащую проверку переполнения.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fef91-1104">Creates a <see cref="T:System.Linq.Expressions.BinaryExpression" /> that represents a division assignment operation that does not have overflow checking.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="fef91-1105">Выражение <see cref="T:System.Linq.Expressions.BinaryExpression" />, содержащее свойство <see cref="P:System.Linq.Expressions.Expression.NodeType" />, равное <see cref="F:System.Linq.Expressions.ExpressionType.DivideAssign" /> и <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />, <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />, <see cref="P:System.Linq.Expressions.BinaryExpression.Method" />, и свойства <see cref="P:System.Linq.Expressions.BinaryExpression.Conversion" />, для которых заданы указанные значения.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fef91-1105">A <see cref="T:System.Linq.Expressions.BinaryExpression" /> that has the <see cref="P:System.Linq.Expressions.Expression.NodeType" /> property equal to <see cref="F:System.Linq.Expressions.ExpressionType.DivideAssign" /> and the <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />, <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />, <see cref="P:System.Linq.Expressions.BinaryExpression.Method" />, and <see cref="P:System.Linq.Expressions.BinaryExpression.Conversion" /> properties set to the specified values.</span>
          </span>
        </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="Dynamic">
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="fef91-1106">Создает объект <see cref="T:System.Linq.Expressions.DynamicExpression" />, представляющий динамическую операцию.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fef91-1106">Creates a <see cref="T:System.Linq.Expressions.DynamicExpression" /> that represents a dynamic operation.</span>
          </span>
        </summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Dynamic">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.DynamicExpression Dynamic (System.Runtime.CompilerServices.CallSiteBinder binder, Type returnType, System.Collections.Generic.IEnumerable&lt;System.Linq.Expressions.Expression&gt; arguments);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.DynamicExpression Dynamic(class System.Runtime.CompilerServices.CallSiteBinder binder, class System.Type returnType, class System.Collections.Generic.IEnumerable`1&lt;class System.Linq.Expressions.Expression&gt; arguments) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.Dynamic(System.Runtime.CompilerServices.CallSiteBinder,System.Type,System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression})" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Dynamic (binder As CallSiteBinder, returnType As Type, arguments As IEnumerable(Of Expression)) As DynamicExpression" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Linq::Expressions::DynamicExpression ^ Dynamic(System::Runtime::CompilerServices::CallSiteBinder ^ binder, Type ^ returnType, System::Collections::Generic::IEnumerable&lt;System::Linq::Expressions::Expression ^&gt; ^ arguments);" />
      <MemberSignature Language="F#" Value="static member Dynamic : System.Runtime.CompilerServices.CallSiteBinder * Type * seq&lt;System.Linq.Expressions.Expression&gt; -&gt; System.Linq.Expressions.DynamicExpression" Usage="System.Linq.Expressions.Expression.Dynamic (binder, returnType, arguments)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.DynamicExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="binder" Type="System.Runtime.CompilerServices.CallSiteBinder" />
        <Parameter Name="returnType" Type="System.Type" />
        <Parameter Name="arguments" Type="System.Collections.Generic.IEnumerable&lt;System.Linq.Expressions.Expression&gt;" />
      </Parameters>
      <Docs>
        <param name="binder">
          <span data-ttu-id="fef91-1107">Связыватель времени выполнения для динамической операции.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fef91-1107">The runtime binder for the dynamic operation.</span>
          </span>
        </param>
        <param name="returnType">
          <span data-ttu-id="fef91-1108">Тип результата динамического выражения.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fef91-1108">The result type of the dynamic expression.</span>
          </span>
        </param>
        <param name="arguments">
          <span data-ttu-id="fef91-1109">Аргументы динамической операции.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fef91-1109">The arguments to the dynamic operation.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="fef91-1110">Создает выражение <see cref="T:System.Linq.Expressions.DynamicExpression" />, которое представляет динамическую операцию, привязанную с использованием указанного объекта <see cref="T:System.Runtime.CompilerServices.CallSiteBinder" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fef91-1110">Creates a <see cref="T:System.Linq.Expressions.DynamicExpression" /> that represents a dynamic operation bound by the provided <see cref="T:System.Runtime.CompilerServices.CallSiteBinder" />.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="fef91-1111">Выражение <see cref="T:System.Linq.Expressions.DynamicExpression" />, у которого свойство <see cref="P:System.Linq.Expressions.Expression.NodeType" /> равняется <see cref="F:System.Linq.Expressions.ExpressionType.Dynamic" />, а для свойств <see cref="P:System.Linq.Expressions.DynamicExpression.Binder" /> и <see cref="P:System.Linq.Expressions.DynamicExpression.Arguments" /> заданы указанные значения.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fef91-1111">A <see cref="T:System.Linq.Expressions.DynamicExpression" /> that has <see cref="P:System.Linq.Expressions.Expression.NodeType" /> equal to <see cref="F:System.Linq.Expressions.ExpressionType.Dynamic" /> and has the <see cref="P:System.Linq.Expressions.DynamicExpression.Binder" /> and <see cref="P:System.Linq.Expressions.DynamicExpression.Arguments" /> set to the specified values.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="fef91-1112"><xref:System.Linq.Expressions.DynamicExpression.DelegateType%2A> Свойства результата будет выведен из типов аргументов и указанным типом возвращаемого значения.</span><span class="sxs-lookup"><span data-stu-id="fef91-1112">The <xref:System.Linq.Expressions.DynamicExpression.DelegateType%2A> property of the result will be inferred from the types of the arguments and the specified return type.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Dynamic">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.DynamicExpression Dynamic (System.Runtime.CompilerServices.CallSiteBinder binder, Type returnType, System.Linq.Expressions.Expression arg0);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.DynamicExpression Dynamic(class System.Runtime.CompilerServices.CallSiteBinder binder, class System.Type returnType, class System.Linq.Expressions.Expression arg0) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.Dynamic(System.Runtime.CompilerServices.CallSiteBinder,System.Type,System.Linq.Expressions.Expression)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Dynamic (binder As CallSiteBinder, returnType As Type, arg0 As Expression) As DynamicExpression" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Linq::Expressions::DynamicExpression ^ Dynamic(System::Runtime::CompilerServices::CallSiteBinder ^ binder, Type ^ returnType, System::Linq::Expressions::Expression ^ arg0);" />
      <MemberSignature Language="F#" Value="static member Dynamic : System.Runtime.CompilerServices.CallSiteBinder * Type * System.Linq.Expressions.Expression -&gt; System.Linq.Expressions.DynamicExpression" Usage="System.Linq.Expressions.Expression.Dynamic (binder, returnType, arg0)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.DynamicExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="binder" Type="System.Runtime.CompilerServices.CallSiteBinder" />
        <Parameter Name="returnType" Type="System.Type" />
        <Parameter Name="arg0" Type="System.Linq.Expressions.Expression" />
      </Parameters>
      <Docs>
        <param name="binder">
          <span data-ttu-id="fef91-1113">Связыватель времени выполнения для динамической операции.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fef91-1113">The runtime binder for the dynamic operation.</span>
          </span>
        </param>
        <param name="returnType">
          <span data-ttu-id="fef91-1114">Тип результата динамического выражения.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fef91-1114">The result type of the dynamic expression.</span>
          </span>
        </param>
        <param name="arg0">
          <span data-ttu-id="fef91-1115">Первый аргумент динамической операции.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fef91-1115">The first argument to the dynamic operation.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="fef91-1116">Создает выражение <see cref="T:System.Linq.Expressions.DynamicExpression" />, которое представляет динамическую операцию, привязанную с использованием указанного объекта <see cref="T:System.Runtime.CompilerServices.CallSiteBinder" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fef91-1116">Creates a <see cref="T:System.Linq.Expressions.DynamicExpression" /> that represents a dynamic operation bound by the provided <see cref="T:System.Runtime.CompilerServices.CallSiteBinder" />.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="fef91-1117">Выражение <see cref="T:System.Linq.Expressions.DynamicExpression" />, у которого свойство <see cref="P:System.Linq.Expressions.Expression.NodeType" /> равняется <see cref="F:System.Linq.Expressions.ExpressionType.Dynamic" />, а для свойств <see cref="P:System.Linq.Expressions.DynamicExpression.Binder" /> и <see cref="P:System.Linq.Expressions.DynamicExpression.Arguments" /> заданы указанные значения.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fef91-1117">A <see cref="T:System.Linq.Expressions.DynamicExpression" /> that has <see cref="P:System.Linq.Expressions.Expression.NodeType" /> equal to <see cref="F:System.Linq.Expressions.ExpressionType.Dynamic" /> and has the <see cref="P:System.Linq.Expressions.DynamicExpression.Binder" /> and <see cref="P:System.Linq.Expressions.DynamicExpression.Arguments" /> set to the specified values.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="fef91-1118"><xref:System.Linq.Expressions.DynamicExpression.DelegateType%2A> Свойства результата будет выведен из типов аргументов и указанным типом возвращаемого значения.</span><span class="sxs-lookup"><span data-stu-id="fef91-1118">The <xref:System.Linq.Expressions.DynamicExpression.DelegateType%2A> property of the result will be inferred from the types of the arguments and the specified return type.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Dynamic">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.DynamicExpression Dynamic (System.Runtime.CompilerServices.CallSiteBinder binder, Type returnType, params System.Linq.Expressions.Expression[] arguments);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.DynamicExpression Dynamic(class System.Runtime.CompilerServices.CallSiteBinder binder, class System.Type returnType, class System.Linq.Expressions.Expression[] arguments) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.Dynamic(System.Runtime.CompilerServices.CallSiteBinder,System.Type,System.Linq.Expressions.Expression[])" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Dynamic (binder As CallSiteBinder, returnType As Type, ParamArray arguments As Expression()) As DynamicExpression" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Linq::Expressions::DynamicExpression ^ Dynamic(System::Runtime::CompilerServices::CallSiteBinder ^ binder, Type ^ returnType, ... cli::array &lt;System::Linq::Expressions::Expression ^&gt; ^ arguments);" />
      <MemberSignature Language="F#" Value="static member Dynamic : System.Runtime.CompilerServices.CallSiteBinder * Type * System.Linq.Expressions.Expression[] -&gt; System.Linq.Expressions.DynamicExpression" Usage="System.Linq.Expressions.Expression.Dynamic (binder, returnType, arguments)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.DynamicExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="binder" Type="System.Runtime.CompilerServices.CallSiteBinder" />
        <Parameter Name="returnType" Type="System.Type" />
        <Parameter Name="arguments" Type="System.Linq.Expressions.Expression[]">
          <Attributes>
            <Attribute>
              <AttributeName>System.ParamArray</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="binder">
          <span data-ttu-id="fef91-1119">Связыватель времени выполнения для динамической операции.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fef91-1119">The runtime binder for the dynamic operation.</span>
          </span>
        </param>
        <param name="returnType">
          <span data-ttu-id="fef91-1120">Тип результата динамического выражения.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fef91-1120">The result type of the dynamic expression.</span>
          </span>
        </param>
        <param name="arguments">
          <span data-ttu-id="fef91-1121">Аргументы динамической операции.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fef91-1121">The arguments to the dynamic operation.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="fef91-1122">Создает выражение <see cref="T:System.Linq.Expressions.DynamicExpression" />, которое представляет динамическую операцию, привязанную с использованием указанного объекта <see cref="T:System.Runtime.CompilerServices.CallSiteBinder" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fef91-1122">Creates a <see cref="T:System.Linq.Expressions.DynamicExpression" /> that represents a dynamic operation bound by the provided <see cref="T:System.Runtime.CompilerServices.CallSiteBinder" />.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="fef91-1123">Выражение <see cref="T:System.Linq.Expressions.DynamicExpression" />, у которого свойство <see cref="P:System.Linq.Expressions.Expression.NodeType" /> равняется <see cref="F:System.Linq.Expressions.ExpressionType.Dynamic" />, а для свойств <see cref="P:System.Linq.Expressions.DynamicExpression.Binder" /> и <see cref="P:System.Linq.Expressions.DynamicExpression.Arguments" /> заданы указанные значения.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fef91-1123">A <see cref="T:System.Linq.Expressions.DynamicExpression" /> that has <see cref="P:System.Linq.Expressions.Expression.NodeType" /> equal to <see cref="F:System.Linq.Expressions.ExpressionType.Dynamic" /> and has the <see cref="P:System.Linq.Expressions.DynamicExpression.Binder" /> and <see cref="P:System.Linq.Expressions.DynamicExpression.Arguments" /> set to the specified values.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="fef91-1124"><xref:System.Linq.Expressions.DynamicExpression.DelegateType%2A> Свойства результата будет выведен из типов аргументов и указанным типом возвращаемого значения.</span><span class="sxs-lookup"><span data-stu-id="fef91-1124">The <xref:System.Linq.Expressions.DynamicExpression.DelegateType%2A> property of the result will be inferred from the types of the arguments and the specified return type.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Dynamic">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.DynamicExpression Dynamic (System.Runtime.CompilerServices.CallSiteBinder binder, Type returnType, System.Linq.Expressions.Expression arg0, System.Linq.Expressions.Expression arg1);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.DynamicExpression Dynamic(class System.Runtime.CompilerServices.CallSiteBinder binder, class System.Type returnType, class System.Linq.Expressions.Expression arg0, class System.Linq.Expressions.Expression arg1) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.Dynamic(System.Runtime.CompilerServices.CallSiteBinder,System.Type,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Dynamic (binder As CallSiteBinder, returnType As Type, arg0 As Expression, arg1 As Expression) As DynamicExpression" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Linq::Expressions::DynamicExpression ^ Dynamic(System::Runtime::CompilerServices::CallSiteBinder ^ binder, Type ^ returnType, System::Linq::Expressions::Expression ^ arg0, System::Linq::Expressions::Expression ^ arg1);" />
      <MemberSignature Language="F#" Value="static member Dynamic : System.Runtime.CompilerServices.CallSiteBinder * Type * System.Linq.Expressions.Expression * System.Linq.Expressions.Expression -&gt; System.Linq.Expressions.DynamicExpression" Usage="System.Linq.Expressions.Expression.Dynamic (binder, returnType, arg0, arg1)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.DynamicExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="binder" Type="System.Runtime.CompilerServices.CallSiteBinder" />
        <Parameter Name="returnType" Type="System.Type" />
        <Parameter Name="arg0" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="arg1" Type="System.Linq.Expressions.Expression" />
      </Parameters>
      <Docs>
        <param name="binder">
          <span data-ttu-id="fef91-1125">Связыватель времени выполнения для динамической операции.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fef91-1125">The runtime binder for the dynamic operation.</span>
          </span>
        </param>
        <param name="returnType">
          <span data-ttu-id="fef91-1126">Тип результата динамического выражения.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fef91-1126">The result type of the dynamic expression.</span>
          </span>
        </param>
        <param name="arg0">
          <span data-ttu-id="fef91-1127">Первый аргумент динамической операции.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fef91-1127">The first argument to the dynamic operation.</span>
          </span>
        </param>
        <param name="arg1">
          <span data-ttu-id="fef91-1128">Второй аргумент динамической операции.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fef91-1128">The second argument to the dynamic operation.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="fef91-1129">Создает выражение <see cref="T:System.Linq.Expressions.DynamicExpression" />, которое представляет динамическую операцию, привязанную с использованием указанного объекта <see cref="T:System.Runtime.CompilerServices.CallSiteBinder" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fef91-1129">Creates a <see cref="T:System.Linq.Expressions.DynamicExpression" /> that represents a dynamic operation bound by the provided <see cref="T:System.Runtime.CompilerServices.CallSiteBinder" />.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="fef91-1130">Выражение <see cref="T:System.Linq.Expressions.DynamicExpression" />, у которого свойство <see cref="P:System.Linq.Expressions.Expression.NodeType" /> равняется <see cref="F:System.Linq.Expressions.ExpressionType.Dynamic" />, а для свойств <see cref="P:System.Linq.Expressions.DynamicExpression.Binder" /> и <see cref="P:System.Linq.Expressions.DynamicExpression.Arguments" /> заданы указанные значения.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fef91-1130">A <see cref="T:System.Linq.Expressions.DynamicExpression" /> that has <see cref="P:System.Linq.Expressions.Expression.NodeType" /> equal to <see cref="F:System.Linq.Expressions.ExpressionType.Dynamic" /> and has the <see cref="P:System.Linq.Expressions.DynamicExpression.Binder" /> and <see cref="P:System.Linq.Expressions.DynamicExpression.Arguments" /> set to the specified values.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="fef91-1131"><xref:System.Linq.Expressions.DynamicExpression.DelegateType%2A> Свойства результата будет выведен из типов аргументов и указанным типом возвращаемого значения.</span><span class="sxs-lookup"><span data-stu-id="fef91-1131">The <xref:System.Linq.Expressions.DynamicExpression.DelegateType%2A> property of the result will be inferred from the types of the arguments and the specified return type.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Dynamic">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.DynamicExpression Dynamic (System.Runtime.CompilerServices.CallSiteBinder binder, Type returnType, System.Linq.Expressions.Expression arg0, System.Linq.Expressions.Expression arg1, System.Linq.Expressions.Expression arg2);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.DynamicExpression Dynamic(class System.Runtime.CompilerServices.CallSiteBinder binder, class System.Type returnType, class System.Linq.Expressions.Expression arg0, class System.Linq.Expressions.Expression arg1, class System.Linq.Expressions.Expression arg2) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.Dynamic(System.Runtime.CompilerServices.CallSiteBinder,System.Type,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Dynamic (binder As CallSiteBinder, returnType As Type, arg0 As Expression, arg1 As Expression, arg2 As Expression) As DynamicExpression" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Linq::Expressions::DynamicExpression ^ Dynamic(System::Runtime::CompilerServices::CallSiteBinder ^ binder, Type ^ returnType, System::Linq::Expressions::Expression ^ arg0, System::Linq::Expressions::Expression ^ arg1, System::Linq::Expressions::Expression ^ arg2);" />
      <MemberSignature Language="F#" Value="static member Dynamic : System.Runtime.CompilerServices.CallSiteBinder * Type * System.Linq.Expressions.Expression * System.Linq.Expressions.Expression * System.Linq.Expressions.Expression -&gt; System.Linq.Expressions.DynamicExpression" Usage="System.Linq.Expressions.Expression.Dynamic (binder, returnType, arg0, arg1, arg2)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.DynamicExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="binder" Type="System.Runtime.CompilerServices.CallSiteBinder" />
        <Parameter Name="returnType" Type="System.Type" />
        <Parameter Name="arg0" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="arg1" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="arg2" Type="System.Linq.Expressions.Expression" />
      </Parameters>
      <Docs>
        <param name="binder">
          <span data-ttu-id="fef91-1132">Связыватель времени выполнения для динамической операции.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fef91-1132">The runtime binder for the dynamic operation.</span>
          </span>
        </param>
        <param name="returnType">
          <span data-ttu-id="fef91-1133">Тип результата динамического выражения.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fef91-1133">The result type of the dynamic expression.</span>
          </span>
        </param>
        <param name="arg0">
          <span data-ttu-id="fef91-1134">Первый аргумент динамической операции.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fef91-1134">The first argument to the dynamic operation.</span>
          </span>
        </param>
        <param name="arg1">
          <span data-ttu-id="fef91-1135">Второй аргумент динамической операции.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fef91-1135">The second argument to the dynamic operation.</span>
          </span>
        </param>
        <param name="arg2">
          <span data-ttu-id="fef91-1136">Третий аргумент динамической операции.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fef91-1136">The third argument to the dynamic operation.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="fef91-1137">Создает выражение <see cref="T:System.Linq.Expressions.DynamicExpression" />, которое представляет динамическую операцию, привязанную с использованием указанного объекта <see cref="T:System.Runtime.CompilerServices.CallSiteBinder" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fef91-1137">Creates a <see cref="T:System.Linq.Expressions.DynamicExpression" /> that represents a dynamic operation bound by the provided <see cref="T:System.Runtime.CompilerServices.CallSiteBinder" />.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="fef91-1138">Выражение <see cref="T:System.Linq.Expressions.DynamicExpression" />, у которого свойство <see cref="P:System.Linq.Expressions.Expression.NodeType" /> равняется <see cref="F:System.Linq.Expressions.ExpressionType.Dynamic" />, а для свойств <see cref="P:System.Linq.Expressions.DynamicExpression.Binder" /> и <see cref="P:System.Linq.Expressions.DynamicExpression.Arguments" /> заданы указанные значения.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fef91-1138">A <see cref="T:System.Linq.Expressions.DynamicExpression" /> that has <see cref="P:System.Linq.Expressions.Expression.NodeType" /> equal to <see cref="F:System.Linq.Expressions.ExpressionType.Dynamic" /> and has the <see cref="P:System.Linq.Expressions.DynamicExpression.Binder" /> and <see cref="P:System.Linq.Expressions.DynamicExpression.Arguments" /> set to the specified values.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="fef91-1139"><xref:System.Linq.Expressions.DynamicExpression.DelegateType%2A> Свойства результата будет выведен из типов аргументов и указанным типом возвращаемого значения.</span><span class="sxs-lookup"><span data-stu-id="fef91-1139">The <xref:System.Linq.Expressions.DynamicExpression.DelegateType%2A> property of the result will be inferred from the types of the arguments and the specified return type.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Dynamic">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.DynamicExpression Dynamic (System.Runtime.CompilerServices.CallSiteBinder binder, Type returnType, System.Linq.Expressions.Expression arg0, System.Linq.Expressions.Expression arg1, System.Linq.Expressions.Expression arg2, System.Linq.Expressions.Expression arg3);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.DynamicExpression Dynamic(class System.Runtime.CompilerServices.CallSiteBinder binder, class System.Type returnType, class System.Linq.Expressions.Expression arg0, class System.Linq.Expressions.Expression arg1, class System.Linq.Expressions.Expression arg2, class System.Linq.Expressions.Expression arg3) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.Dynamic(System.Runtime.CompilerServices.CallSiteBinder,System.Type,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Dynamic (binder As CallSiteBinder, returnType As Type, arg0 As Expression, arg1 As Expression, arg2 As Expression, arg3 As Expression) As DynamicExpression" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Linq::Expressions::DynamicExpression ^ Dynamic(System::Runtime::CompilerServices::CallSiteBinder ^ binder, Type ^ returnType, System::Linq::Expressions::Expression ^ arg0, System::Linq::Expressions::Expression ^ arg1, System::Linq::Expressions::Expression ^ arg2, System::Linq::Expressions::Expression ^ arg3);" />
      <MemberSignature Language="F#" Value="static member Dynamic : System.Runtime.CompilerServices.CallSiteBinder * Type * System.Linq.Expressions.Expression * System.Linq.Expressions.Expression * System.Linq.Expressions.Expression * System.Linq.Expressions.Expression -&gt; System.Linq.Expressions.DynamicExpression" Usage="System.Linq.Expressions.Expression.Dynamic (binder, returnType, arg0, arg1, arg2, arg3)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.DynamicExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="binder" Type="System.Runtime.CompilerServices.CallSiteBinder" />
        <Parameter Name="returnType" Type="System.Type" />
        <Parameter Name="arg0" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="arg1" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="arg2" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="arg3" Type="System.Linq.Expressions.Expression" />
      </Parameters>
      <Docs>
        <param name="binder">
          <span data-ttu-id="fef91-1140">Связыватель времени выполнения для динамической операции.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fef91-1140">The runtime binder for the dynamic operation.</span>
          </span>
        </param>
        <param name="returnType">
          <span data-ttu-id="fef91-1141">Тип результата динамического выражения.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fef91-1141">The result type of the dynamic expression.</span>
          </span>
        </param>
        <param name="arg0">
          <span data-ttu-id="fef91-1142">Первый аргумент динамической операции.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fef91-1142">The first argument to the dynamic operation.</span>
          </span>
        </param>
        <param name="arg1">
          <span data-ttu-id="fef91-1143">Второй аргумент динамической операции.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fef91-1143">The second argument to the dynamic operation.</span>
          </span>
        </param>
        <param name="arg2">
          <span data-ttu-id="fef91-1144">Третий аргумент динамической операции.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fef91-1144">The third argument to the dynamic operation.</span>
          </span>
        </param>
        <param name="arg3">
          <span data-ttu-id="fef91-1145">Четвертый аргумент динамической операции.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fef91-1145">The fourth argument to the dynamic operation.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="fef91-1146">Создает выражение <see cref="T:System.Linq.Expressions.DynamicExpression" />, которое представляет динамическую операцию, привязанную с использованием указанного объекта <see cref="T:System.Runtime.CompilerServices.CallSiteBinder" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fef91-1146">Creates a <see cref="T:System.Linq.Expressions.DynamicExpression" /> that represents a dynamic operation bound by the provided <see cref="T:System.Runtime.CompilerServices.CallSiteBinder" />.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="fef91-1147">Выражение <see cref="T:System.Linq.Expressions.DynamicExpression" />, у которого свойство <see cref="P:System.Linq.Expressions.Expression.NodeType" /> равняется <see cref="F:System.Linq.Expressions.ExpressionType.Dynamic" />, а для свойств <see cref="P:System.Linq.Expressions.DynamicExpression.Binder" /> и <see cref="P:System.Linq.Expressions.DynamicExpression.Arguments" /> заданы указанные значения.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fef91-1147">A <see cref="T:System.Linq.Expressions.DynamicExpression" /> that has <see cref="P:System.Linq.Expressions.Expression.NodeType" /> equal to <see cref="F:System.Linq.Expressions.ExpressionType.Dynamic" /> and has the <see cref="P:System.Linq.Expressions.DynamicExpression.Binder" /> and <see cref="P:System.Linq.Expressions.DynamicExpression.Arguments" /> set to the specified values.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="fef91-1148"><xref:System.Linq.Expressions.DynamicExpression.DelegateType%2A> Свойства результата будет выведен из типов аргументов и указанным типом возвращаемого значения.</span><span class="sxs-lookup"><span data-stu-id="fef91-1148">The <xref:System.Linq.Expressions.DynamicExpression.DelegateType%2A> property of the result will be inferred from the types of the arguments and the specified return type.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="ElementInit">
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="fef91-1149">Создает объект <see cref="T:System.Linq.Expressions.ElementInit" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fef91-1149">Creates an <see cref="T:System.Linq.Expressions.ElementInit" />.</span>
          </span>
        </summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="ElementInit">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.ElementInit ElementInit (System.Reflection.MethodInfo addMethod, System.Collections.Generic.IEnumerable&lt;System.Linq.Expressions.Expression&gt; arguments);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.ElementInit ElementInit(class System.Reflection.MethodInfo addMethod, class System.Collections.Generic.IEnumerable`1&lt;class System.Linq.Expressions.Expression&gt; arguments) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.ElementInit(System.Reflection.MethodInfo,System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression})" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function ElementInit (addMethod As MethodInfo, arguments As IEnumerable(Of Expression)) As ElementInit" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Linq::Expressions::ElementInit ^ ElementInit(System::Reflection::MethodInfo ^ addMethod, System::Collections::Generic::IEnumerable&lt;System::Linq::Expressions::Expression ^&gt; ^ arguments);" />
      <MemberSignature Language="F#" Value="static member ElementInit : System.Reflection.MethodInfo * seq&lt;System.Linq.Expressions.Expression&gt; -&gt; System.Linq.Expressions.ElementInit" Usage="System.Linq.Expressions.Expression.ElementInit (addMethod, arguments)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.ElementInit</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="addMethod" Type="System.Reflection.MethodInfo" />
        <Parameter Name="arguments" Type="System.Collections.Generic.IEnumerable&lt;System.Linq.Expressions.Expression&gt;" />
      </Parameters>
      <Docs>
        <param name="addMethod">
          <span data-ttu-id="fef91-1150">Объект <see cref="T:System.Reflection.MethodInfo" />, который следует задать в качестве значения свойства <see cref="P:System.Linq.Expressions.ElementInit.AddMethod" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fef91-1150">A <see cref="T:System.Reflection.MethodInfo" /> to set the <see cref="P:System.Linq.Expressions.ElementInit.AddMethod" /> property equal to.</span>
          </span>
        </param>
        <param name="arguments">
          <span data-ttu-id="fef91-1151">Объект <see cref="T:System.Collections.Generic.IEnumerable`1" />, который содержит объекты <see cref="T:System.Linq.Expressions.Expression" />, которые следует задать для свойства <see cref="P:System.Linq.Expressions.ElementInit.Arguments" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fef91-1151">An <see cref="T:System.Collections.Generic.IEnumerable`1" /> that contains <see cref="T:System.Linq.Expressions.Expression" /> objects to set the <see cref="P:System.Linq.Expressions.ElementInit.Arguments" /> property equal to.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="fef91-1152">Создает <see cref="T:System.Linq.Expressions.ElementInit" />, присвоенный <see cref="T:System.Collections.Generic.IEnumerable`1" /> в качестве второго аргумента.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fef91-1152">Creates an <see cref="T:System.Linq.Expressions.ElementInit" />, given an <see cref="T:System.Collections.Generic.IEnumerable`1" /> as the second argument.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="fef91-1153">Выражение <see cref="T:System.Linq.Expressions.ElementInit" />, содержащее свойства  <see cref="P:System.Linq.Expressions.ElementInit.AddMethod" /> и <see cref="P:System.Linq.Expressions.ElementInit.Arguments" />, для которых заданы указанные значения.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fef91-1153">An <see cref="T:System.Linq.Expressions.ElementInit" /> that has the <see cref="P:System.Linq.Expressions.ElementInit.AddMethod" /> and <see cref="P:System.Linq.Expressions.ElementInit.Arguments" /> properties set to the specified values.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="fef91-1154">`addMethod` Параметр должен представлять метод с именем «Add» (без учета регистра).</span><span class="sxs-lookup"><span data-stu-id="fef91-1154">The `addMethod` parameter must represent an instance method named "Add" (case insensitive).</span></span> <span data-ttu-id="fef91-1155">Метод add должен иметь одинаковое число параметров, как количество элементов в `arguments`.</span><span class="sxs-lookup"><span data-stu-id="fef91-1155">The add method must have the same number of parameters as the number of elements in `arguments`.</span></span> <span data-ttu-id="fef91-1156"><xref:System.Linq.Expressions.Expression.Type%2A> Каждого элемента в `arguments` необходимо присвоить типу соответствующего параметра метода add, возможно после *заключения в кавычки*.</span><span class="sxs-lookup"><span data-stu-id="fef91-1156">The <xref:System.Linq.Expressions.Expression.Type%2A> property of each element in `arguments` must be assignable to the type of the corresponding parameter of the add method, possibly after *quoting*.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="fef91-1157">Элемент будет заключаться в кавычки только в том случае, если соответствующий параметр метода имеет тип <xref:System.Linq.Expressions.Expression>.</span><span class="sxs-lookup"><span data-stu-id="fef91-1157">An element will be quoted only if the corresponding method parameter is of type <xref:System.Linq.Expressions.Expression>.</span></span> <span data-ttu-id="fef91-1158">Заключение в кавычки означает, что элемент помещается в <xref:System.Linq.Expressions.ExpressionType.Quote> узла.</span><span class="sxs-lookup"><span data-stu-id="fef91-1158">Quoting means the element is wrapped in a <xref:System.Linq.Expressions.ExpressionType.Quote> node.</span></span> <span data-ttu-id="fef91-1159">Полученный в результате узел является <xref:System.Linq.Expressions.UnaryExpression> которого <xref:System.Linq.Expressions.UnaryExpression.Operand%2A> свойство является элементом `arguments`.</span><span class="sxs-lookup"><span data-stu-id="fef91-1159">The resulting node is a <xref:System.Linq.Expressions.UnaryExpression> whose <xref:System.Linq.Expressions.UnaryExpression.Operand%2A> property is the element of `arguments`.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="fef91-1160">Следующий пример демонстрирует, как использовать <xref:System.Linq.Expressions.Expression.ElementInit%28System.Reflection.MethodInfo%2CSystem.Linq.Expressions.Expression%5B%5D%29> метод для создания <xref:System.Linq.Expressions.ElementInit> , представляющий вызов <xref:System.Collections.Generic.Dictionary%602.Add%2A> метод для инициализации элемента коллекции словаря.</span><span class="sxs-lookup"><span data-stu-id="fef91-1160">The following example demonstrates how to use the <xref:System.Linq.Expressions.Expression.ElementInit%28System.Reflection.MethodInfo%2CSystem.Linq.Expressions.Expression%5B%5D%29> method to create an <xref:System.Linq.Expressions.ElementInit> that represents calling the <xref:System.Collections.Generic.Dictionary%602.Add%2A> method to initialize an element of a dictionary collection.</span></span>  
  
 [!code-csharp[System.Linq.Expressions.Expression#4](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Linq.Expressions.Expression/CS/Expression.cs#4)]
 [!code-vb[System.Linq.Expressions.Expression#4](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Linq.Expressions.Expression/VB/Expression.vb#4)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="fef91-1161">Значение параметра <paramref name="addMethod" /> или <paramref name="arguments" /> — <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fef91-1161">
              <paramref name="addMethod" /> or <paramref name="arguments" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="fef91-1162">Методу, представленному параметром <paramref name="addMethod" />, не присвоено имя "Добавить" (без учета регистра).</span>
          <span class="sxs-lookup">
            <span data-stu-id="fef91-1162">The method that <paramref name="addMethod" /> represents is not named "Add" (case insensitive).</span>
          </span>
          <span data-ttu-id="fef91-1163">-или-</span>
          <span class="sxs-lookup">
            <span data-stu-id="fef91-1163">-or-</span>
          </span>
          <span data-ttu-id="fef91-1164">Метод, представленный параметром <paramref name="addMethod" />, не является методом экземпляра.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fef91-1164">The method that <paramref name="addMethod" /> represents is not an instance method.</span>
          </span>
          <span data-ttu-id="fef91-1165">-или-</span>
          <span class="sxs-lookup">
            <span data-stu-id="fef91-1165">-or-</span>
          </span>
          <span data-ttu-id="fef91-1166">Число элементов в <paramref name="arguments" /> не соответствует числу параметров метода, представленного параметром <paramref name="addMethod" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fef91-1166">
              <paramref name="arguments" /> does not contain the same number of elements as the number of parameters for the method that <paramref name="addMethod" /> represents.</span>
          </span>
          <span data-ttu-id="fef91-1167">-или-</span>
          <span class="sxs-lookup">
            <span data-stu-id="fef91-1167">-or-</span>
          </span>
          <span data-ttu-id="fef91-1168">Свойство <see cref="P:System.Linq.Expressions.Expression.Type" /> одного или нескольких элементов <paramref name="arguments" /> нельзя назначить для типа соответствующего параметра метода, представленного параметром <paramref name="addMethod" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fef91-1168">The <see cref="P:System.Linq.Expressions.Expression.Type" /> property of one or more elements of <paramref name="arguments" /> is not assignable to the type of the corresponding parameter of the method that <paramref name="addMethod" /> represents.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="ElementInit">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.ElementInit ElementInit (System.Reflection.MethodInfo addMethod, params System.Linq.Expressions.Expression[] arguments);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.ElementInit ElementInit(class System.Reflection.MethodInfo addMethod, class System.Linq.Expressions.Expression[] arguments) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.ElementInit(System.Reflection.MethodInfo,System.Linq.Expressions.Expression[])" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function ElementInit (addMethod As MethodInfo, ParamArray arguments As Expression()) As ElementInit" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Linq::Expressions::ElementInit ^ ElementInit(System::Reflection::MethodInfo ^ addMethod, ... cli::array &lt;System::Linq::Expressions::Expression ^&gt; ^ arguments);" />
      <MemberSignature Language="F#" Value="static member ElementInit : System.Reflection.MethodInfo * System.Linq.Expressions.Expression[] -&gt; System.Linq.Expressions.ElementInit" Usage="System.Linq.Expressions.Expression.ElementInit (addMethod, arguments)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.ElementInit</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="addMethod" Type="System.Reflection.MethodInfo" />
        <Parameter Name="arguments" Type="System.Linq.Expressions.Expression[]">
          <Attributes>
            <Attribute>
              <AttributeName>System.ParamArray</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="addMethod">
          <span data-ttu-id="fef91-1169">Объект <see cref="T:System.Reflection.MethodInfo" />, который следует задать в качестве значения свойства <see cref="P:System.Linq.Expressions.ElementInit.AddMethod" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fef91-1169">A <see cref="T:System.Reflection.MethodInfo" /> to set the <see cref="P:System.Linq.Expressions.ElementInit.AddMethod" /> property equal to.</span>
          </span>
        </param>
        <param name="arguments">
          <span data-ttu-id="fef91-1170">Массив объектов <see cref="T:System.Linq.Expressions.Expression" />, которые следует задать для свойства <see cref="P:System.Linq.Expressions.ElementInit.Arguments" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fef91-1170">An array of <see cref="T:System.Linq.Expressions.Expression" /> objects to set the <see cref="P:System.Linq.Expressions.ElementInit.Arguments" /> property equal to.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="fef91-1171">Создает <see cref="T:System.Linq.Expressions.ElementInit" />, присвоенный массиву значений в качестве второго аргумента.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fef91-1171">Creates an <see cref="T:System.Linq.Expressions.ElementInit" />, given an array of values as the second argument.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="fef91-1172">Выражение <see cref="T:System.Linq.Expressions.ElementInit" />, содержащее свойства  <see cref="P:System.Linq.Expressions.ElementInit.AddMethod" /> и <see cref="P:System.Linq.Expressions.ElementInit.Arguments" />, для которых заданы указанные значения.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fef91-1172">An <see cref="T:System.Linq.Expressions.ElementInit" /> that has the <see cref="P:System.Linq.Expressions.ElementInit.AddMethod" /> and <see cref="P:System.Linq.Expressions.ElementInit.Arguments" /> properties set to the specified values.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="fef91-1173">`addMethod` Параметр должен представлять метод с именем «Add» (без учета регистра).</span><span class="sxs-lookup"><span data-stu-id="fef91-1173">The `addMethod` parameter must represent an instance method named "Add" (case insensitive).</span></span> <span data-ttu-id="fef91-1174">Метод add должен иметь одинаковое число параметров, как количество элементов в `arguments`.</span><span class="sxs-lookup"><span data-stu-id="fef91-1174">The add method must have the same number of parameters as the number of elements in `arguments`.</span></span> <span data-ttu-id="fef91-1175"><xref:System.Linq.Expressions.Expression.Type%2A> Каждого элемента в `arguments` необходимо присвоить типу соответствующего параметра метода add, возможно после *заключения в кавычки*.</span><span class="sxs-lookup"><span data-stu-id="fef91-1175">The <xref:System.Linq.Expressions.Expression.Type%2A> property of each element in `arguments` must be assignable to the type of the corresponding parameter of the add method, possibly after *quoting*.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="fef91-1176">Элемент будет заключаться в кавычки только в том случае, если соответствующий параметр метода имеет тип <xref:System.Linq.Expressions.Expression>.</span><span class="sxs-lookup"><span data-stu-id="fef91-1176">An element will be quoted only if the corresponding method parameter is of type <xref:System.Linq.Expressions.Expression>.</span></span> <span data-ttu-id="fef91-1177">Заключение в кавычки означает, что элемент помещается в <xref:System.Linq.Expressions.ExpressionType.Quote> узла.</span><span class="sxs-lookup"><span data-stu-id="fef91-1177">Quoting means the element is wrapped in a <xref:System.Linq.Expressions.ExpressionType.Quote> node.</span></span> <span data-ttu-id="fef91-1178">Полученный в результате узел является <xref:System.Linq.Expressions.UnaryExpression> которого <xref:System.Linq.Expressions.UnaryExpression.Operand%2A> свойство является элементом `arguments`.</span><span class="sxs-lookup"><span data-stu-id="fef91-1178">The resulting node is a <xref:System.Linq.Expressions.UnaryExpression> whose <xref:System.Linq.Expressions.UnaryExpression.Operand%2A> property is the element of `arguments`.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="fef91-1179">Следующий пример демонстрирует, как использовать <xref:System.Linq.Expressions.Expression.ElementInit%28System.Reflection.MethodInfo%2CSystem.Linq.Expressions.Expression%5B%5D%29> метод для создания <xref:System.Linq.Expressions.ElementInit> , представляющий вызов <xref:System.Collections.Generic.Dictionary%602.Add%2A> метод для инициализации элемента коллекции словаря.</span><span class="sxs-lookup"><span data-stu-id="fef91-1179">The following example demonstrates how to use the <xref:System.Linq.Expressions.Expression.ElementInit%28System.Reflection.MethodInfo%2CSystem.Linq.Expressions.Expression%5B%5D%29> method to create an <xref:System.Linq.Expressions.ElementInit> that represents calling the <xref:System.Collections.Generic.Dictionary%602.Add%2A> method to initialize an element of a dictionary collection.</span></span>  
  
 [!code-csharp[System.Linq.Expressions.Expression#4](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Linq.Expressions.Expression/CS/Expression.cs#4)]
 [!code-vb[System.Linq.Expressions.Expression#4](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Linq.Expressions.Expression/VB/Expression.vb#4)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="fef91-1180">Значение параметра <paramref name="addMethod" /> или <paramref name="arguments" /> — <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fef91-1180">
              <paramref name="addMethod" /> or <paramref name="arguments" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="fef91-1181">Название метода, представленного параметром addMethod, отлично от "Add" (без учета регистра).</span>
          <span class="sxs-lookup">
            <span data-stu-id="fef91-1181">The method that addMethod represents is not named "Add" (case insensitive).</span>
          </span>
          <span data-ttu-id="fef91-1182">-или-</span>
          <span class="sxs-lookup">
            <span data-stu-id="fef91-1182">-or-</span>
          </span>
          <span data-ttu-id="fef91-1183">Метод, представленный параметром addMethod, не является методом экземпляра.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fef91-1183">The method that addMethod represents is not an instance method.</span>
          </span>
          <span data-ttu-id="fef91-1184">-или-</span>
          <span class="sxs-lookup">
            <span data-stu-id="fef91-1184">-or-</span>
          </span>
          <span data-ttu-id="fef91-1185">Число элементов, содержащихся в параметре arguments, отличается от числа параметров для метода, представленного параметром addMethod.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fef91-1185">arguments does not contain the same number of elements as the number of parameters for the method that addMethod represents.</span>
          </span>
          <span data-ttu-id="fef91-1186">-или-</span>
          <span class="sxs-lookup">
            <span data-stu-id="fef91-1186">-or-</span>
          </span>
          <span data-ttu-id="fef91-1187">Свойство <see cref="P:System.Linq.Expressions.Expression.Type" /> одного или нескольких элементов <paramref name="arguments" /> нельзя назначить для типа соответствующего параметра метода, представленного параметром <paramref name="addMethod" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fef91-1187">The <see cref="P:System.Linq.Expressions.Expression.Type" /> property of one or more elements of <paramref name="arguments" /> is not assignable to the type of the corresponding parameter of the method that <paramref name="addMethod" /> represents.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="Empty">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.DefaultExpression Empty ();" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.DefaultExpression Empty() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.Empty" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Empty () As DefaultExpression" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Linq::Expressions::DefaultExpression ^ Empty();" />
      <MemberSignature Language="F#" Value="static member Empty : unit -&gt; System.Linq.Expressions.DefaultExpression" Usage="System.Linq.Expressions.Expression.Empty " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.DefaultExpression</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="fef91-1188">Создает пустое выражение типа <see cref="T:System.Void" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fef91-1188">Creates an empty expression that has <see cref="T:System.Void" /> type.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="fef91-1189">Выражение <see cref="T:System.Linq.Expressions.DefaultExpression" />, содержащее свойство <see cref="P:System.Linq.Expressions.Expression.NodeType" />, равное <see cref="F:System.Linq.Expressions.ExpressionType.Default" />, и свойство <see cref="P:System.Linq.Expressions.Expression.Type" />, равное <see cref="T:System.Void" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fef91-1189">A <see cref="T:System.Linq.Expressions.DefaultExpression" /> that has the <see cref="P:System.Linq.Expressions.Expression.NodeType" /> property equal to <see cref="F:System.Linq.Expressions.ExpressionType.Default" /> and the <see cref="P:System.Linq.Expressions.Expression.Type" /> property set to <see cref="T:System.Void" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="fef91-1190">Пустое выражение может использоваться, когда ожидается выражение, но не требуется никаких действий.</span><span class="sxs-lookup"><span data-stu-id="fef91-1190">An empty expression can be used where an expression is expected but no action is desired.</span></span> <span data-ttu-id="fef91-1191">Например можно использовать пустое выражение как последнее выражение в блоке выражений.</span><span class="sxs-lookup"><span data-stu-id="fef91-1191">For example, you can use an empty expression as the last expression in a block expression.</span></span> <span data-ttu-id="fef91-1192">В этом случае блокировать выражение возвращает значение void.</span><span class="sxs-lookup"><span data-stu-id="fef91-1192">In this case, the block expression's return value is void.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="fef91-1193">В следующем примере кода показано, как создать пустое выражение и добавить его в блок выражения.</span><span class="sxs-lookup"><span data-stu-id="fef91-1193">The following code example shows how to create an empty expression and add it to a block expression.</span></span>  
  
 [!code-csharp[System.Linq.Expressions.ExpressionDev10#31](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.linq.expressions.expressiondev10/cs/program.cs#31)]
 [!code-vb[System.Linq.Expressions.ExpressionDev10#31](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.linq.expressions.expressiondev10/vb/module1.vb#31)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="Equal">
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="fef91-1194">Создает <see cref="T:System.Linq.Expressions.BinaryExpression" />, представляющий сравнение равенства.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fef91-1194">Creates a <see cref="T:System.Linq.Expressions.BinaryExpression" /> that represents an equality comparison.</span>
          </span>
        </summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Equal">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.BinaryExpression Equal (System.Linq.Expressions.Expression left, System.Linq.Expressions.Expression right);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.BinaryExpression Equal(class System.Linq.Expressions.Expression left, class System.Linq.Expressions.Expression right) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.Equal(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Equal (left As Expression, right As Expression) As BinaryExpression" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Linq::Expressions::BinaryExpression ^ Equal(System::Linq::Expressions::Expression ^ left, System::Linq::Expressions::Expression ^ right);" />
      <MemberSignature Language="F#" Value="static member Equal : System.Linq.Expressions.Expression * System.Linq.Expressions.Expression -&gt; System.Linq.Expressions.BinaryExpression" Usage="System.Linq.Expressions.Expression.Equal (left, right)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.BinaryExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="left" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="right" Type="System.Linq.Expressions.Expression" />
      </Parameters>
      <Docs>
        <param name="left">
          <span data-ttu-id="fef91-1195">Объект <see cref="T:System.Linq.Expressions.Expression" />, который следует задать в качестве значения свойства <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fef91-1195">An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> property equal to.</span>
          </span>
        </param>
        <param name="right">
          <span data-ttu-id="fef91-1196">Объект <see cref="T:System.Linq.Expressions.Expression" />, который следует задать в качестве значения свойства <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fef91-1196">An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> property equal to.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="fef91-1197">Создает <see cref="T:System.Linq.Expressions.BinaryExpression" />, представляющий сравнение равенства.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fef91-1197">Creates a <see cref="T:System.Linq.Expressions.BinaryExpression" /> that represents an equality comparison.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="fef91-1198">Выражение <see cref="T:System.Linq.Expressions.BinaryExpression" /> со свойством<see cref="P:System.Linq.Expressions.Expression.NodeType" />, равным <see cref="F:System.Linq.Expressions.ExpressionType.Equal" />, и свойствами <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> и <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />, для которых заданы указанные значения.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fef91-1198">A <see cref="T:System.Linq.Expressions.BinaryExpression" /> that has the <see cref="P:System.Linq.Expressions.Expression.NodeType" /> property equal to <see cref="F:System.Linq.Expressions.ExpressionType.Equal" /> and the <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> and <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> properties set to the specified values.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="fef91-1199">Полученный в результате <xref:System.Linq.Expressions.BinaryExpression> имеет <xref:System.Linq.Expressions.BinaryExpression.Method%2A> свойство присвоено метод реализации.</span><span class="sxs-lookup"><span data-stu-id="fef91-1199">The resulting <xref:System.Linq.Expressions.BinaryExpression> has the <xref:System.Linq.Expressions.BinaryExpression.Method%2A> property set to the implementing method.</span></span> <span data-ttu-id="fef91-1200"><xref:System.Linq.Expressions.Expression.Type%2A> Свойству присваивается тип узла.</span><span class="sxs-lookup"><span data-stu-id="fef91-1200">The <xref:System.Linq.Expressions.Expression.Type%2A> property is set to the type of the node.</span></span> <span data-ttu-id="fef91-1201">Если узел удаляется, <xref:System.Linq.Expressions.BinaryExpression.IsLifted%2A> свойство `true`.</span><span class="sxs-lookup"><span data-stu-id="fef91-1201">If the node is lifted, the <xref:System.Linq.Expressions.BinaryExpression.IsLifted%2A> property is `true`.</span></span> <span data-ttu-id="fef91-1202">В противном случае содержит значение `false`.</span><span class="sxs-lookup"><span data-stu-id="fef91-1202">Otherwise, it is `false`.</span></span> <span data-ttu-id="fef91-1203">Свойство <xref:System.Linq.Expressions.BinaryExpression.IsLiftedToNull%2A> всегда имеет значение `false`.</span><span class="sxs-lookup"><span data-stu-id="fef91-1203">The <xref:System.Linq.Expressions.BinaryExpression.IsLiftedToNull%2A> property is always `false`.</span></span> <span data-ttu-id="fef91-1204">Ниже описывается метод реализации, тип узла и ликвидирован ли данный узел.</span><span class="sxs-lookup"><span data-stu-id="fef91-1204">The following information describes the implementing method, the node type, and whether a node is lifted.</span></span>  
  
#### <a name="implementing-method"></a><span data-ttu-id="fef91-1205">Реализация метода</span><span class="sxs-lookup"><span data-stu-id="fef91-1205">Implementing Method</span></span>  
 <span data-ttu-id="fef91-1206">Следующие правила определяют метод реализации для операции:</span><span class="sxs-lookup"><span data-stu-id="fef91-1206">The following rules determine the implementing method for the operation:</span></span>  
  
-   <span data-ttu-id="fef91-1207">Если <xref:System.Linq.Expressions.Expression.Type%2A> свойству `left` или `right` представляет определяемый пользователем тип, который перегружает оператор равенства <xref:System.Reflection.MethodInfo> , представляющий, что метод является методом реализации.</span><span class="sxs-lookup"><span data-stu-id="fef91-1207">If the <xref:System.Linq.Expressions.Expression.Type%2A> property of either `left` or `right` represents a user-defined type that overloads the equality operator, the <xref:System.Reflection.MethodInfo> that represents that method is the implementing method.</span></span>  
  
-   <span data-ttu-id="fef91-1208">В противном случае метод реализации является `null`.</span><span class="sxs-lookup"><span data-stu-id="fef91-1208">Otherwise, the implementing method is `null`.</span></span>  
  
#### <a name="node-type-and-lifted-versus-non-lifted"></a><span data-ttu-id="fef91-1209">Тип узла с ликвидацией или без</span><span class="sxs-lookup"><span data-stu-id="fef91-1209">Node Type and Lifted versus Non-Lifted</span></span>  
 <span data-ttu-id="fef91-1210">Если метод реализации не `null`:</span><span class="sxs-lookup"><span data-stu-id="fef91-1210">If the implementing method is not `null`:</span></span>  
  
-   <span data-ttu-id="fef91-1211">Если `left`. Тип и `right`. Тип могут быть присвоены соответствующие типы аргументов метода реализации, узел не удаляется.</span><span class="sxs-lookup"><span data-stu-id="fef91-1211">If `left`.Type and `right`.Type are assignable to the corresponding argument types of the implementing method, the node is not lifted.</span></span> <span data-ttu-id="fef91-1212">Тип узла — тип возвращаемого значения метода реализации.</span><span class="sxs-lookup"><span data-stu-id="fef91-1212">The type of the node is the return type of the implementing method.</span></span>  
  
-   <span data-ttu-id="fef91-1213">Если удовлетворяются следующие два условия, узел удаляется, и тип узла — <xref:System.Boolean>:</span><span class="sxs-lookup"><span data-stu-id="fef91-1213">If the following two conditions are satisfied, the node is lifted and the type of the node is <xref:System.Boolean>:</span></span>  
  
    -   <span data-ttu-id="fef91-1214">`left`. Тип и `right`. Тип: обоих типов значений, из которых хотя бы один допускает значения NULL и соответствующие типы, не допускающие значения null равны соответствующие типы аргументов метода реализации.</span><span class="sxs-lookup"><span data-stu-id="fef91-1214">`left`.Type and `right`.Type are both value types of which at least one is nullable and the corresponding non-nullable types are equal to the corresponding argument types of the implementing method.</span></span>  
  
    -   <span data-ttu-id="fef91-1215">Тип возвращаемого значения метода реализации — <xref:System.Boolean>.</span><span class="sxs-lookup"><span data-stu-id="fef91-1215">The return type of the implementing method is <xref:System.Boolean>.</span></span>  
  
 <span data-ttu-id="fef91-1216">Если метод реализации `null`:</span><span class="sxs-lookup"><span data-stu-id="fef91-1216">If the implementing method is `null`:</span></span>  
  
-   <span data-ttu-id="fef91-1217">Если `left`. Тип и `right`. Тип: оба не поддерживающими значение NULL, узел не удаляется.</span><span class="sxs-lookup"><span data-stu-id="fef91-1217">If `left`.Type and `right`.Type are both non-nullable, the node is not lifted.</span></span> <span data-ttu-id="fef91-1218">Тип узла — <xref:System.Boolean>.</span><span class="sxs-lookup"><span data-stu-id="fef91-1218">The type of the node is <xref:System.Boolean>.</span></span>  
  
-   <span data-ttu-id="fef91-1219">Если `left`. Тип и `right`. Тип: значение NULL, узел удаляется.</span><span class="sxs-lookup"><span data-stu-id="fef91-1219">If `left`.Type and `right`.Type are both nullable, the node is lifted.</span></span> <span data-ttu-id="fef91-1220">Тип узла — <xref:System.Boolean>.</span><span class="sxs-lookup"><span data-stu-id="fef91-1220">The type of the node is <xref:System.Boolean>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="fef91-1221">В следующем примере кода показано, как создать выражение, которое проверяет, равны ли значения двух аргументов.</span><span class="sxs-lookup"><span data-stu-id="fef91-1221">The following code example shows how to create an expression that checks whether the values of its two arguments are equal.</span></span>  
  
 [!code-csharp[System.Linq.Expressions.ExpressionDev10#8](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.linq.expressions.expressiondev10/cs/program.cs#8)]
 [!code-vb[System.Linq.Expressions.ExpressionDev10#8](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.linq.expressions.expressiondev10/vb/module1.vb#8)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="fef91-1222">Значение параметра <paramref name="left" /> или <paramref name="right" /> — <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fef91-1222">
              <paramref name="left" /> or <paramref name="right" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.InvalidOperationException">
          <span data-ttu-id="fef91-1223">Оператор равенства не определен для типов <paramref name="left" />.Type и <paramref name="right" />.Type.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fef91-1223">The equality operator is not defined for <paramref name="left" />.Type and <paramref name="right" />.Type.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="Equal">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.BinaryExpression Equal (System.Linq.Expressions.Expression left, System.Linq.Expressions.Expression right, bool liftToNull, System.Reflection.MethodInfo method);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.BinaryExpression Equal(class System.Linq.Expressions.Expression left, class System.Linq.Expressions.Expression right, bool liftToNull, class System.Reflection.MethodInfo method) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.Equal(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Boolean,System.Reflection.MethodInfo)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Equal (left As Expression, right As Expression, liftToNull As Boolean, method As MethodInfo) As BinaryExpression" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Linq::Expressions::BinaryExpression ^ Equal(System::Linq::Expressions::Expression ^ left, System::Linq::Expressions::Expression ^ right, bool liftToNull, System::Reflection::MethodInfo ^ method);" />
      <MemberSignature Language="F#" Value="static member Equal : System.Linq.Expressions.Expression * System.Linq.Expressions.Expression * bool * System.Reflection.MethodInfo -&gt; System.Linq.Expressions.BinaryExpression" Usage="System.Linq.Expressions.Expression.Equal (left, right, liftToNull, method)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.BinaryExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="left" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="right" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="liftToNull" Type="System.Boolean" />
        <Parameter Name="method" Type="System.Reflection.MethodInfo" />
      </Parameters>
      <Docs>
        <param name="left">
          <span data-ttu-id="fef91-1224">Объект <see cref="T:System.Linq.Expressions.Expression" />, который следует задать в качестве значения свойства <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fef91-1224">An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> property equal to.</span>
          </span>
        </param>
        <param name="right">
          <span data-ttu-id="fef91-1225">Объект <see cref="T:System.Linq.Expressions.Expression" />, который следует задать в качестве значения свойства <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fef91-1225">An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> property equal to.</span>
          </span>
        </param>
        <param name="liftToNull">
          <span data-ttu-id="fef91-1226">
            <see langword="true" />, чтобы задать для <see cref="P:System.Linq.Expressions.BinaryExpression.IsLiftedToNull" />значение <see langword="true" />; <see langword="false" />, чтобы задать для <see cref="P:System.Linq.Expressions.BinaryExpression.IsLiftedToNull" /> значение <see langword="false" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fef91-1226">
              <see langword="true" /> to set <see cref="P:System.Linq.Expressions.BinaryExpression.IsLiftedToNull" /> to <see langword="true" />; <see langword="false" /> to set <see cref="P:System.Linq.Expressions.BinaryExpression.IsLiftedToNull" /> to <see langword="false" />.</span>
          </span>
        </param>
        <param name="method">
          <span data-ttu-id="fef91-1227">Объект <see cref="T:System.Reflection.MethodInfo" />, который следует задать в качестве значения свойства <see cref="P:System.Linq.Expressions.BinaryExpression.Method" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fef91-1227">A <see cref="T:System.Reflection.MethodInfo" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Method" /> property equal to.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="fef91-1228">Создает <see cref="T:System.Linq.Expressions.BinaryExpression" />, представляющий сравнение равенства.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fef91-1228">Creates a <see cref="T:System.Linq.Expressions.BinaryExpression" /> that represents an equality comparison.</span>
          </span>
          <span data-ttu-id="fef91-1229">Может быть указан метод реализации.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fef91-1229">The implementing method can be specified.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="fef91-1230">Выражение <see cref="T:System.Linq.Expressions.BinaryExpression" />, содержащее свойство <see cref="P:System.Linq.Expressions.Expression.NodeType" />, равное <see cref="F:System.Linq.Expressions.ExpressionType.Equal" /> и <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />, <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />, <see cref="P:System.Linq.Expressions.BinaryExpression.IsLiftedToNull" />, и свойства <see cref="P:System.Linq.Expressions.BinaryExpression.Method" />, для которых заданы указанные значения.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fef91-1230">A <see cref="T:System.Linq.Expressions.BinaryExpression" /> that has the <see cref="P:System.Linq.Expressions.Expression.NodeType" /> property equal to <see cref="F:System.Linq.Expressions.ExpressionType.Equal" /> and the <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />, <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />, <see cref="P:System.Linq.Expressions.BinaryExpression.IsLiftedToNull" />, and <see cref="P:System.Linq.Expressions.BinaryExpression.Method" /> properties set to the specified values.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="fef91-1231">Полученный в результате <xref:System.Linq.Expressions.BinaryExpression> имеет <xref:System.Linq.Expressions.BinaryExpression.Method%2A> свойство присвоено метод реализации.</span><span class="sxs-lookup"><span data-stu-id="fef91-1231">The resulting <xref:System.Linq.Expressions.BinaryExpression> has the <xref:System.Linq.Expressions.BinaryExpression.Method%2A> property set to the implementing method.</span></span> <span data-ttu-id="fef91-1232"><xref:System.Linq.Expressions.Expression.Type%2A> Свойству присваивается тип узла.</span><span class="sxs-lookup"><span data-stu-id="fef91-1232">The <xref:System.Linq.Expressions.Expression.Type%2A> property is set to the type of the node.</span></span> <span data-ttu-id="fef91-1233">Если узел удаляется, <xref:System.Linq.Expressions.BinaryExpression.IsLifted%2A> свойство `true` и <xref:System.Linq.Expressions.BinaryExpression.IsLiftedToNull%2A> равно `liftToNull`.</span><span class="sxs-lookup"><span data-stu-id="fef91-1233">If the node is lifted, the <xref:System.Linq.Expressions.BinaryExpression.IsLifted%2A> property is `true` and the <xref:System.Linq.Expressions.BinaryExpression.IsLiftedToNull%2A> property is equal to `liftToNull`.</span></span> <span data-ttu-id="fef91-1234">В противном случае они оба `false`.</span><span class="sxs-lookup"><span data-stu-id="fef91-1234">Otherwise, they are both `false`.</span></span> <span data-ttu-id="fef91-1235">Ниже описывается метод реализации, тип узла и ликвидирован ли данный узел.</span><span class="sxs-lookup"><span data-stu-id="fef91-1235">The following information describes the implementing method, the node type, and whether a node is lifted.</span></span>  
  
#### <a name="implementing-method"></a><span data-ttu-id="fef91-1236">Реализация метода</span><span class="sxs-lookup"><span data-stu-id="fef91-1236">Implementing Method</span></span>  
 <span data-ttu-id="fef91-1237">Следующие правила определяют метод реализации для операции:</span><span class="sxs-lookup"><span data-stu-id="fef91-1237">The following rules determine the implementing method for the operation:</span></span>  
  
-   <span data-ttu-id="fef91-1238">Если `method` не `null` , и это отличный от void, `static` (`Shared` в Visual Basic) метода, принимающего два аргумента, он является методом реализации.</span><span class="sxs-lookup"><span data-stu-id="fef91-1238">If `method` is not `null` and it represents a non-void, `static` (`Shared` in Visual Basic) method that takes two arguments, it is the implementing method.</span></span>  
  
-   <span data-ttu-id="fef91-1239">В противном случае, если <xref:System.Linq.Expressions.Expression.Type%2A> свойству `left` или `right` представляет определяемый пользователем тип, который перегружает оператор равенства <xref:System.Reflection.MethodInfo> , представляющий, что метод является методом реализации.</span><span class="sxs-lookup"><span data-stu-id="fef91-1239">Otherwise, if the <xref:System.Linq.Expressions.Expression.Type%2A> property of either `left` or `right` represents a user-defined type that overloads the equality operator, the <xref:System.Reflection.MethodInfo> that represents that method is the implementing method.</span></span>  
  
-   <span data-ttu-id="fef91-1240">В противном случае метод реализации является `null`.</span><span class="sxs-lookup"><span data-stu-id="fef91-1240">Otherwise, the implementing method is `null`.</span></span>  
  
#### <a name="node-type-and-lifted-versus-non-lifted"></a><span data-ttu-id="fef91-1241">Тип узла с ликвидацией или без</span><span class="sxs-lookup"><span data-stu-id="fef91-1241">Node Type and Lifted versus Non-Lifted</span></span>  
 <span data-ttu-id="fef91-1242">Если метод реализации не `null`:</span><span class="sxs-lookup"><span data-stu-id="fef91-1242">If the implementing method is not `null`:</span></span>  
  
-   <span data-ttu-id="fef91-1243">Если `left`. Тип и `right`. Тип могут быть присвоены соответствующие типы аргументов метода реализации, узел не удаляется.</span><span class="sxs-lookup"><span data-stu-id="fef91-1243">If `left`.Type and `right`.Type are assignable to the corresponding argument types of the implementing method, the node is not lifted.</span></span> <span data-ttu-id="fef91-1244">Тип узла — тип возвращаемого значения метода реализации.</span><span class="sxs-lookup"><span data-stu-id="fef91-1244">The type of the node is the return type of the implementing method.</span></span>  
  
-   <span data-ttu-id="fef91-1245">Если выполняются два следующих условия, узел удаляется; Кроме того, допускающий значение NULL тип узла <xref:System.Boolean> Если `liftToNull` — `true` или <xref:System.Boolean> Если `liftToNull` — `false`:</span><span class="sxs-lookup"><span data-stu-id="fef91-1245">If the following two conditions are satisfied, the node is lifted; also, the type of the node is nullable <xref:System.Boolean> if `liftToNull` is `true` or <xref:System.Boolean> if `liftToNull` is `false`:</span></span>  
  
    -   <span data-ttu-id="fef91-1246">`left`. Тип и `right`. Тип: обоих типов значений, из которых хотя бы один допускает значения NULL и соответствующие типы, не допускающие значения null равны соответствующие типы аргументов метода реализации.</span><span class="sxs-lookup"><span data-stu-id="fef91-1246">`left`.Type and `right`.Type are both value types of which at least one is nullable and the corresponding non-nullable types are equal to the corresponding argument types of the implementing method.</span></span>  
  
    -   <span data-ttu-id="fef91-1247">Тип возвращаемого значения метода реализации — <xref:System.Boolean>.</span><span class="sxs-lookup"><span data-stu-id="fef91-1247">The return type of the implementing method is <xref:System.Boolean>.</span></span>  
  
 <span data-ttu-id="fef91-1248">Если метод реализации `null`:</span><span class="sxs-lookup"><span data-stu-id="fef91-1248">If the implementing method is `null`:</span></span>  
  
-   <span data-ttu-id="fef91-1249">Если `left`. Тип и `right`. Тип: оба не поддерживающими значение NULL, узел не удаляется.</span><span class="sxs-lookup"><span data-stu-id="fef91-1249">If `left`.Type and `right`.Type are both non-nullable, the node is not lifted.</span></span> <span data-ttu-id="fef91-1250">Тип узла — <xref:System.Boolean>.</span><span class="sxs-lookup"><span data-stu-id="fef91-1250">The type of the node is <xref:System.Boolean>.</span></span>  
  
-   <span data-ttu-id="fef91-1251">Если `left`. Тип и `right`. Тип: значение NULL, узел удаляется.</span><span class="sxs-lookup"><span data-stu-id="fef91-1251">If `left`.Type and `right`.Type are both nullable, the node is lifted.</span></span> <span data-ttu-id="fef91-1252">Тип узла, допускающие значения NULL <xref:System.Boolean> Если `liftToNull` — `true` или <xref:System.Boolean> Если `liftToNull` является `false`.</span><span class="sxs-lookup"><span data-stu-id="fef91-1252">The type of the node is nullable <xref:System.Boolean> if `liftToNull` is `true` or <xref:System.Boolean> if `liftToNull` is `false`.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="fef91-1253">Значение параметра <paramref name="left" /> или <paramref name="right" /> — <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fef91-1253">
              <paramref name="left" /> or <paramref name="right" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="fef91-1254">Значение параметра <paramref name="method" /> не равно <see langword="null" />, и метод, который оно представляет, возвращает <see langword="void" />, не является <see langword="static" /> (<see langword="Shared" /> в Visual Basic) и не принимает ровно два аргумента.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fef91-1254">
              <paramref name="method" /> is not <see langword="null" /> and the method it represents returns <see langword="void" />, is not <see langword="static" /> (<see langword="Shared" /> in Visual Basic), or does not take exactly two arguments.</span>
          </span>
        </exception>
        <exception cref="T:System.InvalidOperationException">
          <span data-ttu-id="fef91-1255">
            <paramref name="method" /> равен <see langword="null" />, а оператор равенства не определен для типов <paramref name="left" />.Type и <paramref name="right" />.Type.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fef91-1255">
              <paramref name="method" /> is <see langword="null" /> and the equality operator is not defined for <paramref name="left" />.Type and <paramref name="right" />.Type.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <MemberGroup MemberName="ExclusiveOr">
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="fef91-1256">Создает выражение <see cref="T:System.Linq.Expressions.BinaryExpression" />, представляющее битовую операцию <see langword="XOR" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fef91-1256">Creates a <see cref="T:System.Linq.Expressions.BinaryExpression" /> that represents a bitwise <see langword="XOR" /> operation.</span>
          </span>
        </summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="ExclusiveOr">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.BinaryExpression ExclusiveOr (System.Linq.Expressions.Expression left, System.Linq.Expressions.Expression right);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.BinaryExpression ExclusiveOr(class System.Linq.Expressions.Expression left, class System.Linq.Expressions.Expression right) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.ExclusiveOr(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function ExclusiveOr (left As Expression, right As Expression) As BinaryExpression" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Linq::Expressions::BinaryExpression ^ ExclusiveOr(System::Linq::Expressions::Expression ^ left, System::Linq::Expressions::Expression ^ right);" />
      <MemberSignature Language="F#" Value="static member ExclusiveOr : System.Linq.Expressions.Expression * System.Linq.Expressions.Expression -&gt; System.Linq.Expressions.BinaryExpression" Usage="System.Linq.Expressions.Expression.ExclusiveOr (left, right)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.BinaryExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="left" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="right" Type="System.Linq.Expressions.Expression" />
      </Parameters>
      <Docs>
        <param name="left">
          <span data-ttu-id="fef91-1257">Объект <see cref="T:System.Linq.Expressions.Expression" />, который следует задать в качестве значения свойства <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fef91-1257">An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> property equal to.</span>
          </span>
        </param>
        <param name="right">
          <span data-ttu-id="fef91-1258">Объект <see cref="T:System.Linq.Expressions.Expression" />, который следует задать в качестве значения свойства <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fef91-1258">An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> property equal to.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="fef91-1259">Создает выражение <see cref="T:System.Linq.Expressions.BinaryExpression" />, представляющее битовую операцию <see langword="XOR" /> с использованием <c>op_ExclusiveOr</c> для определяемых пользователем типов.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fef91-1259">Creates a <see cref="T:System.Linq.Expressions.BinaryExpression" /> that represents a bitwise <see langword="XOR" /> operation, using <c>op_ExclusiveOr</c> for user-defined types.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="fef91-1260">Выражение <see cref="T:System.Linq.Expressions.BinaryExpression" /> со свойством<see cref="P:System.Linq.Expressions.Expression.NodeType" />, равным <see cref="F:System.Linq.Expressions.ExpressionType.ExclusiveOr" />, и свойствами <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> и <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />, для которых заданы указанные значения.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fef91-1260">A <see cref="T:System.Linq.Expressions.BinaryExpression" /> that has the <see cref="P:System.Linq.Expressions.Expression.NodeType" /> property equal to <see cref="F:System.Linq.Expressions.ExpressionType.ExclusiveOr" /> and the <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> and <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> properties set to the specified values.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="fef91-1261">Полученный в результате <xref:System.Linq.Expressions.BinaryExpression> имеет <xref:System.Linq.Expressions.BinaryExpression.Method%2A> свойство присвоено метод реализации.</span><span class="sxs-lookup"><span data-stu-id="fef91-1261">The resulting <xref:System.Linq.Expressions.BinaryExpression> has the <xref:System.Linq.Expressions.BinaryExpression.Method%2A> property set to the implementing method.</span></span> <span data-ttu-id="fef91-1262"><xref:System.Linq.Expressions.Expression.Type%2A> Свойству присваивается тип узла.</span><span class="sxs-lookup"><span data-stu-id="fef91-1262">The <xref:System.Linq.Expressions.Expression.Type%2A> property is set to the type of the node.</span></span> <span data-ttu-id="fef91-1263">Если узел удаляется, <xref:System.Linq.Expressions.BinaryExpression.IsLifted%2A> и <xref:System.Linq.Expressions.BinaryExpression.IsLiftedToNull%2A> оба являются свойства `true`.</span><span class="sxs-lookup"><span data-stu-id="fef91-1263">If the node is lifted, the <xref:System.Linq.Expressions.BinaryExpression.IsLifted%2A> and <xref:System.Linq.Expressions.BinaryExpression.IsLiftedToNull%2A> properties are both `true`.</span></span> <span data-ttu-id="fef91-1264">В противном случае они `false`.</span><span class="sxs-lookup"><span data-stu-id="fef91-1264">Otherwise, they are `false`.</span></span> <span data-ttu-id="fef91-1265">Значение свойства <xref:System.Linq.Expressions.BinaryExpression.Conversion%2A> — `null`.</span><span class="sxs-lookup"><span data-stu-id="fef91-1265">The <xref:System.Linq.Expressions.BinaryExpression.Conversion%2A> property is `null`.</span></span>  
  
 <span data-ttu-id="fef91-1266">Ниже описывается метод реализации, тип узла и ликвидирован ли данный узел.</span><span class="sxs-lookup"><span data-stu-id="fef91-1266">The following information describes the implementing method, the node type, and whether a node is lifted.</span></span>  
  
#### <a name="implementing-method"></a><span data-ttu-id="fef91-1267">Реализация метода</span><span class="sxs-lookup"><span data-stu-id="fef91-1267">Implementing Method</span></span>  
 <span data-ttu-id="fef91-1268">Следующие правила определяют метод реализации для операции:</span><span class="sxs-lookup"><span data-stu-id="fef91-1268">The following rules determine the implementing method for the operation:</span></span>  
  
-   <span data-ttu-id="fef91-1269">Если <xref:System.Linq.Expressions.Expression.Type%2A> свойству `left` или `right` представляет определяемый пользователем тип, который перегружает `XOR` оператор, <xref:System.Reflection.MethodInfo> , представляющий, что метод является методом реализации.</span><span class="sxs-lookup"><span data-stu-id="fef91-1269">If the <xref:System.Linq.Expressions.Expression.Type%2A> property of either `left` or `right` represents a user-defined type that overloads the `XOR` operator, the <xref:System.Reflection.MethodInfo> that represents that method is the implementing method.</span></span>  
  
-   <span data-ttu-id="fef91-1270">В противном случае, если `left`. Тип и `right`. Являются целыми числами или логическое типами, метод реализации является `null`.</span><span class="sxs-lookup"><span data-stu-id="fef91-1270">Otherwise, if `left`.Type and `right`.Type are integral or Boolean types, the implementing method is `null`.</span></span>  
  
#### <a name="node-type-and-lifted-versus-non-lifted"></a><span data-ttu-id="fef91-1271">Тип узла с ликвидацией или без</span><span class="sxs-lookup"><span data-stu-id="fef91-1271">Node Type and Lifted versus Non-Lifted</span></span>  
 <span data-ttu-id="fef91-1272">Если метод реализации не `null`:</span><span class="sxs-lookup"><span data-stu-id="fef91-1272">If the implementing method is not `null`:</span></span>  
  
-   <span data-ttu-id="fef91-1273">Если `left`. Тип и `right`. Тип могут быть присвоены соответствующие типы аргументов метода реализации, узел не удаляется.</span><span class="sxs-lookup"><span data-stu-id="fef91-1273">If `left`.Type and `right`.Type are assignable to the corresponding argument types of the implementing method, the node is not lifted.</span></span> <span data-ttu-id="fef91-1274">Тип узла — тип возвращаемого значения метода реализации.</span><span class="sxs-lookup"><span data-stu-id="fef91-1274">The type of the node is the return type of the implementing method.</span></span>  
  
-   <span data-ttu-id="fef91-1275">Если выполняются два следующих условия, узел удаляется, а тип узла — обнуляемый тип, соответствующий тип возвращаемого значения метода реализации:</span><span class="sxs-lookup"><span data-stu-id="fef91-1275">If the following two conditions are satisfied, the node is lifted and the type of the node is the nullable type that corresponds to the return type of the implementing method:</span></span>  
  
    -   <span data-ttu-id="fef91-1276">`left`. Тип и `right`. Тип: обоих типов значений, из которых хотя бы один допускает значения NULL и соответствующие типы, не допускающие значения null равны соответствующие типы аргументов метода реализации.</span><span class="sxs-lookup"><span data-stu-id="fef91-1276">`left`.Type and `right`.Type are both value types of which at least one is nullable and the corresponding non-nullable types are equal to the corresponding argument types of the implementing method.</span></span>  
  
    -   <span data-ttu-id="fef91-1277">Тип возвращаемого значения метода реализации является типом значения, не допускающие значения NULL.</span><span class="sxs-lookup"><span data-stu-id="fef91-1277">The return type of the implementing method is a non-nullable value type.</span></span>  
  
 <span data-ttu-id="fef91-1278">Если метод реализации `null`:</span><span class="sxs-lookup"><span data-stu-id="fef91-1278">If the implementing method is `null`:</span></span>  
  
-   <span data-ttu-id="fef91-1279">Если `left`. Тип и `right`. Тип: оба не поддерживающими значение NULL, узел не удаляется.</span><span class="sxs-lookup"><span data-stu-id="fef91-1279">If `left`.Type and `right`.Type are both non-nullable, the node is not lifted.</span></span> <span data-ttu-id="fef91-1280">Тип узла является типом результата из предварительно определенных `XOR` оператор.</span><span class="sxs-lookup"><span data-stu-id="fef91-1280">The type of the node is the result type of the predefined `XOR` operator.</span></span>  
  
-   <span data-ttu-id="fef91-1281">Если `left`. Тип и `right`. Тип: значение NULL, узел удаляется.</span><span class="sxs-lookup"><span data-stu-id="fef91-1281">If `left`.Type and `right`.Type are both nullable, the node is lifted.</span></span> <span data-ttu-id="fef91-1282">Тип узла — обнуляемый тип, соответствующий типу результата из предварительно определенных `XOR` оператор.</span><span class="sxs-lookup"><span data-stu-id="fef91-1282">The type of the node is the nullable type that corresponds to the result type of the predefined `XOR` operator.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="fef91-1283">В следующем примере кода показано, как создать выражение, представляющее операции Исключающего логического сложения.</span><span class="sxs-lookup"><span data-stu-id="fef91-1283">The following code example shows how to create an expression that represents the logical XOR operation.</span></span>  
  
 [!code-csharp[System.Linq.Expressions.ExpressionDev10#9](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.linq.expressions.expressiondev10/cs/program.cs#9)]
 [!code-vb[System.Linq.Expressions.ExpressionDev10#9](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.linq.expressions.expressiondev10/vb/module1.vb#9)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="fef91-1284">Значение параметра <paramref name="left" /> или <paramref name="right" /> — <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fef91-1284">
              <paramref name="left" /> or <paramref name="right" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.InvalidOperationException">
          <span data-ttu-id="fef91-1285">Оператор<see langword="XOR" /> не определен для типов <paramref name="left" />.Type и <paramref name="right" />.Type.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fef91-1285">The <see langword="XOR" /> operator is not defined for <paramref name="left" />.Type and <paramref name="right" />.Type.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="ExclusiveOr">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.BinaryExpression ExclusiveOr (System.Linq.Expressions.Expression left, System.Linq.Expressions.Expression right, System.Reflection.MethodInfo method);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.BinaryExpression ExclusiveOr(class System.Linq.Expressions.Expression left, class System.Linq.Expressions.Expression right, class System.Reflection.MethodInfo method) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.ExclusiveOr(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function ExclusiveOr (left As Expression, right As Expression, method As MethodInfo) As BinaryExpression" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Linq::Expressions::BinaryExpression ^ ExclusiveOr(System::Linq::Expressions::Expression ^ left, System::Linq::Expressions::Expression ^ right, System::Reflection::MethodInfo ^ method);" />
      <MemberSignature Language="F#" Value="static member ExclusiveOr : System.Linq.Expressions.Expression * System.Linq.Expressions.Expression * System.Reflection.MethodInfo -&gt; System.Linq.Expressions.BinaryExpression" Usage="System.Linq.Expressions.Expression.ExclusiveOr (left, right, method)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.BinaryExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="left" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="right" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="method" Type="System.Reflection.MethodInfo" />
      </Parameters>
      <Docs>
        <param name="left">
          <span data-ttu-id="fef91-1286">Объект <see cref="T:System.Linq.Expressions.Expression" />, который следует задать в качестве значения свойства <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fef91-1286">An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> property equal to.</span>
          </span>
        </param>
        <param name="right">
          <span data-ttu-id="fef91-1287">Объект <see cref="T:System.Linq.Expressions.Expression" />, который следует задать в качестве значения свойства <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fef91-1287">An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> property equal to.</span>
          </span>
        </param>
        <param name="method">
          <span data-ttu-id="fef91-1288">Объект <see cref="T:System.Reflection.MethodInfo" />, который следует задать в качестве значения свойства <see cref="P:System.Linq.Expressions.BinaryExpression.Method" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fef91-1288">A <see cref="T:System.Reflection.MethodInfo" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Method" /> property equal to.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="fef91-1289">Создает выражение <see cref="T:System.Linq.Expressions.BinaryExpression" />, представляющее битовую операцию <see langword="XOR" /> с использованием <c>op_ExclusiveOr</c> для определяемых пользователем типов.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fef91-1289">Creates a <see cref="T:System.Linq.Expressions.BinaryExpression" /> that represents a bitwise <see langword="XOR" /> operation, using <c>op_ExclusiveOr</c> for user-defined types.</span>
          </span>
          <span data-ttu-id="fef91-1290">Может быть указан метод реализации.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fef91-1290">The implementing method can be specified.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="fef91-1291">Выражение <see cref="T:System.Linq.Expressions.BinaryExpression" /> со свойством <see cref="P:System.Linq.Expressions.Expression.NodeType" />, равным <see cref="F:System.Linq.Expressions.ExpressionType.ExclusiveOr" />, и свойствами <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />, <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> и <see cref="P:System.Linq.Expressions.BinaryExpression.Method" />, для которых заданы указанные значения.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fef91-1291">A <see cref="T:System.Linq.Expressions.BinaryExpression" /> that has the <see cref="P:System.Linq.Expressions.Expression.NodeType" /> property equal to <see cref="F:System.Linq.Expressions.ExpressionType.ExclusiveOr" /> and the <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />, <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />, and <see cref="P:System.Linq.Expressions.BinaryExpression.Method" /> properties set to the specified values.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="fef91-1292">Полученный в результате <xref:System.Linq.Expressions.BinaryExpression> имеет <xref:System.Linq.Expressions.BinaryExpression.Method%2A> свойство присвоено метод реализации.</span><span class="sxs-lookup"><span data-stu-id="fef91-1292">The resulting <xref:System.Linq.Expressions.BinaryExpression> has the <xref:System.Linq.Expressions.BinaryExpression.Method%2A> property set to the implementing method.</span></span> <span data-ttu-id="fef91-1293"><xref:System.Linq.Expressions.Expression.Type%2A> Свойству присваивается тип узла.</span><span class="sxs-lookup"><span data-stu-id="fef91-1293">The <xref:System.Linq.Expressions.Expression.Type%2A> property is set to the type of the node.</span></span> <span data-ttu-id="fef91-1294">Если узел удаляется, <xref:System.Linq.Expressions.BinaryExpression.IsLifted%2A> и <xref:System.Linq.Expressions.BinaryExpression.IsLiftedToNull%2A> оба являются свойства `true`.</span><span class="sxs-lookup"><span data-stu-id="fef91-1294">If the node is lifted, the <xref:System.Linq.Expressions.BinaryExpression.IsLifted%2A> and <xref:System.Linq.Expressions.BinaryExpression.IsLiftedToNull%2A> properties are both `true`.</span></span> <span data-ttu-id="fef91-1295">В противном случае они `false`.</span><span class="sxs-lookup"><span data-stu-id="fef91-1295">Otherwise, they are `false`.</span></span> <span data-ttu-id="fef91-1296">Значение свойства <xref:System.Linq.Expressions.BinaryExpression.Conversion%2A> — `null`.</span><span class="sxs-lookup"><span data-stu-id="fef91-1296">The <xref:System.Linq.Expressions.BinaryExpression.Conversion%2A> property is `null`.</span></span>  
  
 <span data-ttu-id="fef91-1297">Ниже описывается метод реализации, тип узла и ликвидирован ли данный узел.</span><span class="sxs-lookup"><span data-stu-id="fef91-1297">The following information describes the implementing method, the node type, and whether a node is lifted.</span></span>  
  
#### <a name="implementing-method"></a><span data-ttu-id="fef91-1298">Реализация метода</span><span class="sxs-lookup"><span data-stu-id="fef91-1298">Implementing Method</span></span>  
 <span data-ttu-id="fef91-1299">Выбранный метод для операции реализации определяется следующими правилами:</span><span class="sxs-lookup"><span data-stu-id="fef91-1299">The following rules determine the chosen implementing method for the operation:</span></span>  
  
-   <span data-ttu-id="fef91-1300">Если `method` не `null` , и это отличный от void, `static` (`Shared` в Visual Basic) метода, принимающего два аргумента, он является методом реализации.</span><span class="sxs-lookup"><span data-stu-id="fef91-1300">If `method` is not `null` and it represents a non-void, `static` (`Shared` in Visual Basic) method that takes two arguments, it is the implementing method.</span></span>  
  
-   <span data-ttu-id="fef91-1301">В противном случае, если <xref:System.Linq.Expressions.Expression.Type%2A> свойству `left` или `right` представляет определяемый пользователем тип, который перегружает `XOR` оператор, <xref:System.Reflection.MethodInfo> , представляющий, что метод является методом реализации.</span><span class="sxs-lookup"><span data-stu-id="fef91-1301">Otherwise, if the <xref:System.Linq.Expressions.Expression.Type%2A> property of either `left` or `right` represents a user-defined type that overloads the `XOR` operator, the <xref:System.Reflection.MethodInfo> that represents that method is the implementing method.</span></span>  
  
-   <span data-ttu-id="fef91-1302">В противном случае, если `left`. Тип и `right`. Являются целыми числами или логическое типами, метод реализации является `null`.</span><span class="sxs-lookup"><span data-stu-id="fef91-1302">Otherwise, if `left`.Type and `right`.Type are integral or Boolean types, the implementing method is `null`.</span></span>  
  
#### <a name="node-type-and-lifted-versus-non-lifted"></a><span data-ttu-id="fef91-1303">Тип узла с ликвидацией или без</span><span class="sxs-lookup"><span data-stu-id="fef91-1303">Node Type and Lifted versus Non-Lifted</span></span>  
 <span data-ttu-id="fef91-1304">Если метод реализации не `null`:</span><span class="sxs-lookup"><span data-stu-id="fef91-1304">If the implementing method is not `null`:</span></span>  
  
-   <span data-ttu-id="fef91-1305">Если `left`. Тип и `right`. Тип могут быть присвоены соответствующие типы аргументов метода реализации, узел не удаляется.</span><span class="sxs-lookup"><span data-stu-id="fef91-1305">If `left`.Type and `right`.Type are assignable to the corresponding argument types of the implementing method, the node is not lifted.</span></span> <span data-ttu-id="fef91-1306">Тип узла — тип возвращаемого значения метода реализации.</span><span class="sxs-lookup"><span data-stu-id="fef91-1306">The type of the node is the return type of the implementing method.</span></span>  
  
-   <span data-ttu-id="fef91-1307">Если выполняются два следующих условия, узел удаляется, а тип узла — обнуляемый тип, соответствующий тип возвращаемого значения метода реализации:</span><span class="sxs-lookup"><span data-stu-id="fef91-1307">If the following two conditions are satisfied, the node is lifted and the type of the node is the nullable type that corresponds to the return type of the implementing method:</span></span>  
  
    -   <span data-ttu-id="fef91-1308">`left`. Тип и `right`. Тип: обоих типов значений, из которых хотя бы один допускает значения NULL и соответствующие типы, не допускающие значения null равны соответствующие типы аргументов метода реализации.</span><span class="sxs-lookup"><span data-stu-id="fef91-1308">`left`.Type and `right`.Type are both value types of which at least one is nullable and the corresponding non-nullable types are equal to the corresponding argument types of the implementing method.</span></span>  
  
    -   <span data-ttu-id="fef91-1309">Тип возвращаемого значения метода реализации является типом значения, не допускающие значения NULL.</span><span class="sxs-lookup"><span data-stu-id="fef91-1309">The return type of the implementing method is a non-nullable value type.</span></span>  
  
 <span data-ttu-id="fef91-1310">Если метод реализации `null`:</span><span class="sxs-lookup"><span data-stu-id="fef91-1310">If the implementing method is `null`:</span></span>  
  
-   <span data-ttu-id="fef91-1311">Если `left`. Тип и `right`. Тип: оба не поддерживающими значение NULL, узел не удаляется.</span><span class="sxs-lookup"><span data-stu-id="fef91-1311">If `left`.Type and `right`.Type are both non-nullable, the node is not lifted.</span></span> <span data-ttu-id="fef91-1312">Тип узла является типом результата из предварительно определенных `XOR` оператор.</span><span class="sxs-lookup"><span data-stu-id="fef91-1312">The type of the node is the result type of the predefined `XOR` operator.</span></span>  
  
-   <span data-ttu-id="fef91-1313">Если `left`. Тип и `right`. Тип: значение NULL, узел удаляется.</span><span class="sxs-lookup"><span data-stu-id="fef91-1313">If `left`.Type and `right`.Type are both nullable, the node is lifted.</span></span> <span data-ttu-id="fef91-1314">Тип узла — обнуляемый тип, соответствующий типу результата из предварительно определенных `XOR` оператор.</span><span class="sxs-lookup"><span data-stu-id="fef91-1314">The type of the node is the nullable type that corresponds to the result type of the predefined `XOR` operator.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="fef91-1315">Значение параметра <paramref name="left" /> или <paramref name="right" /> — <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fef91-1315">
              <paramref name="left" /> or <paramref name="right" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="fef91-1316">Значение параметра <paramref name="method" /> не равно <see langword="null" />, и метод, который оно представляет, возвращает <see langword="void" />, не является <see langword="static" /> (<see langword="Shared" /> в Visual Basic) и не принимает ровно два аргумента.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fef91-1316">
              <paramref name="method" /> is not <see langword="null" /> and the method it represents returns <see langword="void" />, is not <see langword="static" /> (<see langword="Shared" /> in Visual Basic), or does not take exactly two arguments.</span>
          </span>
        </exception>
        <exception cref="T:System.InvalidOperationException">
          <span data-ttu-id="fef91-1317">
            <paramref name="method" /> равно <see langword="null" />, а оператор <see langword="XOR" /> не определен для типов <paramref name="left" />.Type и <paramref name="right" />.Type.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fef91-1317">
              <paramref name="method" /> is <see langword="null" /> and the <see langword="XOR" /> operator is not defined for <paramref name="left" />.Type and <paramref name="right" />.Type.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <MemberGroup MemberName="ExclusiveOrAssign">
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="fef91-1318">Создает объект <see cref="T:System.Linq.Expressions.BinaryExpression" />, представляющий битовую операцию присваивания XOR.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fef91-1318">Creates a <see cref="T:System.Linq.Expressions.BinaryExpression" /> that represents a bitwise XOR assignment operation.</span>
          </span>
        </summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="ExclusiveOrAssign">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.BinaryExpression ExclusiveOrAssign (System.Linq.Expressions.Expression left, System.Linq.Expressions.Expression right);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.BinaryExpression ExclusiveOrAssign(class System.Linq.Expressions.Expression left, class System.Linq.Expressions.Expression right) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.ExclusiveOrAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function ExclusiveOrAssign (left As Expression, right As Expression) As BinaryExpression" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Linq::Expressions::BinaryExpression ^ ExclusiveOrAssign(System::Linq::Expressions::Expression ^ left, System::Linq::Expressions::Expression ^ right);" />
      <MemberSignature Language="F#" Value="static member ExclusiveOrAssign : System.Linq.Expressions.Expression * System.Linq.Expressions.Expression -&gt; System.Linq.Expressions.BinaryExpression" Usage="System.Linq.Expressions.Expression.ExclusiveOrAssign (left, right)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.BinaryExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="left" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="right" Type="System.Linq.Expressions.Expression" />
      </Parameters>
      <Docs>
        <param name="left">
          <span data-ttu-id="fef91-1319">Объект <see cref="T:System.Linq.Expressions.Expression" />, который следует задать в качестве значения свойства <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fef91-1319">An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> property equal to.</span>
          </span>
        </param>
        <param name="right">
          <span data-ttu-id="fef91-1320">Объект <see cref="T:System.Linq.Expressions.Expression" />, который следует задать в качестве значения свойства <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fef91-1320">An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> property equal to.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="fef91-1321">Создает объект <see cref="T:System.Linq.Expressions.BinaryExpression" />, представляющий битовую операцию присваивания XOR с использованием <c>op_ExclusiveOr</c> для определяемых пользователем типов.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fef91-1321">Creates a <see cref="T:System.Linq.Expressions.BinaryExpression" /> that represents a bitwise XOR assignment operation, using <c>op_ExclusiveOr</c> for user-defined types.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="fef91-1322">Выражение <see cref="T:System.Linq.Expressions.BinaryExpression" /> со свойством<see cref="P:System.Linq.Expressions.Expression.NodeType" />, равным <see cref="F:System.Linq.Expressions.ExpressionType.ExclusiveOrAssign" />, и свойствами <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> и <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />, для которых заданы указанные значения.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fef91-1322">A <see cref="T:System.Linq.Expressions.BinaryExpression" /> that has the <see cref="P:System.Linq.Expressions.Expression.NodeType" /> property equal to <see cref="F:System.Linq.Expressions.ExpressionType.ExclusiveOrAssign" /> and the <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> and <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> properties set to the specified values.</span>
          </span>
        </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ExclusiveOrAssign">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.BinaryExpression ExclusiveOrAssign (System.Linq.Expressions.Expression left, System.Linq.Expressions.Expression right, System.Reflection.MethodInfo method);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.BinaryExpression ExclusiveOrAssign(class System.Linq.Expressions.Expression left, class System.Linq.Expressions.Expression right, class System.Reflection.MethodInfo method) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.ExclusiveOrAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function ExclusiveOrAssign (left As Expression, right As Expression, method As MethodInfo) As BinaryExpression" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Linq::Expressions::BinaryExpression ^ ExclusiveOrAssign(System::Linq::Expressions::Expression ^ left, System::Linq::Expressions::Expression ^ right, System::Reflection::MethodInfo ^ method);" />
      <MemberSignature Language="F#" Value="static member ExclusiveOrAssign : System.Linq.Expressions.Expression * System.Linq.Expressions.Expression * System.Reflection.MethodInfo -&gt; System.Linq.Expressions.BinaryExpression" Usage="System.Linq.Expressions.Expression.ExclusiveOrAssign (left, right, method)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.BinaryExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="left" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="right" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="method" Type="System.Reflection.MethodInfo" />
      </Parameters>
      <Docs>
        <param name="left">
          <span data-ttu-id="fef91-1323">Объект <see cref="T:System.Linq.Expressions.Expression" />, который следует задать в качестве значения свойства <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fef91-1323">An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> property equal to.</span>
          </span>
        </param>
        <param name="right">
          <span data-ttu-id="fef91-1324">Объект <see cref="T:System.Linq.Expressions.Expression" />, который следует задать в качестве значения свойства <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fef91-1324">An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> property equal to.</span>
          </span>
        </param>
        <param name="method">
          <span data-ttu-id="fef91-1325">Объект <see cref="T:System.Reflection.MethodInfo" />, который следует задать в качестве значения свойства <see cref="P:System.Linq.Expressions.BinaryExpression.Method" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fef91-1325">A <see cref="T:System.Reflection.MethodInfo" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Method" /> property equal to.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="fef91-1326">Создает объект <see cref="T:System.Linq.Expressions.BinaryExpression" />, представляющий битовую операцию присваивания XOR с использованием <c>op_ExclusiveOr</c> для определяемых пользователем типов.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fef91-1326">Creates a <see cref="T:System.Linq.Expressions.BinaryExpression" /> that represents a bitwise XOR assignment operation, using <c>op_ExclusiveOr</c> for user-defined types.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="fef91-1327">Выражение <see cref="T:System.Linq.Expressions.BinaryExpression" /> со свойством <see cref="P:System.Linq.Expressions.Expression.NodeType" />, равным <see cref="F:System.Linq.Expressions.ExpressionType.ExclusiveOrAssign" />, и свойствами <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />, <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> и <see cref="P:System.Linq.Expressions.BinaryExpression.Method" />, для которых заданы указанные значения.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fef91-1327">A <see cref="T:System.Linq.Expressions.BinaryExpression" /> that has the <see cref="P:System.Linq.Expressions.Expression.NodeType" /> property equal to <see cref="F:System.Linq.Expressions.ExpressionType.ExclusiveOrAssign" /> and the <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />, <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />, and <see cref="P:System.Linq.Expressions.BinaryExpression.Method" /> properties set to the specified values.</span>
          </span>
        </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ExclusiveOrAssign">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.BinaryExpression ExclusiveOrAssign (System.Linq.Expressions.Expression left, System.Linq.Expressions.Expression right, System.Reflection.MethodInfo method, System.Linq.Expressions.LambdaExpression conversion);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.BinaryExpression ExclusiveOrAssign(class System.Linq.Expressions.Expression left, class System.Linq.Expressions.Expression right, class System.Reflection.MethodInfo method, class System.Linq.Expressions.LambdaExpression conversion) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.ExclusiveOrAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo,System.Linq.Expressions.LambdaExpression)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function ExclusiveOrAssign (left As Expression, right As Expression, method As MethodInfo, conversion As LambdaExpression) As BinaryExpression" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Linq::Expressions::BinaryExpression ^ ExclusiveOrAssign(System::Linq::Expressions::Expression ^ left, System::Linq::Expressions::Expression ^ right, System::Reflection::MethodInfo ^ method, System::Linq::Expressions::LambdaExpression ^ conversion);" />
      <MemberSignature Language="F#" Value="static member ExclusiveOrAssign : System.Linq.Expressions.Expression * System.Linq.Expressions.Expression * System.Reflection.MethodInfo * System.Linq.Expressions.LambdaExpression -&gt; System.Linq.Expressions.BinaryExpression" Usage="System.Linq.Expressions.Expression.ExclusiveOrAssign (left, right, method, conversion)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.BinaryExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="left" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="right" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="method" Type="System.Reflection.MethodInfo" />
        <Parameter Name="conversion" Type="System.Linq.Expressions.LambdaExpression" />
      </Parameters>
      <Docs>
        <param name="left">
          <span data-ttu-id="fef91-1328">Объект <see cref="T:System.Linq.Expressions.Expression" />, который следует задать в качестве значения свойства <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fef91-1328">An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> property equal to.</span>
          </span>
        </param>
        <param name="right">
          <span data-ttu-id="fef91-1329">Объект <see cref="T:System.Linq.Expressions.Expression" />, который следует задать в качестве значения свойства <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fef91-1329">An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> property equal to.</span>
          </span>
        </param>
        <param name="method">
          <span data-ttu-id="fef91-1330">Объект <see cref="T:System.Reflection.MethodInfo" />, который следует задать в качестве значения свойства <see cref="P:System.Linq.Expressions.BinaryExpression.Method" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fef91-1330">A <see cref="T:System.Reflection.MethodInfo" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Method" /> property equal to.</span>
          </span>
        </param>
        <param name="conversion">
          <span data-ttu-id="fef91-1331">Объект <see cref="T:System.Linq.Expressions.LambdaExpression" />, который следует задать в качестве значения свойства <see cref="P:System.Linq.Expressions.BinaryExpression.Conversion" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fef91-1331">A <see cref="T:System.Linq.Expressions.LambdaExpression" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Conversion" /> property equal to.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="fef91-1332">Создает объект <see cref="T:System.Linq.Expressions.BinaryExpression" />, представляющий битовую операцию присваивания XOR с использованием <c>op_ExclusiveOr</c> для определяемых пользователем типов.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fef91-1332">Creates a <see cref="T:System.Linq.Expressions.BinaryExpression" /> that represents a bitwise XOR assignment operation, using <c>op_ExclusiveOr</c> for user-defined types.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="fef91-1333">Выражение <see cref="T:System.Linq.Expressions.BinaryExpression" />, содержащее свойство <see cref="P:System.Linq.Expressions.Expression.NodeType" />, равное <see cref="F:System.Linq.Expressions.ExpressionType.ExclusiveOrAssign" /> и <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />, <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />, <see cref="P:System.Linq.Expressions.BinaryExpression.Method" />, и свойства <see cref="P:System.Linq.Expressions.BinaryExpression.Conversion" />, для которых заданы указанные значения.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fef91-1333">A <see cref="T:System.Linq.Expressions.BinaryExpression" /> that has the <see cref="P:System.Linq.Expressions.Expression.NodeType" /> property equal to <see cref="F:System.Linq.Expressions.ExpressionType.ExclusiveOrAssign" /> and the <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />, <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />, <see cref="P:System.Linq.Expressions.BinaryExpression.Method" />, and <see cref="P:System.Linq.Expressions.BinaryExpression.Conversion" /> properties set to the specified values.</span>
          </span>
        </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="Field">
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="fef91-1334">Создает объект <see cref="T:System.Linq.Expressions.MemberExpression" />, представляющий доступ к полю.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fef91-1334">Creates a <see cref="T:System.Linq.Expressions.MemberExpression" /> that represents accessing a field.</span>
          </span>
        </summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Field">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.MemberExpression Field (System.Linq.Expressions.Expression expression, System.Reflection.FieldInfo field);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.MemberExpression Field(class System.Linq.Expressions.Expression expression, class System.Reflection.FieldInfo field) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.Field(System.Linq.Expressions.Expression,System.Reflection.FieldInfo)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Linq::Expressions::MemberExpression ^ Field(System::Linq::Expressions::Expression ^ expression, System::Reflection::FieldInfo ^ field);" />
      <MemberSignature Language="F#" Value="static member Field : System.Linq.Expressions.Expression * System.Reflection.FieldInfo -&gt; System.Linq.Expressions.MemberExpression" Usage="System.Linq.Expressions.Expression.Field (expression, field)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.MemberExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="expression" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="field" Type="System.Reflection.FieldInfo" />
      </Parameters>
      <Docs>
        <param name="expression">
          <span data-ttu-id="fef91-1335">Объект <see cref="T:System.Linq.Expressions.Expression" />, который следует задать в качестве значения свойства <see cref="P:System.Linq.Expressions.MemberExpression.Expression" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fef91-1335">An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.MemberExpression.Expression" /> property equal to.</span>
          </span>
          <span data-ttu-id="fef91-1336">Для <see langword="static" /> (<see langword="Shared" /> в Visual Basic) параметр <c>expression</c> должен иметь значение <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fef91-1336">For <see langword="static" /> (<see langword="Shared" /> in Visual Basic), <c>expression</c> must be <see langword="null" />.</span>
          </span>
        </param>
        <param name="field">
          <span data-ttu-id="fef91-1337">Объект <see cref="T:System.Reflection.FieldInfo" />, который следует задать в качестве значения свойства <see cref="P:System.Linq.Expressions.MemberExpression.Member" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fef91-1337">The <see cref="T:System.Reflection.FieldInfo" /> to set the <see cref="P:System.Linq.Expressions.MemberExpression.Member" /> property equal to.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="fef91-1338">Создает объект <see cref="T:System.Linq.Expressions.MemberExpression" />, представляющий доступ к полю.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fef91-1338">Creates a <see cref="T:System.Linq.Expressions.MemberExpression" /> that represents accessing a field.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="fef91-1339">Выражение <see cref="T:System.Linq.Expressions.MemberExpression" /> со свойством<see cref="P:System.Linq.Expressions.Expression.NodeType" />, равным <see cref="F:System.Linq.Expressions.ExpressionType.MemberAccess" />, и свойствами <see cref="P:System.Linq.Expressions.MemberExpression.Expression" /> и <see cref="P:System.Linq.Expressions.MemberExpression.Member" />, для которых заданы указанные значения.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fef91-1339">A <see cref="T:System.Linq.Expressions.MemberExpression" /> that has the <see cref="P:System.Linq.Expressions.Expression.NodeType" /> property equal to <see cref="F:System.Linq.Expressions.ExpressionType.MemberAccess" /> and the <see cref="P:System.Linq.Expressions.MemberExpression.Expression" /> and <see cref="P:System.Linq.Expressions.MemberExpression.Member" /> properties set to the specified values.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="fef91-1340"><xref:System.Linq.Expressions.Expression.Type%2A> Результирующего <xref:System.Linq.Expressions.MemberExpression> равен <xref:System.Reflection.FieldInfo.FieldType%2A> свойство `field`.</span><span class="sxs-lookup"><span data-stu-id="fef91-1340">The <xref:System.Linq.Expressions.Expression.Type%2A> property of the resulting <xref:System.Linq.Expressions.MemberExpression> is equal to the <xref:System.Reflection.FieldInfo.FieldType%2A> property of `field`.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="fef91-1341">
            <paramref name="field" /> — <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fef91-1341">
              <paramref name="field" /> is <see langword="null" />.</span>
          </span>
          <span data-ttu-id="fef91-1342">-или-</span>
          <span class="sxs-lookup">
            <span data-stu-id="fef91-1342">-or-</span>
          </span>
          <span data-ttu-id="fef91-1343">Поле, представленное параметром <paramref name="field" />, не является <see langword="static" /> (<see langword="Shared" /> в Visual Basic), и <paramref name="expression" /> равно <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fef91-1343">The field represented by <paramref name="field" /> is not <see langword="static" /> (<see langword="Shared" /> in Visual Basic) and <paramref name="expression" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="fef91-1344">Параметр <paramref name="expression" />.Type не назначается объявляемому типу поля, представленному параметром <paramref name="field" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fef91-1344">
              <paramref name="expression" />.Type is not assignable to the declaring type of the field represented by <paramref name="field" />.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="Field">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.MemberExpression Field (System.Linq.Expressions.Expression expression, string fieldName);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.MemberExpression Field(class System.Linq.Expressions.Expression expression, string fieldName) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.Field(System.Linq.Expressions.Expression,System.String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Linq::Expressions::MemberExpression ^ Field(System::Linq::Expressions::Expression ^ expression, System::String ^ fieldName);" />
      <MemberSignature Language="F#" Value="static member Field : System.Linq.Expressions.Expression * string -&gt; System.Linq.Expressions.MemberExpression" Usage="System.Linq.Expressions.Expression.Field (expression, fieldName)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.MemberExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="expression" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="fieldName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="expression">
          <span data-ttu-id="fef91-1345">
            <see cref="T:System.Linq.Expressions.Expression" />, где <see cref="P:System.Linq.Expressions.Expression.Type" /> содержит поле с именем, заданным параметром <c>fieldName</c>.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fef91-1345">An <see cref="T:System.Linq.Expressions.Expression" /> whose <see cref="P:System.Linq.Expressions.Expression.Type" /> contains a field named <c>fieldName</c>.</span>
          </span>
          <span data-ttu-id="fef91-1346">Для статических полей допускается значение NULL.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fef91-1346">This can be null for static fields.</span>
          </span>
        </param>
        <param name="fieldName">
          <span data-ttu-id="fef91-1347">Имя поля для доступа.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fef91-1347">The name of a field to be accessed.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="fef91-1348">Создает <see cref="T:System.Linq.Expressions.MemberExpression" />, который представляет доступ к полю, которому предоставлено имя поля.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fef91-1348">Creates a <see cref="T:System.Linq.Expressions.MemberExpression" /> that represents accessing a field given the name of the field.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="fef91-1349">Выражение <see cref="T:System.Linq.Expressions.MemberExpression" />, содержащее свойство <see cref="P:System.Linq.Expressions.Expression.NodeType" />, равное <see cref="F:System.Linq.Expressions.ExpressionType.MemberAccess" />, свойству <see cref="P:System.Linq.Expressions.MemberExpression.Expression" /> присвоено значение <paramref name="expression" />, а свойству <see cref="P:System.Linq.Expressions.MemberExpression.Member" /> присвоено значение <see cref="T:System.Reflection.FieldInfo" />, представляющее поле, обозначенное с помощью параметра <paramref name="fieldName" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fef91-1349">A <see cref="T:System.Linq.Expressions.MemberExpression" /> that has the <see cref="P:System.Linq.Expressions.Expression.NodeType" /> property equal to <see cref="F:System.Linq.Expressions.ExpressionType.MemberAccess" />, the <see cref="P:System.Linq.Expressions.MemberExpression.Expression" /> property set to <paramref name="expression" />, and the <see cref="P:System.Linq.Expressions.MemberExpression.Member" /> property set to the <see cref="T:System.Reflection.FieldInfo" /> that represents the field denoted by <paramref name="fieldName" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="fef91-1350"><xref:System.Linq.Expressions.Expression.Type%2A> Результирующего <xref:System.Linq.Expressions.MemberExpression> равен <xref:System.Reflection.FieldInfo.FieldType%2A> свойство <xref:System.Reflection.FieldInfo> , представляющий поле, обозначенное с помощью `fieldName`.</span><span class="sxs-lookup"><span data-stu-id="fef91-1350">The <xref:System.Linq.Expressions.Expression.Type%2A> property of the resulting <xref:System.Linq.Expressions.MemberExpression> is equal to the <xref:System.Reflection.FieldInfo.FieldType%2A> property of the <xref:System.Reflection.FieldInfo> that represents the field denoted by `fieldName`.</span></span>  
  
 <span data-ttu-id="fef91-1351">Этот метод осуществляет `expression`. Тип и его базовых типов, для поля с именем `fieldName`.</span><span class="sxs-lookup"><span data-stu-id="fef91-1351">This method searches `expression`.Type and its base types for a field that has the name `fieldName`.</span></span> <span data-ttu-id="fef91-1352">Открытые поля, отдается предпочтение по не открытых полей.</span><span class="sxs-lookup"><span data-stu-id="fef91-1352">Public fields are given preference over non-public fields.</span></span> <span data-ttu-id="fef91-1353">При обнаружении соответствующего поля, этот метод передает `expression` и <xref:System.Reflection.FieldInfo> , представляющий это поле <xref:System.Linq.Expressions.Expression.Field%2A>.</span><span class="sxs-lookup"><span data-stu-id="fef91-1353">If a matching field is found, this method passes `expression` and the <xref:System.Reflection.FieldInfo> that represents that field to <xref:System.Linq.Expressions.Expression.Field%2A>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="fef91-1354">В следующем примере кода показано, как создать выражение, представляющее доступ к полю.</span><span class="sxs-lookup"><span data-stu-id="fef91-1354">The following code example shows how to create an expression that represents accessing a field.</span></span>  
  
 [!code-csharp[System.Linq.Expressions.ExpressionDev10#37](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.linq.expressions.expressiondev10/cs/program.cs#37)]
 [!code-vb[System.Linq.Expressions.ExpressionDev10#37](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.linq.expressions.expressiondev10/vb/module1.vb#37)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="fef91-1355">Значение параметра <paramref name="expression" /> или <paramref name="fieldName" /> — <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fef91-1355">
              <paramref name="expression" /> or <paramref name="fieldName" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="fef91-1356">Не определено поле с именем <paramref name="fieldName" /> для параметра <paramref name="expression" />.Type или его базовых типов.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fef91-1356">No field named <paramref name="fieldName" /> is defined in <paramref name="expression" />.Type or its base types.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="Field">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.MemberExpression Field (System.Linq.Expressions.Expression expression, Type type, string fieldName);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.MemberExpression Field(class System.Linq.Expressions.Expression expression, class System.Type type, string fieldName) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.Field(System.Linq.Expressions.Expression,System.Type,System.String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Linq::Expressions::MemberExpression ^ Field(System::Linq::Expressions::Expression ^ expression, Type ^ type, System::String ^ fieldName);" />
      <MemberSignature Language="F#" Value="static member Field : System.Linq.Expressions.Expression * Type * string -&gt; System.Linq.Expressions.MemberExpression" Usage="System.Linq.Expressions.Expression.Field (expression, type, fieldName)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.MemberExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="expression" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="type" Type="System.Type" />
        <Parameter Name="fieldName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="expression">
          <span data-ttu-id="fef91-1357">Объект, содержащий поле.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fef91-1357">The containing object of the field.</span>
          </span>
          <span data-ttu-id="fef91-1358">Для статических полей допускается значение NULL.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fef91-1358">This can be null for static fields.</span>
          </span>
        </param>
        <param name="type">
          <span data-ttu-id="fef91-1359">Объект <see cref="P:System.Linq.Expressions.Expression.Type" />, содержащий поле.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fef91-1359">The <see cref="P:System.Linq.Expressions.Expression.Type" /> that contains the field.</span>
          </span>
        </param>
        <param name="fieldName">
          <span data-ttu-id="fef91-1360">Поле для доступа.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fef91-1360">The field to be accessed.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="fef91-1361">Создает объект <see cref="T:System.Linq.Expressions.MemberExpression" />, представляющий доступ к полю.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fef91-1361">Creates a <see cref="T:System.Linq.Expressions.MemberExpression" /> that represents accessing a field.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="fef91-1362">Созданный <see cref="T:System.Linq.Expressions.MemberExpression" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fef91-1362">The created <see cref="T:System.Linq.Expressions.MemberExpression" />.</span>
          </span>
        </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetActionType">
      <MemberSignature Language="C#" Value="public static Type GetActionType (params Type[] typeArgs);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Type GetActionType(class System.Type[] typeArgs) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.GetActionType(System.Type[])" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function GetActionType (ParamArray typeArgs As Type()) As Type" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static Type ^ GetActionType(... cli::array &lt;Type ^&gt; ^ typeArgs);" />
      <MemberSignature Language="F#" Value="static member GetActionType : Type[] -&gt; Type" Usage="System.Linq.Expressions.Expression.GetActionType typeArgs" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Type</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="typeArgs" Type="System.Type[]">
          <Attributes>
            <Attribute>
              <AttributeName>System.ParamArray</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="typeArgs">
          <span data-ttu-id="fef91-1363">Массив до шестнадцати объектов <see cref="T:System.Type" />, указывающих аргументы типа для типа делегата <see langword="System.Action" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fef91-1363">An array of up to sixteen <see cref="T:System.Type" /> objects that specify the type arguments for the <see langword="System.Action" /> delegate type.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="fef91-1364">Создает объект <see cref="T:System.Type" />, представляющий универсальный тип делегата <c>System.Action</c> с заданными аргументами типа.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fef91-1364">Creates a <see cref="T:System.Type" /> object that represents a generic <c>System.Action</c> delegate type that has specific type arguments.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="fef91-1365">Тип делегата <c>System.Action</c> с заданными аргументами типа.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fef91-1365">The type of a <c>System.Action</c> delegate that has the specified type arguments.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="fef91-1366">Например если элементы `typeArgs` представляют типы `T1…Tn`, полученный в результате <xref:System.Type> представляет сконструированного типа делегата `System.Action<T1,…,Tn>` в C# или `System.Action(Of T1,…,Tn)` в Visual Basic.</span><span class="sxs-lookup"><span data-stu-id="fef91-1366">As an example, if the elements of `typeArgs` represent the types `T1…Tn`, the resulting <xref:System.Type> object represents the constructed delegate type `System.Action<T1,…,Tn>` in C# or `System.Action(Of T1,…,Tn)` in Visual Basic.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="fef91-1367">Параметр <paramref name="typeArgs" /> содержит более шестнадцати элементов.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fef91-1367">
              <paramref name="typeArgs" /> contains more than sixteen elements.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="fef91-1368">
            <paramref name="typeArgs" /> — <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fef91-1368">
              <paramref name="typeArgs" /> is <see langword="null" />.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="GetDelegateType">
      <MemberSignature Language="C#" Value="public static Type GetDelegateType (params Type[] typeArgs);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Type GetDelegateType(class System.Type[] typeArgs) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.GetDelegateType(System.Type[])" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function GetDelegateType (ParamArray typeArgs As Type()) As Type" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static Type ^ GetDelegateType(... cli::array &lt;Type ^&gt; ^ typeArgs);" />
      <MemberSignature Language="F#" Value="static member GetDelegateType : Type[] -&gt; Type" Usage="System.Linq.Expressions.Expression.GetDelegateType typeArgs" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Type</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="typeArgs" Type="System.Type[]">
          <Attributes>
            <Attribute>
              <AttributeName>System.ParamArray</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="typeArgs">
          <span data-ttu-id="fef91-1369">Тип аргументов делегата.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fef91-1369">The type arguments of the delegate.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="fef91-1370">Создает объект <see cref="P:System.Linq.Expressions.Expression.Type" />, представляющий универсальный тип делегата <c>System.Func</c> или <c>System.Action</c> с заданными аргументами типа.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fef91-1370">Gets a <see cref="P:System.Linq.Expressions.Expression.Type" /> object that represents a generic <c>System.Func</c> or <c>System.Action</c> delegate type that has specific type arguments.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="fef91-1371">Тип делегата.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fef91-1371">The delegate type.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="fef91-1372">Аргумент последнего типа определяет тип возвращаемого значения делегата.</span><span class="sxs-lookup"><span data-stu-id="fef91-1372">The last type argument determines the return type of the delegate.</span></span> <span data-ttu-id="fef91-1373">Если действие ни Func достаточно большой, он создает пользовательский тип делегата.</span><span class="sxs-lookup"><span data-stu-id="fef91-1373">If no Func or Action is large enough, it will generate a custom delegate type.</span></span>  
  
 <span data-ttu-id="fef91-1374">Как и в случае с делегатом Func, последний аргумент имеет тип возвращаемого значения.</span><span class="sxs-lookup"><span data-stu-id="fef91-1374">As with Func, the last argument is the return type.</span></span> <span data-ttu-id="fef91-1375">Для создания действия оно может быть присвоено System.Void.</span><span class="sxs-lookup"><span data-stu-id="fef91-1375">It can be set to System.Void to produce an Action.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetFuncType">
      <MemberSignature Language="C#" Value="public static Type GetFuncType (params Type[] typeArgs);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Type GetFuncType(class System.Type[] typeArgs) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.GetFuncType(System.Type[])" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function GetFuncType (ParamArray typeArgs As Type()) As Type" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static Type ^ GetFuncType(... cli::array &lt;Type ^&gt; ^ typeArgs);" />
      <MemberSignature Language="F#" Value="static member GetFuncType : Type[] -&gt; Type" Usage="System.Linq.Expressions.Expression.GetFuncType typeArgs" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Type</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="typeArgs" Type="System.Type[]">
          <Attributes>
            <Attribute>
              <AttributeName>System.ParamArray</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="typeArgs">
          <span data-ttu-id="fef91-1376">Массив от одного до семнадцати объектов <see cref="T:System.Type" />, указывающих аргументы типа для типа делегата <see langword="System.Func" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fef91-1376">An array of one to seventeen <see cref="T:System.Type" /> objects that specify the type arguments for the <see langword="System.Func" /> delegate type.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="fef91-1377">Создает объект <see cref="P:System.Linq.Expressions.Expression.Type" />, представляющий универсальный тип делегата <c>System.Func</c> с заданными аргументами типа.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fef91-1377">Creates a <see cref="P:System.Linq.Expressions.Expression.Type" /> object that represents a generic <c>System.Func</c> delegate type that has specific type arguments.</span>
          </span>
          <span data-ttu-id="fef91-1378">Аргумент последнего типа задает тип возврата созданного делегата.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fef91-1378">The last type argument specifies the return type of the created delegate.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="fef91-1379">Тип делегата <c>System.Func</c> с заданными аргументами типа.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fef91-1379">The type of a <c>System.Func</c> delegate that has the specified type arguments.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="fef91-1380">`typeArgs` должен содержать по крайней мере один и более семнадцати элементов.</span><span class="sxs-lookup"><span data-stu-id="fef91-1380">`typeArgs` must contain at least one and at most seventeen elements.</span></span>  
  
 <span data-ttu-id="fef91-1381">Например если элементы `typeArgs` представляют типы `T1…Tn`, полученный в результате <xref:System.Type> представляет сконструированного типа делегата `System.Func<T1,…,Tn>` в C# или `System.Func(Of T1,…,Tn)` в Visual Basic.</span><span class="sxs-lookup"><span data-stu-id="fef91-1381">As an example, if the elements of `typeArgs` represent the types `T1…Tn`, the resulting <xref:System.Type> object represents the constructed delegate type `System.Func<T1,…,Tn>` in C# or `System.Func(Of T1,…,Tn)` in Visual Basic.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="fef91-1382">
            <paramref name="typeArgs" /> содержит менее одного или более семнадцати элементов.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fef91-1382">
              <paramref name="typeArgs" /> contains fewer than one or more than seventeen elements.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="fef91-1383">
            <paramref name="typeArgs" /> — <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fef91-1383">
              <paramref name="typeArgs" /> is <see langword="null" />.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <MemberGroup MemberName="Goto">
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="fef91-1384">Создает объект <see cref="T:System.Linq.Expressions.GotoExpression" />, представляющий оператор goto.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fef91-1384">Creates a <see cref="T:System.Linq.Expressions.GotoExpression" /> representing a "go to" statement.</span>
          </span>
        </summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Goto">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.GotoExpression Goto (System.Linq.Expressions.LabelTarget target);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.GotoExpression Goto(class System.Linq.Expressions.LabelTarget target) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.Goto(System.Linq.Expressions.LabelTarget)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Goto (target As LabelTarget) As GotoExpression" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Linq::Expressions::GotoExpression ^ Goto(System::Linq::Expressions::LabelTarget ^ target);" />
      <MemberSignature Language="F#" Value="static member Goto : System.Linq.Expressions.LabelTarget -&gt; System.Linq.Expressions.GotoExpression" Usage="System.Linq.Expressions.Expression.Goto target" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.GotoExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="target" Type="System.Linq.Expressions.LabelTarget" />
      </Parameters>
      <Docs>
        <param name="target">
          <span data-ttu-id="fef91-1385">Объект <see cref="T:System.Linq.Expressions.LabelTarget" />, на который будет выполнен переход по <see cref="T:System.Linq.Expressions.GotoExpression" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fef91-1385">The <see cref="T:System.Linq.Expressions.LabelTarget" /> that the <see cref="T:System.Linq.Expressions.GotoExpression" /> will jump to.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="fef91-1386">Создает объект <see cref="T:System.Linq.Expressions.GotoExpression" />, представляющий оператор goto.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fef91-1386">Creates a <see cref="T:System.Linq.Expressions.GotoExpression" /> representing a "go to" statement.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="fef91-1387">Объект <see cref="T:System.Linq.Expressions.GotoExpression" />, свойство <see cref="P:System.Linq.Expressions.GotoExpression.Kind" /> которого имеет значение Goto, свойство <see cref="P:System.Linq.Expressions.GotoExpression.Target" /> — указанное значение, а при переходе целевой метке передается значение NULL.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fef91-1387">A <see cref="T:System.Linq.Expressions.GotoExpression" /> with <see cref="P:System.Linq.Expressions.GotoExpression.Kind" /> equal to Goto, the <see cref="P:System.Linq.Expressions.GotoExpression.Target" /> property set to the specified value, and a null value to be passed to the target label upon jumping.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 <span data-ttu-id="fef91-1388">В следующем примере показано, как создать выражение, содержащее <xref:System.Linq.Expressions.GotoExpression> объекта.</span><span class="sxs-lookup"><span data-stu-id="fef91-1388">The following example demonstrates how to create an expression that contains a <xref:System.Linq.Expressions.GotoExpression> object.</span></span>  
  
 [!code-csharp[System.Linq.Expressions.ExpressionDev10#45](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.linq.expressions.expressiondev10/cs/program.cs#45)]
 [!code-vb[System.Linq.Expressions.ExpressionDev10#45](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.linq.expressions.expressiondev10/vb/module1.vb#45)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Goto">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.GotoExpression Goto (System.Linq.Expressions.LabelTarget target, System.Linq.Expressions.Expression value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.GotoExpression Goto(class System.Linq.Expressions.LabelTarget target, class System.Linq.Expressions.Expression value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.Goto(System.Linq.Expressions.LabelTarget,System.Linq.Expressions.Expression)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Goto (target As LabelTarget, value As Expression) As GotoExpression" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Linq::Expressions::GotoExpression ^ Goto(System::Linq::Expressions::LabelTarget ^ target, System::Linq::Expressions::Expression ^ value);" />
      <MemberSignature Language="F#" Value="static member Goto : System.Linq.Expressions.LabelTarget * System.Linq.Expressions.Expression -&gt; System.Linq.Expressions.GotoExpression" Usage="System.Linq.Expressions.Expression.Goto (target, value)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.GotoExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="target" Type="System.Linq.Expressions.LabelTarget" />
        <Parameter Name="value" Type="System.Linq.Expressions.Expression" />
      </Parameters>
      <Docs>
        <param name="target">
          <span data-ttu-id="fef91-1389">Объект <see cref="T:System.Linq.Expressions.LabelTarget" />, на который будет выполнен переход по <see cref="T:System.Linq.Expressions.GotoExpression" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fef91-1389">The <see cref="T:System.Linq.Expressions.LabelTarget" /> that the <see cref="T:System.Linq.Expressions.GotoExpression" /> will jump to.</span>
          </span>
        </param>
        <param name="value">
          <span data-ttu-id="fef91-1390">Значение, передаваемое связанной метке при переходе.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fef91-1390">The value that will be passed to the associated label upon jumping.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="fef91-1391">Создает объект <see cref="T:System.Linq.Expressions.GotoExpression" />, представляющий оператор goto.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fef91-1391">Creates a <see cref="T:System.Linq.Expressions.GotoExpression" /> representing a "go to" statement.</span>
          </span>
          <span data-ttu-id="fef91-1392">Можно указать значение, передаваемое метке при переходе.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fef91-1392">The value passed to the label upon jumping can be specified.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="fef91-1393">Выражение <see cref="T:System.Linq.Expressions.GotoExpression" />, свойство <see cref="P:System.Linq.Expressions.GotoExpression.Kind" /> которого имеет значение goto, свойство <see cref="P:System.Linq.Expressions.GotoExpression.Target" /> — <paramref name="target" />, а при переходе целевой метке передается значение <paramref name="value" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fef91-1393">A <see cref="T:System.Linq.Expressions.GotoExpression" /> with <see cref="P:System.Linq.Expressions.GotoExpression.Kind" /> equal to Goto, the <see cref="P:System.Linq.Expressions.GotoExpression.Target" /> property set to <paramref name="target" />, and <paramref name="value" /> to be passed to the target label upon jumping.</span>
          </span>
        </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Goto">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.GotoExpression Goto (System.Linq.Expressions.LabelTarget target, Type type);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.GotoExpression Goto(class System.Linq.Expressions.LabelTarget target, class System.Type type) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.Goto(System.Linq.Expressions.LabelTarget,System.Type)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Linq::Expressions::GotoExpression ^ Goto(System::Linq::Expressions::LabelTarget ^ target, Type ^ type);" />
      <MemberSignature Language="F#" Value="static member Goto : System.Linq.Expressions.LabelTarget * Type -&gt; System.Linq.Expressions.GotoExpression" Usage="System.Linq.Expressions.Expression.Goto (target, type)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.GotoExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="target" Type="System.Linq.Expressions.LabelTarget" />
        <Parameter Name="type" Type="System.Type" />
      </Parameters>
      <Docs>
        <param name="target">
          <span data-ttu-id="fef91-1394">Объект <see cref="T:System.Linq.Expressions.LabelTarget" />, на который будет выполнен переход по <see cref="T:System.Linq.Expressions.GotoExpression" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fef91-1394">The <see cref="T:System.Linq.Expressions.LabelTarget" /> that the <see cref="T:System.Linq.Expressions.GotoExpression" /> will jump to.</span>
          </span>
        </param>
        <param name="type">
          <span data-ttu-id="fef91-1395">Объект <see cref="T:System.Type" />, который следует задать в качестве значения свойства <see cref="P:System.Linq.Expressions.Expression.Type" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fef91-1395">An <see cref="T:System.Type" /> to set the <see cref="P:System.Linq.Expressions.Expression.Type" /> property equal to.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="fef91-1396">Создает выражение <see cref="T:System.Linq.Expressions.GotoExpression" />, представляющее оператор goto с указанным типом.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fef91-1396">Creates a <see cref="T:System.Linq.Expressions.GotoExpression" /> representing a "go to" statement with the specified type.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="fef91-1397">Объект <see cref="T:System.Linq.Expressions.GotoExpression" />, свойство <see cref="P:System.Linq.Expressions.GotoExpression.Kind" /> которого имеет значение Goto, свойство <see cref="P:System.Linq.Expressions.GotoExpression.Target" /> — указанное значение, свойство <see cref="P:System.Linq.Expressions.Expression.Type" /> — значение в параметре <paramref name="type" />, а при переходе целевой метке передается значение NULL.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fef91-1397">A <see cref="T:System.Linq.Expressions.GotoExpression" /> with <see cref="P:System.Linq.Expressions.GotoExpression.Kind" /> equal to Goto, the <see cref="P:System.Linq.Expressions.GotoExpression.Target" /> property set to the specified value, the <see cref="P:System.Linq.Expressions.Expression.Type" /> property set to <paramref name="type" />, and a null value to be passed to the target label upon jumping.</span>
          </span>
        </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Goto">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.GotoExpression Goto (System.Linq.Expressions.LabelTarget target, System.Linq.Expressions.Expression value, Type type);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.GotoExpression Goto(class System.Linq.Expressions.LabelTarget target, class System.Linq.Expressions.Expression value, class System.Type type) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.Goto(System.Linq.Expressions.LabelTarget,System.Linq.Expressions.Expression,System.Type)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Linq::Expressions::GotoExpression ^ Goto(System::Linq::Expressions::LabelTarget ^ target, System::Linq::Expressions::Expression ^ value, Type ^ type);" />
      <MemberSignature Language="F#" Value="static member Goto : System.Linq.Expressions.LabelTarget * System.Linq.Expressions.Expression * Type -&gt; System.Linq.Expressions.GotoExpression" Usage="System.Linq.Expressions.Expression.Goto (target, value, type)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.GotoExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="target" Type="System.Linq.Expressions.LabelTarget" />
        <Parameter Name="value" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="type" Type="System.Type" />
      </Parameters>
      <Docs>
        <param name="target">
          <span data-ttu-id="fef91-1398">Объект <see cref="T:System.Linq.Expressions.LabelTarget" />, на который будет выполнен переход по <see cref="T:System.Linq.Expressions.GotoExpression" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fef91-1398">The <see cref="T:System.Linq.Expressions.LabelTarget" /> that the <see cref="T:System.Linq.Expressions.GotoExpression" /> will jump to.</span>
          </span>
        </param>
        <param name="value">
          <span data-ttu-id="fef91-1399">Значение, передаваемое связанной метке при переходе.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fef91-1399">The value that will be passed to the associated label upon jumping.</span>
          </span>
        </param>
        <param name="type">
          <span data-ttu-id="fef91-1400">Объект <see cref="T:System.Type" />, который следует задать в качестве значения свойства <see cref="P:System.Linq.Expressions.Expression.Type" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fef91-1400">An <see cref="T:System.Type" /> to set the <see cref="P:System.Linq.Expressions.Expression.Type" /> property equal to.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="fef91-1401">Создает выражение <see cref="T:System.Linq.Expressions.GotoExpression" />, представляющее оператор goto с указанным типом.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fef91-1401">Creates a <see cref="T:System.Linq.Expressions.GotoExpression" /> representing a "go to" statement with the specified type.</span>
          </span>
          <span data-ttu-id="fef91-1402">Можно указать значение, передаваемое метке при переходе.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fef91-1402">The value passed to the label upon jumping can be specified.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="fef91-1403">Объект <see cref="T:System.Linq.Expressions.GotoExpression" />, свойство <see cref="P:System.Linq.Expressions.GotoExpression.Kind" /> которого имеет значение Goto, свойство <see cref="P:System.Linq.Expressions.GotoExpression.Target" /> — значение в параметре <paramref name="target" />, свойство <see cref="P:System.Linq.Expressions.Expression.Type" /> — значение в параметре <paramref name="type" />, а при переходе целевой метке передается значение в параметре <paramref name="value" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fef91-1403">A <see cref="T:System.Linq.Expressions.GotoExpression" /> with <see cref="P:System.Linq.Expressions.GotoExpression.Kind" /> equal to Goto, the <see cref="P:System.Linq.Expressions.GotoExpression.Target" /> property set to <paramref name="target" />, the <see cref="P:System.Linq.Expressions.Expression.Type" /> property set to <paramref name="type" />, and <paramref name="value" /> to be passed to the target label upon jumping.</span>
          </span>
        </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="GreaterThan">
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="fef91-1404">Создает <see cref="T:System.Linq.Expressions.BinaryExpression" />, представляющее числовое сравнение объектов "больше, чем".</span>
          <span class="sxs-lookup">
            <span data-stu-id="fef91-1404">Creates a <see cref="T:System.Linq.Expressions.BinaryExpression" /> that represents a "greater than" numeric comparison.</span>
          </span>
        </summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="GreaterThan">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.BinaryExpression GreaterThan (System.Linq.Expressions.Expression left, System.Linq.Expressions.Expression right);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.BinaryExpression GreaterThan(class System.Linq.Expressions.Expression left, class System.Linq.Expressions.Expression right) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.GreaterThan(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function GreaterThan (left As Expression, right As Expression) As BinaryExpression" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Linq::Expressions::BinaryExpression ^ GreaterThan(System::Linq::Expressions::Expression ^ left, System::Linq::Expressions::Expression ^ right);" />
      <MemberSignature Language="F#" Value="static member GreaterThan : System.Linq.Expressions.Expression * System.Linq.Expressions.Expression -&gt; System.Linq.Expressions.BinaryExpression" Usage="System.Linq.Expressions.Expression.GreaterThan (left, right)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.BinaryExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="left" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="right" Type="System.Linq.Expressions.Expression" />
      </Parameters>
      <Docs>
        <param name="left">
          <span data-ttu-id="fef91-1405">Объект <see cref="T:System.Linq.Expressions.Expression" />, который следует задать в качестве значения свойства <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fef91-1405">An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> property equal to.</span>
          </span>
        </param>
        <param name="right">
          <span data-ttu-id="fef91-1406">Объект <see cref="T:System.Linq.Expressions.Expression" />, который следует задать в качестве значения свойства <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fef91-1406">An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> property equal to.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="fef91-1407">Создает <see cref="T:System.Linq.Expressions.BinaryExpression" />, представляющее числовое сравнение объектов "больше, чем".</span>
          <span class="sxs-lookup">
            <span data-stu-id="fef91-1407">Creates a <see cref="T:System.Linq.Expressions.BinaryExpression" /> that represents a "greater than" numeric comparison.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="fef91-1408">Выражение <see cref="T:System.Linq.Expressions.BinaryExpression" /> со свойством<see cref="P:System.Linq.Expressions.Expression.NodeType" />, равным <see cref="F:System.Linq.Expressions.ExpressionType.GreaterThan" />, и свойствами <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> и <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />, для которых заданы указанные значения.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fef91-1408">A <see cref="T:System.Linq.Expressions.BinaryExpression" /> that has the <see cref="P:System.Linq.Expressions.Expression.NodeType" /> property equal to <see cref="F:System.Linq.Expressions.ExpressionType.GreaterThan" /> and the <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> and <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> properties set to the specified values.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="fef91-1409">Полученный в результате <xref:System.Linq.Expressions.BinaryExpression> имеет <xref:System.Linq.Expressions.BinaryExpression.Method%2A> свойство присвоено метод реализации.</span><span class="sxs-lookup"><span data-stu-id="fef91-1409">The resulting <xref:System.Linq.Expressions.BinaryExpression> has the <xref:System.Linq.Expressions.BinaryExpression.Method%2A> property set to the implementing method.</span></span> <span data-ttu-id="fef91-1410"><xref:System.Linq.Expressions.Expression.Type%2A> Свойству присваивается тип узла.</span><span class="sxs-lookup"><span data-stu-id="fef91-1410">The <xref:System.Linq.Expressions.Expression.Type%2A> property is set to the type of the node.</span></span> <span data-ttu-id="fef91-1411">Если узел удаляется, <xref:System.Linq.Expressions.BinaryExpression.IsLifted%2A> свойство `true`.</span><span class="sxs-lookup"><span data-stu-id="fef91-1411">If the node is lifted, the <xref:System.Linq.Expressions.BinaryExpression.IsLifted%2A> property is `true`.</span></span> <span data-ttu-id="fef91-1412">В противном случае содержит значение `false`.</span><span class="sxs-lookup"><span data-stu-id="fef91-1412">Otherwise, it is `false`.</span></span> <span data-ttu-id="fef91-1413">Свойство <xref:System.Linq.Expressions.BinaryExpression.IsLiftedToNull%2A> всегда имеет значение `false`.</span><span class="sxs-lookup"><span data-stu-id="fef91-1413">The <xref:System.Linq.Expressions.BinaryExpression.IsLiftedToNull%2A> property is always `false`.</span></span> <span data-ttu-id="fef91-1414">Значение свойства <xref:System.Linq.Expressions.BinaryExpression.Conversion%2A> — `null`.</span><span class="sxs-lookup"><span data-stu-id="fef91-1414">The <xref:System.Linq.Expressions.BinaryExpression.Conversion%2A> property is `null`.</span></span>  
  
 <span data-ttu-id="fef91-1415">Ниже описывается метод реализации, тип узла и ликвидирован ли данный узел.</span><span class="sxs-lookup"><span data-stu-id="fef91-1415">The following information describes the implementing method, the node type, and whether a node is lifted.</span></span>  
  
#### <a name="implementing-method"></a><span data-ttu-id="fef91-1416">Реализация метода</span><span class="sxs-lookup"><span data-stu-id="fef91-1416">Implementing Method</span></span>  
 <span data-ttu-id="fef91-1417">Следующие правила определяют метод реализации для операции:</span><span class="sxs-lookup"><span data-stu-id="fef91-1417">The following rules determine the implementing method for the operation:</span></span>  
  
-   <span data-ttu-id="fef91-1418">Если <xref:System.Linq.Expressions.Expression.Type%2A> свойству `left` или `right` представляет определяемый пользователем тип, который перегружает оператор «больше» <xref:System.Reflection.MethodInfo> , представляющий, что метод является методом реализации.</span><span class="sxs-lookup"><span data-stu-id="fef91-1418">If the <xref:System.Linq.Expressions.Expression.Type%2A> property of either `left` or `right` represents a user-defined type that overloads the "greater than" operator, the <xref:System.Reflection.MethodInfo> that represents that method is the implementing method.</span></span>  
  
-   <span data-ttu-id="fef91-1419">В противном случае, если `left`. Тип и `right`. Тип: числовые типы, метод реализации является `null`.</span><span class="sxs-lookup"><span data-stu-id="fef91-1419">Otherwise, if `left`.Type and `right`.Type are numeric types, the implementing method is `null`.</span></span>  
  
#### <a name="node-type-and-lifted-versus-non-lifted"></a><span data-ttu-id="fef91-1420">Тип узла с ликвидацией или без</span><span class="sxs-lookup"><span data-stu-id="fef91-1420">Node Type and Lifted versus Non-Lifted</span></span>  
 <span data-ttu-id="fef91-1421">Если метод реализации не `null`:</span><span class="sxs-lookup"><span data-stu-id="fef91-1421">If the implementing method is not `null`:</span></span>  
  
-   <span data-ttu-id="fef91-1422">Если `left`. Тип и `right`. Тип могут быть присвоены соответствующие типы аргументов метода реализации, узел не удаляется.</span><span class="sxs-lookup"><span data-stu-id="fef91-1422">If `left`.Type and `right`.Type are assignable to the corresponding argument types of the implementing method, the node is not lifted.</span></span> <span data-ttu-id="fef91-1423">Тип узла — тип возвращаемого значения метода реализации.</span><span class="sxs-lookup"><span data-stu-id="fef91-1423">The type of the node is the return type of the implementing method.</span></span>  
  
-   <span data-ttu-id="fef91-1424">Если удовлетворяются следующие два условия, узел удаляется, и тип узла — <xref:System.Boolean>:</span><span class="sxs-lookup"><span data-stu-id="fef91-1424">If the following two conditions are satisfied, the node is lifted and the type of the node is <xref:System.Boolean>:</span></span>  
  
    -   <span data-ttu-id="fef91-1425">`left`. Тип и `right`. Тип: обоих типов значений, из которых хотя бы один допускает значения NULL и соответствующие типы, не допускающие значения null равны соответствующие типы аргументов метода реализации.</span><span class="sxs-lookup"><span data-stu-id="fef91-1425">`left`.Type and `right`.Type are both value types of which at least one is nullable and the corresponding non-nullable types are equal to the corresponding argument types of the implementing method.</span></span>  
  
    -   <span data-ttu-id="fef91-1426">Тип возвращаемого значения метода реализации — <xref:System.Boolean>.</span><span class="sxs-lookup"><span data-stu-id="fef91-1426">The return type of the implementing method is <xref:System.Boolean>.</span></span>  
  
 <span data-ttu-id="fef91-1427">Если метод реализации `null`:</span><span class="sxs-lookup"><span data-stu-id="fef91-1427">If the implementing method is `null`:</span></span>  
  
-   <span data-ttu-id="fef91-1428">Если `left`. Тип и `right`. Тип: оба не поддерживающими значение NULL, узел не удаляется.</span><span class="sxs-lookup"><span data-stu-id="fef91-1428">If `left`.Type and `right`.Type are both non-nullable, the node is not lifted.</span></span> <span data-ttu-id="fef91-1429">Тип узла — <xref:System.Boolean>.</span><span class="sxs-lookup"><span data-stu-id="fef91-1429">The type of the node is <xref:System.Boolean>.</span></span>  
  
-   <span data-ttu-id="fef91-1430">Если `left`. Тип и `right`. Тип: значение NULL, узел удаляется.</span><span class="sxs-lookup"><span data-stu-id="fef91-1430">If `left`.Type and `right`.Type are both nullable, the node is lifted.</span></span> <span data-ttu-id="fef91-1431">Тип узла — <xref:System.Boolean>.</span><span class="sxs-lookup"><span data-stu-id="fef91-1431">The type of the node is <xref:System.Boolean>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="fef91-1432">В следующем примере кода показано, как создать выражение, которое сравнивает два целых числа.</span><span class="sxs-lookup"><span data-stu-id="fef91-1432">The following code example shows how to create an expression that compares two integers.</span></span>  
  
 [!code-csharp[System.Linq.Expressions.ExpressionDev10#10](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.linq.expressions.expressiondev10/cs/program.cs#10)]
 [!code-vb[System.Linq.Expressions.ExpressionDev10#10](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.linq.expressions.expressiondev10/vb/module1.vb#10)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="fef91-1433">Значение параметра <paramref name="left" /> или <paramref name="right" /> — <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fef91-1433">
              <paramref name="left" /> or <paramref name="right" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.InvalidOperationException">
          <span data-ttu-id="fef91-1434">Оператор "больше, чем" не определен для типов <paramref name="left" />.Type и <paramref name="right" />.Type.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fef91-1434">The "greater than" operator is not defined for <paramref name="left" />.Type and <paramref name="right" />.Type.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="GreaterThan">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.BinaryExpression GreaterThan (System.Linq.Expressions.Expression left, System.Linq.Expressions.Expression right, bool liftToNull, System.Reflection.MethodInfo method);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.BinaryExpression GreaterThan(class System.Linq.Expressions.Expression left, class System.Linq.Expressions.Expression right, bool liftToNull, class System.Reflection.MethodInfo method) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.GreaterThan(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Boolean,System.Reflection.MethodInfo)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function GreaterThan (left As Expression, right As Expression, liftToNull As Boolean, method As MethodInfo) As BinaryExpression" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Linq::Expressions::BinaryExpression ^ GreaterThan(System::Linq::Expressions::Expression ^ left, System::Linq::Expressions::Expression ^ right, bool liftToNull, System::Reflection::MethodInfo ^ method);" />
      <MemberSignature Language="F#" Value="static member GreaterThan : System.Linq.Expressions.Expression * System.Linq.Expressions.Expression * bool * System.Reflection.MethodInfo -&gt; System.Linq.Expressions.BinaryExpression" Usage="System.Linq.Expressions.Expression.GreaterThan (left, right, liftToNull, method)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.BinaryExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="left" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="right" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="liftToNull" Type="System.Boolean" />
        <Parameter Name="method" Type="System.Reflection.MethodInfo" />
      </Parameters>
      <Docs>
        <param name="left">
          <span data-ttu-id="fef91-1435">Объект <see cref="T:System.Linq.Expressions.Expression" />, который следует задать в качестве значения свойства <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fef91-1435">An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> property equal to.</span>
          </span>
        </param>
        <param name="right">
          <span data-ttu-id="fef91-1436">Объект <see cref="T:System.Linq.Expressions.Expression" />, который следует задать в качестве значения свойства <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fef91-1436">An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> property equal to.</span>
          </span>
        </param>
        <param name="liftToNull">
          <span data-ttu-id="fef91-1437">
            <see langword="true" />, чтобы задать для <see cref="P:System.Linq.Expressions.BinaryExpression.IsLiftedToNull" />значение <see langword="true" />; <see langword="false" />, чтобы задать для <see cref="P:System.Linq.Expressions.BinaryExpression.IsLiftedToNull" /> значение <see langword="false" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fef91-1437">
              <see langword="true" /> to set <see cref="P:System.Linq.Expressions.BinaryExpression.IsLiftedToNull" /> to <see langword="true" />; <see langword="false" /> to set <see cref="P:System.Linq.Expressions.BinaryExpression.IsLiftedToNull" /> to <see langword="false" />.</span>
          </span>
        </param>
        <param name="method">
          <span data-ttu-id="fef91-1438">Объект <see cref="T:System.Reflection.MethodInfo" />, который следует задать в качестве значения свойства <see cref="P:System.Linq.Expressions.BinaryExpression.Method" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fef91-1438">A <see cref="T:System.Reflection.MethodInfo" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Method" /> property equal to.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="fef91-1439">Создает <see cref="T:System.Linq.Expressions.BinaryExpression" />, представляющее числовое сравнение объектов "больше, чем".</span>
          <span class="sxs-lookup">
            <span data-stu-id="fef91-1439">Creates a <see cref="T:System.Linq.Expressions.BinaryExpression" /> that represents a "greater than" numeric comparison.</span>
          </span>
          <span data-ttu-id="fef91-1440">Может быть указан метод реализации.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fef91-1440">The implementing method can be specified.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="fef91-1441">Выражение <see cref="T:System.Linq.Expressions.BinaryExpression" />, содержащее свойство <see cref="P:System.Linq.Expressions.Expression.NodeType" />, равное <see cref="F:System.Linq.Expressions.ExpressionType.GreaterThan" /> и <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />, <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />, <see cref="P:System.Linq.Expressions.BinaryExpression.IsLiftedToNull" />, и свойства <see cref="P:System.Linq.Expressions.BinaryExpression.Method" />, для которых заданы указанные значения.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fef91-1441">A <see cref="T:System.Linq.Expressions.BinaryExpression" /> that has the <see cref="P:System.Linq.Expressions.Expression.NodeType" /> property equal to <see cref="F:System.Linq.Expressions.ExpressionType.GreaterThan" /> and the <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />, <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />, <see cref="P:System.Linq.Expressions.BinaryExpression.IsLiftedToNull" />, and <see cref="P:System.Linq.Expressions.BinaryExpression.Method" /> properties set to the specified values.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="fef91-1442">Полученный в результате <xref:System.Linq.Expressions.BinaryExpression> имеет <xref:System.Linq.Expressions.BinaryExpression.Method%2A> свойство присвоено метод реализации.</span><span class="sxs-lookup"><span data-stu-id="fef91-1442">The resulting <xref:System.Linq.Expressions.BinaryExpression> has the <xref:System.Linq.Expressions.BinaryExpression.Method%2A> property set to the implementing method.</span></span> <span data-ttu-id="fef91-1443"><xref:System.Linq.Expressions.Expression.Type%2A> Свойству присваивается тип узла.</span><span class="sxs-lookup"><span data-stu-id="fef91-1443">The <xref:System.Linq.Expressions.Expression.Type%2A> property is set to the type of the node.</span></span> <span data-ttu-id="fef91-1444">Если узел удаляется, <xref:System.Linq.Expressions.BinaryExpression.IsLifted%2A> свойство `true` и <xref:System.Linq.Expressions.BinaryExpression.IsLiftedToNull%2A> равно `liftToNull`.</span><span class="sxs-lookup"><span data-stu-id="fef91-1444">If the node is lifted, the <xref:System.Linq.Expressions.BinaryExpression.IsLifted%2A> property is `true` and the <xref:System.Linq.Expressions.BinaryExpression.IsLiftedToNull%2A> property is equal to `liftToNull`.</span></span> <span data-ttu-id="fef91-1445">В противном случае они оба `false`.</span><span class="sxs-lookup"><span data-stu-id="fef91-1445">Otherwise, they are both `false`.</span></span> <span data-ttu-id="fef91-1446">Значение свойства <xref:System.Linq.Expressions.BinaryExpression.Conversion%2A> — `null`.</span><span class="sxs-lookup"><span data-stu-id="fef91-1446">The <xref:System.Linq.Expressions.BinaryExpression.Conversion%2A> property is `null`.</span></span>  
  
 <span data-ttu-id="fef91-1447">Ниже описывается метод реализации, тип узла и ликвидирован ли данный узел.</span><span class="sxs-lookup"><span data-stu-id="fef91-1447">The following information describes the implementing method, the node type, and whether a node is lifted.</span></span>  
  
#### <a name="implementing-method"></a><span data-ttu-id="fef91-1448">Реализация метода</span><span class="sxs-lookup"><span data-stu-id="fef91-1448">Implementing Method</span></span>  
 <span data-ttu-id="fef91-1449">Следующие правила определяют метод реализации для операции:</span><span class="sxs-lookup"><span data-stu-id="fef91-1449">The following rules determine the implementing method for the operation :</span></span>  
  
-   <span data-ttu-id="fef91-1450">Если `method` не `null` , и это отличный от void, `static` (`Shared` в Visual Basic) метода, принимающего два аргумента, он является методом реализации.</span><span class="sxs-lookup"><span data-stu-id="fef91-1450">If `method` is not `null` and it represents a non-void, `static` (`Shared` in Visual Basic) method that takes two arguments, it is the implementing method.</span></span>  
  
-   <span data-ttu-id="fef91-1451">В противном случае, если <xref:System.Linq.Expressions.Expression.Type%2A> свойству `left` или `right` представляет определяемый пользователем тип, который перегружает оператор «больше» <xref:System.Reflection.MethodInfo> , представляющий, что метод является методом реализации.</span><span class="sxs-lookup"><span data-stu-id="fef91-1451">Otherwise, if the <xref:System.Linq.Expressions.Expression.Type%2A> property of either `left` or `right` represents a user-defined type that overloads the "greater than" operator, the <xref:System.Reflection.MethodInfo> that represents that method is the implementing method.</span></span>  
  
-   <span data-ttu-id="fef91-1452">В противном случае, если `left`. Тип и `right`. Тип: числовые типы, метод реализации является `null`.</span><span class="sxs-lookup"><span data-stu-id="fef91-1452">Otherwise, if `left`.Type and `right`.Type are numeric types, the implementing method is `null`.</span></span>  
  
#### <a name="node-type-and-lifted-versus-non-lifted"></a><span data-ttu-id="fef91-1453">Тип узла с ликвидацией или без</span><span class="sxs-lookup"><span data-stu-id="fef91-1453">Node Type and Lifted versus Non-Lifted</span></span>  
 <span data-ttu-id="fef91-1454">Если метод реализации не `null`:</span><span class="sxs-lookup"><span data-stu-id="fef91-1454">If the implementing method is not `null`:</span></span>  
  
-   <span data-ttu-id="fef91-1455">Если `left`. Тип и `right`. Тип могут быть присвоены соответствующие типы аргументов метода реализации, узел не удаляется.</span><span class="sxs-lookup"><span data-stu-id="fef91-1455">If `left`.Type and `right`.Type are assignable to the corresponding argument types of the implementing method, the node is not lifted.</span></span> <span data-ttu-id="fef91-1456">Тип узла — тип возвращаемого значения метода реализации.</span><span class="sxs-lookup"><span data-stu-id="fef91-1456">The type of the node is the return type of the implementing method.</span></span>  
  
-   <span data-ttu-id="fef91-1457">Если выполняются два следующих условия, узел удаляется; Кроме того, допускающий значение NULL тип узла <xref:System.Boolean> Если `liftToNull` — `true` или <xref:System.Boolean> Если `liftToNull` — `false`:</span><span class="sxs-lookup"><span data-stu-id="fef91-1457">If the following two conditions are satisfied, the node is lifted; also, the type of the node is nullable <xref:System.Boolean> if `liftToNull` is `true` or <xref:System.Boolean> if `liftToNull` is `false`:</span></span>  
  
    -   <span data-ttu-id="fef91-1458">`left`. Тип и `right`. Тип: обоих типов значений, из которых хотя бы один допускает значения NULL и соответствующие типы, не допускающие значения null равны соответствующие типы аргументов метода реализации.</span><span class="sxs-lookup"><span data-stu-id="fef91-1458">`left`.Type and `right`.Type are both value types of which at least one is nullable and the corresponding non-nullable types are equal to the corresponding argument types of the implementing method.</span></span>  
  
    -   <span data-ttu-id="fef91-1459">Тип возвращаемого значения метода реализации — <xref:System.Boolean>.</span><span class="sxs-lookup"><span data-stu-id="fef91-1459">The return type of the implementing method is <xref:System.Boolean>.</span></span>  
  
 <span data-ttu-id="fef91-1460">Если метод реализации `null`:</span><span class="sxs-lookup"><span data-stu-id="fef91-1460">If the implementing method is `null`:</span></span>  
  
-   <span data-ttu-id="fef91-1461">Если `left`. Тип и `right`. Тип: оба не поддерживающими значение NULL, узел не удаляется.</span><span class="sxs-lookup"><span data-stu-id="fef91-1461">If `left`.Type and `right`.Type are both non-nullable, the node is not lifted.</span></span> <span data-ttu-id="fef91-1462">Тип узла — <xref:System.Boolean>.</span><span class="sxs-lookup"><span data-stu-id="fef91-1462">The type of the node is <xref:System.Boolean>.</span></span>  
  
-   <span data-ttu-id="fef91-1463">Если `left`. Тип и `right`. Тип: значение NULL, узел удаляется.</span><span class="sxs-lookup"><span data-stu-id="fef91-1463">If `left`.Type and `right`.Type are both nullable, the node is lifted.</span></span> <span data-ttu-id="fef91-1464">Тип узла, допускающие значения NULL <xref:System.Boolean> Если `liftToNull` — `true` или <xref:System.Boolean> Если `liftToNull` является `false`.</span><span class="sxs-lookup"><span data-stu-id="fef91-1464">The type of the node is nullable <xref:System.Boolean> if `liftToNull` is `true` or <xref:System.Boolean> if `liftToNull` is `false`.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="fef91-1465">Значение параметра <paramref name="left" /> или <paramref name="right" /> — <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fef91-1465">
              <paramref name="left" /> or <paramref name="right" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="fef91-1466">Значение параметра <paramref name="method" /> не равно <see langword="null" />, и метод, который оно представляет, возвращает <see langword="void" />, не является <see langword="static" /> (<see langword="Shared" /> в Visual Basic) и не принимает ровно два аргумента.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fef91-1466">
              <paramref name="method" /> is not <see langword="null" /> and the method it represents returns <see langword="void" />, is not <see langword="static" /> (<see langword="Shared" /> in Visual Basic), or does not take exactly two arguments.</span>
          </span>
        </exception>
        <exception cref="T:System.InvalidOperationException">
          <span data-ttu-id="fef91-1467">
            <paramref name="method" /> is <see langword="null" />, а оператор "больше, чем" не определен для типов <paramref name="left" />.Type и <paramref name="right" />.Type.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fef91-1467">
              <paramref name="method" /> is <see langword="null" /> and the "greater than" operator is not defined for <paramref name="left" />.Type and <paramref name="right" />.Type.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <MemberGroup MemberName="GreaterThanOrEqual">
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="fef91-1468">Создает <see cref="T:System.Linq.Expressions.BinaryExpression" />, представляющий числовое сравнение объектов "больше или равно".</span>
          <span class="sxs-lookup">
            <span data-stu-id="fef91-1468">Creates a <see cref="T:System.Linq.Expressions.BinaryExpression" /> that represents a "greater than or equal" numeric comparison.</span>
          </span>
        </summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="GreaterThanOrEqual">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.BinaryExpression GreaterThanOrEqual (System.Linq.Expressions.Expression left, System.Linq.Expressions.Expression right);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.BinaryExpression GreaterThanOrEqual(class System.Linq.Expressions.Expression left, class System.Linq.Expressions.Expression right) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.GreaterThanOrEqual(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function GreaterThanOrEqual (left As Expression, right As Expression) As BinaryExpression" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Linq::Expressions::BinaryExpression ^ GreaterThanOrEqual(System::Linq::Expressions::Expression ^ left, System::Linq::Expressions::Expression ^ right);" />
      <MemberSignature Language="F#" Value="static member GreaterThanOrEqual : System.Linq.Expressions.Expression * System.Linq.Expressions.Expression -&gt; System.Linq.Expressions.BinaryExpression" Usage="System.Linq.Expressions.Expression.GreaterThanOrEqual (left, right)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.BinaryExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="left" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="right" Type="System.Linq.Expressions.Expression" />
      </Parameters>
      <Docs>
        <param name="left">
          <span data-ttu-id="fef91-1469">Объект <see cref="T:System.Linq.Expressions.Expression" />, который следует задать в качестве значения свойства <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fef91-1469">An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> property equal to.</span>
          </span>
        </param>
        <param name="right">
          <span data-ttu-id="fef91-1470">Объект <see cref="T:System.Linq.Expressions.Expression" />, который следует задать в качестве значения свойства <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fef91-1470">An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> property equal to.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="fef91-1471">Создает <see cref="T:System.Linq.Expressions.BinaryExpression" />, представляющий числовое сравнение объектов "больше или равно".</span>
          <span class="sxs-lookup">
            <span data-stu-id="fef91-1471">Creates a <see cref="T:System.Linq.Expressions.BinaryExpression" /> that represents a "greater than or equal" numeric comparison.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="fef91-1472">Выражение <see cref="T:System.Linq.Expressions.BinaryExpression" /> со свойством<see cref="P:System.Linq.Expressions.Expression.NodeType" />, равным <see cref="F:System.Linq.Expressions.ExpressionType.GreaterThanOrEqual" />, и свойствами <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> и <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />, для которых заданы указанные значения.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fef91-1472">A <see cref="T:System.Linq.Expressions.BinaryExpression" /> that has the <see cref="P:System.Linq.Expressions.Expression.NodeType" /> property equal to <see cref="F:System.Linq.Expressions.ExpressionType.GreaterThanOrEqual" /> and the <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> and <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> properties set to the specified values.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="fef91-1473">Полученный в результате <xref:System.Linq.Expressions.BinaryExpression> имеет <xref:System.Linq.Expressions.BinaryExpression.Method%2A> свойство присвоено метод реализации.</span><span class="sxs-lookup"><span data-stu-id="fef91-1473">The resulting <xref:System.Linq.Expressions.BinaryExpression> has the <xref:System.Linq.Expressions.BinaryExpression.Method%2A> property set to the implementing method.</span></span> <span data-ttu-id="fef91-1474"><xref:System.Linq.Expressions.Expression.Type%2A> Свойству присваивается тип узла.</span><span class="sxs-lookup"><span data-stu-id="fef91-1474">The <xref:System.Linq.Expressions.Expression.Type%2A> property is set to the type of the node.</span></span> <span data-ttu-id="fef91-1475">Если узел удаляется, <xref:System.Linq.Expressions.BinaryExpression.IsLifted%2A> свойство `true`.</span><span class="sxs-lookup"><span data-stu-id="fef91-1475">If the node is lifted, the <xref:System.Linq.Expressions.BinaryExpression.IsLifted%2A> property is `true`.</span></span> <span data-ttu-id="fef91-1476">В противном случае содержит значение `false`.</span><span class="sxs-lookup"><span data-stu-id="fef91-1476">Otherwise, it is `false`.</span></span> <span data-ttu-id="fef91-1477">Свойство <xref:System.Linq.Expressions.BinaryExpression.IsLiftedToNull%2A> всегда имеет значение `false`.</span><span class="sxs-lookup"><span data-stu-id="fef91-1477">The <xref:System.Linq.Expressions.BinaryExpression.IsLiftedToNull%2A> property is always `false`.</span></span> <span data-ttu-id="fef91-1478">Значение свойства <xref:System.Linq.Expressions.BinaryExpression.Conversion%2A> — `null`.</span><span class="sxs-lookup"><span data-stu-id="fef91-1478">The <xref:System.Linq.Expressions.BinaryExpression.Conversion%2A> property is `null`.</span></span>  
  
 <span data-ttu-id="fef91-1479">Ниже описывается метод реализации, тип узла и ликвидирован ли данный узел.</span><span class="sxs-lookup"><span data-stu-id="fef91-1479">The following information describes the implementing method, the node type, and whether a node is lifted.</span></span>  
  
#### <a name="implementing-method"></a><span data-ttu-id="fef91-1480">Реализация метода</span><span class="sxs-lookup"><span data-stu-id="fef91-1480">Implementing Method</span></span>  
 <span data-ttu-id="fef91-1481">Следующие правила определяют метод реализации для операции:</span><span class="sxs-lookup"><span data-stu-id="fef91-1481">The following rules determine the implementing method for the operation:</span></span>  
  
-   <span data-ttu-id="fef91-1482">Если <xref:System.Linq.Expressions.Expression.Type%2A> свойству `left` или `right` представляет определяемый пользователем тип, который перегружает оператор «больше или равно» <xref:System.Reflection.MethodInfo> , представляющий, что метод является методом реализации.</span><span class="sxs-lookup"><span data-stu-id="fef91-1482">If the <xref:System.Linq.Expressions.Expression.Type%2A> property of either `left` or `right` represents a user-defined type that overloads the "greater than or equal" operator, the <xref:System.Reflection.MethodInfo> that represents that method is the implementing method.</span></span>  
  
-   <span data-ttu-id="fef91-1483">В противном случае, если `left`. Тип и `right`. Тип: числовые типы, метод реализации является `null`.</span><span class="sxs-lookup"><span data-stu-id="fef91-1483">Otherwise, if `left`.Type and `right`.Type are numeric types, the implementing method is `null`.</span></span>  
  
#### <a name="node-type-and-lifted-versus-non-lifted"></a><span data-ttu-id="fef91-1484">Тип узла с ликвидацией или без</span><span class="sxs-lookup"><span data-stu-id="fef91-1484">Node Type and Lifted versus Non-Lifted</span></span>  
 <span data-ttu-id="fef91-1485">Если метод реализации не `null`:</span><span class="sxs-lookup"><span data-stu-id="fef91-1485">If the implementing method is not `null`:</span></span>  
  
-   <span data-ttu-id="fef91-1486">Если `left`. Тип и `right`. Тип могут быть присвоены соответствующие типы аргументов метода реализации, узел не удаляется.</span><span class="sxs-lookup"><span data-stu-id="fef91-1486">If `left`.Type and `right`.Type are assignable to the corresponding argument types of the implementing method, the node is not lifted.</span></span> <span data-ttu-id="fef91-1487">Тип узла — тип возвращаемого значения метода реализации.</span><span class="sxs-lookup"><span data-stu-id="fef91-1487">The type of the node is the return type of the implementing method.</span></span>  
  
-   <span data-ttu-id="fef91-1488">Если удовлетворяются следующие два условия, узел удаляется, и тип узла — <xref:System.Boolean>:</span><span class="sxs-lookup"><span data-stu-id="fef91-1488">If the following two conditions are satisfied, the node is lifted and the type of the node is <xref:System.Boolean>:</span></span>  
  
    -   <span data-ttu-id="fef91-1489">`left`. Тип и `right`. Тип: обоих типов значений, из которых хотя бы один допускает значения NULL и соответствующие типы, не допускающие значения null равны соответствующие типы аргументов метода реализации.</span><span class="sxs-lookup"><span data-stu-id="fef91-1489">`left`.Type and `right`.Type are both value types of which at least one is nullable and the corresponding non-nullable types are equal to the corresponding argument types of the implementing method.</span></span>  
  
    -   <span data-ttu-id="fef91-1490">Тип возвращаемого значения метода реализации — <xref:System.Boolean>.</span><span class="sxs-lookup"><span data-stu-id="fef91-1490">The return type of the implementing method is <xref:System.Boolean>.</span></span>  
  
 <span data-ttu-id="fef91-1491">Если метод реализации `null`:</span><span class="sxs-lookup"><span data-stu-id="fef91-1491">If the implementing method is `null`:</span></span>  
  
-   <span data-ttu-id="fef91-1492">Если `left`. Тип и `right`. Тип: оба не поддерживающими значение NULL, узел не удаляется.</span><span class="sxs-lookup"><span data-stu-id="fef91-1492">If `left`.Type and `right`.Type are both non-nullable, the node is not lifted.</span></span> <span data-ttu-id="fef91-1493">Тип узла — <xref:System.Boolean>.</span><span class="sxs-lookup"><span data-stu-id="fef91-1493">The type of the node is <xref:System.Boolean>.</span></span>  
  
-   <span data-ttu-id="fef91-1494">Если `left`. Тип и `right`. Тип: значение NULL, узел удаляется.</span><span class="sxs-lookup"><span data-stu-id="fef91-1494">If `left`.Type and `right`.Type are both nullable, the node is lifted.</span></span> <span data-ttu-id="fef91-1495">Тип узла — <xref:System.Boolean>.</span><span class="sxs-lookup"><span data-stu-id="fef91-1495">The type of the node is <xref:System.Boolean>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="fef91-1496">В следующем примере кода показано, как создать выражение, которое сравнивает два целых числа.</span><span class="sxs-lookup"><span data-stu-id="fef91-1496">The following code example shows how to create an expression that compares two integers.</span></span>  
  
 [!code-csharp[System.Linq.Expressions.ExpressionDev10#11](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.linq.expressions.expressiondev10/cs/program.cs#11)]
 [!code-vb[System.Linq.Expressions.ExpressionDev10#11](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.linq.expressions.expressiondev10/vb/module1.vb#11)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="fef91-1497">Значение параметра <paramref name="left" /> или <paramref name="right" /> — <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fef91-1497">
              <paramref name="left" /> or <paramref name="right" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.InvalidOperationException">
          <span data-ttu-id="fef91-1498">Оператор "больше или равно" не определен для типов <paramref name="left" />.Type и <paramref name="right" />.Type.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fef91-1498">The "greater than or equal" operator is not defined for <paramref name="left" />.Type and <paramref name="right" />.Type.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="GreaterThanOrEqual">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.BinaryExpression GreaterThanOrEqual (System.Linq.Expressions.Expression left, System.Linq.Expressions.Expression right, bool liftToNull, System.Reflection.MethodInfo method);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.BinaryExpression GreaterThanOrEqual(class System.Linq.Expressions.Expression left, class System.Linq.Expressions.Expression right, bool liftToNull, class System.Reflection.MethodInfo method) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.GreaterThanOrEqual(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Boolean,System.Reflection.MethodInfo)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function GreaterThanOrEqual (left As Expression, right As Expression, liftToNull As Boolean, method As MethodInfo) As BinaryExpression" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Linq::Expressions::BinaryExpression ^ GreaterThanOrEqual(System::Linq::Expressions::Expression ^ left, System::Linq::Expressions::Expression ^ right, bool liftToNull, System::Reflection::MethodInfo ^ method);" />
      <MemberSignature Language="F#" Value="static member GreaterThanOrEqual : System.Linq.Expressions.Expression * System.Linq.Expressions.Expression * bool * System.Reflection.MethodInfo -&gt; System.Linq.Expressions.BinaryExpression" Usage="System.Linq.Expressions.Expression.GreaterThanOrEqual (left, right, liftToNull, method)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.BinaryExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="left" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="right" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="liftToNull" Type="System.Boolean" />
        <Parameter Name="method" Type="System.Reflection.MethodInfo" />
      </Parameters>
      <Docs>
        <param name="left">
          <span data-ttu-id="fef91-1499">Объект <see cref="T:System.Linq.Expressions.Expression" />, который следует задать в качестве значения свойства <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fef91-1499">An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> property equal to.</span>
          </span>
        </param>
        <param name="right">
          <span data-ttu-id="fef91-1500">Объект <see cref="T:System.Linq.Expressions.Expression" />, который следует задать в качестве значения свойства <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fef91-1500">An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> property equal to.</span>
          </span>
        </param>
        <param name="liftToNull">
          <span data-ttu-id="fef91-1501">
            <see langword="true" />, чтобы задать для <see cref="P:System.Linq.Expressions.BinaryExpression.IsLiftedToNull" />значение <see langword="true" />; <see langword="false" />, чтобы задать для <see cref="P:System.Linq.Expressions.BinaryExpression.IsLiftedToNull" /> значение <see langword="false" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fef91-1501">
              <see langword="true" /> to set <see cref="P:System.Linq.Expressions.BinaryExpression.IsLiftedToNull" /> to <see langword="true" />; <see langword="false" /> to set <see cref="P:System.Linq.Expressions.BinaryExpression.IsLiftedToNull" /> to <see langword="false" />.</span>
          </span>
        </param>
        <param name="method">
          <span data-ttu-id="fef91-1502">Объект <see cref="T:System.Reflection.MethodInfo" />, который следует задать в качестве значения свойства <see cref="P:System.Linq.Expressions.BinaryExpression.Method" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fef91-1502">A <see cref="T:System.Reflection.MethodInfo" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Method" /> property equal to.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="fef91-1503">Создает <see cref="T:System.Linq.Expressions.BinaryExpression" />, представляющий числовое сравнение объектов "больше или равно".</span>
          <span class="sxs-lookup">
            <span data-stu-id="fef91-1503">Creates a <see cref="T:System.Linq.Expressions.BinaryExpression" /> that represents a "greater than or equal" numeric comparison.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="fef91-1504">Выражение <see cref="T:System.Linq.Expressions.BinaryExpression" />, содержащее свойство <see cref="P:System.Linq.Expressions.Expression.NodeType" />, равное <see cref="F:System.Linq.Expressions.ExpressionType.GreaterThanOrEqual" /> и <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />, <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />, <see cref="P:System.Linq.Expressions.BinaryExpression.IsLiftedToNull" />, и свойства <see cref="P:System.Linq.Expressions.BinaryExpression.Method" />, для которых заданы указанные значения.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fef91-1504">A <see cref="T:System.Linq.Expressions.BinaryExpression" /> that has the <see cref="P:System.Linq.Expressions.Expression.NodeType" /> property equal to <see cref="F:System.Linq.Expressions.ExpressionType.GreaterThanOrEqual" /> and the <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />, <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />, <see cref="P:System.Linq.Expressions.BinaryExpression.IsLiftedToNull" />, and <see cref="P:System.Linq.Expressions.BinaryExpression.Method" /> properties set to the specified values.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="fef91-1505">Полученный в результате <xref:System.Linq.Expressions.BinaryExpression> имеет <xref:System.Linq.Expressions.BinaryExpression.Method%2A> свойство присвоено метод реализации.</span><span class="sxs-lookup"><span data-stu-id="fef91-1505">The resulting <xref:System.Linq.Expressions.BinaryExpression> has the <xref:System.Linq.Expressions.BinaryExpression.Method%2A> property set to the implementing method.</span></span> <span data-ttu-id="fef91-1506"><xref:System.Linq.Expressions.Expression.Type%2A> Свойству присваивается тип узла.</span><span class="sxs-lookup"><span data-stu-id="fef91-1506">The <xref:System.Linq.Expressions.Expression.Type%2A> property is set to the type of the node.</span></span> <span data-ttu-id="fef91-1507">Если узел удаляется, <xref:System.Linq.Expressions.BinaryExpression.IsLifted%2A> свойство `true` и <xref:System.Linq.Expressions.BinaryExpression.IsLiftedToNull%2A> равно `liftToNull`.</span><span class="sxs-lookup"><span data-stu-id="fef91-1507">If the node is lifted, the <xref:System.Linq.Expressions.BinaryExpression.IsLifted%2A> property is `true` and the <xref:System.Linq.Expressions.BinaryExpression.IsLiftedToNull%2A> property is equal to `liftToNull`.</span></span> <span data-ttu-id="fef91-1508">В противном случае они оба `false`.</span><span class="sxs-lookup"><span data-stu-id="fef91-1508">Otherwise, they are both `false`.</span></span> <span data-ttu-id="fef91-1509">Значение свойства <xref:System.Linq.Expressions.BinaryExpression.Conversion%2A> — `null`.</span><span class="sxs-lookup"><span data-stu-id="fef91-1509">The <xref:System.Linq.Expressions.BinaryExpression.Conversion%2A> property is `null`.</span></span>  
  
 <span data-ttu-id="fef91-1510">Ниже описывается метод реализации, тип узла и ликвидирован ли данный узел.</span><span class="sxs-lookup"><span data-stu-id="fef91-1510">The following information describes the implementing method, the node type, and whether a node is lifted.</span></span>  
  
#### <a name="implementing-method"></a><span data-ttu-id="fef91-1511">Реализация метода</span><span class="sxs-lookup"><span data-stu-id="fef91-1511">Implementing Method</span></span>  
 <span data-ttu-id="fef91-1512">Следующие правила определяют метод реализации для операции:</span><span class="sxs-lookup"><span data-stu-id="fef91-1512">The following rules determine the implementing method for the operation:</span></span>  
  
-   <span data-ttu-id="fef91-1513">Если `method` не `null` , и это отличный от void, `static` (`Shared` в Visual Basic) метода, принимающего два аргумента, он является методом реализации.</span><span class="sxs-lookup"><span data-stu-id="fef91-1513">If `method` is not `null` and it represents a non-void, `static` (`Shared` in Visual Basic) method that takes two arguments, it is the implementing method.</span></span>  
  
-   <span data-ttu-id="fef91-1514">В противном случае, если <xref:System.Linq.Expressions.Expression.Type%2A> свойству `left` или `right` представляет определяемый пользователем тип, который перегружает оператор «больше или равно» <xref:System.Reflection.MethodInfo> , представляющий, что метод является методом реализации.</span><span class="sxs-lookup"><span data-stu-id="fef91-1514">Otherwise, if the <xref:System.Linq.Expressions.Expression.Type%2A> property of either `left` or `right` represents a user-defined type that overloads the "greater than or equal" operator, the <xref:System.Reflection.MethodInfo> that represents that method is the implementing method.</span></span>  
  
-   <span data-ttu-id="fef91-1515">В противном случае, если `left`. Тип и `right`. Тип: числовые типы, метод реализации является `null`.</span><span class="sxs-lookup"><span data-stu-id="fef91-1515">Otherwise, if `left`.Type and `right`.Type are numeric types, the implementing method is `null`.</span></span>  
  
#### <a name="node-type-and-lifted-versus-non-lifted"></a><span data-ttu-id="fef91-1516">Тип узла с ликвидацией или без</span><span class="sxs-lookup"><span data-stu-id="fef91-1516">Node Type and Lifted versus Non-Lifted</span></span>  
 <span data-ttu-id="fef91-1517">Если метод реализации не `null`:</span><span class="sxs-lookup"><span data-stu-id="fef91-1517">If the implementing method is not `null`:</span></span>  
  
-   <span data-ttu-id="fef91-1518">Если `left`. Тип и `right`. Тип могут быть присвоены соответствующие типы аргументов метода реализации, узел не удаляется.</span><span class="sxs-lookup"><span data-stu-id="fef91-1518">If `left`.Type and `right`.Type are assignable to the corresponding argument types of the implementing method, the node is not lifted.</span></span> <span data-ttu-id="fef91-1519">Тип узла — тип возвращаемого значения метода реализации.</span><span class="sxs-lookup"><span data-stu-id="fef91-1519">The type of the node is the return type of the implementing method.</span></span>  
  
-   <span data-ttu-id="fef91-1520">Если выполняются два следующих условия, узел удаляется; Кроме того, допускающий значение NULL тип узла <xref:System.Boolean> Если `liftToNull` — `true` или <xref:System.Boolean> Если `liftToNull` — `false`:</span><span class="sxs-lookup"><span data-stu-id="fef91-1520">If the following two conditions are satisfied, the node is lifted; also, the type of the node is nullable <xref:System.Boolean> if `liftToNull` is `true` or <xref:System.Boolean> if `liftToNull` is `false`:</span></span>  
  
    -   <span data-ttu-id="fef91-1521">`left`. Тип и `right`. Тип: обоих типов значений, из которых хотя бы один допускает значения NULL и соответствующие типы, не допускающие значения null равны соответствующие типы аргументов метода реализации.</span><span class="sxs-lookup"><span data-stu-id="fef91-1521">`left`.Type and `right`.Type are both value types of which at least one is nullable and the corresponding non-nullable types are equal to the corresponding argument types of the implementing method.</span></span>  
  
    -   <span data-ttu-id="fef91-1522">Тип возвращаемого значения метода реализации — <xref:System.Boolean>.</span><span class="sxs-lookup"><span data-stu-id="fef91-1522">The return type of the implementing method is <xref:System.Boolean>.</span></span>  
  
 <span data-ttu-id="fef91-1523">Если метод реализации `null`:</span><span class="sxs-lookup"><span data-stu-id="fef91-1523">If the implementing method is `null`:</span></span>  
  
-   <span data-ttu-id="fef91-1524">Если `left`. Тип и `right`. Тип: оба не поддерживающими значение NULL, узел не удаляется.</span><span class="sxs-lookup"><span data-stu-id="fef91-1524">If `left`.Type and `right`.Type are both non-nullable, the node is not lifted.</span></span> <span data-ttu-id="fef91-1525">Тип узла — <xref:System.Boolean>.</span><span class="sxs-lookup"><span data-stu-id="fef91-1525">The type of the node is <xref:System.Boolean>.</span></span>  
  
-   <span data-ttu-id="fef91-1526">Если `left`. Тип и `right`. Тип: значение NULL, узел удаляется.</span><span class="sxs-lookup"><span data-stu-id="fef91-1526">If `left`.Type and `right`.Type are both nullable, the node is lifted.</span></span> <span data-ttu-id="fef91-1527">Тип узла, допускающие значения NULL <xref:System.Boolean> Если `liftToNull` — `true` или <xref:System.Boolean> Если `liftToNull` является `false`.</span><span class="sxs-lookup"><span data-stu-id="fef91-1527">The type of the node is nullable <xref:System.Boolean> if `liftToNull` is `true` or <xref:System.Boolean> if `liftToNull` is `false`.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="fef91-1528">Значение параметра <paramref name="left" /> или <paramref name="right" /> — <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fef91-1528">
              <paramref name="left" /> or <paramref name="right" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="fef91-1529">Значение параметра <paramref name="method" /> не равно <see langword="null" />, и метод, который оно представляет, возвращает <see langword="void" />, не является <see langword="static" /> (<see langword="Shared" /> в Visual Basic) и не принимает ровно два аргумента.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fef91-1529">
              <paramref name="method" /> is not <see langword="null" /> and the method it represents returns <see langword="void" />, is not <see langword="static" /> (<see langword="Shared" /> in Visual Basic), or does not take exactly two arguments.</span>
          </span>
        </exception>
        <exception cref="T:System.InvalidOperationException">
          <span data-ttu-id="fef91-1530">
            <paramref name="method" /> равен <see langword="null" />, а оператор "больше или равно" не определен для типов <paramref name="left" />.Type и <paramref name="right" />.Type.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fef91-1530">
              <paramref name="method" /> is <see langword="null" /> and the "greater than or equal" operator is not defined for <paramref name="left" />.Type and <paramref name="right" />.Type.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="IfThen">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.ConditionalExpression IfThen (System.Linq.Expressions.Expression test, System.Linq.Expressions.Expression ifTrue);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.ConditionalExpression IfThen(class System.Linq.Expressions.Expression test, class System.Linq.Expressions.Expression ifTrue) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.IfThen(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function IfThen (test As Expression, ifTrue As Expression) As ConditionalExpression" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Linq::Expressions::ConditionalExpression ^ IfThen(System::Linq::Expressions::Expression ^ test, System::Linq::Expressions::Expression ^ ifTrue);" />
      <MemberSignature Language="F#" Value="static member IfThen : System.Linq.Expressions.Expression * System.Linq.Expressions.Expression -&gt; System.Linq.Expressions.ConditionalExpression" Usage="System.Linq.Expressions.Expression.IfThen (test, ifTrue)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.ConditionalExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="test" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="ifTrue" Type="System.Linq.Expressions.Expression" />
      </Parameters>
      <Docs>
        <param name="test">
          <span data-ttu-id="fef91-1531">Объект <see cref="T:System.Linq.Expressions.Expression" />, который следует задать в качестве значения свойства <see cref="P:System.Linq.Expressions.ConditionalExpression.Test" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fef91-1531">An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.ConditionalExpression.Test" /> property equal to.</span>
          </span>
        </param>
        <param name="ifTrue">
          <span data-ttu-id="fef91-1532">Объект <see cref="T:System.Linq.Expressions.Expression" />, который следует задать в качестве значения свойства <see cref="P:System.Linq.Expressions.ConditionalExpression.IfTrue" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fef91-1532">An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.ConditionalExpression.IfTrue" /> property equal to.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="fef91-1533">Создает объект <see cref="T:System.Linq.Expressions.ConditionalExpression" />, представляющий условный блок с оператором <see langword="if" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fef91-1533">Creates a <see cref="T:System.Linq.Expressions.ConditionalExpression" /> that represents a conditional block with an <see langword="if" /> statement.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="fef91-1534">Выражение <see cref="T:System.Linq.Expressions.ConditionalExpression" /> со свойством <see cref="P:System.Linq.Expressions.Expression.NodeType" />, равным <see cref="F:System.Linq.Expressions.ExpressionType.Conditional" />, и свойствами <see cref="P:System.Linq.Expressions.ConditionalExpression.Test" /> и <see cref="P:System.Linq.Expressions.ConditionalExpression.IfTrue" />, для которых заданы указанные значения.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fef91-1534">A <see cref="T:System.Linq.Expressions.ConditionalExpression" /> that has the <see cref="P:System.Linq.Expressions.Expression.NodeType" /> property equal to <see cref="F:System.Linq.Expressions.ExpressionType.Conditional" /> and the <see cref="P:System.Linq.Expressions.ConditionalExpression.Test" />, <see cref="P:System.Linq.Expressions.ConditionalExpression.IfTrue" />, properties set to the specified values.</span>
          </span>
          <span data-ttu-id="fef91-1535">Свойству <see cref="P:System.Linq.Expressions.ConditionalExpression.IfFalse" /> присваивается значение выражения по умолчанию, тип получаемого выражения <see cref="T:System.Linq.Expressions.ConditionalExpression" />, возвращаемого этим методом, — <see cref="T:System.Void" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fef91-1535">The <see cref="P:System.Linq.Expressions.ConditionalExpression.IfFalse" /> property is set to default expression and the type of the resulting <see cref="T:System.Linq.Expressions.ConditionalExpression" /> returned by this method is <see cref="T:System.Void" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 <span data-ttu-id="fef91-1536">В следующем примере кода показано, как создать выражение, представляющий условный блок.</span><span class="sxs-lookup"><span data-stu-id="fef91-1536">The following code example shows how to create an expression that represents a conditional block.</span></span>  
  
 [!code-csharp[System.Linq.Expressions.ExpressionDev10#32](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.linq.expressions.expressiondev10/cs/program.cs#32)]
 [!code-vb[System.Linq.Expressions.ExpressionDev10#32](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.linq.expressions.expressiondev10/vb/module1.vb#32)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IfThenElse">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.ConditionalExpression IfThenElse (System.Linq.Expressions.Expression test, System.Linq.Expressions.Expression ifTrue, System.Linq.Expressions.Expression ifFalse);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.ConditionalExpression IfThenElse(class System.Linq.Expressions.Expression test, class System.Linq.Expressions.Expression ifTrue, class System.Linq.Expressions.Expression ifFalse) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.IfThenElse(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function IfThenElse (test As Expression, ifTrue As Expression, ifFalse As Expression) As ConditionalExpression" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Linq::Expressions::ConditionalExpression ^ IfThenElse(System::Linq::Expressions::Expression ^ test, System::Linq::Expressions::Expression ^ ifTrue, System::Linq::Expressions::Expression ^ ifFalse);" />
      <MemberSignature Language="F#" Value="static member IfThenElse : System.Linq.Expressions.Expression * System.Linq.Expressions.Expression * System.Linq.Expressions.Expression -&gt; System.Linq.Expressions.ConditionalExpression" Usage="System.Linq.Expressions.Expression.IfThenElse (test, ifTrue, ifFalse)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.ConditionalExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="test" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="ifTrue" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="ifFalse" Type="System.Linq.Expressions.Expression" />
      </Parameters>
      <Docs>
        <param name="test">
          <span data-ttu-id="fef91-1537">Объект <see cref="T:System.Linq.Expressions.Expression" />, который следует задать в качестве значения свойства <see cref="P:System.Linq.Expressions.ConditionalExpression.Test" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fef91-1537">An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.ConditionalExpression.Test" /> property equal to.</span>
          </span>
        </param>
        <param name="ifTrue">
          <span data-ttu-id="fef91-1538">Объект <see cref="T:System.Linq.Expressions.Expression" />, который следует задать в качестве значения свойства <see cref="P:System.Linq.Expressions.ConditionalExpression.IfTrue" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fef91-1538">An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.ConditionalExpression.IfTrue" /> property equal to.</span>
          </span>
        </param>
        <param name="ifFalse">
          <span data-ttu-id="fef91-1539">Объект <see cref="T:System.Linq.Expressions.Expression" />, который следует задать в качестве значения свойства <see cref="P:System.Linq.Expressions.ConditionalExpression.IfFalse" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fef91-1539">An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.ConditionalExpression.IfFalse" /> property equal to.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="fef91-1540">Создает объект <see cref="T:System.Linq.Expressions.ConditionalExpression" />, представляющий условный блок с операторами <see langword="if" /> и <see langword="else" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fef91-1540">Creates a <see cref="T:System.Linq.Expressions.ConditionalExpression" /> that represents a conditional block with <see langword="if" /> and <see langword="else" /> statements.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="fef91-1541">Выражение <see cref="T:System.Linq.Expressions.ConditionalExpression" /> со свойством <see cref="P:System.Linq.Expressions.Expression.NodeType" />, равным <see cref="F:System.Linq.Expressions.ExpressionType.Conditional" />, и свойствами <see cref="P:System.Linq.Expressions.ConditionalExpression.Test" />, <see cref="P:System.Linq.Expressions.ConditionalExpression.IfTrue" /> и <see cref="P:System.Linq.Expressions.ConditionalExpression.IfFalse" />, для которых заданы указанные значения.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fef91-1541">A <see cref="T:System.Linq.Expressions.ConditionalExpression" /> that has the <see cref="P:System.Linq.Expressions.Expression.NodeType" /> property equal to <see cref="F:System.Linq.Expressions.ExpressionType.Conditional" /> and the <see cref="P:System.Linq.Expressions.ConditionalExpression.Test" />, <see cref="P:System.Linq.Expressions.ConditionalExpression.IfTrue" />, and <see cref="P:System.Linq.Expressions.ConditionalExpression.IfFalse" /> properties set to the specified values.</span>
          </span>
          <span data-ttu-id="fef91-1542">Тип выражения <see cref="T:System.Linq.Expressions.ConditionalExpression" />, возвращаемого этим методом, — <see cref="T:System.Void" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fef91-1542">The type of the resulting <see cref="T:System.Linq.Expressions.ConditionalExpression" /> returned by this method is <see cref="T:System.Void" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 <span data-ttu-id="fef91-1543">В следующем примере кода показано, как создать выражение, представляющий условный блок.</span><span class="sxs-lookup"><span data-stu-id="fef91-1543">The following code example shows how to create an expression that represents a conditional block.</span></span>  
  
 [!code-csharp[System.Linq.Expressions.ExpressionDev10#33](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.linq.expressions.expressiondev10/cs/program.cs#33)]
 [!code-vb[System.Linq.Expressions.ExpressionDev10#33](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.linq.expressions.expressiondev10/vb/module1.vb#33)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="Increment">
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="fef91-1544">Создает объект <see cref="T:System.Linq.Expressions.UnaryExpression" />, представляющий увеличение значения выражения на 1.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fef91-1544">Creates a <see cref="T:System.Linq.Expressions.UnaryExpression" /> that represents the incrementing of the expression value by 1.</span>
          </span>
        </summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Increment">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.UnaryExpression Increment (System.Linq.Expressions.Expression expression);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.UnaryExpression Increment(class System.Linq.Expressions.Expression expression) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.Increment(System.Linq.Expressions.Expression)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Linq::Expressions::UnaryExpression ^ Increment(System::Linq::Expressions::Expression ^ expression);" />
      <MemberSignature Language="F#" Value="static member Increment : System.Linq.Expressions.Expression -&gt; System.Linq.Expressions.UnaryExpression" Usage="System.Linq.Expressions.Expression.Increment expression" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.UnaryExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="expression" Type="System.Linq.Expressions.Expression" />
      </Parameters>
      <Docs>
        <param name="expression">
          <span data-ttu-id="fef91-1545">Увеличиваемое выражение <see cref="T:System.Linq.Expressions.Expression" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fef91-1545">An <see cref="T:System.Linq.Expressions.Expression" /> to increment.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="fef91-1546">Создает объект <see cref="T:System.Linq.Expressions.UnaryExpression" />, представляющий увеличение значения выражения на 1.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fef91-1546">Creates a <see cref="T:System.Linq.Expressions.UnaryExpression" /> that represents the incrementing of the expression value by 1.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="fef91-1547">Объект <see cref="T:System.Linq.Expressions.UnaryExpression" />, представляющий увеличенное выражение.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fef91-1547">A <see cref="T:System.Linq.Expressions.UnaryExpression" /> that represents the incremented expression.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="fef91-1548">Это выражение функционирует и не изменяет значение объекта, который передается в него.</span><span class="sxs-lookup"><span data-stu-id="fef91-1548">This expression is functional and does not change the value of the object that is passed to it.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="fef91-1549">В следующем примере кода показано, как создать выражение, которое представляет операцию приращения.</span><span class="sxs-lookup"><span data-stu-id="fef91-1549">The following code example shows how to create an expression that represents an increment operation.</span></span>  
  
 [!code-csharp[System.Linq.Expressions.ExpressionDev10#24](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.linq.expressions.expressiondev10/cs/program.cs#24)]
 [!code-vb[System.Linq.Expressions.ExpressionDev10#24](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.linq.expressions.expressiondev10/vb/module1.vb#24)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Increment">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.UnaryExpression Increment (System.Linq.Expressions.Expression expression, System.Reflection.MethodInfo method);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.UnaryExpression Increment(class System.Linq.Expressions.Expression expression, class System.Reflection.MethodInfo method) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.Increment(System.Linq.Expressions.Expression,System.Reflection.MethodInfo)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Linq::Expressions::UnaryExpression ^ Increment(System::Linq::Expressions::Expression ^ expression, System::Reflection::MethodInfo ^ method);" />
      <MemberSignature Language="F#" Value="static member Increment : System.Linq.Expressions.Expression * System.Reflection.MethodInfo -&gt; System.Linq.Expressions.UnaryExpression" Usage="System.Linq.Expressions.Expression.Increment (expression, method)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.UnaryExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="expression" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="method" Type="System.Reflection.MethodInfo" />
      </Parameters>
      <Docs>
        <param name="expression">
          <span data-ttu-id="fef91-1550">Увеличиваемое выражение <see cref="T:System.Linq.Expressions.Expression" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fef91-1550">An <see cref="T:System.Linq.Expressions.Expression" /> to increment.</span>
          </span>
        </param>
        <param name="method">
          <span data-ttu-id="fef91-1551">Объект <see cref="T:System.Reflection.MethodInfo" />, представляющий метод реализации.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fef91-1551">A <see cref="T:System.Reflection.MethodInfo" /> that represents the implementing method.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="fef91-1552">Создает объект <see cref="T:System.Linq.Expressions.UnaryExpression" />, представляющий увеличение выражения на 1.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fef91-1552">Creates a <see cref="T:System.Linq.Expressions.UnaryExpression" /> that represents the incrementing of the expression by 1.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="fef91-1553">Объект <see cref="T:System.Linq.Expressions.UnaryExpression" />, представляющий увеличенное выражение.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fef91-1553">A <see cref="T:System.Linq.Expressions.UnaryExpression" /> that represents the incremented expression.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="fef91-1554">Это выражение функционирует и не изменяет значение объекта, который передается в него.</span><span class="sxs-lookup"><span data-stu-id="fef91-1554">This expression is functional and does not change the value of the object that is passed to it.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="Invoke">
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="fef91-1555">Создает объект <see cref="T:System.Linq.Expressions.InvocationExpression" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fef91-1555">Creates an <see cref="T:System.Linq.Expressions.InvocationExpression" />.</span>
          </span>
        </summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Invoke">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.InvocationExpression Invoke (System.Linq.Expressions.Expression expression, System.Collections.Generic.IEnumerable&lt;System.Linq.Expressions.Expression&gt; arguments);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.InvocationExpression Invoke(class System.Linq.Expressions.Expression expression, class System.Collections.Generic.IEnumerable`1&lt;class System.Linq.Expressions.Expression&gt; arguments) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.Invoke(System.Linq.Expressions.Expression,System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression})" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Linq::Expressions::InvocationExpression ^ Invoke(System::Linq::Expressions::Expression ^ expression, System::Collections::Generic::IEnumerable&lt;System::Linq::Expressions::Expression ^&gt; ^ arguments);" />
      <MemberSignature Language="F#" Value="static member Invoke : System.Linq.Expressions.Expression * seq&lt;System.Linq.Expressions.Expression&gt; -&gt; System.Linq.Expressions.InvocationExpression" Usage="System.Linq.Expressions.Expression.Invoke (expression, arguments)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.InvocationExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="expression" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="arguments" Type="System.Collections.Generic.IEnumerable&lt;System.Linq.Expressions.Expression&gt;" />
      </Parameters>
      <Docs>
        <param name="expression">
          <span data-ttu-id="fef91-1556">Выражение <see cref="T:System.Linq.Expressions.Expression" />, представляющее делегат или лямбда-выражение для применения.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fef91-1556">An <see cref="T:System.Linq.Expressions.Expression" /> that represents the delegate or lambda expression to be applied to.</span>
          </span>
        </param>
        <param name="arguments">
          <span data-ttu-id="fef91-1557">Интерфейс <see cref="T:System.Collections.Generic.IEnumerable`1" />, содержащий объекты <see cref="T:System.Linq.Expressions.Expression" />, представляющие аргументы, к которым применяется делегат или лямбда-выражение.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fef91-1557">An <see cref="T:System.Collections.Generic.IEnumerable`1" /> that contains <see cref="T:System.Linq.Expressions.Expression" /> objects that represent the arguments that the delegate or lambda expression is applied to.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="fef91-1558">Создает выражение <see cref="T:System.Linq.Expressions.InvocationExpression" />, применяющее делегат или лямбда-выражение к списку выражений аргумента.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fef91-1558">Creates an <see cref="T:System.Linq.Expressions.InvocationExpression" /> that applies a delegate or lambda expression to a list of argument expressions.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="fef91-1559">Выражение <see cref="T:System.Linq.Expressions.InvocationExpression" />, которое применяет заданный делегат или лямбда-выражение к предоставленным аргументам.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fef91-1559">An <see cref="T:System.Linq.Expressions.InvocationExpression" /> that applies the specified delegate or lambda expression to the provided arguments.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="fef91-1560"><xref:System.Linq.Expressions.Expression.Type%2A> Результирующего <xref:System.Linq.Expressions.InvocationExpression> представляет тип возвращаемого значения делегата, представленного `expression`. Тип.</span><span class="sxs-lookup"><span data-stu-id="fef91-1560">The <xref:System.Linq.Expressions.Expression.Type%2A> property of the resulting <xref:System.Linq.Expressions.InvocationExpression> represents the return type of the delegate that is represented by `expression`.Type.</span></span>  
  
 <span data-ttu-id="fef91-1561"><xref:System.Linq.Expressions.InvocationExpression.Arguments%2A> Результирующего <xref:System.Linq.Expressions.InvocationExpression> пуст Если `arguments` является `null`.</span><span class="sxs-lookup"><span data-stu-id="fef91-1561">The <xref:System.Linq.Expressions.InvocationExpression.Arguments%2A> property of the resulting <xref:System.Linq.Expressions.InvocationExpression> is empty if `arguments` is `null`.</span></span> <span data-ttu-id="fef91-1562">В противном случае он содержит те же элементы, что `arguments` за исключением, что некоторые из этих <xref:System.Linq.Expressions.Expression> объекты могут быть *в кавычках*.</span><span class="sxs-lookup"><span data-stu-id="fef91-1562">Otherwise, it contains the same elements as `arguments` except that some of these <xref:System.Linq.Expressions.Expression> objects may be *quoted*.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="fef91-1563">Элемент будет заключаться в кавычки только в том случае, если соответствующий параметр делегата, представленный `expression` имеет тип <xref:System.Linq.Expressions.Expression>.</span><span class="sxs-lookup"><span data-stu-id="fef91-1563">An element will be quoted only if the corresponding parameter of the delegate represented by `expression` is of type <xref:System.Linq.Expressions.Expression>.</span></span> <span data-ttu-id="fef91-1564">Заключение в кавычки означает, что элемент помещается в <xref:System.Linq.Expressions.ExpressionType.Quote> узла.</span><span class="sxs-lookup"><span data-stu-id="fef91-1564">Quoting means the element is wrapped in a <xref:System.Linq.Expressions.ExpressionType.Quote> node.</span></span> <span data-ttu-id="fef91-1565">Полученный в результате узел является <xref:System.Linq.Expressions.UnaryExpression> которого <xref:System.Linq.Expressions.UnaryExpression.Operand%2A> свойство является элементом `arguments`.</span><span class="sxs-lookup"><span data-stu-id="fef91-1565">The resulting node is a <xref:System.Linq.Expressions.UnaryExpression> whose <xref:System.Linq.Expressions.UnaryExpression.Operand%2A> property is the element of `arguments`.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="fef91-1566">Следующий пример демонстрирует, как использовать <xref:System.Linq.Expressions.Expression.Invoke%28System.Linq.Expressions.Expression%2CSystem.Linq.Expressions.Expression%5B%5D%29> метод для создания <xref:System.Linq.Expressions.InvocationExpression> , представляющий вызов лямбда-выражение с заданными аргументами.</span><span class="sxs-lookup"><span data-stu-id="fef91-1566">The following example demonstrates how to use the <xref:System.Linq.Expressions.Expression.Invoke%28System.Linq.Expressions.Expression%2CSystem.Linq.Expressions.Expression%5B%5D%29> method to create an <xref:System.Linq.Expressions.InvocationExpression> that represents the invocation of a lambda expression with specified arguments.</span></span>  
  
 [!code-csharp[System.Linq.Expressions.Expression#6](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Linq.Expressions.Expression/CS/Expression.cs#6)]
 [!code-vb[System.Linq.Expressions.Expression#6](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Linq.Expressions.Expression/VB/Expression.vb#6)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="fef91-1567">
            <paramref name="expression" /> — <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fef91-1567">
              <paramref name="expression" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="fef91-1568">Тип <paramref name="expression" />.Type не представляет тип делегата или <see cref="T:System.Linq.Expressions.Expression`1" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fef91-1568">
              <paramref name="expression" />.Type does not represent a delegate type or an <see cref="T:System.Linq.Expressions.Expression`1" />.</span>
          </span>
          <span data-ttu-id="fef91-1569">-или-</span>
          <span class="sxs-lookup">
            <span data-stu-id="fef91-1569">-or-</span>
          </span>
          <span data-ttu-id="fef91-1570">Свойство <see cref="P:System.Linq.Expressions.Expression.Type" /> элемента <paramref name="arguments" /> нельзя назначить для типа соответствующего параметра делегата, представленного параметром <paramref name="expression" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fef91-1570">The <see cref="P:System.Linq.Expressions.Expression.Type" /> property of an element of <paramref name="arguments" /> is not assignable to the type of the corresponding parameter of the delegate represented by <paramref name="expression" />.</span>
          </span>
        </exception>
        <exception cref="T:System.InvalidOperationException">
          <span data-ttu-id="fef91-1571">
            <paramref name="arguments" /> не содержит количество элементов, равное количеству списка параметров для делегата, представленного <paramref name="expression" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fef91-1571">
              <paramref name="arguments" /> does not contain the same number of elements as the list of parameters for the delegate represented by <paramref name="expression" />.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="Invoke">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.InvocationExpression Invoke (System.Linq.Expressions.Expression expression, params System.Linq.Expressions.Expression[] arguments);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.InvocationExpression Invoke(class System.Linq.Expressions.Expression expression, class System.Linq.Expressions.Expression[] arguments) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.Invoke(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression[])" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Linq::Expressions::InvocationExpression ^ Invoke(System::Linq::Expressions::Expression ^ expression, ... cli::array &lt;System::Linq::Expressions::Expression ^&gt; ^ arguments);" />
      <MemberSignature Language="F#" Value="static member Invoke : System.Linq.Expressions.Expression * System.Linq.Expressions.Expression[] -&gt; System.Linq.Expressions.InvocationExpression" Usage="System.Linq.Expressions.Expression.Invoke (expression, arguments)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.InvocationExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="expression" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="arguments" Type="System.Linq.Expressions.Expression[]">
          <Attributes>
            <Attribute>
              <AttributeName>System.ParamArray</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="expression">
          <span data-ttu-id="fef91-1572">Выражение <see cref="T:System.Linq.Expressions.Expression" />, представляющее делегат или лямбда-выражение для применения.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fef91-1572">An <see cref="T:System.Linq.Expressions.Expression" /> that represents the delegate or lambda expression to be applied.</span>
          </span>
        </param>
        <param name="arguments">
          <span data-ttu-id="fef91-1573">Массив объектов <see cref="T:System.Linq.Expressions.Expression" />, представляющих аргументы, к которым применяется делегат или лямбда-выражение.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fef91-1573">An array of <see cref="T:System.Linq.Expressions.Expression" /> objects that represent the arguments that the delegate or lambda expression is applied to.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="fef91-1574">Создает выражение <see cref="T:System.Linq.Expressions.InvocationExpression" />, применяющее делегат или лямбда-выражение к списку выражений аргумента.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fef91-1574">Creates an <see cref="T:System.Linq.Expressions.InvocationExpression" /> that applies a delegate or lambda expression to a list of argument expressions.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="fef91-1575">Выражение <see cref="T:System.Linq.Expressions.InvocationExpression" />, которое применяет заданный делегат или лямбда-выражение к предоставленным аргументам.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fef91-1575">An <see cref="T:System.Linq.Expressions.InvocationExpression" /> that applies the specified delegate or lambda expression to the provided arguments.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="fef91-1576"><xref:System.Linq.Expressions.Expression.Type%2A> Результирующего <xref:System.Linq.Expressions.InvocationExpression> представляет тип возвращаемого значения делегата, представленного `expression`. Тип.</span><span class="sxs-lookup"><span data-stu-id="fef91-1576">The <xref:System.Linq.Expressions.Expression.Type%2A> property of the resulting <xref:System.Linq.Expressions.InvocationExpression> represents the return type of the delegate that is represented by `expression`.Type.</span></span>  
  
 <span data-ttu-id="fef91-1577"><xref:System.Linq.Expressions.InvocationExpression.Arguments%2A> Результирующего <xref:System.Linq.Expressions.InvocationExpression> пуст Если `arguments` является `null`.</span><span class="sxs-lookup"><span data-stu-id="fef91-1577">The <xref:System.Linq.Expressions.InvocationExpression.Arguments%2A> property of the resulting <xref:System.Linq.Expressions.InvocationExpression> is empty if `arguments` is `null`.</span></span> <span data-ttu-id="fef91-1578">В противном случае он содержит те же элементы, что `arguments` за исключением, что некоторые из этих <xref:System.Linq.Expressions.Expression> объекты могут быть *в кавычках*.</span><span class="sxs-lookup"><span data-stu-id="fef91-1578">Otherwise, it contains the same elements as `arguments` except that some of these <xref:System.Linq.Expressions.Expression> objects may be *quoted*.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="fef91-1579">Элемент будет заключаться в кавычки только в том случае, если соответствующий параметр делегата, представленный `expression` имеет тип <xref:System.Linq.Expressions.Expression>.</span><span class="sxs-lookup"><span data-stu-id="fef91-1579">An element will be quoted only if the corresponding parameter of the delegate represented by `expression` is of type <xref:System.Linq.Expressions.Expression>.</span></span> <span data-ttu-id="fef91-1580">Заключение в кавычки означает, что элемент помещается в <xref:System.Linq.Expressions.ExpressionType.Quote> узла.</span><span class="sxs-lookup"><span data-stu-id="fef91-1580">Quoting means the element is wrapped in a <xref:System.Linq.Expressions.ExpressionType.Quote> node.</span></span> <span data-ttu-id="fef91-1581">Полученный в результате узел является <xref:System.Linq.Expressions.UnaryExpression> которого <xref:System.Linq.Expressions.UnaryExpression.Operand%2A> свойство является элементом `arguments`.</span><span class="sxs-lookup"><span data-stu-id="fef91-1581">The resulting node is a <xref:System.Linq.Expressions.UnaryExpression> whose <xref:System.Linq.Expressions.UnaryExpression.Operand%2A> property is the element of `arguments`.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="fef91-1582">Следующий пример демонстрирует, как использовать <xref:System.Linq.Expressions.Expression.Invoke%28System.Linq.Expressions.Expression%2CSystem.Linq.Expressions.Expression%5B%5D%29> метод для создания <xref:System.Linq.Expressions.InvocationExpression> , представляющий вызов лямбда-выражение с заданными аргументами.</span><span class="sxs-lookup"><span data-stu-id="fef91-1582">The following example demonstrates how to use the <xref:System.Linq.Expressions.Expression.Invoke%28System.Linq.Expressions.Expression%2CSystem.Linq.Expressions.Expression%5B%5D%29> method to create an <xref:System.Linq.Expressions.InvocationExpression> that represents the invocation of a lambda expression with specified arguments.</span></span>  
  
 [!code-csharp[System.Linq.Expressions.Expression#6](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Linq.Expressions.Expression/CS/Expression.cs#6)]
 [!code-vb[System.Linq.Expressions.Expression#6](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Linq.Expressions.Expression/VB/Expression.vb#6)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="fef91-1583">
            <paramref name="expression" /> — <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fef91-1583">
              <paramref name="expression" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="fef91-1584">Тип <paramref name="expression" />.Type не представляет тип делегата или <see cref="T:System.Linq.Expressions.Expression`1" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fef91-1584">
              <paramref name="expression" />.Type does not represent a delegate type or an <see cref="T:System.Linq.Expressions.Expression`1" />.</span>
          </span>
          <span data-ttu-id="fef91-1585">-или-</span>
          <span class="sxs-lookup">
            <span data-stu-id="fef91-1585">-or-</span>
          </span>
          <span data-ttu-id="fef91-1586">Свойство <see cref="P:System.Linq.Expressions.Expression.Type" /> элемента <paramref name="arguments" /> нельзя назначить для типа соответствующего параметра делегата, представленного параметром <paramref name="expression" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fef91-1586">The <see cref="P:System.Linq.Expressions.Expression.Type" /> property of an element of <paramref name="arguments" /> is not assignable to the type of the corresponding parameter of the delegate represented by <paramref name="expression" />.</span>
          </span>
        </exception>
        <exception cref="T:System.InvalidOperationException">
          <span data-ttu-id="fef91-1587">
            <paramref name="arguments" /> не содержит количество элементов, равное количеству списка параметров для делегата, представленного <paramref name="expression" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fef91-1587">
              <paramref name="arguments" /> does not contain the same number of elements as the list of parameters for the delegate represented by <paramref name="expression" />.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <MemberGroup MemberName="IsFalse">
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="fef91-1588">Возвращает значение, показывающее, имеет ли выражение значение false.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fef91-1588">Returns whether the expression evaluates to false.</span>
          </span>
        </summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="IsFalse">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.UnaryExpression IsFalse (System.Linq.Expressions.Expression expression);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.UnaryExpression IsFalse(class System.Linq.Expressions.Expression expression) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.IsFalse(System.Linq.Expressions.Expression)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Linq::Expressions::UnaryExpression ^ IsFalse(System::Linq::Expressions::Expression ^ expression);" />
      <MemberSignature Language="F#" Value="static member IsFalse : System.Linq.Expressions.Expression -&gt; System.Linq.Expressions.UnaryExpression" Usage="System.Linq.Expressions.Expression.IsFalse expression" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.UnaryExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="expression" Type="System.Linq.Expressions.Expression" />
      </Parameters>
      <Docs>
        <param name="expression">
          <span data-ttu-id="fef91-1589">Вычисляемый объект <see cref="T:System.Linq.Expressions.Expression" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fef91-1589">An <see cref="T:System.Linq.Expressions.Expression" /> to evaluate.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="fef91-1590">Возвращает значение, показывающее, имеет ли выражение значение false.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fef91-1590">Returns whether the expression evaluates to false.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="fef91-1591">Экземпляр <see cref="T:System.Linq.Expressions.UnaryExpression" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fef91-1591">An instance of <see cref="T:System.Linq.Expressions.UnaryExpression" />.</span>
          </span>
        </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="IsFalse">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.UnaryExpression IsFalse (System.Linq.Expressions.Expression expression, System.Reflection.MethodInfo method);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.UnaryExpression IsFalse(class System.Linq.Expressions.Expression expression, class System.Reflection.MethodInfo method) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.IsFalse(System.Linq.Expressions.Expression,System.Reflection.MethodInfo)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Linq::Expressions::UnaryExpression ^ IsFalse(System::Linq::Expressions::Expression ^ expression, System::Reflection::MethodInfo ^ method);" />
      <MemberSignature Language="F#" Value="static member IsFalse : System.Linq.Expressions.Expression * System.Reflection.MethodInfo -&gt; System.Linq.Expressions.UnaryExpression" Usage="System.Linq.Expressions.Expression.IsFalse (expression, method)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.UnaryExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="expression" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="method" Type="System.Reflection.MethodInfo" />
      </Parameters>
      <Docs>
        <param name="expression">
          <span data-ttu-id="fef91-1592">Вычисляемый объект <see cref="T:System.Linq.Expressions.Expression" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fef91-1592">An <see cref="T:System.Linq.Expressions.Expression" /> to evaluate.</span>
          </span>
        </param>
        <param name="method">
          <span data-ttu-id="fef91-1593">Объект <see cref="T:System.Reflection.MethodInfo" />, представляющий метод реализации.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fef91-1593">A <see cref="T:System.Reflection.MethodInfo" /> that represents the implementing method.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="fef91-1594">Возвращает значение, показывающее, имеет ли выражение значение false.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fef91-1594">Returns whether the expression evaluates to false.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="fef91-1595">Экземпляр <see cref="T:System.Linq.Expressions.UnaryExpression" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fef91-1595">An instance of <see cref="T:System.Linq.Expressions.UnaryExpression" />.</span>
          </span>
        </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="IsTrue">
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="fef91-1596">Возвращает значение, показывающее, имеет ли выражение значение true.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fef91-1596">Returns whether the expression evaluates to true.</span>
          </span>
        </summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="IsTrue">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.UnaryExpression IsTrue (System.Linq.Expressions.Expression expression);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.UnaryExpression IsTrue(class System.Linq.Expressions.Expression expression) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.IsTrue(System.Linq.Expressions.Expression)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Linq::Expressions::UnaryExpression ^ IsTrue(System::Linq::Expressions::Expression ^ expression);" />
      <MemberSignature Language="F#" Value="static member IsTrue : System.Linq.Expressions.Expression -&gt; System.Linq.Expressions.UnaryExpression" Usage="System.Linq.Expressions.Expression.IsTrue expression" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.UnaryExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="expression" Type="System.Linq.Expressions.Expression" />
      </Parameters>
      <Docs>
        <param name="expression">
          <span data-ttu-id="fef91-1597">Вычисляемый объект <see cref="T:System.Linq.Expressions.Expression" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fef91-1597">An <see cref="T:System.Linq.Expressions.Expression" /> to evaluate.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="fef91-1598">Возвращает значение, показывающее, имеет ли выражение значение true.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fef91-1598">Returns whether the expression evaluates to true.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="fef91-1599">Экземпляр <see cref="T:System.Linq.Expressions.UnaryExpression" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fef91-1599">An instance of <see cref="T:System.Linq.Expressions.UnaryExpression" />.</span>
          </span>
        </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="IsTrue">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.UnaryExpression IsTrue (System.Linq.Expressions.Expression expression, System.Reflection.MethodInfo method);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.UnaryExpression IsTrue(class System.Linq.Expressions.Expression expression, class System.Reflection.MethodInfo method) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.IsTrue(System.Linq.Expressions.Expression,System.Reflection.MethodInfo)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Linq::Expressions::UnaryExpression ^ IsTrue(System::Linq::Expressions::Expression ^ expression, System::Reflection::MethodInfo ^ method);" />
      <MemberSignature Language="F#" Value="static member IsTrue : System.Linq.Expressions.Expression * System.Reflection.MethodInfo -&gt; System.Linq.Expressions.UnaryExpression" Usage="System.Linq.Expressions.Expression.IsTrue (expression, method)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.UnaryExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="expression" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="method" Type="System.Reflection.MethodInfo" />
      </Parameters>
      <Docs>
        <param name="expression">
          <span data-ttu-id="fef91-1600">Вычисляемый объект <see cref="T:System.Linq.Expressions.Expression" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fef91-1600">An <see cref="T:System.Linq.Expressions.Expression" /> to evaluate.</span>
          </span>
        </param>
        <param name="method">
          <span data-ttu-id="fef91-1601">Объект <see cref="T:System.Reflection.MethodInfo" />, представляющий метод реализации.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fef91-1601">A <see cref="T:System.Reflection.MethodInfo" /> that represents the implementing method.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="fef91-1602">Возвращает значение, показывающее, имеет ли выражение значение true.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fef91-1602">Returns whether the expression evaluates to true.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="fef91-1603">Экземпляр <see cref="T:System.Linq.Expressions.UnaryExpression" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fef91-1603">An instance of <see cref="T:System.Linq.Expressions.UnaryExpression" />.</span>
          </span>
        </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="Label">
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="fef91-1604">Создает объект <see cref="T:System.Linq.Expressions.LabelTarget" />, представляющий метку.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fef91-1604">Creates a <see cref="T:System.Linq.Expressions.LabelTarget" /> representing a label.</span>
          </span>
        </summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Label">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.LabelTarget Label ();" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.LabelTarget Label() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.Label" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Label () As LabelTarget" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Linq::Expressions::LabelTarget ^ Label();" />
      <MemberSignature Language="F#" Value="static member Label : unit -&gt; System.Linq.Expressions.LabelTarget" Usage="System.Linq.Expressions.Expression.Label " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.LabelTarget</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="fef91-1605">Создает объект <see cref="T:System.Linq.Expressions.LabelTarget" />, представляющий метку с типом void, не имеющую имени.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fef91-1605">Creates a <see cref="T:System.Linq.Expressions.LabelTarget" /> representing a label with void type and no name.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="fef91-1606">Новый объект <see cref="T:System.Linq.Expressions.LabelTarget" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fef91-1606">The new <see cref="T:System.Linq.Expressions.LabelTarget" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 <span data-ttu-id="fef91-1607">В следующем примере показано, как создать выражение, содержащее <xref:System.Linq.Expressions.LabelTarget> объекта.</span><span class="sxs-lookup"><span data-stu-id="fef91-1607">The following example demonstrates how to create an expression that contains a <xref:System.Linq.Expressions.LabelTarget> object.</span></span>  
  
 [!code-csharp[System.Linq.Expressions.ExpressionDev10#43](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.linq.expressions.expressiondev10/cs/program.cs#43)]
 [!code-vb[System.Linq.Expressions.ExpressionDev10#43](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.linq.expressions.expressiondev10/vb/module1.vb#43)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Label">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.LabelExpression Label (System.Linq.Expressions.LabelTarget target);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.LabelExpression Label(class System.Linq.Expressions.LabelTarget target) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.Label(System.Linq.Expressions.LabelTarget)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Label (target As LabelTarget) As LabelExpression" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Linq::Expressions::LabelExpression ^ Label(System::Linq::Expressions::LabelTarget ^ target);" />
      <MemberSignature Language="F#" Value="static member Label : System.Linq.Expressions.LabelTarget -&gt; System.Linq.Expressions.LabelExpression" Usage="System.Linq.Expressions.Expression.Label target" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.LabelExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="target" Type="System.Linq.Expressions.LabelTarget" />
      </Parameters>
      <Docs>
        <param name="target">
          <span data-ttu-id="fef91-1608">Объект <see cref="T:System.Linq.Expressions.LabelTarget" />, с которым будет связано данное выражение <see cref="T:System.Linq.Expressions.LabelExpression" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fef91-1608">The <see cref="T:System.Linq.Expressions.LabelTarget" /> which this <see cref="T:System.Linq.Expressions.LabelExpression" /> will be associated with.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="fef91-1609">Создает объект <see cref="T:System.Linq.Expressions.LabelExpression" />, представляющий метку без значения по умолчанию.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fef91-1609">Creates a <see cref="T:System.Linq.Expressions.LabelExpression" /> representing a label without a default value.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="fef91-1610">Выражение <see cref="T:System.Linq.Expressions.LabelExpression" /> без значения по умолчанию.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fef91-1610">A <see cref="T:System.Linq.Expressions.LabelExpression" /> without a default value.</span>
          </span>
        </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Label">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.LabelTarget Label (string name);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.LabelTarget Label(string name) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.Label(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Label (name As String) As LabelTarget" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Linq::Expressions::LabelTarget ^ Label(System::String ^ name);" />
      <MemberSignature Language="F#" Value="static member Label : string -&gt; System.Linq.Expressions.LabelTarget" Usage="System.Linq.Expressions.Expression.Label name" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.LabelTarget</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="name">
          <span data-ttu-id="fef91-1611">Имя метки.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fef91-1611">The name of the label.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="fef91-1612">Создает объект <see cref="T:System.Linq.Expressions.LabelTarget" />, представляющий метку с типом void и данным именем.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fef91-1612">Creates a <see cref="T:System.Linq.Expressions.LabelTarget" /> representing a label with void type and the given name.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="fef91-1613">Новый объект <see cref="T:System.Linq.Expressions.LabelTarget" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fef91-1613">The new <see cref="T:System.Linq.Expressions.LabelTarget" />.</span>
          </span>
        </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Label">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.LabelTarget Label (Type type);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.LabelTarget Label(class System.Type type) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.Label(System.Type)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Linq::Expressions::LabelTarget ^ Label(Type ^ type);" />
      <MemberSignature Language="F#" Value="static member Label : Type -&gt; System.Linq.Expressions.LabelTarget" Usage="System.Linq.Expressions.Expression.Label type" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.LabelTarget</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="type" Type="System.Type" />
      </Parameters>
      <Docs>
        <param name="type">
          <span data-ttu-id="fef91-1614">Тип значения, которое передается при переходе к метке.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fef91-1614">The type of value that is passed when jumping to the label.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="fef91-1615">Создает объект <see cref="T:System.Linq.Expressions.LabelTarget" />, представляющий метку с данным типом.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fef91-1615">Creates a <see cref="T:System.Linq.Expressions.LabelTarget" /> representing a label with the given type.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="fef91-1616">Новый объект <see cref="T:System.Linq.Expressions.LabelTarget" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fef91-1616">The new <see cref="T:System.Linq.Expressions.LabelTarget" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 <span data-ttu-id="fef91-1617">Следующий пример демонстрирует, как использовать <xref:System.Linq.Expressions.LabelTarget> объекта в выражение цикла.</span><span class="sxs-lookup"><span data-stu-id="fef91-1617">The following example demonstrates how to use a <xref:System.Linq.Expressions.LabelTarget> object in a loop expression.</span></span>  
  
 [!code-csharp[System.Linq.Expressions.ExpressionDev10#44](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.linq.expressions.expressiondev10/cs/program.cs#44)]
 [!code-vb[System.Linq.Expressions.ExpressionDev10#44](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.linq.expressions.expressiondev10/vb/module1.vb#44)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Label">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.LabelExpression Label (System.Linq.Expressions.LabelTarget target, System.Linq.Expressions.Expression defaultValue);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.LabelExpression Label(class System.Linq.Expressions.LabelTarget target, class System.Linq.Expressions.Expression defaultValue) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.Label(System.Linq.Expressions.LabelTarget,System.Linq.Expressions.Expression)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Label (target As LabelTarget, defaultValue As Expression) As LabelExpression" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Linq::Expressions::LabelExpression ^ Label(System::Linq::Expressions::LabelTarget ^ target, System::Linq::Expressions::Expression ^ defaultValue);" />
      <MemberSignature Language="F#" Value="static member Label : System.Linq.Expressions.LabelTarget * System.Linq.Expressions.Expression -&gt; System.Linq.Expressions.LabelExpression" Usage="System.Linq.Expressions.Expression.Label (target, defaultValue)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.LabelExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="target" Type="System.Linq.Expressions.LabelTarget" />
        <Parameter Name="defaultValue" Type="System.Linq.Expressions.Expression" />
      </Parameters>
      <Docs>
        <param name="target">
          <span data-ttu-id="fef91-1618">Объект <see cref="T:System.Linq.Expressions.LabelTarget" />, с которым будет связано данное выражение <see cref="T:System.Linq.Expressions.LabelExpression" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fef91-1618">The <see cref="T:System.Linq.Expressions.LabelTarget" /> which this <see cref="T:System.Linq.Expressions.LabelExpression" /> will be associated with.</span>
          </span>
        </param>
        <param name="defaultValue">
          <span data-ttu-id="fef91-1619">Значение данного выражения <see cref="T:System.Linq.Expressions.LabelExpression" /> после достижения метки через стандартный поток управления.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fef91-1619">The value of this <see cref="T:System.Linq.Expressions.LabelExpression" /> when the label is reached through regular control flow.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="fef91-1620">Создает выражение <see cref="T:System.Linq.Expressions.LabelExpression" />, представляющее метку с данным значением по умолчанию.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fef91-1620">Creates a <see cref="T:System.Linq.Expressions.LabelExpression" /> representing a label with the given default value.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="fef91-1621">Выражение <see cref="T:System.Linq.Expressions.LabelExpression" /> с данным значением по умолчанию.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fef91-1621">A <see cref="T:System.Linq.Expressions.LabelExpression" /> with the given default value.</span>
          </span>
        </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Label">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.LabelTarget Label (Type type, string name);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.LabelTarget Label(class System.Type type, string name) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.Label(System.Type,System.String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Linq::Expressions::LabelTarget ^ Label(Type ^ type, System::String ^ name);" />
      <MemberSignature Language="F#" Value="static member Label : Type * string -&gt; System.Linq.Expressions.LabelTarget" Usage="System.Linq.Expressions.Expression.Label (type, name)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.LabelTarget</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="type" Type="System.Type" />
        <Parameter Name="name" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="type">
          <span data-ttu-id="fef91-1622">Тип значения, которое передается при переходе к метке.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fef91-1622">The type of value that is passed when jumping to the label.</span>
          </span>
        </param>
        <param name="name">
          <span data-ttu-id="fef91-1623">Имя метки.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fef91-1623">The name of the label.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="fef91-1624">Создает объект <see cref="T:System.Linq.Expressions.LabelTarget" />, представляющий метку с данными типом и именем.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fef91-1624">Creates a <see cref="T:System.Linq.Expressions.LabelTarget" /> representing a label with the given type and name.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="fef91-1625">Новый объект <see cref="T:System.Linq.Expressions.LabelTarget" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fef91-1625">The new <see cref="T:System.Linq.Expressions.LabelTarget" />.</span>
          </span>
        </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="Lambda">
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="fef91-1626">Создает дерево выражений, которое представляет лямбда-выражение.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fef91-1626">Creates an expression tree that represents a lambda expression.</span>
          </span>
        </summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Lambda">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.LambdaExpression Lambda (System.Linq.Expressions.Expression body, System.Collections.Generic.IEnumerable&lt;System.Linq.Expressions.ParameterExpression&gt; parameters);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.LambdaExpression Lambda(class System.Linq.Expressions.Expression body, class System.Collections.Generic.IEnumerable`1&lt;class System.Linq.Expressions.ParameterExpression&gt; parameters) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.Lambda(System.Linq.Expressions.Expression,System.Collections.Generic.IEnumerable{System.Linq.Expressions.ParameterExpression})" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Lambda (body As Expression, parameters As IEnumerable(Of ParameterExpression)) As LambdaExpression" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Linq::Expressions::LambdaExpression ^ Lambda(System::Linq::Expressions::Expression ^ body, System::Collections::Generic::IEnumerable&lt;System::Linq::Expressions::ParameterExpression ^&gt; ^ parameters);" />
      <MemberSignature Language="F#" Value="static member Lambda : System.Linq.Expressions.Expression * seq&lt;System.Linq.Expressions.ParameterExpression&gt; -&gt; System.Linq.Expressions.LambdaExpression" Usage="System.Linq.Expressions.Expression.Lambda (body, parameters)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.LambdaExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="body" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="parameters" Type="System.Collections.Generic.IEnumerable&lt;System.Linq.Expressions.ParameterExpression&gt;" />
      </Parameters>
      <Docs>
        <param name="body">
          <span data-ttu-id="fef91-1627">Объект <see cref="T:System.Linq.Expressions.Expression" />, который следует задать в качестве значения свойства <see cref="P:System.Linq.Expressions.LambdaExpression.Body" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fef91-1627">An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.LambdaExpression.Body" /> property equal to.</span>
          </span>
        </param>
        <param name="parameters">
          <span data-ttu-id="fef91-1628">
            <see cref="T:System.Collections.Generic.IEnumerable`1" />, содержащий все объекты <see cref="T:System.Linq.Expressions.ParameterExpression" />, используемые для заполнения коллекции <see cref="P:System.Linq.Expressions.LambdaExpression.Parameters" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fef91-1628">An <see cref="T:System.Collections.Generic.IEnumerable`1" /> that contains <see cref="T:System.Linq.Expressions.ParameterExpression" /> objects to use to populate the <see cref="P:System.Linq.Expressions.LambdaExpression.Parameters" /> collection.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="fef91-1629">Создает лямбда-выражение, сначала создавая тип делегата.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fef91-1629">Creates a LambdaExpression by first constructing a delegate type.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="fef91-1630">Выражение <see cref="T:System.Linq.Expressions.LambdaExpression" />, у которого свойство <see cref="P:System.Linq.Expressions.LambdaExpression.NodeType" /> равняется лямбда-выражению, а для свойств <see cref="P:System.Linq.Expressions.LambdaExpression.Body" /> и <see cref="P:System.Linq.Expressions.LambdaExpression.Parameters" /> заданы указанные значения.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fef91-1630">A <see cref="T:System.Linq.Expressions.LambdaExpression" /> that has the <see cref="P:System.Linq.Expressions.LambdaExpression.NodeType" /> property equal to Lambda and the <see cref="P:System.Linq.Expressions.LambdaExpression.Body" /> and <see cref="P:System.Linq.Expressions.LambdaExpression.Parameters" /> properties set to the specified values.</span>
          </span>
        </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Lambda">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.LambdaExpression Lambda (System.Linq.Expressions.Expression body, params System.Linq.Expressions.ParameterExpression[] parameters);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.LambdaExpression Lambda(class System.Linq.Expressions.Expression body, class System.Linq.Expressions.ParameterExpression[] parameters) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.Lambda(System.Linq.Expressions.Expression,System.Linq.Expressions.ParameterExpression[])" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Lambda (body As Expression, ParamArray parameters As ParameterExpression()) As LambdaExpression" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Linq::Expressions::LambdaExpression ^ Lambda(System::Linq::Expressions::Expression ^ body, ... cli::array &lt;System::Linq::Expressions::ParameterExpression ^&gt; ^ parameters);" />
      <MemberSignature Language="F#" Value="static member Lambda : System.Linq.Expressions.Expression * System.Linq.Expressions.ParameterExpression[] -&gt; System.Linq.Expressions.LambdaExpression" Usage="System.Linq.Expressions.Expression.Lambda (body, parameters)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.LambdaExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="body" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="parameters" Type="System.Linq.Expressions.ParameterExpression[]">
          <Attributes>
            <Attribute>
              <AttributeName>System.ParamArray</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="body">
          <span data-ttu-id="fef91-1631">Объект <see cref="T:System.Linq.Expressions.Expression" />, который следует задать в качестве значения свойства <see cref="P:System.Linq.Expressions.LambdaExpression.Body" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fef91-1631">An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.LambdaExpression.Body" /> property equal to.</span>
          </span>
        </param>
        <param name="parameters">
          <span data-ttu-id="fef91-1632">Массив объектов <see cref="T:System.Linq.Expressions.ParameterExpression" /> для заполнения коллекции <see cref="P:System.Linq.Expressions.LambdaExpression.Parameters" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fef91-1632">An array of <see cref="T:System.Linq.Expressions.ParameterExpression" /> objects to use to populate the <see cref="P:System.Linq.Expressions.LambdaExpression.Parameters" /> collection.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="fef91-1633">Создает <see cref="T:System.Linq.Expressions.LambdaExpression" /> по первому созданию типа делегата.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fef91-1633">Creates a <see cref="T:System.Linq.Expressions.LambdaExpression" /> by first constructing a delegate type.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="fef91-1634">Выражение <see cref="T:System.Linq.Expressions.LambdaExpression" /> со свойством<see cref="P:System.Linq.Expressions.Expression.NodeType" />, равным <see cref="F:System.Linq.Expressions.ExpressionType.Lambda" />, и свойствами <see cref="P:System.Linq.Expressions.LambdaExpression.Body" /> и <see cref="P:System.Linq.Expressions.LambdaExpression.Parameters" />, для которых заданы указанные значения.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fef91-1634">A <see cref="T:System.Linq.Expressions.LambdaExpression" /> that has the <see cref="P:System.Linq.Expressions.Expression.NodeType" /> property equal to <see cref="F:System.Linq.Expressions.ExpressionType.Lambda" /> and the <see cref="P:System.Linq.Expressions.LambdaExpression.Body" /> and <see cref="P:System.Linq.Expressions.LambdaExpression.Parameters" /> properties set to the specified values.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="fef91-1635">`parameters` Параметр должен содержать не более шестнадцати элементов.</span><span class="sxs-lookup"><span data-stu-id="fef91-1635">The `parameters` parameter must not have more than sixteen elements.</span></span>  
  
 <span data-ttu-id="fef91-1636">Элементы `parameters` должно равняться Справочник по выражениям параметров в `body`.</span><span class="sxs-lookup"><span data-stu-id="fef91-1636">The elements of `parameters` must be reference equal to the parameter expressions in `body`.</span></span>  
  
 <span data-ttu-id="fef91-1637">Этот метод создает соответствующий тип делегата из одного из `System.Func` универсальных методах-делегатах.</span><span class="sxs-lookup"><span data-stu-id="fef91-1637">This method constructs an appropriate delegate type from one of the `System.Func` generic delegates.</span></span> <span data-ttu-id="fef91-1638">Затем он передает тип делегата один из <xref:System.Linq.Expressions.ExpressionType.Lambda> фабричные методы для создания <xref:System.Linq.Expressions.LambdaExpression>.</span><span class="sxs-lookup"><span data-stu-id="fef91-1638">It then passes the delegate type to one of the <xref:System.Linq.Expressions.ExpressionType.Lambda> factory methods to create a <xref:System.Linq.Expressions.LambdaExpression>.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="fef91-1639">
            <paramref name="body" /> — <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fef91-1639">
              <paramref name="body" /> is <see langword="null" />.</span>
          </span>
          <span data-ttu-id="fef91-1640">-или-</span>
          <span class="sxs-lookup">
            <span data-stu-id="fef91-1640">-or-</span>
          </span>
          <span data-ttu-id="fef91-1641">Значение одного или нескольких элементов параметра <paramref name="parameters" /> равно <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fef91-1641">One or more elements of <paramref name="parameters" /> are <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="fef91-1642">Параметр <paramref name="parameters" /> содержит более шестнадцати элементов.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fef91-1642">
              <paramref name="parameters" /> contains more than sixteen elements.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="Lambda">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.LambdaExpression Lambda (System.Linq.Expressions.Expression body, bool tailCall, System.Collections.Generic.IEnumerable&lt;System.Linq.Expressions.ParameterExpression&gt; parameters);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.LambdaExpression Lambda(class System.Linq.Expressions.Expression body, bool tailCall, class System.Collections.Generic.IEnumerable`1&lt;class System.Linq.Expressions.ParameterExpression&gt; parameters) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.Lambda(System.Linq.Expressions.Expression,System.Boolean,System.Collections.Generic.IEnumerable{System.Linq.Expressions.ParameterExpression})" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Lambda (body As Expression, tailCall As Boolean, parameters As IEnumerable(Of ParameterExpression)) As LambdaExpression" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Linq::Expressions::LambdaExpression ^ Lambda(System::Linq::Expressions::Expression ^ body, bool tailCall, System::Collections::Generic::IEnumerable&lt;System::Linq::Expressions::ParameterExpression ^&gt; ^ parameters);" />
      <MemberSignature Language="F#" Value="static member Lambda : System.Linq.Expressions.Expression * bool * seq&lt;System.Linq.Expressions.ParameterExpression&gt; -&gt; System.Linq.Expressions.LambdaExpression" Usage="System.Linq.Expressions.Expression.Lambda (body, tailCall, parameters)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.LambdaExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="body" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="tailCall" Type="System.Boolean" />
        <Parameter Name="parameters" Type="System.Collections.Generic.IEnumerable&lt;System.Linq.Expressions.ParameterExpression&gt;" />
      </Parameters>
      <Docs>
        <param name="body">
          <span data-ttu-id="fef91-1643">Объект <see cref="T:System.Linq.Expressions.Expression" />, который следует задать в качестве значения свойства <see cref="P:System.Linq.Expressions.LambdaExpression.Body" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fef91-1643">An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.LambdaExpression.Body" /> property equal to.</span>
          </span>
        </param>
        <param name="tailCall">
          <span data-ttu-id="fef91-1644">Значение <see cref="T:System.Boolean" />, которое указывает, следует ли использовать оптимизацию вызовов с префиксом tail при компиляции созданного выражения.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fef91-1644">A <see cref="T:System.Boolean" /> that indicates if tail call optimization will be applied when compiling the created expression.</span>
          </span>
        </param>
        <param name="parameters">
          <span data-ttu-id="fef91-1645">
            <see cref="T:System.Collections.Generic.IEnumerable`1" />, содержащий все объекты <see cref="T:System.Linq.Expressions.ParameterExpression" />, используемые для заполнения коллекции <see cref="P:System.Linq.Expressions.LambdaExpression.Parameters" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fef91-1645">An <see cref="T:System.Collections.Generic.IEnumerable`1" /> that contains <see cref="T:System.Linq.Expressions.ParameterExpression" /> objects to use to populate the <see cref="P:System.Linq.Expressions.LambdaExpression.Parameters" /> collection.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="fef91-1646">Создает лямбда-выражение, сначала создавая тип делегата.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fef91-1646">Creates a LambdaExpression by first constructing a delegate type.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="fef91-1647">Выражение <see cref="T:System.Linq.Expressions.LambdaExpression" />, у которого свойство <see cref="P:System.Linq.Expressions.LambdaExpression.NodeType" /> равняется лямбда-выражению, а для свойств <see cref="P:System.Linq.Expressions.LambdaExpression.Body" /> и <see cref="P:System.Linq.Expressions.LambdaExpression.Parameters" /> заданы указанные значения.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fef91-1647">A <see cref="T:System.Linq.Expressions.LambdaExpression" /> that has the <see cref="P:System.Linq.Expressions.LambdaExpression.NodeType" /> property equal to Lambda and the <see cref="P:System.Linq.Expressions.LambdaExpression.Body" /> and <see cref="P:System.Linq.Expressions.LambdaExpression.Parameters" /> properties set to the specified values.</span>
          </span>
        </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Lambda">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.LambdaExpression Lambda (System.Linq.Expressions.Expression body, bool tailCall, params System.Linq.Expressions.ParameterExpression[] parameters);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.LambdaExpression Lambda(class System.Linq.Expressions.Expression body, bool tailCall, class System.Linq.Expressions.ParameterExpression[] parameters) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.Lambda(System.Linq.Expressions.Expression,System.Boolean,System.Linq.Expressions.ParameterExpression[])" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Lambda (body As Expression, tailCall As Boolean, ParamArray parameters As ParameterExpression()) As LambdaExpression" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Linq::Expressions::LambdaExpression ^ Lambda(System::Linq::Expressions::Expression ^ body, bool tailCall, ... cli::array &lt;System::Linq::Expressions::ParameterExpression ^&gt; ^ parameters);" />
      <MemberSignature Language="F#" Value="static member Lambda : System.Linq.Expressions.Expression * bool * System.Linq.Expressions.ParameterExpression[] -&gt; System.Linq.Expressions.LambdaExpression" Usage="System.Linq.Expressions.Expression.Lambda (body, tailCall, parameters)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.LambdaExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="body" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="tailCall" Type="System.Boolean" />
        <Parameter Name="parameters" Type="System.Linq.Expressions.ParameterExpression[]">
          <Attributes>
            <Attribute>
              <AttributeName>System.ParamArray</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="body">
          <span data-ttu-id="fef91-1648">Объект <see cref="T:System.Linq.Expressions.Expression" />, который следует задать в качестве значения свойства <see cref="P:System.Linq.Expressions.LambdaExpression.Body" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fef91-1648">An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.LambdaExpression.Body" /> property equal to.</span>
          </span>
        </param>
        <param name="tailCall">
          <span data-ttu-id="fef91-1649">Значение <see cref="T:System.Boolean" />, которое указывает, следует ли использовать оптимизацию вызовов с префиксом tail при компиляции созданного выражения.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fef91-1649">A <see cref="T:System.Boolean" /> that indicates if tail call optimization will be applied when compiling the created expression.</span>
          </span>
        </param>
        <param name="parameters">
          <span data-ttu-id="fef91-1650">Массив, содержащий объекты <see cref="T:System.Linq.Expressions.ParameterExpression" />, используемые для заполнения коллекции <see cref="P:System.Linq.Expressions.LambdaExpression.Parameters" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fef91-1650">An array that contains <see cref="T:System.Linq.Expressions.ParameterExpression" /> objects to use to populate the <see cref="P:System.Linq.Expressions.LambdaExpression.Parameters" /> collection.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="fef91-1651">Создает лямбда-выражение, сначала создавая тип делегата.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fef91-1651">Creates a LambdaExpression by first constructing a delegate type.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="fef91-1652">Выражение <see cref="T:System.Linq.Expressions.LambdaExpression" />, у которого свойство <see cref="P:System.Linq.Expressions.LambdaExpression.NodeType" /> равняется лямбда-выражению, а для свойств <see cref="P:System.Linq.Expressions.LambdaExpression.Body" /> и <see cref="P:System.Linq.Expressions.LambdaExpression.Parameters" /> заданы указанные значения.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fef91-1652">A <see cref="T:System.Linq.Expressions.LambdaExpression" /> that has the <see cref="P:System.Linq.Expressions.LambdaExpression.NodeType" /> property equal to Lambda and the <see cref="P:System.Linq.Expressions.LambdaExpression.Body" /> and <see cref="P:System.Linq.Expressions.LambdaExpression.Parameters" /> properties set to the specified values.</span>
          </span>
        </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Lambda">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.LambdaExpression Lambda (System.Linq.Expressions.Expression body, string name, System.Collections.Generic.IEnumerable&lt;System.Linq.Expressions.ParameterExpression&gt; parameters);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.LambdaExpression Lambda(class System.Linq.Expressions.Expression body, string name, class System.Collections.Generic.IEnumerable`1&lt;class System.Linq.Expressions.ParameterExpression&gt; parameters) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.Lambda(System.Linq.Expressions.Expression,System.String,System.Collections.Generic.IEnumerable{System.Linq.Expressions.ParameterExpression})" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Lambda (body As Expression, name As String, parameters As IEnumerable(Of ParameterExpression)) As LambdaExpression" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Linq::Expressions::LambdaExpression ^ Lambda(System::Linq::Expressions::Expression ^ body, System::String ^ name, System::Collections::Generic::IEnumerable&lt;System::Linq::Expressions::ParameterExpression ^&gt; ^ parameters);" />
      <MemberSignature Language="F#" Value="static member Lambda : System.Linq.Expressions.Expression * string * seq&lt;System.Linq.Expressions.ParameterExpression&gt; -&gt; System.Linq.Expressions.LambdaExpression" Usage="System.Linq.Expressions.Expression.Lambda (body, name, parameters)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.LambdaExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="body" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="name" Type="System.String" />
        <Parameter Name="parameters" Type="System.Collections.Generic.IEnumerable&lt;System.Linq.Expressions.ParameterExpression&gt;" />
      </Parameters>
      <Docs>
        <param name="body">
          <span data-ttu-id="fef91-1653">Объект <see cref="T:System.Linq.Expressions.Expression" />, который следует задать в качестве значения свойства <see cref="P:System.Linq.Expressions.LambdaExpression.Body" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fef91-1653">An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.LambdaExpression.Body" /> property equal to.</span>
          </span>
        </param>
        <param name="name">
          <span data-ttu-id="fef91-1654">Имя для лямбда-функции.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fef91-1654">The name for the lambda.</span>
          </span>
          <span data-ttu-id="fef91-1655">Используется для выпуска сведений об отладке.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fef91-1655">Used for emitting debug information.</span>
          </span>
        </param>
        <param name="parameters">
          <span data-ttu-id="fef91-1656">
            <see cref="T:System.Collections.Generic.IEnumerable`1" />, содержащий все объекты <see cref="T:System.Linq.Expressions.ParameterExpression" />, используемые для заполнения коллекции <see cref="P:System.Linq.Expressions.LambdaExpression.Parameters" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fef91-1656">An <see cref="T:System.Collections.Generic.IEnumerable`1" /> that contains <see cref="T:System.Linq.Expressions.ParameterExpression" /> objects to use to populate the <see cref="P:System.Linq.Expressions.LambdaExpression.Parameters" /> collection.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="fef91-1657">Создает лямбда-выражение, сначала создавая тип делегата.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fef91-1657">Creates a LambdaExpression by first constructing a delegate type.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="fef91-1658">Выражение <see cref="T:System.Linq.Expressions.LambdaExpression" />, у которого свойство <see cref="P:System.Linq.Expressions.LambdaExpression.NodeType" /> равняется лямбда-выражению, а для свойств <see cref="P:System.Linq.Expressions.LambdaExpression.Body" /> и <see cref="P:System.Linq.Expressions.LambdaExpression.Parameters" /> заданы указанные значения.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fef91-1658">A <see cref="T:System.Linq.Expressions.LambdaExpression" /> that has the <see cref="P:System.Linq.Expressions.LambdaExpression.NodeType" /> property equal to Lambda and the <see cref="P:System.Linq.Expressions.LambdaExpression.Body" /> and <see cref="P:System.Linq.Expressions.LambdaExpression.Parameters" /> properties set to the specified values.</span>
          </span>
        </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Lambda">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.LambdaExpression Lambda (Type delegateType, System.Linq.Expressions.Expression body, System.Collections.Generic.IEnumerable&lt;System.Linq.Expressions.ParameterExpression&gt; parameters);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.LambdaExpression Lambda(class System.Type delegateType, class System.Linq.Expressions.Expression body, class System.Collections.Generic.IEnumerable`1&lt;class System.Linq.Expressions.ParameterExpression&gt; parameters) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.Lambda(System.Type,System.Linq.Expressions.Expression,System.Collections.Generic.IEnumerable{System.Linq.Expressions.ParameterExpression})" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Lambda (delegateType As Type, body As Expression, parameters As IEnumerable(Of ParameterExpression)) As LambdaExpression" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Linq::Expressions::LambdaExpression ^ Lambda(Type ^ delegateType, System::Linq::Expressions::Expression ^ body, System::Collections::Generic::IEnumerable&lt;System::Linq::Expressions::ParameterExpression ^&gt; ^ parameters);" />
      <MemberSignature Language="F#" Value="static member Lambda : Type * System.Linq.Expressions.Expression * seq&lt;System.Linq.Expressions.ParameterExpression&gt; -&gt; System.Linq.Expressions.LambdaExpression" Usage="System.Linq.Expressions.Expression.Lambda (delegateType, body, parameters)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.LambdaExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="delegateType" Type="System.Type" />
        <Parameter Name="body" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="parameters" Type="System.Collections.Generic.IEnumerable&lt;System.Linq.Expressions.ParameterExpression&gt;" />
      </Parameters>
      <Docs>
        <param name="delegateType">
          <span data-ttu-id="fef91-1659">Тип <see cref="T:System.Type" />, представляющий сигнатуру делегата для лямбда-выражения.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fef91-1659">A <see cref="T:System.Type" /> that represents a delegate signature for the lambda.</span>
          </span>
        </param>
        <param name="body">
          <span data-ttu-id="fef91-1660">Объект <see cref="T:System.Linq.Expressions.Expression" />, который следует задать в качестве значения свойства <see cref="P:System.Linq.Expressions.LambdaExpression.Body" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fef91-1660">An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.LambdaExpression.Body" /> property equal to.</span>
          </span>
        </param>
        <param name="parameters">
          <span data-ttu-id="fef91-1661">
            <see cref="T:System.Collections.Generic.IEnumerable`1" />, содержащий все объекты <see cref="T:System.Linq.Expressions.ParameterExpression" />, используемые для заполнения коллекции <see cref="P:System.Linq.Expressions.LambdaExpression.Parameters" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fef91-1661">An <see cref="T:System.Collections.Generic.IEnumerable`1" /> that contains <see cref="T:System.Linq.Expressions.ParameterExpression" /> objects to use to populate the <see cref="P:System.Linq.Expressions.LambdaExpression.Parameters" /> collection.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="fef91-1662">Создает <see cref="T:System.Linq.Expressions.LambdaExpression" /> по первому созданию типа делегата.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fef91-1662">Creates a <see cref="T:System.Linq.Expressions.LambdaExpression" /> by first constructing a delegate type.</span>
          </span>
          <span data-ttu-id="fef91-1663">Он может использоваться, если тип делегата неизвестен в момент компиляции.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fef91-1663">It can be used when the delegate type is not known at compile time.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="fef91-1664">Объект, представляющий лямбда-выражение со свойством <see cref="P:System.Linq.Expressions.Expression.NodeType" />, равным <see cref="F:System.Linq.Expressions.ExpressionType.Lambda" /> и <see cref="P:System.Linq.Expressions.LambdaExpression.Body" />, и свойства <see cref="P:System.Linq.Expressions.LambdaExpression.Parameters" />, для которых заданы указанные значения.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fef91-1664">An object that represents a lambda expression which has the <see cref="P:System.Linq.Expressions.Expression.NodeType" /> property equal to <see cref="F:System.Linq.Expressions.ExpressionType.Lambda" /> and the <see cref="P:System.Linq.Expressions.LambdaExpression.Body" /> and <see cref="P:System.Linq.Expressions.LambdaExpression.Parameters" /> properties set to the specified values.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="fef91-1665">Объект, который возвращается из функции имеет тип <xref:System.Linq.Expressions.Expression%601>.</span><span class="sxs-lookup"><span data-stu-id="fef91-1665">The object that is returned from this function is of type <xref:System.Linq.Expressions.Expression%601>.</span></span> <span data-ttu-id="fef91-1666"><xref:System.Linq.Expressions.LambdaExpression> Типа используется для представления возвращенного объекта, так как конкретный тип лямбда-выражения не известен во время компиляции.</span><span class="sxs-lookup"><span data-stu-id="fef91-1666">The <xref:System.Linq.Expressions.LambdaExpression> type is used to represent the returned object because the concrete type of the lambda expression is not known at compile time.</span></span>  
  
 <span data-ttu-id="fef91-1667">Число параметров для типа делегата, представленного`delegateType` должна равняться длине `parameters`.</span><span class="sxs-lookup"><span data-stu-id="fef91-1667">The number of parameters for the delegate type represented by`delegateType` must equal the length of `parameters`.</span></span>  
  
 <span data-ttu-id="fef91-1668">Элементы `parameters` должно равняться Справочник по выражениям параметров в `body`.</span><span class="sxs-lookup"><span data-stu-id="fef91-1668">The elements of `parameters` must be reference equal to the parameter expressions in `body`.</span></span>  
  
 <span data-ttu-id="fef91-1669"><xref:System.Linq.Expressions.Expression.Type%2A> Результирующего объекта равно `delegateType`.</span><span class="sxs-lookup"><span data-stu-id="fef91-1669">The <xref:System.Linq.Expressions.Expression.Type%2A> property of the resulting object is equal to `delegateType`.</span></span> <span data-ttu-id="fef91-1670">Если `parameters` — `null`, <xref:System.Linq.Expressions.LambdaExpression.Parameters%2A> свойства результирующего объекта является пустая коллекция.</span><span class="sxs-lookup"><span data-stu-id="fef91-1670">If `parameters` is `null`, the <xref:System.Linq.Expressions.LambdaExpression.Parameters%2A> property of the resulting object is an empty collection.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="fef91-1671">Следующий пример демонстрирует создание выражения, которое представляет лямбда-выражение, которое добавляет 1 переданный аргумент.</span><span class="sxs-lookup"><span data-stu-id="fef91-1671">The following example demonstrates how to create an expression that represents a lambda expression that adds 1 to the passed argument.</span></span>  
  
 [!code-csharp[System.Linq.Expressions.ExpressionDev10#42](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.linq.expressions.expressiondev10/cs/program.cs#42)]
 [!code-vb[System.Linq.Expressions.ExpressionDev10#42](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.linq.expressions.expressiondev10/vb/module1.vb#42)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="fef91-1672">Значение параметра <paramref name="delegateType" /> или <paramref name="body" /> — <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fef91-1672">
              <paramref name="delegateType" /> or <paramref name="body" /> is <see langword="null" />.</span>
          </span>
          <span data-ttu-id="fef91-1673">-или-</span>
          <span class="sxs-lookup">
            <span data-stu-id="fef91-1673">-or-</span>
          </span>
          <span data-ttu-id="fef91-1674">Значение одного или нескольких элементов параметра <paramref name="parameters" /> равны <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fef91-1674">One or more elements in <paramref name="parameters" /> are <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="fef91-1675">Тип <paramref name="delegateType" /> не представляет тип делегата.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fef91-1675">
              <paramref name="delegateType" /> does not represent a delegate type.</span>
          </span>
          <span data-ttu-id="fef91-1676">-или-</span>
          <span class="sxs-lookup">
            <span data-stu-id="fef91-1676">-or-</span>
          </span>
          <span data-ttu-id="fef91-1677">Тип <paramref name="body" />.Type представляет тип, который не может быть назначен для типа возврата типа делегата, представленного <paramref name="delegateType" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fef91-1677">
              <paramref name="body" />.Type represents a type that is not assignable to the return type of the delegate type represented by <paramref name="delegateType" />.</span>
          </span>
          <span data-ttu-id="fef91-1678">-или-</span>
          <span class="sxs-lookup">
            <span data-stu-id="fef91-1678">-or-</span>
          </span>
          <span data-ttu-id="fef91-1679">
            <paramref name="parameters" /> не содержит количество элементов, равное количеству списка параметров для типа делегата, представленного <paramref name="delegateType" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fef91-1679">
              <paramref name="parameters" /> does not contain the same number of elements as the list of parameters for the delegate type represented by <paramref name="delegateType" />.</span>
          </span>
          <span data-ttu-id="fef91-1680">-или-</span>
          <span class="sxs-lookup">
            <span data-stu-id="fef91-1680">-or-</span>
          </span>
          <span data-ttu-id="fef91-1681">Свойство <see cref="P:System.Linq.Expressions.Expression.Type" /> элемента <paramref name="parameters" /> нельзя назначить от типа соответствующего типа параметра типа делегата, представленного через <paramref name="delegateType" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fef91-1681">The <see cref="P:System.Linq.Expressions.Expression.Type" /> property of an element of <paramref name="parameters" /> is not assignable from the type of the corresponding parameter type of the delegate type represented by <paramref name="delegateType" />.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="Lambda">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.LambdaExpression Lambda (Type delegateType, System.Linq.Expressions.Expression body, params System.Linq.Expressions.ParameterExpression[] parameters);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.LambdaExpression Lambda(class System.Type delegateType, class System.Linq.Expressions.Expression body, class System.Linq.Expressions.ParameterExpression[] parameters) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.Lambda(System.Type,System.Linq.Expressions.Expression,System.Linq.Expressions.ParameterExpression[])" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Lambda (delegateType As Type, body As Expression, ParamArray parameters As ParameterExpression()) As LambdaExpression" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Linq::Expressions::LambdaExpression ^ Lambda(Type ^ delegateType, System::Linq::Expressions::Expression ^ body, ... cli::array &lt;System::Linq::Expressions::ParameterExpression ^&gt; ^ parameters);" />
      <MemberSignature Language="F#" Value="static member Lambda : Type * System.Linq.Expressions.Expression * System.Linq.Expressions.ParameterExpression[] -&gt; System.Linq.Expressions.LambdaExpression" Usage="System.Linq.Expressions.Expression.Lambda (delegateType, body, parameters)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.LambdaExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="delegateType" Type="System.Type" />
        <Parameter Name="body" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="parameters" Type="System.Linq.Expressions.ParameterExpression[]">
          <Attributes>
            <Attribute>
              <AttributeName>System.ParamArray</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="delegateType">
          <span data-ttu-id="fef91-1682">Тип <see cref="T:System.Type" />, представляющий сигнатуру делегата для лямбда-выражения.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fef91-1682">A <see cref="T:System.Type" /> that represents a delegate signature for the lambda.</span>
          </span>
        </param>
        <param name="body">
          <span data-ttu-id="fef91-1683">Объект <see cref="T:System.Linq.Expressions.Expression" />, который следует задать в качестве значения свойства <see cref="P:System.Linq.Expressions.LambdaExpression.Body" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fef91-1683">An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.LambdaExpression.Body" /> property equal to.</span>
          </span>
        </param>
        <param name="parameters">
          <span data-ttu-id="fef91-1684">Массив объектов <see cref="T:System.Linq.Expressions.ParameterExpression" /> для заполнения коллекции <see cref="P:System.Linq.Expressions.LambdaExpression.Parameters" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fef91-1684">An array of <see cref="T:System.Linq.Expressions.ParameterExpression" /> objects to use to populate the <see cref="P:System.Linq.Expressions.LambdaExpression.Parameters" /> collection.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="fef91-1685">Создает <see cref="T:System.Linq.Expressions.LambdaExpression" /> по первому созданию типа делегата.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fef91-1685">Creates a <see cref="T:System.Linq.Expressions.LambdaExpression" /> by first constructing a delegate type.</span>
          </span>
          <span data-ttu-id="fef91-1686">Он может использоваться, если тип делегата неизвестен в момент компиляции.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fef91-1686">It can be used when the delegate type is not known at compile time.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="fef91-1687">Объект, представляющий лямбда-выражение со свойством <see cref="P:System.Linq.Expressions.Expression.NodeType" />, равным <see cref="F:System.Linq.Expressions.ExpressionType.Lambda" /> и <see cref="P:System.Linq.Expressions.LambdaExpression.Body" />, и свойства <see cref="P:System.Linq.Expressions.LambdaExpression.Parameters" />, для которых заданы указанные значения.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fef91-1687">An object that represents a lambda expression which has the <see cref="P:System.Linq.Expressions.Expression.NodeType" /> property equal to <see cref="F:System.Linq.Expressions.ExpressionType.Lambda" /> and the <see cref="P:System.Linq.Expressions.LambdaExpression.Body" /> and <see cref="P:System.Linq.Expressions.LambdaExpression.Parameters" /> properties set to the specified values.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="fef91-1688">Объект, который возвращается из функции имеет тип <xref:System.Linq.Expressions.Expression%601>.</span><span class="sxs-lookup"><span data-stu-id="fef91-1688">The object that is returned from this function is of type <xref:System.Linq.Expressions.Expression%601>.</span></span> <span data-ttu-id="fef91-1689"><xref:System.Linq.Expressions.LambdaExpression> Типа используется для представления возвращенного объекта, так как конкретный тип лямбда-выражения не известен во время компиляции.</span><span class="sxs-lookup"><span data-stu-id="fef91-1689">The <xref:System.Linq.Expressions.LambdaExpression> type is used to represent the returned object because the concrete type of the lambda expression is not known at compile time.</span></span>  
  
 <span data-ttu-id="fef91-1690">Число параметров для типа делегата, представленного `delegateType` должна равняться длине `parameters`.</span><span class="sxs-lookup"><span data-stu-id="fef91-1690">The number of parameters for the delegate type represented by `delegateType` must equal the length of `parameters`.</span></span>  
  
 <span data-ttu-id="fef91-1691">Элементы `parameters` должно равняться Справочник по выражениям параметров в `body`.</span><span class="sxs-lookup"><span data-stu-id="fef91-1691">The elements of `parameters` must be reference equal to the parameter expressions in `body`.</span></span>  
  
 <span data-ttu-id="fef91-1692"><xref:System.Linq.Expressions.Expression.Type%2A> Результирующего объекта равно `delegateType`.</span><span class="sxs-lookup"><span data-stu-id="fef91-1692">The <xref:System.Linq.Expressions.Expression.Type%2A> property of the resulting object is equal to `delegateType`.</span></span> <span data-ttu-id="fef91-1693">Если `parameters` — `null`, <xref:System.Linq.Expressions.LambdaExpression.Parameters%2A> свойства результирующего объекта является пустая коллекция.</span><span class="sxs-lookup"><span data-stu-id="fef91-1693">If `parameters` is `null`, the <xref:System.Linq.Expressions.LambdaExpression.Parameters%2A> property of the resulting object is an empty collection.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="fef91-1694">Значение параметра <paramref name="delegateType" /> или <paramref name="body" /> — <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fef91-1694">
              <paramref name="delegateType" /> or <paramref name="body" /> is <see langword="null" />.</span>
          </span>
          <span data-ttu-id="fef91-1695">-или-</span>
          <span class="sxs-lookup">
            <span data-stu-id="fef91-1695">-or-</span>
          </span>
          <span data-ttu-id="fef91-1696">Значение одного или нескольких элементов параметра <paramref name="parameters" /> равны <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fef91-1696">One or more elements in <paramref name="parameters" /> are <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="fef91-1697">Тип <paramref name="delegateType" /> не представляет тип делегата.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fef91-1697">
              <paramref name="delegateType" /> does not represent a delegate type.</span>
          </span>
          <span data-ttu-id="fef91-1698">-или-</span>
          <span class="sxs-lookup">
            <span data-stu-id="fef91-1698">-or-</span>
          </span>
          <span data-ttu-id="fef91-1699">Тип <paramref name="body" />.Type представляет тип, который не может быть назначен для типа возврата типа делегата, представленного <paramref name="delegateType" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fef91-1699">
              <paramref name="body" />.Type represents a type that is not assignable to the return type of the delegate type represented by <paramref name="delegateType" />.</span>
          </span>
          <span data-ttu-id="fef91-1700">-или-</span>
          <span class="sxs-lookup">
            <span data-stu-id="fef91-1700">-or-</span>
          </span>
          <span data-ttu-id="fef91-1701">
            <paramref name="parameters" /> не содержит количество элементов, равное количеству списка параметров для типа делегата, представленного <paramref name="delegateType" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fef91-1701">
              <paramref name="parameters" /> does not contain the same number of elements as the list of parameters for the delegate type represented by <paramref name="delegateType" />.</span>
          </span>
          <span data-ttu-id="fef91-1702">-или-</span>
          <span class="sxs-lookup">
            <span data-stu-id="fef91-1702">-or-</span>
          </span>
          <span data-ttu-id="fef91-1703">Свойство <see cref="P:System.Linq.Expressions.Expression.Type" /> элемента <paramref name="parameters" /> нельзя назначить от типа соответствующего типа параметра типа делегата, представленного через <paramref name="delegateType" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fef91-1703">The <see cref="P:System.Linq.Expressions.Expression.Type" /> property of an element of <paramref name="parameters" /> is not assignable from the type of the corresponding parameter type of the delegate type represented by <paramref name="delegateType" />.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="Lambda">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.LambdaExpression Lambda (System.Linq.Expressions.Expression body, string name, bool tailCall, System.Collections.Generic.IEnumerable&lt;System.Linq.Expressions.ParameterExpression&gt; parameters);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.LambdaExpression Lambda(class System.Linq.Expressions.Expression body, string name, bool tailCall, class System.Collections.Generic.IEnumerable`1&lt;class System.Linq.Expressions.ParameterExpression&gt; parameters) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.Lambda(System.Linq.Expressions.Expression,System.String,System.Boolean,System.Collections.Generic.IEnumerable{System.Linq.Expressions.ParameterExpression})" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Lambda (body As Expression, name As String, tailCall As Boolean, parameters As IEnumerable(Of ParameterExpression)) As LambdaExpression" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Linq::Expressions::LambdaExpression ^ Lambda(System::Linq::Expressions::Expression ^ body, System::String ^ name, bool tailCall, System::Collections::Generic::IEnumerable&lt;System::Linq::Expressions::ParameterExpression ^&gt; ^ parameters);" />
      <MemberSignature Language="F#" Value="static member Lambda : System.Linq.Expressions.Expression * string * bool * seq&lt;System.Linq.Expressions.ParameterExpression&gt; -&gt; System.Linq.Expressions.LambdaExpression" Usage="System.Linq.Expressions.Expression.Lambda (body, name, tailCall, parameters)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.LambdaExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="body" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="name" Type="System.String" />
        <Parameter Name="tailCall" Type="System.Boolean" />
        <Parameter Name="parameters" Type="System.Collections.Generic.IEnumerable&lt;System.Linq.Expressions.ParameterExpression&gt;" />
      </Parameters>
      <Docs>
        <param name="body">
          <span data-ttu-id="fef91-1704">Объект <see cref="T:System.Linq.Expressions.Expression" />, который следует задать в качестве значения свойства <see cref="P:System.Linq.Expressions.LambdaExpression.Body" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fef91-1704">An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.LambdaExpression.Body" /> property equal to.</span>
          </span>
        </param>
        <param name="name">
          <span data-ttu-id="fef91-1705">Имя для лямбда-функции.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fef91-1705">The name for the lambda.</span>
          </span>
          <span data-ttu-id="fef91-1706">Используется для выпуска сведений об отладке.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fef91-1706">Used for emitting debug information.</span>
          </span>
        </param>
        <param name="tailCall">
          <span data-ttu-id="fef91-1707">Значение <see cref="T:System.Boolean" />, которое указывает, следует ли использовать оптимизацию вызовов с префиксом tail при компиляции созданного выражения.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fef91-1707">A <see cref="T:System.Boolean" /> that indicates if tail call optimization will be applied when compiling the created expression.</span>
          </span>
        </param>
        <param name="parameters">
          <span data-ttu-id="fef91-1708">
            <see cref="T:System.Collections.Generic.IEnumerable`1" />, содержащий все объекты <see cref="T:System.Linq.Expressions.ParameterExpression" />, используемые для заполнения коллекции <see cref="P:System.Linq.Expressions.LambdaExpression.Parameters" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fef91-1708">An <see cref="T:System.Collections.Generic.IEnumerable`1" /> that contains <see cref="T:System.Linq.Expressions.ParameterExpression" /> objects to use to populate the <see cref="P:System.Linq.Expressions.LambdaExpression.Parameters" /> collection.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="fef91-1709">Создает лямбда-выражение, сначала создавая тип делегата.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fef91-1709">Creates a LambdaExpression by first constructing a delegate type.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="fef91-1710">Выражение <see cref="T:System.Linq.Expressions.LambdaExpression" />, у которого свойство <see cref="P:System.Linq.Expressions.LambdaExpression.NodeType" /> равняется лямбда-выражению, а для свойств <see cref="P:System.Linq.Expressions.LambdaExpression.Body" /> и <see cref="P:System.Linq.Expressions.LambdaExpression.Parameters" /> заданы указанные значения.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fef91-1710">A <see cref="T:System.Linq.Expressions.LambdaExpression" /> that has the <see cref="P:System.Linq.Expressions.LambdaExpression.NodeType" /> property equal to Lambda and the <see cref="P:System.Linq.Expressions.LambdaExpression.Body" /> and <see cref="P:System.Linq.Expressions.LambdaExpression.Parameters" /> properties set to the specified values.</span>
          </span>
        </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Lambda">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.LambdaExpression Lambda (Type delegateType, System.Linq.Expressions.Expression body, bool tailCall, System.Collections.Generic.IEnumerable&lt;System.Linq.Expressions.ParameterExpression&gt; parameters);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.LambdaExpression Lambda(class System.Type delegateType, class System.Linq.Expressions.Expression body, bool tailCall, class System.Collections.Generic.IEnumerable`1&lt;class System.Linq.Expressions.ParameterExpression&gt; parameters) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.Lambda(System.Type,System.Linq.Expressions.Expression,System.Boolean,System.Collections.Generic.IEnumerable{System.Linq.Expressions.ParameterExpression})" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Lambda (delegateType As Type, body As Expression, tailCall As Boolean, parameters As IEnumerable(Of ParameterExpression)) As LambdaExpression" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Linq::Expressions::LambdaExpression ^ Lambda(Type ^ delegateType, System::Linq::Expressions::Expression ^ body, bool tailCall, System::Collections::Generic::IEnumerable&lt;System::Linq::Expressions::ParameterExpression ^&gt; ^ parameters);" />
      <MemberSignature Language="F#" Value="static member Lambda : Type * System.Linq.Expressions.Expression * bool * seq&lt;System.Linq.Expressions.ParameterExpression&gt; -&gt; System.Linq.Expressions.LambdaExpression" Usage="System.Linq.Expressions.Expression.Lambda (delegateType, body, tailCall, parameters)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.LambdaExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="delegateType" Type="System.Type" />
        <Parameter Name="body" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="tailCall" Type="System.Boolean" />
        <Parameter Name="parameters" Type="System.Collections.Generic.IEnumerable&lt;System.Linq.Expressions.ParameterExpression&gt;" />
      </Parameters>
      <Docs>
        <param name="delegateType">
          <span data-ttu-id="fef91-1711">Объект <see cref="P:System.Linq.Expressions.Expression.Type" />, представляющий сигнатуру делегата для лямбда-выражения.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fef91-1711">A <see cref="P:System.Linq.Expressions.Expression.Type" /> representing the delegate signature for the lambda.</span>
          </span>
        </param>
        <param name="body">
          <span data-ttu-id="fef91-1712">Объект <see cref="T:System.Linq.Expressions.Expression" />, который следует задать в качестве значения свойства <see cref="P:System.Linq.Expressions.LambdaExpression.Body" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fef91-1712">An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.LambdaExpression.Body" /> property equal to.</span>
          </span>
        </param>
        <param name="tailCall">
          <span data-ttu-id="fef91-1713">Значение <see cref="T:System.Boolean" />, которое указывает, следует ли использовать оптимизацию вызовов с префиксом tail при компиляции созданного выражения.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fef91-1713">A <see cref="T:System.Boolean" /> that indicates if tail call optimization will be applied when compiling the created expression.</span>
          </span>
        </param>
        <param name="parameters">
          <span data-ttu-id="fef91-1714">
            <see cref="T:System.Collections.Generic.IEnumerable`1" />, содержащий все объекты <see cref="T:System.Linq.Expressions.ParameterExpression" />, используемые для заполнения коллекции <see cref="P:System.Linq.Expressions.LambdaExpression.Parameters" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fef91-1714">An <see cref="T:System.Collections.Generic.IEnumerable`1" /> that contains <see cref="T:System.Linq.Expressions.ParameterExpression" /> objects to use to populate the <see cref="P:System.Linq.Expressions.LambdaExpression.Parameters" /> collection.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="fef91-1715">Создает лямбда-выражение, сначала создавая тип делегата.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fef91-1715">Creates a LambdaExpression by first constructing a delegate type.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="fef91-1716">Выражение <see cref="T:System.Linq.Expressions.LambdaExpression" />, у которого свойство <see cref="P:System.Linq.Expressions.LambdaExpression.NodeType" /> равняется лямбда-выражению, а для свойств <see cref="P:System.Linq.Expressions.LambdaExpression.Body" /> и <see cref="P:System.Linq.Expressions.LambdaExpression.Parameters" /> заданы указанные значения.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fef91-1716">A <see cref="T:System.Linq.Expressions.LambdaExpression" /> that has the <see cref="P:System.Linq.Expressions.LambdaExpression.NodeType" /> property equal to Lambda and the <see cref="P:System.Linq.Expressions.LambdaExpression.Body" /> and <see cref="P:System.Linq.Expressions.LambdaExpression.Parameters" /> properties set to the specified values.</span>
          </span>
        </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Lambda">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.LambdaExpression Lambda (Type delegateType, System.Linq.Expressions.Expression body, bool tailCall, params System.Linq.Expressions.ParameterExpression[] parameters);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.LambdaExpression Lambda(class System.Type delegateType, class System.Linq.Expressions.Expression body, bool tailCall, class System.Linq.Expressions.ParameterExpression[] parameters) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.Lambda(System.Type,System.Linq.Expressions.Expression,System.Boolean,System.Linq.Expressions.ParameterExpression[])" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Lambda (delegateType As Type, body As Expression, tailCall As Boolean, ParamArray parameters As ParameterExpression()) As LambdaExpression" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Linq::Expressions::LambdaExpression ^ Lambda(Type ^ delegateType, System::Linq::Expressions::Expression ^ body, bool tailCall, ... cli::array &lt;System::Linq::Expressions::ParameterExpression ^&gt; ^ parameters);" />
      <MemberSignature Language="F#" Value="static member Lambda : Type * System.Linq.Expressions.Expression * bool * System.Linq.Expressions.ParameterExpression[] -&gt; System.Linq.Expressions.LambdaExpression" Usage="System.Linq.Expressions.Expression.Lambda (delegateType, body, tailCall, parameters)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.LambdaExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="delegateType" Type="System.Type" />
        <Parameter Name="body" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="tailCall" Type="System.Boolean" />
        <Parameter Name="parameters" Type="System.Linq.Expressions.ParameterExpression[]">
          <Attributes>
            <Attribute>
              <AttributeName>System.ParamArray</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="delegateType">
          <span data-ttu-id="fef91-1717">Объект <see cref="P:System.Linq.Expressions.Expression.Type" />, представляющий сигнатуру делегата для лямбда-выражения.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fef91-1717">A <see cref="P:System.Linq.Expressions.Expression.Type" /> representing the delegate signature for the lambda.</span>
          </span>
        </param>
        <param name="body">
          <span data-ttu-id="fef91-1718">Объект <see cref="T:System.Linq.Expressions.Expression" />, который следует задать в качестве значения свойства <see cref="P:System.Linq.Expressions.LambdaExpression.Body" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fef91-1718">An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.LambdaExpression.Body" /> property equal to.</span>
          </span>
        </param>
        <param name="tailCall">
          <span data-ttu-id="fef91-1719">Значение <see cref="T:System.Boolean" />, которое указывает, следует ли использовать оптимизацию вызовов с префиксом tail при компиляции созданного выражения.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fef91-1719">A <see cref="T:System.Boolean" /> that indicates if tail call optimization will be applied when compiling the created expression.</span>
          </span>
        </param>
        <param name="parameters">
          <span data-ttu-id="fef91-1720">Массив, содержащий объекты <see cref="T:System.Linq.Expressions.ParameterExpression" />, используемые для заполнения коллекции <see cref="P:System.Linq.Expressions.LambdaExpression.Parameters" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fef91-1720">An array that contains <see cref="T:System.Linq.Expressions.ParameterExpression" /> objects to use to populate the <see cref="P:System.Linq.Expressions.LambdaExpression.Parameters" /> collection.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="fef91-1721">Создает лямбда-выражение, сначала создавая тип делегата.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fef91-1721">Creates a LambdaExpression by first constructing a delegate type.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="fef91-1722">Выражение <see cref="T:System.Linq.Expressions.LambdaExpression" />, у которого свойство <see cref="P:System.Linq.Expressions.LambdaExpression.NodeType" /> равняется лямбда-выражению, а для свойств <see cref="P:System.Linq.Expressions.LambdaExpression.Body" /> и <see cref="P:System.Linq.Expressions.LambdaExpression.Parameters" /> заданы указанные значения.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fef91-1722">A <see cref="T:System.Linq.Expressions.LambdaExpression" /> that has the <see cref="P:System.Linq.Expressions.LambdaExpression.NodeType" /> property equal to Lambda and the <see cref="P:System.Linq.Expressions.LambdaExpression.Body" /> and <see cref="P:System.Linq.Expressions.LambdaExpression.Parameters" /> properties set to the specified values.</span>
          </span>
        </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Lambda">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.LambdaExpression Lambda (Type delegateType, System.Linq.Expressions.Expression body, string name, System.Collections.Generic.IEnumerable&lt;System.Linq.Expressions.ParameterExpression&gt; parameters);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.LambdaExpression Lambda(class System.Type delegateType, class System.Linq.Expressions.Expression body, string name, class System.Collections.Generic.IEnumerable`1&lt;class System.Linq.Expressions.ParameterExpression&gt; parameters) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.Lambda(System.Type,System.Linq.Expressions.Expression,System.String,System.Collections.Generic.IEnumerable{System.Linq.Expressions.ParameterExpression})" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Lambda (delegateType As Type, body As Expression, name As String, parameters As IEnumerable(Of ParameterExpression)) As LambdaExpression" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Linq::Expressions::LambdaExpression ^ Lambda(Type ^ delegateType, System::Linq::Expressions::Expression ^ body, System::String ^ name, System::Collections::Generic::IEnumerable&lt;System::Linq::Expressions::ParameterExpression ^&gt; ^ parameters);" />
      <MemberSignature Language="F#" Value="static member Lambda : Type * System.Linq.Expressions.Expression * string * seq&lt;System.Linq.Expressions.ParameterExpression&gt; -&gt; System.Linq.Expressions.LambdaExpression" Usage="System.Linq.Expressions.Expression.Lambda (delegateType, body, name, parameters)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.LambdaExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="delegateType" Type="System.Type" />
        <Parameter Name="body" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="name" Type="System.String" />
        <Parameter Name="parameters" Type="System.Collections.Generic.IEnumerable&lt;System.Linq.Expressions.ParameterExpression&gt;" />
      </Parameters>
      <Docs>
        <param name="delegateType">
          <span data-ttu-id="fef91-1723">Объект <see cref="P:System.Linq.Expressions.Expression.Type" />, представляющий сигнатуру делегата для лямбда-выражения.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fef91-1723">A <see cref="P:System.Linq.Expressions.Expression.Type" /> representing the delegate signature for the lambda.</span>
          </span>
        </param>
        <param name="body">
          <span data-ttu-id="fef91-1724">Объект <see cref="T:System.Linq.Expressions.Expression" />, который следует задать в качестве значения свойства <see cref="P:System.Linq.Expressions.LambdaExpression.Body" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fef91-1724">An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.LambdaExpression.Body" /> property equal to.</span>
          </span>
        </param>
        <param name="name">
          <span data-ttu-id="fef91-1725">Имя для лямбда-функции.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fef91-1725">The name for the lambda.</span>
          </span>
          <span data-ttu-id="fef91-1726">Используется для выпуска сведений об отладке.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fef91-1726">Used for emitting debug information.</span>
          </span>
        </param>
        <param name="parameters">
          <span data-ttu-id="fef91-1727">
            <see cref="T:System.Collections.Generic.IEnumerable`1" />, содержащий все объекты <see cref="T:System.Linq.Expressions.ParameterExpression" />, используемые для заполнения коллекции <see cref="P:System.Linq.Expressions.LambdaExpression.Parameters" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fef91-1727">An <see cref="T:System.Collections.Generic.IEnumerable`1" /> that contains <see cref="T:System.Linq.Expressions.ParameterExpression" /> objects to use to populate the <see cref="P:System.Linq.Expressions.LambdaExpression.Parameters" /> collection.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="fef91-1728">Создает лямбда-выражение, сначала создавая тип делегата.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fef91-1728">Creates a LambdaExpression by first constructing a delegate type.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="fef91-1729">Выражение <see cref="T:System.Linq.Expressions.LambdaExpression" />, у которого свойство <see cref="P:System.Linq.Expressions.LambdaExpression.NodeType" /> равняется лямбда-выражению, а для свойств <see cref="P:System.Linq.Expressions.LambdaExpression.Body" /> и <see cref="P:System.Linq.Expressions.LambdaExpression.Parameters" /> заданы указанные значения.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fef91-1729">A <see cref="T:System.Linq.Expressions.LambdaExpression" /> that has the <see cref="P:System.Linq.Expressions.LambdaExpression.NodeType" /> property equal to Lambda and the <see cref="P:System.Linq.Expressions.LambdaExpression.Body" /> and <see cref="P:System.Linq.Expressions.LambdaExpression.Parameters" /> properties set to the specified values.</span>
          </span>
        </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Lambda">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.LambdaExpression Lambda (Type delegateType, System.Linq.Expressions.Expression body, string name, bool tailCall, System.Collections.Generic.IEnumerable&lt;System.Linq.Expressions.ParameterExpression&gt; parameters);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.LambdaExpression Lambda(class System.Type delegateType, class System.Linq.Expressions.Expression body, string name, bool tailCall, class System.Collections.Generic.IEnumerable`1&lt;class System.Linq.Expressions.ParameterExpression&gt; parameters) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.Lambda(System.Type,System.Linq.Expressions.Expression,System.String,System.Boolean,System.Collections.Generic.IEnumerable{System.Linq.Expressions.ParameterExpression})" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Lambda (delegateType As Type, body As Expression, name As String, tailCall As Boolean, parameters As IEnumerable(Of ParameterExpression)) As LambdaExpression" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Linq::Expressions::LambdaExpression ^ Lambda(Type ^ delegateType, System::Linq::Expressions::Expression ^ body, System::String ^ name, bool tailCall, System::Collections::Generic::IEnumerable&lt;System::Linq::Expressions::ParameterExpression ^&gt; ^ parameters);" />
      <MemberSignature Language="F#" Value="static member Lambda : Type * System.Linq.Expressions.Expression * string * bool * seq&lt;System.Linq.Expressions.ParameterExpression&gt; -&gt; System.Linq.Expressions.LambdaExpression" Usage="System.Linq.Expressions.Expression.Lambda (delegateType, body, name, tailCall, parameters)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.LambdaExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="delegateType" Type="System.Type" />
        <Parameter Name="body" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="name" Type="System.String" />
        <Parameter Name="tailCall" Type="System.Boolean" />
        <Parameter Name="parameters" Type="System.Collections.Generic.IEnumerable&lt;System.Linq.Expressions.ParameterExpression&gt;" />
      </Parameters>
      <Docs>
        <param name="delegateType">
          <span data-ttu-id="fef91-1730">Объект <see cref="P:System.Linq.Expressions.Expression.Type" />, представляющий сигнатуру делегата для лямбда-выражения.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fef91-1730">A <see cref="P:System.Linq.Expressions.Expression.Type" /> representing the delegate signature for the lambda.</span>
          </span>
        </param>
        <param name="body">
          <span data-ttu-id="fef91-1731">Объект <see cref="T:System.Linq.Expressions.Expression" />, который следует задать в качестве значения свойства <see cref="P:System.Linq.Expressions.LambdaExpression.Body" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fef91-1731">An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.LambdaExpression.Body" /> property equal to.</span>
          </span>
        </param>
        <param name="name">
          <span data-ttu-id="fef91-1732">Имя для лямбда-функции.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fef91-1732">The name for the lambda.</span>
          </span>
          <span data-ttu-id="fef91-1733">Используется для выпуска сведений об отладке.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fef91-1733">Used for emitting debug information.</span>
          </span>
        </param>
        <param name="tailCall">
          <span data-ttu-id="fef91-1734">Значение <see cref="T:System.Boolean" />, которое указывает, следует ли использовать оптимизацию вызовов с префиксом tail при компиляции созданного выражения.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fef91-1734">A <see cref="T:System.Boolean" /> that indicates if tail call optimization will be applied when compiling the created expression.</span>
          </span>
        </param>
        <param name="parameters">
          <span data-ttu-id="fef91-1735">
            <see cref="T:System.Collections.Generic.IEnumerable`1" />, содержащий все объекты <see cref="T:System.Linq.Expressions.ParameterExpression" />, используемые для заполнения коллекции <see cref="P:System.Linq.Expressions.LambdaExpression.Parameters" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fef91-1735">An <see cref="T:System.Collections.Generic.IEnumerable`1" /> that contains <see cref="T:System.Linq.Expressions.ParameterExpression" /> objects to use to populate the <see cref="P:System.Linq.Expressions.LambdaExpression.Parameters" /> collection.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="fef91-1736">Создает лямбда-выражение, сначала создавая тип делегата.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fef91-1736">Creates a LambdaExpression by first constructing a delegate type.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="fef91-1737">Выражение <see cref="T:System.Linq.Expressions.LambdaExpression" />, у которого свойство <see cref="P:System.Linq.Expressions.LambdaExpression.NodeType" /> равняется лямбда-выражению, а для свойств <see cref="P:System.Linq.Expressions.LambdaExpression.Body" /> и <see cref="P:System.Linq.Expressions.LambdaExpression.Parameters" /> заданы указанные значения.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fef91-1737">A <see cref="T:System.Linq.Expressions.LambdaExpression" /> that has the <see cref="P:System.Linq.Expressions.LambdaExpression.NodeType" /> property equal to Lambda and the <see cref="P:System.Linq.Expressions.LambdaExpression.Body" /> and <see cref="P:System.Linq.Expressions.LambdaExpression.Parameters" /> properties set to the specified values.</span>
          </span>
        </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Lambda&lt;TDelegate&gt;">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.Expression&lt;TDelegate&gt; Lambda&lt;TDelegate&gt; (System.Linq.Expressions.Expression body, System.Collections.Generic.IEnumerable&lt;System.Linq.Expressions.ParameterExpression&gt; parameters);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.Expression`1&lt;!!TDelegate&gt; Lambda&lt;TDelegate&gt;(class System.Linq.Expressions.Expression body, class System.Collections.Generic.IEnumerable`1&lt;class System.Linq.Expressions.ParameterExpression&gt; parameters) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.Lambda``1(System.Linq.Expressions.Expression,System.Collections.Generic.IEnumerable{System.Linq.Expressions.ParameterExpression})" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Lambda(Of TDelegate) (body As Expression, parameters As IEnumerable(Of ParameterExpression)) As Expression(Of TDelegate)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TDelegate&gt;&#xA; static System::Linq::Expressions::Expression&lt;TDelegate&gt; ^ Lambda(System::Linq::Expressions::Expression ^ body, System::Collections::Generic::IEnumerable&lt;System::Linq::Expressions::ParameterExpression ^&gt; ^ parameters);" />
      <MemberSignature Language="F#" Value="static member Lambda : System.Linq.Expressions.Expression * seq&lt;System.Linq.Expressions.ParameterExpression&gt; -&gt; System.Linq.Expressions.Expression&lt;'Delegate&gt;" Usage="System.Linq.Expressions.Expression.Lambda (body, parameters)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.Expression&lt;TDelegate&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TDelegate" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="body" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="parameters" Type="System.Collections.Generic.IEnumerable&lt;System.Linq.Expressions.ParameterExpression&gt;" />
      </Parameters>
      <Docs>
        <typeparam name="TDelegate">
          <span data-ttu-id="fef91-1738">Тип делегата</span>
          <span class="sxs-lookup">
            <span data-stu-id="fef91-1738">A delegate type.</span>
          </span>
        </typeparam>
        <param name="body">
          <span data-ttu-id="fef91-1739">Объект <see cref="T:System.Linq.Expressions.Expression" />, который следует задать в качестве значения свойства <see cref="P:System.Linq.Expressions.LambdaExpression.Body" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fef91-1739">An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.LambdaExpression.Body" /> property equal to.</span>
          </span>
        </param>
        <param name="parameters">
          <span data-ttu-id="fef91-1740">
            <see cref="T:System.Collections.Generic.IEnumerable`1" />, содержащий все объекты <see cref="T:System.Linq.Expressions.ParameterExpression" />, используемые для заполнения коллекции <see cref="P:System.Linq.Expressions.LambdaExpression.Parameters" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fef91-1740">An <see cref="T:System.Collections.Generic.IEnumerable`1" /> that contains <see cref="T:System.Linq.Expressions.ParameterExpression" /> objects to use to populate the <see cref="P:System.Linq.Expressions.LambdaExpression.Parameters" /> collection.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="fef91-1741">Создает <see cref="T:System.Linq.Expressions.Expression`1" />, где тип делегата известен в момент компиляции.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fef91-1741">Creates an <see cref="T:System.Linq.Expressions.Expression`1" /> where the delegate type is known at compile time.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="fef91-1742">Выражение <see cref="T:System.Linq.Expressions.Expression`1" />, содержащее свойство <see cref="P:System.Linq.Expressions.Expression.NodeType" />, равное <see cref="F:System.Linq.Expressions.ExpressionType.Lambda" />, а также свойства <see cref="P:System.Linq.Expressions.LambdaExpression.Body" /> и <see cref="P:System.Linq.Expressions.LambdaExpression.Parameters" />, для которых заданы указанные значения.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fef91-1742">An <see cref="T:System.Linq.Expressions.Expression`1" /> that has the <see cref="P:System.Linq.Expressions.Expression.NodeType" /> property equal to <see cref="F:System.Linq.Expressions.ExpressionType.Lambda" /> and the <see cref="P:System.Linq.Expressions.LambdaExpression.Body" /> and <see cref="P:System.Linq.Expressions.LambdaExpression.Parameters" /> properties set to the specified values.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="fef91-1743">Число параметров для типа делегата `TDelegate` должно быть равно числу элементов в `parameters`.</span><span class="sxs-lookup"><span data-stu-id="fef91-1743">The number of parameters for the delegate type `TDelegate` must equal the number of elements in `parameters`.</span></span>  
  
 <span data-ttu-id="fef91-1744">Элементы `parameters` должно равняться Справочник по выражениям параметров в `body`.</span><span class="sxs-lookup"><span data-stu-id="fef91-1744">The elements of `parameters` must be reference equal to the parameter expressions in `body`.</span></span>  
  
 <span data-ttu-id="fef91-1745"><xref:System.Linq.Expressions.Expression.Type%2A> Свойство результирующего объекта представляет тип `TDelegate`.</span><span class="sxs-lookup"><span data-stu-id="fef91-1745">The <xref:System.Linq.Expressions.Expression.Type%2A> property of the resulting object represents the type `TDelegate`.</span></span> <span data-ttu-id="fef91-1746">Если `parameters` — `null`, <xref:System.Linq.Expressions.LambdaExpression.Parameters%2A> свойства результирующего объекта является пустая коллекция.</span><span class="sxs-lookup"><span data-stu-id="fef91-1746">If `parameters` is `null`, the <xref:System.Linq.Expressions.LambdaExpression.Parameters%2A> property of the resulting object is an empty collection.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="fef91-1747">
            <paramref name="body" /> — <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fef91-1747">
              <paramref name="body" /> is <see langword="null" />.</span>
          </span>
          <span data-ttu-id="fef91-1748">-или-</span>
          <span class="sxs-lookup">
            <span data-stu-id="fef91-1748">-or-</span>
          </span>
          <span data-ttu-id="fef91-1749">Значение одного или нескольких элементов параметра <paramref name="parameters" /> равны <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fef91-1749">One or more elements in <paramref name="parameters" /> are <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="fef91-1750">Элемент <paramref name="TDelegate" /> не является типом делегата.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fef91-1750">
              <paramref name="TDelegate" /> is not a delegate type.</span>
          </span>
          <span data-ttu-id="fef91-1751">-или-</span>
          <span class="sxs-lookup">
            <span data-stu-id="fef91-1751">-or-</span>
          </span>
          <span data-ttu-id="fef91-1752">Тип <paramref name="body" />.Type представляет тип, который не может быть назначен для типа возврата параметра <paramref name="TDelegate" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fef91-1752">
              <paramref name="body" />.Type represents a type that is not assignable to the return type of <paramref name="TDelegate" />.</span>
          </span>
          <span data-ttu-id="fef91-1753">-или-</span>
          <span class="sxs-lookup">
            <span data-stu-id="fef91-1753">-or-</span>
          </span>
          <span data-ttu-id="fef91-1754">
            <paramref name="parameters" /> не содержит количество элементов, равное количеству списка параметров для <paramref name="TDelegate" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fef91-1754">
              <paramref name="parameters" /> does not contain the same number of elements as the list of parameters for <paramref name="TDelegate" />.</span>
          </span>
          <span data-ttu-id="fef91-1755">-или-</span>
          <span class="sxs-lookup">
            <span data-stu-id="fef91-1755">-or-</span>
          </span>
          <span data-ttu-id="fef91-1756">Свойство <see cref="P:System.Linq.Expressions.Expression.Type" /> элемента <paramref name="parameters" /> нельзя назначить из типа соответствующего параметра <paramref name="TDelegate" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fef91-1756">The <see cref="P:System.Linq.Expressions.Expression.Type" /> property of an element of <paramref name="parameters" /> is not assignable from the type of the corresponding parameter type of <paramref name="TDelegate" />.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="Lambda&lt;TDelegate&gt;">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.Expression&lt;TDelegate&gt; Lambda&lt;TDelegate&gt; (System.Linq.Expressions.Expression body, params System.Linq.Expressions.ParameterExpression[] parameters);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.Expression`1&lt;!!TDelegate&gt; Lambda&lt;TDelegate&gt;(class System.Linq.Expressions.Expression body, class System.Linq.Expressions.ParameterExpression[] parameters) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.Lambda``1(System.Linq.Expressions.Expression,System.Linq.Expressions.ParameterExpression[])" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Lambda(Of TDelegate) (body As Expression, ParamArray parameters As ParameterExpression()) As Expression(Of TDelegate)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TDelegate&gt;&#xA; static System::Linq::Expressions::Expression&lt;TDelegate&gt; ^ Lambda(System::Linq::Expressions::Expression ^ body, ... cli::array &lt;System::Linq::Expressions::ParameterExpression ^&gt; ^ parameters);" />
      <MemberSignature Language="F#" Value="static member Lambda : System.Linq.Expressions.Expression * System.Linq.Expressions.ParameterExpression[] -&gt; System.Linq.Expressions.Expression&lt;'Delegate&gt;" Usage="System.Linq.Expressions.Expression.Lambda (body, parameters)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.Expression&lt;TDelegate&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TDelegate" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="body" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="parameters" Type="System.Linq.Expressions.ParameterExpression[]">
          <Attributes>
            <Attribute>
              <AttributeName>System.ParamArray</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <typeparam name="TDelegate">
          <span data-ttu-id="fef91-1757">Тип делегата</span>
          <span class="sxs-lookup">
            <span data-stu-id="fef91-1757">A delegate type.</span>
          </span>
        </typeparam>
        <param name="body">
          <span data-ttu-id="fef91-1758">Объект <see cref="T:System.Linq.Expressions.Expression" />, который следует задать в качестве значения свойства <see cref="P:System.Linq.Expressions.LambdaExpression.Body" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fef91-1758">An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.LambdaExpression.Body" /> property equal to.</span>
          </span>
        </param>
        <param name="parameters">
          <span data-ttu-id="fef91-1759">Массив объектов <see cref="T:System.Linq.Expressions.ParameterExpression" /> для заполнения коллекции <see cref="P:System.Linq.Expressions.LambdaExpression.Parameters" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fef91-1759">An array of <see cref="T:System.Linq.Expressions.ParameterExpression" /> objects to use to populate the <see cref="P:System.Linq.Expressions.LambdaExpression.Parameters" /> collection.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="fef91-1760">Создает <see cref="T:System.Linq.Expressions.Expression`1" />, где тип делегата известен в момент компиляции.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fef91-1760">Creates an <see cref="T:System.Linq.Expressions.Expression`1" /> where the delegate type is known at compile time.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="fef91-1761">Выражение <see cref="T:System.Linq.Expressions.Expression`1" />, содержащее свойство <see cref="P:System.Linq.Expressions.Expression.NodeType" />, равное <see cref="F:System.Linq.Expressions.ExpressionType.Lambda" />, а также свойства <see cref="P:System.Linq.Expressions.LambdaExpression.Body" /> и <see cref="P:System.Linq.Expressions.LambdaExpression.Parameters" />, для которых заданы указанные значения.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fef91-1761">An <see cref="T:System.Linq.Expressions.Expression`1" /> that has the <see cref="P:System.Linq.Expressions.Expression.NodeType" /> property equal to <see cref="F:System.Linq.Expressions.ExpressionType.Lambda" /> and the <see cref="P:System.Linq.Expressions.LambdaExpression.Body" /> and <see cref="P:System.Linq.Expressions.LambdaExpression.Parameters" /> properties set to the specified values.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="fef91-1762">Число параметров для типа делегата `TDelegate` должно быть равно числу элементов в `parameters`.</span><span class="sxs-lookup"><span data-stu-id="fef91-1762">The number of parameters for the delegate type `TDelegate` must equal the number of elements in `parameters`.</span></span>  
  
 <span data-ttu-id="fef91-1763">Элементы `parameters` должно равняться Справочник по выражениям параметров в`body`.</span><span class="sxs-lookup"><span data-stu-id="fef91-1763">The elements of `parameters` must be reference equal to the parameter expressions in`body`.</span></span>  
  
 <span data-ttu-id="fef91-1764"><xref:System.Linq.Expressions.Expression.Type%2A> Свойство результирующего объекта представляет тип `TDelegate`.</span><span class="sxs-lookup"><span data-stu-id="fef91-1764">The <xref:System.Linq.Expressions.Expression.Type%2A> property of the resulting object represents the type `TDelegate`.</span></span> <span data-ttu-id="fef91-1765">Если `parameters` — `null`, <xref:System.Linq.Expressions.LambdaExpression.Parameters%2A> свойства результирующего объекта является пустая коллекция.</span><span class="sxs-lookup"><span data-stu-id="fef91-1765">If `parameters` is `null`, the <xref:System.Linq.Expressions.LambdaExpression.Parameters%2A> property of the resulting object is an empty collection.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="fef91-1766">
            <paramref name="body" /> — <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fef91-1766">
              <paramref name="body" /> is <see langword="null" />.</span>
          </span>
          <span data-ttu-id="fef91-1767">-или-</span>
          <span class="sxs-lookup">
            <span data-stu-id="fef91-1767">-or-</span>
          </span>
          <span data-ttu-id="fef91-1768">Значение одного или нескольких элементов параметра <paramref name="parameters" /> равны <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fef91-1768">One or more elements in <paramref name="parameters" /> are <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="fef91-1769">Элемент <paramref name="TDelegate" /> не является типом делегата.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fef91-1769">
              <paramref name="TDelegate" /> is not a delegate type.</span>
          </span>
          <span data-ttu-id="fef91-1770">-или-</span>
          <span class="sxs-lookup">
            <span data-stu-id="fef91-1770">-or-</span>
          </span>
          <span data-ttu-id="fef91-1771">Тип <paramref name="body" />.Type представляет тип, который не может быть назначен для типа возврата параметра <paramref name="TDelegate" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fef91-1771">
              <paramref name="body" />.Type represents a type that is not assignable to the return type of <paramref name="TDelegate" />.</span>
          </span>
          <span data-ttu-id="fef91-1772">-или-</span>
          <span class="sxs-lookup">
            <span data-stu-id="fef91-1772">-or-</span>
          </span>
          <span data-ttu-id="fef91-1773">
            <paramref name="parameters" /> не содержит количество элементов, равное количеству списка параметров для <paramref name="TDelegate" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fef91-1773">
              <paramref name="parameters" /> does not contain the same number of elements as the list of parameters for <paramref name="TDelegate" />.</span>
          </span>
          <span data-ttu-id="fef91-1774">-или-</span>
          <span class="sxs-lookup">
            <span data-stu-id="fef91-1774">-or-</span>
          </span>
          <span data-ttu-id="fef91-1775">Свойство <see cref="P:System.Linq.Expressions.Expression.Type" /> элемента <paramref name="parameters" /> нельзя назначить из типа соответствующего параметра <paramref name="TDelegate" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fef91-1775">The <see cref="P:System.Linq.Expressions.Expression.Type" /> property of an element of <paramref name="parameters" /> is not assignable from the type of the corresponding parameter type of <paramref name="TDelegate" />.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="Lambda&lt;TDelegate&gt;">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.Expression&lt;TDelegate&gt; Lambda&lt;TDelegate&gt; (System.Linq.Expressions.Expression body, bool tailCall, System.Collections.Generic.IEnumerable&lt;System.Linq.Expressions.ParameterExpression&gt; parameters);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.Expression`1&lt;!!TDelegate&gt; Lambda&lt;TDelegate&gt;(class System.Linq.Expressions.Expression body, bool tailCall, class System.Collections.Generic.IEnumerable`1&lt;class System.Linq.Expressions.ParameterExpression&gt; parameters) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.Lambda``1(System.Linq.Expressions.Expression,System.Boolean,System.Collections.Generic.IEnumerable{System.Linq.Expressions.ParameterExpression})" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Lambda(Of TDelegate) (body As Expression, tailCall As Boolean, parameters As IEnumerable(Of ParameterExpression)) As Expression(Of TDelegate)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TDelegate&gt;&#xA; static System::Linq::Expressions::Expression&lt;TDelegate&gt; ^ Lambda(System::Linq::Expressions::Expression ^ body, bool tailCall, System::Collections::Generic::IEnumerable&lt;System::Linq::Expressions::ParameterExpression ^&gt; ^ parameters);" />
      <MemberSignature Language="F#" Value="static member Lambda : System.Linq.Expressions.Expression * bool * seq&lt;System.Linq.Expressions.ParameterExpression&gt; -&gt; System.Linq.Expressions.Expression&lt;'Delegate&gt;" Usage="System.Linq.Expressions.Expression.Lambda (body, tailCall, parameters)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.Expression&lt;TDelegate&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TDelegate" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="body" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="tailCall" Type="System.Boolean" />
        <Parameter Name="parameters" Type="System.Collections.Generic.IEnumerable&lt;System.Linq.Expressions.ParameterExpression&gt;" />
      </Parameters>
      <Docs>
        <typeparam name="TDelegate">
          <span data-ttu-id="fef91-1776">Тип делегата.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fef91-1776">The delegate type.</span>
          </span>
        </typeparam>
        <param name="body">
          <span data-ttu-id="fef91-1777">Объект <see cref="T:System.Linq.Expressions.Expression" />, который следует задать в качестве значения свойства <see cref="P:System.Linq.Expressions.LambdaExpression.Body" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fef91-1777">An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.LambdaExpression.Body" /> property equal to.</span>
          </span>
        </param>
        <param name="tailCall">
          <span data-ttu-id="fef91-1778">Значение <see cref="T:System.Boolean" />, которое указывает, следует ли использовать оптимизацию вызовов с префиксом tail при компиляции созданного выражения.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fef91-1778">A <see cref="T:System.Boolean" /> that indicates if tail call optimization will be applied when compiling the created expression.</span>
          </span>
        </param>
        <param name="parameters">
          <span data-ttu-id="fef91-1779">
            <see cref="T:System.Collections.Generic.IEnumerable`1" />, содержащий все объекты <see cref="T:System.Linq.Expressions.ParameterExpression" />, используемые для заполнения коллекции <see cref="P:System.Linq.Expressions.LambdaExpression.Parameters" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fef91-1779">An <see cref="T:System.Collections.Generic.IEnumerable`1" /> that contains <see cref="T:System.Linq.Expressions.ParameterExpression" /> objects to use to populate the <see cref="P:System.Linq.Expressions.LambdaExpression.Parameters" /> collection.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="fef91-1780">Создает <see cref="T:System.Linq.Expressions.Expression`1" />, где тип делегата известен в момент компиляции.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fef91-1780">Creates an <see cref="T:System.Linq.Expressions.Expression`1" /> where the delegate type is known at compile time.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="fef91-1781">Выражение <see cref="T:System.Linq.Expressions.Expression`1" />, содержащее свойство <see cref="P:System.Linq.Expressions.LambdaExpression.NodeType" />, равное <see cref="F:System.Linq.Expressions.ExpressionType.Lambda" />, а также свойства <see cref="P:System.Linq.Expressions.LambdaExpression.Body" /> и <see cref="P:System.Linq.Expressions.LambdaExpression.Parameters" />, для которых заданы указанные значения.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fef91-1781">An <see cref="T:System.Linq.Expressions.Expression`1" /> that has the <see cref="P:System.Linq.Expressions.LambdaExpression.NodeType" /> property equal to <see cref="F:System.Linq.Expressions.ExpressionType.Lambda" /> and the <see cref="P:System.Linq.Expressions.LambdaExpression.Body" /> and <see cref="P:System.Linq.Expressions.LambdaExpression.Parameters" /> properties set to the specified values.</span>
          </span>
        </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Lambda&lt;TDelegate&gt;">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.Expression&lt;TDelegate&gt; Lambda&lt;TDelegate&gt; (System.Linq.Expressions.Expression body, bool tailCall, params System.Linq.Expressions.ParameterExpression[] parameters);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.Expression`1&lt;!!TDelegate&gt; Lambda&lt;TDelegate&gt;(class System.Linq.Expressions.Expression body, bool tailCall, class System.Linq.Expressions.ParameterExpression[] parameters) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.Lambda``1(System.Linq.Expressions.Expression,System.Boolean,System.Linq.Expressions.ParameterExpression[])" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Lambda(Of TDelegate) (body As Expression, tailCall As Boolean, ParamArray parameters As ParameterExpression()) As Expression(Of TDelegate)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TDelegate&gt;&#xA; static System::Linq::Expressions::Expression&lt;TDelegate&gt; ^ Lambda(System::Linq::Expressions::Expression ^ body, bool tailCall, ... cli::array &lt;System::Linq::Expressions::ParameterExpression ^&gt; ^ parameters);" />
      <MemberSignature Language="F#" Value="static member Lambda : System.Linq.Expressions.Expression * bool * System.Linq.Expressions.ParameterExpression[] -&gt; System.Linq.Expressions.Expression&lt;'Delegate&gt;" Usage="System.Linq.Expressions.Expression.Lambda (body, tailCall, parameters)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.Expression&lt;TDelegate&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TDelegate" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="body" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="tailCall" Type="System.Boolean" />
        <Parameter Name="parameters" Type="System.Linq.Expressions.ParameterExpression[]">
          <Attributes>
            <Attribute>
              <AttributeName>System.ParamArray</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <typeparam name="TDelegate">
          <span data-ttu-id="fef91-1782">Тип делегата.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fef91-1782">The delegate type.</span>
          </span>
        </typeparam>
        <param name="body">
          <span data-ttu-id="fef91-1783">Объект <see cref="T:System.Linq.Expressions.Expression" />, который следует задать в качестве значения свойства <see cref="P:System.Linq.Expressions.LambdaExpression.Body" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fef91-1783">An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.LambdaExpression.Body" /> property equal to.</span>
          </span>
        </param>
        <param name="tailCall">
          <span data-ttu-id="fef91-1784">Значение <see cref="T:System.Boolean" />, которое указывает, следует ли использовать оптимизацию вызовов с префиксом tail при компиляции созданного выражения.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fef91-1784">A <see cref="T:System.Boolean" /> that indicates if tail call optimization will be applied when compiling the created expression.</span>
          </span>
        </param>
        <param name="parameters">
          <span data-ttu-id="fef91-1785">Массив, содержащий объекты <see cref="T:System.Linq.Expressions.ParameterExpression" />, используемые для заполнения коллекции <see cref="P:System.Linq.Expressions.LambdaExpression.Parameters" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fef91-1785">An array that contains <see cref="T:System.Linq.Expressions.ParameterExpression" /> objects to use to populate the <see cref="P:System.Linq.Expressions.LambdaExpression.Parameters" /> collection.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="fef91-1786">Создает <see cref="T:System.Linq.Expressions.Expression`1" />, где тип делегата известен в момент компиляции.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fef91-1786">Creates an <see cref="T:System.Linq.Expressions.Expression`1" /> where the delegate type is known at compile time.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="fef91-1787">Выражение <see cref="T:System.Linq.Expressions.Expression`1" />, содержащее свойство <see cref="P:System.Linq.Expressions.Expression.NodeType" />, равное <see cref="F:System.Linq.Expressions.ExpressionType.Lambda" />, а также свойства <see cref="P:System.Linq.Expressions.LambdaExpression.Body" /> и <see cref="P:System.Linq.Expressions.LambdaExpression.Parameters" />, для которых заданы указанные значения.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fef91-1787">An <see cref="T:System.Linq.Expressions.Expression`1" /> that has the <see cref="P:System.Linq.Expressions.Expression.NodeType" /> property equal to <see cref="F:System.Linq.Expressions.ExpressionType.Lambda" /> and the <see cref="P:System.Linq.Expressions.LambdaExpression.Body" /> and <see cref="P:System.Linq.Expressions.LambdaExpression.Parameters" /> properties set to the specified values.</span>
          </span>
        </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Lambda&lt;TDelegate&gt;">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.Expression&lt;TDelegate&gt; Lambda&lt;TDelegate&gt; (System.Linq.Expressions.Expression body, string name, System.Collections.Generic.IEnumerable&lt;System.Linq.Expressions.ParameterExpression&gt; parameters);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.Expression`1&lt;!!TDelegate&gt; Lambda&lt;TDelegate&gt;(class System.Linq.Expressions.Expression body, string name, class System.Collections.Generic.IEnumerable`1&lt;class System.Linq.Expressions.ParameterExpression&gt; parameters) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.Lambda``1(System.Linq.Expressions.Expression,System.String,System.Collections.Generic.IEnumerable{System.Linq.Expressions.ParameterExpression})" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Lambda(Of TDelegate) (body As Expression, name As String, parameters As IEnumerable(Of ParameterExpression)) As Expression(Of TDelegate)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TDelegate&gt;&#xA; static System::Linq::Expressions::Expression&lt;TDelegate&gt; ^ Lambda(System::Linq::Expressions::Expression ^ body, System::String ^ name, System::Collections::Generic::IEnumerable&lt;System::Linq::Expressions::ParameterExpression ^&gt; ^ parameters);" />
      <MemberSignature Language="F#" Value="static member Lambda : System.Linq.Expressions.Expression * string * seq&lt;System.Linq.Expressions.ParameterExpression&gt; -&gt; System.Linq.Expressions.Expression&lt;'Delegate&gt;" Usage="System.Linq.Expressions.Expression.Lambda (body, name, parameters)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.Expression&lt;TDelegate&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TDelegate" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="body" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="name" Type="System.String" />
        <Parameter Name="parameters" Type="System.Collections.Generic.IEnumerable&lt;System.Linq.Expressions.ParameterExpression&gt;" />
      </Parameters>
      <Docs>
        <typeparam name="TDelegate">
          <span data-ttu-id="fef91-1788">Тип делегата.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fef91-1788">The delegate type.</span>
          </span>
        </typeparam>
        <param name="body">
          <span data-ttu-id="fef91-1789">Объект <see cref="T:System.Linq.Expressions.Expression" />, который следует задать в качестве значения свойства <see cref="P:System.Linq.Expressions.LambdaExpression.Body" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fef91-1789">An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.LambdaExpression.Body" /> property equal to.</span>
          </span>
        </param>
        <param name="name">
          <span data-ttu-id="fef91-1790">Имя лямбда-выражения.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fef91-1790">The name of the lambda.</span>
          </span>
          <span data-ttu-id="fef91-1791">Используется для создания сведений об отладке.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fef91-1791">Used for generating debugging information.</span>
          </span>
        </param>
        <param name="parameters">
          <span data-ttu-id="fef91-1792">
            <see cref="T:System.Collections.Generic.IEnumerable`1" />, содержащий все объекты <see cref="T:System.Linq.Expressions.ParameterExpression" />, используемые для заполнения коллекции <see cref="P:System.Linq.Expressions.LambdaExpression.Parameters" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fef91-1792">An <see cref="T:System.Collections.Generic.IEnumerable`1" /> that contains <see cref="T:System.Linq.Expressions.ParameterExpression" /> objects to use to populate the <see cref="P:System.Linq.Expressions.LambdaExpression.Parameters" /> collection.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="fef91-1793">Создает <see cref="T:System.Linq.Expressions.Expression`1" />, где тип делегата известен в момент компиляции.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fef91-1793">Creates an <see cref="T:System.Linq.Expressions.Expression`1" /> where the delegate type is known at compile time.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="fef91-1794">Выражение <see cref="T:System.Linq.Expressions.Expression`1" />, содержащее свойство <see cref="P:System.Linq.Expressions.Expression.NodeType" />, равное <see cref="F:System.Linq.Expressions.ExpressionType.Lambda" />, а также свойства <see cref="P:System.Linq.Expressions.LambdaExpression.Body" /> и <see cref="P:System.Linq.Expressions.LambdaExpression.Parameters" />, для которых заданы указанные значения.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fef91-1794">An <see cref="T:System.Linq.Expressions.Expression`1" /> that has the <see cref="P:System.Linq.Expressions.Expression.NodeType" /> property equal to <see cref="F:System.Linq.Expressions.ExpressionType.Lambda" /> and the <see cref="P:System.Linq.Expressions.LambdaExpression.Body" /> and <see cref="P:System.Linq.Expressions.LambdaExpression.Parameters" /> properties set to the specified values.</span>
          </span>
        </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Lambda&lt;TDelegate&gt;">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.Expression&lt;TDelegate&gt; Lambda&lt;TDelegate&gt; (System.Linq.Expressions.Expression body, string name, bool tailCall, System.Collections.Generic.IEnumerable&lt;System.Linq.Expressions.ParameterExpression&gt; parameters);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.Expression`1&lt;!!TDelegate&gt; Lambda&lt;TDelegate&gt;(class System.Linq.Expressions.Expression body, string name, bool tailCall, class System.Collections.Generic.IEnumerable`1&lt;class System.Linq.Expressions.ParameterExpression&gt; parameters) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.Lambda``1(System.Linq.Expressions.Expression,System.String,System.Boolean,System.Collections.Generic.IEnumerable{System.Linq.Expressions.ParameterExpression})" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Lambda(Of TDelegate) (body As Expression, name As String, tailCall As Boolean, parameters As IEnumerable(Of ParameterExpression)) As Expression(Of TDelegate)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TDelegate&gt;&#xA; static System::Linq::Expressions::Expression&lt;TDelegate&gt; ^ Lambda(System::Linq::Expressions::Expression ^ body, System::String ^ name, bool tailCall, System::Collections::Generic::IEnumerable&lt;System::Linq::Expressions::ParameterExpression ^&gt; ^ parameters);" />
      <MemberSignature Language="F#" Value="static member Lambda : System.Linq.Expressions.Expression * string * bool * seq&lt;System.Linq.Expressions.ParameterExpression&gt; -&gt; System.Linq.Expressions.Expression&lt;'Delegate&gt;" Usage="System.Linq.Expressions.Expression.Lambda (body, name, tailCall, parameters)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.Expression&lt;TDelegate&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TDelegate" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="body" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="name" Type="System.String" />
        <Parameter Name="tailCall" Type="System.Boolean" />
        <Parameter Name="parameters" Type="System.Collections.Generic.IEnumerable&lt;System.Linq.Expressions.ParameterExpression&gt;" />
      </Parameters>
      <Docs>
        <typeparam name="TDelegate">
          <span data-ttu-id="fef91-1795">Тип делегата.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fef91-1795">The delegate type.</span>
          </span>
        </typeparam>
        <param name="body">
          <span data-ttu-id="fef91-1796">Объект <see cref="T:System.Linq.Expressions.Expression" />, который следует задать в качестве значения свойства <see cref="P:System.Linq.Expressions.LambdaExpression.Body" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fef91-1796">An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.LambdaExpression.Body" /> property equal to.</span>
          </span>
        </param>
        <param name="name">
          <span data-ttu-id="fef91-1797">Имя лямбда-выражения.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fef91-1797">The name of the lambda.</span>
          </span>
          <span data-ttu-id="fef91-1798">Используется для создания сведений об отладке.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fef91-1798">Used for generating debugging info.</span>
          </span>
        </param>
        <param name="tailCall">
          <span data-ttu-id="fef91-1799">Значение <see cref="T:System.Boolean" />, которое указывает, следует ли использовать оптимизацию вызовов с префиксом tail при компиляции созданного выражения.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fef91-1799">A <see cref="T:System.Boolean" /> that indicates if tail call optimization will be applied when compiling the created expression.</span>
          </span>
        </param>
        <param name="parameters">
          <span data-ttu-id="fef91-1800">
            <see cref="T:System.Collections.Generic.IEnumerable`1" />, содержащий все объекты <see cref="T:System.Linq.Expressions.ParameterExpression" />, используемые для заполнения коллекции <see cref="P:System.Linq.Expressions.LambdaExpression.Parameters" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fef91-1800">An <see cref="T:System.Collections.Generic.IEnumerable`1" /> that contains <see cref="T:System.Linq.Expressions.ParameterExpression" /> objects to use to populate the <see cref="P:System.Linq.Expressions.LambdaExpression.Parameters" /> collection.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="fef91-1801">Создает <see cref="T:System.Linq.Expressions.Expression`1" />, где тип делегата известен в момент компиляции.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fef91-1801">Creates an <see cref="T:System.Linq.Expressions.Expression`1" /> where the delegate type is known at compile time.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="fef91-1802">Выражение <see cref="T:System.Linq.Expressions.Expression`1" />, содержащее свойство <see cref="P:System.Linq.Expressions.LambdaExpression.NodeType" />, равное <see cref="F:System.Linq.Expressions.ExpressionType.Lambda" />, а также свойства <see cref="P:System.Linq.Expressions.LambdaExpression.Body" /> и <see cref="P:System.Linq.Expressions.LambdaExpression.Parameters" />, для которых заданы указанные значения.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fef91-1802">An <see cref="T:System.Linq.Expressions.Expression`1" /> that has the <see cref="P:System.Linq.Expressions.LambdaExpression.NodeType" /> property equal to <see cref="F:System.Linq.Expressions.ExpressionType.Lambda" /> and the <see cref="P:System.Linq.Expressions.LambdaExpression.Body" /> and <see cref="P:System.Linq.Expressions.LambdaExpression.Parameters" /> properties set to the specified values.</span>
          </span>
        </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="LeftShift">
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="fef91-1803">Создает <see cref="T:System.Linq.Expressions.BinaryExpression" />, представляющий побитовую операцию со сдвигом влево.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fef91-1803">Creates a <see cref="T:System.Linq.Expressions.BinaryExpression" /> that represents a bitwise left-shift operation.</span>
          </span>
        </summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="LeftShift">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.BinaryExpression LeftShift (System.Linq.Expressions.Expression left, System.Linq.Expressions.Expression right);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.BinaryExpression LeftShift(class System.Linq.Expressions.Expression left, class System.Linq.Expressions.Expression right) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.LeftShift(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function LeftShift (left As Expression, right As Expression) As BinaryExpression" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Linq::Expressions::BinaryExpression ^ LeftShift(System::Linq::Expressions::Expression ^ left, System::Linq::Expressions::Expression ^ right);" />
      <MemberSignature Language="F#" Value="static member LeftShift : System.Linq.Expressions.Expression * System.Linq.Expressions.Expression -&gt; System.Linq.Expressions.BinaryExpression" Usage="System.Linq.Expressions.Expression.LeftShift (left, right)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.BinaryExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="left" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="right" Type="System.Linq.Expressions.Expression" />
      </Parameters>
      <Docs>
        <param name="left">
          <span data-ttu-id="fef91-1804">Объект <see cref="T:System.Linq.Expressions.Expression" />, который следует задать в качестве значения свойства <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fef91-1804">An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> property equal to.</span>
          </span>
        </param>
        <param name="right">
          <span data-ttu-id="fef91-1805">Объект <see cref="T:System.Linq.Expressions.Expression" />, который следует задать в качестве значения свойства <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fef91-1805">An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> property equal to.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="fef91-1806">Создает <see cref="T:System.Linq.Expressions.BinaryExpression" />, представляющий побитовую операцию со сдвигом влево.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fef91-1806">Creates a <see cref="T:System.Linq.Expressions.BinaryExpression" /> that represents a bitwise left-shift operation.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="fef91-1807">Выражение <see cref="T:System.Linq.Expressions.BinaryExpression" /> со свойством<see cref="P:System.Linq.Expressions.Expression.NodeType" />, равным <see cref="F:System.Linq.Expressions.ExpressionType.LeftShift" />, и свойствами <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> и <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />, для которых заданы указанные значения.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fef91-1807">A <see cref="T:System.Linq.Expressions.BinaryExpression" /> that has the <see cref="P:System.Linq.Expressions.Expression.NodeType" /> property equal to <see cref="F:System.Linq.Expressions.ExpressionType.LeftShift" /> and the <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> and <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> properties set to the specified values.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="fef91-1808">Полученный в результате <xref:System.Linq.Expressions.BinaryExpression> имеет <xref:System.Linq.Expressions.BinaryExpression.Method%2A> свойство присвоено метод реализации.</span><span class="sxs-lookup"><span data-stu-id="fef91-1808">The resulting <xref:System.Linq.Expressions.BinaryExpression> has the <xref:System.Linq.Expressions.BinaryExpression.Method%2A> property set to the implementing method.</span></span> <span data-ttu-id="fef91-1809"><xref:System.Linq.Expressions.Expression.Type%2A> Свойству присваивается тип узла.</span><span class="sxs-lookup"><span data-stu-id="fef91-1809">The <xref:System.Linq.Expressions.Expression.Type%2A> property is set to the type of the node.</span></span> <span data-ttu-id="fef91-1810">Если узел удаляется, <xref:System.Linq.Expressions.BinaryExpression.IsLifted%2A> и <xref:System.Linq.Expressions.BinaryExpression.IsLiftedToNull%2A> оба являются свойства `true`.</span><span class="sxs-lookup"><span data-stu-id="fef91-1810">If the node is lifted, the <xref:System.Linq.Expressions.BinaryExpression.IsLifted%2A> and <xref:System.Linq.Expressions.BinaryExpression.IsLiftedToNull%2A> properties are both `true`.</span></span> <span data-ttu-id="fef91-1811">В противном случае они `false`.</span><span class="sxs-lookup"><span data-stu-id="fef91-1811">Otherwise, they are `false`.</span></span> <span data-ttu-id="fef91-1812">Значение свойства <xref:System.Linq.Expressions.BinaryExpression.Conversion%2A> — `null`.</span><span class="sxs-lookup"><span data-stu-id="fef91-1812">The <xref:System.Linq.Expressions.BinaryExpression.Conversion%2A> property is `null`.</span></span>  
  
 <span data-ttu-id="fef91-1813">Ниже описывается метод реализации, тип узла и ликвидирован ли данный узел.</span><span class="sxs-lookup"><span data-stu-id="fef91-1813">The following information describes the implementing method, the node type, and whether a node is lifted.</span></span>  
  
#### <a name="implementing-method"></a><span data-ttu-id="fef91-1814">Реализация метода</span><span class="sxs-lookup"><span data-stu-id="fef91-1814">Implementing Method</span></span>  
 <span data-ttu-id="fef91-1815">Следующие правила определяют выбранный метод реализации для операции:</span><span class="sxs-lookup"><span data-stu-id="fef91-1815">The following rules determine the selected implementing method for the operation:</span></span>  
  
-   <span data-ttu-id="fef91-1816">Если <xref:System.Linq.Expressions.Expression.Type%2A> свойству `left` или `right` представляет определяемый пользователем тип, который перегружает оператор сдвига влево <xref:System.Reflection.MethodInfo> , представляющий, что метод является методом реализации.</span><span class="sxs-lookup"><span data-stu-id="fef91-1816">If the <xref:System.Linq.Expressions.Expression.Type%2A> property of either `left` or `right` represents a user-defined type that overloads the left-shift operator, the <xref:System.Reflection.MethodInfo> that represents that method is the implementing method.</span></span>  
  
-   <span data-ttu-id="fef91-1817">В противном случае, если `left`. Тип является целочисленным типом (один из <xref:System.Byte>, <xref:System.SByte>, <xref:System.Int16>, <xref:System.UInt16>, <xref:System.Int32>, <xref:System.UInt32>, <xref:System.Int64>, <xref:System.UInt64>, или соответствующие типы, допускающие значение NULL) и `right`. Тип — <xref:System.Int32>, реализация метода является `null`.</span><span class="sxs-lookup"><span data-stu-id="fef91-1817">Otherwise, if `left`.Type is an integral type (one of <xref:System.Byte>, <xref:System.SByte>, <xref:System.Int16>, <xref:System.UInt16>, <xref:System.Int32>, <xref:System.UInt32>, <xref:System.Int64>, <xref:System.UInt64>, or the corresponding nullable types) and `right`.Type is <xref:System.Int32>, the implementing method is `null`.</span></span>  
  
#### <a name="node-type-and-lifted-versus-non-lifted"></a><span data-ttu-id="fef91-1818">Тип узла с ликвидацией или без</span><span class="sxs-lookup"><span data-stu-id="fef91-1818">Node Type and Lifted versus Non-Lifted</span></span>  
 <span data-ttu-id="fef91-1819">Если метод реализации не `null`:</span><span class="sxs-lookup"><span data-stu-id="fef91-1819">If the implementing method is not `null`:</span></span>  
  
-   <span data-ttu-id="fef91-1820">Если `left`. Тип и `right`. Тип могут быть присвоены соответствующие типы аргументов метода реализации, узел не удаляется.</span><span class="sxs-lookup"><span data-stu-id="fef91-1820">If `left`.Type and `right`.Type are assignable to the corresponding argument types of the implementing method, the node is not lifted.</span></span> <span data-ttu-id="fef91-1821">Тип узла — тип возвращаемого значения метода реализации.</span><span class="sxs-lookup"><span data-stu-id="fef91-1821">The type of the node is the return type of the implementing method.</span></span>  
  
-   <span data-ttu-id="fef91-1822">Если выполняются два следующих условия, узел удаляется, а тип узла — обнуляемый тип, соответствующий тип возвращаемого значения метода реализации:</span><span class="sxs-lookup"><span data-stu-id="fef91-1822">If the following two conditions are satisfied, the node is lifted and the type of the node is the nullable type that corresponds to the return type of the implementing method:</span></span>  
  
    -   <span data-ttu-id="fef91-1823">`left`. Тип и `right`. Тип: обоих типов значений, из которых хотя бы один допускает значения NULL и соответствующие типы, не допускающие значения null равны соответствующие типы аргументов метода реализации.</span><span class="sxs-lookup"><span data-stu-id="fef91-1823">`left`.Type and `right`.Type are both value types of which at least one is nullable and the corresponding non-nullable types are equal to the corresponding argument types of the implementing method.</span></span>  
  
    -   <span data-ttu-id="fef91-1824">Тип возвращаемого значения метода реализации является типом значения, не допускающие значения NULL.</span><span class="sxs-lookup"><span data-stu-id="fef91-1824">The return type of the implementing method is a non-nullable value type.</span></span>  
  
 <span data-ttu-id="fef91-1825">Если метод реализации `null`:</span><span class="sxs-lookup"><span data-stu-id="fef91-1825">If the implementing method is `null`:</span></span>  
  
-   <span data-ttu-id="fef91-1826">Если `left`. Тип и `right`. Тип: оба не поддерживающими значение NULL, узел не удаляется.</span><span class="sxs-lookup"><span data-stu-id="fef91-1826">If `left`.Type and `right`.Type are both non-nullable, the node is not lifted.</span></span> <span data-ttu-id="fef91-1827">Тип узла является типом результата определенного оператора сдвига влево.</span><span class="sxs-lookup"><span data-stu-id="fef91-1827">The type of the node is the result type of the predefined left-shift operator.</span></span>  
  
-   <span data-ttu-id="fef91-1828">Если `left`. Тип и `right`. Тип: значение NULL, узел удаляется.</span><span class="sxs-lookup"><span data-stu-id="fef91-1828">If `left`.Type and `right`.Type are both nullable, the node is lifted.</span></span> <span data-ttu-id="fef91-1829">Тип узла — обнуляемый тип, соответствующий типу результата определенного оператора сдвига влево.</span><span class="sxs-lookup"><span data-stu-id="fef91-1829">The type of the node is the nullable type that corresponds to the result type of the predefined left-shift operator.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="fef91-1830">Значение параметра <paramref name="left" /> или <paramref name="right" /> — <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fef91-1830">
              <paramref name="left" /> or <paramref name="right" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.InvalidOperationException">
          <span data-ttu-id="fef91-1831">Оператор сдвига влево не определен для типов <paramref name="left" />.Type and <paramref name="right" />.Type.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fef91-1831">The left-shift operator is not defined for <paramref name="left" />.Type and <paramref name="right" />.Type.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="LeftShift">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.BinaryExpression LeftShift (System.Linq.Expressions.Expression left, System.Linq.Expressions.Expression right, System.Reflection.MethodInfo method);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.BinaryExpression LeftShift(class System.Linq.Expressions.Expression left, class System.Linq.Expressions.Expression right, class System.Reflection.MethodInfo method) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.LeftShift(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function LeftShift (left As Expression, right As Expression, method As MethodInfo) As BinaryExpression" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Linq::Expressions::BinaryExpression ^ LeftShift(System::Linq::Expressions::Expression ^ left, System::Linq::Expressions::Expression ^ right, System::Reflection::MethodInfo ^ method);" />
      <MemberSignature Language="F#" Value="static member LeftShift : System.Linq.Expressions.Expression * System.Linq.Expressions.Expression * System.Reflection.MethodInfo -&gt; System.Linq.Expressions.BinaryExpression" Usage="System.Linq.Expressions.Expression.LeftShift (left, right, method)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.BinaryExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="left" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="right" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="method" Type="System.Reflection.MethodInfo" />
      </Parameters>
      <Docs>
        <param name="left">
          <span data-ttu-id="fef91-1832">Объект <see cref="T:System.Linq.Expressions.Expression" />, который следует задать в качестве значения свойства <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fef91-1832">An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> property equal to.</span>
          </span>
        </param>
        <param name="right">
          <span data-ttu-id="fef91-1833">Объект <see cref="T:System.Linq.Expressions.Expression" />, который следует задать в качестве значения свойства <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fef91-1833">An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> property equal to.</span>
          </span>
        </param>
        <param name="method">
          <span data-ttu-id="fef91-1834">Объект <see cref="T:System.Reflection.MethodInfo" />, который следует задать в качестве значения свойства <see cref="P:System.Linq.Expressions.BinaryExpression.Method" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fef91-1834">A <see cref="T:System.Reflection.MethodInfo" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Method" /> property equal to.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="fef91-1835">Создает <see cref="T:System.Linq.Expressions.BinaryExpression" />, представляющий побитовую операцию со сдвигом влево.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fef91-1835">Creates a <see cref="T:System.Linq.Expressions.BinaryExpression" /> that represents a bitwise left-shift operation.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="fef91-1836">Выражение <see cref="T:System.Linq.Expressions.BinaryExpression" /> со свойством <see cref="P:System.Linq.Expressions.Expression.NodeType" />, равным <see cref="F:System.Linq.Expressions.ExpressionType.LeftShift" />, и свойствами <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />, <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> и <see cref="P:System.Linq.Expressions.BinaryExpression.Method" />, для которых заданы указанные значения.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fef91-1836">A <see cref="T:System.Linq.Expressions.BinaryExpression" /> that has the <see cref="P:System.Linq.Expressions.Expression.NodeType" /> property equal to <see cref="F:System.Linq.Expressions.ExpressionType.LeftShift" /> and the <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />, <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />, and <see cref="P:System.Linq.Expressions.BinaryExpression.Method" /> properties set to the specified values.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="fef91-1837">Полученный в результате <xref:System.Linq.Expressions.BinaryExpression> имеет <xref:System.Linq.Expressions.BinaryExpression.Method%2A> свойство присвоено метод реализации.</span><span class="sxs-lookup"><span data-stu-id="fef91-1837">The resulting <xref:System.Linq.Expressions.BinaryExpression> has the <xref:System.Linq.Expressions.BinaryExpression.Method%2A> property set to the implementing method.</span></span> <span data-ttu-id="fef91-1838"><xref:System.Linq.Expressions.Expression.Type%2A> Свойству присваивается тип узла.</span><span class="sxs-lookup"><span data-stu-id="fef91-1838">The <xref:System.Linq.Expressions.Expression.Type%2A> property is set to the type of the node.</span></span> <span data-ttu-id="fef91-1839">Если узел удаляется, <xref:System.Linq.Expressions.BinaryExpression.IsLifted%2A> и <xref:System.Linq.Expressions.BinaryExpression.IsLiftedToNull%2A> оба являются свойства `true`.</span><span class="sxs-lookup"><span data-stu-id="fef91-1839">If the node is lifted, the <xref:System.Linq.Expressions.BinaryExpression.IsLifted%2A> and <xref:System.Linq.Expressions.BinaryExpression.IsLiftedToNull%2A> properties are both `true`.</span></span> <span data-ttu-id="fef91-1840">В противном случае они `false`.</span><span class="sxs-lookup"><span data-stu-id="fef91-1840">Otherwise, they are `false`.</span></span> <span data-ttu-id="fef91-1841">Значение свойства <xref:System.Linq.Expressions.BinaryExpression.Conversion%2A> — `null`.</span><span class="sxs-lookup"><span data-stu-id="fef91-1841">The <xref:System.Linq.Expressions.BinaryExpression.Conversion%2A> property is `null`.</span></span>  
  
 <span data-ttu-id="fef91-1842">Ниже описывается метод реализации, тип узла и ликвидирован ли данный узел.</span><span class="sxs-lookup"><span data-stu-id="fef91-1842">The following information describes the implementing method, the node type, and whether a node is lifted.</span></span>  
  
#### <a name="implementing-method"></a><span data-ttu-id="fef91-1843">Реализация метода</span><span class="sxs-lookup"><span data-stu-id="fef91-1843">Implementing Method</span></span>  
 <span data-ttu-id="fef91-1844">Следующие правила определяют выбранный метод реализации для операции:</span><span class="sxs-lookup"><span data-stu-id="fef91-1844">The following rules determine the selected implementing method for the operation:</span></span>  
  
-   <span data-ttu-id="fef91-1845">Если `method` не `null` , и это отличный от void, `static` (`Shared` в Visual Basic) метода, принимающего два аргумента, это метод реализации для узла.</span><span class="sxs-lookup"><span data-stu-id="fef91-1845">If `method` is not `null` and it represents a non-void, `static` (`Shared` in Visual Basic) method that takes two arguments, it is the implementing method for the node.</span></span>  
  
-   <span data-ttu-id="fef91-1846">В противном случае, если <xref:System.Linq.Expressions.Expression.Type%2A> свойству `left` или `right` представляет определяемый пользователем тип, который перегружает оператор сдвига влево <xref:System.Reflection.MethodInfo> , представляющий, что метод является методом реализации.</span><span class="sxs-lookup"><span data-stu-id="fef91-1846">Otherwise, if the <xref:System.Linq.Expressions.Expression.Type%2A> property of either `left` or `right` represents a user-defined type that overloads the left-shift operator, the <xref:System.Reflection.MethodInfo> that represents that method is the implementing method.</span></span>  
  
-   <span data-ttu-id="fef91-1847">В противном случае, если `left`. Тип является целочисленным типом (один из <xref:System.Byte>, <xref:System.SByte>, <xref:System.Int16>, <xref:System.UInt16>, <xref:System.Int32>, <xref:System.UInt32>, <xref:System.Int64>, <xref:System.UInt64>, или соответствующие типы, допускающие значение NULL) и `right`. Тип — <xref:System.Int32>, реализация метода является `null`.</span><span class="sxs-lookup"><span data-stu-id="fef91-1847">Otherwise, if `left`.Type is an integral type (one of <xref:System.Byte>, <xref:System.SByte>, <xref:System.Int16>, <xref:System.UInt16>, <xref:System.Int32>, <xref:System.UInt32>, <xref:System.Int64>, <xref:System.UInt64>, or the corresponding nullable types) and `right`.Type is <xref:System.Int32>, the implementing method is `null`.</span></span>  
  
#### <a name="node-type-and-lifted-versus-non-lifted"></a><span data-ttu-id="fef91-1848">Тип узла с ликвидацией или без</span><span class="sxs-lookup"><span data-stu-id="fef91-1848">Node Type and Lifted versus Non-Lifted</span></span>  
 <span data-ttu-id="fef91-1849">Если метод реализации не `null`:</span><span class="sxs-lookup"><span data-stu-id="fef91-1849">If the implementing method is not `null`:</span></span>  
  
-   <span data-ttu-id="fef91-1850">Если `left`. Тип и `right`. Тип могут быть присвоены соответствующие типы аргументов метода реализации, узел не удаляется.</span><span class="sxs-lookup"><span data-stu-id="fef91-1850">If `left`.Type and `right`.Type are assignable to the corresponding argument types of the implementing method, the node is not lifted.</span></span> <span data-ttu-id="fef91-1851">Тип узла — тип возвращаемого значения метода реализации.</span><span class="sxs-lookup"><span data-stu-id="fef91-1851">The type of the node is the return type of the implementing method.</span></span>  
  
-   <span data-ttu-id="fef91-1852">Если выполняются два следующих условия, узел удаляется, а тип узла — обнуляемый тип, соответствующий тип возвращаемого значения метода реализации:</span><span class="sxs-lookup"><span data-stu-id="fef91-1852">If the following two conditions are satisfied, the node is lifted and the type of the node is the nullable type that corresponds to the return type of the implementing method:</span></span>  
  
    -   <span data-ttu-id="fef91-1853">`left`. Тип и `right`. Тип: обоих типов значений, из которых хотя бы один допускает значения NULL и соответствующие типы, не допускающие значения null равны соответствующие типы аргументов метода реализации.</span><span class="sxs-lookup"><span data-stu-id="fef91-1853">`left`.Type and `right`.Type are both value types of which at least one is nullable and the corresponding non-nullable types are equal to the corresponding argument types of the implementing method.</span></span>  
  
    -   <span data-ttu-id="fef91-1854">Тип возвращаемого значения метода реализации является типом значения, не допускающие значения NULL.</span><span class="sxs-lookup"><span data-stu-id="fef91-1854">The return type of the implementing method is a non-nullable value type.</span></span>  
  
 <span data-ttu-id="fef91-1855">Если метод реализации `null`:</span><span class="sxs-lookup"><span data-stu-id="fef91-1855">If the implementing method is `null`:</span></span>  
  
-   <span data-ttu-id="fef91-1856">Если `left`. Тип и `right`. Тип: оба не поддерживающими значение NULL, узел не удаляется.</span><span class="sxs-lookup"><span data-stu-id="fef91-1856">If `left`.Type and `right`.Type are both non-nullable, the node is not lifted.</span></span> <span data-ttu-id="fef91-1857">Тип узла является типом результата определенного оператора сдвига влево.</span><span class="sxs-lookup"><span data-stu-id="fef91-1857">The type of the node is the result type of the predefined left-shift operator.</span></span>  
  
-   <span data-ttu-id="fef91-1858">Если `left`. Тип и `right`. Тип: значение NULL, узел удаляется.</span><span class="sxs-lookup"><span data-stu-id="fef91-1858">If `left`.Type and `right`.Type are both nullable, the node is lifted.</span></span> <span data-ttu-id="fef91-1859">Тип узла — обнуляемый тип, соответствующий типу результата определенного оператора сдвига влево.</span><span class="sxs-lookup"><span data-stu-id="fef91-1859">The type of the node is the nullable type that corresponds to the result type of the predefined left-shift operator.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="fef91-1860">Значение параметра <paramref name="left" /> или <paramref name="right" /> — <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fef91-1860">
              <paramref name="left" /> or <paramref name="right" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="fef91-1861">Значение параметра <paramref name="method" /> не равно <see langword="null" />, и метод, который оно представляет, возвращает <see langword="void" />, не является <see langword="static" /> (<see langword="Shared" /> в Visual Basic) и не принимает ровно два аргумента.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fef91-1861">
              <paramref name="method" /> is not <see langword="null" /> and the method it represents returns <see langword="void" />, is not <see langword="static" /> (<see langword="Shared" /> in Visual Basic), or does not take exactly two arguments.</span>
          </span>
        </exception>
        <exception cref="T:System.InvalidOperationException">
          <span data-ttu-id="fef91-1862">
            <paramref name="method" /> равен <see langword="null" />, а оператор сдвига влево не определен для типов <paramref name="left" />.Type и <paramref name="right" />.Type.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fef91-1862">
              <paramref name="method" /> is <see langword="null" /> and the left-shift operator is not defined for <paramref name="left" />.Type and <paramref name="right" />.Type.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <MemberGroup MemberName="LeftShiftAssign">
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="fef91-1863">Создает объект <see cref="T:System.Linq.Expressions.BinaryExpression" />, представляющий битовую операцию присваивания сдвига влево.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fef91-1863">Creates a <see cref="T:System.Linq.Expressions.BinaryExpression" /> that represents a bitwise left-shift assignment operation.</span>
          </span>
        </summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="LeftShiftAssign">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.BinaryExpression LeftShiftAssign (System.Linq.Expressions.Expression left, System.Linq.Expressions.Expression right);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.BinaryExpression LeftShiftAssign(class System.Linq.Expressions.Expression left, class System.Linq.Expressions.Expression right) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.LeftShiftAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function LeftShiftAssign (left As Expression, right As Expression) As BinaryExpression" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Linq::Expressions::BinaryExpression ^ LeftShiftAssign(System::Linq::Expressions::Expression ^ left, System::Linq::Expressions::Expression ^ right);" />
      <MemberSignature Language="F#" Value="static member LeftShiftAssign : System.Linq.Expressions.Expression * System.Linq.Expressions.Expression -&gt; System.Linq.Expressions.BinaryExpression" Usage="System.Linq.Expressions.Expression.LeftShiftAssign (left, right)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.BinaryExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="left" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="right" Type="System.Linq.Expressions.Expression" />
      </Parameters>
      <Docs>
        <param name="left">
          <span data-ttu-id="fef91-1864">Объект <see cref="T:System.Linq.Expressions.Expression" />, который следует задать в качестве значения свойства <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fef91-1864">An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> property equal to.</span>
          </span>
        </param>
        <param name="right">
          <span data-ttu-id="fef91-1865">Объект <see cref="T:System.Linq.Expressions.Expression" />, который следует задать в качестве значения свойства <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fef91-1865">An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> property equal to.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="fef91-1866">Создает объект <see cref="T:System.Linq.Expressions.BinaryExpression" />, представляющий битовую операцию присваивания сдвига влево.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fef91-1866">Creates a <see cref="T:System.Linq.Expressions.BinaryExpression" /> that represents a bitwise left-shift assignment operation.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="fef91-1867">Выражение <see cref="T:System.Linq.Expressions.BinaryExpression" /> со свойством<see cref="P:System.Linq.Expressions.Expression.NodeType" />, равным <see cref="F:System.Linq.Expressions.ExpressionType.LeftShiftAssign" />, и свойствами <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> и <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />, для которых заданы указанные значения.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fef91-1867">A <see cref="T:System.Linq.Expressions.BinaryExpression" /> that has the <see cref="P:System.Linq.Expressions.Expression.NodeType" /> property equal to <see cref="F:System.Linq.Expressions.ExpressionType.LeftShiftAssign" /> and the <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> and <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> properties set to the specified values.</span>
          </span>
        </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="LeftShiftAssign">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.BinaryExpression LeftShiftAssign (System.Linq.Expressions.Expression left, System.Linq.Expressions.Expression right, System.Reflection.MethodInfo method);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.BinaryExpression LeftShiftAssign(class System.Linq.Expressions.Expression left, class System.Linq.Expressions.Expression right, class System.Reflection.MethodInfo method) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.LeftShiftAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function LeftShiftAssign (left As Expression, right As Expression, method As MethodInfo) As BinaryExpression" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Linq::Expressions::BinaryExpression ^ LeftShiftAssign(System::Linq::Expressions::Expression ^ left, System::Linq::Expressions::Expression ^ right, System::Reflection::MethodInfo ^ method);" />
      <MemberSignature Language="F#" Value="static member LeftShiftAssign : System.Linq.Expressions.Expression * System.Linq.Expressions.Expression * System.Reflection.MethodInfo -&gt; System.Linq.Expressions.BinaryExpression" Usage="System.Linq.Expressions.Expression.LeftShiftAssign (left, right, method)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.BinaryExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="left" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="right" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="method" Type="System.Reflection.MethodInfo" />
      </Parameters>
      <Docs>
        <param name="left">
          <span data-ttu-id="fef91-1868">Объект <see cref="T:System.Linq.Expressions.Expression" />, который следует задать в качестве значения свойства <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fef91-1868">An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> property equal to.</span>
          </span>
        </param>
        <param name="right">
          <span data-ttu-id="fef91-1869">Объект <see cref="T:System.Linq.Expressions.Expression" />, который следует задать в качестве значения свойства <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fef91-1869">An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> property equal to.</span>
          </span>
        </param>
        <param name="method">
          <span data-ttu-id="fef91-1870">Объект <see cref="T:System.Reflection.MethodInfo" />, который следует задать в качестве значения свойства <see cref="P:System.Linq.Expressions.BinaryExpression.Method" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fef91-1870">A <see cref="T:System.Reflection.MethodInfo" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Method" /> property equal to.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="fef91-1871">Создает объект <see cref="T:System.Linq.Expressions.BinaryExpression" />, представляющий битовую операцию присваивания сдвига влево.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fef91-1871">Creates a <see cref="T:System.Linq.Expressions.BinaryExpression" /> that represents a bitwise left-shift assignment operation.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="fef91-1872">Выражение <see cref="T:System.Linq.Expressions.BinaryExpression" /> со свойством <see cref="P:System.Linq.Expressions.Expression.NodeType" />, равным <see cref="F:System.Linq.Expressions.ExpressionType.LeftShiftAssign" />, и свойствами <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />, <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> и <see cref="P:System.Linq.Expressions.BinaryExpression.Method" />, для которых заданы указанные значения.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fef91-1872">A <see cref="T:System.Linq.Expressions.BinaryExpression" /> that has the <see cref="P:System.Linq.Expressions.Expression.NodeType" /> property equal to <see cref="F:System.Linq.Expressions.ExpressionType.LeftShiftAssign" /> and the <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />, <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />, and <see cref="P:System.Linq.Expressions.BinaryExpression.Method" /> properties set to the specified values.</span>
          </span>
        </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="LeftShiftAssign">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.BinaryExpression LeftShiftAssign (System.Linq.Expressions.Expression left, System.Linq.Expressions.Expression right, System.Reflection.MethodInfo method, System.Linq.Expressions.LambdaExpression conversion);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.BinaryExpression LeftShiftAssign(class System.Linq.Expressions.Expression left, class System.Linq.Expressions.Expression right, class System.Reflection.MethodInfo method, class System.Linq.Expressions.LambdaExpression conversion) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.LeftShiftAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo,System.Linq.Expressions.LambdaExpression)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function LeftShiftAssign (left As Expression, right As Expression, method As MethodInfo, conversion As LambdaExpression) As BinaryExpression" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Linq::Expressions::BinaryExpression ^ LeftShiftAssign(System::Linq::Expressions::Expression ^ left, System::Linq::Expressions::Expression ^ right, System::Reflection::MethodInfo ^ method, System::Linq::Expressions::LambdaExpression ^ conversion);" />
      <MemberSignature Language="F#" Value="static member LeftShiftAssign : System.Linq.Expressions.Expression * System.Linq.Expressions.Expression * System.Reflection.MethodInfo * System.Linq.Expressions.LambdaExpression -&gt; System.Linq.Expressions.BinaryExpression" Usage="System.Linq.Expressions.Expression.LeftShiftAssign (left, right, method, conversion)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.BinaryExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="left" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="right" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="method" Type="System.Reflection.MethodInfo" />
        <Parameter Name="conversion" Type="System.Linq.Expressions.LambdaExpression" />
      </Parameters>
      <Docs>
        <param name="left">
          <span data-ttu-id="fef91-1873">Объект <see cref="T:System.Linq.Expressions.Expression" />, который следует задать в качестве значения свойства <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fef91-1873">An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> property equal to.</span>
          </span>
        </param>
        <param name="right">
          <span data-ttu-id="fef91-1874">Объект <see cref="T:System.Linq.Expressions.Expression" />, который следует задать в качестве значения свойства <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fef91-1874">An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> property equal to.</span>
          </span>
        </param>
        <param name="method">
          <span data-ttu-id="fef91-1875">Объект <see cref="T:System.Reflection.MethodInfo" />, который следует задать в качестве значения свойства <see cref="P:System.Linq.Expressions.BinaryExpression.Method" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fef91-1875">A <see cref="T:System.Reflection.MethodInfo" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Method" /> property equal to.</span>
          </span>
        </param>
        <param name="conversion">
          <span data-ttu-id="fef91-1876">Объект <see cref="T:System.Linq.Expressions.LambdaExpression" />, который следует задать в качестве значения свойства <see cref="P:System.Linq.Expressions.BinaryExpression.Conversion" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fef91-1876">A <see cref="T:System.Linq.Expressions.LambdaExpression" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Conversion" /> property equal to.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="fef91-1877">Создает объект <see cref="T:System.Linq.Expressions.BinaryExpression" />, представляющий битовую операцию присваивания сдвига влево.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fef91-1877">Creates a <see cref="T:System.Linq.Expressions.BinaryExpression" /> that represents a bitwise left-shift assignment operation.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="fef91-1878">Выражение <see cref="T:System.Linq.Expressions.BinaryExpression" />, содержащее свойство <see cref="P:System.Linq.Expressions.Expression.NodeType" />, равное <see cref="F:System.Linq.Expressions.ExpressionType.LeftShiftAssign" /> и <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />, <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />, <see cref="P:System.Linq.Expressions.BinaryExpression.Method" />, и свойства <see cref="P:System.Linq.Expressions.BinaryExpression.Conversion" />, для которых заданы указанные значения.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fef91-1878">A <see cref="T:System.Linq.Expressions.BinaryExpression" /> that has the <see cref="P:System.Linq.Expressions.Expression.NodeType" /> property equal to <see cref="F:System.Linq.Expressions.ExpressionType.LeftShiftAssign" /> and the <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />, <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />, <see cref="P:System.Linq.Expressions.BinaryExpression.Method" />, and <see cref="P:System.Linq.Expressions.BinaryExpression.Conversion" /> properties set to the specified values.</span>
          </span>
        </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="LessThan">
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="fef91-1879">Создает <see cref="T:System.Linq.Expressions.BinaryExpression" />, представляющий числовое сравнение объектов "меньше, чем".</span>
          <span class="sxs-lookup">
            <span data-stu-id="fef91-1879">Creates a <see cref="T:System.Linq.Expressions.BinaryExpression" /> that represents a "less than" numeric comparison.</span>
          </span>
        </summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="LessThan">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.BinaryExpression LessThan (System.Linq.Expressions.Expression left, System.Linq.Expressions.Expression right);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.BinaryExpression LessThan(class System.Linq.Expressions.Expression left, class System.Linq.Expressions.Expression right) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.LessThan(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function LessThan (left As Expression, right As Expression) As BinaryExpression" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Linq::Expressions::BinaryExpression ^ LessThan(System::Linq::Expressions::Expression ^ left, System::Linq::Expressions::Expression ^ right);" />
      <MemberSignature Language="F#" Value="static member LessThan : System.Linq.Expressions.Expression * System.Linq.Expressions.Expression -&gt; System.Linq.Expressions.BinaryExpression" Usage="System.Linq.Expressions.Expression.LessThan (left, right)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.BinaryExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="left" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="right" Type="System.Linq.Expressions.Expression" />
      </Parameters>
      <Docs>
        <param name="left">
          <span data-ttu-id="fef91-1880">Объект <see cref="T:System.Linq.Expressions.Expression" />, который следует задать в качестве значения свойства <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fef91-1880">An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> property equal to.</span>
          </span>
        </param>
        <param name="right">
          <span data-ttu-id="fef91-1881">Объект <see cref="T:System.Linq.Expressions.Expression" />, который следует задать в качестве значения свойства <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fef91-1881">An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> property equal to.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="fef91-1882">Создает <see cref="T:System.Linq.Expressions.BinaryExpression" />, представляющий числовое сравнение объектов "меньше, чем".</span>
          <span class="sxs-lookup">
            <span data-stu-id="fef91-1882">Creates a <see cref="T:System.Linq.Expressions.BinaryExpression" /> that represents a "less than" numeric comparison.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="fef91-1883">Выражение <see cref="T:System.Linq.Expressions.BinaryExpression" /> со свойством<see cref="P:System.Linq.Expressions.Expression.NodeType" />, равным <see cref="F:System.Linq.Expressions.ExpressionType.LessThan" />, и свойствами <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> и <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />, для которых заданы указанные значения.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fef91-1883">A <see cref="T:System.Linq.Expressions.BinaryExpression" /> that has the <see cref="P:System.Linq.Expressions.Expression.NodeType" /> property equal to <see cref="F:System.Linq.Expressions.ExpressionType.LessThan" /> and the <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> and <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> properties set to the specified values.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="fef91-1884">Полученный в результате <xref:System.Linq.Expressions.BinaryExpression> имеет <xref:System.Linq.Expressions.BinaryExpression.Method%2A> свойство присвоено метод реализации.</span><span class="sxs-lookup"><span data-stu-id="fef91-1884">The resulting <xref:System.Linq.Expressions.BinaryExpression> has the <xref:System.Linq.Expressions.BinaryExpression.Method%2A> property set to the implementing method.</span></span> <span data-ttu-id="fef91-1885"><xref:System.Linq.Expressions.Expression.Type%2A> Свойству присваивается тип узла.</span><span class="sxs-lookup"><span data-stu-id="fef91-1885">The <xref:System.Linq.Expressions.Expression.Type%2A> property is set to the type of the node.</span></span> <span data-ttu-id="fef91-1886">Если узел удаляется, <xref:System.Linq.Expressions.BinaryExpression.IsLifted%2A> свойство `true`.</span><span class="sxs-lookup"><span data-stu-id="fef91-1886">If the node is lifted, the <xref:System.Linq.Expressions.BinaryExpression.IsLifted%2A> property is `true`.</span></span> <span data-ttu-id="fef91-1887">В противном случае содержит значение `false`.</span><span class="sxs-lookup"><span data-stu-id="fef91-1887">Otherwise, it is `false`.</span></span> <span data-ttu-id="fef91-1888">Свойство <xref:System.Linq.Expressions.BinaryExpression.IsLiftedToNull%2A> всегда имеет значение `false`.</span><span class="sxs-lookup"><span data-stu-id="fef91-1888">The <xref:System.Linq.Expressions.BinaryExpression.IsLiftedToNull%2A> property is always `false`.</span></span> <span data-ttu-id="fef91-1889">Значение свойства <xref:System.Linq.Expressions.BinaryExpression.Conversion%2A> — `null`.</span><span class="sxs-lookup"><span data-stu-id="fef91-1889">The <xref:System.Linq.Expressions.BinaryExpression.Conversion%2A> property is `null`.</span></span>  
  
 <span data-ttu-id="fef91-1890">Ниже описывается метод реализации, тип узла и ликвидирован ли данный узел.</span><span class="sxs-lookup"><span data-stu-id="fef91-1890">The following information describes the implementing method, the node type, and whether a node is lifted.</span></span>  
  
#### <a name="implementing-method"></a><span data-ttu-id="fef91-1891">Реализация метода</span><span class="sxs-lookup"><span data-stu-id="fef91-1891">Implementing Method</span></span>  
 <span data-ttu-id="fef91-1892">Метод реализации для операции, зависит от следующих правил:</span><span class="sxs-lookup"><span data-stu-id="fef91-1892">The implementing method for the operation is chosen based on the following rules:</span></span>  
  
-   <span data-ttu-id="fef91-1893">Если <xref:System.Linq.Expressions.Expression.Type%2A> свойству `left` или `right` представляет определяемый пользователем тип, который перегружает оператор «меньше» <xref:System.Reflection.MethodInfo> , представляющий, что метод является методом реализации.</span><span class="sxs-lookup"><span data-stu-id="fef91-1893">If the <xref:System.Linq.Expressions.Expression.Type%2A> property of either `left` or `right` represents a user-defined type that overloads the "less than" operator, the <xref:System.Reflection.MethodInfo> that represents that method is the implementing method.</span></span>  
  
-   <span data-ttu-id="fef91-1894">В противном случае, если `left`. Тип и `right`. Тип: числовые типы, метод реализации является `null`.</span><span class="sxs-lookup"><span data-stu-id="fef91-1894">Otherwise, if `left`.Type and `right`.Type are numeric types, the implementing method is `null`.</span></span>  
  
#### <a name="node-type-and-lifted-versus-non-lifted"></a><span data-ttu-id="fef91-1895">Тип узла с ликвидацией или без</span><span class="sxs-lookup"><span data-stu-id="fef91-1895">Node Type and Lifted versus Non-Lifted</span></span>  
 <span data-ttu-id="fef91-1896">Если метод реализации не `null`:</span><span class="sxs-lookup"><span data-stu-id="fef91-1896">If the implementing method is not `null`:</span></span>  
  
-   <span data-ttu-id="fef91-1897">Если `left`. Тип и `right`. Тип могут быть присвоены соответствующие типы аргументов метода реализации, узел не удаляется.</span><span class="sxs-lookup"><span data-stu-id="fef91-1897">If `left`.Type and `right`.Type are assignable to the corresponding argument types of the implementing method, the node is not lifted.</span></span> <span data-ttu-id="fef91-1898">Тип узла — тип возвращаемого значения метода реализации.</span><span class="sxs-lookup"><span data-stu-id="fef91-1898">The type of the node is the return type of the implementing method.</span></span>  
  
-   <span data-ttu-id="fef91-1899">Если удовлетворяются следующие два условия, узел удаляется, и тип узла — <xref:System.Boolean>:</span><span class="sxs-lookup"><span data-stu-id="fef91-1899">If the following two conditions are satisfied, the node is lifted and the type of the node is <xref:System.Boolean>:</span></span>  
  
    -   <span data-ttu-id="fef91-1900">`left`. Тип и `right`. Тип: обоих типов значений, из которых хотя бы один допускает значения NULL и соответствующие типы, не допускающие значения null равны соответствующие типы аргументов метода реализации.</span><span class="sxs-lookup"><span data-stu-id="fef91-1900">`left`.Type and `right`.Type are both value types of which at least one is nullable and the corresponding non-nullable types are equal to the corresponding argument types of the implementing method.</span></span>  
  
    -   <span data-ttu-id="fef91-1901">Тип возвращаемого значения метода реализации — <xref:System.Boolean>.</span><span class="sxs-lookup"><span data-stu-id="fef91-1901">The return type of the implementing method is <xref:System.Boolean>.</span></span>  
  
 <span data-ttu-id="fef91-1902">Если метод реализации `null`:</span><span class="sxs-lookup"><span data-stu-id="fef91-1902">If the implementing method is `null`:</span></span>  
  
-   <span data-ttu-id="fef91-1903">Если `left`. Тип и `right`. Тип: оба не поддерживающими значение NULL, узел не удаляется.</span><span class="sxs-lookup"><span data-stu-id="fef91-1903">If `left`.Type and `right`.Type are both non-nullable, the node is not lifted.</span></span> <span data-ttu-id="fef91-1904">Тип узла — <xref:System.Boolean>.</span><span class="sxs-lookup"><span data-stu-id="fef91-1904">The type of the node is <xref:System.Boolean>.</span></span>  
  
-   <span data-ttu-id="fef91-1905">Если `left`. Тип и `right`. Тип: значение NULL, узел удаляется.</span><span class="sxs-lookup"><span data-stu-id="fef91-1905">If `left`.Type and `right`.Type are both nullable, the node is lifted.</span></span> <span data-ttu-id="fef91-1906">Тип узла — <xref:System.Boolean>.</span><span class="sxs-lookup"><span data-stu-id="fef91-1906">The type of the node is <xref:System.Boolean>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="fef91-1907">В следующем примере кода показано, как создать выражение, которое сравнивает два целых числа.</span><span class="sxs-lookup"><span data-stu-id="fef91-1907">The following code example shows how to create an expression that compares two integers.</span></span>  
  
 [!code-csharp[System.Linq.Expressions.ExpressionDev10#25](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.linq.expressions.expressiondev10/cs/program.cs#25)]
 [!code-vb[System.Linq.Expressions.ExpressionDev10#25](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.linq.expressions.expressiondev10/vb/module1.vb#25)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="fef91-1908">Значение параметра <paramref name="left" /> или <paramref name="right" /> — <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fef91-1908">
              <paramref name="left" /> or <paramref name="right" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.InvalidOperationException">
          <span data-ttu-id="fef91-1909">Оператор "меньше, чем" не определен для типов <paramref name="left" />.Type и <paramref name="right" />.Type.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fef91-1909">The "less than" operator is not defined for <paramref name="left" />.Type and <paramref name="right" />.Type.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="LessThan">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.BinaryExpression LessThan (System.Linq.Expressions.Expression left, System.Linq.Expressions.Expression right, bool liftToNull, System.Reflection.MethodInfo method);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.BinaryExpression LessThan(class System.Linq.Expressions.Expression left, class System.Linq.Expressions.Expression right, bool liftToNull, class System.Reflection.MethodInfo method) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.LessThan(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Boolean,System.Reflection.MethodInfo)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function LessThan (left As Expression, right As Expression, liftToNull As Boolean, method As MethodInfo) As BinaryExpression" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Linq::Expressions::BinaryExpression ^ LessThan(System::Linq::Expressions::Expression ^ left, System::Linq::Expressions::Expression ^ right, bool liftToNull, System::Reflection::MethodInfo ^ method);" />
      <MemberSignature Language="F#" Value="static member LessThan : System.Linq.Expressions.Expression * System.Linq.Expressions.Expression * bool * System.Reflection.MethodInfo -&gt; System.Linq.Expressions.BinaryExpression" Usage="System.Linq.Expressions.Expression.LessThan (left, right, liftToNull, method)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.BinaryExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="left" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="right" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="liftToNull" Type="System.Boolean" />
        <Parameter Name="method" Type="System.Reflection.MethodInfo" />
      </Parameters>
      <Docs>
        <param name="left">
          <span data-ttu-id="fef91-1910">Объект <see cref="T:System.Linq.Expressions.Expression" />, который следует задать в качестве значения свойства <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fef91-1910">An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> property equal to.</span>
          </span>
        </param>
        <param name="right">
          <span data-ttu-id="fef91-1911">Объект <see cref="T:System.Linq.Expressions.Expression" />, который следует задать в качестве значения свойства <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fef91-1911">An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> property equal to.</span>
          </span>
        </param>
        <param name="liftToNull">
          <span data-ttu-id="fef91-1912">
            <see langword="true" />, чтобы задать для <see cref="P:System.Linq.Expressions.BinaryExpression.IsLiftedToNull" />значение <see langword="true" />; <see langword="false" />, чтобы задать для <see cref="P:System.Linq.Expressions.BinaryExpression.IsLiftedToNull" /> значение <see langword="false" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fef91-1912">
              <see langword="true" /> to set <see cref="P:System.Linq.Expressions.BinaryExpression.IsLiftedToNull" /> to <see langword="true" />; <see langword="false" /> to set <see cref="P:System.Linq.Expressions.BinaryExpression.IsLiftedToNull" /> to <see langword="false" />.</span>
          </span>
        </param>
        <param name="method">
          <span data-ttu-id="fef91-1913">Объект <see cref="T:System.Reflection.MethodInfo" />, который следует задать в качестве значения свойства <see cref="P:System.Linq.Expressions.BinaryExpression.Method" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fef91-1913">A <see cref="T:System.Reflection.MethodInfo" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Method" /> property equal to.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="fef91-1914">Создает <see cref="T:System.Linq.Expressions.BinaryExpression" />, представляющий числовое сравнение объектов "меньше, чем".</span>
          <span class="sxs-lookup">
            <span data-stu-id="fef91-1914">Creates a <see cref="T:System.Linq.Expressions.BinaryExpression" /> that represents a "less than" numeric comparison.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="fef91-1915">Выражение <see cref="T:System.Linq.Expressions.BinaryExpression" />, содержащее свойство <see cref="P:System.Linq.Expressions.Expression.NodeType" />, равное <see cref="F:System.Linq.Expressions.ExpressionType.LessThan" /> и <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />, <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />, <see cref="P:System.Linq.Expressions.BinaryExpression.IsLiftedToNull" />, и свойства <see cref="P:System.Linq.Expressions.BinaryExpression.Method" />, для которых заданы указанные значения.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fef91-1915">A <see cref="T:System.Linq.Expressions.BinaryExpression" /> that has the <see cref="P:System.Linq.Expressions.Expression.NodeType" /> property equal to <see cref="F:System.Linq.Expressions.ExpressionType.LessThan" /> and the <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />, <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />, <see cref="P:System.Linq.Expressions.BinaryExpression.IsLiftedToNull" />, and <see cref="P:System.Linq.Expressions.BinaryExpression.Method" /> properties set to the specified values.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="fef91-1916">Полученный в результате <xref:System.Linq.Expressions.BinaryExpression> имеет <xref:System.Linq.Expressions.BinaryExpression.Method%2A> свойство присвоено метод реализации.</span><span class="sxs-lookup"><span data-stu-id="fef91-1916">The resulting <xref:System.Linq.Expressions.BinaryExpression> has the <xref:System.Linq.Expressions.BinaryExpression.Method%2A> property set to the implementing method.</span></span> <span data-ttu-id="fef91-1917"><xref:System.Linq.Expressions.Expression.Type%2A> Свойству присваивается тип узла.</span><span class="sxs-lookup"><span data-stu-id="fef91-1917">The <xref:System.Linq.Expressions.Expression.Type%2A> property is set to the type of the node.</span></span> <span data-ttu-id="fef91-1918">Если узел удаляется, <xref:System.Linq.Expressions.BinaryExpression.IsLifted%2A> свойство `true` и <xref:System.Linq.Expressions.BinaryExpression.IsLiftedToNull%2A> равно `liftToNull`.</span><span class="sxs-lookup"><span data-stu-id="fef91-1918">If the node is lifted, the <xref:System.Linq.Expressions.BinaryExpression.IsLifted%2A> property is `true` and the <xref:System.Linq.Expressions.BinaryExpression.IsLiftedToNull%2A> property is equal to `liftToNull`.</span></span> <span data-ttu-id="fef91-1919">В противном случае они оба `false`.</span><span class="sxs-lookup"><span data-stu-id="fef91-1919">Otherwise, they are both `false`.</span></span> <span data-ttu-id="fef91-1920">Значение свойства <xref:System.Linq.Expressions.BinaryExpression.Conversion%2A> — `null`.</span><span class="sxs-lookup"><span data-stu-id="fef91-1920">The <xref:System.Linq.Expressions.BinaryExpression.Conversion%2A> property is `null`.</span></span>  
  
 <span data-ttu-id="fef91-1921">Ниже описывается метод реализации, тип узла и ликвидирован ли данный узел.</span><span class="sxs-lookup"><span data-stu-id="fef91-1921">The following information describes the implementing method, the node type, and whether a node is lifted.</span></span>  
  
#### <a name="implementing-method"></a><span data-ttu-id="fef91-1922">Реализация метода</span><span class="sxs-lookup"><span data-stu-id="fef91-1922">Implementing Method</span></span>  
 <span data-ttu-id="fef91-1923">Следующие правила определяют метод реализации для операции:</span><span class="sxs-lookup"><span data-stu-id="fef91-1923">The following rules determine the implementing method for the operation:</span></span>  
  
-   <span data-ttu-id="fef91-1924">Если `method` не `null` , и это отличный от void, `static` (`Shared` в Visual Basic) метода, принимающего два аргумента, он является методом реализации.</span><span class="sxs-lookup"><span data-stu-id="fef91-1924">If `method` is not `null` and it represents a non-void, `static` (`Shared` in Visual Basic) method that takes two arguments, it is the implementing method.</span></span>  
  
-   <span data-ttu-id="fef91-1925">В противном случае, если <xref:System.Linq.Expressions.Expression.Type%2A> свойству `left` или `right` представляет определяемый пользователем тип, который перегружает оператор «меньше» <xref:System.Reflection.MethodInfo> , представляющий, что метод является методом реализации.</span><span class="sxs-lookup"><span data-stu-id="fef91-1925">Otherwise, if the <xref:System.Linq.Expressions.Expression.Type%2A> property of either `left` or `right` represents a user-defined type that overloads the "less than" operator, the <xref:System.Reflection.MethodInfo> that represents that method is the implementing method.</span></span>  
  
-   <span data-ttu-id="fef91-1926">В противном случае, если `left`. Тип и `right`. Тип: числовые типы, метод реализации является `null`.</span><span class="sxs-lookup"><span data-stu-id="fef91-1926">Otherwise, if `left`.Type and `right`.Type are numeric types, the implementing method is `null`.</span></span>  
  
#### <a name="node-type-and-lifted-versus-non-lifted"></a><span data-ttu-id="fef91-1927">Тип узла с ликвидацией или без</span><span class="sxs-lookup"><span data-stu-id="fef91-1927">Node Type and Lifted versus Non-Lifted</span></span>  
 <span data-ttu-id="fef91-1928">Если метод реализации не `null`:</span><span class="sxs-lookup"><span data-stu-id="fef91-1928">If the implementing method is not `null`:</span></span>  
  
-   <span data-ttu-id="fef91-1929">Если `left`. Тип и `right`. Тип могут быть присвоены соответствующие типы аргументов метода реализации, узел не удаляется.</span><span class="sxs-lookup"><span data-stu-id="fef91-1929">If `left`.Type and `right`.Type are assignable to the corresponding argument types of the implementing method, the node is not lifted.</span></span> <span data-ttu-id="fef91-1930">Тип узла — тип возвращаемого значения метода реализации.</span><span class="sxs-lookup"><span data-stu-id="fef91-1930">The type of the node is the return type of the implementing method.</span></span>  
  
-   <span data-ttu-id="fef91-1931">Если выполняются два следующих условия, узел удаляется; Кроме того, допускающий значение NULL тип узла <xref:System.Boolean> Если `liftToNull` — `true` или <xref:System.Boolean> Если `liftToNull` — `false`:</span><span class="sxs-lookup"><span data-stu-id="fef91-1931">If the following two conditions are satisfied, the node is lifted; also, the type of the node is nullable <xref:System.Boolean> if `liftToNull` is `true` or <xref:System.Boolean> if `liftToNull` is `false`:</span></span>  
  
    -   <span data-ttu-id="fef91-1932">`left`. Тип и `right`. Тип: обоих типов значений, из которых хотя бы один допускает значения NULL и соответствующие типы, не допускающие значения null равны соответствующие типы аргументов метода реализации.</span><span class="sxs-lookup"><span data-stu-id="fef91-1932">`left`.Type and `right`.Type are both value types of which at least one is nullable and the corresponding non-nullable types are equal to the corresponding argument types of the implementing method.</span></span>  
  
    -   <span data-ttu-id="fef91-1933">Тип возвращаемого значения метода реализации — <xref:System.Boolean>.</span><span class="sxs-lookup"><span data-stu-id="fef91-1933">The return type of the implementing method is <xref:System.Boolean>.</span></span>  
  
 <span data-ttu-id="fef91-1934">Если метод реализации `null`:</span><span class="sxs-lookup"><span data-stu-id="fef91-1934">If the implementing method is `null`:</span></span>  
  
-   <span data-ttu-id="fef91-1935">Если `left`. Тип и `right`. Тип: оба не поддерживающими значение NULL, узел не удаляется.</span><span class="sxs-lookup"><span data-stu-id="fef91-1935">If `left`.Type and `right`.Type are both non-nullable, the node is not lifted.</span></span> <span data-ttu-id="fef91-1936">Тип узла — <xref:System.Boolean>.</span><span class="sxs-lookup"><span data-stu-id="fef91-1936">The type of the node is <xref:System.Boolean>.</span></span>  
  
-   <span data-ttu-id="fef91-1937">Если `left`. Тип и `right`. Тип: значение NULL, узел удаляется.</span><span class="sxs-lookup"><span data-stu-id="fef91-1937">If `left`.Type and `right`.Type are both nullable, the node is lifted.</span></span> <span data-ttu-id="fef91-1938">Тип узла, допускающие значения NULL <xref:System.Boolean> Если `liftToNull` — `true` или <xref:System.Boolean> Если `liftToNull` является `false`.</span><span class="sxs-lookup"><span data-stu-id="fef91-1938">The type of the node is nullable <xref:System.Boolean> if `liftToNull` is `true` or <xref:System.Boolean> if `liftToNull` is `false`.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="fef91-1939">Значение параметра <paramref name="left" /> или <paramref name="right" /> — <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fef91-1939">
              <paramref name="left" /> or <paramref name="right" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="fef91-1940">Значение параметра <paramref name="method" /> не равно <see langword="null" />, и метод, который оно представляет, возвращает <see langword="void" />, не является <see langword="static" /> (<see langword="Shared" /> в Visual Basic) и не принимает ровно два аргумента.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fef91-1940">
              <paramref name="method" /> is not <see langword="null" /> and the method it represents returns <see langword="void" />, is not <see langword="static" /> (<see langword="Shared" /> in Visual Basic), or does not take exactly two arguments.</span>
          </span>
        </exception>
        <exception cref="T:System.InvalidOperationException">
          <span data-ttu-id="fef91-1941">
            <paramref name="method" /> равен <see langword="null" />, а оператор "меньше, чем" не определен для типов <paramref name="left" />.Type и <paramref name="right" />.Type.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fef91-1941">
              <paramref name="method" /> is <see langword="null" /> and the "less than" operator is not defined for <paramref name="left" />.Type and <paramref name="right" />.Type.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <MemberGroup MemberName="LessThanOrEqual">
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="fef91-1942">Создает <see cref="T:System.Linq.Expressions.BinaryExpression" />, представляющий числовое сравнение объектов "меньше или равно".</span>
          <span class="sxs-lookup">
            <span data-stu-id="fef91-1942">Creates a <see cref="T:System.Linq.Expressions.BinaryExpression" /> that represents a " less than or equal" numeric comparison.</span>
          </span>
        </summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="LessThanOrEqual">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.BinaryExpression LessThanOrEqual (System.Linq.Expressions.Expression left, System.Linq.Expressions.Expression right);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.BinaryExpression LessThanOrEqual(class System.Linq.Expressions.Expression left, class System.Linq.Expressions.Expression right) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.LessThanOrEqual(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function LessThanOrEqual (left As Expression, right As Expression) As BinaryExpression" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Linq::Expressions::BinaryExpression ^ LessThanOrEqual(System::Linq::Expressions::Expression ^ left, System::Linq::Expressions::Expression ^ right);" />
      <MemberSignature Language="F#" Value="static member LessThanOrEqual : System.Linq.Expressions.Expression * System.Linq.Expressions.Expression -&gt; System.Linq.Expressions.BinaryExpression" Usage="System.Linq.Expressions.Expression.LessThanOrEqual (left, right)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.BinaryExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="left" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="right" Type="System.Linq.Expressions.Expression" />
      </Parameters>
      <Docs>
        <param name="left">
          <span data-ttu-id="fef91-1943">Объект <see cref="T:System.Linq.Expressions.Expression" />, который следует задать в качестве значения свойства <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fef91-1943">An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> property equal to.</span>
          </span>
        </param>
        <param name="right">
          <span data-ttu-id="fef91-1944">Объект <see cref="T:System.Linq.Expressions.Expression" />, который следует задать в качестве значения свойства <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fef91-1944">An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> property equal to.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="fef91-1945">Создает <see cref="T:System.Linq.Expressions.BinaryExpression" />, представляющий числовое сравнение объектов "меньше или равно".</span>
          <span class="sxs-lookup">
            <span data-stu-id="fef91-1945">Creates a <see cref="T:System.Linq.Expressions.BinaryExpression" /> that represents a " less than or equal" numeric comparison.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="fef91-1946">Выражение <see cref="T:System.Linq.Expressions.BinaryExpression" /> со свойством<see cref="P:System.Linq.Expressions.Expression.NodeType" />, равным <see cref="F:System.Linq.Expressions.ExpressionType.LessThanOrEqual" />, и свойствами <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> и <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />, для которых заданы указанные значения.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fef91-1946">A <see cref="T:System.Linq.Expressions.BinaryExpression" /> that has the <see cref="P:System.Linq.Expressions.Expression.NodeType" /> property equal to <see cref="F:System.Linq.Expressions.ExpressionType.LessThanOrEqual" /> and the <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> and <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> properties set to the specified values.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="fef91-1947">Полученный в результате <xref:System.Linq.Expressions.BinaryExpression> имеет <xref:System.Linq.Expressions.BinaryExpression.Method%2A> свойство присвоено метод реализации.</span><span class="sxs-lookup"><span data-stu-id="fef91-1947">The resulting <xref:System.Linq.Expressions.BinaryExpression> has the <xref:System.Linq.Expressions.BinaryExpression.Method%2A> property set to the implementing method.</span></span> <span data-ttu-id="fef91-1948"><xref:System.Linq.Expressions.Expression.Type%2A> Свойству присваивается тип узла.</span><span class="sxs-lookup"><span data-stu-id="fef91-1948">The <xref:System.Linq.Expressions.Expression.Type%2A> property is set to the type of the node.</span></span> <span data-ttu-id="fef91-1949">Если узел удаляется, <xref:System.Linq.Expressions.BinaryExpression.IsLifted%2A> свойство `true`.</span><span class="sxs-lookup"><span data-stu-id="fef91-1949">If the node is lifted, the <xref:System.Linq.Expressions.BinaryExpression.IsLifted%2A> property is `true`.</span></span> <span data-ttu-id="fef91-1950">В противном случае содержит значение `false`.</span><span class="sxs-lookup"><span data-stu-id="fef91-1950">Otherwise, it is `false`.</span></span> <span data-ttu-id="fef91-1951">Свойство <xref:System.Linq.Expressions.BinaryExpression.IsLiftedToNull%2A> всегда имеет значение `false`.</span><span class="sxs-lookup"><span data-stu-id="fef91-1951">The <xref:System.Linq.Expressions.BinaryExpression.IsLiftedToNull%2A> property is always `false`.</span></span> <span data-ttu-id="fef91-1952">Значение свойства <xref:System.Linq.Expressions.BinaryExpression.Conversion%2A> — `null`.</span><span class="sxs-lookup"><span data-stu-id="fef91-1952">The <xref:System.Linq.Expressions.BinaryExpression.Conversion%2A> property is `null`.</span></span>  
  
 <span data-ttu-id="fef91-1953">Ниже описывается метод реализации, тип узла и ликвидирован ли данный узел.</span><span class="sxs-lookup"><span data-stu-id="fef91-1953">The following information describes the implementing method, the node type, and whether a node is lifted.</span></span>  
  
#### <a name="implementing-method"></a><span data-ttu-id="fef91-1954">Реализация метода</span><span class="sxs-lookup"><span data-stu-id="fef91-1954">Implementing Method</span></span>  
 <span data-ttu-id="fef91-1955">Следующие правила определяют метод реализации для операции:</span><span class="sxs-lookup"><span data-stu-id="fef91-1955">The following rules determine the implementing method for the operation:</span></span>  
  
-   <span data-ttu-id="fef91-1956">Если <xref:System.Linq.Expressions.Expression.Type%2A> свойству `left` или `right` представляет определяемый пользователем тип, который перегружает оператор «меньше или равно», <xref:System.Reflection.MethodInfo> , представляющий, что метод является методом реализации.</span><span class="sxs-lookup"><span data-stu-id="fef91-1956">If the <xref:System.Linq.Expressions.Expression.Type%2A> property of either `left` or `right` represents a user-defined type that overloads the "less than or equal" operator, the <xref:System.Reflection.MethodInfo> that represents that method is the implementing method.</span></span>  
  
-   <span data-ttu-id="fef91-1957">В противном случае, если `left`. Тип и `right`. Тип: числовые типы, метод реализации является `null`.</span><span class="sxs-lookup"><span data-stu-id="fef91-1957">Otherwise, if `left`.Type and `right`.Type are numeric types, the implementing method is `null`.</span></span>  
  
#### <a name="node-type-and-lifted-versus-non-lifted"></a><span data-ttu-id="fef91-1958">Тип узла с ликвидацией или без</span><span class="sxs-lookup"><span data-stu-id="fef91-1958">Node Type and Lifted versus Non-Lifted</span></span>  
 <span data-ttu-id="fef91-1959">Если метод реализации не `null`:</span><span class="sxs-lookup"><span data-stu-id="fef91-1959">If the implementing method is not `null`:</span></span>  
  
-   <span data-ttu-id="fef91-1960">Если `left`. Тип и `right`. Тип могут быть присвоены соответствующие типы аргументов метода реализации, узел не удаляется.</span><span class="sxs-lookup"><span data-stu-id="fef91-1960">If `left`.Type and `right`.Type are assignable to the corresponding argument types of the implementing method, the node is not lifted.</span></span> <span data-ttu-id="fef91-1961">Тип узла — тип возвращаемого значения метода реализации.</span><span class="sxs-lookup"><span data-stu-id="fef91-1961">The type of the node is the return type of the implementing method.</span></span>  
  
-   <span data-ttu-id="fef91-1962">Если удовлетворяются следующие два условия, узел удаляется, и тип узла — <xref:System.Boolean>:</span><span class="sxs-lookup"><span data-stu-id="fef91-1962">If the following two conditions are satisfied, the node is lifted and the type of the node is <xref:System.Boolean>:</span></span>  
  
    -   <span data-ttu-id="fef91-1963">`left`. Тип и `right`. Тип: обоих типов значений, из которых хотя бы один допускает значения NULL и соответствующие типы, не допускающие значения null равны соответствующие типы аргументов метода реализации.</span><span class="sxs-lookup"><span data-stu-id="fef91-1963">`left`.Type and `right`.Type are both value types of which at least one is nullable and the corresponding non-nullable types are equal to the corresponding argument types of the implementing method.</span></span>  
  
    -   <span data-ttu-id="fef91-1964">Тип возвращаемого значения метода реализации — <xref:System.Boolean>.</span><span class="sxs-lookup"><span data-stu-id="fef91-1964">The return type of the implementing method is <xref:System.Boolean>.</span></span>  
  
 <span data-ttu-id="fef91-1965">Если метод реализации `null`:</span><span class="sxs-lookup"><span data-stu-id="fef91-1965">If the implementing method is `null`:</span></span>  
  
-   <span data-ttu-id="fef91-1966">Если `left`. Тип и `right`. Тип: оба не поддерживающими значение NULL, узел не удаляется.</span><span class="sxs-lookup"><span data-stu-id="fef91-1966">If `left`.Type and `right`.Type are both non-nullable, the node is not lifted.</span></span> <span data-ttu-id="fef91-1967">Тип узла — <xref:System.Boolean>.</span><span class="sxs-lookup"><span data-stu-id="fef91-1967">The type of the node is <xref:System.Boolean>.</span></span>  
  
-   <span data-ttu-id="fef91-1968">Если `left`. Тип и `right`. Тип: значение NULL, узел удаляется.</span><span class="sxs-lookup"><span data-stu-id="fef91-1968">If `left`.Type and `right`.Type are both nullable, the node is lifted.</span></span> <span data-ttu-id="fef91-1969">Тип узла — <xref:System.Boolean>.</span><span class="sxs-lookup"><span data-stu-id="fef91-1969">The type of the node is <xref:System.Boolean>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="fef91-1970">В следующем примере кода показано, как создать выражение, которое сравнивает два целых числа.</span><span class="sxs-lookup"><span data-stu-id="fef91-1970">The following code example shows how to create an expression that compares two integers.</span></span>  
  
 [!code-csharp[System.Linq.Expressions.ExpressionDev10#26](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.linq.expressions.expressiondev10/cs/program.cs#26)]
 [!code-vb[System.Linq.Expressions.ExpressionDev10#26](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.linq.expressions.expressiondev10/vb/module1.vb#26)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="fef91-1971">Значение параметра <paramref name="left" /> или <paramref name="right" /> — <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fef91-1971">
              <paramref name="left" /> or <paramref name="right" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.InvalidOperationException">
          <span data-ttu-id="fef91-1972">Оператор "меньше или равно" не определен для типов <paramref name="left" />.Type и <paramref name="right" />.Type.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fef91-1972">The "less than or equal" operator is not defined for <paramref name="left" />.Type and <paramref name="right" />.Type.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="LessThanOrEqual">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.BinaryExpression LessThanOrEqual (System.Linq.Expressions.Expression left, System.Linq.Expressions.Expression right, bool liftToNull, System.Reflection.MethodInfo method);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.BinaryExpression LessThanOrEqual(class System.Linq.Expressions.Expression left, class System.Linq.Expressions.Expression right, bool liftToNull, class System.Reflection.MethodInfo method) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.LessThanOrEqual(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Boolean,System.Reflection.MethodInfo)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function LessThanOrEqual (left As Expression, right As Expression, liftToNull As Boolean, method As MethodInfo) As BinaryExpression" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Linq::Expressions::BinaryExpression ^ LessThanOrEqual(System::Linq::Expressions::Expression ^ left, System::Linq::Expressions::Expression ^ right, bool liftToNull, System::Reflection::MethodInfo ^ method);" />
      <MemberSignature Language="F#" Value="static member LessThanOrEqual : System.Linq.Expressions.Expression * System.Linq.Expressions.Expression * bool * System.Reflection.MethodInfo -&gt; System.Linq.Expressions.BinaryExpression" Usage="System.Linq.Expressions.Expression.LessThanOrEqual (left, right, liftToNull, method)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.BinaryExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="left" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="right" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="liftToNull" Type="System.Boolean" />
        <Parameter Name="method" Type="System.Reflection.MethodInfo" />
      </Parameters>
      <Docs>
        <param name="left">
          <span data-ttu-id="fef91-1973">Объект <see cref="T:System.Linq.Expressions.Expression" />, который следует задать в качестве значения свойства <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fef91-1973">An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> property equal to.</span>
          </span>
        </param>
        <param name="right">
          <span data-ttu-id="fef91-1974">Объект <see cref="T:System.Linq.Expressions.Expression" />, который следует задать в качестве значения свойства <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fef91-1974">An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> property equal to.</span>
          </span>
        </param>
        <param name="liftToNull">
          <span data-ttu-id="fef91-1975">
            <see langword="true" />, чтобы задать для <see cref="P:System.Linq.Expressions.BinaryExpression.IsLiftedToNull" />значение <see langword="true" />; <see langword="false" />, чтобы задать для <see cref="P:System.Linq.Expressions.BinaryExpression.IsLiftedToNull" /> значение <see langword="false" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fef91-1975">
              <see langword="true" /> to set <see cref="P:System.Linq.Expressions.BinaryExpression.IsLiftedToNull" /> to <see langword="true" />; <see langword="false" /> to set <see cref="P:System.Linq.Expressions.BinaryExpression.IsLiftedToNull" /> to <see langword="false" />.</span>
          </span>
        </param>
        <param name="method">
          <span data-ttu-id="fef91-1976">Объект <see cref="T:System.Reflection.MethodInfo" />, который следует задать в качестве значения свойства <see cref="P:System.Linq.Expressions.BinaryExpression.Method" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fef91-1976">A <see cref="T:System.Reflection.MethodInfo" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Method" /> property equal to.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="fef91-1977">Создает <see cref="T:System.Linq.Expressions.BinaryExpression" />, представляющий числовое сравнение объектов "меньше или равно".</span>
          <span class="sxs-lookup">
            <span data-stu-id="fef91-1977">Creates a <see cref="T:System.Linq.Expressions.BinaryExpression" /> that represents a "less than or equal" numeric comparison.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="fef91-1978">Выражение <see cref="T:System.Linq.Expressions.BinaryExpression" />, содержащее свойство <see cref="P:System.Linq.Expressions.Expression.NodeType" />, равное <see cref="F:System.Linq.Expressions.ExpressionType.LessThanOrEqual" /> и <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />, <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />, <see cref="P:System.Linq.Expressions.BinaryExpression.IsLiftedToNull" />, и свойства <see cref="P:System.Linq.Expressions.BinaryExpression.Method" />, для которых заданы указанные значения.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fef91-1978">A <see cref="T:System.Linq.Expressions.BinaryExpression" /> that has the <see cref="P:System.Linq.Expressions.Expression.NodeType" /> property equal to <see cref="F:System.Linq.Expressions.ExpressionType.LessThanOrEqual" /> and the <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />, <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />, <see cref="P:System.Linq.Expressions.BinaryExpression.IsLiftedToNull" />, and <see cref="P:System.Linq.Expressions.BinaryExpression.Method" /> properties set to the specified values.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="fef91-1979">Полученный в результате <xref:System.Linq.Expressions.BinaryExpression> имеет <xref:System.Linq.Expressions.BinaryExpression.Method%2A> свойство присвоено метод реализации.</span><span class="sxs-lookup"><span data-stu-id="fef91-1979">The resulting <xref:System.Linq.Expressions.BinaryExpression> has the <xref:System.Linq.Expressions.BinaryExpression.Method%2A> property set to the implementing method.</span></span> <span data-ttu-id="fef91-1980"><xref:System.Linq.Expressions.Expression.Type%2A> Свойству присваивается тип узла.</span><span class="sxs-lookup"><span data-stu-id="fef91-1980">The <xref:System.Linq.Expressions.Expression.Type%2A> property is set to the type of the node.</span></span> <span data-ttu-id="fef91-1981">Если узел удаляется, <xref:System.Linq.Expressions.BinaryExpression.IsLifted%2A> свойство `true` и <xref:System.Linq.Expressions.BinaryExpression.IsLiftedToNull%2A> равно `liftToNull`.</span><span class="sxs-lookup"><span data-stu-id="fef91-1981">If the node is lifted, the <xref:System.Linq.Expressions.BinaryExpression.IsLifted%2A> property is `true` and the <xref:System.Linq.Expressions.BinaryExpression.IsLiftedToNull%2A> property is equal to `liftToNull`.</span></span> <span data-ttu-id="fef91-1982">В противном случае они оба `false`.</span><span class="sxs-lookup"><span data-stu-id="fef91-1982">Otherwise, they are both `false`.</span></span> <span data-ttu-id="fef91-1983">Значение свойства <xref:System.Linq.Expressions.BinaryExpression.Conversion%2A> — `null`.</span><span class="sxs-lookup"><span data-stu-id="fef91-1983">The <xref:System.Linq.Expressions.BinaryExpression.Conversion%2A> property is `null`.</span></span>  
  
 <span data-ttu-id="fef91-1984">Ниже описывается метод реализации, тип узла и ликвидирован ли данный узел.</span><span class="sxs-lookup"><span data-stu-id="fef91-1984">The following information describes the implementing method, the node type, and whether a node is lifted.</span></span>  
  
#### <a name="implementing-method"></a><span data-ttu-id="fef91-1985">Реализация метода</span><span class="sxs-lookup"><span data-stu-id="fef91-1985">Implementing Method</span></span>  
 <span data-ttu-id="fef91-1986">Следующие правила определяют метод реализации для операции:</span><span class="sxs-lookup"><span data-stu-id="fef91-1986">The following rules determine the implementing method for the operation:</span></span>  
  
-   <span data-ttu-id="fef91-1987">Если `method` не `null` , и это отличный от void, `static` (`Shared` в Visual Basic) метода, принимающего два аргумента, он является методом реализации.</span><span class="sxs-lookup"><span data-stu-id="fef91-1987">If `method` is not `null` and it represents a non-void, `static` (`Shared` in Visual Basic) method that takes two arguments, it is the implementing method.</span></span>  
  
-   <span data-ttu-id="fef91-1988">В противном случае, если <xref:System.Linq.Expressions.Expression.Type%2A> свойству `left` или `right` представляет определяемый пользователем тип, который перегружает оператор «меньше или равно», <xref:System.Reflection.MethodInfo> , представляющий, что метод является методом реализации.</span><span class="sxs-lookup"><span data-stu-id="fef91-1988">Otherwise, if the <xref:System.Linq.Expressions.Expression.Type%2A> property of either `left` or `right` represents a user-defined type that overloads the "less than or equal" operator, the <xref:System.Reflection.MethodInfo> that represents that method is the implementing method.</span></span>  
  
-   <span data-ttu-id="fef91-1989">В противном случае, если `left`. Тип и `right`. Тип: числовые типы, метод реализации является `null`.</span><span class="sxs-lookup"><span data-stu-id="fef91-1989">Otherwise, if `left`.Type and `right`.Type are numeric types, the implementing method is `null`.</span></span>  
  
#### <a name="node-type-and-lifted-versus-non-lifted"></a><span data-ttu-id="fef91-1990">Тип узла с ликвидацией или без</span><span class="sxs-lookup"><span data-stu-id="fef91-1990">Node Type and Lifted versus Non-Lifted</span></span>  
 <span data-ttu-id="fef91-1991">Если метод реализации не `null`:</span><span class="sxs-lookup"><span data-stu-id="fef91-1991">If the implementing method is not `null`:</span></span>  
  
-   <span data-ttu-id="fef91-1992">Если `left`. Тип и `right`. Тип могут быть присвоены соответствующие типы аргументов метода реализации, узел не удаляется.</span><span class="sxs-lookup"><span data-stu-id="fef91-1992">If `left`.Type and `right`.Type are assignable to the corresponding argument types of the implementing method, the node is not lifted.</span></span> <span data-ttu-id="fef91-1993">Тип узла — тип возвращаемого значения метода реализации.</span><span class="sxs-lookup"><span data-stu-id="fef91-1993">The type of the node is the return type of the implementing method.</span></span>  
  
-   <span data-ttu-id="fef91-1994">Если выполняются два следующих условия, узел удаляется; Кроме того, допускающий значение NULL тип узла <xref:System.Boolean> Если `liftToNull` — `true` или <xref:System.Boolean> Если `liftToNull` — `false`:</span><span class="sxs-lookup"><span data-stu-id="fef91-1994">If the following two conditions are satisfied, the node is lifted; also, the type of the node is nullable <xref:System.Boolean> if `liftToNull` is `true` or <xref:System.Boolean> if `liftToNull` is `false`:</span></span>  
  
    -   <span data-ttu-id="fef91-1995">`left`. Тип и `right`. Тип: обоих типов значений, из которых хотя бы один допускает значения NULL и соответствующие типы, не допускающие значения null равны соответствующие типы аргументов метода реализации.</span><span class="sxs-lookup"><span data-stu-id="fef91-1995">`left`.Type and `right`.Type are both value types of which at least one is nullable and the corresponding non-nullable types are equal to the corresponding argument types of the implementing method.</span></span>  
  
    -   <span data-ttu-id="fef91-1996">Тип возвращаемого значения метода реализации — <xref:System.Boolean>.</span><span class="sxs-lookup"><span data-stu-id="fef91-1996">The return type of the implementing method is <xref:System.Boolean>.</span></span>  
  
 <span data-ttu-id="fef91-1997">Если метод реализации `null`:</span><span class="sxs-lookup"><span data-stu-id="fef91-1997">If the implementing method is `null`:</span></span>  
  
-   <span data-ttu-id="fef91-1998">Если `left`. Тип и `right`. Тип: оба не поддерживающими значение NULL, узел не удаляется.</span><span class="sxs-lookup"><span data-stu-id="fef91-1998">If `left`.Type and `right`.Type are both non-nullable, the node is not lifted.</span></span> <span data-ttu-id="fef91-1999">Тип узла — <xref:System.Boolean>.</span><span class="sxs-lookup"><span data-stu-id="fef91-1999">The type of the node is <xref:System.Boolean>.</span></span>  
  
-   <span data-ttu-id="fef91-2000">Если `left`. Тип и `right`. Тип: значение NULL, узел удаляется.</span><span class="sxs-lookup"><span data-stu-id="fef91-2000">If `left`.Type and `right`.Type are both nullable, the node is lifted.</span></span> <span data-ttu-id="fef91-2001">Тип узла, допускающие значения NULL <xref:System.Boolean> Если `liftToNull` — `true` или <xref:System.Boolean> Если `liftToNull` является `false`.</span><span class="sxs-lookup"><span data-stu-id="fef91-2001">The type of the node is nullable <xref:System.Boolean> if `liftToNull` is `true` or <xref:System.Boolean> if `liftToNull` is `false`.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="fef91-2002">Значение параметра <paramref name="left" /> или <paramref name="right" /> — <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fef91-2002">
              <paramref name="left" /> or <paramref name="right" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="fef91-2003">Значение параметра <paramref name="method" /> не равно <see langword="null" />, и метод, который оно представляет, возвращает <see langword="void" />, не является <see langword="static" /> (<see langword="Shared" /> в Visual Basic) и не принимает ровно два аргумента.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fef91-2003">
              <paramref name="method" /> is not <see langword="null" /> and the method it represents returns <see langword="void" />, is not <see langword="static" /> (<see langword="Shared" /> in Visual Basic), or does not take exactly two arguments.</span>
          </span>
        </exception>
        <exception cref="T:System.InvalidOperationException">
          <span data-ttu-id="fef91-2004">
            <paramref name="method" /> равен <see langword="null" />, а оператор "меньше или равно" не определен для типов <paramref name="left" />.Type и <paramref name="right" />.Type.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fef91-2004">
              <paramref name="method" /> is <see langword="null" /> and the "less than or equal" operator is not defined for <paramref name="left" />.Type and <paramref name="right" />.Type.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <MemberGroup MemberName="ListBind">
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="fef91-2005">Создает объект <see cref="T:System.Linq.Expressions.MemberListBinding" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fef91-2005">Creates a <see cref="T:System.Linq.Expressions.MemberListBinding" /> object.</span>
          </span>
        </summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="ListBind">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.MemberListBinding ListBind (System.Reflection.MemberInfo member, System.Collections.Generic.IEnumerable&lt;System.Linq.Expressions.ElementInit&gt; initializers);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.MemberListBinding ListBind(class System.Reflection.MemberInfo member, class System.Collections.Generic.IEnumerable`1&lt;class System.Linq.Expressions.ElementInit&gt; initializers) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.ListBind(System.Reflection.MemberInfo,System.Collections.Generic.IEnumerable{System.Linq.Expressions.ElementInit})" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function ListBind (member As MemberInfo, initializers As IEnumerable(Of ElementInit)) As MemberListBinding" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Linq::Expressions::MemberListBinding ^ ListBind(System::Reflection::MemberInfo ^ member, System::Collections::Generic::IEnumerable&lt;System::Linq::Expressions::ElementInit ^&gt; ^ initializers);" />
      <MemberSignature Language="F#" Value="static member ListBind : System.Reflection.MemberInfo * seq&lt;System.Linq.Expressions.ElementInit&gt; -&gt; System.Linq.Expressions.MemberListBinding" Usage="System.Linq.Expressions.Expression.ListBind (member, initializers)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.MemberListBinding</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="member" Type="System.Reflection.MemberInfo" />
        <Parameter Name="initializers" Type="System.Collections.Generic.IEnumerable&lt;System.Linq.Expressions.ElementInit&gt;" />
      </Parameters>
      <Docs>
        <param name="member">
          <span data-ttu-id="fef91-2006">
            <see cref="T:System.Reflection.MemberInfo" />, представляющий поле или свойство, чтобы задать для свойства <see cref="P:System.Linq.Expressions.MemberBinding.Member" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fef91-2006">A <see cref="T:System.Reflection.MemberInfo" /> that represents a field or property to set the <see cref="P:System.Linq.Expressions.MemberBinding.Member" /> property equal to.</span>
          </span>
        </param>
        <param name="initializers">
          <span data-ttu-id="fef91-2007">
            <see cref="T:System.Collections.Generic.IEnumerable`1" />, содержащий все объекты <see cref="T:System.Linq.Expressions.ElementInit" />, используемые для заполнения коллекции <see cref="P:System.Linq.Expressions.MemberListBinding.Initializers" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fef91-2007">An <see cref="T:System.Collections.Generic.IEnumerable`1" /> that contains <see cref="T:System.Linq.Expressions.ElementInit" /> objects to use to populate the <see cref="P:System.Linq.Expressions.MemberListBinding.Initializers" /> collection.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="fef91-2008">Создает <see cref="T:System.Linq.Expressions.MemberListBinding" />, где элемент является полем или свойством.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fef91-2008">Creates a <see cref="T:System.Linq.Expressions.MemberListBinding" /> where the member is a field or property.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="fef91-2009">Выражение <see cref="T:System.Linq.Expressions.MemberListBinding" /> со свойством<see cref="P:System.Linq.Expressions.MemberBinding.BindingType" />, равным <see cref="F:System.Linq.Expressions.MemberBindingType.ListBinding" />, и свойствами <see cref="P:System.Linq.Expressions.MemberBinding.Member" /> и <see cref="P:System.Linq.Expressions.MemberListBinding.Initializers" />, для которых заданы указанные значения.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fef91-2009">A <see cref="T:System.Linq.Expressions.MemberListBinding" /> that has the <see cref="P:System.Linq.Expressions.MemberBinding.BindingType" /> property equal to <see cref="F:System.Linq.Expressions.MemberBindingType.ListBinding" /> and the <see cref="P:System.Linq.Expressions.MemberBinding.Member" /> and <see cref="P:System.Linq.Expressions.MemberListBinding.Initializers" /> properties set to the specified values.</span>
          </span>
        </returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="fef91-2010">
            <paramref name="member" /> — <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fef91-2010">
              <paramref name="member" /> is <see langword="null" />.</span>
          </span>
          <span data-ttu-id="fef91-2011">-или-</span>
          <span class="sxs-lookup">
            <span data-stu-id="fef91-2011">-or-</span>
          </span>
          <span data-ttu-id="fef91-2012">Значение одного или нескольких элементов параметра <paramref name="initializers" /> равно <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fef91-2012">One or more elements of <paramref name="initializers" /> are <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="fef91-2013">
            <paramref name="member" /> не представляет поле или свойство.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fef91-2013">
              <paramref name="member" /> does not represent a field or property.</span>
          </span>
          <span data-ttu-id="fef91-2014">-или-</span>
          <span class="sxs-lookup">
            <span data-stu-id="fef91-2014">-or-</span>
          </span>
          <span data-ttu-id="fef91-2015">Тип <see cref="P:System.Reflection.FieldInfo.FieldType" /> или <see cref="P:System.Reflection.PropertyInfo.PropertyType" /> поля или свойства, которые представляет <paramref name="member" />, не реализовывает <see cref="T:System.Collections.IEnumerable" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fef91-2015">The <see cref="P:System.Reflection.FieldInfo.FieldType" /> or <see cref="P:System.Reflection.PropertyInfo.PropertyType" /> of the field or property that <paramref name="member" /> represents does not implement <see cref="T:System.Collections.IEnumerable" />.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="ListBind">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.MemberListBinding ListBind (System.Reflection.MemberInfo member, params System.Linq.Expressions.ElementInit[] initializers);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.MemberListBinding ListBind(class System.Reflection.MemberInfo member, class System.Linq.Expressions.ElementInit[] initializers) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.ListBind(System.Reflection.MemberInfo,System.Linq.Expressions.ElementInit[])" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function ListBind (member As MemberInfo, ParamArray initializers As ElementInit()) As MemberListBinding" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Linq::Expressions::MemberListBinding ^ ListBind(System::Reflection::MemberInfo ^ member, ... cli::array &lt;System::Linq::Expressions::ElementInit ^&gt; ^ initializers);" />
      <MemberSignature Language="F#" Value="static member ListBind : System.Reflection.MemberInfo * System.Linq.Expressions.ElementInit[] -&gt; System.Linq.Expressions.MemberListBinding" Usage="System.Linq.Expressions.Expression.ListBind (member, initializers)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.MemberListBinding</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="member" Type="System.Reflection.MemberInfo" />
        <Parameter Name="initializers" Type="System.Linq.Expressions.ElementInit[]">
          <Attributes>
            <Attribute>
              <AttributeName>System.ParamArray</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="member">
          <span data-ttu-id="fef91-2016">
            <see cref="T:System.Reflection.MemberInfo" />, представляющий поле или свойство, чтобы задать для свойства <see cref="P:System.Linq.Expressions.MemberBinding.Member" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fef91-2016">A <see cref="T:System.Reflection.MemberInfo" /> that represents a field or property to set the <see cref="P:System.Linq.Expressions.MemberBinding.Member" /> property equal to.</span>
          </span>
        </param>
        <param name="initializers">
          <span data-ttu-id="fef91-2017">Массив объектов <see cref="T:System.Linq.Expressions.ElementInit" /> для заполнения коллекции <see cref="P:System.Linq.Expressions.MemberListBinding.Initializers" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fef91-2017">An array of <see cref="T:System.Linq.Expressions.ElementInit" /> objects to use to populate the <see cref="P:System.Linq.Expressions.MemberListBinding.Initializers" /> collection.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="fef91-2018">Создает <see cref="T:System.Linq.Expressions.MemberListBinding" />, где элемент является полем или свойством.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fef91-2018">Creates a <see cref="T:System.Linq.Expressions.MemberListBinding" /> where the member is a field or property.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="fef91-2019">Выражение <see cref="T:System.Linq.Expressions.MemberListBinding" /> со свойством<see cref="P:System.Linq.Expressions.MemberBinding.BindingType" />, равным <see cref="F:System.Linq.Expressions.MemberBindingType.ListBinding" />, и свойствами <see cref="P:System.Linq.Expressions.MemberBinding.Member" /> и <see cref="P:System.Linq.Expressions.MemberListBinding.Initializers" />, для которых заданы указанные значения.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fef91-2019">A <see cref="T:System.Linq.Expressions.MemberListBinding" /> that has the <see cref="P:System.Linq.Expressions.MemberBinding.BindingType" /> property equal to <see cref="F:System.Linq.Expressions.MemberBindingType.ListBinding" /> and the <see cref="P:System.Linq.Expressions.MemberBinding.Member" /> and <see cref="P:System.Linq.Expressions.MemberListBinding.Initializers" /> properties set to the specified values.</span>
          </span>
        </returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="fef91-2020">
            <paramref name="member" /> — <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fef91-2020">
              <paramref name="member" /> is <see langword="null" />.</span>
          </span>
          <span data-ttu-id="fef91-2021">-или-</span>
          <span class="sxs-lookup">
            <span data-stu-id="fef91-2021">-or-</span>
          </span>
          <span data-ttu-id="fef91-2022">Значение одного или нескольких элементов параметра <paramref name="initializers" /> равно <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fef91-2022">One or more elements of <paramref name="initializers" /> are <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="fef91-2023">
            <paramref name="member" /> не представляет поле или свойство.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fef91-2023">
              <paramref name="member" /> does not represent a field or property.</span>
          </span>
          <span data-ttu-id="fef91-2024">-или-</span>
          <span class="sxs-lookup">
            <span data-stu-id="fef91-2024">-or-</span>
          </span>
          <span data-ttu-id="fef91-2025">Тип <see cref="P:System.Reflection.FieldInfo.FieldType" /> или <see cref="P:System.Reflection.PropertyInfo.PropertyType" /> поля или свойства, которые представляет <paramref name="member" />, не реализовывает <see cref="T:System.Collections.IEnumerable" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fef91-2025">The <see cref="P:System.Reflection.FieldInfo.FieldType" /> or <see cref="P:System.Reflection.PropertyInfo.PropertyType" /> of the field or property that <paramref name="member" /> represents does not implement <see cref="T:System.Collections.IEnumerable" />.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="ListBind">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.MemberListBinding ListBind (System.Reflection.MethodInfo propertyAccessor, System.Collections.Generic.IEnumerable&lt;System.Linq.Expressions.ElementInit&gt; initializers);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.MemberListBinding ListBind(class System.Reflection.MethodInfo propertyAccessor, class System.Collections.Generic.IEnumerable`1&lt;class System.Linq.Expressions.ElementInit&gt; initializers) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.ListBind(System.Reflection.MethodInfo,System.Collections.Generic.IEnumerable{System.Linq.Expressions.ElementInit})" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function ListBind (propertyAccessor As MethodInfo, initializers As IEnumerable(Of ElementInit)) As MemberListBinding" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Linq::Expressions::MemberListBinding ^ ListBind(System::Reflection::MethodInfo ^ propertyAccessor, System::Collections::Generic::IEnumerable&lt;System::Linq::Expressions::ElementInit ^&gt; ^ initializers);" />
      <MemberSignature Language="F#" Value="static member ListBind : System.Reflection.MethodInfo * seq&lt;System.Linq.Expressions.ElementInit&gt; -&gt; System.Linq.Expressions.MemberListBinding" Usage="System.Linq.Expressions.Expression.ListBind (propertyAccessor, initializers)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.MemberListBinding</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="propertyAccessor" Type="System.Reflection.MethodInfo" />
        <Parameter Name="initializers" Type="System.Collections.Generic.IEnumerable&lt;System.Linq.Expressions.ElementInit&gt;" />
      </Parameters>
      <Docs>
        <param name="propertyAccessor">
          <span data-ttu-id="fef91-2026">
            <see cref="T:System.Reflection.MethodInfo" />, представляющий метод доступа свойства.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fef91-2026">A <see cref="T:System.Reflection.MethodInfo" /> that represents a property accessor method.</span>
          </span>
        </param>
        <param name="initializers">
          <span data-ttu-id="fef91-2027">
            <see cref="T:System.Collections.Generic.IEnumerable`1" />, содержащий все объекты <see cref="T:System.Linq.Expressions.ElementInit" />, используемые для заполнения коллекции <see cref="P:System.Linq.Expressions.MemberListBinding.Initializers" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fef91-2027">An <see cref="T:System.Collections.Generic.IEnumerable`1" /> that contains <see cref="T:System.Linq.Expressions.ElementInit" /> objects to use to populate the <see cref="P:System.Linq.Expressions.MemberListBinding.Initializers" /> collection.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="fef91-2028">Создает <see cref="T:System.Linq.Expressions.MemberListBinding" /> на основе указанного метода доступа к свойству.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fef91-2028">Creates a <see cref="T:System.Linq.Expressions.MemberListBinding" /> based on a specified property accessor method.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="fef91-2029">Выражение <see cref="T:System.Linq.Expressions.MemberListBinding" />, содержащее свойство <see cref="P:System.Linq.Expressions.MemberBinding.BindingType" />, равное <see cref="F:System.Linq.Expressions.MemberBindingType.ListBinding" />, свойство <see cref="P:System.Linq.Expressions.MemberBinding.Member" />, равное <see cref="T:System.Reflection.MemberInfo" />, представляющее свойство с доступом в <paramref name="propertyAccessor" />, и <see cref="P:System.Linq.Expressions.MemberListBinding.Initializers" />, заполненные элементами <paramref name="initializers" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fef91-2029">A <see cref="T:System.Linq.Expressions.MemberListBinding" /> that has the <see cref="P:System.Linq.Expressions.MemberBinding.BindingType" /> property equal to <see cref="F:System.Linq.Expressions.MemberBindingType.ListBinding" />, the <see cref="P:System.Linq.Expressions.MemberBinding.Member" /> property set to the <see cref="T:System.Reflection.MemberInfo" /> that represents the property accessed in <paramref name="propertyAccessor" />, and <see cref="P:System.Linq.Expressions.MemberListBinding.Initializers" /> populated with the elements of <paramref name="initializers" />.</span>
          </span>
        </returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="fef91-2030">
            <paramref name="propertyAccessor" /> — <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fef91-2030">
              <paramref name="propertyAccessor" /> is <see langword="null" />.</span>
          </span>
          <span data-ttu-id="fef91-2031">-или-</span>
          <span class="sxs-lookup">
            <span data-stu-id="fef91-2031">-or-</span>
          </span>
          <span data-ttu-id="fef91-2032">Значение одного или нескольких элементов параметра <paramref name="initializers" /> равно <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fef91-2032">One or more elements of <paramref name="initializers" /> are <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="fef91-2033">
            <paramref name="propertyAccessor" /> не представляет метод доступа свойства.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fef91-2033">
              <paramref name="propertyAccessor" /> does not represent a property accessor method.</span>
          </span>
          <span data-ttu-id="fef91-2034">-или-</span>
          <span class="sxs-lookup">
            <span data-stu-id="fef91-2034">-or-</span>
          </span>
          <span data-ttu-id="fef91-2035">Тип <see cref="P:System.Reflection.PropertyInfo.PropertyType" /> свойства, представленного методом с помощью доступа <paramref name="propertyAccessor" />, не реализовывает <see cref="T:System.Collections.IEnumerable" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fef91-2035">The <see cref="P:System.Reflection.PropertyInfo.PropertyType" /> of the property that the method represented by <paramref name="propertyAccessor" /> accesses does not implement <see cref="T:System.Collections.IEnumerable" />.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="ListBind">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.MemberListBinding ListBind (System.Reflection.MethodInfo propertyAccessor, params System.Linq.Expressions.ElementInit[] initializers);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.MemberListBinding ListBind(class System.Reflection.MethodInfo propertyAccessor, class System.Linq.Expressions.ElementInit[] initializers) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.ListBind(System.Reflection.MethodInfo,System.Linq.Expressions.ElementInit[])" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function ListBind (propertyAccessor As MethodInfo, ParamArray initializers As ElementInit()) As MemberListBinding" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Linq::Expressions::MemberListBinding ^ ListBind(System::Reflection::MethodInfo ^ propertyAccessor, ... cli::array &lt;System::Linq::Expressions::ElementInit ^&gt; ^ initializers);" />
      <MemberSignature Language="F#" Value="static member ListBind : System.Reflection.MethodInfo * System.Linq.Expressions.ElementInit[] -&gt; System.Linq.Expressions.MemberListBinding" Usage="System.Linq.Expressions.Expression.ListBind (propertyAccessor, initializers)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.MemberListBinding</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="propertyAccessor" Type="System.Reflection.MethodInfo" />
        <Parameter Name="initializers" Type="System.Linq.Expressions.ElementInit[]">
          <Attributes>
            <Attribute>
              <AttributeName>System.ParamArray</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="propertyAccessor">
          <span data-ttu-id="fef91-2036">
            <see cref="T:System.Reflection.MethodInfo" />, представляющий метод доступа свойства.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fef91-2036">A <see cref="T:System.Reflection.MethodInfo" /> that represents a property accessor method.</span>
          </span>
        </param>
        <param name="initializers">
          <span data-ttu-id="fef91-2037">Массив объектов <see cref="T:System.Linq.Expressions.ElementInit" /> для заполнения коллекции <see cref="P:System.Linq.Expressions.MemberListBinding.Initializers" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fef91-2037">An array of <see cref="T:System.Linq.Expressions.ElementInit" /> objects to use to populate the <see cref="P:System.Linq.Expressions.MemberListBinding.Initializers" /> collection.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="fef91-2038">Создает объект <see cref="T:System.Linq.Expressions.MemberListBinding" /> на основе указанного метода доступа к свойству.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fef91-2038">Creates a <see cref="T:System.Linq.Expressions.MemberListBinding" /> object based on a specified property accessor method.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="fef91-2039">Выражение <see cref="T:System.Linq.Expressions.MemberListBinding" />, содержащее свойство <see cref="P:System.Linq.Expressions.MemberBinding.BindingType" />, равное <see cref="F:System.Linq.Expressions.MemberBindingType.ListBinding" />, свойство <see cref="P:System.Linq.Expressions.MemberBinding.Member" />, равное <see cref="T:System.Reflection.MemberInfo" />, представляющее свойство с доступом в <paramref name="propertyAccessor" />, и <see cref="P:System.Linq.Expressions.MemberListBinding.Initializers" />, заполненные элементами <paramref name="initializers" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fef91-2039">A <see cref="T:System.Linq.Expressions.MemberListBinding" /> that has the <see cref="P:System.Linq.Expressions.MemberBinding.BindingType" /> property equal to <see cref="F:System.Linq.Expressions.MemberBindingType.ListBinding" />, the <see cref="P:System.Linq.Expressions.MemberBinding.Member" /> property set to the <see cref="T:System.Reflection.MemberInfo" /> that represents the property accessed in <paramref name="propertyAccessor" />, and <see cref="P:System.Linq.Expressions.MemberListBinding.Initializers" /> populated with the elements of <paramref name="initializers" />.</span>
          </span>
        </returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="fef91-2040">
            <paramref name="propertyAccessor" /> — <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fef91-2040">
              <paramref name="propertyAccessor" /> is <see langword="null" />.</span>
          </span>
          <span data-ttu-id="fef91-2041">-или-</span>
          <span class="sxs-lookup">
            <span data-stu-id="fef91-2041">-or-</span>
          </span>
          <span data-ttu-id="fef91-2042">Значение одного или нескольких элементов параметра <paramref name="initializers" /> равно <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fef91-2042">One or more elements of <paramref name="initializers" /> are <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="fef91-2043">
            <paramref name="propertyAccessor" /> не представляет метод доступа свойства.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fef91-2043">
              <paramref name="propertyAccessor" /> does not represent a property accessor method.</span>
          </span>
          <span data-ttu-id="fef91-2044">-или-</span>
          <span class="sxs-lookup">
            <span data-stu-id="fef91-2044">-or-</span>
          </span>
          <span data-ttu-id="fef91-2045">Тип <see cref="P:System.Reflection.PropertyInfo.PropertyType" /> свойства, представленного методом с помощью доступа <paramref name="propertyAccessor" />, не реализовывает <see cref="T:System.Collections.IEnumerable" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fef91-2045">The <see cref="P:System.Reflection.PropertyInfo.PropertyType" /> of the property that the method represented by <paramref name="propertyAccessor" /> accesses does not implement <see cref="T:System.Collections.IEnumerable" />.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <MemberGroup MemberName="ListInit">
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="fef91-2046">Создает буфер <see cref="T:System.Linq.Expressions.ListInitExpression" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fef91-2046">Creates a <see cref="T:System.Linq.Expressions.ListInitExpression" />.</span>
          </span>
        </summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="ListInit">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.ListInitExpression ListInit (System.Linq.Expressions.NewExpression newExpression, System.Collections.Generic.IEnumerable&lt;System.Linq.Expressions.ElementInit&gt; initializers);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.ListInitExpression ListInit(class System.Linq.Expressions.NewExpression newExpression, class System.Collections.Generic.IEnumerable`1&lt;class System.Linq.Expressions.ElementInit&gt; initializers) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.ListInit(System.Linq.Expressions.NewExpression,System.Collections.Generic.IEnumerable{System.Linq.Expressions.ElementInit})" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Linq::Expressions::ListInitExpression ^ ListInit(System::Linq::Expressions::NewExpression ^ newExpression, System::Collections::Generic::IEnumerable&lt;System::Linq::Expressions::ElementInit ^&gt; ^ initializers);" />
      <MemberSignature Language="F#" Value="static member ListInit : System.Linq.Expressions.NewExpression * seq&lt;System.Linq.Expressions.ElementInit&gt; -&gt; System.Linq.Expressions.ListInitExpression" Usage="System.Linq.Expressions.Expression.ListInit (newExpression, initializers)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.ListInitExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="newExpression" Type="System.Linq.Expressions.NewExpression" />
        <Parameter Name="initializers" Type="System.Collections.Generic.IEnumerable&lt;System.Linq.Expressions.ElementInit&gt;" />
      </Parameters>
      <Docs>
        <param name="newExpression">
          <span data-ttu-id="fef91-2047">Объект <see cref="T:System.Linq.Expressions.NewExpression" />, который следует задать в качестве значения свойства <see cref="P:System.Linq.Expressions.ListInitExpression.NewExpression" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fef91-2047">A <see cref="T:System.Linq.Expressions.NewExpression" /> to set the <see cref="P:System.Linq.Expressions.ListInitExpression.NewExpression" /> property equal to.</span>
          </span>
        </param>
        <param name="initializers">
          <span data-ttu-id="fef91-2048">
            <see cref="T:System.Collections.Generic.IEnumerable`1" />, содержащий все объекты <see cref="T:System.Linq.Expressions.ElementInit" />, используемые для заполнения коллекции <see cref="P:System.Linq.Expressions.ListInitExpression.Initializers" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fef91-2048">An <see cref="T:System.Collections.Generic.IEnumerable`1" /> that contains <see cref="T:System.Linq.Expressions.ElementInit" /> objects to use to populate the <see cref="P:System.Linq.Expressions.ListInitExpression.Initializers" /> collection.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="fef91-2049">Создает <see cref="T:System.Linq.Expressions.ListInitExpression" />, использующий указанные объекты <see cref="T:System.Linq.Expressions.ElementInit" /> для инициализации коллекции.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fef91-2049">Creates a <see cref="T:System.Linq.Expressions.ListInitExpression" /> that uses specified <see cref="T:System.Linq.Expressions.ElementInit" /> objects to initialize a collection.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="fef91-2050">Выражение <see cref="T:System.Linq.Expressions.ListInitExpression" /> со свойством<see cref="P:System.Linq.Expressions.Expression.NodeType" />, равным <see cref="F:System.Linq.Expressions.ExpressionType.ListInit" />, и свойствами <see cref="P:System.Linq.Expressions.ListInitExpression.NewExpression" /> и <see cref="P:System.Linq.Expressions.ListInitExpression.Initializers" />, для которых заданы указанные значения.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fef91-2050">A <see cref="T:System.Linq.Expressions.ListInitExpression" /> that has the <see cref="P:System.Linq.Expressions.Expression.NodeType" /> property equal to <see cref="F:System.Linq.Expressions.ExpressionType.ListInit" /> and the <see cref="P:System.Linq.Expressions.ListInitExpression.NewExpression" /> and <see cref="P:System.Linq.Expressions.ListInitExpression.Initializers" /> properties set to the specified values.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="fef91-2051"><xref:System.Linq.Expressions.Expression.Type%2A> Свойство `newExpression` должны представлять собой тип, реализующий <xref:System.Collections.IEnumerable>.</span><span class="sxs-lookup"><span data-stu-id="fef91-2051">The <xref:System.Linq.Expressions.Expression.Type%2A> property of `newExpression` must represent a type that implements <xref:System.Collections.IEnumerable>.</span></span>  
  
 <span data-ttu-id="fef91-2052"><xref:System.Linq.Expressions.Expression.Type%2A> Результирующего <xref:System.Linq.Expressions.ListInitExpression> равен `newExpression`. Тип.</span><span class="sxs-lookup"><span data-stu-id="fef91-2052">The <xref:System.Linq.Expressions.Expression.Type%2A> property of the resulting <xref:System.Linq.Expressions.ListInitExpression> is equal to `newExpression`.Type.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="fef91-2053">Следующий пример демонстрирует, как использовать <xref:System.Linq.Expressions.Expression.ListInit%28System.Linq.Expressions.NewExpression%2CSystem.Linq.Expressions.ElementInit%5B%5D%29> метод для создания <xref:System.Linq.Expressions.ListInitExpression> который представляет инициализацию нового экземпляра словаря с помощью двух пар "ключ значение".</span><span class="sxs-lookup"><span data-stu-id="fef91-2053">The following example demonstrates how to use the <xref:System.Linq.Expressions.Expression.ListInit%28System.Linq.Expressions.NewExpression%2CSystem.Linq.Expressions.ElementInit%5B%5D%29> method to create a <xref:System.Linq.Expressions.ListInitExpression> that represents the initialization of a new dictionary instance with two key-value pairs.</span></span>  
  
 [!code-csharp[System.Linq.Expressions.Expression#7](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Linq.Expressions.Expression/CS/Expression.cs#7)]
 [!code-vb[System.Linq.Expressions.Expression#7](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Linq.Expressions.Expression/VB/Expression.vb#7)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="fef91-2054">Значение параметра <paramref name="newExpression" /> или <paramref name="initializers" /> — <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fef91-2054">
              <paramref name="newExpression" /> or <paramref name="initializers" /> is <see langword="null" />.</span>
          </span>
          <span data-ttu-id="fef91-2055">-или-</span>
          <span class="sxs-lookup">
            <span data-stu-id="fef91-2055">-or-</span>
          </span>
          <span data-ttu-id="fef91-2056">Один или несколько элементов <paramref name="initializers" /> имеют значение <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fef91-2056">One or more elements of <paramref name="initializers" /> are <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="fef91-2057">Тип <paramref name="newExpression" />.Type не реализует <see cref="T:System.Collections.IEnumerable" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fef91-2057">
              <paramref name="newExpression" />.Type does not implement <see cref="T:System.Collections.IEnumerable" />.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="ListInit">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.ListInitExpression ListInit (System.Linq.Expressions.NewExpression newExpression, System.Collections.Generic.IEnumerable&lt;System.Linq.Expressions.Expression&gt; initializers);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.ListInitExpression ListInit(class System.Linq.Expressions.NewExpression newExpression, class System.Collections.Generic.IEnumerable`1&lt;class System.Linq.Expressions.Expression&gt; initializers) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.ListInit(System.Linq.Expressions.NewExpression,System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression})" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Linq::Expressions::ListInitExpression ^ ListInit(System::Linq::Expressions::NewExpression ^ newExpression, System::Collections::Generic::IEnumerable&lt;System::Linq::Expressions::Expression ^&gt; ^ initializers);" />
      <MemberSignature Language="F#" Value="static member ListInit : System.Linq.Expressions.NewExpression * seq&lt;System.Linq.Expressions.Expression&gt; -&gt; System.Linq.Expressions.ListInitExpression" Usage="System.Linq.Expressions.Expression.ListInit (newExpression, initializers)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.ListInitExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="newExpression" Type="System.Linq.Expressions.NewExpression" />
        <Parameter Name="initializers" Type="System.Collections.Generic.IEnumerable&lt;System.Linq.Expressions.Expression&gt;" />
      </Parameters>
      <Docs>
        <param name="newExpression">
          <span data-ttu-id="fef91-2058">Объект <see cref="T:System.Linq.Expressions.NewExpression" />, который следует задать в качестве значения свойства <see cref="P:System.Linq.Expressions.ListInitExpression.NewExpression" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fef91-2058">A <see cref="T:System.Linq.Expressions.NewExpression" /> to set the <see cref="P:System.Linq.Expressions.ListInitExpression.NewExpression" /> property equal to.</span>
          </span>
        </param>
        <param name="initializers">
          <span data-ttu-id="fef91-2059">
            <see cref="T:System.Collections.Generic.IEnumerable`1" />, содержащий все объекты <see cref="T:System.Linq.Expressions.Expression" />, используемые для заполнения коллекции <see cref="P:System.Linq.Expressions.ListInitExpression.Initializers" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fef91-2059">An <see cref="T:System.Collections.Generic.IEnumerable`1" /> that contains <see cref="T:System.Linq.Expressions.Expression" /> objects to use to populate the <see cref="P:System.Linq.Expressions.ListInitExpression.Initializers" /> collection.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="fef91-2060">Создает <see cref="T:System.Linq.Expressions.ListInitExpression" />, использующий метод с именем "Добавить" для добавления элементов в коллекцию.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fef91-2060">Creates a <see cref="T:System.Linq.Expressions.ListInitExpression" /> that uses a method named "Add" to add elements to a collection.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="fef91-2061">Выражение <see cref="T:System.Linq.Expressions.ListInitExpression" /> со свойством <see cref="P:System.Linq.Expressions.Expression.NodeType" />, равным <see cref="F:System.Linq.Expressions.ExpressionType.ListInit" />, и свойством <see cref="P:System.Linq.Expressions.ListInitExpression.NewExpression" />, для которого задано указанное значение.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fef91-2061">A <see cref="T:System.Linq.Expressions.ListInitExpression" /> that has the <see cref="P:System.Linq.Expressions.Expression.NodeType" /> property equal to <see cref="F:System.Linq.Expressions.ExpressionType.ListInit" /> and the <see cref="P:System.Linq.Expressions.ListInitExpression.NewExpression" /> property set to the specified value.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="fef91-2062"><xref:System.Linq.Expressions.Expression.Type%2A> Свойство `newExpression` должны представлять собой тип, реализующий <xref:System.Collections.IEnumerable>.</span><span class="sxs-lookup"><span data-stu-id="fef91-2062">The <xref:System.Linq.Expressions.Expression.Type%2A> property of `newExpression` must represent a type that implements <xref:System.Collections.IEnumerable>.</span></span>  
  
 <span data-ttu-id="fef91-2063">Чтобы использовать эту перегрузку <xref:System.Linq.Expressions.Expression.ListInit%28System.Linq.Expressions.NewExpression%2CSystem.Collections.Generic.IEnumerable%7BSystem.Linq.Expressions.Expression%7D%29>, `newExpression`. Тип или его базовом типе необходимо объявить один метод с именем «Add» (без учета регистра), который принимает ровно один аргумент.</span><span class="sxs-lookup"><span data-stu-id="fef91-2063">In order to use this overload of <xref:System.Linq.Expressions.Expression.ListInit%28System.Linq.Expressions.NewExpression%2CSystem.Collections.Generic.IEnumerable%7BSystem.Linq.Expressions.Expression%7D%29>, `newExpression`.Type or its base type must declare a single method named "Add" (case insensitive) that takes exactly one argument.</span></span> <span data-ttu-id="fef91-2064">Тип аргумента должен назначаться из типа, представленного <xref:System.Linq.Expressions.Expression.Type%2A> свойство первый элемент `initializers`.</span><span class="sxs-lookup"><span data-stu-id="fef91-2064">The type of the argument must be assignable from the type represented by the <xref:System.Linq.Expressions.Expression.Type%2A> property of the first element of `initializers`.</span></span>  
  
 <span data-ttu-id="fef91-2065"><xref:System.Linq.Expressions.ListInitExpression.Initializers%2A> Свойства возвращаемого <xref:System.Linq.Expressions.ListInitExpression> содержит один элемент типа <xref:System.Linq.Expressions.ElementInit> для каждого элемента `initializers`.</span><span class="sxs-lookup"><span data-stu-id="fef91-2065">The <xref:System.Linq.Expressions.ListInitExpression.Initializers%2A> property of the returned <xref:System.Linq.Expressions.ListInitExpression> contains one element of type <xref:System.Linq.Expressions.ElementInit> for each element of `initializers`.</span></span> <span data-ttu-id="fef91-2066"><xref:System.Linq.Expressions.ElementInit.Arguments%2A> Свойство каждого элемента массива <xref:System.Linq.Expressions.ListInitExpression.Initializers%2A> является одноэлементный коллекции, содержащей соответствующий элемент `initializers`.</span><span class="sxs-lookup"><span data-stu-id="fef91-2066">The <xref:System.Linq.Expressions.ElementInit.Arguments%2A> property of each element of <xref:System.Linq.Expressions.ListInitExpression.Initializers%2A> is a singleton collection that contains the corresponding element of `initializers`.</span></span> <span data-ttu-id="fef91-2067"><xref:System.Linq.Expressions.ElementInit.AddMethod%2A> Свойство каждого элемента массива <xref:System.Linq.Expressions.ListInitExpression.Initializers%2A> представляет метода add, который был обнаружен на `newExpression`. Тип или его базовом типе.</span><span class="sxs-lookup"><span data-stu-id="fef91-2067">The <xref:System.Linq.Expressions.ElementInit.AddMethod%2A> property of each element of <xref:System.Linq.Expressions.ListInitExpression.Initializers%2A> represents the add method that was discovered on `newExpression`.Type or its base type.</span></span>  
  
 <span data-ttu-id="fef91-2068"><xref:System.Linq.Expressions.Expression.Type%2A> Результирующего <xref:System.Linq.Expressions.ListInitExpression> равен `newExpression`. Тип.</span><span class="sxs-lookup"><span data-stu-id="fef91-2068">The <xref:System.Linq.Expressions.Expression.Type%2A> property of the resulting <xref:System.Linq.Expressions.ListInitExpression> is equal to `newExpression`.Type.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="fef91-2069">Значение параметра <paramref name="newExpression" /> или <paramref name="initializers" /> — <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fef91-2069">
              <paramref name="newExpression" /> or <paramref name="initializers" /> is <see langword="null" />.</span>
          </span>
          <span data-ttu-id="fef91-2070">-или-</span>
          <span class="sxs-lookup">
            <span data-stu-id="fef91-2070">-or-</span>
          </span>
          <span data-ttu-id="fef91-2071">Один или несколько элементов <paramref name="initializers" /> имеют значение <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fef91-2071">One or more elements of <paramref name="initializers" /> are <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="fef91-2072">
            <paramref name="newExpression" />.Type не реализует <see cref="T:System.Collections.IEnumerable" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fef91-2072">
              <paramref name="newExpression" />.Type does not implement <see cref="T:System.Collections.IEnumerable" />.</span>
          </span>
        </exception>
        <exception cref="T:System.InvalidOperationException">
          <span data-ttu-id="fef91-2073">В <paramref name="newExpression" /> или его базовом типе не объявлен метод экземпляра с именем "Добавить" (без учета регистра).</span>
          <span class="sxs-lookup">
            <span data-stu-id="fef91-2073">There is no instance method named "Add" (case insensitive) declared in <paramref name="newExpression" />.Type or its base type.</span>
          </span>
          <span data-ttu-id="fef91-2074">-или-</span>
          <span class="sxs-lookup">
            <span data-stu-id="fef91-2074">-or-</span>
          </span>
          <span data-ttu-id="fef91-2075">Метод "Добавить" в <paramref name="newExpression" />.Type или его базовом типе не принимает ровно один аргумент.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fef91-2075">The add method on <paramref name="newExpression" />.Type or its base type does not take exactly one argument.</span>
          </span>
          <span data-ttu-id="fef91-2076">-или-</span>
          <span class="sxs-lookup">
            <span data-stu-id="fef91-2076">-or-</span>
          </span>
          <span data-ttu-id="fef91-2077">Тип, представленный свойством <see cref="P:System.Linq.Expressions.Expression.Type" /> первого элемента <paramref name="initializers" />, невозможно назначить типу аргумента метода "Добавить" в <paramref name="newExpression" />.Type или его базовом типе.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fef91-2077">The type represented by the <see cref="P:System.Linq.Expressions.Expression.Type" /> property of the first element of <paramref name="initializers" /> is not assignable to the argument type of the add method on <paramref name="newExpression" />.Type or its base type.</span>
          </span>
          <span data-ttu-id="fef91-2078">-или-</span>
          <span class="sxs-lookup">
            <span data-stu-id="fef91-2078">-or-</span>
          </span>
          <span data-ttu-id="fef91-2079">Метод, совместимый более чем с одним аргументом, с именем "Add" (без учета регистра), существует для типа <paramref name="newExpression" />.Type или его базового типа.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fef91-2079">More than one argument-compatible method named "Add" (case-insensitive) exists on <paramref name="newExpression" />.Type and/or its base type.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="ListInit">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.ListInitExpression ListInit (System.Linq.Expressions.NewExpression newExpression, params System.Linq.Expressions.ElementInit[] initializers);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.ListInitExpression ListInit(class System.Linq.Expressions.NewExpression newExpression, class System.Linq.Expressions.ElementInit[] initializers) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.ListInit(System.Linq.Expressions.NewExpression,System.Linq.Expressions.ElementInit[])" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Linq::Expressions::ListInitExpression ^ ListInit(System::Linq::Expressions::NewExpression ^ newExpression, ... cli::array &lt;System::Linq::Expressions::ElementInit ^&gt; ^ initializers);" />
      <MemberSignature Language="F#" Value="static member ListInit : System.Linq.Expressions.NewExpression * System.Linq.Expressions.ElementInit[] -&gt; System.Linq.Expressions.ListInitExpression" Usage="System.Linq.Expressions.Expression.ListInit (newExpression, initializers)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.ListInitExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="newExpression" Type="System.Linq.Expressions.NewExpression" />
        <Parameter Name="initializers" Type="System.Linq.Expressions.ElementInit[]">
          <Attributes>
            <Attribute>
              <AttributeName>System.ParamArray</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="newExpression">
          <span data-ttu-id="fef91-2080">Объект <see cref="T:System.Linq.Expressions.NewExpression" />, который следует задать в качестве значения свойства <see cref="P:System.Linq.Expressions.ListInitExpression.NewExpression" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fef91-2080">A <see cref="T:System.Linq.Expressions.NewExpression" /> to set the <see cref="P:System.Linq.Expressions.ListInitExpression.NewExpression" /> property equal to.</span>
          </span>
        </param>
        <param name="initializers">
          <span data-ttu-id="fef91-2081">Массив объектов <see cref="T:System.Linq.Expressions.ElementInit" /> для заполнения коллекции <see cref="P:System.Linq.Expressions.ListInitExpression.Initializers" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fef91-2081">An array of <see cref="T:System.Linq.Expressions.ElementInit" /> objects to use to populate the <see cref="P:System.Linq.Expressions.ListInitExpression.Initializers" /> collection.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="fef91-2082">Создает <see cref="T:System.Linq.Expressions.ListInitExpression" />, использующий указанные объекты <see cref="T:System.Linq.Expressions.ElementInit" /> для инициализации коллекции.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fef91-2082">Creates a <see cref="T:System.Linq.Expressions.ListInitExpression" /> that uses specified <see cref="T:System.Linq.Expressions.ElementInit" /> objects to initialize a collection.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="fef91-2083">Выражение <see cref="T:System.Linq.Expressions.ListInitExpression" /> со свойством<see cref="P:System.Linq.Expressions.Expression.NodeType" />, равным <see cref="F:System.Linq.Expressions.ExpressionType.ListInit" />, и свойствами <see cref="P:System.Linq.Expressions.ListInitExpression.NewExpression" /> и <see cref="P:System.Linq.Expressions.ListInitExpression.Initializers" />, для которых заданы указанные значения.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fef91-2083">A <see cref="T:System.Linq.Expressions.ListInitExpression" /> that has the <see cref="P:System.Linq.Expressions.Expression.NodeType" /> property equal to <see cref="F:System.Linq.Expressions.ExpressionType.ListInit" /> and the <see cref="P:System.Linq.Expressions.ListInitExpression.NewExpression" /> and <see cref="P:System.Linq.Expressions.ListInitExpression.Initializers" /> properties set to the specified values.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="fef91-2084"><xref:System.Linq.Expressions.Expression.Type%2A> Свойство `newExpression` должны представлять собой тип, реализующий <xref:System.Collections.IEnumerable>.</span><span class="sxs-lookup"><span data-stu-id="fef91-2084">The <xref:System.Linq.Expressions.Expression.Type%2A> property of `newExpression` must represent a type that implements <xref:System.Collections.IEnumerable>.</span></span>  
  
 <span data-ttu-id="fef91-2085"><xref:System.Linq.Expressions.Expression.Type%2A> Результирующего <xref:System.Linq.Expressions.ListInitExpression> равен `newExpression`. Тип.</span><span class="sxs-lookup"><span data-stu-id="fef91-2085">The <xref:System.Linq.Expressions.Expression.Type%2A> property of the resulting <xref:System.Linq.Expressions.ListInitExpression> is equal to `newExpression`.Type.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="fef91-2086">Следующий пример демонстрирует, как использовать <xref:System.Linq.Expressions.Expression.ListInit%28System.Linq.Expressions.NewExpression%2CSystem.Linq.Expressions.ElementInit%5B%5D%29> метод для создания <xref:System.Linq.Expressions.ListInitExpression> который представляет инициализацию нового экземпляра словаря с помощью двух пар "ключ значение".</span><span class="sxs-lookup"><span data-stu-id="fef91-2086">The following example demonstrates how to use the <xref:System.Linq.Expressions.Expression.ListInit%28System.Linq.Expressions.NewExpression%2CSystem.Linq.Expressions.ElementInit%5B%5D%29> method to create a <xref:System.Linq.Expressions.ListInitExpression> that represents the initialization of a new dictionary instance with two key-value pairs.</span></span>  
  
 [!code-csharp[System.Linq.Expressions.Expression#7](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Linq.Expressions.Expression/CS/Expression.cs#7)]
 [!code-vb[System.Linq.Expressions.Expression#7](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Linq.Expressions.Expression/VB/Expression.vb#7)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="fef91-2087">Значение параметра <paramref name="newExpression" /> или <paramref name="initializers" /> — <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fef91-2087">
              <paramref name="newExpression" /> or <paramref name="initializers" /> is <see langword="null" />.</span>
          </span>
          <span data-ttu-id="fef91-2088">-или-</span>
          <span class="sxs-lookup">
            <span data-stu-id="fef91-2088">-or-</span>
          </span>
          <span data-ttu-id="fef91-2089">Один или несколько элементов <paramref name="initializers" /> имеют значение <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fef91-2089">One or more elements of <paramref name="initializers" /> are <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="fef91-2090">Тип <paramref name="newExpression" />.Type не реализует <see cref="T:System.Collections.IEnumerable" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fef91-2090">
              <paramref name="newExpression" />.Type does not implement <see cref="T:System.Collections.IEnumerable" />.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="ListInit">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.ListInitExpression ListInit (System.Linq.Expressions.NewExpression newExpression, params System.Linq.Expressions.Expression[] initializers);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.ListInitExpression ListInit(class System.Linq.Expressions.NewExpression newExpression, class System.Linq.Expressions.Expression[] initializers) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.ListInit(System.Linq.Expressions.NewExpression,System.Linq.Expressions.Expression[])" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Linq::Expressions::ListInitExpression ^ ListInit(System::Linq::Expressions::NewExpression ^ newExpression, ... cli::array &lt;System::Linq::Expressions::Expression ^&gt; ^ initializers);" />
      <MemberSignature Language="F#" Value="static member ListInit : System.Linq.Expressions.NewExpression * System.Linq.Expressions.Expression[] -&gt; System.Linq.Expressions.ListInitExpression" Usage="System.Linq.Expressions.Expression.ListInit (newExpression, initializers)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.ListInitExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="newExpression" Type="System.Linq.Expressions.NewExpression" />
        <Parameter Name="initializers" Type="System.Linq.Expressions.Expression[]">
          <Attributes>
            <Attribute>
              <AttributeName>System.ParamArray</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="newExpression">
          <span data-ttu-id="fef91-2091">Объект <see cref="T:System.Linq.Expressions.NewExpression" />, который следует задать в качестве значения свойства <see cref="P:System.Linq.Expressions.ListInitExpression.NewExpression" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fef91-2091">A <see cref="T:System.Linq.Expressions.NewExpression" /> to set the <see cref="P:System.Linq.Expressions.ListInitExpression.NewExpression" /> property equal to.</span>
          </span>
        </param>
        <param name="initializers">
          <span data-ttu-id="fef91-2092">Массив объектов <see cref="T:System.Linq.Expressions.Expression" /> для заполнения коллекции <see cref="P:System.Linq.Expressions.ListInitExpression.Initializers" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fef91-2092">An array of <see cref="T:System.Linq.Expressions.Expression" /> objects to use to populate the <see cref="P:System.Linq.Expressions.ListInitExpression.Initializers" /> collection.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="fef91-2093">Создает <see cref="T:System.Linq.Expressions.ListInitExpression" />, использующий метод с именем "Добавить" для добавления элементов в коллекцию.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fef91-2093">Creates a <see cref="T:System.Linq.Expressions.ListInitExpression" /> that uses a method named "Add" to add elements to a collection.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="fef91-2094">Выражение <see cref="T:System.Linq.Expressions.ListInitExpression" /> со свойством <see cref="P:System.Linq.Expressions.Expression.NodeType" />, равным <see cref="F:System.Linq.Expressions.ExpressionType.ListInit" />, и свойством <see cref="P:System.Linq.Expressions.ListInitExpression.NewExpression" />, для которого задано указанное значение.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fef91-2094">A <see cref="T:System.Linq.Expressions.ListInitExpression" /> that has the <see cref="P:System.Linq.Expressions.Expression.NodeType" /> property equal to <see cref="F:System.Linq.Expressions.ExpressionType.ListInit" /> and the <see cref="P:System.Linq.Expressions.ListInitExpression.NewExpression" /> property set to the specified value.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="fef91-2095"><xref:System.Linq.Expressions.Expression.Type%2A> Свойство `newExpression` должны представлять собой тип, реализующий <xref:System.Collections.IEnumerable>.</span><span class="sxs-lookup"><span data-stu-id="fef91-2095">The <xref:System.Linq.Expressions.Expression.Type%2A> property of `newExpression` must represent a type that implements <xref:System.Collections.IEnumerable>.</span></span>  
  
 <span data-ttu-id="fef91-2096">Чтобы использовать эту перегрузку <xref:System.Linq.Expressions.Expression.ListInit%28System.Linq.Expressions.NewExpression%2CSystem.Linq.Expressions.Expression%5B%5D%29>, `newExpression`. Тип или его базовом типе необходимо объявить один метод с именем «Add» (без учета регистра), который принимает ровно один аргумент.</span><span class="sxs-lookup"><span data-stu-id="fef91-2096">In order to use this overload of <xref:System.Linq.Expressions.Expression.ListInit%28System.Linq.Expressions.NewExpression%2CSystem.Linq.Expressions.Expression%5B%5D%29>, `newExpression`.Type or its base type must declare a single method named "Add" (case insensitive) that takes exactly one argument.</span></span> <span data-ttu-id="fef91-2097">Тип аргумента должен назначаться из типа, представленного <xref:System.Linq.Expressions.Expression.Type%2A> свойство первый элемент `initializers`.</span><span class="sxs-lookup"><span data-stu-id="fef91-2097">The type of the argument must be assignable from the type represented by the <xref:System.Linq.Expressions.Expression.Type%2A> property of the first element of `initializers`.</span></span>  
  
 <span data-ttu-id="fef91-2098"><xref:System.Linq.Expressions.ListInitExpression.Initializers%2A> Свойства возвращаемого <xref:System.Linq.Expressions.ListInitExpression> содержит один элемент типа <xref:System.Linq.Expressions.ElementInit> для каждого элемента `initializers`.</span><span class="sxs-lookup"><span data-stu-id="fef91-2098">The <xref:System.Linq.Expressions.ListInitExpression.Initializers%2A> property of the returned <xref:System.Linq.Expressions.ListInitExpression> contains one element of type <xref:System.Linq.Expressions.ElementInit> for each element of `initializers`.</span></span> <span data-ttu-id="fef91-2099"><xref:System.Linq.Expressions.ElementInit.Arguments%2A> Свойство каждого элемента массива <xref:System.Linq.Expressions.ListInitExpression.Initializers%2A> является одноэлементный коллекции, содержащей соответствующий элемент `initializers`.</span><span class="sxs-lookup"><span data-stu-id="fef91-2099">The <xref:System.Linq.Expressions.ElementInit.Arguments%2A> property of each element of <xref:System.Linq.Expressions.ListInitExpression.Initializers%2A> is a singleton collection that contains the corresponding element of `initializers`.</span></span> <span data-ttu-id="fef91-2100"><xref:System.Linq.Expressions.ElementInit.AddMethod%2A> Свойство каждого элемента массива <xref:System.Linq.Expressions.ListInitExpression.Initializers%2A> представляет метода add, который был обнаружен на `newExpression`. Тип или его базовом типе.</span><span class="sxs-lookup"><span data-stu-id="fef91-2100">The <xref:System.Linq.Expressions.ElementInit.AddMethod%2A> property of each element of <xref:System.Linq.Expressions.ListInitExpression.Initializers%2A> represents the add method that was discovered on `newExpression`.Type or its base type.</span></span>  
  
 <span data-ttu-id="fef91-2101"><xref:System.Linq.Expressions.Expression.Type%2A> Результирующего <xref:System.Linq.Expressions.ListInitExpression> равен `newExpression`. Тип.</span><span class="sxs-lookup"><span data-stu-id="fef91-2101">The <xref:System.Linq.Expressions.Expression.Type%2A> property of the resulting <xref:System.Linq.Expressions.ListInitExpression> is equal to `newExpression`.Type.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="fef91-2102">Значение параметра <paramref name="newExpression" /> или <paramref name="initializers" /> — <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fef91-2102">
              <paramref name="newExpression" /> or <paramref name="initializers" /> is <see langword="null" />.</span>
          </span>
          <span data-ttu-id="fef91-2103">-или-</span>
          <span class="sxs-lookup">
            <span data-stu-id="fef91-2103">-or-</span>
          </span>
          <span data-ttu-id="fef91-2104">Значение одного или нескольких элементов параметра <paramref name="initializers" /> равно <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fef91-2104">One or more elements of <paramref name="initializers" /> are <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="fef91-2105">
            <paramref name="newExpression" />.Type не реализует <see cref="T:System.Collections.IEnumerable" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fef91-2105">
              <paramref name="newExpression" />.Type does not implement <see cref="T:System.Collections.IEnumerable" />.</span>
          </span>
        </exception>
        <exception cref="T:System.InvalidOperationException">
          <span data-ttu-id="fef91-2106">В <paramref name="newExpression" /> или его базовом типе не объявлен метод экземпляра с именем "Добавить" (без учета регистра).</span>
          <span class="sxs-lookup">
            <span data-stu-id="fef91-2106">There is no instance method named "Add" (case insensitive) declared in <paramref name="newExpression" />.Type or its base type.</span>
          </span>
          <span data-ttu-id="fef91-2107">-или-</span>
          <span class="sxs-lookup">
            <span data-stu-id="fef91-2107">-or-</span>
          </span>
          <span data-ttu-id="fef91-2108">Метод "Добавить" в <paramref name="newExpression" />.Type или его базовом типе не принимает ровно один аргумент.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fef91-2108">The add method on <paramref name="newExpression" />.Type or its base type does not take exactly one argument.</span>
          </span>
          <span data-ttu-id="fef91-2109">-или-</span>
          <span class="sxs-lookup">
            <span data-stu-id="fef91-2109">-or-</span>
          </span>
          <span data-ttu-id="fef91-2110">Тип, представленный свойством <see cref="P:System.Linq.Expressions.Expression.Type" /> первого элемента <paramref name="initializers" />, невозможно назначить типу аргумента метода "Добавить" в <paramref name="newExpression" />.Type или его базовом типе.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fef91-2110">The type represented by the <see cref="P:System.Linq.Expressions.Expression.Type" /> property of the first element of <paramref name="initializers" /> is not assignable to the argument type of the add method on <paramref name="newExpression" />.Type or its base type.</span>
          </span>
          <span data-ttu-id="fef91-2111">-или-</span>
          <span class="sxs-lookup">
            <span data-stu-id="fef91-2111">-or-</span>
          </span>
          <span data-ttu-id="fef91-2112">Метод, совместимый более чем с одним аргументом, с именем "Add" (без учета регистра), существует для типа <paramref name="newExpression" />.Type или его базового типа.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fef91-2112">More than one argument-compatible method named "Add" (case-insensitive) exists on <paramref name="newExpression" />.Type and/or its base type.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="ListInit">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.ListInitExpression ListInit (System.Linq.Expressions.NewExpression newExpression, System.Reflection.MethodInfo addMethod, System.Collections.Generic.IEnumerable&lt;System.Linq.Expressions.Expression&gt; initializers);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.ListInitExpression ListInit(class System.Linq.Expressions.NewExpression newExpression, class System.Reflection.MethodInfo addMethod, class System.Collections.Generic.IEnumerable`1&lt;class System.Linq.Expressions.Expression&gt; initializers) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.ListInit(System.Linq.Expressions.NewExpression,System.Reflection.MethodInfo,System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression})" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Linq::Expressions::ListInitExpression ^ ListInit(System::Linq::Expressions::NewExpression ^ newExpression, System::Reflection::MethodInfo ^ addMethod, System::Collections::Generic::IEnumerable&lt;System::Linq::Expressions::Expression ^&gt; ^ initializers);" />
      <MemberSignature Language="F#" Value="static member ListInit : System.Linq.Expressions.NewExpression * System.Reflection.MethodInfo * seq&lt;System.Linq.Expressions.Expression&gt; -&gt; System.Linq.Expressions.ListInitExpression" Usage="System.Linq.Expressions.Expression.ListInit (newExpression, addMethod, initializers)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.ListInitExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="newExpression" Type="System.Linq.Expressions.NewExpression" />
        <Parameter Name="addMethod" Type="System.Reflection.MethodInfo" />
        <Parameter Name="initializers" Type="System.Collections.Generic.IEnumerable&lt;System.Linq.Expressions.Expression&gt;" />
      </Parameters>
      <Docs>
        <param name="newExpression">
          <span data-ttu-id="fef91-2113">Объект <see cref="T:System.Linq.Expressions.NewExpression" />, который следует задать в качестве значения свойства <see cref="P:System.Linq.Expressions.ListInitExpression.NewExpression" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fef91-2113">A <see cref="T:System.Linq.Expressions.NewExpression" /> to set the <see cref="P:System.Linq.Expressions.ListInitExpression.NewExpression" /> property equal to.</span>
          </span>
        </param>
        <param name="addMethod">
          <span data-ttu-id="fef91-2114">
            <see cref="T:System.Reflection.MethodInfo" />, представляющий метод экземпляра с именем "Add" (без учета регистра), добавляющий элемент к коллекции.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fef91-2114">A <see cref="T:System.Reflection.MethodInfo" /> that represents an instance method named "Add" (case insensitive), that adds an element to a collection.</span>
          </span>
        </param>
        <param name="initializers">
          <span data-ttu-id="fef91-2115">
            <see cref="T:System.Collections.Generic.IEnumerable`1" />, содержащий все объекты <see cref="T:System.Linq.Expressions.Expression" />, используемые для заполнения коллекции <see cref="P:System.Linq.Expressions.ListInitExpression.Initializers" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fef91-2115">An <see cref="T:System.Collections.Generic.IEnumerable`1" /> that contains <see cref="T:System.Linq.Expressions.Expression" /> objects to use to populate the <see cref="P:System.Linq.Expressions.ListInitExpression.Initializers" /> collection.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="fef91-2116">Создает <see cref="T:System.Linq.Expressions.ListInitExpression" />, использующий указанный метод, чтобы добавить элементы к коллекции.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fef91-2116">Creates a <see cref="T:System.Linq.Expressions.ListInitExpression" /> that uses a specified method to add elements to a collection.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="fef91-2117">Выражение <see cref="T:System.Linq.Expressions.ListInitExpression" /> со свойством <see cref="P:System.Linq.Expressions.Expression.NodeType" />, равным <see cref="F:System.Linq.Expressions.ExpressionType.ListInit" />, и свойством <see cref="P:System.Linq.Expressions.ListInitExpression.NewExpression" />, для которого задано указанное значение.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fef91-2117">A <see cref="T:System.Linq.Expressions.ListInitExpression" /> that has the <see cref="P:System.Linq.Expressions.Expression.NodeType" /> property equal to <see cref="F:System.Linq.Expressions.ExpressionType.ListInit" /> and the <see cref="P:System.Linq.Expressions.ListInitExpression.NewExpression" /> property set to the specified value.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="fef91-2118"><xref:System.Linq.Expressions.Expression.Type%2A> Свойство `newExpression` должны представлять собой тип, реализующий <xref:System.Collections.IEnumerable>.</span><span class="sxs-lookup"><span data-stu-id="fef91-2118">The <xref:System.Linq.Expressions.Expression.Type%2A> property of `newExpression` must represent a type that implements <xref:System.Collections.IEnumerable>.</span></span>  
  
 <span data-ttu-id="fef91-2119">Если `addMethod` — `null`, `newExpression`. Тип или его базовом типе необходимо объявить один метод с именем «Add» (без учета регистра), который принимает ровно один аргумент.</span><span class="sxs-lookup"><span data-stu-id="fef91-2119">If `addMethod` is `null`, `newExpression`.Type or its base type must declare a single method named "Add" (case insensitive) that takes exactly one argument.</span></span> <span data-ttu-id="fef91-2120">Если `addMethod` не `null`, он должен представлять метод экземпляра с именем «Add» (без учета регистра), который имеет ровно один параметр.</span><span class="sxs-lookup"><span data-stu-id="fef91-2120">If `addMethod` is not `null`, it must represent an instance method named "Add" (case insensitive) that has exactly one parameter.</span></span> <span data-ttu-id="fef91-2121">Тип, представленный <xref:System.Linq.Expressions.Expression.Type%2A> свойство каждого элемента массива `initializers` должен быть назначен типу аргумента метода add.</span><span class="sxs-lookup"><span data-stu-id="fef91-2121">The type represented by the <xref:System.Linq.Expressions.Expression.Type%2A> property of each element of `initializers` must be assignable to the argument type of the add method.</span></span>  
  
 <span data-ttu-id="fef91-2122"><xref:System.Linq.Expressions.ListInitExpression.Initializers%2A> Свойства возвращаемого <xref:System.Linq.Expressions.ListInitExpression> содержит один элемент типа <xref:System.Linq.Expressions.ElementInit> для каждого элемента `initializers`.</span><span class="sxs-lookup"><span data-stu-id="fef91-2122">The <xref:System.Linq.Expressions.ListInitExpression.Initializers%2A> property of the returned <xref:System.Linq.Expressions.ListInitExpression> contains one element of type <xref:System.Linq.Expressions.ElementInit> for each element of `initializers`.</span></span> <span data-ttu-id="fef91-2123"><xref:System.Linq.Expressions.ElementInit.Arguments%2A> Свойство каждого элемента массива <xref:System.Linq.Expressions.ListInitExpression.Initializers%2A> является одноэлементный коллекции, содержащей соответствующий элемент `initializers`.</span><span class="sxs-lookup"><span data-stu-id="fef91-2123">The <xref:System.Linq.Expressions.ElementInit.Arguments%2A> property of each element of <xref:System.Linq.Expressions.ListInitExpression.Initializers%2A> is a singleton collection that contains the corresponding element of `initializers`.</span></span> <span data-ttu-id="fef91-2124"><xref:System.Linq.Expressions.ElementInit.AddMethod%2A> Свойство каждого элемента массива <xref:System.Linq.Expressions.ListInitExpression.Initializers%2A> равен `addMethod`.</span><span class="sxs-lookup"><span data-stu-id="fef91-2124">The <xref:System.Linq.Expressions.ElementInit.AddMethod%2A> property of each element of <xref:System.Linq.Expressions.ListInitExpression.Initializers%2A> is equal to `addMethod`.</span></span>  
  
 <span data-ttu-id="fef91-2125"><xref:System.Linq.Expressions.Expression.Type%2A> Результирующего <xref:System.Linq.Expressions.ListInitExpression> равен `newExpression`. Тип.</span><span class="sxs-lookup"><span data-stu-id="fef91-2125">The <xref:System.Linq.Expressions.Expression.Type%2A> property of the resulting <xref:System.Linq.Expressions.ListInitExpression> is equal to `newExpression`.Type.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="fef91-2126">Значение параметра <paramref name="newExpression" /> или <paramref name="initializers" /> — <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fef91-2126">
              <paramref name="newExpression" /> or <paramref name="initializers" /> is <see langword="null" />.</span>
          </span>
          <span data-ttu-id="fef91-2127">-или-</span>
          <span class="sxs-lookup">
            <span data-stu-id="fef91-2127">-or-</span>
          </span>
          <span data-ttu-id="fef91-2128">Один или несколько элементов <paramref name="initializers" /> имеют значение <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fef91-2128">One or more elements of <paramref name="initializers" /> are <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="fef91-2129">Тип <paramref name="newExpression" />.Type не реализует <see cref="T:System.Collections.IEnumerable" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fef91-2129">
              <paramref name="newExpression" />.Type does not implement <see cref="T:System.Collections.IEnumerable" />.</span>
          </span>
          <span data-ttu-id="fef91-2130">-или-</span>
          <span class="sxs-lookup">
            <span data-stu-id="fef91-2130">-or-</span>
          </span>
          <span data-ttu-id="fef91-2131">Значение <paramref name="addMethod" /> не равно <see langword="null" /> и не представляет метод экземпляра с именем "Add" (без учета регистра), принимающий точно один аргумент.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fef91-2131">
              <paramref name="addMethod" /> is not <see langword="null" /> and it does not represent an instance method named "Add" (case insensitive) that takes exactly one argument.</span>
          </span>
          <span data-ttu-id="fef91-2132">-или-</span>
          <span class="sxs-lookup">
            <span data-stu-id="fef91-2132">-or-</span>
          </span>
          <span data-ttu-id="fef91-2133">Значение <paramref name="addMethod" /> не равно <see langword="null" />, а тип, представленный свойством <see cref="P:System.Linq.Expressions.Expression.Type" /> одного или нескольких элементов параметра <paramref name="initializers" />, нельзя назначить для типа аргумента метода, представленного <paramref name="addMethod" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fef91-2133">
              <paramref name="addMethod" /> is not <see langword="null" /> and the type represented by the <see cref="P:System.Linq.Expressions.Expression.Type" /> property of one or more elements of <paramref name="initializers" /> is not assignable to the argument type of the method that <paramref name="addMethod" /> represents.</span>
          </span>
        </exception>
        <exception cref="T:System.InvalidOperationException">
          <span data-ttu-id="fef91-2134">
            <paramref name="addMethod" /> не равен <see langword="null" />, и отсутствует метод экземпляра с именем "Add", принимающий один аргумент, совместимый с типом, для параметра <paramref name="newExpression" />.Type или его базового типа.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fef91-2134">
              <paramref name="addMethod" /> is <see langword="null" /> and no instance method named "Add" that takes one type-compatible argument exists on <paramref name="newExpression" />.Type or its base type.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="ListInit">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.ListInitExpression ListInit (System.Linq.Expressions.NewExpression newExpression, System.Reflection.MethodInfo addMethod, params System.Linq.Expressions.Expression[] initializers);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.ListInitExpression ListInit(class System.Linq.Expressions.NewExpression newExpression, class System.Reflection.MethodInfo addMethod, class System.Linq.Expressions.Expression[] initializers) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.ListInit(System.Linq.Expressions.NewExpression,System.Reflection.MethodInfo,System.Linq.Expressions.Expression[])" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Linq::Expressions::ListInitExpression ^ ListInit(System::Linq::Expressions::NewExpression ^ newExpression, System::Reflection::MethodInfo ^ addMethod, ... cli::array &lt;System::Linq::Expressions::Expression ^&gt; ^ initializers);" />
      <MemberSignature Language="F#" Value="static member ListInit : System.Linq.Expressions.NewExpression * System.Reflection.MethodInfo * System.Linq.Expressions.Expression[] -&gt; System.Linq.Expressions.ListInitExpression" Usage="System.Linq.Expressions.Expression.ListInit (newExpression, addMethod, initializers)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.ListInitExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="newExpression" Type="System.Linq.Expressions.NewExpression" />
        <Parameter Name="addMethod" Type="System.Reflection.MethodInfo" />
        <Parameter Name="initializers" Type="System.Linq.Expressions.Expression[]">
          <Attributes>
            <Attribute>
              <AttributeName>System.ParamArray</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="newExpression">
          <span data-ttu-id="fef91-2135">Объект <see cref="T:System.Linq.Expressions.NewExpression" />, который следует задать в качестве значения свойства <see cref="P:System.Linq.Expressions.ListInitExpression.NewExpression" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fef91-2135">A <see cref="T:System.Linq.Expressions.NewExpression" /> to set the <see cref="P:System.Linq.Expressions.ListInitExpression.NewExpression" /> property equal to.</span>
          </span>
        </param>
        <param name="addMethod">
          <span data-ttu-id="fef91-2136">Параметр <see cref="T:System.Reflection.MethodInfo" />, представляющий метод экземпляра с одним аргументом, добавляющий элемент к коллекции.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fef91-2136">A <see cref="T:System.Reflection.MethodInfo" /> that represents an instance method that takes one argument, that adds an element to a collection.</span>
          </span>
        </param>
        <param name="initializers">
          <span data-ttu-id="fef91-2137">Массив объектов <see cref="T:System.Linq.Expressions.Expression" /> для заполнения коллекции <see cref="P:System.Linq.Expressions.ListInitExpression.Initializers" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fef91-2137">An array of <see cref="T:System.Linq.Expressions.Expression" /> objects to use to populate the <see cref="P:System.Linq.Expressions.ListInitExpression.Initializers" /> collection.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="fef91-2138">Создает <see cref="T:System.Linq.Expressions.ListInitExpression" />, использующий указанный метод, чтобы добавить элементы к коллекции.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fef91-2138">Creates a <see cref="T:System.Linq.Expressions.ListInitExpression" /> that uses a specified method to add elements to a collection.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="fef91-2139">Выражение <see cref="T:System.Linq.Expressions.ListInitExpression" /> со свойством <see cref="P:System.Linq.Expressions.Expression.NodeType" />, равным <see cref="F:System.Linq.Expressions.ExpressionType.ListInit" />, и свойством <see cref="P:System.Linq.Expressions.ListInitExpression.NewExpression" />, для которого задано указанное значение.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fef91-2139">A <see cref="T:System.Linq.Expressions.ListInitExpression" /> that has the <see cref="P:System.Linq.Expressions.Expression.NodeType" /> property equal to <see cref="F:System.Linq.Expressions.ExpressionType.ListInit" /> and the <see cref="P:System.Linq.Expressions.ListInitExpression.NewExpression" /> property set to the specified value.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="fef91-2140"><xref:System.Linq.Expressions.Expression.Type%2A> Свойство `newExpression` должны представлять собой тип, реализующий <xref:System.Collections.IEnumerable>.</span><span class="sxs-lookup"><span data-stu-id="fef91-2140">The <xref:System.Linq.Expressions.Expression.Type%2A> property of `newExpression` must represent a type that implements <xref:System.Collections.IEnumerable>.</span></span>  
  
 <span data-ttu-id="fef91-2141">Если `addMethod` — `null`, `newExpression`. Тип или его базовом типе необходимо объявить один метод с именем «Add» (без учета регистра), который принимает ровно один аргумент.</span><span class="sxs-lookup"><span data-stu-id="fef91-2141">If `addMethod` is `null`, `newExpression`.Type or its base type must declare a single method named "Add" (case insensitive) that takes exactly one argument.</span></span> <span data-ttu-id="fef91-2142">Если `addMethod` не `null`, он должен представлять метод экземпляра с именем «Add» (без учета регистра), который имеет ровно один параметр.</span><span class="sxs-lookup"><span data-stu-id="fef91-2142">If `addMethod` is not `null`, it must represent an instance method named "Add" (case insensitive) that has exactly one parameter.</span></span> <span data-ttu-id="fef91-2143">Тип, представленный <xref:System.Linq.Expressions.Expression.Type%2A> свойство каждого элемента массива `initializers` должен быть назначен типу аргумента метода add.</span><span class="sxs-lookup"><span data-stu-id="fef91-2143">The type represented by the <xref:System.Linq.Expressions.Expression.Type%2A> property of each element of `initializers` must be assignable to the argument type of the add method.</span></span>  
  
 <span data-ttu-id="fef91-2144"><xref:System.Linq.Expressions.ListInitExpression.Initializers%2A> Свойства возвращаемого <xref:System.Linq.Expressions.ListInitExpression> содержит один элемент типа <xref:System.Linq.Expressions.ElementInit> для каждого элемента `initializers`.</span><span class="sxs-lookup"><span data-stu-id="fef91-2144">The <xref:System.Linq.Expressions.ListInitExpression.Initializers%2A> property of the returned <xref:System.Linq.Expressions.ListInitExpression> contains one element of type <xref:System.Linq.Expressions.ElementInit> for each element of `initializers`.</span></span> <span data-ttu-id="fef91-2145"><xref:System.Linq.Expressions.ElementInit.Arguments%2A> Свойство каждого элемента массива <xref:System.Linq.Expressions.ListInitExpression.Initializers%2A> является одноэлементный коллекции, содержащей соответствующий элемент `initializers`.</span><span class="sxs-lookup"><span data-stu-id="fef91-2145">The <xref:System.Linq.Expressions.ElementInit.Arguments%2A> property of each element of <xref:System.Linq.Expressions.ListInitExpression.Initializers%2A> is a singleton collection that contains the corresponding element of `initializers`.</span></span> <span data-ttu-id="fef91-2146"><xref:System.Linq.Expressions.ElementInit.AddMethod%2A> Свойство каждого элемента массива <xref:System.Linq.Expressions.ListInitExpression.Initializers%2A> равен `addMethod`.</span><span class="sxs-lookup"><span data-stu-id="fef91-2146">The <xref:System.Linq.Expressions.ElementInit.AddMethod%2A> property of each element of <xref:System.Linq.Expressions.ListInitExpression.Initializers%2A> is equal to `addMethod`.</span></span>  
  
 <span data-ttu-id="fef91-2147"><xref:System.Linq.Expressions.Expression.Type%2A> Результирующего <xref:System.Linq.Expressions.ListInitExpression> равен `newExpression`. Тип.</span><span class="sxs-lookup"><span data-stu-id="fef91-2147">The <xref:System.Linq.Expressions.Expression.Type%2A> property of the resulting <xref:System.Linq.Expressions.ListInitExpression> is equal to `newExpression`.Type.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="fef91-2148">Значение параметра <paramref name="newExpression" /> или <paramref name="initializers" /> — <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fef91-2148">
              <paramref name="newExpression" /> or <paramref name="initializers" /> is <see langword="null" />.</span>
          </span>
          <span data-ttu-id="fef91-2149">-или-</span>
          <span class="sxs-lookup">
            <span data-stu-id="fef91-2149">-or-</span>
          </span>
          <span data-ttu-id="fef91-2150">Один или несколько элементов <paramref name="initializers" /> имеют значение <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fef91-2150">One or more elements of <paramref name="initializers" /> are <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="fef91-2151">Тип <paramref name="newExpression" />.Type не реализует <see cref="T:System.Collections.IEnumerable" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fef91-2151">
              <paramref name="newExpression" />.Type does not implement <see cref="T:System.Collections.IEnumerable" />.</span>
          </span>
          <span data-ttu-id="fef91-2152">-или-</span>
          <span class="sxs-lookup">
            <span data-stu-id="fef91-2152">-or-</span>
          </span>
          <span data-ttu-id="fef91-2153">Значение <paramref name="addMethod" /> не равно <see langword="null" /> и не представляет метод экземпляра с именем "Add" (без учета регистра), принимающий точно один аргумент.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fef91-2153">
              <paramref name="addMethod" /> is not <see langword="null" /> and it does not represent an instance method named "Add" (case insensitive) that takes exactly one argument.</span>
          </span>
          <span data-ttu-id="fef91-2154">-или-</span>
          <span class="sxs-lookup">
            <span data-stu-id="fef91-2154">-or-</span>
          </span>
          <span data-ttu-id="fef91-2155">Значение <paramref name="addMethod" /> не равно <see langword="null" />, а тип, представленный свойством <see cref="P:System.Linq.Expressions.Expression.Type" /> одного или нескольких элементов параметра <paramref name="initializers" />, нельзя назначить для типа аргумента метода, представленного <paramref name="addMethod" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fef91-2155">
              <paramref name="addMethod" /> is not <see langword="null" /> and the type represented by the <see cref="P:System.Linq.Expressions.Expression.Type" /> property of one or more elements of <paramref name="initializers" /> is not assignable to the argument type of the method that <paramref name="addMethod" /> represents.</span>
          </span>
        </exception>
        <exception cref="T:System.InvalidOperationException">
          <span data-ttu-id="fef91-2156">
            <paramref name="addMethod" /> не равен <see langword="null" />, и отсутствует метод экземпляра с именем "Add", принимающий один аргумент, совместимый с типом, для параметра <paramref name="newExpression" />.Type или его базового типа.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fef91-2156">
              <paramref name="addMethod" /> is <see langword="null" /> and no instance method named "Add" that takes one type-compatible argument exists on <paramref name="newExpression" />.Type or its base type.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <MemberGroup MemberName="Loop">
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="fef91-2157">Создает буфер <see cref="T:System.Linq.Expressions.LoopExpression" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fef91-2157">Creates a <see cref="T:System.Linq.Expressions.LoopExpression" />.</span>
          </span>
        </summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Loop">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.LoopExpression Loop (System.Linq.Expressions.Expression body);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.LoopExpression Loop(class System.Linq.Expressions.Expression body) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.Loop(System.Linq.Expressions.Expression)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Loop (body As Expression) As LoopExpression" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Linq::Expressions::LoopExpression ^ Loop(System::Linq::Expressions::Expression ^ body);" />
      <MemberSignature Language="F#" Value="static member Loop : System.Linq.Expressions.Expression -&gt; System.Linq.Expressions.LoopExpression" Usage="System.Linq.Expressions.Expression.Loop body" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.LoopExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="body" Type="System.Linq.Expressions.Expression" />
      </Parameters>
      <Docs>
        <param name="body">
          <span data-ttu-id="fef91-2158">Тело цикла.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fef91-2158">The body of the loop.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="fef91-2159">Создает объект <see cref="T:System.Linq.Expressions.LoopExpression" /> с заданным телом.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fef91-2159">Creates a <see cref="T:System.Linq.Expressions.LoopExpression" /> with the given body.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="fef91-2160">Созданный <see cref="T:System.Linq.Expressions.LoopExpression" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fef91-2160">The created <see cref="T:System.Linq.Expressions.LoopExpression" />.</span>
          </span>
        </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Loop">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.LoopExpression Loop (System.Linq.Expressions.Expression body, System.Linq.Expressions.LabelTarget break);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.LoopExpression Loop(class System.Linq.Expressions.Expression body, class System.Linq.Expressions.LabelTarget break) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.Loop(System.Linq.Expressions.Expression,System.Linq.Expressions.LabelTarget)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Loop (body As Expression, break As LabelTarget) As LoopExpression" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Linq::Expressions::LoopExpression ^ Loop(System::Linq::Expressions::Expression ^ body, System::Linq::Expressions::LabelTarget ^ break);" />
      <MemberSignature Language="F#" Value="static member Loop : System.Linq.Expressions.Expression * System.Linq.Expressions.LabelTarget -&gt; System.Linq.Expressions.LoopExpression" Usage="System.Linq.Expressions.Expression.Loop (body, break)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.LoopExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="body" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="break" Type="System.Linq.Expressions.LabelTarget" />
      </Parameters>
      <Docs>
        <param name="body">
          <span data-ttu-id="fef91-2161">Тело цикла.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fef91-2161">The body of the loop.</span>
          </span>
        </param>
        <param name="break">
          <span data-ttu-id="fef91-2162">Цель оператора break, используемая телом цикла.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fef91-2162">The break target used by the loop body.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="fef91-2163">Создает объект <see cref="T:System.Linq.Expressions.LoopExpression" /> с заданным телом и целью оператора break.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fef91-2163">Creates a <see cref="T:System.Linq.Expressions.LoopExpression" /> with the given body and break target.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="fef91-2164">Созданный <see cref="T:System.Linq.Expressions.LoopExpression" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fef91-2164">The created <see cref="T:System.Linq.Expressions.LoopExpression" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 <span data-ttu-id="fef91-2165">Следующий пример демонстрирует создание блока выражения, содержащий <xref:System.Linq.Expressions.LoopExpression> объекта.</span><span class="sxs-lookup"><span data-stu-id="fef91-2165">The following example demonstrates how to create a block expression that contains a <xref:System.Linq.Expressions.LoopExpression> object.</span></span>  
  
 [!code-csharp[System.Linq.Expressions.ExpressionDev10#44](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.linq.expressions.expressiondev10/cs/program.cs#44)]
 [!code-vb[System.Linq.Expressions.ExpressionDev10#44](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.linq.expressions.expressiondev10/vb/module1.vb#44)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Loop">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.LoopExpression Loop (System.Linq.Expressions.Expression body, System.Linq.Expressions.LabelTarget break, System.Linq.Expressions.LabelTarget continue);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.LoopExpression Loop(class System.Linq.Expressions.Expression body, class System.Linq.Expressions.LabelTarget break, class System.Linq.Expressions.LabelTarget continue) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.Loop(System.Linq.Expressions.Expression,System.Linq.Expressions.LabelTarget,System.Linq.Expressions.LabelTarget)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Loop (body As Expression, break As LabelTarget, continue As LabelTarget) As LoopExpression" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Linq::Expressions::LoopExpression ^ Loop(System::Linq::Expressions::Expression ^ body, System::Linq::Expressions::LabelTarget ^ break, System::Linq::Expressions::LabelTarget ^ continue);" />
      <MemberSignature Language="F#" Value="static member Loop : System.Linq.Expressions.Expression * System.Linq.Expressions.LabelTarget * System.Linq.Expressions.LabelTarget -&gt; System.Linq.Expressions.LoopExpression" Usage="System.Linq.Expressions.Expression.Loop (body, break, continue)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.LoopExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="body" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="break" Type="System.Linq.Expressions.LabelTarget" />
        <Parameter Name="continue" Type="System.Linq.Expressions.LabelTarget" />
      </Parameters>
      <Docs>
        <param name="body">
          <span data-ttu-id="fef91-2166">Тело цикла.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fef91-2166">The body of the loop.</span>
          </span>
        </param>
        <param name="break">
          <span data-ttu-id="fef91-2167">Цель оператора break, используемая телом цикла.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fef91-2167">The break target used by the loop body.</span>
          </span>
        </param>
        <param name="continue">
          <span data-ttu-id="fef91-2168">Цель оператора continue, используемая телом цикла.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fef91-2168">The continue target used by the loop body.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="fef91-2169">Создает объект <see cref="T:System.Linq.Expressions.LoopExpression" /> с заданным телом.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fef91-2169">Creates a <see cref="T:System.Linq.Expressions.LoopExpression" /> with the given body.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="fef91-2170">Созданный <see cref="T:System.Linq.Expressions.LoopExpression" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fef91-2170">The created <see cref="T:System.Linq.Expressions.LoopExpression" />.</span>
          </span>
        </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="MakeBinary">
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="fef91-2171">Создает <see cref="T:System.Linq.Expressions.BinaryExpression" /> с помощью вызова соответствующего заводского метода.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fef91-2171">Creates a <see cref="T:System.Linq.Expressions.BinaryExpression" /> by calling the appropriate factory method.</span>
          </span>
        </summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="MakeBinary">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.BinaryExpression MakeBinary (System.Linq.Expressions.ExpressionType binaryType, System.Linq.Expressions.Expression left, System.Linq.Expressions.Expression right);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.BinaryExpression MakeBinary(valuetype System.Linq.Expressions.ExpressionType binaryType, class System.Linq.Expressions.Expression left, class System.Linq.Expressions.Expression right) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.MakeBinary(System.Linq.Expressions.ExpressionType,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function MakeBinary (binaryType As ExpressionType, left As Expression, right As Expression) As BinaryExpression" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Linq::Expressions::BinaryExpression ^ MakeBinary(System::Linq::Expressions::ExpressionType binaryType, System::Linq::Expressions::Expression ^ left, System::Linq::Expressions::Expression ^ right);" />
      <MemberSignature Language="F#" Value="static member MakeBinary : System.Linq.Expressions.ExpressionType * System.Linq.Expressions.Expression * System.Linq.Expressions.Expression -&gt; System.Linq.Expressions.BinaryExpression" Usage="System.Linq.Expressions.Expression.MakeBinary (binaryType, left, right)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.BinaryExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="binaryType" Type="System.Linq.Expressions.ExpressionType" />
        <Parameter Name="left" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="right" Type="System.Linq.Expressions.Expression" />
      </Parameters>
      <Docs>
        <param name="binaryType">
          <span data-ttu-id="fef91-2172">
            <see cref="T:System.Linq.Expressions.ExpressionType" />, указывающий тип бинарной операции.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fef91-2172">The <see cref="T:System.Linq.Expressions.ExpressionType" /> that specifies the type of binary operation.</span>
          </span>
        </param>
        <param name="left">
          <span data-ttu-id="fef91-2173">
            <see cref="T:System.Linq.Expressions.Expression" /> представляет левый операнд.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fef91-2173">An <see cref="T:System.Linq.Expressions.Expression" /> that represents the left operand.</span>
          </span>
        </param>
        <param name="right">
          <span data-ttu-id="fef91-2174">
            <see cref="T:System.Linq.Expressions.Expression" /> представляет правый операнд.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fef91-2174">An <see cref="T:System.Linq.Expressions.Expression" /> that represents the right operand.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="fef91-2175">Создает <see cref="T:System.Linq.Expressions.BinaryExpression" />, присвоенные левый и правый операнды с помощью вызова соответствующего заводского метода.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fef91-2175">Creates a <see cref="T:System.Linq.Expressions.BinaryExpression" />, given the left and right operands, by calling an appropriate factory method.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="fef91-2176">Объект <see cref="T:System.Linq.Expressions.BinaryExpression" />, полученный в результате вызова соответствующего заводского метода.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fef91-2176">The <see cref="T:System.Linq.Expressions.BinaryExpression" /> that results from calling the appropriate factory method.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="fef91-2177">`binaryType` Параметр определяет, какие <xref:System.Linq.Expressions.BinaryExpression> этот метод вызывает метод фабрики.</span><span class="sxs-lookup"><span data-stu-id="fef91-2177">The `binaryType` parameter determines which <xref:System.Linq.Expressions.BinaryExpression> factory method this method calls.</span></span> <span data-ttu-id="fef91-2178">Например если `binaryType` — <xref:System.Linq.Expressions.ExpressionType.Subtract>, этот метод вызывает метод <xref:System.Linq.Expressions.Expression.Subtract%2A>.</span><span class="sxs-lookup"><span data-stu-id="fef91-2178">For example, if `binaryType` is <xref:System.Linq.Expressions.ExpressionType.Subtract>, this method invokes <xref:System.Linq.Expressions.Expression.Subtract%2A>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="fef91-2179">Следующий пример демонстрирует, как использовать <xref:System.Linq.Expressions.Expression.MakeBinary%28System.Linq.Expressions.ExpressionType%2CSystem.Linq.Expressions.Expression%2CSystem.Linq.Expressions.Expression%29> метод для создания <xref:System.Linq.Expressions.BinaryExpression> , представляющий вычитания одного числа из другого.</span><span class="sxs-lookup"><span data-stu-id="fef91-2179">The following example demonstrates how to use the <xref:System.Linq.Expressions.Expression.MakeBinary%28System.Linq.Expressions.ExpressionType%2CSystem.Linq.Expressions.Expression%2CSystem.Linq.Expressions.Expression%29> method to create a <xref:System.Linq.Expressions.BinaryExpression> that represents the subtraction of one number from another.</span></span>  
  
 [!code-csharp[System.Linq.Expressions.Expression#8](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Linq.Expressions.Expression/CS/Expression.cs#8)]
 [!code-vb[System.Linq.Expressions.Expression#8](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Linq.Expressions.Expression/VB/Expression.vb#8)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="fef91-2180">Параметр <paramref name="binaryType" /> не соответствует двоичному узлу выражения.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fef91-2180">
              <paramref name="binaryType" /> does not correspond to a binary expression node.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="fef91-2181">Значение параметра <paramref name="left" /> или <paramref name="right" /> — <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fef91-2181">
              <paramref name="left" /> or <paramref name="right" /> is <see langword="null" />.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="MakeBinary">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.BinaryExpression MakeBinary (System.Linq.Expressions.ExpressionType binaryType, System.Linq.Expressions.Expression left, System.Linq.Expressions.Expression right, bool liftToNull, System.Reflection.MethodInfo method);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.BinaryExpression MakeBinary(valuetype System.Linq.Expressions.ExpressionType binaryType, class System.Linq.Expressions.Expression left, class System.Linq.Expressions.Expression right, bool liftToNull, class System.Reflection.MethodInfo method) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.MakeBinary(System.Linq.Expressions.ExpressionType,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Boolean,System.Reflection.MethodInfo)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function MakeBinary (binaryType As ExpressionType, left As Expression, right As Expression, liftToNull As Boolean, method As MethodInfo) As BinaryExpression" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Linq::Expressions::BinaryExpression ^ MakeBinary(System::Linq::Expressions::ExpressionType binaryType, System::Linq::Expressions::Expression ^ left, System::Linq::Expressions::Expression ^ right, bool liftToNull, System::Reflection::MethodInfo ^ method);" />
      <MemberSignature Language="F#" Value="static member MakeBinary : System.Linq.Expressions.ExpressionType * System.Linq.Expressions.Expression * System.Linq.Expressions.Expression * bool * System.Reflection.MethodInfo -&gt; System.Linq.Expressions.BinaryExpression" Usage="System.Linq.Expressions.Expression.MakeBinary (binaryType, left, right, liftToNull, method)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.BinaryExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="binaryType" Type="System.Linq.Expressions.ExpressionType" />
        <Parameter Name="left" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="right" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="liftToNull" Type="System.Boolean" />
        <Parameter Name="method" Type="System.Reflection.MethodInfo" />
      </Parameters>
      <Docs>
        <param name="binaryType">
          <span data-ttu-id="fef91-2182">
            <see cref="T:System.Linq.Expressions.ExpressionType" />, указывающий тип бинарной операции.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fef91-2182">The <see cref="T:System.Linq.Expressions.ExpressionType" /> that specifies the type of binary operation.</span>
          </span>
        </param>
        <param name="left">
          <span data-ttu-id="fef91-2183">
            <see cref="T:System.Linq.Expressions.Expression" /> представляет левый операнд.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fef91-2183">An <see cref="T:System.Linq.Expressions.Expression" /> that represents the left operand.</span>
          </span>
        </param>
        <param name="right">
          <span data-ttu-id="fef91-2184">
            <see cref="T:System.Linq.Expressions.Expression" /> представляет правый операнд.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fef91-2184">An <see cref="T:System.Linq.Expressions.Expression" /> that represents the right operand.</span>
          </span>
        </param>
        <param name="liftToNull">
          <span data-ttu-id="fef91-2185">
            <see langword="true" />, чтобы задать для <see cref="P:System.Linq.Expressions.BinaryExpression.IsLiftedToNull" />значение <see langword="true" />; <see langword="false" />, чтобы задать для <see cref="P:System.Linq.Expressions.BinaryExpression.IsLiftedToNull" /> значение <see langword="false" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fef91-2185">
              <see langword="true" /> to set <see cref="P:System.Linq.Expressions.BinaryExpression.IsLiftedToNull" /> to <see langword="true" />; <see langword="false" /> to set <see cref="P:System.Linq.Expressions.BinaryExpression.IsLiftedToNull" /> to <see langword="false" />.</span>
          </span>
        </param>
        <param name="method">
          <span data-ttu-id="fef91-2186">
            <see cref="T:System.Reflection.MethodInfo" />, указывающий метод реализации.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fef91-2186">A <see cref="T:System.Reflection.MethodInfo" /> that specifies the implementing method.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="fef91-2187">Создает <see cref="T:System.Linq.Expressions.BinaryExpression" />, присвоенный левый операнд, правый операнд и метод реализации с помощью вызова соответствующего заводского метода.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fef91-2187">Creates a <see cref="T:System.Linq.Expressions.BinaryExpression" />, given the left operand, right operand and implementing method, by calling the appropriate factory method.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="fef91-2188">Объект <see cref="T:System.Linq.Expressions.BinaryExpression" />, полученный в результате вызова соответствующего заводского метода.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fef91-2188">The <see cref="T:System.Linq.Expressions.BinaryExpression" /> that results from calling the appropriate factory method.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="fef91-2189">`binaryType` Параметр определяет, какие <xref:System.Linq.Expressions.BinaryExpression> фабричный метод будет вызывать этот метод.</span><span class="sxs-lookup"><span data-stu-id="fef91-2189">The `binaryType` parameter determines which <xref:System.Linq.Expressions.BinaryExpression> factory method this method will call.</span></span> <span data-ttu-id="fef91-2190">Например если `binaryType` — <xref:System.Linq.Expressions.ExpressionType.Subtract>, этот метод вызывает метод <xref:System.Linq.Expressions.Expression.Subtract%2A>.</span><span class="sxs-lookup"><span data-stu-id="fef91-2190">For example, if `binaryType` is <xref:System.Linq.Expressions.ExpressionType.Subtract>, this method invokes <xref:System.Linq.Expressions.Expression.Subtract%2A>.</span></span> <span data-ttu-id="fef91-2191">`liftToNull` И `method` параметры игнорируются, если соответствующий параметр не содержит соответствующего метода фабрики.</span><span class="sxs-lookup"><span data-stu-id="fef91-2191">The `liftToNull` and `method` parameters are ignored if the appropriate factory method does not have a corresponding parameter.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="fef91-2192">Параметр <paramref name="binaryType" /> не соответствует двоичному узлу выражения.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fef91-2192">
              <paramref name="binaryType" /> does not correspond to a binary expression node.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="fef91-2193">Значение параметра <paramref name="left" /> или <paramref name="right" /> — <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fef91-2193">
              <paramref name="left" /> or <paramref name="right" /> is <see langword="null" />.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="MakeBinary">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.BinaryExpression MakeBinary (System.Linq.Expressions.ExpressionType binaryType, System.Linq.Expressions.Expression left, System.Linq.Expressions.Expression right, bool liftToNull, System.Reflection.MethodInfo method, System.Linq.Expressions.LambdaExpression conversion);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.BinaryExpression MakeBinary(valuetype System.Linq.Expressions.ExpressionType binaryType, class System.Linq.Expressions.Expression left, class System.Linq.Expressions.Expression right, bool liftToNull, class System.Reflection.MethodInfo method, class System.Linq.Expressions.LambdaExpression conversion) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.MakeBinary(System.Linq.Expressions.ExpressionType,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Boolean,System.Reflection.MethodInfo,System.Linq.Expressions.LambdaExpression)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function MakeBinary (binaryType As ExpressionType, left As Expression, right As Expression, liftToNull As Boolean, method As MethodInfo, conversion As LambdaExpression) As BinaryExpression" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Linq::Expressions::BinaryExpression ^ MakeBinary(System::Linq::Expressions::ExpressionType binaryType, System::Linq::Expressions::Expression ^ left, System::Linq::Expressions::Expression ^ right, bool liftToNull, System::Reflection::MethodInfo ^ method, System::Linq::Expressions::LambdaExpression ^ conversion);" />
      <MemberSignature Language="F#" Value="static member MakeBinary : System.Linq.Expressions.ExpressionType * System.Linq.Expressions.Expression * System.Linq.Expressions.Expression * bool * System.Reflection.MethodInfo * System.Linq.Expressions.LambdaExpression -&gt; System.Linq.Expressions.BinaryExpression" Usage="System.Linq.Expressions.Expression.MakeBinary (binaryType, left, right, liftToNull, method, conversion)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.BinaryExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="binaryType" Type="System.Linq.Expressions.ExpressionType" />
        <Parameter Name="left" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="right" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="liftToNull" Type="System.Boolean" />
        <Parameter Name="method" Type="System.Reflection.MethodInfo" />
        <Parameter Name="conversion" Type="System.Linq.Expressions.LambdaExpression" />
      </Parameters>
      <Docs>
        <param name="binaryType">
          <span data-ttu-id="fef91-2194">
            <see cref="T:System.Linq.Expressions.ExpressionType" />, указывающий тип бинарной операции.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fef91-2194">The <see cref="T:System.Linq.Expressions.ExpressionType" /> that specifies the type of binary operation.</span>
          </span>
        </param>
        <param name="left">
          <span data-ttu-id="fef91-2195">
            <see cref="T:System.Linq.Expressions.Expression" /> представляет левый операнд.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fef91-2195">An <see cref="T:System.Linq.Expressions.Expression" /> that represents the left operand.</span>
          </span>
        </param>
        <param name="right">
          <span data-ttu-id="fef91-2196">
            <see cref="T:System.Linq.Expressions.Expression" /> представляет правый операнд.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fef91-2196">An <see cref="T:System.Linq.Expressions.Expression" /> that represents the right operand.</span>
          </span>
        </param>
        <param name="liftToNull">
          <span data-ttu-id="fef91-2197">
            <see langword="true" />, чтобы задать для <see cref="P:System.Linq.Expressions.BinaryExpression.IsLiftedToNull" />значение <see langword="true" />; <see langword="false" />, чтобы задать для <see cref="P:System.Linq.Expressions.BinaryExpression.IsLiftedToNull" /> значение <see langword="false" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fef91-2197">
              <see langword="true" /> to set <see cref="P:System.Linq.Expressions.BinaryExpression.IsLiftedToNull" /> to <see langword="true" />; <see langword="false" /> to set <see cref="P:System.Linq.Expressions.BinaryExpression.IsLiftedToNull" /> to <see langword="false" />.</span>
          </span>
        </param>
        <param name="method">
          <span data-ttu-id="fef91-2198">
            <see cref="T:System.Reflection.MethodInfo" />, указывающий метод реализации.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fef91-2198">A <see cref="T:System.Reflection.MethodInfo" /> that specifies the implementing method.</span>
          </span>
        </param>
        <param name="conversion">
          <span data-ttu-id="fef91-2199">Объект <see cref="T:System.Linq.Expressions.LambdaExpression" />, представляющий тип функции преобразования.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fef91-2199">A <see cref="T:System.Linq.Expressions.LambdaExpression" /> that represents a type conversion function.</span>
          </span>
          <span data-ttu-id="fef91-2200">Этот параметр используется лишь в том случае, если <c>binaryType</c> имеет значение <see cref="F:System.Linq.Expressions.ExpressionType.Coalesce" /> или составного присваивания.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fef91-2200">This parameter is used only if <c>binaryType</c> is <see cref="F:System.Linq.Expressions.ExpressionType.Coalesce" /> or compound assignment..</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="fef91-2201">Создает <see cref="T:System.Linq.Expressions.BinaryExpression" />, присвоенный левый операнд, правый операнд, метод реализации и функция преобразования метода с помощью вызова соответствующего заводского метода.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fef91-2201">Creates a <see cref="T:System.Linq.Expressions.BinaryExpression" />, given the left operand, right operand, implementing method and type conversion function, by calling the appropriate factory method.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="fef91-2202">Объект <see cref="T:System.Linq.Expressions.BinaryExpression" />, полученный в результате вызова соответствующего заводского метода.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fef91-2202">The <see cref="T:System.Linq.Expressions.BinaryExpression" /> that results from calling the appropriate factory method.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="fef91-2203">`binaryType` Параметр определяет, какие <xref:System.Linq.Expressions.BinaryExpression> фабричный метод будет вызывать этот метод.</span><span class="sxs-lookup"><span data-stu-id="fef91-2203">The `binaryType` parameter determines which <xref:System.Linq.Expressions.BinaryExpression> factory method this method will call.</span></span> <span data-ttu-id="fef91-2204">Например если `binaryType` — <xref:System.Linq.Expressions.ExpressionType.Subtract>, этот метод вызывает метод <xref:System.Linq.Expressions.Expression.Subtract%2A>.</span><span class="sxs-lookup"><span data-stu-id="fef91-2204">For example, if `binaryType` is <xref:System.Linq.Expressions.ExpressionType.Subtract>, this method invokes <xref:System.Linq.Expressions.Expression.Subtract%2A>.</span></span> <span data-ttu-id="fef91-2205">`liftToNull`, `method` И `conversion` параметры игнорируются, если соответствующий параметр не содержит соответствующего метода фабрики.</span><span class="sxs-lookup"><span data-stu-id="fef91-2205">The `liftToNull`, `method` and `conversion` parameters are ignored if the appropriate factory method does not have a corresponding parameter.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="fef91-2206">Параметр <paramref name="binaryType" /> не соответствует двоичному узлу выражения.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fef91-2206">
              <paramref name="binaryType" /> does not correspond to a binary expression node.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="fef91-2207">Значение параметра <paramref name="left" /> или <paramref name="right" /> — <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fef91-2207">
              <paramref name="left" /> or <paramref name="right" /> is <see langword="null" />.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="MakeCatchBlock">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.CatchBlock MakeCatchBlock (Type type, System.Linq.Expressions.ParameterExpression variable, System.Linq.Expressions.Expression body, System.Linq.Expressions.Expression filter);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.CatchBlock MakeCatchBlock(class System.Type type, class System.Linq.Expressions.ParameterExpression variable, class System.Linq.Expressions.Expression body, class System.Linq.Expressions.Expression filter) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.MakeCatchBlock(System.Type,System.Linq.Expressions.ParameterExpression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Linq::Expressions::CatchBlock ^ MakeCatchBlock(Type ^ type, System::Linq::Expressions::ParameterExpression ^ variable, System::Linq::Expressions::Expression ^ body, System::Linq::Expressions::Expression ^ filter);" />
      <MemberSignature Language="F#" Value="static member MakeCatchBlock : Type * System.Linq.Expressions.ParameterExpression * System.Linq.Expressions.Expression * System.Linq.Expressions.Expression -&gt; System.Linq.Expressions.CatchBlock" Usage="System.Linq.Expressions.Expression.MakeCatchBlock (type, variable, body, filter)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.CatchBlock</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="type" Type="System.Type" />
        <Parameter Name="variable" Type="System.Linq.Expressions.ParameterExpression" />
        <Parameter Name="body" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="filter" Type="System.Linq.Expressions.Expression" />
      </Parameters>
      <Docs>
        <param name="type">
          <span data-ttu-id="fef91-2208">Свойство <see cref="P:System.Linq.Expressions.Expression.Type" /> объекта <see cref="T:System.Exception" />, который будет обрабатываться этим объектом <see cref="T:System.Linq.Expressions.CatchBlock" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fef91-2208">The <see cref="P:System.Linq.Expressions.Expression.Type" /> of <see cref="T:System.Exception" /> this <see cref="T:System.Linq.Expressions.CatchBlock" /> will handle.</span>
          </span>
        </param>
        <param name="variable">
          <span data-ttu-id="fef91-2209">Объект <see cref="T:System.Linq.Expressions.ParameterExpression" />, представляющий ссылку на объект <see cref="T:System.Exception" />, перехваченный данным обработчиком.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fef91-2209">A <see cref="T:System.Linq.Expressions.ParameterExpression" /> representing a reference to the <see cref="T:System.Exception" /> object caught by this handler.</span>
          </span>
        </param>
        <param name="body">
          <span data-ttu-id="fef91-2210">Тело оператора catch.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fef91-2210">The body of the catch statement.</span>
          </span>
        </param>
        <param name="filter">
          <span data-ttu-id="fef91-2211">Тело фильтра <see cref="T:System.Exception" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fef91-2211">The body of the <see cref="T:System.Exception" /> filter.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="fef91-2212">Создает объект <see cref="T:System.Linq.Expressions.CatchBlock" />, представляющий оператор catch с указанными элементами.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fef91-2212">Creates a <see cref="T:System.Linq.Expressions.CatchBlock" /> representing a catch statement with the specified elements.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="fef91-2213">Созданный <see cref="T:System.Linq.Expressions.CatchBlock" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fef91-2213">The created <see cref="T:System.Linq.Expressions.CatchBlock" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="fef91-2214">`type` должен иметь значение null и соответствует типу `variable` (если он указан).</span><span class="sxs-lookup"><span data-stu-id="fef91-2214">`type` must be non-null and match the type of `variable` (if it is supplied).</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="MakeDynamic">
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="fef91-2215">Создает объект <see cref="T:System.Linq.Expressions.DynamicExpression" />, представляющий динамическую операцию.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fef91-2215">Creates a <see cref="T:System.Linq.Expressions.DynamicExpression" /> that represents a dynamic operation.</span>
          </span>
        </summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="MakeDynamic">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.DynamicExpression MakeDynamic (Type delegateType, System.Runtime.CompilerServices.CallSiteBinder binder, System.Collections.Generic.IEnumerable&lt;System.Linq.Expressions.Expression&gt; arguments);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.DynamicExpression MakeDynamic(class System.Type delegateType, class System.Runtime.CompilerServices.CallSiteBinder binder, class System.Collections.Generic.IEnumerable`1&lt;class System.Linq.Expressions.Expression&gt; arguments) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.MakeDynamic(System.Type,System.Runtime.CompilerServices.CallSiteBinder,System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression})" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function MakeDynamic (delegateType As Type, binder As CallSiteBinder, arguments As IEnumerable(Of Expression)) As DynamicExpression" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Linq::Expressions::DynamicExpression ^ MakeDynamic(Type ^ delegateType, System::Runtime::CompilerServices::CallSiteBinder ^ binder, System::Collections::Generic::IEnumerable&lt;System::Linq::Expressions::Expression ^&gt; ^ arguments);" />
      <MemberSignature Language="F#" Value="static member MakeDynamic : Type * System.Runtime.CompilerServices.CallSiteBinder * seq&lt;System.Linq.Expressions.Expression&gt; -&gt; System.Linq.Expressions.DynamicExpression" Usage="System.Linq.Expressions.Expression.MakeDynamic (delegateType, binder, arguments)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.DynamicExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="delegateType" Type="System.Type" />
        <Parameter Name="binder" Type="System.Runtime.CompilerServices.CallSiteBinder" />
        <Parameter Name="arguments" Type="System.Collections.Generic.IEnumerable&lt;System.Linq.Expressions.Expression&gt;" />
      </Parameters>
      <Docs>
        <param name="delegateType">
          <span data-ttu-id="fef91-2216">Тип делегата, используемого <see cref="T:System.Runtime.CompilerServices.CallSite" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fef91-2216">The type of the delegate used by the <see cref="T:System.Runtime.CompilerServices.CallSite" />.</span>
          </span>
        </param>
        <param name="binder">
          <span data-ttu-id="fef91-2217">Связыватель времени выполнения для динамической операции.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fef91-2217">The runtime binder for the dynamic operation.</span>
          </span>
        </param>
        <param name="arguments">
          <span data-ttu-id="fef91-2218">Аргументы динамической операции.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fef91-2218">The arguments to the dynamic operation.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="fef91-2219">Создает выражение <see cref="T:System.Linq.Expressions.DynamicExpression" />, которое представляет динамическую операцию, привязанную с использованием указанного объекта <see cref="T:System.Runtime.CompilerServices.CallSiteBinder" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fef91-2219">Creates a <see cref="T:System.Linq.Expressions.DynamicExpression" /> that represents a dynamic operation bound by the provided <see cref="T:System.Runtime.CompilerServices.CallSiteBinder" />.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="fef91-2220">Объект <see cref="T:System.Linq.Expressions.DynamicExpression" /> со свойством <see cref="P:System.Linq.Expressions.Expression.NodeType" />, равным <see cref="F:System.Linq.Expressions.ExpressionType.Dynamic" />, и свойствами <see cref="P:System.Linq.Expressions.DynamicExpression.DelegateType" />, <see cref="P:System.Linq.Expressions.DynamicExpression.Binder" /> и <see cref="P:System.Linq.Expressions.DynamicExpression.Arguments" />, для которых заданы указанные значения.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fef91-2220">A <see cref="T:System.Linq.Expressions.DynamicExpression" /> that has <see cref="P:System.Linq.Expressions.Expression.NodeType" /> equal to <see cref="F:System.Linq.Expressions.ExpressionType.Dynamic" /> and has the <see cref="P:System.Linq.Expressions.DynamicExpression.DelegateType" />, <see cref="P:System.Linq.Expressions.DynamicExpression.Binder" />, and <see cref="P:System.Linq.Expressions.DynamicExpression.Arguments" /> set to the specified values.</span>
          </span>
        </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="MakeDynamic">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.DynamicExpression MakeDynamic (Type delegateType, System.Runtime.CompilerServices.CallSiteBinder binder, System.Linq.Expressions.Expression arg0);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.DynamicExpression MakeDynamic(class System.Type delegateType, class System.Runtime.CompilerServices.CallSiteBinder binder, class System.Linq.Expressions.Expression arg0) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.MakeDynamic(System.Type,System.Runtime.CompilerServices.CallSiteBinder,System.Linq.Expressions.Expression)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function MakeDynamic (delegateType As Type, binder As CallSiteBinder, arg0 As Expression) As DynamicExpression" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Linq::Expressions::DynamicExpression ^ MakeDynamic(Type ^ delegateType, System::Runtime::CompilerServices::CallSiteBinder ^ binder, System::Linq::Expressions::Expression ^ arg0);" />
      <MemberSignature Language="F#" Value="static member MakeDynamic : Type * System.Runtime.CompilerServices.CallSiteBinder * System.Linq.Expressions.Expression -&gt; System.Linq.Expressions.DynamicExpression" Usage="System.Linq.Expressions.Expression.MakeDynamic (delegateType, binder, arg0)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.DynamicExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="delegateType" Type="System.Type" />
        <Parameter Name="binder" Type="System.Runtime.CompilerServices.CallSiteBinder" />
        <Parameter Name="arg0" Type="System.Linq.Expressions.Expression" />
      </Parameters>
      <Docs>
        <param name="delegateType">
          <span data-ttu-id="fef91-2221">Тип делегата, используемого <see cref="T:System.Runtime.CompilerServices.CallSite" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fef91-2221">The type of the delegate used by the <see cref="T:System.Runtime.CompilerServices.CallSite" />.</span>
          </span>
        </param>
        <param name="binder">
          <span data-ttu-id="fef91-2222">Связыватель времени выполнения для динамической операции.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fef91-2222">The runtime binder for the dynamic operation.</span>
          </span>
        </param>
        <param name="arg0">
          <span data-ttu-id="fef91-2223">Аргумент динамической операции.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fef91-2223">The argument to the dynamic operation.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="fef91-2224">Создает объект <see cref="T:System.Linq.Expressions.DynamicExpression" />, представляющий динамическую операцию, привязанную с использованием указанного объекта <see cref="T:System.Runtime.CompilerServices.CallSiteBinder" /> и одним аргументом.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fef91-2224">Creates a <see cref="T:System.Linq.Expressions.DynamicExpression" /> that represents a dynamic operation bound by the provided <see cref="T:System.Runtime.CompilerServices.CallSiteBinder" /> and one argument.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="fef91-2225">Объект <see cref="T:System.Linq.Expressions.DynamicExpression" /> со свойством <see cref="P:System.Linq.Expressions.Expression.NodeType" />, равным <see cref="F:System.Linq.Expressions.ExpressionType.Dynamic" />, и свойствами <see cref="P:System.Linq.Expressions.DynamicExpression.DelegateType" />, <see cref="P:System.Linq.Expressions.DynamicExpression.Binder" /> и <see cref="P:System.Linq.Expressions.DynamicExpression.Arguments" />, для которых заданы указанные значения.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fef91-2225">A <see cref="T:System.Linq.Expressions.DynamicExpression" /> that has <see cref="P:System.Linq.Expressions.Expression.NodeType" /> equal to <see cref="F:System.Linq.Expressions.ExpressionType.Dynamic" /> and has the <see cref="P:System.Linq.Expressions.DynamicExpression.DelegateType" />, <see cref="P:System.Linq.Expressions.DynamicExpression.Binder" />, and <see cref="P:System.Linq.Expressions.DynamicExpression.Arguments" /> set to the specified values.</span>
          </span>
        </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="MakeDynamic">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.DynamicExpression MakeDynamic (Type delegateType, System.Runtime.CompilerServices.CallSiteBinder binder, params System.Linq.Expressions.Expression[] arguments);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.DynamicExpression MakeDynamic(class System.Type delegateType, class System.Runtime.CompilerServices.CallSiteBinder binder, class System.Linq.Expressions.Expression[] arguments) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.MakeDynamic(System.Type,System.Runtime.CompilerServices.CallSiteBinder,System.Linq.Expressions.Expression[])" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function MakeDynamic (delegateType As Type, binder As CallSiteBinder, ParamArray arguments As Expression()) As DynamicExpression" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Linq::Expressions::DynamicExpression ^ MakeDynamic(Type ^ delegateType, System::Runtime::CompilerServices::CallSiteBinder ^ binder, ... cli::array &lt;System::Linq::Expressions::Expression ^&gt; ^ arguments);" />
      <MemberSignature Language="F#" Value="static member MakeDynamic : Type * System.Runtime.CompilerServices.CallSiteBinder * System.Linq.Expressions.Expression[] -&gt; System.Linq.Expressions.DynamicExpression" Usage="System.Linq.Expressions.Expression.MakeDynamic (delegateType, binder, arguments)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.DynamicExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="delegateType" Type="System.Type" />
        <Parameter Name="binder" Type="System.Runtime.CompilerServices.CallSiteBinder" />
        <Parameter Name="arguments" Type="System.Linq.Expressions.Expression[]">
          <Attributes>
            <Attribute>
              <AttributeName>System.ParamArray</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="delegateType">
          <span data-ttu-id="fef91-2226">Тип делегата, используемого <see cref="T:System.Runtime.CompilerServices.CallSite" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fef91-2226">The type of the delegate used by the <see cref="T:System.Runtime.CompilerServices.CallSite" />.</span>
          </span>
        </param>
        <param name="binder">
          <span data-ttu-id="fef91-2227">Связыватель времени выполнения для динамической операции.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fef91-2227">The runtime binder for the dynamic operation.</span>
          </span>
        </param>
        <param name="arguments">
          <span data-ttu-id="fef91-2228">Аргументы динамической операции.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fef91-2228">The arguments to the dynamic operation.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="fef91-2229">Создает выражение <see cref="T:System.Linq.Expressions.DynamicExpression" />, которое представляет динамическую операцию, привязанную с использованием указанного объекта <see cref="T:System.Runtime.CompilerServices.CallSiteBinder" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fef91-2229">Creates a <see cref="T:System.Linq.Expressions.DynamicExpression" /> that represents a dynamic operation bound by the provided <see cref="T:System.Runtime.CompilerServices.CallSiteBinder" />.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="fef91-2230">Объект <see cref="T:System.Linq.Expressions.DynamicExpression" /> со свойством <see cref="P:System.Linq.Expressions.Expression.NodeType" />, равным <see cref="F:System.Linq.Expressions.ExpressionType.Dynamic" />, и свойствами <see cref="P:System.Linq.Expressions.DynamicExpression.DelegateType" />, <see cref="P:System.Linq.Expressions.DynamicExpression.Binder" /> и <see cref="P:System.Linq.Expressions.DynamicExpression.Arguments" />, для которых заданы указанные значения.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fef91-2230">A <see cref="T:System.Linq.Expressions.DynamicExpression" /> that has <see cref="P:System.Linq.Expressions.Expression.NodeType" /> equal to <see cref="F:System.Linq.Expressions.ExpressionType.Dynamic" /> and has the <see cref="P:System.Linq.Expressions.DynamicExpression.DelegateType" />, <see cref="P:System.Linq.Expressions.DynamicExpression.Binder" />, and <see cref="P:System.Linq.Expressions.DynamicExpression.Arguments" /> set to the specified values.</span>
          </span>
        </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="MakeDynamic">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.DynamicExpression MakeDynamic (Type delegateType, System.Runtime.CompilerServices.CallSiteBinder binder, System.Linq.Expressions.Expression arg0, System.Linq.Expressions.Expression arg1);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.DynamicExpression MakeDynamic(class System.Type delegateType, class System.Runtime.CompilerServices.CallSiteBinder binder, class System.Linq.Expressions.Expression arg0, class System.Linq.Expressions.Expression arg1) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.MakeDynamic(System.Type,System.Runtime.CompilerServices.CallSiteBinder,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function MakeDynamic (delegateType As Type, binder As CallSiteBinder, arg0 As Expression, arg1 As Expression) As DynamicExpression" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Linq::Expressions::DynamicExpression ^ MakeDynamic(Type ^ delegateType, System::Runtime::CompilerServices::CallSiteBinder ^ binder, System::Linq::Expressions::Expression ^ arg0, System::Linq::Expressions::Expression ^ arg1);" />
      <MemberSignature Language="F#" Value="static member MakeDynamic : Type * System.Runtime.CompilerServices.CallSiteBinder * System.Linq.Expressions.Expression * System.Linq.Expressions.Expression -&gt; System.Linq.Expressions.DynamicExpression" Usage="System.Linq.Expressions.Expression.MakeDynamic (delegateType, binder, arg0, arg1)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.DynamicExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="delegateType" Type="System.Type" />
        <Parameter Name="binder" Type="System.Runtime.CompilerServices.CallSiteBinder" />
        <Parameter Name="arg0" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="arg1" Type="System.Linq.Expressions.Expression" />
      </Parameters>
      <Docs>
        <param name="delegateType">
          <span data-ttu-id="fef91-2231">Тип делегата, используемого <see cref="T:System.Runtime.CompilerServices.CallSite" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fef91-2231">The type of the delegate used by the <see cref="T:System.Runtime.CompilerServices.CallSite" />.</span>
          </span>
        </param>
        <param name="binder">
          <span data-ttu-id="fef91-2232">Связыватель времени выполнения для динамической операции.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fef91-2232">The runtime binder for the dynamic operation.</span>
          </span>
        </param>
        <param name="arg0">
          <span data-ttu-id="fef91-2233">Первый аргумент динамической операции.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fef91-2233">The first argument to the dynamic operation.</span>
          </span>
        </param>
        <param name="arg1">
          <span data-ttu-id="fef91-2234">Второй аргумент динамической операции.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fef91-2234">The second argument to the dynamic operation.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="fef91-2235">Создает выражение <see cref="T:System.Linq.Expressions.DynamicExpression" />, которое представляет динамическую операцию, привязанную с использованием указанного объекта <see cref="T:System.Runtime.CompilerServices.CallSiteBinder" /> и двумя аргументами.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fef91-2235">Creates a <see cref="T:System.Linq.Expressions.DynamicExpression" /> that represents a dynamic operation bound by the provided <see cref="T:System.Runtime.CompilerServices.CallSiteBinder" /> and two arguments.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="fef91-2236">Объект <see cref="T:System.Linq.Expressions.DynamicExpression" /> со свойством <see cref="P:System.Linq.Expressions.Expression.NodeType" />, равным <see cref="F:System.Linq.Expressions.ExpressionType.Dynamic" />, и свойствами <see cref="P:System.Linq.Expressions.DynamicExpression.DelegateType" />, <see cref="P:System.Linq.Expressions.DynamicExpression.Binder" /> и <see cref="P:System.Linq.Expressions.DynamicExpression.Arguments" />, для которых заданы указанные значения.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fef91-2236">A <see cref="T:System.Linq.Expressions.DynamicExpression" /> that has <see cref="P:System.Linq.Expressions.Expression.NodeType" /> equal to <see cref="F:System.Linq.Expressions.ExpressionType.Dynamic" /> and has the <see cref="P:System.Linq.Expressions.DynamicExpression.DelegateType" />, <see cref="P:System.Linq.Expressions.DynamicExpression.Binder" />, and <see cref="P:System.Linq.Expressions.DynamicExpression.Arguments" /> set to the specified values.</span>
          </span>
        </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="MakeDynamic">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.DynamicExpression MakeDynamic (Type delegateType, System.Runtime.CompilerServices.CallSiteBinder binder, System.Linq.Expressions.Expression arg0, System.Linq.Expressions.Expression arg1, System.Linq.Expressions.Expression arg2);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.DynamicExpression MakeDynamic(class System.Type delegateType, class System.Runtime.CompilerServices.CallSiteBinder binder, class System.Linq.Expressions.Expression arg0, class System.Linq.Expressions.Expression arg1, class System.Linq.Expressions.Expression arg2) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.MakeDynamic(System.Type,System.Runtime.CompilerServices.CallSiteBinder,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function MakeDynamic (delegateType As Type, binder As CallSiteBinder, arg0 As Expression, arg1 As Expression, arg2 As Expression) As DynamicExpression" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Linq::Expressions::DynamicExpression ^ MakeDynamic(Type ^ delegateType, System::Runtime::CompilerServices::CallSiteBinder ^ binder, System::Linq::Expressions::Expression ^ arg0, System::Linq::Expressions::Expression ^ arg1, System::Linq::Expressions::Expression ^ arg2);" />
      <MemberSignature Language="F#" Value="static member MakeDynamic : Type * System.Runtime.CompilerServices.CallSiteBinder * System.Linq.Expressions.Expression * System.Linq.Expressions.Expression * System.Linq.Expressions.Expression -&gt; System.Linq.Expressions.DynamicExpression" Usage="System.Linq.Expressions.Expression.MakeDynamic (delegateType, binder, arg0, arg1, arg2)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.DynamicExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="delegateType" Type="System.Type" />
        <Parameter Name="binder" Type="System.Runtime.CompilerServices.CallSiteBinder" />
        <Parameter Name="arg0" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="arg1" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="arg2" Type="System.Linq.Expressions.Expression" />
      </Parameters>
      <Docs>
        <param name="delegateType">
          <span data-ttu-id="fef91-2237">Тип делегата, используемого <see cref="T:System.Runtime.CompilerServices.CallSite" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fef91-2237">The type of the delegate used by the <see cref="T:System.Runtime.CompilerServices.CallSite" />.</span>
          </span>
        </param>
        <param name="binder">
          <span data-ttu-id="fef91-2238">Связыватель времени выполнения для динамической операции.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fef91-2238">The runtime binder for the dynamic operation.</span>
          </span>
        </param>
        <param name="arg0">
          <span data-ttu-id="fef91-2239">Первый аргумент динамической операции.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fef91-2239">The first argument to the dynamic operation.</span>
          </span>
        </param>
        <param name="arg1">
          <span data-ttu-id="fef91-2240">Второй аргумент динамической операции.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fef91-2240">The second argument to the dynamic operation.</span>
          </span>
        </param>
        <param name="arg2">
          <span data-ttu-id="fef91-2241">Третий аргумент динамической операции.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fef91-2241">The third argument to the dynamic operation.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="fef91-2242">Создает выражение <see cref="T:System.Linq.Expressions.DynamicExpression" />, которое представляет динамическую операцию, привязанную с использованием указанного объекта <see cref="T:System.Runtime.CompilerServices.CallSiteBinder" /> и тремя аргументами.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fef91-2242">Creates a <see cref="T:System.Linq.Expressions.DynamicExpression" /> that represents a dynamic operation bound by the provided <see cref="T:System.Runtime.CompilerServices.CallSiteBinder" /> and three arguments.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="fef91-2243">Объект <see cref="T:System.Linq.Expressions.DynamicExpression" /> со свойством <see cref="P:System.Linq.Expressions.Expression.NodeType" />, равным <see cref="F:System.Linq.Expressions.ExpressionType.Dynamic" />, и свойствами <see cref="P:System.Linq.Expressions.DynamicExpression.DelegateType" />, <see cref="P:System.Linq.Expressions.DynamicExpression.Binder" /> и <see cref="P:System.Linq.Expressions.DynamicExpression.Arguments" />, для которых заданы указанные значения.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fef91-2243">A <see cref="T:System.Linq.Expressions.DynamicExpression" /> that has <see cref="P:System.Linq.Expressions.Expression.NodeType" /> equal to <see cref="F:System.Linq.Expressions.ExpressionType.Dynamic" /> and has the <see cref="P:System.Linq.Expressions.DynamicExpression.DelegateType" />, <see cref="P:System.Linq.Expressions.DynamicExpression.Binder" />, and <see cref="P:System.Linq.Expressions.DynamicExpression.Arguments" /> set to the specified values.</span>
          </span>
        </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="MakeDynamic">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.DynamicExpression MakeDynamic (Type delegateType, System.Runtime.CompilerServices.CallSiteBinder binder, System.Linq.Expressions.Expression arg0, System.Linq.Expressions.Expression arg1, System.Linq.Expressions.Expression arg2, System.Linq.Expressions.Expression arg3);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.DynamicExpression MakeDynamic(class System.Type delegateType, class System.Runtime.CompilerServices.CallSiteBinder binder, class System.Linq.Expressions.Expression arg0, class System.Linq.Expressions.Expression arg1, class System.Linq.Expressions.Expression arg2, class System.Linq.Expressions.Expression arg3) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.MakeDynamic(System.Type,System.Runtime.CompilerServices.CallSiteBinder,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function MakeDynamic (delegateType As Type, binder As CallSiteBinder, arg0 As Expression, arg1 As Expression, arg2 As Expression, arg3 As Expression) As DynamicExpression" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Linq::Expressions::DynamicExpression ^ MakeDynamic(Type ^ delegateType, System::Runtime::CompilerServices::CallSiteBinder ^ binder, System::Linq::Expressions::Expression ^ arg0, System::Linq::Expressions::Expression ^ arg1, System::Linq::Expressions::Expression ^ arg2, System::Linq::Expressions::Expression ^ arg3);" />
      <MemberSignature Language="F#" Value="static member MakeDynamic : Type * System.Runtime.CompilerServices.CallSiteBinder * System.Linq.Expressions.Expression * System.Linq.Expressions.Expression * System.Linq.Expressions.Expression * System.Linq.Expressions.Expression -&gt; System.Linq.Expressions.DynamicExpression" Usage="System.Linq.Expressions.Expression.MakeDynamic (delegateType, binder, arg0, arg1, arg2, arg3)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.DynamicExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="delegateType" Type="System.Type" />
        <Parameter Name="binder" Type="System.Runtime.CompilerServices.CallSiteBinder" />
        <Parameter Name="arg0" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="arg1" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="arg2" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="arg3" Type="System.Linq.Expressions.Expression" />
      </Parameters>
      <Docs>
        <param name="delegateType">
          <span data-ttu-id="fef91-2244">Тип делегата, используемого <see cref="T:System.Runtime.CompilerServices.CallSite" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fef91-2244">The type of the delegate used by the <see cref="T:System.Runtime.CompilerServices.CallSite" />.</span>
          </span>
        </param>
        <param name="binder">
          <span data-ttu-id="fef91-2245">Связыватель времени выполнения для динамической операции.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fef91-2245">The runtime binder for the dynamic operation.</span>
          </span>
        </param>
        <param name="arg0">
          <span data-ttu-id="fef91-2246">Первый аргумент динамической операции.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fef91-2246">The first argument to the dynamic operation.</span>
          </span>
        </param>
        <param name="arg1">
          <span data-ttu-id="fef91-2247">Второй аргумент динамической операции.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fef91-2247">The second argument to the dynamic operation.</span>
          </span>
        </param>
        <param name="arg2">
          <span data-ttu-id="fef91-2248">Третий аргумент динамической операции.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fef91-2248">The third argument to the dynamic operation.</span>
          </span>
        </param>
        <param name="arg3">
          <span data-ttu-id="fef91-2249">Четвертый аргумент динамической операции.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fef91-2249">The fourth argument to the dynamic operation.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="fef91-2250">Создает выражение <see cref="T:System.Linq.Expressions.DynamicExpression" />, которое представляет динамическую операцию, привязанную с использованием указанного объекта <see cref="T:System.Runtime.CompilerServices.CallSiteBinder" /> и четырьмя аргументами.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fef91-2250">Creates a <see cref="T:System.Linq.Expressions.DynamicExpression" /> that represents a dynamic operation bound by the provided <see cref="T:System.Runtime.CompilerServices.CallSiteBinder" /> and four arguments.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="fef91-2251">Объект <see cref="T:System.Linq.Expressions.DynamicExpression" /> со свойством <see cref="P:System.Linq.Expressions.Expression.NodeType" />, равным <see cref="F:System.Linq.Expressions.ExpressionType.Dynamic" />, и свойствами <see cref="P:System.Linq.Expressions.DynamicExpression.DelegateType" />, <see cref="P:System.Linq.Expressions.DynamicExpression.Binder" /> и <see cref="P:System.Linq.Expressions.DynamicExpression.Arguments" />, для которых заданы указанные значения.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fef91-2251">A <see cref="T:System.Linq.Expressions.DynamicExpression" /> that has <see cref="P:System.Linq.Expressions.Expression.NodeType" /> equal to <see cref="F:System.Linq.Expressions.ExpressionType.Dynamic" /> and has the <see cref="P:System.Linq.Expressions.DynamicExpression.DelegateType" />, <see cref="P:System.Linq.Expressions.DynamicExpression.Binder" />, and <see cref="P:System.Linq.Expressions.DynamicExpression.Arguments" /> set to the specified values.</span>
          </span>
        </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="MakeGoto">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.GotoExpression MakeGoto (System.Linq.Expressions.GotoExpressionKind kind, System.Linq.Expressions.LabelTarget target, System.Linq.Expressions.Expression value, Type type);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.GotoExpression MakeGoto(valuetype System.Linq.Expressions.GotoExpressionKind kind, class System.Linq.Expressions.LabelTarget target, class System.Linq.Expressions.Expression value, class System.Type type) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.MakeGoto(System.Linq.Expressions.GotoExpressionKind,System.Linq.Expressions.LabelTarget,System.Linq.Expressions.Expression,System.Type)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Linq::Expressions::GotoExpression ^ MakeGoto(System::Linq::Expressions::GotoExpressionKind kind, System::Linq::Expressions::LabelTarget ^ target, System::Linq::Expressions::Expression ^ value, Type ^ type);" />
      <MemberSignature Language="F#" Value="static member MakeGoto : System.Linq.Expressions.GotoExpressionKind * System.Linq.Expressions.LabelTarget * System.Linq.Expressions.Expression * Type -&gt; System.Linq.Expressions.GotoExpression" Usage="System.Linq.Expressions.Expression.MakeGoto (kind, target, value, type)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.GotoExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="kind" Type="System.Linq.Expressions.GotoExpressionKind" />
        <Parameter Name="target" Type="System.Linq.Expressions.LabelTarget" />
        <Parameter Name="value" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="type" Type="System.Type" />
      </Parameters>
      <Docs>
        <param name="kind">
          <span data-ttu-id="fef91-2252">
            <see cref="T:System.Linq.Expressions.GotoExpressionKind" /> объекта <see cref="T:System.Linq.Expressions.GotoExpression" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fef91-2252">The <see cref="T:System.Linq.Expressions.GotoExpressionKind" /> of the <see cref="T:System.Linq.Expressions.GotoExpression" />.</span>
          </span>
        </param>
        <param name="target">
          <span data-ttu-id="fef91-2253">Объект <see cref="T:System.Linq.Expressions.LabelTarget" />, на который будет выполнен переход по <see cref="T:System.Linq.Expressions.GotoExpression" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fef91-2253">The <see cref="T:System.Linq.Expressions.LabelTarget" /> that the <see cref="T:System.Linq.Expressions.GotoExpression" /> will jump to.</span>
          </span>
        </param>
        <param name="value">
          <span data-ttu-id="fef91-2254">Значение, передаваемое связанной метке при переходе.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fef91-2254">The value that will be passed to the associated label upon jumping.</span>
          </span>
        </param>
        <param name="type">
          <span data-ttu-id="fef91-2255">Объект <see cref="T:System.Type" />, который следует задать в качестве значения свойства <see cref="P:System.Linq.Expressions.Expression.Type" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fef91-2255">An <see cref="T:System.Type" /> to set the <see cref="P:System.Linq.Expressions.Expression.Type" /> property equal to.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="fef91-2256">Создает выражение <see cref="T:System.Linq.Expressions.GotoExpression" />, представляющее переход указанного типа <see cref="T:System.Linq.Expressions.GotoExpressionKind" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fef91-2256">Creates a <see cref="T:System.Linq.Expressions.GotoExpression" /> representing a jump of the specified <see cref="T:System.Linq.Expressions.GotoExpressionKind" />.</span>
          </span>
          <span data-ttu-id="fef91-2257">Также можно указать значение, передаваемое метке при переходе.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fef91-2257">The value passed to the label upon jumping can also be specified.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="fef91-2258">Выражение <see cref="T:System.Linq.Expressions.GotoExpression" />, свойство <see cref="P:System.Linq.Expressions.GotoExpression.Kind" /> которого имеет значение <paramref name="kind" />, свойство <see cref="P:System.Linq.Expressions.GotoExpression.Target" /> — <paramref name="target" />, свойство <see cref="P:System.Linq.Expressions.Expression.Type" /> — <paramref name="type" />, а при переходе целевой метке передается значение <paramref name="value" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fef91-2258">A <see cref="T:System.Linq.Expressions.GotoExpression" /> with <see cref="P:System.Linq.Expressions.GotoExpression.Kind" /> equal to <paramref name="kind" />, the <see cref="P:System.Linq.Expressions.GotoExpression.Target" /> property set to <paramref name="target" />, the <see cref="P:System.Linq.Expressions.Expression.Type" /> property set to <paramref name="type" />, and <paramref name="value" /> to be passed to the target label upon jumping.</span>
          </span>
        </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="MakeIndex">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.IndexExpression MakeIndex (System.Linq.Expressions.Expression instance, System.Reflection.PropertyInfo indexer, System.Collections.Generic.IEnumerable&lt;System.Linq.Expressions.Expression&gt; arguments);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.IndexExpression MakeIndex(class System.Linq.Expressions.Expression instance, class System.Reflection.PropertyInfo indexer, class System.Collections.Generic.IEnumerable`1&lt;class System.Linq.Expressions.Expression&gt; arguments) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.MakeIndex(System.Linq.Expressions.Expression,System.Reflection.PropertyInfo,System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression})" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function MakeIndex (instance As Expression, indexer As PropertyInfo, arguments As IEnumerable(Of Expression)) As IndexExpression" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Linq::Expressions::IndexExpression ^ MakeIndex(System::Linq::Expressions::Expression ^ instance, System::Reflection::PropertyInfo ^ indexer, System::Collections::Generic::IEnumerable&lt;System::Linq::Expressions::Expression ^&gt; ^ arguments);" />
      <MemberSignature Language="F#" Value="static member MakeIndex : System.Linq.Expressions.Expression * System.Reflection.PropertyInfo * seq&lt;System.Linq.Expressions.Expression&gt; -&gt; System.Linq.Expressions.IndexExpression" Usage="System.Linq.Expressions.Expression.MakeIndex (instance, indexer, arguments)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.IndexExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="instance" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="indexer" Type="System.Reflection.PropertyInfo" />
        <Parameter Name="arguments" Type="System.Collections.Generic.IEnumerable&lt;System.Linq.Expressions.Expression&gt;" />
      </Parameters>
      <Docs>
        <param name="instance">
          <span data-ttu-id="fef91-2259">Объект, которому принадлежит это свойство.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fef91-2259">The object to which the property belongs.</span>
          </span>
          <span data-ttu-id="fef91-2260">Должно равняться NULL, если свойство имеет значение <see langword="static" /> (<see langword="shared" /> в Visual Basic).</span>
          <span class="sxs-lookup">
            <span data-stu-id="fef91-2260">It should be null if the property is <see langword="static" /> (<see langword="shared" /> in Visual Basic).</span>
          </span>
        </param>
        <param name="indexer">
          <span data-ttu-id="fef91-2261">Выражение <see cref="T:System.Linq.Expressions.Expression" />, представляющее индексируемое свойство.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fef91-2261">An <see cref="T:System.Linq.Expressions.Expression" /> representing the property to index.</span>
          </span>
        </param>
        <param name="arguments">
          <span data-ttu-id="fef91-2262">Коллекция <c>IEnumerable&lt;Expression&gt;</c> (<c>IEnumerable (Of Expression)</c> в Visual Basic), содержащая аргументы, которые будут использоваться для индексации свойства.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fef91-2262">An <c>IEnumerable&lt;Expression&gt;</c> (<c>IEnumerable (Of Expression)</c> in Visual Basic) that contains the arguments that will be used to index the property.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="fef91-2263">Создает объект <see cref="T:System.Linq.Expressions.IndexExpression" />, представляющий доступ к индексированному свойству объекта.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fef91-2263">Creates an <see cref="T:System.Linq.Expressions.IndexExpression" /> that represents accessing an indexed property in an object.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="fef91-2264">Созданный <see cref="T:System.Linq.Expressions.IndexExpression" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fef91-2264">The created <see cref="T:System.Linq.Expressions.IndexExpression" />.</span>
          </span>
        </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="MakeMemberAccess">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.MemberExpression MakeMemberAccess (System.Linq.Expressions.Expression expression, System.Reflection.MemberInfo member);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.MemberExpression MakeMemberAccess(class System.Linq.Expressions.Expression expression, class System.Reflection.MemberInfo member) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.MakeMemberAccess(System.Linq.Expressions.Expression,System.Reflection.MemberInfo)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Linq::Expressions::MemberExpression ^ MakeMemberAccess(System::Linq::Expressions::Expression ^ expression, System::Reflection::MemberInfo ^ member);" />
      <MemberSignature Language="F#" Value="static member MakeMemberAccess : System.Linq.Expressions.Expression * System.Reflection.MemberInfo -&gt; System.Linq.Expressions.MemberExpression" Usage="System.Linq.Expressions.Expression.MakeMemberAccess (expression, member)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.MemberExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="expression" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="member" Type="System.Reflection.MemberInfo" />
      </Parameters>
      <Docs>
        <param name="expression">
          <span data-ttu-id="fef91-2265">Объект <see cref="T:System.Linq.Expressions.Expression" /> представляет объект, к которому принадлежит элемент.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fef91-2265">An <see cref="T:System.Linq.Expressions.Expression" /> that represents the object that the member belongs to.</span>
          </span>
          <span data-ttu-id="fef91-2266">Для статических членов допускается значение NULL.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fef91-2266">This can be null for static members.</span>
          </span>
        </param>
        <param name="member">
          <span data-ttu-id="fef91-2267">
            <see cref="T:System.Reflection.MemberInfo" />, описывающий поле или свойство, к которому следует осуществить доступ.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fef91-2267">The <see cref="T:System.Reflection.MemberInfo" /> that describes the field or property to be accessed.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="fef91-2268">Создает <see cref="T:System.Linq.Expressions.MemberExpression" />, который представляет доступ к полю или свойству.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fef91-2268">Creates a <see cref="T:System.Linq.Expressions.MemberExpression" /> that represents accessing either a field or a property.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="fef91-2269">Объект <see cref="T:System.Linq.Expressions.MemberExpression" />, полученный в результате вызова соответствующего заводского метода.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fef91-2269">The <see cref="T:System.Linq.Expressions.MemberExpression" /> that results from calling the appropriate factory method.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="fef91-2270">Этот метод можно использовать для создания <xref:System.Linq.Expressions.MemberExpression> , представляющий доступ к полю или свойству, в зависимости от типа `member`.</span><span class="sxs-lookup"><span data-stu-id="fef91-2270">This method can be used to create a <xref:System.Linq.Expressions.MemberExpression> that represents accessing either a field or a property, depending on the type of `member`.</span></span> <span data-ttu-id="fef91-2271">Если `member` имеет тип <xref:System.Reflection.FieldInfo>, этот метод вызывает метод <xref:System.Linq.Expressions.Expression.Field%2A> для создания <xref:System.Linq.Expressions.MemberExpression>.</span><span class="sxs-lookup"><span data-stu-id="fef91-2271">If `member` is of type <xref:System.Reflection.FieldInfo>, this method calls <xref:System.Linq.Expressions.Expression.Field%2A> to create the <xref:System.Linq.Expressions.MemberExpression>.</span></span> <span data-ttu-id="fef91-2272">Если `member` имеет тип <xref:System.Reflection.PropertyInfo>, этот метод вызывает метод <xref:System.Linq.Expressions.Expression.Property%2A> для создания <xref:System.Linq.Expressions.MemberExpression>.</span><span class="sxs-lookup"><span data-stu-id="fef91-2272">If `member` is of type <xref:System.Reflection.PropertyInfo>, this method calls <xref:System.Linq.Expressions.Expression.Property%2A> to create the <xref:System.Linq.Expressions.MemberExpression>.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="fef91-2273">
            <paramref name="member" /> — <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fef91-2273">
              <paramref name="member" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="fef91-2274">
            <paramref name="member" /> не представляет поле или свойство.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fef91-2274">
              <paramref name="member" /> does not represent a field or property.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="MakeTry">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.TryExpression MakeTry (Type type, System.Linq.Expressions.Expression body, System.Linq.Expressions.Expression finally, System.Linq.Expressions.Expression fault, System.Collections.Generic.IEnumerable&lt;System.Linq.Expressions.CatchBlock&gt; handlers);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.TryExpression MakeTry(class System.Type type, class System.Linq.Expressions.Expression body, class System.Linq.Expressions.Expression finally, class System.Linq.Expressions.Expression fault, class System.Collections.Generic.IEnumerable`1&lt;class System.Linq.Expressions.CatchBlock&gt; handlers) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.MakeTry(System.Type,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Collections.Generic.IEnumerable{System.Linq.Expressions.CatchBlock})" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Linq::Expressions::TryExpression ^ MakeTry(Type ^ type, System::Linq::Expressions::Expression ^ body, System::Linq::Expressions::Expression ^ finally, System::Linq::Expressions::Expression ^ fault, System::Collections::Generic::IEnumerable&lt;System::Linq::Expressions::CatchBlock ^&gt; ^ handlers);" />
      <MemberSignature Language="F#" Value="static member MakeTry : Type * System.Linq.Expressions.Expression * System.Linq.Expressions.Expression * System.Linq.Expressions.Expression * seq&lt;System.Linq.Expressions.CatchBlock&gt; -&gt; System.Linq.Expressions.TryExpression" Usage="System.Linq.Expressions.Expression.MakeTry (type, body, finally, fault, handlers)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.TryExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="type" Type="System.Type" />
        <Parameter Name="body" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="finally" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="fault" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="handlers" Type="System.Collections.Generic.IEnumerable&lt;System.Linq.Expressions.CatchBlock&gt;" />
      </Parameters>
      <Docs>
        <param name="type">
          <span data-ttu-id="fef91-2275">Тип результата выражения try.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fef91-2275">The result type of the try expression.</span>
          </span>
          <span data-ttu-id="fef91-2276">Если он имеет значение NULL, bodh и все обработчики должны иметь одинаковый тип.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fef91-2276">If null, bodh and all handlers must have identical type.</span>
          </span>
        </param>
        <param name="body">
          <span data-ttu-id="fef91-2277">Тело блока try.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fef91-2277">The body of the try block.</span>
          </span>
        </param>
        <param name="finally">
          <span data-ttu-id="fef91-2278">Тело блока finally.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fef91-2278">The body of the finally block.</span>
          </span>
          <span data-ttu-id="fef91-2279">Если с блоком try не связан ни один блок finally, передается NULL.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fef91-2279">Pass null if the try block has no finally block associated with it.</span>
          </span>
        </param>
        <param name="fault">
          <span data-ttu-id="fef91-2280">Тело блока fault.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fef91-2280">The body of the fault block.</span>
          </span>
          <span data-ttu-id="fef91-2281">Если с блоком try не связан ни один блок fault, передается NULL.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fef91-2281">Pass null if the try block has no fault block associated with it.</span>
          </span>
        </param>
        <param name="handlers">
          <span data-ttu-id="fef91-2282">Коллекция объектов <see cref="T:System.Linq.Expressions.CatchBlock" />, представляющих операторы catch, которые следует связать с блоком try.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fef91-2282">A collection of <see cref="T:System.Linq.Expressions.CatchBlock" />s representing the catch statements to be associated with the try block.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="fef91-2283">Создает выражение <see cref="T:System.Linq.Expressions.TryExpression" />, представляющее блок try с указанными элементами.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fef91-2283">Creates a <see cref="T:System.Linq.Expressions.TryExpression" /> representing a try block with the specified elements.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="fef91-2284">Созданный <see cref="T:System.Linq.Expressions.TryExpression" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fef91-2284">The created <see cref="T:System.Linq.Expressions.TryExpression" />.</span>
          </span>
        </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="MakeUnary">
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="fef91-2285">Создает <see cref="T:System.Linq.Expressions.UnaryExpression" /> с помощью вызова соответствующего заводского метода.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fef91-2285">Creates a <see cref="T:System.Linq.Expressions.UnaryExpression" /> by calling the appropriate factory method.</span>
          </span>
        </summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="MakeUnary">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.UnaryExpression MakeUnary (System.Linq.Expressions.ExpressionType unaryType, System.Linq.Expressions.Expression operand, Type type);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.UnaryExpression MakeUnary(valuetype System.Linq.Expressions.ExpressionType unaryType, class System.Linq.Expressions.Expression operand, class System.Type type) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.MakeUnary(System.Linq.Expressions.ExpressionType,System.Linq.Expressions.Expression,System.Type)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Linq::Expressions::UnaryExpression ^ MakeUnary(System::Linq::Expressions::ExpressionType unaryType, System::Linq::Expressions::Expression ^ operand, Type ^ type);" />
      <MemberSignature Language="F#" Value="static member MakeUnary : System.Linq.Expressions.ExpressionType * System.Linq.Expressions.Expression * Type -&gt; System.Linq.Expressions.UnaryExpression" Usage="System.Linq.Expressions.Expression.MakeUnary (unaryType, operand, type)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.UnaryExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="unaryType" Type="System.Linq.Expressions.ExpressionType" />
        <Parameter Name="operand" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="type" Type="System.Type" />
      </Parameters>
      <Docs>
        <param name="unaryType">
          <span data-ttu-id="fef91-2286">
            <see cref="T:System.Linq.Expressions.ExpressionType" />, указывающий тип унарной операции.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fef91-2286">The <see cref="T:System.Linq.Expressions.ExpressionType" /> that specifies the type of unary operation.</span>
          </span>
        </param>
        <param name="operand">
          <span data-ttu-id="fef91-2287">
            <see cref="T:System.Linq.Expressions.Expression" /> представляет операнд.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fef91-2287">An <see cref="T:System.Linq.Expressions.Expression" /> that represents the operand.</span>
          </span>
        </param>
        <param name="type">
          <span data-ttu-id="fef91-2288">Тип <see cref="T:System.Type" />, указывающий тип для преобразования в (передать <see langword="null" />, если не применяется).</span>
          <span class="sxs-lookup">
            <span data-stu-id="fef91-2288">The <see cref="T:System.Type" /> that specifies the type to be converted to (pass <see langword="null" /> if not applicable).</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="fef91-2289">Создает <see cref="T:System.Linq.Expressions.UnaryExpression" />, присвоенный операнду с помощью вызова соответствующего заводского метода.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fef91-2289">Creates a <see cref="T:System.Linq.Expressions.UnaryExpression" />, given an operand, by calling the appropriate factory method.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="fef91-2290">Объект <see cref="T:System.Linq.Expressions.UnaryExpression" />, полученный в результате вызова соответствующего заводского метода.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fef91-2290">The <see cref="T:System.Linq.Expressions.UnaryExpression" /> that results from calling the appropriate factory method.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="fef91-2291">`unaryType` Параметр определяет, какие <xref:System.Linq.Expressions.UnaryExpression> этот метод вызывает метод фабрики.</span><span class="sxs-lookup"><span data-stu-id="fef91-2291">The `unaryType` parameter determines which <xref:System.Linq.Expressions.UnaryExpression> factory method this method calls.</span></span> <span data-ttu-id="fef91-2292">Например если `unaryType` равен <xref:System.Linq.Expressions.ExpressionType.Convert>, этот метод вызывает метод <xref:System.Linq.Expressions.Expression.Convert%2A>.</span><span class="sxs-lookup"><span data-stu-id="fef91-2292">For example, if `unaryType` is equal to <xref:System.Linq.Expressions.ExpressionType.Convert>, this method invokes <xref:System.Linq.Expressions.Expression.Convert%2A>.</span></span> <span data-ttu-id="fef91-2293">`type`Параметр игнорируется, если он не применяется к фабричный метод, который вызывается.</span><span class="sxs-lookup"><span data-stu-id="fef91-2293">The `type`parameter is ignored if it does not apply to the factory method that is called.</span></span>  

 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="fef91-2294">
            <paramref name="operand" /> — <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fef91-2294">
              <paramref name="operand" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="fef91-2295">Параметр <paramref name="unaryType" /> не соответствует унарному узлу выражения.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fef91-2295">
              <paramref name="unaryType" /> does not correspond to a unary expression node.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="MakeUnary">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.UnaryExpression MakeUnary (System.Linq.Expressions.ExpressionType unaryType, System.Linq.Expressions.Expression operand, Type type, System.Reflection.MethodInfo method);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.UnaryExpression MakeUnary(valuetype System.Linq.Expressions.ExpressionType unaryType, class System.Linq.Expressions.Expression operand, class System.Type type, class System.Reflection.MethodInfo method) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.MakeUnary(System.Linq.Expressions.ExpressionType,System.Linq.Expressions.Expression,System.Type,System.Reflection.MethodInfo)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Linq::Expressions::UnaryExpression ^ MakeUnary(System::Linq::Expressions::ExpressionType unaryType, System::Linq::Expressions::Expression ^ operand, Type ^ type, System::Reflection::MethodInfo ^ method);" />
      <MemberSignature Language="F#" Value="static member MakeUnary : System.Linq.Expressions.ExpressionType * System.Linq.Expressions.Expression * Type * System.Reflection.MethodInfo -&gt; System.Linq.Expressions.UnaryExpression" Usage="System.Linq.Expressions.Expression.MakeUnary (unaryType, operand, type, method)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.UnaryExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="unaryType" Type="System.Linq.Expressions.ExpressionType" />
        <Parameter Name="operand" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="type" Type="System.Type" />
        <Parameter Name="method" Type="System.Reflection.MethodInfo" />
      </Parameters>
      <Docs>
        <param name="unaryType">
          <span data-ttu-id="fef91-2296">
            <see cref="T:System.Linq.Expressions.ExpressionType" />, указывающий тип унарной операции.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fef91-2296">The <see cref="T:System.Linq.Expressions.ExpressionType" /> that specifies the type of unary operation.</span>
          </span>
        </param>
        <param name="operand">
          <span data-ttu-id="fef91-2297">
            <see cref="T:System.Linq.Expressions.Expression" /> представляет операнд.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fef91-2297">An <see cref="T:System.Linq.Expressions.Expression" /> that represents the operand.</span>
          </span>
        </param>
        <param name="type">
          <span data-ttu-id="fef91-2298">Тип <see cref="T:System.Type" />, указывающий тип для преобразования в (передать <see langword="null" />, если не применяется).</span>
          <span class="sxs-lookup">
            <span data-stu-id="fef91-2298">The <see cref="T:System.Type" /> that specifies the type to be converted to (pass <see langword="null" /> if not applicable).</span>
          </span>
        </param>
        <param name="method">
          <span data-ttu-id="fef91-2299">
            <see cref="T:System.Reflection.MethodInfo" />, представляющий метод реализации.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fef91-2299">The <see cref="T:System.Reflection.MethodInfo" /> that represents the implementing method.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="fef91-2300">Создает <see cref="T:System.Linq.Expressions.UnaryExpression" />, присвоенный операнд и метод реализации с помощью вызова соответствующего заводского метода.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fef91-2300">Creates a <see cref="T:System.Linq.Expressions.UnaryExpression" />, given an operand and implementing method, by calling the appropriate factory method.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="fef91-2301">Объект <see cref="T:System.Linq.Expressions.UnaryExpression" />, полученный в результате вызова соответствующего заводского метода.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fef91-2301">The <see cref="T:System.Linq.Expressions.UnaryExpression" /> that results from calling the appropriate factory method.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="fef91-2302">`unaryType` Параметр определяет, какие <xref:System.Linq.Expressions.UnaryExpression> этот метод вызывает метод фабрики.</span><span class="sxs-lookup"><span data-stu-id="fef91-2302">The `unaryType` parameter determines which <xref:System.Linq.Expressions.UnaryExpression> factory method this method calls.</span></span> <span data-ttu-id="fef91-2303">Например если `unaryType` равен <xref:System.Linq.Expressions.ExpressionType.Convert>, этот метод вызывает метод <xref:System.Linq.Expressions.Expression.Convert%2A>.</span><span class="sxs-lookup"><span data-stu-id="fef91-2303">For example, if `unaryType` is equal to <xref:System.Linq.Expressions.ExpressionType.Convert>, this method invokes <xref:System.Linq.Expressions.Expression.Convert%2A>.</span></span> <span data-ttu-id="fef91-2304">`type` И `method` параметры учитываются, если они не применяются к фабричный метод, который вызывается.</span><span class="sxs-lookup"><span data-stu-id="fef91-2304">The `type` and `method` parameters are ignored if they do not apply to the factory method that is called.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="fef91-2305">
            <paramref name="operand" /> — <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fef91-2305">
              <paramref name="operand" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="fef91-2306">Параметр <paramref name="unaryType" /> не соответствует унарному узлу выражения.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fef91-2306">
              <paramref name="unaryType" /> does not correspond to a unary expression node.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <MemberGroup MemberName="MemberBind">
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="fef91-2307">Создает <see cref="T:System.Linq.Expressions.MemberMemberBinding" />, который представляет рекурсивную инициализацию элементов элемента.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fef91-2307">Creates a <see cref="T:System.Linq.Expressions.MemberMemberBinding" /> that represents the recursive initialization of members of a member.</span>
          </span>
        </summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="MemberBind">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.MemberMemberBinding MemberBind (System.Reflection.MemberInfo member, System.Collections.Generic.IEnumerable&lt;System.Linq.Expressions.MemberBinding&gt; bindings);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.MemberMemberBinding MemberBind(class System.Reflection.MemberInfo member, class System.Collections.Generic.IEnumerable`1&lt;class System.Linq.Expressions.MemberBinding&gt; bindings) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.MemberBind(System.Reflection.MemberInfo,System.Collections.Generic.IEnumerable{System.Linq.Expressions.MemberBinding})" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function MemberBind (member As MemberInfo, bindings As IEnumerable(Of MemberBinding)) As MemberMemberBinding" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Linq::Expressions::MemberMemberBinding ^ MemberBind(System::Reflection::MemberInfo ^ member, System::Collections::Generic::IEnumerable&lt;System::Linq::Expressions::MemberBinding ^&gt; ^ bindings);" />
      <MemberSignature Language="F#" Value="static member MemberBind : System.Reflection.MemberInfo * seq&lt;System.Linq.Expressions.MemberBinding&gt; -&gt; System.Linq.Expressions.MemberMemberBinding" Usage="System.Linq.Expressions.Expression.MemberBind (member, bindings)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.MemberMemberBinding</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="member" Type="System.Reflection.MemberInfo" />
        <Parameter Name="bindings" Type="System.Collections.Generic.IEnumerable&lt;System.Linq.Expressions.MemberBinding&gt;" />
      </Parameters>
      <Docs>
        <param name="member">
          <span data-ttu-id="fef91-2308">Объект <see cref="T:System.Reflection.MemberInfo" />, который следует задать в качестве значения свойства <see cref="P:System.Linq.Expressions.MemberBinding.Member" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fef91-2308">The <see cref="T:System.Reflection.MemberInfo" /> to set the <see cref="P:System.Linq.Expressions.MemberBinding.Member" /> property equal to.</span>
          </span>
        </param>
        <param name="bindings">
          <span data-ttu-id="fef91-2309">
            <see cref="T:System.Collections.Generic.IEnumerable`1" />, содержащий все объекты <see cref="T:System.Linq.Expressions.MemberBinding" />, используемые для заполнения коллекции <see cref="P:System.Linq.Expressions.MemberMemberBinding.Bindings" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fef91-2309">An <see cref="T:System.Collections.Generic.IEnumerable`1" /> that contains <see cref="T:System.Linq.Expressions.MemberBinding" /> objects to use to populate the <see cref="P:System.Linq.Expressions.MemberMemberBinding.Bindings" /> collection.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="fef91-2310">Создает <see cref="T:System.Linq.Expressions.MemberMemberBinding" />, который представляет рекурсивную инициализацию элементов поля или свойства.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fef91-2310">Creates a <see cref="T:System.Linq.Expressions.MemberMemberBinding" /> that represents the recursive initialization of members of a field or property.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="fef91-2311">Выражение <see cref="T:System.Linq.Expressions.MemberMemberBinding" /> со свойством<see cref="P:System.Linq.Expressions.MemberBinding.BindingType" />, равным <see cref="F:System.Linq.Expressions.MemberBindingType.MemberBinding" />, и свойствами <see cref="P:System.Linq.Expressions.MemberBinding.Member" /> и <see cref="P:System.Linq.Expressions.MemberMemberBinding.Bindings" />, для которых заданы указанные значения.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fef91-2311">A <see cref="T:System.Linq.Expressions.MemberMemberBinding" /> that has the <see cref="P:System.Linq.Expressions.MemberBinding.BindingType" /> property equal to <see cref="F:System.Linq.Expressions.MemberBindingType.MemberBinding" /> and the <see cref="P:System.Linq.Expressions.MemberBinding.Member" /> and <see cref="P:System.Linq.Expressions.MemberMemberBinding.Bindings" /> properties set to the specified values.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="fef91-2312">`member` Параметр должен представлять поле или свойство.</span><span class="sxs-lookup"><span data-stu-id="fef91-2312">The `member` parameter must represent a field or property.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="fef91-2313">Значение параметра <paramref name="member" /> или <paramref name="bindings" /> — <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fef91-2313">
              <paramref name="member" /> or <paramref name="bindings" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="fef91-2314">
            <paramref name="member" /> не представляет поле или свойство.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fef91-2314">
              <paramref name="member" /> does not represent a field or property.</span>
          </span>
          <span data-ttu-id="fef91-2315">-или-</span>
          <span class="sxs-lookup">
            <span data-stu-id="fef91-2315">-or-</span>
          </span>
          <span data-ttu-id="fef91-2316">Свойство <see cref="P:System.Linq.Expressions.MemberBinding.Member" /> элемента <paramref name="bindings" /> не представляет элемент типа поля или свойства, представленного <paramref name="member" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fef91-2316">The <see cref="P:System.Linq.Expressions.MemberBinding.Member" /> property of an element of <paramref name="bindings" /> does not represent a member of the type of the field or property that <paramref name="member" /> represents.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="MemberBind">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.MemberMemberBinding MemberBind (System.Reflection.MemberInfo member, params System.Linq.Expressions.MemberBinding[] bindings);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.MemberMemberBinding MemberBind(class System.Reflection.MemberInfo member, class System.Linq.Expressions.MemberBinding[] bindings) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.MemberBind(System.Reflection.MemberInfo,System.Linq.Expressions.MemberBinding[])" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function MemberBind (member As MemberInfo, ParamArray bindings As MemberBinding()) As MemberMemberBinding" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Linq::Expressions::MemberMemberBinding ^ MemberBind(System::Reflection::MemberInfo ^ member, ... cli::array &lt;System::Linq::Expressions::MemberBinding ^&gt; ^ bindings);" />
      <MemberSignature Language="F#" Value="static member MemberBind : System.Reflection.MemberInfo * System.Linq.Expressions.MemberBinding[] -&gt; System.Linq.Expressions.MemberMemberBinding" Usage="System.Linq.Expressions.Expression.MemberBind (member, bindings)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.MemberMemberBinding</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="member" Type="System.Reflection.MemberInfo" />
        <Parameter Name="bindings" Type="System.Linq.Expressions.MemberBinding[]">
          <Attributes>
            <Attribute>
              <AttributeName>System.ParamArray</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="member">
          <span data-ttu-id="fef91-2317">Объект <see cref="T:System.Reflection.MemberInfo" />, который следует задать в качестве значения свойства <see cref="P:System.Linq.Expressions.MemberBinding.Member" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fef91-2317">The <see cref="T:System.Reflection.MemberInfo" /> to set the <see cref="P:System.Linq.Expressions.MemberBinding.Member" /> property equal to.</span>
          </span>
        </param>
        <param name="bindings">
          <span data-ttu-id="fef91-2318">Массив объектов <see cref="T:System.Linq.Expressions.MemberBinding" /> для заполнения коллекции <see cref="P:System.Linq.Expressions.MemberMemberBinding.Bindings" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fef91-2318">An array of <see cref="T:System.Linq.Expressions.MemberBinding" /> objects to use to populate the <see cref="P:System.Linq.Expressions.MemberMemberBinding.Bindings" /> collection.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="fef91-2319">Создает <see cref="T:System.Linq.Expressions.MemberMemberBinding" />, который представляет рекурсивную инициализацию элементов поля или свойства.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fef91-2319">Creates a <see cref="T:System.Linq.Expressions.MemberMemberBinding" /> that represents the recursive initialization of members of a field or property.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="fef91-2320">Выражение <see cref="T:System.Linq.Expressions.MemberMemberBinding" /> со свойством<see cref="P:System.Linq.Expressions.MemberBinding.BindingType" />, равным <see cref="F:System.Linq.Expressions.MemberBindingType.MemberBinding" />, и свойствами <see cref="P:System.Linq.Expressions.MemberBinding.Member" /> и <see cref="P:System.Linq.Expressions.MemberMemberBinding.Bindings" />, для которых заданы указанные значения.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fef91-2320">A <see cref="T:System.Linq.Expressions.MemberMemberBinding" /> that has the <see cref="P:System.Linq.Expressions.MemberBinding.BindingType" /> property equal to <see cref="F:System.Linq.Expressions.MemberBindingType.MemberBinding" /> and the <see cref="P:System.Linq.Expressions.MemberBinding.Member" /> and <see cref="P:System.Linq.Expressions.MemberMemberBinding.Bindings" /> properties set to the specified values.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="fef91-2321">`member` Параметр должен представлять поле или свойство.</span><span class="sxs-lookup"><span data-stu-id="fef91-2321">The `member` parameter must represent a field or property.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="fef91-2322">Значение параметра <paramref name="member" /> или <paramref name="bindings" /> — <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fef91-2322">
              <paramref name="member" /> or <paramref name="bindings" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="fef91-2323">
            <paramref name="member" /> не представляет поле или свойство.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fef91-2323">
              <paramref name="member" /> does not represent a field or property.</span>
          </span>
          <span data-ttu-id="fef91-2324">-или-</span>
          <span class="sxs-lookup">
            <span data-stu-id="fef91-2324">-or-</span>
          </span>
          <span data-ttu-id="fef91-2325">Свойство <see cref="P:System.Linq.Expressions.MemberBinding.Member" /> элемента <paramref name="bindings" /> не представляет элемент типа поля или свойства, представленного <paramref name="member" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fef91-2325">The <see cref="P:System.Linq.Expressions.MemberBinding.Member" /> property of an element of <paramref name="bindings" /> does not represent a member of the type of the field or property that <paramref name="member" /> represents.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="MemberBind">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.MemberMemberBinding MemberBind (System.Reflection.MethodInfo propertyAccessor, System.Collections.Generic.IEnumerable&lt;System.Linq.Expressions.MemberBinding&gt; bindings);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.MemberMemberBinding MemberBind(class System.Reflection.MethodInfo propertyAccessor, class System.Collections.Generic.IEnumerable`1&lt;class System.Linq.Expressions.MemberBinding&gt; bindings) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.MemberBind(System.Reflection.MethodInfo,System.Collections.Generic.IEnumerable{System.Linq.Expressions.MemberBinding})" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function MemberBind (propertyAccessor As MethodInfo, bindings As IEnumerable(Of MemberBinding)) As MemberMemberBinding" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Linq::Expressions::MemberMemberBinding ^ MemberBind(System::Reflection::MethodInfo ^ propertyAccessor, System::Collections::Generic::IEnumerable&lt;System::Linq::Expressions::MemberBinding ^&gt; ^ bindings);" />
      <MemberSignature Language="F#" Value="static member MemberBind : System.Reflection.MethodInfo * seq&lt;System.Linq.Expressions.MemberBinding&gt; -&gt; System.Linq.Expressions.MemberMemberBinding" Usage="System.Linq.Expressions.Expression.MemberBind (propertyAccessor, bindings)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.MemberMemberBinding</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="propertyAccessor" Type="System.Reflection.MethodInfo" />
        <Parameter Name="bindings" Type="System.Collections.Generic.IEnumerable&lt;System.Linq.Expressions.MemberBinding&gt;" />
      </Parameters>
      <Docs>
        <param name="propertyAccessor">
          <span data-ttu-id="fef91-2326">
            <see cref="T:System.Reflection.MethodInfo" />, представляющий метод доступа к свойству.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fef91-2326">The <see cref="T:System.Reflection.MethodInfo" /> that represents a property accessor method.</span>
          </span>
        </param>
        <param name="bindings">
          <span data-ttu-id="fef91-2327">
            <see cref="T:System.Collections.Generic.IEnumerable`1" />, содержащий все объекты <see cref="T:System.Linq.Expressions.MemberBinding" />, используемые для заполнения коллекции <see cref="P:System.Linq.Expressions.MemberMemberBinding.Bindings" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fef91-2327">An <see cref="T:System.Collections.Generic.IEnumerable`1" /> that contains <see cref="T:System.Linq.Expressions.MemberBinding" /> objects to use to populate the <see cref="P:System.Linq.Expressions.MemberMemberBinding.Bindings" /> collection.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="fef91-2328">Создает <see cref="T:System.Linq.Expressions.MemberMemberBinding" />, который представляет рекурсивную инициализацию элементов элемента, доступ к которому осуществляется с помощью метода доступа свойства.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fef91-2328">Creates a <see cref="T:System.Linq.Expressions.MemberMemberBinding" /> that represents the recursive initialization of members of a member that is accessed by using a property accessor method.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="fef91-2329">Выражение <see cref="T:System.Linq.Expressions.MemberMemberBinding" />, содержащее свойство <see cref="P:System.Linq.Expressions.MemberBinding.BindingType" />, равное <see cref="F:System.Linq.Expressions.MemberBindingType.MemberBinding" />, свойство <see cref="P:System.Linq.Expressions.MemberBinding.Member" />, для которого задано значение <see cref="T:System.Reflection.PropertyInfo" />, представляющее свойство с доступом в <paramref name="propertyAccessor" />, и свойства <see cref="P:System.Linq.Expressions.MemberMemberBinding.Bindings" />, для которых заданы указанные значения.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fef91-2329">A <see cref="T:System.Linq.Expressions.MemberMemberBinding" /> that has the <see cref="P:System.Linq.Expressions.MemberBinding.BindingType" /> property equal to <see cref="F:System.Linq.Expressions.MemberBindingType.MemberBinding" />, the <see cref="P:System.Linq.Expressions.MemberBinding.Member" /> property set to the <see cref="T:System.Reflection.PropertyInfo" /> that represents the property accessed in <paramref name="propertyAccessor" />, and <see cref="P:System.Linq.Expressions.MemberMemberBinding.Bindings" /> properties set to the specified values.</span>
          </span>
        </returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="fef91-2330">Значение параметра <paramref name="propertyAccessor" /> или <paramref name="bindings" /> — <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fef91-2330">
              <paramref name="propertyAccessor" /> or <paramref name="bindings" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="fef91-2331">
            <paramref name="propertyAccessor" /> не представляет метод доступа к свойству.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fef91-2331">
              <paramref name="propertyAccessor" /> does not represent a property accessor method.</span>
          </span>
          <span data-ttu-id="fef91-2332">-или-</span>
          <span class="sxs-lookup">
            <span data-stu-id="fef91-2332">-or-</span>
          </span>
          <span data-ttu-id="fef91-2333">Свойство <see cref="P:System.Linq.Expressions.MemberBinding.Member" /> элемента <paramref name="bindings" /> не представляет элемент типа свойства, доступ к которому осуществляется методом, который представляет <paramref name="propertyAccessor" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fef91-2333">The <see cref="P:System.Linq.Expressions.MemberBinding.Member" /> property of an element of <paramref name="bindings" /> does not represent a member of the type of the property accessed by the method that <paramref name="propertyAccessor" /> represents.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="MemberBind">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.MemberMemberBinding MemberBind (System.Reflection.MethodInfo propertyAccessor, params System.Linq.Expressions.MemberBinding[] bindings);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.MemberMemberBinding MemberBind(class System.Reflection.MethodInfo propertyAccessor, class System.Linq.Expressions.MemberBinding[] bindings) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.MemberBind(System.Reflection.MethodInfo,System.Linq.Expressions.MemberBinding[])" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function MemberBind (propertyAccessor As MethodInfo, ParamArray bindings As MemberBinding()) As MemberMemberBinding" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Linq::Expressions::MemberMemberBinding ^ MemberBind(System::Reflection::MethodInfo ^ propertyAccessor, ... cli::array &lt;System::Linq::Expressions::MemberBinding ^&gt; ^ bindings);" />
      <MemberSignature Language="F#" Value="static member MemberBind : System.Reflection.MethodInfo * System.Linq.Expressions.MemberBinding[] -&gt; System.Linq.Expressions.MemberMemberBinding" Usage="System.Linq.Expressions.Expression.MemberBind (propertyAccessor, bindings)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.MemberMemberBinding</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="propertyAccessor" Type="System.Reflection.MethodInfo" />
        <Parameter Name="bindings" Type="System.Linq.Expressions.MemberBinding[]">
          <Attributes>
            <Attribute>
              <AttributeName>System.ParamArray</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="propertyAccessor">
          <span data-ttu-id="fef91-2334">
            <see cref="T:System.Reflection.MethodInfo" />, представляющий метод доступа к свойству.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fef91-2334">The <see cref="T:System.Reflection.MethodInfo" /> that represents a property accessor method.</span>
          </span>
        </param>
        <param name="bindings">
          <span data-ttu-id="fef91-2335">Массив объектов <see cref="T:System.Linq.Expressions.MemberBinding" /> для заполнения коллекции <see cref="P:System.Linq.Expressions.MemberMemberBinding.Bindings" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fef91-2335">An array of <see cref="T:System.Linq.Expressions.MemberBinding" /> objects to use to populate the <see cref="P:System.Linq.Expressions.MemberMemberBinding.Bindings" /> collection.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="fef91-2336">Создает <see cref="T:System.Linq.Expressions.MemberMemberBinding" />, который представляет рекурсивную инициализацию элементов элемента, доступ к которому осуществляется с помощью метода доступа свойства.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fef91-2336">Creates a <see cref="T:System.Linq.Expressions.MemberMemberBinding" /> that represents the recursive initialization of members of a member that is accessed by using a property accessor method.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="fef91-2337">Выражение <see cref="T:System.Linq.Expressions.MemberMemberBinding" />, содержащее свойство <see cref="P:System.Linq.Expressions.MemberBinding.BindingType" />, равное <see cref="F:System.Linq.Expressions.MemberBindingType.MemberBinding" />, свойство <see cref="P:System.Linq.Expressions.MemberBinding.Member" />, для которого задано значение <see cref="T:System.Reflection.PropertyInfo" />, представляющее свойство с доступом в <paramref name="propertyAccessor" />, и свойства <see cref="P:System.Linq.Expressions.MemberMemberBinding.Bindings" />, для которых заданы указанные значения.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fef91-2337">A <see cref="T:System.Linq.Expressions.MemberMemberBinding" /> that has the <see cref="P:System.Linq.Expressions.MemberBinding.BindingType" /> property equal to <see cref="F:System.Linq.Expressions.MemberBindingType.MemberBinding" />, the <see cref="P:System.Linq.Expressions.MemberBinding.Member" /> property set to the <see cref="T:System.Reflection.PropertyInfo" /> that represents the property accessed in <paramref name="propertyAccessor" />, and <see cref="P:System.Linq.Expressions.MemberMemberBinding.Bindings" /> properties set to the specified values.</span>
          </span>
        </returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="fef91-2338">Значение параметра <paramref name="propertyAccessor" /> или <paramref name="bindings" /> — <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fef91-2338">
              <paramref name="propertyAccessor" /> or <paramref name="bindings" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="fef91-2339">
            <paramref name="propertyAccessor" /> не представляет метод доступа к свойству.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fef91-2339">
              <paramref name="propertyAccessor" /> does not represent a property accessor method.</span>
          </span>
          <span data-ttu-id="fef91-2340">-или-</span>
          <span class="sxs-lookup">
            <span data-stu-id="fef91-2340">-or-</span>
          </span>
          <span data-ttu-id="fef91-2341">Свойство <see cref="P:System.Linq.Expressions.MemberBinding.Member" /> элемента <paramref name="bindings" /> не представляет элемент типа свойства, доступ к которому осуществляется методом, который представляет <paramref name="propertyAccessor" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fef91-2341">The <see cref="P:System.Linq.Expressions.MemberBinding.Member" /> property of an element of <paramref name="bindings" /> does not represent a member of the type of the property accessed by the method that <paramref name="propertyAccessor" /> represents.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <MemberGroup MemberName="MemberInit">
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="fef91-2342">Представляет выражение, создающее новый объект и инициализирующее свойство объекта.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fef91-2342">Represents an expression that creates a new object and initializes a property of the object.</span>
          </span>
        </summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="MemberInit">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.MemberInitExpression MemberInit (System.Linq.Expressions.NewExpression newExpression, System.Collections.Generic.IEnumerable&lt;System.Linq.Expressions.MemberBinding&gt; bindings);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.MemberInitExpression MemberInit(class System.Linq.Expressions.NewExpression newExpression, class System.Collections.Generic.IEnumerable`1&lt;class System.Linq.Expressions.MemberBinding&gt; bindings) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.MemberInit(System.Linq.Expressions.NewExpression,System.Collections.Generic.IEnumerable{System.Linq.Expressions.MemberBinding})" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Linq::Expressions::MemberInitExpression ^ MemberInit(System::Linq::Expressions::NewExpression ^ newExpression, System::Collections::Generic::IEnumerable&lt;System::Linq::Expressions::MemberBinding ^&gt; ^ bindings);" />
      <MemberSignature Language="F#" Value="static member MemberInit : System.Linq.Expressions.NewExpression * seq&lt;System.Linq.Expressions.MemberBinding&gt; -&gt; System.Linq.Expressions.MemberInitExpression" Usage="System.Linq.Expressions.Expression.MemberInit (newExpression, bindings)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.MemberInitExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="newExpression" Type="System.Linq.Expressions.NewExpression" />
        <Parameter Name="bindings" Type="System.Collections.Generic.IEnumerable&lt;System.Linq.Expressions.MemberBinding&gt;" />
      </Parameters>
      <Docs>
        <param name="newExpression">
          <span data-ttu-id="fef91-2343">Объект <see cref="T:System.Linq.Expressions.NewExpression" />, который следует задать в качестве значения свойства <see cref="P:System.Linq.Expressions.MemberInitExpression.NewExpression" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fef91-2343">A <see cref="T:System.Linq.Expressions.NewExpression" /> to set the <see cref="P:System.Linq.Expressions.MemberInitExpression.NewExpression" /> property equal to.</span>
          </span>
        </param>
        <param name="bindings">
          <span data-ttu-id="fef91-2344">
            <see cref="T:System.Collections.Generic.IEnumerable`1" />, содержащий все объекты <see cref="T:System.Linq.Expressions.MemberBinding" />, используемые для заполнения коллекции <see cref="P:System.Linq.Expressions.MemberInitExpression.Bindings" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fef91-2344">An <see cref="T:System.Collections.Generic.IEnumerable`1" /> that contains <see cref="T:System.Linq.Expressions.MemberBinding" /> objects to use to populate the <see cref="P:System.Linq.Expressions.MemberInitExpression.Bindings" /> collection.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="fef91-2345">Представляет выражение, создающее новый объект и инициализирующее свойство объекта.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fef91-2345">Represents an expression that creates a new object and initializes a property of the object.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="fef91-2346">Выражение <see cref="T:System.Linq.Expressions.MemberInitExpression" /> со свойством<see cref="P:System.Linq.Expressions.Expression.NodeType" />, равным <see cref="F:System.Linq.Expressions.ExpressionType.MemberInit" />, и свойствами <see cref="P:System.Linq.Expressions.MemberInitExpression.NewExpression" /> и <see cref="P:System.Linq.Expressions.MemberInitExpression.Bindings" />, для которых заданы указанные значения.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fef91-2346">A <see cref="T:System.Linq.Expressions.MemberInitExpression" /> that has the <see cref="P:System.Linq.Expressions.Expression.NodeType" /> property equal to <see cref="F:System.Linq.Expressions.ExpressionType.MemberInit" /> and the <see cref="P:System.Linq.Expressions.MemberInitExpression.NewExpression" /> and <see cref="P:System.Linq.Expressions.MemberInitExpression.Bindings" /> properties set to the specified values.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="fef91-2347"><xref:System.Linq.Expressions.Expression.Type%2A> Результирующего <xref:System.Linq.Expressions.MemberInitExpression> равен <xref:System.Linq.Expressions.Expression.Type%2A> свойство `newExpression`.</span><span class="sxs-lookup"><span data-stu-id="fef91-2347">The <xref:System.Linq.Expressions.Expression.Type%2A> property of the resulting <xref:System.Linq.Expressions.MemberInitExpression> is equal to the <xref:System.Linq.Expressions.Expression.Type%2A> property of `newExpression`.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="fef91-2348">В следующем примере показано выражение, которое создает новый объект и инициализирующее свойство объекта.</span><span class="sxs-lookup"><span data-stu-id="fef91-2348">The following example demonstrates an expression that creates a new object and initializes a property of the object.</span></span>  
  
 [!code-csharp[System.Linq.Expressions.ExpressionDev10#40](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.linq.expressions.expressiondev10/cs/program.cs#40)]
 [!code-vb[System.Linq.Expressions.ExpressionDev10#40](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.linq.expressions.expressiondev10/vb/module1.vb#40)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="fef91-2349">Значение параметра <paramref name="newExpression" /> или <paramref name="bindings" /> — <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fef91-2349">
              <paramref name="newExpression" /> or <paramref name="bindings" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="fef91-2350">Свойство <see cref="P:System.Linq.Expressions.MemberBinding.Member" /> элемента <paramref name="bindings" /> не представляет элемент типа поля или свойства, который представляет <paramref name="newExpression" />.Type.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fef91-2350">The <see cref="P:System.Linq.Expressions.MemberBinding.Member" /> property of an element of <paramref name="bindings" /> does not represent a member of the type that <paramref name="newExpression" />.Type represents.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="MemberInit">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.MemberInitExpression MemberInit (System.Linq.Expressions.NewExpression newExpression, params System.Linq.Expressions.MemberBinding[] bindings);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.MemberInitExpression MemberInit(class System.Linq.Expressions.NewExpression newExpression, class System.Linq.Expressions.MemberBinding[] bindings) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.MemberInit(System.Linq.Expressions.NewExpression,System.Linq.Expressions.MemberBinding[])" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Linq::Expressions::MemberInitExpression ^ MemberInit(System::Linq::Expressions::NewExpression ^ newExpression, ... cli::array &lt;System::Linq::Expressions::MemberBinding ^&gt; ^ bindings);" />
      <MemberSignature Language="F#" Value="static member MemberInit : System.Linq.Expressions.NewExpression * System.Linq.Expressions.MemberBinding[] -&gt; System.Linq.Expressions.MemberInitExpression" Usage="System.Linq.Expressions.Expression.MemberInit (newExpression, bindings)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.MemberInitExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="newExpression" Type="System.Linq.Expressions.NewExpression" />
        <Parameter Name="bindings" Type="System.Linq.Expressions.MemberBinding[]">
          <Attributes>
            <Attribute>
              <AttributeName>System.ParamArray</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="newExpression">
          <span data-ttu-id="fef91-2351">Объект <see cref="T:System.Linq.Expressions.NewExpression" />, который следует задать в качестве значения свойства <see cref="P:System.Linq.Expressions.MemberInitExpression.NewExpression" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fef91-2351">A <see cref="T:System.Linq.Expressions.NewExpression" /> to set the <see cref="P:System.Linq.Expressions.MemberInitExpression.NewExpression" /> property equal to.</span>
          </span>
        </param>
        <param name="bindings">
          <span data-ttu-id="fef91-2352">Массив объектов <see cref="T:System.Linq.Expressions.MemberBinding" /> для заполнения коллекции <see cref="P:System.Linq.Expressions.MemberInitExpression.Bindings" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fef91-2352">An array of <see cref="T:System.Linq.Expressions.MemberBinding" /> objects to use to populate the <see cref="P:System.Linq.Expressions.MemberInitExpression.Bindings" /> collection.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="fef91-2353">Создает буфер <see cref="T:System.Linq.Expressions.MemberInitExpression" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fef91-2353">Creates a <see cref="T:System.Linq.Expressions.MemberInitExpression" />.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="fef91-2354">Выражение <see cref="T:System.Linq.Expressions.MemberInitExpression" /> со свойством<see cref="P:System.Linq.Expressions.Expression.NodeType" />, равным <see cref="F:System.Linq.Expressions.ExpressionType.MemberInit" />, и свойствами <see cref="P:System.Linq.Expressions.MemberInitExpression.NewExpression" /> и <see cref="P:System.Linq.Expressions.MemberInitExpression.Bindings" />, для которых заданы указанные значения.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fef91-2354">A <see cref="T:System.Linq.Expressions.MemberInitExpression" /> that has the <see cref="P:System.Linq.Expressions.Expression.NodeType" /> property equal to <see cref="F:System.Linq.Expressions.ExpressionType.MemberInit" /> and the <see cref="P:System.Linq.Expressions.MemberInitExpression.NewExpression" /> and <see cref="P:System.Linq.Expressions.MemberInitExpression.Bindings" /> properties set to the specified values.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="fef91-2355"><xref:System.Linq.Expressions.Expression.Type%2A> Результирующего <xref:System.Linq.Expressions.MemberInitExpression> равен <xref:System.Linq.Expressions.Expression.Type%2A> свойство `newExpression`.</span><span class="sxs-lookup"><span data-stu-id="fef91-2355">The <xref:System.Linq.Expressions.Expression.Type%2A> property of the resulting <xref:System.Linq.Expressions.MemberInitExpression> is equal to the <xref:System.Linq.Expressions.Expression.Type%2A> property of `newExpression`.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="fef91-2356">Следующий пример демонстрирует, как использовать <xref:System.Linq.Expressions.Expression.MemberInit%28System.Linq.Expressions.NewExpression%2CSystem.Linq.Expressions.MemberBinding%5B%5D%29> метод для создания <xref:System.Linq.Expressions.MemberInitExpression> , представляющий Инициализация двух членов нового объекта.</span><span class="sxs-lookup"><span data-stu-id="fef91-2356">The following example demonstrates how to use the <xref:System.Linq.Expressions.Expression.MemberInit%28System.Linq.Expressions.NewExpression%2CSystem.Linq.Expressions.MemberBinding%5B%5D%29> method to create a <xref:System.Linq.Expressions.MemberInitExpression> that represents the initialization of two members of a new object.</span></span>  
  
 [!code-csharp[System.Linq.Expressions.Expression#9](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Linq.Expressions.Expression/CS/Expression.cs#9)]
 [!code-vb[System.Linq.Expressions.Expression#9](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Linq.Expressions.Expression/VB/Expression.vb#9)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="fef91-2357">Значение параметра <paramref name="newExpression" /> или <paramref name="bindings" /> — <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fef91-2357">
              <paramref name="newExpression" /> or <paramref name="bindings" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="fef91-2358">Свойство <see cref="P:System.Linq.Expressions.MemberBinding.Member" /> элемента <paramref name="bindings" /> не представляет элемент типа поля или свойства, который представляет <paramref name="newExpression" />.Type.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fef91-2358">The <see cref="P:System.Linq.Expressions.MemberBinding.Member" /> property of an element of <paramref name="bindings" /> does not represent a member of the type that <paramref name="newExpression" />.Type represents.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <MemberGroup MemberName="Modulo">
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="fef91-2359">Создает <see cref="T:System.Linq.Expressions.BinaryExpression" />, представляющий операцию арифметического остатка.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fef91-2359">Creates a <see cref="T:System.Linq.Expressions.BinaryExpression" /> that represents an arithmetic remainder operation.</span>
          </span>
        </summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Modulo">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.BinaryExpression Modulo (System.Linq.Expressions.Expression left, System.Linq.Expressions.Expression right);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.BinaryExpression Modulo(class System.Linq.Expressions.Expression left, class System.Linq.Expressions.Expression right) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.Modulo(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Modulo (left As Expression, right As Expression) As BinaryExpression" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Linq::Expressions::BinaryExpression ^ Modulo(System::Linq::Expressions::Expression ^ left, System::Linq::Expressions::Expression ^ right);" />
      <MemberSignature Language="F#" Value="static member Modulo : System.Linq.Expressions.Expression * System.Linq.Expressions.Expression -&gt; System.Linq.Expressions.BinaryExpression" Usage="System.Linq.Expressions.Expression.Modulo (left, right)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.BinaryExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="left" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="right" Type="System.Linq.Expressions.Expression" />
      </Parameters>
      <Docs>
        <param name="left">
          <span data-ttu-id="fef91-2360">Объект <see cref="T:System.Linq.Expressions.Expression" />, который следует задать в качестве значения свойства <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fef91-2360">An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> property equal to.</span>
          </span>
        </param>
        <param name="right">
          <span data-ttu-id="fef91-2361">Объект <see cref="T:System.Linq.Expressions.Expression" />, который следует задать в качестве значения свойства <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fef91-2361">An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> property equal to.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="fef91-2362">Создает <see cref="T:System.Linq.Expressions.BinaryExpression" />, представляющий операцию арифметического остатка.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fef91-2362">Creates a <see cref="T:System.Linq.Expressions.BinaryExpression" /> that represents an arithmetic remainder operation.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="fef91-2363">Выражение <see cref="T:System.Linq.Expressions.BinaryExpression" /> со свойством<see cref="P:System.Linq.Expressions.Expression.NodeType" />, равным <see cref="F:System.Linq.Expressions.ExpressionType.Modulo" />, и свойствами <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> и <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />, для которых заданы указанные значения.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fef91-2363">A <see cref="T:System.Linq.Expressions.BinaryExpression" /> that has the <see cref="P:System.Linq.Expressions.Expression.NodeType" /> property equal to <see cref="F:System.Linq.Expressions.ExpressionType.Modulo" /> and the <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> and <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> properties set to the specified values.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="fef91-2364">Полученный в результате <xref:System.Linq.Expressions.BinaryExpression> имеет <xref:System.Linq.Expressions.BinaryExpression.Method%2A> свойство присвоено метод реализации.</span><span class="sxs-lookup"><span data-stu-id="fef91-2364">The resulting <xref:System.Linq.Expressions.BinaryExpression> has the <xref:System.Linq.Expressions.BinaryExpression.Method%2A> property set to the implementing method.</span></span> <span data-ttu-id="fef91-2365"><xref:System.Linq.Expressions.Expression.Type%2A> Свойству присваивается тип узла.</span><span class="sxs-lookup"><span data-stu-id="fef91-2365">The <xref:System.Linq.Expressions.Expression.Type%2A> property is set to the type of the node.</span></span> <span data-ttu-id="fef91-2366">Если узел удаляется, <xref:System.Linq.Expressions.BinaryExpression.IsLifted%2A> и <xref:System.Linq.Expressions.BinaryExpression.IsLiftedToNull%2A> оба являются свойства `true`.</span><span class="sxs-lookup"><span data-stu-id="fef91-2366">If the node is lifted, the <xref:System.Linq.Expressions.BinaryExpression.IsLifted%2A> and <xref:System.Linq.Expressions.BinaryExpression.IsLiftedToNull%2A> properties are both `true`.</span></span> <span data-ttu-id="fef91-2367">В противном случае они `false`.</span><span class="sxs-lookup"><span data-stu-id="fef91-2367">Otherwise, they are `false`.</span></span> <span data-ttu-id="fef91-2368">Значение свойства <xref:System.Linq.Expressions.BinaryExpression.Conversion%2A> — `null`.</span><span class="sxs-lookup"><span data-stu-id="fef91-2368">The <xref:System.Linq.Expressions.BinaryExpression.Conversion%2A> property is `null`.</span></span>  
  
 <span data-ttu-id="fef91-2369">Ниже описывается метод реализации, тип узла и ликвидирован ли данный узел.</span><span class="sxs-lookup"><span data-stu-id="fef91-2369">The following information describes the implementing method, the node type, and whether a node is lifted.</span></span>  
  
#### <a name="implementing-method"></a><span data-ttu-id="fef91-2370">Реализация метода</span><span class="sxs-lookup"><span data-stu-id="fef91-2370">Implementing Method</span></span>  
 <span data-ttu-id="fef91-2371">Следующие правила определяют выбранный метод реализации для операции:</span><span class="sxs-lookup"><span data-stu-id="fef91-2371">The following rules determine the selected implementing method for the operation:</span></span>  
  
-   <span data-ttu-id="fef91-2372">Если <xref:System.Linq.Expressions.Expression.Type%2A> свойству `left` или `right` представляет определяемый пользователем тип, который перегружает оператор modulus <xref:System.Reflection.MethodInfo> , представляющий, что метод является методом реализации.</span><span class="sxs-lookup"><span data-stu-id="fef91-2372">If the <xref:System.Linq.Expressions.Expression.Type%2A> property of either `left` or `right` represents a user-defined type that overloads the modulus operator, the <xref:System.Reflection.MethodInfo> that represents that method is the implementing method.</span></span>  
  
-   <span data-ttu-id="fef91-2373">В противном случае, если `left`. Тип и `right`. Тип: числовые типы, метод реализации является `null`.</span><span class="sxs-lookup"><span data-stu-id="fef91-2373">Otherwise, if `left`.Type and `right`.Type are numeric types, the implementing method is `null`.</span></span>  
  
#### <a name="node-type-and-lifted-versus-non-lifted"></a><span data-ttu-id="fef91-2374">Тип узла с ликвидацией или без</span><span class="sxs-lookup"><span data-stu-id="fef91-2374">Node Type and Lifted versus Non-Lifted</span></span>  
 <span data-ttu-id="fef91-2375">Если метод реализации не `null`:</span><span class="sxs-lookup"><span data-stu-id="fef91-2375">If the implementing method is not `null`:</span></span>  
  
-   <span data-ttu-id="fef91-2376">Если `left`. Тип и `right`. Тип могут быть присвоены соответствующие типы аргументов метода реализации, узел не удаляется.</span><span class="sxs-lookup"><span data-stu-id="fef91-2376">If `left`.Type and `right`.Type are assignable to the corresponding argument types of the implementing method, the node is not lifted.</span></span> <span data-ttu-id="fef91-2377">Тип узла — тип возвращаемого значения метода реализации.</span><span class="sxs-lookup"><span data-stu-id="fef91-2377">The type of the node is the return type of the implementing method.</span></span>  
  
-   <span data-ttu-id="fef91-2378">Если выполняются два следующих условия, узел удаляется, а тип узла — обнуляемый тип, соответствующий тип возвращаемого значения метода реализации:</span><span class="sxs-lookup"><span data-stu-id="fef91-2378">If the following two conditions are satisfied, the node is lifted and the type of the node is the nullable type that corresponds to the return type of the implementing method:</span></span>  
  
    -   <span data-ttu-id="fef91-2379">`left`. Тип и `right`. Тип: обоих типов значений, из которых хотя бы один допускает значения NULL и соответствующие типы, не допускающие значения null равны соответствующие типы аргументов метода реализации.</span><span class="sxs-lookup"><span data-stu-id="fef91-2379">`left`.Type and `right`.Type are both value types of which at least one is nullable and the corresponding non-nullable types are equal to the corresponding argument types of the implementing method.</span></span>  
  
    -   <span data-ttu-id="fef91-2380">Тип возвращаемого значения метода реализации является типом значения, не допускающие значения NULL.</span><span class="sxs-lookup"><span data-stu-id="fef91-2380">The return type of the implementing method is a non-nullable value type.</span></span>  
  
 <span data-ttu-id="fef91-2381">Если метод реализации `null`:</span><span class="sxs-lookup"><span data-stu-id="fef91-2381">If the implementing method is `null`:</span></span>  
  
-   <span data-ttu-id="fef91-2382">Если `left`. Тип и `right`. Тип: оба не поддерживающими значение NULL, узел не удаляется.</span><span class="sxs-lookup"><span data-stu-id="fef91-2382">If `left`.Type and `right`.Type are both non-nullable, the node is not lifted.</span></span> <span data-ttu-id="fef91-2383">Тип узла является типом результата определенного оператора модуля.</span><span class="sxs-lookup"><span data-stu-id="fef91-2383">The type of the node is the result type of the predefined modulus operator.</span></span>  
  
-   <span data-ttu-id="fef91-2384">Если `left`. Тип и `right`. Тип: значение NULL, узел удаляется.</span><span class="sxs-lookup"><span data-stu-id="fef91-2384">If `left`.Type and `right`.Type are both nullable, the node is lifted.</span></span> <span data-ttu-id="fef91-2385">Тип узла — обнуляемый тип, соответствующий тип результата определенного оператора модуля.</span><span class="sxs-lookup"><span data-stu-id="fef91-2385">The type of the node is the nullable type that corresponds to the result type of the predefined modulus operator.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="fef91-2386">Значение параметра <paramref name="left" /> или <paramref name="right" /> — <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fef91-2386">
              <paramref name="left" /> or <paramref name="right" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.InvalidOperationException">
          <span data-ttu-id="fef91-2387">Оператор модуля не определен для типов <paramref name="left" />.Type и <paramref name="right" />.Type.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fef91-2387">The modulus operator is not defined for <paramref name="left" />.Type and <paramref name="right" />.Type.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="Modulo">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.BinaryExpression Modulo (System.Linq.Expressions.Expression left, System.Linq.Expressions.Expression right, System.Reflection.MethodInfo method);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.BinaryExpression Modulo(class System.Linq.Expressions.Expression left, class System.Linq.Expressions.Expression right, class System.Reflection.MethodInfo method) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.Modulo(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Modulo (left As Expression, right As Expression, method As MethodInfo) As BinaryExpression" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Linq::Expressions::BinaryExpression ^ Modulo(System::Linq::Expressions::Expression ^ left, System::Linq::Expressions::Expression ^ right, System::Reflection::MethodInfo ^ method);" />
      <MemberSignature Language="F#" Value="static member Modulo : System.Linq.Expressions.Expression * System.Linq.Expressions.Expression * System.Reflection.MethodInfo -&gt; System.Linq.Expressions.BinaryExpression" Usage="System.Linq.Expressions.Expression.Modulo (left, right, method)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.BinaryExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="left" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="right" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="method" Type="System.Reflection.MethodInfo" />
      </Parameters>
      <Docs>
        <param name="left">
          <span data-ttu-id="fef91-2388">Объект <see cref="T:System.Linq.Expressions.Expression" />, который следует задать в качестве значения свойства <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fef91-2388">An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> property equal to.</span>
          </span>
        </param>
        <param name="right">
          <span data-ttu-id="fef91-2389">Объект <see cref="T:System.Linq.Expressions.Expression" />, который следует задать в качестве значения свойства <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fef91-2389">An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> property equal to.</span>
          </span>
        </param>
        <param name="method">
          <span data-ttu-id="fef91-2390">Объект <see cref="T:System.Reflection.MethodInfo" />, который следует задать в качестве значения свойства <see cref="P:System.Linq.Expressions.BinaryExpression.Method" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fef91-2390">A <see cref="T:System.Reflection.MethodInfo" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Method" /> property equal to.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="fef91-2391">Создает <see cref="T:System.Linq.Expressions.BinaryExpression" />, представляющий операцию арифметического остатка.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fef91-2391">Creates a <see cref="T:System.Linq.Expressions.BinaryExpression" /> that represents an arithmetic remainder operation.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="fef91-2392">Выражение <see cref="T:System.Linq.Expressions.BinaryExpression" /> со свойством <see cref="P:System.Linq.Expressions.Expression.NodeType" />, равным <see cref="F:System.Linq.Expressions.ExpressionType.Modulo" />, и свойствами <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />, <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> и <see cref="P:System.Linq.Expressions.BinaryExpression.Method" />, для которых заданы указанные значения.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fef91-2392">A <see cref="T:System.Linq.Expressions.BinaryExpression" /> that has the <see cref="P:System.Linq.Expressions.Expression.NodeType" /> property equal to <see cref="F:System.Linq.Expressions.ExpressionType.Modulo" /> and the <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />, <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />, and <see cref="P:System.Linq.Expressions.BinaryExpression.Method" /> properties set to the specified values.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="fef91-2393">Полученный в результате <xref:System.Linq.Expressions.BinaryExpression> имеет <xref:System.Linq.Expressions.BinaryExpression.Method%2A> свойство присвоено метод реализации.</span><span class="sxs-lookup"><span data-stu-id="fef91-2393">The resulting <xref:System.Linq.Expressions.BinaryExpression> has the <xref:System.Linq.Expressions.BinaryExpression.Method%2A> property set to the implementing method.</span></span> <span data-ttu-id="fef91-2394"><xref:System.Linq.Expressions.Expression.Type%2A> Свойству присваивается тип узла.</span><span class="sxs-lookup"><span data-stu-id="fef91-2394">The <xref:System.Linq.Expressions.Expression.Type%2A> property is set to the type of the node.</span></span> <span data-ttu-id="fef91-2395">Если узел удаляется, <xref:System.Linq.Expressions.BinaryExpression.IsLifted%2A> и <xref:System.Linq.Expressions.BinaryExpression.IsLiftedToNull%2A> оба являются свойства `true`.</span><span class="sxs-lookup"><span data-stu-id="fef91-2395">If the node is lifted, the <xref:System.Linq.Expressions.BinaryExpression.IsLifted%2A> and <xref:System.Linq.Expressions.BinaryExpression.IsLiftedToNull%2A> properties are both `true`.</span></span> <span data-ttu-id="fef91-2396">В противном случае они `false`.</span><span class="sxs-lookup"><span data-stu-id="fef91-2396">Otherwise, they are `false`.</span></span> <span data-ttu-id="fef91-2397">Значение свойства <xref:System.Linq.Expressions.BinaryExpression.Conversion%2A> — `null`.</span><span class="sxs-lookup"><span data-stu-id="fef91-2397">The <xref:System.Linq.Expressions.BinaryExpression.Conversion%2A> property is `null`.</span></span>  
  
 <span data-ttu-id="fef91-2398">Ниже описывается метод реализации, тип узла и ликвидирован ли данный узел.</span><span class="sxs-lookup"><span data-stu-id="fef91-2398">The following information describes the implementing method, the node type, and whether a node is lifted.</span></span>  
  
#### <a name="implementing-method"></a><span data-ttu-id="fef91-2399">Реализация метода</span><span class="sxs-lookup"><span data-stu-id="fef91-2399">Implementing Method</span></span>  
 <span data-ttu-id="fef91-2400">Метод реализации для операции, зависит от следующих правил:</span><span class="sxs-lookup"><span data-stu-id="fef91-2400">The implementing method for the operation is chosen based on the following rules:</span></span>  
  
-   <span data-ttu-id="fef91-2401">Если `method` не `null` , и это отличный от void, `static` (`Shared` в Visual Basic) метода, принимающего два аргумента, это метод реализации для узла.</span><span class="sxs-lookup"><span data-stu-id="fef91-2401">If `method` is not `null` and it represents a non-void, `static` (`Shared` in Visual Basic) method that takes two arguments, it is the implementing method for the node.</span></span>  
  
-   <span data-ttu-id="fef91-2402">В противном случае, если <xref:System.Linq.Expressions.Expression.Type%2A> свойству `left` или `right` представляет определяемый пользователем тип, который перегружает оператор modulus <xref:System.Reflection.MethodInfo> , представляющий, что метод является методом реализации.</span><span class="sxs-lookup"><span data-stu-id="fef91-2402">Otherwise, if the <xref:System.Linq.Expressions.Expression.Type%2A> property of either `left` or `right` represents a user-defined type that overloads the modulus operator, the <xref:System.Reflection.MethodInfo> that represents that method is the implementing method.</span></span>  
  
-   <span data-ttu-id="fef91-2403">В противном случае, если `left`. Тип и `right`. Тип: числовые типы, метод реализации является `null`.</span><span class="sxs-lookup"><span data-stu-id="fef91-2403">Otherwise, if `left`.Type and `right`.Type are numeric types, the implementing method is `null`.</span></span>  
  
#### <a name="node-type-and-lifted-versus-non-lifted"></a><span data-ttu-id="fef91-2404">Тип узла с ликвидацией или без</span><span class="sxs-lookup"><span data-stu-id="fef91-2404">Node Type and Lifted versus Non-Lifted</span></span>  
 <span data-ttu-id="fef91-2405">Если метод реализации не `null`:</span><span class="sxs-lookup"><span data-stu-id="fef91-2405">If the implementing method is not `null`:</span></span>  
  
-   <span data-ttu-id="fef91-2406">Если `left`. Тип и `right`. Тип могут быть присвоены соответствующие типы аргументов метода реализации, узел не удаляется.</span><span class="sxs-lookup"><span data-stu-id="fef91-2406">If `left`.Type and `right`.Type are assignable to the corresponding argument types of the implementing method, the node is not lifted.</span></span> <span data-ttu-id="fef91-2407">Тип узла — тип возвращаемого значения метода реализации.</span><span class="sxs-lookup"><span data-stu-id="fef91-2407">The type of the node is the return type of the implementing method.</span></span>  
  
-   <span data-ttu-id="fef91-2408">Если выполняются два следующих условия, узел удаляется, а тип узла — обнуляемый тип, соответствующий тип возвращаемого значения метода реализации:</span><span class="sxs-lookup"><span data-stu-id="fef91-2408">If the following two conditions are satisfied, the node is lifted and the type of the node is the nullable type that corresponds to the return type of the implementing method:</span></span>  
  
    -   <span data-ttu-id="fef91-2409">`left`. Тип и `right`. Тип: обоих типов значений, из которых хотя бы один допускает значения NULL и соответствующие типы, не допускающие значения null равны соответствующие типы аргументов метода реализации.</span><span class="sxs-lookup"><span data-stu-id="fef91-2409">`left`.Type and `right`.Type are both value types of which at least one is nullable and the corresponding non-nullable types are equal to the corresponding argument types of the implementing method.</span></span>  
  
    -   <span data-ttu-id="fef91-2410">Тип возвращаемого значения метода реализации является типом значения, не допускающие значения NULL.</span><span class="sxs-lookup"><span data-stu-id="fef91-2410">The return type of the implementing method is a non-nullable value type.</span></span>  
  
 <span data-ttu-id="fef91-2411">Если метод реализации `null`:</span><span class="sxs-lookup"><span data-stu-id="fef91-2411">If the implementing method is `null`:</span></span>  
  
-   <span data-ttu-id="fef91-2412">Если `left`. Тип и `right`. Тип: оба не поддерживающими значение NULL, узел не удаляется.</span><span class="sxs-lookup"><span data-stu-id="fef91-2412">If `left`.Type and `right`.Type are both non-nullable, the node is not lifted.</span></span> <span data-ttu-id="fef91-2413">Тип узла является типом результата определенного оператора модуля.</span><span class="sxs-lookup"><span data-stu-id="fef91-2413">The type of the node is the result type of the predefined modulus operator.</span></span>  
  
-   <span data-ttu-id="fef91-2414">Если `left`. Тип и `right`. Тип: значение NULL, узел удаляется.</span><span class="sxs-lookup"><span data-stu-id="fef91-2414">If `left`.Type and `right`.Type are both nullable, the node is lifted.</span></span> <span data-ttu-id="fef91-2415">Тип узла — обнуляемый тип, соответствующий тип результата определенного оператора модуля.</span><span class="sxs-lookup"><span data-stu-id="fef91-2415">The type of the node is the nullable type that corresponds to the result type of the predefined modulus operator.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="fef91-2416">Значение параметра <paramref name="left" /> или <paramref name="right" /> — <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fef91-2416">
              <paramref name="left" /> or <paramref name="right" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="fef91-2417">Значение параметра <paramref name="method" /> не равно <see langword="null" />, и метод, который оно представляет, возвращает <see langword="void" />, не является <see langword="static" /> (<see langword="Shared" /> в Visual Basic) и не принимает ровно два аргумента.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fef91-2417">
              <paramref name="method" /> is not <see langword="null" /> and the method it represents returns <see langword="void" />, is not <see langword="static" /> (<see langword="Shared" /> in Visual Basic), or does not take exactly two arguments.</span>
          </span>
        </exception>
        <exception cref="T:System.InvalidOperationException">
          <span data-ttu-id="fef91-2418">Значение <paramref name="method" /> равно <see langword="null" />, а оператор модуля не определен для типов <paramref name="left" />.Type и <paramref name="right" />.Type.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fef91-2418">
              <paramref name="method" /> is <see langword="null" /> and the modulus operator is not defined for <paramref name="left" />.Type and <paramref name="right" />.Type.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <MemberGroup MemberName="ModuloAssign">
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="fef91-2419">Создает объект <see cref="T:System.Linq.Expressions.BinaryExpression" />, представляющий операцию присваивания остатка.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fef91-2419">Creates a <see cref="T:System.Linq.Expressions.BinaryExpression" /> that represents a remainder assignment operation.</span>
          </span>
        </summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="ModuloAssign">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.BinaryExpression ModuloAssign (System.Linq.Expressions.Expression left, System.Linq.Expressions.Expression right);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.BinaryExpression ModuloAssign(class System.Linq.Expressions.Expression left, class System.Linq.Expressions.Expression right) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.ModuloAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function ModuloAssign (left As Expression, right As Expression) As BinaryExpression" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Linq::Expressions::BinaryExpression ^ ModuloAssign(System::Linq::Expressions::Expression ^ left, System::Linq::Expressions::Expression ^ right);" />
      <MemberSignature Language="F#" Value="static member ModuloAssign : System.Linq.Expressions.Expression * System.Linq.Expressions.Expression -&gt; System.Linq.Expressions.BinaryExpression" Usage="System.Linq.Expressions.Expression.ModuloAssign (left, right)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.BinaryExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="left" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="right" Type="System.Linq.Expressions.Expression" />
      </Parameters>
      <Docs>
        <param name="left">
          <span data-ttu-id="fef91-2420">Объект <see cref="T:System.Linq.Expressions.Expression" />, который следует задать в качестве значения свойства <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fef91-2420">An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> property equal to.</span>
          </span>
        </param>
        <param name="right">
          <span data-ttu-id="fef91-2421">Объект <see cref="T:System.Linq.Expressions.Expression" />, который следует задать в качестве значения свойства <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fef91-2421">An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> property equal to.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="fef91-2422">Создает объект <see cref="T:System.Linq.Expressions.BinaryExpression" />, представляющий операцию присваивания остатка.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fef91-2422">Creates a <see cref="T:System.Linq.Expressions.BinaryExpression" /> that represents a remainder assignment operation.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="fef91-2423">Выражение <see cref="T:System.Linq.Expressions.BinaryExpression" /> со свойством<see cref="P:System.Linq.Expressions.Expression.NodeType" />, равным <see cref="F:System.Linq.Expressions.ExpressionType.ModuloAssign" />, и свойствами <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> и <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />, для которых заданы указанные значения.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fef91-2423">A <see cref="T:System.Linq.Expressions.BinaryExpression" /> that has the <see cref="P:System.Linq.Expressions.Expression.NodeType" /> property equal to <see cref="F:System.Linq.Expressions.ExpressionType.ModuloAssign" /> and the <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> and <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> properties set to the specified values.</span>
          </span>
        </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ModuloAssign">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.BinaryExpression ModuloAssign (System.Linq.Expressions.Expression left, System.Linq.Expressions.Expression right, System.Reflection.MethodInfo method);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.BinaryExpression ModuloAssign(class System.Linq.Expressions.Expression left, class System.Linq.Expressions.Expression right, class System.Reflection.MethodInfo method) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.ModuloAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function ModuloAssign (left As Expression, right As Expression, method As MethodInfo) As BinaryExpression" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Linq::Expressions::BinaryExpression ^ ModuloAssign(System::Linq::Expressions::Expression ^ left, System::Linq::Expressions::Expression ^ right, System::Reflection::MethodInfo ^ method);" />
      <MemberSignature Language="F#" Value="static member ModuloAssign : System.Linq.Expressions.Expression * System.Linq.Expressions.Expression * System.Reflection.MethodInfo -&gt; System.Linq.Expressions.BinaryExpression" Usage="System.Linq.Expressions.Expression.ModuloAssign (left, right, method)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.BinaryExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="left" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="right" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="method" Type="System.Reflection.MethodInfo" />
      </Parameters>
      <Docs>
        <param name="left">
          <span data-ttu-id="fef91-2424">Объект <see cref="T:System.Linq.Expressions.Expression" />, который следует задать в качестве значения свойства <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fef91-2424">An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> property equal to.</span>
          </span>
        </param>
        <param name="right">
          <span data-ttu-id="fef91-2425">Объект <see cref="T:System.Linq.Expressions.Expression" />, который следует задать в качестве значения свойства <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fef91-2425">An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> property equal to.</span>
          </span>
        </param>
        <param name="method">
          <span data-ttu-id="fef91-2426">Объект <see cref="T:System.Reflection.MethodInfo" />, который следует задать в качестве значения свойства <see cref="P:System.Linq.Expressions.BinaryExpression.Method" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fef91-2426">A <see cref="T:System.Reflection.MethodInfo" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Method" /> property equal to.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="fef91-2427">Создает объект <see cref="T:System.Linq.Expressions.BinaryExpression" />, представляющий операцию присваивания остатка.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fef91-2427">Creates a <see cref="T:System.Linq.Expressions.BinaryExpression" /> that represents a remainder assignment operation.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="fef91-2428">Выражение <see cref="T:System.Linq.Expressions.BinaryExpression" /> со свойством <see cref="P:System.Linq.Expressions.Expression.NodeType" />, равным <see cref="F:System.Linq.Expressions.ExpressionType.ModuloAssign" />, и свойствами <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />, <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> и <see cref="P:System.Linq.Expressions.BinaryExpression.Method" />, для которых заданы указанные значения.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fef91-2428">A <see cref="T:System.Linq.Expressions.BinaryExpression" /> that has the <see cref="P:System.Linq.Expressions.Expression.NodeType" /> property equal to <see cref="F:System.Linq.Expressions.ExpressionType.ModuloAssign" /> and the <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />, <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />, and <see cref="P:System.Linq.Expressions.BinaryExpression.Method" /> properties set to the specified values.</span>
          </span>
        </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ModuloAssign">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.BinaryExpression ModuloAssign (System.Linq.Expressions.Expression left, System.Linq.Expressions.Expression right, System.Reflection.MethodInfo method, System.Linq.Expressions.LambdaExpression conversion);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.BinaryExpression ModuloAssign(class System.Linq.Expressions.Expression left, class System.Linq.Expressions.Expression right, class System.Reflection.MethodInfo method, class System.Linq.Expressions.LambdaExpression conversion) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.ModuloAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo,System.Linq.Expressions.LambdaExpression)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function ModuloAssign (left As Expression, right As Expression, method As MethodInfo, conversion As LambdaExpression) As BinaryExpression" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Linq::Expressions::BinaryExpression ^ ModuloAssign(System::Linq::Expressions::Expression ^ left, System::Linq::Expressions::Expression ^ right, System::Reflection::MethodInfo ^ method, System::Linq::Expressions::LambdaExpression ^ conversion);" />
      <MemberSignature Language="F#" Value="static member ModuloAssign : System.Linq.Expressions.Expression * System.Linq.Expressions.Expression * System.Reflection.MethodInfo * System.Linq.Expressions.LambdaExpression -&gt; System.Linq.Expressions.BinaryExpression" Usage="System.Linq.Expressions.Expression.ModuloAssign (left, right, method, conversion)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.BinaryExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="left" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="right" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="method" Type="System.Reflection.MethodInfo" />
        <Parameter Name="conversion" Type="System.Linq.Expressions.LambdaExpression" />
      </Parameters>
      <Docs>
        <param name="left">
          <span data-ttu-id="fef91-2429">Объект <see cref="T:System.Linq.Expressions.Expression" />, который следует задать в качестве значения свойства <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fef91-2429">An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> property equal to.</span>
          </span>
        </param>
        <param name="right">
          <span data-ttu-id="fef91-2430">Объект <see cref="T:System.Linq.Expressions.Expression" />, который следует задать в качестве значения свойства <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fef91-2430">An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> property equal to.</span>
          </span>
        </param>
        <param name="method">
          <span data-ttu-id="fef91-2431">Объект <see cref="T:System.Reflection.MethodInfo" />, который следует задать в качестве значения свойства <see cref="P:System.Linq.Expressions.BinaryExpression.Method" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fef91-2431">A <see cref="T:System.Reflection.MethodInfo" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Method" /> property equal to.</span>
          </span>
        </param>
        <param name="conversion">
          <span data-ttu-id="fef91-2432">Объект <see cref="T:System.Linq.Expressions.LambdaExpression" />, который следует задать в качестве значения свойства <see cref="P:System.Linq.Expressions.BinaryExpression.Conversion" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fef91-2432">A <see cref="T:System.Linq.Expressions.LambdaExpression" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Conversion" /> property equal to.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="fef91-2433">Создает объект <see cref="T:System.Linq.Expressions.BinaryExpression" />, представляющий операцию присваивания остатка.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fef91-2433">Creates a <see cref="T:System.Linq.Expressions.BinaryExpression" /> that represents a remainder assignment operation.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="fef91-2434">Выражение <see cref="T:System.Linq.Expressions.BinaryExpression" />, содержащее свойство <see cref="P:System.Linq.Expressions.Expression.NodeType" />, равное <see cref="F:System.Linq.Expressions.ExpressionType.ModuloAssign" /> и <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />, <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />, <see cref="P:System.Linq.Expressions.BinaryExpression.Method" />, и свойства <see cref="P:System.Linq.Expressions.BinaryExpression.Conversion" />, для которых заданы указанные значения.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fef91-2434">A <see cref="T:System.Linq.Expressions.BinaryExpression" /> that has the <see cref="P:System.Linq.Expressions.Expression.NodeType" /> property equal to <see cref="F:System.Linq.Expressions.ExpressionType.ModuloAssign" /> and the <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />, <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />, <see cref="P:System.Linq.Expressions.BinaryExpression.Method" />, and <see cref="P:System.Linq.Expressions.BinaryExpression.Conversion" /> properties set to the specified values.</span>
          </span>
        </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="Multiply">
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="fef91-2435">Создает <see cref="T:System.Linq.Expressions.BinaryExpression" />, представляющий операцию арифметического умножения, не содержащую проверку переполнения.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fef91-2435">Creates a <see cref="T:System.Linq.Expressions.BinaryExpression" /> that represents an arithmetic multiplication operation that does not have overflow checking.</span>
          </span>
        </summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Multiply">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.BinaryExpression Multiply (System.Linq.Expressions.Expression left, System.Linq.Expressions.Expression right);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.BinaryExpression Multiply(class System.Linq.Expressions.Expression left, class System.Linq.Expressions.Expression right) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.Multiply(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Multiply (left As Expression, right As Expression) As BinaryExpression" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Linq::Expressions::BinaryExpression ^ Multiply(System::Linq::Expressions::Expression ^ left, System::Linq::Expressions::Expression ^ right);" />
      <MemberSignature Language="F#" Value="static member Multiply : System.Linq.Expressions.Expression * System.Linq.Expressions.Expression -&gt; System.Linq.Expressions.BinaryExpression" Usage="System.Linq.Expressions.Expression.Multiply (left, right)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.BinaryExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="left" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="right" Type="System.Linq.Expressions.Expression" />
      </Parameters>
      <Docs>
        <param name="left">
          <span data-ttu-id="fef91-2436">Объект <see cref="T:System.Linq.Expressions.Expression" />, который следует задать в качестве значения свойства <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fef91-2436">An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> property equal to.</span>
          </span>
        </param>
        <param name="right">
          <span data-ttu-id="fef91-2437">Объект <see cref="T:System.Linq.Expressions.Expression" />, который следует задать в качестве значения свойства <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fef91-2437">An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> property equal to.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="fef91-2438">Создает <see cref="T:System.Linq.Expressions.BinaryExpression" />, представляющий операцию арифметического умножения, не содержащую проверку переполнения.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fef91-2438">Creates a <see cref="T:System.Linq.Expressions.BinaryExpression" /> that represents an arithmetic multiplication operation that does not have overflow checking.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="fef91-2439">Выражение <see cref="T:System.Linq.Expressions.BinaryExpression" /> со свойством<see cref="P:System.Linq.Expressions.Expression.NodeType" />, равным <see cref="F:System.Linq.Expressions.ExpressionType.Multiply" />, и свойствами <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> и <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />, для которых заданы указанные значения.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fef91-2439">A <see cref="T:System.Linq.Expressions.BinaryExpression" /> that has the <see cref="P:System.Linq.Expressions.Expression.NodeType" /> property equal to <see cref="F:System.Linq.Expressions.ExpressionType.Multiply" /> and the <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> and <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> properties set to the specified values.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="fef91-2440">Полученный в результате <xref:System.Linq.Expressions.BinaryExpression> имеет <xref:System.Linq.Expressions.BinaryExpression.Method%2A> свойство присвоено метод реализации.</span><span class="sxs-lookup"><span data-stu-id="fef91-2440">The resulting <xref:System.Linq.Expressions.BinaryExpression> has the <xref:System.Linq.Expressions.BinaryExpression.Method%2A> property set to the implementing method.</span></span> <span data-ttu-id="fef91-2441"><xref:System.Linq.Expressions.Expression.Type%2A> Свойству присваивается тип узла.</span><span class="sxs-lookup"><span data-stu-id="fef91-2441">The <xref:System.Linq.Expressions.Expression.Type%2A> property is set to the type of the node.</span></span> <span data-ttu-id="fef91-2442">Если узел удаляется, <xref:System.Linq.Expressions.BinaryExpression.IsLifted%2A> и <xref:System.Linq.Expressions.BinaryExpression.IsLiftedToNull%2A> оба являются свойства `true`.</span><span class="sxs-lookup"><span data-stu-id="fef91-2442">If the node is lifted, the <xref:System.Linq.Expressions.BinaryExpression.IsLifted%2A> and <xref:System.Linq.Expressions.BinaryExpression.IsLiftedToNull%2A> properties are both `true`.</span></span> <span data-ttu-id="fef91-2443">В противном случае они `false`.</span><span class="sxs-lookup"><span data-stu-id="fef91-2443">Otherwise, they are `false`.</span></span> <span data-ttu-id="fef91-2444">Значение свойства <xref:System.Linq.Expressions.BinaryExpression.Conversion%2A> — `null`.</span><span class="sxs-lookup"><span data-stu-id="fef91-2444">The <xref:System.Linq.Expressions.BinaryExpression.Conversion%2A> property is `null`.</span></span>  
  
 <span data-ttu-id="fef91-2445">Ниже описывается метод реализации, тип узла и ликвидирован ли данный узел.</span><span class="sxs-lookup"><span data-stu-id="fef91-2445">The following information describes the implementing method, the node type, and whether a node is lifted.</span></span>  
  
#### <a name="implementing-method"></a><span data-ttu-id="fef91-2446">Реализация метода</span><span class="sxs-lookup"><span data-stu-id="fef91-2446">Implementing Method</span></span>  
 <span data-ttu-id="fef91-2447">Следующие правила определяют выбранный метод реализации для операции:</span><span class="sxs-lookup"><span data-stu-id="fef91-2447">The following rules determine the selected implementing method for the operation:</span></span>  
  
-   <span data-ttu-id="fef91-2448">Если <xref:System.Linq.Expressions.Expression.Type%2A> свойству `left` или `right` представляет определяемый пользователем тип, который перегружает оператор умножения <xref:System.Reflection.MethodInfo> , представляющий, что метод является методом реализации.</span><span class="sxs-lookup"><span data-stu-id="fef91-2448">If the <xref:System.Linq.Expressions.Expression.Type%2A> property of either `left` or `right` represents a user-defined type that overloads the multiplication operator, the <xref:System.Reflection.MethodInfo> that represents that method is the implementing method.</span></span>  
  
-   <span data-ttu-id="fef91-2449">В противном случае, если `left`. Тип и `right`. Тип: числовые типы, метод реализации является `null`.</span><span class="sxs-lookup"><span data-stu-id="fef91-2449">Otherwise, if `left`.Type and `right`.Type are numeric types, the implementing method is `null`.</span></span>  
  
#### <a name="node-type-and-lifted-versus-non-lifted"></a><span data-ttu-id="fef91-2450">Тип узла с ликвидацией или без</span><span class="sxs-lookup"><span data-stu-id="fef91-2450">Node Type and Lifted versus Non-Lifted</span></span>  
 <span data-ttu-id="fef91-2451">Если метод реализации не `null`:</span><span class="sxs-lookup"><span data-stu-id="fef91-2451">If the implementing method is not `null`:</span></span>  
  
-   <span data-ttu-id="fef91-2452">Если `left`. Тип и `right`. Тип могут быть присвоены соответствующие типы аргументов метода реализации, узел не удаляется.</span><span class="sxs-lookup"><span data-stu-id="fef91-2452">If `left`.Type and `right`.Type are assignable to the corresponding argument types of the implementing method, the node is not lifted.</span></span> <span data-ttu-id="fef91-2453">Тип узла — тип возвращаемого значения метода реализации.</span><span class="sxs-lookup"><span data-stu-id="fef91-2453">The type of the node is the return type of the implementing method.</span></span>  
  
-   <span data-ttu-id="fef91-2454">Если выполняются два следующих условия, узел удаляется, а тип узла — обнуляемый тип, соответствующий тип возвращаемого значения метода реализации:</span><span class="sxs-lookup"><span data-stu-id="fef91-2454">If the following two conditions are satisfied, the node is lifted and the type of the node is the nullable type that corresponds to the return type of the implementing method:</span></span>  
  
    -   <span data-ttu-id="fef91-2455">`left`. Тип и `right`. Тип: обоих типов значений, из которых хотя бы один допускает значения NULL и соответствующие типы, не допускающие значения null равны соответствующие типы аргументов метода реализации.</span><span class="sxs-lookup"><span data-stu-id="fef91-2455">`left`.Type and `right`.Type are both value types of which at least one is nullable and the corresponding non-nullable types are equal to the corresponding argument types of the implementing method.</span></span>  
  
    -   <span data-ttu-id="fef91-2456">Тип возвращаемого значения метода реализации является типом значения, не допускающие значения NULL.</span><span class="sxs-lookup"><span data-stu-id="fef91-2456">The return type of the implementing method is a non-nullable value type.</span></span>  
  
 <span data-ttu-id="fef91-2457">Если метод реализации `null`:</span><span class="sxs-lookup"><span data-stu-id="fef91-2457">If the implementing method is `null`:</span></span>  
  
-   <span data-ttu-id="fef91-2458">Если `left`. Тип и `right`. Тип: оба не поддерживающими значение NULL, узел не удаляется.</span><span class="sxs-lookup"><span data-stu-id="fef91-2458">If `left`.Type and `right`.Type are both non-nullable, the node is not lifted.</span></span> <span data-ttu-id="fef91-2459">Тип узла является типом результата определенного оператора умножения.</span><span class="sxs-lookup"><span data-stu-id="fef91-2459">The type of the node is the result type of the predefined multiplication operator.</span></span>  
  
-   <span data-ttu-id="fef91-2460">Если `left`. Тип и `right`. Тип: значение NULL, узел удаляется.</span><span class="sxs-lookup"><span data-stu-id="fef91-2460">If `left`.Type and `right`.Type are both nullable, the node is lifted.</span></span> <span data-ttu-id="fef91-2461">Тип узла — обнуляемый тип, соответствующий тип результата определенного оператора умножения.</span><span class="sxs-lookup"><span data-stu-id="fef91-2461">The type of the node is the nullable type that corresponds to the result type of the predefined multiplication operator.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="fef91-2462">В следующем примере кода показано, как создать выражение, которое умножает два значения.</span><span class="sxs-lookup"><span data-stu-id="fef91-2462">The following code example shows how to create an expression that multiplies two values.</span></span>  
  
 [!code-csharp[System.Linq.Expressions.ExpressionDev10#27](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.linq.expressions.expressiondev10/cs/program.cs#27)]
 [!code-vb[System.Linq.Expressions.ExpressionDev10#27](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.linq.expressions.expressiondev10/vb/module1.vb#27)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="fef91-2463">Значение параметра <paramref name="left" /> или <paramref name="right" /> — <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fef91-2463">
              <paramref name="left" /> or <paramref name="right" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.InvalidOperationException">
          <span data-ttu-id="fef91-2464">Оператор умножения не определен для типов <paramref name="left" />.Type и <paramref name="right" />.Type.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fef91-2464">The multiplication operator is not defined for <paramref name="left" />.Type and <paramref name="right" />.Type.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="Multiply">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.BinaryExpression Multiply (System.Linq.Expressions.Expression left, System.Linq.Expressions.Expression right, System.Reflection.MethodInfo method);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.BinaryExpression Multiply(class System.Linq.Expressions.Expression left, class System.Linq.Expressions.Expression right, class System.Reflection.MethodInfo method) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.Multiply(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Multiply (left As Expression, right As Expression, method As MethodInfo) As BinaryExpression" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Linq::Expressions::BinaryExpression ^ Multiply(System::Linq::Expressions::Expression ^ left, System::Linq::Expressions::Expression ^ right, System::Reflection::MethodInfo ^ method);" />
      <MemberSignature Language="F#" Value="static member Multiply : System.Linq.Expressions.Expression * System.Linq.Expressions.Expression * System.Reflection.MethodInfo -&gt; System.Linq.Expressions.BinaryExpression" Usage="System.Linq.Expressions.Expression.Multiply (left, right, method)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.BinaryExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="left" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="right" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="method" Type="System.Reflection.MethodInfo" />
      </Parameters>
      <Docs>
        <param name="left">
          <span data-ttu-id="fef91-2465">Объект <see cref="T:System.Linq.Expressions.Expression" />, который следует задать в качестве значения свойства <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fef91-2465">An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> property equal to.</span>
          </span>
        </param>
        <param name="right">
          <span data-ttu-id="fef91-2466">Объект <see cref="T:System.Linq.Expressions.Expression" />, который следует задать в качестве значения свойства <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fef91-2466">An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> property equal to.</span>
          </span>
        </param>
        <param name="method">
          <span data-ttu-id="fef91-2467">Объект <see cref="T:System.Reflection.MethodInfo" />, который следует задать в качестве значения свойства <see cref="P:System.Linq.Expressions.BinaryExpression.Method" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fef91-2467">A <see cref="T:System.Reflection.MethodInfo" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Method" /> property equal to.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="fef91-2468">Создает <see cref="T:System.Linq.Expressions.BinaryExpression" />, представляющий операцию арифметического умножения, не содержащую проверку переполнения.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fef91-2468">Creates a <see cref="T:System.Linq.Expressions.BinaryExpression" /> that represents an arithmetic multiplication operation that does not have overflow checking.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="fef91-2469">Выражение <see cref="T:System.Linq.Expressions.BinaryExpression" /> со свойством <see cref="P:System.Linq.Expressions.Expression.NodeType" />, равным <see cref="F:System.Linq.Expressions.ExpressionType.Multiply" />, и свойствами <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />, <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> и <see cref="P:System.Linq.Expressions.BinaryExpression.Method" />, для которых заданы указанные значения.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fef91-2469">A <see cref="T:System.Linq.Expressions.BinaryExpression" /> that has the <see cref="P:System.Linq.Expressions.Expression.NodeType" /> property equal to <see cref="F:System.Linq.Expressions.ExpressionType.Multiply" /> and the <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />, <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />, and <see cref="P:System.Linq.Expressions.BinaryExpression.Method" /> properties set to the specified values.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="fef91-2470">Полученный в результате <xref:System.Linq.Expressions.BinaryExpression> имеет <xref:System.Linq.Expressions.BinaryExpression.Method%2A> свойство присвоено метод реализации.</span><span class="sxs-lookup"><span data-stu-id="fef91-2470">The resulting <xref:System.Linq.Expressions.BinaryExpression> has the <xref:System.Linq.Expressions.BinaryExpression.Method%2A> property set to the implementing method.</span></span> <span data-ttu-id="fef91-2471"><xref:System.Linq.Expressions.Expression.Type%2A> Свойству присваивается тип узла.</span><span class="sxs-lookup"><span data-stu-id="fef91-2471">The <xref:System.Linq.Expressions.Expression.Type%2A> property is set to the type of the node.</span></span> <span data-ttu-id="fef91-2472">Если узел удаляется, <xref:System.Linq.Expressions.BinaryExpression.IsLifted%2A> и <xref:System.Linq.Expressions.BinaryExpression.IsLiftedToNull%2A> оба являются свойства `true`.</span><span class="sxs-lookup"><span data-stu-id="fef91-2472">If the node is lifted, the <xref:System.Linq.Expressions.BinaryExpression.IsLifted%2A> and <xref:System.Linq.Expressions.BinaryExpression.IsLiftedToNull%2A> properties are both `true`.</span></span> <span data-ttu-id="fef91-2473">В противном случае они `false`.</span><span class="sxs-lookup"><span data-stu-id="fef91-2473">Otherwise, they are `false`.</span></span> <span data-ttu-id="fef91-2474">Значение свойства <xref:System.Linq.Expressions.BinaryExpression.Conversion%2A> — `null`.</span><span class="sxs-lookup"><span data-stu-id="fef91-2474">The <xref:System.Linq.Expressions.BinaryExpression.Conversion%2A> property is `null`.</span></span>  
  
 <span data-ttu-id="fef91-2475">Ниже описывается метод реализации, тип узла и ликвидирован ли данный узел.</span><span class="sxs-lookup"><span data-stu-id="fef91-2475">The following information describes the implementing method, the node type, and whether a node is lifted.</span></span>  
  
#### <a name="implementing-method"></a><span data-ttu-id="fef91-2476">Реализация метода</span><span class="sxs-lookup"><span data-stu-id="fef91-2476">Implementing Method</span></span>  
 <span data-ttu-id="fef91-2477">Следующие правила определяют метод реализации для операции:</span><span class="sxs-lookup"><span data-stu-id="fef91-2477">The following rules determine the implementing method for the operation:</span></span>  
  
-   <span data-ttu-id="fef91-2478">Если `method` не `null` , и это отличный от void, `static` (`Shared` в Visual Basic) метода, принимающего два аргумента, это метод реализации для узла.</span><span class="sxs-lookup"><span data-stu-id="fef91-2478">If `method` is not `null` and it represents a non-void, `static` (`Shared` in Visual Basic) method that takes two arguments, it is the implementing method for the node.</span></span>  
  
-   <span data-ttu-id="fef91-2479">В противном случае, если <xref:System.Linq.Expressions.Expression.Type%2A> свойству `left` или `right` представляет определяемый пользователем тип, который перегружает оператор умножения <xref:System.Reflection.MethodInfo> , представляющий, что метод является методом реализации.</span><span class="sxs-lookup"><span data-stu-id="fef91-2479">Otherwise, if the <xref:System.Linq.Expressions.Expression.Type%2A> property of either `left` or `right` represents a user-defined type that overloads the multiplication operator, the <xref:System.Reflection.MethodInfo> that represents that method is the implementing method.</span></span>  
  
-   <span data-ttu-id="fef91-2480">В противном случае, если `left`. Тип и `right`. Тип: числовые типы, метод реализации является `null`.</span><span class="sxs-lookup"><span data-stu-id="fef91-2480">Otherwise, if `left`.Type and `right`.Type are numeric types, the implementing method is `null`.</span></span>  
  
#### <a name="node-type-and-lifted-versus-non-lifted"></a><span data-ttu-id="fef91-2481">Тип узла с ликвидацией или без</span><span class="sxs-lookup"><span data-stu-id="fef91-2481">Node Type and Lifted versus Non-Lifted</span></span>  
 <span data-ttu-id="fef91-2482">Если метод реализации не `null`:</span><span class="sxs-lookup"><span data-stu-id="fef91-2482">If the implementing method is not `null`:</span></span>  
  
-   <span data-ttu-id="fef91-2483">Если `left`. Тип и `right`. Тип могут быть присвоены соответствующие типы аргументов метода реализации, узел не удаляется.</span><span class="sxs-lookup"><span data-stu-id="fef91-2483">If `left`.Type and `right`.Type are assignable to the corresponding argument types of the implementing method, the node is not lifted.</span></span> <span data-ttu-id="fef91-2484">Тип узла — тип возвращаемого значения метода реализации.</span><span class="sxs-lookup"><span data-stu-id="fef91-2484">The type of the node is the return type of the implementing method.</span></span>  
  
-   <span data-ttu-id="fef91-2485">Если выполняются два следующих условия, узел удаляется, а тип узла — обнуляемый тип, соответствующий тип возвращаемого значения метода реализации:</span><span class="sxs-lookup"><span data-stu-id="fef91-2485">If the following two conditions are satisfied, the node is lifted and the type of the node is the nullable type that corresponds to the return type of the implementing method:</span></span>  
  
    -   <span data-ttu-id="fef91-2486">`left`. Тип и `right`. Тип: обоих типов значений, из которых хотя бы один допускает значения NULL и соответствующие типы, не допускающие значения null равны соответствующие типы аргументов метода реализации.</span><span class="sxs-lookup"><span data-stu-id="fef91-2486">`left`.Type and `right`.Type are both value types of which at least one is nullable and the corresponding non-nullable types are equal to the corresponding argument types of the implementing method.</span></span>  
  
    -   <span data-ttu-id="fef91-2487">Тип возвращаемого значения метода реализации является типом значения, не допускающие значения NULL.</span><span class="sxs-lookup"><span data-stu-id="fef91-2487">The return type of the implementing method is a non-nullable value type.</span></span>  
  
 <span data-ttu-id="fef91-2488">Если метод реализации `null`:</span><span class="sxs-lookup"><span data-stu-id="fef91-2488">If the implementing method is `null`:</span></span>  
  
-   <span data-ttu-id="fef91-2489">Если `left`. Тип и `right`. Тип: оба не поддерживающими значение NULL, узел не удаляется.</span><span class="sxs-lookup"><span data-stu-id="fef91-2489">If `left`.Type and `right`.Type are both non-nullable, the node is not lifted.</span></span> <span data-ttu-id="fef91-2490">Тип узла является типом результата определенного оператора умножения.</span><span class="sxs-lookup"><span data-stu-id="fef91-2490">The type of the node is the result type of the predefined multiplication operator.</span></span>  
  
-   <span data-ttu-id="fef91-2491">Если `left`. Тип и `right`. Тип: значение NULL, узел удаляется.</span><span class="sxs-lookup"><span data-stu-id="fef91-2491">If `left`.Type and `right`.Type are both nullable, the node is lifted.</span></span> <span data-ttu-id="fef91-2492">Тип узла — обнуляемый тип, соответствующий тип результата определенного оператора умножения.</span><span class="sxs-lookup"><span data-stu-id="fef91-2492">The type of the node is the nullable type that corresponds to the result type of the predefined multiplication operator.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="fef91-2493">Значение параметра <paramref name="left" /> или <paramref name="right" /> — <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fef91-2493">
              <paramref name="left" /> or <paramref name="right" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="fef91-2494">Значение параметра <paramref name="method" /> не равно <see langword="null" />, и метод, который оно представляет, возвращает <see langword="void" />, не является <see langword="static" /> (<see langword="Shared" /> в Visual Basic) и не принимает ровно два аргумента.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fef91-2494">
              <paramref name="method" /> is not <see langword="null" /> and the method it represents returns <see langword="void" />, is not <see langword="static" /> (<see langword="Shared" /> in Visual Basic), or does not take exactly two arguments.</span>
          </span>
        </exception>
        <exception cref="T:System.InvalidOperationException">
          <span data-ttu-id="fef91-2495">Значение <paramref name="method" /> равно <see langword="null" />, а оператор умножения не определен для типов <paramref name="left" />.Type и <paramref name="right" />.Type.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fef91-2495">
              <paramref name="method" /> is <see langword="null" /> and the multiplication operator is not defined for <paramref name="left" />.Type and <paramref name="right" />.Type.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <MemberGroup MemberName="MultiplyAssign">
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="fef91-2496">Создает объект <see cref="T:System.Linq.Expressions.BinaryExpression" />, представляющий операцию присваивания умножения, не содержащую проверку переполнения.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fef91-2496">Creates a <see cref="T:System.Linq.Expressions.BinaryExpression" /> that represents a multiplication assignment operation that does not have overflow checking.</span>
          </span>
        </summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="MultiplyAssign">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.BinaryExpression MultiplyAssign (System.Linq.Expressions.Expression left, System.Linq.Expressions.Expression right);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.BinaryExpression MultiplyAssign(class System.Linq.Expressions.Expression left, class System.Linq.Expressions.Expression right) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.MultiplyAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function MultiplyAssign (left As Expression, right As Expression) As BinaryExpression" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Linq::Expressions::BinaryExpression ^ MultiplyAssign(System::Linq::Expressions::Expression ^ left, System::Linq::Expressions::Expression ^ right);" />
      <MemberSignature Language="F#" Value="static member MultiplyAssign : System.Linq.Expressions.Expression * System.Linq.Expressions.Expression -&gt; System.Linq.Expressions.BinaryExpression" Usage="System.Linq.Expressions.Expression.MultiplyAssign (left, right)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.BinaryExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="left" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="right" Type="System.Linq.Expressions.Expression" />
      </Parameters>
      <Docs>
        <param name="left">
          <span data-ttu-id="fef91-2497">Объект <see cref="T:System.Linq.Expressions.Expression" />, который следует задать в качестве значения свойства <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fef91-2497">An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> property equal to.</span>
          </span>
        </param>
        <param name="right">
          <span data-ttu-id="fef91-2498">Объект <see cref="T:System.Linq.Expressions.Expression" />, который следует задать в качестве значения свойства <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fef91-2498">An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> property equal to.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="fef91-2499">Создает объект <see cref="T:System.Linq.Expressions.BinaryExpression" />, представляющий операцию присваивания умножения, не содержащую проверку переполнения.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fef91-2499">Creates a <see cref="T:System.Linq.Expressions.BinaryExpression" /> that represents a multiplication assignment operation that does not have overflow checking.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="fef91-2500">Выражение <see cref="T:System.Linq.Expressions.BinaryExpression" /> со свойством<see cref="P:System.Linq.Expressions.Expression.NodeType" />, равным <see cref="F:System.Linq.Expressions.ExpressionType.MultiplyAssign" />, и свойствами <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> и <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />, для которых заданы указанные значения.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fef91-2500">A <see cref="T:System.Linq.Expressions.BinaryExpression" /> that has the <see cref="P:System.Linq.Expressions.Expression.NodeType" /> property equal to <see cref="F:System.Linq.Expressions.ExpressionType.MultiplyAssign" /> and the <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> and <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> properties set to the specified values.</span>
          </span>
        </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="MultiplyAssign">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.BinaryExpression MultiplyAssign (System.Linq.Expressions.Expression left, System.Linq.Expressions.Expression right, System.Reflection.MethodInfo method);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.BinaryExpression MultiplyAssign(class System.Linq.Expressions.Expression left, class System.Linq.Expressions.Expression right, class System.Reflection.MethodInfo method) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.MultiplyAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function MultiplyAssign (left As Expression, right As Expression, method As MethodInfo) As BinaryExpression" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Linq::Expressions::BinaryExpression ^ MultiplyAssign(System::Linq::Expressions::Expression ^ left, System::Linq::Expressions::Expression ^ right, System::Reflection::MethodInfo ^ method);" />
      <MemberSignature Language="F#" Value="static member MultiplyAssign : System.Linq.Expressions.Expression * System.Linq.Expressions.Expression * System.Reflection.MethodInfo -&gt; System.Linq.Expressions.BinaryExpression" Usage="System.Linq.Expressions.Expression.MultiplyAssign (left, right, method)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.BinaryExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="left" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="right" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="method" Type="System.Reflection.MethodInfo" />
      </Parameters>
      <Docs>
        <param name="left">
          <span data-ttu-id="fef91-2501">Объект <see cref="T:System.Linq.Expressions.Expression" />, который следует задать в качестве значения свойства <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fef91-2501">An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> property equal to.</span>
          </span>
        </param>
        <param name="right">
          <span data-ttu-id="fef91-2502">Объект <see cref="T:System.Linq.Expressions.Expression" />, который следует задать в качестве значения свойства <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fef91-2502">An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> property equal to.</span>
          </span>
        </param>
        <param name="method">
          <span data-ttu-id="fef91-2503">Объект <see cref="T:System.Reflection.MethodInfo" />, который следует задать в качестве значения свойства <see cref="P:System.Linq.Expressions.BinaryExpression.Method" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fef91-2503">A <see cref="T:System.Reflection.MethodInfo" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Method" /> property equal to.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="fef91-2504">Создает объект <see cref="T:System.Linq.Expressions.BinaryExpression" />, представляющий операцию присваивания умножения, не содержащую проверку переполнения.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fef91-2504">Creates a <see cref="T:System.Linq.Expressions.BinaryExpression" /> that represents a multiplication assignment operation that does not have overflow checking.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="fef91-2505">Выражение <see cref="T:System.Linq.Expressions.BinaryExpression" /> со свойством <see cref="P:System.Linq.Expressions.Expression.NodeType" />, равным <see cref="F:System.Linq.Expressions.ExpressionType.MultiplyAssign" />, и свойствами <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />, <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> и <see cref="P:System.Linq.Expressions.BinaryExpression.Method" />, для которых заданы указанные значения.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fef91-2505">A <see cref="T:System.Linq.Expressions.BinaryExpression" /> that has the <see cref="P:System.Linq.Expressions.Expression.NodeType" /> property equal to <see cref="F:System.Linq.Expressions.ExpressionType.MultiplyAssign" /> and the <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />, <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />, and <see cref="P:System.Linq.Expressions.BinaryExpression.Method" /> properties set to the specified values.</span>
          </span>
        </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="MultiplyAssign">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.BinaryExpression MultiplyAssign (System.Linq.Expressions.Expression left, System.Linq.Expressions.Expression right, System.Reflection.MethodInfo method, System.Linq.Expressions.LambdaExpression conversion);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.BinaryExpression MultiplyAssign(class System.Linq.Expressions.Expression left, class System.Linq.Expressions.Expression right, class System.Reflection.MethodInfo method, class System.Linq.Expressions.LambdaExpression conversion) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.MultiplyAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo,System.Linq.Expressions.LambdaExpression)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function MultiplyAssign (left As Expression, right As Expression, method As MethodInfo, conversion As LambdaExpression) As BinaryExpression" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Linq::Expressions::BinaryExpression ^ MultiplyAssign(System::Linq::Expressions::Expression ^ left, System::Linq::Expressions::Expression ^ right, System::Reflection::MethodInfo ^ method, System::Linq::Expressions::LambdaExpression ^ conversion);" />
      <MemberSignature Language="F#" Value="static member MultiplyAssign : System.Linq.Expressions.Expression * System.Linq.Expressions.Expression * System.Reflection.MethodInfo * System.Linq.Expressions.LambdaExpression -&gt; System.Linq.Expressions.BinaryExpression" Usage="System.Linq.Expressions.Expression.MultiplyAssign (left, right, method, conversion)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.BinaryExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="left" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="right" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="method" Type="System.Reflection.MethodInfo" />
        <Parameter Name="conversion" Type="System.Linq.Expressions.LambdaExpression" />
      </Parameters>
      <Docs>
        <param name="left">
          <span data-ttu-id="fef91-2506">Объект <see cref="T:System.Linq.Expressions.Expression" />, который следует задать в качестве значения свойства <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fef91-2506">An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> property equal to.</span>
          </span>
        </param>
        <param name="right">
          <span data-ttu-id="fef91-2507">Объект <see cref="T:System.Linq.Expressions.Expression" />, который следует задать в качестве значения свойства <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fef91-2507">An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> property equal to.</span>
          </span>
        </param>
        <param name="method">
          <span data-ttu-id="fef91-2508">Объект <see cref="T:System.Reflection.MethodInfo" />, который следует задать в качестве значения свойства <see cref="P:System.Linq.Expressions.BinaryExpression.Method" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fef91-2508">A <see cref="T:System.Reflection.MethodInfo" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Method" /> property equal to.</span>
          </span>
        </param>
        <param name="conversion">
          <span data-ttu-id="fef91-2509">Объект <see cref="T:System.Linq.Expressions.LambdaExpression" />, который следует задать в качестве значения свойства <see cref="P:System.Linq.Expressions.BinaryExpression.Conversion" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fef91-2509">A <see cref="T:System.Linq.Expressions.LambdaExpression" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Conversion" /> property equal to.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="fef91-2510">Создает объект <see cref="T:System.Linq.Expressions.BinaryExpression" />, представляющий операцию присваивания умножения, не содержащую проверку переполнения.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fef91-2510">Creates a <see cref="T:System.Linq.Expressions.BinaryExpression" /> that represents a multiplication assignment operation that does not have overflow checking.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="fef91-2511">Выражение <see cref="T:System.Linq.Expressions.BinaryExpression" />, содержащее свойство <see cref="P:System.Linq.Expressions.Expression.NodeType" />, равное <see cref="F:System.Linq.Expressions.ExpressionType.MultiplyAssign" /> и <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />, <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />, <see cref="P:System.Linq.Expressions.BinaryExpression.Method" />, и свойства <see cref="P:System.Linq.Expressions.BinaryExpression.Conversion" />, для которых заданы указанные значения.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fef91-2511">A <see cref="T:System.Linq.Expressions.BinaryExpression" /> that has the <see cref="P:System.Linq.Expressions.Expression.NodeType" /> property equal to <see cref="F:System.Linq.Expressions.ExpressionType.MultiplyAssign" /> and the <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />, <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />, <see cref="P:System.Linq.Expressions.BinaryExpression.Method" />, and <see cref="P:System.Linq.Expressions.BinaryExpression.Conversion" /> properties set to the specified values.</span>
          </span>
        </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="MultiplyAssignChecked">
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="fef91-2512">Создает объект <see cref="T:System.Linq.Expressions.BinaryExpression" />, представляющий операцию присваивания умножения, содержащую проверку переполнения.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fef91-2512">Creates a <see cref="T:System.Linq.Expressions.BinaryExpression" /> that represents a multiplication assignment operation that has overflow checking.</span>
          </span>
        </summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="MultiplyAssignChecked">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.BinaryExpression MultiplyAssignChecked (System.Linq.Expressions.Expression left, System.Linq.Expressions.Expression right);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.BinaryExpression MultiplyAssignChecked(class System.Linq.Expressions.Expression left, class System.Linq.Expressions.Expression right) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.MultiplyAssignChecked(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function MultiplyAssignChecked (left As Expression, right As Expression) As BinaryExpression" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Linq::Expressions::BinaryExpression ^ MultiplyAssignChecked(System::Linq::Expressions::Expression ^ left, System::Linq::Expressions::Expression ^ right);" />
      <MemberSignature Language="F#" Value="static member MultiplyAssignChecked : System.Linq.Expressions.Expression * System.Linq.Expressions.Expression -&gt; System.Linq.Expressions.BinaryExpression" Usage="System.Linq.Expressions.Expression.MultiplyAssignChecked (left, right)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.BinaryExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="left" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="right" Type="System.Linq.Expressions.Expression" />
      </Parameters>
      <Docs>
        <param name="left">
          <span data-ttu-id="fef91-2513">Объект <see cref="T:System.Linq.Expressions.Expression" />, который следует задать в качестве значения свойства <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fef91-2513">An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> property equal to.</span>
          </span>
        </param>
        <param name="right">
          <span data-ttu-id="fef91-2514">Объект <see cref="T:System.Linq.Expressions.Expression" />, который следует задать в качестве значения свойства <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fef91-2514">An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> property equal to.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="fef91-2515">Создает объект <see cref="T:System.Linq.Expressions.BinaryExpression" />, представляющий операцию присваивания умножения, содержащую проверку переполнения.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fef91-2515">Creates a <see cref="T:System.Linq.Expressions.BinaryExpression" /> that represents a multiplication assignment operation that has overflow checking.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="fef91-2516">Выражение <see cref="T:System.Linq.Expressions.BinaryExpression" /> со свойством<see cref="P:System.Linq.Expressions.Expression.NodeType" />, равным <see cref="F:System.Linq.Expressions.ExpressionType.MultiplyAssignChecked" />, и свойствами <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> и <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />, для которых заданы указанные значения.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fef91-2516">A <see cref="T:System.Linq.Expressions.BinaryExpression" /> that has the <see cref="P:System.Linq.Expressions.Expression.NodeType" /> property equal to <see cref="F:System.Linq.Expressions.ExpressionType.MultiplyAssignChecked" /> and the <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> and <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> properties set to the specified values.</span>
          </span>
        </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="MultiplyAssignChecked">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.BinaryExpression MultiplyAssignChecked (System.Linq.Expressions.Expression left, System.Linq.Expressions.Expression right, System.Reflection.MethodInfo method);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.BinaryExpression MultiplyAssignChecked(class System.Linq.Expressions.Expression left, class System.Linq.Expressions.Expression right, class System.Reflection.MethodInfo method) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.MultiplyAssignChecked(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function MultiplyAssignChecked (left As Expression, right As Expression, method As MethodInfo) As BinaryExpression" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Linq::Expressions::BinaryExpression ^ MultiplyAssignChecked(System::Linq::Expressions::Expression ^ left, System::Linq::Expressions::Expression ^ right, System::Reflection::MethodInfo ^ method);" />
      <MemberSignature Language="F#" Value="static member MultiplyAssignChecked : System.Linq.Expressions.Expression * System.Linq.Expressions.Expression * System.Reflection.MethodInfo -&gt; System.Linq.Expressions.BinaryExpression" Usage="System.Linq.Expressions.Expression.MultiplyAssignChecked (left, right, method)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.BinaryExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="left" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="right" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="method" Type="System.Reflection.MethodInfo" />
      </Parameters>
      <Docs>
        <param name="left">
          <span data-ttu-id="fef91-2517">Объект <see cref="T:System.Linq.Expressions.Expression" />, который следует задать в качестве значения свойства <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fef91-2517">An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> property equal to.</span>
          </span>
        </param>
        <param name="right">
          <span data-ttu-id="fef91-2518">Объект <see cref="T:System.Linq.Expressions.Expression" />, который следует задать в качестве значения свойства <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fef91-2518">An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> property equal to.</span>
          </span>
        </param>
        <param name="method">
          <span data-ttu-id="fef91-2519">Объект <see cref="T:System.Reflection.MethodInfo" />, который следует задать в качестве значения свойства <see cref="P:System.Linq.Expressions.BinaryExpression.Method" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fef91-2519">A <see cref="T:System.Reflection.MethodInfo" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Method" /> property equal to.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="fef91-2520">Создает объект <see cref="T:System.Linq.Expressions.BinaryExpression" />, представляющий операцию присваивания умножения, содержащую проверку переполнения.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fef91-2520">Creates a <see cref="T:System.Linq.Expressions.BinaryExpression" /> that represents a multiplication assignment operation that has overflow checking.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="fef91-2521">Выражение <see cref="T:System.Linq.Expressions.BinaryExpression" /> со свойством <see cref="P:System.Linq.Expressions.Expression.NodeType" />, равным <see cref="F:System.Linq.Expressions.ExpressionType.MultiplyAssignChecked" />, и свойствами <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />, <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> и <see cref="P:System.Linq.Expressions.BinaryExpression.Method" />, для которых заданы указанные значения.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fef91-2521">A <see cref="T:System.Linq.Expressions.BinaryExpression" /> that has the <see cref="P:System.Linq.Expressions.Expression.NodeType" /> property equal to <see cref="F:System.Linq.Expressions.ExpressionType.MultiplyAssignChecked" /> and the <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />, <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />, and <see cref="P:System.Linq.Expressions.BinaryExpression.Method" /> properties set to the specified values.</span>
          </span>
        </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="MultiplyAssignChecked">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.BinaryExpression MultiplyAssignChecked (System.Linq.Expressions.Expression left, System.Linq.Expressions.Expression right, System.Reflection.MethodInfo method, System.Linq.Expressions.LambdaExpression conversion);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.BinaryExpression MultiplyAssignChecked(class System.Linq.Expressions.Expression left, class System.Linq.Expressions.Expression right, class System.Reflection.MethodInfo method, class System.Linq.Expressions.LambdaExpression conversion) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.MultiplyAssignChecked(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo,System.Linq.Expressions.LambdaExpression)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function MultiplyAssignChecked (left As Expression, right As Expression, method As MethodInfo, conversion As LambdaExpression) As BinaryExpression" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Linq::Expressions::BinaryExpression ^ MultiplyAssignChecked(System::Linq::Expressions::Expression ^ left, System::Linq::Expressions::Expression ^ right, System::Reflection::MethodInfo ^ method, System::Linq::Expressions::LambdaExpression ^ conversion);" />
      <MemberSignature Language="F#" Value="static member MultiplyAssignChecked : System.Linq.Expressions.Expression * System.Linq.Expressions.Expression * System.Reflection.MethodInfo * System.Linq.Expressions.LambdaExpression -&gt; System.Linq.Expressions.BinaryExpression" Usage="System.Linq.Expressions.Expression.MultiplyAssignChecked (left, right, method, conversion)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.BinaryExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="left" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="right" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="method" Type="System.Reflection.MethodInfo" />
        <Parameter Name="conversion" Type="System.Linq.Expressions.LambdaExpression" />
      </Parameters>
      <Docs>
        <param name="left">
          <span data-ttu-id="fef91-2522">Объект <see cref="T:System.Linq.Expressions.Expression" />, который следует задать в качестве значения свойства <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fef91-2522">An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> property equal to.</span>
          </span>
        </param>
        <param name="right">
          <span data-ttu-id="fef91-2523">Объект <see cref="T:System.Linq.Expressions.Expression" />, который следует задать в качестве значения свойства <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fef91-2523">An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> property equal to.</span>
          </span>
        </param>
        <param name="method">
          <span data-ttu-id="fef91-2524">Объект <see cref="T:System.Reflection.MethodInfo" />, который следует задать в качестве значения свойства <see cref="P:System.Linq.Expressions.BinaryExpression.Method" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fef91-2524">A <see cref="T:System.Reflection.MethodInfo" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Method" /> property equal to.</span>
          </span>
        </param>
        <param name="conversion">
          <span data-ttu-id="fef91-2525">Объект <see cref="T:System.Linq.Expressions.LambdaExpression" />, который следует задать в качестве значения свойства <see cref="P:System.Linq.Expressions.BinaryExpression.Conversion" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fef91-2525">A <see cref="T:System.Linq.Expressions.LambdaExpression" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Conversion" /> property equal to.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="fef91-2526">Создает объект <see cref="T:System.Linq.Expressions.BinaryExpression" />, представляющий операцию присваивания умножения, содержащую проверку переполнения.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fef91-2526">Creates a <see cref="T:System.Linq.Expressions.BinaryExpression" /> that represents a multiplication assignment operation that has overflow checking.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="fef91-2527">Выражение <see cref="T:System.Linq.Expressions.BinaryExpression" />, содержащее свойство <see cref="P:System.Linq.Expressions.Expression.NodeType" />, равное <see cref="F:System.Linq.Expressions.ExpressionType.MultiplyAssignChecked" /> и <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />, <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />, <see cref="P:System.Linq.Expressions.BinaryExpression.Method" />, и свойства <see cref="P:System.Linq.Expressions.BinaryExpression.Conversion" />, для которых заданы указанные значения.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fef91-2527">A <see cref="T:System.Linq.Expressions.BinaryExpression" /> that has the <see cref="P:System.Linq.Expressions.Expression.NodeType" /> property equal to <see cref="F:System.Linq.Expressions.ExpressionType.MultiplyAssignChecked" /> and the <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />, <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />, <see cref="P:System.Linq.Expressions.BinaryExpression.Method" />, and <see cref="P:System.Linq.Expressions.BinaryExpression.Conversion" /> properties set to the specified values.</span>
          </span>
        </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="MultiplyChecked">
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="fef91-2528">Создает <see cref="T:System.Linq.Expressions.BinaryExpression" />, представляющий операцию арифметического умножения, содержащую проверку переполнения.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fef91-2528">Creates a <see cref="T:System.Linq.Expressions.BinaryExpression" /> that represents an arithmetic multiplication operation that has overflow checking.</span>
          </span>
        </summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="MultiplyChecked">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.BinaryExpression MultiplyChecked (System.Linq.Expressions.Expression left, System.Linq.Expressions.Expression right);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.BinaryExpression MultiplyChecked(class System.Linq.Expressions.Expression left, class System.Linq.Expressions.Expression right) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.MultiplyChecked(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function MultiplyChecked (left As Expression, right As Expression) As BinaryExpression" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Linq::Expressions::BinaryExpression ^ MultiplyChecked(System::Linq::Expressions::Expression ^ left, System::Linq::Expressions::Expression ^ right);" />
      <MemberSignature Language="F#" Value="static member MultiplyChecked : System.Linq.Expressions.Expression * System.Linq.Expressions.Expression -&gt; System.Linq.Expressions.BinaryExpression" Usage="System.Linq.Expressions.Expression.MultiplyChecked (left, right)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.BinaryExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="left" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="right" Type="System.Linq.Expressions.Expression" />
      </Parameters>
      <Docs>
        <param name="left">
          <span data-ttu-id="fef91-2529">Объект <see cref="T:System.Linq.Expressions.Expression" />, который следует задать в качестве значения свойства <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fef91-2529">An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> property equal to.</span>
          </span>
        </param>
        <param name="right">
          <span data-ttu-id="fef91-2530">Объект <see cref="T:System.Linq.Expressions.Expression" />, который следует задать в качестве значения свойства <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fef91-2530">An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> property equal to.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="fef91-2531">Создает <see cref="T:System.Linq.Expressions.BinaryExpression" />, представляющий операцию арифметического умножения, содержащую проверку переполнения.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fef91-2531">Creates a <see cref="T:System.Linq.Expressions.BinaryExpression" /> that represents an arithmetic multiplication operation that has overflow checking.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="fef91-2532">Выражение <see cref="T:System.Linq.Expressions.BinaryExpression" /> со свойством<see cref="P:System.Linq.Expressions.Expression.NodeType" />, равным <see cref="F:System.Linq.Expressions.ExpressionType.MultiplyChecked" />, и свойствами <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> и <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />, для которых заданы указанные значения.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fef91-2532">A <see cref="T:System.Linq.Expressions.BinaryExpression" /> that has the <see cref="P:System.Linq.Expressions.Expression.NodeType" /> property equal to <see cref="F:System.Linq.Expressions.ExpressionType.MultiplyChecked" /> and the <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> and <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> properties set to the specified values.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="fef91-2533">Полученный в результате <xref:System.Linq.Expressions.BinaryExpression> имеет <xref:System.Linq.Expressions.BinaryExpression.Method%2A> свойство присвоено метод реализации.</span><span class="sxs-lookup"><span data-stu-id="fef91-2533">The resulting <xref:System.Linq.Expressions.BinaryExpression> has the <xref:System.Linq.Expressions.BinaryExpression.Method%2A> property set to the implementing method.</span></span> <span data-ttu-id="fef91-2534"><xref:System.Linq.Expressions.Expression.Type%2A> Свойству присваивается тип узла.</span><span class="sxs-lookup"><span data-stu-id="fef91-2534">The <xref:System.Linq.Expressions.Expression.Type%2A> property is set to the type of the node.</span></span> <span data-ttu-id="fef91-2535">Если узел удаляется, <xref:System.Linq.Expressions.BinaryExpression.IsLifted%2A> и <xref:System.Linq.Expressions.BinaryExpression.IsLiftedToNull%2A> оба являются свойства `true`.</span><span class="sxs-lookup"><span data-stu-id="fef91-2535">If the node is lifted, the <xref:System.Linq.Expressions.BinaryExpression.IsLifted%2A> and <xref:System.Linq.Expressions.BinaryExpression.IsLiftedToNull%2A> properties are both `true`.</span></span> <span data-ttu-id="fef91-2536">В противном случае они `false`.</span><span class="sxs-lookup"><span data-stu-id="fef91-2536">Otherwise, they are `false`.</span></span> <span data-ttu-id="fef91-2537">Значение свойства <xref:System.Linq.Expressions.BinaryExpression.Conversion%2A> — `null`.</span><span class="sxs-lookup"><span data-stu-id="fef91-2537">The <xref:System.Linq.Expressions.BinaryExpression.Conversion%2A> property is `null`.</span></span>  
  
 <span data-ttu-id="fef91-2538">Ниже описывается метод реализации, тип узла и ликвидирован ли данный узел.</span><span class="sxs-lookup"><span data-stu-id="fef91-2538">The following information describes the implementing method, the node type, and whether a node is lifted.</span></span>  
  
#### <a name="implementing-method"></a><span data-ttu-id="fef91-2539">Реализация метода</span><span class="sxs-lookup"><span data-stu-id="fef91-2539">Implementing Method</span></span>  
 <span data-ttu-id="fef91-2540">Следующие правила определяют выбранный метод реализации для операции:</span><span class="sxs-lookup"><span data-stu-id="fef91-2540">The following rules determine the selected implementing method for the operation:</span></span>  
  
-   <span data-ttu-id="fef91-2541">Если <xref:System.Linq.Expressions.Expression.Type%2A> свойству `left` или `right` представляет определяемый пользователем тип, который перегружает оператор умножения <xref:System.Reflection.MethodInfo> , представляющий, что метод является методом реализации.</span><span class="sxs-lookup"><span data-stu-id="fef91-2541">If the <xref:System.Linq.Expressions.Expression.Type%2A> property of either `left` or `right` represents a user-defined type that overloads the multiplication operator, the <xref:System.Reflection.MethodInfo> that represents that method is the implementing method.</span></span>  
  
-   <span data-ttu-id="fef91-2542">В противном случае, если `left`. Тип и `right`. Тип: числовые типы, метод реализации является `null`.</span><span class="sxs-lookup"><span data-stu-id="fef91-2542">Otherwise, if `left`.Type and `right`.Type are numeric types, the implementing method is `null`.</span></span>  
  
#### <a name="node-type-and-lifted-versus-non-lifted"></a><span data-ttu-id="fef91-2543">Тип узла с ликвидацией или без</span><span class="sxs-lookup"><span data-stu-id="fef91-2543">Node Type and Lifted versus Non-Lifted</span></span>  
 <span data-ttu-id="fef91-2544">Если метод реализации не `null`:</span><span class="sxs-lookup"><span data-stu-id="fef91-2544">If the implementing method is not `null`:</span></span>  
  
-   <span data-ttu-id="fef91-2545">Если `left`. Тип и `right`. Тип могут быть присвоены соответствующие типы аргументов метода реализации, узел не удаляется.</span><span class="sxs-lookup"><span data-stu-id="fef91-2545">If `left`.Type and `right`.Type are assignable to the corresponding argument types of the implementing method, the node is not lifted.</span></span> <span data-ttu-id="fef91-2546">Тип узла — тип возвращаемого значения метода реализации.</span><span class="sxs-lookup"><span data-stu-id="fef91-2546">The type of the node is the return type of the implementing method.</span></span>  
  
-   <span data-ttu-id="fef91-2547">Если выполняются два следующих условия, узел удаляется, а тип узла — обнуляемый тип, соответствующий тип возвращаемого значения метода реализации:</span><span class="sxs-lookup"><span data-stu-id="fef91-2547">If the following two conditions are satisfied, the node is lifted and the type of the node is the nullable type that corresponds to the return type of the implementing method:</span></span>  
  
    -   <span data-ttu-id="fef91-2548">`left`. Тип и `right`. Тип: обоих типов значений, из которых хотя бы один допускает значения NULL и соответствующие типы, не допускающие значения null равны соответствующие типы аргументов метода реализации.</span><span class="sxs-lookup"><span data-stu-id="fef91-2548">`left`.Type and `right`.Type are both value types of which at least one is nullable and the corresponding non-nullable types are equal to the corresponding argument types of the implementing method.</span></span>  
  
    -   <span data-ttu-id="fef91-2549">Тип возвращаемого значения метода реализации является типом значения, не допускающие значения NULL.</span><span class="sxs-lookup"><span data-stu-id="fef91-2549">The return type of the implementing method is a non-nullable value type.</span></span>  
  
 <span data-ttu-id="fef91-2550">Если метод реализации `null`:</span><span class="sxs-lookup"><span data-stu-id="fef91-2550">If the implementing method is `null`:</span></span>  
  
-   <span data-ttu-id="fef91-2551">Если `left`. Тип и `right`. Тип: оба не поддерживающими значение NULL, узел не удаляется.</span><span class="sxs-lookup"><span data-stu-id="fef91-2551">If `left`.Type and `right`.Type are both non-nullable, the node is not lifted.</span></span> <span data-ttu-id="fef91-2552">Тип узла является типом результата определенного оператора умножения.</span><span class="sxs-lookup"><span data-stu-id="fef91-2552">The type of the node is the result type of the predefined multiplication operator.</span></span>  
  
-   <span data-ttu-id="fef91-2553">Если `left`. Тип и `right`. Тип: значение NULL, узел удаляется.</span><span class="sxs-lookup"><span data-stu-id="fef91-2553">If `left`.Type and `right`.Type are both nullable, the node is lifted.</span></span> <span data-ttu-id="fef91-2554">Тип узла — обнуляемый тип, соответствующий тип результата определенного оператора умножения.</span><span class="sxs-lookup"><span data-stu-id="fef91-2554">The type of the node is the nullable type that corresponds to the result type of the predefined multiplication operator.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="fef91-2555">Значение параметра <paramref name="left" /> или <paramref name="right" /> — <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fef91-2555">
              <paramref name="left" /> or <paramref name="right" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.InvalidOperationException">
          <span data-ttu-id="fef91-2556">Оператор умножения не определен для типов <paramref name="left" />.Type и <paramref name="right" />.Type.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fef91-2556">The multiplication operator is not defined for <paramref name="left" />.Type and <paramref name="right" />.Type.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="MultiplyChecked">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.BinaryExpression MultiplyChecked (System.Linq.Expressions.Expression left, System.Linq.Expressions.Expression right, System.Reflection.MethodInfo method);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.BinaryExpression MultiplyChecked(class System.Linq.Expressions.Expression left, class System.Linq.Expressions.Expression right, class System.Reflection.MethodInfo method) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.MultiplyChecked(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function MultiplyChecked (left As Expression, right As Expression, method As MethodInfo) As BinaryExpression" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Linq::Expressions::BinaryExpression ^ MultiplyChecked(System::Linq::Expressions::Expression ^ left, System::Linq::Expressions::Expression ^ right, System::Reflection::MethodInfo ^ method);" />
      <MemberSignature Language="F#" Value="static member MultiplyChecked : System.Linq.Expressions.Expression * System.Linq.Expressions.Expression * System.Reflection.MethodInfo -&gt; System.Linq.Expressions.BinaryExpression" Usage="System.Linq.Expressions.Expression.MultiplyChecked (left, right, method)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.BinaryExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="left" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="right" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="method" Type="System.Reflection.MethodInfo" />
      </Parameters>
      <Docs>
        <param name="left">
          <span data-ttu-id="fef91-2557">Объект <see cref="T:System.Linq.Expressions.Expression" />, который следует задать в качестве значения свойства <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fef91-2557">An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> property equal to.</span>
          </span>
        </param>
        <param name="right">
          <span data-ttu-id="fef91-2558">Объект <see cref="T:System.Linq.Expressions.Expression" />, который следует задать в качестве значения свойства <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fef91-2558">An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> property equal to.</span>
          </span>
        </param>
        <param name="method">
          <span data-ttu-id="fef91-2559">Объект <see cref="T:System.Reflection.MethodInfo" />, который следует задать в качестве значения свойства <see cref="P:System.Linq.Expressions.BinaryExpression.Method" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fef91-2559">A <see cref="T:System.Reflection.MethodInfo" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Method" /> property equal to.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="fef91-2560">Создает <see cref="T:System.Linq.Expressions.BinaryExpression" />, представляющий операцию арифметического умножения, содержащую проверку переполнения.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fef91-2560">Creates a <see cref="T:System.Linq.Expressions.BinaryExpression" /> that represents an arithmetic multiplication operation that has overflow checking.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="fef91-2561">Выражение <see cref="T:System.Linq.Expressions.BinaryExpression" /> со свойством <see cref="P:System.Linq.Expressions.Expression.NodeType" />, равным <see cref="F:System.Linq.Expressions.ExpressionType.MultiplyChecked" />, и свойствами <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />, <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> и <see cref="P:System.Linq.Expressions.BinaryExpression.Method" />, для которых заданы указанные значения.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fef91-2561">A <see cref="T:System.Linq.Expressions.BinaryExpression" /> that has the <see cref="P:System.Linq.Expressions.Expression.NodeType" /> property equal to <see cref="F:System.Linq.Expressions.ExpressionType.MultiplyChecked" /> and the <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />, <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />, and <see cref="P:System.Linq.Expressions.BinaryExpression.Method" /> properties set to the specified values.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="fef91-2562">Полученный в результате <xref:System.Linq.Expressions.BinaryExpression> имеет <xref:System.Linq.Expressions.BinaryExpression.Method%2A> свойство присвоено метод реализации.</span><span class="sxs-lookup"><span data-stu-id="fef91-2562">The resulting <xref:System.Linq.Expressions.BinaryExpression> has the <xref:System.Linq.Expressions.BinaryExpression.Method%2A> property set to the implementing method.</span></span> <span data-ttu-id="fef91-2563"><xref:System.Linq.Expressions.Expression.Type%2A> Свойству присваивается тип узла.</span><span class="sxs-lookup"><span data-stu-id="fef91-2563">The <xref:System.Linq.Expressions.Expression.Type%2A> property is set to the type of the node.</span></span> <span data-ttu-id="fef91-2564">Если узел удаляется, <xref:System.Linq.Expressions.BinaryExpression.IsLifted%2A> и <xref:System.Linq.Expressions.BinaryExpression.IsLiftedToNull%2A> оба являются свойства `true`.</span><span class="sxs-lookup"><span data-stu-id="fef91-2564">If the node is lifted, the <xref:System.Linq.Expressions.BinaryExpression.IsLifted%2A> and <xref:System.Linq.Expressions.BinaryExpression.IsLiftedToNull%2A> properties are both `true`.</span></span> <span data-ttu-id="fef91-2565">В противном случае они `false`.</span><span class="sxs-lookup"><span data-stu-id="fef91-2565">Otherwise, they are `false`.</span></span> <span data-ttu-id="fef91-2566">Значение свойства <xref:System.Linq.Expressions.BinaryExpression.Conversion%2A> — `null`.</span><span class="sxs-lookup"><span data-stu-id="fef91-2566">The <xref:System.Linq.Expressions.BinaryExpression.Conversion%2A> property is `null`.</span></span>  
  
 <span data-ttu-id="fef91-2567">Ниже описывается метод реализации, тип узла и ликвидирован ли данный узел.</span><span class="sxs-lookup"><span data-stu-id="fef91-2567">The following information describes the implementing method, the node type, and whether a node is lifted.</span></span>  
  
#### <a name="implementing-method"></a><span data-ttu-id="fef91-2568">Реализация метода</span><span class="sxs-lookup"><span data-stu-id="fef91-2568">Implementing Method</span></span>  
 <span data-ttu-id="fef91-2569">Следующие правила определяют метод реализации для операции:</span><span class="sxs-lookup"><span data-stu-id="fef91-2569">The following rules determine the implementing method for the operation:</span></span>  
  
-   <span data-ttu-id="fef91-2570">Если `method` не `null` , и это отличный от void, `static` (`Shared` в Visual Basic) метода, принимающего два аргумента, это метод реализации для узла.</span><span class="sxs-lookup"><span data-stu-id="fef91-2570">If `method` is not `null` and it represents a non-void, `static` (`Shared` in Visual Basic) method that takes two arguments, it is the implementing method for the node.</span></span>  
  
-   <span data-ttu-id="fef91-2571">В противном случае, если <xref:System.Linq.Expressions.Expression.Type%2A> свойству `left` или `right` представляет определяемый пользователем тип, который перегружает оператор умножения <xref:System.Reflection.MethodInfo> , представляющий, что метод является методом реализации.</span><span class="sxs-lookup"><span data-stu-id="fef91-2571">Otherwise, if the <xref:System.Linq.Expressions.Expression.Type%2A> property of either `left` or `right` represents a user-defined type that overloads the multiplication operator, the <xref:System.Reflection.MethodInfo> that represents that method is the implementing method.</span></span>  
  
-   <span data-ttu-id="fef91-2572">В противном случае, если `left`. Тип и `right`. Тип: числовые типы, метод реализации является `null`.</span><span class="sxs-lookup"><span data-stu-id="fef91-2572">Otherwise, if `left`.Type and `right`.Type are numeric types, the implementing method is `null`.</span></span>  
  
#### <a name="node-type-and-lifted-versus-non-lifted"></a><span data-ttu-id="fef91-2573">Тип узла с ликвидацией или без</span><span class="sxs-lookup"><span data-stu-id="fef91-2573">Node Type and Lifted versus Non-Lifted</span></span>  
 <span data-ttu-id="fef91-2574">Если метод реализации не `null`:</span><span class="sxs-lookup"><span data-stu-id="fef91-2574">If the implementing method is not `null`:</span></span>  
  
-   <span data-ttu-id="fef91-2575">Если `left`. Тип и `right`. Тип могут быть присвоены соответствующие типы аргументов метода реализации, узел не удаляется.</span><span class="sxs-lookup"><span data-stu-id="fef91-2575">If `left`.Type and `right`.Type are assignable to the corresponding argument types of the implementing method, the node is not lifted.</span></span> <span data-ttu-id="fef91-2576">Тип узла — тип возвращаемого значения метода реализации.</span><span class="sxs-lookup"><span data-stu-id="fef91-2576">The type of the node is the return type of the implementing method.</span></span>  
  
-   <span data-ttu-id="fef91-2577">Если выполняются два следующих условия, узел удаляется, а тип узла — обнуляемый тип, соответствующий тип возвращаемого значения метода реализации:</span><span class="sxs-lookup"><span data-stu-id="fef91-2577">If the following two conditions are satisfied, the node is lifted and the type of the node is the nullable type that corresponds to the return type of the implementing method:</span></span>  
  
    -   <span data-ttu-id="fef91-2578">`left`. Тип и `right`. Тип: обоих типов значений, из которых хотя бы один допускает значения NULL и соответствующие типы, не допускающие значения null равны соответствующие типы аргументов метода реализации.</span><span class="sxs-lookup"><span data-stu-id="fef91-2578">`left`.Type and `right`.Type are both value types of which at least one is nullable and the corresponding non-nullable types are equal to the corresponding argument types of the implementing method.</span></span>  
  
    -   <span data-ttu-id="fef91-2579">Тип возвращаемого значения метода реализации является типом значения, не допускающие значения NULL.</span><span class="sxs-lookup"><span data-stu-id="fef91-2579">The return type of the implementing method is a non-nullable value type.</span></span>  
  
 <span data-ttu-id="fef91-2580">Если метод реализации `null`:</span><span class="sxs-lookup"><span data-stu-id="fef91-2580">If the implementing method is `null`:</span></span>  
  
-   <span data-ttu-id="fef91-2581">Если `left`. Тип и `right`. Тип: оба не поддерживающими значение NULL, узел не удаляется.</span><span class="sxs-lookup"><span data-stu-id="fef91-2581">If `left`.Type and `right`.Type are both non-nullable, the node is not lifted.</span></span> <span data-ttu-id="fef91-2582">Тип узла является типом результата определенного оператора умножения.</span><span class="sxs-lookup"><span data-stu-id="fef91-2582">The type of the node is the result type of the predefined multiplication operator.</span></span>  
  
-   <span data-ttu-id="fef91-2583">Если `left`. Тип и `right`. Тип: значение NULL, узел удаляется.</span><span class="sxs-lookup"><span data-stu-id="fef91-2583">If `left`.Type and `right`.Type are both nullable, the node is lifted.</span></span> <span data-ttu-id="fef91-2584">Тип узла — обнуляемый тип, соответствующий тип результата определенного оператора умножения.</span><span class="sxs-lookup"><span data-stu-id="fef91-2584">The type of the node is the nullable type that corresponds to the result type of the predefined multiplication operator.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="fef91-2585">Значение параметра <paramref name="left" /> или <paramref name="right" /> — <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fef91-2585">
              <paramref name="left" /> or <paramref name="right" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="fef91-2586">Значение параметра <paramref name="method" /> не равно <see langword="null" />, и метод, который оно представляет, возвращает <see langword="void" />, не является <see langword="static" /> (<see langword="Shared" /> в Visual Basic) и не принимает ровно два аргумента.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fef91-2586">
              <paramref name="method" /> is not <see langword="null" /> and the method it represents returns <see langword="void" />, is not <see langword="static" /> (<see langword="Shared" /> in Visual Basic), or does not take exactly two arguments.</span>
          </span>
        </exception>
        <exception cref="T:System.InvalidOperationException">
          <span data-ttu-id="fef91-2587">Значение <paramref name="method" /> равно <see langword="null" />, а оператор умножения не определен для типов <paramref name="left" />.Type и <paramref name="right" />.Type.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fef91-2587">
              <paramref name="method" /> is <see langword="null" /> and the multiplication operator is not defined for <paramref name="left" />.Type and <paramref name="right" />.Type.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <MemberGroup MemberName="Negate">
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="fef91-2588">Создает <see cref="T:System.Linq.Expressions.UnaryExpression" />, представляющий операцию арифметического отрицания.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fef91-2588">Creates a <see cref="T:System.Linq.Expressions.UnaryExpression" /> that represents an arithmetic negation operation.</span>
          </span>
        </summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Negate">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.UnaryExpression Negate (System.Linq.Expressions.Expression expression);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.UnaryExpression Negate(class System.Linq.Expressions.Expression expression) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.Negate(System.Linq.Expressions.Expression)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Linq::Expressions::UnaryExpression ^ Negate(System::Linq::Expressions::Expression ^ expression);" />
      <MemberSignature Language="F#" Value="static member Negate : System.Linq.Expressions.Expression -&gt; System.Linq.Expressions.UnaryExpression" Usage="System.Linq.Expressions.Expression.Negate expression" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.UnaryExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="expression" Type="System.Linq.Expressions.Expression" />
      </Parameters>
      <Docs>
        <param name="expression">
          <span data-ttu-id="fef91-2589">Объект <see cref="T:System.Linq.Expressions.Expression" />, который следует задать в качестве значения свойства <see cref="P:System.Linq.Expressions.UnaryExpression.Operand" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fef91-2589">An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.UnaryExpression.Operand" /> property equal to.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="fef91-2590">Создает <see cref="T:System.Linq.Expressions.UnaryExpression" />, представляющий операцию арифметического отрицания.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fef91-2590">Creates a <see cref="T:System.Linq.Expressions.UnaryExpression" /> that represents an arithmetic negation operation.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="fef91-2591">Выражение <see cref="T:System.Linq.Expressions.UnaryExpression" /> со свойством <see cref="P:System.Linq.Expressions.Expression.NodeType" />, равным <see cref="F:System.Linq.Expressions.ExpressionType.Negate" />, и свойством <see cref="P:System.Linq.Expressions.UnaryExpression.Operand" />, для которого задано указанное значение.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fef91-2591">A <see cref="T:System.Linq.Expressions.UnaryExpression" /> that has the <see cref="P:System.Linq.Expressions.Expression.NodeType" /> property equal to <see cref="F:System.Linq.Expressions.ExpressionType.Negate" /> and the <see cref="P:System.Linq.Expressions.UnaryExpression.Operand" /> property set to the specified value.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="fef91-2592"><xref:System.Linq.Expressions.UnaryExpression.Method%2A> Результирующего <xref:System.Linq.Expressions.UnaryExpression> присваивается метод реализации.</span><span class="sxs-lookup"><span data-stu-id="fef91-2592">The <xref:System.Linq.Expressions.UnaryExpression.Method%2A> property of the resulting <xref:System.Linq.Expressions.UnaryExpression> is set to the implementing method.</span></span> <span data-ttu-id="fef91-2593"><xref:System.Linq.Expressions.Expression.Type%2A> Свойству присваивается тип узла.</span><span class="sxs-lookup"><span data-stu-id="fef91-2593">The <xref:System.Linq.Expressions.Expression.Type%2A> property is set to the type of the node.</span></span> <span data-ttu-id="fef91-2594">Если узел удаляется, <xref:System.Linq.Expressions.BinaryExpression.IsLifted%2A> и <xref:System.Linq.Expressions.BinaryExpression.IsLiftedToNull%2A> оба являются свойства `true`.</span><span class="sxs-lookup"><span data-stu-id="fef91-2594">If the node is lifted, the <xref:System.Linq.Expressions.BinaryExpression.IsLifted%2A> and <xref:System.Linq.Expressions.BinaryExpression.IsLiftedToNull%2A> properties are both `true`.</span></span> <span data-ttu-id="fef91-2595">В противном случае они имеют значение false.</span><span class="sxs-lookup"><span data-stu-id="fef91-2595">Otherwise, they are false.</span></span>  
  
#### <a name="implementing-method"></a><span data-ttu-id="fef91-2596">Реализация метода</span><span class="sxs-lookup"><span data-stu-id="fef91-2596">Implementing Method</span></span>  
 <span data-ttu-id="fef91-2597">Следующие правила определяют метод реализации для операции:</span><span class="sxs-lookup"><span data-stu-id="fef91-2597">The following rules determine the implementing method for the operation:</span></span>  
  
-   <span data-ttu-id="fef91-2598">Если `expression`. Тип — определяемого пользователем типа, определяющее унарный минус-оператор, <xref:System.Reflection.MethodInfo> , который представляет оператор — это метод реализации.</span><span class="sxs-lookup"><span data-stu-id="fef91-2598">If `expression`.Type is a user-defined type that defines the unary minus operator, the <xref:System.Reflection.MethodInfo> that represents that operator is the implementing method.</span></span>  
  
-   <span data-ttu-id="fef91-2599">В противном случае, если `expression`. Тип является числовым типом, метод реализации является `null`.</span><span class="sxs-lookup"><span data-stu-id="fef91-2599">Otherwise, if `expression`.Type is a numeric type, the implementing method is `null`.</span></span>  
  
#### <a name="node-type-and-lifted-versus-non-lifted"></a><span data-ttu-id="fef91-2600">Тип узла с ликвидацией или без</span><span class="sxs-lookup"><span data-stu-id="fef91-2600">Node Type and Lifted versus Non-Lifted</span></span>  
 <span data-ttu-id="fef91-2601">Если метод реализации не `null`:</span><span class="sxs-lookup"><span data-stu-id="fef91-2601">If the implementing method is not `null`:</span></span>  
  
-   <span data-ttu-id="fef91-2602">Если `expression`. Тип допускает присваивание типу аргумента метода реализации, узел не удаляется.</span><span class="sxs-lookup"><span data-stu-id="fef91-2602">If `expression`.Type is assignable to the argument type of the implementing method, the node is not lifted.</span></span> <span data-ttu-id="fef91-2603">Тип узла — тип возвращаемого значения метода реализации.</span><span class="sxs-lookup"><span data-stu-id="fef91-2603">The type of the node is the return type of the implementing method.</span></span>  
  
-   <span data-ttu-id="fef91-2604">Если выполняются два следующих условия, узел удаляется, а тип узла — обнуляемый тип, соответствующий тип возвращаемого значения метода реализации:</span><span class="sxs-lookup"><span data-stu-id="fef91-2604">If the following two conditions are satisfied, the node is lifted and the type of the node is the nullable type that corresponds to the return type of the implementing method:</span></span>  
  
    -   <span data-ttu-id="fef91-2605">`expression`. Тип является типом значения, допускающие значение NULL, и соответствующий тип не поддерживающий значение NULL равен типу аргумента метода реализации.</span><span class="sxs-lookup"><span data-stu-id="fef91-2605">`expression`.Type is a nullable value type and the corresponding non-nullable value type is equal to the argument type of the implementing method.</span></span>  
  
    -   <span data-ttu-id="fef91-2606">Тип возвращаемого значения метода реализации является типом значения, не допускающие значения NULL.</span><span class="sxs-lookup"><span data-stu-id="fef91-2606">The return type of the implementing method is a non-nullable value type.</span></span>  
  
 <span data-ttu-id="fef91-2607">Если метод реализации `null`, тип узла — `expression`. Тип.</span><span class="sxs-lookup"><span data-stu-id="fef91-2607">If the implementing method is `null`, the type of the node is `expression`.Type.</span></span> <span data-ttu-id="fef91-2608">Если `expression`. Тип, не допускающие значения NULL, узел не удаляется.</span><span class="sxs-lookup"><span data-stu-id="fef91-2608">If `expression`.Type is non-nullable, the node is not lifted.</span></span> <span data-ttu-id="fef91-2609">В противном случае узел удаляется.</span><span class="sxs-lookup"><span data-stu-id="fef91-2609">Otherwise, the node is lifted.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="fef91-2610">Следующий пример демонстрирует создание выражения, представляющий операцию арифметического отрицания.</span><span class="sxs-lookup"><span data-stu-id="fef91-2610">The following example demonstrates how to create an expression that represents an arithmetic negation operation.</span></span>  
  
 [!code-csharp[System.Linq.Expressions.ExpressionDev10#50](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.linq.expressions.expressiondev10/cs/program.cs#50)]
 [!code-vb[System.Linq.Expressions.ExpressionDev10#50](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.linq.expressions.expressiondev10/vb/module1.vb#50)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="fef91-2611">
            <paramref name="expression" /> — <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fef91-2611">
              <paramref name="expression" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.InvalidOperationException">
          <span data-ttu-id="fef91-2612">Унарный минус-оператор не определен для типа <paramref name="expression" />.Type.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fef91-2612">The unary minus operator is not defined for <paramref name="expression" />.Type.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="Negate">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.UnaryExpression Negate (System.Linq.Expressions.Expression expression, System.Reflection.MethodInfo method);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.UnaryExpression Negate(class System.Linq.Expressions.Expression expression, class System.Reflection.MethodInfo method) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.Negate(System.Linq.Expressions.Expression,System.Reflection.MethodInfo)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Linq::Expressions::UnaryExpression ^ Negate(System::Linq::Expressions::Expression ^ expression, System::Reflection::MethodInfo ^ method);" />
      <MemberSignature Language="F#" Value="static member Negate : System.Linq.Expressions.Expression * System.Reflection.MethodInfo -&gt; System.Linq.Expressions.UnaryExpression" Usage="System.Linq.Expressions.Expression.Negate (expression, method)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.UnaryExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="expression" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="method" Type="System.Reflection.MethodInfo" />
      </Parameters>
      <Docs>
        <param name="expression">
          <span data-ttu-id="fef91-2613">Объект <see cref="T:System.Linq.Expressions.Expression" />, который следует задать в качестве значения свойства <see cref="P:System.Linq.Expressions.UnaryExpression.Operand" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fef91-2613">An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.UnaryExpression.Operand" /> property equal to.</span>
          </span>
        </param>
        <param name="method">
          <span data-ttu-id="fef91-2614">Объект <see cref="T:System.Reflection.MethodInfo" />, который следует задать в качестве значения свойства <see cref="P:System.Linq.Expressions.UnaryExpression.Method" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fef91-2614">A <see cref="T:System.Reflection.MethodInfo" /> to set the <see cref="P:System.Linq.Expressions.UnaryExpression.Method" /> property equal to.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="fef91-2615">Создает <see cref="T:System.Linq.Expressions.UnaryExpression" />, представляющий операцию арифметического отрицания.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fef91-2615">Creates a <see cref="T:System.Linq.Expressions.UnaryExpression" /> that represents an arithmetic negation operation.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="fef91-2616">Выражение <see cref="T:System.Linq.Expressions.UnaryExpression" /> со свойством<see cref="P:System.Linq.Expressions.Expression.NodeType" />, равным <see cref="F:System.Linq.Expressions.ExpressionType.Negate" />, и свойствами <see cref="P:System.Linq.Expressions.UnaryExpression.Operand" /> и <see cref="P:System.Linq.Expressions.UnaryExpression.Method" />, для которых заданы указанные значения.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fef91-2616">A <see cref="T:System.Linq.Expressions.UnaryExpression" /> that has the <see cref="P:System.Linq.Expressions.Expression.NodeType" /> property equal to <see cref="F:System.Linq.Expressions.ExpressionType.Negate" /> and the <see cref="P:System.Linq.Expressions.UnaryExpression.Operand" /> and <see cref="P:System.Linq.Expressions.UnaryExpression.Method" /> properties set to the specified values.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="fef91-2617"><xref:System.Linq.Expressions.UnaryExpression.Method%2A> Результирующего <xref:System.Linq.Expressions.UnaryExpression> присваивается метод реализации.</span><span class="sxs-lookup"><span data-stu-id="fef91-2617">The <xref:System.Linq.Expressions.UnaryExpression.Method%2A> property of the resulting <xref:System.Linq.Expressions.UnaryExpression> is set to the implementing method.</span></span> <span data-ttu-id="fef91-2618"><xref:System.Linq.Expressions.Expression.Type%2A> Свойству присваивается тип узла.</span><span class="sxs-lookup"><span data-stu-id="fef91-2618">The <xref:System.Linq.Expressions.Expression.Type%2A> property is set to the type of the node.</span></span> <span data-ttu-id="fef91-2619">Если узел удаляется, <xref:System.Linq.Expressions.BinaryExpression.IsLifted%2A> и <xref:System.Linq.Expressions.BinaryExpression.IsLiftedToNull%2A> оба являются свойства `true`.</span><span class="sxs-lookup"><span data-stu-id="fef91-2619">If the node is lifted, the <xref:System.Linq.Expressions.BinaryExpression.IsLifted%2A> and <xref:System.Linq.Expressions.BinaryExpression.IsLiftedToNull%2A> properties are both `true`.</span></span> <span data-ttu-id="fef91-2620">В противном случае они имеют значение false.</span><span class="sxs-lookup"><span data-stu-id="fef91-2620">Otherwise, they are false.</span></span>  
  
#### <a name="implementing-method"></a><span data-ttu-id="fef91-2621">Реализация метода</span><span class="sxs-lookup"><span data-stu-id="fef91-2621">Implementing Method</span></span>  
 <span data-ttu-id="fef91-2622">Следующие правила определяют метод реализации для операции:</span><span class="sxs-lookup"><span data-stu-id="fef91-2622">The following rules determine the implementing method for the operation:</span></span>  
  
-   <span data-ttu-id="fef91-2623">Если `method` не `null` , и это отличный от void, `static` (`Shared` в Visual Basic) метод, который принимает один аргумент — это метод реализации для узла.</span><span class="sxs-lookup"><span data-stu-id="fef91-2623">If `method` is not `null` and it represents a non-void, `static` (`Shared` in Visual Basic) method that takes one argument, it is the implementing method for the node.</span></span>  
  
-   <span data-ttu-id="fef91-2624">Если `expression`. Тип — определяемого пользователем типа, определяющее унарный минус-оператор, <xref:System.Reflection.MethodInfo> , который представляет оператор — это метод реализации.</span><span class="sxs-lookup"><span data-stu-id="fef91-2624">If `expression`.Type is a user-defined type that defines the unary minus operator, the <xref:System.Reflection.MethodInfo> that represents that operator is the implementing method.</span></span>  
  
-   <span data-ttu-id="fef91-2625">В противном случае, если `expression`. Тип является числовым типом, метод реализации является `null`.</span><span class="sxs-lookup"><span data-stu-id="fef91-2625">Otherwise, if `expression`.Type is a numeric type, the implementing method is `null`.</span></span>  
  
#### <a name="node-type-and-lifted-versus-non-lifted"></a><span data-ttu-id="fef91-2626">Тип узла с ликвидацией или без</span><span class="sxs-lookup"><span data-stu-id="fef91-2626">Node Type and Lifted versus Non-Lifted</span></span>  
 <span data-ttu-id="fef91-2627">Если метод реализации не `null`:</span><span class="sxs-lookup"><span data-stu-id="fef91-2627">If the implementing method is not `null`:</span></span>  
  
-   <span data-ttu-id="fef91-2628">Если `expression`. Тип допускает присваивание типу аргумента метода реализации, узел не удаляется.</span><span class="sxs-lookup"><span data-stu-id="fef91-2628">If `expression`.Type is assignable to the argument type of the implementing method, the node is not lifted.</span></span> <span data-ttu-id="fef91-2629">Тип узла — тип возвращаемого значения метода реализации.</span><span class="sxs-lookup"><span data-stu-id="fef91-2629">The type of the node is the return type of the implementing method.</span></span>  
  
-   <span data-ttu-id="fef91-2630">Если выполняются два следующих условия, узел удаляется, а тип узла — обнуляемый тип, соответствующий тип возвращаемого значения метода реализации:</span><span class="sxs-lookup"><span data-stu-id="fef91-2630">If the following two conditions are satisfied, the node is lifted and the type of the node is the nullable type that corresponds to the return type of the implementing method:</span></span>  
  
    -   <span data-ttu-id="fef91-2631">`expression`. Тип является типом значения, допускающие значение NULL, и соответствующий тип не поддерживающий значение NULL равен типу аргумента метода реализации.</span><span class="sxs-lookup"><span data-stu-id="fef91-2631">`expression`.Type is a nullable value type and the corresponding non-nullable value type is equal to the argument type of the implementing method.</span></span>  
  
    -   <span data-ttu-id="fef91-2632">Тип возвращаемого значения метода реализации является типом значения, не допускающие значения NULL.</span><span class="sxs-lookup"><span data-stu-id="fef91-2632">The return type of the implementing method is a non-nullable value type.</span></span>  
  
 <span data-ttu-id="fef91-2633">Если метод реализации `null`, тип узла — `expression`. Тип.</span><span class="sxs-lookup"><span data-stu-id="fef91-2633">If the implementing method is `null`, the type of the node is `expression`.Type.</span></span> <span data-ttu-id="fef91-2634">Если `expression`. Тип, не допускающие значения NULL, узел не удаляется.</span><span class="sxs-lookup"><span data-stu-id="fef91-2634">If `expression`.Type is non-nullable, the node is not lifted.</span></span> <span data-ttu-id="fef91-2635">В противном случае узел удаляется.</span><span class="sxs-lookup"><span data-stu-id="fef91-2635">Otherwise, the node is lifted.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="fef91-2636">
            <paramref name="expression" /> — <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fef91-2636">
              <paramref name="expression" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="fef91-2637">Значение параметра <paramref name="method" /> не равно <see langword="null" />, и метод, который представляется этим параметром, возвращает значение <see langword="void" />, не является <see langword="static" /> (<see langword="Shared" /> в Visual Basic) и не принимает ровно один аргумент.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fef91-2637">
              <paramref name="method" /> is not <see langword="null" /> and the method it represents returns <see langword="void" />, is not <see langword="static" /> (<see langword="Shared" /> in Visual Basic), or does not take exactly one argument.</span>
          </span>
        </exception>
        <exception cref="T:System.InvalidOperationException">
          <span data-ttu-id="fef91-2638">
            <paramref name="method" /> равно <see langword="null" />, а унарный минус-оператор не определен для типа <paramref name="expression" />.Type.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fef91-2638">
              <paramref name="method" /> is <see langword="null" /> and the unary minus operator is not defined for <paramref name="expression" />.Type.</span>
          </span>
          <span data-ttu-id="fef91-2639">-или-</span>
          <span class="sxs-lookup">
            <span data-stu-id="fef91-2639">-or-</span>
          </span>
          <span data-ttu-id="fef91-2640">Тип <paramref name="expression" />.Type (или соответствующий тип, не поддерживающий значение null, если он является типом, поддерживающим значение null) не назначается типу аргумента метода, представленного <paramref name="method" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fef91-2640">
              <paramref name="expression" />.Type (or its corresponding non-nullable type if it is a nullable value type) is not assignable to the argument type of the method represented by <paramref name="method" />.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <MemberGroup MemberName="NegateChecked">
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="fef91-2641">Создает <see cref="T:System.Linq.Expressions.UnaryExpression" />, представляющий операцию арифметического отрицания, содержащую проверку переполнения.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fef91-2641">Creates a <see cref="T:System.Linq.Expressions.UnaryExpression" /> that represents an arithmetic negation operation that has overflow checking.</span>
          </span>
        </summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="NegateChecked">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.UnaryExpression NegateChecked (System.Linq.Expressions.Expression expression);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.UnaryExpression NegateChecked(class System.Linq.Expressions.Expression expression) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.NegateChecked(System.Linq.Expressions.Expression)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Linq::Expressions::UnaryExpression ^ NegateChecked(System::Linq::Expressions::Expression ^ expression);" />
      <MemberSignature Language="F#" Value="static member NegateChecked : System.Linq.Expressions.Expression -&gt; System.Linq.Expressions.UnaryExpression" Usage="System.Linq.Expressions.Expression.NegateChecked expression" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.UnaryExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="expression" Type="System.Linq.Expressions.Expression" />
      </Parameters>
      <Docs>
        <param name="expression">
          <span data-ttu-id="fef91-2642">Объект <see cref="T:System.Linq.Expressions.Expression" />, который следует задать в качестве значения свойства <see cref="P:System.Linq.Expressions.UnaryExpression.Operand" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fef91-2642">An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.UnaryExpression.Operand" /> property equal to.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="fef91-2643">Создает <see cref="T:System.Linq.Expressions.UnaryExpression" />, представляющий операцию арифметического отрицания, содержащую проверку переполнения.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fef91-2643">Creates a <see cref="T:System.Linq.Expressions.UnaryExpression" /> that represents an arithmetic negation operation that has overflow checking.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="fef91-2644">Выражение <see cref="T:System.Linq.Expressions.UnaryExpression" /> со свойством <see cref="P:System.Linq.Expressions.Expression.NodeType" />, равным <see cref="F:System.Linq.Expressions.ExpressionType.NegateChecked" />, и свойством <see cref="P:System.Linq.Expressions.UnaryExpression.Operand" />, для которого задано указанное значение.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fef91-2644">A <see cref="T:System.Linq.Expressions.UnaryExpression" /> that has the <see cref="P:System.Linq.Expressions.Expression.NodeType" /> property equal to <see cref="F:System.Linq.Expressions.ExpressionType.NegateChecked" /> and the <see cref="P:System.Linq.Expressions.UnaryExpression.Operand" /> property set to the specified value.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="fef91-2645"><xref:System.Linq.Expressions.UnaryExpression.Method%2A> Результирующего <xref:System.Linq.Expressions.UnaryExpression> присваивается метод реализации.</span><span class="sxs-lookup"><span data-stu-id="fef91-2645">The <xref:System.Linq.Expressions.UnaryExpression.Method%2A> property of the resulting <xref:System.Linq.Expressions.UnaryExpression> is set to the implementing method.</span></span> <span data-ttu-id="fef91-2646"><xref:System.Linq.Expressions.Expression.Type%2A> Свойству присваивается тип узла.</span><span class="sxs-lookup"><span data-stu-id="fef91-2646">The <xref:System.Linq.Expressions.Expression.Type%2A> property is set to the type of the node.</span></span> <span data-ttu-id="fef91-2647">Если узел удаляется, <xref:System.Linq.Expressions.BinaryExpression.IsLifted%2A> и <xref:System.Linq.Expressions.BinaryExpression.IsLiftedToNull%2A> оба являются свойства `true`.</span><span class="sxs-lookup"><span data-stu-id="fef91-2647">If the node is lifted, the <xref:System.Linq.Expressions.BinaryExpression.IsLifted%2A> and <xref:System.Linq.Expressions.BinaryExpression.IsLiftedToNull%2A> properties are both `true`.</span></span> <span data-ttu-id="fef91-2648">В противном случае они имеют значение false.</span><span class="sxs-lookup"><span data-stu-id="fef91-2648">Otherwise, they are false.</span></span>  
  
#### <a name="implementing-method"></a><span data-ttu-id="fef91-2649">Реализация метода</span><span class="sxs-lookup"><span data-stu-id="fef91-2649">Implementing Method</span></span>  
 <span data-ttu-id="fef91-2650">Следующие правила определяют метод реализации для операции:</span><span class="sxs-lookup"><span data-stu-id="fef91-2650">The following rules determine the implementing method for the operation:</span></span>  
  
-   <span data-ttu-id="fef91-2651">Если `expression`. Тип — определяемого пользователем типа, определяющее унарный минус-оператор, <xref:System.Reflection.MethodInfo> , который представляет оператор — это метод реализации.</span><span class="sxs-lookup"><span data-stu-id="fef91-2651">If `expression`.Type is a user-defined type that defines the unary minus operator, the <xref:System.Reflection.MethodInfo> that represents that operator is the implementing method.</span></span>  
  
-   <span data-ttu-id="fef91-2652">В противном случае, если `expression`. Тип является числовым типом, метод реализации является `null`.</span><span class="sxs-lookup"><span data-stu-id="fef91-2652">Otherwise, if `expression`.Type is a numeric type, the implementing method is `null`.</span></span>  
  
#### <a name="node-type-and-lifted-versus-non-lifted"></a><span data-ttu-id="fef91-2653">Тип узла с ликвидацией или без</span><span class="sxs-lookup"><span data-stu-id="fef91-2653">Node Type and Lifted versus Non-Lifted</span></span>  
 <span data-ttu-id="fef91-2654">Если метод реализации не `null`:</span><span class="sxs-lookup"><span data-stu-id="fef91-2654">If the implementing method is not `null`:</span></span>  
  
-   <span data-ttu-id="fef91-2655">Если `expression`. Тип допускает присваивание типу аргумента метода реализации, узел не удаляется.</span><span class="sxs-lookup"><span data-stu-id="fef91-2655">If `expression`.Type is assignable to the argument type of the implementing method, the node is not lifted.</span></span> <span data-ttu-id="fef91-2656">Тип узла — тип возвращаемого значения метода реализации.</span><span class="sxs-lookup"><span data-stu-id="fef91-2656">The type of the node is the return type of the implementing method.</span></span>  
  
-   <span data-ttu-id="fef91-2657">Если выполняются два следующих условия, узел удаляется, а тип узла — обнуляемый тип, соответствующий тип возвращаемого значения метода реализации:</span><span class="sxs-lookup"><span data-stu-id="fef91-2657">If the following two conditions are satisfied, the node is lifted and the type of the node is the nullable type that corresponds to the return type of the implementing method:</span></span>  
  
    -   <span data-ttu-id="fef91-2658">`expression`. Тип является типом значения, допускающие значение NULL, и соответствующий тип не поддерживающий значение NULL равен типу аргумента метода реализации.</span><span class="sxs-lookup"><span data-stu-id="fef91-2658">`expression`.Type is a nullable value type and the corresponding non-nullable value type is equal to the argument type of the implementing method.</span></span>  
  
    -   <span data-ttu-id="fef91-2659">Тип возвращаемого значения метода реализации является типом значения, не допускающие значения NULL.</span><span class="sxs-lookup"><span data-stu-id="fef91-2659">The return type of the implementing method is a non-nullable value type.</span></span>  
  
 <span data-ttu-id="fef91-2660">Если метод реализации `null`, тип узла — `expression`. Тип.</span><span class="sxs-lookup"><span data-stu-id="fef91-2660">If the implementing method is `null`, the type of the node is `expression`.Type.</span></span> <span data-ttu-id="fef91-2661">Если `expression`. Тип, не допускающие значения NULL, узел не удаляется.</span><span class="sxs-lookup"><span data-stu-id="fef91-2661">If `expression`.Type is non-nullable, the node is not lifted.</span></span> <span data-ttu-id="fef91-2662">В противном случае узел удаляется.</span><span class="sxs-lookup"><span data-stu-id="fef91-2662">Otherwise, the node is lifted.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="fef91-2663">
            <paramref name="expression" /> — <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fef91-2663">
              <paramref name="expression" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.InvalidOperationException">
          <span data-ttu-id="fef91-2664">Унарный минус-оператор не определен для типа <paramref name="expression" />.Type.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fef91-2664">The unary minus operator is not defined for <paramref name="expression" />.Type.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="NegateChecked">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.UnaryExpression NegateChecked (System.Linq.Expressions.Expression expression, System.Reflection.MethodInfo method);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.UnaryExpression NegateChecked(class System.Linq.Expressions.Expression expression, class System.Reflection.MethodInfo method) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.NegateChecked(System.Linq.Expressions.Expression,System.Reflection.MethodInfo)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Linq::Expressions::UnaryExpression ^ NegateChecked(System::Linq::Expressions::Expression ^ expression, System::Reflection::MethodInfo ^ method);" />
      <MemberSignature Language="F#" Value="static member NegateChecked : System.Linq.Expressions.Expression * System.Reflection.MethodInfo -&gt; System.Linq.Expressions.UnaryExpression" Usage="System.Linq.Expressions.Expression.NegateChecked (expression, method)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.UnaryExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="expression" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="method" Type="System.Reflection.MethodInfo" />
      </Parameters>
      <Docs>
        <param name="expression">
          <span data-ttu-id="fef91-2665">Объект <see cref="T:System.Linq.Expressions.Expression" />, который следует задать в качестве значения свойства <see cref="P:System.Linq.Expressions.UnaryExpression.Operand" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fef91-2665">An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.UnaryExpression.Operand" /> property equal to.</span>
          </span>
        </param>
        <param name="method">
          <span data-ttu-id="fef91-2666">Объект <see cref="T:System.Reflection.MethodInfo" />, который следует задать в качестве значения свойства <see cref="P:System.Linq.Expressions.UnaryExpression.Method" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fef91-2666">A <see cref="T:System.Reflection.MethodInfo" /> to set the <see cref="P:System.Linq.Expressions.UnaryExpression.Method" /> property equal to.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="fef91-2667">Создает <see cref="T:System.Linq.Expressions.UnaryExpression" />, представляющий операцию арифметического отрицания, содержащую проверку переполнения.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fef91-2667">Creates a <see cref="T:System.Linq.Expressions.UnaryExpression" /> that represents an arithmetic negation operation that has overflow checking.</span>
          </span>
          <span data-ttu-id="fef91-2668">Может быть указан метод реализации.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fef91-2668">The implementing method can be specified.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="fef91-2669">Выражение <see cref="T:System.Linq.Expressions.UnaryExpression" /> со свойством<see cref="P:System.Linq.Expressions.Expression.NodeType" />, равным <see cref="F:System.Linq.Expressions.ExpressionType.NegateChecked" />, и свойствами <see cref="P:System.Linq.Expressions.UnaryExpression.Operand" /> и <see cref="P:System.Linq.Expressions.UnaryExpression.Method" />, для которых заданы указанные значения.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fef91-2669">A <see cref="T:System.Linq.Expressions.UnaryExpression" /> that has the <see cref="P:System.Linq.Expressions.Expression.NodeType" /> property equal to <see cref="F:System.Linq.Expressions.ExpressionType.NegateChecked" /> and the <see cref="P:System.Linq.Expressions.UnaryExpression.Operand" /> and <see cref="P:System.Linq.Expressions.UnaryExpression.Method" /> properties set to the specified values.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="fef91-2670"><xref:System.Linq.Expressions.UnaryExpression.Method%2A> Результирующего <xref:System.Linq.Expressions.UnaryExpression> присваивается метод реализации.</span><span class="sxs-lookup"><span data-stu-id="fef91-2670">The <xref:System.Linq.Expressions.UnaryExpression.Method%2A> property of the resulting <xref:System.Linq.Expressions.UnaryExpression> is set to the implementing method.</span></span> <span data-ttu-id="fef91-2671"><xref:System.Linq.Expressions.Expression.Type%2A> Свойству присваивается тип узла.</span><span class="sxs-lookup"><span data-stu-id="fef91-2671">The <xref:System.Linq.Expressions.Expression.Type%2A> property is set to the type of the node.</span></span> <span data-ttu-id="fef91-2672">Если узел удаляется, <xref:System.Linq.Expressions.BinaryExpression.IsLifted%2A> и <xref:System.Linq.Expressions.BinaryExpression.IsLiftedToNull%2A> оба являются свойства `true`.</span><span class="sxs-lookup"><span data-stu-id="fef91-2672">If the node is lifted, the <xref:System.Linq.Expressions.BinaryExpression.IsLifted%2A> and <xref:System.Linq.Expressions.BinaryExpression.IsLiftedToNull%2A> properties are both `true`.</span></span> <span data-ttu-id="fef91-2673">В противном случае они имеют значение false.</span><span class="sxs-lookup"><span data-stu-id="fef91-2673">Otherwise, they are false.</span></span>  
  
#### <a name="implementing-method"></a><span data-ttu-id="fef91-2674">Реализация метода</span><span class="sxs-lookup"><span data-stu-id="fef91-2674">Implementing Method</span></span>  
 <span data-ttu-id="fef91-2675">Следующие правила определяют метод реализации для операции:</span><span class="sxs-lookup"><span data-stu-id="fef91-2675">The following rules determine the implementing method for the operation:</span></span>  
  
-   <span data-ttu-id="fef91-2676">Если `method` не `null` , и это отличный от void, `static` (`Shared` в Visual Basic) метод, который принимает один аргумент — это метод реализации для узла.</span><span class="sxs-lookup"><span data-stu-id="fef91-2676">If `method` is not `null` and it represents a non-void, `static` (`Shared` in Visual Basic) method that takes one argument, it is the implementing method for the node.</span></span>  
  
-   <span data-ttu-id="fef91-2677">Если `expression`. Тип — определяемого пользователем типа, определяющее унарный минус-оператор, <xref:System.Reflection.MethodInfo> , который представляет оператор — это метод реализации.</span><span class="sxs-lookup"><span data-stu-id="fef91-2677">If `expression`.Type is a user-defined type that defines the unary minus operator, the <xref:System.Reflection.MethodInfo> that represents that operator is the implementing method.</span></span>  
  
-   <span data-ttu-id="fef91-2678">В противном случае, если `expression`. Тип является числовым типом, метод реализации является `null`.</span><span class="sxs-lookup"><span data-stu-id="fef91-2678">Otherwise, if `expression`.Type is a numeric type, the implementing method is `null`.</span></span>  
  
#### <a name="node-type-and-lifted-versus-non-lifted"></a><span data-ttu-id="fef91-2679">Тип узла с ликвидацией или без</span><span class="sxs-lookup"><span data-stu-id="fef91-2679">Node Type and Lifted versus Non-Lifted</span></span>  
 <span data-ttu-id="fef91-2680">Если метод реализации не `null`:</span><span class="sxs-lookup"><span data-stu-id="fef91-2680">If the implementing method is not `null`:</span></span>  
  
-   <span data-ttu-id="fef91-2681">Если `expression`. Тип допускает присваивание типу аргумента метода реализации, узел не удаляется.</span><span class="sxs-lookup"><span data-stu-id="fef91-2681">If `expression`.Type is assignable to the argument type of the implementing method, the node is not lifted.</span></span> <span data-ttu-id="fef91-2682">Тип узла — тип возвращаемого значения метода реализации.</span><span class="sxs-lookup"><span data-stu-id="fef91-2682">The type of the node is the return type of the implementing method.</span></span>  
  
-   <span data-ttu-id="fef91-2683">Если выполняются два следующих условия, узел удаляется, а тип узла — обнуляемый тип, соответствующий тип возвращаемого значения метода реализации:</span><span class="sxs-lookup"><span data-stu-id="fef91-2683">If the following two conditions are satisfied, the node is lifted and the type of the node is the nullable type that corresponds to the return type of the implementing method:</span></span>  
  
    -   <span data-ttu-id="fef91-2684">`expression`. Тип является типом значения, допускающие значение NULL, и соответствующий тип не поддерживающий значение NULL равен типу аргумента метода реализации.</span><span class="sxs-lookup"><span data-stu-id="fef91-2684">`expression`.Type is a nullable value type and the corresponding non-nullable value type is equal to the argument type of the implementing method.</span></span>  
  
    -   <span data-ttu-id="fef91-2685">Тип возвращаемого значения метода реализации является типом значения, не допускающие значения NULL.</span><span class="sxs-lookup"><span data-stu-id="fef91-2685">The return type of the implementing method is a non-nullable value type.</span></span>  
  
 <span data-ttu-id="fef91-2686">Если метод реализации `null`, тип узла — `expression`. Тип.</span><span class="sxs-lookup"><span data-stu-id="fef91-2686">If the implementing method is `null`, the type of the node is `expression`.Type.</span></span> <span data-ttu-id="fef91-2687">Если `expression`. Тип, не допускающие значения NULL, узел не удаляется.</span><span class="sxs-lookup"><span data-stu-id="fef91-2687">If `expression`.Type is non-nullable, the node is not lifted.</span></span> <span data-ttu-id="fef91-2688">В противном случае узел удаляется.</span><span class="sxs-lookup"><span data-stu-id="fef91-2688">Otherwise, the node is lifted.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="fef91-2689">
            <paramref name="expression" /> — <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fef91-2689">
              <paramref name="expression" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="fef91-2690">Значение параметра <paramref name="method" /> не равно <see langword="null" />, и метод, который представляется этим параметром, возвращает значение <see langword="void" />, не является <see langword="static" /> (<see langword="Shared" /> в Visual Basic) и не принимает ровно один аргумент.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fef91-2690">
              <paramref name="method" /> is not <see langword="null" /> and the method it represents returns <see langword="void" />, is not <see langword="static" /> (<see langword="Shared" /> in Visual Basic), or does not take exactly one argument.</span>
          </span>
        </exception>
        <exception cref="T:System.InvalidOperationException">
          <span data-ttu-id="fef91-2691">
            <paramref name="method" /> равно <see langword="null" />, а унарный минус-оператор не определен для типа <paramref name="expression" />.Type.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fef91-2691">
              <paramref name="method" /> is <see langword="null" /> and the unary minus operator is not defined for <paramref name="expression" />.Type.</span>
          </span>
          <span data-ttu-id="fef91-2692">-или-</span>
          <span class="sxs-lookup">
            <span data-stu-id="fef91-2692">-or-</span>
          </span>
          <span data-ttu-id="fef91-2693">Тип <paramref name="expression" />.Type (или соответствующий тип, не поддерживающий значение null, если он является типом, поддерживающим значение null) не назначается типу аргумента метода, представленного <paramref name="method" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fef91-2693">
              <paramref name="expression" />.Type (or its corresponding non-nullable type if it is a nullable value type) is not assignable to the argument type of the method represented by <paramref name="method" />.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <MemberGroup MemberName="New">
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="fef91-2694">Создает буфер <see cref="T:System.Linq.Expressions.NewExpression" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fef91-2694">Creates a <see cref="T:System.Linq.Expressions.NewExpression" />.</span>
          </span>
        </summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="New">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.NewExpression New (System.Reflection.ConstructorInfo constructor);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.NewExpression New(class System.Reflection.ConstructorInfo constructor) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.New(System.Reflection.ConstructorInfo)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function New (constructor As ConstructorInfo) As NewExpression" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Linq::Expressions::NewExpression ^ New(System::Reflection::ConstructorInfo ^ constructor);" />
      <MemberSignature Language="F#" Value="static member New : System.Reflection.ConstructorInfo -&gt; System.Linq.Expressions.NewExpression" Usage="System.Linq.Expressions.Expression.New constructor" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.NewExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="constructor" Type="System.Reflection.ConstructorInfo" />
      </Parameters>
      <Docs>
        <param name="constructor">
          <span data-ttu-id="fef91-2695">Объект <see cref="T:System.Reflection.ConstructorInfo" />, который следует задать в качестве значения свойства <see cref="P:System.Linq.Expressions.NewExpression.Constructor" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fef91-2695">The <see cref="T:System.Reflection.ConstructorInfo" /> to set the <see cref="P:System.Linq.Expressions.NewExpression.Constructor" /> property equal to.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="fef91-2696">Создает <see cref="T:System.Linq.Expressions.NewExpression" />, представляющий вызов указанного конструктора без аргументов.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fef91-2696">Creates a <see cref="T:System.Linq.Expressions.NewExpression" /> that represents calling the specified constructor that takes no arguments.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="fef91-2697">Выражение <see cref="T:System.Linq.Expressions.NewExpression" /> со свойством <see cref="P:System.Linq.Expressions.Expression.NodeType" />, равным <see cref="F:System.Linq.Expressions.ExpressionType.New" />, и свойством <see cref="P:System.Linq.Expressions.NewExpression.Constructor" />, для которого задано указанное значение.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fef91-2697">A <see cref="T:System.Linq.Expressions.NewExpression" /> that has the <see cref="P:System.Linq.Expressions.Expression.NodeType" /> property equal to <see cref="F:System.Linq.Expressions.ExpressionType.New" /> and the <see cref="P:System.Linq.Expressions.NewExpression.Constructor" /> property set to the specified value.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="fef91-2698"><xref:System.Linq.Expressions.NewExpression.Arguments%2A> И <xref:System.Linq.Expressions.NewExpression.Members%2A> свойства результирующего <xref:System.Linq.Expressions.NewExpression> — это пустой коллекции.</span><span class="sxs-lookup"><span data-stu-id="fef91-2698">The <xref:System.Linq.Expressions.NewExpression.Arguments%2A> and <xref:System.Linq.Expressions.NewExpression.Members%2A> properties of the resulting <xref:System.Linq.Expressions.NewExpression> are empty collections.</span></span> <span data-ttu-id="fef91-2699"><xref:System.Linq.Expressions.Expression.Type%2A> Свойство представляет объявляющий тип конструктора, представленного `constructor`.</span><span class="sxs-lookup"><span data-stu-id="fef91-2699">The <xref:System.Linq.Expressions.Expression.Type%2A> property represents the declaring type of the constructor represented by `constructor`.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="fef91-2700">
            <paramref name="constructor" /> — <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fef91-2700">
              <paramref name="constructor" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="fef91-2701">Конструктор, который представляет <paramref name="constructor" />, содержит не менее одного параметра.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fef91-2701">The constructor that <paramref name="constructor" /> represents has at least one parameter.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="New">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.NewExpression New (Type type);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.NewExpression New(class System.Type type) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.New(System.Type)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Linq::Expressions::NewExpression ^ New(Type ^ type);" />
      <MemberSignature Language="F#" Value="static member New : Type -&gt; System.Linq.Expressions.NewExpression" Usage="System.Linq.Expressions.Expression.New type" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.NewExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="type" Type="System.Type" />
      </Parameters>
      <Docs>
        <param name="type">
          <span data-ttu-id="fef91-2702">
            <see cref="T:System.Type" /> содержит конструктор без аргументов.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fef91-2702">A <see cref="T:System.Type" /> that has a constructor that takes no arguments.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="fef91-2703">Создает <see cref="T:System.Linq.Expressions.NewExpression" />, представляющий вызов конструктора указанного типа без параметров.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fef91-2703">Creates a <see cref="T:System.Linq.Expressions.NewExpression" /> that represents calling the parameterless constructor of the specified type.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="fef91-2704">Выражение <see cref="T:System.Linq.Expressions.NewExpression" />, содержащее свойство <see cref="P:System.Linq.Expressions.Expression.NodeType" />, равное <see cref="F:System.Linq.Expressions.ExpressionType.New" />, и свойство<see cref="P:System.Linq.Expressions.NewExpression.Constructor" />, для которого задано значение <see cref="T:System.Reflection.ConstructorInfo" />, представляющее конструктор указанного типа без параметров.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fef91-2704">A <see cref="T:System.Linq.Expressions.NewExpression" /> that has the <see cref="P:System.Linq.Expressions.Expression.NodeType" /> property equal to <see cref="F:System.Linq.Expressions.ExpressionType.New" /> and the <see cref="P:System.Linq.Expressions.NewExpression.Constructor" /> property set to the <see cref="T:System.Reflection.ConstructorInfo" /> that represents the constructor without parameters for the specified type.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="fef91-2705">`type` Параметр должен представлять тип, имеющий конструктор без параметров.</span><span class="sxs-lookup"><span data-stu-id="fef91-2705">The `type` parameter must represent a type that has a constructor without parameters.</span></span>  
  
 <span data-ttu-id="fef91-2706"><xref:System.Linq.Expressions.NewExpression.Arguments%2A> И <xref:System.Linq.Expressions.NewExpression.Members%2A> свойства результирующего <xref:System.Linq.Expressions.NewExpression> — это пустой коллекции.</span><span class="sxs-lookup"><span data-stu-id="fef91-2706">The <xref:System.Linq.Expressions.NewExpression.Arguments%2A> and <xref:System.Linq.Expressions.NewExpression.Members%2A> properties of the resulting <xref:System.Linq.Expressions.NewExpression> are empty collections.</span></span> <span data-ttu-id="fef91-2707"><xref:System.Linq.Expressions.Expression.Type%2A> Равно `type`.</span><span class="sxs-lookup"><span data-stu-id="fef91-2707">The <xref:System.Linq.Expressions.Expression.Type%2A> property is equal to `type`.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="fef91-2708">Следующий пример демонстрирует, как использовать <xref:System.Linq.Expressions.Expression.New%28System.Type%29> метод для создания <xref:System.Linq.Expressions.NewExpression> , представляющий построение нового экземпляра объекта словаря, вызвав конструктор без параметров.</span><span class="sxs-lookup"><span data-stu-id="fef91-2708">The following example demonstrates how to use the <xref:System.Linq.Expressions.Expression.New%28System.Type%29> method to create a <xref:System.Linq.Expressions.NewExpression> that represents constructing a new instance of a dictionary object by calling the constructor without parameters.</span></span>  
  
 [!code-csharp[System.Linq.Expressions.Expression#10](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Linq.Expressions.Expression/CS/Expression.cs#10)]
 [!code-vb[System.Linq.Expressions.Expression#10](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Linq.Expressions.Expression/VB/Expression.vb#10)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="fef91-2709">
            <paramref name="type" /> — <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fef91-2709">
              <paramref name="type" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="fef91-2710">Тип, который представляет <paramref name="type" />, не содержит конструктор без параметров.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fef91-2710">The type that <paramref name="type" /> represents does not have a constructor without parameters.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="New">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.NewExpression New (System.Reflection.ConstructorInfo constructor, System.Collections.Generic.IEnumerable&lt;System.Linq.Expressions.Expression&gt; arguments);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.NewExpression New(class System.Reflection.ConstructorInfo constructor, class System.Collections.Generic.IEnumerable`1&lt;class System.Linq.Expressions.Expression&gt; arguments) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.New(System.Reflection.ConstructorInfo,System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression})" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function New (constructor As ConstructorInfo, arguments As IEnumerable(Of Expression)) As NewExpression" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Linq::Expressions::NewExpression ^ New(System::Reflection::ConstructorInfo ^ constructor, System::Collections::Generic::IEnumerable&lt;System::Linq::Expressions::Expression ^&gt; ^ arguments);" />
      <MemberSignature Language="F#" Value="static member New : System.Reflection.ConstructorInfo * seq&lt;System.Linq.Expressions.Expression&gt; -&gt; System.Linq.Expressions.NewExpression" Usage="System.Linq.Expressions.Expression.New (constructor, arguments)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.NewExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="constructor" Type="System.Reflection.ConstructorInfo" />
        <Parameter Name="arguments" Type="System.Collections.Generic.IEnumerable&lt;System.Linq.Expressions.Expression&gt;" />
      </Parameters>
      <Docs>
        <param name="constructor">
          <span data-ttu-id="fef91-2711">Объект <see cref="T:System.Reflection.ConstructorInfo" />, который следует задать в качестве значения свойства <see cref="P:System.Linq.Expressions.NewExpression.Constructor" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fef91-2711">The <see cref="T:System.Reflection.ConstructorInfo" /> to set the <see cref="P:System.Linq.Expressions.NewExpression.Constructor" /> property equal to.</span>
          </span>
        </param>
        <param name="arguments">
          <span data-ttu-id="fef91-2712">
            <see cref="T:System.Collections.Generic.IEnumerable`1" />, содержащий все объекты <see cref="T:System.Linq.Expressions.Expression" />, используемые для заполнения коллекции <see cref="P:System.Linq.Expressions.NewExpression.Arguments" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fef91-2712">An <see cref="T:System.Collections.Generic.IEnumerable`1" /> that contains <see cref="T:System.Linq.Expressions.Expression" /> objects to use to populate the <see cref="P:System.Linq.Expressions.NewExpression.Arguments" /> collection.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="fef91-2713">Создает <see cref="T:System.Linq.Expressions.NewExpression" />, представляющий вызов указанного конструктора с указанными аргументами.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fef91-2713">Creates a <see cref="T:System.Linq.Expressions.NewExpression" /> that represents calling the specified constructor with the specified arguments.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="fef91-2714">Выражение <see cref="T:System.Linq.Expressions.NewExpression" /> со свойством<see cref="P:System.Linq.Expressions.Expression.NodeType" />, равным <see cref="F:System.Linq.Expressions.ExpressionType.New" />, и свойствами <see cref="P:System.Linq.Expressions.NewExpression.Constructor" /> и <see cref="P:System.Linq.Expressions.NewExpression.Arguments" />, для которых заданы указанные значения.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fef91-2714">A <see cref="T:System.Linq.Expressions.NewExpression" /> that has the <see cref="P:System.Linq.Expressions.Expression.NodeType" /> property equal to <see cref="F:System.Linq.Expressions.ExpressionType.New" /> and the <see cref="P:System.Linq.Expressions.NewExpression.Constructor" /> and <see cref="P:System.Linq.Expressions.NewExpression.Arguments" /> properties set to the specified values.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="fef91-2715">`arguments` Параметр должен содержать одинаковое количество элементов, как число параметров для конструктора, представленного `constructor`.</span><span class="sxs-lookup"><span data-stu-id="fef91-2715">The `arguments` parameter must contain the same number of elements as the number of parameters for the constructor represented by `constructor`.</span></span> <span data-ttu-id="fef91-2716">Если `arguments` — `null`, он считается пустым и <xref:System.Linq.Expressions.NewExpression.Arguments%2A> результирующего <xref:System.Linq.Expressions.NewExpression> является пустая коллекция.</span><span class="sxs-lookup"><span data-stu-id="fef91-2716">If `arguments` is `null`, it is considered empty, and the <xref:System.Linq.Expressions.NewExpression.Arguments%2A> property of the resulting <xref:System.Linq.Expressions.NewExpression> is an empty collection.</span></span>  
  
 <span data-ttu-id="fef91-2717"><xref:System.Linq.Expressions.Expression.Type%2A> Результирующего <xref:System.Linq.Expressions.NewExpression> представляет объявляющий тип конструктора, представленного `constructor`.</span><span class="sxs-lookup"><span data-stu-id="fef91-2717">The <xref:System.Linq.Expressions.Expression.Type%2A> property of the resulting <xref:System.Linq.Expressions.NewExpression> represents the declaring type of the constructor represented by `constructor`.</span></span> <span data-ttu-id="fef91-2718"><xref:System.Linq.Expressions.NewExpression.Members%2A> Свойства является пустая коллекция.</span><span class="sxs-lookup"><span data-stu-id="fef91-2718">The <xref:System.Linq.Expressions.NewExpression.Members%2A> property is an empty collection.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="fef91-2719">
            <paramref name="constructor" /> — <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fef91-2719">
              <paramref name="constructor" /> is <see langword="null" />.</span>
          </span>
          <span data-ttu-id="fef91-2720">-или-</span>
          <span class="sxs-lookup">
            <span data-stu-id="fef91-2720">-or-</span>
          </span>
          <span data-ttu-id="fef91-2721">Элемент параметра <paramref name="arguments" /> имеет значение <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fef91-2721">An element of <paramref name="arguments" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="fef91-2722">Параметр <paramref name="arguments" /> не содержит количество элементов, равное количеству параметров для конструктора, представленного <paramref name="constructor" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fef91-2722">The <paramref name="arguments" /> parameter does not contain the same number of elements as the number of parameters for the constructor that <paramref name="constructor" /> represents.</span>
          </span>
          <span data-ttu-id="fef91-2723">-или-</span>
          <span class="sxs-lookup">
            <span data-stu-id="fef91-2723">-or-</span>
          </span>
          <span data-ttu-id="fef91-2724">Свойство <see cref="P:System.Linq.Expressions.Expression.Type" /> элемента <paramref name="arguments" /> нельзя назначить для типа соответствующего параметра конструктора, который представляет <paramref name="constructor" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fef91-2724">The <see cref="P:System.Linq.Expressions.Expression.Type" /> property of an element of <paramref name="arguments" /> is not assignable to the type of the corresponding parameter of the constructor that <paramref name="constructor" /> represents.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="New">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.NewExpression New (System.Reflection.ConstructorInfo constructor, params System.Linq.Expressions.Expression[] arguments);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.NewExpression New(class System.Reflection.ConstructorInfo constructor, class System.Linq.Expressions.Expression[] arguments) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.New(System.Reflection.ConstructorInfo,System.Linq.Expressions.Expression[])" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function New (constructor As ConstructorInfo, ParamArray arguments As Expression()) As NewExpression" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Linq::Expressions::NewExpression ^ New(System::Reflection::ConstructorInfo ^ constructor, ... cli::array &lt;System::Linq::Expressions::Expression ^&gt; ^ arguments);" />
      <MemberSignature Language="F#" Value="static member New : System.Reflection.ConstructorInfo * System.Linq.Expressions.Expression[] -&gt; System.Linq.Expressions.NewExpression" Usage="System.Linq.Expressions.Expression.New (constructor, arguments)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.NewExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="constructor" Type="System.Reflection.ConstructorInfo" />
        <Parameter Name="arguments" Type="System.Linq.Expressions.Expression[]">
          <Attributes>
            <Attribute>
              <AttributeName>System.ParamArray</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="constructor">
          <span data-ttu-id="fef91-2725">Объект <see cref="T:System.Reflection.ConstructorInfo" />, который следует задать в качестве значения свойства <see cref="P:System.Linq.Expressions.NewExpression.Constructor" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fef91-2725">The <see cref="T:System.Reflection.ConstructorInfo" /> to set the <see cref="P:System.Linq.Expressions.NewExpression.Constructor" /> property equal to.</span>
          </span>
        </param>
        <param name="arguments">
          <span data-ttu-id="fef91-2726">Массив объектов <see cref="T:System.Linq.Expressions.Expression" /> для заполнения коллекции <see cref="P:System.Linq.Expressions.NewExpression.Arguments" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fef91-2726">An array of <see cref="T:System.Linq.Expressions.Expression" /> objects to use to populate the <see cref="P:System.Linq.Expressions.NewExpression.Arguments" /> collection.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="fef91-2727">Создает <see cref="T:System.Linq.Expressions.NewExpression" />, представляющий вызов указанного конструктора с указанными аргументами.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fef91-2727">Creates a <see cref="T:System.Linq.Expressions.NewExpression" /> that represents calling the specified constructor with the specified arguments.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="fef91-2728">Выражение <see cref="T:System.Linq.Expressions.NewExpression" /> со свойством<see cref="P:System.Linq.Expressions.Expression.NodeType" />, равным <see cref="F:System.Linq.Expressions.ExpressionType.New" />, и свойствами <see cref="P:System.Linq.Expressions.NewExpression.Constructor" /> и <see cref="P:System.Linq.Expressions.NewExpression.Arguments" />, для которых заданы указанные значения.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fef91-2728">A <see cref="T:System.Linq.Expressions.NewExpression" /> that has the <see cref="P:System.Linq.Expressions.Expression.NodeType" /> property equal to <see cref="F:System.Linq.Expressions.ExpressionType.New" /> and the <see cref="P:System.Linq.Expressions.NewExpression.Constructor" /> and <see cref="P:System.Linq.Expressions.NewExpression.Arguments" /> properties set to the specified values.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="fef91-2729">`arguments` Параметр должен содержать одинаковое количество элементов, как число параметров для конструктора, представленного `constructor`.</span><span class="sxs-lookup"><span data-stu-id="fef91-2729">The `arguments` parameter must contain the same number of elements as the number of parameters for the constructor represented by `constructor`.</span></span> <span data-ttu-id="fef91-2730">Если `arguments` — `null`, он считается пустым и <xref:System.Linq.Expressions.NewExpression.Arguments%2A> результирующего <xref:System.Linq.Expressions.NewExpression> является пустая коллекция.</span><span class="sxs-lookup"><span data-stu-id="fef91-2730">If `arguments` is `null`, it is considered empty, and the <xref:System.Linq.Expressions.NewExpression.Arguments%2A> property of the resulting <xref:System.Linq.Expressions.NewExpression> is an empty collection.</span></span>  
  
 <span data-ttu-id="fef91-2731"><xref:System.Linq.Expressions.Expression.Type%2A> Результирующего <xref:System.Linq.Expressions.NewExpression> представляет объявляющий тип конструктора, представленного `constructor`.</span><span class="sxs-lookup"><span data-stu-id="fef91-2731">The <xref:System.Linq.Expressions.Expression.Type%2A> property of the resulting <xref:System.Linq.Expressions.NewExpression> represents the declaring type of the constructor represented by `constructor`.</span></span> <span data-ttu-id="fef91-2732"><xref:System.Linq.Expressions.NewExpression.Members%2A> Свойства является пустая коллекция.</span><span class="sxs-lookup"><span data-stu-id="fef91-2732">The <xref:System.Linq.Expressions.NewExpression.Members%2A> property is an empty collection.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="fef91-2733">
            <paramref name="constructor" /> — <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fef91-2733">
              <paramref name="constructor" /> is <see langword="null" />.</span>
          </span>
          <span data-ttu-id="fef91-2734">-или-</span>
          <span class="sxs-lookup">
            <span data-stu-id="fef91-2734">-or-</span>
          </span>
          <span data-ttu-id="fef91-2735">Элемент <paramref name="arguments" /> имеет значение <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fef91-2735">An element of <paramref name="arguments" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="fef91-2736">Длина <paramref name="arguments" /> соответствует числу параметров конструктора, представляемого <paramref name="constructor" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fef91-2736">The length of <paramref name="arguments" /> does match the number of parameters for the constructor that <paramref name="constructor" /> represents.</span>
          </span>
          <span data-ttu-id="fef91-2737">-или-</span>
          <span class="sxs-lookup">
            <span data-stu-id="fef91-2737">-or-</span>
          </span>
          <span data-ttu-id="fef91-2738">Свойство <see cref="P:System.Linq.Expressions.Expression.Type" /> элемента <paramref name="arguments" /> нельзя назначить для типа соответствующего параметра конструктора, который представляет <paramref name="constructor" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fef91-2738">The <see cref="P:System.Linq.Expressions.Expression.Type" /> property of an element of <paramref name="arguments" /> is not assignable to the type of the corresponding parameter of the constructor that <paramref name="constructor" /> represents.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="New">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.NewExpression New (System.Reflection.ConstructorInfo constructor, System.Collections.Generic.IEnumerable&lt;System.Linq.Expressions.Expression&gt; arguments, System.Collections.Generic.IEnumerable&lt;System.Reflection.MemberInfo&gt; members);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.NewExpression New(class System.Reflection.ConstructorInfo constructor, class System.Collections.Generic.IEnumerable`1&lt;class System.Linq.Expressions.Expression&gt; arguments, class System.Collections.Generic.IEnumerable`1&lt;class System.Reflection.MemberInfo&gt; members) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.New(System.Reflection.ConstructorInfo,System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression},System.Collections.Generic.IEnumerable{System.Reflection.MemberInfo})" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function New (constructor As ConstructorInfo, arguments As IEnumerable(Of Expression), members As IEnumerable(Of MemberInfo)) As NewExpression" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Linq::Expressions::NewExpression ^ New(System::Reflection::ConstructorInfo ^ constructor, System::Collections::Generic::IEnumerable&lt;System::Linq::Expressions::Expression ^&gt; ^ arguments, System::Collections::Generic::IEnumerable&lt;System::Reflection::MemberInfo ^&gt; ^ members);" />
      <MemberSignature Language="F#" Value="static member New : System.Reflection.ConstructorInfo * seq&lt;System.Linq.Expressions.Expression&gt; * seq&lt;System.Reflection.MemberInfo&gt; -&gt; System.Linq.Expressions.NewExpression" Usage="System.Linq.Expressions.Expression.New (constructor, arguments, members)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.NewExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="constructor" Type="System.Reflection.ConstructorInfo" />
        <Parameter Name="arguments" Type="System.Collections.Generic.IEnumerable&lt;System.Linq.Expressions.Expression&gt;" />
        <Parameter Name="members" Type="System.Collections.Generic.IEnumerable&lt;System.Reflection.MemberInfo&gt;" />
      </Parameters>
      <Docs>
        <param name="constructor">
          <span data-ttu-id="fef91-2739">Объект <see cref="T:System.Reflection.ConstructorInfo" />, который следует задать в качестве значения свойства <see cref="P:System.Linq.Expressions.NewExpression.Constructor" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fef91-2739">The <see cref="T:System.Reflection.ConstructorInfo" /> to set the <see cref="P:System.Linq.Expressions.NewExpression.Constructor" /> property equal to.</span>
          </span>
        </param>
        <param name="arguments">
          <span data-ttu-id="fef91-2740">
            <see cref="T:System.Collections.Generic.IEnumerable`1" />, содержащий все объекты <see cref="T:System.Linq.Expressions.Expression" />, используемые для заполнения коллекции <see cref="P:System.Linq.Expressions.NewExpression.Arguments" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fef91-2740">An <see cref="T:System.Collections.Generic.IEnumerable`1" /> that contains <see cref="T:System.Linq.Expressions.Expression" /> objects to use to populate the <see cref="P:System.Linq.Expressions.NewExpression.Arguments" /> collection.</span>
          </span>
        </param>
        <param name="members">
          <span data-ttu-id="fef91-2741">
            <see cref="T:System.Collections.Generic.IEnumerable`1" />, содержащий все объекты <see cref="T:System.Reflection.MemberInfo" />, используемые для заполнения коллекции <see cref="P:System.Linq.Expressions.NewExpression.Members" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fef91-2741">An <see cref="T:System.Collections.Generic.IEnumerable`1" /> that contains <see cref="T:System.Reflection.MemberInfo" /> objects to use to populate the <see cref="P:System.Linq.Expressions.NewExpression.Members" /> collection.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="fef91-2742">Создает <see cref="T:System.Linq.Expressions.NewExpression" />, представляющий вызов указанного конструктора с указанными аргументами.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fef91-2742">Creates a <see cref="T:System.Linq.Expressions.NewExpression" /> that represents calling the specified constructor with the specified arguments.</span>
          </span>
          <span data-ttu-id="fef91-2743">Указаны элементы с доступом к полям, инициализированным конструктором.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fef91-2743">The members that access the constructor initialized fields are specified.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="fef91-2744">Выражение <see cref="T:System.Linq.Expressions.NewExpression" /> со свойством <see cref="P:System.Linq.Expressions.Expression.NodeType" />, равным <see cref="F:System.Linq.Expressions.ExpressionType.New" />, и свойствами <see cref="P:System.Linq.Expressions.NewExpression.Constructor" />, <see cref="P:System.Linq.Expressions.NewExpression.Arguments" /> и <see cref="P:System.Linq.Expressions.NewExpression.Members" />, для которых заданы указанные значения.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fef91-2744">A <see cref="T:System.Linq.Expressions.NewExpression" /> that has the <see cref="P:System.Linq.Expressions.Expression.NodeType" /> property equal to <see cref="F:System.Linq.Expressions.ExpressionType.New" /> and the <see cref="P:System.Linq.Expressions.NewExpression.Constructor" />, <see cref="P:System.Linq.Expressions.NewExpression.Arguments" /> and <see cref="P:System.Linq.Expressions.NewExpression.Members" /> properties set to the specified values.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="fef91-2745">`arguments` Параметр должен содержать одинаковое количество элементов, как число параметров для конструктора, представленного `constructor`.</span><span class="sxs-lookup"><span data-stu-id="fef91-2745">The `arguments` parameter must contain the same number of elements as the number of parameters for the constructor represented by `constructor`.</span></span> <span data-ttu-id="fef91-2746">Если `arguments` — `null`, он считается пустым и <xref:System.Linq.Expressions.NewExpression.Arguments%2A> результирующего <xref:System.Linq.Expressions.NewExpression> является пустая коллекция.</span><span class="sxs-lookup"><span data-stu-id="fef91-2746">If `arguments` is `null`, it is considered empty, and the <xref:System.Linq.Expressions.NewExpression.Arguments%2A> property of the resulting <xref:System.Linq.Expressions.NewExpression> is an empty collection.</span></span>  
  
 <span data-ttu-id="fef91-2747">Если `members` — `null`, <xref:System.Linq.Expressions.NewExpression.Members%2A> результирующего <xref:System.Linq.Expressions.NewExpression> является пустая коллекция.</span><span class="sxs-lookup"><span data-stu-id="fef91-2747">If `members` is `null`, the <xref:System.Linq.Expressions.NewExpression.Members%2A> property of the resulting <xref:System.Linq.Expressions.NewExpression> is an empty collection.</span></span> <span data-ttu-id="fef91-2748">Если `members` не `null`, он должен иметь одинаковое количество элементов, как `arguments` и каждый элемент не должен быть `null`.</span><span class="sxs-lookup"><span data-stu-id="fef91-2748">If `members` is not `null`, it must have the same number of elements as `arguments` and each element must not be `null`.</span></span> <span data-ttu-id="fef91-2749">Каждый элемент `members` должно быть <xref:System.Reflection.PropertyInfo>, <xref:System.Reflection.FieldInfo> или <xref:System.Reflection.MethodInfo> , представляющий член экземпляра объявляющего типа конструктора, представленного `constructor`.</span><span class="sxs-lookup"><span data-stu-id="fef91-2749">Each element of `members` must be a <xref:System.Reflection.PropertyInfo>, <xref:System.Reflection.FieldInfo> or <xref:System.Reflection.MethodInfo> that represents an instance member on the declaring type of the constructor represented by `constructor`.</span></span> <span data-ttu-id="fef91-2750">Если оно представляет свойство, свойство должно иметь `get` метода доступа.</span><span class="sxs-lookup"><span data-stu-id="fef91-2750">If it represents a property, the property must have a `get` accessor.</span></span> <span data-ttu-id="fef91-2751">Соответствующий элемент `arguments` для каждого элемента `members` должен иметь <xref:System.Linq.Expressions.Expression.Type%2A> свойство, которое представляет тип, который может быть назначен тип члена, `members` элемент представляет.</span><span class="sxs-lookup"><span data-stu-id="fef91-2751">The corresponding element of `arguments` for each element of `members` must have a <xref:System.Linq.Expressions.Expression.Type%2A> property that represents a type that is assignable to the type of the member that the `members` element represents.</span></span>  
  
 <span data-ttu-id="fef91-2752"><xref:System.Linq.Expressions.Expression.Type%2A> Результирующего <xref:System.Linq.Expressions.NewExpression> представляет объявляющий тип конструктора, `constructor` представляет.</span><span class="sxs-lookup"><span data-stu-id="fef91-2752">The <xref:System.Linq.Expressions.Expression.Type%2A> property of the resulting <xref:System.Linq.Expressions.NewExpression> represents the declaring type of the constructor that `constructor` represents.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="fef91-2753">
            <paramref name="constructor" /> — <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fef91-2753">
              <paramref name="constructor" /> is <see langword="null" />.</span>
          </span>
          <span data-ttu-id="fef91-2754">-или-</span>
          <span class="sxs-lookup">
            <span data-stu-id="fef91-2754">-or-</span>
          </span>
          <span data-ttu-id="fef91-2755">Элемент параметра <paramref name="arguments" /> имеет значение <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fef91-2755">An element of <paramref name="arguments" /> is <see langword="null" />.</span>
          </span>
          <span data-ttu-id="fef91-2756">-или-</span>
          <span class="sxs-lookup">
            <span data-stu-id="fef91-2756">-or-</span>
          </span>
          <span data-ttu-id="fef91-2757">Элемент параметра <paramref name="members" /> имеет значение <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fef91-2757">An element of <paramref name="members" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="fef91-2758">Параметр <paramref name="arguments" /> не содержит количество элементов, равное количеству параметров для конструктора, представленного <paramref name="constructor" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fef91-2758">The <paramref name="arguments" /> parameter does not contain the same number of elements as the number of parameters for the constructor that <paramref name="constructor" /> represents.</span>
          </span>
          <span data-ttu-id="fef91-2759">-или-</span>
          <span class="sxs-lookup">
            <span data-stu-id="fef91-2759">-or-</span>
          </span>
          <span data-ttu-id="fef91-2760">Свойство <see cref="P:System.Linq.Expressions.Expression.Type" /> элемента <paramref name="arguments" /> нельзя назначить для типа соответствующего параметра конструктора, который представляет <paramref name="constructor" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fef91-2760">The <see cref="P:System.Linq.Expressions.Expression.Type" /> property of an element of <paramref name="arguments" /> is not assignable to the type of the corresponding parameter of the constructor that <paramref name="constructor" /> represents.</span>
          </span>
          <span data-ttu-id="fef91-2761">-или-</span>
          <span class="sxs-lookup">
            <span data-stu-id="fef91-2761">-or-</span>
          </span>
          <span data-ttu-id="fef91-2762">Параметр <paramref name="members" /> не содержит то же количество элементов, что и параметр <paramref name="arguments" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fef91-2762">The <paramref name="members" /> parameter does not have the same number of elements as <paramref name="arguments" />.</span>
          </span>
          <span data-ttu-id="fef91-2763">-или-</span>
          <span class="sxs-lookup">
            <span data-stu-id="fef91-2763">-or-</span>
          </span>
          <span data-ttu-id="fef91-2764">Элемент свойства <paramref name="arguments" /> содержит <see cref="P:System.Linq.Expressions.Expression.Type" />, представляющий тип, который нельзя назначить для типа элемента, представленного соответствующим элементом <paramref name="members" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fef91-2764">An element of <paramref name="arguments" /> has a <see cref="P:System.Linq.Expressions.Expression.Type" /> property that represents a type that is not assignable to the type of the member that is represented by the corresponding element of <paramref name="members" />.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="New">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.NewExpression New (System.Reflection.ConstructorInfo constructor, System.Collections.Generic.IEnumerable&lt;System.Linq.Expressions.Expression&gt; arguments, params System.Reflection.MemberInfo[] members);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.NewExpression New(class System.Reflection.ConstructorInfo constructor, class System.Collections.Generic.IEnumerable`1&lt;class System.Linq.Expressions.Expression&gt; arguments, class System.Reflection.MemberInfo[] members) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.New(System.Reflection.ConstructorInfo,System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression},System.Reflection.MemberInfo[])" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function New (constructor As ConstructorInfo, arguments As IEnumerable(Of Expression), ParamArray members As MemberInfo()) As NewExpression" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Linq::Expressions::NewExpression ^ New(System::Reflection::ConstructorInfo ^ constructor, System::Collections::Generic::IEnumerable&lt;System::Linq::Expressions::Expression ^&gt; ^ arguments, ... cli::array &lt;System::Reflection::MemberInfo ^&gt; ^ members);" />
      <MemberSignature Language="F#" Value="static member New : System.Reflection.ConstructorInfo * seq&lt;System.Linq.Expressions.Expression&gt; * System.Reflection.MemberInfo[] -&gt; System.Linq.Expressions.NewExpression" Usage="System.Linq.Expressions.Expression.New (constructor, arguments, members)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.NewExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="constructor" Type="System.Reflection.ConstructorInfo" />
        <Parameter Name="arguments" Type="System.Collections.Generic.IEnumerable&lt;System.Linq.Expressions.Expression&gt;" />
        <Parameter Name="members" Type="System.Reflection.MemberInfo[]">
          <Attributes>
            <Attribute>
              <AttributeName>System.ParamArray</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="constructor">
          <span data-ttu-id="fef91-2765">Объект <see cref="T:System.Reflection.ConstructorInfo" />, который следует задать в качестве значения свойства <see cref="P:System.Linq.Expressions.NewExpression.Constructor" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fef91-2765">The <see cref="T:System.Reflection.ConstructorInfo" /> to set the <see cref="P:System.Linq.Expressions.NewExpression.Constructor" /> property equal to.</span>
          </span>
        </param>
        <param name="arguments">
          <span data-ttu-id="fef91-2766">
            <see cref="T:System.Collections.Generic.IEnumerable`1" />, содержащий все объекты <see cref="T:System.Linq.Expressions.Expression" />, используемые для заполнения коллекции <see cref="P:System.Linq.Expressions.NewExpression.Arguments" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fef91-2766">An <see cref="T:System.Collections.Generic.IEnumerable`1" /> that contains <see cref="T:System.Linq.Expressions.Expression" /> objects to use to populate the <see cref="P:System.Linq.Expressions.NewExpression.Arguments" /> collection.</span>
          </span>
        </param>
        <param name="members">
          <span data-ttu-id="fef91-2767">Массив объектов <see cref="T:System.Reflection.MemberInfo" /> для заполнения коллекции <see cref="P:System.Linq.Expressions.NewExpression.Members" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fef91-2767">An array of <see cref="T:System.Reflection.MemberInfo" /> objects to use to populate the <see cref="P:System.Linq.Expressions.NewExpression.Members" /> collection.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="fef91-2768">Создает <see cref="T:System.Linq.Expressions.NewExpression" />, представляющий вызов указанного конструктора с указанными аргументами.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fef91-2768">Creates a <see cref="T:System.Linq.Expressions.NewExpression" /> that represents calling the specified constructor with the specified arguments.</span>
          </span>
          <span data-ttu-id="fef91-2769">Указаны элементы с доступом к полям, инициализированным в качестве массива.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fef91-2769">The members that access the constructor initialized fields are specified as an array.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="fef91-2770">Выражение <see cref="T:System.Linq.Expressions.NewExpression" /> со свойством <see cref="P:System.Linq.Expressions.Expression.NodeType" />, равным <see cref="F:System.Linq.Expressions.ExpressionType.New" />, и свойствами <see cref="P:System.Linq.Expressions.NewExpression.Constructor" />, <see cref="P:System.Linq.Expressions.NewExpression.Arguments" /> и <see cref="P:System.Linq.Expressions.NewExpression.Members" />, для которых заданы указанные значения.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fef91-2770">A <see cref="T:System.Linq.Expressions.NewExpression" /> that has the <see cref="P:System.Linq.Expressions.Expression.NodeType" /> property equal to <see cref="F:System.Linq.Expressions.ExpressionType.New" /> and the <see cref="P:System.Linq.Expressions.NewExpression.Constructor" />, <see cref="P:System.Linq.Expressions.NewExpression.Arguments" /> and <see cref="P:System.Linq.Expressions.NewExpression.Members" /> properties set to the specified values.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="fef91-2771">`arguments` Параметр должен содержать одинаковое количество элементов, как число параметров для конструктора, представленного `constructor`.</span><span class="sxs-lookup"><span data-stu-id="fef91-2771">The `arguments` parameter must contain the same number of elements as the number of parameters for the constructor represented by `constructor`.</span></span> <span data-ttu-id="fef91-2772">Если `arguments` — `null`, он считается пустым и <xref:System.Linq.Expressions.NewExpression.Arguments%2A> результирующего <xref:System.Linq.Expressions.NewExpression> является пустая коллекция.</span><span class="sxs-lookup"><span data-stu-id="fef91-2772">If `arguments` is `null`, it is considered empty, and the <xref:System.Linq.Expressions.NewExpression.Arguments%2A> property of the resulting <xref:System.Linq.Expressions.NewExpression> is an empty collection.</span></span>  
  
 <span data-ttu-id="fef91-2773">Если `members` — `null`, <xref:System.Linq.Expressions.NewExpression.Members%2A> результирующего <xref:System.Linq.Expressions.NewExpression> является пустая коллекция.</span><span class="sxs-lookup"><span data-stu-id="fef91-2773">If `members` is `null`, the <xref:System.Linq.Expressions.NewExpression.Members%2A> property of the resulting <xref:System.Linq.Expressions.NewExpression> is an empty collection.</span></span> <span data-ttu-id="fef91-2774">Если `members` не `null`, он должен иметь одинаковое количество элементов, как `arguments` и каждый элемент не должен быть `null`.</span><span class="sxs-lookup"><span data-stu-id="fef91-2774">If `members` is not `null`, it must have the same number of elements as `arguments` and each element must not be `null`.</span></span> <span data-ttu-id="fef91-2775">Каждый элемент `members` должно быть <xref:System.Reflection.PropertyInfo>, <xref:System.Reflection.FieldInfo> или <xref:System.Reflection.MethodInfo> , представляющий член экземпляра объявляющего типа конструктора, представленного `constructor`.</span><span class="sxs-lookup"><span data-stu-id="fef91-2775">Each element of `members` must be a <xref:System.Reflection.PropertyInfo>, <xref:System.Reflection.FieldInfo> or <xref:System.Reflection.MethodInfo> that represents an instance member on the declaring type of the constructor represented by `constructor`.</span></span> <span data-ttu-id="fef91-2776">Если оно представляет свойство, свойство должно быть возможность получить значение связанного поля.</span><span class="sxs-lookup"><span data-stu-id="fef91-2776">If it represents a property, the property must be able to retrieve the value of the associated field.</span></span> <span data-ttu-id="fef91-2777">Соответствующий элемент `arguments` для каждого элемента `members` должен иметь <xref:System.Linq.Expressions.Expression.Type%2A> свойство, которое представляет тип, который может быть назначен тип члена, `members` элемент представляет.</span><span class="sxs-lookup"><span data-stu-id="fef91-2777">The corresponding element of `arguments` for each element of `members` must have a <xref:System.Linq.Expressions.Expression.Type%2A> property that represents a type that is assignable to the type of the member that the `members` element represents.</span></span>  
  
 <span data-ttu-id="fef91-2778"><xref:System.Linq.Expressions.Expression.Type%2A> Результирующего <xref:System.Linq.Expressions.NewExpression> представляет объявляющий тип конструктора, `constructor` представляет.</span><span class="sxs-lookup"><span data-stu-id="fef91-2778">The <xref:System.Linq.Expressions.Expression.Type%2A> property of the resulting <xref:System.Linq.Expressions.NewExpression> represents the declaring type of the constructor that `constructor` represents.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="fef91-2779">
            <paramref name="constructor" /> — <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fef91-2779">
              <paramref name="constructor" /> is <see langword="null" />.</span>
          </span>
          <span data-ttu-id="fef91-2780">-или-</span>
          <span class="sxs-lookup">
            <span data-stu-id="fef91-2780">-or-</span>
          </span>
          <span data-ttu-id="fef91-2781">Элемент параметра <paramref name="arguments" /> имеет значение <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fef91-2781">An element of <paramref name="arguments" /> is <see langword="null" />.</span>
          </span>
          <span data-ttu-id="fef91-2782">-или-</span>
          <span class="sxs-lookup">
            <span data-stu-id="fef91-2782">-or-</span>
          </span>
          <span data-ttu-id="fef91-2783">Элемент параметра <paramref name="members" /> имеет значение <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fef91-2783">An element of <paramref name="members" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="fef91-2784">Параметр <paramref name="arguments" /> не содержит количество элементов, равное количеству параметров для конструктора, представленного <paramref name="constructor" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fef91-2784">The <paramref name="arguments" /> parameter does not contain the same number of elements as the number of parameters for the constructor that <paramref name="constructor" /> represents.</span>
          </span>
          <span data-ttu-id="fef91-2785">-или-</span>
          <span class="sxs-lookup">
            <span data-stu-id="fef91-2785">-or-</span>
          </span>
          <span data-ttu-id="fef91-2786">Свойство <see cref="P:System.Linq.Expressions.Expression.Type" /> элемента <paramref name="arguments" /> нельзя назначить для типа соответствующего параметра конструктора, который представляет <paramref name="constructor" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fef91-2786">The <see cref="P:System.Linq.Expressions.Expression.Type" /> property of an element of <paramref name="arguments" /> is not assignable to the type of the corresponding parameter of the constructor that <paramref name="constructor" /> represents.</span>
          </span>
          <span data-ttu-id="fef91-2787">-или-</span>
          <span class="sxs-lookup">
            <span data-stu-id="fef91-2787">-or-</span>
          </span>
          <span data-ttu-id="fef91-2788">Параметр <paramref name="members" /> не содержит то же количество элементов, что и параметр <paramref name="arguments" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fef91-2788">The <paramref name="members" /> parameter does not have the same number of elements as <paramref name="arguments" />.</span>
          </span>
          <span data-ttu-id="fef91-2789">-или-</span>
          <span class="sxs-lookup">
            <span data-stu-id="fef91-2789">-or-</span>
          </span>
          <span data-ttu-id="fef91-2790">Элемент свойства <paramref name="arguments" /> содержит <see cref="P:System.Linq.Expressions.Expression.Type" />, представляющий тип, который нельзя назначить для типа элемента, представленного соответствующим элементом <paramref name="members" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fef91-2790">An element of <paramref name="arguments" /> has a <see cref="P:System.Linq.Expressions.Expression.Type" /> property that represents a type that is not assignable to the type of the member that is represented by the corresponding element of <paramref name="members" />.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <MemberGroup MemberName="NewArrayBounds">
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="fef91-2791">Создает <see cref="T:System.Linq.Expressions.NewArrayExpression" />, представляющее создание массива с указанным рангом.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fef91-2791">Creates a <see cref="T:System.Linq.Expressions.NewArrayExpression" /> that represents creating an array that has a specified rank.</span>
          </span>
        </summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="NewArrayBounds">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.NewArrayExpression NewArrayBounds (Type type, System.Collections.Generic.IEnumerable&lt;System.Linq.Expressions.Expression&gt; bounds);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.NewArrayExpression NewArrayBounds(class System.Type type, class System.Collections.Generic.IEnumerable`1&lt;class System.Linq.Expressions.Expression&gt; bounds) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.NewArrayBounds(System.Type,System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression})" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Linq::Expressions::NewArrayExpression ^ NewArrayBounds(Type ^ type, System::Collections::Generic::IEnumerable&lt;System::Linq::Expressions::Expression ^&gt; ^ bounds);" />
      <MemberSignature Language="F#" Value="static member NewArrayBounds : Type * seq&lt;System.Linq.Expressions.Expression&gt; -&gt; System.Linq.Expressions.NewArrayExpression" Usage="System.Linq.Expressions.Expression.NewArrayBounds (type, bounds)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.NewArrayExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="type" Type="System.Type" />
        <Parameter Name="bounds" Type="System.Collections.Generic.IEnumerable&lt;System.Linq.Expressions.Expression&gt;" />
      </Parameters>
      <Docs>
        <param name="type">
          <span data-ttu-id="fef91-2792">Тип <see cref="T:System.Type" />, представляющий тип элемента массива.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fef91-2792">A <see cref="T:System.Type" /> that represents the element type of the array.</span>
          </span>
        </param>
        <param name="bounds">
          <span data-ttu-id="fef91-2793">
            <see cref="T:System.Collections.Generic.IEnumerable`1" />, содержащий все объекты <see cref="T:System.Linq.Expressions.Expression" />, используемые для заполнения коллекции <see cref="P:System.Linq.Expressions.NewArrayExpression.Expressions" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fef91-2793">An <see cref="T:System.Collections.Generic.IEnumerable`1" /> that contains <see cref="T:System.Linq.Expressions.Expression" /> objects to use to populate the <see cref="P:System.Linq.Expressions.NewArrayExpression.Expressions" /> collection.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="fef91-2794">Создает <see cref="T:System.Linq.Expressions.NewArrayExpression" />, представляющее создание массива с указанным рангом.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fef91-2794">Creates a <see cref="T:System.Linq.Expressions.NewArrayExpression" /> that represents creating an array that has a specified rank.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="fef91-2795">Выражение <see cref="T:System.Linq.Expressions.NewArrayExpression" /> со свойством <see cref="P:System.Linq.Expressions.Expression.NodeType" />, равным <see cref="F:System.Linq.Expressions.ExpressionType.NewArrayBounds" />, и свойством <see cref="P:System.Linq.Expressions.NewArrayExpression.Expressions" />, для которого задано указанное значение.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fef91-2795">A <see cref="T:System.Linq.Expressions.NewArrayExpression" /> that has the <see cref="P:System.Linq.Expressions.Expression.NodeType" /> property equal to <see cref="F:System.Linq.Expressions.ExpressionType.NewArrayBounds" /> and the <see cref="P:System.Linq.Expressions.NewArrayExpression.Expressions" /> property set to the specified value.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="fef91-2796"><xref:System.Linq.Expressions.Expression.Type%2A> Результирующего <xref:System.Linq.Expressions.NewArrayExpression> представляет тип массива, ранг которого равна длине `bounds` и тип элементов которого является `type`.</span><span class="sxs-lookup"><span data-stu-id="fef91-2796">The <xref:System.Linq.Expressions.Expression.Type%2A> property of the resulting <xref:System.Linq.Expressions.NewArrayExpression> represents an array type whose rank is equal to the length of `bounds` and whose element type is `type`.</span></span>  
  
 <span data-ttu-id="fef91-2797"><xref:System.Linq.Expressions.Expression.Type%2A> Свойство каждого элемента массива `bounds` должны представлять целочисленный тип.</span><span class="sxs-lookup"><span data-stu-id="fef91-2797">The <xref:System.Linq.Expressions.Expression.Type%2A> property of each element of `bounds` must represent an integral type.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="fef91-2798">Следующий пример демонстрирует, как использовать <xref:System.Linq.Expressions.Expression.NewArrayBounds%2A> метод для создания дерева выражений, представляющее создание строковый массив, который имеет ранг 2.</span><span class="sxs-lookup"><span data-stu-id="fef91-2798">The following example demonstrates how to use the <xref:System.Linq.Expressions.Expression.NewArrayBounds%2A> method to create an expression tree that represents creating a string array that has a rank of 2.</span></span>  
  
 [!code-csharp[System.Linq.Expressions.Expression#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Linq.Expressions.Expression/CS/Expression.cs#2)]
 [!code-vb[System.Linq.Expressions.Expression#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Linq.Expressions.Expression/VB/Expression.vb#2)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="fef91-2799">Значение параметра <paramref name="type" /> или <paramref name="bounds" /> — <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fef91-2799">
              <paramref name="type" /> or <paramref name="bounds" /> is <see langword="null" />.</span>
          </span>
          <span data-ttu-id="fef91-2800">-или-</span>
          <span class="sxs-lookup">
            <span data-stu-id="fef91-2800">-or-</span>
          </span>
          <span data-ttu-id="fef91-2801">Элемент параметра <paramref name="bounds" /> имеет значение <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fef91-2801">An element of <paramref name="bounds" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="fef91-2802">Свойство <see cref="P:System.Linq.Expressions.Expression.Type" /> элемента <paramref name="bounds" /> не представляет целочисленный тип.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fef91-2802">The <see cref="P:System.Linq.Expressions.Expression.Type" /> property of an element of <paramref name="bounds" /> does not represent an integral type.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="NewArrayBounds">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.NewArrayExpression NewArrayBounds (Type type, params System.Linq.Expressions.Expression[] bounds);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.NewArrayExpression NewArrayBounds(class System.Type type, class System.Linq.Expressions.Expression[] bounds) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.NewArrayBounds(System.Type,System.Linq.Expressions.Expression[])" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Linq::Expressions::NewArrayExpression ^ NewArrayBounds(Type ^ type, ... cli::array &lt;System::Linq::Expressions::Expression ^&gt; ^ bounds);" />
      <MemberSignature Language="F#" Value="static member NewArrayBounds : Type * System.Linq.Expressions.Expression[] -&gt; System.Linq.Expressions.NewArrayExpression" Usage="System.Linq.Expressions.Expression.NewArrayBounds (type, bounds)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.NewArrayExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="type" Type="System.Type" />
        <Parameter Name="bounds" Type="System.Linq.Expressions.Expression[]">
          <Attributes>
            <Attribute>
              <AttributeName>System.ParamArray</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="type">
          <span data-ttu-id="fef91-2803">Тип <see cref="T:System.Type" />, представляющий тип элемента массива.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fef91-2803">A <see cref="T:System.Type" /> that represents the element type of the array.</span>
          </span>
        </param>
        <param name="bounds">
          <span data-ttu-id="fef91-2804">Массив объектов <see cref="T:System.Linq.Expressions.Expression" /> для заполнения коллекции <see cref="P:System.Linq.Expressions.NewArrayExpression.Expressions" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fef91-2804">An array of <see cref="T:System.Linq.Expressions.Expression" /> objects to use to populate the <see cref="P:System.Linq.Expressions.NewArrayExpression.Expressions" /> collection.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="fef91-2805">Создает <see cref="T:System.Linq.Expressions.NewArrayExpression" />, представляющее создание массива с указанным рангом.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fef91-2805">Creates a <see cref="T:System.Linq.Expressions.NewArrayExpression" /> that represents creating an array that has a specified rank.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="fef91-2806">Выражение <see cref="T:System.Linq.Expressions.NewArrayExpression" /> со свойством <see cref="P:System.Linq.Expressions.Expression.NodeType" />, равным <see cref="F:System.Linq.Expressions.ExpressionType.NewArrayBounds" />, и свойством <see cref="P:System.Linq.Expressions.NewArrayExpression.Expressions" />, для которого задано указанное значение.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fef91-2806">A <see cref="T:System.Linq.Expressions.NewArrayExpression" /> that has the <see cref="P:System.Linq.Expressions.Expression.NodeType" /> property equal to <see cref="F:System.Linq.Expressions.ExpressionType.NewArrayBounds" /> and the <see cref="P:System.Linq.Expressions.NewArrayExpression.Expressions" /> property set to the specified value.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="fef91-2807"><xref:System.Linq.Expressions.Expression.Type%2A> Результирующего <xref:System.Linq.Expressions.NewArrayExpression> представляет тип массива, ранг которого равна длине `bounds` и тип элементов которого является `type`.</span><span class="sxs-lookup"><span data-stu-id="fef91-2807">The <xref:System.Linq.Expressions.Expression.Type%2A> property of the resulting <xref:System.Linq.Expressions.NewArrayExpression> represents an array type whose rank is equal to the length of `bounds` and whose element type is `type`.</span></span>  
  
 <span data-ttu-id="fef91-2808"><xref:System.Linq.Expressions.Expression.Type%2A> Свойство каждого элемента массива `bounds` должны представлять целочисленный тип.</span><span class="sxs-lookup"><span data-stu-id="fef91-2808">The <xref:System.Linq.Expressions.Expression.Type%2A> property of each element of `bounds` must represent an integral type.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="fef91-2809">Следующий пример демонстрирует, как использовать <xref:System.Linq.Expressions.Expression.NewArrayBounds%2A> метод для создания дерева выражений, представляющее создание строковый массив, который имеет ранг 2.</span><span class="sxs-lookup"><span data-stu-id="fef91-2809">The following example demonstrates how to use the <xref:System.Linq.Expressions.Expression.NewArrayBounds%2A> method to create an expression tree that represents creating a string array that has a rank of 2.</span></span>  
  
 [!code-csharp[System.Linq.Expressions.Expression#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Linq.Expressions.Expression/CS/Expression.cs#2)]
 [!code-vb[System.Linq.Expressions.Expression#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Linq.Expressions.Expression/VB/Expression.vb#2)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="fef91-2810">Значение параметра <paramref name="type" /> или <paramref name="bounds" /> — <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fef91-2810">
              <paramref name="type" /> or <paramref name="bounds" /> is <see langword="null" />.</span>
          </span>
          <span data-ttu-id="fef91-2811">-или-</span>
          <span class="sxs-lookup">
            <span data-stu-id="fef91-2811">-or-</span>
          </span>
          <span data-ttu-id="fef91-2812">Элемент параметра <paramref name="bounds" /> имеет значение <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fef91-2812">An element of <paramref name="bounds" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="fef91-2813">Свойство <see cref="P:System.Linq.Expressions.Expression.Type" /> элемента <paramref name="bounds" /> не представляет целочисленный тип.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fef91-2813">The <see cref="P:System.Linq.Expressions.Expression.Type" /> property of an element of <paramref name="bounds" /> does not represent an integral type.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <MemberGroup MemberName="NewArrayInit">
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="fef91-2814">Создает <see cref="T:System.Linq.Expressions.NewArrayExpression" />, представляющий создание одномерного массива и его инициализацию из списка элементов.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fef91-2814">Creates a <see cref="T:System.Linq.Expressions.NewArrayExpression" /> that represents creating a one-dimensional array and initializing it from a list of elements.</span>
          </span>
        </summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="NewArrayInit">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.NewArrayExpression NewArrayInit (Type type, System.Collections.Generic.IEnumerable&lt;System.Linq.Expressions.Expression&gt; initializers);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.NewArrayExpression NewArrayInit(class System.Type type, class System.Collections.Generic.IEnumerable`1&lt;class System.Linq.Expressions.Expression&gt; initializers) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.NewArrayInit(System.Type,System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression})" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Linq::Expressions::NewArrayExpression ^ NewArrayInit(Type ^ type, System::Collections::Generic::IEnumerable&lt;System::Linq::Expressions::Expression ^&gt; ^ initializers);" />
      <MemberSignature Language="F#" Value="static member NewArrayInit : Type * seq&lt;System.Linq.Expressions.Expression&gt; -&gt; System.Linq.Expressions.NewArrayExpression" Usage="System.Linq.Expressions.Expression.NewArrayInit (type, initializers)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.NewArrayExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="type" Type="System.Type" />
        <Parameter Name="initializers" Type="System.Collections.Generic.IEnumerable&lt;System.Linq.Expressions.Expression&gt;" />
      </Parameters>
      <Docs>
        <param name="type">
          <span data-ttu-id="fef91-2815">Тип <see cref="T:System.Type" />, представляющий тип элемента массива.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fef91-2815">A <see cref="T:System.Type" /> that represents the element type of the array.</span>
          </span>
        </param>
        <param name="initializers">
          <span data-ttu-id="fef91-2816">
            <see cref="T:System.Collections.Generic.IEnumerable`1" />, содержащий все объекты <see cref="T:System.Linq.Expressions.Expression" />, используемые для заполнения коллекции <see cref="P:System.Linq.Expressions.NewArrayExpression.Expressions" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fef91-2816">An <see cref="T:System.Collections.Generic.IEnumerable`1" /> that contains <see cref="T:System.Linq.Expressions.Expression" /> objects to use to populate the <see cref="P:System.Linq.Expressions.NewArrayExpression.Expressions" /> collection.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="fef91-2817">Создает <see cref="T:System.Linq.Expressions.NewArrayExpression" />, представляющий создание одномерного массива и его инициализацию из списка элементов.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fef91-2817">Creates a <see cref="T:System.Linq.Expressions.NewArrayExpression" /> that represents creating a one-dimensional array and initializing it from a list of elements.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="fef91-2818">Выражение <see cref="T:System.Linq.Expressions.NewArrayExpression" /> со свойством <see cref="P:System.Linq.Expressions.Expression.NodeType" />, равным <see cref="F:System.Linq.Expressions.ExpressionType.NewArrayInit" />, и свойством <see cref="P:System.Linq.Expressions.NewArrayExpression.Expressions" />, для которого задано указанное значение.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fef91-2818">A <see cref="T:System.Linq.Expressions.NewArrayExpression" /> that has the <see cref="P:System.Linq.Expressions.Expression.NodeType" /> property equal to <see cref="F:System.Linq.Expressions.ExpressionType.NewArrayInit" /> and the <see cref="P:System.Linq.Expressions.NewArrayExpression.Expressions" /> property set to the specified value.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="fef91-2819"><xref:System.Linq.Expressions.Expression.Type%2A> Свойство каждого элемента массива `initializers` должен представлять тип, который может быть назначен типу, представленному `type`, возможно после *в кавычках*.</span><span class="sxs-lookup"><span data-stu-id="fef91-2819">The <xref:System.Linq.Expressions.Expression.Type%2A> property of each element of `initializers` must represent a type that is assignable to the type represented by `type`, possibly after it is *quoted*.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="fef91-2820">Элемент будет заключаться в кавычки только в том случае, если `type` является <xref:System.Linq.Expressions.Expression>.</span><span class="sxs-lookup"><span data-stu-id="fef91-2820">An element will be quoted only if `type` is <xref:System.Linq.Expressions.Expression>.</span></span> <span data-ttu-id="fef91-2821">Заключение в кавычки означает, что элемент помещается в <xref:System.Linq.Expressions.ExpressionType.Quote> узла.</span><span class="sxs-lookup"><span data-stu-id="fef91-2821">Quoting means the element is wrapped in a <xref:System.Linq.Expressions.ExpressionType.Quote> node.</span></span> <span data-ttu-id="fef91-2822">Полученный в результате узел является <xref:System.Linq.Expressions.UnaryExpression> которого <xref:System.Linq.Expressions.UnaryExpression.Operand%2A> свойство является элементом `initializers`.</span><span class="sxs-lookup"><span data-stu-id="fef91-2822">The resulting node is a <xref:System.Linq.Expressions.UnaryExpression> whose <xref:System.Linq.Expressions.UnaryExpression.Operand%2A> property is the element of `initializers`.</span></span>  
  
 <span data-ttu-id="fef91-2823"><xref:System.Linq.Expressions.Expression.Type%2A> Результирующего <xref:System.Linq.Expressions.NewArrayExpression> представляет тип массива, ранг которого составляет 1, тип элементов которого является `type`.</span><span class="sxs-lookup"><span data-stu-id="fef91-2823">The <xref:System.Linq.Expressions.Expression.Type%2A> property of the resulting <xref:System.Linq.Expressions.NewArrayExpression> represents an array type whose rank is 1 and whose element type is `type`.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="fef91-2824">Следующий пример демонстрирует, как использовать <xref:System.Linq.Expressions.Expression.NewArrayInit%2A> метод для создания дерева выражений, представляющее создание Одномерный строковый массив, который инициализируется с помощью список строковых выражений.</span><span class="sxs-lookup"><span data-stu-id="fef91-2824">The following example demonstrates how to use the <xref:System.Linq.Expressions.Expression.NewArrayInit%2A> method to create an expression tree that represents creating a one-dimensional string array that is initialized with a list of string expressions.</span></span>  
  
 [!code-csharp[System.Linq.Expressions.Expression#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Linq.Expressions.Expression/CS/Expression.cs#1)]
 [!code-vb[System.Linq.Expressions.Expression#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Linq.Expressions.Expression/VB/Expression.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="fef91-2825">Значение параметра <paramref name="type" /> или <paramref name="initializers" /> — <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fef91-2825">
              <paramref name="type" /> or <paramref name="initializers" /> is <see langword="null" />.</span>
          </span>
          <span data-ttu-id="fef91-2826">-или-</span>
          <span class="sxs-lookup">
            <span data-stu-id="fef91-2826">-or-</span>
          </span>
          <span data-ttu-id="fef91-2827">Элемент параметра <paramref name="initializers" /> имеет значение <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fef91-2827">An element of <paramref name="initializers" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.InvalidOperationException">
          <span data-ttu-id="fef91-2828">Свойство <see cref="P:System.Linq.Expressions.Expression.Type" /> элемента <paramref name="initializers" /> представляет тип, который не назначается для типа, который представляет <paramref name="type" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fef91-2828">The <see cref="P:System.Linq.Expressions.Expression.Type" /> property of an element of <paramref name="initializers" /> represents a type that is not assignable to the type that <paramref name="type" /> represents.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="NewArrayInit">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.NewArrayExpression NewArrayInit (Type type, params System.Linq.Expressions.Expression[] initializers);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.NewArrayExpression NewArrayInit(class System.Type type, class System.Linq.Expressions.Expression[] initializers) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.NewArrayInit(System.Type,System.Linq.Expressions.Expression[])" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Linq::Expressions::NewArrayExpression ^ NewArrayInit(Type ^ type, ... cli::array &lt;System::Linq::Expressions::Expression ^&gt; ^ initializers);" />
      <MemberSignature Language="F#" Value="static member NewArrayInit : Type * System.Linq.Expressions.Expression[] -&gt; System.Linq.Expressions.NewArrayExpression" Usage="System.Linq.Expressions.Expression.NewArrayInit (type, initializers)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.NewArrayExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="type" Type="System.Type" />
        <Parameter Name="initializers" Type="System.Linq.Expressions.Expression[]">
          <Attributes>
            <Attribute>
              <AttributeName>System.ParamArray</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="type">
          <span data-ttu-id="fef91-2829">Тип <see cref="T:System.Type" />, представляющий тип элемента массива.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fef91-2829">A <see cref="T:System.Type" /> that represents the element type of the array.</span>
          </span>
        </param>
        <param name="initializers">
          <span data-ttu-id="fef91-2830">Массив объектов <see cref="T:System.Linq.Expressions.Expression" /> для заполнения коллекции <see cref="P:System.Linq.Expressions.NewArrayExpression.Expressions" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fef91-2830">An array of <see cref="T:System.Linq.Expressions.Expression" /> objects to use to populate the <see cref="P:System.Linq.Expressions.NewArrayExpression.Expressions" /> collection.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="fef91-2831">Создает <see cref="T:System.Linq.Expressions.NewArrayExpression" />, представляющий создание одномерного массива и его инициализацию из списка элементов.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fef91-2831">Creates a <see cref="T:System.Linq.Expressions.NewArrayExpression" /> that represents creating a one-dimensional array and initializing it from a list of elements.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="fef91-2832">Выражение <see cref="T:System.Linq.Expressions.NewArrayExpression" /> со свойством <see cref="P:System.Linq.Expressions.Expression.NodeType" />, равным <see cref="F:System.Linq.Expressions.ExpressionType.NewArrayInit" />, и свойством <see cref="P:System.Linq.Expressions.NewArrayExpression.Expressions" />, для которого задано указанное значение.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fef91-2832">A <see cref="T:System.Linq.Expressions.NewArrayExpression" /> that has the <see cref="P:System.Linq.Expressions.Expression.NodeType" /> property equal to <see cref="F:System.Linq.Expressions.ExpressionType.NewArrayInit" /> and the <see cref="P:System.Linq.Expressions.NewArrayExpression.Expressions" /> property set to the specified value.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="fef91-2833"><xref:System.Linq.Expressions.Expression.Type%2A> Свойство каждого элемента массива `initializers` должен представлять тип, который может быть назначен типу, представленному `type`, возможно после *в кавычках*.</span><span class="sxs-lookup"><span data-stu-id="fef91-2833">The <xref:System.Linq.Expressions.Expression.Type%2A> property of each element of `initializers` must represent a type that is assignable to the type represented by `type`, possibly after it is *quoted*.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="fef91-2834">Элемент будет заключаться в кавычки только в том случае, если `type` является <xref:System.Linq.Expressions.Expression>.</span><span class="sxs-lookup"><span data-stu-id="fef91-2834">An element will be quoted only if `type` is <xref:System.Linq.Expressions.Expression>.</span></span> <span data-ttu-id="fef91-2835">Заключение в кавычки означает, что элемент помещается в <xref:System.Linq.Expressions.ExpressionType.Quote> узла.</span><span class="sxs-lookup"><span data-stu-id="fef91-2835">Quoting means the element is wrapped in a <xref:System.Linq.Expressions.ExpressionType.Quote> node.</span></span> <span data-ttu-id="fef91-2836">Полученный в результате узел является <xref:System.Linq.Expressions.UnaryExpression> которого <xref:System.Linq.Expressions.UnaryExpression.Operand%2A> свойство является элементом `initializers`.</span><span class="sxs-lookup"><span data-stu-id="fef91-2836">The resulting node is a <xref:System.Linq.Expressions.UnaryExpression> whose <xref:System.Linq.Expressions.UnaryExpression.Operand%2A> property is the element of `initializers`.</span></span>  
  
 <span data-ttu-id="fef91-2837"><xref:System.Linq.Expressions.Expression.Type%2A> Результирующего <xref:System.Linq.Expressions.NewArrayExpression> представляет тип массива, ранг которого составляет 1, тип элементов которого является `type`.</span><span class="sxs-lookup"><span data-stu-id="fef91-2837">The <xref:System.Linq.Expressions.Expression.Type%2A> property of the resulting <xref:System.Linq.Expressions.NewArrayExpression> represents an array type whose rank is 1 and whose element type is `type`.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="fef91-2838">Следующий пример демонстрирует, как использовать <xref:System.Linq.Expressions.Expression.NewArrayInit%2A> метод для создания дерева выражений, представляющее создание Одномерный строковый массив, который инициализируется с помощью список строковых выражений.</span><span class="sxs-lookup"><span data-stu-id="fef91-2838">The following example demonstrates how to use the <xref:System.Linq.Expressions.Expression.NewArrayInit%2A> method to create an expression tree that represents creating a one-dimensional string array that is initialized with a list of string expressions.</span></span>  
  
 [!code-csharp[System.Linq.Expressions.Expression#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Linq.Expressions.Expression/CS/Expression.cs#1)]
 [!code-vb[System.Linq.Expressions.Expression#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Linq.Expressions.Expression/VB/Expression.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="fef91-2839">Значение параметра <paramref name="type" /> или <paramref name="initializers" /> — <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fef91-2839">
              <paramref name="type" /> or <paramref name="initializers" /> is <see langword="null" />.</span>
          </span>
          <span data-ttu-id="fef91-2840">-или-</span>
          <span class="sxs-lookup">
            <span data-stu-id="fef91-2840">-or-</span>
          </span>
          <span data-ttu-id="fef91-2841">Элемент параметра <paramref name="initializers" /> имеет значение <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fef91-2841">An element of <paramref name="initializers" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.InvalidOperationException">
          <span data-ttu-id="fef91-2842">Свойство <see cref="P:System.Linq.Expressions.Expression.Type" /> элемента <paramref name="initializers" /> представляет тип, который не назначается для типа <paramref name="type" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fef91-2842">The <see cref="P:System.Linq.Expressions.Expression.Type" /> property of an element of <paramref name="initializers" /> represents a type that is not assignable to the type <paramref name="type" />.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="NodeType">
      <MemberSignature Language="C#" Value="public virtual System.Linq.Expressions.ExpressionType NodeType { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Linq.Expressions.ExpressionType NodeType" />
      <MemberSignature Language="DocId" Value="P:System.Linq.Expressions.Expression.NodeType" />
      <MemberSignature Language="VB.NET" Value="Public Overridable ReadOnly Property NodeType As ExpressionType" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property System::Linq::Expressions::ExpressionType NodeType { System::Linq::Expressions::ExpressionType get(); };" />
      <MemberSignature Language="F#" Value="member this.NodeType : System.Linq.Expressions.ExpressionType" Usage="System.Linq.Expressions.Expression.NodeType" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.ExpressionType</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="fef91-2843">Получает тип узла данного объекта <see cref="T:System.Linq.Expressions.Expression" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fef91-2843">Gets the node type of this <see cref="T:System.Linq.Expressions.Expression" />.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="fef91-2844">Одно из значений <see cref="T:System.Linq.Expressions.ExpressionType" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fef91-2844">One of the <see cref="T:System.Linq.Expressions.ExpressionType" /> values.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="fef91-2845"><xref:System.Linq.Expressions.Expression.NodeType%2A> Свойства его описание нескольких более узких <xref:System.Linq.Expressions.Expression> чем просто его производному типу.</span><span class="sxs-lookup"><span data-stu-id="fef91-2845">The <xref:System.Linq.Expressions.Expression.NodeType%2A> property provides a more specialized description of an <xref:System.Linq.Expressions.Expression> than just its derived type.</span></span> <span data-ttu-id="fef91-2846">Например <xref:System.Linq.Expressions.BinaryExpression> может использоваться для представления много различных типов двоичных выражений, такие как «больше» операции или операции деления.</span><span class="sxs-lookup"><span data-stu-id="fef91-2846">For example, a <xref:System.Linq.Expressions.BinaryExpression> can be used to represent many different kinds of binary expressions, such as a division operation or a "greater than" operation.</span></span> <span data-ttu-id="fef91-2847"><xref:System.Linq.Expressions.Expression.NodeType%2A> Свойства описывают эти двоичные выражения, как <xref:System.Linq.Expressions.ExpressionType.Divide> и <xref:System.Linq.Expressions.ExpressionType.GreaterThan>, соответственно.</span><span class="sxs-lookup"><span data-stu-id="fef91-2847">The <xref:System.Linq.Expressions.Expression.NodeType%2A> property would describe these binary expressions as <xref:System.Linq.Expressions.ExpressionType.Divide> and <xref:System.Linq.Expressions.ExpressionType.GreaterThan>, respectively.</span></span>  
  
 <span data-ttu-id="fef91-2848">Статический тип выражения со средой CLR, <xref:System.Linq.Expressions.Expression> представляет объект представляется <xref:System.Linq.Expressions.Expression.Type%2A> свойство.</span><span class="sxs-lookup"><span data-stu-id="fef91-2848">The static CLR type of the expression that the <xref:System.Linq.Expressions.Expression> object represents is represented by the <xref:System.Linq.Expressions.Expression.Type%2A> property.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="Not">
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="fef91-2849">Создает <see cref="T:System.Linq.Expressions.UnaryExpression" />, представляющий побитовую операцию дополнения.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fef91-2849">Creates a <see cref="T:System.Linq.Expressions.UnaryExpression" /> that represents a bitwise complement operation.</span>
          </span>
        </summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Not">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.UnaryExpression Not (System.Linq.Expressions.Expression expression);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.UnaryExpression Not(class System.Linq.Expressions.Expression expression) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.Not(System.Linq.Expressions.Expression)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Linq::Expressions::UnaryExpression ^ Not(System::Linq::Expressions::Expression ^ expression);" />
      <MemberSignature Language="F#" Value="static member Not : System.Linq.Expressions.Expression -&gt; System.Linq.Expressions.UnaryExpression" Usage="System.Linq.Expressions.Expression.Not expression" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.UnaryExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="expression" Type="System.Linq.Expressions.Expression" />
      </Parameters>
      <Docs>
        <param name="expression">
          <span data-ttu-id="fef91-2850">Объект <see cref="T:System.Linq.Expressions.Expression" />, который следует задать в качестве значения свойства <see cref="P:System.Linq.Expressions.UnaryExpression.Operand" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fef91-2850">An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.UnaryExpression.Operand" /> property equal to.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="fef91-2851">Создает <see cref="T:System.Linq.Expressions.UnaryExpression" />, представляющий побитовую операцию дополнения.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fef91-2851">Creates a <see cref="T:System.Linq.Expressions.UnaryExpression" /> that represents a bitwise complement operation.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="fef91-2852">Выражение <see cref="T:System.Linq.Expressions.UnaryExpression" /> со свойством <see cref="P:System.Linq.Expressions.Expression.NodeType" />, равным <see cref="F:System.Linq.Expressions.ExpressionType.Not" />, и свойством <see cref="P:System.Linq.Expressions.UnaryExpression.Operand" />, для которого задано указанное значение.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fef91-2852">A <see cref="T:System.Linq.Expressions.UnaryExpression" /> that has the <see cref="P:System.Linq.Expressions.Expression.NodeType" /> property equal to <see cref="F:System.Linq.Expressions.ExpressionType.Not" /> and the <see cref="P:System.Linq.Expressions.UnaryExpression.Operand" /> property set to the specified value.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="fef91-2853"><xref:System.Linq.Expressions.UnaryExpression.Method%2A> Результирующего <xref:System.Linq.Expressions.UnaryExpression> присваивается метод реализации.</span><span class="sxs-lookup"><span data-stu-id="fef91-2853">The <xref:System.Linq.Expressions.UnaryExpression.Method%2A> property of the resulting <xref:System.Linq.Expressions.UnaryExpression> is set to the implementing method.</span></span> <span data-ttu-id="fef91-2854"><xref:System.Linq.Expressions.Expression.Type%2A> Свойству присваивается тип узла.</span><span class="sxs-lookup"><span data-stu-id="fef91-2854">The <xref:System.Linq.Expressions.Expression.Type%2A> property is set to the type of the node.</span></span> <span data-ttu-id="fef91-2855">Если узел удаляется, <xref:System.Linq.Expressions.BinaryExpression.IsLifted%2A> и <xref:System.Linq.Expressions.BinaryExpression.IsLiftedToNull%2A> оба являются свойства `true`.</span><span class="sxs-lookup"><span data-stu-id="fef91-2855">If the node is lifted, the <xref:System.Linq.Expressions.BinaryExpression.IsLifted%2A> and <xref:System.Linq.Expressions.BinaryExpression.IsLiftedToNull%2A> properties are both `true`.</span></span> <span data-ttu-id="fef91-2856">В противном случае они `false`.</span><span class="sxs-lookup"><span data-stu-id="fef91-2856">Otherwise, they are `false`.</span></span>  
  
#### <a name="implementing-method"></a><span data-ttu-id="fef91-2857">Реализация метода</span><span class="sxs-lookup"><span data-stu-id="fef91-2857">Implementing Method</span></span>  
 <span data-ttu-id="fef91-2858">Следующие правила определяют метод реализации для операции:</span><span class="sxs-lookup"><span data-stu-id="fef91-2858">The following rules determine the implementing method for the operation:</span></span>  
  
-   <span data-ttu-id="fef91-2859">Если `expression`. Тип — определяемого пользователем типа, определяющее унарный оператор not <xref:System.Reflection.MethodInfo> , который представляет оператор — это метод реализации.</span><span class="sxs-lookup"><span data-stu-id="fef91-2859">If `expression`.Type is a user-defined type that defines the unary not operator, the <xref:System.Reflection.MethodInfo> that represents that operator is the implementing method.</span></span>  
  
-   <span data-ttu-id="fef91-2860">В противном случае, если `expression`. Тип — числовой или логический тип, метод реализации является `null`.</span><span class="sxs-lookup"><span data-stu-id="fef91-2860">Otherwise, if `expression`.Type is a numeric or Boolean type, the implementing method is `null`.</span></span>  
  
#### <a name="node-type-and-lifted-versus-non-lifted"></a><span data-ttu-id="fef91-2861">Тип узла с ликвидацией или без</span><span class="sxs-lookup"><span data-stu-id="fef91-2861">Node Type and Lifted versus Non-Lifted</span></span>  
 <span data-ttu-id="fef91-2862">Если метод реализации не `null`:</span><span class="sxs-lookup"><span data-stu-id="fef91-2862">If the implementing method is not `null`:</span></span>  
  
-   <span data-ttu-id="fef91-2863">Если `expression`. Тип допускает присваивание типу аргумента метода реализации, узел не удаляется.</span><span class="sxs-lookup"><span data-stu-id="fef91-2863">If `expression`.Type is assignable to the argument type of the implementing method, the node is not lifted.</span></span> <span data-ttu-id="fef91-2864">Тип узла — тип возвращаемого значения метода реализации.</span><span class="sxs-lookup"><span data-stu-id="fef91-2864">The type of the node is the return type of the implementing method.</span></span>  
  
-   <span data-ttu-id="fef91-2865">Если выполняются два следующих условия, узел удаляется, а тип узла — обнуляемый тип, соответствующий тип возвращаемого значения метода реализации:</span><span class="sxs-lookup"><span data-stu-id="fef91-2865">If the following two conditions are satisfied, the node is lifted and the type of the node is the nullable type that corresponds to the return type of the implementing method:</span></span>  
  
    -   <span data-ttu-id="fef91-2866">`expression`. Тип является типом значения, допускающие значения NULL и соответствующий тип не допускает значения NULL равен типу аргумента метода реализации.</span><span class="sxs-lookup"><span data-stu-id="fef91-2866">`expression`.Type is a nullable value type and the corresponding non-nullable type is equal to the argument type of the implementing method.</span></span>  
  
    -   <span data-ttu-id="fef91-2867">Тип возвращаемого значения метода реализации является типом значения, не допускающие значения NULL.</span><span class="sxs-lookup"><span data-stu-id="fef91-2867">The return type of the implementing method is a non-nullable value type.</span></span>  
  
 <span data-ttu-id="fef91-2868">Если метод реализации `null`, тип узла — `expression`. Тип.</span><span class="sxs-lookup"><span data-stu-id="fef91-2868">If the implementing method is `null`, the type of the node is `expression`.Type.</span></span> <span data-ttu-id="fef91-2869">Если `expression`. Тип, не допускающие значения NULL, узел не удаляется.</span><span class="sxs-lookup"><span data-stu-id="fef91-2869">If `expression`.Type is non-nullable, the node is not lifted.</span></span> <span data-ttu-id="fef91-2870">В противном случае узел удаляется.</span><span class="sxs-lookup"><span data-stu-id="fef91-2870">Otherwise, the node is lifted.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="fef91-2871">Следующий пример демонстрирует создание выражения, которое представляет логическую операцию не.</span><span class="sxs-lookup"><span data-stu-id="fef91-2871">The following example demonstrates how to create an expression that represents a logical NOT operation.</span></span>  
  
 [!code-csharp[System.Linq.Expressions.ExpressionDev10#51](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.linq.expressions.expressiondev10/cs/program.cs#51)]
 [!code-vb[System.Linq.Expressions.ExpressionDev10#51](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.linq.expressions.expressiondev10/vb/module1.vb#51)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="fef91-2872">
            <paramref name="expression" /> — <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fef91-2872">
              <paramref name="expression" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.InvalidOperationException">
          <span data-ttu-id="fef91-2873">Унарный  оператор Not не определен для типа <paramref name="expression" />.Type.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fef91-2873">The unary not operator is not defined for <paramref name="expression" />.Type.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="Not">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.UnaryExpression Not (System.Linq.Expressions.Expression expression, System.Reflection.MethodInfo method);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.UnaryExpression Not(class System.Linq.Expressions.Expression expression, class System.Reflection.MethodInfo method) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.Not(System.Linq.Expressions.Expression,System.Reflection.MethodInfo)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Linq::Expressions::UnaryExpression ^ Not(System::Linq::Expressions::Expression ^ expression, System::Reflection::MethodInfo ^ method);" />
      <MemberSignature Language="F#" Value="static member Not : System.Linq.Expressions.Expression * System.Reflection.MethodInfo -&gt; System.Linq.Expressions.UnaryExpression" Usage="System.Linq.Expressions.Expression.Not (expression, method)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.UnaryExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="expression" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="method" Type="System.Reflection.MethodInfo" />
      </Parameters>
      <Docs>
        <param name="expression">
          <span data-ttu-id="fef91-2874">Объект <see cref="T:System.Linq.Expressions.Expression" />, который следует задать в качестве значения свойства <see cref="P:System.Linq.Expressions.UnaryExpression.Operand" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fef91-2874">An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.UnaryExpression.Operand" /> property equal to.</span>
          </span>
        </param>
        <param name="method">
          <span data-ttu-id="fef91-2875">Объект <see cref="T:System.Reflection.MethodInfo" />, который следует задать в качестве значения свойства <see cref="P:System.Linq.Expressions.UnaryExpression.Method" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fef91-2875">A <see cref="T:System.Reflection.MethodInfo" /> to set the <see cref="P:System.Linq.Expressions.UnaryExpression.Method" /> property equal to.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="fef91-2876">Создает <see cref="T:System.Linq.Expressions.UnaryExpression" />, представляющий побитовую операцию дополнения.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fef91-2876">Creates a <see cref="T:System.Linq.Expressions.UnaryExpression" /> that represents a bitwise complement operation.</span>
          </span>
          <span data-ttu-id="fef91-2877">Может быть указан метод реализации.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fef91-2877">The implementing method can be specified.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="fef91-2878">Выражение <see cref="T:System.Linq.Expressions.UnaryExpression" /> со свойством<see cref="P:System.Linq.Expressions.Expression.NodeType" />, равным <see cref="F:System.Linq.Expressions.ExpressionType.Not" />, и свойствами <see cref="P:System.Linq.Expressions.UnaryExpression.Operand" /> и <see cref="P:System.Linq.Expressions.UnaryExpression.Method" />, для которых заданы указанные значения.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fef91-2878">A <see cref="T:System.Linq.Expressions.UnaryExpression" /> that has the <see cref="P:System.Linq.Expressions.Expression.NodeType" /> property equal to <see cref="F:System.Linq.Expressions.ExpressionType.Not" /> and the <see cref="P:System.Linq.Expressions.UnaryExpression.Operand" /> and <see cref="P:System.Linq.Expressions.UnaryExpression.Method" /> properties set to the specified values.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="fef91-2879"><xref:System.Linq.Expressions.UnaryExpression.Method%2A> Результирующего <xref:System.Linq.Expressions.UnaryExpression> присваивается метод реализации.</span><span class="sxs-lookup"><span data-stu-id="fef91-2879">The <xref:System.Linq.Expressions.UnaryExpression.Method%2A> property of the resulting <xref:System.Linq.Expressions.UnaryExpression> is set to the implementing method.</span></span> <span data-ttu-id="fef91-2880"><xref:System.Linq.Expressions.Expression.Type%2A> Свойству присваивается тип узла.</span><span class="sxs-lookup"><span data-stu-id="fef91-2880">The <xref:System.Linq.Expressions.Expression.Type%2A> property is set to the type of the node.</span></span> <span data-ttu-id="fef91-2881">Если узел удаляется, <xref:System.Linq.Expressions.BinaryExpression.IsLifted%2A> и <xref:System.Linq.Expressions.BinaryExpression.IsLiftedToNull%2A> оба являются свойства `true`.</span><span class="sxs-lookup"><span data-stu-id="fef91-2881">If the node is lifted, the <xref:System.Linq.Expressions.BinaryExpression.IsLifted%2A> and <xref:System.Linq.Expressions.BinaryExpression.IsLiftedToNull%2A> properties are both `true`.</span></span> <span data-ttu-id="fef91-2882">В противном случае они `false`.</span><span class="sxs-lookup"><span data-stu-id="fef91-2882">Otherwise, they are `false`.</span></span>  
  
#### <a name="implementing-method"></a><span data-ttu-id="fef91-2883">Реализация метода</span><span class="sxs-lookup"><span data-stu-id="fef91-2883">Implementing Method</span></span>  
 <span data-ttu-id="fef91-2884">Следующие правила определяют метод реализации для операции:</span><span class="sxs-lookup"><span data-stu-id="fef91-2884">The following rules determine the implementing method for the operation:</span></span>  
  
-   <span data-ttu-id="fef91-2885">Если `method` не `null` , и это отличный от void, `static` (`Shared` в Visual Basic) метод, который принимает один аргумент — это метод реализации для узла.</span><span class="sxs-lookup"><span data-stu-id="fef91-2885">If `method` is not `null` and it represents a non-void, `static` (`Shared` in Visual Basic) method that takes one argument, it is the implementing method for the node.</span></span>  
  
-   <span data-ttu-id="fef91-2886">Если `expression`. Тип — определяемого пользователем типа, определяющее унарный оператор not <xref:System.Reflection.MethodInfo> , который представляет оператор — это метод реализации.</span><span class="sxs-lookup"><span data-stu-id="fef91-2886">If `expression`.Type is a user-defined type that defines the unary not operator, the <xref:System.Reflection.MethodInfo> that represents that operator is the implementing method.</span></span>  
  
-   <span data-ttu-id="fef91-2887">В противном случае, если `expression`. Тип является числовым типом, метод реализации является `null`.</span><span class="sxs-lookup"><span data-stu-id="fef91-2887">Otherwise, if `expression`.Type is a numeric type, the implementing method is `null`.</span></span>  
  
#### <a name="node-type-and-lifted-versus-non-lifted"></a><span data-ttu-id="fef91-2888">Тип узла с ликвидацией или без</span><span class="sxs-lookup"><span data-stu-id="fef91-2888">Node Type and Lifted versus Non-Lifted</span></span>  
 <span data-ttu-id="fef91-2889">Если метод реализации не `null`:</span><span class="sxs-lookup"><span data-stu-id="fef91-2889">If the implementing method is not `null`:</span></span>  
  
-   <span data-ttu-id="fef91-2890">Если `expression`. Тип допускает присваивание типу аргумента метода реализации, узел не удаляется.</span><span class="sxs-lookup"><span data-stu-id="fef91-2890">If `expression`.Type is assignable to the argument type of the implementing method, the node is not lifted.</span></span> <span data-ttu-id="fef91-2891">Тип узла — тип возвращаемого значения метода реализации.</span><span class="sxs-lookup"><span data-stu-id="fef91-2891">The type of the node is the return type of the implementing method.</span></span>  
  
-   <span data-ttu-id="fef91-2892">Если выполняются два следующих условия, узел удаляется, а тип узла — обнуляемый тип, соответствующий тип возвращаемого значения метода реализации:</span><span class="sxs-lookup"><span data-stu-id="fef91-2892">If the following two conditions are satisfied, the node is lifted and the type of the node is the nullable type that corresponds to the return type of the implementing method:</span></span>  
  
    -   <span data-ttu-id="fef91-2893">`expression`. Тип является типом значения, допускающие значение NULL, и соответствующий тип не поддерживающий значение NULL равен типу аргумента метода реализации.</span><span class="sxs-lookup"><span data-stu-id="fef91-2893">`expression`.Type is a nullable value type and the corresponding non-nullable value type is equal to the argument type of the implementing method.</span></span>  
  
    -   <span data-ttu-id="fef91-2894">Тип возвращаемого значения метода реализации является типом значения, не допускающие значения NULL.</span><span class="sxs-lookup"><span data-stu-id="fef91-2894">The return type of the implementing method is a non-nullable value type.</span></span>  
  
 <span data-ttu-id="fef91-2895">Если метод реализации `null`, тип узла — `expression`. Тип.</span><span class="sxs-lookup"><span data-stu-id="fef91-2895">If the implementing method is `null`, the type of the node is `expression`.Type.</span></span> <span data-ttu-id="fef91-2896">Если `expression`. Тип, не допускающие значения NULL, узел не удаляется.</span><span class="sxs-lookup"><span data-stu-id="fef91-2896">If `expression`.Type is non-nullable, the node is not lifted.</span></span> <span data-ttu-id="fef91-2897">В противном случае узел удаляется.</span><span class="sxs-lookup"><span data-stu-id="fef91-2897">Otherwise, the node is lifted.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="fef91-2898">
            <paramref name="expression" /> — <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fef91-2898">
              <paramref name="expression" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="fef91-2899">Значение параметра <paramref name="method" /> не равно <see langword="null" />, и метод, который представляется этим параметром, возвращает значение <see langword="void" />, не является <see langword="static" /> (<see langword="Shared" /> в Visual Basic) и не принимает ровно один аргумент.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fef91-2899">
              <paramref name="method" /> is not <see langword="null" /> and the method it represents returns <see langword="void" />, is not <see langword="static" /> (<see langword="Shared" /> in Visual Basic), or does not take exactly one argument.</span>
          </span>
        </exception>
        <exception cref="T:System.InvalidOperationException">
          <span data-ttu-id="fef91-2900">
            <paramref name="method" /> равно <see langword="null" />, а унарный оператор Not не определен для типа <paramref name="expression" />.Type.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fef91-2900">
              <paramref name="method" /> is <see langword="null" /> and the unary not operator is not defined for <paramref name="expression" />.Type.</span>
          </span>
          <span data-ttu-id="fef91-2901">-или-</span>
          <span class="sxs-lookup">
            <span data-stu-id="fef91-2901">-or-</span>
          </span>
          <span data-ttu-id="fef91-2902">Тип <paramref name="expression" />.Type (или соответствующий тип, не поддерживающий значение null, если он является типом, поддерживающим значение null) не назначается типу аргумента метода, представленного <paramref name="method" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fef91-2902">
              <paramref name="expression" />.Type (or its corresponding non-nullable type if it is a nullable value type) is not assignable to the argument type of the method represented by <paramref name="method" />.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <MemberGroup MemberName="NotEqual">
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="fef91-2903">Создает <see cref="T:System.Linq.Expressions.BinaryExpression" />, представляющий сравнение неравенства.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fef91-2903">Creates a <see cref="T:System.Linq.Expressions.BinaryExpression" /> that represents an inequality comparison.</span>
          </span>
        </summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="NotEqual">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.BinaryExpression NotEqual (System.Linq.Expressions.Expression left, System.Linq.Expressions.Expression right);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.BinaryExpression NotEqual(class System.Linq.Expressions.Expression left, class System.Linq.Expressions.Expression right) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.NotEqual(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function NotEqual (left As Expression, right As Expression) As BinaryExpression" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Linq::Expressions::BinaryExpression ^ NotEqual(System::Linq::Expressions::Expression ^ left, System::Linq::Expressions::Expression ^ right);" />
      <MemberSignature Language="F#" Value="static member NotEqual : System.Linq.Expressions.Expression * System.Linq.Expressions.Expression -&gt; System.Linq.Expressions.BinaryExpression" Usage="System.Linq.Expressions.Expression.NotEqual (left, right)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.BinaryExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="left" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="right" Type="System.Linq.Expressions.Expression" />
      </Parameters>
      <Docs>
        <param name="left">
          <span data-ttu-id="fef91-2904">Объект <see cref="T:System.Linq.Expressions.Expression" />, который следует задать в качестве значения свойства <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fef91-2904">An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> property equal to.</span>
          </span>
        </param>
        <param name="right">
          <span data-ttu-id="fef91-2905">Объект <see cref="T:System.Linq.Expressions.Expression" />, который следует задать в качестве значения свойства <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fef91-2905">An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> property equal to.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="fef91-2906">Создает <see cref="T:System.Linq.Expressions.BinaryExpression" />, представляющий сравнение неравенства.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fef91-2906">Creates a <see cref="T:System.Linq.Expressions.BinaryExpression" /> that represents an inequality comparison.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="fef91-2907">Выражение <see cref="T:System.Linq.Expressions.BinaryExpression" /> со свойством<see cref="P:System.Linq.Expressions.Expression.NodeType" />, равным <see cref="F:System.Linq.Expressions.ExpressionType.NotEqual" />, и свойствами <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> и <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />, для которых заданы указанные значения.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fef91-2907">A <see cref="T:System.Linq.Expressions.BinaryExpression" /> that has the <see cref="P:System.Linq.Expressions.Expression.NodeType" /> property equal to <see cref="F:System.Linq.Expressions.ExpressionType.NotEqual" /> and the <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> and <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> properties set to the specified values.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="fef91-2908">Полученный в результате <xref:System.Linq.Expressions.BinaryExpression> имеет <xref:System.Linq.Expressions.BinaryExpression.Method%2A> свойство присвоено метод реализации.</span><span class="sxs-lookup"><span data-stu-id="fef91-2908">The resulting <xref:System.Linq.Expressions.BinaryExpression> has the <xref:System.Linq.Expressions.BinaryExpression.Method%2A> property set to the implementing method.</span></span> <span data-ttu-id="fef91-2909"><xref:System.Linq.Expressions.Expression.Type%2A> Свойству присваивается тип узла.</span><span class="sxs-lookup"><span data-stu-id="fef91-2909">The <xref:System.Linq.Expressions.Expression.Type%2A> property is set to the type of the node.</span></span> <span data-ttu-id="fef91-2910">Если узел удаляется, <xref:System.Linq.Expressions.BinaryExpression.IsLifted%2A> свойство `true`.</span><span class="sxs-lookup"><span data-stu-id="fef91-2910">If the node is lifted, the <xref:System.Linq.Expressions.BinaryExpression.IsLifted%2A> property is `true`.</span></span> <span data-ttu-id="fef91-2911">В противном случае содержит значение `false`.</span><span class="sxs-lookup"><span data-stu-id="fef91-2911">Otherwise, it is `false`.</span></span> <span data-ttu-id="fef91-2912">Свойство <xref:System.Linq.Expressions.BinaryExpression.IsLiftedToNull%2A> всегда имеет значение `false`.</span><span class="sxs-lookup"><span data-stu-id="fef91-2912">The <xref:System.Linq.Expressions.BinaryExpression.IsLiftedToNull%2A> property is always `false`.</span></span> <span data-ttu-id="fef91-2913">Значение свойства <xref:System.Linq.Expressions.BinaryExpression.Conversion%2A> — `null`.</span><span class="sxs-lookup"><span data-stu-id="fef91-2913">The <xref:System.Linq.Expressions.BinaryExpression.Conversion%2A> property is `null`.</span></span>  
  
 <span data-ttu-id="fef91-2914">Ниже описывается метод реализации, тип узла и ликвидирован ли данный узел.</span><span class="sxs-lookup"><span data-stu-id="fef91-2914">The following information describes the implementing method, the node type, and whether a node is lifted.</span></span>  
  
#### <a name="implementing-method"></a><span data-ttu-id="fef91-2915">Реализация метода</span><span class="sxs-lookup"><span data-stu-id="fef91-2915">Implementing Method</span></span>  
 <span data-ttu-id="fef91-2916">Следующие правила определяют метод реализации для операции:</span><span class="sxs-lookup"><span data-stu-id="fef91-2916">The following rules determine the implementing method for the operation:</span></span>  
  
-   <span data-ttu-id="fef91-2917">Если <xref:System.Linq.Expressions.Expression.Type%2A> свойству `left` или `right` представляет определяемый пользователем тип, который перегружает оператор неравенства, <xref:System.Reflection.MethodInfo> , представляющий, что метод является методом реализации.</span><span class="sxs-lookup"><span data-stu-id="fef91-2917">If the <xref:System.Linq.Expressions.Expression.Type%2A> property of either `left` or `right` represents a user-defined type that overloads the inequality operator, the <xref:System.Reflection.MethodInfo> that represents that method is the implementing method.</span></span>  
  
-   <span data-ttu-id="fef91-2918">В противном случае метод реализации является `null`.</span><span class="sxs-lookup"><span data-stu-id="fef91-2918">Otherwise, the implementing method is `null`.</span></span>  
  
#### <a name="node-type-and-lifted-versus-non-lifted"></a><span data-ttu-id="fef91-2919">Тип узла с ликвидацией или без</span><span class="sxs-lookup"><span data-stu-id="fef91-2919">Node Type and Lifted versus Non-Lifted</span></span>  
 <span data-ttu-id="fef91-2920">Если метод реализации не `null`:</span><span class="sxs-lookup"><span data-stu-id="fef91-2920">If the implementing method is not `null`:</span></span>  
  
-   <span data-ttu-id="fef91-2921">Если `left`. Тип и `right`. Тип могут быть присвоены соответствующие типы аргументов метода реализации, узел не удаляется.</span><span class="sxs-lookup"><span data-stu-id="fef91-2921">If `left`.Type and `right`.Type are assignable to the corresponding argument types of the implementing method, the node is not lifted.</span></span> <span data-ttu-id="fef91-2922">Тип узла — тип возвращаемого значения метода реализации.</span><span class="sxs-lookup"><span data-stu-id="fef91-2922">The type of the node is the return type of the implementing method.</span></span>  
  
-   <span data-ttu-id="fef91-2923">Если удовлетворяются следующие два условия, узел удаляется, и тип узла — <xref:System.Boolean>:</span><span class="sxs-lookup"><span data-stu-id="fef91-2923">If the following two conditions are satisfied, the node is lifted and the type of the node is <xref:System.Boolean>:</span></span>  
  
    -   <span data-ttu-id="fef91-2924">`left`. Тип и `right`. Тип: обоих типов значений, из которых хотя бы один допускает значения NULL и соответствующие типы, не допускающие значения null равны соответствующие типы аргументов метода реализации.</span><span class="sxs-lookup"><span data-stu-id="fef91-2924">`left`.Type and `right`.Type are both value types of which at least one is nullable and the corresponding non-nullable types are equal to the corresponding argument types of the implementing method.</span></span>  
  
    -   <span data-ttu-id="fef91-2925">Тип возвращаемого значения метода реализации — <xref:System.Boolean>.</span><span class="sxs-lookup"><span data-stu-id="fef91-2925">The return type of the implementing method is <xref:System.Boolean>.</span></span>  
  
 <span data-ttu-id="fef91-2926">Если метод реализации `null`:</span><span class="sxs-lookup"><span data-stu-id="fef91-2926">If the implementing method is `null`:</span></span>  
  
-   <span data-ttu-id="fef91-2927">Если `left`. Тип и `right`. Тип: оба не поддерживающими значение NULL, узел не удаляется.</span><span class="sxs-lookup"><span data-stu-id="fef91-2927">If `left`.Type and `right`.Type are both non-nullable, the node is not lifted.</span></span> <span data-ttu-id="fef91-2928">Тип узла — <xref:System.Boolean>.</span><span class="sxs-lookup"><span data-stu-id="fef91-2928">The type of the node is <xref:System.Boolean>.</span></span>  
  
-   <span data-ttu-id="fef91-2929">Если `left`. Тип и `right`. Тип: значение NULL, узел удаляется.</span><span class="sxs-lookup"><span data-stu-id="fef91-2929">If `left`.Type and `right`.Type are both nullable, the node is lifted.</span></span> <span data-ttu-id="fef91-2930">Тип узла — <xref:System.Boolean>.</span><span class="sxs-lookup"><span data-stu-id="fef91-2930">The type of the node is <xref:System.Boolean>.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="fef91-2931">Значение параметра <paramref name="left" /> или <paramref name="right" /> — <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fef91-2931">
              <paramref name="left" /> or <paramref name="right" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.InvalidOperationException">
          <span data-ttu-id="fef91-2932">Оператор неравенства не определен для типов <paramref name="left" />.Type и <paramref name="right" />.Type.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fef91-2932">The inequality operator is not defined for <paramref name="left" />.Type and <paramref name="right" />.Type.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="NotEqual">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.BinaryExpression NotEqual (System.Linq.Expressions.Expression left, System.Linq.Expressions.Expression right, bool liftToNull, System.Reflection.MethodInfo method);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.BinaryExpression NotEqual(class System.Linq.Expressions.Expression left, class System.Linq.Expressions.Expression right, bool liftToNull, class System.Reflection.MethodInfo method) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.NotEqual(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Boolean,System.Reflection.MethodInfo)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function NotEqual (left As Expression, right As Expression, liftToNull As Boolean, method As MethodInfo) As BinaryExpression" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Linq::Expressions::BinaryExpression ^ NotEqual(System::Linq::Expressions::Expression ^ left, System::Linq::Expressions::Expression ^ right, bool liftToNull, System::Reflection::MethodInfo ^ method);" />
      <MemberSignature Language="F#" Value="static member NotEqual : System.Linq.Expressions.Expression * System.Linq.Expressions.Expression * bool * System.Reflection.MethodInfo -&gt; System.Linq.Expressions.BinaryExpression" Usage="System.Linq.Expressions.Expression.NotEqual (left, right, liftToNull, method)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.BinaryExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="left" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="right" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="liftToNull" Type="System.Boolean" />
        <Parameter Name="method" Type="System.Reflection.MethodInfo" />
      </Parameters>
      <Docs>
        <param name="left">
          <span data-ttu-id="fef91-2933">Объект <see cref="T:System.Linq.Expressions.Expression" />, который следует задать в качестве значения свойства <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fef91-2933">An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> property equal to.</span>
          </span>
        </param>
        <param name="right">
          <span data-ttu-id="fef91-2934">Объект <see cref="T:System.Linq.Expressions.Expression" />, который следует задать в качестве значения свойства <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fef91-2934">An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> property equal to.</span>
          </span>
        </param>
        <param name="liftToNull">
          <span data-ttu-id="fef91-2935">
            <see langword="true" />, чтобы задать для <see cref="P:System.Linq.Expressions.BinaryExpression.IsLiftedToNull" />значение <see langword="true" />; <see langword="false" />, чтобы задать для <see cref="P:System.Linq.Expressions.BinaryExpression.IsLiftedToNull" /> значение <see langword="false" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fef91-2935">
              <see langword="true" /> to set <see cref="P:System.Linq.Expressions.BinaryExpression.IsLiftedToNull" /> to <see langword="true" />; <see langword="false" /> to set <see cref="P:System.Linq.Expressions.BinaryExpression.IsLiftedToNull" /> to <see langword="false" />.</span>
          </span>
        </param>
        <param name="method">
          <span data-ttu-id="fef91-2936">Объект <see cref="T:System.Reflection.MethodInfo" />, который следует задать в качестве значения свойства <see cref="P:System.Linq.Expressions.BinaryExpression.Method" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fef91-2936">A <see cref="T:System.Reflection.MethodInfo" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Method" /> property equal to.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="fef91-2937">Создает <see cref="T:System.Linq.Expressions.BinaryExpression" />, представляющий сравнение неравенства.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fef91-2937">Creates a <see cref="T:System.Linq.Expressions.BinaryExpression" /> that represents an inequality comparison.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="fef91-2938">Выражение <see cref="T:System.Linq.Expressions.BinaryExpression" />, содержащее свойство <see cref="P:System.Linq.Expressions.Expression.NodeType" />, равное <see cref="F:System.Linq.Expressions.ExpressionType.NotEqual" /> и <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />, <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />, <see cref="P:System.Linq.Expressions.BinaryExpression.IsLiftedToNull" />, и свойства <see cref="P:System.Linq.Expressions.BinaryExpression.Method" />, для которых заданы указанные значения.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fef91-2938">A <see cref="T:System.Linq.Expressions.BinaryExpression" /> that has the <see cref="P:System.Linq.Expressions.Expression.NodeType" /> property equal to <see cref="F:System.Linq.Expressions.ExpressionType.NotEqual" /> and the <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />, <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />, <see cref="P:System.Linq.Expressions.BinaryExpression.IsLiftedToNull" />, and <see cref="P:System.Linq.Expressions.BinaryExpression.Method" /> properties set to the specified values.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="fef91-2939">Полученный в результате <xref:System.Linq.Expressions.BinaryExpression> имеет <xref:System.Linq.Expressions.BinaryExpression.Method%2A> свойство присвоено метод реализации.</span><span class="sxs-lookup"><span data-stu-id="fef91-2939">The resulting <xref:System.Linq.Expressions.BinaryExpression> has the <xref:System.Linq.Expressions.BinaryExpression.Method%2A> property set to the implementing method.</span></span> <span data-ttu-id="fef91-2940"><xref:System.Linq.Expressions.Expression.Type%2A> Свойству присваивается тип узла.</span><span class="sxs-lookup"><span data-stu-id="fef91-2940">The <xref:System.Linq.Expressions.Expression.Type%2A> property is set to the type of the node.</span></span> <span data-ttu-id="fef91-2941">Если узел удаляется, <xref:System.Linq.Expressions.BinaryExpression.IsLifted%2A> свойство `true` и <xref:System.Linq.Expressions.BinaryExpression.IsLiftedToNull%2A> равно `liftToNull`.</span><span class="sxs-lookup"><span data-stu-id="fef91-2941">If the node is lifted, the <xref:System.Linq.Expressions.BinaryExpression.IsLifted%2A> property is `true` and the <xref:System.Linq.Expressions.BinaryExpression.IsLiftedToNull%2A> property is equal to `liftToNull`.</span></span> <span data-ttu-id="fef91-2942">В противном случае они оба `false`.</span><span class="sxs-lookup"><span data-stu-id="fef91-2942">Otherwise, they are both `false`.</span></span> <span data-ttu-id="fef91-2943">Значение свойства <xref:System.Linq.Expressions.BinaryExpression.Conversion%2A> — `null`.</span><span class="sxs-lookup"><span data-stu-id="fef91-2943">The <xref:System.Linq.Expressions.BinaryExpression.Conversion%2A> property is `null`.</span></span>  
  
 <span data-ttu-id="fef91-2944">Ниже описывается метод реализации, тип узла и ликвидирован ли данный узел.</span><span class="sxs-lookup"><span data-stu-id="fef91-2944">The following information describes the implementing method, the node type, and whether a node is lifted.</span></span>  
  
#### <a name="implementing-method"></a><span data-ttu-id="fef91-2945">Реализация метода</span><span class="sxs-lookup"><span data-stu-id="fef91-2945">Implementing Method</span></span>  
 <span data-ttu-id="fef91-2946">Следующие правила определяют метод реализации для операции:</span><span class="sxs-lookup"><span data-stu-id="fef91-2946">The following rules determine the implementing method for the operation:</span></span>  
  
-   <span data-ttu-id="fef91-2947">Если `method` не `null` , и это отличный от void, `static` (`Shared` в Visual Basic) метода, принимающего два аргумента, он является методом реализации.</span><span class="sxs-lookup"><span data-stu-id="fef91-2947">If `method` is not `null` and it represents a non-void, `static` (`Shared` in Visual Basic) method that takes two arguments, it is the implementing method.</span></span>  
  
-   <span data-ttu-id="fef91-2948">В противном случае, если <xref:System.Linq.Expressions.Expression.Type%2A> свойству `left` или `right` представляет определяемый пользователем тип, который перегружает оператор неравенства, <xref:System.Reflection.MethodInfo> , представляющий, что метод является методом реализации.</span><span class="sxs-lookup"><span data-stu-id="fef91-2948">Otherwise, if the <xref:System.Linq.Expressions.Expression.Type%2A> property of either `left` or `right` represents a user-defined type that overloads the inequality operator, the <xref:System.Reflection.MethodInfo> that represents that method is the implementing method.</span></span>  
  
-   <span data-ttu-id="fef91-2949">В противном случае метод реализации является `null`.</span><span class="sxs-lookup"><span data-stu-id="fef91-2949">Otherwise, the implementing method is `null`.</span></span>  
  
#### <a name="node-type-and-lifted-versus-non-lifted"></a><span data-ttu-id="fef91-2950">Тип узла с ликвидацией или без</span><span class="sxs-lookup"><span data-stu-id="fef91-2950">Node Type and Lifted versus Non-Lifted</span></span>  
 <span data-ttu-id="fef91-2951">Если метод реализации не `null`:</span><span class="sxs-lookup"><span data-stu-id="fef91-2951">If the implementing method is not `null`:</span></span>  
  
-   <span data-ttu-id="fef91-2952">Если `left`. Тип и `right`. Тип могут быть присвоены соответствующие типы аргументов метода реализации, узел не удаляется.</span><span class="sxs-lookup"><span data-stu-id="fef91-2952">If `left`.Type and `right`.Type are assignable to the corresponding argument types of the implementing method, the node is not lifted.</span></span> <span data-ttu-id="fef91-2953">Тип узла — тип возвращаемого значения метода реализации.</span><span class="sxs-lookup"><span data-stu-id="fef91-2953">The type of the node is the return type of the implementing method.</span></span>  
  
-   <span data-ttu-id="fef91-2954">Если выполняются два следующих условия, узел удаляется; Кроме того, допускающий значение NULL тип узла <xref:System.Boolean> Если `liftToNull` — `true` или <xref:System.Boolean> Если `liftToNull` — `false`:</span><span class="sxs-lookup"><span data-stu-id="fef91-2954">If the following two conditions are satisfied, the node is lifted; also, the type of the node is nullable <xref:System.Boolean> if `liftToNull` is `true` or <xref:System.Boolean> if `liftToNull` is `false`:</span></span>  
  
    -   <span data-ttu-id="fef91-2955">`left`. Тип и `right`. Тип: обоих типов значений, из которых хотя бы один допускает значения NULL и соответствующие типы, не допускающие значения null равны соответствующие типы аргументов метода реализации.</span><span class="sxs-lookup"><span data-stu-id="fef91-2955">`left`.Type and `right`.Type are both value types of which at least one is nullable and the corresponding non-nullable types are equal to the corresponding argument types of the implementing method.</span></span>  
  
    -   <span data-ttu-id="fef91-2956">Тип возвращаемого значения метода реализации — <xref:System.Boolean>.</span><span class="sxs-lookup"><span data-stu-id="fef91-2956">The return type of the implementing method is <xref:System.Boolean>.</span></span>  
  
 <span data-ttu-id="fef91-2957">Если метод реализации `null`:</span><span class="sxs-lookup"><span data-stu-id="fef91-2957">If the implementing method is `null`:</span></span>  
  
-   <span data-ttu-id="fef91-2958">Если `left`. Тип и `right`. Тип: оба не поддерживающими значение NULL, узел не удаляется.</span><span class="sxs-lookup"><span data-stu-id="fef91-2958">If `left`.Type and `right`.Type are both non-nullable, the node is not lifted.</span></span> <span data-ttu-id="fef91-2959">Тип узла — <xref:System.Boolean>.</span><span class="sxs-lookup"><span data-stu-id="fef91-2959">The type of the node is <xref:System.Boolean>.</span></span>  
  
-   <span data-ttu-id="fef91-2960">Если `left`. Тип и `right`. Тип: значение NULL, узел удаляется.</span><span class="sxs-lookup"><span data-stu-id="fef91-2960">If `left`.Type and `right`.Type are both nullable, the node is lifted.</span></span> <span data-ttu-id="fef91-2961">Тип узла, допускающие значения NULL <xref:System.Boolean> Если `liftToNull` — `true` или <xref:System.Boolean> Если `liftToNull` является `false`.</span><span class="sxs-lookup"><span data-stu-id="fef91-2961">The type of the node is nullable <xref:System.Boolean> if `liftToNull` is `true` or <xref:System.Boolean> if `liftToNull` is `false`.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="fef91-2962">Значение параметра <paramref name="left" /> или <paramref name="right" /> — <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fef91-2962">
              <paramref name="left" /> or <paramref name="right" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="fef91-2963">Значение параметра <paramref name="method" /> не равно <see langword="null" />, и метод, который оно представляет, возвращает <see langword="void" />, не является <see langword="static" /> (<see langword="Shared" /> в Visual Basic) и не принимает ровно два аргумента.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fef91-2963">
              <paramref name="method" /> is not <see langword="null" /> and the method it represents returns <see langword="void" />, is not <see langword="static" /> (<see langword="Shared" /> in Visual Basic), or does not take exactly two arguments.</span>
          </span>
        </exception>
        <exception cref="T:System.InvalidOperationException">
          <span data-ttu-id="fef91-2964">
            <paramref name="method" /> равно <see langword="null" />, а оператор неравенства не определен для типов <paramref name="left" />.Type и <paramref name="right" />.Type.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fef91-2964">
              <paramref name="method" /> is <see langword="null" /> and the inequality operator is not defined for <paramref name="left" />.Type and <paramref name="right" />.Type.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <MemberGroup MemberName="OnesComplement">
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="fef91-2965">Возвращает выражение, представляющее дополнение до единицы.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fef91-2965">Returns the expression representing the ones complement.</span>
          </span>
        </summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="OnesComplement">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.UnaryExpression OnesComplement (System.Linq.Expressions.Expression expression);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.UnaryExpression OnesComplement(class System.Linq.Expressions.Expression expression) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.OnesComplement(System.Linq.Expressions.Expression)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Linq::Expressions::UnaryExpression ^ OnesComplement(System::Linq::Expressions::Expression ^ expression);" />
      <MemberSignature Language="F#" Value="static member OnesComplement : System.Linq.Expressions.Expression -&gt; System.Linq.Expressions.UnaryExpression" Usage="System.Linq.Expressions.Expression.OnesComplement expression" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.UnaryExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="expression" Type="System.Linq.Expressions.Expression" />
      </Parameters>
      <Docs>
        <param name="expression">
          <span data-ttu-id="fef91-2966">Объект <see cref="T:System.Linq.Expressions.Expression" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fef91-2966">An <see cref="T:System.Linq.Expressions.Expression" />.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="fef91-2967">Возвращает выражение, представляющее дополнение до единицы.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fef91-2967">Returns the expression representing the ones complement.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="fef91-2968">Экземпляр <see cref="T:System.Linq.Expressions.UnaryExpression" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fef91-2968">An instance of <see cref="T:System.Linq.Expressions.UnaryExpression" />.</span>
          </span>
        </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="OnesComplement">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.UnaryExpression OnesComplement (System.Linq.Expressions.Expression expression, System.Reflection.MethodInfo method);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.UnaryExpression OnesComplement(class System.Linq.Expressions.Expression expression, class System.Reflection.MethodInfo method) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.OnesComplement(System.Linq.Expressions.Expression,System.Reflection.MethodInfo)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Linq::Expressions::UnaryExpression ^ OnesComplement(System::Linq::Expressions::Expression ^ expression, System::Reflection::MethodInfo ^ method);" />
      <MemberSignature Language="F#" Value="static member OnesComplement : System.Linq.Expressions.Expression * System.Reflection.MethodInfo -&gt; System.Linq.Expressions.UnaryExpression" Usage="System.Linq.Expressions.Expression.OnesComplement (expression, method)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.UnaryExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="expression" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="method" Type="System.Reflection.MethodInfo" />
      </Parameters>
      <Docs>
        <param name="expression">
          <span data-ttu-id="fef91-2969">Объект <see cref="T:System.Linq.Expressions.Expression" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fef91-2969">An <see cref="T:System.Linq.Expressions.Expression" />.</span>
          </span>
        </param>
        <param name="method">
          <span data-ttu-id="fef91-2970">Объект <see cref="T:System.Reflection.MethodInfo" />, представляющий метод реализации.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fef91-2970">A <see cref="T:System.Reflection.MethodInfo" /> that represents the implementing method.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="fef91-2971">Возвращает выражение, представляющее дополнение до единицы.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fef91-2971">Returns the expression representing the ones complement.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="fef91-2972">Экземпляр <see cref="T:System.Linq.Expressions.UnaryExpression" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fef91-2972">An instance of <see cref="T:System.Linq.Expressions.UnaryExpression" />.</span>
          </span>
        </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="Or">
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="fef91-2973">Создает выражение <see cref="T:System.Linq.Expressions.BinaryExpression" />, представляющее битовую операцию <see langword="OR" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fef91-2973">Creates a <see cref="T:System.Linq.Expressions.BinaryExpression" /> that represents a bitwise <see langword="OR" /> operation.</span>
          </span>
        </summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Or">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.BinaryExpression Or (System.Linq.Expressions.Expression left, System.Linq.Expressions.Expression right);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.BinaryExpression Or(class System.Linq.Expressions.Expression left, class System.Linq.Expressions.Expression right) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.Or(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Or (left As Expression, right As Expression) As BinaryExpression" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Linq::Expressions::BinaryExpression ^ Or(System::Linq::Expressions::Expression ^ left, System::Linq::Expressions::Expression ^ right);" />
      <MemberSignature Language="F#" Value="static member Or : System.Linq.Expressions.Expression * System.Linq.Expressions.Expression -&gt; System.Linq.Expressions.BinaryExpression" Usage="System.Linq.Expressions.Expression.Or (left, right)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.BinaryExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="left" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="right" Type="System.Linq.Expressions.Expression" />
      </Parameters>
      <Docs>
        <param name="left">
          <span data-ttu-id="fef91-2974">Объект <see cref="T:System.Linq.Expressions.Expression" />, который следует задать в качестве значения свойства <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fef91-2974">An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> property equal to.</span>
          </span>
        </param>
        <param name="right">
          <span data-ttu-id="fef91-2975">Объект <see cref="T:System.Linq.Expressions.Expression" />, который следует задать в качестве значения свойства <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fef91-2975">An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> property equal to.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="fef91-2976">Создает выражение <see cref="T:System.Linq.Expressions.BinaryExpression" />, представляющее битовую операцию <see langword="OR" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fef91-2976">Creates a <see cref="T:System.Linq.Expressions.BinaryExpression" /> that represents a bitwise <see langword="OR" /> operation.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="fef91-2977">Выражение <see cref="T:System.Linq.Expressions.BinaryExpression" /> со свойством<see cref="P:System.Linq.Expressions.Expression.NodeType" />, равным <see cref="F:System.Linq.Expressions.ExpressionType.Or" />, и свойствами <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> и <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />, для которых заданы указанные значения.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fef91-2977">A <see cref="T:System.Linq.Expressions.BinaryExpression" /> that has the <see cref="P:System.Linq.Expressions.Expression.NodeType" /> property equal to <see cref="F:System.Linq.Expressions.ExpressionType.Or" /> and the <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> and <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> properties set to the specified values.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="fef91-2978">Полученный в результате <xref:System.Linq.Expressions.BinaryExpression> имеет <xref:System.Linq.Expressions.BinaryExpression.Method%2A> свойство присвоено метод реализации.</span><span class="sxs-lookup"><span data-stu-id="fef91-2978">The resulting <xref:System.Linq.Expressions.BinaryExpression> has the <xref:System.Linq.Expressions.BinaryExpression.Method%2A> property set to the implementing method.</span></span> <span data-ttu-id="fef91-2979"><xref:System.Linq.Expressions.Expression.Type%2A> Свойству присваивается тип узла.</span><span class="sxs-lookup"><span data-stu-id="fef91-2979">The <xref:System.Linq.Expressions.Expression.Type%2A> property is set to the type of the node.</span></span> <span data-ttu-id="fef91-2980">Если узел удаляется, <xref:System.Linq.Expressions.BinaryExpression.IsLifted%2A> и <xref:System.Linq.Expressions.BinaryExpression.IsLiftedToNull%2A> оба являются свойства `true`.</span><span class="sxs-lookup"><span data-stu-id="fef91-2980">If the node is lifted, the <xref:System.Linq.Expressions.BinaryExpression.IsLifted%2A> and <xref:System.Linq.Expressions.BinaryExpression.IsLiftedToNull%2A> properties are both `true`.</span></span> <span data-ttu-id="fef91-2981">В противном случае они `false`.</span><span class="sxs-lookup"><span data-stu-id="fef91-2981">Otherwise, they are `false`.</span></span> <span data-ttu-id="fef91-2982">Значение свойства <xref:System.Linq.Expressions.BinaryExpression.Conversion%2A> — `null`.</span><span class="sxs-lookup"><span data-stu-id="fef91-2982">The <xref:System.Linq.Expressions.BinaryExpression.Conversion%2A> property is `null`.</span></span>  
  
 <span data-ttu-id="fef91-2983">Ниже описывается метод реализации, тип узла и ликвидирован ли данный узел.</span><span class="sxs-lookup"><span data-stu-id="fef91-2983">The following information describes the implementing method, the node type, and whether a node is lifted.</span></span>  
  
#### <a name="implementing-method"></a><span data-ttu-id="fef91-2984">Реализация метода</span><span class="sxs-lookup"><span data-stu-id="fef91-2984">Implementing Method</span></span>  
 <span data-ttu-id="fef91-2985">Следующие правила определяют метод реализации для операции:</span><span class="sxs-lookup"><span data-stu-id="fef91-2985">The following rules determine the implementing method for the operation:</span></span>  
  
-   <span data-ttu-id="fef91-2986">Если <xref:System.Linq.Expressions.Expression.Type%2A> свойству `left` или `right` представляет определяемый пользователем тип, который перегружает побитового `OR` оператор, <xref:System.Reflection.MethodInfo> , представляющий, что метод является методом реализации.</span><span class="sxs-lookup"><span data-stu-id="fef91-2986">If the <xref:System.Linq.Expressions.Expression.Type%2A> property of either `left` or `right` represents a user-defined type that overloads the bitwise `OR` operator, the <xref:System.Reflection.MethodInfo> that represents that method is the implementing method.</span></span>  
  
-   <span data-ttu-id="fef91-2987">В противном случае, если `left`. Тип и `right`. Являются целыми числами или логическое типами, метод реализации является `null`.</span><span class="sxs-lookup"><span data-stu-id="fef91-2987">Otherwise, if `left`.Type and `right`.Type are integral or Boolean types, the implementing method is `null`.</span></span>  
  
#### <a name="node-type-and-lifted-versus-non-lifted"></a><span data-ttu-id="fef91-2988">Тип узла с ликвидацией или без</span><span class="sxs-lookup"><span data-stu-id="fef91-2988">Node Type and Lifted versus Non-Lifted</span></span>  
 <span data-ttu-id="fef91-2989">Если метод реализации не `null`:</span><span class="sxs-lookup"><span data-stu-id="fef91-2989">If the implementing method is not `null`:</span></span>  
  
-   <span data-ttu-id="fef91-2990">Если `left`. Тип и `right`. Тип могут быть присвоены соответствующие типы аргументов метода реализации, узел не удаляется.</span><span class="sxs-lookup"><span data-stu-id="fef91-2990">If `left`.Type and `right`.Type are assignable to the corresponding argument types of the implementing method, the node is not lifted.</span></span> <span data-ttu-id="fef91-2991">Тип узла — тип возвращаемого значения метода реализации.</span><span class="sxs-lookup"><span data-stu-id="fef91-2991">The type of the node is the return type of the implementing method.</span></span>  
  
-   <span data-ttu-id="fef91-2992">Если выполняются два следующих условия, узел удаляется, а тип узла — обнуляемый тип, соответствующий тип возвращаемого значения метода реализации:</span><span class="sxs-lookup"><span data-stu-id="fef91-2992">If the following two conditions are satisfied, the node is lifted and the type of the node is the nullable type that corresponds to the return type of the implementing method:</span></span>  
  
    -   <span data-ttu-id="fef91-2993">`left`. Тип и `right`. Тип: обоих типов значений, из которых хотя бы один допускает значения NULL и соответствующие типы, не допускающие значения null равны соответствующие типы аргументов метода реализации.</span><span class="sxs-lookup"><span data-stu-id="fef91-2993">`left`.Type and `right`.Type are both value types of which at least one is nullable and the corresponding non-nullable types are equal to the corresponding argument types of the implementing method.</span></span>  
  
    -   <span data-ttu-id="fef91-2994">Тип возвращаемого значения метода реализации является типом значения, не допускающие значения NULL.</span><span class="sxs-lookup"><span data-stu-id="fef91-2994">The return type of the implementing method is a non-nullable value type.</span></span>  
  
 <span data-ttu-id="fef91-2995">Если метод реализации `null`:</span><span class="sxs-lookup"><span data-stu-id="fef91-2995">If the implementing method is `null`:</span></span>  
  
-   <span data-ttu-id="fef91-2996">Если `left`. Тип и `right`. Тип: оба не поддерживающими значение NULL, узел не удаляется.</span><span class="sxs-lookup"><span data-stu-id="fef91-2996">If `left`.Type and `right`.Type are both non-nullable, the node is not lifted.</span></span> <span data-ttu-id="fef91-2997">Тип узла является типом результата из предварительно определенных побитовое `OR` оператор.</span><span class="sxs-lookup"><span data-stu-id="fef91-2997">The type of the node is the result type of the predefined bitwise `OR` operator.</span></span>  
  
-   <span data-ttu-id="fef91-2998">Если `left`. Тип и `right`. Тип: значение NULL, узел удаляется.</span><span class="sxs-lookup"><span data-stu-id="fef91-2998">If `left`.Type and `right`.Type are both nullable, the node is lifted.</span></span> <span data-ttu-id="fef91-2999">Тип узла — обнуляемый тип, соответствующий типу результата из предварительно определенных побитовое `OR` оператор.</span><span class="sxs-lookup"><span data-stu-id="fef91-2999">The type of the node is the nullable type that corresponds to the result type of the predefined bitwise `OR` operator.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="fef91-3000">В следующем примере кода показано, как создать выражение, которое представляет логическую операцию или.</span><span class="sxs-lookup"><span data-stu-id="fef91-3000">The following code example shows how to create an expression that represents a logical OR operation.</span></span>  
  
 [!code-csharp[System.Linq.Expressions.ExpressionDev10#28](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.linq.expressions.expressiondev10/cs/program.cs#28)]
 [!code-vb[System.Linq.Expressions.ExpressionDev10#28](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.linq.expressions.expressiondev10/vb/module1.vb#28)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="fef91-3001">Значение параметра <paramref name="left" /> или <paramref name="right" /> — <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fef91-3001">
              <paramref name="left" /> or <paramref name="right" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.InvalidOperationException">
          <span data-ttu-id="fef91-3002">Битовый оператор <see langword="OR" /> не определен для типов <paramref name="left" />.Type и <paramref name="right" />.Type.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fef91-3002">The bitwise <see langword="OR" /> operator is not defined for <paramref name="left" />.Type and <paramref name="right" />.Type.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="Or">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.BinaryExpression Or (System.Linq.Expressions.Expression left, System.Linq.Expressions.Expression right, System.Reflection.MethodInfo method);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.BinaryExpression Or(class System.Linq.Expressions.Expression left, class System.Linq.Expressions.Expression right, class System.Reflection.MethodInfo method) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.Or(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Or (left As Expression, right As Expression, method As MethodInfo) As BinaryExpression" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Linq::Expressions::BinaryExpression ^ Or(System::Linq::Expressions::Expression ^ left, System::Linq::Expressions::Expression ^ right, System::Reflection::MethodInfo ^ method);" />
      <MemberSignature Language="F#" Value="static member Or : System.Linq.Expressions.Expression * System.Linq.Expressions.Expression * System.Reflection.MethodInfo -&gt; System.Linq.Expressions.BinaryExpression" Usage="System.Linq.Expressions.Expression.Or (left, right, method)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.BinaryExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="left" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="right" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="method" Type="System.Reflection.MethodInfo" />
      </Parameters>
      <Docs>
        <param name="left">
          <span data-ttu-id="fef91-3003">Объект <see cref="T:System.Linq.Expressions.Expression" />, который следует задать в качестве значения свойства <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fef91-3003">An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> property equal to.</span>
          </span>
        </param>
        <param name="right">
          <span data-ttu-id="fef91-3004">Объект <see cref="T:System.Linq.Expressions.Expression" />, который следует задать в качестве значения свойства <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fef91-3004">An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> property equal to.</span>
          </span>
        </param>
        <param name="method">
          <span data-ttu-id="fef91-3005">Объект <see cref="T:System.Reflection.MethodInfo" />, который следует задать в качестве значения свойства <see cref="P:System.Linq.Expressions.BinaryExpression.Method" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fef91-3005">A <see cref="T:System.Reflection.MethodInfo" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Method" /> property equal to.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="fef91-3006">Создает выражение <see cref="T:System.Linq.Expressions.BinaryExpression" />, представляющее битовую операцию <see langword="OR" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fef91-3006">Creates a <see cref="T:System.Linq.Expressions.BinaryExpression" /> that represents a bitwise <see langword="OR" /> operation.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="fef91-3007">Выражение <see cref="T:System.Linq.Expressions.BinaryExpression" /> со свойством <see cref="P:System.Linq.Expressions.Expression.NodeType" />, равным <see cref="F:System.Linq.Expressions.ExpressionType.Or" />, и свойствами <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />, <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> и <see cref="P:System.Linq.Expressions.BinaryExpression.Method" />, для которых заданы указанные значения.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fef91-3007">A <see cref="T:System.Linq.Expressions.BinaryExpression" /> that has the <see cref="P:System.Linq.Expressions.Expression.NodeType" /> property equal to <see cref="F:System.Linq.Expressions.ExpressionType.Or" /> and the <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />, <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />, and <see cref="P:System.Linq.Expressions.BinaryExpression.Method" /> properties set to the specified values.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="fef91-3008">Полученный в результате <xref:System.Linq.Expressions.BinaryExpression> имеет <xref:System.Linq.Expressions.BinaryExpression.Method%2A> свойство присвоено метод реализации.</span><span class="sxs-lookup"><span data-stu-id="fef91-3008">The resulting <xref:System.Linq.Expressions.BinaryExpression> has the <xref:System.Linq.Expressions.BinaryExpression.Method%2A> property set to the implementing method.</span></span> <span data-ttu-id="fef91-3009"><xref:System.Linq.Expressions.Expression.Type%2A> Свойству присваивается тип узла.</span><span class="sxs-lookup"><span data-stu-id="fef91-3009">The <xref:System.Linq.Expressions.Expression.Type%2A> property is set to the type of the node.</span></span> <span data-ttu-id="fef91-3010">Если узел удаляется, <xref:System.Linq.Expressions.BinaryExpression.IsLifted%2A> и <xref:System.Linq.Expressions.BinaryExpression.IsLiftedToNull%2A> оба являются свойства `true`.</span><span class="sxs-lookup"><span data-stu-id="fef91-3010">If the node is lifted, the <xref:System.Linq.Expressions.BinaryExpression.IsLifted%2A> and <xref:System.Linq.Expressions.BinaryExpression.IsLiftedToNull%2A> properties are both `true`.</span></span> <span data-ttu-id="fef91-3011">В противном случае они `false`.</span><span class="sxs-lookup"><span data-stu-id="fef91-3011">Otherwise, they are `false`.</span></span> <span data-ttu-id="fef91-3012">Значение свойства <xref:System.Linq.Expressions.BinaryExpression.Conversion%2A> — `null`.</span><span class="sxs-lookup"><span data-stu-id="fef91-3012">The <xref:System.Linq.Expressions.BinaryExpression.Conversion%2A> property is `null`.</span></span>  
  
 <span data-ttu-id="fef91-3013">Ниже описывается метод реализации, тип узла и ликвидирован ли данный узел.</span><span class="sxs-lookup"><span data-stu-id="fef91-3013">The following information describes the implementing method, the node type, and whether a node is lifted.</span></span>  
  
#### <a name="implementing-method"></a><span data-ttu-id="fef91-3014">Реализация метода</span><span class="sxs-lookup"><span data-stu-id="fef91-3014">Implementing Method</span></span>  
 <span data-ttu-id="fef91-3015">Следующие правила определяют метод реализации для операции:</span><span class="sxs-lookup"><span data-stu-id="fef91-3015">The following rules determine the implementing method for the operation:</span></span>  
  
-   <span data-ttu-id="fef91-3016">Если `method` не `null` , и это отличный от void, `static` (`Shared` в Visual Basic) метода, принимающего два аргумента, он является методом реализации.</span><span class="sxs-lookup"><span data-stu-id="fef91-3016">If `method` is not `null` and it represents a non-void, `static` (`Shared` in Visual Basic) method that takes two arguments, it is the implementing method.</span></span>  
  
-   <span data-ttu-id="fef91-3017">В противном случае, если <xref:System.Linq.Expressions.Expression.Type%2A> свойству `left` или `right` представляет определяемый пользователем тип, который перегружает побитового `OR` оператор, <xref:System.Reflection.MethodInfo> , представляющий, что метод является методом реализации.</span><span class="sxs-lookup"><span data-stu-id="fef91-3017">Otherwise, if the <xref:System.Linq.Expressions.Expression.Type%2A> property of either `left` or `right` represents a user-defined type that overloads the bitwise `OR` operator, the <xref:System.Reflection.MethodInfo> that represents that method is the implementing method.</span></span>  
  
-   <span data-ttu-id="fef91-3018">В противном случае, если `left`. Тип и `right`. Являются целыми числами или логическое типами, метод реализации является `null`.</span><span class="sxs-lookup"><span data-stu-id="fef91-3018">Otherwise, if `left`.Type and `right`.Type are integral or Boolean types, the implementing method is `null`.</span></span>  
  
#### <a name="node-type-and-lifted-versus-non-lifted"></a><span data-ttu-id="fef91-3019">Тип узла с ликвидацией или без</span><span class="sxs-lookup"><span data-stu-id="fef91-3019">Node Type and Lifted versus Non-Lifted</span></span>  
 <span data-ttu-id="fef91-3020">Если метод реализации не `null`:</span><span class="sxs-lookup"><span data-stu-id="fef91-3020">If the implementing method is not `null`:</span></span>  
  
-   <span data-ttu-id="fef91-3021">Если `left`. Тип и `right`. Тип могут быть присвоены соответствующие типы аргументов метода реализации, узел не удаляется.</span><span class="sxs-lookup"><span data-stu-id="fef91-3021">If `left`.Type and `right`.Type are assignable to the corresponding argument types of the implementing method, the node is not lifted.</span></span> <span data-ttu-id="fef91-3022">Тип узла — тип возвращаемого значения метода реализации.</span><span class="sxs-lookup"><span data-stu-id="fef91-3022">The type of the node is the return type of the implementing method.</span></span>  
  
-   <span data-ttu-id="fef91-3023">Если выполняются два следующих условия, узел удаляется, а тип узла — обнуляемый тип, соответствующий тип возвращаемого значения метода реализации:</span><span class="sxs-lookup"><span data-stu-id="fef91-3023">If the following two conditions are satisfied, the node is lifted and the type of the node is the nullable type that corresponds to the return type of the implementing method:</span></span>  
  
    -   <span data-ttu-id="fef91-3024">`left`. Тип и `right`. Тип: обоих типов значений, из которых хотя бы один допускает значения NULL и соответствующие типы, не допускающие значения null равны соответствующие типы аргументов метода реализации.</span><span class="sxs-lookup"><span data-stu-id="fef91-3024">`left`.Type and `right`.Type are both value types of which at least one is nullable and the corresponding non-nullable types are equal to the corresponding argument types of the implementing method.</span></span>  
  
    -   <span data-ttu-id="fef91-3025">Тип возвращаемого значения метода реализации является типом значения, не допускающие значения NULL.</span><span class="sxs-lookup"><span data-stu-id="fef91-3025">The return type of the implementing method is a non-nullable value type.</span></span>  
  
 <span data-ttu-id="fef91-3026">Если метод реализации `null`:</span><span class="sxs-lookup"><span data-stu-id="fef91-3026">If the implementing method is `null`:</span></span>  
  
-   <span data-ttu-id="fef91-3027">Если `left`. Тип и `right`. Тип: оба не поддерживающими значение NULL, узел не удаляется.</span><span class="sxs-lookup"><span data-stu-id="fef91-3027">If `left`.Type and `right`.Type are both non-nullable, the node is not lifted.</span></span> <span data-ttu-id="fef91-3028">Тип узла является типом результата из предварительно определенных побитовое `OR` оператор.</span><span class="sxs-lookup"><span data-stu-id="fef91-3028">The type of the node is the result type of the predefined bitwise `OR` operator.</span></span>  
  
-   <span data-ttu-id="fef91-3029">Если `left`. Тип и `right`. Тип: значение NULL, узел удаляется.</span><span class="sxs-lookup"><span data-stu-id="fef91-3029">If `left`.Type and `right`.Type are both nullable, the node is lifted.</span></span> <span data-ttu-id="fef91-3030">Тип узла — обнуляемый тип, соответствующий типу результата из предварительно определенных побитовое `OR` оператор.</span><span class="sxs-lookup"><span data-stu-id="fef91-3030">The type of the node is the nullable type that corresponds to the result type of the predefined bitwise `OR` operator.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="fef91-3031">Значение параметра <paramref name="left" /> или <paramref name="right" /> — <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fef91-3031">
              <paramref name="left" /> or <paramref name="right" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="fef91-3032">
            <paramref name="method" /> не имеет значение <see langword="null" />, и метод, который он представляет, возвращает <see langword="void" />, а не <see langword="static" /> (<see langword="Shared" /> в Visual Basic), или не принимает ровно два аргумента.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fef91-3032">
              <paramref name="method" /> is not <see langword="null" /> and the method it represents returns <see langword="void" />, is not <see langword="static" /> (<see langword="Shared" /> in Visual Basic), or does not take exactly two arguments.</span>
          </span>
        </exception>
        <exception cref="T:System.InvalidOperationException">
          <span data-ttu-id="fef91-3033">Параметр <paramref name="method" /> имеет значение <see langword="null" />, и битовый оператор <see langword="OR" /> не определен для типов <paramref name="left" />.Type и <paramref name="right" />.Type.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fef91-3033">
              <paramref name="method" /> is <see langword="null" /> and the bitwise <see langword="OR" /> operator is not defined for <paramref name="left" />.Type and <paramref name="right" />.Type.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <MemberGroup MemberName="OrAssign">
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="fef91-3034">Создает объект <see cref="T:System.Linq.Expressions.BinaryExpression" />, представляющий битовую операцию присваивания OR.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fef91-3034">Creates a <see cref="T:System.Linq.Expressions.BinaryExpression" /> that represents a bitwise OR assignment operation.</span>
          </span>
        </summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="OrAssign">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.BinaryExpression OrAssign (System.Linq.Expressions.Expression left, System.Linq.Expressions.Expression right);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.BinaryExpression OrAssign(class System.Linq.Expressions.Expression left, class System.Linq.Expressions.Expression right) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.OrAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function OrAssign (left As Expression, right As Expression) As BinaryExpression" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Linq::Expressions::BinaryExpression ^ OrAssign(System::Linq::Expressions::Expression ^ left, System::Linq::Expressions::Expression ^ right);" />
      <MemberSignature Language="F#" Value="static member OrAssign : System.Linq.Expressions.Expression * System.Linq.Expressions.Expression -&gt; System.Linq.Expressions.BinaryExpression" Usage="System.Linq.Expressions.Expression.OrAssign (left, right)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.BinaryExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="left" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="right" Type="System.Linq.Expressions.Expression" />
      </Parameters>
      <Docs>
        <param name="left">
          <span data-ttu-id="fef91-3035">Объект <see cref="T:System.Linq.Expressions.Expression" />, который следует задать в качестве значения свойства <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fef91-3035">An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> property equal to.</span>
          </span>
        </param>
        <param name="right">
          <span data-ttu-id="fef91-3036">Объект <see cref="T:System.Linq.Expressions.Expression" />, который следует задать в качестве значения свойства <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fef91-3036">An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> property equal to.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="fef91-3037">Создает объект <see cref="T:System.Linq.Expressions.BinaryExpression" />, представляющий битовую операцию присваивания OR.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fef91-3037">Creates a <see cref="T:System.Linq.Expressions.BinaryExpression" /> that represents a bitwise OR assignment operation.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="fef91-3038">Выражение <see cref="T:System.Linq.Expressions.BinaryExpression" /> со свойством<see cref="P:System.Linq.Expressions.Expression.NodeType" />, равным <see cref="F:System.Linq.Expressions.ExpressionType.OrAssign" />, и свойствами <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> и <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />, для которых заданы указанные значения.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fef91-3038">A <see cref="T:System.Linq.Expressions.BinaryExpression" /> that has the <see cref="P:System.Linq.Expressions.Expression.NodeType" /> property equal to <see cref="F:System.Linq.Expressions.ExpressionType.OrAssign" /> and the <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> and <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> properties set to the specified values.</span>
          </span>
        </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="OrAssign">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.BinaryExpression OrAssign (System.Linq.Expressions.Expression left, System.Linq.Expressions.Expression right, System.Reflection.MethodInfo method);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.BinaryExpression OrAssign(class System.Linq.Expressions.Expression left, class System.Linq.Expressions.Expression right, class System.Reflection.MethodInfo method) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.OrAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function OrAssign (left As Expression, right As Expression, method As MethodInfo) As BinaryExpression" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Linq::Expressions::BinaryExpression ^ OrAssign(System::Linq::Expressions::Expression ^ left, System::Linq::Expressions::Expression ^ right, System::Reflection::MethodInfo ^ method);" />
      <MemberSignature Language="F#" Value="static member OrAssign : System.Linq.Expressions.Expression * System.Linq.Expressions.Expression * System.Reflection.MethodInfo -&gt; System.Linq.Expressions.BinaryExpression" Usage="System.Linq.Expressions.Expression.OrAssign (left, right, method)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.BinaryExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="left" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="right" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="method" Type="System.Reflection.MethodInfo" />
      </Parameters>
      <Docs>
        <param name="left">
          <span data-ttu-id="fef91-3039">Объект <see cref="T:System.Linq.Expressions.Expression" />, который следует задать в качестве значения свойства <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fef91-3039">An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> property equal to.</span>
          </span>
        </param>
        <param name="right">
          <span data-ttu-id="fef91-3040">Объект <see cref="T:System.Linq.Expressions.Expression" />, который следует задать в качестве значения свойства <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fef91-3040">An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> property equal to.</span>
          </span>
        </param>
        <param name="method">
          <span data-ttu-id="fef91-3041">Объект <see cref="T:System.Reflection.MethodInfo" />, который следует задать в качестве значения свойства <see cref="P:System.Linq.Expressions.BinaryExpression.Method" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fef91-3041">A <see cref="T:System.Reflection.MethodInfo" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Method" /> property equal to.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="fef91-3042">Создает объект <see cref="T:System.Linq.Expressions.BinaryExpression" />, представляющий битовую операцию присваивания OR.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fef91-3042">Creates a <see cref="T:System.Linq.Expressions.BinaryExpression" /> that represents a bitwise OR assignment operation.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="fef91-3043">Выражение <see cref="T:System.Linq.Expressions.BinaryExpression" /> со свойством <see cref="P:System.Linq.Expressions.Expression.NodeType" />, равным <see cref="F:System.Linq.Expressions.ExpressionType.OrAssign" />, и свойствами <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />, <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> и <see cref="P:System.Linq.Expressions.BinaryExpression.Method" />, для которых заданы указанные значения.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fef91-3043">A <see cref="T:System.Linq.Expressions.BinaryExpression" /> that has the <see cref="P:System.Linq.Expressions.Expression.NodeType" /> property equal to <see cref="F:System.Linq.Expressions.ExpressionType.OrAssign" /> and the <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />, <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />, and <see cref="P:System.Linq.Expressions.BinaryExpression.Method" /> properties set to the specified values.</span>
          </span>
        </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="OrAssign">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.BinaryExpression OrAssign (System.Linq.Expressions.Expression left, System.Linq.Expressions.Expression right, System.Reflection.MethodInfo method, System.Linq.Expressions.LambdaExpression conversion);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.BinaryExpression OrAssign(class System.Linq.Expressions.Expression left, class System.Linq.Expressions.Expression right, class System.Reflection.MethodInfo method, class System.Linq.Expressions.LambdaExpression conversion) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.OrAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo,System.Linq.Expressions.LambdaExpression)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function OrAssign (left As Expression, right As Expression, method As MethodInfo, conversion As LambdaExpression) As BinaryExpression" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Linq::Expressions::BinaryExpression ^ OrAssign(System::Linq::Expressions::Expression ^ left, System::Linq::Expressions::Expression ^ right, System::Reflection::MethodInfo ^ method, System::Linq::Expressions::LambdaExpression ^ conversion);" />
      <MemberSignature Language="F#" Value="static member OrAssign : System.Linq.Expressions.Expression * System.Linq.Expressions.Expression * System.Reflection.MethodInfo * System.Linq.Expressions.LambdaExpression -&gt; System.Linq.Expressions.BinaryExpression" Usage="System.Linq.Expressions.Expression.OrAssign (left, right, method, conversion)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.BinaryExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="left" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="right" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="method" Type="System.Reflection.MethodInfo" />
        <Parameter Name="conversion" Type="System.Linq.Expressions.LambdaExpression" />
      </Parameters>
      <Docs>
        <param name="left">
          <span data-ttu-id="fef91-3044">Объект <see cref="T:System.Linq.Expressions.Expression" />, который следует задать в качестве значения свойства <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fef91-3044">An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> property equal to.</span>
          </span>
        </param>
        <param name="right">
          <span data-ttu-id="fef91-3045">Объект <see cref="T:System.Linq.Expressions.Expression" />, который следует задать в качестве значения свойства <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fef91-3045">An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> property equal to.</span>
          </span>
        </param>
        <param name="method">
          <span data-ttu-id="fef91-3046">Объект <see cref="T:System.Reflection.MethodInfo" />, который следует задать в качестве значения свойства <see cref="P:System.Linq.Expressions.BinaryExpression.Method" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fef91-3046">A <see cref="T:System.Reflection.MethodInfo" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Method" /> property equal to.</span>
          </span>
        </param>
        <param name="conversion">
          <span data-ttu-id="fef91-3047">Объект <see cref="T:System.Linq.Expressions.LambdaExpression" />, который следует задать в качестве значения свойства <see cref="P:System.Linq.Expressions.BinaryExpression.Conversion" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fef91-3047">A <see cref="T:System.Linq.Expressions.LambdaExpression" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Conversion" /> property equal to.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="fef91-3048">Создает объект <see cref="T:System.Linq.Expressions.BinaryExpression" />, представляющий битовую операцию присваивания OR.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fef91-3048">Creates a <see cref="T:System.Linq.Expressions.BinaryExpression" /> that represents a bitwise OR assignment operation.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="fef91-3049">Выражение <see cref="T:System.Linq.Expressions.BinaryExpression" />, содержащее свойство <see cref="P:System.Linq.Expressions.Expression.NodeType" />, равное <see cref="F:System.Linq.Expressions.ExpressionType.OrAssign" /> и <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />, <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />, <see cref="P:System.Linq.Expressions.BinaryExpression.Method" />, и свойства <see cref="P:System.Linq.Expressions.BinaryExpression.Conversion" />, для которых заданы указанные значения.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fef91-3049">A <see cref="T:System.Linq.Expressions.BinaryExpression" /> that has the <see cref="P:System.Linq.Expressions.Expression.NodeType" /> property equal to <see cref="F:System.Linq.Expressions.ExpressionType.OrAssign" /> and the <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />, <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />, <see cref="P:System.Linq.Expressions.BinaryExpression.Method" />, and <see cref="P:System.Linq.Expressions.BinaryExpression.Conversion" /> properties set to the specified values.</span>
          </span>
        </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="OrElse">
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="fef91-3050">Создает выражение <see cref="T:System.Linq.Expressions.BinaryExpression" />, представляющее условную операцию <see langword="OR" />, вычисляющую второй операнд, только если первый оператор имеет значение <see langword="false" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fef91-3050">Creates a <see cref="T:System.Linq.Expressions.BinaryExpression" /> that represents a conditional <see langword="OR" /> operation that evaluates the second operand only if the first operator evaluates to <see langword="false" />.</span>
          </span>
        </summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="OrElse">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.BinaryExpression OrElse (System.Linq.Expressions.Expression left, System.Linq.Expressions.Expression right);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.BinaryExpression OrElse(class System.Linq.Expressions.Expression left, class System.Linq.Expressions.Expression right) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.OrElse(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function OrElse (left As Expression, right As Expression) As BinaryExpression" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Linq::Expressions::BinaryExpression ^ OrElse(System::Linq::Expressions::Expression ^ left, System::Linq::Expressions::Expression ^ right);" />
      <MemberSignature Language="F#" Value="static member OrElse : System.Linq.Expressions.Expression * System.Linq.Expressions.Expression -&gt; System.Linq.Expressions.BinaryExpression" Usage="System.Linq.Expressions.Expression.OrElse (left, right)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.BinaryExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="left" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="right" Type="System.Linq.Expressions.Expression" />
      </Parameters>
      <Docs>
        <param name="left">
          <span data-ttu-id="fef91-3051">Объект <see cref="T:System.Linq.Expressions.Expression" />, который следует задать в качестве значения свойства <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fef91-3051">An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> property equal to.</span>
          </span>
        </param>
        <param name="right">
          <span data-ttu-id="fef91-3052">Объект <see cref="T:System.Linq.Expressions.Expression" />, который следует задать в качестве значения свойства <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fef91-3052">An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> property equal to.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="fef91-3053">Создает выражение <see cref="T:System.Linq.Expressions.BinaryExpression" />, представляющее условную операцию <see langword="OR" />, вычисляющую второй операнд, только если первый операнд имеет значение <see langword="false" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fef91-3053">Creates a <see cref="T:System.Linq.Expressions.BinaryExpression" /> that represents a conditional <see langword="OR" /> operation that evaluates the second operand only if the first operand evaluates to <see langword="false" />.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="fef91-3054">Выражение <see cref="T:System.Linq.Expressions.BinaryExpression" /> со свойством<see cref="P:System.Linq.Expressions.Expression.NodeType" />, равным <see cref="F:System.Linq.Expressions.ExpressionType.OrElse" />, и свойствами <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> и <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />, для которых заданы указанные значения.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fef91-3054">A <see cref="T:System.Linq.Expressions.BinaryExpression" /> that has the <see cref="P:System.Linq.Expressions.Expression.NodeType" /> property equal to <see cref="F:System.Linq.Expressions.ExpressionType.OrElse" /> and the <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> and <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> properties set to the specified values.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="fef91-3055">Полученный в результате <xref:System.Linq.Expressions.BinaryExpression> имеет <xref:System.Linq.Expressions.BinaryExpression.Method%2A> свойство присвоено метод реализации.</span><span class="sxs-lookup"><span data-stu-id="fef91-3055">The resulting <xref:System.Linq.Expressions.BinaryExpression> has the <xref:System.Linq.Expressions.BinaryExpression.Method%2A> property set to the implementing method.</span></span> <span data-ttu-id="fef91-3056"><xref:System.Linq.Expressions.Expression.Type%2A> Свойству присваивается тип узла.</span><span class="sxs-lookup"><span data-stu-id="fef91-3056">The <xref:System.Linq.Expressions.Expression.Type%2A> property is set to the type of the node.</span></span> <span data-ttu-id="fef91-3057">Если узел удаляется, <xref:System.Linq.Expressions.BinaryExpression.IsLifted%2A> и <xref:System.Linq.Expressions.BinaryExpression.IsLiftedToNull%2A> оба являются свойства `true`.</span><span class="sxs-lookup"><span data-stu-id="fef91-3057">If the node is lifted, the <xref:System.Linq.Expressions.BinaryExpression.IsLifted%2A> and <xref:System.Linq.Expressions.BinaryExpression.IsLiftedToNull%2A> properties are both `true`.</span></span> <span data-ttu-id="fef91-3058">В противном случае они `false`.</span><span class="sxs-lookup"><span data-stu-id="fef91-3058">Otherwise, they are `false`.</span></span> <span data-ttu-id="fef91-3059">Значение свойства <xref:System.Linq.Expressions.BinaryExpression.Conversion%2A> — `null`.</span><span class="sxs-lookup"><span data-stu-id="fef91-3059">The <xref:System.Linq.Expressions.BinaryExpression.Conversion%2A> property is `null`.</span></span>  
  
 <span data-ttu-id="fef91-3060">Ниже описывается метод реализации, тип узла и ликвидирован ли данный узел.</span><span class="sxs-lookup"><span data-stu-id="fef91-3060">The following information describes the implementing method, the node type, and whether a node is lifted.</span></span>  
  
#### <a name="implementing-method"></a><span data-ttu-id="fef91-3061">Реализация метода</span><span class="sxs-lookup"><span data-stu-id="fef91-3061">Implementing Method</span></span>  
 <span data-ttu-id="fef91-3062">Следующие правила определяют метод реализации для операции:</span><span class="sxs-lookup"><span data-stu-id="fef91-3062">The following rules determine the implementing method for the operation:</span></span>  
  
-   <span data-ttu-id="fef91-3063">Если <xref:System.Linq.Expressions.Expression.Type%2A> свойству `left` или `right` представляет определяемый пользователем тип, который перегружает побитового `OR` оператор, <xref:System.Reflection.MethodInfo> , представляющий, что метод является методом реализации.</span><span class="sxs-lookup"><span data-stu-id="fef91-3063">If the <xref:System.Linq.Expressions.Expression.Type%2A> property of either `left` or `right` represents a user-defined type that overloads the bitwise `OR` operator, the <xref:System.Reflection.MethodInfo> that represents that method is the implementing method.</span></span>  
  
    > [!NOTE]
    >  <span data-ttu-id="fef91-3064">Условное `OR` оператор не может быть перегружен в C# или Visual Basic.</span><span class="sxs-lookup"><span data-stu-id="fef91-3064">The conditional `OR` operator cannot be overloaded in C# or Visual Basic.</span></span> <span data-ttu-id="fef91-3065">Тем не менее условное `OR` оператора определяется с помощью побитовой операции `OR` оператор.</span><span class="sxs-lookup"><span data-stu-id="fef91-3065">However, the conditional `OR` operator is evaluated by using the bitwise `OR` operator.</span></span> <span data-ttu-id="fef91-3066">Таким образом, определяемые пользователем перегрузка битовой `OR` оператор может быть реализацию метода для этого типа узла.</span><span class="sxs-lookup"><span data-stu-id="fef91-3066">Thus, a user-defined overload of the bitwise `OR` operator can be the implementing method for this node type.</span></span>  
  
-   <span data-ttu-id="fef91-3067">В противном случае, если `left`. Тип и `right`. Тип: логические типы, метод реализации будет `null`.</span><span class="sxs-lookup"><span data-stu-id="fef91-3067">Otherwise, if `left`.Type and `right`.Type are Boolean types, the implementing method is `null`.</span></span>  
  
#### <a name="node-type-and-lifted-versus-non-lifted"></a><span data-ttu-id="fef91-3068">Тип узла с ликвидацией или без</span><span class="sxs-lookup"><span data-stu-id="fef91-3068">Node Type and Lifted versus Non-Lifted</span></span>  
 <span data-ttu-id="fef91-3069">Если метод реализации не `null`:</span><span class="sxs-lookup"><span data-stu-id="fef91-3069">If the implementing method is not `null`:</span></span>  
  
-   <span data-ttu-id="fef91-3070">Если `left`. Тип и `right`. Тип могут быть присвоены соответствующие типы аргументов метода реализации, узел не удаляется.</span><span class="sxs-lookup"><span data-stu-id="fef91-3070">If `left`.Type and `right`.Type are assignable to the corresponding argument types of the implementing method, the node is not lifted.</span></span> <span data-ttu-id="fef91-3071">Тип узла — тип возвращаемого значения метода реализации.</span><span class="sxs-lookup"><span data-stu-id="fef91-3071">The type of the node is the return type of the implementing method.</span></span>  
  
-   <span data-ttu-id="fef91-3072">Если выполняются два следующих условия, узел удаляется, а тип узла — обнуляемый тип, соответствующий тип возвращаемого значения метода реализации:</span><span class="sxs-lookup"><span data-stu-id="fef91-3072">If the following two conditions are satisfied, the node is lifted and the type of the node is the nullable type that corresponds to the return type of the implementing method:</span></span>  
  
    -   <span data-ttu-id="fef91-3073">`left`. Тип и `right`. Тип: обоих типов значений, из которых хотя бы один допускает значения NULL, и соответствующие типы, не допускающие значения null равны соответствующие типы аргументов метода реализации.</span><span class="sxs-lookup"><span data-stu-id="fef91-3073">`left`.Type and `right`.Type are both value types of which at least one is nullable, and the corresponding non-nullable types are equal to the corresponding argument types of the implementing method.</span></span>  
  
    -   <span data-ttu-id="fef91-3074">Тип возвращаемого значения метода реализации является типом значения, не допускающие значения NULL.</span><span class="sxs-lookup"><span data-stu-id="fef91-3074">The return type of the implementing method is a non-nullable value type.</span></span>  
  
 <span data-ttu-id="fef91-3075">Если метод реализации `null`:</span><span class="sxs-lookup"><span data-stu-id="fef91-3075">If the implementing method is `null`:</span></span>  
  
-   <span data-ttu-id="fef91-3076">`left`. Тип и `right`. Тип: один и тот же логический тип.</span><span class="sxs-lookup"><span data-stu-id="fef91-3076">`left`.Type and `right`.Type are the same Boolean type.</span></span>  
  
-   <span data-ttu-id="fef91-3077">Если `left`. Тип и `right`. Тип, не допускающие значения NULL, узел не удаляется.</span><span class="sxs-lookup"><span data-stu-id="fef91-3077">If `left`.Type and `right`.Type are non-nullable, the node is not lifted.</span></span> <span data-ttu-id="fef91-3078">Тип узла является типом результата условного выражения предопределенные `OR` оператор.</span><span class="sxs-lookup"><span data-stu-id="fef91-3078">The type of the node is the result type of the predefined conditional `OR` operator.</span></span>  
  
-   <span data-ttu-id="fef91-3079">Если `left`. Тип и `right`. Тип, допускающий значение NULL, узел удаляется.</span><span class="sxs-lookup"><span data-stu-id="fef91-3079">If `left`.Type and `right`.Type are nullable, the node is lifted.</span></span> <span data-ttu-id="fef91-3080">Тип узла — обнуляемый тип, соответствующий тип результата условного выражения предопределенные `OR` оператор.</span><span class="sxs-lookup"><span data-stu-id="fef91-3080">The type of the node is the nullable type that corresponds to the result type of the predefined conditional `OR` operator.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="fef91-3081">В следующем примере кода показано, как создать выражение, которое представляет логическую `OR` операцию, вычисляющую второй операнд, только в том случае, если первый операнд имеет `false`.</span><span class="sxs-lookup"><span data-stu-id="fef91-3081">The following code example shows how to create an expression that represents a logical `OR` operation that evaluates the second operand only if the first operand evaluates to `false`.</span></span>  
  
 [!code-csharp[System.Linq.Expressions.ExpressionDev10#29](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.linq.expressions.expressiondev10/cs/program.cs#29)]
 [!code-vb[System.Linq.Expressions.ExpressionDev10#29](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.linq.expressions.expressiondev10/vb/module1.vb#29)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="fef91-3082">Значение параметра <paramref name="left" /> или <paramref name="right" /> — <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fef91-3082">
              <paramref name="left" /> or <paramref name="right" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.InvalidOperationException">
          <span data-ttu-id="fef91-3083">Битовый оператор <see langword="OR" /> не определен для типов <paramref name="left" />.Type и <paramref name="right" />.Type.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fef91-3083">The bitwise <see langword="OR" /> operator is not defined for <paramref name="left" />.Type and <paramref name="right" />.Type.</span>
          </span>
          <span data-ttu-id="fef91-3084">-или-</span>
          <span class="sxs-lookup">
            <span data-stu-id="fef91-3084">-or-</span>
          </span>
          <span data-ttu-id="fef91-3085">Типы <paramref name="left" />.Type и <paramref name="right" />.Type отличаются от логического типа.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fef91-3085">
              <paramref name="left" />.Type and <paramref name="right" />.Type are not the same Boolean type.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="OrElse">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.BinaryExpression OrElse (System.Linq.Expressions.Expression left, System.Linq.Expressions.Expression right, System.Reflection.MethodInfo method);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.BinaryExpression OrElse(class System.Linq.Expressions.Expression left, class System.Linq.Expressions.Expression right, class System.Reflection.MethodInfo method) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.OrElse(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function OrElse (left As Expression, right As Expression, method As MethodInfo) As BinaryExpression" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Linq::Expressions::BinaryExpression ^ OrElse(System::Linq::Expressions::Expression ^ left, System::Linq::Expressions::Expression ^ right, System::Reflection::MethodInfo ^ method);" />
      <MemberSignature Language="F#" Value="static member OrElse : System.Linq.Expressions.Expression * System.Linq.Expressions.Expression * System.Reflection.MethodInfo -&gt; System.Linq.Expressions.BinaryExpression" Usage="System.Linq.Expressions.Expression.OrElse (left, right, method)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.BinaryExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="left" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="right" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="method" Type="System.Reflection.MethodInfo" />
      </Parameters>
      <Docs>
        <param name="left">
          <span data-ttu-id="fef91-3086">Объект <see cref="T:System.Linq.Expressions.Expression" />, который следует задать в качестве значения свойства <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fef91-3086">An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> property equal to.</span>
          </span>
        </param>
        <param name="right">
          <span data-ttu-id="fef91-3087">Объект <see cref="T:System.Linq.Expressions.Expression" />, который следует задать в качестве значения свойства <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fef91-3087">An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> property equal to.</span>
          </span>
        </param>
        <param name="method">
          <span data-ttu-id="fef91-3088">Объект <see cref="T:System.Reflection.MethodInfo" />, который следует задать в качестве значения свойства <see cref="P:System.Linq.Expressions.BinaryExpression.Method" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fef91-3088">A <see cref="T:System.Reflection.MethodInfo" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Method" /> property equal to.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="fef91-3089">Создает выражение <see cref="T:System.Linq.Expressions.BinaryExpression" />, представляющее условную операцию <see langword="OR" />, вычисляющую второй операнд, только если первый операнд имеет значение <see langword="false" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fef91-3089">Creates a <see cref="T:System.Linq.Expressions.BinaryExpression" /> that represents a conditional <see langword="OR" /> operation that evaluates the second operand only if the first operand evaluates to <see langword="false" />.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="fef91-3090">Выражение <see cref="T:System.Linq.Expressions.BinaryExpression" /> со свойством <see cref="P:System.Linq.Expressions.Expression.NodeType" />, равным <see cref="F:System.Linq.Expressions.ExpressionType.OrElse" />, и свойствами <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />, <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> и <see cref="P:System.Linq.Expressions.BinaryExpression.Method" />, для которых заданы указанные значения.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fef91-3090">A <see cref="T:System.Linq.Expressions.BinaryExpression" /> that has the <see cref="P:System.Linq.Expressions.Expression.NodeType" /> property equal to <see cref="F:System.Linq.Expressions.ExpressionType.OrElse" /> and the <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />, <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />, and <see cref="P:System.Linq.Expressions.BinaryExpression.Method" /> properties set to the specified values.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="fef91-3091">Полученный в результате <xref:System.Linq.Expressions.BinaryExpression> имеет <xref:System.Linq.Expressions.BinaryExpression.Method%2A> свойство присвоено метод реализации.</span><span class="sxs-lookup"><span data-stu-id="fef91-3091">The resulting <xref:System.Linq.Expressions.BinaryExpression> has the <xref:System.Linq.Expressions.BinaryExpression.Method%2A> property set to the implementing method.</span></span> <span data-ttu-id="fef91-3092"><xref:System.Linq.Expressions.Expression.Type%2A> Свойству присваивается тип узла.</span><span class="sxs-lookup"><span data-stu-id="fef91-3092">The <xref:System.Linq.Expressions.Expression.Type%2A> property is set to the type of the node.</span></span> <span data-ttu-id="fef91-3093">Если узел удаляется, <xref:System.Linq.Expressions.BinaryExpression.IsLifted%2A> и <xref:System.Linq.Expressions.BinaryExpression.IsLiftedToNull%2A> оба являются свойства `true`.</span><span class="sxs-lookup"><span data-stu-id="fef91-3093">If the node is lifted, the <xref:System.Linq.Expressions.BinaryExpression.IsLifted%2A> and <xref:System.Linq.Expressions.BinaryExpression.IsLiftedToNull%2A> properties are both `true`.</span></span> <span data-ttu-id="fef91-3094">В противном случае они `false`.</span><span class="sxs-lookup"><span data-stu-id="fef91-3094">Otherwise, they are `false`.</span></span> <span data-ttu-id="fef91-3095">Значение свойства <xref:System.Linq.Expressions.BinaryExpression.Conversion%2A> — `null`.</span><span class="sxs-lookup"><span data-stu-id="fef91-3095">The <xref:System.Linq.Expressions.BinaryExpression.Conversion%2A> property is `null`.</span></span>  
  
 <span data-ttu-id="fef91-3096">Ниже описывается метод реализации, тип узла и ликвидирован ли данный узел.</span><span class="sxs-lookup"><span data-stu-id="fef91-3096">The following information describes the implementing method, the node type, and whether a node is lifted.</span></span>  
  
#### <a name="implementing-method"></a><span data-ttu-id="fef91-3097">Реализация метода</span><span class="sxs-lookup"><span data-stu-id="fef91-3097">Implementing Method</span></span>  
 <span data-ttu-id="fef91-3098">Следующие правила определяют метод реализации для операции:</span><span class="sxs-lookup"><span data-stu-id="fef91-3098">The following rules determine the implementing method for the operation:</span></span>  
  
-   <span data-ttu-id="fef91-3099">Если `method` не `null` , и это отличный от void, `static` (`Shared` в Visual Basic) метода, принимающего два аргумента, это метод реализации для узла.</span><span class="sxs-lookup"><span data-stu-id="fef91-3099">If `method` is not `null` and it represents a non-void, `static` (`Shared` in Visual Basic) method that takes two arguments, it is the implementing method for the node.</span></span>  
  
-   <span data-ttu-id="fef91-3100">В противном случае, если <xref:System.Linq.Expressions.Expression.Type%2A> свойству `left` или `right` представляет определяемый пользователем тип, который перегружает побитового `OR` оператор, <xref:System.Reflection.MethodInfo> , представляющий, что метод является методом реализации.</span><span class="sxs-lookup"><span data-stu-id="fef91-3100">Otherwise, if the <xref:System.Linq.Expressions.Expression.Type%2A> property of either `left` or `right` represents a user-defined type that overloads the bitwise `OR` operator, the <xref:System.Reflection.MethodInfo> that represents that method is the implementing method.</span></span>  
  
    > [!NOTE]
    >  <span data-ttu-id="fef91-3101">Условное `OR` оператор не может быть перегружен в C# или Visual Basic.</span><span class="sxs-lookup"><span data-stu-id="fef91-3101">The conditional `OR` operator cannot be overloaded in C# or Visual Basic.</span></span> <span data-ttu-id="fef91-3102">Тем не менее условное `OR` оператора определяется с помощью побитовой операции `OR` оператор.</span><span class="sxs-lookup"><span data-stu-id="fef91-3102">However, the conditional `OR` operator is evaluated by using the bitwise `OR` operator.</span></span> <span data-ttu-id="fef91-3103">Таким образом, определяемые пользователем перегрузка битовой `OR` оператор может быть реализацию метода для этого типа узла.</span><span class="sxs-lookup"><span data-stu-id="fef91-3103">Thus, a user-defined overload of the bitwise `OR` operator can be the implementing method for this node type.</span></span>  
  
-   <span data-ttu-id="fef91-3104">В противном случае, если `left`. Тип и `right`. Тип: логические типы, метод реализации будет `null`.</span><span class="sxs-lookup"><span data-stu-id="fef91-3104">Otherwise, if `left`.Type and `right`.Type are Boolean types, the implementing method is `null`.</span></span>  
  
#### <a name="node-type-and-lifted-versus-non-lifted"></a><span data-ttu-id="fef91-3105">Тип узла с ликвидацией или без</span><span class="sxs-lookup"><span data-stu-id="fef91-3105">Node Type and Lifted versus Non-Lifted</span></span>  
 <span data-ttu-id="fef91-3106">Если метод реализации не `null`:</span><span class="sxs-lookup"><span data-stu-id="fef91-3106">If the implementing method is not `null`:</span></span>  
  
-   <span data-ttu-id="fef91-3107">Если `left`. Тип и `right`. Тип могут быть присвоены соответствующие типы аргументов метода реализации, узел не удаляется.</span><span class="sxs-lookup"><span data-stu-id="fef91-3107">If `left`.Type and `right`.Type are assignable to the corresponding argument types of the implementing method, the node is not lifted.</span></span> <span data-ttu-id="fef91-3108">Тип узла — тип возвращаемого значения метода реализации.</span><span class="sxs-lookup"><span data-stu-id="fef91-3108">The type of the node is the return type of the implementing method.</span></span>  
  
-   <span data-ttu-id="fef91-3109">Если выполняются два следующих условия, узел удаляется, а тип узла — обнуляемый тип, соответствующий тип возвращаемого значения метода реализации:</span><span class="sxs-lookup"><span data-stu-id="fef91-3109">If the following two conditions are satisfied, the node is lifted and the type of the node is the nullable type that corresponds to the return type of the implementing method:</span></span>  
  
    -   <span data-ttu-id="fef91-3110">`left`. Тип и `right`. Тип: обоих типов значений, из которых хотя бы один допускает значения NULL, и соответствующие типы, не допускающие значения null равны соответствующие типы аргументов метода реализации.</span><span class="sxs-lookup"><span data-stu-id="fef91-3110">`left`.Type and `right`.Type are both value types of which at least one is nullable, and the corresponding non-nullable types are equal to the corresponding argument types of the implementing method.</span></span>  
  
    -   <span data-ttu-id="fef91-3111">Тип возвращаемого значения метода реализации является типом значения, не допускающие значения NULL.</span><span class="sxs-lookup"><span data-stu-id="fef91-3111">The return type of the implementing method is a non-nullable value type.</span></span>  
  
 <span data-ttu-id="fef91-3112">Если метод реализации `null`:</span><span class="sxs-lookup"><span data-stu-id="fef91-3112">If the implementing method is `null`:</span></span>  
  
-   <span data-ttu-id="fef91-3113">`left`. Тип и `right`. Тип: один и тот же логический тип.</span><span class="sxs-lookup"><span data-stu-id="fef91-3113">`left`.Type and `right`.Type are the same Boolean type.</span></span>  
  
-   <span data-ttu-id="fef91-3114">Если `left`. Тип и `right`. Тип, не допускающие значения NULL, узел не удаляется.</span><span class="sxs-lookup"><span data-stu-id="fef91-3114">If `left`.Type and `right`.Type are non-nullable, the node is not lifted.</span></span> <span data-ttu-id="fef91-3115">Тип узла является типом результата условного выражения предопределенные `OR` оператор.</span><span class="sxs-lookup"><span data-stu-id="fef91-3115">The type of the node is the result type of the predefined conditional `OR` operator.</span></span>  
  
-   <span data-ttu-id="fef91-3116">Если `left`. Тип и `right`. Тип, допускающий значение NULL, узел удаляется.</span><span class="sxs-lookup"><span data-stu-id="fef91-3116">If `left`.Type and `right`.Type are nullable, the node is lifted.</span></span> <span data-ttu-id="fef91-3117">Тип узла — обнуляемый тип, соответствующий тип результата условного выражения предопределенные `OR` оператор.</span><span class="sxs-lookup"><span data-stu-id="fef91-3117">The type of the node is the nullable type that corresponds to the result type of the predefined conditional `OR` operator.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="fef91-3118">Значение параметра <paramref name="left" /> или <paramref name="right" /> — <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fef91-3118">
              <paramref name="left" /> or <paramref name="right" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="fef91-3119">
            <paramref name="method" /> не имеет значение <see langword="null" />, и метод, который он представляет, возвращает <see langword="void" />, а не <see langword="static" /> (<see langword="Shared" /> в Visual Basic), или не принимает ровно два аргумента.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fef91-3119">
              <paramref name="method" /> is not <see langword="null" /> and the method it represents returns <see langword="void" />, is not <see langword="static" /> (<see langword="Shared" /> in Visual Basic), or does not take exactly two arguments.</span>
          </span>
        </exception>
        <exception cref="T:System.InvalidOperationException">
          <span data-ttu-id="fef91-3120">Параметр <paramref name="method" /> имеет значение <see langword="null" />, и битовый оператор <see langword="OR" /> не определен для типов <paramref name="left" />.Type и <paramref name="right" />.Type.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fef91-3120">
              <paramref name="method" /> is <see langword="null" /> and the bitwise <see langword="OR" /> operator is not defined for <paramref name="left" />.Type and <paramref name="right" />.Type.</span>
          </span>
          <span data-ttu-id="fef91-3121">-или-</span>
          <span class="sxs-lookup">
            <span data-stu-id="fef91-3121">-or-</span>
          </span>
          <span data-ttu-id="fef91-3122">Метод <paramref name="method" /> равен <see langword="null" />, а типы <paramref name="left" />.Type и <paramref name="right" />.Type отличаются от логического типа.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fef91-3122">
              <paramref name="method" /> is <see langword="null" /> and <paramref name="left" />.Type and <paramref name="right" />.Type are not the same Boolean type.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <MemberGroup MemberName="Parameter">
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="fef91-3123">Создает узел <see cref="T:System.Linq.Expressions.ParameterExpression" />, который можно использовать для идентификации параметра или переменной в дереве выражения.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fef91-3123">Creates a <see cref="T:System.Linq.Expressions.ParameterExpression" /> node that can be used to identify a parameter or a variable in an expression tree.</span>
          </span>
        </summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Parameter">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.ParameterExpression Parameter (Type type);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.ParameterExpression Parameter(class System.Type type) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.Parameter(System.Type)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Linq::Expressions::ParameterExpression ^ Parameter(Type ^ type);" />
      <MemberSignature Language="F#" Value="static member Parameter : Type -&gt; System.Linq.Expressions.ParameterExpression" Usage="System.Linq.Expressions.Expression.Parameter type" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.ParameterExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="type" Type="System.Type" />
      </Parameters>
      <Docs>
        <param name="type">
          <span data-ttu-id="fef91-3124">Тип параметра или переменной.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fef91-3124">The type of the parameter or variable.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="fef91-3125">Создает узел <see cref="T:System.Linq.Expressions.ParameterExpression" />, который можно использовать для идентификации параметра или переменной в дереве выражения.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fef91-3125">Creates a <see cref="T:System.Linq.Expressions.ParameterExpression" /> node that can be used to identify a parameter or a variable in an expression tree.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="fef91-3126">Узел <see cref="T:System.Linq.Expressions.ParameterExpression" /> с указанными именем и типом.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fef91-3126">A <see cref="T:System.Linq.Expressions.ParameterExpression" /> node with the specified name and type.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 <span data-ttu-id="fef91-3127">Следующий пример демонстрирует создание <xref:System.Linq.Expressions.MethodCallExpression> объект, который выводит значение <xref:System.Linq.Expressions.ParameterExpression> объекта.</span><span class="sxs-lookup"><span data-stu-id="fef91-3127">The following example demonstrates how to create a <xref:System.Linq.Expressions.MethodCallExpression> object that prints the value of a <xref:System.Linq.Expressions.ParameterExpression> object.</span></span>  
  
 [!code-csharp[System.Linq.Expressions.ExpressionDev10#49](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.linq.expressions.expressiondev10/cs/program.cs#49)]
 [!code-vb[System.Linq.Expressions.ExpressionDev10#49](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.linq.expressions.expressiondev10/vb/module1.vb#49)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Parameter">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.ParameterExpression Parameter (Type type, string name);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.ParameterExpression Parameter(class System.Type type, string name) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.Parameter(System.Type,System.String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Linq::Expressions::ParameterExpression ^ Parameter(Type ^ type, System::String ^ name);" />
      <MemberSignature Language="F#" Value="static member Parameter : Type * string -&gt; System.Linq.Expressions.ParameterExpression" Usage="System.Linq.Expressions.Expression.Parameter (type, name)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.ParameterExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="type" Type="System.Type" />
        <Parameter Name="name" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="type">
          <span data-ttu-id="fef91-3128">Тип параметра или переменной.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fef91-3128">The type of the parameter or variable.</span>
          </span>
        </param>
        <param name="name">
          <span data-ttu-id="fef91-3129">Имя параметра или переменной только для целей отладки и печати.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fef91-3129">The name of the parameter or variable, used for debugging or printing purpose only.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="fef91-3130">Создает узел <see cref="T:System.Linq.Expressions.ParameterExpression" />, который можно использовать для идентификации параметра или переменной в дереве выражения.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fef91-3130">Creates a <see cref="T:System.Linq.Expressions.ParameterExpression" /> node that can be used to identify a parameter or a variable in an expression tree.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="fef91-3131">Выражение <see cref="T:System.Linq.Expressions.ParameterExpression" /> со свойством<see cref="P:System.Linq.Expressions.Expression.NodeType" />, равным <see cref="F:System.Linq.Expressions.ExpressionType.Parameter" />, и свойствами <see cref="P:System.Linq.Expressions.Expression.Type" /> и <see cref="P:System.Linq.Expressions.ParameterExpression.Name" />, для которых заданы указанные значения.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fef91-3131">A <see cref="T:System.Linq.Expressions.ParameterExpression" /> that has the <see cref="P:System.Linq.Expressions.Expression.NodeType" /> property equal to <see cref="F:System.Linq.Expressions.ExpressionType.Parameter" /> and the <see cref="P:System.Linq.Expressions.Expression.Type" /> and <see cref="P:System.Linq.Expressions.ParameterExpression.Name" /> properties set to the specified values.</span>
          </span>
        </returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="fef91-3132">
            <paramref name="type" /> — <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fef91-3132">
              <paramref name="type" /> is <see langword="null" />.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <MemberGroup MemberName="PostDecrementAssign">
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="fef91-3133">Создает объект <see cref="T:System.Linq.Expressions.UnaryExpression" />, представляющий присваивание выражения и последующее уменьшение исходного выражения на 1.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fef91-3133">Creates a <see cref="T:System.Linq.Expressions.UnaryExpression" /> that represents the assignment of the expression followed by a subsequent decrement by 1 of the original expression.</span>
          </span>
        </summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="PostDecrementAssign">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.UnaryExpression PostDecrementAssign (System.Linq.Expressions.Expression expression);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.UnaryExpression PostDecrementAssign(class System.Linq.Expressions.Expression expression) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.PostDecrementAssign(System.Linq.Expressions.Expression)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Linq::Expressions::UnaryExpression ^ PostDecrementAssign(System::Linq::Expressions::Expression ^ expression);" />
      <MemberSignature Language="F#" Value="static member PostDecrementAssign : System.Linq.Expressions.Expression -&gt; System.Linq.Expressions.UnaryExpression" Usage="System.Linq.Expressions.Expression.PostDecrementAssign expression" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.UnaryExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="expression" Type="System.Linq.Expressions.Expression" />
      </Parameters>
      <Docs>
        <param name="expression">
          <span data-ttu-id="fef91-3134">Объект <see cref="T:System.Linq.Expressions.Expression" />, к которому требуется применить операции.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fef91-3134">An <see cref="T:System.Linq.Expressions.Expression" /> to apply the operations on.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="fef91-3135">Создает объект <see cref="T:System.Linq.Expressions.UnaryExpression" />, представляющий присваивание выражения и последующее уменьшение исходного выражения на 1.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fef91-3135">Creates a <see cref="T:System.Linq.Expressions.UnaryExpression" /> that represents the assignment of the expression followed by a subsequent decrement by 1 of the original expression.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="fef91-3136">Объект <see cref="T:System.Linq.Expressions.UnaryExpression" />, представляющий результирующее выражение.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fef91-3136">A <see cref="T:System.Linq.Expressions.UnaryExpression" /> that represents the resultant expression.</span>
          </span>
        </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="PostDecrementAssign">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.UnaryExpression PostDecrementAssign (System.Linq.Expressions.Expression expression, System.Reflection.MethodInfo method);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.UnaryExpression PostDecrementAssign(class System.Linq.Expressions.Expression expression, class System.Reflection.MethodInfo method) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.PostDecrementAssign(System.Linq.Expressions.Expression,System.Reflection.MethodInfo)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Linq::Expressions::UnaryExpression ^ PostDecrementAssign(System::Linq::Expressions::Expression ^ expression, System::Reflection::MethodInfo ^ method);" />
      <MemberSignature Language="F#" Value="static member PostDecrementAssign : System.Linq.Expressions.Expression * System.Reflection.MethodInfo -&gt; System.Linq.Expressions.UnaryExpression" Usage="System.Linq.Expressions.Expression.PostDecrementAssign (expression, method)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.UnaryExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="expression" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="method" Type="System.Reflection.MethodInfo" />
      </Parameters>
      <Docs>
        <param name="expression">
          <span data-ttu-id="fef91-3137">Объект <see cref="T:System.Linq.Expressions.Expression" />, к которому требуется применить операции.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fef91-3137">An <see cref="T:System.Linq.Expressions.Expression" /> to apply the operations on.</span>
          </span>
        </param>
        <param name="method">
          <span data-ttu-id="fef91-3138">Объект <see cref="T:System.Reflection.MethodInfo" />, представляющий метод реализации.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fef91-3138">A <see cref="T:System.Reflection.MethodInfo" /> that represents the implementing method.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="fef91-3139">Создает объект <see cref="T:System.Linq.Expressions.UnaryExpression" />, представляющий присваивание выражения и последующее уменьшение исходного выражения на 1.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fef91-3139">Creates a <see cref="T:System.Linq.Expressions.UnaryExpression" /> that represents the assignment of the expression followed by a subsequent decrement by 1 of the original expression.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="fef91-3140">Объект <see cref="T:System.Linq.Expressions.UnaryExpression" />, представляющий результирующее выражение.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fef91-3140">A <see cref="T:System.Linq.Expressions.UnaryExpression" /> that represents the resultant expression.</span>
          </span>
        </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="PostIncrementAssign">
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="fef91-3141">Создает объект <see cref="T:System.Linq.Expressions.UnaryExpression" />, представляющий присваивание выражения и последующее увеличение исходного выражения на 1.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fef91-3141">Creates a <see cref="T:System.Linq.Expressions.UnaryExpression" /> that represents the assignment of the expression followed by a subsequent increment by 1 of the original expression.</span>
          </span>
        </summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="PostIncrementAssign">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.UnaryExpression PostIncrementAssign (System.Linq.Expressions.Expression expression);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.UnaryExpression PostIncrementAssign(class System.Linq.Expressions.Expression expression) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.PostIncrementAssign(System.Linq.Expressions.Expression)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Linq::Expressions::UnaryExpression ^ PostIncrementAssign(System::Linq::Expressions::Expression ^ expression);" />
      <MemberSignature Language="F#" Value="static member PostIncrementAssign : System.Linq.Expressions.Expression -&gt; System.Linq.Expressions.UnaryExpression" Usage="System.Linq.Expressions.Expression.PostIncrementAssign expression" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.UnaryExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="expression" Type="System.Linq.Expressions.Expression" />
      </Parameters>
      <Docs>
        <param name="expression">
          <span data-ttu-id="fef91-3142">Объект <see cref="T:System.Linq.Expressions.Expression" />, к которому требуется применить операции.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fef91-3142">An <see cref="T:System.Linq.Expressions.Expression" /> to apply the operations on.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="fef91-3143">Создает объект <see cref="T:System.Linq.Expressions.UnaryExpression" />, представляющий присваивание выражения и последующее увеличение исходного выражения на 1.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fef91-3143">Creates a <see cref="T:System.Linq.Expressions.UnaryExpression" /> that represents the assignment of the expression followed by a subsequent increment by 1 of the original expression.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="fef91-3144">Объект <see cref="T:System.Linq.Expressions.UnaryExpression" />, представляющий результирующее выражение.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fef91-3144">A <see cref="T:System.Linq.Expressions.UnaryExpression" /> that represents the resultant expression.</span>
          </span>
        </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="PostIncrementAssign">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.UnaryExpression PostIncrementAssign (System.Linq.Expressions.Expression expression, System.Reflection.MethodInfo method);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.UnaryExpression PostIncrementAssign(class System.Linq.Expressions.Expression expression, class System.Reflection.MethodInfo method) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.PostIncrementAssign(System.Linq.Expressions.Expression,System.Reflection.MethodInfo)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Linq::Expressions::UnaryExpression ^ PostIncrementAssign(System::Linq::Expressions::Expression ^ expression, System::Reflection::MethodInfo ^ method);" />
      <MemberSignature Language="F#" Value="static member PostIncrementAssign : System.Linq.Expressions.Expression * System.Reflection.MethodInfo -&gt; System.Linq.Expressions.UnaryExpression" Usage="System.Linq.Expressions.Expression.PostIncrementAssign (expression, method)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.UnaryExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="expression" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="method" Type="System.Reflection.MethodInfo" />
      </Parameters>
      <Docs>
        <param name="expression">
          <span data-ttu-id="fef91-3145">Объект <see cref="T:System.Linq.Expressions.Expression" />, к которому требуется применить операции.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fef91-3145">An <see cref="T:System.Linq.Expressions.Expression" /> to apply the operations on.</span>
          </span>
        </param>
        <param name="method">
          <span data-ttu-id="fef91-3146">Объект <see cref="T:System.Reflection.MethodInfo" />, представляющий метод реализации.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fef91-3146">A <see cref="T:System.Reflection.MethodInfo" /> that represents the implementing method.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="fef91-3147">Создает объект <see cref="T:System.Linq.Expressions.UnaryExpression" />, представляющий присваивание выражения и последующее увеличение исходного выражения на 1.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fef91-3147">Creates a <see cref="T:System.Linq.Expressions.UnaryExpression" /> that represents the assignment of the expression followed by a subsequent increment by 1 of the original expression.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="fef91-3148">Объект <see cref="T:System.Linq.Expressions.UnaryExpression" />, представляющий результирующее выражение.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fef91-3148">A <see cref="T:System.Linq.Expressions.UnaryExpression" /> that represents the resultant expression.</span>
          </span>
        </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="Power">
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="fef91-3149">Создает объект <see cref="T:System.Linq.Expressions.BinaryExpression" />, представляющий возведение числа в степень.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fef91-3149">Creates a <see cref="T:System.Linq.Expressions.BinaryExpression" /> that represents raising a number to a power.</span>
          </span>
        </summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Power">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.BinaryExpression Power (System.Linq.Expressions.Expression left, System.Linq.Expressions.Expression right);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.BinaryExpression Power(class System.Linq.Expressions.Expression left, class System.Linq.Expressions.Expression right) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.Power(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Power (left As Expression, right As Expression) As BinaryExpression" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Linq::Expressions::BinaryExpression ^ Power(System::Linq::Expressions::Expression ^ left, System::Linq::Expressions::Expression ^ right);" />
      <MemberSignature Language="F#" Value="static member Power : System.Linq.Expressions.Expression * System.Linq.Expressions.Expression -&gt; System.Linq.Expressions.BinaryExpression" Usage="System.Linq.Expressions.Expression.Power (left, right)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.BinaryExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="left" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="right" Type="System.Linq.Expressions.Expression" />
      </Parameters>
      <Docs>
        <param name="left">
          <span data-ttu-id="fef91-3150">Объект <see cref="T:System.Linq.Expressions.Expression" />, который следует задать в качестве значения свойства <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fef91-3150">An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> property equal to.</span>
          </span>
        </param>
        <param name="right">
          <span data-ttu-id="fef91-3151">Объект <see cref="T:System.Linq.Expressions.Expression" />, который следует задать в качестве значения свойства <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fef91-3151">An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> property equal to.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="fef91-3152">Создает объект <see cref="T:System.Linq.Expressions.BinaryExpression" />, представляющий возведение числа в степень.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fef91-3152">Creates a <see cref="T:System.Linq.Expressions.BinaryExpression" /> that represents raising a number to a power.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="fef91-3153">Выражение <see cref="T:System.Linq.Expressions.BinaryExpression" /> со свойством<see cref="P:System.Linq.Expressions.Expression.NodeType" />, равным <see cref="F:System.Linq.Expressions.ExpressionType.Power" />, и свойствами <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> и <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />, для которых заданы указанные значения.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fef91-3153">A <see cref="T:System.Linq.Expressions.BinaryExpression" /> that has the <see cref="P:System.Linq.Expressions.Expression.NodeType" /> property equal to <see cref="F:System.Linq.Expressions.ExpressionType.Power" /> and the <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> and <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> properties set to the specified values.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="fef91-3154">Полученный в результате <xref:System.Linq.Expressions.BinaryExpression> имеет <xref:System.Linq.Expressions.BinaryExpression.Method%2A> свойство присвоено метод реализации.</span><span class="sxs-lookup"><span data-stu-id="fef91-3154">The resulting <xref:System.Linq.Expressions.BinaryExpression> has the <xref:System.Linq.Expressions.BinaryExpression.Method%2A> property set to the implementing method.</span></span> <span data-ttu-id="fef91-3155"><xref:System.Linq.Expressions.Expression.Type%2A> Свойству присваивается тип узла.</span><span class="sxs-lookup"><span data-stu-id="fef91-3155">The <xref:System.Linq.Expressions.Expression.Type%2A> property is set to the type of the node.</span></span> <span data-ttu-id="fef91-3156">Если узел удаляется, <xref:System.Linq.Expressions.BinaryExpression.IsLifted%2A> и <xref:System.Linq.Expressions.BinaryExpression.IsLiftedToNull%2A> оба являются свойства `true`.</span><span class="sxs-lookup"><span data-stu-id="fef91-3156">If the node is lifted, the <xref:System.Linq.Expressions.BinaryExpression.IsLifted%2A> and <xref:System.Linq.Expressions.BinaryExpression.IsLiftedToNull%2A> properties are both `true`.</span></span> <span data-ttu-id="fef91-3157">В противном случае они `false`.</span><span class="sxs-lookup"><span data-stu-id="fef91-3157">Otherwise, they are `false`.</span></span> <span data-ttu-id="fef91-3158">Значение свойства <xref:System.Linq.Expressions.BinaryExpression.Conversion%2A> — `null`.</span><span class="sxs-lookup"><span data-stu-id="fef91-3158">The <xref:System.Linq.Expressions.BinaryExpression.Conversion%2A> property is `null`.</span></span>  
  
 <span data-ttu-id="fef91-3159">Ниже описывается метод реализации, тип узла и ликвидирован ли данный узел.</span><span class="sxs-lookup"><span data-stu-id="fef91-3159">The following information describes the implementing method, the node type, and whether a node is lifted.</span></span>  
  
#### <a name="implementing-method"></a><span data-ttu-id="fef91-3160">Реализация метода</span><span class="sxs-lookup"><span data-stu-id="fef91-3160">Implementing Method</span></span>  
 <span data-ttu-id="fef91-3161">Следующие правила определяют метод реализации для операции:</span><span class="sxs-lookup"><span data-stu-id="fef91-3161">The following rules determine the implementing method for the operation:</span></span>  
  
-   <span data-ttu-id="fef91-3162">Если <xref:System.Linq.Expressions.Expression.Type%2A> свойству `left` или `right` представляет определяемый пользователем тип, который перегружает оператор возведения в степень <xref:System.Reflection.MethodInfo> , представляющий, что метод является методом реализации.</span><span class="sxs-lookup"><span data-stu-id="fef91-3162">If the <xref:System.Linq.Expressions.Expression.Type%2A> property of either `left` or `right` represents a user-defined type that overloads the exponentiation operator, the <xref:System.Reflection.MethodInfo> that represents that method is the implementing method.</span></span>  
  
-   <span data-ttu-id="fef91-3163">В противном случае, если `left`. Тип и `right`. Оба типа являются <xref:System.Double>, реализация метода является <xref:System.Math.Pow%2A>.</span><span class="sxs-lookup"><span data-stu-id="fef91-3163">Otherwise, if `left`.Type and `right`.Type are both <xref:System.Double>, the implementing method is <xref:System.Math.Pow%2A>.</span></span>  
  
#### <a name="node-type-and-lifted-versus-non-lifted"></a><span data-ttu-id="fef91-3164">Тип узла с ликвидацией или без</span><span class="sxs-lookup"><span data-stu-id="fef91-3164">Node Type and Lifted versus Non-Lifted</span></span>  
  
-   <span data-ttu-id="fef91-3165">Если `left`. Тип и `right`. Тип могут быть присвоены соответствующие типы аргументов метода реализации, узел не удаляется.</span><span class="sxs-lookup"><span data-stu-id="fef91-3165">If `left`.Type and `right`.Type are assignable to the corresponding argument types of the implementing method, the node is not lifted.</span></span> <span data-ttu-id="fef91-3166">Тип узла — тип возвращаемого значения метода реализации.</span><span class="sxs-lookup"><span data-stu-id="fef91-3166">The type of the node is the return type of the implementing method.</span></span>  
  
-   <span data-ttu-id="fef91-3167">Если выполняются два следующих условия, узел удаляется, а тип узла — обнуляемый тип, соответствующий тип возвращаемого значения метода реализации:</span><span class="sxs-lookup"><span data-stu-id="fef91-3167">If the following two conditions are satisfied, the node is lifted and the type of the node is the nullable type that corresponds to the return type of the implementing method:</span></span>  
  
    -   <span data-ttu-id="fef91-3168">`left`. Тип и `right`. Тип: обоих типов значений, из которых хотя бы один допускает значения NULL и соответствующие типы, не допускающие значения null равны соответствующие типы аргументов метода реализации.</span><span class="sxs-lookup"><span data-stu-id="fef91-3168">`left`.Type and `right`.Type are both value types of which at least one is nullable and the corresponding non-nullable types are equal to the corresponding argument types of the implementing method.</span></span>  
  
    -   <span data-ttu-id="fef91-3169">Тип возвращаемого значения метода реализации является типом значения, не допускающие значения NULL.</span><span class="sxs-lookup"><span data-stu-id="fef91-3169">The return type of the implementing method is a non-nullable value type.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="fef91-3170">Значение параметра <paramref name="left" /> или <paramref name="right" /> — <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fef91-3170">
              <paramref name="left" /> or <paramref name="right" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.InvalidOperationException">
          <span data-ttu-id="fef91-3171">Оператор потенцирования не определен для типов <paramref name="left" />.Type и <paramref name="right" />.Type.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fef91-3171">The exponentiation operator is not defined for <paramref name="left" />.Type and <paramref name="right" />.Type.</span>
          </span>
          <span data-ttu-id="fef91-3172">-или-</span>
          <span class="sxs-lookup">
            <span data-stu-id="fef91-3172">-or-</span>
          </span>
          <span data-ttu-id="fef91-3173">Типы <paramref name="left" />.Type и <paramref name="right" />.Type не являются <see cref="T:System.Double" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fef91-3173">
              <paramref name="left" />.Type and/or <paramref name="right" />.Type are not <see cref="T:System.Double" />.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="Power">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.BinaryExpression Power (System.Linq.Expressions.Expression left, System.Linq.Expressions.Expression right, System.Reflection.MethodInfo method);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.BinaryExpression Power(class System.Linq.Expressions.Expression left, class System.Linq.Expressions.Expression right, class System.Reflection.MethodInfo method) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.Power(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Power (left As Expression, right As Expression, method As MethodInfo) As BinaryExpression" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Linq::Expressions::BinaryExpression ^ Power(System::Linq::Expressions::Expression ^ left, System::Linq::Expressions::Expression ^ right, System::Reflection::MethodInfo ^ method);" />
      <MemberSignature Language="F#" Value="static member Power : System.Linq.Expressions.Expression * System.Linq.Expressions.Expression * System.Reflection.MethodInfo -&gt; System.Linq.Expressions.BinaryExpression" Usage="System.Linq.Expressions.Expression.Power (left, right, method)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.BinaryExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="left" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="right" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="method" Type="System.Reflection.MethodInfo" />
      </Parameters>
      <Docs>
        <param name="left">
          <span data-ttu-id="fef91-3174">Объект <see cref="T:System.Linq.Expressions.Expression" />, который следует задать в качестве значения свойства <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fef91-3174">An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> property equal to.</span>
          </span>
        </param>
        <param name="right">
          <span data-ttu-id="fef91-3175">Объект <see cref="T:System.Linq.Expressions.Expression" />, который следует задать в качестве значения свойства <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fef91-3175">An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> property equal to.</span>
          </span>
        </param>
        <param name="method">
          <span data-ttu-id="fef91-3176">Объект <see cref="T:System.Reflection.MethodInfo" />, который следует задать в качестве значения свойства <see cref="P:System.Linq.Expressions.BinaryExpression.Method" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fef91-3176">A <see cref="T:System.Reflection.MethodInfo" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Method" /> property equal to.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="fef91-3177">Создает объект <see cref="T:System.Linq.Expressions.BinaryExpression" />, представляющий возведение числа в степень.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fef91-3177">Creates a <see cref="T:System.Linq.Expressions.BinaryExpression" /> that represents raising a number to a power.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="fef91-3178">Выражение <see cref="T:System.Linq.Expressions.BinaryExpression" /> со свойством <see cref="P:System.Linq.Expressions.Expression.NodeType" />, равным <see cref="F:System.Linq.Expressions.ExpressionType.Power" />, и свойствами <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />, <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> и <see cref="P:System.Linq.Expressions.BinaryExpression.Method" />, для которых заданы указанные значения.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fef91-3178">A <see cref="T:System.Linq.Expressions.BinaryExpression" /> that has the <see cref="P:System.Linq.Expressions.Expression.NodeType" /> property equal to <see cref="F:System.Linq.Expressions.ExpressionType.Power" /> and the <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />, <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />, and <see cref="P:System.Linq.Expressions.BinaryExpression.Method" /> properties set to the specified values.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="fef91-3179">Полученный в результате <xref:System.Linq.Expressions.BinaryExpression> имеет <xref:System.Linq.Expressions.BinaryExpression.Method%2A> свойство присвоено метод реализации.</span><span class="sxs-lookup"><span data-stu-id="fef91-3179">The resulting <xref:System.Linq.Expressions.BinaryExpression> has the <xref:System.Linq.Expressions.BinaryExpression.Method%2A> property set to the implementing method.</span></span> <span data-ttu-id="fef91-3180"><xref:System.Linq.Expressions.Expression.Type%2A> Свойству присваивается тип узла.</span><span class="sxs-lookup"><span data-stu-id="fef91-3180">The <xref:System.Linq.Expressions.Expression.Type%2A> property is set to the type of the node.</span></span> <span data-ttu-id="fef91-3181">Если узел удаляется, <xref:System.Linq.Expressions.BinaryExpression.IsLifted%2A> и <xref:System.Linq.Expressions.BinaryExpression.IsLiftedToNull%2A> оба являются свойства `true`.</span><span class="sxs-lookup"><span data-stu-id="fef91-3181">If the node is lifted, the <xref:System.Linq.Expressions.BinaryExpression.IsLifted%2A> and <xref:System.Linq.Expressions.BinaryExpression.IsLiftedToNull%2A> properties are both `true`.</span></span> <span data-ttu-id="fef91-3182">В противном случае они `false`.</span><span class="sxs-lookup"><span data-stu-id="fef91-3182">Otherwise, they are `false`.</span></span> <span data-ttu-id="fef91-3183">Значение свойства <xref:System.Linq.Expressions.BinaryExpression.Conversion%2A> — `null`.</span><span class="sxs-lookup"><span data-stu-id="fef91-3183">The <xref:System.Linq.Expressions.BinaryExpression.Conversion%2A> property is `null`.</span></span>  
  
 <span data-ttu-id="fef91-3184">Ниже описывается метод реализации, тип узла и ликвидирован ли данный узел.</span><span class="sxs-lookup"><span data-stu-id="fef91-3184">The following information describes the implementing method, the node type, and whether a node is lifted.</span></span>  
  
#### <a name="implementing-method"></a><span data-ttu-id="fef91-3185">Реализация метода</span><span class="sxs-lookup"><span data-stu-id="fef91-3185">Implementing Method</span></span>  
 <span data-ttu-id="fef91-3186">Следующие правила определяют метод реализации для операции:</span><span class="sxs-lookup"><span data-stu-id="fef91-3186">The following rules determine the implementing method for the operation:</span></span>  
  
-   <span data-ttu-id="fef91-3187">Если `method` не `null` , и это отличный от void, `static` (`Shared` в Visual Basic) метода, принимающего два аргумента, он является методом реализации.</span><span class="sxs-lookup"><span data-stu-id="fef91-3187">If `method` is not `null` and it represents a non-void, `static` (`Shared` in Visual Basic) method that takes two arguments, it is the implementing method.</span></span>  
  
-   <span data-ttu-id="fef91-3188">В противном случае, если <xref:System.Linq.Expressions.Expression.Type%2A> свойству `left` или `right` представляет определяемый пользователем тип, который перегружает оператор возведения в степень <xref:System.Reflection.MethodInfo> , представляющий, что метод является методом реализации.</span><span class="sxs-lookup"><span data-stu-id="fef91-3188">Otherwise, if the <xref:System.Linq.Expressions.Expression.Type%2A> property of either `left` or `right` represents a user-defined type that overloads the exponentiation operator, the <xref:System.Reflection.MethodInfo> that represents that method is the implementing method.</span></span>  
  
-   <span data-ttu-id="fef91-3189">В противном случае, если `left`. Тип и `right`. Оба типа являются <xref:System.Double>, реализация метода является <xref:System.Math.Pow%2A>.</span><span class="sxs-lookup"><span data-stu-id="fef91-3189">Otherwise, if `left`.Type and `right`.Type are both <xref:System.Double>, the implementing method is <xref:System.Math.Pow%2A>.</span></span>  
  
#### <a name="node-type-and-lifted-versus-non-lifted"></a><span data-ttu-id="fef91-3190">Тип узла с ликвидацией или без</span><span class="sxs-lookup"><span data-stu-id="fef91-3190">Node Type and Lifted versus Non-Lifted</span></span>  
  
-   <span data-ttu-id="fef91-3191">Если `left`. Тип и `right`. Тип могут быть присвоены соответствующие типы аргументов метода реализации, узел не удаляется.</span><span class="sxs-lookup"><span data-stu-id="fef91-3191">If `left`.Type and `right`.Type are assignable to the corresponding argument types of the implementing method, the node is not lifted.</span></span> <span data-ttu-id="fef91-3192">Тип узла — тип возвращаемого значения метода реализации.</span><span class="sxs-lookup"><span data-stu-id="fef91-3192">The type of the node is the return type of the implementing method.</span></span>  
  
-   <span data-ttu-id="fef91-3193">Если выполняются два следующих условия, узел удаляется, а тип узла — обнуляемый тип, соответствующий тип возвращаемого значения метода реализации:</span><span class="sxs-lookup"><span data-stu-id="fef91-3193">If the following two conditions are satisfied, the node is lifted and the type of the node is the nullable type that corresponds to the return type of the implementing method:</span></span>  
  
    -   <span data-ttu-id="fef91-3194">`left`. Тип и `right`. Тип: обоих типов значений, из которых хотя бы один допускает значения NULL и соответствующие типы, не допускающие значения null равны соответствующие типы аргументов метода реализации.</span><span class="sxs-lookup"><span data-stu-id="fef91-3194">`left`.Type and `right`.Type are both value types of which at least one is nullable and the corresponding non-nullable types are equal to the corresponding argument types of the implementing method.</span></span>  
  
    -   <span data-ttu-id="fef91-3195">Тип возвращаемого значения метода реализации является типом значения, не допускающие значения NULL.</span><span class="sxs-lookup"><span data-stu-id="fef91-3195">The return type of the implementing method is a non-nullable value type.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="fef91-3196">Значение параметра <paramref name="left" /> или <paramref name="right" /> — <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fef91-3196">
              <paramref name="left" /> or <paramref name="right" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="fef91-3197">Значение параметра <paramref name="method" /> не равно <see langword="null" />, и метод, который оно представляет, возвращает <see langword="void" />, не является <see langword="static" /> (<see langword="Shared" /> в Visual Basic) и не принимает ровно два аргумента.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fef91-3197">
              <paramref name="method" /> is not <see langword="null" /> and the method it represents returns <see langword="void" />, is not <see langword="static" /> (<see langword="Shared" /> in Visual Basic), or does not take exactly two arguments.</span>
          </span>
        </exception>
        <exception cref="T:System.InvalidOperationException">
          <span data-ttu-id="fef91-3198">
            <paramref name="method" /> — <see langword="null" />, и оператор возведения в степень не определен для <paramref name="left" />.Type и <paramref name="right" />.Type.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fef91-3198">
              <paramref name="method" /> is <see langword="null" /> and the exponentiation operator is not defined for <paramref name="left" />.Type and <paramref name="right" />.Type.</span>
          </span>
          <span data-ttu-id="fef91-3199">-или-</span>
          <span class="sxs-lookup">
            <span data-stu-id="fef91-3199">-or-</span>
          </span>
          <span data-ttu-id="fef91-3200">Значение <paramref name="method" /> равно <see langword="null" />, а типы <paramref name="left" />.Type и <paramref name="right" />.Type не равны <see cref="T:System.Double" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fef91-3200">
              <paramref name="method" /> is <see langword="null" /> and <paramref name="left" />.Type and/or <paramref name="right" />.Type are not <see cref="T:System.Double" />.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <MemberGroup MemberName="PowerAssign">
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="fef91-3201">Создает объект <see cref="T:System.Linq.Expressions.BinaryExpression" />, представляющий возведение выражения в степень и присваивание результата исходному выражению.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fef91-3201">Creates a <see cref="T:System.Linq.Expressions.BinaryExpression" /> that represents raising an expression to a power and assigning the result back to the expression.</span>
          </span>
        </summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="PowerAssign">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.BinaryExpression PowerAssign (System.Linq.Expressions.Expression left, System.Linq.Expressions.Expression right);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.BinaryExpression PowerAssign(class System.Linq.Expressions.Expression left, class System.Linq.Expressions.Expression right) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.PowerAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function PowerAssign (left As Expression, right As Expression) As BinaryExpression" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Linq::Expressions::BinaryExpression ^ PowerAssign(System::Linq::Expressions::Expression ^ left, System::Linq::Expressions::Expression ^ right);" />
      <MemberSignature Language="F#" Value="static member PowerAssign : System.Linq.Expressions.Expression * System.Linq.Expressions.Expression -&gt; System.Linq.Expressions.BinaryExpression" Usage="System.Linq.Expressions.Expression.PowerAssign (left, right)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.BinaryExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="left" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="right" Type="System.Linq.Expressions.Expression" />
      </Parameters>
      <Docs>
        <param name="left">
          <span data-ttu-id="fef91-3202">Объект <see cref="T:System.Linq.Expressions.Expression" />, который следует задать в качестве значения свойства <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fef91-3202">An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> property equal to.</span>
          </span>
        </param>
        <param name="right">
          <span data-ttu-id="fef91-3203">Объект <see cref="T:System.Linq.Expressions.Expression" />, который следует задать в качестве значения свойства <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fef91-3203">An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> property equal to.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="fef91-3204">Создает объект <see cref="T:System.Linq.Expressions.BinaryExpression" />, представляющий возведение выражения в степень и присваивание результата исходному выражению.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fef91-3204">Creates a <see cref="T:System.Linq.Expressions.BinaryExpression" /> that represents raising an expression to a power and assigning the result back to the expression.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="fef91-3205">Выражение <see cref="T:System.Linq.Expressions.BinaryExpression" /> со свойством<see cref="P:System.Linq.Expressions.Expression.NodeType" />, равным <see cref="F:System.Linq.Expressions.ExpressionType.PowerAssign" />, и свойствами <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> и <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />, для которых заданы указанные значения.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fef91-3205">A <see cref="T:System.Linq.Expressions.BinaryExpression" /> that has the <see cref="P:System.Linq.Expressions.Expression.NodeType" /> property equal to <see cref="F:System.Linq.Expressions.ExpressionType.PowerAssign" /> and the <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> and <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> properties set to the specified values.</span>
          </span>
        </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="PowerAssign">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.BinaryExpression PowerAssign (System.Linq.Expressions.Expression left, System.Linq.Expressions.Expression right, System.Reflection.MethodInfo method);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.BinaryExpression PowerAssign(class System.Linq.Expressions.Expression left, class System.Linq.Expressions.Expression right, class System.Reflection.MethodInfo method) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.PowerAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function PowerAssign (left As Expression, right As Expression, method As MethodInfo) As BinaryExpression" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Linq::Expressions::BinaryExpression ^ PowerAssign(System::Linq::Expressions::Expression ^ left, System::Linq::Expressions::Expression ^ right, System::Reflection::MethodInfo ^ method);" />
      <MemberSignature Language="F#" Value="static member PowerAssign : System.Linq.Expressions.Expression * System.Linq.Expressions.Expression * System.Reflection.MethodInfo -&gt; System.Linq.Expressions.BinaryExpression" Usage="System.Linq.Expressions.Expression.PowerAssign (left, right, method)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.BinaryExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="left" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="right" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="method" Type="System.Reflection.MethodInfo" />
      </Parameters>
      <Docs>
        <param name="left">
          <span data-ttu-id="fef91-3206">Объект <see cref="T:System.Linq.Expressions.Expression" />, который следует задать в качестве значения свойства <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fef91-3206">An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> property equal to.</span>
          </span>
        </param>
        <param name="right">
          <span data-ttu-id="fef91-3207">Объект <see cref="T:System.Linq.Expressions.Expression" />, который следует задать в качестве значения свойства <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fef91-3207">An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> property equal to.</span>
          </span>
        </param>
        <param name="method">
          <span data-ttu-id="fef91-3208">Объект <see cref="T:System.Reflection.MethodInfo" />, который следует задать в качестве значения свойства <see cref="P:System.Linq.Expressions.BinaryExpression.Method" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fef91-3208">A <see cref="T:System.Reflection.MethodInfo" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Method" /> property equal to.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="fef91-3209">Создает объект <see cref="T:System.Linq.Expressions.BinaryExpression" />, представляющий возведение выражения в степень и присваивание результата исходному выражению.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fef91-3209">Creates a <see cref="T:System.Linq.Expressions.BinaryExpression" /> that represents raising an expression to a power and assigning the result back to the expression.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="fef91-3210">Выражение <see cref="T:System.Linq.Expressions.BinaryExpression" /> со свойством <see cref="P:System.Linq.Expressions.Expression.NodeType" />, равным <see cref="F:System.Linq.Expressions.ExpressionType.PowerAssign" />, и свойствами <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />, <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> и <see cref="P:System.Linq.Expressions.BinaryExpression.Method" />, для которых заданы указанные значения.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fef91-3210">A <see cref="T:System.Linq.Expressions.BinaryExpression" /> that has the <see cref="P:System.Linq.Expressions.Expression.NodeType" /> property equal to <see cref="F:System.Linq.Expressions.ExpressionType.PowerAssign" /> and the <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />, <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />, and <see cref="P:System.Linq.Expressions.BinaryExpression.Method" /> properties set to the specified values.</span>
          </span>
        </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="PowerAssign">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.BinaryExpression PowerAssign (System.Linq.Expressions.Expression left, System.Linq.Expressions.Expression right, System.Reflection.MethodInfo method, System.Linq.Expressions.LambdaExpression conversion);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.BinaryExpression PowerAssign(class System.Linq.Expressions.Expression left, class System.Linq.Expressions.Expression right, class System.Reflection.MethodInfo method, class System.Linq.Expressions.LambdaExpression conversion) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.PowerAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo,System.Linq.Expressions.LambdaExpression)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function PowerAssign (left As Expression, right As Expression, method As MethodInfo, conversion As LambdaExpression) As BinaryExpression" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Linq::Expressions::BinaryExpression ^ PowerAssign(System::Linq::Expressions::Expression ^ left, System::Linq::Expressions::Expression ^ right, System::Reflection::MethodInfo ^ method, System::Linq::Expressions::LambdaExpression ^ conversion);" />
      <MemberSignature Language="F#" Value="static member PowerAssign : System.Linq.Expressions.Expression * System.Linq.Expressions.Expression * System.Reflection.MethodInfo * System.Linq.Expressions.LambdaExpression -&gt; System.Linq.Expressions.BinaryExpression" Usage="System.Linq.Expressions.Expression.PowerAssign (left, right, method, conversion)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.BinaryExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="left" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="right" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="method" Type="System.Reflection.MethodInfo" />
        <Parameter Name="conversion" Type="System.Linq.Expressions.LambdaExpression" />
      </Parameters>
      <Docs>
        <param name="left">
          <span data-ttu-id="fef91-3211">Объект <see cref="T:System.Linq.Expressions.Expression" />, который следует задать в качестве значения свойства <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fef91-3211">An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> property equal to.</span>
          </span>
        </param>
        <param name="right">
          <span data-ttu-id="fef91-3212">Объект <see cref="T:System.Linq.Expressions.Expression" />, который следует задать в качестве значения свойства <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fef91-3212">An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> property equal to.</span>
          </span>
        </param>
        <param name="method">
          <span data-ttu-id="fef91-3213">Объект <see cref="T:System.Reflection.MethodInfo" />, который следует задать в качестве значения свойства <see cref="P:System.Linq.Expressions.BinaryExpression.Method" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fef91-3213">A <see cref="T:System.Reflection.MethodInfo" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Method" /> property equal to.</span>
          </span>
        </param>
        <param name="conversion">
          <span data-ttu-id="fef91-3214">Объект <see cref="T:System.Linq.Expressions.LambdaExpression" />, который следует задать в качестве значения свойства <see cref="P:System.Linq.Expressions.BinaryExpression.Conversion" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fef91-3214">A <see cref="T:System.Linq.Expressions.LambdaExpression" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Conversion" /> property equal to.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="fef91-3215">Создает объект <see cref="T:System.Linq.Expressions.BinaryExpression" />, представляющий возведение выражения в степень и присваивание результата исходному выражению.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fef91-3215">Creates a <see cref="T:System.Linq.Expressions.BinaryExpression" /> that represents raising an expression to a power and assigning the result back to the expression.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="fef91-3216">Выражение <see cref="T:System.Linq.Expressions.BinaryExpression" />, содержащее свойство <see cref="P:System.Linq.Expressions.Expression.NodeType" />, равное <see cref="F:System.Linq.Expressions.ExpressionType.PowerAssign" /> и <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />, <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />, <see cref="P:System.Linq.Expressions.BinaryExpression.Method" />, и свойства <see cref="P:System.Linq.Expressions.BinaryExpression.Conversion" />, для которых заданы указанные значения.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fef91-3216">A <see cref="T:System.Linq.Expressions.BinaryExpression" /> that has the <see cref="P:System.Linq.Expressions.Expression.NodeType" /> property equal to <see cref="F:System.Linq.Expressions.ExpressionType.PowerAssign" /> and the <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />, <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />, <see cref="P:System.Linq.Expressions.BinaryExpression.Method" />, and <see cref="P:System.Linq.Expressions.BinaryExpression.Conversion" /> properties set to the specified values.</span>
          </span>
        </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="PreDecrementAssign">
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="fef91-3217">Создает объект <see cref="T:System.Linq.Expressions.UnaryExpression" />, который уменьшает выражение на 1 и присваивает результат исходному выражению.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fef91-3217">Creates a <see cref="T:System.Linq.Expressions.UnaryExpression" /> that decrements the expression by 1 and assigns the result back to the expression.</span>
          </span>
        </summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="PreDecrementAssign">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.UnaryExpression PreDecrementAssign (System.Linq.Expressions.Expression expression);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.UnaryExpression PreDecrementAssign(class System.Linq.Expressions.Expression expression) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.PreDecrementAssign(System.Linq.Expressions.Expression)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Linq::Expressions::UnaryExpression ^ PreDecrementAssign(System::Linq::Expressions::Expression ^ expression);" />
      <MemberSignature Language="F#" Value="static member PreDecrementAssign : System.Linq.Expressions.Expression -&gt; System.Linq.Expressions.UnaryExpression" Usage="System.Linq.Expressions.Expression.PreDecrementAssign expression" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.UnaryExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="expression" Type="System.Linq.Expressions.Expression" />
      </Parameters>
      <Docs>
        <param name="expression">
          <span data-ttu-id="fef91-3218">Объект <see cref="T:System.Linq.Expressions.Expression" />, к которому требуется применить операции.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fef91-3218">An <see cref="T:System.Linq.Expressions.Expression" /> to apply the operations on.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="fef91-3219">Создает объект <see cref="T:System.Linq.Expressions.UnaryExpression" />, который уменьшает выражение на 1 и присваивает результат исходному выражению.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fef91-3219">Creates a <see cref="T:System.Linq.Expressions.UnaryExpression" /> that decrements the expression by 1 and assigns the result back to the expression.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="fef91-3220">Объект <see cref="T:System.Linq.Expressions.UnaryExpression" />, представляющий результирующее выражение.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fef91-3220">A <see cref="T:System.Linq.Expressions.UnaryExpression" /> that represents the resultant expression.</span>
          </span>
        </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="PreDecrementAssign">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.UnaryExpression PreDecrementAssign (System.Linq.Expressions.Expression expression, System.Reflection.MethodInfo method);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.UnaryExpression PreDecrementAssign(class System.Linq.Expressions.Expression expression, class System.Reflection.MethodInfo method) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.PreDecrementAssign(System.Linq.Expressions.Expression,System.Reflection.MethodInfo)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Linq::Expressions::UnaryExpression ^ PreDecrementAssign(System::Linq::Expressions::Expression ^ expression, System::Reflection::MethodInfo ^ method);" />
      <MemberSignature Language="F#" Value="static member PreDecrementAssign : System.Linq.Expressions.Expression * System.Reflection.MethodInfo -&gt; System.Linq.Expressions.UnaryExpression" Usage="System.Linq.Expressions.Expression.PreDecrementAssign (expression, method)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.UnaryExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="expression" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="method" Type="System.Reflection.MethodInfo" />
      </Parameters>
      <Docs>
        <param name="expression">
          <span data-ttu-id="fef91-3221">Объект <see cref="T:System.Linq.Expressions.Expression" />, к которому требуется применить операции.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fef91-3221">An <see cref="T:System.Linq.Expressions.Expression" /> to apply the operations on.</span>
          </span>
        </param>
        <param name="method">
          <span data-ttu-id="fef91-3222">Объект <see cref="T:System.Reflection.MethodInfo" />, представляющий метод реализации.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fef91-3222">A <see cref="T:System.Reflection.MethodInfo" /> that represents the implementing method.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="fef91-3223">Создает объект <see cref="T:System.Linq.Expressions.UnaryExpression" />, который уменьшает выражение на 1 и присваивает результат исходному выражению.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fef91-3223">Creates a <see cref="T:System.Linq.Expressions.UnaryExpression" /> that decrements the expression by 1 and assigns the result back to the expression.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="fef91-3224">Объект <see cref="T:System.Linq.Expressions.UnaryExpression" />, представляющий результирующее выражение.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fef91-3224">A <see cref="T:System.Linq.Expressions.UnaryExpression" /> that represents the resultant expression.</span>
          </span>
        </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="PreIncrementAssign">
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="fef91-3225">Создает объект <see cref="T:System.Linq.Expressions.UnaryExpression" />, который увеличивает выражение на 1 и присваивает результат исходному выражению.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fef91-3225">Creates a <see cref="T:System.Linq.Expressions.UnaryExpression" /> that increments the expression by 1 and assigns the result back to the expression.</span>
          </span>
        </summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="PreIncrementAssign">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.UnaryExpression PreIncrementAssign (System.Linq.Expressions.Expression expression);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.UnaryExpression PreIncrementAssign(class System.Linq.Expressions.Expression expression) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.PreIncrementAssign(System.Linq.Expressions.Expression)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Linq::Expressions::UnaryExpression ^ PreIncrementAssign(System::Linq::Expressions::Expression ^ expression);" />
      <MemberSignature Language="F#" Value="static member PreIncrementAssign : System.Linq.Expressions.Expression -&gt; System.Linq.Expressions.UnaryExpression" Usage="System.Linq.Expressions.Expression.PreIncrementAssign expression" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.UnaryExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="expression" Type="System.Linq.Expressions.Expression" />
      </Parameters>
      <Docs>
        <param name="expression">
          <span data-ttu-id="fef91-3226">Объект <see cref="T:System.Linq.Expressions.Expression" />, к которому требуется применить операции.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fef91-3226">An <see cref="T:System.Linq.Expressions.Expression" /> to apply the operations on.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="fef91-3227">Создает объект <see cref="T:System.Linq.Expressions.UnaryExpression" />, который увеличивает выражение на 1 и присваивает результат исходному выражению.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fef91-3227">Creates a <see cref="T:System.Linq.Expressions.UnaryExpression" /> that increments the expression by 1 and assigns the result back to the expression.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="fef91-3228">Объект <see cref="T:System.Linq.Expressions.UnaryExpression" />, представляющий результирующее выражение.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fef91-3228">A <see cref="T:System.Linq.Expressions.UnaryExpression" /> that represents the resultant expression.</span>
          </span>
        </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="PreIncrementAssign">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.UnaryExpression PreIncrementAssign (System.Linq.Expressions.Expression expression, System.Reflection.MethodInfo method);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.UnaryExpression PreIncrementAssign(class System.Linq.Expressions.Expression expression, class System.Reflection.MethodInfo method) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.PreIncrementAssign(System.Linq.Expressions.Expression,System.Reflection.MethodInfo)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Linq::Expressions::UnaryExpression ^ PreIncrementAssign(System::Linq::Expressions::Expression ^ expression, System::Reflection::MethodInfo ^ method);" />
      <MemberSignature Language="F#" Value="static member PreIncrementAssign : System.Linq.Expressions.Expression * System.Reflection.MethodInfo -&gt; System.Linq.Expressions.UnaryExpression" Usage="System.Linq.Expressions.Expression.PreIncrementAssign (expression, method)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.UnaryExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="expression" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="method" Type="System.Reflection.MethodInfo" />
      </Parameters>
      <Docs>
        <param name="expression">
          <span data-ttu-id="fef91-3229">Объект <see cref="T:System.Linq.Expressions.Expression" />, к которому требуется применить операции.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fef91-3229">An <see cref="T:System.Linq.Expressions.Expression" /> to apply the operations on.</span>
          </span>
        </param>
        <param name="method">
          <span data-ttu-id="fef91-3230">Объект <see cref="T:System.Reflection.MethodInfo" />, представляющий метод реализации.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fef91-3230">A <see cref="T:System.Reflection.MethodInfo" /> that represents the implementing method.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="fef91-3231">Создает объект <see cref="T:System.Linq.Expressions.UnaryExpression" />, который увеличивает выражение на 1 и присваивает результат исходному выражению.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fef91-3231">Creates a <see cref="T:System.Linq.Expressions.UnaryExpression" /> that increments the expression by 1 and assigns the result back to the expression.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="fef91-3232">Объект <see cref="T:System.Linq.Expressions.UnaryExpression" />, представляющий результирующее выражение.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fef91-3232">A <see cref="T:System.Linq.Expressions.UnaryExpression" /> that represents the resultant expression.</span>
          </span>
        </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="Property">
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="fef91-3233">Создает <see cref="T:System.Linq.Expressions.MemberExpression" />, представляющий доступ к свойству.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fef91-3233">Creates a <see cref="T:System.Linq.Expressions.MemberExpression" /> that represents accessing a property.</span>
          </span>
        </summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Property">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.MemberExpression Property (System.Linq.Expressions.Expression expression, System.Reflection.MethodInfo propertyAccessor);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.MemberExpression Property(class System.Linq.Expressions.Expression expression, class System.Reflection.MethodInfo propertyAccessor) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.Property(System.Linq.Expressions.Expression,System.Reflection.MethodInfo)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Linq::Expressions::MemberExpression ^ Property(System::Linq::Expressions::Expression ^ expression, System::Reflection::MethodInfo ^ propertyAccessor);" />
      <MemberSignature Language="F#" Value="static member Property : System.Linq.Expressions.Expression * System.Reflection.MethodInfo -&gt; System.Linq.Expressions.MemberExpression" Usage="System.Linq.Expressions.Expression.Property (expression, propertyAccessor)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.MemberExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="expression" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="propertyAccessor" Type="System.Reflection.MethodInfo" />
      </Parameters>
      <Docs>
        <param name="expression">
          <span data-ttu-id="fef91-3234">Объект <see cref="T:System.Linq.Expressions.Expression" />, который следует задать в качестве значения свойства <see cref="P:System.Linq.Expressions.MemberExpression.Expression" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fef91-3234">An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.MemberExpression.Expression" /> property equal to.</span>
          </span>
          <span data-ttu-id="fef91-3235">Для статических свойств допускается значение NULL.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fef91-3235">This can be null for static properties.</span>
          </span>
        </param>
        <param name="propertyAccessor">
          <span data-ttu-id="fef91-3236">
            <see cref="T:System.Reflection.MethodInfo" />, представляющий метод доступа к свойству.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fef91-3236">The <see cref="T:System.Reflection.MethodInfo" /> that represents a property accessor method.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="fef91-3237">Создает <see cref="T:System.Linq.Expressions.MemberExpression" />, который представляет доступ к свойству с помощью метода доступа свойства.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fef91-3237">Creates a <see cref="T:System.Linq.Expressions.MemberExpression" /> that represents accessing a property by using a property accessor method.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="fef91-3238">Выражение <see cref="T:System.Linq.Expressions.MemberExpression" />, содержащее свойство <see cref="P:System.Linq.Expressions.Expression.NodeType" />, равное <see cref="F:System.Linq.Expressions.ExpressionType.MemberAccess" />, свойству <see cref="P:System.Linq.Expressions.MemberExpression.Expression" /> присвоено значение <paramref name="expression" />, а свойству <see cref="P:System.Linq.Expressions.MemberExpression.Member" /> присвоено значение <see cref="T:System.Reflection.PropertyInfo" />, представляющее свойство, доступ к которому осуществляется в <paramref name="propertyAccessor" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fef91-3238">A <see cref="T:System.Linq.Expressions.MemberExpression" /> that has the <see cref="P:System.Linq.Expressions.Expression.NodeType" /> property equal to <see cref="F:System.Linq.Expressions.ExpressionType.MemberAccess" />, the <see cref="P:System.Linq.Expressions.MemberExpression.Expression" /> property set to <paramref name="expression" /> and the <see cref="P:System.Linq.Expressions.MemberExpression.Member" /> property set to the <see cref="T:System.Reflection.PropertyInfo" /> that represents the property accessed in <paramref name="propertyAccessor" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="fef91-3239"><xref:System.Linq.Expressions.Expression.Type%2A> Результирующего <xref:System.Linq.Expressions.MemberExpression> равен <xref:System.Reflection.PropertyInfo.PropertyType%2A> свойство <xref:System.Linq.Expressions.MemberExpression.Member%2A>.</span><span class="sxs-lookup"><span data-stu-id="fef91-3239">The <xref:System.Linq.Expressions.Expression.Type%2A> property of the resulting <xref:System.Linq.Expressions.MemberExpression> is equal to the <xref:System.Reflection.PropertyInfo.PropertyType%2A> property of <xref:System.Linq.Expressions.MemberExpression.Member%2A>.</span></span>  
  
 <span data-ttu-id="fef91-3240">Если метод, представленный `propertyAccessor` — `static` (`Shared` в Visual Basic), `expression` может быть `null`.</span><span class="sxs-lookup"><span data-stu-id="fef91-3240">If the method represented by `propertyAccessor` is `static` (`Shared` in Visual Basic), `expression` can be `null`.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="fef91-3241">
            <paramref name="propertyAccessor" /> — <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fef91-3241">
              <paramref name="propertyAccessor" /> is <see langword="null" />.</span>
          </span>
          <span data-ttu-id="fef91-3242">-или-</span>
          <span class="sxs-lookup">
            <span data-stu-id="fef91-3242">-or-</span>
          </span>
          <span data-ttu-id="fef91-3243">Метод, который представляет <paramref name="propertyAccessor" />, не является <see langword="static" /> (<see langword="Shared" /> в Visual Basic), и <paramref name="expression" /> равно <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fef91-3243">The method that <paramref name="propertyAccessor" /> represents is not <see langword="static" /> (<see langword="Shared" /> in Visual Basic) and <paramref name="expression" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="fef91-3244">Тип <paramref name="expression" />.Type не назначается объявляемому типу метода, представленному параметром <paramref name="propertyAccessor" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fef91-3244">
              <paramref name="expression" />.Type is not assignable to the declaring type of the method represented by <paramref name="propertyAccessor" />.</span>
          </span>
          <span data-ttu-id="fef91-3245">-или-</span>
          <span class="sxs-lookup">
            <span data-stu-id="fef91-3245">-or-</span>
          </span>
          <span data-ttu-id="fef91-3246">Метод, который представляет <paramref name="propertyAccessor" />, не является методом доступа к свойству.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fef91-3246">The method that <paramref name="propertyAccessor" /> represents is not a property accessor method.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="Property">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.MemberExpression Property (System.Linq.Expressions.Expression expression, System.Reflection.PropertyInfo property);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.MemberExpression Property(class System.Linq.Expressions.Expression expression, class System.Reflection.PropertyInfo property) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.Property(System.Linq.Expressions.Expression,System.Reflection.PropertyInfo)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Linq::Expressions::MemberExpression ^ Property(System::Linq::Expressions::Expression ^ expression, System::Reflection::PropertyInfo ^ property);" />
      <MemberSignature Language="F#" Value="static member Property : System.Linq.Expressions.Expression * System.Reflection.PropertyInfo -&gt; System.Linq.Expressions.MemberExpression" Usage="System.Linq.Expressions.Expression.Property (expression, property)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.MemberExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="expression" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="property" Type="System.Reflection.PropertyInfo" />
      </Parameters>
      <Docs>
        <param name="expression">
          <span data-ttu-id="fef91-3247">Объект <see cref="T:System.Linq.Expressions.Expression" />, который следует задать в качестве значения свойства <see cref="P:System.Linq.Expressions.MemberExpression.Expression" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fef91-3247">An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.MemberExpression.Expression" /> property equal to.</span>
          </span>
          <span data-ttu-id="fef91-3248">Для статических свойств допускается значение NULL.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fef91-3248">This can be null for static properties.</span>
          </span>
        </param>
        <param name="property">
          <span data-ttu-id="fef91-3249">Объект <see cref="T:System.Reflection.PropertyInfo" />, который следует задать в качестве значения свойства <see cref="P:System.Linq.Expressions.MemberExpression.Member" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fef91-3249">The <see cref="T:System.Reflection.PropertyInfo" /> to set the <see cref="P:System.Linq.Expressions.MemberExpression.Member" /> property equal to.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="fef91-3250">Создает <see cref="T:System.Linq.Expressions.MemberExpression" />, представляющий доступ к свойству.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fef91-3250">Creates a <see cref="T:System.Linq.Expressions.MemberExpression" /> that represents accessing a property.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="fef91-3251">Выражение <see cref="T:System.Linq.Expressions.MemberExpression" /> со свойством<see cref="P:System.Linq.Expressions.Expression.NodeType" />, равным <see cref="F:System.Linq.Expressions.ExpressionType.MemberAccess" />, и свойствами <see cref="P:System.Linq.Expressions.MemberExpression.Expression" /> и <see cref="P:System.Linq.Expressions.MemberExpression.Member" />, для которых заданы указанные значения.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fef91-3251">A <see cref="T:System.Linq.Expressions.MemberExpression" /> that has the <see cref="P:System.Linq.Expressions.Expression.NodeType" /> property equal to <see cref="F:System.Linq.Expressions.ExpressionType.MemberAccess" /> and the <see cref="P:System.Linq.Expressions.MemberExpression.Expression" /> and <see cref="P:System.Linq.Expressions.MemberExpression.Member" /> properties set to the specified values.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="fef91-3252"><xref:System.Linq.Expressions.Expression.Type%2A> Результирующего <xref:System.Linq.Expressions.MemberExpression> равен <xref:System.Reflection.PropertyInfo.PropertyType%2A> свойство <xref:System.Linq.Expressions.MemberExpression.Member%2A>.</span><span class="sxs-lookup"><span data-stu-id="fef91-3252">The <xref:System.Linq.Expressions.Expression.Type%2A> property of the resulting <xref:System.Linq.Expressions.MemberExpression> is equal to the <xref:System.Reflection.PropertyInfo.PropertyType%2A> property of <xref:System.Linq.Expressions.MemberExpression.Member%2A>.</span></span>  
  
 <span data-ttu-id="fef91-3253">Если свойство, представленное `property` — `static` (`Shared` в Visual Basic), `expression` может быть `null`.</span><span class="sxs-lookup"><span data-stu-id="fef91-3253">If the property represented by `property` is `static` (`Shared` in Visual Basic), `expression` can be `null`.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="fef91-3254">
            <paramref name="property" /> — <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fef91-3254">
              <paramref name="property" /> is <see langword="null" />.</span>
          </span>
          <span data-ttu-id="fef91-3255">-или-</span>
          <span class="sxs-lookup">
            <span data-stu-id="fef91-3255">-or-</span>
          </span>
          <span data-ttu-id="fef91-3256">Свойство, которое представляет <paramref name="property" />, не является <see langword="static" /> (<see langword="Shared" /> в Visual Basic), и <paramref name="expression" /> равно <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fef91-3256">The property that <paramref name="property" /> represents is not <see langword="static" /> (<see langword="Shared" /> in Visual Basic) and <paramref name="expression" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="fef91-3257">Тип <paramref name="expression" />.Type не может быть назначен объявляемому типу, который представляет <paramref name="property" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fef91-3257">
              <paramref name="expression" />.Type is not assignable to the declaring type of the property that <paramref name="property" /> represents.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="Property">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.MemberExpression Property (System.Linq.Expressions.Expression expression, string propertyName);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.MemberExpression Property(class System.Linq.Expressions.Expression expression, string propertyName) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.Property(System.Linq.Expressions.Expression,System.String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Linq::Expressions::MemberExpression ^ Property(System::Linq::Expressions::Expression ^ expression, System::String ^ propertyName);" />
      <MemberSignature Language="F#" Value="static member Property : System.Linq.Expressions.Expression * string -&gt; System.Linq.Expressions.MemberExpression" Usage="System.Linq.Expressions.Expression.Property (expression, propertyName)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.MemberExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="expression" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="propertyName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="expression">
          <span data-ttu-id="fef91-3258">
            <see cref="T:System.Linq.Expressions.Expression" />, где <see cref="P:System.Linq.Expressions.Expression.Type" /> содержит свойство с именем, заданным параметром <c>propertyName</c>.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fef91-3258">An <see cref="T:System.Linq.Expressions.Expression" /> whose <see cref="P:System.Linq.Expressions.Expression.Type" /> contains a property named <c>propertyName</c>.</span>
          </span>
          <span data-ttu-id="fef91-3259">Может принимать значение <see langword="null" /> для статических свойств.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fef91-3259">This can be <see langword="null" /> for static properties.</span>
          </span>
        </param>
        <param name="propertyName">
          <span data-ttu-id="fef91-3260">Имя свойства для доступа.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fef91-3260">The name of a property to be accessed.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="fef91-3261">Создает <see cref="T:System.Linq.Expressions.MemberExpression" />, представляющий доступ к свойству.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fef91-3261">Creates a <see cref="T:System.Linq.Expressions.MemberExpression" /> that represents accessing a property.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="fef91-3262">Выражение <see cref="T:System.Linq.Expressions.MemberExpression" />, содержащее свойство <see cref="P:System.Linq.Expressions.Expression.NodeType" />, равное <see cref="F:System.Linq.Expressions.ExpressionType.MemberAccess" />, свойству <see cref="P:System.Linq.Expressions.MemberExpression.Expression" /> присвоено значение <paramref name="expression" />, а свойству <see cref="P:System.Linq.Expressions.MemberExpression.Member" /> присвоено значение <see cref="T:System.Reflection.PropertyInfo" />, представляющее свойство, обозначенное с помощью параметра <paramref name="propertyName" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fef91-3262">A <see cref="T:System.Linq.Expressions.MemberExpression" /> that has the <see cref="P:System.Linq.Expressions.Expression.NodeType" /> property equal to <see cref="F:System.Linq.Expressions.ExpressionType.MemberAccess" />, the <see cref="P:System.Linq.Expressions.MemberExpression.Expression" /> property set to <paramref name="expression" />, and the <see cref="P:System.Linq.Expressions.MemberExpression.Member" /> property set to the <see cref="T:System.Reflection.PropertyInfo" /> that represents the property denoted by <paramref name="propertyName" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="fef91-3263"><xref:System.Linq.Expressions.Expression.Type%2A> Результирующего <xref:System.Linq.Expressions.MemberExpression> равен <xref:System.Reflection.PropertyInfo.PropertyType%2A> свойство <xref:System.Reflection.PropertyInfo> , представляющий свойство, обозначенное с помощью `propertyName`.</span><span class="sxs-lookup"><span data-stu-id="fef91-3263">The <xref:System.Linq.Expressions.Expression.Type%2A> property of the resulting <xref:System.Linq.Expressions.MemberExpression> is equal to the <xref:System.Reflection.PropertyInfo.PropertyType%2A> property of the <xref:System.Reflection.PropertyInfo> that represents the property denoted by `propertyName`.</span></span>  
  
 <span data-ttu-id="fef91-3264">Этот метод осуществляет `expression`. Тип и его базовых типов, для свойства с именем `propertyName`.</span><span class="sxs-lookup"><span data-stu-id="fef91-3264">This method searches `expression`.Type and its base types for a property that has the name `propertyName`.</span></span> <span data-ttu-id="fef91-3265">Открытые свойства, отдается предпочтение над свойствами, не являющиеся открытыми.</span><span class="sxs-lookup"><span data-stu-id="fef91-3265">Public properties are given preference over non-public properties.</span></span> <span data-ttu-id="fef91-3266">Если найден соответствующий оператор property, этот метод передает `expression` и <xref:System.Reflection.PropertyInfo> , представляющий свойства для <xref:System.Linq.Expressions.Expression.Property%2A>.</span><span class="sxs-lookup"><span data-stu-id="fef91-3266">If a matching property is found, this method passes `expression` and the <xref:System.Reflection.PropertyInfo> that represents that property to <xref:System.Linq.Expressions.Expression.Property%2A>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="fef91-3267">В следующем примере показано, как создать выражение, представляющее доступ к свойству.</span><span class="sxs-lookup"><span data-stu-id="fef91-3267">The following example shows how to create an expression that represents accessing a property.</span></span>  
  
 [!code-csharp[System.Linq.Expressions.ExpressionDev10#38](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.linq.expressions.expressiondev10/cs/program.cs#38)]
 [!code-vb[System.Linq.Expressions.ExpressionDev10#38](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.linq.expressions.expressiondev10/vb/module1.vb#38)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="fef91-3268">Значение параметра <paramref name="expression" /> или <paramref name="propertyName" /> — <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fef91-3268">
              <paramref name="expression" /> or <paramref name="propertyName" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="fef91-3269">Не определено свойство с именем <paramref name="propertyName" /> для типа <paramref name="expression" />.Type или его базовых типов.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fef91-3269">No property named <paramref name="propertyName" /> is defined in <paramref name="expression" />.Type or its base types.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="Property">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.IndexExpression Property (System.Linq.Expressions.Expression instance, System.Reflection.PropertyInfo indexer, System.Collections.Generic.IEnumerable&lt;System.Linq.Expressions.Expression&gt; arguments);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.IndexExpression Property(class System.Linq.Expressions.Expression instance, class System.Reflection.PropertyInfo indexer, class System.Collections.Generic.IEnumerable`1&lt;class System.Linq.Expressions.Expression&gt; arguments) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.Property(System.Linq.Expressions.Expression,System.Reflection.PropertyInfo,System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression})" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Property (instance As Expression, indexer As PropertyInfo, arguments As IEnumerable(Of Expression)) As IndexExpression" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Linq::Expressions::IndexExpression ^ Property(System::Linq::Expressions::Expression ^ instance, System::Reflection::PropertyInfo ^ indexer, System::Collections::Generic::IEnumerable&lt;System::Linq::Expressions::Expression ^&gt; ^ arguments);" />
      <MemberSignature Language="F#" Value="static member Property : System.Linq.Expressions.Expression * System.Reflection.PropertyInfo * seq&lt;System.Linq.Expressions.Expression&gt; -&gt; System.Linq.Expressions.IndexExpression" Usage="System.Linq.Expressions.Expression.Property (instance, indexer, arguments)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.IndexExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="instance" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="indexer" Type="System.Reflection.PropertyInfo" />
        <Parameter Name="arguments" Type="System.Collections.Generic.IEnumerable&lt;System.Linq.Expressions.Expression&gt;" />
      </Parameters>
      <Docs>
        <param name="instance">
          <span data-ttu-id="fef91-3270">Объект, которому принадлежит это свойство.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fef91-3270">The object to which the property belongs.</span>
          </span>
          <span data-ttu-id="fef91-3271">Если свойство статическое или общее, оно должно иметь значение NULL.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fef91-3271">If the property is static/shared, it must be null.</span>
          </span>
        </param>
        <param name="indexer">
          <span data-ttu-id="fef91-3272">Объект <see cref="T:System.Reflection.PropertyInfo" />, представляющий индексируемое свойство.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fef91-3272">The <see cref="T:System.Reflection.PropertyInfo" /> that represents the property to index.</span>
          </span>
        </param>
        <param name="arguments">
          <span data-ttu-id="fef91-3273">Интерфейс <see cref="T:System.Collections.Generic.IEnumerable`1" /> объектов <see cref="T:System.Linq.Expressions.Expression" />, которые используются для индексации свойства.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fef91-3273">An <see cref="T:System.Collections.Generic.IEnumerable`1" /> of <see cref="T:System.Linq.Expressions.Expression" /> objects that are used to index the property.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="fef91-3274">Создает выражение <see cref="T:System.Linq.Expressions.IndexExpression" />, представляющее доступ к индексированному свойству.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fef91-3274">Creates an <see cref="T:System.Linq.Expressions.IndexExpression" /> representing the access to an indexed property.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="fef91-3275">Созданный <see cref="T:System.Linq.Expressions.IndexExpression" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fef91-3275">The created <see cref="T:System.Linq.Expressions.IndexExpression" />.</span>
          </span>
        </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Property">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.IndexExpression Property (System.Linq.Expressions.Expression instance, System.Reflection.PropertyInfo indexer, params System.Linq.Expressions.Expression[] arguments);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.IndexExpression Property(class System.Linq.Expressions.Expression instance, class System.Reflection.PropertyInfo indexer, class System.Linq.Expressions.Expression[] arguments) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.Property(System.Linq.Expressions.Expression,System.Reflection.PropertyInfo,System.Linq.Expressions.Expression[])" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Property (instance As Expression, indexer As PropertyInfo, ParamArray arguments As Expression()) As IndexExpression" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Linq::Expressions::IndexExpression ^ Property(System::Linq::Expressions::Expression ^ instance, System::Reflection::PropertyInfo ^ indexer, ... cli::array &lt;System::Linq::Expressions::Expression ^&gt; ^ arguments);" />
      <MemberSignature Language="F#" Value="static member Property : System.Linq.Expressions.Expression * System.Reflection.PropertyInfo * System.Linq.Expressions.Expression[] -&gt; System.Linq.Expressions.IndexExpression" Usage="System.Linq.Expressions.Expression.Property (instance, indexer, arguments)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.IndexExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="instance" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="indexer" Type="System.Reflection.PropertyInfo" />
        <Parameter Name="arguments" Type="System.Linq.Expressions.Expression[]">
          <Attributes>
            <Attribute>
              <AttributeName>System.ParamArray</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="instance">
          <span data-ttu-id="fef91-3276">Объект, которому принадлежит это свойство.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fef91-3276">The object to which the property belongs.</span>
          </span>
          <span data-ttu-id="fef91-3277">Если свойство статическое или общее, оно должно иметь значение NULL.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fef91-3277">If the property is static/shared, it must be null.</span>
          </span>
        </param>
        <param name="indexer">
          <span data-ttu-id="fef91-3278">Объект <see cref="T:System.Reflection.PropertyInfo" />, представляющий индексируемое свойство.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fef91-3278">The <see cref="T:System.Reflection.PropertyInfo" /> that represents the property to index.</span>
          </span>
        </param>
        <param name="arguments">
          <span data-ttu-id="fef91-3279">Массив объектов <see cref="T:System.Linq.Expressions.Expression" />, используемых для индексации свойства.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fef91-3279">An array of <see cref="T:System.Linq.Expressions.Expression" /> objects that are used to index the property.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="fef91-3280">Создает выражение <see cref="T:System.Linq.Expressions.IndexExpression" />, представляющее доступ к индексированному свойству.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fef91-3280">Creates an <see cref="T:System.Linq.Expressions.IndexExpression" /> representing the access to an indexed property.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="fef91-3281">Созданный <see cref="T:System.Linq.Expressions.IndexExpression" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fef91-3281">The created <see cref="T:System.Linq.Expressions.IndexExpression" />.</span>
          </span>
        </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Property">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.IndexExpression Property (System.Linq.Expressions.Expression instance, string propertyName, params System.Linq.Expressions.Expression[] arguments);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.IndexExpression Property(class System.Linq.Expressions.Expression instance, string propertyName, class System.Linq.Expressions.Expression[] arguments) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.Property(System.Linq.Expressions.Expression,System.String,System.Linq.Expressions.Expression[])" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Property (instance As Expression, propertyName As String, ParamArray arguments As Expression()) As IndexExpression" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Linq::Expressions::IndexExpression ^ Property(System::Linq::Expressions::Expression ^ instance, System::String ^ propertyName, ... cli::array &lt;System::Linq::Expressions::Expression ^&gt; ^ arguments);" />
      <MemberSignature Language="F#" Value="static member Property : System.Linq.Expressions.Expression * string * System.Linq.Expressions.Expression[] -&gt; System.Linq.Expressions.IndexExpression" Usage="System.Linq.Expressions.Expression.Property (instance, propertyName, arguments)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.IndexExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="instance" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="propertyName" Type="System.String" />
        <Parameter Name="arguments" Type="System.Linq.Expressions.Expression[]">
          <Attributes>
            <Attribute>
              <AttributeName>System.ParamArray</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="instance">
          <span data-ttu-id="fef91-3282">Объект, которому принадлежит это свойство.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fef91-3282">The object to which the property belongs.</span>
          </span>
          <span data-ttu-id="fef91-3283">Если свойство статическое или общее, оно должно иметь значение NULL.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fef91-3283">If the property is static/shared, it must be null.</span>
          </span>
        </param>
        <param name="propertyName">
          <span data-ttu-id="fef91-3284">Имя индексатора.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fef91-3284">The name of the indexer.</span>
          </span>
        </param>
        <param name="arguments">
          <span data-ttu-id="fef91-3285">Массив объектов <see cref="T:System.Linq.Expressions.Expression" />, используемых для индексации свойства.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fef91-3285">An array of <see cref="T:System.Linq.Expressions.Expression" /> objects that are used to index the property.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="fef91-3286">Создает выражение <see cref="T:System.Linq.Expressions.IndexExpression" />, представляющее доступ к индексированному свойству.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fef91-3286">Creates an <see cref="T:System.Linq.Expressions.IndexExpression" /> representing the access to an indexed property.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="fef91-3287">Созданный <see cref="T:System.Linq.Expressions.IndexExpression" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fef91-3287">The created <see cref="T:System.Linq.Expressions.IndexExpression" />.</span>
          </span>
        </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Property">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.MemberExpression Property (System.Linq.Expressions.Expression expression, Type type, string propertyName);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.MemberExpression Property(class System.Linq.Expressions.Expression expression, class System.Type type, string propertyName) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.Property(System.Linq.Expressions.Expression,System.Type,System.String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Linq::Expressions::MemberExpression ^ Property(System::Linq::Expressions::Expression ^ expression, Type ^ type, System::String ^ propertyName);" />
      <MemberSignature Language="F#" Value="static member Property : System.Linq.Expressions.Expression * Type * string -&gt; System.Linq.Expressions.MemberExpression" Usage="System.Linq.Expressions.Expression.Property (expression, type, propertyName)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.MemberExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="expression" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="type" Type="System.Type" />
        <Parameter Name="propertyName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="expression">
          <span data-ttu-id="fef91-3288">Объект, в котором содержится свойство.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fef91-3288">The containing object of the property.</span>
          </span>
          <span data-ttu-id="fef91-3289">Для статических свойств допускается значение NULL.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fef91-3289">This can be null for static properties.</span>
          </span>
        </param>
        <param name="type">
          <span data-ttu-id="fef91-3290">
            <see cref="P:System.Linq.Expressions.Expression.Type" />, содержащий свойство.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fef91-3290">The <see cref="P:System.Linq.Expressions.Expression.Type" /> that contains the property.</span>
          </span>
        </param>
        <param name="propertyName">
          <span data-ttu-id="fef91-3291">Свойство для доступа.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fef91-3291">The property to be accessed.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="fef91-3292">Создает выражение <see cref="T:System.Linq.Expressions.MemberExpression" />, представляющее доступ к свойству.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fef91-3292">Creates a <see cref="T:System.Linq.Expressions.MemberExpression" /> accessing a property.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="fef91-3293">Созданный <see cref="T:System.Linq.Expressions.MemberExpression" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fef91-3293">The created <see cref="T:System.Linq.Expressions.MemberExpression" />.</span>
          </span>
        </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="PropertyOrField">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.MemberExpression PropertyOrField (System.Linq.Expressions.Expression expression, string propertyOrFieldName);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.MemberExpression PropertyOrField(class System.Linq.Expressions.Expression expression, string propertyOrFieldName) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.PropertyOrField(System.Linq.Expressions.Expression,System.String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Linq::Expressions::MemberExpression ^ PropertyOrField(System::Linq::Expressions::Expression ^ expression, System::String ^ propertyOrFieldName);" />
      <MemberSignature Language="F#" Value="static member PropertyOrField : System.Linq.Expressions.Expression * string -&gt; System.Linq.Expressions.MemberExpression" Usage="System.Linq.Expressions.Expression.PropertyOrField (expression, propertyOrFieldName)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.MemberExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="expression" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="propertyOrFieldName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="expression">
          <span data-ttu-id="fef91-3294">
            <see cref="T:System.Linq.Expressions.Expression" />, где <see cref="P:System.Linq.Expressions.Expression.Type" /> содержит свойство или поле с именем, заданным параметром <c>propertyOrFieldName</c>.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fef91-3294">An <see cref="T:System.Linq.Expressions.Expression" /> whose <see cref="P:System.Linq.Expressions.Expression.Type" /> contains a property or field named <c>propertyOrFieldName</c>.</span>
          </span>
          <span data-ttu-id="fef91-3295">Для статических членов допускается значение NULL.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fef91-3295">This can be null for static members.</span>
          </span>
        </param>
        <param name="propertyOrFieldName">
          <span data-ttu-id="fef91-3296">Имя свойства или поля для доступа.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fef91-3296">The name of a property or field to be accessed.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="fef91-3297">Создает объект <see cref="T:System.Linq.Expressions.MemberExpression" />, представляющий доступ к свойству или полю.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fef91-3297">Creates a <see cref="T:System.Linq.Expressions.MemberExpression" /> that represents accessing a property or field.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="fef91-3298">Выражение <see cref="T:System.Linq.Expressions.MemberExpression" />, содержащее свойство <see cref="P:System.Linq.Expressions.Expression.NodeType" />, равное <see cref="F:System.Linq.Expressions.ExpressionType.MemberAccess" />, свойству <see cref="P:System.Linq.Expressions.MemberExpression.Expression" /> присвоено значение <paramref name="expression" />, а свойству <see cref="P:System.Linq.Expressions.MemberExpression.Member" /> присвоены значения <see cref="T:System.Reflection.PropertyInfo" /> или <see cref="T:System.Reflection.FieldInfo" />, представляющие свойство или поле, обозначенное с помощью параметра <paramref name="propertyOrFieldName" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fef91-3298">A <see cref="T:System.Linq.Expressions.MemberExpression" /> that has the <see cref="P:System.Linq.Expressions.Expression.NodeType" /> property equal to <see cref="F:System.Linq.Expressions.ExpressionType.MemberAccess" />, the <see cref="P:System.Linq.Expressions.MemberExpression.Expression" /> property set to <paramref name="expression" />, and the <see cref="P:System.Linq.Expressions.MemberExpression.Member" /> property set to the <see cref="T:System.Reflection.PropertyInfo" /> or <see cref="T:System.Reflection.FieldInfo" /> that represents the property or field denoted by <paramref name="propertyOrFieldName" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="fef91-3299"><xref:System.Linq.Expressions.Expression.Type%2A> Результирующего <xref:System.Linq.Expressions.MemberExpression> равен <xref:System.Reflection.PropertyInfo.PropertyType%2A> или <xref:System.Reflection.FieldInfo.FieldType%2A> свойства <xref:System.Reflection.PropertyInfo> или <xref:System.Reflection.FieldInfo>, соответственно, который представляет свойство или поле, обозначенное с помощью `propertyOrFieldName`.</span><span class="sxs-lookup"><span data-stu-id="fef91-3299">The <xref:System.Linq.Expressions.Expression.Type%2A> property of the resulting <xref:System.Linq.Expressions.MemberExpression> is equal to the <xref:System.Reflection.PropertyInfo.PropertyType%2A> or <xref:System.Reflection.FieldInfo.FieldType%2A> properties of the <xref:System.Reflection.PropertyInfo> or <xref:System.Reflection.FieldInfo>, respectively, that represents the property or field denoted by `propertyOrFieldName`.</span></span>  
  
 <span data-ttu-id="fef91-3300">Этот метод осуществляет `expression`. Тип и его базовых типов, для свойства или поля с именем `propertyOrFieldName`.</span><span class="sxs-lookup"><span data-stu-id="fef91-3300">This method searches `expression`.Type and its base types for a property or field that has the name `propertyOrFieldName`.</span></span> <span data-ttu-id="fef91-3301">Открытые свойства и поля, отдается предпочтение по не являющиеся открытыми свойствами и полями.</span><span class="sxs-lookup"><span data-stu-id="fef91-3301">Public properties and fields are given preference over non-public properties and fields.</span></span> <span data-ttu-id="fef91-3302">Кроме того свойства, отдается предпочтение по полям.</span><span class="sxs-lookup"><span data-stu-id="fef91-3302">Also, properties are given preference over fields.</span></span> <span data-ttu-id="fef91-3303">Если найден соответствующий свойство или поле, этот метод передает `expression` и <xref:System.Reflection.PropertyInfo> или <xref:System.Reflection.FieldInfo> , представляющий это свойство или поле для <xref:System.Linq.Expressions.Expression.Property%2A> или <xref:System.Linq.Expressions.Expression.Field%2A>, соответственно.</span><span class="sxs-lookup"><span data-stu-id="fef91-3303">If a matching property or field is found, this method passes `expression` and the <xref:System.Reflection.PropertyInfo> or <xref:System.Reflection.FieldInfo> that represents that property or field to <xref:System.Linq.Expressions.Expression.Property%2A> or <xref:System.Linq.Expressions.Expression.Field%2A>, respectively.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="fef91-3304">В следующем примере показано, как создать выражение, представляющее доступ к свойству или полю.</span><span class="sxs-lookup"><span data-stu-id="fef91-3304">The following example shows how to create an expression that represents accessing a property or field.</span></span>  
  
 [!code-csharp[System.Linq.Expressions.ExpressionDev10#39](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.linq.expressions.expressiondev10/cs/program.cs#39)]
 [!code-vb[System.Linq.Expressions.ExpressionDev10#39](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.linq.expressions.expressiondev10/vb/module1.vb#39)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="fef91-3305">Значение параметра <paramref name="expression" /> или <paramref name="propertyOrFieldName" /> — <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fef91-3305">
              <paramref name="expression" /> or <paramref name="propertyOrFieldName" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="fef91-3306">Не определено свойство или поле с именем <paramref name="propertyOrFieldName" /> для типа <paramref name="expression" />.Type или его базовых типов.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fef91-3306">No property or field named <paramref name="propertyOrFieldName" /> is defined in <paramref name="expression" />.Type or its base types.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="Quote">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.UnaryExpression Quote (System.Linq.Expressions.Expression expression);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.UnaryExpression Quote(class System.Linq.Expressions.Expression expression) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.Quote(System.Linq.Expressions.Expression)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Linq::Expressions::UnaryExpression ^ Quote(System::Linq::Expressions::Expression ^ expression);" />
      <MemberSignature Language="F#" Value="static member Quote : System.Linq.Expressions.Expression -&gt; System.Linq.Expressions.UnaryExpression" Usage="System.Linq.Expressions.Expression.Quote expression" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.UnaryExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="expression" Type="System.Linq.Expressions.Expression" />
      </Parameters>
      <Docs>
        <param name="expression">
          <span data-ttu-id="fef91-3307">Объект <see cref="T:System.Linq.Expressions.Expression" />, который следует задать в качестве значения свойства <see cref="P:System.Linq.Expressions.UnaryExpression.Operand" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fef91-3307">An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.UnaryExpression.Operand" /> property equal to.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="fef91-3308">Создает объект <see cref="T:System.Linq.Expressions.UnaryExpression" />, представляющий выражение, которое содержит постоянное значение типа <see cref="T:System.Linq.Expressions.Expression" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fef91-3308">Creates a <see cref="T:System.Linq.Expressions.UnaryExpression" /> that represents an expression that has a constant value of type <see cref="T:System.Linq.Expressions.Expression" />.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="fef91-3309">Выражение <see cref="T:System.Linq.Expressions.UnaryExpression" /> со свойством <see cref="P:System.Linq.Expressions.Expression.NodeType" />, равным <see cref="F:System.Linq.Expressions.ExpressionType.Quote" />, и свойством <see cref="P:System.Linq.Expressions.UnaryExpression.Operand" />, для которого задано указанное значение.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fef91-3309">A <see cref="T:System.Linq.Expressions.UnaryExpression" /> that has the <see cref="P:System.Linq.Expressions.Expression.NodeType" /> property equal to <see cref="F:System.Linq.Expressions.ExpressionType.Quote" /> and the <see cref="P:System.Linq.Expressions.UnaryExpression.Operand" /> property set to the specified value.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="fef91-3310"><xref:System.Linq.Expressions.Expression.Type%2A> Результирующего <xref:System.Linq.Expressions.UnaryExpression> представляет сконструированный тип <xref:System.Linq.Expressions.Expression%601>, где аргумент типа — это тип, представленный `expression`. Тип.</span><span class="sxs-lookup"><span data-stu-id="fef91-3310">The <xref:System.Linq.Expressions.Expression.Type%2A> property of the resulting <xref:System.Linq.Expressions.UnaryExpression> represents the constructed type <xref:System.Linq.Expressions.Expression%601>, where the type argument is the type represented by `expression`.Type.</span></span> <span data-ttu-id="fef91-3311">Значение свойства <xref:System.Linq.Expressions.UnaryExpression.Method%2A> — `null`.</span><span class="sxs-lookup"><span data-stu-id="fef91-3311">The <xref:System.Linq.Expressions.UnaryExpression.Method%2A> property is `null`.</span></span> <span data-ttu-id="fef91-3312">Оба <xref:System.Linq.Expressions.UnaryExpression.IsLifted%2A> и <xref:System.Linq.Expressions.UnaryExpression.IsLiftedToNull%2A> являются `false`.</span><span class="sxs-lookup"><span data-stu-id="fef91-3312">Both <xref:System.Linq.Expressions.UnaryExpression.IsLifted%2A> and <xref:System.Linq.Expressions.UnaryExpression.IsLiftedToNull%2A> are `false`.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="fef91-3313">
            <paramref name="expression" /> — <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fef91-3313">
              <paramref name="expression" /> is <see langword="null" />.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="Reduce">
      <MemberSignature Language="C#" Value="public virtual System.Linq.Expressions.Expression Reduce ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Linq.Expressions.Expression Reduce() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.Reduce" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function Reduce () As Expression" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::Linq::Expressions::Expression ^ Reduce();" />
      <MemberSignature Language="F#" Value="abstract member Reduce : unit -&gt; System.Linq.Expressions.Expression&#xA;override this.Reduce : unit -&gt; System.Linq.Expressions.Expression" Usage="expression.Reduce " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.Expression</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="fef91-3314">Сокращает данный узел до более простого выражения.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fef91-3314">Reduces this node to a simpler expression.</span>
          </span>
          <span data-ttu-id="fef91-3315">Если CanReduce возвращает значение true, данный метод должен вернуть допустимое выражение.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fef91-3315">If CanReduce returns true, this should return a valid expression.</span>
          </span>
          <span data-ttu-id="fef91-3316">Данный метод может вернуть другой узел, который нужно будет уменьшать еще раз.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fef91-3316">This method can return another node which itself must be reduced.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="fef91-3317">Сокращенное выражение.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fef91-3317">The reduced expression.</span>
          </span>
        </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ReduceAndCheck">
      <MemberSignature Language="C#" Value="public System.Linq.Expressions.Expression ReduceAndCheck ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Linq.Expressions.Expression ReduceAndCheck() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.ReduceAndCheck" />
      <MemberSignature Language="VB.NET" Value="Public Function ReduceAndCheck () As Expression" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Linq::Expressions::Expression ^ ReduceAndCheck();" />
      <MemberSignature Language="F#" Value="member this.ReduceAndCheck : unit -&gt; System.Linq.Expressions.Expression" Usage="expression.ReduceAndCheck " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.Expression</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="fef91-3318">Преобразует данный узел в более простое выражение.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fef91-3318">Reduces this node to a simpler expression.</span>
          </span>
          <span data-ttu-id="fef91-3319">Если CanReduce возвращает значение true, данный метод должен вернуть допустимое выражение.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fef91-3319">If CanReduce returns true, this should return a valid expression.</span>
          </span>
          <span data-ttu-id="fef91-3320">Данный метод может вернуть другой узел, который нужно будет уменьшать еще раз.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fef91-3320">This method can return another node which itself must be reduced.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="fef91-3321">Сокращенное выражение.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fef91-3321">The reduced expression.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="fef91-3322">В отличие от Reduce этот метод проверяет, что сокращенный узел удовлетворяет определенным инвариантов.</span><span class="sxs-lookup"><span data-stu-id="fef91-3322">Unlike Reduce, this method checks that the reduced node satisfies certain invariants.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ReduceExtensions">
      <MemberSignature Language="C#" Value="public System.Linq.Expressions.Expression ReduceExtensions ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Linq.Expressions.Expression ReduceExtensions() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.ReduceExtensions" />
      <MemberSignature Language="VB.NET" Value="Public Function ReduceExtensions () As Expression" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Linq::Expressions::Expression ^ ReduceExtensions();" />
      <MemberSignature Language="F#" Value="member this.ReduceExtensions : unit -&gt; System.Linq.Expressions.Expression" Usage="expression.ReduceExtensions " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.Expression</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="fef91-3323">Сокращает выражение до известного типа узла (не являющегося узлом Extension) или возвращает выражение, если оно имеет известный тип.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fef91-3323">Reduces the expression to a known node type (that is not an Extension node) or just returns the expression if it is already a known type.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="fef91-3324">Сокращенное выражение.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fef91-3324">The reduced expression.</span>
          </span>
        </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ReferenceEqual">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.BinaryExpression ReferenceEqual (System.Linq.Expressions.Expression left, System.Linq.Expressions.Expression right);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.BinaryExpression ReferenceEqual(class System.Linq.Expressions.Expression left, class System.Linq.Expressions.Expression right) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.ReferenceEqual(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function ReferenceEqual (left As Expression, right As Expression) As BinaryExpression" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Linq::Expressions::BinaryExpression ^ ReferenceEqual(System::Linq::Expressions::Expression ^ left, System::Linq::Expressions::Expression ^ right);" />
      <MemberSignature Language="F#" Value="static member ReferenceEqual : System.Linq.Expressions.Expression * System.Linq.Expressions.Expression -&gt; System.Linq.Expressions.BinaryExpression" Usage="System.Linq.Expressions.Expression.ReferenceEqual (left, right)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.BinaryExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="left" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="right" Type="System.Linq.Expressions.Expression" />
      </Parameters>
      <Docs>
        <param name="left">
          <span data-ttu-id="fef91-3325">Объект <see cref="T:System.Linq.Expressions.Expression" />, который следует задать в качестве значения свойства <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fef91-3325">An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> property equal to.</span>
          </span>
        </param>
        <param name="right">
          <span data-ttu-id="fef91-3326">Объект <see cref="T:System.Linq.Expressions.Expression" />, который следует задать в качестве значения свойства <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fef91-3326">An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> property equal to.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="fef91-3327">Создает выражение <see cref="T:System.Linq.Expressions.BinaryExpression" />, представляющее проверку равенства ссылок.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fef91-3327">Creates a <see cref="T:System.Linq.Expressions.BinaryExpression" /> that represents a reference equality comparison.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="fef91-3328">Выражение <see cref="T:System.Linq.Expressions.BinaryExpression" /> со свойством<see cref="P:System.Linq.Expressions.Expression.NodeType" />, равным <see cref="F:System.Linq.Expressions.ExpressionType.Equal" />, и свойствами <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> и <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />, для которых заданы указанные значения.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fef91-3328">A <see cref="T:System.Linq.Expressions.BinaryExpression" /> that has the <see cref="P:System.Linq.Expressions.Expression.NodeType" /> property equal to <see cref="F:System.Linq.Expressions.ExpressionType.Equal" /> and the <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> and <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> properties set to the specified values.</span>
          </span>
        </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ReferenceNotEqual">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.BinaryExpression ReferenceNotEqual (System.Linq.Expressions.Expression left, System.Linq.Expressions.Expression right);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.BinaryExpression ReferenceNotEqual(class System.Linq.Expressions.Expression left, class System.Linq.Expressions.Expression right) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.ReferenceNotEqual(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function ReferenceNotEqual (left As Expression, right As Expression) As BinaryExpression" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Linq::Expressions::BinaryExpression ^ ReferenceNotEqual(System::Linq::Expressions::Expression ^ left, System::Linq::Expressions::Expression ^ right);" />
      <MemberSignature Language="F#" Value="static member ReferenceNotEqual : System.Linq.Expressions.Expression * System.Linq.Expressions.Expression -&gt; System.Linq.Expressions.BinaryExpression" Usage="System.Linq.Expressions.Expression.ReferenceNotEqual (left, right)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.BinaryExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="left" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="right" Type="System.Linq.Expressions.Expression" />
      </Parameters>
      <Docs>
        <param name="left">
          <span data-ttu-id="fef91-3329">Объект <see cref="T:System.Linq.Expressions.Expression" />, который следует задать в качестве значения свойства <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fef91-3329">An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> property equal to.</span>
          </span>
        </param>
        <param name="right">
          <span data-ttu-id="fef91-3330">Объект <see cref="T:System.Linq.Expressions.Expression" />, который следует задать в качестве значения свойства <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fef91-3330">An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> property equal to.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="fef91-3331">Создает выражение <see cref="T:System.Linq.Expressions.BinaryExpression" />, представляющее проверку неравенства ссылок.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fef91-3331">Creates a <see cref="T:System.Linq.Expressions.BinaryExpression" /> that represents a reference inequality comparison.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="fef91-3332">Выражение <see cref="T:System.Linq.Expressions.BinaryExpression" /> со свойством<see cref="P:System.Linq.Expressions.Expression.NodeType" />, равным <see cref="F:System.Linq.Expressions.ExpressionType.NotEqual" />, и свойствами <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> и <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />, для которых заданы указанные значения.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fef91-3332">A <see cref="T:System.Linq.Expressions.BinaryExpression" /> that has the <see cref="P:System.Linq.Expressions.Expression.NodeType" /> property equal to <see cref="F:System.Linq.Expressions.ExpressionType.NotEqual" /> and the <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> and <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> properties set to the specified values.</span>
          </span>
        </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="Rethrow">
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="fef91-3333">Создает объект <see cref="T:System.Linq.Expressions.UnaryExpression" />, представляющий повторное создание исключения.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fef91-3333">Creates a <see cref="T:System.Linq.Expressions.UnaryExpression" /> that represents a rethrowing of an exception.</span>
          </span>
        </summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Rethrow">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.UnaryExpression Rethrow ();" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.UnaryExpression Rethrow() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.Rethrow" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Rethrow () As UnaryExpression" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Linq::Expressions::UnaryExpression ^ Rethrow();" />
      <MemberSignature Language="F#" Value="static member Rethrow : unit -&gt; System.Linq.Expressions.UnaryExpression" Usage="System.Linq.Expressions.Expression.Rethrow " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.UnaryExpression</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="fef91-3334">Создает объект <see cref="T:System.Linq.Expressions.UnaryExpression" />, представляющий повторное создание исключения.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fef91-3334">Creates a <see cref="T:System.Linq.Expressions.UnaryExpression" /> that represents a rethrowing of an exception.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="fef91-3335">Объект <see cref="T:System.Linq.Expressions.UnaryExpression" />, представляющий повторное создание исключения.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fef91-3335">A <see cref="T:System.Linq.Expressions.UnaryExpression" /> that represents a rethrowing of an exception.</span>
          </span>
        </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Rethrow">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.UnaryExpression Rethrow (Type type);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.UnaryExpression Rethrow(class System.Type type) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.Rethrow(System.Type)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Linq::Expressions::UnaryExpression ^ Rethrow(Type ^ type);" />
      <MemberSignature Language="F#" Value="static member Rethrow : Type -&gt; System.Linq.Expressions.UnaryExpression" Usage="System.Linq.Expressions.Expression.Rethrow type" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.UnaryExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="type" Type="System.Type" />
      </Parameters>
      <Docs>
        <param name="type">
          <span data-ttu-id="fef91-3336">Новый тип <see cref="T:System.Type" /> выражения.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fef91-3336">The new <see cref="T:System.Type" /> of the expression.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="fef91-3337">Создает выражение <see cref="T:System.Linq.Expressions.UnaryExpression" />, представляющее повторное создание исключения с заданным типом.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fef91-3337">Creates a <see cref="T:System.Linq.Expressions.UnaryExpression" /> that represents a rethrowing of an exception with a given type.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="fef91-3338">Объект <see cref="T:System.Linq.Expressions.UnaryExpression" />, представляющий повторное создание исключения.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fef91-3338">A <see cref="T:System.Linq.Expressions.UnaryExpression" /> that represents a rethrowing of an exception.</span>
          </span>
        </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="Return">
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="fef91-3339">Создает объект <see cref="T:System.Linq.Expressions.GotoExpression" />, представляющий оператор return.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fef91-3339">Creates a <see cref="T:System.Linq.Expressions.GotoExpression" /> representing a return statement.</span>
          </span>
        </summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Return">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.GotoExpression Return (System.Linq.Expressions.LabelTarget target);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.GotoExpression Return(class System.Linq.Expressions.LabelTarget target) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.Return(System.Linq.Expressions.LabelTarget)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Return (target As LabelTarget) As GotoExpression" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Linq::Expressions::GotoExpression ^ Return(System::Linq::Expressions::LabelTarget ^ target);" />
      <MemberSignature Language="F#" Value="static member Return : System.Linq.Expressions.LabelTarget -&gt; System.Linq.Expressions.GotoExpression" Usage="System.Linq.Expressions.Expression.Return target" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.GotoExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="target" Type="System.Linq.Expressions.LabelTarget" />
      </Parameters>
      <Docs>
        <param name="target">
          <span data-ttu-id="fef91-3340">Объект <see cref="T:System.Linq.Expressions.LabelTarget" />, на который будет выполнен переход по <see cref="T:System.Linq.Expressions.GotoExpression" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fef91-3340">The <see cref="T:System.Linq.Expressions.LabelTarget" /> that the <see cref="T:System.Linq.Expressions.GotoExpression" /> will jump to.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="fef91-3341">Создает объект <see cref="T:System.Linq.Expressions.GotoExpression" />, представляющий оператор return.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fef91-3341">Creates a <see cref="T:System.Linq.Expressions.GotoExpression" /> representing a return statement.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="fef91-3342">Объект <see cref="T:System.Linq.Expressions.GotoExpression" />, свойство <see cref="P:System.Linq.Expressions.GotoExpression.Kind" /> которого имеет значение Return, свойство <see cref="P:System.Linq.Expressions.GotoExpression.Target" /> — значение в параметре <paramref name="target" />, а при переходе целевой метке передается значение NULL.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fef91-3342">A <see cref="T:System.Linq.Expressions.GotoExpression" /> with <see cref="P:System.Linq.Expressions.GotoExpression.Kind" /> equal to Return, the <see cref="P:System.Linq.Expressions.GotoExpression.Target" /> property set to <paramref name="target" />, and a null value to be passed to the target label upon jumping.</span>
          </span>
        </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Return">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.GotoExpression Return (System.Linq.Expressions.LabelTarget target, System.Linq.Expressions.Expression value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.GotoExpression Return(class System.Linq.Expressions.LabelTarget target, class System.Linq.Expressions.Expression value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.Return(System.Linq.Expressions.LabelTarget,System.Linq.Expressions.Expression)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Return (target As LabelTarget, value As Expression) As GotoExpression" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Linq::Expressions::GotoExpression ^ Return(System::Linq::Expressions::LabelTarget ^ target, System::Linq::Expressions::Expression ^ value);" />
      <MemberSignature Language="F#" Value="static member Return : System.Linq.Expressions.LabelTarget * System.Linq.Expressions.Expression -&gt; System.Linq.Expressions.GotoExpression" Usage="System.Linq.Expressions.Expression.Return (target, value)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.GotoExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="target" Type="System.Linq.Expressions.LabelTarget" />
        <Parameter Name="value" Type="System.Linq.Expressions.Expression" />
      </Parameters>
      <Docs>
        <param name="target">
          <span data-ttu-id="fef91-3343">Объект <see cref="T:System.Linq.Expressions.LabelTarget" />, на который будет выполнен переход по <see cref="T:System.Linq.Expressions.GotoExpression" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fef91-3343">The <see cref="T:System.Linq.Expressions.LabelTarget" /> that the <see cref="T:System.Linq.Expressions.GotoExpression" /> will jump to.</span>
          </span>
        </param>
        <param name="value">
          <span data-ttu-id="fef91-3344">Значение, передаваемое связанной метке при переходе.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fef91-3344">The value that will be passed to the associated label upon jumping.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="fef91-3345">Создает объект <see cref="T:System.Linq.Expressions.GotoExpression" />, представляющий оператор return.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fef91-3345">Creates a <see cref="T:System.Linq.Expressions.GotoExpression" /> representing a return statement.</span>
          </span>
          <span data-ttu-id="fef91-3346">Можно указать значение, передаваемое метке при переходе.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fef91-3346">The value passed to the label upon jumping can be specified.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="fef91-3347">Объект <see cref="T:System.Linq.Expressions.GotoExpression" />, свойство <see cref="P:System.Linq.Expressions.GotoExpression.Kind" /> которого имеет значение Continue, свойство <see cref="P:System.Linq.Expressions.GotoExpression.Target" /> — значение в параметре <paramref name="target" />, а при переходе целевой метке передается значение <paramref name="value" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fef91-3347">A <see cref="T:System.Linq.Expressions.GotoExpression" /> with <see cref="P:System.Linq.Expressions.GotoExpression.Kind" /> equal to Continue, the <see cref="P:System.Linq.Expressions.GotoExpression.Target" /> property set to <paramref name="target" />, and <paramref name="value" /> to be passed to the target label upon jumping.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 <span data-ttu-id="fef91-3348">В следующем примере показано, как создать выражение, содержащее <xref:System.Linq.Expressions.Expression.Return%2A> метод.</span><span class="sxs-lookup"><span data-stu-id="fef91-3348">The following example demonstrates how to create an expression that contains the <xref:System.Linq.Expressions.Expression.Return%2A> method.</span></span>  
  
 [!code-csharp[System.Linq.Expressions.ExpressionDev10#43](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.linq.expressions.expressiondev10/cs/program.cs#43)]
 [!code-vb[System.Linq.Expressions.ExpressionDev10#43](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.linq.expressions.expressiondev10/vb/module1.vb#43)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Return">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.GotoExpression Return (System.Linq.Expressions.LabelTarget target, Type type);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.GotoExpression Return(class System.Linq.Expressions.LabelTarget target, class System.Type type) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.Return(System.Linq.Expressions.LabelTarget,System.Type)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Linq::Expressions::GotoExpression ^ Return(System::Linq::Expressions::LabelTarget ^ target, Type ^ type);" />
      <MemberSignature Language="F#" Value="static member Return : System.Linq.Expressions.LabelTarget * Type -&gt; System.Linq.Expressions.GotoExpression" Usage="System.Linq.Expressions.Expression.Return (target, type)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.GotoExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="target" Type="System.Linq.Expressions.LabelTarget" />
        <Parameter Name="type" Type="System.Type" />
      </Parameters>
      <Docs>
        <param name="target">
          <span data-ttu-id="fef91-3349">Объект <see cref="T:System.Linq.Expressions.LabelTarget" />, на который будет выполнен переход по <see cref="T:System.Linq.Expressions.GotoExpression" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fef91-3349">The <see cref="T:System.Linq.Expressions.LabelTarget" /> that the <see cref="T:System.Linq.Expressions.GotoExpression" /> will jump to.</span>
          </span>
        </param>
        <param name="type">
          <span data-ttu-id="fef91-3350">Объект <see cref="T:System.Type" />, который следует задать в качестве значения свойства <see cref="P:System.Linq.Expressions.Expression.Type" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fef91-3350">An <see cref="T:System.Type" /> to set the <see cref="P:System.Linq.Expressions.Expression.Type" /> property equal to.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="fef91-3351">Создает объект <see cref="T:System.Linq.Expressions.GotoExpression" />, представляющий оператор return с указанным типом.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fef91-3351">Creates a <see cref="T:System.Linq.Expressions.GotoExpression" /> representing a return statement with the specified type.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="fef91-3352">Объект <see cref="T:System.Linq.Expressions.GotoExpression" />, свойство <see cref="P:System.Linq.Expressions.GotoExpression.Kind" /> которого имеет значение Return, свойство <see cref="P:System.Linq.Expressions.GotoExpression.Target" /> — значение в параметре <paramref name="target" />, свойство <see cref="P:System.Linq.Expressions.Expression.Type" /> — значение в параметре <paramref name="type" />, а при переходе целевой метке передается значение NULL.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fef91-3352">A <see cref="T:System.Linq.Expressions.GotoExpression" /> with <see cref="P:System.Linq.Expressions.GotoExpression.Kind" /> equal to Return, the <see cref="P:System.Linq.Expressions.GotoExpression.Target" /> property set to <paramref name="target" />, the <see cref="P:System.Linq.Expressions.Expression.Type" /> property set to <paramref name="type" />, and a null value to be passed to the target label upon jumping.</span>
          </span>
        </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Return">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.GotoExpression Return (System.Linq.Expressions.LabelTarget target, System.Linq.Expressions.Expression value, Type type);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.GotoExpression Return(class System.Linq.Expressions.LabelTarget target, class System.Linq.Expressions.Expression value, class System.Type type) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.Return(System.Linq.Expressions.LabelTarget,System.Linq.Expressions.Expression,System.Type)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Linq::Expressions::GotoExpression ^ Return(System::Linq::Expressions::LabelTarget ^ target, System::Linq::Expressions::Expression ^ value, Type ^ type);" />
      <MemberSignature Language="F#" Value="static member Return : System.Linq.Expressions.LabelTarget * System.Linq.Expressions.Expression * Type -&gt; System.Linq.Expressions.GotoExpression" Usage="System.Linq.Expressions.Expression.Return (target, value, type)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.GotoExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="target" Type="System.Linq.Expressions.LabelTarget" />
        <Parameter Name="value" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="type" Type="System.Type" />
      </Parameters>
      <Docs>
        <param name="target">
          <span data-ttu-id="fef91-3353">Объект <see cref="T:System.Linq.Expressions.LabelTarget" />, на который будет выполнен переход по <see cref="T:System.Linq.Expressions.GotoExpression" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fef91-3353">The <see cref="T:System.Linq.Expressions.LabelTarget" /> that the <see cref="T:System.Linq.Expressions.GotoExpression" /> will jump to.</span>
          </span>
        </param>
        <param name="value">
          <span data-ttu-id="fef91-3354">Значение, передаваемое связанной метке при переходе.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fef91-3354">The value that will be passed to the associated label upon jumping.</span>
          </span>
        </param>
        <param name="type">
          <span data-ttu-id="fef91-3355">Объект <see cref="T:System.Type" />, который следует задать в качестве значения свойства <see cref="P:System.Linq.Expressions.Expression.Type" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fef91-3355">An <see cref="T:System.Type" /> to set the <see cref="P:System.Linq.Expressions.Expression.Type" /> property equal to.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="fef91-3356">Создает объект <see cref="T:System.Linq.Expressions.GotoExpression" />, представляющий оператор return с указанным типом.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fef91-3356">Creates a <see cref="T:System.Linq.Expressions.GotoExpression" /> representing a return statement with the specified type.</span>
          </span>
          <span data-ttu-id="fef91-3357">Можно указать значение, передаваемое метке при переходе.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fef91-3357">The value passed to the label upon jumping can be specified.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="fef91-3358">Объект <see cref="T:System.Linq.Expressions.GotoExpression" />, свойство <see cref="P:System.Linq.Expressions.GotoExpression.Kind" /> которого имеет значение Continue, свойство <see cref="P:System.Linq.Expressions.GotoExpression.Target" /> — значение в параметре <paramref name="target" />, свойство <see cref="P:System.Linq.Expressions.Expression.Type" /> — значение в параметре <paramref name="type" />, а при переходе целевой метке передается значение в параметре <paramref name="value" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fef91-3358">A <see cref="T:System.Linq.Expressions.GotoExpression" /> with <see cref="P:System.Linq.Expressions.GotoExpression.Kind" /> equal to Continue, the <see cref="P:System.Linq.Expressions.GotoExpression.Target" /> property set to <paramref name="target" />, the <see cref="P:System.Linq.Expressions.Expression.Type" /> property set to <paramref name="type" />, and <paramref name="value" /> to be passed to the target label upon jumping.</span>
          </span>
        </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="RightShift">
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="fef91-3359">Создает <see cref="T:System.Linq.Expressions.BinaryExpression" />, представляющий побитовую операцию сдвига вправо.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fef91-3359">Creates a <see cref="T:System.Linq.Expressions.BinaryExpression" /> that represents a bitwise right-shift operation.</span>
          </span>
        </summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="RightShift">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.BinaryExpression RightShift (System.Linq.Expressions.Expression left, System.Linq.Expressions.Expression right);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.BinaryExpression RightShift(class System.Linq.Expressions.Expression left, class System.Linq.Expressions.Expression right) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.RightShift(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function RightShift (left As Expression, right As Expression) As BinaryExpression" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Linq::Expressions::BinaryExpression ^ RightShift(System::Linq::Expressions::Expression ^ left, System::Linq::Expressions::Expression ^ right);" />
      <MemberSignature Language="F#" Value="static member RightShift : System.Linq.Expressions.Expression * System.Linq.Expressions.Expression -&gt; System.Linq.Expressions.BinaryExpression" Usage="System.Linq.Expressions.Expression.RightShift (left, right)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.BinaryExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="left" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="right" Type="System.Linq.Expressions.Expression" />
      </Parameters>
      <Docs>
        <param name="left">
          <span data-ttu-id="fef91-3360">Объект <see cref="T:System.Linq.Expressions.Expression" />, который следует задать в качестве значения свойства <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fef91-3360">An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> property equal to.</span>
          </span>
        </param>
        <param name="right">
          <span data-ttu-id="fef91-3361">Объект <see cref="T:System.Linq.Expressions.Expression" />, который следует задать в качестве значения свойства <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fef91-3361">An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> property equal to.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="fef91-3362">Создает <see cref="T:System.Linq.Expressions.BinaryExpression" />, представляющий побитовую операцию сдвига вправо.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fef91-3362">Creates a <see cref="T:System.Linq.Expressions.BinaryExpression" /> that represents a bitwise right-shift operation.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="fef91-3363">Выражение <see cref="T:System.Linq.Expressions.BinaryExpression" /> со свойством<see cref="P:System.Linq.Expressions.Expression.NodeType" />, равным <see cref="F:System.Linq.Expressions.ExpressionType.RightShift" />, и свойствами <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> и <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />, для которых заданы указанные значения.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fef91-3363">A <see cref="T:System.Linq.Expressions.BinaryExpression" /> that has the <see cref="P:System.Linq.Expressions.Expression.NodeType" /> property equal to <see cref="F:System.Linq.Expressions.ExpressionType.RightShift" /> and the <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> and <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> properties set to the specified values.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="fef91-3364">Полученный в результате <xref:System.Linq.Expressions.BinaryExpression> имеет <xref:System.Linq.Expressions.BinaryExpression.Method%2A> свойство присвоено метод реализации.</span><span class="sxs-lookup"><span data-stu-id="fef91-3364">The resulting <xref:System.Linq.Expressions.BinaryExpression> has the <xref:System.Linq.Expressions.BinaryExpression.Method%2A> property set to the implementing method.</span></span> <span data-ttu-id="fef91-3365"><xref:System.Linq.Expressions.Expression.Type%2A> Свойству присваивается тип узла.</span><span class="sxs-lookup"><span data-stu-id="fef91-3365">The <xref:System.Linq.Expressions.Expression.Type%2A> property is set to the type of the node.</span></span> <span data-ttu-id="fef91-3366">Если узел удаляется, <xref:System.Linq.Expressions.BinaryExpression.IsLifted%2A> и <xref:System.Linq.Expressions.BinaryExpression.IsLiftedToNull%2A> оба являются свойства `true`.</span><span class="sxs-lookup"><span data-stu-id="fef91-3366">If the node is lifted, the <xref:System.Linq.Expressions.BinaryExpression.IsLifted%2A> and <xref:System.Linq.Expressions.BinaryExpression.IsLiftedToNull%2A> properties are both `true`.</span></span> <span data-ttu-id="fef91-3367">В противном случае они `false`.</span><span class="sxs-lookup"><span data-stu-id="fef91-3367">Otherwise, they are `false`.</span></span> <span data-ttu-id="fef91-3368">Значение свойства <xref:System.Linq.Expressions.BinaryExpression.Conversion%2A> — `null`.</span><span class="sxs-lookup"><span data-stu-id="fef91-3368">The <xref:System.Linq.Expressions.BinaryExpression.Conversion%2A> property is `null`.</span></span>  
  
 <span data-ttu-id="fef91-3369">Ниже описывается метод реализации, тип узла и ликвидирован ли данный узел.</span><span class="sxs-lookup"><span data-stu-id="fef91-3369">The following information describes the implementing method, the node type, and whether a node is lifted.</span></span>  
  
#### <a name="implementing-method"></a><span data-ttu-id="fef91-3370">Реализация метода</span><span class="sxs-lookup"><span data-stu-id="fef91-3370">Implementing Method</span></span>  
 <span data-ttu-id="fef91-3371">Следующие правила определяют выбранный метод реализации для операции:</span><span class="sxs-lookup"><span data-stu-id="fef91-3371">The following rules determine the selected implementing method for the operation:</span></span>  
  
-   <span data-ttu-id="fef91-3372">Если <xref:System.Linq.Expressions.Expression.Type%2A> свойству `left` или `right` представляет определяемый пользователем тип, который перегружает оператор сдвига вправо <xref:System.Reflection.MethodInfo> , представляющий, что метод является методом реализации.</span><span class="sxs-lookup"><span data-stu-id="fef91-3372">If the <xref:System.Linq.Expressions.Expression.Type%2A> property of either `left` or `right` represents a user-defined type that overloads the right-shift operator, the <xref:System.Reflection.MethodInfo> that represents that method is the implementing method.</span></span>  
  
-   <span data-ttu-id="fef91-3373">В противном случае, если `left`. Тип является целочисленным типом (один из <xref:System.Byte>, <xref:System.SByte>, <xref:System.Int16>, <xref:System.UInt16>, <xref:System.Int32>, <xref:System.UInt32>, <xref:System.Int64>, <xref:System.UInt64>, или соответствующие типы, допускающие значение NULL) и `right`. Тип — <xref:System.Int32>, реализация метода является `null`.</span><span class="sxs-lookup"><span data-stu-id="fef91-3373">Otherwise, if `left`.Type is an integral type (one of <xref:System.Byte>, <xref:System.SByte>, <xref:System.Int16>, <xref:System.UInt16>, <xref:System.Int32>, <xref:System.UInt32>, <xref:System.Int64>, <xref:System.UInt64>, or the corresponding nullable types) and `right`.Type is <xref:System.Int32>, the implementing method is `null`.</span></span>  
  
#### <a name="node-type-and-lifted-versus-non-lifted"></a><span data-ttu-id="fef91-3374">Тип узла с ликвидацией или без</span><span class="sxs-lookup"><span data-stu-id="fef91-3374">Node Type and Lifted versus Non-Lifted</span></span>  
 <span data-ttu-id="fef91-3375">Если метод реализации не `null`:</span><span class="sxs-lookup"><span data-stu-id="fef91-3375">If the implementing method is not `null`:</span></span>  
  
-   <span data-ttu-id="fef91-3376">Если `left`. Тип и `right`. Тип могут быть присвоены соответствующие типы аргументов метода реализации, узел не удаляется.</span><span class="sxs-lookup"><span data-stu-id="fef91-3376">If `left`.Type and `right`.Type are assignable to the corresponding argument types of the implementing method, the node is not lifted.</span></span> <span data-ttu-id="fef91-3377">Тип узла — тип возвращаемого значения метода реализации.</span><span class="sxs-lookup"><span data-stu-id="fef91-3377">The type of the node is the return type of the implementing method.</span></span>  
  
-   <span data-ttu-id="fef91-3378">Если выполняются два следующих условия, узел удаляется, а тип узла — обнуляемый тип, соответствующий тип возвращаемого значения метода реализации:</span><span class="sxs-lookup"><span data-stu-id="fef91-3378">If the following two conditions are satisfied, the node is lifted and the type of the node is the nullable type that corresponds to the return type of the implementing method:</span></span>  
  
    -   <span data-ttu-id="fef91-3379">`left`. Тип и `right`. Тип: обоих типов значений, из которых хотя бы один допускает значения NULL и соответствующие типы, не допускающие значения null равны соответствующие типы аргументов метода реализации.</span><span class="sxs-lookup"><span data-stu-id="fef91-3379">`left`.Type and `right`.Type are both value types of which at least one is nullable and the corresponding non-nullable types are equal to the corresponding argument types of the implementing method.</span></span>  
  
    -   <span data-ttu-id="fef91-3380">Тип возвращаемого значения метода реализации является типом значения, не допускающие значения NULL.</span><span class="sxs-lookup"><span data-stu-id="fef91-3380">The return type of the implementing method is a non-nullable value type.</span></span>  
  
 <span data-ttu-id="fef91-3381">Если метод реализации `null`:</span><span class="sxs-lookup"><span data-stu-id="fef91-3381">If the implementing method is `null`:</span></span>  
  
-   <span data-ttu-id="fef91-3382">Если `left`. Тип и `right`. Тип: оба не поддерживающими значение NULL, узел не удаляется.</span><span class="sxs-lookup"><span data-stu-id="fef91-3382">If `left`.Type and `right`.Type are both non-nullable, the node is not lifted.</span></span> <span data-ttu-id="fef91-3383">Тип узла является типом результата определенного оператора сдвига вправо.</span><span class="sxs-lookup"><span data-stu-id="fef91-3383">The type of the node is the result type of the predefined right-shift operator.</span></span>  
  
-   <span data-ttu-id="fef91-3384">Если `left`. Тип и `right`. Тип: значение NULL, узел удаляется.</span><span class="sxs-lookup"><span data-stu-id="fef91-3384">If `left`.Type and `right`.Type are both nullable, the node is lifted.</span></span> <span data-ttu-id="fef91-3385">Тип узла — обнуляемый тип, соответствующий типу результата определенного оператора сдвига вправо.</span><span class="sxs-lookup"><span data-stu-id="fef91-3385">The type of the node is the nullable type that corresponds to the result type of the predefined right-shift operator.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="fef91-3386">Значение параметра <paramref name="left" /> или <paramref name="right" /> — <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fef91-3386">
              <paramref name="left" /> or <paramref name="right" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.InvalidOperationException">
          <span data-ttu-id="fef91-3387">Оператор сдвига вправо не определен для типов <paramref name="left" />.Type и <paramref name="right" />.Type.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fef91-3387">The right-shift operator is not defined for <paramref name="left" />.Type and <paramref name="right" />.Type.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="RightShift">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.BinaryExpression RightShift (System.Linq.Expressions.Expression left, System.Linq.Expressions.Expression right, System.Reflection.MethodInfo method);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.BinaryExpression RightShift(class System.Linq.Expressions.Expression left, class System.Linq.Expressions.Expression right, class System.Reflection.MethodInfo method) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.RightShift(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function RightShift (left As Expression, right As Expression, method As MethodInfo) As BinaryExpression" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Linq::Expressions::BinaryExpression ^ RightShift(System::Linq::Expressions::Expression ^ left, System::Linq::Expressions::Expression ^ right, System::Reflection::MethodInfo ^ method);" />
      <MemberSignature Language="F#" Value="static member RightShift : System.Linq.Expressions.Expression * System.Linq.Expressions.Expression * System.Reflection.MethodInfo -&gt; System.Linq.Expressions.BinaryExpression" Usage="System.Linq.Expressions.Expression.RightShift (left, right, method)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.BinaryExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="left" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="right" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="method" Type="System.Reflection.MethodInfo" />
      </Parameters>
      <Docs>
        <param name="left">
          <span data-ttu-id="fef91-3388">Объект <see cref="T:System.Linq.Expressions.Expression" />, который следует задать в качестве значения свойства <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fef91-3388">An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> property equal to.</span>
          </span>
        </param>
        <param name="right">
          <span data-ttu-id="fef91-3389">Объект <see cref="T:System.Linq.Expressions.Expression" />, который следует задать в качестве значения свойства <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fef91-3389">An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> property equal to.</span>
          </span>
        </param>
        <param name="method">
          <span data-ttu-id="fef91-3390">Объект <see cref="T:System.Reflection.MethodInfo" />, который следует задать в качестве значения свойства <see cref="P:System.Linq.Expressions.BinaryExpression.Method" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fef91-3390">A <see cref="T:System.Reflection.MethodInfo" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Method" /> property equal to.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="fef91-3391">Создает <see cref="T:System.Linq.Expressions.BinaryExpression" />, представляющий побитовую операцию сдвига вправо.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fef91-3391">Creates a <see cref="T:System.Linq.Expressions.BinaryExpression" /> that represents a bitwise right-shift operation.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="fef91-3392">Выражение <see cref="T:System.Linq.Expressions.BinaryExpression" /> со свойством <see cref="P:System.Linq.Expressions.Expression.NodeType" />, равным <see cref="F:System.Linq.Expressions.ExpressionType.RightShift" />, и свойствами <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />, <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> и <see cref="P:System.Linq.Expressions.BinaryExpression.Method" />, для которых заданы указанные значения.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fef91-3392">A <see cref="T:System.Linq.Expressions.BinaryExpression" /> that has the <see cref="P:System.Linq.Expressions.Expression.NodeType" /> property equal to <see cref="F:System.Linq.Expressions.ExpressionType.RightShift" /> and the <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />, <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />, and <see cref="P:System.Linq.Expressions.BinaryExpression.Method" /> properties set to the specified values.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="fef91-3393">Полученный в результате <xref:System.Linq.Expressions.BinaryExpression> имеет <xref:System.Linq.Expressions.BinaryExpression.Method%2A> свойство присвоено метод реализации.</span><span class="sxs-lookup"><span data-stu-id="fef91-3393">The resulting <xref:System.Linq.Expressions.BinaryExpression> has the <xref:System.Linq.Expressions.BinaryExpression.Method%2A> property set to the implementing method.</span></span> <span data-ttu-id="fef91-3394"><xref:System.Linq.Expressions.Expression.Type%2A> Свойству присваивается тип узла.</span><span class="sxs-lookup"><span data-stu-id="fef91-3394">The <xref:System.Linq.Expressions.Expression.Type%2A> property is set to the type of the node.</span></span> <span data-ttu-id="fef91-3395">Если узел удаляется, <xref:System.Linq.Expressions.BinaryExpression.IsLifted%2A> и <xref:System.Linq.Expressions.BinaryExpression.IsLiftedToNull%2A> оба являются свойства `true`.</span><span class="sxs-lookup"><span data-stu-id="fef91-3395">If the node is lifted, the <xref:System.Linq.Expressions.BinaryExpression.IsLifted%2A> and <xref:System.Linq.Expressions.BinaryExpression.IsLiftedToNull%2A> properties are both `true`.</span></span> <span data-ttu-id="fef91-3396">В противном случае они `false`.</span><span class="sxs-lookup"><span data-stu-id="fef91-3396">Otherwise, they are `false`.</span></span> <span data-ttu-id="fef91-3397">Значение свойства <xref:System.Linq.Expressions.BinaryExpression.Conversion%2A> — `null`.</span><span class="sxs-lookup"><span data-stu-id="fef91-3397">The <xref:System.Linq.Expressions.BinaryExpression.Conversion%2A> property is `null`.</span></span>  
  
 <span data-ttu-id="fef91-3398">Ниже описывается метод реализации, тип узла и ликвидирован ли данный узел.</span><span class="sxs-lookup"><span data-stu-id="fef91-3398">The following information describes the implementing method, the node type, and whether a node is lifted.</span></span>  
  
#### <a name="implementing-method"></a><span data-ttu-id="fef91-3399">Реализация метода</span><span class="sxs-lookup"><span data-stu-id="fef91-3399">Implementing Method</span></span>  
 <span data-ttu-id="fef91-3400">Следующие правила определяют выбранный метод реализации для операции:</span><span class="sxs-lookup"><span data-stu-id="fef91-3400">The following rules determine the selected implementing method for the operation:</span></span>  
  
-   <span data-ttu-id="fef91-3401">Если `method` не `null` , и это отличный от void, `static` (`Shared` в Visual Basic) метода, принимающего два аргумента, это метод реализации для узла.</span><span class="sxs-lookup"><span data-stu-id="fef91-3401">If `method` is not `null` and it represents a non-void, `static` (`Shared` in Visual Basic) method that takes two arguments, it is the implementing method for the node.</span></span>  
  
-   <span data-ttu-id="fef91-3402">В противном случае, если <xref:System.Linq.Expressions.Expression.Type%2A> свойству `left` или `right` представляет определяемый пользователем тип, который перегружает оператор сдвига вправо <xref:System.Reflection.MethodInfo> , представляющий, что метод является методом реализации.</span><span class="sxs-lookup"><span data-stu-id="fef91-3402">Otherwise, if the <xref:System.Linq.Expressions.Expression.Type%2A> property of either `left` or `right` represents a user-defined type that overloads the right-shift operator, the <xref:System.Reflection.MethodInfo> that represents that method is the implementing method.</span></span>  
  
-   <span data-ttu-id="fef91-3403">В противном случае, если `left`. Тип является целочисленным типом (один из <xref:System.Byte>, <xref:System.SByte>, <xref:System.Int16>, <xref:System.UInt16>, <xref:System.Int32>, <xref:System.UInt32>, <xref:System.Int64>, <xref:System.UInt64>, или соответствующие типы, допускающие значение NULL) и `right`. Тип — <xref:System.Int32>, реализация метода является `null`.</span><span class="sxs-lookup"><span data-stu-id="fef91-3403">Otherwise, if `left`.Type is an integral type (one of <xref:System.Byte>, <xref:System.SByte>, <xref:System.Int16>, <xref:System.UInt16>, <xref:System.Int32>, <xref:System.UInt32>, <xref:System.Int64>, <xref:System.UInt64>, or the corresponding nullable types) and `right`.Type is <xref:System.Int32>, the implementing method is `null`.</span></span>  
  
#### <a name="node-type-and-lifted-versus-non-lifted"></a><span data-ttu-id="fef91-3404">Тип узла с ликвидацией или без</span><span class="sxs-lookup"><span data-stu-id="fef91-3404">Node Type and Lifted versus Non-Lifted</span></span>  
 <span data-ttu-id="fef91-3405">Если метод реализации не `null`:</span><span class="sxs-lookup"><span data-stu-id="fef91-3405">If the implementing method is not `null`:</span></span>  
  
-   <span data-ttu-id="fef91-3406">Если `left`. Тип и `right`. Тип могут быть присвоены соответствующие типы аргументов метода реализации, узел не удаляется.</span><span class="sxs-lookup"><span data-stu-id="fef91-3406">If `left`.Type and `right`.Type are assignable to the corresponding argument types of the implementing method, the node is not lifted.</span></span> <span data-ttu-id="fef91-3407">Тип узла — тип возвращаемого значения метода реализации.</span><span class="sxs-lookup"><span data-stu-id="fef91-3407">The type of the node is the return type of the implementing method.</span></span>  
  
-   <span data-ttu-id="fef91-3408">Если выполняются два следующих условия, узел удаляется, а тип узла — обнуляемый тип, соответствующий тип возвращаемого значения метода реализации:</span><span class="sxs-lookup"><span data-stu-id="fef91-3408">If the following two conditions are satisfied, the node is lifted and the type of the node is the nullable type that corresponds to the return type of the implementing method:</span></span>  
  
    -   <span data-ttu-id="fef91-3409">`left`. Тип и `right`. Тип: обоих типов значений, из которых хотя бы один допускает значения NULL и соответствующие типы, не допускающие значения null равны соответствующие типы аргументов метода реализации.</span><span class="sxs-lookup"><span data-stu-id="fef91-3409">`left`.Type and `right`.Type are both value types of which at least one is nullable and the corresponding non-nullable types are equal to the corresponding argument types of the implementing method.</span></span>  
  
    -   <span data-ttu-id="fef91-3410">Тип возвращаемого значения метода реализации является типом значения, не допускающие значения NULL.</span><span class="sxs-lookup"><span data-stu-id="fef91-3410">The return type of the implementing method is a non-nullable value type.</span></span>  
  
 <span data-ttu-id="fef91-3411">Если метод реализации `null`:</span><span class="sxs-lookup"><span data-stu-id="fef91-3411">If the implementing method is `null`:</span></span>  
  
-   <span data-ttu-id="fef91-3412">Если `left`. Тип и `right`. Тип: оба не поддерживающими значение NULL, узел не удаляется.</span><span class="sxs-lookup"><span data-stu-id="fef91-3412">If `left`.Type and `right`.Type are both non-nullable, the node is not lifted.</span></span> <span data-ttu-id="fef91-3413">Тип узла является типом результата определенного оператора сдвига вправо.</span><span class="sxs-lookup"><span data-stu-id="fef91-3413">The type of the node is the result type of the predefined right-shift operator.</span></span>  
  
-   <span data-ttu-id="fef91-3414">Если `left`. Тип и `right`. Тип: значение NULL, узел удаляется.</span><span class="sxs-lookup"><span data-stu-id="fef91-3414">If `left`.Type and `right`.Type are both nullable, the node is lifted.</span></span> <span data-ttu-id="fef91-3415">Тип узла — обнуляемый тип, соответствующий типу результата определенного оператора сдвига вправо.</span><span class="sxs-lookup"><span data-stu-id="fef91-3415">The type of the node is the nullable type that corresponds to the result type of the predefined right-shift operator.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="fef91-3416">Значение параметра <paramref name="left" /> или <paramref name="right" /> — <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fef91-3416">
              <paramref name="left" /> or <paramref name="right" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="fef91-3417">Значение параметра <paramref name="method" /> не равно <see langword="null" />, и метод, который оно представляет, возвращает <see langword="void" />, не является <see langword="static" /> (<see langword="Shared" /> в Visual Basic) и не принимает ровно два аргумента.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fef91-3417">
              <paramref name="method" /> is not <see langword="null" /> and the method it represents returns <see langword="void" />, is not <see langword="static" /> (<see langword="Shared" /> in Visual Basic), or does not take exactly two arguments.</span>
          </span>
        </exception>
        <exception cref="T:System.InvalidOperationException">
          <span data-ttu-id="fef91-3418">Значение <paramref name="method" /> равно <see langword="null" />, а оператор сдвига вправо не определен для типов <paramref name="left" />.Type и <paramref name="right" />.Type.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fef91-3418">
              <paramref name="method" /> is <see langword="null" /> and the right-shift operator is not defined for <paramref name="left" />.Type and <paramref name="right" />.Type.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <MemberGroup MemberName="RightShiftAssign">
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="fef91-3419">Создает объект <see cref="T:System.Linq.Expressions.BinaryExpression" />, представляющий битовую операцию присваивания сдвига вправо.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fef91-3419">Creates a <see cref="T:System.Linq.Expressions.BinaryExpression" /> that represents a bitwise right-shift assignment operation.</span>
          </span>
        </summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="RightShiftAssign">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.BinaryExpression RightShiftAssign (System.Linq.Expressions.Expression left, System.Linq.Expressions.Expression right);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.BinaryExpression RightShiftAssign(class System.Linq.Expressions.Expression left, class System.Linq.Expressions.Expression right) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.RightShiftAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function RightShiftAssign (left As Expression, right As Expression) As BinaryExpression" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Linq::Expressions::BinaryExpression ^ RightShiftAssign(System::Linq::Expressions::Expression ^ left, System::Linq::Expressions::Expression ^ right);" />
      <MemberSignature Language="F#" Value="static member RightShiftAssign : System.Linq.Expressions.Expression * System.Linq.Expressions.Expression -&gt; System.Linq.Expressions.BinaryExpression" Usage="System.Linq.Expressions.Expression.RightShiftAssign (left, right)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.BinaryExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="left" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="right" Type="System.Linq.Expressions.Expression" />
      </Parameters>
      <Docs>
        <param name="left">
          <span data-ttu-id="fef91-3420">Объект <see cref="T:System.Linq.Expressions.Expression" />, который следует задать в качестве значения свойства <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fef91-3420">An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> property equal to.</span>
          </span>
        </param>
        <param name="right">
          <span data-ttu-id="fef91-3421">Объект <see cref="T:System.Linq.Expressions.Expression" />, который следует задать в качестве значения свойства <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fef91-3421">An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> property equal to.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="fef91-3422">Создает объект <see cref="T:System.Linq.Expressions.BinaryExpression" />, представляющий битовую операцию присваивания сдвига вправо.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fef91-3422">Creates a <see cref="T:System.Linq.Expressions.BinaryExpression" /> that represents a bitwise right-shift assignment operation.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="fef91-3423">Выражение <see cref="T:System.Linq.Expressions.BinaryExpression" /> со свойством<see cref="P:System.Linq.Expressions.Expression.NodeType" />, равным <see cref="F:System.Linq.Expressions.ExpressionType.RightShiftAssign" />, и свойствами <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> и <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />, для которых заданы указанные значения.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fef91-3423">A <see cref="T:System.Linq.Expressions.BinaryExpression" /> that has the <see cref="P:System.Linq.Expressions.Expression.NodeType" /> property equal to <see cref="F:System.Linq.Expressions.ExpressionType.RightShiftAssign" /> and the <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> and <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> properties set to the specified values.</span>
          </span>
        </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="RightShiftAssign">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.BinaryExpression RightShiftAssign (System.Linq.Expressions.Expression left, System.Linq.Expressions.Expression right, System.Reflection.MethodInfo method);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.BinaryExpression RightShiftAssign(class System.Linq.Expressions.Expression left, class System.Linq.Expressions.Expression right, class System.Reflection.MethodInfo method) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.RightShiftAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function RightShiftAssign (left As Expression, right As Expression, method As MethodInfo) As BinaryExpression" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Linq::Expressions::BinaryExpression ^ RightShiftAssign(System::Linq::Expressions::Expression ^ left, System::Linq::Expressions::Expression ^ right, System::Reflection::MethodInfo ^ method);" />
      <MemberSignature Language="F#" Value="static member RightShiftAssign : System.Linq.Expressions.Expression * System.Linq.Expressions.Expression * System.Reflection.MethodInfo -&gt; System.Linq.Expressions.BinaryExpression" Usage="System.Linq.Expressions.Expression.RightShiftAssign (left, right, method)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.BinaryExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="left" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="right" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="method" Type="System.Reflection.MethodInfo" />
      </Parameters>
      <Docs>
        <param name="left">
          <span data-ttu-id="fef91-3424">Объект <see cref="T:System.Linq.Expressions.Expression" />, который следует задать в качестве значения свойства <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fef91-3424">An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> property equal to.</span>
          </span>
        </param>
        <param name="right">
          <span data-ttu-id="fef91-3425">Объект <see cref="T:System.Linq.Expressions.Expression" />, который следует задать в качестве значения свойства <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fef91-3425">An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> property equal to.</span>
          </span>
        </param>
        <param name="method">
          <span data-ttu-id="fef91-3426">Объект <see cref="T:System.Reflection.MethodInfo" />, который следует задать в качестве значения свойства <see cref="P:System.Linq.Expressions.BinaryExpression.Method" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fef91-3426">A <see cref="T:System.Reflection.MethodInfo" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Method" /> property equal to.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="fef91-3427">Создает объект <see cref="T:System.Linq.Expressions.BinaryExpression" />, представляющий битовую операцию присваивания сдвига вправо.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fef91-3427">Creates a <see cref="T:System.Linq.Expressions.BinaryExpression" /> that represents a bitwise right-shift assignment operation.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="fef91-3428">Выражение <see cref="T:System.Linq.Expressions.BinaryExpression" /> со свойством <see cref="P:System.Linq.Expressions.Expression.NodeType" />, равным <see cref="F:System.Linq.Expressions.ExpressionType.RightShiftAssign" />, и свойствами <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />, <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> и <see cref="P:System.Linq.Expressions.BinaryExpression.Method" />, для которых заданы указанные значения.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fef91-3428">A <see cref="T:System.Linq.Expressions.BinaryExpression" /> that has the <see cref="P:System.Linq.Expressions.Expression.NodeType" /> property equal to <see cref="F:System.Linq.Expressions.ExpressionType.RightShiftAssign" /> and the <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />, <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />, and <see cref="P:System.Linq.Expressions.BinaryExpression.Method" /> properties set to the specified values.</span>
          </span>
        </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="RightShiftAssign">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.BinaryExpression RightShiftAssign (System.Linq.Expressions.Expression left, System.Linq.Expressions.Expression right, System.Reflection.MethodInfo method, System.Linq.Expressions.LambdaExpression conversion);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.BinaryExpression RightShiftAssign(class System.Linq.Expressions.Expression left, class System.Linq.Expressions.Expression right, class System.Reflection.MethodInfo method, class System.Linq.Expressions.LambdaExpression conversion) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.RightShiftAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo,System.Linq.Expressions.LambdaExpression)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function RightShiftAssign (left As Expression, right As Expression, method As MethodInfo, conversion As LambdaExpression) As BinaryExpression" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Linq::Expressions::BinaryExpression ^ RightShiftAssign(System::Linq::Expressions::Expression ^ left, System::Linq::Expressions::Expression ^ right, System::Reflection::MethodInfo ^ method, System::Linq::Expressions::LambdaExpression ^ conversion);" />
      <MemberSignature Language="F#" Value="static member RightShiftAssign : System.Linq.Expressions.Expression * System.Linq.Expressions.Expression * System.Reflection.MethodInfo * System.Linq.Expressions.LambdaExpression -&gt; System.Linq.Expressions.BinaryExpression" Usage="System.Linq.Expressions.Expression.RightShiftAssign (left, right, method, conversion)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.BinaryExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="left" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="right" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="method" Type="System.Reflection.MethodInfo" />
        <Parameter Name="conversion" Type="System.Linq.Expressions.LambdaExpression" />
      </Parameters>
      <Docs>
        <param name="left">
          <span data-ttu-id="fef91-3429">Объект <see cref="T:System.Linq.Expressions.Expression" />, который следует задать в качестве значения свойства <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fef91-3429">An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> property equal to.</span>
          </span>
        </param>
        <param name="right">
          <span data-ttu-id="fef91-3430">Объект <see cref="T:System.Linq.Expressions.Expression" />, который следует задать в качестве значения свойства <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fef91-3430">An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> property equal to.</span>
          </span>
        </param>
        <param name="method">
          <span data-ttu-id="fef91-3431">Объект <see cref="T:System.Reflection.MethodInfo" />, который следует задать в качестве значения свойства <see cref="P:System.Linq.Expressions.BinaryExpression.Method" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fef91-3431">A <see cref="T:System.Reflection.MethodInfo" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Method" /> property equal to.</span>
          </span>
        </param>
        <param name="conversion">
          <span data-ttu-id="fef91-3432">Объект <see cref="T:System.Linq.Expressions.LambdaExpression" />, который следует задать в качестве значения свойства <see cref="P:System.Linq.Expressions.BinaryExpression.Conversion" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fef91-3432">A <see cref="T:System.Linq.Expressions.LambdaExpression" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Conversion" /> property equal to.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="fef91-3433">Создает объект <see cref="T:System.Linq.Expressions.BinaryExpression" />, представляющий битовую операцию присваивания сдвига вправо.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fef91-3433">Creates a <see cref="T:System.Linq.Expressions.BinaryExpression" /> that represents a bitwise right-shift assignment operation.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="fef91-3434">Выражение <see cref="T:System.Linq.Expressions.BinaryExpression" />, содержащее свойство <see cref="P:System.Linq.Expressions.Expression.NodeType" />, равное <see cref="F:System.Linq.Expressions.ExpressionType.RightShiftAssign" /> и <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />, <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />, <see cref="P:System.Linq.Expressions.BinaryExpression.Method" />, и свойства <see cref="P:System.Linq.Expressions.BinaryExpression.Conversion" />, для которых заданы указанные значения.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fef91-3434">A <see cref="T:System.Linq.Expressions.BinaryExpression" /> that has the <see cref="P:System.Linq.Expressions.Expression.NodeType" /> property equal to <see cref="F:System.Linq.Expressions.ExpressionType.RightShiftAssign" /> and the <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />, <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />, <see cref="P:System.Linq.Expressions.BinaryExpression.Method" />, and <see cref="P:System.Linq.Expressions.BinaryExpression.Conversion" /> properties set to the specified values.</span>
          </span>
        </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="RuntimeVariables">
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="fef91-3435">Создает экземпляр <see cref="T:System.Linq.Expressions.RuntimeVariablesExpression" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fef91-3435">Creates an instance of <see cref="T:System.Linq.Expressions.RuntimeVariablesExpression" />.</span>
          </span>
        </summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="RuntimeVariables">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.RuntimeVariablesExpression RuntimeVariables (System.Collections.Generic.IEnumerable&lt;System.Linq.Expressions.ParameterExpression&gt; variables);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.RuntimeVariablesExpression RuntimeVariables(class System.Collections.Generic.IEnumerable`1&lt;class System.Linq.Expressions.ParameterExpression&gt; variables) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.RuntimeVariables(System.Collections.Generic.IEnumerable{System.Linq.Expressions.ParameterExpression})" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function RuntimeVariables (variables As IEnumerable(Of ParameterExpression)) As RuntimeVariablesExpression" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Linq::Expressions::RuntimeVariablesExpression ^ RuntimeVariables(System::Collections::Generic::IEnumerable&lt;System::Linq::Expressions::ParameterExpression ^&gt; ^ variables);" />
      <MemberSignature Language="F#" Value="static member RuntimeVariables : seq&lt;System.Linq.Expressions.ParameterExpression&gt; -&gt; System.Linq.Expressions.RuntimeVariablesExpression" Usage="System.Linq.Expressions.Expression.RuntimeVariables variables" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.RuntimeVariablesExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="variables" Type="System.Collections.Generic.IEnumerable&lt;System.Linq.Expressions.ParameterExpression&gt;" />
      </Parameters>
      <Docs>
        <param name="variables">
          <span data-ttu-id="fef91-3436">Коллекция объектов <see cref="T:System.Linq.Expressions.ParameterExpression" /> для заполнения коллекции <see cref="P:System.Linq.Expressions.RuntimeVariablesExpression.Variables" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fef91-3436">A collection of <see cref="T:System.Linq.Expressions.ParameterExpression" /> objects to use to populate the <see cref="P:System.Linq.Expressions.RuntimeVariablesExpression.Variables" /> collection.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="fef91-3437">Создает экземпляр <see cref="T:System.Linq.Expressions.RuntimeVariablesExpression" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fef91-3437">Creates an instance of <see cref="T:System.Linq.Expressions.RuntimeVariablesExpression" />.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="fef91-3438">Экземпляр класса <see cref="T:System.Linq.Expressions.RuntimeVariablesExpression" /> со свойством <see cref="P:System.Linq.Expressions.Expression.NodeType" />, равным <see cref="F:System.Linq.Expressions.ExpressionType.RuntimeVariables" />, и свойством <see cref="P:System.Linq.Expressions.RuntimeVariablesExpression.Variables" />, для которого задано указанное значение.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fef91-3438">An instance of <see cref="T:System.Linq.Expressions.RuntimeVariablesExpression" /> that has the <see cref="P:System.Linq.Expressions.Expression.NodeType" /> property equal to <see cref="F:System.Linq.Expressions.ExpressionType.RuntimeVariables" /> and the <see cref="P:System.Linq.Expressions.RuntimeVariablesExpression.Variables" /> property set to the specified value.</span>
          </span>
        </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="RuntimeVariables">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.RuntimeVariablesExpression RuntimeVariables (params System.Linq.Expressions.ParameterExpression[] variables);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.RuntimeVariablesExpression RuntimeVariables(class System.Linq.Expressions.ParameterExpression[] variables) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.RuntimeVariables(System.Linq.Expressions.ParameterExpression[])" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function RuntimeVariables (ParamArray variables As ParameterExpression()) As RuntimeVariablesExpression" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Linq::Expressions::RuntimeVariablesExpression ^ RuntimeVariables(... cli::array &lt;System::Linq::Expressions::ParameterExpression ^&gt; ^ variables);" />
      <MemberSignature Language="F#" Value="static member RuntimeVariables : System.Linq.Expressions.ParameterExpression[] -&gt; System.Linq.Expressions.RuntimeVariablesExpression" Usage="System.Linq.Expressions.Expression.RuntimeVariables variables" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.RuntimeVariablesExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="variables" Type="System.Linq.Expressions.ParameterExpression[]">
          <Attributes>
            <Attribute>
              <AttributeName>System.ParamArray</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="variables">
          <span data-ttu-id="fef91-3439">Массив объектов <see cref="T:System.Linq.Expressions.ParameterExpression" /> для заполнения коллекции <see cref="P:System.Linq.Expressions.RuntimeVariablesExpression.Variables" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fef91-3439">An array of <see cref="T:System.Linq.Expressions.ParameterExpression" /> objects to use to populate the <see cref="P:System.Linq.Expressions.RuntimeVariablesExpression.Variables" /> collection.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="fef91-3440">Создает экземпляр <see cref="T:System.Linq.Expressions.RuntimeVariablesExpression" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fef91-3440">Creates an instance of <see cref="T:System.Linq.Expressions.RuntimeVariablesExpression" />.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="fef91-3441">Экземпляр класса <see cref="T:System.Linq.Expressions.RuntimeVariablesExpression" /> со свойством <see cref="P:System.Linq.Expressions.Expression.NodeType" />, равным <see cref="F:System.Linq.Expressions.ExpressionType.RuntimeVariables" />, и свойством <see cref="P:System.Linq.Expressions.RuntimeVariablesExpression.Variables" />, для которого задано указанное значение.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fef91-3441">An instance of <see cref="T:System.Linq.Expressions.RuntimeVariablesExpression" /> that has the <see cref="P:System.Linq.Expressions.Expression.NodeType" /> property equal to <see cref="F:System.Linq.Expressions.ExpressionType.RuntimeVariables" /> and the <see cref="P:System.Linq.Expressions.RuntimeVariablesExpression.Variables" /> property set to the specified value.</span>
          </span>
        </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="Subtract">
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="fef91-3442">Создает <see cref="T:System.Linq.Expressions.BinaryExpression" />, представляющий операцию арифметического вычитания, не содержащую проверку переполнения.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fef91-3442">Creates a <see cref="T:System.Linq.Expressions.BinaryExpression" /> that represents an arithmetic subtraction operation that does not have overflow checking.</span>
          </span>
        </summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Subtract">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.BinaryExpression Subtract (System.Linq.Expressions.Expression left, System.Linq.Expressions.Expression right);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.BinaryExpression Subtract(class System.Linq.Expressions.Expression left, class System.Linq.Expressions.Expression right) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.Subtract(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Subtract (left As Expression, right As Expression) As BinaryExpression" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Linq::Expressions::BinaryExpression ^ Subtract(System::Linq::Expressions::Expression ^ left, System::Linq::Expressions::Expression ^ right);" />
      <MemberSignature Language="F#" Value="static member Subtract : System.Linq.Expressions.Expression * System.Linq.Expressions.Expression -&gt; System.Linq.Expressions.BinaryExpression" Usage="System.Linq.Expressions.Expression.Subtract (left, right)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.BinaryExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="left" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="right" Type="System.Linq.Expressions.Expression" />
      </Parameters>
      <Docs>
        <param name="left">
          <span data-ttu-id="fef91-3443">Объект <see cref="T:System.Linq.Expressions.Expression" />, который следует задать в качестве значения свойства <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fef91-3443">An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> property equal to.</span>
          </span>
        </param>
        <param name="right">
          <span data-ttu-id="fef91-3444">Объект <see cref="T:System.Linq.Expressions.Expression" />, который следует задать в качестве значения свойства <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fef91-3444">A <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> property equal to.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="fef91-3445">Создает <see cref="T:System.Linq.Expressions.BinaryExpression" />, представляющий операцию арифметического вычитания, не содержащую проверку переполнения.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fef91-3445">Creates a <see cref="T:System.Linq.Expressions.BinaryExpression" /> that represents an arithmetic subtraction operation that does not have overflow checking.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="fef91-3446">Выражение <see cref="T:System.Linq.Expressions.BinaryExpression" /> со свойством<see cref="P:System.Linq.Expressions.Expression.NodeType" />, равным <see cref="F:System.Linq.Expressions.ExpressionType.Subtract" />, и свойствами <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> и <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />, для которых заданы указанные значения.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fef91-3446">A <see cref="T:System.Linq.Expressions.BinaryExpression" /> that has the <see cref="P:System.Linq.Expressions.Expression.NodeType" /> property equal to <see cref="F:System.Linq.Expressions.ExpressionType.Subtract" /> and the <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> and <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> properties set to the specified values.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="fef91-3447">Полученный в результате <xref:System.Linq.Expressions.BinaryExpression> имеет <xref:System.Linq.Expressions.BinaryExpression.Method%2A> свойство присвоено метод реализации.</span><span class="sxs-lookup"><span data-stu-id="fef91-3447">The resulting <xref:System.Linq.Expressions.BinaryExpression> has the <xref:System.Linq.Expressions.BinaryExpression.Method%2A> property set to the implementing method.</span></span> <span data-ttu-id="fef91-3448"><xref:System.Linq.Expressions.Expression.Type%2A> Свойству присваивается тип узла.</span><span class="sxs-lookup"><span data-stu-id="fef91-3448">The <xref:System.Linq.Expressions.Expression.Type%2A> property is set to the type of the node.</span></span> <span data-ttu-id="fef91-3449">Если узел удаляется, <xref:System.Linq.Expressions.BinaryExpression.IsLifted%2A> и <xref:System.Linq.Expressions.BinaryExpression.IsLiftedToNull%2A> оба являются свойства `true`.</span><span class="sxs-lookup"><span data-stu-id="fef91-3449">If the node is lifted, the <xref:System.Linq.Expressions.BinaryExpression.IsLifted%2A> and <xref:System.Linq.Expressions.BinaryExpression.IsLiftedToNull%2A> properties are both `true`.</span></span> <span data-ttu-id="fef91-3450">В противном случае они `false`.</span><span class="sxs-lookup"><span data-stu-id="fef91-3450">Otherwise, they are `false`.</span></span> <span data-ttu-id="fef91-3451">Значение свойства <xref:System.Linq.Expressions.BinaryExpression.Conversion%2A> — `null`.</span><span class="sxs-lookup"><span data-stu-id="fef91-3451">The <xref:System.Linq.Expressions.BinaryExpression.Conversion%2A> property is `null`.</span></span>  
  
 <span data-ttu-id="fef91-3452">Ниже описывается метод реализации, тип узла и ликвидирован ли данный узел.</span><span class="sxs-lookup"><span data-stu-id="fef91-3452">The following information describes the implementing method, the node type, and whether a node is lifted.</span></span>  
  
#### <a name="implementing-method"></a><span data-ttu-id="fef91-3453">Реализация метода</span><span class="sxs-lookup"><span data-stu-id="fef91-3453">Implementing Method</span></span>  
 <span data-ttu-id="fef91-3454">Следующие правила определяют выбранный метод реализации для операции:</span><span class="sxs-lookup"><span data-stu-id="fef91-3454">The following rules determine the selected implementing method for the operation:</span></span>  
  
-   <span data-ttu-id="fef91-3455">Если <xref:System.Linq.Expressions.Expression.Type%2A> свойству `left` или `right` представляет определяемый пользователем тип, который перегружает оператор вычитания <xref:System.Reflection.MethodInfo> , представляющий, что метод является методом реализации.</span><span class="sxs-lookup"><span data-stu-id="fef91-3455">If the <xref:System.Linq.Expressions.Expression.Type%2A> property of either `left` or `right` represents a user-defined type that overloads the subtraction operator, the <xref:System.Reflection.MethodInfo> that represents that method is the implementing method.</span></span>  
  
-   <span data-ttu-id="fef91-3456">В противном случае, если `left`. Тип и `right`. Тип: числовые типы, метод реализации является `null`.</span><span class="sxs-lookup"><span data-stu-id="fef91-3456">Otherwise, if `left`.Type and `right`.Type are numeric types, the implementing method is `null`.</span></span>  
  
#### <a name="node-type-and-lifted-versus-non-lifted"></a><span data-ttu-id="fef91-3457">Тип узла с ликвидацией или без</span><span class="sxs-lookup"><span data-stu-id="fef91-3457">Node Type and Lifted versus Non-Lifted</span></span>  
 <span data-ttu-id="fef91-3458">Если метод реализации не `null`:</span><span class="sxs-lookup"><span data-stu-id="fef91-3458">If the implementing method is not `null`:</span></span>  
  
-   <span data-ttu-id="fef91-3459">Если `left`. Тип и `right`. Тип могут быть присвоены соответствующие типы аргументов метода реализации, узел не удаляется.</span><span class="sxs-lookup"><span data-stu-id="fef91-3459">If `left`.Type and `right`.Type are assignable to the corresponding argument types of the implementing method, the node is not lifted.</span></span> <span data-ttu-id="fef91-3460">Тип узла — тип возвращаемого значения метода реализации.</span><span class="sxs-lookup"><span data-stu-id="fef91-3460">The type of the node is the return type of the implementing method.</span></span>  
  
-   <span data-ttu-id="fef91-3461">Если выполняются два следующих условия, узел удаляется, а тип узла — обнуляемый тип, соответствующий тип возвращаемого значения метода реализации:</span><span class="sxs-lookup"><span data-stu-id="fef91-3461">If the following two conditions are satisfied, the node is lifted and the type of the node is the nullable type that corresponds to the return type of the implementing method:</span></span>  
  
    -   <span data-ttu-id="fef91-3462">`left`. Тип и `right`. Тип: обоих типов значений, из которых хотя бы один допускает значения NULL и соответствующие типы, не допускающие значения null равны соответствующие типы аргументов метода реализации.</span><span class="sxs-lookup"><span data-stu-id="fef91-3462">`left`.Type and `right`.Type are both value types of which at least one is nullable and the corresponding non-nullable types are equal to the corresponding argument types of the implementing method.</span></span>  
  
    -   <span data-ttu-id="fef91-3463">Тип возвращаемого значения метода реализации является типом значения, не допускающие значения NULL.</span><span class="sxs-lookup"><span data-stu-id="fef91-3463">The return type of the implementing method is a non-nullable value type.</span></span>  
  
 <span data-ttu-id="fef91-3464">Если метод реализации `null`:</span><span class="sxs-lookup"><span data-stu-id="fef91-3464">If the implementing method is `null`:</span></span>  
  
-   <span data-ttu-id="fef91-3465">Если `left`. Тип и `right`. Тип: оба не поддерживающими значение NULL, узел не удаляется.</span><span class="sxs-lookup"><span data-stu-id="fef91-3465">If `left`.Type and `right`.Type are both non-nullable, the node is not lifted.</span></span> <span data-ttu-id="fef91-3466">Тип узла является типом результата определенного оператора вычитания.</span><span class="sxs-lookup"><span data-stu-id="fef91-3466">The type of the node is the result type of the predefined subtraction operator.</span></span>  
  
-   <span data-ttu-id="fef91-3467">Если `left`. Тип и `right`. Тип: значение NULL, узел удаляется.</span><span class="sxs-lookup"><span data-stu-id="fef91-3467">If `left`.Type and `right`.Type are both nullable, the node is lifted.</span></span> <span data-ttu-id="fef91-3468">Тип узла — обнуляемый тип, соответствующий тип результата определенного оператора вычитания.</span><span class="sxs-lookup"><span data-stu-id="fef91-3468">The type of the node is the nullable type that corresponds to the result type of the predefined subtraction operator.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="fef91-3469">В следующем примере кода показано, как создать выражение, которое вычитает аргумент из первого аргумента.</span><span class="sxs-lookup"><span data-stu-id="fef91-3469">The following code example shows how to create an expression that subtracts the argument from the first argument.</span></span>  
  
 [!code-csharp[System.Linq.Expressions.ExpressionDev10#30](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.linq.expressions.expressiondev10/cs/program.cs#30)]
 [!code-vb[System.Linq.Expressions.ExpressionDev10#30](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.linq.expressions.expressiondev10/vb/module1.vb#30)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="fef91-3470">Значение параметра <paramref name="left" /> или <paramref name="right" /> — <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fef91-3470">
              <paramref name="left" /> or <paramref name="right" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.InvalidOperationException">
          <span data-ttu-id="fef91-3471">Оператор вычитания не определен для типов <paramref name="left" />.Type и <paramref name="right" />.Type.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fef91-3471">The subtraction operator is not defined for <paramref name="left" />.Type and <paramref name="right" />.Type.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="Subtract">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.BinaryExpression Subtract (System.Linq.Expressions.Expression left, System.Linq.Expressions.Expression right, System.Reflection.MethodInfo method);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.BinaryExpression Subtract(class System.Linq.Expressions.Expression left, class System.Linq.Expressions.Expression right, class System.Reflection.MethodInfo method) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.Subtract(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Subtract (left As Expression, right As Expression, method As MethodInfo) As BinaryExpression" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Linq::Expressions::BinaryExpression ^ Subtract(System::Linq::Expressions::Expression ^ left, System::Linq::Expressions::Expression ^ right, System::Reflection::MethodInfo ^ method);" />
      <MemberSignature Language="F#" Value="static member Subtract : System.Linq.Expressions.Expression * System.Linq.Expressions.Expression * System.Reflection.MethodInfo -&gt; System.Linq.Expressions.BinaryExpression" Usage="System.Linq.Expressions.Expression.Subtract (left, right, method)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.BinaryExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="left" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="right" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="method" Type="System.Reflection.MethodInfo" />
      </Parameters>
      <Docs>
        <param name="left">
          <span data-ttu-id="fef91-3472">Объект <see cref="T:System.Linq.Expressions.Expression" />, который следует задать в качестве значения свойства <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fef91-3472">A <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> property equal to.</span>
          </span>
        </param>
        <param name="right">
          <span data-ttu-id="fef91-3473">Объект <see cref="T:System.Linq.Expressions.Expression" />, который следует задать в качестве значения свойства <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fef91-3473">A <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> property equal to.</span>
          </span>
        </param>
        <param name="method">
          <span data-ttu-id="fef91-3474">Объект <see cref="T:System.Reflection.MethodInfo" />, который следует задать в качестве значения свойства <see cref="P:System.Linq.Expressions.BinaryExpression.Method" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fef91-3474">A <see cref="T:System.Reflection.MethodInfo" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Method" /> property equal to.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="fef91-3475">Создает <see cref="T:System.Linq.Expressions.BinaryExpression" />, представляющий операцию арифметического вычитания, не содержащую проверку переполнения.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fef91-3475">Creates a <see cref="T:System.Linq.Expressions.BinaryExpression" /> that represents an arithmetic subtraction operation that does not have overflow checking.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="fef91-3476">Выражение <see cref="T:System.Linq.Expressions.BinaryExpression" /> со свойством <see cref="P:System.Linq.Expressions.Expression.NodeType" />, равным <see cref="F:System.Linq.Expressions.ExpressionType.Subtract" />, и свойствами <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />, <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> и <see cref="P:System.Linq.Expressions.BinaryExpression.Method" />, для которых заданы указанные значения.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fef91-3476">A <see cref="T:System.Linq.Expressions.BinaryExpression" /> that has the <see cref="P:System.Linq.Expressions.Expression.NodeType" /> property equal to <see cref="F:System.Linq.Expressions.ExpressionType.Subtract" /> and the <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />, <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />, and <see cref="P:System.Linq.Expressions.BinaryExpression.Method" /> properties set to the specified values.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="fef91-3477">Полученный в результате <xref:System.Linq.Expressions.BinaryExpression> имеет <xref:System.Linq.Expressions.BinaryExpression.Method%2A> свойство присвоено метод реализации.</span><span class="sxs-lookup"><span data-stu-id="fef91-3477">The resulting <xref:System.Linq.Expressions.BinaryExpression> has the <xref:System.Linq.Expressions.BinaryExpression.Method%2A> property set to the implementing method.</span></span> <span data-ttu-id="fef91-3478"><xref:System.Linq.Expressions.Expression.Type%2A> Свойству присваивается тип узла.</span><span class="sxs-lookup"><span data-stu-id="fef91-3478">The <xref:System.Linq.Expressions.Expression.Type%2A> property is set to the type of the node.</span></span> <span data-ttu-id="fef91-3479">Если узел удаляется, <xref:System.Linq.Expressions.BinaryExpression.IsLifted%2A> и <xref:System.Linq.Expressions.BinaryExpression.IsLiftedToNull%2A> оба являются свойства `true`.</span><span class="sxs-lookup"><span data-stu-id="fef91-3479">If the node is lifted, the <xref:System.Linq.Expressions.BinaryExpression.IsLifted%2A> and <xref:System.Linq.Expressions.BinaryExpression.IsLiftedToNull%2A> properties are both `true`.</span></span> <span data-ttu-id="fef91-3480">В противном случае они `false`.</span><span class="sxs-lookup"><span data-stu-id="fef91-3480">Otherwise, they are `false`.</span></span> <span data-ttu-id="fef91-3481">Значение свойства <xref:System.Linq.Expressions.BinaryExpression.Conversion%2A> — `null`.</span><span class="sxs-lookup"><span data-stu-id="fef91-3481">The <xref:System.Linq.Expressions.BinaryExpression.Conversion%2A> property is `null`.</span></span>  
  
 <span data-ttu-id="fef91-3482">Ниже описывается метод реализации, тип узла и ликвидирован ли данный узел.</span><span class="sxs-lookup"><span data-stu-id="fef91-3482">The following information describes the implementing method, the node type, and whether a node is lifted.</span></span>  
  
#### <a name="implementing-method"></a><span data-ttu-id="fef91-3483">Реализация метода</span><span class="sxs-lookup"><span data-stu-id="fef91-3483">Implementing Method</span></span>  
 <span data-ttu-id="fef91-3484">Следующие правила определяют метод реализации для операции:</span><span class="sxs-lookup"><span data-stu-id="fef91-3484">The following rules determine the implementing method for the operation:</span></span>  
  
-   <span data-ttu-id="fef91-3485">Если `method` не `null` , и это отличный от void, `static` (`Shared` в Visual Basic) метода, принимающего два аргумента, это метод реализации для узла.</span><span class="sxs-lookup"><span data-stu-id="fef91-3485">If `method` is not `null` and it represents a non-void, `static` (`Shared` in Visual Basic) method that takes two arguments, it is the implementing method for the node.</span></span>  
  
-   <span data-ttu-id="fef91-3486">В противном случае, если <xref:System.Linq.Expressions.Expression.Type%2A> свойству `left` или `right` представляет определяемый пользователем тип, который перегружает оператор вычитания <xref:System.Reflection.MethodInfo> , представляющий, что метод является методом реализации.</span><span class="sxs-lookup"><span data-stu-id="fef91-3486">Otherwise, if the <xref:System.Linq.Expressions.Expression.Type%2A> property of either `left` or `right` represents a user-defined type that overloads the subtraction operator, the <xref:System.Reflection.MethodInfo> that represents that method is the implementing method.</span></span>  
  
-   <span data-ttu-id="fef91-3487">В противном случае, если `left`. Тип и `right`. Тип: числовые типы, метод реализации является `null`.</span><span class="sxs-lookup"><span data-stu-id="fef91-3487">Otherwise, if `left`.Type and `right`.Type are numeric types, the implementing method is `null`.</span></span>  
  
#### <a name="node-type-and-lifted-versus-non-lifted"></a><span data-ttu-id="fef91-3488">Тип узла с ликвидацией или без</span><span class="sxs-lookup"><span data-stu-id="fef91-3488">Node Type and Lifted versus Non-Lifted</span></span>  
 <span data-ttu-id="fef91-3489">Если метод реализации не `null`:</span><span class="sxs-lookup"><span data-stu-id="fef91-3489">If the implementing method is not `null`:</span></span>  
  
-   <span data-ttu-id="fef91-3490">Если `left`. Тип и `right`. Тип могут быть присвоены соответствующие типы аргументов метода реализации, узел не удаляется.</span><span class="sxs-lookup"><span data-stu-id="fef91-3490">If `left`.Type and `right`.Type are assignable to the corresponding argument types of the implementing method, the node is not lifted.</span></span> <span data-ttu-id="fef91-3491">Тип узла — тип возвращаемого значения метода реализации.</span><span class="sxs-lookup"><span data-stu-id="fef91-3491">The type of the node is the return type of the implementing method.</span></span>  
  
-   <span data-ttu-id="fef91-3492">Если выполняются два следующих условия, узел удаляется, а тип узла — обнуляемый тип, соответствующий тип возвращаемого значения метода реализации:</span><span class="sxs-lookup"><span data-stu-id="fef91-3492">If the following two conditions are satisfied, the node is lifted and the type of the node is the nullable type that corresponds to the return type of the implementing method:</span></span>  
  
    -   <span data-ttu-id="fef91-3493">`left`. Тип и `right`. Тип: обоих типов значений, из которых хотя бы один допускает значения NULL и соответствующие типы, не допускающие значения null равны соответствующие типы аргументов метода реализации.</span><span class="sxs-lookup"><span data-stu-id="fef91-3493">`left`.Type and `right`.Type are both value types of which at least one is nullable and the corresponding non-nullable types are equal to the corresponding argument types of the implementing method.</span></span>  
  
    -   <span data-ttu-id="fef91-3494">Тип возвращаемого значения метода реализации является типом значения, не допускающие значения NULL.</span><span class="sxs-lookup"><span data-stu-id="fef91-3494">The return type of the implementing method is a non-nullable value type.</span></span>  
  
 <span data-ttu-id="fef91-3495">Если метод реализации `null`:</span><span class="sxs-lookup"><span data-stu-id="fef91-3495">If the implementing method is `null`:</span></span>  
  
-   <span data-ttu-id="fef91-3496">Если `left`. Тип и `right`. Тип: оба не поддерживающими значение NULL, узел не удаляется.</span><span class="sxs-lookup"><span data-stu-id="fef91-3496">If `left`.Type and `right`.Type are both non-nullable, the node is not lifted.</span></span> <span data-ttu-id="fef91-3497">Тип узла является типом результата определенного оператора вычитания.</span><span class="sxs-lookup"><span data-stu-id="fef91-3497">The type of the node is the result type of the predefined subtraction operator.</span></span>  
  
-   <span data-ttu-id="fef91-3498">Если `left`. Тип и `right`. Тип: значение NULL, узел удаляется.</span><span class="sxs-lookup"><span data-stu-id="fef91-3498">If `left`.Type and `right`.Type are both nullable, the node is lifted.</span></span> <span data-ttu-id="fef91-3499">Тип узла — обнуляемый тип, соответствующий тип результата определенного оператора вычитания.</span><span class="sxs-lookup"><span data-stu-id="fef91-3499">The type of the node is the nullable type that corresponds to the result type of the predefined subtraction operator.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="fef91-3500">Значение параметра <paramref name="left" /> или <paramref name="right" /> — <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fef91-3500">
              <paramref name="left" /> or <paramref name="right" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="fef91-3501">Значение параметра <paramref name="method" /> не равно <see langword="null" />, и метод, который оно представляет, возвращает <see langword="void" />, не является <see langword="static" /> (<see langword="Shared" /> в Visual Basic) и не принимает ровно два аргумента.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fef91-3501">
              <paramref name="method" /> is not <see langword="null" /> and the method it represents returns <see langword="void" />, is not <see langword="static" /> (<see langword="Shared" /> in Visual Basic), or does not take exactly two arguments.</span>
          </span>
        </exception>
        <exception cref="T:System.InvalidOperationException">
          <span data-ttu-id="fef91-3502">
            <paramref name="method" /> равно <see langword="null" />, а оператор вычитания не определен для типов <paramref name="left" />.Type и <paramref name="right" />.Type.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fef91-3502">
              <paramref name="method" /> is <see langword="null" /> and the subtraction operator is not defined for <paramref name="left" />.Type and <paramref name="right" />.Type.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <MemberGroup MemberName="SubtractAssign">
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="fef91-3503">Создает объект <see cref="T:System.Linq.Expressions.BinaryExpression" />, представляющий операцию присваивания вычитания, не содержащую проверку переполнения.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fef91-3503">Creates a <see cref="T:System.Linq.Expressions.BinaryExpression" /> that represents a subtraction assignment operation that does not have overflow checking.</span>
          </span>
        </summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="SubtractAssign">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.BinaryExpression SubtractAssign (System.Linq.Expressions.Expression left, System.Linq.Expressions.Expression right);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.BinaryExpression SubtractAssign(class System.Linq.Expressions.Expression left, class System.Linq.Expressions.Expression right) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.SubtractAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function SubtractAssign (left As Expression, right As Expression) As BinaryExpression" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Linq::Expressions::BinaryExpression ^ SubtractAssign(System::Linq::Expressions::Expression ^ left, System::Linq::Expressions::Expression ^ right);" />
      <MemberSignature Language="F#" Value="static member SubtractAssign : System.Linq.Expressions.Expression * System.Linq.Expressions.Expression -&gt; System.Linq.Expressions.BinaryExpression" Usage="System.Linq.Expressions.Expression.SubtractAssign (left, right)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.BinaryExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="left" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="right" Type="System.Linq.Expressions.Expression" />
      </Parameters>
      <Docs>
        <param name="left">
          <span data-ttu-id="fef91-3504">Объект <see cref="T:System.Linq.Expressions.Expression" />, который следует задать в качестве значения свойства <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fef91-3504">An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> property equal to.</span>
          </span>
        </param>
        <param name="right">
          <span data-ttu-id="fef91-3505">Объект <see cref="T:System.Linq.Expressions.Expression" />, который следует задать в качестве значения свойства <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fef91-3505">An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> property equal to.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="fef91-3506">Создает объект <see cref="T:System.Linq.Expressions.BinaryExpression" />, представляющий операцию присваивания вычитания, не содержащую проверку переполнения.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fef91-3506">Creates a <see cref="T:System.Linq.Expressions.BinaryExpression" /> that represents a subtraction assignment operation that does not have overflow checking.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="fef91-3507">Выражение <see cref="T:System.Linq.Expressions.BinaryExpression" /> со свойством<see cref="P:System.Linq.Expressions.Expression.NodeType" />, равным <see cref="F:System.Linq.Expressions.ExpressionType.SubtractAssign" />, и свойствами <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> и <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />, для которых заданы указанные значения.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fef91-3507">A <see cref="T:System.Linq.Expressions.BinaryExpression" /> that has the <see cref="P:System.Linq.Expressions.Expression.NodeType" /> property equal to <see cref="F:System.Linq.Expressions.ExpressionType.SubtractAssign" /> and the <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> and <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> properties set to the specified values.</span>
          </span>
        </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="SubtractAssign">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.BinaryExpression SubtractAssign (System.Linq.Expressions.Expression left, System.Linq.Expressions.Expression right, System.Reflection.MethodInfo method);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.BinaryExpression SubtractAssign(class System.Linq.Expressions.Expression left, class System.Linq.Expressions.Expression right, class System.Reflection.MethodInfo method) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.SubtractAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function SubtractAssign (left As Expression, right As Expression, method As MethodInfo) As BinaryExpression" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Linq::Expressions::BinaryExpression ^ SubtractAssign(System::Linq::Expressions::Expression ^ left, System::Linq::Expressions::Expression ^ right, System::Reflection::MethodInfo ^ method);" />
      <MemberSignature Language="F#" Value="static member SubtractAssign : System.Linq.Expressions.Expression * System.Linq.Expressions.Expression * System.Reflection.MethodInfo -&gt; System.Linq.Expressions.BinaryExpression" Usage="System.Linq.Expressions.Expression.SubtractAssign (left, right, method)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.BinaryExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="left" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="right" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="method" Type="System.Reflection.MethodInfo" />
      </Parameters>
      <Docs>
        <param name="left">
          <span data-ttu-id="fef91-3508">Объект <see cref="T:System.Linq.Expressions.Expression" />, который следует задать в качестве значения свойства <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fef91-3508">An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> property equal to.</span>
          </span>
        </param>
        <param name="right">
          <span data-ttu-id="fef91-3509">Объект <see cref="T:System.Linq.Expressions.Expression" />, который следует задать в качестве значения свойства <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fef91-3509">An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> property equal to.</span>
          </span>
        </param>
        <param name="method">
          <span data-ttu-id="fef91-3510">Объект <see cref="T:System.Reflection.MethodInfo" />, который следует задать в качестве значения свойства <see cref="P:System.Linq.Expressions.BinaryExpression.Method" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fef91-3510">A <see cref="T:System.Reflection.MethodInfo" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Method" /> property equal to.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="fef91-3511">Создает объект <see cref="T:System.Linq.Expressions.BinaryExpression" />, представляющий операцию присваивания вычитания, не содержащую проверку переполнения.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fef91-3511">Creates a <see cref="T:System.Linq.Expressions.BinaryExpression" /> that represents a subtraction assignment operation that does not have overflow checking.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="fef91-3512">Выражение <see cref="T:System.Linq.Expressions.BinaryExpression" /> со свойством <see cref="P:System.Linq.Expressions.Expression.NodeType" />, равным <see cref="F:System.Linq.Expressions.ExpressionType.SubtractAssign" />, и свойствами <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />, <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> и <see cref="P:System.Linq.Expressions.BinaryExpression.Method" />, для которых заданы указанные значения.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fef91-3512">A <see cref="T:System.Linq.Expressions.BinaryExpression" /> that has the <see cref="P:System.Linq.Expressions.Expression.NodeType" /> property equal to <see cref="F:System.Linq.Expressions.ExpressionType.SubtractAssign" /> and the <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />, <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />, and <see cref="P:System.Linq.Expressions.BinaryExpression.Method" /> properties set to the specified values.</span>
          </span>
        </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="SubtractAssign">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.BinaryExpression SubtractAssign (System.Linq.Expressions.Expression left, System.Linq.Expressions.Expression right, System.Reflection.MethodInfo method, System.Linq.Expressions.LambdaExpression conversion);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.BinaryExpression SubtractAssign(class System.Linq.Expressions.Expression left, class System.Linq.Expressions.Expression right, class System.Reflection.MethodInfo method, class System.Linq.Expressions.LambdaExpression conversion) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.SubtractAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo,System.Linq.Expressions.LambdaExpression)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function SubtractAssign (left As Expression, right As Expression, method As MethodInfo, conversion As LambdaExpression) As BinaryExpression" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Linq::Expressions::BinaryExpression ^ SubtractAssign(System::Linq::Expressions::Expression ^ left, System::Linq::Expressions::Expression ^ right, System::Reflection::MethodInfo ^ method, System::Linq::Expressions::LambdaExpression ^ conversion);" />
      <MemberSignature Language="F#" Value="static member SubtractAssign : System.Linq.Expressions.Expression * System.Linq.Expressions.Expression * System.Reflection.MethodInfo * System.Linq.Expressions.LambdaExpression -&gt; System.Linq.Expressions.BinaryExpression" Usage="System.Linq.Expressions.Expression.SubtractAssign (left, right, method, conversion)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.BinaryExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="left" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="right" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="method" Type="System.Reflection.MethodInfo" />
        <Parameter Name="conversion" Type="System.Linq.Expressions.LambdaExpression" />
      </Parameters>
      <Docs>
        <param name="left">
          <span data-ttu-id="fef91-3513">Объект <see cref="T:System.Linq.Expressions.Expression" />, который следует задать в качестве значения свойства <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fef91-3513">An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> property equal to.</span>
          </span>
        </param>
        <param name="right">
          <span data-ttu-id="fef91-3514">Объект <see cref="T:System.Linq.Expressions.Expression" />, который следует задать в качестве значения свойства <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fef91-3514">An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> property equal to.</span>
          </span>
        </param>
        <param name="method">
          <span data-ttu-id="fef91-3515">Объект <see cref="T:System.Reflection.MethodInfo" />, который следует задать в качестве значения свойства <see cref="P:System.Linq.Expressions.BinaryExpression.Method" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fef91-3515">A <see cref="T:System.Reflection.MethodInfo" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Method" /> property equal to.</span>
          </span>
        </param>
        <param name="conversion">
          <span data-ttu-id="fef91-3516">Объект <see cref="T:System.Linq.Expressions.LambdaExpression" />, который следует задать в качестве значения свойства <see cref="P:System.Linq.Expressions.BinaryExpression.Conversion" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fef91-3516">A <see cref="T:System.Linq.Expressions.LambdaExpression" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Conversion" /> property equal to.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="fef91-3517">Создает объект <see cref="T:System.Linq.Expressions.BinaryExpression" />, представляющий операцию присваивания вычитания, не содержащую проверку переполнения.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fef91-3517">Creates a <see cref="T:System.Linq.Expressions.BinaryExpression" /> that represents a subtraction assignment operation that does not have overflow checking.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="fef91-3518">Выражение <see cref="T:System.Linq.Expressions.BinaryExpression" />, содержащее свойство <see cref="P:System.Linq.Expressions.Expression.NodeType" />, равное <see cref="F:System.Linq.Expressions.ExpressionType.SubtractAssign" /> и <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />, <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />, <see cref="P:System.Linq.Expressions.BinaryExpression.Method" />, и свойства <see cref="P:System.Linq.Expressions.BinaryExpression.Conversion" />, для которых заданы указанные значения.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fef91-3518">A <see cref="T:System.Linq.Expressions.BinaryExpression" /> that has the <see cref="P:System.Linq.Expressions.Expression.NodeType" /> property equal to <see cref="F:System.Linq.Expressions.ExpressionType.SubtractAssign" /> and the <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />, <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />, <see cref="P:System.Linq.Expressions.BinaryExpression.Method" />, and <see cref="P:System.Linq.Expressions.BinaryExpression.Conversion" /> properties set to the specified values.</span>
          </span>
        </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="SubtractAssignChecked">
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="fef91-3519">Создает объект <see cref="T:System.Linq.Expressions.BinaryExpression" />, представляющий операцию присваивания вычитания, содержащую проверку переполнения.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fef91-3519">Creates a <see cref="T:System.Linq.Expressions.BinaryExpression" /> that represents a subtraction assignment operation that has overflow checking.</span>
          </span>
        </summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="SubtractAssignChecked">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.BinaryExpression SubtractAssignChecked (System.Linq.Expressions.Expression left, System.Linq.Expressions.Expression right);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.BinaryExpression SubtractAssignChecked(class System.Linq.Expressions.Expression left, class System.Linq.Expressions.Expression right) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.SubtractAssignChecked(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function SubtractAssignChecked (left As Expression, right As Expression) As BinaryExpression" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Linq::Expressions::BinaryExpression ^ SubtractAssignChecked(System::Linq::Expressions::Expression ^ left, System::Linq::Expressions::Expression ^ right);" />
      <MemberSignature Language="F#" Value="static member SubtractAssignChecked : System.Linq.Expressions.Expression * System.Linq.Expressions.Expression -&gt; System.Linq.Expressions.BinaryExpression" Usage="System.Linq.Expressions.Expression.SubtractAssignChecked (left, right)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.BinaryExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="left" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="right" Type="System.Linq.Expressions.Expression" />
      </Parameters>
      <Docs>
        <param name="left">
          <span data-ttu-id="fef91-3520">Объект <see cref="T:System.Linq.Expressions.Expression" />, который следует задать в качестве значения свойства <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fef91-3520">An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> property equal to.</span>
          </span>
        </param>
        <param name="right">
          <span data-ttu-id="fef91-3521">Объект <see cref="T:System.Linq.Expressions.Expression" />, который следует задать в качестве значения свойства <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fef91-3521">An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> property equal to.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="fef91-3522">Создает объект <see cref="T:System.Linq.Expressions.BinaryExpression" />, представляющий операцию присваивания вычитания, содержащую проверку переполнения.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fef91-3522">Creates a <see cref="T:System.Linq.Expressions.BinaryExpression" /> that represents a subtraction assignment operation that has overflow checking.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="fef91-3523">Выражение <see cref="T:System.Linq.Expressions.BinaryExpression" /> со свойством<see cref="P:System.Linq.Expressions.Expression.NodeType" />, равным <see cref="F:System.Linq.Expressions.ExpressionType.SubtractAssignChecked" />, и свойствами <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> и <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />, для которых заданы указанные значения.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fef91-3523">A <see cref="T:System.Linq.Expressions.BinaryExpression" /> that has the <see cref="P:System.Linq.Expressions.Expression.NodeType" /> property equal to <see cref="F:System.Linq.Expressions.ExpressionType.SubtractAssignChecked" /> and the <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> and <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> properties set to the specified values.</span>
          </span>
        </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="SubtractAssignChecked">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.BinaryExpression SubtractAssignChecked (System.Linq.Expressions.Expression left, System.Linq.Expressions.Expression right, System.Reflection.MethodInfo method);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.BinaryExpression SubtractAssignChecked(class System.Linq.Expressions.Expression left, class System.Linq.Expressions.Expression right, class System.Reflection.MethodInfo method) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.SubtractAssignChecked(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function SubtractAssignChecked (left As Expression, right As Expression, method As MethodInfo) As BinaryExpression" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Linq::Expressions::BinaryExpression ^ SubtractAssignChecked(System::Linq::Expressions::Expression ^ left, System::Linq::Expressions::Expression ^ right, System::Reflection::MethodInfo ^ method);" />
      <MemberSignature Language="F#" Value="static member SubtractAssignChecked : System.Linq.Expressions.Expression * System.Linq.Expressions.Expression * System.Reflection.MethodInfo -&gt; System.Linq.Expressions.BinaryExpression" Usage="System.Linq.Expressions.Expression.SubtractAssignChecked (left, right, method)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.BinaryExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="left" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="right" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="method" Type="System.Reflection.MethodInfo" />
      </Parameters>
      <Docs>
        <param name="left">
          <span data-ttu-id="fef91-3524">Объект <see cref="T:System.Linq.Expressions.Expression" />, который следует задать в качестве значения свойства <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fef91-3524">An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> property equal to.</span>
          </span>
        </param>
        <param name="right">
          <span data-ttu-id="fef91-3525">Объект <see cref="T:System.Linq.Expressions.Expression" />, который следует задать в качестве значения свойства <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fef91-3525">An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> property equal to.</span>
          </span>
        </param>
        <param name="method">
          <span data-ttu-id="fef91-3526">Объект <see cref="T:System.Reflection.MethodInfo" />, который следует задать в качестве значения свойства <see cref="P:System.Linq.Expressions.BinaryExpression.Method" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fef91-3526">A <see cref="T:System.Reflection.MethodInfo" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Method" /> property equal to.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="fef91-3527">Создает объект <see cref="T:System.Linq.Expressions.BinaryExpression" />, представляющий операцию присваивания вычитания, содержащую проверку переполнения.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fef91-3527">Creates a <see cref="T:System.Linq.Expressions.BinaryExpression" /> that represents a subtraction assignment operation that has overflow checking.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="fef91-3528">Выражение <see cref="T:System.Linq.Expressions.BinaryExpression" /> со свойством <see cref="P:System.Linq.Expressions.Expression.NodeType" />, равным <see cref="F:System.Linq.Expressions.ExpressionType.SubtractAssignChecked" />, и свойствами <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />, <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> и <see cref="P:System.Linq.Expressions.BinaryExpression.Method" />, для которых заданы указанные значения.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fef91-3528">A <see cref="T:System.Linq.Expressions.BinaryExpression" /> that has the <see cref="P:System.Linq.Expressions.Expression.NodeType" /> property equal to <see cref="F:System.Linq.Expressions.ExpressionType.SubtractAssignChecked" /> and the <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />, <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />, and <see cref="P:System.Linq.Expressions.BinaryExpression.Method" /> properties set to the specified values.</span>
          </span>
        </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="SubtractAssignChecked">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.BinaryExpression SubtractAssignChecked (System.Linq.Expressions.Expression left, System.Linq.Expressions.Expression right, System.Reflection.MethodInfo method, System.Linq.Expressions.LambdaExpression conversion);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.BinaryExpression SubtractAssignChecked(class System.Linq.Expressions.Expression left, class System.Linq.Expressions.Expression right, class System.Reflection.MethodInfo method, class System.Linq.Expressions.LambdaExpression conversion) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.SubtractAssignChecked(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo,System.Linq.Expressions.LambdaExpression)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function SubtractAssignChecked (left As Expression, right As Expression, method As MethodInfo, conversion As LambdaExpression) As BinaryExpression" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Linq::Expressions::BinaryExpression ^ SubtractAssignChecked(System::Linq::Expressions::Expression ^ left, System::Linq::Expressions::Expression ^ right, System::Reflection::MethodInfo ^ method, System::Linq::Expressions::LambdaExpression ^ conversion);" />
      <MemberSignature Language="F#" Value="static member SubtractAssignChecked : System.Linq.Expressions.Expression * System.Linq.Expressions.Expression * System.Reflection.MethodInfo * System.Linq.Expressions.LambdaExpression -&gt; System.Linq.Expressions.BinaryExpression" Usage="System.Linq.Expressions.Expression.SubtractAssignChecked (left, right, method, conversion)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.BinaryExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="left" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="right" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="method" Type="System.Reflection.MethodInfo" />
        <Parameter Name="conversion" Type="System.Linq.Expressions.LambdaExpression" />
      </Parameters>
      <Docs>
        <param name="left">
          <span data-ttu-id="fef91-3529">Объект <see cref="T:System.Linq.Expressions.Expression" />, который следует задать в качестве значения свойства <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fef91-3529">An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> property equal to.</span>
          </span>
        </param>
        <param name="right">
          <span data-ttu-id="fef91-3530">Объект <see cref="T:System.Linq.Expressions.Expression" />, который следует задать в качестве значения свойства <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fef91-3530">An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> property equal to.</span>
          </span>
        </param>
        <param name="method">
          <span data-ttu-id="fef91-3531">Объект <see cref="T:System.Reflection.MethodInfo" />, который следует задать в качестве значения свойства <see cref="P:System.Linq.Expressions.BinaryExpression.Method" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fef91-3531">A <see cref="T:System.Reflection.MethodInfo" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Method" /> property equal to.</span>
          </span>
        </param>
        <param name="conversion">
          <span data-ttu-id="fef91-3532">Объект <see cref="T:System.Linq.Expressions.LambdaExpression" />, который следует задать в качестве значения свойства <see cref="P:System.Linq.Expressions.BinaryExpression.Conversion" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fef91-3532">A <see cref="T:System.Linq.Expressions.LambdaExpression" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Conversion" /> property equal to.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="fef91-3533">Создает объект <see cref="T:System.Linq.Expressions.BinaryExpression" />, представляющий операцию присваивания вычитания, содержащую проверку переполнения.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fef91-3533">Creates a <see cref="T:System.Linq.Expressions.BinaryExpression" /> that represents a subtraction assignment operation that has overflow checking.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="fef91-3534">Выражение <see cref="T:System.Linq.Expressions.BinaryExpression" />, содержащее свойство <see cref="P:System.Linq.Expressions.Expression.NodeType" />, равное <see cref="F:System.Linq.Expressions.ExpressionType.SubtractAssignChecked" /> и <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />, <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />, <see cref="P:System.Linq.Expressions.BinaryExpression.Method" />, и свойства <see cref="P:System.Linq.Expressions.BinaryExpression.Conversion" />, для которых заданы указанные значения.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fef91-3534">A <see cref="T:System.Linq.Expressions.BinaryExpression" /> that has the <see cref="P:System.Linq.Expressions.Expression.NodeType" /> property equal to <see cref="F:System.Linq.Expressions.ExpressionType.SubtractAssignChecked" /> and the <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />, <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />, <see cref="P:System.Linq.Expressions.BinaryExpression.Method" />, and <see cref="P:System.Linq.Expressions.BinaryExpression.Conversion" /> properties set to the specified values.</span>
          </span>
        </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="SubtractChecked">
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="fef91-3535">Создает <see cref="T:System.Linq.Expressions.BinaryExpression" />, представляющий операцию арифметического вычитания, содержащую проверку переполнения.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fef91-3535">Creates a <see cref="T:System.Linq.Expressions.BinaryExpression" /> that represents an arithmetic subtraction operation that has overflow checking.</span>
          </span>
        </summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="SubtractChecked">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.BinaryExpression SubtractChecked (System.Linq.Expressions.Expression left, System.Linq.Expressions.Expression right);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.BinaryExpression SubtractChecked(class System.Linq.Expressions.Expression left, class System.Linq.Expressions.Expression right) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.SubtractChecked(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function SubtractChecked (left As Expression, right As Expression) As BinaryExpression" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Linq::Expressions::BinaryExpression ^ SubtractChecked(System::Linq::Expressions::Expression ^ left, System::Linq::Expressions::Expression ^ right);" />
      <MemberSignature Language="F#" Value="static member SubtractChecked : System.Linq.Expressions.Expression * System.Linq.Expressions.Expression -&gt; System.Linq.Expressions.BinaryExpression" Usage="System.Linq.Expressions.Expression.SubtractChecked (left, right)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.BinaryExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="left" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="right" Type="System.Linq.Expressions.Expression" />
      </Parameters>
      <Docs>
        <param name="left">
          <span data-ttu-id="fef91-3536">Объект <see cref="T:System.Linq.Expressions.Expression" />, который следует задать в качестве значения свойства <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fef91-3536">A <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> property equal to.</span>
          </span>
        </param>
        <param name="right">
          <span data-ttu-id="fef91-3537">Объект <see cref="T:System.Linq.Expressions.Expression" />, который следует задать в качестве значения свойства <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fef91-3537">A <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> property equal to.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="fef91-3538">Создает <see cref="T:System.Linq.Expressions.BinaryExpression" />, представляющий операцию арифметического вычитания, содержащую проверку переполнения.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fef91-3538">Creates a <see cref="T:System.Linq.Expressions.BinaryExpression" /> that represents an arithmetic subtraction operation that has overflow checking.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="fef91-3539">Выражение <see cref="T:System.Linq.Expressions.BinaryExpression" /> со свойством<see cref="P:System.Linq.Expressions.Expression.NodeType" />, равным <see cref="F:System.Linq.Expressions.ExpressionType.SubtractChecked" />, и свойствами <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> и <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />, для которых заданы указанные значения.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fef91-3539">A <see cref="T:System.Linq.Expressions.BinaryExpression" /> that has the <see cref="P:System.Linq.Expressions.Expression.NodeType" /> property equal to <see cref="F:System.Linq.Expressions.ExpressionType.SubtractChecked" /> and the <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> and <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> properties set to the specified values.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="fef91-3540">Полученный в результате <xref:System.Linq.Expressions.BinaryExpression> имеет <xref:System.Linq.Expressions.BinaryExpression.Method%2A> свойство присвоено метод реализации.</span><span class="sxs-lookup"><span data-stu-id="fef91-3540">The resulting <xref:System.Linq.Expressions.BinaryExpression> has the <xref:System.Linq.Expressions.BinaryExpression.Method%2A> property set to the implementing method.</span></span> <span data-ttu-id="fef91-3541"><xref:System.Linq.Expressions.Expression.Type%2A> Свойству присваивается тип узла.</span><span class="sxs-lookup"><span data-stu-id="fef91-3541">The <xref:System.Linq.Expressions.Expression.Type%2A> property is set to the type of the node.</span></span> <span data-ttu-id="fef91-3542">Если узел удаляется, <xref:System.Linq.Expressions.BinaryExpression.IsLifted%2A> и <xref:System.Linq.Expressions.BinaryExpression.IsLiftedToNull%2A> оба являются свойства `true`.</span><span class="sxs-lookup"><span data-stu-id="fef91-3542">If the node is lifted, the <xref:System.Linq.Expressions.BinaryExpression.IsLifted%2A> and <xref:System.Linq.Expressions.BinaryExpression.IsLiftedToNull%2A> properties are both `true`.</span></span> <span data-ttu-id="fef91-3543">В противном случае они `false`.</span><span class="sxs-lookup"><span data-stu-id="fef91-3543">Otherwise, they are `false`.</span></span> <span data-ttu-id="fef91-3544">Значение свойства <xref:System.Linq.Expressions.BinaryExpression.Conversion%2A> — `null`.</span><span class="sxs-lookup"><span data-stu-id="fef91-3544">The <xref:System.Linq.Expressions.BinaryExpression.Conversion%2A> property is `null`.</span></span>  
  
 <span data-ttu-id="fef91-3545">Ниже описывается метод реализации, тип узла и ликвидирован ли данный узел.</span><span class="sxs-lookup"><span data-stu-id="fef91-3545">The following information describes the implementing method, the node type, and whether a node is lifted.</span></span>  
  
#### <a name="implementing-method"></a><span data-ttu-id="fef91-3546">Реализация метода</span><span class="sxs-lookup"><span data-stu-id="fef91-3546">Implementing Method</span></span>  
 <span data-ttu-id="fef91-3547">Следующие правила определяют выбранный метод реализации для операции:</span><span class="sxs-lookup"><span data-stu-id="fef91-3547">The following rules determine the selected implementing method for the operation:</span></span>  
  
-   <span data-ttu-id="fef91-3548">Если <xref:System.Linq.Expressions.Expression.Type%2A> свойству `left` или `right` представляет определяемый пользователем тип, который перегружает оператор вычитания <xref:System.Reflection.MethodInfo> , представляющий, что метод является методом реализации.</span><span class="sxs-lookup"><span data-stu-id="fef91-3548">If the <xref:System.Linq.Expressions.Expression.Type%2A> property of either `left` or `right` represents a user-defined type that overloads the subtraction operator, the <xref:System.Reflection.MethodInfo> that represents that method is the implementing method.</span></span>  
  
-   <span data-ttu-id="fef91-3549">В противном случае, если `left`. Тип и `right`. Тип: числовые типы, метод реализации является `null`.</span><span class="sxs-lookup"><span data-stu-id="fef91-3549">Otherwise, if `left`.Type and `right`.Type are numeric types, the implementing method is `null`.</span></span>  
  
#### <a name="node-type-and-lifted-versus-non-lifted"></a><span data-ttu-id="fef91-3550">Тип узла с ликвидацией или без</span><span class="sxs-lookup"><span data-stu-id="fef91-3550">Node Type and Lifted versus Non-Lifted</span></span>  
 <span data-ttu-id="fef91-3551">Если метод реализации не `null`:</span><span class="sxs-lookup"><span data-stu-id="fef91-3551">If the implementing method is not `null`:</span></span>  
  
-   <span data-ttu-id="fef91-3552">Если `left`. Тип и `right`. Тип могут быть присвоены соответствующие типы аргументов метода реализации, узел не удаляется.</span><span class="sxs-lookup"><span data-stu-id="fef91-3552">If `left`.Type and `right`.Type are assignable to the corresponding argument types of the implementing method, the node is not lifted.</span></span> <span data-ttu-id="fef91-3553">Тип узла — тип возвращаемого значения метода реализации.</span><span class="sxs-lookup"><span data-stu-id="fef91-3553">The type of the node is the return type of the implementing method.</span></span>  
  
-   <span data-ttu-id="fef91-3554">Если выполняются два следующих условия, узел удаляется, а тип узла — обнуляемый тип, соответствующий тип возвращаемого значения метода реализации:</span><span class="sxs-lookup"><span data-stu-id="fef91-3554">If the following two conditions are satisfied, the node is lifted and the type of the node is the nullable type that corresponds to the return type of the implementing method:</span></span>  
  
    -   <span data-ttu-id="fef91-3555">`left`. Тип и `right`. Тип: обоих типов значений, из которых хотя бы один допускает значения NULL и соответствующие типы, не допускающие значения null равны соответствующие типы аргументов метода реализации.</span><span class="sxs-lookup"><span data-stu-id="fef91-3555">`left`.Type and `right`.Type are both value types of which at least one is nullable and the corresponding non-nullable types are equal to the corresponding argument types of the implementing method.</span></span>  
  
    -   <span data-ttu-id="fef91-3556">Тип возвращаемого значения метода реализации является типом значения, не допускающие значения NULL.</span><span class="sxs-lookup"><span data-stu-id="fef91-3556">The return type of the implementing method is a non-nullable value type.</span></span>  
  
 <span data-ttu-id="fef91-3557">Если метод реализации `null`:</span><span class="sxs-lookup"><span data-stu-id="fef91-3557">If the implementing method is `null`:</span></span>  
  
-   <span data-ttu-id="fef91-3558">Если `left`. Тип и `right`. Тип: оба не поддерживающими значение NULL, узел не удаляется.</span><span class="sxs-lookup"><span data-stu-id="fef91-3558">If `left`.Type and `right`.Type are both non-nullable, the node is not lifted.</span></span> <span data-ttu-id="fef91-3559">Тип узла является типом результата определенного оператора вычитания.</span><span class="sxs-lookup"><span data-stu-id="fef91-3559">The type of the node is the result type of the predefined subtraction operator.</span></span>  
  
-   <span data-ttu-id="fef91-3560">Если `left`. Тип и `right`. Тип: значение NULL, узел удаляется.</span><span class="sxs-lookup"><span data-stu-id="fef91-3560">If `left`.Type and `right`.Type are both nullable, the node is lifted.</span></span> <span data-ttu-id="fef91-3561">Тип узла — обнуляемый тип, соответствующий тип результата определенного оператора вычитания.</span><span class="sxs-lookup"><span data-stu-id="fef91-3561">The type of the node is the nullable type that corresponds to the result type of the predefined subtraction operator.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="fef91-3562">Значение параметра <paramref name="left" /> или <paramref name="right" /> — <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fef91-3562">
              <paramref name="left" /> or <paramref name="right" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.InvalidOperationException">
          <span data-ttu-id="fef91-3563">Оператор вычитания не определен для типов <paramref name="left" />.Type и <paramref name="right" />.Type.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fef91-3563">The subtraction operator is not defined for <paramref name="left" />.Type and <paramref name="right" />.Type.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="SubtractChecked">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.BinaryExpression SubtractChecked (System.Linq.Expressions.Expression left, System.Linq.Expressions.Expression right, System.Reflection.MethodInfo method);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.BinaryExpression SubtractChecked(class System.Linq.Expressions.Expression left, class System.Linq.Expressions.Expression right, class System.Reflection.MethodInfo method) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.SubtractChecked(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function SubtractChecked (left As Expression, right As Expression, method As MethodInfo) As BinaryExpression" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Linq::Expressions::BinaryExpression ^ SubtractChecked(System::Linq::Expressions::Expression ^ left, System::Linq::Expressions::Expression ^ right, System::Reflection::MethodInfo ^ method);" />
      <MemberSignature Language="F#" Value="static member SubtractChecked : System.Linq.Expressions.Expression * System.Linq.Expressions.Expression * System.Reflection.MethodInfo -&gt; System.Linq.Expressions.BinaryExpression" Usage="System.Linq.Expressions.Expression.SubtractChecked (left, right, method)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.BinaryExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="left" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="right" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="method" Type="System.Reflection.MethodInfo" />
      </Parameters>
      <Docs>
        <param name="left">
          <span data-ttu-id="fef91-3564">Объект <see cref="T:System.Linq.Expressions.Expression" />, который следует задать в качестве значения свойства <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fef91-3564">A <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> property equal to.</span>
          </span>
        </param>
        <param name="right">
          <span data-ttu-id="fef91-3565">Объект <see cref="T:System.Linq.Expressions.Expression" />, который следует задать в качестве значения свойства <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fef91-3565">A <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> property equal to.</span>
          </span>
        </param>
        <param name="method">
          <span data-ttu-id="fef91-3566">Объект <see cref="T:System.Reflection.MethodInfo" />, который следует задать в качестве значения свойства <see cref="P:System.Linq.Expressions.BinaryExpression.Method" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fef91-3566">A <see cref="T:System.Reflection.MethodInfo" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Method" /> property equal to.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="fef91-3567">Создает <see cref="T:System.Linq.Expressions.BinaryExpression" />, представляющий операцию арифметического вычитания, содержащую проверку переполнения.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fef91-3567">Creates a <see cref="T:System.Linq.Expressions.BinaryExpression" /> that represents an arithmetic subtraction operation that has overflow checking.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="fef91-3568">Выражение <see cref="T:System.Linq.Expressions.BinaryExpression" /> со свойством <see cref="P:System.Linq.Expressions.Expression.NodeType" />, равным <see cref="F:System.Linq.Expressions.ExpressionType.SubtractChecked" />, и свойствами <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />, <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> и <see cref="P:System.Linq.Expressions.BinaryExpression.Method" />, для которых заданы указанные значения.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fef91-3568">A <see cref="T:System.Linq.Expressions.BinaryExpression" /> that has the <see cref="P:System.Linq.Expressions.Expression.NodeType" /> property equal to <see cref="F:System.Linq.Expressions.ExpressionType.SubtractChecked" /> and the <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />, <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />, and <see cref="P:System.Linq.Expressions.BinaryExpression.Method" /> properties set to the specified values.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="fef91-3569">Полученный в результате <xref:System.Linq.Expressions.BinaryExpression> имеет <xref:System.Linq.Expressions.BinaryExpression.Method%2A> свойство присвоено метод реализации.</span><span class="sxs-lookup"><span data-stu-id="fef91-3569">The resulting <xref:System.Linq.Expressions.BinaryExpression> has the <xref:System.Linq.Expressions.BinaryExpression.Method%2A> property set to the implementing method.</span></span> <span data-ttu-id="fef91-3570"><xref:System.Linq.Expressions.Expression.Type%2A> Свойству присваивается тип узла.</span><span class="sxs-lookup"><span data-stu-id="fef91-3570">The <xref:System.Linq.Expressions.Expression.Type%2A> property is set to the type of the node.</span></span> <span data-ttu-id="fef91-3571">Если узел удаляется, <xref:System.Linq.Expressions.BinaryExpression.IsLifted%2A> и <xref:System.Linq.Expressions.BinaryExpression.IsLiftedToNull%2A> оба являются свойства `true`.</span><span class="sxs-lookup"><span data-stu-id="fef91-3571">If the node is lifted, the <xref:System.Linq.Expressions.BinaryExpression.IsLifted%2A> and <xref:System.Linq.Expressions.BinaryExpression.IsLiftedToNull%2A> properties are both `true`.</span></span> <span data-ttu-id="fef91-3572">В противном случае они `false`.</span><span class="sxs-lookup"><span data-stu-id="fef91-3572">Otherwise, they are `false`.</span></span> <span data-ttu-id="fef91-3573">Значение свойства <xref:System.Linq.Expressions.BinaryExpression.Conversion%2A> — `null`.</span><span class="sxs-lookup"><span data-stu-id="fef91-3573">The <xref:System.Linq.Expressions.BinaryExpression.Conversion%2A> property is `null`.</span></span>  
  
 <span data-ttu-id="fef91-3574">Ниже описывается метод реализации, тип узла и ликвидирован ли данный узел.</span><span class="sxs-lookup"><span data-stu-id="fef91-3574">The following information describes the implementing method, the node type, and whether a node is lifted.</span></span>  
  
#### <a name="implementing-method"></a><span data-ttu-id="fef91-3575">Реализация метода</span><span class="sxs-lookup"><span data-stu-id="fef91-3575">Implementing Method</span></span>  
 <span data-ttu-id="fef91-3576">Следующие правила определяют метод реализации для операции:</span><span class="sxs-lookup"><span data-stu-id="fef91-3576">The following rules determine the implementing method for the operation :</span></span>  
  
-   <span data-ttu-id="fef91-3577">Если `method` не `null` , и это отличный от void, `static` (`Shared` в Visual Basic) метода, принимающего два аргумента, это метод реализации для узла.</span><span class="sxs-lookup"><span data-stu-id="fef91-3577">If `method` is not `null` and it represents a non-void, `static` (`Shared` in Visual Basic) method that takes two arguments, it is the implementing method for the node.</span></span>  
  
-   <span data-ttu-id="fef91-3578">В противном случае, если <xref:System.Linq.Expressions.Expression.Type%2A> свойству `left` или `right` представляет определяемый пользователем тип, который перегружает оператор вычитания <xref:System.Reflection.MethodInfo> , представляющий, что метод является методом реализации.</span><span class="sxs-lookup"><span data-stu-id="fef91-3578">Otherwise, if the <xref:System.Linq.Expressions.Expression.Type%2A> property of either `left` or `right` represents a user-defined type that overloads the subtraction operator, the <xref:System.Reflection.MethodInfo> that represents that method is the implementing method.</span></span>  
  
-   <span data-ttu-id="fef91-3579">В противном случае, если `left`. Тип и `right`. Тип: числовые типы, метод реализации является `null`.</span><span class="sxs-lookup"><span data-stu-id="fef91-3579">Otherwise, if `left`.Type and `right`.Type are numeric types, the implementing method is `null`.</span></span>  
  
#### <a name="node-type-and-lifted-versus-non-lifted"></a><span data-ttu-id="fef91-3580">Тип узла с ликвидацией или без</span><span class="sxs-lookup"><span data-stu-id="fef91-3580">Node Type and Lifted versus Non-Lifted</span></span>  
 <span data-ttu-id="fef91-3581">Если метод реализации не `null`:</span><span class="sxs-lookup"><span data-stu-id="fef91-3581">If the implementing method is not `null`:</span></span>  
  
-   <span data-ttu-id="fef91-3582">Если `left`. Тип и `right`. Тип могут быть присвоены соответствующие типы аргументов метода реализации, узел не удаляется.</span><span class="sxs-lookup"><span data-stu-id="fef91-3582">If `left`.Type and `right`.Type are assignable to the corresponding argument types of the implementing method, the node is not lifted.</span></span> <span data-ttu-id="fef91-3583">Тип узла — тип возвращаемого значения метода реализации.</span><span class="sxs-lookup"><span data-stu-id="fef91-3583">The type of the node is the return type of the implementing method.</span></span>  
  
-   <span data-ttu-id="fef91-3584">Если выполняются два следующих условия, узел удаляется, а тип узла — обнуляемый тип, соответствующий тип возвращаемого значения метода реализации:</span><span class="sxs-lookup"><span data-stu-id="fef91-3584">If the following two conditions are satisfied, the node is lifted and the type of the node is the nullable type that corresponds to the return type of the implementing method:</span></span>  
  
    -   <span data-ttu-id="fef91-3585">`left`. Тип и `right`. Тип: обоих типов значений, из которых хотя бы один допускает значения NULL и соответствующие типы, не допускающие значения null равны соответствующие типы аргументов метода реализации.</span><span class="sxs-lookup"><span data-stu-id="fef91-3585">`left`.Type and `right`.Type are both value types of which at least one is nullable and the corresponding non-nullable types are equal to the corresponding argument types of the implementing method.</span></span>  
  
    -   <span data-ttu-id="fef91-3586">Тип возвращаемого значения метода реализации является типом значения, не допускающие значения NULL.</span><span class="sxs-lookup"><span data-stu-id="fef91-3586">The return type of the implementing method is a non-nullable value type.</span></span>  
  
 <span data-ttu-id="fef91-3587">Если метод реализации `null`:</span><span class="sxs-lookup"><span data-stu-id="fef91-3587">If the implementing method is `null`:</span></span>  
  
-   <span data-ttu-id="fef91-3588">Если `left`. Тип и `right`. Тип: оба не поддерживающими значение NULL, узел не удаляется.</span><span class="sxs-lookup"><span data-stu-id="fef91-3588">If `left`.Type and `right`.Type are both non-nullable, the node is not lifted.</span></span> <span data-ttu-id="fef91-3589">Тип узла является типом результата определенного оператора вычитания.</span><span class="sxs-lookup"><span data-stu-id="fef91-3589">The type of the node is the result type of the predefined subtraction operator.</span></span>  
  
-   <span data-ttu-id="fef91-3590">Если `left`. Тип и `right`. Тип: значение NULL, узел удаляется.</span><span class="sxs-lookup"><span data-stu-id="fef91-3590">If `left`.Type and `right`.Type are both nullable, the node is lifted.</span></span> <span data-ttu-id="fef91-3591">Тип узла — обнуляемый тип, соответствующий тип результата определенного оператора вычитания.</span><span class="sxs-lookup"><span data-stu-id="fef91-3591">The type of the node is the nullable type that corresponds to the result type of the predefined subtraction operator.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="fef91-3592">Значение параметра <paramref name="left" /> или <paramref name="right" /> — <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fef91-3592">
              <paramref name="left" /> or <paramref name="right" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="fef91-3593">Значение параметра <paramref name="method" /> не равно <see langword="null" />, и метод, который оно представляет, возвращает <see langword="void" />, не является <see langword="static" /> (<see langword="Shared" /> в Visual Basic) и не принимает ровно два аргумента.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fef91-3593">
              <paramref name="method" /> is not <see langword="null" /> and the method it represents returns <see langword="void" />, is not <see langword="static" /> (<see langword="Shared" /> in Visual Basic), or does not take exactly two arguments.</span>
          </span>
        </exception>
        <exception cref="T:System.InvalidOperationException">
          <span data-ttu-id="fef91-3594">
            <paramref name="method" /> равно <see langword="null" />, а оператор вычитания не определен для типов <paramref name="left" />.Type и <paramref name="right" />.Type.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fef91-3594">
              <paramref name="method" /> is <see langword="null" /> and the subtraction operator is not defined for <paramref name="left" />.Type and <paramref name="right" />.Type.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <MemberGroup MemberName="Switch">
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="fef91-3595">Создает объект <see cref="T:System.Linq.Expressions.SwitchExpression" />, представляющий оператор <see langword="switch" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fef91-3595">Creates a <see cref="T:System.Linq.Expressions.SwitchExpression" /> that represents a <see langword="switch" /> statement.</span>
          </span>
        </summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Switch">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.SwitchExpression Switch (System.Linq.Expressions.Expression switchValue, params System.Linq.Expressions.SwitchCase[] cases);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.SwitchExpression Switch(class System.Linq.Expressions.Expression switchValue, class System.Linq.Expressions.SwitchCase[] cases) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.Switch(System.Linq.Expressions.Expression,System.Linq.Expressions.SwitchCase[])" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Switch (switchValue As Expression, ParamArray cases As SwitchCase()) As SwitchExpression" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Linq::Expressions::SwitchExpression ^ Switch(System::Linq::Expressions::Expression ^ switchValue, ... cli::array &lt;System::Linq::Expressions::SwitchCase ^&gt; ^ cases);" />
      <MemberSignature Language="F#" Value="static member Switch : System.Linq.Expressions.Expression * System.Linq.Expressions.SwitchCase[] -&gt; System.Linq.Expressions.SwitchExpression" Usage="System.Linq.Expressions.Expression.Switch (switchValue, cases)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.SwitchExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="switchValue" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="cases" Type="System.Linq.Expressions.SwitchCase[]">
          <Attributes>
            <Attribute>
              <AttributeName>System.ParamArray</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="switchValue">
          <span data-ttu-id="fef91-3596">Значение, проверяемое для каждого варианта case.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fef91-3596">The value to be tested against each case.</span>
          </span>
        </param>
        <param name="cases">
          <span data-ttu-id="fef91-3597">Набор вариантов case для данного выражения switch.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fef91-3597">The set of cases for this switch expression.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="fef91-3598">Создает объект <see cref="T:System.Linq.Expressions.SwitchExpression" />, представляющий <see langword="switch" /> без варианта по умолчанию.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fef91-3598">Creates a <see cref="T:System.Linq.Expressions.SwitchExpression" /> that represents a <see langword="switch" /> statement without a default case.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="fef91-3599">Созданный <see cref="T:System.Linq.Expressions.SwitchExpression" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fef91-3599">The created <see cref="T:System.Linq.Expressions.SwitchExpression" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="fef91-3600">Все <xref:System.Linq.Expressions.SwitchCase> объекты в <xref:System.Linq.Expressions.SwitchExpression> объекта должны иметь тот же тип, кроме случаев <xref:System.Linq.Expressions.SwitchExpression> имеет тип `void`.</span><span class="sxs-lookup"><span data-stu-id="fef91-3600">All <xref:System.Linq.Expressions.SwitchCase> objects in a <xref:System.Linq.Expressions.SwitchExpression> object must have the same type, unless the <xref:System.Linq.Expressions.SwitchExpression> has the type `void`.</span></span>  
  
 <span data-ttu-id="fef91-3601">Каждый <xref:System.Linq.Expressions.SwitchCase> объект имеет неявный `break` инструкцию, которая означает, что нет неявного вниз от одной метки case в другой.</span><span class="sxs-lookup"><span data-stu-id="fef91-3601">Each <xref:System.Linq.Expressions.SwitchCase> object has an implicit `break` statement, which means that there is no implicit fall through from one case label to another.</span></span>  
  
 <span data-ttu-id="fef91-3602">Если `switchValue` не соответствует ни одному из вариантов, исключение не создается.</span><span class="sxs-lookup"><span data-stu-id="fef91-3602">If `switchValue` does not match any of the cases, no exception is thrown.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="fef91-3603">Следующий пример демонстрирует создание выражения, которое представляет коммутатор оператор без варианта по умолчанию.</span><span class="sxs-lookup"><span data-stu-id="fef91-3603">The following example demonstrates how to create an expression that represents a swtich statement without a default case.</span></span>  
  
 [!code-csharp[System.Linq.Expressions.ExpressionDev10#34](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.linq.expressions.expressiondev10/cs/program.cs#34)]
 [!code-vb[System.Linq.Expressions.ExpressionDev10#34](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.linq.expressions.expressiondev10/vb/module1.vb#34)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Switch">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.SwitchExpression Switch (System.Linq.Expressions.Expression switchValue, System.Linq.Expressions.Expression defaultBody, params System.Linq.Expressions.SwitchCase[] cases);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.SwitchExpression Switch(class System.Linq.Expressions.Expression switchValue, class System.Linq.Expressions.Expression defaultBody, class System.Linq.Expressions.SwitchCase[] cases) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.Switch(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.SwitchCase[])" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Switch (switchValue As Expression, defaultBody As Expression, ParamArray cases As SwitchCase()) As SwitchExpression" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Linq::Expressions::SwitchExpression ^ Switch(System::Linq::Expressions::Expression ^ switchValue, System::Linq::Expressions::Expression ^ defaultBody, ... cli::array &lt;System::Linq::Expressions::SwitchCase ^&gt; ^ cases);" />
      <MemberSignature Language="F#" Value="static member Switch : System.Linq.Expressions.Expression * System.Linq.Expressions.Expression * System.Linq.Expressions.SwitchCase[] -&gt; System.Linq.Expressions.SwitchExpression" Usage="System.Linq.Expressions.Expression.Switch (switchValue, defaultBody, cases)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.SwitchExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="switchValue" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="defaultBody" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="cases" Type="System.Linq.Expressions.SwitchCase[]">
          <Attributes>
            <Attribute>
              <AttributeName>System.ParamArray</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="switchValue">
          <span data-ttu-id="fef91-3604">Значение, проверяемое для каждого варианта case.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fef91-3604">The value to be tested against each case.</span>
          </span>
        </param>
        <param name="defaultBody">
          <span data-ttu-id="fef91-3605">Результат оператора switch, если <c>switchValue</c> не соответствует ни одному из вариантов case.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fef91-3605">The result of the switch if <c>switchValue</c> does not match any of the cases.</span>
          </span>
        </param>
        <param name="cases">
          <span data-ttu-id="fef91-3606">Набор вариантов case для данного выражения switch.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fef91-3606">The set of cases for this switch expression.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="fef91-3607">Создает объект <see cref="T:System.Linq.Expressions.SwitchExpression" />, представляющий оператор <see langword="switch" /> с вариантом по умолчанию.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fef91-3607">Creates a <see cref="T:System.Linq.Expressions.SwitchExpression" /> that represents a <see langword="switch" /> statement that has a default case.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="fef91-3608">Созданный <see cref="T:System.Linq.Expressions.SwitchExpression" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fef91-3608">The created <see cref="T:System.Linq.Expressions.SwitchExpression" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="fef91-3609">Все <xref:System.Linq.Expressions.SwitchCase> объекты в <xref:System.Linq.Expressions.SwitchExpression> объекта должны иметь тот же тип, кроме случаев <xref:System.Linq.Expressions.SwitchExpression> имеет тип `void`.</span><span class="sxs-lookup"><span data-stu-id="fef91-3609">All <xref:System.Linq.Expressions.SwitchCase> objects in a <xref:System.Linq.Expressions.SwitchExpression> object must have the same type, unless the <xref:System.Linq.Expressions.SwitchExpression> has the type `void`.</span></span>  
  
 <span data-ttu-id="fef91-3610">Каждый <xref:System.Linq.Expressions.SwitchCase> объект имеет неявный `break` инструкцию, которая означает, что нет неявного вниз от одной метки case в другой.</span><span class="sxs-lookup"><span data-stu-id="fef91-3610">Each <xref:System.Linq.Expressions.SwitchCase> object has an implicit `break` statement, which means that there is no implicit fall through from one case label to another.</span></span>  
  
 <span data-ttu-id="fef91-3611">Если `switchValue` не соответствует ни одному из вариантов, в ситуации по умолчанию, представленное `defaultBody` выполняется.</span><span class="sxs-lookup"><span data-stu-id="fef91-3611">If `switchValue` does not match any of the cases, the default case represented by `defaultBody` is run.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="fef91-3612">Следующий пример демонстрирует создание выражения, которое представляет коммутатор оператор с вариантом по умолчанию.</span><span class="sxs-lookup"><span data-stu-id="fef91-3612">The following example demonstrates how to create an expression that represents a swtich statement that has a default case.</span></span>  
  
 [!code-csharp[System.Linq.Expressions.ExpressionDev10#35](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.linq.expressions.expressiondev10/cs/program.cs#35)]
 [!code-vb[System.Linq.Expressions.ExpressionDev10#35](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.linq.expressions.expressiondev10/vb/module1.vb#35)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Switch">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.SwitchExpression Switch (System.Linq.Expressions.Expression switchValue, System.Linq.Expressions.Expression defaultBody, System.Reflection.MethodInfo comparison, System.Collections.Generic.IEnumerable&lt;System.Linq.Expressions.SwitchCase&gt; cases);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.SwitchExpression Switch(class System.Linq.Expressions.Expression switchValue, class System.Linq.Expressions.Expression defaultBody, class System.Reflection.MethodInfo comparison, class System.Collections.Generic.IEnumerable`1&lt;class System.Linq.Expressions.SwitchCase&gt; cases) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.Switch(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo,System.Collections.Generic.IEnumerable{System.Linq.Expressions.SwitchCase})" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Switch (switchValue As Expression, defaultBody As Expression, comparison As MethodInfo, cases As IEnumerable(Of SwitchCase)) As SwitchExpression" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Linq::Expressions::SwitchExpression ^ Switch(System::Linq::Expressions::Expression ^ switchValue, System::Linq::Expressions::Expression ^ defaultBody, System::Reflection::MethodInfo ^ comparison, System::Collections::Generic::IEnumerable&lt;System::Linq::Expressions::SwitchCase ^&gt; ^ cases);" />
      <MemberSignature Language="F#" Value="static member Switch : System.Linq.Expressions.Expression * System.Linq.Expressions.Expression * System.Reflection.MethodInfo * seq&lt;System.Linq.Expressions.SwitchCase&gt; -&gt; System.Linq.Expressions.SwitchExpression" Usage="System.Linq.Expressions.Expression.Switch (switchValue, defaultBody, comparison, cases)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.SwitchExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="switchValue" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="defaultBody" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="comparison" Type="System.Reflection.MethodInfo" />
        <Parameter Name="cases" Type="System.Collections.Generic.IEnumerable&lt;System.Linq.Expressions.SwitchCase&gt;" />
      </Parameters>
      <Docs>
        <param name="switchValue">
          <span data-ttu-id="fef91-3613">Значение, проверяемое для каждого варианта case.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fef91-3613">The value to be tested against each case.</span>
          </span>
        </param>
        <param name="defaultBody">
          <span data-ttu-id="fef91-3614">Результат оператора switch, если <c>switchValue</c> не соответствует ни одному из вариантов case.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fef91-3614">The result of the switch if <c>switchValue</c> does not match any of the cases.</span>
          </span>
        </param>
        <param name="comparison">
          <span data-ttu-id="fef91-3615">Используемый метод проверки равенства.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fef91-3615">The equality comparison method to use.</span>
          </span>
        </param>
        <param name="cases">
          <span data-ttu-id="fef91-3616">Набор вариантов case для данного выражения switch.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fef91-3616">The set of cases for this switch expression.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="fef91-3617">Создает объект <see cref="T:System.Linq.Expressions.SwitchExpression" />, представляющий оператор <see langword="switch" /> с вариантом по умолчанию.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fef91-3617">Creates a <see cref="T:System.Linq.Expressions.SwitchExpression" /> that represents a <see langword="switch" /> statement that has a default case.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="fef91-3618">Созданный <see cref="T:System.Linq.Expressions.SwitchExpression" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fef91-3618">The created <see cref="T:System.Linq.Expressions.SwitchExpression" />.</span>
          </span>
        </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Switch">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.SwitchExpression Switch (System.Linq.Expressions.Expression switchValue, System.Linq.Expressions.Expression defaultBody, System.Reflection.MethodInfo comparison, params System.Linq.Expressions.SwitchCase[] cases);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.SwitchExpression Switch(class System.Linq.Expressions.Expression switchValue, class System.Linq.Expressions.Expression defaultBody, class System.Reflection.MethodInfo comparison, class System.Linq.Expressions.SwitchCase[] cases) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.Switch(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo,System.Linq.Expressions.SwitchCase[])" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Switch (switchValue As Expression, defaultBody As Expression, comparison As MethodInfo, ParamArray cases As SwitchCase()) As SwitchExpression" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Linq::Expressions::SwitchExpression ^ Switch(System::Linq::Expressions::Expression ^ switchValue, System::Linq::Expressions::Expression ^ defaultBody, System::Reflection::MethodInfo ^ comparison, ... cli::array &lt;System::Linq::Expressions::SwitchCase ^&gt; ^ cases);" />
      <MemberSignature Language="F#" Value="static member Switch : System.Linq.Expressions.Expression * System.Linq.Expressions.Expression * System.Reflection.MethodInfo * System.Linq.Expressions.SwitchCase[] -&gt; System.Linq.Expressions.SwitchExpression" Usage="System.Linq.Expressions.Expression.Switch (switchValue, defaultBody, comparison, cases)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.SwitchExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="switchValue" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="defaultBody" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="comparison" Type="System.Reflection.MethodInfo" />
        <Parameter Name="cases" Type="System.Linq.Expressions.SwitchCase[]">
          <Attributes>
            <Attribute>
              <AttributeName>System.ParamArray</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="switchValue">
          <span data-ttu-id="fef91-3619">Значение, проверяемое для каждого варианта case.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fef91-3619">The value to be tested against each case.</span>
          </span>
        </param>
        <param name="defaultBody">
          <span data-ttu-id="fef91-3620">Результат оператора switch, если <c>switchValue</c> не соответствует ни одному из вариантов case.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fef91-3620">The result of the switch if <c>switchValue</c> does not match any of the cases.</span>
          </span>
        </param>
        <param name="comparison">
          <span data-ttu-id="fef91-3621">Используемый метод проверки равенства.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fef91-3621">The equality comparison method to use.</span>
          </span>
        </param>
        <param name="cases">
          <span data-ttu-id="fef91-3622">Набор вариантов case для данного выражения switch.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fef91-3622">The set of cases for this switch expression.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="fef91-3623">Создает объект <see cref="T:System.Linq.Expressions.SwitchExpression" />, представляющий оператор <see langword="switch" /> с вариантом по умолчанию.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fef91-3623">Creates a <see cref="T:System.Linq.Expressions.SwitchExpression" /> that represents a <see langword="switch" /> statement that has a default case.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="fef91-3624">Созданный <see cref="T:System.Linq.Expressions.SwitchExpression" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fef91-3624">The created <see cref="T:System.Linq.Expressions.SwitchExpression" />.</span>
          </span>
        </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Switch">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.SwitchExpression Switch (Type type, System.Linq.Expressions.Expression switchValue, System.Linq.Expressions.Expression defaultBody, System.Reflection.MethodInfo comparison, System.Collections.Generic.IEnumerable&lt;System.Linq.Expressions.SwitchCase&gt; cases);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.SwitchExpression Switch(class System.Type type, class System.Linq.Expressions.Expression switchValue, class System.Linq.Expressions.Expression defaultBody, class System.Reflection.MethodInfo comparison, class System.Collections.Generic.IEnumerable`1&lt;class System.Linq.Expressions.SwitchCase&gt; cases) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.Switch(System.Type,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo,System.Collections.Generic.IEnumerable{System.Linq.Expressions.SwitchCase})" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Linq::Expressions::SwitchExpression ^ Switch(Type ^ type, System::Linq::Expressions::Expression ^ switchValue, System::Linq::Expressions::Expression ^ defaultBody, System::Reflection::MethodInfo ^ comparison, System::Collections::Generic::IEnumerable&lt;System::Linq::Expressions::SwitchCase ^&gt; ^ cases);" />
      <MemberSignature Language="F#" Value="static member Switch : Type * System.Linq.Expressions.Expression * System.Linq.Expressions.Expression * System.Reflection.MethodInfo * seq&lt;System.Linq.Expressions.SwitchCase&gt; -&gt; System.Linq.Expressions.SwitchExpression" Usage="System.Linq.Expressions.Expression.Switch (type, switchValue, defaultBody, comparison, cases)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.SwitchExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="type" Type="System.Type" />
        <Parameter Name="switchValue" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="defaultBody" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="comparison" Type="System.Reflection.MethodInfo" />
        <Parameter Name="cases" Type="System.Collections.Generic.IEnumerable&lt;System.Linq.Expressions.SwitchCase&gt;" />
      </Parameters>
      <Docs>
        <param name="type">
          <span data-ttu-id="fef91-3625">Тип результата оператора switch.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fef91-3625">The result type of the switch.</span>
          </span>
        </param>
        <param name="switchValue">
          <span data-ttu-id="fef91-3626">Значение, проверяемое для каждого варианта case.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fef91-3626">The value to be tested against each case.</span>
          </span>
        </param>
        <param name="defaultBody">
          <span data-ttu-id="fef91-3627">Результат оператора switch, если <c>switchValue</c> не соответствует ни одному из вариантов case.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fef91-3627">The result of the switch if <c>switchValue</c> does not match any of the cases.</span>
          </span>
        </param>
        <param name="comparison">
          <span data-ttu-id="fef91-3628">Используемый метод проверки равенства.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fef91-3628">The equality comparison method to use.</span>
          </span>
        </param>
        <param name="cases">
          <span data-ttu-id="fef91-3629">Набор вариантов case для данного выражения switch.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fef91-3629">The set of cases for this switch expression.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="fef91-3630">Создает объект <see cref="T:System.Linq.Expressions.SwitchExpression" />, представляющий оператор <see langword="switch" /> с вариантом по умолчанию.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fef91-3630">Creates a <see cref="T:System.Linq.Expressions.SwitchExpression" /> that represents a <see langword="switch" /> statement that has a default case.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="fef91-3631">Созданный <see cref="T:System.Linq.Expressions.SwitchExpression" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fef91-3631">The created <see cref="T:System.Linq.Expressions.SwitchExpression" />.</span>
          </span>
        </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Switch">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.SwitchExpression Switch (Type type, System.Linq.Expressions.Expression switchValue, System.Linq.Expressions.Expression defaultBody, System.Reflection.MethodInfo comparison, params System.Linq.Expressions.SwitchCase[] cases);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.SwitchExpression Switch(class System.Type type, class System.Linq.Expressions.Expression switchValue, class System.Linq.Expressions.Expression defaultBody, class System.Reflection.MethodInfo comparison, class System.Linq.Expressions.SwitchCase[] cases) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.Switch(System.Type,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo,System.Linq.Expressions.SwitchCase[])" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Linq::Expressions::SwitchExpression ^ Switch(Type ^ type, System::Linq::Expressions::Expression ^ switchValue, System::Linq::Expressions::Expression ^ defaultBody, System::Reflection::MethodInfo ^ comparison, ... cli::array &lt;System::Linq::Expressions::SwitchCase ^&gt; ^ cases);" />
      <MemberSignature Language="F#" Value="static member Switch : Type * System.Linq.Expressions.Expression * System.Linq.Expressions.Expression * System.Reflection.MethodInfo * System.Linq.Expressions.SwitchCase[] -&gt; System.Linq.Expressions.SwitchExpression" Usage="System.Linq.Expressions.Expression.Switch (type, switchValue, defaultBody, comparison, cases)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.SwitchExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="type" Type="System.Type" />
        <Parameter Name="switchValue" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="defaultBody" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="comparison" Type="System.Reflection.MethodInfo" />
        <Parameter Name="cases" Type="System.Linq.Expressions.SwitchCase[]">
          <Attributes>
            <Attribute>
              <AttributeName>System.ParamArray</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="type">
          <span data-ttu-id="fef91-3632">Тип результата оператора switch.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fef91-3632">The result type of the switch.</span>
          </span>
        </param>
        <param name="switchValue">
          <span data-ttu-id="fef91-3633">Значение, проверяемое для каждого варианта case.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fef91-3633">The value to be tested against each case.</span>
          </span>
        </param>
        <param name="defaultBody">
          <span data-ttu-id="fef91-3634">Результат оператора switch, если <c>switchValue</c> не соответствует ни одному из вариантов case.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fef91-3634">The result of the switch if <c>switchValue</c> does not match any of the cases.</span>
          </span>
        </param>
        <param name="comparison">
          <span data-ttu-id="fef91-3635">Используемый метод проверки равенства.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fef91-3635">The equality comparison method to use.</span>
          </span>
        </param>
        <param name="cases">
          <span data-ttu-id="fef91-3636">Набор вариантов case для данного выражения switch.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fef91-3636">The set of cases for this switch expression.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="fef91-3637">Создает объект <see cref="T:System.Linq.Expressions.SwitchExpression" />, представляющий оператор <see langword="switch" /> с вариантом по умолчанию.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fef91-3637">Creates a <see cref="T:System.Linq.Expressions.SwitchExpression" /> that represents a <see langword="switch" /> statement that has a default case..</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="fef91-3638">Созданный <see cref="T:System.Linq.Expressions.SwitchExpression" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fef91-3638">The created <see cref="T:System.Linq.Expressions.SwitchExpression" />.</span>
          </span>
        </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="SwitchCase">
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="fef91-3639">Создает объект <see cref="T:System.Linq.Expressions.SwitchCase" /> для использования в объекте <see cref="T:System.Linq.Expressions.SwitchExpression" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fef91-3639">Creates a <see cref="T:System.Linq.Expressions.SwitchCase" /> object to be used in a <see cref="T:System.Linq.Expressions.SwitchExpression" /> object.</span>
          </span>
        </summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="SwitchCase">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.SwitchCase SwitchCase (System.Linq.Expressions.Expression body, System.Collections.Generic.IEnumerable&lt;System.Linq.Expressions.Expression&gt; testValues);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.SwitchCase SwitchCase(class System.Linq.Expressions.Expression body, class System.Collections.Generic.IEnumerable`1&lt;class System.Linq.Expressions.Expression&gt; testValues) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.SwitchCase(System.Linq.Expressions.Expression,System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression})" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function SwitchCase (body As Expression, testValues As IEnumerable(Of Expression)) As SwitchCase" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Linq::Expressions::SwitchCase ^ SwitchCase(System::Linq::Expressions::Expression ^ body, System::Collections::Generic::IEnumerable&lt;System::Linq::Expressions::Expression ^&gt; ^ testValues);" />
      <MemberSignature Language="F#" Value="static member SwitchCase : System.Linq.Expressions.Expression * seq&lt;System.Linq.Expressions.Expression&gt; -&gt; System.Linq.Expressions.SwitchCase" Usage="System.Linq.Expressions.Expression.SwitchCase (body, testValues)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.SwitchCase</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="body" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="testValues" Type="System.Collections.Generic.IEnumerable&lt;System.Linq.Expressions.Expression&gt;" />
      </Parameters>
      <Docs>
        <param name="body">
          <span data-ttu-id="fef91-3640">Тело варианта case.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fef91-3640">The body of the case.</span>
          </span>
        </param>
        <param name="testValues">
          <span data-ttu-id="fef91-3641">Тестовые значения варианта case.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fef91-3641">The test values of the case.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="fef91-3642">Создает объект <see cref="T:System.Linq.Expressions.SwitchCase" /> для использования в объекте <see cref="T:System.Linq.Expressions.SwitchExpression" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fef91-3642">Creates a <see cref="T:System.Linq.Expressions.SwitchCase" /> object to be used in a <see cref="T:System.Linq.Expressions.SwitchExpression" /> object.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="fef91-3643">Созданный <see cref="T:System.Linq.Expressions.SwitchCase" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fef91-3643">The created <see cref="T:System.Linq.Expressions.SwitchCase" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="fef91-3644">Все <xref:System.Linq.Expressions.SwitchCase> объекты в <xref:System.Linq.Expressions.SwitchExpression> объекта должны иметь тот же тип, кроме случаев <xref:System.Linq.Expressions.SwitchExpression> имеет тип `void`.</span><span class="sxs-lookup"><span data-stu-id="fef91-3644">All <xref:System.Linq.Expressions.SwitchCase> objects in a <xref:System.Linq.Expressions.SwitchExpression> object must have the same type, unless the <xref:System.Linq.Expressions.SwitchExpression> has the type `void`.</span></span>  
  
 <span data-ttu-id="fef91-3645">Каждый <xref:System.Linq.Expressions.SwitchCase> объект имеет неявный `break` инструкцию, которая означает, что нет неявного вниз от одной метки case в другой.</span><span class="sxs-lookup"><span data-stu-id="fef91-3645">Each <xref:System.Linq.Expressions.SwitchCase> object has an implicit `break` statement, which means that there is no implicit fall through from one case label to another.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="fef91-3646">Следующий пример демонстрирует создание выражения, которое представляет коммутатор оператор с вариантом по умолчанию.</span><span class="sxs-lookup"><span data-stu-id="fef91-3646">The following example demonstrates how to create an expression that represents a swtich statement that has a default case.</span></span>  
  
 [!code-csharp[System.Linq.Expressions.ExpressionDev10#35](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.linq.expressions.expressiondev10/cs/program.cs#35)]
 [!code-vb[System.Linq.Expressions.ExpressionDev10#35](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.linq.expressions.expressiondev10/vb/module1.vb#35)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="SwitchCase">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.SwitchCase SwitchCase (System.Linq.Expressions.Expression body, params System.Linq.Expressions.Expression[] testValues);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.SwitchCase SwitchCase(class System.Linq.Expressions.Expression body, class System.Linq.Expressions.Expression[] testValues) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.SwitchCase(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression[])" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function SwitchCase (body As Expression, ParamArray testValues As Expression()) As SwitchCase" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Linq::Expressions::SwitchCase ^ SwitchCase(System::Linq::Expressions::Expression ^ body, ... cli::array &lt;System::Linq::Expressions::Expression ^&gt; ^ testValues);" />
      <MemberSignature Language="F#" Value="static member SwitchCase : System.Linq.Expressions.Expression * System.Linq.Expressions.Expression[] -&gt; System.Linq.Expressions.SwitchCase" Usage="System.Linq.Expressions.Expression.SwitchCase (body, testValues)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.SwitchCase</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="body" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="testValues" Type="System.Linq.Expressions.Expression[]">
          <Attributes>
            <Attribute>
              <AttributeName>System.ParamArray</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="body">
          <span data-ttu-id="fef91-3647">Тело варианта case.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fef91-3647">The body of the case.</span>
          </span>
        </param>
        <param name="testValues">
          <span data-ttu-id="fef91-3648">Тестовые значения варианта case.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fef91-3648">The test values of the case.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="fef91-3649">Создает объект <see cref="T:System.Linq.Expressions.SwitchCase" /> для использования в выражении <see cref="T:System.Linq.Expressions.SwitchExpression" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fef91-3649">Creates a <see cref="T:System.Linq.Expressions.SwitchCase" /> for use in a <see cref="T:System.Linq.Expressions.SwitchExpression" />.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="fef91-3650">Созданный <see cref="T:System.Linq.Expressions.SwitchCase" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fef91-3650">The created <see cref="T:System.Linq.Expressions.SwitchCase" />.</span>
          </span>
        </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="SymbolDocument">
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="fef91-3651">Создает экземпляр <see cref="T:System.Linq.Expressions.SymbolDocumentInfo" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fef91-3651">Creates an instance of <see cref="T:System.Linq.Expressions.SymbolDocumentInfo" />.</span>
          </span>
        </summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="SymbolDocument">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.SymbolDocumentInfo SymbolDocument (string fileName);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.SymbolDocumentInfo SymbolDocument(string fileName) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.SymbolDocument(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function SymbolDocument (fileName As String) As SymbolDocumentInfo" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Linq::Expressions::SymbolDocumentInfo ^ SymbolDocument(System::String ^ fileName);" />
      <MemberSignature Language="F#" Value="static member SymbolDocument : string -&gt; System.Linq.Expressions.SymbolDocumentInfo" Usage="System.Linq.Expressions.Expression.SymbolDocument fileName" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.SymbolDocumentInfo</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="fileName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="fileName">
          <span data-ttu-id="fef91-3652">Объект <see cref="T:System.String" />, который следует задать в качестве значения свойства <see cref="P:System.Linq.Expressions.SymbolDocumentInfo.FileName" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fef91-3652">A <see cref="T:System.String" /> to set the <see cref="P:System.Linq.Expressions.SymbolDocumentInfo.FileName" /> equal to.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="fef91-3653">Создает экземпляр <see cref="T:System.Linq.Expressions.SymbolDocumentInfo" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fef91-3653">Creates an instance of <see cref="T:System.Linq.Expressions.SymbolDocumentInfo" />.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="fef91-3654">Объект <see cref="T:System.Linq.Expressions.SymbolDocumentInfo" />, для свойства <see cref="P:System.Linq.Expressions.SymbolDocumentInfo.FileName" /> которого задано указанное значение.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fef91-3654">A <see cref="T:System.Linq.Expressions.SymbolDocumentInfo" /> that has the <see cref="P:System.Linq.Expressions.SymbolDocumentInfo.FileName" /> property set to the specified value.</span>
          </span>
        </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="SymbolDocument">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.SymbolDocumentInfo SymbolDocument (string fileName, Guid language);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.SymbolDocumentInfo SymbolDocument(string fileName, valuetype System.Guid language) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.SymbolDocument(System.String,System.Guid)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function SymbolDocument (fileName As String, language As Guid) As SymbolDocumentInfo" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Linq::Expressions::SymbolDocumentInfo ^ SymbolDocument(System::String ^ fileName, Guid language);" />
      <MemberSignature Language="F#" Value="static member SymbolDocument : string * Guid -&gt; System.Linq.Expressions.SymbolDocumentInfo" Usage="System.Linq.Expressions.Expression.SymbolDocument (fileName, language)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.SymbolDocumentInfo</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="fileName" Type="System.String" />
        <Parameter Name="language" Type="System.Guid" />
      </Parameters>
      <Docs>
        <param name="fileName">
          <span data-ttu-id="fef91-3655">Объект <see cref="T:System.String" />, который следует задать в качестве значения свойства <see cref="P:System.Linq.Expressions.SymbolDocumentInfo.FileName" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fef91-3655">A <see cref="T:System.String" /> to set the <see cref="P:System.Linq.Expressions.SymbolDocumentInfo.FileName" /> equal to.</span>
          </span>
        </param>
        <param name="language">
          <span data-ttu-id="fef91-3656">Объект <see cref="T:System.Guid" />, который следует задать в качестве значения свойства <see cref="P:System.Linq.Expressions.SymbolDocumentInfo.Language" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fef91-3656">A <see cref="T:System.Guid" /> to set the <see cref="P:System.Linq.Expressions.SymbolDocumentInfo.Language" /> equal to.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="fef91-3657">Создает экземпляр <see cref="T:System.Linq.Expressions.SymbolDocumentInfo" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fef91-3657">Creates an instance of <see cref="T:System.Linq.Expressions.SymbolDocumentInfo" />.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="fef91-3658">Объект <see cref="T:System.Linq.Expressions.SymbolDocumentInfo" /> со свойствами <see cref="P:System.Linq.Expressions.SymbolDocumentInfo.FileName" /> и <see cref="P:System.Linq.Expressions.SymbolDocumentInfo.Language" />, для которых задано указанное значение.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fef91-3658">A <see cref="T:System.Linq.Expressions.SymbolDocumentInfo" /> that has the <see cref="P:System.Linq.Expressions.SymbolDocumentInfo.FileName" /> and <see cref="P:System.Linq.Expressions.SymbolDocumentInfo.Language" /> properties set to the specified value.</span>
          </span>
        </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="SymbolDocument">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.SymbolDocumentInfo SymbolDocument (string fileName, Guid language, Guid languageVendor);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.SymbolDocumentInfo SymbolDocument(string fileName, valuetype System.Guid language, valuetype System.Guid languageVendor) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.SymbolDocument(System.String,System.Guid,System.Guid)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function SymbolDocument (fileName As String, language As Guid, languageVendor As Guid) As SymbolDocumentInfo" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Linq::Expressions::SymbolDocumentInfo ^ SymbolDocument(System::String ^ fileName, Guid language, Guid languageVendor);" />
      <MemberSignature Language="F#" Value="static member SymbolDocument : string * Guid * Guid -&gt; System.Linq.Expressions.SymbolDocumentInfo" Usage="System.Linq.Expressions.Expression.SymbolDocument (fileName, language, languageVendor)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.SymbolDocumentInfo</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="fileName" Type="System.String" />
        <Parameter Name="language" Type="System.Guid" />
        <Parameter Name="languageVendor" Type="System.Guid" />
      </Parameters>
      <Docs>
        <param name="fileName">
          <span data-ttu-id="fef91-3659">Объект <see cref="T:System.String" />, который следует задать в качестве значения свойства <see cref="P:System.Linq.Expressions.SymbolDocumentInfo.FileName" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fef91-3659">A <see cref="T:System.String" /> to set the <see cref="P:System.Linq.Expressions.SymbolDocumentInfo.FileName" /> equal to.</span>
          </span>
        </param>
        <param name="language">
          <span data-ttu-id="fef91-3660">Объект <see cref="T:System.Guid" />, который следует задать в качестве значения свойства <see cref="P:System.Linq.Expressions.SymbolDocumentInfo.Language" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fef91-3660">A <see cref="T:System.Guid" /> to set the <see cref="P:System.Linq.Expressions.SymbolDocumentInfo.Language" /> equal to.</span>
          </span>
        </param>
        <param name="languageVendor">
          <span data-ttu-id="fef91-3661">Объект <see cref="T:System.Guid" />, который следует задать в качестве значения свойства <see cref="P:System.Linq.Expressions.SymbolDocumentInfo.LanguageVendor" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fef91-3661">A <see cref="T:System.Guid" /> to set the <see cref="P:System.Linq.Expressions.SymbolDocumentInfo.LanguageVendor" /> equal to.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="fef91-3662">Создает экземпляр <see cref="T:System.Linq.Expressions.SymbolDocumentInfo" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fef91-3662">Creates an instance of <see cref="T:System.Linq.Expressions.SymbolDocumentInfo" />.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="fef91-3663">Объект <see cref="T:System.Linq.Expressions.SymbolDocumentInfo" /> со свойствами <see cref="P:System.Linq.Expressions.SymbolDocumentInfo.FileName" />, <see cref="P:System.Linq.Expressions.SymbolDocumentInfo.Language" /> и <see cref="P:System.Linq.Expressions.SymbolDocumentInfo.LanguageVendor" />, для которых задано указанное значение.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fef91-3663">A <see cref="T:System.Linq.Expressions.SymbolDocumentInfo" /> that has the <see cref="P:System.Linq.Expressions.SymbolDocumentInfo.FileName" /> and <see cref="P:System.Linq.Expressions.SymbolDocumentInfo.Language" /> and <see cref="P:System.Linq.Expressions.SymbolDocumentInfo.LanguageVendor" /> properties set to the specified value.</span>
          </span>
        </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="SymbolDocument">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.SymbolDocumentInfo SymbolDocument (string fileName, Guid language, Guid languageVendor, Guid documentType);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.SymbolDocumentInfo SymbolDocument(string fileName, valuetype System.Guid language, valuetype System.Guid languageVendor, valuetype System.Guid documentType) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.SymbolDocument(System.String,System.Guid,System.Guid,System.Guid)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function SymbolDocument (fileName As String, language As Guid, languageVendor As Guid, documentType As Guid) As SymbolDocumentInfo" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Linq::Expressions::SymbolDocumentInfo ^ SymbolDocument(System::String ^ fileName, Guid language, Guid languageVendor, Guid documentType);" />
      <MemberSignature Language="F#" Value="static member SymbolDocument : string * Guid * Guid * Guid -&gt; System.Linq.Expressions.SymbolDocumentInfo" Usage="System.Linq.Expressions.Expression.SymbolDocument (fileName, language, languageVendor, documentType)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.SymbolDocumentInfo</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="fileName" Type="System.String" />
        <Parameter Name="language" Type="System.Guid" />
        <Parameter Name="languageVendor" Type="System.Guid" />
        <Parameter Name="documentType" Type="System.Guid" />
      </Parameters>
      <Docs>
        <param name="fileName">
          <span data-ttu-id="fef91-3664">Объект <see cref="T:System.String" />, который следует задать в качестве значения свойства <see cref="P:System.Linq.Expressions.SymbolDocumentInfo.FileName" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fef91-3664">A <see cref="T:System.String" /> to set the <see cref="P:System.Linq.Expressions.SymbolDocumentInfo.FileName" /> equal to.</span>
          </span>
        </param>
        <param name="language">
          <span data-ttu-id="fef91-3665">Объект <see cref="T:System.Guid" />, который следует задать в качестве значения свойства <see cref="P:System.Linq.Expressions.SymbolDocumentInfo.Language" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fef91-3665">A <see cref="T:System.Guid" /> to set the <see cref="P:System.Linq.Expressions.SymbolDocumentInfo.Language" /> equal to.</span>
          </span>
        </param>
        <param name="languageVendor">
          <span data-ttu-id="fef91-3666">Объект <see cref="T:System.Guid" />, который следует задать в качестве значения свойства <see cref="P:System.Linq.Expressions.SymbolDocumentInfo.LanguageVendor" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fef91-3666">A <see cref="T:System.Guid" /> to set the <see cref="P:System.Linq.Expressions.SymbolDocumentInfo.LanguageVendor" /> equal to.</span>
          </span>
        </param>
        <param name="documentType">
          <span data-ttu-id="fef91-3667">Объект <see cref="T:System.Guid" />, который следует задать в качестве значения свойства <see cref="P:System.Linq.Expressions.SymbolDocumentInfo.DocumentType" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fef91-3667">A <see cref="T:System.Guid" /> to set the <see cref="P:System.Linq.Expressions.SymbolDocumentInfo.DocumentType" /> equal to.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="fef91-3668">Создает экземпляр <see cref="T:System.Linq.Expressions.SymbolDocumentInfo" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fef91-3668">Creates an instance of <see cref="T:System.Linq.Expressions.SymbolDocumentInfo" />.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="fef91-3669">Объект <see cref="T:System.Linq.Expressions.SymbolDocumentInfo" /> со свойствами <see cref="P:System.Linq.Expressions.SymbolDocumentInfo.FileName" />, <see cref="P:System.Linq.Expressions.SymbolDocumentInfo.Language" />, <see cref="P:System.Linq.Expressions.SymbolDocumentInfo.LanguageVendor" /> и <see cref="P:System.Linq.Expressions.SymbolDocumentInfo.DocumentType" />, для которых задано указанное значение.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fef91-3669">A <see cref="T:System.Linq.Expressions.SymbolDocumentInfo" /> that has the <see cref="P:System.Linq.Expressions.SymbolDocumentInfo.FileName" /> and <see cref="P:System.Linq.Expressions.SymbolDocumentInfo.Language" /> and <see cref="P:System.Linq.Expressions.SymbolDocumentInfo.LanguageVendor" /> and <see cref="P:System.Linq.Expressions.SymbolDocumentInfo.DocumentType" /> properties set to the specified value.</span>
          </span>
        </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="Throw">
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="fef91-3670">Создает объект <see cref="T:System.Linq.Expressions.UnaryExpression" />, представляющий создание исключения.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fef91-3670">Creates a <see cref="T:System.Linq.Expressions.UnaryExpression" /> that represents a throwing of an exception.</span>
          </span>
        </summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Throw">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.UnaryExpression Throw (System.Linq.Expressions.Expression value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.UnaryExpression Throw(class System.Linq.Expressions.Expression value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.Throw(System.Linq.Expressions.Expression)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Throw (value As Expression) As UnaryExpression" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Linq::Expressions::UnaryExpression ^ Throw(System::Linq::Expressions::Expression ^ value);" />
      <MemberSignature Language="F#" Value="static member Throw : System.Linq.Expressions.Expression -&gt; System.Linq.Expressions.UnaryExpression" Usage="System.Linq.Expressions.Expression.Throw value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.UnaryExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Linq.Expressions.Expression" />
      </Parameters>
      <Docs>
        <param name="value">
          <span data-ttu-id="fef91-3671">Объект <see cref="T:System.Linq.Expressions.Expression" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fef91-3671">An <see cref="T:System.Linq.Expressions.Expression" />.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="fef91-3672">Создает объект <see cref="T:System.Linq.Expressions.UnaryExpression" />, представляющий создание исключения.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fef91-3672">Creates a <see cref="T:System.Linq.Expressions.UnaryExpression" /> that represents a throwing of an exception.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="fef91-3673">Выражение <see cref="T:System.Linq.Expressions.UnaryExpression" />, представляющее исключение.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fef91-3673">A <see cref="T:System.Linq.Expressions.UnaryExpression" /> that represents the exception.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 <span data-ttu-id="fef91-3674">Следующий пример демонстрирует создание <xref:System.Linq.Expressions.TryExpression> объект, который использует <xref:System.Linq.Expressions.Expression.Throw%2A> метод.</span><span class="sxs-lookup"><span data-stu-id="fef91-3674">The following example demonstrates how to create a <xref:System.Linq.Expressions.TryExpression> object that uses the <xref:System.Linq.Expressions.Expression.Throw%2A> method.</span></span>  
  
 [!code-csharp[System.Linq.Expressions.ExpressionDev10#47](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.linq.expressions.expressiondev10/cs/program.cs#47)]
 [!code-vb[System.Linq.Expressions.ExpressionDev10#47](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.linq.expressions.expressiondev10/vb/module1.vb#47)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Throw">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.UnaryExpression Throw (System.Linq.Expressions.Expression value, Type type);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.UnaryExpression Throw(class System.Linq.Expressions.Expression value, class System.Type type) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.Throw(System.Linq.Expressions.Expression,System.Type)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Linq::Expressions::UnaryExpression ^ Throw(System::Linq::Expressions::Expression ^ value, Type ^ type);" />
      <MemberSignature Language="F#" Value="static member Throw : System.Linq.Expressions.Expression * Type -&gt; System.Linq.Expressions.UnaryExpression" Usage="System.Linq.Expressions.Expression.Throw (value, type)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.UnaryExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="type" Type="System.Type" />
      </Parameters>
      <Docs>
        <param name="value">
          <span data-ttu-id="fef91-3675">Объект <see cref="T:System.Linq.Expressions.Expression" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fef91-3675">An <see cref="T:System.Linq.Expressions.Expression" />.</span>
          </span>
        </param>
        <param name="type">
          <span data-ttu-id="fef91-3676">Новый тип <see cref="T:System.Type" /> выражения.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fef91-3676">The new <see cref="T:System.Type" /> of the expression.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="fef91-3677">Создает объект <see cref="T:System.Linq.Expressions.UnaryExpression" />, представляющий создание исключения с заданным типом.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fef91-3677">Creates a <see cref="T:System.Linq.Expressions.UnaryExpression" /> that represents a throwing of an exception with a given type.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="fef91-3678">Выражение <see cref="T:System.Linq.Expressions.UnaryExpression" />, представляющее исключение.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fef91-3678">A <see cref="T:System.Linq.Expressions.UnaryExpression" /> that represents the exception.</span>
          </span>
        </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ToString">
      <MemberSignature Language="C#" Value="public override string ToString ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance string ToString() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.ToString" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function ToString () As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override System::String ^ ToString();" />
      <MemberSignature Language="F#" Value="override this.ToString : unit -&gt; string" Usage="expression.ToString " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="fef91-3679">Возвращает текстовое представление выражения <see cref="T:System.Linq.Expressions.Expression" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fef91-3679">Returns a textual representation of the <see cref="T:System.Linq.Expressions.Expression" />.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="fef91-3680">Текстовое представление выражения <see cref="T:System.Linq.Expressions.Expression" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fef91-3680">A textual representation of the <see cref="T:System.Linq.Expressions.Expression" />.</span>
          </span>
        </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="TryCatch">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.TryExpression TryCatch (System.Linq.Expressions.Expression body, params System.Linq.Expressions.CatchBlock[] handlers);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.TryExpression TryCatch(class System.Linq.Expressions.Expression body, class System.Linq.Expressions.CatchBlock[] handlers) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.TryCatch(System.Linq.Expressions.Expression,System.Linq.Expressions.CatchBlock[])" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function TryCatch (body As Expression, ParamArray handlers As CatchBlock()) As TryExpression" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Linq::Expressions::TryExpression ^ TryCatch(System::Linq::Expressions::Expression ^ body, ... cli::array &lt;System::Linq::Expressions::CatchBlock ^&gt; ^ handlers);" />
      <MemberSignature Language="F#" Value="static member TryCatch : System.Linq.Expressions.Expression * System.Linq.Expressions.CatchBlock[] -&gt; System.Linq.Expressions.TryExpression" Usage="System.Linq.Expressions.Expression.TryCatch (body, handlers)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.TryExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="body" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="handlers" Type="System.Linq.Expressions.CatchBlock[]">
          <Attributes>
            <Attribute>
              <AttributeName>System.ParamArray</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="body">
          <span data-ttu-id="fef91-3681">Тело блока try.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fef91-3681">The body of the try block.</span>
          </span>
        </param>
        <param name="handlers">
          <span data-ttu-id="fef91-3682">Массив из нуля или более выражений <see cref="T:System.Linq.Expressions.CatchBlock" />, представляющих операторы catch, которые следует связать с блоком try.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fef91-3682">The array of zero or more <see cref="T:System.Linq.Expressions.CatchBlock" /> expressions representing the catch statements to be associated with the try block.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="fef91-3683">Создает выражение <see cref="T:System.Linq.Expressions.TryExpression" />, представляющее блок try с произвольным числом операторов catch и без блоков fault и finally.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fef91-3683">Creates a <see cref="T:System.Linq.Expressions.TryExpression" /> representing a try block with any number of catch statements and neither a fault nor finally block.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="fef91-3684">Созданный <see cref="T:System.Linq.Expressions.TryExpression" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fef91-3684">The created <see cref="T:System.Linq.Expressions.TryExpression" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 <span data-ttu-id="fef91-3685">Следующий пример демонстрирует создание <xref:System.Linq.Expressions.TryExpression> , содержащий оператор catch.</span><span class="sxs-lookup"><span data-stu-id="fef91-3685">The following example demonstrates how to create a <xref:System.Linq.Expressions.TryExpression> object that contains a catch statement.</span></span>  
  
 [!code-csharp[System.Linq.Expressions.ExpressionDev10#47](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.linq.expressions.expressiondev10/cs/program.cs#47)]
 [!code-vb[System.Linq.Expressions.ExpressionDev10#47](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.linq.expressions.expressiondev10/vb/module1.vb#47)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="TryCatchFinally">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.TryExpression TryCatchFinally (System.Linq.Expressions.Expression body, System.Linq.Expressions.Expression finally, params System.Linq.Expressions.CatchBlock[] handlers);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.TryExpression TryCatchFinally(class System.Linq.Expressions.Expression body, class System.Linq.Expressions.Expression finally, class System.Linq.Expressions.CatchBlock[] handlers) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.TryCatchFinally(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.CatchBlock[])" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function TryCatchFinally (body As Expression, finally As Expression, ParamArray handlers As CatchBlock()) As TryExpression" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Linq::Expressions::TryExpression ^ TryCatchFinally(System::Linq::Expressions::Expression ^ body, System::Linq::Expressions::Expression ^ finally, ... cli::array &lt;System::Linq::Expressions::CatchBlock ^&gt; ^ handlers);" />
      <MemberSignature Language="F#" Value="static member TryCatchFinally : System.Linq.Expressions.Expression * System.Linq.Expressions.Expression * System.Linq.Expressions.CatchBlock[] -&gt; System.Linq.Expressions.TryExpression" Usage="System.Linq.Expressions.Expression.TryCatchFinally (body, finally, handlers)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.TryExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="body" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="finally" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="handlers" Type="System.Linq.Expressions.CatchBlock[]">
          <Attributes>
            <Attribute>
              <AttributeName>System.ParamArray</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="body">
          <span data-ttu-id="fef91-3686">Тело блока try.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fef91-3686">The body of the try block.</span>
          </span>
        </param>
        <param name="finally">
          <span data-ttu-id="fef91-3687">Тело блока finally.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fef91-3687">The body of the finally block.</span>
          </span>
        </param>
        <param name="handlers">
          <span data-ttu-id="fef91-3688">Массив из нуля или более выражений <see cref="T:System.Linq.Expressions.CatchBlock" />, представляющих операторы catch, которые следует связать с блоком try.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fef91-3688">The array of zero or more <see cref="T:System.Linq.Expressions.CatchBlock" /> expressions representing the catch statements to be associated with the try block.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="fef91-3689">Создает объект <see cref="T:System.Linq.Expressions.TryExpression" />, представляющий блок try с произвольным числом операторов catch и блоком finally.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fef91-3689">Creates a <see cref="T:System.Linq.Expressions.TryExpression" /> representing a try block with any number of catch statements and a finally block.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="fef91-3690">Созданный <see cref="T:System.Linq.Expressions.TryExpression" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fef91-3690">The created <see cref="T:System.Linq.Expressions.TryExpression" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 <span data-ttu-id="fef91-3691">Следующий пример демонстрирует создание <xref:System.Linq.Expressions.TryExpression> , содержащий оператор catch и finally инструкции.</span><span class="sxs-lookup"><span data-stu-id="fef91-3691">The following example demonstrates how to create a <xref:System.Linq.Expressions.TryExpression> object that contains a catch statement and a finally statement.</span></span>  
  
 [!code-csharp[System.Linq.Expressions.ExpressionDev10#48](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.linq.expressions.expressiondev10/cs/program.cs#48)]
 [!code-vb[System.Linq.Expressions.ExpressionDev10#48](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.linq.expressions.expressiondev10/vb/module1.vb#48)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="TryFault">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.TryExpression TryFault (System.Linq.Expressions.Expression body, System.Linq.Expressions.Expression fault);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.TryExpression TryFault(class System.Linq.Expressions.Expression body, class System.Linq.Expressions.Expression fault) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.TryFault(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function TryFault (body As Expression, fault As Expression) As TryExpression" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Linq::Expressions::TryExpression ^ TryFault(System::Linq::Expressions::Expression ^ body, System::Linq::Expressions::Expression ^ fault);" />
      <MemberSignature Language="F#" Value="static member TryFault : System.Linq.Expressions.Expression * System.Linq.Expressions.Expression -&gt; System.Linq.Expressions.TryExpression" Usage="System.Linq.Expressions.Expression.TryFault (body, fault)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.TryExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="body" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="fault" Type="System.Linq.Expressions.Expression" />
      </Parameters>
      <Docs>
        <param name="body">
          <span data-ttu-id="fef91-3692">Тело блока try.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fef91-3692">The body of the try block.</span>
          </span>
        </param>
        <param name="fault">
          <span data-ttu-id="fef91-3693">Тело блока fault.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fef91-3693">The body of the fault block.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="fef91-3694">Создает объект <see cref="T:System.Linq.Expressions.TryExpression" />, представляющий блок try с блоком fault и без операторов catch.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fef91-3694">Creates a <see cref="T:System.Linq.Expressions.TryExpression" /> representing a try block with a fault block and no catch statements.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="fef91-3695">Созданный <see cref="T:System.Linq.Expressions.TryExpression" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fef91-3695">The created <see cref="T:System.Linq.Expressions.TryExpression" />.</span>
          </span>
        </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="TryFinally">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.TryExpression TryFinally (System.Linq.Expressions.Expression body, System.Linq.Expressions.Expression finally);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.TryExpression TryFinally(class System.Linq.Expressions.Expression body, class System.Linq.Expressions.Expression finally) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.TryFinally(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function TryFinally (body As Expression, finally As Expression) As TryExpression" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Linq::Expressions::TryExpression ^ TryFinally(System::Linq::Expressions::Expression ^ body, System::Linq::Expressions::Expression ^ finally);" />
      <MemberSignature Language="F#" Value="static member TryFinally : System.Linq.Expressions.Expression * System.Linq.Expressions.Expression -&gt; System.Linq.Expressions.TryExpression" Usage="System.Linq.Expressions.Expression.TryFinally (body, finally)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.TryExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="body" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="finally" Type="System.Linq.Expressions.Expression" />
      </Parameters>
      <Docs>
        <param name="body">
          <span data-ttu-id="fef91-3696">Тело блока try.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fef91-3696">The body of the try block.</span>
          </span>
        </param>
        <param name="finally">
          <span data-ttu-id="fef91-3697">Тело блока finally.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fef91-3697">The body of the finally block.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="fef91-3698">Создает выражение <see cref="T:System.Linq.Expressions.TryExpression" />, представляющее блок try с блоком finally и без операторов catch.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fef91-3698">Creates a <see cref="T:System.Linq.Expressions.TryExpression" /> representing a try block with a finally block and no catch statements.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="fef91-3699">Созданный <see cref="T:System.Linq.Expressions.TryExpression" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fef91-3699">The created <see cref="T:System.Linq.Expressions.TryExpression" />.</span>
          </span>
        </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="TryGetActionType">
      <MemberSignature Language="C#" Value="public static bool TryGetActionType (Type[] typeArgs, out Type actionType);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool TryGetActionType(class System.Type[] typeArgs, [out] class System.Type&amp; actionType) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.TryGetActionType(System.Type[],System.Type@)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function TryGetActionType (typeArgs As Type(), ByRef actionType As Type) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool TryGetActionType(cli::array &lt;Type ^&gt; ^ typeArgs, [Runtime::InteropServices::Out] Type ^ % actionType);" />
      <MemberSignature Language="F#" Value="static member TryGetActionType : Type[] *  -&gt; bool" Usage="System.Linq.Expressions.Expression.TryGetActionType (typeArgs, actionType)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="typeArgs" Type="System.Type[]" />
        <Parameter Name="actionType" Type="System.Type" RefType="out" />
      </Parameters>
      <Docs>
        <param name="typeArgs">
          <span data-ttu-id="fef91-3700">Массив от объектов Type, указывающих аргументы типа для типа делегата System.Action.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fef91-3700">An array of Type objects that specify the type arguments for the System.Action delegate type.</span>
          </span>
        </param>
        <param name="actionType">
          <span data-ttu-id="fef91-3701">После выполнения возврата этим методом содержит универсальный тип делегата System.Action с определенным типом аргументов.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fef91-3701">When this method returns, contains the generic System.Action delegate type that has specific type arguments.</span>
          </span>
          <span data-ttu-id="fef91-3702">Содержит NULL, если ни один универсальный делегат System.Action не соответствует <c>typeArgs</c>. Этот параметр передается неинициализированным.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fef91-3702">Contains null if there is no generic System.Action delegate that matches the <c>typeArgs</c>.This parameter is passed uninitialized.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="fef91-3703">Создает объект <see cref="P:System.Linq.Expressions.Expression.Type" />, представляющий универсальный тип делегата System.Action с определенным типом аргументов.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fef91-3703">Creates a <see cref="P:System.Linq.Expressions.Expression.Type" /> object that represents a generic System.Action delegate type that has specific type arguments.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="fef91-3704">Значение true, если тип делегата System.Action создан для определенного <paramref name="typeArgs" />; в противном случае — значение false.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fef91-3704">true if generic System.Action delegate type was created for specific <paramref name="typeArgs" />; false otherwise.</span>
          </span>
        </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="TryGetFuncType">
      <MemberSignature Language="C#" Value="public static bool TryGetFuncType (Type[] typeArgs, out Type funcType);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool TryGetFuncType(class System.Type[] typeArgs, [out] class System.Type&amp; funcType) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.TryGetFuncType(System.Type[],System.Type@)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function TryGetFuncType (typeArgs As Type(), ByRef funcType As Type) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool TryGetFuncType(cli::array &lt;Type ^&gt; ^ typeArgs, [Runtime::InteropServices::Out] Type ^ % funcType);" />
      <MemberSignature Language="F#" Value="static member TryGetFuncType : Type[] *  -&gt; bool" Usage="System.Linq.Expressions.Expression.TryGetFuncType (typeArgs, funcType)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="typeArgs" Type="System.Type[]" />
        <Parameter Name="funcType" Type="System.Type" RefType="out" />
      </Parameters>
      <Docs>
        <param name="typeArgs">
          <span data-ttu-id="fef91-3705">Массив объектов Type, указывающих аргументы типа для типа делегата System.Func.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fef91-3705">An array of Type objects that specify the type arguments for the System.Func delegate type.</span>
          </span>
        </param>
        <param name="funcType">
          <span data-ttu-id="fef91-3706">После выполнения возврата этим методом содержит универсальный тип делегата System.Func с определенным типом аргументов.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fef91-3706">When this method returns, contains the generic System.Func delegate type that has specific type arguments.</span>
          </span>
          <span data-ttu-id="fef91-3707">Содержит NULL, если ни один универсальный делегат System.Func не соответствует <c>typeArgs</c>. Этот параметр передается неинициализированным.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fef91-3707">Contains null if there is no generic System.Func delegate that matches the <c>typeArgs</c>.This parameter is passed uninitialized.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="fef91-3708">Создает объект <see cref="P:System.Linq.Expressions.Expression.Type" />, представляющий универсальный тип делегата System.Func с определенным типом аргументов.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fef91-3708">Creates a <see cref="P:System.Linq.Expressions.Expression.Type" /> object that represents a generic System.Func delegate type that has specific type arguments.</span>
          </span>
          <span data-ttu-id="fef91-3709">Аргумент последнего типа задает тип возврата созданного делегата.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fef91-3709">The last type argument specifies the return type of the created delegate.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="fef91-3710">Значение true, если для заданных аргументов <paramref name="typeArgs" /> был создан универсальный тип-делегат System.Func; в противном случае — значение false.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fef91-3710">true if generic System.Func delegate type was created for specific <paramref name="typeArgs" />; false otherwise.</span>
          </span>
        </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Type">
      <MemberSignature Language="C#" Value="public virtual Type Type { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Type Type" />
      <MemberSignature Language="DocId" Value="P:System.Linq.Expressions.Expression.Type" />
      <MemberSignature Language="VB.NET" Value="Public Overridable ReadOnly Property Type As Type" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property Type ^ Type { Type ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.Type : Type" Usage="System.Linq.Expressions.Expression.Type" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Type</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="fef91-3711">Получает статичный тип выражения, представленного этим выражением <see cref="T:System.Linq.Expressions.Expression" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fef91-3711">Gets the static type of the expression that this <see cref="T:System.Linq.Expressions.Expression" /> represents.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="fef91-3712">Тип <see cref="T:System.Type" />, представляющий этот статичный тип выражения.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fef91-3712">The <see cref="T:System.Type" /> that represents the static type of the expression.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="fef91-3713"><xref:System.Linq.Expressions.Expression.NodeType%2A> — Это тип узла дерева выражения, тогда как <xref:System.Linq.Expressions.Expression.Type%2A> представляет статический тип распространенных языка среды CLR, которую представляет узел выражения.</span><span class="sxs-lookup"><span data-stu-id="fef91-3713">The <xref:System.Linq.Expressions.Expression.NodeType%2A> is the type of the expression tree node, whereas the <xref:System.Linq.Expressions.Expression.Type%2A> represents the static common language runtime (CLR) type of the expression that the node represents.</span></span> <span data-ttu-id="fef91-3714">Например, два узла с помощью различных типов узлов можно с одинаковым <xref:System.Linq.Expressions.Expression.Type%2A>, как показано в следующем примере кода.</span><span class="sxs-lookup"><span data-stu-id="fef91-3714">For example, two nodes with different node types can have the same <xref:System.Linq.Expressions.Expression.Type%2A>, as shown in the following code example.</span></span>  
  
 [!code-csharp[System.Linq.Expressions.ExpressionDev10#36](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.linq.expressions.expressiondev10/cs/program.cs#36)]
 [!code-vb[System.Linq.Expressions.ExpressionDev10#36](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.linq.expressions.expressiondev10/vb/module1.vb#36)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="TypeAs">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.UnaryExpression TypeAs (System.Linq.Expressions.Expression expression, Type type);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.UnaryExpression TypeAs(class System.Linq.Expressions.Expression expression, class System.Type type) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.TypeAs(System.Linq.Expressions.Expression,System.Type)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Linq::Expressions::UnaryExpression ^ TypeAs(System::Linq::Expressions::Expression ^ expression, Type ^ type);" />
      <MemberSignature Language="F#" Value="static member TypeAs : System.Linq.Expressions.Expression * Type -&gt; System.Linq.Expressions.UnaryExpression" Usage="System.Linq.Expressions.Expression.TypeAs (expression, type)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.UnaryExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="expression" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="type" Type="System.Type" />
      </Parameters>
      <Docs>
        <param name="expression">
          <span data-ttu-id="fef91-3715">Объект <see cref="T:System.Linq.Expressions.Expression" />, который следует задать в качестве значения свойства <see cref="P:System.Linq.Expressions.UnaryExpression.Operand" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fef91-3715">An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.UnaryExpression.Operand" /> property equal to.</span>
          </span>
        </param>
        <param name="type">
          <span data-ttu-id="fef91-3716">Объект <see cref="T:System.Type" />, который следует задать в качестве значения свойства <see cref="P:System.Linq.Expressions.Expression.Type" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fef91-3716">A <see cref="T:System.Type" /> to set the <see cref="P:System.Linq.Expressions.Expression.Type" /> property equal to.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="fef91-3717">Создает <see cref="T:System.Linq.Expressions.UnaryExpression" />, представляющий преобразование явной ссылки или упаковки, где <see langword="null" /> поддерживается в случае неудачного преобразования.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fef91-3717">Creates a <see cref="T:System.Linq.Expressions.UnaryExpression" /> that represents an explicit reference or boxing conversion where <see langword="null" /> is supplied if the conversion fails.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="fef91-3718">Выражение <see cref="T:System.Linq.Expressions.UnaryExpression" /> со свойством<see cref="P:System.Linq.Expressions.Expression.NodeType" />, равным <see cref="F:System.Linq.Expressions.ExpressionType.TypeAs" />, и свойствами <see cref="P:System.Linq.Expressions.UnaryExpression.Operand" /> и <see cref="P:System.Linq.Expressions.Expression.Type" />, для которых заданы указанные значения.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fef91-3718">A <see cref="T:System.Linq.Expressions.UnaryExpression" /> that has the <see cref="P:System.Linq.Expressions.Expression.NodeType" /> property equal to <see cref="F:System.Linq.Expressions.ExpressionType.TypeAs" /> and the <see cref="P:System.Linq.Expressions.UnaryExpression.Operand" /> and <see cref="P:System.Linq.Expressions.Expression.Type" /> properties set to the specified values.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="fef91-3719"><xref:System.Linq.Expressions.UnaryExpression.Method%2A> Результирующего <xref:System.Linq.Expressions.UnaryExpression> является `null`.</span><span class="sxs-lookup"><span data-stu-id="fef91-3719">The <xref:System.Linq.Expressions.UnaryExpression.Method%2A> property of the resulting <xref:System.Linq.Expressions.UnaryExpression> is `null`.</span></span> <span data-ttu-id="fef91-3720"><xref:System.Linq.Expressions.UnaryExpression.IsLifted%2A> И <xref:System.Linq.Expressions.UnaryExpression.IsLiftedToNull%2A> оба являются свойства `false`.</span><span class="sxs-lookup"><span data-stu-id="fef91-3720">The <xref:System.Linq.Expressions.UnaryExpression.IsLifted%2A> and <xref:System.Linq.Expressions.UnaryExpression.IsLiftedToNull%2A> properties are both `false`.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="fef91-3721">Следующий пример демонстрирует, как использовать <xref:System.Linq.Expressions.Expression.TypeAs%28System.Linq.Expressions.Expression%2CSystem.Type%29> метод для создания <xref:System.Linq.Expressions.UnaryExpression> , представляющий преобразование ссылок, не допускающим целое число выражения к типу integer, допускающее значение NULL.</span><span class="sxs-lookup"><span data-stu-id="fef91-3721">The following example demonstrates how to use the <xref:System.Linq.Expressions.Expression.TypeAs%28System.Linq.Expressions.Expression%2CSystem.Type%29> method to create a <xref:System.Linq.Expressions.UnaryExpression> that represents the reference conversion of a non-nullable integer expression to the nullable integer type.</span></span>  
  
 [!code-csharp[System.Linq.Expressions.Expression#11](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Linq.Expressions.Expression/CS/Expression.cs#11)]
 [!code-vb[System.Linq.Expressions.Expression#11](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Linq.Expressions.Expression/VB/Expression.vb#11)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="fef91-3722">Значение параметра <paramref name="expression" /> или <paramref name="type" /> — <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fef91-3722">
              <paramref name="expression" /> or <paramref name="type" /> is <see langword="null" />.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="TypeEqual">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.TypeBinaryExpression TypeEqual (System.Linq.Expressions.Expression expression, Type type);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.TypeBinaryExpression TypeEqual(class System.Linq.Expressions.Expression expression, class System.Type type) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.TypeEqual(System.Linq.Expressions.Expression,System.Type)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Linq::Expressions::TypeBinaryExpression ^ TypeEqual(System::Linq::Expressions::Expression ^ expression, Type ^ type);" />
      <MemberSignature Language="F#" Value="static member TypeEqual : System.Linq.Expressions.Expression * Type -&gt; System.Linq.Expressions.TypeBinaryExpression" Usage="System.Linq.Expressions.Expression.TypeEqual (expression, type)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.TypeBinaryExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="expression" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="type" Type="System.Type" />
      </Parameters>
      <Docs>
        <param name="expression">
          <span data-ttu-id="fef91-3723">Объект <see cref="T:System.Linq.Expressions.Expression" />, который следует задать в качестве значения свойства <see cref="T:System.Linq.Expressions.Expression" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fef91-3723">An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="T:System.Linq.Expressions.Expression" /> property equal to.</span>
          </span>
        </param>
        <param name="type">
          <span data-ttu-id="fef91-3724">Объект <see cref="P:System.Linq.Expressions.Expression.Type" />, который следует задать в качестве значения свойства <see cref="P:System.Linq.Expressions.TypeBinaryExpression.TypeOperand" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fef91-3724">A <see cref="P:System.Linq.Expressions.Expression.Type" /> to set the <see cref="P:System.Linq.Expressions.TypeBinaryExpression.TypeOperand" /> property equal to.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="fef91-3725">Создает выражение <see cref="T:System.Linq.Expressions.TypeBinaryExpression" />, сравнивающее идентификацию типов времени выполнения.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fef91-3725">Creates a <see cref="T:System.Linq.Expressions.TypeBinaryExpression" /> that compares run-time type identity.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="fef91-3726">Выражение <see cref="T:System.Linq.Expressions.TypeBinaryExpression" /> со свойством <see cref="P:System.Linq.Expressions.Expression.NodeType" />, равным <see cref="M:System.Linq.Expressions.Expression.TypeEqual(System.Linq.Expressions.Expression,System.Type)" />, и свойствами <see cref="T:System.Linq.Expressions.Expression" /> и <see cref="P:System.Linq.Expressions.TypeBinaryExpression.TypeOperand" />, для которых заданы указанные значения.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fef91-3726">A <see cref="T:System.Linq.Expressions.TypeBinaryExpression" /> for which the <see cref="P:System.Linq.Expressions.Expression.NodeType" /> property is equal to <see cref="M:System.Linq.Expressions.Expression.TypeEqual(System.Linq.Expressions.Expression,System.Type)" /> and for which the <see cref="T:System.Linq.Expressions.Expression" /> and <see cref="P:System.Linq.Expressions.TypeBinaryExpression.TypeOperand" /> properties are set to the specified values.</span>
          </span>
        </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="TypeIs">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.TypeBinaryExpression TypeIs (System.Linq.Expressions.Expression expression, Type type);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.TypeBinaryExpression TypeIs(class System.Linq.Expressions.Expression expression, class System.Type type) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.TypeIs(System.Linq.Expressions.Expression,System.Type)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Linq::Expressions::TypeBinaryExpression ^ TypeIs(System::Linq::Expressions::Expression ^ expression, Type ^ type);" />
      <MemberSignature Language="F#" Value="static member TypeIs : System.Linq.Expressions.Expression * Type -&gt; System.Linq.Expressions.TypeBinaryExpression" Usage="System.Linq.Expressions.Expression.TypeIs (expression, type)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.TypeBinaryExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="expression" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="type" Type="System.Type" />
      </Parameters>
      <Docs>
        <param name="expression">
          <span data-ttu-id="fef91-3727">Объект <see cref="T:System.Linq.Expressions.Expression" />, который следует задать в качестве значения свойства <see cref="P:System.Linq.Expressions.TypeBinaryExpression.Expression" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fef91-3727">An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.TypeBinaryExpression.Expression" /> property equal to.</span>
          </span>
        </param>
        <param name="type">
          <span data-ttu-id="fef91-3728">Объект <see cref="P:System.Linq.Expressions.Expression.Type" />, который следует задать в качестве значения свойства <see cref="P:System.Linq.Expressions.TypeBinaryExpression.TypeOperand" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fef91-3728">A <see cref="P:System.Linq.Expressions.Expression.Type" /> to set the <see cref="P:System.Linq.Expressions.TypeBinaryExpression.TypeOperand" /> property equal to.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="fef91-3729">Создает буфер <see cref="T:System.Linq.Expressions.TypeBinaryExpression" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fef91-3729">Creates a <see cref="T:System.Linq.Expressions.TypeBinaryExpression" />.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="fef91-3730">Выражение <see cref="T:System.Linq.Expressions.TypeBinaryExpression" /> со свойством <see cref="P:System.Linq.Expressions.Expression.NodeType" />, равным <see cref="F:System.Linq.Expressions.ExpressionType.TypeIs" />, и свойствами <see cref="P:System.Linq.Expressions.TypeBinaryExpression.Expression" /> и <see cref="P:System.Linq.Expressions.TypeBinaryExpression.TypeOperand" />, для которых заданы указанные значения.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fef91-3730">A <see cref="T:System.Linq.Expressions.TypeBinaryExpression" /> for which the <see cref="P:System.Linq.Expressions.Expression.NodeType" /> property is equal to <see cref="F:System.Linq.Expressions.ExpressionType.TypeIs" /> and for which the <see cref="P:System.Linq.Expressions.TypeBinaryExpression.Expression" /> and <see cref="P:System.Linq.Expressions.TypeBinaryExpression.TypeOperand" /> properties are set to the specified values.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="fef91-3731"><xref:System.Linq.Expressions.Expression.Type%2A> Результирующего <xref:System.Linq.Expressions.UnaryExpression> представляет <xref:System.Boolean>.</span><span class="sxs-lookup"><span data-stu-id="fef91-3731">The <xref:System.Linq.Expressions.Expression.Type%2A> property of the resulting <xref:System.Linq.Expressions.UnaryExpression> represents <xref:System.Boolean>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="fef91-3732">Следующий пример демонстрирует, как использовать <xref:System.Linq.Expressions.Expression.TypeIs%28System.Linq.Expressions.Expression%2CSystem.Type%29> метод для создания <xref:System.Linq.Expressions.TypeBinaryExpression> , представляющее проверку типа строкового значения с <xref:System.Int32> типа.</span><span class="sxs-lookup"><span data-stu-id="fef91-3732">The following example demonstrates how to use the <xref:System.Linq.Expressions.Expression.TypeIs%28System.Linq.Expressions.Expression%2CSystem.Type%29> method to create a <xref:System.Linq.Expressions.TypeBinaryExpression> that represents a type test of a string value against the <xref:System.Int32> type.</span></span>  
  
 [!code-csharp[System.Linq.Expressions.Expression#12](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Linq.Expressions.Expression/CS/Expression.cs#12)]
 [!code-vb[System.Linq.Expressions.Expression#12](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Linq.Expressions.Expression/VB/Expression.vb#12)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="fef91-3733">Значение параметра <paramref name="expression" /> или <paramref name="type" /> — <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fef91-3733">
              <paramref name="expression" /> or <paramref name="type" /> is <see langword="null" />.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <MemberGroup MemberName="UnaryPlus">
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="fef91-3734">Создает <see cref="T:System.Linq.Expressions.UnaryExpression" />, представляющий операцию "унарный плюс".</span>
          <span class="sxs-lookup">
            <span data-stu-id="fef91-3734">Creates a <see cref="T:System.Linq.Expressions.UnaryExpression" /> that represents a unary plus operation.</span>
          </span>
        </summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="UnaryPlus">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.UnaryExpression UnaryPlus (System.Linq.Expressions.Expression expression);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.UnaryExpression UnaryPlus(class System.Linq.Expressions.Expression expression) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.UnaryPlus(System.Linq.Expressions.Expression)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Linq::Expressions::UnaryExpression ^ UnaryPlus(System::Linq::Expressions::Expression ^ expression);" />
      <MemberSignature Language="F#" Value="static member UnaryPlus : System.Linq.Expressions.Expression -&gt; System.Linq.Expressions.UnaryExpression" Usage="System.Linq.Expressions.Expression.UnaryPlus expression" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.UnaryExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="expression" Type="System.Linq.Expressions.Expression" />
      </Parameters>
      <Docs>
        <param name="expression">
          <span data-ttu-id="fef91-3735">Объект <see cref="T:System.Linq.Expressions.Expression" />, который следует задать в качестве значения свойства <see cref="P:System.Linq.Expressions.UnaryExpression.Operand" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fef91-3735">An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.UnaryExpression.Operand" /> property equal to.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="fef91-3736">Создает <see cref="T:System.Linq.Expressions.UnaryExpression" />, представляющий операцию "унарный плюс".</span>
          <span class="sxs-lookup">
            <span data-stu-id="fef91-3736">Creates a <see cref="T:System.Linq.Expressions.UnaryExpression" /> that represents a unary plus operation.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="fef91-3737">Выражение <see cref="T:System.Linq.Expressions.UnaryExpression" /> со свойством <see cref="P:System.Linq.Expressions.Expression.NodeType" />, равным <see cref="F:System.Linq.Expressions.ExpressionType.UnaryPlus" />, и свойством <see cref="P:System.Linq.Expressions.UnaryExpression.Operand" />, для которого задано указанное значение.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fef91-3737">A <see cref="T:System.Linq.Expressions.UnaryExpression" /> that has the <see cref="P:System.Linq.Expressions.Expression.NodeType" /> property equal to <see cref="F:System.Linq.Expressions.ExpressionType.UnaryPlus" /> and the <see cref="P:System.Linq.Expressions.UnaryExpression.Operand" /> property set to the specified value.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="fef91-3738"><xref:System.Linq.Expressions.UnaryExpression.Method%2A> Результирующего <xref:System.Linq.Expressions.UnaryExpression> присваивается метод реализации.</span><span class="sxs-lookup"><span data-stu-id="fef91-3738">The <xref:System.Linq.Expressions.UnaryExpression.Method%2A> property of the resulting <xref:System.Linq.Expressions.UnaryExpression> is set to the implementing method.</span></span> <span data-ttu-id="fef91-3739"><xref:System.Linq.Expressions.Expression.Type%2A> Свойству присваивается тип узла.</span><span class="sxs-lookup"><span data-stu-id="fef91-3739">The <xref:System.Linq.Expressions.Expression.Type%2A> property is set to the type of the node.</span></span> <span data-ttu-id="fef91-3740">Если узел удаляется, <xref:System.Linq.Expressions.BinaryExpression.IsLifted%2A> и <xref:System.Linq.Expressions.BinaryExpression.IsLiftedToNull%2A> оба являются свойства `true`.</span><span class="sxs-lookup"><span data-stu-id="fef91-3740">If the node is lifted, the <xref:System.Linq.Expressions.BinaryExpression.IsLifted%2A> and <xref:System.Linq.Expressions.BinaryExpression.IsLiftedToNull%2A> properties are both `true`.</span></span> <span data-ttu-id="fef91-3741">В противном случае они имеют значение false.</span><span class="sxs-lookup"><span data-stu-id="fef91-3741">Otherwise, they are false.</span></span>  
  
#### <a name="implementing-method"></a><span data-ttu-id="fef91-3742">Реализация метода</span><span class="sxs-lookup"><span data-stu-id="fef91-3742">Implementing Method</span></span>  
 <span data-ttu-id="fef91-3743">Следующие правила определяют метод реализации для операции:</span><span class="sxs-lookup"><span data-stu-id="fef91-3743">The following rules determine the implementing method for the operation:</span></span>  
  
-   <span data-ttu-id="fef91-3744">Если `expression`. Тип — определяемого пользователем типа, который определяет унарного оператора «плюс», <xref:System.Reflection.MethodInfo> , который представляет оператор — это метод реализации.</span><span class="sxs-lookup"><span data-stu-id="fef91-3744">If `expression`.Type is a user-defined type that defines the unary plus operator, the <xref:System.Reflection.MethodInfo> that represents that operator is the implementing method.</span></span>  
  
-   <span data-ttu-id="fef91-3745">В противном случае, если `expression`. Тип является числовым типом, метод реализации является `null`.</span><span class="sxs-lookup"><span data-stu-id="fef91-3745">Otherwise, if `expression`.Type is a numeric type, the implementing method is `null`.</span></span>  
  
#### <a name="node-type-and-lifted-versus-non-lifted"></a><span data-ttu-id="fef91-3746">Тип узла с ликвидацией или без</span><span class="sxs-lookup"><span data-stu-id="fef91-3746">Node Type and Lifted versus Non-Lifted</span></span>  
 <span data-ttu-id="fef91-3747">Если метод реализации не `null`:</span><span class="sxs-lookup"><span data-stu-id="fef91-3747">If the implementing method is not `null`:</span></span>  
  
-   <span data-ttu-id="fef91-3748">Если `expression`. Тип допускает присваивание типу аргумента метода реализации, узел не удаляется.</span><span class="sxs-lookup"><span data-stu-id="fef91-3748">If `expression`.Type is assignable to the argument type of the implementing method, the node is not lifted.</span></span> <span data-ttu-id="fef91-3749">Тип узла — тип возвращаемого значения метода реализации.</span><span class="sxs-lookup"><span data-stu-id="fef91-3749">The type of the node is the return type of the implementing method.</span></span>  
  
-   <span data-ttu-id="fef91-3750">Если выполняются два следующих условия, узел удаляется, а тип узла — обнуляемый тип, соответствующий тип возвращаемого значения метода реализации:</span><span class="sxs-lookup"><span data-stu-id="fef91-3750">If the following two conditions are satisfied, the node is lifted and the type of the node is the nullable type that corresponds to the return type of the implementing method:</span></span>  
  
    -   <span data-ttu-id="fef91-3751">`expression`. Тип является типом значения, допускающие значение NULL, и соответствующий тип не поддерживающий значение NULL равен типу аргумента метода реализации.</span><span class="sxs-lookup"><span data-stu-id="fef91-3751">`expression`.Type is a nullable value type and the corresponding non-nullable value type is equal to the argument type of the implementing method.</span></span>  
  
    -   <span data-ttu-id="fef91-3752">Тип возвращаемого значения метода реализации является типом значения, не допускающие значения NULL.</span><span class="sxs-lookup"><span data-stu-id="fef91-3752">The return type of the implementing method is a non-nullable value type.</span></span>  
  
 <span data-ttu-id="fef91-3753">Если метод реализации `null`, тип узла — `expression`. Тип.</span><span class="sxs-lookup"><span data-stu-id="fef91-3753">If the implementing method is `null`, the type of the node is `expression`.Type.</span></span> <span data-ttu-id="fef91-3754">Если `expression`. Тип, не допускающие значения NULL, узел не удаляется.</span><span class="sxs-lookup"><span data-stu-id="fef91-3754">If `expression`.Type is non-nullable, the node is not lifted.</span></span> <span data-ttu-id="fef91-3755">В противном случае узел удаляется.</span><span class="sxs-lookup"><span data-stu-id="fef91-3755">Otherwise, the node is lifted.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="fef91-3756">
            <paramref name="expression" /> — <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fef91-3756">
              <paramref name="expression" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.InvalidOperationException">
          <span data-ttu-id="fef91-3757">Оператор "унарный плюс" не определен для типа <paramref name="expression" />.Type.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fef91-3757">The unary plus operator is not defined for <paramref name="expression" />.Type.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="UnaryPlus">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.UnaryExpression UnaryPlus (System.Linq.Expressions.Expression expression, System.Reflection.MethodInfo method);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.UnaryExpression UnaryPlus(class System.Linq.Expressions.Expression expression, class System.Reflection.MethodInfo method) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.UnaryPlus(System.Linq.Expressions.Expression,System.Reflection.MethodInfo)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Linq::Expressions::UnaryExpression ^ UnaryPlus(System::Linq::Expressions::Expression ^ expression, System::Reflection::MethodInfo ^ method);" />
      <MemberSignature Language="F#" Value="static member UnaryPlus : System.Linq.Expressions.Expression * System.Reflection.MethodInfo -&gt; System.Linq.Expressions.UnaryExpression" Usage="System.Linq.Expressions.Expression.UnaryPlus (expression, method)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.UnaryExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="expression" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="method" Type="System.Reflection.MethodInfo" />
      </Parameters>
      <Docs>
        <param name="expression">
          <span data-ttu-id="fef91-3758">Объект <see cref="T:System.Linq.Expressions.Expression" />, который следует задать в качестве значения свойства <see cref="P:System.Linq.Expressions.UnaryExpression.Operand" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fef91-3758">An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.UnaryExpression.Operand" /> property equal to.</span>
          </span>
        </param>
        <param name="method">
          <span data-ttu-id="fef91-3759">Объект <see cref="T:System.Reflection.MethodInfo" />, который следует задать в качестве значения свойства <see cref="P:System.Linq.Expressions.UnaryExpression.Method" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fef91-3759">A <see cref="T:System.Reflection.MethodInfo" /> to set the <see cref="P:System.Linq.Expressions.UnaryExpression.Method" /> property equal to.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="fef91-3760">Создает <see cref="T:System.Linq.Expressions.UnaryExpression" />, представляющий операцию "унарный плюс".</span>
          <span class="sxs-lookup">
            <span data-stu-id="fef91-3760">Creates a <see cref="T:System.Linq.Expressions.UnaryExpression" /> that represents a unary plus operation.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="fef91-3761">Выражение <see cref="T:System.Linq.Expressions.UnaryExpression" /> со свойством<see cref="P:System.Linq.Expressions.Expression.NodeType" />, равным <see cref="F:System.Linq.Expressions.ExpressionType.UnaryPlus" />, и свойствами <see cref="P:System.Linq.Expressions.UnaryExpression.Operand" /> и <see cref="P:System.Linq.Expressions.UnaryExpression.Method" />, для которых заданы указанные значения.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fef91-3761">A <see cref="T:System.Linq.Expressions.UnaryExpression" /> that has the <see cref="P:System.Linq.Expressions.Expression.NodeType" /> property equal to <see cref="F:System.Linq.Expressions.ExpressionType.UnaryPlus" /> and the <see cref="P:System.Linq.Expressions.UnaryExpression.Operand" /> and <see cref="P:System.Linq.Expressions.UnaryExpression.Method" /> properties set to the specified values.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="fef91-3762"><xref:System.Linq.Expressions.UnaryExpression.Method%2A> Результирующего <xref:System.Linq.Expressions.UnaryExpression> присваивается метод реализации.</span><span class="sxs-lookup"><span data-stu-id="fef91-3762">The <xref:System.Linq.Expressions.UnaryExpression.Method%2A> property of the resulting <xref:System.Linq.Expressions.UnaryExpression> is set to the implementing method.</span></span> <span data-ttu-id="fef91-3763"><xref:System.Linq.Expressions.Expression.Type%2A> Свойству присваивается тип узла.</span><span class="sxs-lookup"><span data-stu-id="fef91-3763">The <xref:System.Linq.Expressions.Expression.Type%2A> property is set to the type of the node.</span></span> <span data-ttu-id="fef91-3764">Если узел удаляется, <xref:System.Linq.Expressions.BinaryExpression.IsLifted%2A> и <xref:System.Linq.Expressions.BinaryExpression.IsLiftedToNull%2A> оба являются свойства `true`.</span><span class="sxs-lookup"><span data-stu-id="fef91-3764">If the node is lifted, the <xref:System.Linq.Expressions.BinaryExpression.IsLifted%2A> and <xref:System.Linq.Expressions.BinaryExpression.IsLiftedToNull%2A> properties are both `true`.</span></span> <span data-ttu-id="fef91-3765">В противном случае они имеют значение false.</span><span class="sxs-lookup"><span data-stu-id="fef91-3765">Otherwise, they are false.</span></span>  
  
#### <a name="implementing-method"></a><span data-ttu-id="fef91-3766">Реализация метода</span><span class="sxs-lookup"><span data-stu-id="fef91-3766">Implementing Method</span></span>  
 <span data-ttu-id="fef91-3767">Следующие правила определяют метод реализации для операции:</span><span class="sxs-lookup"><span data-stu-id="fef91-3767">The following rules determine the implementing method for the operation:</span></span>  
  
-   <span data-ttu-id="fef91-3768">Если `method` не `null` , и это отличный от void, `static` (`Shared` в Visual Basic) метод, который принимает один аргумент — это метод реализации для узла.</span><span class="sxs-lookup"><span data-stu-id="fef91-3768">If `method` is not `null` and it represents a non-void, `static` (`Shared` in Visual Basic) method that takes one argument, it is the implementing method for the node.</span></span>  
  
-   <span data-ttu-id="fef91-3769">Если `expression`. Тип — определяемого пользователем типа, который определяет унарного оператора «плюс», <xref:System.Reflection.MethodInfo> , который представляет оператор — это метод реализации.</span><span class="sxs-lookup"><span data-stu-id="fef91-3769">If `expression`.Type is a user-defined type that defines the unary plus operator, the <xref:System.Reflection.MethodInfo> that represents that operator is the implementing method.</span></span>  
  
-   <span data-ttu-id="fef91-3770">В противном случае, если `expression`. Тип является числовым типом, метод реализации является `null`.</span><span class="sxs-lookup"><span data-stu-id="fef91-3770">Otherwise, if `expression`.Type is a numeric type, the implementing method is `null`.</span></span>  
  
#### <a name="node-type-and-lifted-versus-non-lifted"></a><span data-ttu-id="fef91-3771">Тип узла с ликвидацией или без</span><span class="sxs-lookup"><span data-stu-id="fef91-3771">Node Type and Lifted versus Non-Lifted</span></span>  
 <span data-ttu-id="fef91-3772">Если метод реализации не `null`:</span><span class="sxs-lookup"><span data-stu-id="fef91-3772">If the implementing method is not `null`:</span></span>  
  
-   <span data-ttu-id="fef91-3773">Если `expression`. Тип допускает присваивание типу аргумента метода реализации, узел не удаляется.</span><span class="sxs-lookup"><span data-stu-id="fef91-3773">If `expression`.Type is assignable to the argument type of the implementing method, the node is not lifted.</span></span> <span data-ttu-id="fef91-3774">Тип узла — тип возвращаемого значения метода реализации.</span><span class="sxs-lookup"><span data-stu-id="fef91-3774">The type of the node is the return type of the implementing method.</span></span>  
  
-   <span data-ttu-id="fef91-3775">Если выполняются два следующих условия, узел удаляется, а тип узла — обнуляемый тип, соответствующий тип возвращаемого значения метода реализации:</span><span class="sxs-lookup"><span data-stu-id="fef91-3775">If the following two conditions are satisfied, the node is lifted and the type of the node is the nullable type that corresponds to the return type of the implementing method:</span></span>  
  
    -   <span data-ttu-id="fef91-3776">`expression`. Тип является типом значения, допускающие значение NULL, и соответствующий тип не поддерживающий значение NULL равен типу аргумента метода реализации.</span><span class="sxs-lookup"><span data-stu-id="fef91-3776">`expression`.Type is a nullable value type and the corresponding non-nullable value type is equal to the argument type of the implementing method.</span></span>  
  
    -   <span data-ttu-id="fef91-3777">Тип возвращаемого значения метода реализации является типом значения, не допускающие значения NULL.</span><span class="sxs-lookup"><span data-stu-id="fef91-3777">The return type of the implementing method is a non-nullable value type.</span></span>  
  
 <span data-ttu-id="fef91-3778">Если метод реализации `null`, тип узла — `expression`. Тип.</span><span class="sxs-lookup"><span data-stu-id="fef91-3778">If the implementing method is `null`, the type of the node is `expression`.Type.</span></span> <span data-ttu-id="fef91-3779">Если `expression`. Тип, не допускающие значения NULL, узел не удаляется.</span><span class="sxs-lookup"><span data-stu-id="fef91-3779">If `expression`.Type is non-nullable, the node is not lifted.</span></span> <span data-ttu-id="fef91-3780">В противном случае узел удаляется.</span><span class="sxs-lookup"><span data-stu-id="fef91-3780">Otherwise, the node is lifted.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="fef91-3781">
            <paramref name="expression" /> — <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fef91-3781">
              <paramref name="expression" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="fef91-3782">Значение параметра <paramref name="method" /> не равно <see langword="null" />, и метод, который представляется этим параметром, возвращает значение <see langword="void" />, не является <see langword="static" /> (<see langword="Shared" /> в Visual Basic) и не принимает ровно один аргумент.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fef91-3782">
              <paramref name="method" /> is not <see langword="null" /> and the method it represents returns <see langword="void" />, is not <see langword="static" /> (<see langword="Shared" /> in Visual Basic), or does not take exactly one argument.</span>
          </span>
        </exception>
        <exception cref="T:System.InvalidOperationException">
          <span data-ttu-id="fef91-3783">
            <paramref name="method" /> равно <see langword="null" />, а оператор "Унарный плюс" не определен для типа <paramref name="expression" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fef91-3783">
              <paramref name="method" /> is <see langword="null" /> and the unary plus operator is not defined for <paramref name="expression" />.Type.</span>
          </span>
          <span data-ttu-id="fef91-3784">-или-</span>
          <span class="sxs-lookup">
            <span data-stu-id="fef91-3784">-or-</span>
          </span>
          <span data-ttu-id="fef91-3785">Тип <paramref name="expression" />.Type (или соответствующий тип, не поддерживающий значение null, если он является типом, поддерживающим значение null) не назначается типу аргумента метода, представленного <paramref name="method" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fef91-3785">
              <paramref name="expression" />.Type (or its corresponding non-nullable type if it is a nullable value type) is not assignable to the argument type of the method represented by <paramref name="method" />.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="Unbox">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.UnaryExpression Unbox (System.Linq.Expressions.Expression expression, Type type);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.UnaryExpression Unbox(class System.Linq.Expressions.Expression expression, class System.Type type) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.Unbox(System.Linq.Expressions.Expression,System.Type)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Linq::Expressions::UnaryExpression ^ Unbox(System::Linq::Expressions::Expression ^ expression, Type ^ type);" />
      <MemberSignature Language="F#" Value="static member Unbox : System.Linq.Expressions.Expression * Type -&gt; System.Linq.Expressions.UnaryExpression" Usage="System.Linq.Expressions.Expression.Unbox (expression, type)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.UnaryExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="expression" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="type" Type="System.Type" />
      </Parameters>
      <Docs>
        <param name="expression">
          <span data-ttu-id="fef91-3786">Выражение <see cref="T:System.Linq.Expressions.Expression" /> для распаковки-преобразования.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fef91-3786">An <see cref="T:System.Linq.Expressions.Expression" /> to unbox.</span>
          </span>
        </param>
        <param name="type">
          <span data-ttu-id="fef91-3787">Новый тип <see cref="T:System.Type" /> выражения.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fef91-3787">The new <see cref="T:System.Type" /> of the expression.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="fef91-3788">Создает выражение <see cref="T:System.Linq.Expressions.UnaryExpression" />, представляющее явную распаковку-преобразование.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fef91-3788">Creates a <see cref="T:System.Linq.Expressions.UnaryExpression" /> that represents an explicit unboxing.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="fef91-3789">Экземпляр <see cref="T:System.Linq.Expressions.UnaryExpression" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fef91-3789">An instance of <see cref="T:System.Linq.Expressions.UnaryExpression" />.</span>
          </span>
        </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="Variable">
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="fef91-3790">Создает узел <see cref="T:System.Linq.Expressions.ParameterExpression" />, который можно использовать для идентификации параметра или переменной в дереве выражения.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fef91-3790">Creates a <see cref="T:System.Linq.Expressions.ParameterExpression" /> node that can be used to identify a parameter or a variable in an expression tree.</span>
          </span>
        </summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Variable">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.ParameterExpression Variable (Type type);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.ParameterExpression Variable(class System.Type type) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.Variable(System.Type)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Linq::Expressions::ParameterExpression ^ Variable(Type ^ type);" />
      <MemberSignature Language="F#" Value="static member Variable : Type -&gt; System.Linq.Expressions.ParameterExpression" Usage="System.Linq.Expressions.Expression.Variable type" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.ParameterExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="type" Type="System.Type" />
      </Parameters>
      <Docs>
        <param name="type">
          <span data-ttu-id="fef91-3791">Тип параметра или переменной.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fef91-3791">The type of the parameter or variable.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="fef91-3792">Создает узел <see cref="T:System.Linq.Expressions.ParameterExpression" />, который можно использовать для идентификации параметра или переменной в дереве выражения.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fef91-3792">Creates a <see cref="T:System.Linq.Expressions.ParameterExpression" /> node that can be used to identify a parameter or a variable in an expression tree.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="fef91-3793">Узел <see cref="T:System.Linq.Expressions.ParameterExpression" /> с указанными именем и типом.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fef91-3793">A <see cref="T:System.Linq.Expressions.ParameterExpression" /> node with the specified name and type</span>
          </span>
        </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Variable">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.ParameterExpression Variable (Type type, string name);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.ParameterExpression Variable(class System.Type type, string name) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.Variable(System.Type,System.String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Linq::Expressions::ParameterExpression ^ Variable(Type ^ type, System::String ^ name);" />
      <MemberSignature Language="F#" Value="static member Variable : Type * string -&gt; System.Linq.Expressions.ParameterExpression" Usage="System.Linq.Expressions.Expression.Variable (type, name)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.ParameterExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="type" Type="System.Type" />
        <Parameter Name="name" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="type">
          <span data-ttu-id="fef91-3794">Тип параметра или переменной.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fef91-3794">The type of the parameter or variable.</span>
          </span>
        </param>
        <param name="name">
          <span data-ttu-id="fef91-3795">Имя параметра или переменной.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fef91-3795">The name of the parameter or variable.</span>
          </span>
          <span data-ttu-id="fef91-3796">Это имя используется только для целей отладки и печати.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fef91-3796">This name is used for debugging or printing purpose only.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="fef91-3797">Создает узел <see cref="T:System.Linq.Expressions.ParameterExpression" />, который можно использовать для идентификации параметра или переменной в дереве выражения.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fef91-3797">Creates a <see cref="T:System.Linq.Expressions.ParameterExpression" /> node that can be used to identify a parameter or a variable in an expression tree.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="fef91-3798">Узел <see cref="T:System.Linq.Expressions.ParameterExpression" /> с указанными именем и типом.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fef91-3798">A <see cref="T:System.Linq.Expressions.ParameterExpression" /> node with the specified name and type.</span>
          </span>
        </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="VisitChildren">
      <MemberSignature Language="C#" Value="protected internal virtual System.Linq.Expressions.Expression VisitChildren (System.Linq.Expressions.ExpressionVisitor visitor);" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblyhidebysig newslot virtual instance class System.Linq.Expressions.Expression VisitChildren(class System.Linq.Expressions.ExpressionVisitor visitor) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.VisitChildren(System.Linq.Expressions.ExpressionVisitor)" />
      <MemberSignature Language="VB.NET" Value="Protected Friend Overridable Function VisitChildren (visitor As ExpressionVisitor) As Expression" />
      <MemberSignature Language="C++ CLI" Value="protected public:&#xA; virtual System::Linq::Expressions::Expression ^ VisitChildren(System::Linq::Expressions::ExpressionVisitor ^ visitor);" />
      <MemberSignature Language="F#" Value="abstract member VisitChildren : System.Linq.Expressions.ExpressionVisitor -&gt; System.Linq.Expressions.Expression&#xA;override this.VisitChildren : System.Linq.Expressions.ExpressionVisitor -&gt; System.Linq.Expressions.Expression" Usage="expression.VisitChildren visitor" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.Expression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="visitor" Type="System.Linq.Expressions.ExpressionVisitor" />
      </Parameters>
      <Docs>
        <param name="visitor">
          <span data-ttu-id="fef91-3799">Экземпляр <see cref="T:System.Func`2" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fef91-3799">An instance of <see cref="T:System.Func`2" />.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="fef91-3800">Сокращает узел и вызывает делегат-посетитель для сокращенного выражения.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fef91-3800">Reduces the node and then calls the visitor delegate on the reduced expression.</span>
          </span>
          <span data-ttu-id="fef91-3801">Данный метод создает исключение, если узел невозможно сократить.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fef91-3801">The method throws an exception if the node is not reducible.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="fef91-3802">Просмотренное выражение или выражение, которое должно заменить его в дереве.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fef91-3802">The expression being visited, or an expression which should replace it in the tree.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="fef91-3803">Переопределите этот метод для предоставления логики для прохода дочерних элементов узла.</span><span class="sxs-lookup"><span data-stu-id="fef91-3803">Override this method to provide logic to walk the node's children.</span></span> <span data-ttu-id="fef91-3804">Типичная реализация будет вызывать посетителя. Посетите на каждом из его дочерних элементов, и если какие-либо их изменить, должен вернуть новую копию самого с измененными дочерними элементами.</span><span class="sxs-lookup"><span data-stu-id="fef91-3804">A typical implementation will call visitor.Visit on each of its children, and if any of them change, should return a new copy of itself with the modified children.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>