<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" version="1.2" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="Expression`1.xml" source-language="en-US" target-language="ru-RU">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-15c36f0" tool-company="Microsoft" />
      <xliffext:skl_file_name xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">02cd5861-7ce2-4a82-b358-31f8435a0ac5852b4062c851ab4301c9efb34c1ebacc0ca1b9fe.skl</xliffext:skl_file_name>
      <xliffext:version xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">1.2</xliffext:version>
      <xliffext:ms.openlocfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">852b4062c851ab4301c9efb34c1ebacc0ca1b9fe</xliffext:ms.openlocfilehash>
      <xliffext:ms.sourcegitcommit xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">d31dc2ede16f6f7bc64e90d9f897ff54c4e3869b</xliffext:ms.sourcegitcommit>
      <xliffext:ms.lasthandoff xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">04/03/2018</xliffext:ms.lasthandoff>
      <xliffext:moniker_ids xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">netcore-1.0,netcore-1.1,netcore-2.0,netcore-2.1,netframework-4.5.1,netframework-4.5.2,netframework-4.5,netframework-4.6.1,netframework-4.6.2,netframework-4.6,netframework-4.7.1,netframework-4.7,netstandard-1.0,netstandard-1.1,netstandard-1.2,netstandard-1.3,netstandard-1.4,netstandard-1.6,netstandard-2.0,xamarinandroid-7.1,xamarinios-10.8,xamarinmac-3.0</xliffext:moniker_ids>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Linq.Expressions.Expression`1">
          <source>The type of the delegate that the <ph id="ph1">&lt;see cref="T:System.Linq.Expressions.Expression`1" /&gt;</ph> represents.</source>
          <target state="translated">Тип делегата, который представляет <ph id="ph1">&lt;see cref="T:System.Linq.Expressions.Expression`1" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve" uid="T:System.Linq.Expressions.Expression`1">
          <source>Represents a strongly typed lambda expression as a data structure in the form of an expression tree.</source>
          <target state="translated">Представляет строго типизированное лямбда-выражение как структуру данных в виде дерева выражений.</target>       </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve" uid="T:System.Linq.Expressions.Expression`1">
          <source>This class cannot be inherited.</source>
          <target state="translated">Этот класс не наследуется.</target>       </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Linq.Expressions.Expression`1">
          <source>When a lambda expression is assigned to a variable, field, or parameter whose type is <ph id="ph1">&lt;xref:System.Linq.Expressions.Expression%601&gt;</ph>, the compiler emits instructions to build an expression tree.</source>
          <target state="translated">Когда лямбда-выражение назначается переменной, поле или параметр с типом <ph id="ph1">&lt;xref:System.Linq.Expressions.Expression%601&gt;</ph>, компилятор выдает инструкции для создания дерева выражений.</target>       </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Linq.Expressions.Expression`1">
          <source>A conversion from a lambda expression to type <ph id="ph1">`Expression&lt;D&gt;`</ph> (<ph id="ph2">`Expression(Of D)`</ph> in Visual Basic) exists if a conversion from the lambda expression to a delegate of type <ph id="ph3">`D`</ph> exists.</source>
          <target state="translated">Преобразование из лямбда-выражения в тип <ph id="ph1">`Expression&lt;D&gt;`</ph> (<ph id="ph2">`Expression(Of D)`</ph> в Visual Basic) существует, если преобразование из лямбда-выражение в делегат типа <ph id="ph3">`D`</ph> существует.</target>       </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Linq.Expressions.Expression`1">
          <source>However, the conversion may fail, for example, if the body of the lambda expression is a block.</source>
          <target state="translated">Однако преобразование может завершиться неудачно, например, если тело лямбда-выражения является блоком.</target>       </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Linq.Expressions.Expression`1">
          <source>This means that delegates and expression trees behave similarly with regard to overload resolution.</source>
          <target state="translated">Это означает, что делегаты и деревья выражений работают так же, по отношению к разрешении перегрузки.</target>       </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Linq.Expressions.Expression`1">
          <source>The expression tree is an in-memory data representation of the lambda expression.</source>
          <target state="translated">Дерево выражения — это представление данных в памяти, лямбда-выражения.</target>       </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Linq.Expressions.Expression`1">
          <source>The expression tree makes the structure of the lambda expression transparent and explicit.</source>
          <target state="translated">Дерево выражений делает структуру лямбда-выражения прозрачной и явной.</target>       </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Linq.Expressions.Expression`1">
          <source>You can interact with the data in the expression tree just as you can with any other data structure.</source>
          <target state="translated">Можно взаимодействовать с данными в дерево выражения, так же, как с любой другой структурой данных.</target>       </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Linq.Expressions.Expression`1">
          <source>The ability to treat expressions as data structures enables APIs to receive user code in a format that can be inspected, transformed, and processed in a custom manner.</source>
          <target state="translated">Возможность использовать выражения как структуры данных включает для интерфейсов API получение кода пользователя в формате, который может проверять, преобразования и обработки особым образом.</target>       </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Linq.Expressions.Expression`1">
          <source>For example, the <ph id="ph1">[!INCLUDE[vbtecdlinq](~/includes/vbtecdlinq-md.md)]</ph> data access implementation uses this facility to translate expression trees to Transact-SQL statements that can be evaluated by the database.</source>
          <target state="translated">Например <ph id="ph1">[!INCLUDE[vbtecdlinq](~/includes/vbtecdlinq-md.md)]</ph> реализация доступа к данным использует это средство для преобразования деревьев выражений в инструкции Transact-SQL, которые могут вычисляться в базе данных.</target>       </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Linq.Expressions.Expression`1">
          <source>Many standard query operators defined in the <ph id="ph1">&lt;xref:System.Linq.Queryable&gt;</ph> class have one or more parameters of type <ph id="ph2">&lt;xref:System.Linq.Expressions.Expression%601&gt;</ph>.</source>
          <target state="translated">Многие стандартные операторы, определенные в <ph id="ph1">&lt;xref:System.Linq.Queryable&gt;</ph> класс имеет один или несколько параметров типа <ph id="ph2">&lt;xref:System.Linq.Expressions.Expression%601&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Linq.Expressions.Expression`1">
          <source>The <ph id="ph1">&lt;xref:System.Linq.Expressions.Expression.NodeType%2A&gt;</ph> of an <ph id="ph2">&lt;xref:System.Linq.Expressions.Expression%601&gt;</ph> is <ph id="ph3">&lt;xref:System.Linq.Expressions.ExpressionType.Lambda&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Linq.Expressions.Expression.NodeType%2A&gt;</ph> Из <ph id="ph2">&lt;xref:System.Linq.Expressions.Expression%601&gt;</ph> — <ph id="ph3">&lt;xref:System.Linq.Expressions.ExpressionType.Lambda&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Linq.Expressions.Expression`1">
          <source>Use the <ph id="ph1">&lt;xref:System.Linq.Expressions.Expression.Lambda%60%601%28System.Linq.Expressions.Expression%2CSystem.Collections.Generic.IEnumerable%7BSystem.Linq.Expressions.ParameterExpression%7D%29&gt;</ph> or <ph id="ph2">&lt;xref:System.Linq.Expressions.Expression.Lambda%60%601%28System.Linq.Expressions.Expression%2CSystem.Linq.Expressions.ParameterExpression%5B%5D%29&gt;</ph> method to create an <ph id="ph3">&lt;xref:System.Linq.Expressions.Expression%601&gt;</ph> object.</source>
          <target state="translated">Используйте <ph id="ph1">&lt;xref:System.Linq.Expressions.Expression.Lambda%60%601%28System.Linq.Expressions.Expression%2CSystem.Collections.Generic.IEnumerable%7BSystem.Linq.Expressions.ParameterExpression%7D%29&gt;</ph> или <ph id="ph2">&lt;xref:System.Linq.Expressions.Expression.Lambda%60%601%28System.Linq.Expressions.Expression%2CSystem.Linq.Expressions.ParameterExpression%5B%5D%29&gt;</ph> метод для создания <ph id="ph3">&lt;xref:System.Linq.Expressions.Expression%601&gt;</ph> объекта.</target>       </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Linq.Expressions.Expression`1">
          <source>The following code example demonstrates how to represent a lambda expression both as executable code in the form of a delegate and as data in the form of an expression tree.</source>
          <target state="translated">В следующем примере кода показано, как для представления лямбда-выражение как исполняемый код в форме делегата и как данные в виде дерева выражений.</target>       </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Linq.Expressions.Expression`1">
          <source>It also demonstrates how to turn the expression tree back into executable code by using the <ph id="ph1">&lt;xref:System.Linq.Expressions.Expression%601.Compile%2A&gt;</ph> method.</source>
          <target state="translated">Также демонстрируется вернулась дерева выражений в исполняемый код с помощью <ph id="ph1">&lt;xref:System.Linq.Expressions.Expression%601.Compile%2A&gt;</ph> метод.</target>       </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve" uid="M:System.Linq.Expressions.Expression`1.Compile">
          <source>Compiles the lambda expression described by the expression tree into executable code and produces a delegate that represents the lambda expression.</source>
          <target state="translated">Компилирует лямбда-выражение, описанное с помощью дерева выражений в исполняемый код и создает делегат, представляющий лямбда-выражение.</target>       </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve" uid="M:System.Linq.Expressions.Expression`1.Compile">
          <source>A delegate of type <ph id="ph1">&lt;paramref name="TDelegate" /&gt;</ph> that represents the compiled lambda expression described by the <ph id="ph2">&lt;see cref="T:System.Linq.Expressions.Expression`1" /&gt;</ph>.</source>
          <target state="translated">Делегат типа <ph id="ph1">&lt;paramref name="TDelegate" /&gt;</ph>, который представляет скомпилированное лямбда-выражение, описанное с помощью <ph id="ph2">&lt;see cref="T:System.Linq.Expressions.Expression`1" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Expressions.Expression`1.Compile">
          <source>The <ph id="ph1">&lt;xref:System.Linq.Expressions.Expression%601.Compile%2A&gt;</ph> method produces a delegate of type <ph id="ph2">`TDelegate`</ph> at runtime.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Linq.Expressions.Expression%601.Compile%2A&gt;</ph> Метод создает делегат типа <ph id="ph2">`TDelegate`</ph> во время выполнения.</target>       </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Expressions.Expression`1.Compile">
          <source>When that delegate is executed, it has the behavior described by the semantics of the <ph id="ph1">&lt;xref:System.Linq.Expressions.Expression%601&gt;</ph>.</source>
          <target state="translated">При выполнении этого делегата имеет поведение, описанное семантика <ph id="ph1">&lt;xref:System.Linq.Expressions.Expression%601&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Expressions.Expression`1.Compile">
          <source>The <ph id="ph1">&lt;xref:System.Linq.Expressions.Expression%601.Compile%2A&gt;</ph> method can be used to obtain the value of any expression tree.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Linq.Expressions.Expression%601.Compile%2A&gt;</ph> Метод может использоваться для получения значения любого дерева выражения.</target>       </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Expressions.Expression`1.Compile">
          <source>First, create a lambda expression that has the expression as its body by using the <ph id="ph1">&lt;xref:System.Linq.Expressions.Expression.Lambda%2A&gt;</ph> method.</source>
          <target state="translated">Сначала создайте лямбда-выражение с телом выражение, используя <ph id="ph1">&lt;xref:System.Linq.Expressions.Expression.Lambda%2A&gt;</ph> метод.</target>       </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Expressions.Expression`1.Compile">
          <source>Then call <ph id="ph1">&lt;xref:System.Linq.Expressions.Expression%601.Compile%2A&gt;</ph> to obtain a delegate, and execute the delegate to obtain the value of the expression.</source>
          <target state="translated">Затем вызовите <ph id="ph1">&lt;xref:System.Linq.Expressions.Expression%601.Compile%2A&gt;</ph> для получения делегата и выполняет делегат для получения значения выражения.</target>       </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Expressions.Expression`1.Compile">
          <source>The following code example demonstrates how <ph id="ph1">&lt;xref:System.Linq.Expressions.Expression%601.Compile%2A&gt;</ph> is used to execute an expression tree.</source>
          <target state="translated">В следующем примере кода показано, как <ph id="ph1">&lt;xref:System.Linq.Expressions.Expression%601.Compile%2A&gt;</ph> используется для выполнения дерева выражения.</target>       </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve" uid="M:System.Linq.Expressions.Expression`1.Compile(System.Boolean)">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph> to indicate that the expression should be compiled to an interpreted form, if it is available; <ph id="ph2">&lt;see langword="false" /&gt;</ph> otherwise.</source>
          <target state="translated"><ph id="ph1">&lt;see langword="true" /&gt;</ph>, чтобы указать, что выражение должно быть скомпилировано в интерпретированную форму, если она доступна; в противном случае — <ph id="ph2">&lt;see langword="false" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve" uid="M:System.Linq.Expressions.Expression`1.Compile(System.Boolean)">
          <source>Compiles the lambda expression described by the expression tree into interpreted or compiled code and produces a delegate that represents the lambda expression.</source>
          <target state="translated">Компилирует лямбда-выражение, описанное с помощью дерева выражений, в интерпретированный или скомпилированный код и создает делегат, представляющий лямбда-выражение.</target>       </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve" uid="M:System.Linq.Expressions.Expression`1.Compile(System.Boolean)">
          <source>A delegate that represents the compiled lambda expression described by the <ph id="ph1">&lt;see cref="T:System.Linq.Expressions.Expression`1" /&gt;</ph>.</source>
          <target state="translated">Делегат, представляющий скомпилированное лямбда-выражение, описанное <ph id="ph1">&lt;see cref="T:System.Linq.Expressions.Expression`1" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve" uid="M:System.Linq.Expressions.Expression`1.Compile(System.Runtime.CompilerServices.DebugInfoGenerator)">
          <source>Debugging information generator used by the compiler to mark sequence points and annotate local variables.</source>
          <target state="translated">Генератор отладочной информации, используемый компилятором для пометки точек следования и создания заметок для локальных переменных.</target>       </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve" uid="M:System.Linq.Expressions.Expression`1.Compile(System.Runtime.CompilerServices.DebugInfoGenerator)">
          <source>Produces a delegate that represents the lambda expression.</source>
          <target state="translated">Производит делегата, который представляет лямбда-выражение.</target>       </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve" uid="M:System.Linq.Expressions.Expression`1.Compile(System.Runtime.CompilerServices.DebugInfoGenerator)">
          <source>A delegate containing the compiled version of the lambda.</source>
          <target state="translated">Делегат, содержащий скомпилированную версию лямбда-выражения.</target>       </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve" uid="M:System.Linq.Expressions.Expression`1.Update(System.Linq.Expressions.Expression,System.Collections.Generic.IEnumerable{System.Linq.Expressions.ParameterExpression})">
          <source>The <ph id="ph1">&lt;see cref="P:System.Linq.Expressions.LambdaExpression.Body" /&gt;</ph> property of the result.</source>
          <target state="translated">Свойство <ph id="ph1">&lt;see cref="P:System.Linq.Expressions.LambdaExpression.Body" /&gt;</ph> результата.</target>       </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve" uid="M:System.Linq.Expressions.Expression`1.Update(System.Linq.Expressions.Expression,System.Collections.Generic.IEnumerable{System.Linq.Expressions.ParameterExpression})">
          <source>The <ph id="ph1">&lt;see cref="P:System.Linq.Expressions.LambdaExpression.Parameters" /&gt;</ph> property of the result.</source>
          <target state="translated">Свойство <ph id="ph1">&lt;see cref="P:System.Linq.Expressions.LambdaExpression.Parameters" /&gt;</ph> результата.</target>       </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve" uid="M:System.Linq.Expressions.Expression`1.Update(System.Linq.Expressions.Expression,System.Collections.Generic.IEnumerable{System.Linq.Expressions.ParameterExpression})">
          <source>Creates a new expression that is like this one, but using the supplied children.</source>
          <target state="translated">Создает новое выражение, аналогичное данному, но с использованием предоставленного дочернего элемента.</target>       </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve" uid="M:System.Linq.Expressions.Expression`1.Update(System.Linq.Expressions.Expression,System.Collections.Generic.IEnumerable{System.Linq.Expressions.ParameterExpression})">
          <source>If all of the children are the same, it will return this expression.</source>
          <target state="translated">Если все дочерние элементы совпадают, возвращается данное выражение.</target>       </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve" uid="M:System.Linq.Expressions.Expression`1.Update(System.Linq.Expressions.Expression,System.Collections.Generic.IEnumerable{System.Linq.Expressions.ParameterExpression})">
          <source>This expression if no children are changed or an expression with the updated children.</source>
          <target state="translated">Данное выражение, если никакие дочерние элементы не изменялись, или выражение с обновленными дочерними элементами.</target>       </trans-unit>
      </group>
    </body>
  </file>
</xliff>