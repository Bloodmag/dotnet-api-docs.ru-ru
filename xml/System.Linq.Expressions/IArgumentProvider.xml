<Type Name="IArgumentProvider" FullName="System.Linq.Expressions.IArgumentProvider">
  <Metadata><Meta Name="ms.openlocfilehash" Value="c1987bffe3d2cba01471534c9b3fac3e0c152c07" /><Meta Name="ms.sourcegitcommit" Value="434f60616a9793fa8436744549fc856e94f7a648" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="ru-RU" /><Meta Name="ms.lasthandoff" Value="08/24/2018" /><Meta Name="ms.locfileid" Value="36555652" /></Metadata><TypeSignature Language="C#" Value="public interface IArgumentProvider" />
  <TypeSignature Language="ILAsm" Value=".class public interface auto ansi abstract IArgumentProvider" />
  <TypeSignature Language="DocId" Value="T:System.Linq.Expressions.IArgumentProvider" />
  <TypeSignature Language="VB.NET" Value="Public Interface IArgumentProvider" />
  <TypeSignature Language="C++ CLI" Value="public interface class IArgumentProvider" />
  <TypeSignature Language="F#" Value="type IArgumentProvider = interface" />
  <AssemblyInfo>
    <AssemblyName>System.Linq.Expressions</AssemblyName>
    <AssemblyVersion>4.0.10.0</AssemblyVersion>
    <AssemblyVersion>4.1.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.1.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>System.Core</AssemblyName>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Interfaces />
  <Docs>
    <summary><span data-ttu-id="7f0d3-101">Предоставляет внутренний интерфейс для доступа к аргументам нескольких узлов дерева (DynamicExpression, ElementInit, MethodCallExpression, InvocationExpression, NewExpression и InexExpression).</span><span class="sxs-lookup"><span data-stu-id="7f0d3-101">Provides an internal interface for accessing the arguments of multiple tree nodes (DynamicExpression, ElementInit, MethodCallExpression, InvocationExpression, NewExpression, and InexExpression).</span></span>  <span data-ttu-id="7f0d3-102">Не следует использовать этот API.</span><span class="sxs-lookup"><span data-stu-id="7f0d3-102">You should not use this API.</span></span>  <span data-ttu-id="7f0d3-103">Он является открытым только из-за рефакторинга DLL и существует только для внутренней оптимизации производительности.</span><span class="sxs-lookup"><span data-stu-id="7f0d3-103">It is only public due to DLL refactoring and exists only for internal performance optimizations.</span></span>  
  
<span data-ttu-id="7f0d3-104">Благодаря этому доступны два способа оптимизации, которые уменьшают размер деревьев выражений.</span><span class="sxs-lookup"><span data-stu-id="7f0d3-104">This enables two optimizations which reduce the size of expression trees.</span></span>  <span data-ttu-id="7f0d3-105">Первый способ позволяет узлам дерева удерживаться в IList&lt;T&gt; вместо ReadOnlyCollection.</span><span class="sxs-lookup"><span data-stu-id="7f0d3-105">The first enables the tree nodes to hold onto an IList&lt;T&gt; instead of a ReadOnlyCollection.</span></span>  <span data-ttu-id="7f0d3-106">IList&lt;T&gt; экономит выделение ReadOnlyCollection для каждого узла.</span><span class="sxs-lookup"><span data-stu-id="7f0d3-106">IList&lt;T&gt; saves the cost of allocating the ReadOnlyCollection for each node.</span></span>  <span data-ttu-id="7f0d3-107">Второй способ включает создание специализированных подклассов, которые могут захватывать определенное число аргументов (например, Block2, Block3, Block4).</span><span class="sxs-lookup"><span data-stu-id="7f0d3-107">The second enables creating specialized subclasses that hold onto a specific number of arguments (for example, Block2, Block3, Block4).</span></span>  <span data-ttu-id="7f0d3-108">Таким образом, для этих узлов не требуется выделять ReadOnlyCollection и массив для хранения их элементов, что экономит по 32 байта на каждый узел.</span><span class="sxs-lookup"><span data-stu-id="7f0d3-108">Therefore, these nodes avoid allocating both a ReadOnlyCollection and an array for storing their elements, saving 32 bytes per node.</span></span>  
  
<span data-ttu-id="7f0d3-109">Узлы дерева выражения по-прежнему предоставляют исходные свойства ReadOnlyCollections LINQ.</span><span class="sxs-lookup"><span data-stu-id="7f0d3-109">The expression tree nodes continue to expose the original LINQ properties of ReadOnlyCollections.</span></span>  <span data-ttu-id="7f0d3-110">Это достигается повторным использованием поля для хранения массива или элемента, который обычно хранятся в массиве.</span><span class="sxs-lookup"><span data-stu-id="7f0d3-110">The nodes do this by re-using a field for storing both the array or an element that would normally be stored in the array.</span></span>  
  
<span data-ttu-id="7f0d3-111">В случае массива коллекции типизируется в IList&lt;T&gt; вместо ReadOnlyCollection&lt;T&gt;.</span><span class="sxs-lookup"><span data-stu-id="7f0d3-111">For the array case, the collection is typed to IList&lt;T&gt; instead of ReadOnlyCollection&lt;T&gt;.</span></span>  <span data-ttu-id="7f0d3-112">Когда узел изначально создается, он является массивом.</span><span class="sxs-lookup"><span data-stu-id="7f0d3-112">When the node is initially constructed it is an array.</span></span>  <span data-ttu-id="7f0d3-113">Компилятор при доступе к членам использует этот интерфейс.</span><span class="sxs-lookup"><span data-stu-id="7f0d3-113">When the compiler accesses the members it uses this interface.</span></span>  <span data-ttu-id="7f0d3-114">Доступ к элементам массива повышает уровень массива до ReadOnlyCollection.</span><span class="sxs-lookup"><span data-stu-id="7f0d3-114">Accessing array elements promotes the array to a ReadOnlyCollection.</span></span>  
  
<span data-ttu-id="7f0d3-115">В случае объекта первый аргумент хранится в поле, типизированном в объект.</span><span class="sxs-lookup"><span data-stu-id="7f0d3-115">For the object case we store the first argument in a field typed to object.</span></span>  <span data-ttu-id="7f0d3-116">Когда узел изначально создается, это поле содержит выражение.</span><span class="sxs-lookup"><span data-stu-id="7f0d3-116">When the node is initially constructed, the field holds the Expression.</span></span>  <span data-ttu-id="7f0d3-117">Компилятор обращается к аргументам через этот интерфейс, и метод доступа для первого аргумента использует Expression.ReturnObject для возврата объекта, который обрабатывает случай выражения (Expression) или ReadOnlyCollection.</span><span class="sxs-lookup"><span data-stu-id="7f0d3-117">The compiler accesses arguments through this interface, and the accessor for the first argument uses Expression.ReturnObject to return the object that handles the Expression or ReadOnlyCollection case.</span></span>  <span data-ttu-id="7f0d3-118">Когда пользователь обращается к ReadOnlyCollection, поле объекта обновляется для хранения непосредственно в ReadOnlyCollection.</span><span class="sxs-lookup"><span data-stu-id="7f0d3-118">When the user accesses the ReadOnlyCollection, then the object field is updated to hold directly onto the ReadOnlyCollection.</span></span>  
  
<span data-ttu-id="7f0d3-119">Важно, что выражения всегда возвращают один и тот же объект ReadOnlyCollection.</span><span class="sxs-lookup"><span data-stu-id="7f0d3-119">It is important that the Expressions consistently return the same ReadOnlyCollection.</span></span>  <span data-ttu-id="7f0d3-120">В противном случае обход дерева перезаписи будет нарушен.</span><span class="sxs-lookup"><span data-stu-id="7f0d3-120">Otherwise, the re-writer tree walker will break.</span></span>  <span data-ttu-id="7f0d3-121">Это критическое изменение LINQ v1 для возврата разных ReadOnlyCollection из того же узла Expression.</span><span class="sxs-lookup"><span data-stu-id="7f0d3-121">It is a breaking change from LINQ v1 to return different ReadOnlyCollections form the same Expression node.</span></span>  <span data-ttu-id="7f0d3-122">В настоящее время пользователи могут использовать удостоверение объекта, чтобы сообщать, изменился ли узел.</span><span class="sxs-lookup"><span data-stu-id="7f0d3-122">Currently users can rely on object identity to tell if the node has changed.</span></span>  <span data-ttu-id="7f0d3-123">Хранение ReadOnlyCollection в перегруженном поле позволяет сократить использование памяти и обеспечивает совместимость для открытого API-интерфейса.</span><span class="sxs-lookup"><span data-stu-id="7f0d3-123">Storing the ReadOnlyCollection in an overloaded field both reduces memory usage and maintains compatibility for the public API.</span></span></summary>
    <remarks>To be added.</remarks>
  </Docs>
  <Members>
    <Member MemberName="ArgumentCount">
      <MemberSignature Language="C#" Value="public int ArgumentCount { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 ArgumentCount" />
      <MemberSignature Language="DocId" Value="P:System.Linq.Expressions.IArgumentProvider.ArgumentCount" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property ArgumentCount As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property int ArgumentCount { int get(); };" />
      <MemberSignature Language="F#" Value="member this.ArgumentCount : int" Usage="System.Linq.Expressions.IArgumentProvider.ArgumentCount" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="7f0d3-124">Возвращает число аргументов для узла дерева выражения.</span><span class="sxs-lookup"><span data-stu-id="7f0d3-124">Returns the number of arguments to the expression tree node.</span></span>  <span data-ttu-id="7f0d3-125">Не следует использовать этот тип.</span><span class="sxs-lookup"><span data-stu-id="7f0d3-125">You should not use this type.</span></span>  <span data-ttu-id="7f0d3-126">Он является открытым только из-за рефакторинга сборки и используется внутренне для оптимизации производительности.</span><span class="sxs-lookup"><span data-stu-id="7f0d3-126">It is only public due to assembly refactoring, and it is used internally for performance optimizations.</span></span></summary>
        <value><span data-ttu-id="7f0d3-127">Число аргументов для узла дерева выражения как <see cref="T:System.Int32" />.</span><span class="sxs-lookup"><span data-stu-id="7f0d3-127">The number of arguments to the expression tree node as <see cref="T:System.Int32" />.</span></span></value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetArgument">
      <MemberSignature Language="C#" Value="public System.Linq.Expressions.Expression GetArgument (int index);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Linq.Expressions.Expression GetArgument(int32 index) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.IArgumentProvider.GetArgument(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Function GetArgument (index As Integer) As Expression" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Linq::Expressions::Expression ^ GetArgument(int index);" />
      <MemberSignature Language="F#" Value="abstract member GetArgument : int -&gt; System.Linq.Expressions.Expression" Usage="iArgumentProvider.GetArgument index" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.Expression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="index" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="index"><span data-ttu-id="7f0d3-128">Индекс аргумента.</span><span class="sxs-lookup"><span data-stu-id="7f0d3-128">The index of the argument.</span></span></param>
        <summary><span data-ttu-id="7f0d3-129">Возвращает аргумент в индексе, создавая исключение, если индекс вне допустимых границ.</span><span class="sxs-lookup"><span data-stu-id="7f0d3-129">Returns the argument at index, throwing if index is out of bounds.</span></span>  <span data-ttu-id="7f0d3-130">Не следует использовать этот тип.</span><span class="sxs-lookup"><span data-stu-id="7f0d3-130">You should not use this type.</span></span>  <span data-ttu-id="7f0d3-131">Он является открытым только из-за рефакторинга сборки и используется внутренне для оптимизации производительности.</span><span class="sxs-lookup"><span data-stu-id="7f0d3-131">It is only public due to assembly refactoring, and it is used internally for performance optimizations.</span></span></summary>
        <returns><span data-ttu-id="7f0d3-132">Аргумент в индексе, вызываемый, если индекс находится вне допустимых границ, как <see cref="T:System.Linq.Expressions.Expression" />.</span><span class="sxs-lookup"><span data-stu-id="7f0d3-132">The argument at index, throwing if index is out of bounds as <see cref="T:System.Linq.Expressions.Expression" />.</span></span></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
  </Members>
</Type>