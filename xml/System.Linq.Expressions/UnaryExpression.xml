<Type Name="UnaryExpression" FullName="System.Linq.Expressions.UnaryExpression">
  <TypeSignature Language="C#" Value="public sealed class UnaryExpression : System.Linq.Expressions.Expression" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed beforefieldinit UnaryExpression extends System.Linq.Expressions.Expression" />
  <TypeSignature Language="DocId" Value="T:System.Linq.Expressions.UnaryExpression" />
  <TypeSignature Language="VB.NET" Value="Public NotInheritable Class UnaryExpression&#xA;Inherits Expression" />
  <TypeSignature Language="C++ CLI" Value="public ref class UnaryExpression sealed : System::Linq::Expressions::Expression" />
  <AssemblyInfo>
    <AssemblyName>System.Linq.Expressions</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.10.0</AssemblyVersion>
    <AssemblyVersion>4.1.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.1.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>System.Core</AssemblyName>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Linq.Expressions.Expression</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute>
      <AttributeName>System.Diagnostics.DebuggerTypeProxy(typeof(System.Linq.Expressions.Expression/UnaryExpressionProxy))</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary><span data-ttu-id="c28d0-101">Представляет выражение, имеющее унарный оператор.</span><span class="sxs-lookup"><span data-stu-id="c28d0-101">Represents an expression that has a unary operator.</span></span></summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="c28d0-102">В следующей таблице перечислены методы фабрики, которые можно использовать для создания <xref:System.Linq.Expressions.UnaryExpression> , имеет конкретный тип узла.</span><span class="sxs-lookup"><span data-stu-id="c28d0-102">The following table summarizes the factory methods that can be used to create a <xref:System.Linq.Expressions.UnaryExpression> that has a specific node type.</span></span>  
  
|<xref:System.Linq.Expressions.Expression.NodeType%2A>|<span data-ttu-id="c28d0-103">Фабричный метод</span><span class="sxs-lookup"><span data-stu-id="c28d0-103">Factory Method</span></span>|  
|----------------------------------------------------------------------------------------------------------------------------------------------------------|--------------------|  
|<xref:System.Linq.Expressions.ExpressionType.ArrayLength>|<xref:System.Linq.Expressions.Expression.ArrayLength%2A>|  
|<xref:System.Linq.Expressions.ExpressionType.Convert>|<xref:System.Linq.Expressions.Expression.Convert%2A>|  
|<xref:System.Linq.Expressions.ExpressionType.ConvertChecked>|<xref:System.Linq.Expressions.Expression.ConvertChecked%2A>|  
|<xref:System.Linq.Expressions.ExpressionType.Negate>|<xref:System.Linq.Expressions.Expression.Negate%2A>|  
|<xref:System.Linq.Expressions.ExpressionType.NegateChecked>|<xref:System.Linq.Expressions.Expression.NegateChecked%2A>|  
|<xref:System.Linq.Expressions.ExpressionType.Not>|<xref:System.Linq.Expressions.Expression.Not%2A>|  
|<xref:System.Linq.Expressions.ExpressionType.Quote>|<xref:System.Linq.Expressions.Expression.Quote%2A>|  
|<xref:System.Linq.Expressions.ExpressionType.TypeAs>|<xref:System.Linq.Expressions.Expression.TypeAs%2A>|  
|<xref:System.Linq.Expressions.ExpressionType.UnaryPlus>|<xref:System.Linq.Expressions.Expression.UnaryPlus%2A>|  
  
 <span data-ttu-id="c28d0-104">Кроме того <xref:System.Linq.Expressions.Expression.MakeUnary%2A> методы могут также использоваться для создания <xref:System.Linq.Expressions.UnaryExpression>.</span><span class="sxs-lookup"><span data-stu-id="c28d0-104">In addition, the <xref:System.Linq.Expressions.Expression.MakeUnary%2A> methods can also be used to create a <xref:System.Linq.Expressions.UnaryExpression>.</span></span> <span data-ttu-id="c28d0-105">Можно использовать эти методы фабрики для создания <xref:System.Linq.Expressions.UnaryExpression> типа узел, представляющий унарной операции.</span><span class="sxs-lookup"><span data-stu-id="c28d0-105">These factory methods can be used to create a <xref:System.Linq.Expressions.UnaryExpression> of any node type that represents a unary operation.</span></span> <span data-ttu-id="c28d0-106">Параметр этих методов, который относится к типу <xref:System.Linq.Expressions.Expression.NodeType%2A> указывает тип требуемый узел.</span><span class="sxs-lookup"><span data-stu-id="c28d0-106">The parameter of these methods that is of type <xref:System.Linq.Expressions.Expression.NodeType%2A> specifies the desired node type.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="c28d0-107">В следующем примере создается <xref:System.Linq.Expressions.UnaryExpression> объект, представляющий преобразование ссылка, не допускающим целое число со знаком выражения к типу integer, допускающие значение NULL.</span><span class="sxs-lookup"><span data-stu-id="c28d0-107">The following example creates a <xref:System.Linq.Expressions.UnaryExpression> object that represents the reference conversion of a non-nullable integer expression to the nullable integer type.</span></span>  
  
 [!code-csharp[System.Linq.Expressions.Expression#11](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Linq.Expressions.Expression/CS/Expression.cs#11)]
 [!code-vb[System.Linq.Expressions.Expression#11](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Linq.Expressions.Expression/VB/Expression.vb#11)]  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName="Accept">
      <MemberSignature Language="C#" Value="protected internal override System.Linq.Expressions.Expression Accept (System.Linq.Expressions.ExpressionVisitor visitor);" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblyhidebysig virtual instance class System.Linq.Expressions.Expression Accept(class System.Linq.Expressions.ExpressionVisitor visitor) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.UnaryExpression.Accept(System.Linq.Expressions.ExpressionVisitor)" />
      <MemberSignature Language="VB.NET" Value="Protected Friend Overrides Function Accept (visitor As ExpressionVisitor) As Expression" />
      <MemberSignature Language="C++ CLI" Value="protected public:&#xA; override System::Linq::Expressions::Expression ^ Accept(System::Linq::Expressions::ExpressionVisitor ^ visitor);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.Expression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="visitor" Type="System.Linq.Expressions.ExpressionVisitor" />
      </Parameters>
      <Docs>
        <param name="visitor">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CanReduce">
      <MemberSignature Language="C#" Value="public override bool CanReduce { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool CanReduce" />
      <MemberSignature Language="DocId" Value="P:System.Linq.Expressions.UnaryExpression.CanReduce" />
      <MemberSignature Language="VB.NET" Value="Public Overrides ReadOnly Property CanReduce As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property bool CanReduce { bool get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="c28d0-108">Возвращает значение, указывающее, можно ли сократить узел дерева выражений.</span><span class="sxs-lookup"><span data-stu-id="c28d0-108">Gets a value that indicates whether the expression tree node can be reduced.</span></span></summary>
        <value><span data-ttu-id="c28d0-109">Значение true, если узел можно сократить; в противном случае — значение false.</span><span class="sxs-lookup"><span data-stu-id="c28d0-109">True if a node can be reduced, otherwise false.</span></span></value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="IsLifted">
      <MemberSignature Language="C#" Value="public bool IsLifted { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsLifted" />
      <MemberSignature Language="DocId" Value="P:System.Linq.Expressions.UnaryExpression.IsLifted" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsLifted As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsLifted { bool get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="c28d0-110">Возвращает значение, указывающее, представляет ли узел дерева выражения ликвидированный вызов оператора.</span><span class="sxs-lookup"><span data-stu-id="c28d0-110">Gets a value that indicates whether the expression tree node represents a lifted call to an operator.</span></span></summary>
        <value>
          <span data-ttu-id="c28d0-111"><see langword="true" />, если узел представляет удаленный вызов; в противном случае — <see langword="false" />.</span><span class="sxs-lookup"><span data-stu-id="c28d0-111"><see langword="true" /> if the node represents a lifted call; otherwise, <see langword="false" />.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="c28d0-112">Вызов оператора *ликвидируется* Если оператор ожидает операнд типа допускают значение NULL, а операнд типа nullable передается в него.</span><span class="sxs-lookup"><span data-stu-id="c28d0-112">An operator call is *lifted* if the operator expects a non-nullable operand but a nullable operand is passed to it.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsLiftedToNull">
      <MemberSignature Language="C#" Value="public bool IsLiftedToNull { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsLiftedToNull" />
      <MemberSignature Language="DocId" Value="P:System.Linq.Expressions.UnaryExpression.IsLiftedToNull" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsLiftedToNull As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsLiftedToNull { bool get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="c28d0-113">Возвращает значение, указывающее, представляет ли узел дерева выражения ликвидированный вызов оператора, тип возврата которого удален для типа со значением NULL.</span><span class="sxs-lookup"><span data-stu-id="c28d0-113">Gets a value that indicates whether the expression tree node represents a lifted call to an operator whose return type is lifted to a nullable type.</span></span></summary>
        <value>
          <span data-ttu-id="c28d0-114"><see langword="true" />, если тип возврата оператора удален до типа со значением NULL, иначе возвращается значение <see langword="false" />.</span><span class="sxs-lookup"><span data-stu-id="c28d0-114"><see langword="true" /> if the operator's return type is lifted to a nullable type; otherwise, <see langword="false" />.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="c28d0-115">Вызов оператора *ликвидируется* Если оператор ожидает операнд типа допускают значение NULL, а операнд типа nullable передается в него.</span><span class="sxs-lookup"><span data-stu-id="c28d0-115">An operator call is *lifted* if the operator expects a non-nullable operand but a nullable operand is passed to it.</span></span> <span data-ttu-id="c28d0-116">Если значение <xref:System.Linq.Expressions.UnaryExpression.IsLiftedToNull%2A> — `true`, оператор возвращает тип, допускающий значение NULL, и если операнд равен `null`, оператор возвращает `null`.</span><span class="sxs-lookup"><span data-stu-id="c28d0-116">If the value of <xref:System.Linq.Expressions.UnaryExpression.IsLiftedToNull%2A> is `true`, the operator returns a nullable type and if the nullable operand evaluates to `null`, the operator returns `null`.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Method">
      <MemberSignature Language="C#" Value="public System.Reflection.MethodInfo Method { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Reflection.MethodInfo Method" />
      <MemberSignature Language="DocId" Value="P:System.Linq.Expressions.UnaryExpression.Method" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Method As MethodInfo" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Reflection::MethodInfo ^ Method { System::Reflection::MethodInfo ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.MethodInfo</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="c28d0-117">Получает реализацию метода для унарной операции.</span><span class="sxs-lookup"><span data-stu-id="c28d0-117">Gets the implementing method for the unary operation.</span></span></summary>
        <value><span data-ttu-id="c28d0-118"><see cref="T:System.Reflection.MethodInfo" />, представляющий метод реализации.</span><span class="sxs-lookup"><span data-stu-id="c28d0-118">The <see cref="T:System.Reflection.MethodInfo" /> that represents the implementing method.</span></span></value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="NodeType">
      <MemberSignature Language="C#" Value="public override sealed System.Linq.Expressions.ExpressionType NodeType { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Linq.Expressions.ExpressionType NodeType" />
      <MemberSignature Language="DocId" Value="P:System.Linq.Expressions.UnaryExpression.NodeType" />
      <MemberSignature Language="VB.NET" Value="Public Overrides NotOverridable ReadOnly Property NodeType As ExpressionType" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Linq::Expressions::ExpressionType NodeType { System::Linq::Expressions::ExpressionType get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.ExpressionType</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="c28d0-119">Возвращает тип узла данного выражения <see cref="T:System.Linq.Expressions.Expression" />.</span><span class="sxs-lookup"><span data-stu-id="c28d0-119">Returns the node type of this <see cref="T:System.Linq.Expressions.Expression" />.</span></span></summary>
        <value><span data-ttu-id="c28d0-120">Объект <see cref="T:System.Linq.Expressions.ExpressionType" />, представляющий данное выражение.</span><span class="sxs-lookup"><span data-stu-id="c28d0-120">The <see cref="T:System.Linq.Expressions.ExpressionType" /> that represents this expression.</span></span></value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Operand">
      <MemberSignature Language="C#" Value="public System.Linq.Expressions.Expression Operand { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Linq.Expressions.Expression Operand" />
      <MemberSignature Language="DocId" Value="P:System.Linq.Expressions.UnaryExpression.Operand" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Operand As Expression" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Linq::Expressions::Expression ^ Operand { System::Linq::Expressions::Expression ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.Expression</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="c28d0-121">Получает операнд унарной операции.</span><span class="sxs-lookup"><span data-stu-id="c28d0-121">Gets the operand of the unary operation.</span></span></summary>
        <value><span data-ttu-id="c28d0-122">Объект <see cref="T:System.Linq.Expressions.Expression" />, который предоставляет операнд унарной операции.</span><span class="sxs-lookup"><span data-stu-id="c28d0-122">An <see cref="T:System.Linq.Expressions.Expression" /> that represents the operand of the unary operation.</span></span></value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Reduce">
      <MemberSignature Language="C#" Value="public override System.Linq.Expressions.Expression Reduce ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance class System.Linq.Expressions.Expression Reduce() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.UnaryExpression.Reduce" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function Reduce () As Expression" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override System::Linq::Expressions::Expression ^ Reduce();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.Expression</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="c28d0-123">Сокращает узел выражений до более простого выражения.</span><span class="sxs-lookup"><span data-stu-id="c28d0-123">Reduces the expression node to a simpler expression.</span></span></summary>
        <returns><span data-ttu-id="c28d0-124">Преобразованное выражение.</span><span class="sxs-lookup"><span data-stu-id="c28d0-124">The reduced expression.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="c28d0-125">Если `CanReduce` метод возвращает значение true, это должен вернуть допустимое выражение.</span><span class="sxs-lookup"><span data-stu-id="c28d0-125">If the `CanReduce` method returns true, this should return a valid expression.</span></span>  
  
 <span data-ttu-id="c28d0-126">Данный метод может вернуть другой узел, который нужно будет преобразовать еще раз.</span><span class="sxs-lookup"><span data-stu-id="c28d0-126">This method can return another node which itself must be reduced.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Type">
      <MemberSignature Language="C#" Value="public override sealed Type Type { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Type Type" />
      <MemberSignature Language="DocId" Value="P:System.Linq.Expressions.UnaryExpression.Type" />
      <MemberSignature Language="VB.NET" Value="Public Overrides NotOverridable ReadOnly Property Type As Type" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property Type ^ Type { Type ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Type</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="c28d0-127">Получает статичный тип выражения, представленного этим выражением <see cref="T:System.Linq.Expressions.Expression" />.</span><span class="sxs-lookup"><span data-stu-id="c28d0-127">Gets the static type of the expression that this <see cref="T:System.Linq.Expressions.Expression" /> represents.</span></span></summary>
        <value><span data-ttu-id="c28d0-128">Тип <see cref="P:System.Linq.Expressions.UnaryExpression.Type" />, представляющий этот статичный тип выражения.</span><span class="sxs-lookup"><span data-stu-id="c28d0-128">The <see cref="P:System.Linq.Expressions.UnaryExpression.Type" /> that represents the static type of the expression.</span></span></value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Update">
      <MemberSignature Language="C#" Value="public System.Linq.Expressions.UnaryExpression Update (System.Linq.Expressions.Expression operand);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Linq.Expressions.UnaryExpression Update(class System.Linq.Expressions.Expression operand) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.UnaryExpression.Update(System.Linq.Expressions.Expression)" />
      <MemberSignature Language="VB.NET" Value="Public Function Update (operand As Expression) As UnaryExpression" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Linq::Expressions::UnaryExpression ^ Update(System::Linq::Expressions::Expression ^ operand);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.UnaryExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="operand" Type="System.Linq.Expressions.Expression" />
      </Parameters>
      <Docs>
        <param name="operand"><span data-ttu-id="c28d0-129">Свойство <see cref="P:System.Linq.Expressions.UnaryExpression.Operand" /> результата.</span><span class="sxs-lookup"><span data-stu-id="c28d0-129">The <see cref="P:System.Linq.Expressions.UnaryExpression.Operand" /> property of the result.</span></span></param>
        <summary><span data-ttu-id="c28d0-130">Создает новое выражение, аналогичное данному, но с использованием предоставленного дочернего элемента.</span><span class="sxs-lookup"><span data-stu-id="c28d0-130">Creates a new expression that is like this one, but using the supplied children.</span></span> <span data-ttu-id="c28d0-131">Если все дочерние элементы совпадают, возвращается данное выражение.</span><span class="sxs-lookup"><span data-stu-id="c28d0-131">If all of the children are the same, it will return this expression.</span></span></summary>
        <returns><span data-ttu-id="c28d0-132">Данное выражение, если никакие дочерние элементы не изменялись, или выражение с обновленными дочерними элементами.</span><span class="sxs-lookup"><span data-stu-id="c28d0-132">This expression if no children are changed or an expression with the updated children.</span></span></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
  </Members>
</Type>