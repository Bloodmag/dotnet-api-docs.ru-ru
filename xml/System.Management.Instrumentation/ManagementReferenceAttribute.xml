<Type Name="ManagementReferenceAttribute" FullName="System.Management.Instrumentation.ManagementReferenceAttribute">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="983a8730fdb8f6151cdeb209f33fafb354a6fd80" />
    <Meta Name="ms.sourcegitcommit" Value="0ec122ee5f3681159b8460ab15b409fd6e3d3ae0" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="ru-RU" />
    <Meta Name="ms.lasthandoff" Value="10/04/2018" />
    <Meta Name="ms.locfileid" Value="48710382" />
  </Metadata>
  <TypeSignature Language="C#" Value="public sealed class ManagementReferenceAttribute : Attribute" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed beforefieldinit ManagementReferenceAttribute extends System.Attribute" />
  <TypeSignature Language="DocId" Value="T:System.Management.Instrumentation.ManagementReferenceAttribute" />
  <TypeSignature Language="VB.NET" Value="Public NotInheritable Class ManagementReferenceAttribute&#xA;Inherits Attribute" />
  <TypeSignature Language="C++ CLI" Value="public ref class ManagementReferenceAttribute sealed : Attribute" />
  <TypeSignature Language="F#" Value="type ManagementReferenceAttribute = class&#xA;    inherit Attribute" />
  <AssemblyInfo>
    <AssemblyName>System.Core</AssemblyName>
    <AssemblyVersion>3.5.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Attribute</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
      <AttributeName>System.AttributeUsage(System.AttributeTargets.Field | System.AttributeTargets.Parameter | System.AttributeTargets.Property, AllowMultiple=false)</AttributeName>
    </Attribute>
    <Attribute FrameworkAlternate="netframework-3.5">
      <AttributeName>System.AttributeUsage(System.AttributeTargets.Property | System.AttributeTargets.Field | System.AttributeTargets.Parameter, AllowMultiple=false)</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>
      <span data-ttu-id="fc991-101">Атрибут ManagementReferenceAttribute помечает элемент класса, свойство или параметр метода в качестве ссылки на другой объект или класс управления.</span>
      <span class="sxs-lookup">
        <span data-stu-id="fc991-101">The ManagementReferenceAttribute marks a class member, property or method parameter as a reference to another management object or class.</span>
      </span>
      <span data-ttu-id="fc991-102">Примечание. Работа над библиотеками .NET инструментария WMI завершена. В дальнейшем не предвидится никаких разработок, улучшений или обновлений в отношении не связанных с безопасностью проблем, влияющих на эти библиотеки.</span>
      <span class="sxs-lookup">
        <span data-stu-id="fc991-102">Note: the WMI .NET libraries are now considered in final state, and no further development, enhancements, or updates will be available for non-security related issues affecting these libraries.</span>
      </span>
      <span data-ttu-id="fc991-103">Для разработки новых приложений следует использовать [интерфейсы API MI](https://msdn.microsoft.com/library/jj152383%28v=vs.80%29.aspx).</span>
      <span class="sxs-lookup">
        <span data-stu-id="fc991-103">The [MI APIs](https://msdn.microsoft.com/library/jj152383%28v=vs.80%29.aspx) should be used for all new development.</span>
      </span>
    </summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="fc991-104">Этот атрибут можно использовать для создания классов сопоставлений, как показано в следующем примере.</span><span class="sxs-lookup"><span data-stu-id="fc991-104">You can use this attribute to create association classes as demonstrated in the following example.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="fc991-105">В этом примере демонстрируется использование <xref:System.Management.Instrumentation.ManagementReferenceAttribute> атрибута вместе с <xref:System.Management.Instrumentation.ManagementQualifierAttribute> для создания ассоциации класс WMI, который связывает два других классов WMI.</span><span class="sxs-lookup"><span data-stu-id="fc991-105">This example demonstrates how to use the <xref:System.Management.Instrumentation.ManagementReferenceAttribute> attribute together with the <xref:System.Management.Instrumentation.ManagementQualifierAttribute> to create an association WMI class that links two other WMI classes.</span></span> <span data-ttu-id="fc991-106">В примере показана несвязанного поставщика, который предоставляет три класса WMI в пространстве имен корневого/assoc.</span><span class="sxs-lookup"><span data-stu-id="fc991-106">The example is a decoupled provider that exposes three WMI classes in the root/assoc namespace.</span></span> <span data-ttu-id="fc991-107">Первые два класса, NumberPhonetic и NumberLetter, связаны с помощью последнего класса, LetterPhonetic.</span><span class="sxs-lookup"><span data-stu-id="fc991-107">The first two classes, NumberPhonetic and NumberLetter, are linked by the last class, LetterPhonetic.</span></span>  
  
 <span data-ttu-id="fc991-108">Чтобы скомпилировать этот пример, необходимо включить ссылки на атрибуты System.Management.Instrumentation и System.Configuration.Install.</span><span class="sxs-lookup"><span data-stu-id="fc991-108">To compile the example, you will need to include references to both System.Management.Instrumentation and System.Configuration.Install.</span></span> <span data-ttu-id="fc991-109">Необходимо запустить installutil.exe полученного исполняемого файла и убедитесь, что программа выполняется для использования реализованных классов WMI.</span><span class="sxs-lookup"><span data-stu-id="fc991-109">You must run installutil.exe against the resulting executable and ensure that the program is running in order to use the implemented WMI classes.</span></span>  
  
```  
using System;  
using System.Collections;  
using System.Management.Instrumentation;  
  
[assembly: WmiConfiguration("root/assoc", HostingModel = ManagementHostingModel.Decoupled)]  
  
[System.ComponentModel.RunInstaller(true)]  
public class TheInstaller : DefaultManagementInstaller  
{ }  
  
namespace AssocExample  
{  
    class Program  
    {  
        static void Main(string[] args)  
        {  
            InstrumentationManager.RegisterType(typeof(NumberPhonetic));  
            InstrumentationManager.RegisterType(typeof(NumberLetter));  
            InstrumentationManager.RegisterType(typeof(LetterPhonetic));  
  
            Console.WriteLine("Press enter to exit");  
            Console.ReadLine();  
  
            InstrumentationManager.UnregisterType(typeof(NumberPhonetic));  
            InstrumentationManager.UnregisterType(typeof(NumberLetter));  
            InstrumentationManager.UnregisterType(typeof(LetterPhonetic));  
  
        }  
    }  
  
  [ManagementEntity]  
    public class NumberPhonetic  
    {  
        [ManagementKey]  
        public int Number;  
  
        [ManagementProbe]  
        public string Name;  
  
        [ManagementBind]  
        public NumberPhonetic(int Number)  
        {  
           this.Number = Number;  
           if(Number == 1)  
           {  
              Name = "alpha";  
           }  
           else if(Number == 2)  
           {  
              Name = "bravo";  
           }  
           else  
           {  
              throw new InstanceNotFoundException();  
           }  
        }  
  
        [ManagementEnumerator]  
        static public IEnumerable EnumerateInstances()  
        {  
            for (int i = 1; i < 3; i++)  
            {  
                yield return new NumberPhonetic(i);  
            }  
        }  
  
    }  
  
    [ManagementEntity]  
    public class NumberLetter  
    {  
        [ManagementKey]  
        public int Number;  
  
        [ManagementProbe]  
        public string Letter;  
  
        [ManagementBind]  
        public NumberLetter(int Number)  
        {  
           this.Number = Number;  
           if(Number == 1)  
           {  
              Letter = "A";  
           }  
           else if(Number == 2)  
           {  
              Letter = "B";  
           }  
           else  
           {  
              throw new InstanceNotFoundException();  
           }  
        }  
  
        [ManagementEnumerator]  
        static public IEnumerable EnumerateInstances()  
        {  
            for (int i = 1; i < 3; i++)  
            {  
                yield return new NumberLetter(i);  
            }  
        }  
  
    }  
  
    [ManagementEntity]  
    [ManagementQualifier("Association", Flavor = ManagementQualifierFlavors.DisableOverride)]  
    public class LetterPhonetic  
    {  
        [ManagementReference(Type = "NumberLetter")]  
        [ManagementKey]  
        public string LetterNumber;  
  
        [ManagementReference(Type = "NumberPhonetic")]  
        [ManagementKey]  
        public string PhoneticNumber;  
  
        [ManagementEnumerator]  
        static public IEnumerable EnumerateInstances()  
        {  
            ArrayList insts = new ArrayList();  
            for (int i = 1; i < 3; i++)  
            {  
                LetterPhonetic inst = new LetterPhonetic();  
                inst.LetterNumber = "Letter = " + i;  
                inst.PhoneticNumber = "Phonetic = " + i;  
                insts.Add(inst);  
            }  
            return insts;  
        }  
  
    }  
  
}  
```  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public ManagementReferenceAttribute ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Management.Instrumentation.ManagementReferenceAttribute.#ctor" />
      <MemberSignature Language="VB.NET" Value="Public Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; ManagementReferenceAttribute();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="fc991-110">Инициализирует новый экземпляр класса <see cref="T:System.Management.Instrumentation.ManagementReferenceAttribute" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fc991-110">Initializes a new instance of the <see cref="T:System.Management.Instrumentation.ManagementReferenceAttribute" /> class.</span>
          </span>
          <span data-ttu-id="fc991-111">Это конструктор по умолчанию.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fc991-111">This is the default constructor.</span>
          </span>
        </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Type">
      <MemberSignature Language="C#" Value="public string Type { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string Type" />
      <MemberSignature Language="DocId" Value="P:System.Management.Instrumentation.ManagementReferenceAttribute.Type" />
      <MemberSignature Language="VB.NET" Value="Public Property Type As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ Type { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberSignature Language="F#" Value="member this.Type : string with get, set" Usage="System.Management.Instrumentation.ManagementReferenceAttribute.Type" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>set: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="fc991-112">Возвращает или задает имя типа, на который происходит ссылка.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fc991-112">Gets or sets the name of the referenced type.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="fc991-113">Строка, содержащая имя типа, на который происходит ссылка.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fc991-113">A string containing the name of the referenced type.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="fc991-114">По умолчанию используется тип объекта.</span><span class="sxs-lookup"><span data-stu-id="fc991-114">The default type is object.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Management.Instrumentation.ManagementQualifierAttribute" />
      </Docs>
    </Member>
  </Members>
</Type>