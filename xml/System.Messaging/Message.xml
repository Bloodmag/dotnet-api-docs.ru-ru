<Type Name="Message" FullName="System.Messaging.Message">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="452b72d229254f13a5d2827bfeca0ec97c6f6675" />
    <Meta Name="ms.sourcegitcommit" Value="d31dc2ede16f6f7bc64e90d9f897ff54c4e3869b" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="ru-RU" />
    <Meta Name="ms.lasthandoff" Value="04/03/2018" />
    <Meta Name="ms.locfileid" Value="30461098" />
  </Metadata>
  <TypeSignature Language="C#" Value="public class Message : System.ComponentModel.Component" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit Message extends System.ComponentModel.Component" />
  <TypeSignature Language="DocId" Value="T:System.Messaging.Message" />
  <TypeSignature Language="VB.NET" Value="Public Class Message&#xA;Inherits Component" />
  <TypeSignature Language="C++ CLI" Value="public ref class Message : System::ComponentModel::Component" />
  <AssemblyInfo>
    <AssemblyName>System.Messaging</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.ComponentModel.Component</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute>
      <AttributeName>System.ComponentModel.Designer("System.Messaging.Design.MessageDesigner, System.Design, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>Предоставляет доступ к свойствам, необходимым для определения сообщения службы MSMQ.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Используйте <xref:System.Messaging.Message> класса, чтобы просматривать и получать сообщения из очереди, или для детального управления свойствами сообщения при отправке сообщения в очередь.  
  
 <xref:System.Messaging.MessageQueue> использует <xref:System.Messaging.Message> класса при чтении или получении сообщений из очереди, так как оба <xref:System.Messaging.MessageQueue.Peek%2A?displayProperty=nameWithType> и <xref:System.Messaging.MessageQueue.Receive%2A?displayProperty=nameWithType> методы создают новый экземпляр <xref:System.Messaging.Message> класс и установить свойства этого экземпляра. <xref:System.Messaging.Message> Применяются только для чтения свойства класса для получения сообщений из очереди, то время как свойства чтения/записи относятся к отправке и получении сообщений. Когда <xref:System.Messaging.MessageQueue> просматривает или получает сообщение из очереди, его <xref:System.Messaging.MessageQueue.MessageReadPropertyFilter%2A> свойство определяет, какие свойства сообщения извлекаются.  
  
 <xref:System.Messaging.MessageQueue> Класса <xref:System.Messaging.MessageQueue.Send%2A> метод позволяет указать любой тип объекта для сообщения, передаваемого в эту очередь. Можно использовать <xref:System.Messaging.MessageQueue> экземпляра <xref:System.Messaging.MessageQueue.DefaultPropertiesToSend%2A> для описания параметров универсальных сообщений, отправленных в очередь. Типы параметров включают модуль форматирования, метку, шифрование и проверку подлинности. Можно также указать значения для соответствующих <xref:System.Messaging.MessageQueue.DefaultPropertiesToSend%2A> членов при координации приложения обмена сообщениями для обработки сообщений подтверждения и отчетов. С помощью <xref:System.Messaging.Message> экземпляра для отправки сообщения в очередь обеспечивает гибкость доступа и изменения многие из этих свойств — для одного сообщения, либо на основе сообщений. <xref:System.Messaging.Message> свойства имеют приоритет над <xref:System.Messaging.MessageQueue.DefaultPropertiesToSend%2A>.  
  
 Данные сообщения хранятся в <xref:System.Messaging.Message.Body%2A> свойства и в меньшей степени <xref:System.Messaging.Message.AppSpecific%2A> и <xref:System.Messaging.Message.Extension%2A> свойства. Когда данные сообщения шифруются, сериализуемых или десериализуемых, только содержимое <xref:System.Messaging.Message.Body%2A> влияет свойство.  
  
 Содержимое <xref:System.Messaging.Message.Body%2A> свойства сериализуются в том случае, когда сообщение отправляется с использованием <xref:System.Messaging.Message.Formatter%2A> свойству. Сериализованное содержимое находится в <xref:System.Messaging.Message.BodyStream%2A> свойство. Можно также задать <xref:System.Messaging.Message.BodyStream%2A> свойство напрямую, например, чтобы отправить файл как содержимое данных сообщения. Вы можете изменить <xref:System.Messaging.Message.Body%2A> или <xref:System.Messaging.Message.Formatter%2A> в любое время перед отправкой сообщения и данные будут сериализованы свойства соответствующим образом при вызове <xref:System.Messaging.MessageQueue.Send%2A>.  
  
 Свойства, определенные <xref:System.Messaging.MessageQueue.DefaultPropertiesToSend%2A?displayProperty=nameWithType> свойство применяется только к сообщениям, которые не относятся к типу <xref:System.Messaging.Message>. При указании <xref:System.Messaging.MessageQueue.DefaultPropertiesToSend%2A> свойство <xref:System.Messaging.MessageQueue>, идентичными именам свойств в <xref:System.Messaging.Message> экземпляр отправляет вызывать очередь будут использоваться эти свойства по умолчанию.  
  
 Список начальных значений свойств для экземпляра <xref:System.Messaging.Message>, в разделе <xref:System.Messaging.Message.%23ctor%2A> конструктор.  
  
   
  
## Examples  
 В следующем примере кода демонстрируется, форматирование текста сообщения с помощью <xref:System.Messaging.BinaryMessageFormatter>.  
  
 [!code-cpp[MessagingBinaryFormatter#1](~/samples/snippets/cpp/VS_Snippets_Remoting/MessagingBinaryFormatter/CPP/message_binaryformatter.cpp#1)]
 [!code-csharp[MessagingBinaryFormatter#1](~/samples/snippets/csharp/VS_Snippets_Remoting/MessagingBinaryFormatter/CS/message_binaryformatter.cs#1)]
 [!code-vb[MessagingBinaryFormatter#1](~/samples/snippets/visualbasic/VS_Snippets_Remoting/MessagingBinaryFormatter/VB/message_binaryformatter.vb#1)]  
  
 В следующем примере кода демонстрируется, форматирование текста сообщения с помощью <xref:System.Messaging.XmlMessageFormatter>.  
  
 [!code-cpp[Message.Body#1](~/samples/snippets/cpp/VS_Snippets_Remoting/Message.Body/CPP/message_sendreceive.cpp#1)]
 [!code-csharp[Message.Body#1](~/samples/snippets/csharp/VS_Snippets_Remoting/Message.Body/CS/message_sendreceive.cs#1)]
 [!code-vb[Message.Body#1](~/samples/snippets/visualbasic/VS_Snippets_Remoting/Message.Body/VB/message_sendreceive.vb#1)]  
  
 ]]></format>
    </remarks>
    <altmember cref="T:System.Messaging.MessageQueue" />
    <altmember cref="T:System.Messaging.DefaultPropertiesToSend" />
    <altmember cref="M:System.Messaging.MessageQueue.Send(System.Object)" />
    <altmember cref="M:System.Messaging.MessageQueue.Receive" />
    <altmember cref="M:System.Messaging.MessageQueue.Peek" />
  </Docs>
  <Members>
    <MemberGroup MemberName=".ctor">
      <AssemblyInfo>
        <AssemblyName>System.Messaging</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Инициализирует новый экземпляр класса <see cref="T:System.Messaging.Message" />.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public Message ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Messaging.Message.#ctor" />
      <MemberSignature Language="VB.NET" Value="Public Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; Message();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Messaging</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary>Инициализирует новый экземпляр класса <see cref="T:System.Messaging.Message" /> с пустым текстом сообщения.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Используйте этот перегруженный метод для создания нового экземпляра <xref:System.Messaging.Message> класс с пустым телом.  
  
 Укажите либо <xref:System.Messaging.Message.Body%2A> свойство или <xref:System.Messaging.Message.BodyStream%2A> до передачи <xref:System.Messaging.Message> объекта. <xref:System.Messaging.Message.Body%2A> Свойство может быть любой объект, который может быть сериализован, например текстовая строка, структурный объект, экземпляр класса или внедренный объект.  
  
 Если содержимое сообщения записывается непосредственно в <xref:System.Messaging.Message.BodyStream%2A> , установите <xref:System.Messaging.Message.Formatter%2A> перед передачей сообщения. Текст сериализуется с помощью <xref:System.Messaging.Message.Formatter%2A> значения свойства во время <xref:System.Messaging.MessageQueue.Send%2A> метод будет вызван на <xref:System.Messaging.MessageQueue> экземпляра.  
  
 <xref:System.Messaging.XmlMessageFormatter> Слабо связанный, поэтому нет необходимости иметь объект того же типа на отправителя и получателя, при применении этого формата. <xref:System.Messaging.ActiveXMessageFormatter> И <xref:System.Messaging.BinaryMessageFormatter> сериализации данных в двоичное представление. <xref:System.Messaging.ActiveXMessageFormatter> Используется при отправке и получении COM-компонентов.  
  
 Следующей таблице представлены исходные значения свойств для экземпляра класса <xref:System.Messaging.Message>.  
  
|Свойство.|Исходное значение|  
|--------------|-------------------|  
|<xref:System.Messaging.Message.AcknowledgeType%2A>|`AcknowledgeType.None`|  
|<xref:System.Messaging.Message.AdministrationQueue%2A>|`null`|  
|<xref:System.Messaging.Message.AppSpecific%2A>|0|  
|<xref:System.Messaging.Message.AttachSenderId%2A>|`true`|  
|<xref:System.Messaging.Message.AuthenticationProviderName%2A>|Microsoft Base Cryptographic Provider версии 1.0|  
|<xref:System.Messaging.Message.AuthenticationProviderType%2A>|`CryptoProviderType.RSA_FULL`|  
|<xref:System.Messaging.Message.Body%2A>|`null`|  
|<xref:System.Messaging.Message.BodyStream%2A>|`Stream.null`|  
|<xref:System.Messaging.Message.BodyType%2A>|0|  
|<xref:System.Messaging.Message.ConnectorType%2A>|`Guid.Empty`|  
|<xref:System.Messaging.Message.CorrelationId%2A>|Пустая строка (»»)|  
|<xref:System.Messaging.Message.DestinationSymmetricKey%2A>|Массив байтов нулевой длины|  
|<xref:System.Messaging.Message.DigitalSignature%2A>|Массив байтов нулевой длины|  
|<xref:System.Messaging.Message.EncryptionAlgorithm%2A>|`EncryptionAlgorithm.RC2`|  
|<xref:System.Messaging.Message.Extension%2A>|Массив байтов нулевой длины|  
|<xref:System.Messaging.Message.Formatter%2A>|`XmlMessageFormatter`|  
|<xref:System.Messaging.Message.HashAlgorithm%2A>|`HashAlgorithm.MD5`|  
|<xref:System.Messaging.Message.Label%2A>|Пустая строка (»»)|  
|<xref:System.Messaging.Message.Priority%2A>|`MessagePriority.Normal`|  
|<xref:System.Messaging.Message.Recoverable%2A>|`false`|  
|<xref:System.Messaging.Message.ResponseQueue%2A>|`null`|  
|<xref:System.Messaging.Message.SenderCertificate%2A>|Массив байтов нулевой длины|  
|<xref:System.Messaging.Message.TimeToBeReceived%2A>|`Message.InfiniteTimeout`|  
|<xref:System.Messaging.Message.TimeToReachQueue%2A>|`Message.InfiniteTimeout`|  
|<xref:System.Messaging.Message.TransactionStatusQueue%2A>|`null`|  
|<xref:System.Messaging.Message.UseAuthentication%2A>|`false`|  
|<xref:System.Messaging.Message.UseDeadLetterQueue%2A>|`false`|  
|<xref:System.Messaging.Message.UseEncryption%2A>|`false`|  
|<xref:System.Messaging.Message.UseJournalQueue%2A>|`false`|  
|<xref:System.Messaging.Message.UseTracing%2A>|`false`|  
  
   
  
## Examples  
 В следующем примере кода два сообщения с различным приоритетом отправляются в очередь и последовательно извлекаются.  
  
 [!code-cpp[Message.DefaultPropertiesToSend#1](~/samples/snippets/cpp/VS_Snippets_Remoting/Message.DefaultPropertiesToSend/CPP/message_defaultandpriority.cpp#1)]
 [!code-csharp[Message.DefaultPropertiesToSend#1](~/samples/snippets/csharp/VS_Snippets_Remoting/Message.DefaultPropertiesToSend/CS/message_defaultandpriority.cs#1)]
 [!code-vb[Message.DefaultPropertiesToSend#1](~/samples/snippets/visualbasic/VS_Snippets_Remoting/Message.DefaultPropertiesToSend/VB/message_defaultandpriority.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Messaging.XmlMessageFormatter" />
        <altmember cref="P:System.Messaging.Message.Body" />
        <altmember cref="T:System.Messaging.DefaultPropertiesToSend" />
        <altmember cref="T:System.Messaging.MessageQueue" />
        <altmember cref="M:System.Messaging.MessageQueue.Send(System.Object)" />
        <altmember cref="M:System.Messaging.MessageQueue.Peek" />
        <altmember cref="M:System.Messaging.MessageQueue.Receive" />
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public Message (object body);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(object body) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Messaging.Message.#ctor(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (body As Object)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; Message(System::Object ^ body);" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Messaging</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="body" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="body">Объект, сериализуемый в текст сообщения.</param>
        <summary>Инициализирует новый экземпляр класса <see cref="T:System.Messaging.Message" />, используя <see cref="T:System.Messaging.XmlMessageFormatter" /> для сериализации заданного объекта в текст сообщения.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Используйте этот перегруженный метод для создания нового экземпляра <xref:System.Messaging.Message> класс, содержащий <xref:System.Messaging.Message.Body%2A> заданные `body` параметра. `body` Параметр может быть любой объект, который может быть сериализован, например текстовая строка, структурный объект, экземпляр класса или внедренный объект. Текст сериализуется с помощью <xref:System.Messaging.XmlMessageFormatter> только после изменения <xref:System.Messaging.Message.Formatter%2A> свойства перед <xref:System.Messaging.Message> отправляется. При изменении <xref:System.Messaging.Message.Body%2A> или <xref:System.Messaging.Message.Formatter%2A> в любой момент перед вызовом <xref:System.Messaging.MessageQueue.Send%2A>, сообщения сериализуются в соответствии с новым значением свойства.  
  
 <xref:System.Messaging.XmlMessageFormatter> Слабо связанный, поэтому нет необходимости иметь объект того же типа на отправителя и получателя, при применении этого формата. <xref:System.Messaging.ActiveXMessageFormatter> И <xref:System.Messaging.BinaryMessageFormatter> сериализации данных в двоичное представление. <xref:System.Messaging.ActiveXMessageFormatter> Используется при отправке и получении COM-компонентов.  
  
 Следующей таблице представлены исходные значения свойств для экземпляра класса <xref:System.Messaging.Message>.  
  
|Свойство.|Исходное значение|  
|--------------|-------------------|  
|<xref:System.Messaging.Message.AcknowledgeType%2A>|`AcknowledgeType.None`|  
|<xref:System.Messaging.Message.AdministrationQueue%2A>|`null`|  
|<xref:System.Messaging.Message.AppSpecific%2A>|0|  
|<xref:System.Messaging.Message.AttachSenderId%2A>|`true`|  
|<xref:System.Messaging.Message.AuthenticationProviderName%2A>|Microsoft Base Cryptographic Provider версии 1.0|  
|<xref:System.Messaging.Message.AuthenticationProviderType%2A>|`CryptoProviderType.RSA_FULL`|  
|<xref:System.Messaging.Message.Body%2A>|Параметр `body`.|  
|<xref:System.Messaging.Message.BodyStream%2A>|`Stream.null`|  
|<xref:System.Messaging.Message.BodyType%2A>|0|  
|<xref:System.Messaging.Message.ConnectorType%2A>|`Guid.Empty`|  
|<xref:System.Messaging.Message.CorrelationId%2A>|Пустая строка (»»)|  
|<xref:System.Messaging.Message.DestinationSymmetricKey%2A>|Массив байтов нулевой длины|  
|<xref:System.Messaging.Message.DigitalSignature%2A>|Массив байтов нулевой длины|  
|<xref:System.Messaging.Message.EncryptionAlgorithm%2A>|`EncryptionAlgorithm.RC2`|  
|<xref:System.Messaging.Message.Extension%2A>|Массив байтов нулевой длины|  
|<xref:System.Messaging.Message.Formatter%2A>|`XmlMessageFormatter`|  
|<xref:System.Messaging.Message.HashAlgorithm%2A>|`HashAlgorithm.MD5`|  
|<xref:System.Messaging.Message.Label%2A>|Пустая строка (»»)|  
|<xref:System.Messaging.Message.Priority%2A>|`MessagePriority.Normal`|  
|<xref:System.Messaging.Message.Recoverable%2A>|`false`|  
|<xref:System.Messaging.Message.ResponseQueue%2A>|`null`|  
|<xref:System.Messaging.Message.SenderCertificate%2A>|Массив байтов нулевой длины|  
|<xref:System.Messaging.Message.TimeToBeReceived%2A>|`Message.InfiniteTimeout`|  
|<xref:System.Messaging.Message.TimeToReachQueue%2A>|`Message.InfiniteTimeout`|  
|<xref:System.Messaging.Message.TransactionStatusQueue%2A>|`null`|  
|<xref:System.Messaging.Message.UseAuthentication%2A>|`false`|  
|<xref:System.Messaging.Message.UseDeadLetterQueue%2A>|`false`|  
|<xref:System.Messaging.Message.UseEncryption%2A>|`false`|  
|<xref:System.Messaging.Message.UseJournalQueue%2A>|`false`|  
|<xref:System.Messaging.Message.UseTracing%2A>|`false`|  
  
   
  
## Examples  
 В следующем примере кода создается новая очередь, отправляет сообщение, которое содержит номер в, а затем извлекает его.  
  
 [!code-cpp[Message.Body#1](~/samples/snippets/cpp/VS_Snippets_Remoting/Message.Body/CPP/message_sendreceive.cpp#1)]
 [!code-csharp[Message.Body#1](~/samples/snippets/csharp/VS_Snippets_Remoting/Message.Body/CS/message_sendreceive.cs#1)]
 [!code-vb[Message.Body#1](~/samples/snippets/visualbasic/VS_Snippets_Remoting/Message.Body/VB/message_sendreceive.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Messaging.XmlMessageFormatter" />
        <altmember cref="T:System.Messaging.DefaultPropertiesToSend" />
        <altmember cref="T:System.Messaging.MessageQueue" />
        <altmember cref="M:System.Messaging.MessageQueue.Send(System.Object)" />
        <altmember cref="M:System.Messaging.MessageQueue.Peek" />
        <altmember cref="M:System.Messaging.MessageQueue.Receive" />
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public Message (object body, System.Messaging.IMessageFormatter formatter);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(object body, class System.Messaging.IMessageFormatter formatter) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Messaging.Message.#ctor(System.Object,System.Messaging.IMessageFormatter)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (body As Object, formatter As IMessageFormatter)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; Message(System::Object ^ body, System::Messaging::IMessageFormatter ^ formatter);" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Messaging</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="body" Type="System.Object" />
        <Parameter Name="formatter" Type="System.Messaging.IMessageFormatter" />
      </Parameters>
      <Docs>
        <param name="body">Объект, сериализуемый в текст сообщения.</param>
        <param name="formatter">Объект <see cref="T:System.Messaging.IMessageFormatter" />, задающий модуль форматирования, с помощью которого осуществляется сериализация текста сообщения.</param>
        <summary>Инициализирует новый экземпляр класса <see cref="T:System.Messaging.Message" />, используя указанный модуль форматирования для сериализации заданного объекта в текст сообщения.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Используйте этот перегруженный метод для создания нового экземпляра <xref:System.Messaging.Message> класс, содержащий <xref:System.Messaging.Message.Body%2A> заданные `body` , с применением любого допустимого форматера для сериализации текста сообщения. `body` Параметр — это любой объект, который может быть сериализован, например текстовая строка, структурный объект, экземпляр класса или внедренный объект. При изменении <xref:System.Messaging.Message.Body%2A> или <xref:System.Messaging.Message.Formatter%2A> в любой момент перед вызовом <xref:System.Messaging.MessageQueue.Send%2A>, сообщения сериализуются в соответствии с новым значением свойства.  
  
 <xref:System.Messaging.XmlMessageFormatter> Слабо связанный, поэтому нет необходимости иметь объект того же типа на отправителя и получателя, при применении этого формата. <xref:System.Messaging.ActiveXMessageFormatter> И <xref:System.Messaging.BinaryMessageFormatter> сериализации данных в двоичное представление. <xref:System.Messaging.ActiveXMessageFormatter> Используется при отправке и получении COM-компонентов.  
  
 Следующей таблице представлены исходные значения свойств для экземпляра класса <xref:System.Messaging.Message>.  
  
|Свойство.|Исходное значение|  
|--------------|-------------------|  
|<xref:System.Messaging.Message.AcknowledgeType%2A>|`AcknowledgeType.None`|  
|<xref:System.Messaging.Message.AdministrationQueue%2A>|`null`|  
|<xref:System.Messaging.Message.AppSpecific%2A>|0|  
|<xref:System.Messaging.Message.AttachSenderId%2A>|`true`|  
|<xref:System.Messaging.Message.AuthenticationProviderName%2A>|Microsoft Base Cryptographic Provider версии 1.0|  
|<xref:System.Messaging.Message.AuthenticationProviderType%2A>|`CryptoProviderType.RSA_FULL`|  
|<xref:System.Messaging.Message.Body%2A>|Параметр `body`.|  
|<xref:System.Messaging.Message.BodyStream%2A>|`Stream.null`|  
|<xref:System.Messaging.Message.BodyType%2A>|0|  
|<xref:System.Messaging.Message.ConnectorType%2A>|`Guid.Empty`|  
|<xref:System.Messaging.Message.CorrelationId%2A>|Пустая строка (»»)|  
|<xref:System.Messaging.Message.DestinationSymmetricKey%2A>|Массив байтов нулевой длины|  
|<xref:System.Messaging.Message.DigitalSignature%2A>|Массив байтов нулевой длины|  
|<xref:System.Messaging.Message.EncryptionAlgorithm%2A>|`EncryptionAlgorithm.RC2`|  
|<xref:System.Messaging.Message.Extension%2A>|Массив байтов нулевой длины|  
|<xref:System.Messaging.Message.Formatter%2A>|Параметр `formatter`.|  
|<xref:System.Messaging.Message.HashAlgorithm%2A>|`HashAlgorithm.MD5`|  
|<xref:System.Messaging.Message.Label%2A>|Пустая строка (»»)|  
|<xref:System.Messaging.Message.Priority%2A>|`MessagePriority.Normal`|  
|<xref:System.Messaging.Message.Recoverable%2A>|`false`|  
|<xref:System.Messaging.Message.ResponseQueue%2A>|`null`|  
|<xref:System.Messaging.Message.SenderCertificate%2A>|Массив байтов нулевой длины|  
|<xref:System.Messaging.Message.TimeToBeReceived%2A>|`Message.InfiniteTimeout`|  
|<xref:System.Messaging.Message.TimeToReachQueue%2A>|`Message.InfiniteTimeout`|  
|<xref:System.Messaging.Message.TransactionStatusQueue%2A>|`null`|  
|<xref:System.Messaging.Message.UseAuthentication%2A>|`false`|  
|<xref:System.Messaging.Message.UseDeadLetterQueue%2A>|`false`|  
|<xref:System.Messaging.Message.UseEncryption%2A>|`false`|  
|<xref:System.Messaging.Message.UseJournalQueue%2A>|`false`|  
|<xref:System.Messaging.Message.UseTracing%2A>|`false`|  
  
   
  
## Examples  
 [!code-cpp[MessagingBinaryFormatter#1](~/samples/snippets/cpp/VS_Snippets_Remoting/MessagingBinaryFormatter/CPP/message_binaryformatter.cpp#1)]
 [!code-csharp[MessagingBinaryFormatter#1](~/samples/snippets/csharp/VS_Snippets_Remoting/MessagingBinaryFormatter/CS/message_binaryformatter.cs#1)]
 [!code-vb[MessagingBinaryFormatter#1](~/samples/snippets/visualbasic/VS_Snippets_Remoting/MessagingBinaryFormatter/VB/message_binaryformatter.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Messaging.XmlMessageFormatter" />
        <altmember cref="T:System.Messaging.BinaryMessageFormatter" />
        <altmember cref="T:System.Messaging.ActiveXMessageFormatter" />
        <altmember cref="T:System.Messaging.DefaultPropertiesToSend" />
        <altmember cref="T:System.Messaging.MessageQueue" />
        <altmember cref="M:System.Messaging.MessageQueue.Send(System.Object)" />
        <altmember cref="M:System.Messaging.MessageQueue.Peek" />
        <altmember cref="M:System.Messaging.MessageQueue.Receive" />
      </Docs>
    </Member>
    <Member MemberName="AcknowledgeType">
      <MemberSignature Language="C#" Value="public System.Messaging.AcknowledgeTypes AcknowledgeType { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Messaging.AcknowledgeTypes AcknowledgeType" />
      <MemberSignature Language="DocId" Value="P:System.Messaging.Message.AcknowledgeType" />
      <MemberSignature Language="VB.NET" Value="Public Property AcknowledgeType As AcknowledgeTypes" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Messaging::AcknowledgeTypes AcknowledgeType { System::Messaging::AcknowledgeTypes get(); void set(System::Messaging::AcknowledgeTypes value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Messaging</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.ReadOnly(true)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Messaging.MessagingDescription("MsgAcknowledgeType")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Messaging.AcknowledgeTypes</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Получает или задает тип сообщения подтверждения, которое должно возвращаться приложению, передающему исходное сообщение.</summary>
        <value>Одно из значений <see cref="T:System.Messaging.AcknowledgeTypes" />, которые представляют как типы подтверждающих сообщений, размещаемых системой в очереди администрирования, так и условия, при которых подтверждения возвращаются в приложение, передавшее исходное сообщение. Значение по умолчанию: <see langword="None" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Messaging.Message.AcknowledgeType%2A> Свойство задает тип сообщений подтверждения, запрашиваемых передающим приложением. Задать <xref:System.Messaging.Message.AcknowledgeType%2A> свойства перед отправкой сообщения для запроса уведомления об определенных событиях — например, сообщение достигло очереди назначения, сообщение извлекается или тайм-аут, предотвращая или из сообщения очередь назначения.  
  
 Служба Message Queuing возвращает уведомления путем отправки сообщений подтверждения <xref:System.Messaging.Message.AdministrationQueue%2A> свойство, указанное на исходное сообщение. Сообщение подтверждения <xref:System.Messaging.Message.Acknowledgment%2A> свойство указывает тип подтверждения, который он представляет. Например, если подтверждающее сообщение было отправлено, так как сообщение не достигло пункта назначения до <xref:System.Messaging.Message.TimeToReachQueue%2A> истекло, <xref:System.Messaging.Message.Acknowledgment%2A> свойства подтверждающего сообщения будет содержать значение `ReachQueueTimeout`.  
  
   
  
## Examples  
 В следующем примере кода отправляет и получает сообщение, содержащее к и из очереди. Он специально запрашивается положительное подтверждение, когда исходное сообщение достигает или извлечено из очереди.  
  
 [!code-cpp[Message.Acknowledgment#1](~/samples/snippets/cpp/VS_Snippets_Remoting/Message.Acknowledgment/CPP/message_acknowledgment.cpp#1)]
 [!code-csharp[Message.Acknowledgment#1](~/samples/snippets/csharp/VS_Snippets_Remoting/Message.Acknowledgment/CS/message_acknowledgment.cs#1)]
 [!code-vb[Message.Acknowledgment#1](~/samples/snippets/visualbasic/VS_Snippets_Remoting/Message.Acknowledgment/VB/message_acknowledgment.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">Сообщение фильтруется, чтобы не учитывать свойство <see cref="P:System.Messaging.Message.AcknowledgeType" />.</exception>
        <altmember cref="P:System.Messaging.Message.AdministrationQueue" />
        <altmember cref="P:System.Messaging.Message.Acknowledgment" />
      </Docs>
    </Member>
    <Member MemberName="Acknowledgment">
      <MemberSignature Language="C#" Value="public System.Messaging.Acknowledgment Acknowledgment { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Messaging.Acknowledgment Acknowledgment" />
      <MemberSignature Language="DocId" Value="P:System.Messaging.Message.Acknowledgment" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Acknowledgment As Acknowledgment" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Messaging::Acknowledgment Acknowledgment { System::Messaging::Acknowledgment get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Messaging</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.ReadOnly(true)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Messaging.MessagingDescription("MsgAcknowledgement")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Messaging.Acknowledgment</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Получает классификацию подтверждения, представляемого данным сообщением.</summary>
        <value>Одно из значений перечисления <see cref="T:System.Messaging.Acknowledgment" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 При получении сообщения из очереди администрирования, доступны для чтения <xref:System.Messaging.Message.Acknowledgment%2A> свойство для проверки состояния исходного сообщения.  
  
 Когда сообщение отправляется в очередь назначения, очереди сообщений может запросить подтверждающее сообщение. Такое сообщение может указывать, к примеру, ли сообщение получено и получены в течение указанного времени ожидания, или он может указывать, что пошло не так, в случае сбоя доставки. Очередь назначения возвращает подтверждающие сообщения и размещает их в очередь администрирования, указанную в исходном сообщении <xref:System.Messaging.Message.AdministrationQueue%2A> свойство. <xref:System.Messaging.Message.Id%2A> Свойства подтверждающего сообщения идентифицирует сообщение подтверждения, а не исходное сообщение. Идентификатор исходного сообщения можно найти в Подтверждение <xref:System.Messaging.Message> экземпляра <xref:System.Messaging.Message.CorrelationId%2A> свойство.  
  
 Если этот <xref:System.Messaging.Message> экземпляр представляет подтверждающее сообщение <xref:System.Messaging.Message.Acknowledgment%2A> свойство задает тип подтверждения. В противном случае <xref:System.Messaging.Message.Acknowledgment%2A> свойство содержит значение `Normal`.  
  
 Используйте <xref:System.Messaging.Message.AcknowledgeType%2A> свойство исходного сообщения для определения условий, при которых возвращения подтверждения.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">Сообщение не отправлено. Это свойство можно прочитать только для сообщений, извлеченных из очереди.  
  
 -или-  
  
 Очередь сообщений фильтруется, чтобы не учитывать свойство <see cref="P:System.Messaging.MessagePropertyFilter.Acknowledgment" />.</exception>
        <altmember cref="P:System.Messaging.Message.AcknowledgeType" />
        <altmember cref="P:System.Messaging.Message.AdministrationQueue" />
        <altmember cref="P:System.Messaging.Message.CorrelationId" />
        <altmember cref="M:System.Messaging.MessageQueue.PeekById(System.String)" />
        <altmember cref="M:System.Messaging.MessageQueue.PeekByCorrelationId(System.String)" />
        <altmember cref="M:System.Messaging.MessageQueue.ReceiveById(System.String)" />
        <altmember cref="M:System.Messaging.MessageQueue.ReceiveByCorrelationId(System.String)" />
      </Docs>
    </Member>
    <Member MemberName="AdministrationQueue">
      <MemberSignature Language="C#" Value="public System.Messaging.MessageQueue AdministrationQueue { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Messaging.MessageQueue AdministrationQueue" />
      <MemberSignature Language="DocId" Value="P:System.Messaging.Message.AdministrationQueue" />
      <MemberSignature Language="VB.NET" Value="Public Property AdministrationQueue As MessageQueue" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Messaging::MessageQueue ^ AdministrationQueue { System::Messaging::MessageQueue ^ get(); void set(System::Messaging::MessageQueue ^ value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Messaging</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.ReadOnly(true)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Messaging.MessagingDescription("MsgAdministrationQueue")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Messaging.MessageQueue</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Получает или задает очередь, принимающую подтверждающие сообщения, созданные службой очереди сообщений.</summary>
        <value>Класс <see cref="T:System.Messaging.MessageQueue" />, задающий очередь администрирования, используемую для сообщений подтверждения, создаваемых системой. Значение по умолчанию: <see langword="null" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Очередь, указанная в <xref:System.Messaging.Message.AdministrationQueue%2A> свойство может быть любой нетранзакционную очередь. Подтверждающие сообщения, передаваемые в очередь администрирования, могут указывать, достигло ли исходное сообщение своей конечной очереди, а также было ли оно удалено из очереди.  
  
 Когда <xref:System.Messaging.Message.AcknowledgeType%2A> свойство имеет любое значение, отличное от `None`, передающее приложение должно указать очереди для использования в качестве очереди администрирования.  
  
   
  
## Examples  
 В следующем примере кода отправляет и получает сообщение, содержащее к и из очереди. Он специально запрашивается положительное подтверждение, когда исходное сообщение достигает или извлечено из очереди.  
  
 [!code-cpp[Message.Acknowledgment#1](~/samples/snippets/cpp/VS_Snippets_Remoting/Message.Acknowledgment/CPP/message_acknowledgment.cpp#1)]
 [!code-csharp[Message.Acknowledgment#1](~/samples/snippets/csharp/VS_Snippets_Remoting/Message.Acknowledgment/CS/message_acknowledgment.cs#1)]
 [!code-vb[Message.Acknowledgment#1](~/samples/snippets/visualbasic/VS_Snippets_Remoting/Message.Acknowledgment/VB/message_acknowledgment.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">Очередь сообщений фильтруется, чтобы не учитывать свойство <see cref="P:System.Messaging.Message.AdministrationQueue" />.</exception>
        <altmember cref="P:System.Messaging.Message.AcknowledgeType" />
        <altmember cref="P:System.Messaging.Message.Acknowledgment" />
      </Docs>
    </Member>
    <Member MemberName="AppSpecific">
      <MemberSignature Language="C#" Value="public int AppSpecific { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 AppSpecific" />
      <MemberSignature Language="DocId" Value="P:System.Messaging.Message.AppSpecific" />
      <MemberSignature Language="VB.NET" Value="Public Property AppSpecific As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property int AppSpecific { int get(); void set(int value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Messaging</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.ReadOnly(true)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Messaging.MessagingDescription("MsgAppSpecific")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Получает или задает дополнительные сведения, зависящие от приложения.</summary>
        <value>Сведения, зависящие от приложения. По умолчанию используется значение ноль.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Messaging.Message.AppSpecific%2A> Свойство содержит сведения о приложении, которое можно использовать для организации различных типов сообщений. Например, можно использовать индексы, связанные с приложением. Это приложение для интерпретации <xref:System.Messaging.Message.AppSpecific%2A> сведения о свойстве.  
  
 Когда это возможно, данные сообщения следует включать в тело сообщения, а не <xref:System.Messaging.Message.AppSpecific%2A> свойство.  
  
 При работе с внешними очередями используйте <xref:System.Messaging.Message.Extension%2A> свойство для задания свойств сообщения, которые не существуют в очереди сообщений. Как и в <xref:System.Messaging.Message.AppSpecific%2A> свойства, является приложением, чтобы понять содержимое <xref:System.Messaging.Message.Extension%2A> свойство.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">Очередь сообщений фильтруется, чтобы не учитывать свойство <see cref="P:System.Messaging.Message.AppSpecific" />.</exception>
        <altmember cref="P:System.Messaging.Message.Extension" />
        <altmember cref="P:System.Messaging.Message.Body" />
      </Docs>
    </Member>
    <Member MemberName="ArrivedTime">
      <MemberSignature Language="C#" Value="public DateTime ArrivedTime { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.DateTime ArrivedTime" />
      <MemberSignature Language="DocId" Value="P:System.Messaging.Message.ArrivedTime" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property ArrivedTime As DateTime" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property DateTime ArrivedTime { DateTime get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Messaging</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Messaging.MessagingDescription("MsgArrivedTime")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.DateTime</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Получает время поступления сообщения в очередь местоназначения.</summary>
        <value>Объект <see cref="T:System.DateTime" />, который представляет время поступления сообщения в очередь местоназначения. Это время представляет собой локальное время (отсчитываемое относительно гринвичского времени) компьютера, на котором располагается очередь местоназначения.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Сообщение <xref:System.Messaging.Message.TimeToBeReceived%2A> свойство указывает, насколько быстро сообщение должно быть получено из очереди назначения. <xref:System.Messaging.Message.TimeToBeReceived%2A> Свойство таймер запускается, когда сообщение отправляется не в том случае, когда сообщение поступает в очередь.  
  
   
  
## Examples  
 В следующем примере кода отображает значение сообщение <xref:System.Messaging.Message.ArrivedTime%2A> свойство.  
  
  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">Сообщение не отправлено. Это свойство можно прочитать только для сообщений, извлеченных из очереди.  
  
 -или-  
  
 Очередь сообщений фильтруется, чтобы не учитывать свойство <see cref="P:System.Messaging.Message.ArrivedTime" />.</exception>
        <altmember cref="P:System.Messaging.Message.TimeToBeReceived" />
      </Docs>
    </Member>
    <Member MemberName="AttachSenderId">
      <MemberSignature Language="C#" Value="public bool AttachSenderId { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool AttachSenderId" />
      <MemberSignature Language="DocId" Value="P:System.Messaging.Message.AttachSenderId" />
      <MemberSignature Language="VB.NET" Value="Public Property AttachSenderId As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool AttachSenderId { bool get(); void set(bool value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Messaging</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.ReadOnly(true)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Messaging.MessagingDescription("MsgAttachSenderId")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Получает или задает значение, указывающее, должен ли быть присоединен к сообщению идентификатор отправителя.</summary>
        <value>
          Значение <see langword="true" />, если <see cref="P:System.Messaging.Message.SenderId" /> должен быть присоединен к сообщению, в противном случае — значение <see langword="false" />. Значение по умолчанию: <see langword="true" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Messaging.Message.SenderId%2A> Свойство представляет собой массив байтов, представляющий идентификатор пользователя, отправившего сообщение. Идентификатор отправителя устанавливается службой Message Queuing и используется принимающим диспетчером очереди для проверки прав доступа к очереди отправителя.  
  
 Отсутствие идентификатора отправителя служит указанием отправляющего приложения, служба очереди сообщений не проверки отправителя сообщения и не должны проверить доступ отправителя права на принимающей очереди. <xref:System.Messaging.Message.SenderId%2A> Заслуживает доверия только в том случае, если сообщение прошло проверку подлинности, при его поступлении в очередь назначения. Сообщение будет отклонено при поступлении в очередь назначения, если очередь принимает только проверенные сообщения и либо <xref:System.Messaging.DefaultPropertiesToSend.UseAuthentication%2A> или <xref:System.Messaging.DefaultPropertiesToSend.AttachSenderId%2A> свойство `false`.  
  
> [!CAUTION]
>  Если сообщение отклоняется, является либо передается в очередь недоставленных сообщений (если <xref:System.Messaging.Message.UseDeadLetterQueue%2A> — `true`), или он учитывается. Может запрашивать подтверждения, когда сообщение не удается достичь очереди. В противном случае, если <xref:System.Messaging.Message.UseDeadLetterQueue%2A> — `false` сообщения могут быть потеряны без предупреждения.  
  
   
  
## Examples  
 В следующем примере кода возвращает и задает значение сообщения <xref:System.Messaging.Message.AttachSenderId%2A> свойство.  
  
  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">Очередь сообщений фильтруется, чтобы не учитывать свойство <see cref="P:System.Messaging.Message.AttachSenderId" />.</exception>
        <altmember cref="P:System.Messaging.Message.SenderId" />
        <altmember cref="P:System.Messaging.Message.ConnectorType" />
        <altmember cref="P:System.Messaging.Message.UseAuthentication" />
        <altmember cref="P:System.Messaging.Message.Authenticated" />
        <altmember cref="P:System.Messaging.Message.HashAlgorithm" />
        <altmember cref="P:System.Messaging.Message.SenderCertificate" />
        <altmember cref="P:System.Messaging.MessageQueue.Authenticate" />
      </Docs>
    </Member>
    <Member MemberName="Authenticated">
      <MemberSignature Language="C#" Value="public bool Authenticated { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool Authenticated" />
      <MemberSignature Language="DocId" Value="P:System.Messaging.Message.Authenticated" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Authenticated As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool Authenticated { bool get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Messaging</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Messaging.MessagingDescription("MsgAuthenticated")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Получает значение, указывающее, прошло ли сообщение проверку подлинности.</summary>
        <value>
          Значение <see langword="true" />, если была запрошена проверка подлинности при поступлении сообщения в очередь; в противном случае — значение <see langword="false" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Messaging.Message.Authenticated%2A> Свойство используется только приложением, пока он взаимодействует с сообщением и пытается определить, была ли запрошена проверка подлинности. Если в очереди есть сообщения, сообщение прошло проверку подлинности. И наоборот Если <xref:System.Messaging.Message.Authenticated%2A> свойство `true`, диспетчер принимающей очереди с проверкой подлинности сообщения при его поступлении.  
  
 Не удается определить, если сообщение не прошел проверку подлинности, просмотрев его свойства. Служба Message Queuing отклоняет сообщения, не прошедшие проверку подлинности, прежде чем они попадут в очередь. Тем не менее можно запросить подтверждающее сообщение, когда сбоя доставки сообщение на попадает в очередь.  
  
   
  
## Examples  
 В следующем примере кода отображает значение сообщение <xref:System.Messaging.Message.Authenticated%2A> свойство.  
  
  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">Сообщение не отправлено. Это свойство можно прочитать только для сообщений, извлеченных из очереди.  
  
 -или-  
  
 Очередь сообщений фильтруется, чтобы не учитывать свойство <see cref="P:System.Messaging.Message.Authenticated" />.</exception>
        <altmember cref="P:System.Messaging.Message.UseAuthentication" />
        <altmember cref="P:System.Messaging.Message.ConnectorType" />
        <altmember cref="P:System.Messaging.MessageQueue.Authenticate" />
        <altmember cref="P:System.Messaging.Message.DigitalSignature" />
      </Docs>
    </Member>
    <Member MemberName="AuthenticationProviderName">
      <MemberSignature Language="C#" Value="public string AuthenticationProviderName { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string AuthenticationProviderName" />
      <MemberSignature Language="DocId" Value="P:System.Messaging.Message.AuthenticationProviderName" />
      <MemberSignature Language="VB.NET" Value="Public Property AuthenticationProviderName As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ AuthenticationProviderName { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Messaging</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.ReadOnly(true)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Messaging.MessagingDescription("MsgAuthenticationProviderName")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Получает или задает имя поставщика служб шифрования, используемого для создания цифровой подписи сообщения.</summary>
        <value>Имя поставщика служб шифрования, используемого для создания цифровой подписи сообщения. По умолчанию это Microsoft Base Cryptographic Provider, версия 1.0.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Как правило, используется <xref:System.Messaging.Message.AuthenticationProviderName%2A> при работе с внешними очередями. Служба Message Queuing требуется имя поставщика проверки подлинности и тип поставщика проверки подлинности поставщика служб шифрования (поставщик проверки подлинности) для проверки цифровых подписей сообщений, отправленных в очередь внешнего и сообщений, поступающих в сообщения Очереди из внешней очереди.  
  
 При отправке сообщения всегда устанавливается <xref:System.Messaging.Message.AuthenticationProviderName%2A> и <xref:System.Messaging.Message.ConnectorType%2A> свойства вместе. При отправке сообщения Message Queuing не обрабатывает имя поставщика проверки подлинности, если не установлен тип соединителя.  
  
 <xref:System.Messaging.Message.AuthenticationProviderName%2A> Свойство не может быть `null`, но это может быть пустая строка (»»).  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">Невозможно задать свойство <see cref="P:System.Messaging.Message.AuthenticationProviderName" />.  
  
 - или -  
  
 Очередь сообщений фильтруется, чтобы не учитывать свойство <see cref="P:System.Messaging.Message.AuthenticationProviderName" />.</exception>
        <exception cref="T:System.ArgumentException">
          <see cref="P:System.Messaging.Message.AuthenticationProviderName" /> было установлено равным <see langword="null" />.</exception>
        <altmember cref="P:System.Messaging.Message.Authenticated" />
        <altmember cref="P:System.Messaging.Message.UseAuthentication" />
        <altmember cref="P:System.Messaging.Message.ConnectorType" />
        <altmember cref="P:System.Messaging.Message.AuthenticationProviderType" />
        <altmember cref="P:System.Messaging.MessageQueue.Authenticate" />
      </Docs>
    </Member>
    <Member MemberName="AuthenticationProviderType">
      <MemberSignature Language="C#" Value="public System.Messaging.CryptographicProviderType AuthenticationProviderType { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Messaging.CryptographicProviderType AuthenticationProviderType" />
      <MemberSignature Language="DocId" Value="P:System.Messaging.Message.AuthenticationProviderType" />
      <MemberSignature Language="VB.NET" Value="Public Property AuthenticationProviderType As CryptographicProviderType" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Messaging::CryptographicProviderType AuthenticationProviderType { System::Messaging::CryptographicProviderType get(); void set(System::Messaging::CryptographicProviderType value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Messaging</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.ReadOnly(true)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Messaging.MessagingDescription("MsgAuthenticationProviderType")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Messaging.CryptographicProviderType</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Получает или задает тип поставщика служб шифрования, используемого для создания цифровой подписи сообщения.</summary>
        <value>Одно из значений перечисления <see cref="T:System.Messaging.CryptographicProviderType" />. Значение по умолчанию: <see langword="RSA_FULL" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Как правило, используется <xref:System.Messaging.Message.AuthenticationProviderType%2A> свойства при работе с внешними очередями, чтобы указать, какие службы криптографии, связанного с сообщением. Служба Message Queuing требуется имя поставщика проверки подлинности и тип поставщика проверки подлинности поставщика служб шифрования (поставщик проверки подлинности) для проверки цифровых подписей сообщений, отправленных в очередь внешнего и сообщений, поступающих в сообщения Очереди из внешней очереди.  
  
 Только `RsaFull` предназначен для использования в обмене сообщениями.  
  
 При отправке сообщения всегда устанавливается <xref:System.Messaging.Message.AuthenticationProviderType%2A> и <xref:System.Messaging.Message.ConnectorType%2A> свойства вместе. При отправке сообщения Message Queuing не обрабатывает тип поставщика проверки подлинности, если не установлен тип соединителя.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">Невозможно задать свойство <see cref="P:System.Messaging.Message.AuthenticationProviderType" />.  
  
 - или -  
  
 Очередь сообщений фильтруется, чтобы не учитывать свойство <see cref="P:System.Messaging.Message.AuthenticationProviderType" />.</exception>
        <altmember cref="P:System.Messaging.Message.Authenticated" />
        <altmember cref="P:System.Messaging.Message.UseAuthentication" />
        <altmember cref="P:System.Messaging.Message.ConnectorType" />
        <altmember cref="P:System.Messaging.Message.AuthenticationProviderName" />
        <altmember cref="P:System.Messaging.MessageQueue.Authenticate" />
        <altmember cref="T:System.Messaging.CryptographicProviderType" />
      </Docs>
    </Member>
    <Member MemberName="Body">
      <MemberSignature Language="C#" Value="public object Body { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance object Body" />
      <MemberSignature Language="DocId" Value="P:System.Messaging.Message.Body" />
      <MemberSignature Language="VB.NET" Value="Public Property Body As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Object ^ Body { System::Object ^ get(); void set(System::Object ^ value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Messaging</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Получает или задает содержимое сообщения.</summary>
        <value>Объект, задающий содержимое сообщения. Таким объектом может быть строка, дата, денежная единица, число, байтовый массив или любой управляемый объект.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Сообщение <xref:System.Messaging.Message.Body%2A> свойство обычно содержит данные, связанные с данным сообщением. Несмотря на то, что можно также отправлять данные приложения в <xref:System.Messaging.Message.AppSpecific%2A> и <xref:System.Messaging.Message.Extension%2A> свойства, следует включить данные сообщения в <xref:System.Messaging.Message.Body%2A> сообщения, когда это возможно. Только <xref:System.Messaging.Message.Body%2A> содержимого свойства сериализуются и зашифрованы.  
  
 <xref:System.Messaging.Message.Body%2A> Свойство может содержать любой объект, размер которого не превышает 4 МБ. Если вы используете <xref:System.Messaging.MessageQueue.Send%2A?displayProperty=nameWithType> для отправки любой объект, который не относится к типу <xref:System.Messaging.Message> для <xref:System.Messaging.MessageQueue>, этот объект будет находиться в <xref:System.Messaging.Message.Body%2A> свойство <xref:System.Messaging.Message> экземпляр, возвращаемый <xref:System.Messaging.MessageQueue.Peek%2A> или <xref:System.Messaging.MessageQueue.Receive%2A>.  
  
 Строковый аргумент в `MessageQueue.Send("hello.")` приведен пример универсального объекта.  
  
 <xref:System.Messaging.Message.BodyType%2A> Указывает тип данных, хранящихся в тексте сообщения. Служба Message Queuing использует эти сведения для определения типа <xref:System.Messaging.Message.Body%2A> содержимое свойства.  
  
 Укажите либо <xref:System.Messaging.Message.Body%2A> свойство или <xref:System.Messaging.Message.BodyStream%2A> до передачи <xref:System.Messaging.Message> объекта. <xref:System.Messaging.Message.Body%2A> Свойство может быть сериализуемый объект, например, строка текста, структура объекта, экземпляр класса или внедренный объект.  
  
 Если содержимое сообщения записывается непосредственно в <xref:System.Messaging.Message.BodyStream%2A> , установите <xref:System.Messaging.Message.Formatter%2A> перед передачей сообщения. Когда <xref:System.Messaging.MessageQueue.Send%2A> метод будет вызван на <xref:System.Messaging.MessageQueue> экземпляра, текст сериализуется с помощью модуля форматирования, содержащихся в <xref:System.Messaging.Message.Formatter%2A> свойство. При отправке сообщения без указания значения для <xref:System.Messaging.Message.Formatter%2A> свойства, модуль форматирования по умолчанию является <xref:System.Messaging.XmlMessageFormatter>.  
  
> [!NOTE]
>  Попытка задать текст сообщения для <xref:System.Decimal.MaxValue> вызовет <xref:System.OverflowException> при `Send` метод <xref:System.Messaging.MessageQueue> класса вызывается и <xref:System.Messaging.ActiveXMessageFormatter> используется.  
  
   
  
## Examples  
 В следующем примере кода два сообщения с различным приоритетом отправляются в очередь и последовательно извлекаются.  
  
 [!code-cpp[Message.DefaultPropertiesToSend#1](~/samples/snippets/cpp/VS_Snippets_Remoting/Message.DefaultPropertiesToSend/CPP/message_defaultandpriority.cpp#1)]
 [!code-csharp[Message.DefaultPropertiesToSend#1](~/samples/snippets/csharp/VS_Snippets_Remoting/Message.DefaultPropertiesToSend/CS/message_defaultandpriority.cs#1)]
 [!code-vb[Message.DefaultPropertiesToSend#1](~/samples/snippets/visualbasic/VS_Snippets_Remoting/Message.DefaultPropertiesToSend/VB/message_defaultandpriority.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">Значение свойства <see cref="P:System.Messaging.Message.Formatter" /> — <see langword="null" />.  
  
 - или -  
  
 Очередь сообщений фильтруется, чтобы не учитывать свойство <see cref="P:System.Messaging.Message.Body" />.</exception>
        <altmember cref="T:System.Messaging.Message" />
        <altmember cref="P:System.Messaging.Message.BodyStream" />
        <altmember cref="P:System.Messaging.Message.BodyType" />
        <altmember cref="P:System.Messaging.Message.Formatter" />
        <altmember cref="P:System.Messaging.Message.AppSpecific" />
        <altmember cref="P:System.Messaging.Message.Extension" />
        <altmember cref="P:System.Messaging.Message.UseEncryption" />
        <altmember cref="M:System.Messaging.MessageQueue.Send(System.Object)" />
      </Docs>
    </Member>
    <Member MemberName="BodyStream">
      <MemberSignature Language="C#" Value="public System.IO.Stream BodyStream { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.IO.Stream BodyStream" />
      <MemberSignature Language="DocId" Value="P:System.Messaging.Message.BodyStream" />
      <MemberSignature Language="VB.NET" Value="Public Property BodyStream As Stream" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::IO::Stream ^ BodyStream { System::IO::Stream ^ get(); void set(System::IO::Stream ^ value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Messaging</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.Editor("System.ComponentModel.Design.BinaryEditor, System.Design, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a", "System.Drawing.Design.UITypeEditor, System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.ReadOnly(true)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Messaging.MessagingDescription("MsgBodyStream")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.IO.Stream</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Получает или задает сведения в тексте сообщения.</summary>
        <value>Объект <see cref="T:System.IO.Stream" />, содержащий сериализованные сведения, включенные в объект <see cref="P:System.Messaging.Message.Body" /> сообщения.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Тело сообщения может состоять из любой тип данных — например, строки, даты, валюты, число, массив байтов или любого управляемого объекта. Эти сведения, сериализуется в <xref:System.IO.Stream> должен быть передан в очередь.  
  
 Укажите либо <xref:System.Messaging.Message.Body%2A> свойство или <xref:System.Messaging.Message.BodyStream%2A> до передачи <xref:System.Messaging.Message> объекта. Если задать <xref:System.Messaging.Message.Body%2A> свойства, содержимое сериализуется в <xref:System.Messaging.Message.BodyStream%2A> свойство. Тем не менее, вы можете написать <xref:System.Messaging.Message.BodyStream%2A> свойство напрямую. Это полезно, например, если вы хотите установить соединение с файлом и передать его содержимое в теле сообщения.  
  
 Если содержимое сообщения записывается непосредственно в <xref:System.Messaging.Message.BodyStream%2A> , установите <xref:System.Messaging.Message.Formatter%2A> перед передачей сообщения. Когда <xref:System.Messaging.MessageQueue.Send%2A> метод будет вызван на <xref:System.Messaging.MessageQueue> экземпляра, текст сериализуется с помощью модуля форматирования, содержащихся в <xref:System.Messaging.Message.Formatter%2A> свойство. При отправке сообщения без указания значения для <xref:System.Messaging.Message.Formatter%2A> свойства, модуль форматирования по умолчанию является <xref:System.Messaging.XmlMessageFormatter>.  
  
 Если задать <xref:System.Messaging.Message.UseEncryption%2A> свойства `true` тело данного сообщения, сообщения будут зашифрованы при передаче, не настраивая <xref:System.Messaging.Message.Body%2A> свойство. Таким образом <xref:System.Messaging.Message.BodyStream%2A> свойство никогда не шифруются.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">Очередь сообщений фильтруется, чтобы не учитывать свойство <see cref="P:System.Messaging.Message.Body" />.</exception>
        <altmember cref="T:System.Messaging.Message" />
        <altmember cref="P:System.Messaging.Message.Body" />
        <altmember cref="P:System.Messaging.Message.BodyType" />
        <altmember cref="P:System.Messaging.Message.Formatter" />
        <altmember cref="P:System.Messaging.Message.AppSpecific" />
        <altmember cref="P:System.Messaging.Message.Extension" />
        <altmember cref="P:System.Messaging.Message.UseEncryption" />
        <altmember cref="M:System.Messaging.MessageQueue.Send(System.Object)" />
      </Docs>
    </Member>
    <Member MemberName="BodyType">
      <MemberSignature Language="C#" Value="public int BodyType { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 BodyType" />
      <MemberSignature Language="DocId" Value="P:System.Messaging.Message.BodyType" />
      <MemberSignature Language="VB.NET" Value="Public Property BodyType As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property int BodyType { int get(); void set(int value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Messaging</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.ReadOnly(true)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Messaging.MessagingDescription("MsgBodyType")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Получает или задает тип данных, содержащихся в тексте сообщения.</summary>
        <value>Истинный тип текста сообщения, такой как строка, дата, денежная единица или число.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Служба Message Queuing распознает содержимое тела как объект или как сериализованный поток. <xref:System.Messaging.Message.BodyType%2A> , Определяющий тип объекта внутри <xref:System.Messaging.Message.Body%2A> свойства сообщения.  
  
 <xref:System.Messaging.XmlMessageFormatter> Выполняет привязку собственных типов и объект в теле сообщения. Если вы используете <xref:System.Messaging.XmlMessageFormatter>, форматер устанавливает <xref:System.Messaging.Message.BodyType%2A> свойство для вас.  
  
 Другие модули форматирования может обеспечить функционирование привязки также, как показано в следующем коде C#.  
  
```  
message.Formatter = new ActiveXMessageFormatter();  
object myObject message.Body;  
if (myObject is string) {  
}  
if (myObject is int) {  
}  
if (myObject is float) {  
}  
```  
  
   
  
## Examples  
 В следующем примере кода отображает значение сообщение <xref:System.Messaging.Message.BodyType%2A> свойство.  
  
  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">Очередь сообщений фильтруется, чтобы не учитывать свойство <see cref="P:System.Messaging.Message.Body" />.</exception>
        <altmember cref="T:System.Messaging.Message" />
        <altmember cref="P:System.Messaging.Message.Body" />
        <altmember cref="P:System.Messaging.Message.BodyStream" />
        <altmember cref="P:System.Messaging.Message.Formatter" />
        <altmember cref="M:System.Messaging.MessageQueue.Send(System.Object)" />
      </Docs>
    </Member>
    <Member MemberName="ConnectorType">
      <MemberSignature Language="C#" Value="public Guid ConnectorType { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Guid ConnectorType" />
      <MemberSignature Language="DocId" Value="P:System.Messaging.Message.ConnectorType" />
      <MemberSignature Language="VB.NET" Value="Public Property ConnectorType As Guid" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property Guid ConnectorType { Guid get(); void set(Guid value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Messaging</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.ReadOnly(true)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Messaging.MessagingDescription("MsgConnectorType")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Guid</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Получает или задает значение, указывающее, что передающим приложением заданы некоторые свойства сообщения, обычно устанавливаемые службой очереди сообщений.</summary>
        <value>
          <see cref="T:System.Guid" /> определяется приложением и используется совместно связующими приложениями или шифрованием сообщений. Этот объект <see cref="T:System.Guid" /> позволяет принимающему приложению интерпретировать установленные передающим приложением свойства, которые обычно задаются службой Message Queuing.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Message Queuing требует <xref:System.Messaging.Message.ConnectorType%2A> задать свойство всякий раз, когда приложение задает свойство сообщения, которое обычно задается службой Message Queuing. Обычно приложения используют <xref:System.Messaging.Message.ConnectorType%2A> в следующих двух случаях:  
  
-   Когда приложение-подключатель пересылает сообщение. <xref:System.Messaging.Message.ConnectorType%2A> Передающее и принимающее приложения о том, как интерпретировать свойства безопасности и подтверждения сообщения.  
  
-   Каждый раз, когда сообщение шифруется отправляющего приложения, а не службой Message Queuing. <xref:System.Messaging.Message.ConnectorType%2A> Сообщает очереди сообщений для использования <xref:System.Messaging.Message.DestinationSymmetricKey%2A> значение свойства для расшифровки сообщения.  
  
 Необходимо задать <xref:System.Messaging.Message.ConnectorType%2A> свойства, если задается любое из следующих свойств (в противном случае очередь не обрабатывает эти свойства при передаче сообщения):  
  
-   <xref:System.Messaging.Message.AuthenticationProviderName%2A>  
  
-   <xref:System.Messaging.Message.AuthenticationProviderType%2A>  
  
-   <xref:System.Messaging.Message.DestinationSymmetricKey%2A>  
  
-   <xref:System.Messaging.Message.DigitalSignature%2A>  
  
-   <xref:System.Messaging.Message.MessageType%2A>  
  
-   <xref:System.Messaging.Message.SenderId%2A>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">Очередь сообщений фильтруется, чтобы не учитывать свойство <see cref="P:System.Messaging.Message.ConnectorType" />.</exception>
        <altmember cref="P:System.Messaging.Message.AuthenticationProviderName" />
        <altmember cref="P:System.Messaging.Message.AuthenticationProviderType" />
        <altmember cref="P:System.Messaging.Message.DestinationSymmetricKey" />
        <altmember cref="P:System.Messaging.Message.DigitalSignature" />
        <altmember cref="P:System.Messaging.Message.MessageType" />
        <altmember cref="P:System.Messaging.Message.SenderId" />
      </Docs>
    </Member>
    <Member MemberName="CorrelationId">
      <MemberSignature Language="C#" Value="public string CorrelationId { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string CorrelationId" />
      <MemberSignature Language="DocId" Value="P:System.Messaging.Message.CorrelationId" />
      <MemberSignature Language="VB.NET" Value="Public Property CorrelationId As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ CorrelationId { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Messaging</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.ReadOnly(true)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Messaging.MessagingDescription("MsgCorrelationId")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Получает или задает идентификатор сообщения, используемый подтверждениями, отчетами и ответными сообщениями для ссылки на исходное сообщение.</summary>
        <value>Идентификатор сообщения задается свойством <see cref="P:System.Messaging.Message.Id" /> исходного сообщения. Этот идентификатор корреляции используется службой MSMQ при создании подтверждающего сообщения или сообщения-отчета, а также приложением при создании ответного сообщения.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 При подтверждающего сообщения или отчета создается службой Message Queuing, он использует свойство идентификатора корреляции для указания идентификатора исходного сообщения. Таким образом, код корреляции связывает отчет или подтверждение с исходным сообщением.  
  
 Передающее приложение может согласовать подтверждение или отчет с исходным сообщением с помощью <xref:System.Messaging.Message.CorrelationId%2A> свойство для идентификации исходного сообщения <xref:System.Messaging.Message.Id%2A> свойство.  
  
 Также необходимо задать приложения-подключатели <xref:System.Messaging.Message.CorrelationId%2A> свойство подтверждения и сообщения-отчеты равным идентификатору исходного сообщения.  
  
 Когда приложение отправляет ответное сообщение передающему приложению, можно задать <xref:System.Messaging.Message.CorrelationId%2A> свойства сообщения ответа на сообщение идентификатор исходного сообщения. Передающее приложение может согласовать ответное сообщение, отправленное сообщение.  
  
   
  
## Examples  
 В следующем примере кода отправляет и получает сообщение, содержащее заказ в и из очереди. Он специально запрашивается положительное подтверждение, когда исходное сообщение достигает или извлечено из очереди.  
  
 [!code-cpp[Message.Acknowledgment#1](~/samples/snippets/cpp/VS_Snippets_Remoting/Message.Acknowledgment/CPP/message_acknowledgment.cpp#1)]
 [!code-csharp[Message.Acknowledgment#1](~/samples/snippets/csharp/VS_Snippets_Remoting/Message.Acknowledgment/CS/message_acknowledgment.cs#1)]
 [!code-vb[Message.Acknowledgment#1](~/samples/snippets/visualbasic/VS_Snippets_Remoting/Message.Acknowledgment/VB/message_acknowledgment.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">Очередь сообщений фильтруется, чтобы не учитывать свойство <see cref="P:System.Messaging.Message.CorrelationId" />.</exception>
        <exception cref="T:System.ArgumentException">Значение параметра <see cref="P:System.Messaging.Message.CorrelationId" /> — <see langword="null" />.</exception>
        <altmember cref="P:System.Messaging.Message.Id" />
        <altmember cref="P:System.Messaging.MessagePropertyFilter.Acknowledgment" />
        <altmember cref="P:System.Messaging.Message.AcknowledgeType" />
        <altmember cref="P:System.Messaging.Message.ResponseQueue" />
        <altmember cref="M:System.Messaging.MessageQueue.PeekByCorrelationId(System.String)" />
        <altmember cref="M:System.Messaging.MessageQueue.ReceiveByCorrelationId(System.String)" />
      </Docs>
    </Member>
    <Member MemberName="DestinationQueue">
      <MemberSignature Language="C#" Value="public System.Messaging.MessageQueue DestinationQueue { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Messaging.MessageQueue DestinationQueue" />
      <MemberSignature Language="DocId" Value="P:System.Messaging.Message.DestinationQueue" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property DestinationQueue As MessageQueue" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Messaging::MessageQueue ^ DestinationQueue { System::Messaging::MessageQueue ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Messaging</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Messaging.MessagingDescription("MsgDestinationQueue")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Messaging.MessageQueue</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Получает планируемую очередь местоназначения для сообщения.</summary>
        <value>Объект <see cref="T:System.Messaging.MessageQueue" />, который задает предполагаемую очередь назначения для сообщения.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Messaging.Message.DestinationQueue%2A> Свойство чаще всего используется для определения первоначального места назначения сообщения, поступившего в журнал или недоставленных сообщений в очереди. Как правило не необходимо проверять это свойство, поскольку обычно получения сообщения из очереди назначения.  
  
   
  
## Examples  
 В следующем примере кода отображает значение сообщение <xref:System.Messaging.Message.DestinationQueue%2A> свойство.  
  
  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">Сообщение не отправлено. Это свойство можно прочитать только для сообщений, извлеченных из очереди.  
  
 -или-  
  
 Очередь сообщений фильтруется, чтобы не учитывать свойство <see cref="P:System.Messaging.Message.DestinationQueue" />.</exception>
        <altmember cref="P:System.Messaging.Message.UseDeadLetterQueue" />
        <altmember cref="P:System.Messaging.Message.UseJournalQueue" />
        <altmember cref="P:System.Messaging.Message.ResponseQueue" />
      </Docs>
    </Member>
    <Member MemberName="DestinationSymmetricKey">
      <MemberSignature Language="C#" Value="public byte[] DestinationSymmetricKey { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance unsigned int8[] DestinationSymmetricKey" />
      <MemberSignature Language="DocId" Value="P:System.Messaging.Message.DestinationSymmetricKey" />
      <MemberSignature Language="VB.NET" Value="Public Property DestinationSymmetricKey As Byte()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property cli::array &lt;System::Byte&gt; ^ DestinationSymmetricKey { cli::array &lt;System::Byte&gt; ^ get(); void set(cli::array &lt;System::Byte&gt; ^ value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Messaging</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.ReadOnly(true)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Messaging.MessagingDescription("MsgDestinationSymmetricKey")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Byte[]</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Получает или задает симметричный ключ, применяемый для шифрования сообщений, шифруемых приложением, или сообщений, отправляемых во внешние очереди.</summary>
        <value>Массив байтовых значений, задающий целевой симметричный ключ, используемый для шифрования сообщения. По умолчанию задан массив нулевой длины.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Два сценария требуется использовать <xref:System.Messaging.Message.DestinationSymmetricKey%2A> свойства. Во-первых, когда сообщение шифруется с приложением, а не службой Message Queuing. Второе — при отправке зашифрованного сообщения в очереди системы, отличной от очереди сообщений.  
  
 Перед установкой этого свойства необходимо зашифровать симметричный ключ с помощью открытого ключа диспетчера принимающей очереди. При отправке сообщений, зашифрованных приложением, диспетчер принимающей очереди использует симметричный ключ для расшифровки сообщения перед отправкой в очередь назначения.  
  
 При отправке сообщения во внешнюю очередь, сначала сообщение с соответствующим связующим приложением, которое направляет зашифрованное сообщение с присоединенным симметричным ключом в принимающее приложение. Он отвечает затем принимающее приложение расшифровать сообщение с помощью симметричного ключа.  
  
 При задании <xref:System.Messaging.Message.DestinationSymmetricKey%2A> свойства, необходимо также задать <xref:System.Messaging.Message.ConnectorType%2A> свойства. При отправке сообщения Message Queuing не обрабатывает <xref:System.Messaging.Message.DestinationSymmetricKey%2A> свойство Если <xref:System.Messaging.Message.ConnectorType%2A> не задано свойство.  
  
 <xref:System.Messaging.Message.DestinationSymmetricKey%2A> Свойство имеет максимальный размер массива 256.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">Очередь сообщений фильтруется, чтобы не учитывать свойство <see cref="P:System.Messaging.Message.DestinationSymmetricKey" />.</exception>
        <exception cref="T:System.ArgumentException">Значение параметра <see cref="P:System.Messaging.Message.DestinationSymmetricKey" /> — <see langword="null" />.</exception>
        <altmember cref="P:System.Messaging.Message.ConnectorType" />
        <altmember cref="P:System.Messaging.Message.UseEncryption" />
      </Docs>
    </Member>
    <Member MemberName="DigitalSignature">
      <MemberSignature Language="C#" Value="public byte[] DigitalSignature { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance unsigned int8[] DigitalSignature" />
      <MemberSignature Language="DocId" Value="P:System.Messaging.Message.DigitalSignature" />
      <MemberSignature Language="VB.NET" Value="Public Property DigitalSignature As Byte()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property cli::array &lt;System::Byte&gt; ^ DigitalSignature { cli::array &lt;System::Byte&gt; ^ get(); void set(cli::array &lt;System::Byte&gt; ^ value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Messaging</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.ReadOnly(true)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Messaging.MessagingDescription("MsgDigitalSignature")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Byte[]</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Получает или задает цифровую подпись, используемую службой очереди сообщений при проверке подлинности сообщения.</summary>
        <value>Массив байтовых значений, задающий цифровую подпись очереди сообщений 1.0, используемую для проверки подлинности сообщения. По умолчанию задан массив нулевой длины.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Очередь сообщений использует цифровой подписи при проверке подлинности сообщений, отправленных службой Message Queuing версии 1.0. В большинстве случаев Message Queuing создает и устанавливает <xref:System.Messaging.Message.DigitalSignature%2A> свойства при передающее приложение запрашивает проверку подлинности. Принимающее приложение использует это свойство для извлечения цифровой подписи, вложенной в сообщение.  
  
 Можно использовать только <xref:System.Messaging.Message.DigitalSignature%2A> свойство для очереди сообщений версии 2.0. Отправляющее приложение должно указать подписи Message Queuing версии 1.0, при запросе проверки подлинности. Если отправляющее приложение отправляет подпись очереди сообщений версии 2.0, это свойство содержит буфера четыре байта каждого содержащего ноль.  
  
 <xref:System.Messaging.Message.DigitalSignature%2A> Свойства, вместе с <xref:System.Messaging.Message.SenderCertificate%2A> свойство, также используется приложения-подключатели при отправке сообщения. В этом случае приложение-подключатель, вместо того чтобы служба очереди сообщений — цифровая подпись, основана на сертификат пользователя, отправляющий сообщение, она создается.  
  
 <xref:System.Messaging.Message.DigitalSignature%2A> Свойство имеет максимальный размер массива 256.  
  
 При задании <xref:System.Messaging.Message.DigitalSignature%2A> свойства, необходимо также задать <xref:System.Messaging.Message.ConnectorType%2A> свойства. При отправке сообщения Message Queuing не обрабатывает <xref:System.Messaging.Message.DigitalSignature%2A> свойство Если <xref:System.Messaging.Message.ConnectorType%2A> не задано свойство.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">Очередь сообщений фильтруется, чтобы не учитывать свойство <see cref="P:System.Messaging.Message.DigitalSignature" />.</exception>
        <exception cref="T:System.ArgumentException">Значение свойства <see cref="P:System.Messaging.Message.DigitalSignature" /> — <see langword="null" />.</exception>
        <altmember cref="P:System.Messaging.Message.ConnectorType" />
        <altmember cref="P:System.Messaging.Message.SenderCertificate" />
        <altmember cref="P:System.Messaging.Message.HashAlgorithm" />
        <altmember cref="P:System.Messaging.Message.UseAuthentication" />
      </Docs>
    </Member>
    <Member MemberName="EncryptionAlgorithm">
      <MemberSignature Language="C#" Value="public System.Messaging.EncryptionAlgorithm EncryptionAlgorithm { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Messaging.EncryptionAlgorithm EncryptionAlgorithm" />
      <MemberSignature Language="DocId" Value="P:System.Messaging.Message.EncryptionAlgorithm" />
      <MemberSignature Language="VB.NET" Value="Public Property EncryptionAlgorithm As EncryptionAlgorithm" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Messaging::EncryptionAlgorithm EncryptionAlgorithm { System::Messaging::EncryptionAlgorithm get(); void set(System::Messaging::EncryptionAlgorithm value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Messaging</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.ReadOnly(true)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Messaging.MessagingDescription("MsgEncryptionAlgorithm")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Messaging.EncryptionAlgorithm</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Получает или задает алгоритм шифрования, используемый для шифрования тела конфиденциального сообщения.</summary>
        <value>Одно из значений перечисления <see cref="T:System.Messaging.EncryptionAlgorithm" />. Значение по умолчанию: <see langword="RC2" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Если сообщение является закрытым (шифрованный), оно шифруется перед отправкой и расшифровывается при получении. <xref:System.Messaging.Message.EncryptionAlgorithm%2A> Свойство задает алгоритм, используемый для шифрования текста конфиденциального сообщения.  
  
 Очередь может потребовать, чтобы входящие сообщения были зашифрованы. Если приложение отправляет сообщение (отличным от private) без шифрования в очередь, принимающую только конфиденциальные сообщения, или если отправляет закрытого сообщения в очередь, принимающую только неконфиденциальные сообщения, сообщение будет отклонено очереди. Передающее приложение может запросить, отрицательное подтверждение возвращаться в таком случае.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">Очередь сообщений фильтруется, чтобы не учитывать свойство <see cref="P:System.Messaging.Message.EncryptionAlgorithm" />.</exception>
        <altmember cref="P:System.Messaging.Message.UseEncryption" />
        <altmember cref="P:System.Messaging.MessageQueue.EncryptionRequired" />
        <altmember cref="P:System.Messaging.Message.AcknowledgeType" />
        <altmember cref="T:System.Messaging.EncryptionRequired" />
      </Docs>
    </Member>
    <Member MemberName="Extension">
      <MemberSignature Language="C#" Value="public byte[] Extension { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance unsigned int8[] Extension" />
      <MemberSignature Language="DocId" Value="P:System.Messaging.Message.Extension" />
      <MemberSignature Language="VB.NET" Value="Public Property Extension As Byte()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property cli::array &lt;System::Byte&gt; ^ Extension { cli::array &lt;System::Byte&gt; ^ get(); void set(cli::array &lt;System::Byte&gt; ^ value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Messaging</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.ReadOnly(true)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Messaging.MessagingDescription("MsgExtension")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Byte[]</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Получает или задает дополнительные, определяемые приложением сведения, связанные с данным сообщением.</summary>
        <value>Массив байтовых значений, предоставляющий дополнительные, определяемые приложением, сведения, связанные с данным сообщением. По умолчанию задан массив нулевой длины.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Messaging.Message.Extension%2A> Свойство предоставляет дополнительные сведения, определяемые приложением, например большой двоичный объект, который связан с сообщением. Отвечает принимающему приложению интерпретировать содержимое <xref:System.Messaging.Message.Extension%2A> свойство.  
  
 Если это возможно, следует включить данные сообщения в <xref:System.Messaging.Message.Body%2A> свойства сообщения, а не <xref:System.Messaging.Message.Extension%2A> свойство.  
  
 При работе с внешними очередями используйте <xref:System.Messaging.Message.Extension%2A> свойство для задания свойств сообщения, которые не существуют в очереди сообщений.  
  
 Внешнюю очередь существует в очереди системы, отличной от Microsoft Message Queuing. Служба Message Queuing связывается с другими очередями через приложение-подключатель.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">Очередь сообщений фильтруется, чтобы не учитывать свойство <see cref="P:System.Messaging.Message.Extension" />.</exception>
        <exception cref="T:System.ArgumentException">Значение свойства <see cref="P:System.Messaging.Message.Extension" /> — <see langword="null" />.</exception>
        <altmember cref="P:System.Messaging.Message.AppSpecific" />
        <altmember cref="P:System.Messaging.Message.Body" />
      </Docs>
    </Member>
    <Member MemberName="Formatter">
      <MemberSignature Language="C#" Value="public System.Messaging.IMessageFormatter Formatter { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Messaging.IMessageFormatter Formatter" />
      <MemberSignature Language="DocId" Value="P:System.Messaging.Message.Formatter" />
      <MemberSignature Language="VB.NET" Value="Public Property Formatter As IMessageFormatter" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Messaging::IMessageFormatter ^ Formatter { System::Messaging::IMessageFormatter ^ get(); void set(System::Messaging::IMessageFormatter ^ value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Messaging</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Messaging.IMessageFormatter</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Получает или задает модуль форматирования, используемый для сериализации объекта в текст сообщения или десериализации объекта из текста сообщения.</summary>
        <value>Объект <see cref="T:System.Messaging.IMessageFormatter" />, создающий поток, записываемый в текст сообщения или считываемый из него. Значение по умолчанию: <see cref="T:System.Messaging.XmlMessageFormatter" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Используйте <xref:System.Messaging.Message.Formatter%2A> свойство при чтении и записи сообщения. Когда сообщение отправляется в очередь, модуль форматирования сериализует <xref:System.Messaging.Message.Body%2A> свойство в поток, который можно отправлять сообщения в очередь. При чтении из очереди форматер десериализует данные сообщения в <xref:System.Messaging.Message.Body%2A> свойство.  
  
 Если содержимое сообщения записывается непосредственно в <xref:System.Messaging.Message.BodyStream%2A> , установите <xref:System.Messaging.Message.Formatter%2A> перед передачей сообщения. Когда <xref:System.Messaging.MessageQueue.Send%2A> метод будет вызван на <xref:System.Messaging.MessageQueue> экземпляра, текст сериализуется с помощью модуля форматирования, содержащихся в <xref:System.Messaging.Message.Formatter%2A> свойство. При отправке сообщения без указания значения для <xref:System.Messaging.Message.Formatter%2A> свойства, модуль форматирования по умолчанию является <xref:System.Messaging.XmlMessageFormatter>.  
  
 <xref:System.Messaging.XmlMessageFormatter> Слабо связанный, поэтому нет необходимости иметь объект того же типа на отправителя и получателя, при применении этого формата. <xref:System.Messaging.ActiveXMessageFormatter> И <xref:System.Messaging.BinaryMessageFormatter> сериализации данных в двоичное представление. <xref:System.Messaging.ActiveXMessageFormatter> Используется при отправке и получении COM-компонентов.  
  
   
  
## Examples  
 В следующем примере кода демонстрируется, форматирование текста сообщения с помощью <xref:System.Messaging.BinaryMessageFormatter>.  
  
 [!code-cpp[MessagingBinaryFormatter#1](~/samples/snippets/cpp/VS_Snippets_Remoting/MessagingBinaryFormatter/CPP/message_binaryformatter.cpp#1)]
 [!code-csharp[MessagingBinaryFormatter#1](~/samples/snippets/csharp/VS_Snippets_Remoting/MessagingBinaryFormatter/CS/message_binaryformatter.cs#1)]
 [!code-vb[MessagingBinaryFormatter#1](~/samples/snippets/visualbasic/VS_Snippets_Remoting/MessagingBinaryFormatter/VB/message_binaryformatter.vb#1)]  
  
 В следующем примере кода демонстрируется, форматирование текста сообщения с помощью <xref:System.Messaging.XmlMessageFormatter>.  
  
 [!code-cpp[Message.Body#1](~/samples/snippets/cpp/VS_Snippets_Remoting/Message.Body/CPP/message_sendreceive.cpp#1)]
 [!code-csharp[Message.Body#1](~/samples/snippets/csharp/VS_Snippets_Remoting/Message.Body/CS/message_sendreceive.cs#1)]
 [!code-vb[Message.Body#1](~/samples/snippets/visualbasic/VS_Snippets_Remoting/Message.Body/VB/message_sendreceive.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">Значение свойства <see cref="P:System.Messaging.Message.Formatter" /> — <see langword="null" />.</exception>
        <altmember cref="M:System.Messaging.IMessageFormatter.CanRead(System.Messaging.Message)" />
        <altmember cref="T:System.Messaging.XmlMessageFormatter" />
        <altmember cref="T:System.Messaging.ActiveXMessageFormatter" />
        <altmember cref="T:System.Messaging.BinaryMessageFormatter" />
        <altmember cref="P:System.Messaging.MessageQueue.Formatter" />
      </Docs>
    </Member>
    <Member MemberName="HashAlgorithm">
      <MemberSignature Language="C#" Value="public System.Messaging.HashAlgorithm HashAlgorithm { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Messaging.HashAlgorithm HashAlgorithm" />
      <MemberSignature Language="DocId" Value="P:System.Messaging.Message.HashAlgorithm" />
      <MemberSignature Language="VB.NET" Value="Public Property HashAlgorithm As HashAlgorithm" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Messaging::HashAlgorithm HashAlgorithm { System::Messaging::HashAlgorithm get(); void set(System::Messaging::HashAlgorithm value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Messaging</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.ReadOnly(true)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Messaging.MessagingDescription("MsgHashAlgorithm")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Messaging.HashAlgorithm</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Получает или задает алгоритм хэширования, используемый службой очереди сообщений при проверке подлинности сообщения или при создании цифровой подписи для сообщения.</summary>
        <value>Одно из значений перечисления <see cref="T:System.Messaging.HashAlgorithm" />. Для Windows XP значение по умолчанию равно <see langword="SHA" />. В противном случае значением по умолчанию будет <see langword="MD5" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 На исходном компьютере Message Queuing алгоритм хеширования при создании цифровой подписи сообщения. Целевой диспетчер очереди, затем использует один и тот же алгоритм хэширования для проверки подлинности сообщения при его получении.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">Очередь сообщений фильтруется, чтобы не учитывать свойство <see cref="P:System.Messaging.Message.HashAlgorithm" />.</exception>
        <altmember cref="P:System.Messaging.Message.UseAuthentication" />
        <altmember cref="P:System.Messaging.Message.AttachSenderId" />
        <altmember cref="P:System.Messaging.MessageQueue.Authenticate" />
        <altmember cref="P:System.Messaging.Message.DigitalSignature" />
        <altmember cref="T:System.Messaging.HashAlgorithm" />
      </Docs>
    </Member>
    <Member MemberName="Id">
      <MemberSignature Language="C#" Value="public string Id { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string Id" />
      <MemberSignature Language="DocId" Value="P:System.Messaging.Message.Id" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Id As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ Id { System::String ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Messaging</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.ReadOnly(true)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Messaging.MessagingDescription("MsgId")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Получает идентификатор сообщения.</summary>
        <value>Уникальный идентификатор сообщения, создаваемый службой Message Queuing.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Служба Message Queuing создает идентификатор сообщения при отправке сообщения. Идентификатор состоит из 20 байт и двух элементов: компьютер <xref:System.Guid> от передающего компьютера и уникального идентификатора для сообщения на этом компьютере. Объединение двух этих элементов создает идентификатор сообщения, уникальный в данной сети.  
  
 Сообщение message Queuing создает идентификаторы для всех сообщений, включая подтверждения и сообщения-отчеты. Подтверждающее сообщение обычно передается службой Message Queuing в ответ на доставку или сбой исходного, отправленного сообщения. Можно найти <xref:System.Messaging.Message.Id%2A> значение свойства исходного сообщения в <xref:System.Messaging.Message.CorrelationId%2A> свойства подтверждающего сообщения.  
  
 Можно также использовать <xref:System.Messaging.Message.Id%2A> свойство при передаче ответного сообщения в очередь ответов. Чтобы включить идентификатор исходного сообщения в сообщение ответа, задайте <xref:System.Messaging.Message.CorrelationId%2A> свойство сообщения-ответа для <xref:System.Messaging.Message.Id%2A> свойства исходного сообщения. Затем приложение, считывающее сообщение ответа можно использовать идентификатор корреляции сообщения-ответа для определения исходного сообщения.  
  
   
  
## Examples  
 В следующем примере кода отправляет и получает сообщение, содержащее к и из очереди. Он специально запрашивается положительное подтверждение, когда исходное сообщение достигает или извлечено из очереди.  
  
 [!code-cpp[Message.Acknowledgment#1](~/samples/snippets/cpp/VS_Snippets_Remoting/Message.Acknowledgment/CPP/message_acknowledgment.cpp#1)]
 [!code-csharp[Message.Acknowledgment#1](~/samples/snippets/csharp/VS_Snippets_Remoting/Message.Acknowledgment/CS/message_acknowledgment.cs#1)]
 [!code-vb[Message.Acknowledgment#1](~/samples/snippets/visualbasic/VS_Snippets_Remoting/Message.Acknowledgment/VB/message_acknowledgment.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">Сообщение не отправлено. Это свойство можно прочитать только для сообщений, извлеченных из очереди.  
  
 -или-  
  
 Очередь сообщений фильтруется, чтобы не учитывать свойство <see cref="P:System.Messaging.Message.Id" />.</exception>
        <altmember cref="P:System.Messaging.Message.CorrelationId" />
      </Docs>
    </Member>
    <Member MemberName="InfiniteTimeout">
      <MemberSignature Language="C#" Value="public static readonly TimeSpan InfiniteTimeout;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.TimeSpan InfiniteTimeout" />
      <MemberSignature Language="DocId" Value="F:System.Messaging.Message.InfiniteTimeout" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly InfiniteTimeout As TimeSpan " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly TimeSpan InfiniteTimeout;" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Messaging</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.TimeSpan</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Указывает на отсутствие тайм-аута.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Messaging.Message.TimeToBeReceived%2A> и <xref:System.Messaging.Message.TimeToReachQueue%2A> требуется значение, указывающее время ожидания. Для первого из упомянутых тайм-аута является максимальное время ожидания для сообщения должно быть получено из очереди. Для последнего время ожидания — это время, в течение сообщение должно дойти до очереди. В обоих случаях можно указать время ожидания в секундах или использовать <xref:System.Messaging.Message.InfiniteTimeout> на то, что время ожидания не существует.  
  
   
  
## Examples  
 В следующем примере кода показано использование <xref:System.Messaging.Message.InfiniteTimeout> поля.  
  
  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Messaging.Message.TimeToBeReceived" />
        <altmember cref="P:System.Messaging.Message.TimeToReachQueue" />
      </Docs>
    </Member>
    <Member MemberName="IsFirstInTransaction">
      <MemberSignature Language="C#" Value="public bool IsFirstInTransaction { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsFirstInTransaction" />
      <MemberSignature Language="DocId" Value="P:System.Messaging.Message.IsFirstInTransaction" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsFirstInTransaction As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsFirstInTransaction { bool get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Messaging</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Messaging.MessagingDescription("MsgIsFirstInTransaction")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Получает значение, показывающее, является ли это сообщением первым переданным сообщением транзакции.</summary>
        <value>
          Значение <see langword="true" />, если данное сообщение было первым сообщением, переданным в транзакции, в противном случае — значение <see langword="false" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Принимающее приложение использует <xref:System.Messaging.Message.IsFirstInTransaction%2A> свойство, чтобы убедиться, что сообщение было первым сообщением в единой транзакции для одной очереди.  
  
 Это свойство доступно только в Message Queuing версии 2.0 и более поздних версий.  
  
 Для проверки границ транзакции можно использовать <xref:System.Messaging.Message.IsFirstInTransaction%2A> свойство вместе с двумя свойствами: <xref:System.Messaging.Message.IsLastInTransaction%2A> и <xref:System.Messaging.Message.TransactionId%2A>. Используйте первое из них для проверки, было ли сообщение отправлено последним в транзакции, а второе — для извлечения идентификатора транзакции.  
  
 Если только одно сообщение отправляется в виде транзакции, <xref:System.Messaging.Message.IsFirstInTransaction%2A> и <xref:System.Messaging.Message.IsLastInTransaction%2A> заданы оба свойства `true`.  
  
   
  
## Examples  
 В следующем примере кода отображает значение сообщение <xref:System.Messaging.Message.IsFirstInTransaction%2A> свойство.  
  
  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">Сообщение не отправлено. Это свойство можно прочитать только для сообщений, извлеченных из очереди.  
  
 -или-  
  
 Очередь сообщений фильтруется, чтобы не учитывать свойство <see cref="P:System.Messaging.Message.IsFirstInTransaction" />.</exception>
        <altmember cref="P:System.Messaging.Message.IsLastInTransaction" />
        <altmember cref="P:System.Messaging.Message.TransactionId" />
        <altmember cref="P:System.Messaging.MessageQueue.Transactional" />
      </Docs>
    </Member>
    <Member MemberName="IsLastInTransaction">
      <MemberSignature Language="C#" Value="public bool IsLastInTransaction { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsLastInTransaction" />
      <MemberSignature Language="DocId" Value="P:System.Messaging.Message.IsLastInTransaction" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsLastInTransaction As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsLastInTransaction { bool get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Messaging</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Messaging.MessagingDescription("MsgIsLastInTransaction")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Получает значение, показывающее, является ли это сообщением последним переданным сообщением транзакции.</summary>
        <value>
          Значение <see langword="true" />, если данное сообщение было последним сообщением, переданным в транзакции; в противном случае — значение <see langword="false" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Принимающее приложение использует <xref:System.Messaging.Message.IsLastInTransaction%2A> свойство, чтобы убедиться, что сообщение было последним сообщением в одной транзакции в единственную очередь.  
  
 Это свойство доступно только в Message Queuing версии 2.0 и более поздних версий.  
  
 Для проверки границ транзакции можно использовать <xref:System.Messaging.Message.IsLastInTransaction%2A> свойство вместе с двумя свойствами: <xref:System.Messaging.Message.IsFirstInTransaction%2A> и <xref:System.Messaging.Message.TransactionId%2A>. Используйте первое из них для проверки, было ли сообщение отправлено первым в транзакции, а второе — для извлечения идентификатора транзакции.  
  
 Если только одно сообщение отправляется в виде транзакции, <xref:System.Messaging.Message.IsFirstInTransaction%2A> и <xref:System.Messaging.Message.IsLastInTransaction%2A> заданы оба свойства `true`.  
  
   
  
## Examples  
 В следующем примере кода отображает значение сообщение <xref:System.Messaging.Message.IsLastInTransaction%2A> свойство.  
  
  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">Сообщение не отправлено. Это свойство можно прочитать только для сообщений, извлеченных из очереди.  
  
 -или-  
  
 Очередь сообщений фильтруется, чтобы не учитывать свойство <see cref="P:System.Messaging.Message.IsLastInTransaction" />.</exception>
        <altmember cref="P:System.Messaging.Message.IsFirstInTransaction" />
        <altmember cref="P:System.Messaging.Message.TransactionId" />
        <altmember cref="P:System.Messaging.MessageQueue.Transactional" />
      </Docs>
    </Member>
    <Member MemberName="Label">
      <MemberSignature Language="C#" Value="public string Label { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string Label" />
      <MemberSignature Language="DocId" Value="P:System.Messaging.Message.Label" />
      <MemberSignature Language="VB.NET" Value="Public Property Label As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ Label { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Messaging</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.ReadOnly(true)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Messaging.MessagingDescription("MsgLabel")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Получает или задает определяемую приложением строку в кодировке Юникод, описывающую данное сообщение.</summary>
        <value>Метка сообщения. Значение по умолчанию — пустая строка ("").</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Метку сообщения можно использовать для решения ряда задач. Например, ее можно использовать для отображения или выборочной обработки сообщений на основе значений этой метки. Метка не обязательно быть уникальным для сообщения.  
  
 Метки очередей сообщений и метки сообщений представляют определяемые приложением значения, которые могут помочь в идентификации очереди или сообщения в понятных для человека терминах. Он отвечает содержимое метки, которое не имеет внутреннего смысла для приложения Message Queuing, интерпретируется приложением.  
  
   
  
## Examples  
 В следующем примере кода возвращает и задает значение сообщения <xref:System.Messaging.Message.Label%2A> свойство.  
  
  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">Очередь сообщений фильтруется, чтобы не учитывать свойство <see cref="P:System.Messaging.Message.Label" />.</exception>
        <altmember cref="P:System.Messaging.MessageQueue.Label" />
      </Docs>
    </Member>
    <Member MemberName="LookupId">
      <MemberSignature Language="C#" Value="public long LookupId { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int64 LookupId" />
      <MemberSignature Language="DocId" Value="P:System.Messaging.Message.LookupId" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property LookupId As Long" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property long LookupId { long get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Messaging</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int64</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Представлено в MSMQ 3.0. Получает идентификатор просмотра сообщения.</summary>
        <value>Код просмотра сообщения, который создается службой Message Queuing и уникален в очереди, где находится сообщение.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Messaging.Message.LookupId%2A> Свойство предоставляет доступ только для чтения к код поиска сообщения. Код просмотра, введенный в MSMQ 3.0 является 64-разрядный идентификатор, который создается службой Message Queuing и назначается каждому сообщению, когда сообщение будет помещено в очередь. Код просмотра не совпадает с идентификатором сообщения, который создается при отправке сообщения.  
  
 Служба Message Queuing создает идентификатор просмотра для всех сообщений, которые помещаются в очередь, включая назначения, созданный приложением, администрирования и очереди отчетов, а также создаваемые системой журнала, недоставленных сообщений соединителя и исходящих сообщений. Другими словами такие как сообщения, отправляемые передающими приложениями и службой очереди сообщений. Код поиска является уникальным в очередь и не имеет смысла вне очереди.  
  
 Если сообщение отправляется в несколько конечных очередей или если копия сообщения хранится в журнале компьютера или журнале очереди, каждая копия сообщения будет иметь свой собственный код просмотра, помещенный в соответствующую очередь.  
  
 <xref:System.Messaging.Message.LookupId%2A> Свойства могут быть прочитаны только для сообщений, извлеченных из очереди.  
  
 Идентификатор просмотра используется для чтения конкретного сообщения в очереди. После получения идентификатора поиска сообщения принимающее приложение может вызвать <xref:System.Messaging.MessageQueue.PeekByLookupId%2A> или <xref:System.Messaging.MessageQueue.ReceiveByLookupId%2A> функции, чтобы перейти непосредственно на это сообщение и просмотра или получения его из очереди, в отличие от курсоры, которые должны запускаться в передней части очереди и Перейдите к концу очереди  
  
 Получение кодов просмотра сообщений в очереди отвечает приложение. Один из возможных способов получения кодов просмотра является создание триггера для очереди назначения, который вызывает компонент, кэширующий коды каждого сообщения, как они помещаются в очередь.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.PlatformNotSupportedException">Приложение MSMQ 3.0 не установлено.</exception>
        <exception cref="T:System.InvalidOperationException">Сообщение не отправлено. Это свойство можно прочитать только для сообщений, извлеченных из очереди.  
  
 -или-  
  
 Очередь сообщений фильтруется, чтобы не учитывать свойство <see cref="P:System.Messaging.Message.LookupId" />.</exception>
        <altmember cref="M:System.Messaging.MessageQueue.PeekByLookupId" />
        <altmember cref="M:System.Messaging.MessageQueue.ReceiveByLookupId" />
      </Docs>
    </Member>
    <Member MemberName="MessageType">
      <MemberSignature Language="C#" Value="public System.Messaging.MessageType MessageType { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Messaging.MessageType MessageType" />
      <MemberSignature Language="DocId" Value="P:System.Messaging.Message.MessageType" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property MessageType As MessageType" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Messaging::MessageType MessageType { System::Messaging::MessageType get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Messaging</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Messaging.MessagingDescription("MsgMessageType")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Messaging.MessageType</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Получает тип сообщения: <see langword="Normal" />, <see langword="Acknowledgment" /> или <see langword="Report" />.</summary>
        <value>Одно из значений перечисления <see cref="P:System.Messaging.Message.MessageType" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Служба Message Queuing обычно устанавливает это свойство при передаче сообщения. Сообщение Message Queuing может относиться к одному из следующих типов:  
  
-   `Normal`, которому обычное сообщение отправляется из приложения в очередь или ответное сообщение, возвращаемое в передающее приложение.  
  
-   `Acknowledgement`, который создается службой Message Queuing при каждом передающего приложения. Например, служба Message Queuing может создавать положительные или отрицательные сообщения для указания того, что исходное сообщение было доставлено или прочитано. Служба Message Queuing возвращает соответствующее подтверждающее сообщение в очередь администрирования, указанную передающим приложением.  
  
-   `Report`, который создается службой Message Queuing всякий раз, когда в источнике диспетчера очереди определена очередь отчетов. При разрешенной трассировке служба Message Queuing передает сообщение-отчет в очередь отчетов Message Queuing при каждом поступлении исходного сообщения на сервер Message Queuing или при отправке с этого сервера.  
  
   
  
## Examples  
 В следующем примере кода отображает значение сообщение <xref:System.Messaging.Message.MessageType%2A> свойство.  
  
  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">Сообщение не отправлено. Это свойство можно прочитать только для сообщений, извлеченных из очереди.  
  
 -или-  
  
 Очередь сообщений фильтруется, чтобы не учитывать свойство <see cref="P:System.Messaging.Message.MessageType" />.</exception>
        <altmember cref="T:System.Messaging.MessageType" />
        <altmember cref="P:System.Messaging.MessagePropertyFilter.Acknowledgment" />
        <altmember cref="P:System.Messaging.Message.AcknowledgeType" />
        <altmember cref="P:System.Messaging.Message.ResponseQueue" />
      </Docs>
    </Member>
    <Member MemberName="Priority">
      <MemberSignature Language="C#" Value="public System.Messaging.MessagePriority Priority { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Messaging.MessagePriority Priority" />
      <MemberSignature Language="DocId" Value="P:System.Messaging.Message.Priority" />
      <MemberSignature Language="VB.NET" Value="Public Property Priority As MessagePriority" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Messaging::MessagePriority Priority { System::Messaging::MessagePriority get(); void set(System::Messaging::MessagePriority value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Messaging</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.ReadOnly(true)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Messaging.MessagingDescription("MsgPriority")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Messaging.MessagePriority</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Получает или задает приоритет сообщения, используемый для определения места сообщения при его поступлении в очередь.</summary>
        <value>Одно из значений <see cref="T:System.Messaging.MessagePriority" />, представляющих уровни приоритета нетранзакционных сообщений. Значение по умолчанию: <see langword="Normal" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Messaging.Message.Priority%2A> Свойство влияет на обработку службой Message Queuing оба сообщения во время прохождения и при достижении места назначения. Сообщениям с более высоким приоритетом отдается предпочтение при маршрутизации, и они помещаются ближе к началу конечной очереди. Сообщения, имеющие одинаковый приоритет, помещаются в очередь в порядке поступления.  
  
 Можно задать приоритет может применяться только для нетранзакционных сообщений. Служба Message Queuing автоматически устанавливает приоритет транзактных сообщений равным `Lowest`, вследствие чего приоритет транзакционных сообщений пропускаются.  
  
   
  
## Examples  
 В следующем примере кода два сообщения с различным приоритетом отправляются в очередь и последовательно извлекаются.  
  
 [!code-cpp[Message.DefaultPropertiesToSend#1](~/samples/snippets/cpp/VS_Snippets_Remoting/Message.DefaultPropertiesToSend/CPP/message_defaultandpriority.cpp#1)]
 [!code-csharp[Message.DefaultPropertiesToSend#1](~/samples/snippets/csharp/VS_Snippets_Remoting/Message.DefaultPropertiesToSend/CS/message_defaultandpriority.cs#1)]
 [!code-vb[Message.DefaultPropertiesToSend#1](~/samples/snippets/visualbasic/VS_Snippets_Remoting/Message.DefaultPropertiesToSend/VB/message_defaultandpriority.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">Очередь сообщений фильтруется, чтобы не учитывать свойство <see cref="P:System.Messaging.Message.Priority" />.</exception>
        <altmember cref="T:System.Messaging.MessagePriority" />
        <altmember cref="P:System.Messaging.Message.MessageType" />
        <altmember cref="P:System.Messaging.MessageQueue.BasePriority" />
      </Docs>
    </Member>
    <Member MemberName="Recoverable">
      <MemberSignature Language="C#" Value="public bool Recoverable { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool Recoverable" />
      <MemberSignature Language="DocId" Value="P:System.Messaging.Message.Recoverable" />
      <MemberSignature Language="VB.NET" Value="Public Property Recoverable As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool Recoverable { bool get(); void set(bool value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Messaging</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.ReadOnly(true)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Messaging.MessagingDescription("MsgRecoverable")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Получает или задает значение, показывающее, будет ли сообщение гарантированно доставлено в случае отказа компьютера или неисправности в сети.</summary>
        <value>
          Значение <see langword="true" />, если доставка сообщения гарантируется (за счет сохранения сообщения на диске во время нахождения на маршруте), и значение <see langword="false" />, если доставка не гарантируется. Значение по умолчанию: <see langword="false" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Messaging.Message.Recoverable%2A> Свойство определяет, гарантируется ли доставка сообщения — даже в случае отказа компьютера во время прохождения очереди назначения сообщения.  
  
 Если доставка сообщения гарантируется, оно сохраняется локально на каждом этапе маршрута, пока не будет успешно перенаправлено на следующий компьютер. Установка <xref:System.Messaging.Message.Recoverable%2A> свойства `true` может повлиять на пропускную способность.  
  
 Если сообщение является транзакционной, очереди сообщений автоматически обрабатывает сообщение как восстановимых независимо от значения <xref:System.Messaging.Message.Recoverable%2A> свойство.  
  
   
  
## Examples  
 В следующем примере кода возвращает и задает значение сообщения <xref:System.Messaging.Message.Recoverable%2A> свойство.  
  
  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">Очередь сообщений фильтруется, чтобы не учитывать свойство <see cref="P:System.Messaging.Message.Recoverable" />.</exception>
        <altmember cref="P:System.Messaging.Message.UseTracing" />
      </Docs>
    </Member>
    <Member MemberName="ResponseQueue">
      <MemberSignature Language="C#" Value="public System.Messaging.MessageQueue ResponseQueue { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Messaging.MessageQueue ResponseQueue" />
      <MemberSignature Language="DocId" Value="P:System.Messaging.Message.ResponseQueue" />
      <MemberSignature Language="VB.NET" Value="Public Property ResponseQueue As MessageQueue" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Messaging::MessageQueue ^ ResponseQueue { System::Messaging::MessageQueue ^ get(); void set(System::Messaging::MessageQueue ^ value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Messaging</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.ReadOnly(true)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Messaging.MessagingDescription("MsgResponseQueue")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Messaging.MessageQueue</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Получает или задает очередь, принимающую ответные сообщения, создаваемые приложением.</summary>
        <value>Очередь сообщений <see cref="T:System.Messaging.MessageQueue" />, в которую возвращаются ответные сообщения, создаваемые приложениями. Значение по умолчанию: <see langword="null" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Messaging.Message.ResponseQueue%2A> Свойство идентифицирует очередь, принимающую сформированные приложениями ответные сообщения, которые принимающее приложение возвращает в передающее приложение. Передающее приложение задает очереди ответов при передаче их сообщений. В качестве очереди ответов может быть указана любая доступная очередь.  
  
 Сообщения, возвращаемые в очередь ответов, зависят от приложения. Приложение должно определить содержимое этих сообщений и действия, которые необходимо выполнить при приеме сообщений.  
  
   
  
## Examples  
 В следующем примере кода возвращает и задает значение сообщения <xref:System.Messaging.Message.ResponseQueue%2A> свойство.  
  
  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">Очередь сообщений фильтруется, чтобы не учитывать свойство <see cref="P:System.Messaging.Message.ResponseQueue" />.</exception>
        <altmember cref="P:System.Messaging.Message.AdministrationQueue" />
        <altmember cref="P:System.Messaging.Message.DestinationQueue" />
        <altmember cref="P:System.Messaging.Message.TransactionStatusQueue" />
      </Docs>
    </Member>
    <Member MemberName="SecurityContext">
      <MemberSignature Language="C#" Value="public System.Messaging.SecurityContext SecurityContext { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Messaging.SecurityContext SecurityContext" />
      <MemberSignature Language="DocId" Value="P:System.Messaging.Message.SecurityContext" />
      <MemberSignature Language="VB.NET" Value="Public Property SecurityContext As SecurityContext" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Messaging::SecurityContext ^ SecurityContext { System::Messaging::SecurityContext ^ get(); void set(System::Messaging::SecurityContext ^ value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Messaging</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.ReadOnly(true)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Messaging.SecurityContext</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Получает или задает контекст безопасности для сообщения.</summary>
        <value>Объект <see cref="T:System.Messaging.SecurityContext" />, содержащий контекст безопасности для сообщения, если ранее свойство было установлено; в противном случае — значение NULL.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="SenderCertificate">
      <MemberSignature Language="C#" Value="public byte[] SenderCertificate { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance unsigned int8[] SenderCertificate" />
      <MemberSignature Language="DocId" Value="P:System.Messaging.Message.SenderCertificate" />
      <MemberSignature Language="VB.NET" Value="Public Property SenderCertificate As Byte()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property cli::array &lt;System::Byte&gt; ^ SenderCertificate { cli::array &lt;System::Byte&gt; ^ get(); void set(cli::array &lt;System::Byte&gt; ^ value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Messaging</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.ReadOnly(true)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Messaging.MessagingDescription("MsgSenderCertificate")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Byte[]</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Получает или задает сертификат безопасности, используемый при проверке подлинности сообщений.</summary>
        <value>Массив байтовых значений, представляющий сертификат безопасности, который используется службой очереди сообщений для проверки отправителя сообщения. По умолчанию задан массив нулевой длины.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Принимающее приложение использует <xref:System.Messaging.Message.SenderCertificate%2A> свойство, когда сообщение включает внешний сертификат безопасности.  
  
 Служба Message Queuing может проверять подлинность сообщения с помощью либо сертификат внутренней или внешней безопасности. Служба Message Queuing предоставляет внутренние сертификаты, которые используются для проверки целостности сообщения. Сертификации предоставляют внешний сертификат, к которому можно получить через <xref:System.Messaging.Message.SenderCertificate%2A> свойства сообщения. Для проверки подлинности сообщения очереди сообщений, внешний сертификат позволяет провести дополнительную проверку отправителя принимающим приложением. Внутренний сертификат не имеет подходящего значения принимающему приложению.  
  
 Внешний сертификат должны регистрироваться в службе каталога системы очереди сообщений. Внешний сертификат содержит сведения о центре сертификации, пользователь сертификата, срок действия сертификата, открытый ключ пользователя сертификата и подпись центра сертификации.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">Очередь сообщений фильтруется, чтобы не учитывать свойство <see cref="P:System.Messaging.Message.SenderCertificate" />.</exception>
        <altmember cref="P:System.Messaging.Message.UseAuthentication" />
        <altmember cref="P:System.Messaging.Message.DigitalSignature" />
        <altmember cref="P:System.Messaging.Message.Authenticated" />
      </Docs>
    </Member>
    <Member MemberName="SenderId">
      <MemberSignature Language="C#" Value="public byte[] SenderId { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance unsigned int8[] SenderId" />
      <MemberSignature Language="DocId" Value="P:System.Messaging.Message.SenderId" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property SenderId As Byte()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property cli::array &lt;System::Byte&gt; ^ SenderId { cli::array &lt;System::Byte&gt; ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Messaging</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Messaging.MessagingDescription("MsgSenderId")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Byte[]</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Получает идентификатор пользователя, отправившего сообщение.</summary>
        <value>Массив байтовых значений, описывающий отправителя. Принимающая служба Queue Manager использует этот идентификатор при проверке подлинности сообщения, чтобы проверить отправителя сообщения и права отправителя на доступ к очереди.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Если <xref:System.Messaging.Message.AttachSenderId%2A> свойство `false`, идентификатор отправителя, указанный в <xref:System.Messaging.Message.SenderId%2A> при отправке сообщения не присоединяется свойство. Это указывает очереди сообщений не проверки отправителя при отправке сообщения в очередь назначения. Если <xref:System.Messaging.Message.AttachSenderId%2A> свойство `true`, <xref:System.Messaging.Message.SenderId%2A> значение свойства trustworthy только в том случае, если сообщение прошло проверку подлинности. Используйте <xref:System.Messaging.Message.Authenticated%2A> свойства в сочетании с <xref:System.Messaging.Message.SenderId%2A> свойство для проверки прав доступа отправителя.  
  
 Приложение-подключатель является приложение, использующее сервера соединителя для обеспечения связи между другими системами очередей и сообщений. Служба Message Queuing требует соединителя приложения для предоставления идентификацию отправителя. Необходимо задать <xref:System.Messaging.Message.ConnectorType%2A> свойства при отправке сообщений через приложение-подключатель.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">Сообщение не отправлено. Это свойство можно прочитать только для сообщений, извлеченных из очереди.  
  
 -или-  
  
 Очередь сообщений фильтруется, чтобы не учитывать свойство <see cref="P:System.Messaging.Message.SenderId" />.</exception>
        <altmember cref="P:System.Messaging.Message.Authenticated" />
        <altmember cref="P:System.Messaging.Message.AttachSenderId" />
        <altmember cref="P:System.Messaging.Message.AuthenticationProviderName" />
        <altmember cref="P:System.Messaging.Message.AuthenticationProviderType" />
        <altmember cref="P:System.Messaging.Message.ConnectorType" />
      </Docs>
    </Member>
    <Member MemberName="SenderVersion">
      <MemberSignature Language="C#" Value="public long SenderVersion { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int64 SenderVersion" />
      <MemberSignature Language="DocId" Value="P:System.Messaging.Message.SenderVersion" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property SenderVersion As Long" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property long SenderVersion { long get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Messaging</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.ReadOnly(true)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Messaging.MessagingDescription("MsgSenderVersion")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int64</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Получает версию очереди сообщений, используемую для передачи сообщения.</summary>
        <value>Версия Message Queuing, используемая для передачи сообщения.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Messaging.Message.SenderVersion%2A> Свойства важно для некоторых функций. Например обработка транзакций поддерживается только по очереди сообщений версии 2.0 и более поздних версий и цифровые подписи используются для проверки подлинности сообщений, передаваемых MSMQ 1.0.  
  
 Передающая Queue Manager устанавливает <xref:System.Messaging.Message.SenderVersion%2A> свойство при передаче сообщения.  
  
   
  
## Examples  
 В следующем примере кода отображает значение сообщение <xref:System.Messaging.Message.SenderVersion%2A> свойство.  
  
  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">Сообщение не отправлено. Это свойство можно прочитать только для сообщений, извлеченных из очереди.  
  
 -или-  
  
 Очередь сообщений фильтруется, чтобы не учитывать свойство <see cref="P:System.Messaging.Message.SenderVersion" />.</exception>
        <altmember cref="P:System.Messaging.Message.TransactionId" />
        <altmember cref="P:System.Messaging.Message.IsFirstInTransaction" />
        <altmember cref="P:System.Messaging.Message.IsLastInTransaction" />
        <altmember cref="P:System.Messaging.Message.TransactionStatusQueue" />
        <altmember cref="P:System.Messaging.Message.DigitalSignature" />
      </Docs>
    </Member>
    <Member MemberName="SentTime">
      <MemberSignature Language="C#" Value="public DateTime SentTime { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.DateTime SentTime" />
      <MemberSignature Language="DocId" Value="P:System.Messaging.Message.SentTime" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property SentTime As DateTime" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property DateTime SentTime { DateTime get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Messaging</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.ReadOnly(true)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Messaging.MessagingDescription("MsgSentTime")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.DateTime</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Получает дату и время, установленные на передающем компьютере на момент передачи данного сообщения диспетчером исходной очереди.</summary>
        <value>Объект <see cref="T:System.DateTime" />, представляющий время передачи данного сообщения.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Messaging.Message.SentTime%2A> Настройки свойства в локальное время компьютера, на котором эта экземпляр <xref:System.Messaging.Message> был создан класс. Этот часовой пояс может отличаться от тех исходных и конечных очередей.  
  
   
  
## Examples  
 В следующем примере кода отображает значение сообщение <xref:System.Messaging.Message.SentTime%2A> свойство.  
  
  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">Сообщение не отправлено. Это свойство можно прочитать только для сообщений, извлеченных из очереди.  
  
 -или-  
  
 Очередь сообщений фильтруется, чтобы не учитывать свойство <see cref="P:System.Messaging.Message.SentTime" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="SourceMachine">
      <MemberSignature Language="C#" Value="public string SourceMachine { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string SourceMachine" />
      <MemberSignature Language="DocId" Value="P:System.Messaging.Message.SourceMachine" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property SourceMachine As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ SourceMachine { System::String ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Messaging</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Messaging.MessagingDescription("MsgSourceMachine")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Получает имя компьютера, с которого было передано данное сообщение.</summary>
        <value>Имя компьютера, с которого было передано данное сообщение.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Формат <xref:System.Messaging.Message.SourceMachine%2A> свойства не включает предшествующий две косые черты (\\\\). Например `myServer` является допустимым <xref:System.Messaging.Message.SourceMachine%2A>.  
  
   
  
## Examples  
 В следующем примере кода отображает значение сообщение <xref:System.Messaging.Message.SourceMachine%2A> свойство.  
  
  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">Сообщение не отправлено. Это свойство можно прочитать только для сообщений, извлеченных из очереди.  
  
 -или-  
  
 Очередь сообщений фильтруется, чтобы не учитывать свойство <see cref="P:System.Messaging.Message.SourceMachine" />.</exception>
        <exception cref="T:System.Messaging.MessageQueueException">Нет доступа к сведениям о компьютере или службе каталогов.</exception>
        <altmember cref="P:System.Messaging.MessageQueue.MachineName" />
      </Docs>
    </Member>
    <Member MemberName="TimeToBeReceived">
      <MemberSignature Language="C#" Value="public TimeSpan TimeToBeReceived { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.TimeSpan TimeToBeReceived" />
      <MemberSignature Language="DocId" Value="P:System.Messaging.Message.TimeToBeReceived" />
      <MemberSignature Language="VB.NET" Value="Public Property TimeToBeReceived As TimeSpan" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property TimeSpan TimeToBeReceived { TimeSpan get(); void set(TimeSpan value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Messaging</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.ReadOnly(true)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.TypeConverter(typeof(System.Messaging.TimeoutConverter))</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Messaging.MessagingDescription("MsgTimeToBeReceived")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.TimeSpan</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Получает или задает максимальное время, в течение которого сообщение должно быть извлечено из очереди местоназначения.</summary>
        <value>Суммарное время, в течение которого переданное сообщение должно быть получено из очереди местоназначения. Значение по умолчанию: <see cref="F:System.Messaging.Message.InfiniteTimeout" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Messaging.Message.TimeToBeReceived%2A> Свойство указывает общее время для отправленного сообщения должно быть получено из очереди назначения. Этот лимит включает время, затраченное на получение для очереди назначения и время ожидания в очереди до получения сообщения.  
  
> [!CAUTION]
>  При использовании подчиненных клиентских компьютеров убедитесь, что часы на клиентском компьютере синхронизированы с часами на сервере, на котором выполняется служба очереди сообщений. В противном случае может привести к непредсказуемому поведению при отправке сообщения которого <xref:System.Messaging.Message.TimeToBeReceived%2A> свойство не <xref:System.Messaging.Message.InfiniteTimeout>.  
  
 Если время, заданное параметром <xref:System.Messaging.Message.TimeToBeReceived%2A> истекает до удаления сообщения из очереди, очереди сообщений отклоняет это сообщение одним из двух способов. Если свойство <xref:System.Messaging.Message.UseDeadLetterQueue%2A> сообщения имеет значение `true`, это сообщение будет передано в очередь недоставленных сообщений. Если <xref:System.Messaging.Message.UseDeadLetterQueue%2A> — `false`, это сообщение обрабатывается.  
  
 Можно задать сообщения <xref:System.Messaging.Message.AcknowledgeType%2A> свойство для запроса, что очереди сообщений отправить сообщение отрицательного подтверждения резервное передающее приложение, если сообщения не получаются, до истечения срока действия таймера.  
  
 Если значение, заданное параметром <xref:System.Messaging.Message.TimeToBeReceived%2A> свойства меньше, чем значение, заданное параметром <xref:System.Messaging.Message.TimeToReachQueue%2A> свойства <xref:System.Messaging.Message.TimeToBeReceived%2A> имеет более высокий приоритет.  
  
 Очередь сообщений использует несколько сообщений, отправленных в одной транзакции, <xref:System.Messaging.Message.TimeToBeReceived%2A> свойства первого сообщения.  
  
   
  
## Examples  
 В следующем примере кода возвращает и задает значение сообщения <xref:System.Messaging.Message.TimeToBeReceived%2A> свойство.  
  
  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">Очередь сообщений фильтруется, чтобы не учитывать свойство <see cref="P:System.Messaging.Message.TimeToBeReceived" />.</exception>
        <exception cref="T:System.ArgumentException">Задано недопустимое значение для <see cref="P:System.Messaging.Message.TimeToBeReceived" />.</exception>
        <altmember cref="P:System.Messaging.Message.TimeToReachQueue" />
        <altmember cref="F:System.Messaging.Message.InfiniteTimeout" />
      </Docs>
    </Member>
    <Member MemberName="TimeToReachQueue">
      <MemberSignature Language="C#" Value="public TimeSpan TimeToReachQueue { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.TimeSpan TimeToReachQueue" />
      <MemberSignature Language="DocId" Value="P:System.Messaging.Message.TimeToReachQueue" />
      <MemberSignature Language="VB.NET" Value="Public Property TimeToReachQueue As TimeSpan" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property TimeSpan TimeToReachQueue { TimeSpan get(); void set(TimeSpan value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Messaging</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.ReadOnly(true)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.TypeConverter(typeof(System.Messaging.TimeoutConverter))</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Messaging.MessagingDescription("MsgTimeToReachQueue")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.TimeSpan</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Получает или задает максимальное время, в течение которого сообщение должно дойти до очереди.</summary>
        <value>Лимит времени, отсчитываемый с момента отправки сообщения, в течение которого сообщение должно достичь очереди местоназначения. Значение по умолчанию: <see cref="F:System.Messaging.Message.InfiniteTimeout" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Если время, заданное параметром <xref:System.Messaging.Message.TimeToReachQueue%2A> истекает до как сообщение достигнет конечной очереди, очереди сообщений отклоняет сообщение одним из двух способов. Если свойство <xref:System.Messaging.Message.UseDeadLetterQueue%2A> сообщения имеет значение `true`, это сообщение будет передано в очередь недоставленных сообщений. Если <xref:System.Messaging.Message.UseDeadLetterQueue%2A> — `false`, сообщение пропускается  
  
 Можно задать сообщения <xref:System.Messaging.Message.AcknowledgeType%2A> свойство для запроса, что очереди сообщений отправить сообщение отрицательного подтверждения обратно в передающее приложение, если сообщение пришло до истечения времени ожидания.  
  
 Если <xref:System.Messaging.Message.TimeToReachQueue%2A> свойство установлено в 0 секунд, Message Queuing пытается отправить его в место назначения, если очередь ожидает сообщения. Если очередь локальная, сообщение всегда достигает очереди.  
  
 Если значение, заданное параметром <xref:System.Messaging.Message.TimeToReachQueue%2A> больше, чем значение, заданное параметром <xref:System.Messaging.Message.TimeToBeReceived%2A> свойства <xref:System.Messaging.Message.TimeToBeReceived%2A> имеет более высокий приоритет.  
  
 Очередь сообщений использует несколько сообщений, отправленных в одной транзакции, <xref:System.Messaging.Message.TimeToReachQueue%2A> свойства первого сообщения.  
  
   
  
## Examples  
 В следующем примере кода возвращает и задает значение сообщения <xref:System.Messaging.Message.TimeToReachQueue%2A> свойство.  
  
  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">Очередь сообщений фильтруется, чтобы не учитывать свойство <see cref="P:System.Messaging.Message.TimeToReachQueue" />.</exception>
        <exception cref="T:System.ArgumentException">Задано недопустимое значение для <see cref="P:System.Messaging.Message.TimeToReachQueue" />. Возможно, это отрицательное число.</exception>
        <altmember cref="P:System.Messaging.Message.TimeToBeReceived" />
        <altmember cref="F:System.Messaging.Message.InfiniteTimeout" />
      </Docs>
    </Member>
    <Member MemberName="TransactionId">
      <MemberSignature Language="C#" Value="public string TransactionId { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string TransactionId" />
      <MemberSignature Language="DocId" Value="P:System.Messaging.Message.TransactionId" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property TransactionId As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ TransactionId { System::String ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Messaging</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Messaging.MessagingDescription("MsgTransactionId")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Получает идентификатор транзакции, частью которой является данное сообщение.</summary>
        <value>Идентификатор транзакции, связанной с данным сообщением.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Принимающее приложение использует <xref:System.Messaging.Message.TransactionId%2A> свойство, чтобы убедиться, что сообщение было отправлено в рамках отдельной транзакции. Идентификатор транзакции содержит идентификатор передающего компьютера (первые 16 битов) следуют 4-байтовый порядковый номер транзакции.  
  
 Это свойство доступно только для очереди сообщений версии 2.0 и более поздней версии.  
  
 Не гарантируется, что идентификаторы транзакций будут уникальными, так как последовательные номера транзакций не сохраняются, и они начинаются сначала после достижения 2 <sup>20</sup>. Служба Message Queuing гарантирует только то, что последующие транзакции будет иметь различные транзакции порядковые номера.  
  
 Можно использовать <xref:System.Messaging.Message.TransactionId%2A> свойство вместе с <xref:System.Messaging.Message.IsFirstInTransaction%2A> и <xref:System.Messaging.Message.IsLastInTransaction%2A> свойства для проверки границ транзакции.  
  
   
  
## Examples  
 В следующем примере кода отображает значение сообщение <xref:System.Messaging.Message.TransactionId%2A> свойство.  
  
  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">Сообщение не отправлено. Это свойство можно прочитать только для сообщений, извлеченных из очереди.  
  
 -или-  
  
 Очередь сообщений фильтруется, чтобы не учитывать свойство <see cref="P:System.Messaging.Message.TransactionId" />.</exception>
        <altmember cref="P:System.Messaging.Message.IsFirstInTransaction" />
        <altmember cref="P:System.Messaging.Message.IsLastInTransaction" />
        <altmember cref="P:System.Messaging.MessageQueue.Transactional" />
      </Docs>
    </Member>
    <Member MemberName="TransactionStatusQueue">
      <MemberSignature Language="C#" Value="public System.Messaging.MessageQueue TransactionStatusQueue { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Messaging.MessageQueue TransactionStatusQueue" />
      <MemberSignature Language="DocId" Value="P:System.Messaging.Message.TransactionStatusQueue" />
      <MemberSignature Language="VB.NET" Value="Public Property TransactionStatusQueue As MessageQueue" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Messaging::MessageQueue ^ TransactionStatusQueue { System::Messaging::MessageQueue ^ get(); void set(System::Messaging::MessageQueue ^ value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Messaging</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.ReadOnly(true)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Messaging.MessagingDescription("MsgTransactionStatusQueue")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Messaging.MessageQueue</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Получает очередь состояний транзакций на компьютере-источнике.</summary>
        <value>Очередь состояний транзакций на компьютере-источнике, используемая для передачи подтверждающих сообщений обратно в передающее приложение. Значение по умолчанию: <see langword="null" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Messaging.Message.TransactionStatusQueue%2A> Свойство идентифицирует очередь транзакций на исходном компьютере, который получает подтверждение получения чтения из приложения-подключатели. Служба Message Queuing устанавливает свойство и соединителя приложения используют его при поиске транзактных сообщений, переданных во внешние очереди.  
  
 Внешнюю очередь существует в очереди системы, отличной от Microsoft Message Queuing. Служба Message Queuing связывается с другими очередями через приложение-подключатель.  
  
 Приложение-подключатель можно использовать очереди состояния транзакции для отправки подтверждающих сообщений в передающее приложение. Очереди состояния транзакции должна получать эти подтверждения, даже если отправляющее приложение не запрашивает других подтверждений.  
  
   
  
## Examples  
 В следующем примере кода отображает значение сообщение <xref:System.Messaging.Message.TransactionStatusQueue%2A> свойство.  
  
  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">Сообщение не отправлено. Это свойство можно прочитать только для сообщений, извлеченных из очереди.  
  
 -или-  
  
 Очередь сообщений фильтруется, чтобы не учитывать свойство <see cref="P:System.Messaging.Message.TransactionStatusQueue" />.</exception>
        <altmember cref="P:System.Messaging.Message.TransactionId" />
        <altmember cref="P:System.Messaging.Message.AdministrationQueue" />
        <altmember cref="P:System.Messaging.Message.DestinationQueue" />
        <altmember cref="P:System.Messaging.Message.ResponseQueue" />
        <altmember cref="P:System.Messaging.MessageQueue.Transactional" />
        <altmember cref="T:System.Messaging.AcknowledgeTypes" />
      </Docs>
    </Member>
    <Member MemberName="UseAuthentication">
      <MemberSignature Language="C#" Value="public bool UseAuthentication { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool UseAuthentication" />
      <MemberSignature Language="DocId" Value="P:System.Messaging.Message.UseAuthentication" />
      <MemberSignature Language="VB.NET" Value="Public Property UseAuthentication As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool UseAuthentication { bool get(); void set(bool value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Messaging</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.ReadOnly(true)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Messaging.MessagingDescription("MsgUseAuthentication")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Получает или задает значение, указывающее, проводилась ли (или должна ли проводиться) проверка подлинности до отправки сообщения.</summary>
        <value>
          Значение <see langword="true" />, если передающее приложение запрашивает проверку подлинности для данного сообщения; в противном случае — значение <see langword="false" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Messaging.Message.UseAuthentication%2A> Свойство указывает, должна ли сообщение проверку подлинности. Если отправляющее приложение запрашивает проверку подлинности, Message Queuing создает цифровую подпись и использует ее для подписи сообщения при его передаче и проверки подлинности сообщения при его получении.  
  
 Если <xref:System.Messaging.Message.UseAuthentication%2A> — `false` и сообщение отправляется в очередь, принимающую только сообщения, прошедшие проверку подлинности, сообщение будет отклонено при поступлении в очередь.  
  
 Не удается определить, если сообщение не прошел проверку подлинности, просмотрев его свойства. Служба Message Queuing отклоняет такие сообщения, прежде чем они попадут в очередь. Тем не менее можно запросить подтверждающее сообщение, когда сбоя доставки сообщение на попадает в очередь.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">Очередь сообщений фильтруется, чтобы не учитывать свойство <see cref="P:System.Messaging.Message.UseAuthentication" />.</exception>
        <altmember cref="P:System.Messaging.Message.Authenticated" />
        <altmember cref="P:System.Messaging.Message.ConnectorType" />
        <altmember cref="P:System.Messaging.Message.AuthenticationProviderName" />
        <altmember cref="P:System.Messaging.Message.AuthenticationProviderType" />
        <altmember cref="P:System.Messaging.Message.DigitalSignature" />
        <altmember cref="P:System.Messaging.MessageQueue.Authenticate" />
        <altmember cref="T:System.Messaging.AcknowledgeTypes" />
        <altmember cref="P:System.Messaging.Message.AttachSenderId" />
      </Docs>
    </Member>
    <Member MemberName="UseDeadLetterQueue">
      <MemberSignature Language="C#" Value="public bool UseDeadLetterQueue { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool UseDeadLetterQueue" />
      <MemberSignature Language="DocId" Value="P:System.Messaging.Message.UseDeadLetterQueue" />
      <MemberSignature Language="VB.NET" Value="Public Property UseDeadLetterQueue As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool UseDeadLetterQueue { bool get(); void set(bool value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Messaging</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.ReadOnly(true)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Messaging.MessagingDescription("MsgUseDeadLetterQueue")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Получает или задает значение, указывающее, должна ли копия сообщения, которое не может быть доставлено, передаваться в очередь недоставленных сообщений.</summary>
        <value>
          Значение <see langword="true" />, если при сбое доставки сообщения его копия направляется в очередь недоставленных сообщений; в противном случае — значение <see langword="false" />. Значение по умолчанию: <see langword="false" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Messaging.Message.UseJournalQueue%2A> И <xref:System.Messaging.Message.UseDeadLetterQueue%2A> свойства указывают, как очереди сообщений отслеживает сообщения. Если <xref:System.Messaging.Message.UseDeadLetterQueue%2A> — `true`, сообщение об ошибке доставки (для нетранзакционных сообщений), в результате сообщение отправлено в нетранзакционную очередь недоставленных сообщений на компьютере, который не удалось доставить сообщение. Может быть причиной сбоя доставки сообщение таймера истекает, например.  
  
 В случае сбоя доставки транзакционного сообщения служба Message Queuing передает сообщение в транзакционную очередь недоставленных сообщений на компьютере-источнике во всех отрицательных или сомнительных случаях.  
  
 Если хранение сообщений в очереди недоставленных сообщений, необходимо снять очереди периодически для удаления сообщений, которые больше не нужны. Сообщения, хранящиеся в очереди недоставленных сообщений, учитываются в размере квоты для компьютера, на котором находится очередь. Квота компьютера устанавливается администратором и определяет для объема, выделенного для хранения сообщений на данном компьютере, а не только в одной очереди.  
  
 Не создавайте журнал или очередь недоставленных сообщений. Они оба системных очередей, создается службой Message Queuing.  
  
   
  
## Examples  
 В следующем примере кода возвращает и задает значение сообщения <xref:System.Messaging.Message.UseDeadLetterQueue%2A> свойство.  
  
  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">Очередь сообщений фильтруется, чтобы не учитывать свойство <see cref="P:System.Messaging.Message.UseDeadLetterQueue" />.</exception>
        <altmember cref="P:System.Messaging.Message.UseJournalQueue" />
        <altmember cref="P:System.Messaging.Message.UseTracing" />
      </Docs>
    </Member>
    <Member MemberName="UseEncryption">
      <MemberSignature Language="C#" Value="public bool UseEncryption { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool UseEncryption" />
      <MemberSignature Language="DocId" Value="P:System.Messaging.Message.UseEncryption" />
      <MemberSignature Language="VB.NET" Value="Public Property UseEncryption As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool UseEncryption { bool get(); void set(bool value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Messaging</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.ReadOnly(true)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Messaging.MessagingDescription("MsgUseEncryption")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Получает или задает значение, определяющее, является ли сообщение конфиденциальным.</summary>
        <value>
          Значение <see langword="true" />, если требуется, чтобы служба Message Queuing шифровала сообщения; в противном случае — значение <see langword="false" />. Значение по умолчанию: <see langword="false" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Если сообщение является закрытым, его текст шифруется перед отправкой и расшифровывается при получении. Для отправки конфиденциальное сообщение, передающее приложение должно указывать, об использовании шифрования и при необходимости алгоритма шифрования.  
  
 При передаче конфиденциальных сообщений, приложения не должны выполнять шифрование сообщения. Служба Message Queuing может шифровать текст сообщения, когда приложение отправляет сообщения в рамках предприятия Microsoft Windows 2000, который имеет доступ к службе каталогов. При получении конфиденциальных сообщений, диспетчер принимающей очереди всегда расшифровывает текст сообщения.  
  
   
  
## Examples  
 В следующем примере кода возвращает и задает значение сообщения <xref:System.Messaging.Message.UseEncryption%2A> свойство.  
  
  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">Очередь сообщений фильтруется, чтобы не учитывать свойство <see cref="P:System.Messaging.Message.UseEncryption" />.</exception>
        <altmember cref="P:System.Messaging.Message.EncryptionAlgorithm" />
        <altmember cref="P:System.Messaging.MessageQueue.EncryptionRequired" />
      </Docs>
    </Member>
    <Member MemberName="UseJournalQueue">
      <MemberSignature Language="C#" Value="public bool UseJournalQueue { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool UseJournalQueue" />
      <MemberSignature Language="DocId" Value="P:System.Messaging.Message.UseJournalQueue" />
      <MemberSignature Language="VB.NET" Value="Public Property UseJournalQueue As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool UseJournalQueue { bool get(); void set(bool value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Messaging</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.ReadOnly(true)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Messaging.MessagingDescription("MsgUseJournalQueue")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Получает или задает значение, указывающее, должна ли копия сообщения храниться в журнале компьютера, являющегося источником этого сообщения.</summary>
        <value>
          Чтобы потребовать хранения копии сообщения в журнале компьютера-источника после успешной передачи сообщения с компьютера на следующий сервер, это значение должно быть равным <see langword="true" />; в противном случае — <see langword="false" />. Значение по умолчанию: <see langword="false" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Messaging.Message.UseJournalQueue%2A> И <xref:System.Messaging.Message.UseDeadLetterQueue%2A> свойства указывают, как очереди сообщений отслеживает сообщения. Если <xref:System.Messaging.Message.UseJournalQueue%2A> — `true`, а затем его копия сохраняется в журнале исходного компьютера на каждом шаге передачи сообщения.  
  
 Отправленного сообщения копируется в очередь журнала, только если очередь назначения располагается на удаленном компьютере. Если файл находится на локальном компьютере, сообщение отправляется непосредственно в очередь; отсутствуют промежуточные шаги требующих ведения журнала.  
  
 Если хранение сообщений в очереди журнала, очистки очереди периодически для удаления сообщений, которые больше не нужны. Сообщения, хранящиеся в очереди журнала, входят в квоту для компьютера, на котором находится очередь. (Квота компьютера устанавливается администратором).  
  
 Не создавайте журнал или очередь недоставленных сообщений. Они оба системных очередей, создается службой Message Queuing.  
  
   
  
## Examples  
 В следующем примере кода возвращает и задает значение сообщения <xref:System.Messaging.Message.UseJournalQueue%2A> свойство.  
  
  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">Очередь сообщений фильтруется, чтобы не учитывать свойство <see cref="P:System.Messaging.Message.UseJournalQueue" />.</exception>
        <altmember cref="P:System.Messaging.Message.UseDeadLetterQueue" />
        <altmember cref="P:System.Messaging.Message.UseTracing" />
        <altmember cref="P:System.Messaging.MessageQueue.UseJournalQueue" />
        <altmember cref="P:System.Messaging.MessageQueue.MaximumJournalSize" />
      </Docs>
    </Member>
    <Member MemberName="UseTracing">
      <MemberSignature Language="C#" Value="public bool UseTracing { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool UseTracing" />
      <MemberSignature Language="DocId" Value="P:System.Messaging.Message.UseTracing" />
      <MemberSignature Language="VB.NET" Value="Public Property UseTracing As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool UseTracing { bool get(); void set(bool value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Messaging</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.ReadOnly(true)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Messaging.MessagingDescription("MsgUseTracing")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Получает или задает значение, указывающее, нужно ли отслеживать сообщение в процессе его перемещения в очередь места назначения.</summary>
        <value>
          Значение <see langword="true" />, если необходимо, чтобы на каждом промежуточном этапе прохождения сообщения в очередь места назначения создавался отчет, передаваемый в очередь системных отчетов; в противном случае — значение <see langword="false" />. Значение по умолчанию: <see langword="false" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Messaging.Message.UseTracing%2A> Свойство указывает, следует ли отслеживать сообщение при его переходе к очереди назначения. Если `true`, в отчет (создается службой Message Queuing) отправляется в очередь отчетов при каждом проходе сообщения через сервер маршрутизации очереди сообщений. Очередь отчетов определяется службой Queue Manager источника. Очереди отчетов не ограничиваются отчетами, создаваемыми службой Message Queuing; создаваемые приложением сообщения могут отправляться также в очередь отчетов.  
  
 Использование трассировки включает настройку Active Directory и указании очереди отчета службой очередей сообщений. Администратор настраивает эти параметры.  
  
   
  
## Examples  
 В следующем примере кода возвращает и задает значение сообщения <xref:System.Messaging.Message.UseTracing%2A> свойство.  
  
  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">Очередь сообщений фильтруется, чтобы не учитывать свойство <see cref="P:System.Messaging.Message.UseTracing" />.</exception>
        <altmember cref="P:System.Messaging.Message.UseDeadLetterQueue" />
        <altmember cref="P:System.Messaging.Message.UseJournalQueue" />
      </Docs>
    </Member>
  </Members>
</Type>