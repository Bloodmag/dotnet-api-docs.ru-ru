<Type Name="MessageEnumerator" FullName="System.Messaging.MessageEnumerator">
  <TypeSignature Language="C#" Value="public class MessageEnumerator : MarshalByRefObject, IDisposable, System.Collections.IEnumerator" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit MessageEnumerator extends System.MarshalByRefObject implements class System.Collections.IEnumerator, class System.IDisposable" />
  <TypeSignature Language="DocId" Value="T:System.Messaging.MessageEnumerator" />
  <TypeSignature Language="VB.NET" Value="Public Class MessageEnumerator&#xA;Inherits MarshalByRefObject&#xA;Implements IDisposable, IEnumerator" />
  <TypeSignature Language="C++ CLI" Value="public ref class MessageEnumerator : MarshalByRefObject, IDisposable, System::Collections::IEnumerator" />
  <AssemblyInfo>
    <AssemblyName>System.Messaging</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.MarshalByRefObject</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>System.Collections.IEnumerator</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.IDisposable</InterfaceName>
    </Interface>
  </Interfaces>
  <Docs>
    <summary><span data-ttu-id="1a683-101">Предоставляет курсор последовательного доступа для перечисления сообщений в очереди сообщений.</span><span class="sxs-lookup"><span data-stu-id="1a683-101">Provides a forward-only cursor to enumerate through messages in a message queue.</span></span></summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="1a683-102">Используйте <xref:System.Messaging.MessageEnumerator> для динамического взаимодействия с сообщениями в очереди.</span><span class="sxs-lookup"><span data-stu-id="1a683-102">Use <xref:System.Messaging.MessageEnumerator> for dynamic interaction with messages in a queue.</span></span> <span data-ttu-id="1a683-103">Методы, доступные через <xref:System.Messaging.MessageQueue> класса могут возвращать либо <xref:System.Messaging.MessageEnumerator> указывает динамический список сообщений в очереди, либо массив, содержащий копии в данный момент времени - моментальный снимок - очереди во время указанный метод был вызван.</span><span class="sxs-lookup"><span data-stu-id="1a683-103">Methods available through the <xref:System.Messaging.MessageQueue> class can return either a <xref:System.Messaging.MessageEnumerator> pointing to a dynamic list of messages in the queue, or an array that contains a copy at a given instant - a snapshot - of the queue at the time the specified method was called.</span></span>  
  
 <span data-ttu-id="1a683-104">В отличие от статического моментального снимка перечислитель позволяет изменять коллекцию.</span><span class="sxs-lookup"><span data-stu-id="1a683-104">Unlike a static snapshot, an enumerator allows you to modify the collection.</span></span> <span data-ttu-id="1a683-105">С помощью <xref:System.Messaging.MessageEnumerator>, можно удалить сообщение из очереди и их изменения немедленно отражаются в очереди.</span><span class="sxs-lookup"><span data-stu-id="1a683-105">Using a <xref:System.Messaging.MessageEnumerator>, you can remove messages from the queue, and the change is immediately reflected in the queue.</span></span>  
  
 <span data-ttu-id="1a683-106">Перечислитель не удаляет сообщения из очереди при запросе очереди.</span><span class="sxs-lookup"><span data-stu-id="1a683-106">An enumerator does not remove the messages from the queue when it queries the queue.</span></span> <span data-ttu-id="1a683-107">Возвращает сведения о сообщении, расположенный в текущей позиции курсора, но оставляет сообщение в очереди.</span><span class="sxs-lookup"><span data-stu-id="1a683-107">It returns information about the message at the current cursor position, but it leaves the message in the queue.</span></span>  
  
 <span data-ttu-id="1a683-108">Объект <xref:System.Messaging.MessageEnumerator> курсор, инициализируемый в заголовке динамического списка.</span><span class="sxs-lookup"><span data-stu-id="1a683-108">A <xref:System.Messaging.MessageEnumerator> is a cursor, initialized to the head of a dynamic list.</span></span> <span data-ttu-id="1a683-109">Порядок элементов списка является таким же, как порядок сообщений в очереди, исходя из приоритета сообщения.</span><span class="sxs-lookup"><span data-stu-id="1a683-109">The list order is the same as the order of the messages in the queue, according to message priority.</span></span> <span data-ttu-id="1a683-110">Можно переместить курсор на первое сообщение в очереди, вызвав <xref:System.Messaging.MessageEnumerator.MoveNext%2A>.</span><span class="sxs-lookup"><span data-stu-id="1a683-110">You can move the cursor to the first message in the queue by calling <xref:System.Messaging.MessageEnumerator.MoveNext%2A>.</span></span> <span data-ttu-id="1a683-111">После инициализации перечислителя, можно использовать <xref:System.Messaging.MessageEnumerator.MoveNext%2A> для прохода вперед по оставшимся сообщениям.</span><span class="sxs-lookup"><span data-stu-id="1a683-111">After the enumerator has been initialized, you can use <xref:System.Messaging.MessageEnumerator.MoveNext%2A> to step forward through the remaining messages.</span></span> <span data-ttu-id="1a683-112">Можно указать, следует ли ожидать сообщение станет доступным, передав время ожидания в <xref:System.Messaging.MessageEnumerator.MoveNext%2A> метод.</span><span class="sxs-lookup"><span data-stu-id="1a683-112">You can specify whether to wait for a message to become available by passing a timeout into the <xref:System.Messaging.MessageEnumerator.MoveNext%2A> method.</span></span>  
  
 <span data-ttu-id="1a683-113">Поскольку перечислитель является динамическим, сообщения, которые добавляются за текущей позицией курсора (например, из-за низкого приоритета), может осуществляться с помощью перечислителя.</span><span class="sxs-lookup"><span data-stu-id="1a683-113">Because the enumerator is dynamic, a message that is appended beyond the cursor's current position (for example, due to low priority), can be accessed by the enumerator.</span></span> <span data-ttu-id="1a683-114">Сообщение, которое вставляется перед текущей позицией курсора будет невозможен.</span><span class="sxs-lookup"><span data-stu-id="1a683-114">A message that is inserted before the cursor's current position cannot be accessed.</span></span> <span data-ttu-id="1a683-115">Не удается шаг назад с <xref:System.Messaging.MessageEnumerator>.</span><span class="sxs-lookup"><span data-stu-id="1a683-115">It is not possible to step backward with a <xref:System.Messaging.MessageEnumerator>.</span></span> <span data-ttu-id="1a683-116">Курсор позволяет перемещаться только вперед.</span><span class="sxs-lookup"><span data-stu-id="1a683-116">A cursor allows forward-only movement.</span></span> <span data-ttu-id="1a683-117"><xref:System.Messaging.MessageEnumerator.Reset%2A> Метод позволяет помещать курсор назад в начало очереди.</span><span class="sxs-lookup"><span data-stu-id="1a683-117">The <xref:System.Messaging.MessageEnumerator.Reset%2A> method enables you to place the cursor back at the beginning of the queue.</span></span>  
  
 <span data-ttu-id="1a683-118">Экземпляры <xref:System.Messaging.MessageEnumerator> для данной очереди работают независимо друг от друга.</span><span class="sxs-lookup"><span data-stu-id="1a683-118">Instances of <xref:System.Messaging.MessageEnumerator> for a given queue work independently.</span></span> <span data-ttu-id="1a683-119">Можно создать два <xref:System.Messaging.MessageEnumerator> экземпляры, которые применяются к той же очереди.</span><span class="sxs-lookup"><span data-stu-id="1a683-119">You can create two <xref:System.Messaging.MessageEnumerator> instances that apply to the same queue.</span></span> <span data-ttu-id="1a683-120">Изменения один <xref:System.Messaging.MessageEnumerator> делает сообщений в очереди, будут отражены немедленно во втором перечислителе, если второй перечислитель располагается перед первым.</span><span class="sxs-lookup"><span data-stu-id="1a683-120">The changes that one <xref:System.Messaging.MessageEnumerator> makes to the messages in the queue will be reflected immediately in a second enumerator if the second enumerator is positioned before the first.</span></span> <span data-ttu-id="1a683-121">Тем не менее, если два перечислителя имеют одинаковую позицию и один из них удаляет сообщение в этой позиции, если исключение второго перечислителя предпринимает попытку получить значение <xref:System.Messaging.MessageEnumerator.Current%2A> свойства удаленного сообщения.</span><span class="sxs-lookup"><span data-stu-id="1a683-121">However, if two enumerators have the same position and one of them removes the message at that position, an exception is thrown if the other enumerator attempts to get the value of the <xref:System.Messaging.MessageEnumerator.Current%2A> property on the now-deleted message.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="1a683-122">При создании экземпляра <xref:System.Messaging.MessageQueue> с <xref:System.Messaging.MessageQueue.DenySharedReceive%2A?displayProperty=nameWithType> значение `true`, никакие другие приложения можно изменить сообщения в перечислителе, при наличии подключения к очереди.</span><span class="sxs-lookup"><span data-stu-id="1a683-122">If you create an instance of <xref:System.Messaging.MessageQueue> with <xref:System.Messaging.MessageQueue.DenySharedReceive%2A?displayProperty=nameWithType> set to `true`, no other application can modify the messages in your enumerator while you have the connection to the queue.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="1a683-123">В следующем примере возвращает динамический список сообщений в очереди и пересчет всех сообщений <xref:System.Messaging.Message.Priority%2A> свойство <xref:System.Messaging.MessagePriority.Lowest?displayProperty=nameWithType>.</span><span class="sxs-lookup"><span data-stu-id="1a683-123">The following example gets a dynamic list of messages in a queue and counts all messages with the <xref:System.Messaging.Message.Priority%2A> property set to <xref:System.Messaging.MessagePriority.Lowest?displayProperty=nameWithType>.</span></span>  
  
 [!code-cpp[MessageQueue.GetMessageEnumerator#1](~/samples/snippets/cpp/VS_Snippets_Remoting/MessageQueue.GetMessageEnumerator/CPP/mqgetmessageenumerator.cpp#1)]
 [!code-csharp[MessageQueue.GetMessageEnumerator#1](~/samples/snippets/csharp/VS_Snippets_Remoting/MessageQueue.GetMessageEnumerator/CS/mqgetmessageenumerator.cs#1)]
 [!code-vb[MessageQueue.GetMessageEnumerator#1](~/samples/snippets/visualbasic/VS_Snippets_Remoting/MessageQueue.GetMessageEnumerator/VB/mqgetmessageenumerator.vb#1)]  
  
 ]]></format>
    </remarks>
    <altmember cref="T:System.Messaging.Message" />
    <altmember cref="M:System.Messaging.MessageQueue.GetMessageEnumerator2" />
  </Docs>
  <Members>
    <Member MemberName="Close">
      <MemberSignature Language="C#" Value="public void Close ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Close() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Messaging.MessageEnumerator.Close" />
      <MemberSignature Language="VB.NET" Value="Public Sub Close ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Close();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Messaging</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="1a683-124">Освобождает ресурсы, связанные с перечислителем.</span><span class="sxs-lookup"><span data-stu-id="1a683-124">Frees the resources associated with the enumerator.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="1a683-125">Операционная система хранит открытый дескриптор очереди в течение времени существования курсора.</span><span class="sxs-lookup"><span data-stu-id="1a683-125">The operating system retains an open handle to the queue during the lifetime of the cursor.</span></span> <span data-ttu-id="1a683-126">После завершения работы с перечислителем вызовите <xref:System.Messaging.MessageEnumerator.Close%2A> для освобождения ресурсов, связанных с этим дескриптором.</span><span class="sxs-lookup"><span data-stu-id="1a683-126">When you have finished working with the enumerator, call <xref:System.Messaging.MessageEnumerator.Close%2A> to release the resources associated with the handle.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Messaging.MessageEnumerator.MoveNext" />
      </Docs>
    </Member>
    <Member MemberName="Current">
      <MemberSignature Language="C#" Value="public System.Messaging.Message Current { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Messaging.Message Current" />
      <MemberSignature Language="DocId" Value="P:System.Messaging.MessageEnumerator.Current" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Current As Message" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Messaging::Message ^ Current { System::Messaging::Message ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Messaging</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Messaging.Message</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="1a683-127">Получает текущий объект <see cref="T:System.Messaging.Message" />, на который указывает перечислитель.</span><span class="sxs-lookup"><span data-stu-id="1a683-127">Gets the current <see cref="T:System.Messaging.Message" /> that this enumerator points to.</span></span></summary>
        <value><span data-ttu-id="1a683-128">Текущее сообщение.</span><span class="sxs-lookup"><span data-stu-id="1a683-128">The current message.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="1a683-129">При создании перечислителя он указывает на заголовок очереди, в месте перед первым сообщением.</span><span class="sxs-lookup"><span data-stu-id="1a683-129">When the enumerator is created, it points to the head of the queue, at a location before the first message.</span></span> <span data-ttu-id="1a683-130">В этом случае <xref:System.Messaging.MessageEnumerator.Current%2A> не является допустимым и будет вызывать исключение, если он доступен.</span><span class="sxs-lookup"><span data-stu-id="1a683-130">In this case, <xref:System.Messaging.MessageEnumerator.Current%2A> is not valid and will throw an exception if it is accessed.</span></span> <span data-ttu-id="1a683-131">Необходимо вызвать метод <xref:System.Messaging.MessageEnumerator.MoveNext%2A> для позиционирования курсора первого сообщения в очереди.</span><span class="sxs-lookup"><span data-stu-id="1a683-131">You must call <xref:System.Messaging.MessageEnumerator.MoveNext%2A> to position the cursor at the first message in the queue.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="1a683-132">Вы вызвали <see cref="P:System.Messaging.MessageEnumerator.Current" /> до первого вызова <see cref="M:System.Messaging.MessageEnumerator.MoveNext" />.</span><span class="sxs-lookup"><span data-stu-id="1a683-132">You called <see cref="P:System.Messaging.MessageEnumerator.Current" /> before the first call to <see cref="M:System.Messaging.MessageEnumerator.MoveNext" />.</span></span> <span data-ttu-id="1a683-133">Курсор располагается перед первым элементом перечисления сообщений.</span><span class="sxs-lookup"><span data-stu-id="1a683-133">The cursor is located before the first element of the message enumeration.</span></span>  
  
 <span data-ttu-id="1a683-134">- или -</span><span class="sxs-lookup"><span data-stu-id="1a683-134">-or-</span></span>  
  
 <span data-ttu-id="1a683-135">Вы вызвали <see cref="P:System.Messaging.MessageEnumerator.Current" /> после вызова <see cref="M:System.Messaging.MessageEnumerator.MoveNext" />, вернувшего <see langword="false" /> (это указывает, что курсор расположен за последним элементом перечисления сообщений).</span><span class="sxs-lookup"><span data-stu-id="1a683-135">You called <see cref="P:System.Messaging.MessageEnumerator.Current" /> after a call to <see cref="M:System.Messaging.MessageEnumerator.MoveNext" /> had returned <see langword="false" /> (indicating the cursor is located after the last element of the message enumeration.)</span></span></exception>
        <exception cref="T:System.Messaging.MessageQueueException"><span data-ttu-id="1a683-136">Сообщение, на которое указывает перечислитель, больше не существует.</span><span class="sxs-lookup"><span data-stu-id="1a683-136">The message the enumerator is currently pointing to no longer exists.</span></span> <span data-ttu-id="1a683-137">Возможно, они были удалены.</span><span class="sxs-lookup"><span data-stu-id="1a683-137">It might have been deleted.</span></span></exception>
        <altmember cref="M:System.Messaging.MessageEnumerator.MoveNext" />
        <altmember cref="M:System.Messaging.MessageEnumerator.Reset" />
        <altmember cref="M:System.Messaging.MessageQueue.GetMessageEnumerator" />
      </Docs>
    </Member>
    <Member MemberName="CursorHandle">
      <MemberSignature Language="C#" Value="public IntPtr CursorHandle { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance native int CursorHandle" />
      <MemberSignature Language="DocId" Value="P:System.Messaging.MessageEnumerator.CursorHandle" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property CursorHandle As IntPtr" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property IntPtr CursorHandle { IntPtr get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Messaging</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IntPtr</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="1a683-138">Получает собственный дескриптор курсора Message Queuing, используемый для просмотра сообщений в очереди.</span><span class="sxs-lookup"><span data-stu-id="1a683-138">Gets the native Message Queuing cursor handle used to browse messages in the queue.</span></span></summary>
        <value><span data-ttu-id="1a683-139">Собственный дескриптор курсора.</span><span class="sxs-lookup"><span data-stu-id="1a683-139">The native cursor handle.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="1a683-140">Это свойство содержит собственный дескриптор для перечисления.</span><span class="sxs-lookup"><span data-stu-id="1a683-140">This property contains the native handle to the enumeration.</span></span> <span data-ttu-id="1a683-141">После завершения работы с перечислителем вызовите <xref:System.Messaging.MessageEnumerator.Close%2A> для освобождения этого ресурса.</span><span class="sxs-lookup"><span data-stu-id="1a683-141">When you have finished working with the enumerator, call <xref:System.Messaging.MessageEnumerator.Close%2A> to release this resource.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Messaging.MessageQueueException"><span data-ttu-id="1a683-142">Этот дескриптор не существует.</span><span class="sxs-lookup"><span data-stu-id="1a683-142">The handle does not exist.</span></span></exception>
        <altmember cref="P:System.Messaging.MessageEnumerator.Current" />
      </Docs>
    </Member>
    <MemberGroup MemberName="Dispose">
      <AssemblyInfo>
        <AssemblyName>System.Messaging</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="1a683-143">Освобождает ресурсы, используемые объектом <see cref="T:System.Messaging.MessageEnumerator" />.</span><span class="sxs-lookup"><span data-stu-id="1a683-143">Releases the resources used by the <see cref="T:System.Messaging.MessageEnumerator" />.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Dispose">
      <MemberSignature Language="C#" Value="public void Dispose ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Dispose() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Messaging.MessageEnumerator.Dispose" />
      <MemberSignature Language="VB.NET" Value="Public Sub Dispose ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void Dispose();" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.IDisposable.Dispose</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Messaging</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="1a683-144">Освобождает все ресурсы, занятые модулем <see cref="T:System.Messaging.MessageEnumerator" />.</span><span class="sxs-lookup"><span data-stu-id="1a683-144">Releases all resources used by the <see cref="T:System.Messaging.MessageEnumerator" />.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="1a683-145">Вызов <xref:System.Messaging.MessageEnumerator.Dispose%2A> позволяет ресурсы, используемые <xref:System.Messaging.MessageEnumerator> перераспределить для других целей.</span><span class="sxs-lookup"><span data-stu-id="1a683-145">Calling <xref:System.Messaging.MessageEnumerator.Dispose%2A> allows the resources used by the <xref:System.Messaging.MessageEnumerator> to be reallocated for other purposes.</span></span> <span data-ttu-id="1a683-146">Дополнительные сведения о <xref:System.Messaging.MessageEnumerator.Dispose%2A>, в разделе [очистки неуправляемых ресурсов](~/docs/standard/garbage-collection/unmanaged.md).</span><span class="sxs-lookup"><span data-stu-id="1a683-146">For more information about <xref:System.Messaging.MessageEnumerator.Dispose%2A>, see [Cleaning Up Unmanaged Resources](~/docs/standard/garbage-collection/unmanaged.md).</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Dispose">
      <MemberSignature Language="C#" Value="protected virtual void Dispose (bool disposing);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void Dispose(bool disposing) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Messaging.MessageEnumerator.Dispose(System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub Dispose (disposing As Boolean)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void Dispose(bool disposing);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Messaging</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="disposing" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="disposing">
          <span data-ttu-id="1a683-147">Значение <see langword="true" /> позволяет освободить как управляемые, так и неуправляемые ресурсы; значение <see langword="false" /> освобождает только неуправляемые ресурсы.</span><span class="sxs-lookup"><span data-stu-id="1a683-147"><see langword="true" /> to release both managed and unmanaged resources; <see langword="false" /> to release only unmanaged resources.</span></span></param>
        <summary><span data-ttu-id="1a683-148">Освобождает неуправляемые ресурсы, используемые объектом <see cref="T:System.Messaging.MessageEnumerator" />, а при необходимости освобождает также управляемые ресурсы.</span><span class="sxs-lookup"><span data-stu-id="1a683-148">Releases the unmanaged resources used by the <see cref="T:System.Messaging.MessageEnumerator" /> and optionally releases the managed resources.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="1a683-149">Этот метод вызывается методом открытые <xref:System.Messaging.MessageEnumerator.Dispose%2A> метод и <xref:System.Object.Finalize%2A> метод.</span><span class="sxs-lookup"><span data-stu-id="1a683-149">This method is called by the public <xref:System.Messaging.MessageEnumerator.Dispose%2A> method and the <xref:System.Object.Finalize%2A> method.</span></span> <span data-ttu-id="1a683-150">`Dispose()` вызывает защищенный `Dispose(Boolean)` метод с `disposing` равным `true`.</span><span class="sxs-lookup"><span data-stu-id="1a683-150">`Dispose()` invokes the protected `Dispose(Boolean)` method with the `disposing` parameter set to `true`.</span></span> <span data-ttu-id="1a683-151"><xref:System.Object.Finalize%2A> вызывает `Dispose` с `disposing` значение `false`.</span><span class="sxs-lookup"><span data-stu-id="1a683-151"><xref:System.Object.Finalize%2A> invokes `Dispose` with `disposing` set to `false`.</span></span>  
  
 <span data-ttu-id="1a683-152">Если параметр `disposing` имеет значение `true`, то данный метод освобождает все ресурсы, занятые любыми управляемыми объектами, на которые ссылается этот объект <xref:System.Messaging.MessageEnumerator>.</span><span class="sxs-lookup"><span data-stu-id="1a683-152">When the `disposing` parameter is `true`, this method releases all resources held by any managed objects that this <xref:System.Messaging.MessageEnumerator> references.</span></span> <span data-ttu-id="1a683-153">Этот метод вызывает метод `Dispose()` каждого объекта, на который есть ссылка.</span><span class="sxs-lookup"><span data-stu-id="1a683-153">This method invokes the `Dispose()` method of each referenced object.</span></span>  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides">
          <para>
            <span data-ttu-id="1a683-154">Метод <see langword="Dispose" /> может вызываться несколько раз другими объектами.</span><span class="sxs-lookup"><span data-stu-id="1a683-154"><see langword="Dispose" /> can be called multiple times by other objects.</span></span> <span data-ttu-id="1a683-155">При переопределении метода <see langword="Dispose(Boolean)" /> нужно избегать ссылок на объекты, которые были уничтожены предыдущими вызовами метода <see langword="Dispose" />.</span><span class="sxs-lookup"><span data-stu-id="1a683-155">When overriding <see langword="Dispose(Boolean)" />, be careful not to reference objects that have been previously disposed of in an earlier call to <see langword="Dispose" />.</span></span> <span data-ttu-id="1a683-156">Дополнительные сведения о реализации <see langword="Dispose" />, в разделе [метода](~/docs/standard/garbage-collection/implementing-dispose.md).</span><span class="sxs-lookup"><span data-stu-id="1a683-156">For more information about how to implement <see langword="Dispose" />, see [Implementing a Dispose Method](~/docs/standard/garbage-collection/implementing-dispose.md).</span></span>  
  
 <span data-ttu-id="1a683-157">Дополнительные сведения о <see langword="Dispose" /> и <see langword="Finalize" />, в разделе [очистки неуправляемых ресурсов](~/docs/standard/garbage-collection/unmanaged.md) и [переопределение метода Finalize](http://msdn.microsoft.com/library/8026cb68-fe93-43fc-96c1-c09ad7d64cd3).</span><span class="sxs-lookup"><span data-stu-id="1a683-157">For more information about <see langword="Dispose" /> and <see langword="Finalize" />, see [Cleaning Up Unmanaged Resources](~/docs/standard/garbage-collection/unmanaged.md) and [Overriding the Finalize Method](http://msdn.microsoft.com/library/8026cb68-fe93-43fc-96c1-c09ad7d64cd3).</span></span></para>
        </block>
      </Docs>
    </Member>
    <Member MemberName="Finalize">
      <MemberSignature Language="C#" Value="~MessageEnumerator ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance void Finalize() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Messaging.MessageEnumerator.Finalize" />
      <MemberSignature Language="VB.NET" Value="Finalize ()" />
      <MemberSignature Language="C++ CLI" Value="!MessageEnumerator ()" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Messaging</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="MoveNext">
      <AssemblyInfo>
        <AssemblyName>System.Messaging</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="1a683-158">Перемещает перечислитель на следующее сообщение в очереди.</span><span class="sxs-lookup"><span data-stu-id="1a683-158">Advances the enumerator to the next message in the queue.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="MoveNext">
      <MemberSignature Language="C#" Value="public bool MoveNext ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool MoveNext() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Messaging.MessageEnumerator.MoveNext" />
      <MemberSignature Language="VB.NET" Value="Public Function MoveNext () As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual bool MoveNext();" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Collections.IEnumerator.MoveNext</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Messaging</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="1a683-159">Перемещает перечислитель на следующее сообщение в очереди, если таковое в данный момент имеется.</span><span class="sxs-lookup"><span data-stu-id="1a683-159">Advances the enumerator to the next message in the queue, if one is currently available.</span></span></summary>
        <returns>
          <span data-ttu-id="1a683-160">Значение <see langword="true" />, если перечислитель был успешно перемещен на следующее сообщение; значение <see langword="false" />, если перечислитель достиг конца очереди. </span><span class="sxs-lookup"><span data-stu-id="1a683-160"><see langword="true" /> if the enumerator was succesfully advanced to the next message; <see langword="false" /> if the enumerator has reached the end of the queue.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="1a683-161">Эта перегрузка возвращает немедленно, если нет никаких сообщений в очереди.</span><span class="sxs-lookup"><span data-stu-id="1a683-161">This overload returns immediately if there is no message in the queue.</span></span> <span data-ttu-id="1a683-162">Имеется другая перегрузка, ожидающая указанного <xref:System.TimeSpan> для прихода сообщения.</span><span class="sxs-lookup"><span data-stu-id="1a683-162">There is another overload that waits a specified <xref:System.TimeSpan> for a message to arrive.</span></span>  
  
 <span data-ttu-id="1a683-163">Если сообщение не в настоящее время недоступно, так как очередь пуста или перемещения после последнего элемента в коллекции, <xref:System.Messaging.MessageEnumerator.MoveNext%2A> возвращает `false` вызывающему методу.</span><span class="sxs-lookup"><span data-stu-id="1a683-163">If a message is not currently available because the queue is empty or because you have moved beyond the last element in the collection, <xref:System.Messaging.MessageEnumerator.MoveNext%2A> returns `false` to the calling method.</span></span>  
  
 <span data-ttu-id="1a683-164">После создания перечислитель располагается перед первого сообщения очереди и первый вызов <xref:System.Messaging.MessageEnumerator.MoveNext%2A> приводит первого сообщения очереди в представлении.</span><span class="sxs-lookup"><span data-stu-id="1a683-164">Upon creation, an enumerator is conceptually positioned before the first message of the queue, and the first call to <xref:System.Messaging.MessageEnumerator.MoveNext%2A> brings the first message of the queue into view.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Messaging.MessageQueueException"><span data-ttu-id="1a683-165">Возникло исключение, характерное для Message Queuing.</span><span class="sxs-lookup"><span data-stu-id="1a683-165">An exception specific to Message Queuing was thrown.</span></span></exception>
        <altmember cref="P:System.Messaging.MessageEnumerator.Current" />
        <altmember cref="M:System.Messaging.MessageEnumerator.Reset" />
        <altmember cref="T:System.Messaging.Message" />
      </Docs>
    </Member>
    <Member MemberName="MoveNext">
      <MemberSignature Language="C#" Value="public bool MoveNext (TimeSpan timeout);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool MoveNext(valuetype System.TimeSpan timeout) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Messaging.MessageEnumerator.MoveNext(System.TimeSpan)" />
      <MemberSignature Language="VB.NET" Value="Public Function MoveNext (timeout As TimeSpan) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool MoveNext(TimeSpan timeout);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Messaging</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="timeout" Type="System.TimeSpan" />
      </Parameters>
      <Docs>
        <param name="timeout"><span data-ttu-id="1a683-166">Время <see cref="T:System.TimeSpan" /> на ожидание сообщения в случае, когда перечислитель устанавливается в конец очереди.</span><span class="sxs-lookup"><span data-stu-id="1a683-166">The <see cref="T:System.TimeSpan" /> to wait for a message to be available if the enumerator is positioned at the end of the queue.</span></span></param>
        <summary><span data-ttu-id="1a683-167">Перемещает перечислитель на следующее сообщение в очереди.</span><span class="sxs-lookup"><span data-stu-id="1a683-167">Advances the enumerator to the next message in the queue.</span></span> <span data-ttu-id="1a683-168">Если перечислитель установлен в конец очереди, метод <see cref="M:System.Messaging.MessageEnumerator.MoveNext" /> ожидает до тех пор, пока не появится сообщение или же не истечет заданный тайм-аут.</span><span class="sxs-lookup"><span data-stu-id="1a683-168">If the enumerator is positioned at the end of the queue, <see cref="M:System.Messaging.MessageEnumerator.MoveNext" /> waits until a message is available or the given timeout expires.</span></span></summary>
        <returns>
          <span data-ttu-id="1a683-169">Значение <see langword="true" />, если перечислитель успешно переместился на следующее сообщение; значение <see langword="false" />, если перечислитель достиг конца очереди, и не появилось новое сообщение в течение времени, заданного параметром <paramref name="timeout" />.</span><span class="sxs-lookup"><span data-stu-id="1a683-169"><see langword="true" /> if the enumerator successfully advanced to the next message; <see langword="false" /> if the enumerator has reached the end of the queue and a message does not become available within the time specified by the <paramref name="timeout" /> parameter.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="1a683-170">Эта перегрузка ожидает, если в очереди отсутствуют сообщения, или если курсор достиг конца очереди.</span><span class="sxs-lookup"><span data-stu-id="1a683-170">This overload waits if there is no message in the queue or if the cursor has reached the end of the queue.</span></span> <span data-ttu-id="1a683-171">Если сообщение не в настоящее время недоступно, так как очередь пуста или перемещения после последнего элемента в коллекции, <xref:System.Messaging.MessageEnumerator.MoveNext%2A> ожидает заданное время ожидания.</span><span class="sxs-lookup"><span data-stu-id="1a683-171">If a message is not currently available because the queue is empty or because you have moved beyond the last element in the collection, <xref:System.Messaging.MessageEnumerator.MoveNext%2A> waits the specified timeout.</span></span>  
  
 <span data-ttu-id="1a683-172">Если курсор уже находится в конце очереди, <xref:System.Messaging.MessageEnumerator.MoveNext%2A> возвращает только `true` при получении нового сообщения в течение указанного интервала времени, в настоящее время имеет более низкий приоритет, чем все сообщения в очереди и помещается в конец очереди.</span><span class="sxs-lookup"><span data-stu-id="1a683-172">If the cursor is already at the end of the queue, <xref:System.Messaging.MessageEnumerator.MoveNext%2A> only returns `true` if the new message arrives within the specified time interval, has lower priority than all messages currently in the queue and is placed at the end of the queue.</span></span> <span data-ttu-id="1a683-173">Перегрузка без параметра возвращает немедленно, если больше нет сообщений в очереди.</span><span class="sxs-lookup"><span data-stu-id="1a683-173">An overload with no parameter returns immediately if no further messages are in the queue.</span></span>  
  
 <span data-ttu-id="1a683-174">После создания перечислитель располагается перед первым сообщением перечисления и первый вызов <xref:System.Messaging.MessageEnumerator.MoveNext%2A> помещает первое сообщение перечисления в представление.</span><span class="sxs-lookup"><span data-stu-id="1a683-174">Upon creation, an enumerator is conceptually positioned before the first message of the enumeration, and the first call to <xref:System.Messaging.MessageEnumerator.MoveNext%2A> brings the first message of the enumeration into view.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="1a683-175">Для параметра timeout задано недопустимое значение.</span><span class="sxs-lookup"><span data-stu-id="1a683-175">The value specified for the timeout parameter is invalid.</span></span> <span data-ttu-id="1a683-176">Возможно, это отрицательное число.</span><span class="sxs-lookup"><span data-stu-id="1a683-176">It might represent a negative number.</span></span></exception>
        <exception cref="T:System.Messaging.MessageQueueException"><span data-ttu-id="1a683-177">Возникло исключение, характерное для Message Queuing.</span><span class="sxs-lookup"><span data-stu-id="1a683-177">An exception specific to Message Queuing was thrown.</span></span>  
  
 <span data-ttu-id="1a683-178">- или -</span><span class="sxs-lookup"><span data-stu-id="1a683-178">-or-</span></span>  
  
 <span data-ttu-id="1a683-179">Истекло время тайм-аута.</span><span class="sxs-lookup"><span data-stu-id="1a683-179">The timeout has expired.</span></span></exception>
        <altmember cref="P:System.Messaging.MessageEnumerator.Current" />
        <altmember cref="M:System.Messaging.MessageEnumerator.Reset" />
        <altmember cref="T:System.Messaging.Message" />
      </Docs>
    </Member>
    <MemberGroup MemberName="RemoveCurrent">
      <AssemblyInfo>
        <AssemblyName>System.Messaging</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="1a683-180">Удаляет текущее сообщение из очереди и возвращает сообщение в вызывающее приложение.</span><span class="sxs-lookup"><span data-stu-id="1a683-180">Removes the current message from the queue and returns the message to the calling application.</span></span> <span data-ttu-id="1a683-181">При удалении сообщения оно стирается из очереди.</span><span class="sxs-lookup"><span data-stu-id="1a683-181">Removing the message deletes it from the queue.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="1a683-182">Поведение, описанное для этих перегрузок применяется только тогда, когда <xref:System.Messaging.MessageEnumerator> экземпляр извлекается с помощью <xref:System.Messaging.MessageQueue.GetMessageEnumerator2%2A>.</span><span class="sxs-lookup"><span data-stu-id="1a683-182">The behavior described for these overloads is applicable only if the <xref:System.Messaging.MessageEnumerator> instance is retrieved by using the <xref:System.Messaging.MessageQueue.GetMessageEnumerator2%2A>.</span></span> <span data-ttu-id="1a683-183">Не используйте <xref:System.Messaging.MessageQueue.GetMessageEnumerator%2A> для получения экземпляра <xref:System.Messaging.MessageEnumerator> как этот метод является устаревшим.</span><span class="sxs-lookup"><span data-stu-id="1a683-183">Do not use <xref:System.Messaging.MessageQueue.GetMessageEnumerator%2A> to retrieve an instance of <xref:System.Messaging.MessageEnumerator> as this method has been deprecated.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </MemberGroup>
    <Member MemberName="RemoveCurrent">
      <MemberSignature Language="C#" Value="public System.Messaging.Message RemoveCurrent ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Messaging.Message RemoveCurrent() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Messaging.MessageEnumerator.RemoveCurrent" />
      <MemberSignature Language="VB.NET" Value="Public Function RemoveCurrent () As Message" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Messaging::Message ^ RemoveCurrent();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Messaging</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Messaging.Message</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="1a683-184">Удаляет текущее сообщение из транзакционной или нетранзакционной очереди и возвращает сообщение в вызывающее приложение.</span><span class="sxs-lookup"><span data-stu-id="1a683-184">Removes the current message from a transactional or non-transactional queue and returns the message to the calling application.</span></span> <span data-ttu-id="1a683-185">Не указано время тайм-аута для прибытия сообщения в очередь.</span><span class="sxs-lookup"><span data-stu-id="1a683-185">There is no timeout specified for a message to arrive in the queue.</span></span></summary>
        <returns><span data-ttu-id="1a683-186">Объект <see cref="T:System.Messaging.Message" />, ссылающийся на первое доступное в очереди сообщение.</span><span class="sxs-lookup"><span data-stu-id="1a683-186">A <see cref="T:System.Messaging.Message" /> that references the first message available in the queue.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="1a683-187"><xref:System.Messaging.MessageEnumerator.RemoveCurrent%2A> Удаляет и возвращает сообщение в текущем положении курсора.</span><span class="sxs-lookup"><span data-stu-id="1a683-187"><xref:System.Messaging.MessageEnumerator.RemoveCurrent%2A> removes and returns the message at the cursor's current location.</span></span>  
  
 <span data-ttu-id="1a683-188">При использовании журнала очереди удаление сообщения приводит к копии должны храниться в очереди журнала, так же как и <xref:System.Messaging.MessageQueue> класса <xref:System.Messaging.MessageQueue.Receive%2A> метода.</span><span class="sxs-lookup"><span data-stu-id="1a683-188">If you are using queue journaling, removing the message causes a copy to be kept in the journal queue, just as the <xref:System.Messaging.MessageQueue> class's <xref:System.Messaging.MessageQueue.Receive%2A> method does.</span></span>  
  
 <span data-ttu-id="1a683-189">При удалении текущего сообщения курсор перемещается к следующему сообщению.</span><span class="sxs-lookup"><span data-stu-id="1a683-189">When you remove the current message, the cursor is moved to the next message.</span></span> <span data-ttu-id="1a683-190">Нет необходимости вызывать <xref:System.Messaging.MessageEnumerator.MoveNext%2A> после вызова <xref:System.Messaging.MessageEnumerator.RemoveCurrent%2A>.</span><span class="sxs-lookup"><span data-stu-id="1a683-190">You do not have to call <xref:System.Messaging.MessageEnumerator.MoveNext%2A> after calling <xref:System.Messaging.MessageEnumerator.RemoveCurrent%2A>.</span></span>  
  
 <span data-ttu-id="1a683-191">При вызове этой перегрузки в транзакционной очереди, Message Queuing создает одну внутреннюю транзакцию.</span><span class="sxs-lookup"><span data-stu-id="1a683-191">If you call this overload on a transactional queue, Message Queuing creates a single internal transaction.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Messaging.MessageEnumerator.MoveNext" />
        <altmember cref="P:System.Messaging.MessageEnumerator.Current" />
      </Docs>
    </Member>
    <Member MemberName="RemoveCurrent">
      <MemberSignature Language="C#" Value="public System.Messaging.Message RemoveCurrent (System.Messaging.MessageQueueTransaction transaction);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Messaging.Message RemoveCurrent(class System.Messaging.MessageQueueTransaction transaction) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Messaging.MessageEnumerator.RemoveCurrent(System.Messaging.MessageQueueTransaction)" />
      <MemberSignature Language="VB.NET" Value="Public Function RemoveCurrent (transaction As MessageQueueTransaction) As Message" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Messaging::Message ^ RemoveCurrent(System::Messaging::MessageQueueTransaction ^ transaction);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Messaging</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Messaging.Message</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="transaction" Type="System.Messaging.MessageQueueTransaction" />
      </Parameters>
      <Docs>
        <param name="transaction"><span data-ttu-id="1a683-192">Объект <see cref="T:System.Messaging.MessageQueueTransaction" />, задающий транзакцию, в которой будет удалено сообщение.</span><span class="sxs-lookup"><span data-stu-id="1a683-192">The <see cref="T:System.Messaging.MessageQueueTransaction" /> object that specifies the transaction in which the message will be removed.</span></span></param>
        <summary><span data-ttu-id="1a683-193">Удаляет текущее сообщение из транзакционной очереди и возвращает сообщение в вызывающее приложение.</span><span class="sxs-lookup"><span data-stu-id="1a683-193">Removes the current message from a transactional queue and returns the message to the calling application.</span></span> <span data-ttu-id="1a683-194">Не указано время тайм-аута для прибытия сообщения в очередь.</span><span class="sxs-lookup"><span data-stu-id="1a683-194">There is no timeout specified for a message to arrive in the queue.</span></span></summary>
        <returns><span data-ttu-id="1a683-195">Объект <see cref="T:System.Messaging.Message" />, ссылающийся на первое доступное в очереди сообщение.</span><span class="sxs-lookup"><span data-stu-id="1a683-195">A <see cref="T:System.Messaging.Message" /> that references the first message available in the queue.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="1a683-196"><xref:System.Messaging.MessageEnumerator.RemoveCurrent%2A> Удаляет и возвращает сообщение в текущем положении курсора, используя внутреннюю транзакцию контекст, определяемый параметром `transaction` параметр.</span><span class="sxs-lookup"><span data-stu-id="1a683-196"><xref:System.Messaging.MessageEnumerator.RemoveCurrent%2A> removes and returns the message at the cursor's current location, using the internal transaction context defined by the `transaction` parameter.</span></span>  
  
 <span data-ttu-id="1a683-197">При использовании журнала очереди удаление сообщения приводит к копии должны храниться в очереди журнала, так же как и <xref:System.Messaging.MessageQueue> класса <xref:System.Messaging.MessageQueue.Receive%2A> метода.</span><span class="sxs-lookup"><span data-stu-id="1a683-197">If you are using queue journaling, removing the message causes a copy to be kept in the journal queue, just as the <xref:System.Messaging.MessageQueue> class's <xref:System.Messaging.MessageQueue.Receive%2A> method does.</span></span>  
  
 <span data-ttu-id="1a683-198">При работе с очередями транзакций, откат транзакции вызывает любые сообщения, удаленные с помощью вызова <xref:System.Messaging.MessageEnumerator.RemoveCurrent%2A> возвращается в очередь.</span><span class="sxs-lookup"><span data-stu-id="1a683-198">When working with transactional queues, a rollback of a transaction causes any messages removed by a call to <xref:System.Messaging.MessageEnumerator.RemoveCurrent%2A> to be returned to the queue.</span></span> <span data-ttu-id="1a683-199">Удаление не является необратимым до фиксации транзакции.</span><span class="sxs-lookup"><span data-stu-id="1a683-199">The removal is not irreversible until the transaction is committed.</span></span>  
  
 <span data-ttu-id="1a683-200">При удалении текущего сообщения курсор перемещается к следующему сообщению.</span><span class="sxs-lookup"><span data-stu-id="1a683-200">When you remove the current message, the cursor is moved to the next message.</span></span> <span data-ttu-id="1a683-201">Нет необходимости вызывать <xref:System.Messaging.MessageEnumerator.MoveNext%2A> после вызова <xref:System.Messaging.MessageEnumerator.RemoveCurrent%2A>.</span><span class="sxs-lookup"><span data-stu-id="1a683-201">You do not have to call <xref:System.Messaging.MessageEnumerator.MoveNext%2A> after calling <xref:System.Messaging.MessageEnumerator.RemoveCurrent%2A>.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="1a683-202">Параметр <paramref name="transaction" /> имеет значение <see langword="null" />.</span><span class="sxs-lookup"><span data-stu-id="1a683-202">The <paramref name="transaction" /> parameter is <see langword="null" />.</span></span></exception>
        <altmember cref="M:System.Messaging.MessageEnumerator.MoveNext" />
        <altmember cref="P:System.Messaging.MessageEnumerator.Current" />
        <altmember cref="T:System.Messaging.MessageQueueTransaction" />
      </Docs>
    </Member>
    <Member MemberName="RemoveCurrent">
      <MemberSignature Language="C#" Value="public System.Messaging.Message RemoveCurrent (System.Messaging.MessageQueueTransactionType transactionType);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Messaging.Message RemoveCurrent(valuetype System.Messaging.MessageQueueTransactionType transactionType) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Messaging.MessageEnumerator.RemoveCurrent(System.Messaging.MessageQueueTransactionType)" />
      <MemberSignature Language="VB.NET" Value="Public Function RemoveCurrent (transactionType As MessageQueueTransactionType) As Message" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Messaging::Message ^ RemoveCurrent(System::Messaging::MessageQueueTransactionType transactionType);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Messaging</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Messaging.Message</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="transactionType" Type="System.Messaging.MessageQueueTransactionType" />
      </Parameters>
      <Docs>
        <param name="transactionType"><span data-ttu-id="1a683-203">Одно из значений <see cref="T:System.Messaging.MessageQueueTransactionType" />, описывающее тип контекста транзакции, связываемого с сообщением.</span><span class="sxs-lookup"><span data-stu-id="1a683-203">One of the <see cref="T:System.Messaging.MessageQueueTransactionType" /> values, describing the type of transaction context to associate with the message.</span></span></param>
        <summary><span data-ttu-id="1a683-204">Удаляет текущее сообщение из очереди и возвращает сообщение в вызывающее приложение.</span><span class="sxs-lookup"><span data-stu-id="1a683-204">Removes the current message from a queue and returns the message to the calling application.</span></span> <span data-ttu-id="1a683-205">Не указано время тайм-аута для прибытия сообщения в очередь.</span><span class="sxs-lookup"><span data-stu-id="1a683-205">There is no timeout specified for a message to arrive in the queue.</span></span></summary>
        <returns><span data-ttu-id="1a683-206">Объект <see cref="T:System.Messaging.Message" />, ссылающийся на первое доступное в очереди сообщение.</span><span class="sxs-lookup"><span data-stu-id="1a683-206">A <see cref="T:System.Messaging.Message" /> that references the first message available in the queue.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="1a683-207"><xref:System.Messaging.MessageEnumerator.RemoveCurrent%2A> Удаляет и возвращает сообщение в текущем положении курсора, используя контекст транзакции, определяемый параметром `transactionType` параметр.</span><span class="sxs-lookup"><span data-stu-id="1a683-207"><xref:System.Messaging.MessageEnumerator.RemoveCurrent%2A> removes and returns the message at the cursor's current location, using a transaction context defined by the `transactionType` parameter.</span></span>  
  
 <span data-ttu-id="1a683-208">Укажите `Automatic` для `transactionType` параметра, если он уже существует внешний контекст транзакции, присоединенного к потоку, который вы хотите использовать для получения сообщения.</span><span class="sxs-lookup"><span data-stu-id="1a683-208">Specify `Automatic` for the `transactionType` parameter if there is already an external transaction context attached to the thread that you want to use to receive the message.</span></span> <span data-ttu-id="1a683-209">Укажите `Single` Если вы хотите получить сообщение в виде единой внутренней транзакции.</span><span class="sxs-lookup"><span data-stu-id="1a683-209">Specify `Single` if you want to receive the message as a single internal transaction.</span></span> <span data-ttu-id="1a683-210">Можно указать `None` Если вы хотите получать сообщения из транзакционной очереди вне контекста транзакции.</span><span class="sxs-lookup"><span data-stu-id="1a683-210">You can specify `None` if you want to receive a message from a transactional queue outside of a transaction context.</span></span>  
  
 <span data-ttu-id="1a683-211">При использовании журнала очереди удаление сообщения приводит к копии должны храниться в очереди журнала, так же как и <xref:System.Messaging.MessageQueue> класса <xref:System.Messaging.MessageQueue.Receive%2A> метода.</span><span class="sxs-lookup"><span data-stu-id="1a683-211">If you are using queue journaling, removing the message causes a copy to be kept in the journal queue, just as the <xref:System.Messaging.MessageQueue> class's <xref:System.Messaging.MessageQueue.Receive%2A> method does.</span></span>  
  
 <span data-ttu-id="1a683-212">При работе с очередями транзакций, откат транзакции вызывает любые сообщения, удаленные с помощью вызова <xref:System.Messaging.MessageEnumerator.RemoveCurrent%2A> возвращается в очередь.</span><span class="sxs-lookup"><span data-stu-id="1a683-212">When working with transactional queues, a rollback of a transaction causes any messages removed by a call to <xref:System.Messaging.MessageEnumerator.RemoveCurrent%2A> to be returned to the queue.</span></span> <span data-ttu-id="1a683-213">Удаление не является необратимым до фиксации транзакции.</span><span class="sxs-lookup"><span data-stu-id="1a683-213">The removal is not irreversible until the transaction is committed.</span></span>  
  
 <span data-ttu-id="1a683-214">При удалении текущего сообщения курсор перемещается к следующему сообщению.</span><span class="sxs-lookup"><span data-stu-id="1a683-214">When you remove the current message, the cursor is moved to the next message.</span></span> <span data-ttu-id="1a683-215">Нет необходимости вызывать <xref:System.Messaging.MessageEnumerator.MoveNext%2A> после вызова <xref:System.Messaging.MessageEnumerator.RemoveCurrent%2A>.</span><span class="sxs-lookup"><span data-stu-id="1a683-215">You do not have to call <xref:System.Messaging.MessageEnumerator.MoveNext%2A> after calling <xref:System.Messaging.MessageEnumerator.RemoveCurrent%2A>.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ComponentModel.InvalidEnumArgumentException"><span data-ttu-id="1a683-216">Параметр <paramref name="transactionType" /> не является одним из членов <see cref="T:System.Messaging.MessageQueueTransactionType" />.</span><span class="sxs-lookup"><span data-stu-id="1a683-216">The <paramref name="transactionType" /> parameter is not one of the <see cref="T:System.Messaging.MessageQueueTransactionType" /> members.</span></span></exception>
        <altmember cref="M:System.Messaging.MessageEnumerator.MoveNext" />
        <altmember cref="P:System.Messaging.MessageEnumerator.Current" />
        <altmember cref="T:System.Messaging.MessageQueueTransactionType" />
      </Docs>
    </Member>
    <Member MemberName="RemoveCurrent">
      <MemberSignature Language="C#" Value="public System.Messaging.Message RemoveCurrent (TimeSpan timeout);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Messaging.Message RemoveCurrent(valuetype System.TimeSpan timeout) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Messaging.MessageEnumerator.RemoveCurrent(System.TimeSpan)" />
      <MemberSignature Language="VB.NET" Value="Public Function RemoveCurrent (timeout As TimeSpan) As Message" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Messaging::Message ^ RemoveCurrent(TimeSpan timeout);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Messaging</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Messaging.Message</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="timeout" Type="System.TimeSpan" />
      </Parameters>
      <Docs>
        <param name="timeout"><span data-ttu-id="1a683-217">Интервал времени ожидания прихода сообщения в очередь.</span><span class="sxs-lookup"><span data-stu-id="1a683-217">The interval of time to wait for a message to arrive in the queue.</span></span></param>
        <summary><span data-ttu-id="1a683-218">Удаляет текущее сообщение из очереди и возвращает сообщение в вызывающее приложение.</span><span class="sxs-lookup"><span data-stu-id="1a683-218">Removes the current message from the queue and returns the message to the calling application.</span></span> <span data-ttu-id="1a683-219">Если имеется сообщение для удаления, этот метод возвращает его немедленно.</span><span class="sxs-lookup"><span data-stu-id="1a683-219">If there is a message to remove, the method returns it immediately.</span></span> <span data-ttu-id="1a683-220">В противном случае метод ожидает прихода нового сообщения в течение заданного времени тайм-аута.</span><span class="sxs-lookup"><span data-stu-id="1a683-220">Otherwise, the method waits the specified timeout for a new message to arrive.</span></span></summary>
        <returns><span data-ttu-id="1a683-221">Объект <see cref="T:System.Messaging.Message" />, ссылающийся на первое доступное в очереди сообщение.</span><span class="sxs-lookup"><span data-stu-id="1a683-221">A <see cref="T:System.Messaging.Message" /> that references the first message available in the queue.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="1a683-222"><xref:System.Messaging.MessageEnumerator.RemoveCurrent%2A> Удаляет и возвращает сообщение в текущем положении курсора.</span><span class="sxs-lookup"><span data-stu-id="1a683-222"><xref:System.Messaging.MessageEnumerator.RemoveCurrent%2A> removes and returns the message at the cursor's current location.</span></span> <span data-ttu-id="1a683-223">Если курсор находится в конце очереди, эта перегрузка метода ожидает, пока сообщение не станет доступным или время, заданное параметром `timeout` истечет.</span><span class="sxs-lookup"><span data-stu-id="1a683-223">If the cursor is at the end of the queue, this overload of the method waits until a message is available or the interval specified by the `timeout` parameter has expired.</span></span>  
  
 <span data-ttu-id="1a683-224">При использовании журнала очереди удаление сообщения приводит к копии должны храниться в очереди журнала, так же как и <xref:System.Messaging.MessageQueue> класса <xref:System.Messaging.MessageQueue.Receive%2A> метода.</span><span class="sxs-lookup"><span data-stu-id="1a683-224">If you are using queue journaling, removing the message causes a copy to be kept in the journal queue, just as the <xref:System.Messaging.MessageQueue> class's <xref:System.Messaging.MessageQueue.Receive%2A> method does.</span></span>  
  
 <span data-ttu-id="1a683-225">При удалении текущего сообщения курсор перемещается к следующему сообщению.</span><span class="sxs-lookup"><span data-stu-id="1a683-225">When you remove the current message, the cursor is moved to the next message.</span></span> <span data-ttu-id="1a683-226">Нет необходимости вызывать <xref:System.Messaging.MessageEnumerator.MoveNext%2A> после вызова <xref:System.Messaging.MessageEnumerator.RemoveCurrent%2A>.</span><span class="sxs-lookup"><span data-stu-id="1a683-226">You do not have to call <xref:System.Messaging.MessageEnumerator.MoveNext%2A> after calling <xref:System.Messaging.MessageEnumerator.RemoveCurrent%2A>.</span></span>  
  
 <span data-ttu-id="1a683-227">При вызове этой перегрузки в транзакционной очереди, Message Queuing создает одну внутреннюю транзакцию.</span><span class="sxs-lookup"><span data-stu-id="1a683-227">If you call this overload on a transactional queue, Message Queuing creates a single internal transaction.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="1a683-228">Для параметра <paramref name="timeout" /> задано недопустимое значение.</span><span class="sxs-lookup"><span data-stu-id="1a683-228">The value specified for the <paramref name="timeout" /> parameter is invalid.</span></span></exception>
        <exception cref="T:System.Messaging.MessageQueueException"><span data-ttu-id="1a683-229">Истекло время тайм-аута.</span><span class="sxs-lookup"><span data-stu-id="1a683-229">The timeout has expired.</span></span></exception>
        <altmember cref="M:System.Messaging.MessageEnumerator.MoveNext" />
        <altmember cref="P:System.Messaging.MessageEnumerator.Current" />
      </Docs>
    </Member>
    <Member MemberName="RemoveCurrent">
      <MemberSignature Language="C#" Value="public System.Messaging.Message RemoveCurrent (TimeSpan timeout, System.Messaging.MessageQueueTransaction transaction);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Messaging.Message RemoveCurrent(valuetype System.TimeSpan timeout, class System.Messaging.MessageQueueTransaction transaction) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Messaging.MessageEnumerator.RemoveCurrent(System.TimeSpan,System.Messaging.MessageQueueTransaction)" />
      <MemberSignature Language="VB.NET" Value="Public Function RemoveCurrent (timeout As TimeSpan, transaction As MessageQueueTransaction) As Message" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Messaging::Message ^ RemoveCurrent(TimeSpan timeout, System::Messaging::MessageQueueTransaction ^ transaction);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Messaging</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Messaging.Message</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="timeout" Type="System.TimeSpan" />
        <Parameter Name="transaction" Type="System.Messaging.MessageQueueTransaction" />
      </Parameters>
      <Docs>
        <param name="timeout"><span data-ttu-id="1a683-230">Интервал времени ожидания удаления сообщения.</span><span class="sxs-lookup"><span data-stu-id="1a683-230">The interval of time to wait for the message to be removed.</span></span></param>
        <param name="transaction"><span data-ttu-id="1a683-231">Объект <see cref="T:System.Messaging.MessageQueueTransaction" />, задающий контекст транзакции для сообщения.</span><span class="sxs-lookup"><span data-stu-id="1a683-231">The <see cref="T:System.Messaging.MessageQueueTransaction" /> object that specifies the transaction context for the message.</span></span></param>
        <summary><span data-ttu-id="1a683-232">Удаляет текущее сообщение из транзакционной очереди и возвращает сообщение в вызывающее приложение.</span><span class="sxs-lookup"><span data-stu-id="1a683-232">Removes the current message from a transactional queue and returns the message to the calling application.</span></span> <span data-ttu-id="1a683-233">Если имеется сообщение для удаления, этот метод возвращает его немедленно.</span><span class="sxs-lookup"><span data-stu-id="1a683-233">If there is a message to remove, the method returns it immediately.</span></span> <span data-ttu-id="1a683-234">В противном случае метод ожидает прихода нового сообщения в течение заданного времени тайм-аута.</span><span class="sxs-lookup"><span data-stu-id="1a683-234">Otherwise, the method waits the specified timeout for a new message to arrive.</span></span></summary>
        <returns><span data-ttu-id="1a683-235">Объект <see cref="T:System.Messaging.Message" />, ссылающийся на первое доступное в очереди сообщение.</span><span class="sxs-lookup"><span data-stu-id="1a683-235">A <see cref="T:System.Messaging.Message" /> that references the first message available in the queue.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="1a683-236"><xref:System.Messaging.MessageEnumerator.RemoveCurrent%2A> Удаляет и возвращает сообщение в текущем положении курсора.</span><span class="sxs-lookup"><span data-stu-id="1a683-236"><xref:System.Messaging.MessageEnumerator.RemoveCurrent%2A> removes and returns the message at the cursor's current location.</span></span> <span data-ttu-id="1a683-237">Если курсор находится в конце очереди, эта перегрузка метода ожидает, пока сообщение не станет доступным или время, заданное параметром `timeout` истечет.</span><span class="sxs-lookup"><span data-stu-id="1a683-237">If the cursor is at the end of the queue, this overload of the method waits until a message is available or the interval specified by the `timeout` parameter has expired.</span></span>  
  
 <span data-ttu-id="1a683-238">При работе с очередями транзакций, откат транзакции вызывает любые сообщения, удаленные с помощью вызова <xref:System.Messaging.MessageEnumerator.RemoveCurrent%2A> возвращается в очередь.</span><span class="sxs-lookup"><span data-stu-id="1a683-238">When working with transactional queues, a rollback of a transaction causes any messages removed by a call to <xref:System.Messaging.MessageEnumerator.RemoveCurrent%2A> to be returned to the queue.</span></span> <span data-ttu-id="1a683-239">Удаление не является необратимым до фиксации транзакции.</span><span class="sxs-lookup"><span data-stu-id="1a683-239">The removal is not irreversible until the transaction is committed.</span></span>  
  
 <span data-ttu-id="1a683-240">При использовании журнала очереди удаление сообщения приводит к копии должны храниться в очереди журнала, так же как и <xref:System.Messaging.MessageQueue> класса <xref:System.Messaging.MessageQueue.Receive%2A> метода.</span><span class="sxs-lookup"><span data-stu-id="1a683-240">If you are using queue journaling, removing the message causes a copy to be kept in the journal queue, just as the <xref:System.Messaging.MessageQueue> class's <xref:System.Messaging.MessageQueue.Receive%2A> method does.</span></span>  
  
 <span data-ttu-id="1a683-241">При удалении текущего сообщения курсор перемещается к следующему сообщению.</span><span class="sxs-lookup"><span data-stu-id="1a683-241">When you remove the current message, the cursor is moved to the next message.</span></span> <span data-ttu-id="1a683-242">Нет необходимости вызывать <xref:System.Messaging.MessageEnumerator.MoveNext%2A> после вызова <xref:System.Messaging.MessageEnumerator.RemoveCurrent%2A>.</span><span class="sxs-lookup"><span data-stu-id="1a683-242">You do not have to call <xref:System.Messaging.MessageEnumerator.MoveNext%2A> after calling <xref:System.Messaging.MessageEnumerator.RemoveCurrent%2A>.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="1a683-243">Для параметра <paramref name="timeout" /> задано недопустимое значение.</span><span class="sxs-lookup"><span data-stu-id="1a683-243">The value specified for the <paramref name="timeout" /> parameter is invalid.</span></span></exception>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="1a683-244">Параметр <paramref name="transaction" /> имеет значение <see langword="null" />.</span><span class="sxs-lookup"><span data-stu-id="1a683-244">The <paramref name="transaction" /> parameter is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.Messaging.MessageQueueException"><span data-ttu-id="1a683-245">Истекло время тайм-аута.</span><span class="sxs-lookup"><span data-stu-id="1a683-245">The timeout has expired.</span></span></exception>
        <altmember cref="M:System.Messaging.MessageEnumerator.MoveNext" />
        <altmember cref="P:System.Messaging.MessageEnumerator.Current" />
        <altmember cref="T:System.Messaging.MessageQueueTransaction" />
      </Docs>
    </Member>
    <Member MemberName="RemoveCurrent">
      <MemberSignature Language="C#" Value="public System.Messaging.Message RemoveCurrent (TimeSpan timeout, System.Messaging.MessageQueueTransactionType transactionType);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Messaging.Message RemoveCurrent(valuetype System.TimeSpan timeout, valuetype System.Messaging.MessageQueueTransactionType transactionType) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Messaging.MessageEnumerator.RemoveCurrent(System.TimeSpan,System.Messaging.MessageQueueTransactionType)" />
      <MemberSignature Language="VB.NET" Value="Public Function RemoveCurrent (timeout As TimeSpan, transactionType As MessageQueueTransactionType) As Message" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Messaging::Message ^ RemoveCurrent(TimeSpan timeout, System::Messaging::MessageQueueTransactionType transactionType);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Messaging</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Messaging.Message</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="timeout" Type="System.TimeSpan" />
        <Parameter Name="transactionType" Type="System.Messaging.MessageQueueTransactionType" />
      </Parameters>
      <Docs>
        <param name="timeout"><span data-ttu-id="1a683-246">Интервал времени ожидания удаления сообщения.</span><span class="sxs-lookup"><span data-stu-id="1a683-246">The interval of time to wait for the message to be removed.</span></span></param>
        <param name="transactionType"><span data-ttu-id="1a683-247">Одно из значений <see cref="T:System.Messaging.MessageQueueTransactionType" />, описывающее тип контекста транзакции, связываемого с сообщением.</span><span class="sxs-lookup"><span data-stu-id="1a683-247">One of the <see cref="T:System.Messaging.MessageQueueTransactionType" /> values, describing the type of transaction context to associate with the message.</span></span></param>
        <summary><span data-ttu-id="1a683-248">Удаляет текущее сообщение из очереди и возвращает сообщение в вызывающее приложение.</span><span class="sxs-lookup"><span data-stu-id="1a683-248">Removes the current message from a queue and returns the message to the calling application.</span></span> <span data-ttu-id="1a683-249">Если имеется сообщение для удаления, этот метод возвращает его немедленно.</span><span class="sxs-lookup"><span data-stu-id="1a683-249">If there is a message to remove, the method returns it immediately.</span></span> <span data-ttu-id="1a683-250">В противном случае метод ожидает прихода нового сообщения в течение заданного времени тайм-аута.</span><span class="sxs-lookup"><span data-stu-id="1a683-250">Otherwise, the method waits the specified timeout for a new message to arrive.</span></span></summary>
        <returns><span data-ttu-id="1a683-251">Объект <see cref="T:System.Messaging.Message" />, ссылающийся на первое доступное в очереди сообщение.</span><span class="sxs-lookup"><span data-stu-id="1a683-251">A <see cref="T:System.Messaging.Message" /> that references the first message available in the queue.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="1a683-252"><xref:System.Messaging.MessageEnumerator.RemoveCurrent%2A> Удаляет и возвращает сообщение в текущем положении курсора, используя контекст транзакции, определяемый параметром `transactionType` параметр.</span><span class="sxs-lookup"><span data-stu-id="1a683-252"><xref:System.Messaging.MessageEnumerator.RemoveCurrent%2A> removes and returns the message at the cursor's current location, using a transaction context defined by the `transactionType` parameter.</span></span> <span data-ttu-id="1a683-253">Если курсор находится в конце очереди, эта перегрузка метода ожидает, пока сообщение не станет доступным или время, заданное параметром `timeout` истечет.</span><span class="sxs-lookup"><span data-stu-id="1a683-253">If the cursor is at the end of the queue, this overload of the method waits until a message is available or the interval specified by the `timeout` parameter has expired.</span></span>  
  
 <span data-ttu-id="1a683-254">Укажите `Automatic` для `transactionType` параметра, если он уже существует внешний контекст транзакции, присоединенного к потоку, который вы хотите использовать для получения сообщения.</span><span class="sxs-lookup"><span data-stu-id="1a683-254">Specify `Automatic` for the `transactionType` parameter if there is already an external transaction context attached to the thread that you want to use to receive the message.</span></span> <span data-ttu-id="1a683-255">Укажите `Single` Если вы хотите получить сообщение в виде единой внутренней транзакции.</span><span class="sxs-lookup"><span data-stu-id="1a683-255">Specify `Single` if you want to receive the message as a single internal transaction.</span></span> <span data-ttu-id="1a683-256">Можно указать `None` Если вы хотите получать сообщения из транзакционной очереди вне контекста транзакции.</span><span class="sxs-lookup"><span data-stu-id="1a683-256">You can specify `None` if you want to receive a message from a transactional queue outside of a transaction context.</span></span>  
  
 <span data-ttu-id="1a683-257">При использовании журнала очереди удаление сообщения приводит к копии должны храниться в очереди журнала, так же как и <xref:System.Messaging.MessageQueue> класса <xref:System.Messaging.MessageQueue.Receive%2A> метода.</span><span class="sxs-lookup"><span data-stu-id="1a683-257">If you are using queue journaling, removing the message causes a copy to be kept in the journal queue, just as the <xref:System.Messaging.MessageQueue> class's <xref:System.Messaging.MessageQueue.Receive%2A> method does.</span></span>  
  
 <span data-ttu-id="1a683-258">При работе с очередями транзакций, откат транзакции вызывает любые сообщения, удаленные с помощью вызова <xref:System.Messaging.MessageEnumerator.RemoveCurrent%2A> возвращается в очередь.</span><span class="sxs-lookup"><span data-stu-id="1a683-258">When working with transactional queues, a rollback of a transaction causes any messages removed by a call to <xref:System.Messaging.MessageEnumerator.RemoveCurrent%2A> to be returned to the queue.</span></span> <span data-ttu-id="1a683-259">Удаление не является необратимым до фиксации транзакции.</span><span class="sxs-lookup"><span data-stu-id="1a683-259">The removal is not irreversible until the transaction is committed.</span></span>  
  
 <span data-ttu-id="1a683-260">При удалении текущего сообщения курсор перемещается к следующему сообщению.</span><span class="sxs-lookup"><span data-stu-id="1a683-260">When you remove the current message, the cursor is moved to the next message.</span></span> <span data-ttu-id="1a683-261">Нет необходимости вызывать <xref:System.Messaging.MessageEnumerator.MoveNext%2A> после вызова <xref:System.Messaging.MessageEnumerator.RemoveCurrent%2A>.</span><span class="sxs-lookup"><span data-stu-id="1a683-261">You do not have to call <xref:System.Messaging.MessageEnumerator.MoveNext%2A> after calling <xref:System.Messaging.MessageEnumerator.RemoveCurrent%2A>.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="1a683-262">Для параметра <paramref name="timeout" /> задано недопустимое значение.</span><span class="sxs-lookup"><span data-stu-id="1a683-262">The value specified for the <paramref name="timeout" /> parameter is invalid.</span></span></exception>
        <exception cref="T:System.Messaging.MessageQueueException"><span data-ttu-id="1a683-263">Истекло время тайм-аута.</span><span class="sxs-lookup"><span data-stu-id="1a683-263">The timeout has expired.</span></span></exception>
        <exception cref="T:System.ComponentModel.InvalidEnumArgumentException"><span data-ttu-id="1a683-264">Параметр <paramref name="transactionType" /> не является одним из членов <see cref="T:System.Messaging.MessageQueueTransactionType" />.</span><span class="sxs-lookup"><span data-stu-id="1a683-264">The <paramref name="transactionType" /> parameter is not one of the <see cref="T:System.Messaging.MessageQueueTransactionType" /> members.</span></span></exception>
        <altmember cref="M:System.Messaging.MessageEnumerator.MoveNext" />
        <altmember cref="P:System.Messaging.MessageEnumerator.Current" />
        <altmember cref="T:System.Messaging.MessageQueueTransactionType" />
      </Docs>
    </Member>
    <Member MemberName="Reset">
      <MemberSignature Language="C#" Value="public void Reset ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Reset() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Messaging.MessageEnumerator.Reset" />
      <MemberSignature Language="VB.NET" Value="Public Sub Reset ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void Reset();" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Collections.IEnumerator.Reset</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Messaging</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="1a683-265">Сбрасывает текущий перечислитель, теперь он указывает на заголовок очереди.</span><span class="sxs-lookup"><span data-stu-id="1a683-265">Resets the current enumerator so it points to the head of the queue.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="1a683-266">Перечислитель может перемещаться только в прямом направлении.</span><span class="sxs-lookup"><span data-stu-id="1a683-266">An enumerator can only move in a forward direction.</span></span> <span data-ttu-id="1a683-267">Используйте этот метод, чтобы начать заново в начале очереди.</span><span class="sxs-lookup"><span data-stu-id="1a683-267">Use this method to start over at the beginning of the queue.</span></span>  
  
 <span data-ttu-id="1a683-268">После вызова метода <xref:System.Messaging.MessageEnumerator.Reset%2A>, курсор указывает на первое сообщение.</span><span class="sxs-lookup"><span data-stu-id="1a683-268">After calling <xref:System.Messaging.MessageEnumerator.Reset%2A>, the cursor points to the first message.</span></span> <span data-ttu-id="1a683-269">Необходимо вызвать <xref:System.Messaging.MessageEnumerator.MoveNext%2A> после вызова <xref:System.Messaging.MessageEnumerator.Reset%2A> для перемещения курсора вперед на первое сообщение в очереди.</span><span class="sxs-lookup"><span data-stu-id="1a683-269">You do not need to call <xref:System.Messaging.MessageEnumerator.MoveNext%2A> after calling <xref:System.Messaging.MessageEnumerator.Reset%2A> to move the cursor forward to the first message in the queue.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Messaging.MessageEnumerator.MoveNext" />
        <altmember cref="P:System.Messaging.MessageEnumerator.Current" />
      </Docs>
    </Member>
    <Member MemberName="System.Collections.IEnumerator.Current">
      <MemberSignature Language="C#" Value="object System.Collections.IEnumerator.Current { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance object System.Collections.IEnumerator.Current" />
      <MemberSignature Language="DocId" Value="P:System.Messaging.MessageEnumerator.System#Collections#IEnumerator#Current" />
      <MemberSignature Language="VB.NET" Value=" ReadOnly Property Current As Object Implements IEnumerator.Current" />
      <MemberSignature Language="C++ CLI" Value="property System::Object ^ System.Collections.IEnumerator.Current { System::Object ^ get(); };" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Collections.IEnumerator.Current</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Messaging</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="1a683-270">Возвращает объект <see cref="T:System.Messaging.Message" />, который ссылается на сообщение в текущей позиции курсора.</span><span class="sxs-lookup"><span data-stu-id="1a683-270">Returns a <see cref="T:System.Messaging.Message" /> that references the message at the current cursor position.</span></span></summary>
        <value><span data-ttu-id="1a683-271">Объект <see cref="T:System.Messaging.Message" />, который ссылается на сообщение в текущей позиции курсора.</span><span class="sxs-lookup"><span data-stu-id="1a683-271">A <see cref="T:System.Messaging.Message" /> that references the message at the current cursor position.</span></span></value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
  </Members>
</Type>