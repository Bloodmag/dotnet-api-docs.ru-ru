<Type Name="MessageEnumerator" FullName="System.Messaging.MessageEnumerator">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="6a3039a11d941cd3db611cb997eb17835525e4da" />
    <Meta Name="ms.sourcegitcommit" Value="d31dc2ede16f6f7bc64e90d9f897ff54c4e3869b" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="ru-RU" />
    <Meta Name="ms.lasthandoff" Value="04/03/2018" />
    <Meta Name="ms.locfileid" Value="30460818" />
  </Metadata>
  <TypeSignature Language="C#" Value="public class MessageEnumerator : MarshalByRefObject, IDisposable, System.Collections.IEnumerator" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit MessageEnumerator extends System.MarshalByRefObject implements class System.Collections.IEnumerator, class System.IDisposable" />
  <TypeSignature Language="DocId" Value="T:System.Messaging.MessageEnumerator" />
  <TypeSignature Language="VB.NET" Value="Public Class MessageEnumerator&#xA;Inherits MarshalByRefObject&#xA;Implements IDisposable, IEnumerator" />
  <TypeSignature Language="C++ CLI" Value="public ref class MessageEnumerator : MarshalByRefObject, IDisposable, System::Collections::IEnumerator" />
  <AssemblyInfo>
    <AssemblyName>System.Messaging</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.MarshalByRefObject</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>System.Collections.IEnumerator</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.IDisposable</InterfaceName>
    </Interface>
  </Interfaces>
  <Docs>
    <summary>Предоставляет курсор последовательного доступа для перечисления сообщений в очереди сообщений.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Используйте <xref:System.Messaging.MessageEnumerator> для динамического взаимодействия с сообщениями в очереди. Методы, доступные через <xref:System.Messaging.MessageQueue> класса могут возвращать либо <xref:System.Messaging.MessageEnumerator> указывает динамический список сообщений в очереди, либо массив, содержащий копии в данный момент времени - моментальный снимок - очереди во время указанный метод был вызван.  
  
 В отличие от статического моментального снимка перечислитель позволяет изменять коллекцию. С помощью <xref:System.Messaging.MessageEnumerator>, можно удалить сообщение из очереди и их изменения немедленно отражаются в очереди.  
  
 Перечислитель не удаляет сообщения из очереди при запросе очереди. Возвращает сведения о сообщении, расположенный в текущей позиции курсора, но оставляет сообщение в очереди.  
  
 Объект <xref:System.Messaging.MessageEnumerator> курсор, инициализируемый в заголовке динамического списка. Порядок элементов списка является таким же, как порядок сообщений в очереди, исходя из приоритета сообщения. Можно переместить курсор на первое сообщение в очереди, вызвав <xref:System.Messaging.MessageEnumerator.MoveNext%2A>. После инициализации перечислителя, можно использовать <xref:System.Messaging.MessageEnumerator.MoveNext%2A> для прохода вперед по оставшимся сообщениям. Можно указать, следует ли ожидать сообщение станет доступным, передав время ожидания в <xref:System.Messaging.MessageEnumerator.MoveNext%2A> метод.  
  
 Поскольку перечислитель является динамическим, сообщения, которые добавляются за текущей позицией курсора (например, из-за низкого приоритета), может осуществляться с помощью перечислителя. Сообщение, которое вставляется перед текущей позицией курсора будет невозможен. Не удается шаг назад с <xref:System.Messaging.MessageEnumerator>. Курсор позволяет перемещаться только вперед. <xref:System.Messaging.MessageEnumerator.Reset%2A> Метод позволяет помещать курсор назад в начало очереди.  
  
 Экземпляры <xref:System.Messaging.MessageEnumerator> для данной очереди работают независимо друг от друга. Можно создать два <xref:System.Messaging.MessageEnumerator> экземпляры, которые применяются к той же очереди. Изменения один <xref:System.Messaging.MessageEnumerator> делает сообщений в очереди, будут отражены немедленно во втором перечислителе, если второй перечислитель располагается перед первым. Тем не менее, если два перечислителя имеют одинаковую позицию и один из них удаляет сообщение в этой позиции, если исключение второго перечислителя предпринимает попытку получить значение <xref:System.Messaging.MessageEnumerator.Current%2A> свойства удаленного сообщения.  
  
> [!NOTE]
>  При создании экземпляра <xref:System.Messaging.MessageQueue> с <xref:System.Messaging.MessageQueue.DenySharedReceive%2A?displayProperty=nameWithType> значение `true`, никакие другие приложения можно изменить сообщения в перечислителе, при наличии подключения к очереди.  
  
   
  
## Examples  
 В следующем примере возвращает динамический список сообщений в очереди и пересчет всех сообщений <xref:System.Messaging.Message.Priority%2A> свойство <xref:System.Messaging.MessagePriority.Lowest?displayProperty=nameWithType>.  
  
 [!code-cpp[MessageQueue.GetMessageEnumerator#1](~/samples/snippets/cpp/VS_Snippets_Remoting/MessageQueue.GetMessageEnumerator/CPP/mqgetmessageenumerator.cpp#1)]
 [!code-csharp[MessageQueue.GetMessageEnumerator#1](~/samples/snippets/csharp/VS_Snippets_Remoting/MessageQueue.GetMessageEnumerator/CS/mqgetmessageenumerator.cs#1)]
 [!code-vb[MessageQueue.GetMessageEnumerator#1](~/samples/snippets/visualbasic/VS_Snippets_Remoting/MessageQueue.GetMessageEnumerator/VB/mqgetmessageenumerator.vb#1)]  
  
 ]]></format>
    </remarks>
    <altmember cref="T:System.Messaging.Message" />
    <altmember cref="M:System.Messaging.MessageQueue.GetMessageEnumerator2" />
  </Docs>
  <Members>
    <Member MemberName="Close">
      <MemberSignature Language="C#" Value="public void Close ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Close() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Messaging.MessageEnumerator.Close" />
      <MemberSignature Language="VB.NET" Value="Public Sub Close ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Close();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Messaging</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Освобождает ресурсы, связанные с перечислителем.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Операционная система хранит открытый дескриптор очереди в течение времени существования курсора. После завершения работы с перечислителем вызовите <xref:System.Messaging.MessageEnumerator.Close%2A> для освобождения ресурсов, связанных с этим дескриптором.  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Messaging.MessageEnumerator.MoveNext" />
      </Docs>
    </Member>
    <Member MemberName="Current">
      <MemberSignature Language="C#" Value="public System.Messaging.Message Current { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Messaging.Message Current" />
      <MemberSignature Language="DocId" Value="P:System.Messaging.MessageEnumerator.Current" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Current As Message" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Messaging::Message ^ Current { System::Messaging::Message ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Messaging</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Messaging.Message</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Получает текущий объект <see cref="T:System.Messaging.Message" />, на который указывает перечислитель.</summary>
        <value>Текущее сообщение.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 При создании перечислителя он указывает на заголовок очереди, в месте перед первым сообщением. В этом случае <xref:System.Messaging.MessageEnumerator.Current%2A> не является допустимым и будет вызывать исключение, если он доступен. Необходимо вызвать метод <xref:System.Messaging.MessageEnumerator.MoveNext%2A> для позиционирования курсора первого сообщения в очереди.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">Вы вызвали <see cref="P:System.Messaging.MessageEnumerator.Current" /> до первого вызова <see cref="M:System.Messaging.MessageEnumerator.MoveNext" />. Курсор располагается перед первым элементом перечисления сообщений.  
  
 - или -  
  
 Вы вызвали <see cref="P:System.Messaging.MessageEnumerator.Current" /> после вызова <see cref="M:System.Messaging.MessageEnumerator.MoveNext" />, вернувшего <see langword="false" /> (это указывает, что курсор расположен за последним элементом перечисления сообщений).</exception>
        <exception cref="T:System.Messaging.MessageQueueException">Сообщение, на которое указывает перечислитель, больше не существует. Возможно, они были удалены.</exception>
        <altmember cref="M:System.Messaging.MessageEnumerator.MoveNext" />
        <altmember cref="M:System.Messaging.MessageEnumerator.Reset" />
        <altmember cref="M:System.Messaging.MessageQueue.GetMessageEnumerator" />
      </Docs>
    </Member>
    <Member MemberName="CursorHandle">
      <MemberSignature Language="C#" Value="public IntPtr CursorHandle { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance native int CursorHandle" />
      <MemberSignature Language="DocId" Value="P:System.Messaging.MessageEnumerator.CursorHandle" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property CursorHandle As IntPtr" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property IntPtr CursorHandle { IntPtr get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Messaging</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IntPtr</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Получает собственный дескриптор курсора Message Queuing, используемый для просмотра сообщений в очереди.</summary>
        <value>Собственный дескриптор курсора.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Это свойство содержит собственный дескриптор для перечисления. После завершения работы с перечислителем вызовите <xref:System.Messaging.MessageEnumerator.Close%2A> для освобождения этого ресурса.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Messaging.MessageQueueException">Этот дескриптор не существует.</exception>
        <altmember cref="P:System.Messaging.MessageEnumerator.Current" />
      </Docs>
    </Member>
    <MemberGroup MemberName="Dispose">
      <AssemblyInfo>
        <AssemblyName>System.Messaging</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Освобождает ресурсы, используемые объектом <see cref="T:System.Messaging.MessageEnumerator" />.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Dispose">
      <MemberSignature Language="C#" Value="public void Dispose ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Dispose() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Messaging.MessageEnumerator.Dispose" />
      <MemberSignature Language="VB.NET" Value="Public Sub Dispose ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void Dispose();" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.IDisposable.Dispose</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Messaging</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Освобождает все ресурсы, занятые модулем <see cref="T:System.Messaging.MessageEnumerator" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Вызов <xref:System.Messaging.MessageEnumerator.Dispose%2A> позволяет ресурсы, используемые <xref:System.Messaging.MessageEnumerator> перераспределить для других целей. Дополнительные сведения о <xref:System.Messaging.MessageEnumerator.Dispose%2A>, в разделе [очистки неуправляемых ресурсов](~/docs/standard/garbage-collection/unmanaged.md).  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Dispose">
      <MemberSignature Language="C#" Value="protected virtual void Dispose (bool disposing);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void Dispose(bool disposing) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Messaging.MessageEnumerator.Dispose(System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub Dispose (disposing As Boolean)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void Dispose(bool disposing);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Messaging</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="disposing" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="disposing">
          Значение <see langword="true" /> позволяет освободить как управляемые, так и неуправляемые ресурсы; значение <see langword="false" /> освобождает только неуправляемые ресурсы.</param>
        <summary>Освобождает неуправляемые ресурсы, используемые объектом <see cref="T:System.Messaging.MessageEnumerator" />, а при необходимости освобождает также управляемые ресурсы.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Этот метод вызывается методом открытые <xref:System.Messaging.MessageEnumerator.Dispose%2A> метод и <xref:System.Object.Finalize%2A> метод. `Dispose()` вызывает защищенный `Dispose(Boolean)` метод с `disposing` равным `true`. <xref:System.Object.Finalize%2A> вызывает `Dispose` с `disposing` значение `false`.  
  
 Если параметр `disposing` имеет значение `true`, то данный метод освобождает все ресурсы, занятые любыми управляемыми объектами, на которые ссылается этот объект <xref:System.Messaging.MessageEnumerator>. Этот метод вызывает метод `Dispose()` каждого объекта, на который есть ссылка.  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides">
          <para>
            Метод <see langword="Dispose" /> может вызываться несколько раз другими объектами. При переопределении метода <see langword="Dispose(Boolean)" /> нужно избегать ссылок на объекты, которые были уничтожены предыдущими вызовами метода <see langword="Dispose" />. Дополнительные сведения о реализации <see langword="Dispose" />, в разделе [метода](~/docs/standard/garbage-collection/implementing-dispose.md).  
  
 Дополнительные сведения о <see langword="Dispose" /> и <see langword="Finalize" />, в разделе [очистки неуправляемых ресурсов](~/docs/standard/garbage-collection/unmanaged.md) и [переопределение метода Finalize](http://msdn.microsoft.com/library/8026cb68-fe93-43fc-96c1-c09ad7d64cd3).</para>
        </block>
      </Docs>
    </Member>
    <Member MemberName="Finalize">
      <MemberSignature Language="C#" Value="~MessageEnumerator ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance void Finalize() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Messaging.MessageEnumerator.Finalize" />
      <MemberSignature Language="VB.NET" Value="Finalize ()" />
      <MemberSignature Language="C++ CLI" Value="!MessageEnumerator ()" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Messaging</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="MoveNext">
      <AssemblyInfo>
        <AssemblyName>System.Messaging</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Перемещает перечислитель на следующее сообщение в очереди.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="MoveNext">
      <MemberSignature Language="C#" Value="public bool MoveNext ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool MoveNext() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Messaging.MessageEnumerator.MoveNext" />
      <MemberSignature Language="VB.NET" Value="Public Function MoveNext () As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual bool MoveNext();" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Collections.IEnumerator.MoveNext</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Messaging</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Перемещает перечислитель на следующее сообщение в очереди, если таковое в данный момент имеется.</summary>
        <returns>
          Значение <see langword="true" />, если перечислитель был успешно перемещен на следующее сообщение; значение <see langword="false" />, если перечислитель достиг конца очереди. </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Эта перегрузка возвращает немедленно, если нет никаких сообщений в очереди. Имеется другая перегрузка, ожидающая указанного <xref:System.TimeSpan> для прихода сообщения.  
  
 Если сообщение не в настоящее время недоступно, так как очередь пуста или перемещения после последнего элемента в коллекции, <xref:System.Messaging.MessageEnumerator.MoveNext%2A> возвращает `false` вызывающему методу.  
  
 После создания перечислитель располагается перед первого сообщения очереди и первый вызов <xref:System.Messaging.MessageEnumerator.MoveNext%2A> приводит первого сообщения очереди в представлении.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Messaging.MessageQueueException">Возникло исключение, характерное для Message Queuing.</exception>
        <altmember cref="P:System.Messaging.MessageEnumerator.Current" />
        <altmember cref="M:System.Messaging.MessageEnumerator.Reset" />
        <altmember cref="T:System.Messaging.Message" />
      </Docs>
    </Member>
    <Member MemberName="MoveNext">
      <MemberSignature Language="C#" Value="public bool MoveNext (TimeSpan timeout);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool MoveNext(valuetype System.TimeSpan timeout) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Messaging.MessageEnumerator.MoveNext(System.TimeSpan)" />
      <MemberSignature Language="VB.NET" Value="Public Function MoveNext (timeout As TimeSpan) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool MoveNext(TimeSpan timeout);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Messaging</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="timeout" Type="System.TimeSpan" />
      </Parameters>
      <Docs>
        <param name="timeout">Время <see cref="T:System.TimeSpan" /> на ожидание сообщения в случае, когда перечислитель устанавливается в конец очереди.</param>
        <summary>Перемещает перечислитель на следующее сообщение в очереди. Если перечислитель установлен в конец очереди, метод <see cref="M:System.Messaging.MessageEnumerator.MoveNext" /> ожидает до тех пор, пока не появится сообщение или же не истечет заданный тайм-аут.</summary>
        <returns>
          Значение <see langword="true" />, если перечислитель успешно переместился на следующее сообщение; значение <see langword="false" />, если перечислитель достиг конца очереди, и не появилось новое сообщение в течение времени, заданного параметром <paramref name="timeout" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Эта перегрузка ожидает, если в очереди отсутствуют сообщения, или если курсор достиг конца очереди. Если сообщение не в настоящее время недоступно, так как очередь пуста или перемещения после последнего элемента в коллекции, <xref:System.Messaging.MessageEnumerator.MoveNext%2A> ожидает заданное время ожидания.  
  
 Если курсор уже находится в конце очереди, <xref:System.Messaging.MessageEnumerator.MoveNext%2A> возвращает только `true` при получении нового сообщения в течение указанного интервала времени, в настоящее время имеет более низкий приоритет, чем все сообщения в очереди и помещается в конец очереди. Перегрузка без параметра возвращает немедленно, если больше нет сообщений в очереди.  
  
 После создания перечислитель располагается перед первым сообщением перечисления и первый вызов <xref:System.Messaging.MessageEnumerator.MoveNext%2A> помещает первое сообщение перечисления в представление.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">Для параметра timeout задано недопустимое значение. Возможно, это отрицательное число.</exception>
        <exception cref="T:System.Messaging.MessageQueueException">Возникло исключение, характерное для Message Queuing.  
  
 - или -  
  
 Истекло время тайм-аута.</exception>
        <altmember cref="P:System.Messaging.MessageEnumerator.Current" />
        <altmember cref="M:System.Messaging.MessageEnumerator.Reset" />
        <altmember cref="T:System.Messaging.Message" />
      </Docs>
    </Member>
    <MemberGroup MemberName="RemoveCurrent">
      <AssemblyInfo>
        <AssemblyName>System.Messaging</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Удаляет текущее сообщение из очереди и возвращает сообщение в вызывающее приложение. При удалении сообщения оно стирается из очереди.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Поведение, описанное для этих перегрузок применяется только тогда, когда <xref:System.Messaging.MessageEnumerator> экземпляр извлекается с помощью <xref:System.Messaging.MessageQueue.GetMessageEnumerator2%2A>. Не используйте <xref:System.Messaging.MessageQueue.GetMessageEnumerator%2A> для получения экземпляра <xref:System.Messaging.MessageEnumerator> как этот метод является устаревшим.  
  
 ]]></format>
        </remarks>
      </Docs>
    </MemberGroup>
    <Member MemberName="RemoveCurrent">
      <MemberSignature Language="C#" Value="public System.Messaging.Message RemoveCurrent ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Messaging.Message RemoveCurrent() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Messaging.MessageEnumerator.RemoveCurrent" />
      <MemberSignature Language="VB.NET" Value="Public Function RemoveCurrent () As Message" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Messaging::Message ^ RemoveCurrent();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Messaging</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Messaging.Message</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Удаляет текущее сообщение из транзакционной или нетранзакционной очереди и возвращает сообщение в вызывающее приложение. Не указано время тайм-аута для прибытия сообщения в очередь.</summary>
        <returns>Объект <see cref="T:System.Messaging.Message" />, ссылающийся на первое доступное в очереди сообщение.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Messaging.MessageEnumerator.RemoveCurrent%2A> Удаляет и возвращает сообщение в текущем положении курсора.  
  
 При использовании журнала очереди удаление сообщения приводит к копии должны храниться в очереди журнала, так же как и <xref:System.Messaging.MessageQueue> класса <xref:System.Messaging.MessageQueue.Receive%2A> метода.  
  
 При удалении текущего сообщения курсор перемещается к следующему сообщению. Нет необходимости вызывать <xref:System.Messaging.MessageEnumerator.MoveNext%2A> после вызова <xref:System.Messaging.MessageEnumerator.RemoveCurrent%2A>.  
  
 При вызове этой перегрузки в транзакционной очереди, Message Queuing создает одну внутреннюю транзакцию.  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Messaging.MessageEnumerator.MoveNext" />
        <altmember cref="P:System.Messaging.MessageEnumerator.Current" />
      </Docs>
    </Member>
    <Member MemberName="RemoveCurrent">
      <MemberSignature Language="C#" Value="public System.Messaging.Message RemoveCurrent (System.Messaging.MessageQueueTransaction transaction);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Messaging.Message RemoveCurrent(class System.Messaging.MessageQueueTransaction transaction) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Messaging.MessageEnumerator.RemoveCurrent(System.Messaging.MessageQueueTransaction)" />
      <MemberSignature Language="VB.NET" Value="Public Function RemoveCurrent (transaction As MessageQueueTransaction) As Message" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Messaging::Message ^ RemoveCurrent(System::Messaging::MessageQueueTransaction ^ transaction);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Messaging</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Messaging.Message</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="transaction" Type="System.Messaging.MessageQueueTransaction" />
      </Parameters>
      <Docs>
        <param name="transaction">Объект <see cref="T:System.Messaging.MessageQueueTransaction" />, задающий транзакцию, в которой будет удалено сообщение.</param>
        <summary>Удаляет текущее сообщение из транзакционной очереди и возвращает сообщение в вызывающее приложение. Не указано время тайм-аута для прибытия сообщения в очередь.</summary>
        <returns>Объект <see cref="T:System.Messaging.Message" />, ссылающийся на первое доступное в очереди сообщение.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Messaging.MessageEnumerator.RemoveCurrent%2A> Удаляет и возвращает сообщение в текущем положении курсора, используя внутреннюю транзакцию контекст, определяемый параметром `transaction` параметр.  
  
 При использовании журнала очереди удаление сообщения приводит к копии должны храниться в очереди журнала, так же как и <xref:System.Messaging.MessageQueue> класса <xref:System.Messaging.MessageQueue.Receive%2A> метода.  
  
 При работе с очередями транзакций, откат транзакции вызывает любые сообщения, удаленные с помощью вызова <xref:System.Messaging.MessageEnumerator.RemoveCurrent%2A> возвращается в очередь. Удаление не является необратимым до фиксации транзакции.  
  
 При удалении текущего сообщения курсор перемещается к следующему сообщению. Нет необходимости вызывать <xref:System.Messaging.MessageEnumerator.MoveNext%2A> после вызова <xref:System.Messaging.MessageEnumerator.RemoveCurrent%2A>.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">Параметр <paramref name="transaction" /> имеет значение <see langword="null" />.</exception>
        <altmember cref="M:System.Messaging.MessageEnumerator.MoveNext" />
        <altmember cref="P:System.Messaging.MessageEnumerator.Current" />
        <altmember cref="T:System.Messaging.MessageQueueTransaction" />
      </Docs>
    </Member>
    <Member MemberName="RemoveCurrent">
      <MemberSignature Language="C#" Value="public System.Messaging.Message RemoveCurrent (System.Messaging.MessageQueueTransactionType transactionType);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Messaging.Message RemoveCurrent(valuetype System.Messaging.MessageQueueTransactionType transactionType) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Messaging.MessageEnumerator.RemoveCurrent(System.Messaging.MessageQueueTransactionType)" />
      <MemberSignature Language="VB.NET" Value="Public Function RemoveCurrent (transactionType As MessageQueueTransactionType) As Message" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Messaging::Message ^ RemoveCurrent(System::Messaging::MessageQueueTransactionType transactionType);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Messaging</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Messaging.Message</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="transactionType" Type="System.Messaging.MessageQueueTransactionType" />
      </Parameters>
      <Docs>
        <param name="transactionType">Одно из значений <see cref="T:System.Messaging.MessageQueueTransactionType" />, описывающее тип контекста транзакции, связываемого с сообщением.</param>
        <summary>Удаляет текущее сообщение из очереди и возвращает сообщение в вызывающее приложение. Не указано время тайм-аута для прибытия сообщения в очередь.</summary>
        <returns>Объект <see cref="T:System.Messaging.Message" />, ссылающийся на первое доступное в очереди сообщение.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Messaging.MessageEnumerator.RemoveCurrent%2A> Удаляет и возвращает сообщение в текущем положении курсора, используя контекст транзакции, определяемый параметром `transactionType` параметр.  
  
 Укажите `Automatic` для `transactionType` параметра, если он уже существует внешний контекст транзакции, присоединенного к потоку, который вы хотите использовать для получения сообщения. Укажите `Single` Если вы хотите получить сообщение в виде единой внутренней транзакции. Можно указать `None` Если вы хотите получать сообщения из транзакционной очереди вне контекста транзакции.  
  
 При использовании журнала очереди удаление сообщения приводит к копии должны храниться в очереди журнала, так же как и <xref:System.Messaging.MessageQueue> класса <xref:System.Messaging.MessageQueue.Receive%2A> метода.  
  
 При работе с очередями транзакций, откат транзакции вызывает любые сообщения, удаленные с помощью вызова <xref:System.Messaging.MessageEnumerator.RemoveCurrent%2A> возвращается в очередь. Удаление не является необратимым до фиксации транзакции.  
  
 При удалении текущего сообщения курсор перемещается к следующему сообщению. Нет необходимости вызывать <xref:System.Messaging.MessageEnumerator.MoveNext%2A> после вызова <xref:System.Messaging.MessageEnumerator.RemoveCurrent%2A>.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ComponentModel.InvalidEnumArgumentException">Параметр <paramref name="transactionType" /> не является одним из членов <see cref="T:System.Messaging.MessageQueueTransactionType" />.</exception>
        <altmember cref="M:System.Messaging.MessageEnumerator.MoveNext" />
        <altmember cref="P:System.Messaging.MessageEnumerator.Current" />
        <altmember cref="T:System.Messaging.MessageQueueTransactionType" />
      </Docs>
    </Member>
    <Member MemberName="RemoveCurrent">
      <MemberSignature Language="C#" Value="public System.Messaging.Message RemoveCurrent (TimeSpan timeout);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Messaging.Message RemoveCurrent(valuetype System.TimeSpan timeout) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Messaging.MessageEnumerator.RemoveCurrent(System.TimeSpan)" />
      <MemberSignature Language="VB.NET" Value="Public Function RemoveCurrent (timeout As TimeSpan) As Message" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Messaging::Message ^ RemoveCurrent(TimeSpan timeout);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Messaging</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Messaging.Message</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="timeout" Type="System.TimeSpan" />
      </Parameters>
      <Docs>
        <param name="timeout">Интервал времени ожидания прихода сообщения в очередь.</param>
        <summary>Удаляет текущее сообщение из очереди и возвращает сообщение в вызывающее приложение. Если имеется сообщение для удаления, этот метод возвращает его немедленно. В противном случае метод ожидает прихода нового сообщения в течение заданного времени тайм-аута.</summary>
        <returns>Объект <see cref="T:System.Messaging.Message" />, ссылающийся на первое доступное в очереди сообщение.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Messaging.MessageEnumerator.RemoveCurrent%2A> Удаляет и возвращает сообщение в текущем положении курсора. Если курсор находится в конце очереди, эта перегрузка метода ожидает, пока сообщение не станет доступным или время, заданное параметром `timeout` истечет.  
  
 При использовании журнала очереди удаление сообщения приводит к копии должны храниться в очереди журнала, так же как и <xref:System.Messaging.MessageQueue> класса <xref:System.Messaging.MessageQueue.Receive%2A> метода.  
  
 При удалении текущего сообщения курсор перемещается к следующему сообщению. Нет необходимости вызывать <xref:System.Messaging.MessageEnumerator.MoveNext%2A> после вызова <xref:System.Messaging.MessageEnumerator.RemoveCurrent%2A>.  
  
 При вызове этой перегрузки в транзакционной очереди, Message Queuing создает одну внутреннюю транзакцию.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">Для параметра <paramref name="timeout" /> задано недопустимое значение.</exception>
        <exception cref="T:System.Messaging.MessageQueueException">Истекло время тайм-аута.</exception>
        <altmember cref="M:System.Messaging.MessageEnumerator.MoveNext" />
        <altmember cref="P:System.Messaging.MessageEnumerator.Current" />
      </Docs>
    </Member>
    <Member MemberName="RemoveCurrent">
      <MemberSignature Language="C#" Value="public System.Messaging.Message RemoveCurrent (TimeSpan timeout, System.Messaging.MessageQueueTransaction transaction);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Messaging.Message RemoveCurrent(valuetype System.TimeSpan timeout, class System.Messaging.MessageQueueTransaction transaction) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Messaging.MessageEnumerator.RemoveCurrent(System.TimeSpan,System.Messaging.MessageQueueTransaction)" />
      <MemberSignature Language="VB.NET" Value="Public Function RemoveCurrent (timeout As TimeSpan, transaction As MessageQueueTransaction) As Message" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Messaging::Message ^ RemoveCurrent(TimeSpan timeout, System::Messaging::MessageQueueTransaction ^ transaction);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Messaging</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Messaging.Message</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="timeout" Type="System.TimeSpan" />
        <Parameter Name="transaction" Type="System.Messaging.MessageQueueTransaction" />
      </Parameters>
      <Docs>
        <param name="timeout">Интервал времени ожидания удаления сообщения.</param>
        <param name="transaction">Объект <see cref="T:System.Messaging.MessageQueueTransaction" />, задающий контекст транзакции для сообщения.</param>
        <summary>Удаляет текущее сообщение из транзакционной очереди и возвращает сообщение в вызывающее приложение. Если имеется сообщение для удаления, этот метод возвращает его немедленно. В противном случае метод ожидает прихода нового сообщения в течение заданного времени тайм-аута.</summary>
        <returns>Объект <see cref="T:System.Messaging.Message" />, ссылающийся на первое доступное в очереди сообщение.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Messaging.MessageEnumerator.RemoveCurrent%2A> Удаляет и возвращает сообщение в текущем положении курсора. Если курсор находится в конце очереди, эта перегрузка метода ожидает, пока сообщение не станет доступным или время, заданное параметром `timeout` истечет.  
  
 При работе с очередями транзакций, откат транзакции вызывает любые сообщения, удаленные с помощью вызова <xref:System.Messaging.MessageEnumerator.RemoveCurrent%2A> возвращается в очередь. Удаление не является необратимым до фиксации транзакции.  
  
 При использовании журнала очереди удаление сообщения приводит к копии должны храниться в очереди журнала, так же как и <xref:System.Messaging.MessageQueue> класса <xref:System.Messaging.MessageQueue.Receive%2A> метода.  
  
 При удалении текущего сообщения курсор перемещается к следующему сообщению. Нет необходимости вызывать <xref:System.Messaging.MessageEnumerator.MoveNext%2A> после вызова <xref:System.Messaging.MessageEnumerator.RemoveCurrent%2A>.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">Для параметра <paramref name="timeout" /> задано недопустимое значение.</exception>
        <exception cref="T:System.ArgumentNullException">Параметр <paramref name="transaction" /> имеет значение <see langword="null" />.</exception>
        <exception cref="T:System.Messaging.MessageQueueException">Истекло время тайм-аута.</exception>
        <altmember cref="M:System.Messaging.MessageEnumerator.MoveNext" />
        <altmember cref="P:System.Messaging.MessageEnumerator.Current" />
        <altmember cref="T:System.Messaging.MessageQueueTransaction" />
      </Docs>
    </Member>
    <Member MemberName="RemoveCurrent">
      <MemberSignature Language="C#" Value="public System.Messaging.Message RemoveCurrent (TimeSpan timeout, System.Messaging.MessageQueueTransactionType transactionType);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Messaging.Message RemoveCurrent(valuetype System.TimeSpan timeout, valuetype System.Messaging.MessageQueueTransactionType transactionType) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Messaging.MessageEnumerator.RemoveCurrent(System.TimeSpan,System.Messaging.MessageQueueTransactionType)" />
      <MemberSignature Language="VB.NET" Value="Public Function RemoveCurrent (timeout As TimeSpan, transactionType As MessageQueueTransactionType) As Message" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Messaging::Message ^ RemoveCurrent(TimeSpan timeout, System::Messaging::MessageQueueTransactionType transactionType);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Messaging</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Messaging.Message</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="timeout" Type="System.TimeSpan" />
        <Parameter Name="transactionType" Type="System.Messaging.MessageQueueTransactionType" />
      </Parameters>
      <Docs>
        <param name="timeout">Интервал времени ожидания удаления сообщения.</param>
        <param name="transactionType">Одно из значений <see cref="T:System.Messaging.MessageQueueTransactionType" />, описывающее тип контекста транзакции, связываемого с сообщением.</param>
        <summary>Удаляет текущее сообщение из очереди и возвращает сообщение в вызывающее приложение. Если имеется сообщение для удаления, этот метод возвращает его немедленно. В противном случае метод ожидает прихода нового сообщения в течение заданного времени тайм-аута.</summary>
        <returns>Объект <see cref="T:System.Messaging.Message" />, ссылающийся на первое доступное в очереди сообщение.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Messaging.MessageEnumerator.RemoveCurrent%2A> Удаляет и возвращает сообщение в текущем положении курсора, используя контекст транзакции, определяемый параметром `transactionType` параметр. Если курсор находится в конце очереди, эта перегрузка метода ожидает, пока сообщение не станет доступным или время, заданное параметром `timeout` истечет.  
  
 Укажите `Automatic` для `transactionType` параметра, если он уже существует внешний контекст транзакции, присоединенного к потоку, который вы хотите использовать для получения сообщения. Укажите `Single` Если вы хотите получить сообщение в виде единой внутренней транзакции. Можно указать `None` Если вы хотите получать сообщения из транзакционной очереди вне контекста транзакции.  
  
 При использовании журнала очереди удаление сообщения приводит к копии должны храниться в очереди журнала, так же как и <xref:System.Messaging.MessageQueue> класса <xref:System.Messaging.MessageQueue.Receive%2A> метода.  
  
 При работе с очередями транзакций, откат транзакции вызывает любые сообщения, удаленные с помощью вызова <xref:System.Messaging.MessageEnumerator.RemoveCurrent%2A> возвращается в очередь. Удаление не является необратимым до фиксации транзакции.  
  
 При удалении текущего сообщения курсор перемещается к следующему сообщению. Нет необходимости вызывать <xref:System.Messaging.MessageEnumerator.MoveNext%2A> после вызова <xref:System.Messaging.MessageEnumerator.RemoveCurrent%2A>.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">Для параметра <paramref name="timeout" /> задано недопустимое значение.</exception>
        <exception cref="T:System.Messaging.MessageQueueException">Истекло время тайм-аута.</exception>
        <exception cref="T:System.ComponentModel.InvalidEnumArgumentException">Параметр <paramref name="transactionType" /> не является одним из членов <see cref="T:System.Messaging.MessageQueueTransactionType" />.</exception>
        <altmember cref="M:System.Messaging.MessageEnumerator.MoveNext" />
        <altmember cref="P:System.Messaging.MessageEnumerator.Current" />
        <altmember cref="T:System.Messaging.MessageQueueTransactionType" />
      </Docs>
    </Member>
    <Member MemberName="Reset">
      <MemberSignature Language="C#" Value="public void Reset ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Reset() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Messaging.MessageEnumerator.Reset" />
      <MemberSignature Language="VB.NET" Value="Public Sub Reset ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void Reset();" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Collections.IEnumerator.Reset</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Messaging</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Сбрасывает текущий перечислитель, теперь он указывает на заголовок очереди.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Перечислитель может перемещаться только в прямом направлении. Используйте этот метод, чтобы начать заново в начале очереди.  
  
 После вызова метода <xref:System.Messaging.MessageEnumerator.Reset%2A>, курсор указывает на первое сообщение. Необходимо вызвать <xref:System.Messaging.MessageEnumerator.MoveNext%2A> после вызова <xref:System.Messaging.MessageEnumerator.Reset%2A> для перемещения курсора вперед на первое сообщение в очереди.  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Messaging.MessageEnumerator.MoveNext" />
        <altmember cref="P:System.Messaging.MessageEnumerator.Current" />
      </Docs>
    </Member>
    <Member MemberName="System.Collections.IEnumerator.Current">
      <MemberSignature Language="C#" Value="object System.Collections.IEnumerator.Current { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance object System.Collections.IEnumerator.Current" />
      <MemberSignature Language="DocId" Value="P:System.Messaging.MessageEnumerator.System#Collections#IEnumerator#Current" />
      <MemberSignature Language="VB.NET" Value=" ReadOnly Property Current As Object Implements IEnumerator.Current" />
      <MemberSignature Language="C++ CLI" Value="property System::Object ^ System.Collections.IEnumerator.Current { System::Object ^ get(); };" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Collections.IEnumerator.Current</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Messaging</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Возвращает объект <see cref="T:System.Messaging.Message" />, который ссылается на сообщение в текущей позиции курсора.</summary>
        <value>Объект <see cref="T:System.Messaging.Message" />, который ссылается на сообщение в текущей позиции курсора.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
  </Members>
</Type>