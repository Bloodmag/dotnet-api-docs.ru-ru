<Type Name="HttpListenerElement" FullName="System.Net.Configuration.HttpListenerElement">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="454ec0d74116246d40fbfd1ad50cc77b1d5dbb4a" />
    <Meta Name="ms.sourcegitcommit" Value="6a0b904069161bbaec4ffd02aa7d9cf38c61e72e" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="ru-RU" />
    <Meta Name="ms.lasthandoff" Value="06/24/2018" />
    <Meta Name="ms.locfileid" Value="36552993" />
  </Metadata>
  <TypeSignature Language="C#" Value="public sealed class HttpListenerElement : System.Configuration.ConfigurationElement" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed HttpListenerElement extends System.Configuration.ConfigurationElement" />
  <TypeSignature Language="DocId" Value="T:System.Net.Configuration.HttpListenerElement" />
  <TypeSignature Language="VB.NET" Value="Public NotInheritable Class HttpListenerElement&#xA;Inherits ConfigurationElement" />
  <TypeSignature Language="C++ CLI" Value="public ref class HttpListenerElement sealed : System::Configuration::ConfigurationElement" />
  <TypeSignature Language="F#" Value="type HttpListenerElement = class&#xA;    inherit ConfigurationElement" />
  <AssemblyInfo>
    <AssemblyName>System</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Configuration.ConfigurationElement</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>Представляет элемент HttpListener в файле конфигурации. Этот класс не наследуется.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Этот класс соответствует \<httpListener > Element (Network Settings) элемента конфигурации. Этот класс предоставляет программный доступ к информации, которые могут храниться в файлах конфигурации.  
  
 <xref:System.Net.Configuration.HttpListenerElement.UnescapeRequestUrl%2A> Указывает свойство, если <xref:System.Net.HttpListener> использует необработанный неэкранированный URI вместо преобразованного URI, где все значения, закодированные преобразуются и выполняются другие действия нормализации.  
  
 Когда <xref:System.Net.HttpListener> экземпляр получает запрос через `http.sys` службы, он создает экземпляр в строке URI, предоставляемые `http.sys`и предоставляет его как <xref:System.Net.HttpListenerRequest.Url%2A?displayProperty=nameWithType> свойство.  
  
 `http.sys` Служба предоставляет две строки URI запроса:  
  
-   Необработанный URI  
  
-   Преобразованный URI  
  
 Необработанный URL-адрес является <xref:System.Uri?displayProperty=nameWithType> предоставленный в строке запроса HTTP-запроса:  
  
 `GET /path/`  
  
 `Host: www.contoso.com`  
  
 Необработанный URI, предоставляемые `http.sys` для запроса, упомянутого выше, является «/ path /». Представляет строку, следующую за HTTP-командой, как она была отправлена по сети.  
  
 `http.sys` Служба создает преобразованный URI из информации, предоставленной в запросе, используя URI, предоставленный в строке запроса HTTP и заголовок узла для определения исходного сервера запроса должно быть перенаправлено в. Это делается путем сравнения сведений из запроса с набором зарегистрированных префиксов URI. В документации SDK сервера HTTP ссылается на этот преобразованный URI в качестве [HTTP_COOKED_URL](http://go.microsoft.com/fwlink/?LinkID=166108) структуры.  
  
 Чтобы иметь возможность сравнить запрос с зарегистрированными префиксами URI, необходимо сделать некоторые нормализацию в запросе. Для примера выше преобразованный URI будет следующим:  
  
 `http://www.contoso.com/path/`  
  
 `http.sys` Службы объединяет <xref:System.Uri.Host%2A?displayProperty=nameWithType> значение свойства и строки в строку запроса для создания преобразованный URI. Кроме того `http.sys` и <xref:System.Uri?displayProperty=nameWithType> класса также выполните следующие действия:  
  
-   Отмена переходов всех процентные значения.  
  
-   Преобразует закодированные символа ASCII в представление символов UTF-16. Обратите внимание, что символы UTF-8 и ANSI и DBCS поддерживаются также как знаки Юникода (кодировка Юникод с использованием формата % uXXXX).  
  
-   Выполняет другие действия нормализации, такие как сжатие пути.  
  
 Поскольку запрос не содержит никаких сведений о кодировке, используемой для закодированные значения, он может оказаться невозможно определить правильную кодировку только путем анализа закодированные значения.  
  
 Поэтому `http.sys` предоставляет два раздела реестра для изменения процесса:  
  
|Раздел реестра .|Значение по умолчанию|Описание:|  
|------------------|-------------------|-----------------|  
|EnableNonUTF8|1|Если значение равно нулю, `http.sys` принимает только URL-адреса в кодировке UTF-8.<br /><br /> Если ненулевое значение, `http.sys` также принимает кодировке ANSI или Двухбайтовой кодировке URL-адреса в запросах.|  
|FavorUTF8|1|Если ненулевое значение, `http.sys` всегда пытается расшифровать URL-адрес как UTF-8, если это преобразование завершается неудачей, и EnableNonUTF8 не равно нулю, Http.sys, а затем пытается расшифровать его как ANSI или DBCS.<br /><br /> Если значение равно нулю (и EnableNonUTF8 не равно нулю), `http.sys` пытается декодировать как ANSI или DBCS; Если этого не был выполнен успешно, он пытается преобразования UTF-8.|  
  
 Когда <xref:System.Net.HttpListener> получает запрос, он использует URI, преобразованные из `http.sys` качестве входных данных для <xref:System.Net.HttpListenerRequest.Url%2A> свойства.  
  
 Нет необходимости поддерживать символы помимо символов и цифр в URI. Примером является следующий URI, который используется для извлечения сведений клиента для клиента номер «1/3812»:  
  
 `http://www.contoso.com/Customer('1%2F3812')/`  
  
 Обратите внимание, закодированные косую черту в универсальный код ресурса (% 2F). Это необходимо, поскольку в этом случае символ косой черты представляет данные, а не является разделителем пути.  
  
 Передача строки в конструктор Uri приведет к следующим URI:  
  
 `http://www.contoso.com/Customer('1/3812')/`  
  
 Разделение на сегменты пути приведет к появлению следующих элементов:  
  
 `Customer('1`  
  
 `3812')`  
  
 Это не является целью отправителя запроса.  
  
 Если <xref:System.Net.Configuration.HttpListenerElement.UnescapeRequestUrl%2A> задано значение false, то при <xref:System.Net.HttpListener> получает запрос, он использует необработанный URI вместо преобразованного URI из `http.sys` качестве входных данных для <xref:System.Net.HttpListenerRequest.Url%2A> свойства.  
  
 ]]></format>
    </remarks>
    <altmember cref="T:System.Net.HttpListener" />
    <altmember cref="P:System.Net.HttpListenerRequest.Url" />
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public HttpListenerElement ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Configuration.HttpListenerElement.#ctor" />
      <MemberSignature Language="VB.NET" Value="Public Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; HttpListenerElement();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary>Инициализирует новый экземпляр класса <see cref="T:System.Net.Configuration.HttpListenerElement" />.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Properties">
      <MemberSignature Language="C#" Value="protected override System.Configuration.ConfigurationPropertyCollection Properties { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Configuration.ConfigurationPropertyCollection Properties" />
      <MemberSignature Language="DocId" Value="P:System.Net.Configuration.HttpListenerElement.Properties" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides ReadOnly Property Properties As ConfigurationPropertyCollection" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual property System::Configuration::ConfigurationPropertyCollection ^ Properties { System::Configuration::ConfigurationPropertyCollection ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.Properties : System.Configuration.ConfigurationPropertyCollection" Usage="System.Net.Configuration.HttpListenerElement.Properties" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Configuration.ConfigurationPropertyCollection</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>To be added.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Timeouts">
      <MemberSignature Language="C#" Value="public System.Net.Configuration.HttpListenerTimeoutsElement Timeouts { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Net.Configuration.HttpListenerTimeoutsElement Timeouts" />
      <MemberSignature Language="DocId" Value="P:System.Net.Configuration.HttpListenerElement.Timeouts" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Timeouts As HttpListenerTimeoutsElement" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Net::Configuration::HttpListenerTimeoutsElement ^ Timeouts { System::Net::Configuration::HttpListenerTimeoutsElement ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.Timeouts : System.Net.Configuration.HttpListenerTimeoutsElement" Usage="System.Net.Configuration.HttpListenerElement.Timeouts" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Configuration.ConfigurationProperty("timeouts")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Net.Configuration.HttpListenerTimeoutsElement</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Получает Элементы времени ожидания по умолчанию, используемые для объекта <see cref="T:System.Net.HttpListener" />.</summary>
        <value>Возвращает <see cref="T:System.Net.Configuration.HttpListenerTimeoutsElement" />.  Элементы времени ожидания, используемые для объекта <see cref="T:System.Net.HttpListener" />.</value>
        <remarks>To be added.</remarks>
        <altmember cref="T:System.Net.HttpListener" />
        <altmember cref="T:System.Net.HttpListenerTimeoutManager" />
        <altmember cref="T:System.Net.Configuration.HttpListenerTimeoutsElement" />
      </Docs>
    </Member>
    <Member MemberName="UnescapeRequestUrl">
      <MemberSignature Language="C#" Value="public bool UnescapeRequestUrl { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool UnescapeRequestUrl" />
      <MemberSignature Language="DocId" Value="P:System.Net.Configuration.HttpListenerElement.UnescapeRequestUrl" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property UnescapeRequestUrl As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool UnescapeRequestUrl { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.UnescapeRequestUrl : bool" Usage="System.Net.Configuration.HttpListenerElement.UnescapeRequestUrl" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Configuration.ConfigurationProperty("unescapeRequestUrl", DefaultValue=Mono.Cecil.CustomAttributeArgument, IsRequired=false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Получает значение, определяющее, использует ли <see cref="T:System.Net.HttpListener" /> не преобразованный в escape-последовательность URI вместо преобразованного.</summary>
        <value>Логическое значение, определяющее, использует ли <see cref="T:System.Net.HttpListener" /> не преобразованный в escape-последовательность URI вместо преобразованного.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Net.Configuration.HttpListenerElement.UnescapeRequestUrl%2A> Указывает свойство, если <xref:System.Net.HttpListener> использует необработанный неэкранированный URI вместо преобразованного URI, где все значения, закодированные преобразуются и выполняются другие действия нормализации.  
  
 Когда <xref:System.Net.HttpListener> экземпляр получает запрос через `http.sys` службы, он создает экземпляр в строке URI, предоставляемые `http.sys`и предоставляет его как <xref:System.Net.HttpListenerRequest.Url%2A?displayProperty=nameWithType> свойство.  
  
 `http.sys` Служба предоставляет две строки URI запроса:  
  
-   Необработанный URI  
  
-   Преобразованный URI  
  
 Необработанный URL-адрес является <xref:System.Uri?displayProperty=nameWithType> предоставленный в строке запроса HTTP-запроса:  
  
 `GET /path/`  
  
 `Host: www.contoso.com`  
  
 Необработанный URI, предоставляемые `http.sys` для запроса, упомянутого выше, является «/ path /». Представляет строку, следующую за HTTP-командой, как она была отправлена по сети.  
  
 `http.sys` Служба создает преобразованный URI из информации, предоставленной в запросе, используя URI, предоставленный в строке запроса HTTP и заголовок узла для определения исходного сервера запроса должно быть перенаправлено в. Это делается путем сравнения сведений из запроса с набором зарегистрированных префиксов URI. В документации SDK сервера HTTP ссылается на этот преобразованный URI в качестве [HTTP_COOKED_URL](http://go.microsoft.com/fwlink/?LinkID=166108) структуры.  
  
 Чтобы иметь возможность сравнить запрос с зарегистрированными префиксами URI, необходимо сделать некоторые нормализацию в запросе. Для примера выше преобразованный URI будет следующим:  
  
 `http://www.contoso.com/path/`  
  
 `http.sys` Службы объединяет <xref:System.Uri.Host%2A?displayProperty=nameWithType> значение свойства и строки в строку запроса для создания преобразованный URI. Кроме того `http.sys` и <xref:System.Uri?displayProperty=nameWithType> класса также выполните следующие действия:  
  
-   Отмена переходов всех процентные значения.  
  
-   Преобразует закодированные символа ASCII в представление символов UTF-16. Обратите внимание, что символы UTF-8 и ANSI и DBCS поддерживаются также как знаки Юникода (кодировка Юникод с использованием формата % uXXXX).  
  
-   Выполняет другие действия нормализации, такие как сжатие пути.  
  
 Поскольку запрос не содержит никаких сведений о кодировке, используемой для закодированные значения, он может оказаться невозможно определить правильную кодировку только путем анализа закодированные значения.  
  
 Поэтому `http.sys` предоставляет два раздела реестра для изменения процесса:  
  
|Раздел реестра .|Значение по умолчанию|Описание:|  
|------------------|-------------------|-----------------|  
|EnableNonUTF8|1|Если значение равно нулю, `http.sys` принимает только URL-адреса в кодировке UTF-8.<br /><br /> Если ненулевое значение, `http.sys` также принимает кодировке ANSI или Двухбайтовой кодировке URL-адреса в запросах.|  
|FavorUTF8|1|Если ненулевое значение, `http.sys` всегда пытается расшифровать URL-адрес как UTF-8, если это преобразование завершается неудачей, и EnableNonUTF8 не равно нулю, Http.sys, а затем пытается расшифровать его как ANSI или DBCS.<br /><br /> Если значение равно нулю (и EnableNonUTF8 не равно нулю), `http.sys` пытается декодировать как ANSI или DBCS; Если этого не был выполнен успешно, он пытается преобразования UTF-8.|  
  
 Когда <xref:System.Net.HttpListener> получает запрос, он использует URI, преобразованные из `http.sys` качестве входных данных для <xref:System.Net.HttpListenerRequest.Url%2A> свойства.  
  
 Нет необходимости поддерживать символы помимо символов и цифр в URI. Примером является следующий URI, который используется для извлечения сведений клиента для клиента номер «1/3812»:  
  
 `http://www.contoso.com/Customer('1%2F3812')/`  
  
 Обратите внимание, закодированные косую черту в универсальный код ресурса (% 2F). Это необходимо, поскольку в этом случае символ косой черты представляет данные, а не является разделителем пути.  
  
 Передача строки в конструктор Uri приведет к следующим URI:  
  
 `http://www.contoso.com/Customer('1/3812')/`  
  
 Разделение на сегменты пути приведет к появлению следующих элементов:  
  
 `Customer('1`  
  
 `3812')`  
  
 Это не является целью отправителя запроса.  
  
 Если <xref:System.Net.Configuration.HttpListenerElement.UnescapeRequestUrl%2A> задано значение false, то при <xref:System.Net.HttpListener> получает запрос, он использует необработанный URI вместо преобразованного URI из `http.sys` качестве входных данных для <xref:System.Net.HttpListenerRequest.Url%2A> свойства.  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Net.HttpListener" />
        <altmember cref="P:System.Net.HttpListenerRequest.Url" />
      </Docs>
    </Member>
  </Members>
</Type>