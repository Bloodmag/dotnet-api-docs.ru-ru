<Type Name="NegotiateStream" FullName="System.Net.Security.NegotiateStream">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="c14dd401696189bb315395ed828de5f1c0c89ba3" />
    <Meta Name="ms.sourcegitcommit" Value="d31dc2ede16f6f7bc64e90d9f897ff54c4e3869b" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="ru-RU" />
    <Meta Name="ms.lasthandoff" Value="04/03/2018" />
    <Meta Name="ms.locfileid" Value="30461138" />
  </Metadata>
  <TypeSignature Language="C#" Value="public class NegotiateStream : System.Net.Security.AuthenticatedStream" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit NegotiateStream extends System.Net.Security.AuthenticatedStream" />
  <TypeSignature Language="DocId" Value="T:System.Net.Security.NegotiateStream" />
  <TypeSignature Language="VB.NET" Value="Public Class NegotiateStream&#xA;Inherits AuthenticatedStream" />
  <TypeSignature Language="C++ CLI" Value="public ref class NegotiateStream : System::Net::Security::AuthenticatedStream" />
  <AssemblyInfo>
    <AssemblyName>System.Net.Security</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.1.0.0</AssemblyVersion>
    <AssemblyVersion>4.1.1.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>System</AssemblyName>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Net.Security.AuthenticatedStream</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>Предоставляет поток, использующий протокол безопасности Negotiate для проверки подлинности клиента, и, при необходимости, сервера при обмене данными в системе клиент-сервер.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Используйте <xref:System.Net.Security.NegotiateStream> класс для проверки подлинности и защиты данных, передаваемых между клиентом и сервером. С помощью <xref:System.Net.Security.NegotiateStream>, можно сделать следующее.  
  
-   Отправьте учетные данные клиента на сервер для олицетворения или делегирования.  
  
-   Запрос проверки подлинности сервера.  
  
-   Шифрование и/или подписать данные перед их передачей.  
  
 Перед передачей данных проверки подлинности. Клиенты запрашивают проверку подлинности с использованием синхронный <xref:System.Net.Security.NegotiateStream.AuthenticateAsClient%2A> методы, которые блокировать поток до завершения проверки подлинности, или асинхронную <xref:System.Net.Security.NegotiateStream.BeginAuthenticateAsClient%2A> методы, которые не блокируются во время ожидания для проверки подлинности для завершения. Серверы запросов проверки подлинности с использованием синхронный <xref:System.Net.Security.NegotiateStream.AuthenticateAsServer%2A> или асинхронным <xref:System.Net.Security.NegotiateStream.BeginAuthenticateAsServer%2A> методы. Клиент и при необходимости сервер проходит проверку подлинности с помощью протокола безопасности Negotiate. В системах Windows 95/98 Windows NT LAN Manager (NTLM) — протокол, используемый для проверки подлинности. На других платформах Kerberos протокол используется для проверки подлинности, если клиент и сервер поддерживают в противном случае используется NTLM. Подробные описания этих протоколов см. в документации Platform SDK в MSDN, в msdn.microsoft.com/library/. <xref:System.Net.Security.NegotiateStream> Класс выполняет проверку подлинности с использованием интерфейса поставщика поддержки безопасности (SSPI).  
  
 При успешной проверке подлинности, необходимо проверить <xref:System.Net.Security.NegotiateStream.IsEncrypted%2A> и <xref:System.Net.Security.NegotiateStream.IsSigned%2A> будет использовать свойства и определить, какие службы безопасности <xref:System.Net.Security.NegotiateStream> для защиты данных во время передачи. Проверьте <xref:System.Net.Security.NegotiateStream.IsMutuallyAuthenticated%2A> свойства, чтобы определить, выполнена ли взаимная проверка подлинности. Можно получить сведения о удаленного клиента или сервера с помощью <xref:System.Net.Security.NegotiateStream.RemoteIdentity%2A> свойство.  
  
 При сбое проверки подлинности, вы получите <xref:System.Security.Authentication.AuthenticationException> или <xref:System.Security.Authentication.InvalidCredentialException>. В этом случае можно повторить попытку с другими учетными данными проверки подлинности.  
  
 Отправить данные, используя синхронный <xref:System.Net.Security.NegotiateStream.Write%2A> или асинхронным <xref:System.Net.Security.NegotiateStream.BeginWrite%2A> методы. Для получения данных, используя синхронный <xref:System.Net.Security.NegotiateStream.Read%2A> или асинхронным <xref:System.Net.Security.NegotiateStream.BeginRead%2A> методы. Если службы безопасности, такие как шифрование или подписывание включены, они автоматически применяется ко данных путем <xref:System.Net.Security.NegotiateStream>.  
  
 <xref:System.Net.Security.NegotiateStream> Передает данные с помощью потока, указываемое при создании <xref:System.Net.Security.NegotiateStream>. При указании этого базового потока, у вас есть возможность указать, является ли закрытие <xref:System.Net.Security.NegotiateStream> также закрывает основной поток.  
  
   
  
## Examples  
 В следующем примере кода показано, на стороне клиента для подключения клиент сервер, использующего <xref:System.Net.Security.NegotiateStream>. Клиент выполняет проверку подлинности и асинхронно отправляет сообщение на сервер.  
  
 [!code-cpp[NclNegoAsyncClient#0](~/samples/snippets/cpp/VS_Snippets_Remoting/NclNegoasyncClient/CPP/NclNegoasyncClient.cpp#0)]
 [!code-csharp[NclNegoAsyncClient#0](~/samples/snippets/csharp/VS_Snippets_Remoting/NclNegoasyncClient/CS/client.cs#0)]  
  
 В следующем примере кода демонстрируется серверную часть соединения клиент сервер, который использует <xref:System.Net.Security.NegotiateStream> для проверки подлинности клиента и чтения сообщений, отправленных клиентом.  
  
 [!code-cpp[NclNegoAsyncServer#0](~/samples/snippets/cpp/VS_Snippets_Remoting/NclNegoAsyncServer/CPP/NclNegoAsyncServer.cpp#0)]
 [!code-csharp[NclNegoAsyncServer#0](~/samples/snippets/csharp/VS_Snippets_Remoting/NclNegoAsyncServer/CS/server.cs#0)]  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <MemberGroup MemberName=".ctor">
      <AssemblyInfo>
        <AssemblyName>System.Net.Security</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Инициализирует новый экземпляр класса <see cref="T:System.Net.Security.NegotiateStream" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Чтобы предотвратить <xref:System.Net.Security.NegotiateStream> из закрытие потока, который указывается, использовать <xref:System.Net.Security.NegotiateStream.%23ctor%28System.IO.Stream%2CSystem.Boolean%29> конструктор.  
  
 ]]></format>
        </remarks>
      </Docs>
    </MemberGroup>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public NegotiateStream (System.IO.Stream innerStream);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.IO.Stream innerStream) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Security.NegotiateStream.#ctor(System.IO.Stream)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (innerStream As Stream)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; NegotiateStream(System::IO::Stream ^ innerStream);" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Security</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.MonoTODO</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters>
        <Parameter Name="innerStream" Type="System.IO.Stream" />
      </Parameters>
      <Docs>
        <param name="innerStream">Объект <see cref="T:System.IO.Stream" />, используемый потоком <see cref="T:System.Net.Security.NegotiateStream" /> для отправки и получения данных.</param>
        <summary>Инициализирует новый экземпляр класса <see cref="T:System.Net.Security.NegotiateStream" /> с использованием указанного объекта <see cref="T:System.IO.Stream" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 В следующем примере кода демонстрируется вызов этого конструктора.  
  
 [!code-cpp[NclNegoSyncClient#3](~/samples/snippets/cpp/VS_Snippets_Remoting/NclNegoSyncClient/CPP/NclNegoSyncClient.cpp#3)]
 [!code-csharp[NclNegoSyncClient#3](~/samples/snippets/csharp/VS_Snippets_Remoting/NclNegoSyncClient/CS/client.cs#3)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public NegotiateStream (System.IO.Stream innerStream, bool leaveInnerStreamOpen);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.IO.Stream innerStream, bool leaveInnerStreamOpen) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Security.NegotiateStream.#ctor(System.IO.Stream,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (innerStream As Stream, leaveInnerStreamOpen As Boolean)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; NegotiateStream(System::IO::Stream ^ innerStream, bool leaveInnerStreamOpen);" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Security</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.MonoTODO</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters>
        <Parameter Name="innerStream" Type="System.IO.Stream" />
        <Parameter Name="leaveInnerStreamOpen" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="innerStream">Объект <see cref="T:System.IO.Stream" />, используемый потоком <see cref="T:System.Net.Security.NegotiateStream" /> для отправки и получения данных.</param>
        <param name="leaveInnerStreamOpen">
          Значение <see langword="true" /> указывает, что закрытие этого потока <see cref="T:System.Net.Security.NegotiateStream" /> не влияет на поток, заданный параметром <c>innerstream</c>; значение <see langword="false" /> указывает, что закрытие потока <see cref="T:System.Net.Security.NegotiateStream" /> приводит также к закрытию потока <c>innerStream</c>.</param>
        <summary>Инициализирует новый экземпляр класса <see cref="T:System.Net.Security.NegotiateStream" />, используя заданный поток <see cref="T:System.IO.Stream" /> и параметр, указывающий поведение потока при закрытии.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 При указании `true` для `leaveStreamOpen` параметра, закрытие <xref:System.Net.Security.NegotiateStream> не оказывает влияния на `innerStream` потока; необходимо явно закрыть `innerStream` при больше не необходимости.  
  
   
  
## Examples  
 В следующем примере кода демонстрируется вызов этого конструктора. Данный пример кода является частью большего примера, приведенного для <xref:System.Net.Security.NegotiateStream> класса.  
  
 [!code-cpp[NclNegoAsyncClient#1](~/samples/snippets/cpp/VS_Snippets_Remoting/NclNegoasyncClient/CPP/NclNegoasyncClient.cpp#1)]
 [!code-csharp[NclNegoAsyncClient#1](~/samples/snippets/csharp/VS_Snippets_Remoting/NclNegoasyncClient/CS/client.cs#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          Свойство <paramref name="innerStream" /> имеет значение <see langword="null" />.  
  
 \- или -  
  
 <paramref name="innerStream" /> равно <see cref="F:System.IO.Stream.Null" />.</exception>
      </Docs>
    </Member>
    <MemberGroup MemberName="AuthenticateAsClient">
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Вызывается клиентами для проверки подлинности клиента и, при необходимости, сервера в соединении клиент-сервер.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="AuthenticateAsClient">
      <MemberSignature Language="C#" Value="public virtual void AuthenticateAsClient ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void AuthenticateAsClient() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Security.NegotiateStream.AuthenticateAsClient" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub AuthenticateAsClient ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void AuthenticateAsClient();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.Security</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.MonoTODO</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Вызывается клиентами для проверки подлинности клиента и, при необходимости, сервера в соединении клиент-сервер.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Проверка подлинности использует клиент <xref:System.Net.CredentialCache.DefaultCredentials%2A>. Нет имя участника службы (SPN), указанную для сервера. Уровень олицетворения равен <xref:System.Security.Principal.TokenImpersonationLevel.Identification>, уровень безопасности при <xref:System.Net.Security.ProtectionLevel.EncryptAndSign>, и запрашивается взаимной проверки подлинности. <xref:System.Net.Security.NegotiateStream> Класс создает имя участника-службы, используемого для взаимной проверки подлинности.  
  
 При успешной проверке подлинности, необходимо проверить <xref:System.Net.Security.NegotiateStream.IsEncrypted%2A> и <xref:System.Net.Security.NegotiateStream.IsSigned%2A> свойства, чтобы определить, какие службы безопасности используются <xref:System.Net.Security.NegotiateStream>. Проверьте <xref:System.Net.Security.NegotiateStream.IsMutuallyAuthenticated%2A> свойства, чтобы определить, выполнена ли взаимная проверка подлинности.  
  
 Если происходит сбой проверки подлинности, вы получите <xref:System.Security.Authentication.AuthenticationException> или <xref:System.Security.Authentication.InvalidCredentialException>. В этом случае можно повторить попытку с другими учетными данными проверки подлинности.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Security.Authentication.AuthenticationException">Сбой проверки подлинности. Этот объект можно использовать для повторной проверки подлинности.</exception>
        <exception cref="T:System.Security.Authentication.InvalidCredentialException">Сбой проверки подлинности. Этот объект можно использовать для повторной проверки подлинности.</exception>
        <exception cref="T:System.ObjectDisposedException">Объект закрыт.</exception>
        <exception cref="T:System.InvalidOperationException">Проверка подлинности уже выполнена.  
  
 \- или -  
  
 Этот поток уже использовался ранее при попытке проверки подлинности со стороны сервера. Этот поток нельзя использовать для повторной проверки подлинности со стороны клиента.</exception>
        <permission cref="T:System.Security.Permissions.SecurityPermission">для использования явное <see cref="T:System.Net.NetworkCredential" />. Связанное перечисление: <see cref="F:System.Security.Permissions.SecurityPermissionFlag.ControlPrincipal" />.</permission>
      </Docs>
    </Member>
    <Member MemberName="AuthenticateAsClient">
      <MemberSignature Language="C#" Value="public virtual void AuthenticateAsClient (System.Net.NetworkCredential credential, string targetName);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void AuthenticateAsClient(class System.Net.NetworkCredential credential, string targetName) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Security.NegotiateStream.AuthenticateAsClient(System.Net.NetworkCredential,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub AuthenticateAsClient (credential As NetworkCredential, targetName As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void AuthenticateAsClient(System::Net::NetworkCredential ^ credential, System::String ^ targetName);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.Security</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.MonoTODO</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="credential" Type="System.Net.NetworkCredential" />
        <Parameter Name="targetName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="credential">Учетные данные <see cref="T:System.Net.NetworkCredential" />, используемые для установления идентификации клиента.</param>
        <param name="targetName">Имя участника-службы (SPN), уникально определяющее сервер, подлинность которого проверяется.</param>
        <summary>Вызывается клиентами для проверки подлинности клиента и, при необходимости, сервера в соединении клиент-сервер. Процесс проверки подлинности использует заданные учетные данные клиента.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Уровень олицетворения равен <xref:System.Security.Principal.TokenImpersonationLevel.Identification>, уровень безопасности при <xref:System.Net.Security.ProtectionLevel.EncryptAndSign>, и запрашивается взаимной проверки подлинности. <xref:System.Net.Security.NegotiateStream> Класс создает имя участника-службы, используемого для взаимной проверки подлинности.  
  
 При успешной проверке подлинности, необходимо проверить <xref:System.Net.Security.NegotiateStream.IsEncrypted%2A> и <xref:System.Net.Security.NegotiateStream.IsSigned%2A> свойства, чтобы определить, какие службы безопасности используются <xref:System.Net.Security.NegotiateStream>. Проверьте <xref:System.Net.Security.NegotiateStream.IsMutuallyAuthenticated%2A> свойства, чтобы определить, выполнена ли взаимная проверка подлинности.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Security.Authentication.AuthenticationException">Сбой проверки подлинности. Этот объект можно использовать для повторной проверки подлинности.</exception>
        <exception cref="T:System.Security.Authentication.InvalidCredentialException">Сбой проверки подлинности. Этот объект можно использовать для повторной проверки подлинности.</exception>
        <exception cref="T:System.ObjectDisposedException">Объект закрыт.</exception>
        <exception cref="T:System.InvalidOperationException">Проверка подлинности уже выполнена.  
  
 \- или -  
  
 Этот поток уже использовался ранее при попытке проверки подлинности со стороны сервера. Этот поток нельзя использовать для повторной проверки подлинности со стороны клиента.</exception>
        <exception cref="T:System.ArgumentNullException">
          Свойство <paramref name="targetName" /> имеет значение <see langword="null" />.</exception>
        <permission cref="T:System.Security.Permissions.SecurityPermission">для использования явное <see cref="T:System.Net.NetworkCredential" />. Связанное перечисление: <see cref="F:System.Security.Permissions.SecurityPermissionFlag.ControlPrincipal" />.</permission>
      </Docs>
    </Member>
    <Member MemberName="AuthenticateAsClient">
      <MemberSignature Language="C#" Value="public virtual void AuthenticateAsClient (System.Net.NetworkCredential credential, System.Security.Authentication.ExtendedProtection.ChannelBinding binding, string targetName);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void AuthenticateAsClient(class System.Net.NetworkCredential credential, class System.Security.Authentication.ExtendedProtection.ChannelBinding binding, string targetName) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Security.NegotiateStream.AuthenticateAsClient(System.Net.NetworkCredential,System.Security.Authentication.ExtendedProtection.ChannelBinding,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub AuthenticateAsClient (credential As NetworkCredential, binding As ChannelBinding, targetName As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void AuthenticateAsClient(System::Net::NetworkCredential ^ credential, System::Security::Authentication::ExtendedProtection::ChannelBinding ^ binding, System::String ^ targetName);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.Security</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.MonoTODO</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="credential" Type="System.Net.NetworkCredential" />
        <Parameter Name="binding" Type="System.Security.Authentication.ExtendedProtection.ChannelBinding" />
        <Parameter Name="targetName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="credential">Учетные данные <see cref="T:System.Net.NetworkCredential" />, используемые для установления идентификации клиента.</param>
        <param name="binding">Объект <see cref="T:System.Security.Authentication.ExtendedProtection.ChannelBinding" />, который используется для расширенной защиты.</param>
        <param name="targetName">Имя участника-службы (SPN), уникально определяющее сервер, подлинность которого проверяется.</param>
        <summary>Вызывается клиентами для проверки подлинности клиента и, при необходимости, сервера в соединении клиент-сервер. Процесс проверки подлинности использует заданные учетные данные клиента и привязку канала.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Уровень олицетворения равен <xref:System.Security.Principal.TokenImpersonationLevel.Identification>, уровень безопасности при <xref:System.Net.Security.ProtectionLevel.EncryptAndSign>, и запрашивается взаимной проверки подлинности. <xref:System.Net.Security.NegotiateStream> Класс создает имя участника-службы, используемого для взаимной проверки подлинности.  
  
 <xref:System.Security.Authentication.ExtendedProtection.ChannelBinding> Используется для расширенной защиты, который передается методу в `binding` параметр будет вызываться из приложения <xref:System.Net.Security.SslStream.TransportContext%2A> свойства в связанном <xref:System.Net.Security.SslStream>.  
  
 При успешной проверке подлинности, необходимо проверить <xref:System.Net.Security.NegotiateStream.IsEncrypted%2A> и <xref:System.Net.Security.NegotiateStream.IsSigned%2A> свойства, чтобы определить, какие службы безопасности используются <xref:System.Net.Security.NegotiateStream>. Проверьте <xref:System.Net.Security.NegotiateStream.IsMutuallyAuthenticated%2A> свойства, чтобы определить, выполнена ли взаимная проверка подлинности.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          Свойство <paramref name="targetName" /> имеет значение <see langword="null" />.  
  
 \- или -  
  
 Свойство <paramref name="credential" /> имеет значение <see langword="null" />.</exception>
        <exception cref="T:System.Security.Authentication.AuthenticationException">Сбой проверки подлинности. Этот объект можно использовать для повторной проверки подлинности.</exception>
        <exception cref="T:System.Security.Authentication.InvalidCredentialException">Сбой проверки подлинности. Этот объект можно использовать для повторной проверки подлинности.</exception>
        <exception cref="T:System.InvalidOperationException">Проверка подлинности уже выполнена.  
  
 \- или -  
  
 Этот поток уже использовался ранее при попытке проверки подлинности со стороны сервера. Этот поток нельзя использовать для повторной проверки подлинности со стороны клиента.</exception>
        <exception cref="T:System.ObjectDisposedException">Объект закрыт.</exception>
        <altmember cref="T:System.Security.Authentication.ExtendedProtection.ChannelBinding" />
      </Docs>
    </Member>
    <Member MemberName="AuthenticateAsClient">
      <MemberSignature Language="C#" Value="public virtual void AuthenticateAsClient (System.Net.NetworkCredential credential, string targetName, System.Net.Security.ProtectionLevel requiredProtectionLevel, System.Security.Principal.TokenImpersonationLevel allowedImpersonationLevel);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void AuthenticateAsClient(class System.Net.NetworkCredential credential, string targetName, valuetype System.Net.Security.ProtectionLevel requiredProtectionLevel, valuetype System.Security.Principal.TokenImpersonationLevel allowedImpersonationLevel) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Security.NegotiateStream.AuthenticateAsClient(System.Net.NetworkCredential,System.String,System.Net.Security.ProtectionLevel,System.Security.Principal.TokenImpersonationLevel)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub AuthenticateAsClient (credential As NetworkCredential, targetName As String, requiredProtectionLevel As ProtectionLevel, allowedImpersonationLevel As TokenImpersonationLevel)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void AuthenticateAsClient(System::Net::NetworkCredential ^ credential, System::String ^ targetName, System::Net::Security::ProtectionLevel requiredProtectionLevel, System::Security::Principal::TokenImpersonationLevel allowedImpersonationLevel);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.Security</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.MonoTODO</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="credential" Type="System.Net.NetworkCredential" />
        <Parameter Name="targetName" Type="System.String" />
        <Parameter Name="requiredProtectionLevel" Type="System.Net.Security.ProtectionLevel" />
        <Parameter Name="allowedImpersonationLevel" Type="System.Security.Principal.TokenImpersonationLevel" />
      </Parameters>
      <Docs>
        <param name="credential">Учетные данные <see cref="T:System.Net.NetworkCredential" />, используемые для установления идентификации клиента.</param>
        <param name="targetName">Имя участника-службы (SPN), уникально определяющее сервер, подлинность которого проверяется.</param>
        <param name="requiredProtectionLevel">Одно из значений перечисления <see cref="T:System.Net.Security.ProtectionLevel" />, указывающее службы безопасности для потока.</param>
        <param name="allowedImpersonationLevel">Одно из значений перечисления <see cref="T:System.Security.Principal.TokenImpersonationLevel" />, указывающее, как сервер может использовать учетные записи клиента для доступа к ресурсам.</param>
        <summary>Вызывается клиентами для проверки подлинности клиента и, при необходимости, сервера в соединении клиент-сервер. Процесс проверки подлинности использует заданные учетные данные сервера и параметры проверки подлинности.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Используйте `requiredProtectionLevel` параметр для запроса служб безопасности для данных, передаваемых с помощью потока с выполненной проверкой подлинности. Например, чтобы данные шифруются и подписываются, укажите <xref:System.Net.Security.ProtectionLevel.EncryptAndSign> значение. Для успешной проверки подлинности не гарантируют того, запрошенный <xref:System.Net.Security.ProtectionLevel> были предоставлены. Необходимо проверить <xref:System.Net.Security.NegotiateStream.IsEncrypted%2A> и <xref:System.Net.Security.NegotiateStream.IsSigned%2A> свойства, чтобы определить, какие службы безопасности используются <xref:System.Net.Security.NegotiateStream>.  
  
 Если происходит сбой проверки подлинности, вы получите <xref:System.Security.Authentication.AuthenticationException> или <xref:System.Security.Authentication.InvalidCredentialException>. В этом случае можно повторить попытку с другими учетными данными проверки подлинности.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <paramref name="allowedImpersonationLevel" /> не является допустимым значением.</exception>
        <exception cref="T:System.ArgumentNullException">
          Параметр <paramref name="targetName" /> имеет значение null.</exception>
        <exception cref="T:System.Security.Authentication.AuthenticationException">Сбой проверки подлинности. Этот объект можно использовать для повторной проверки подлинности.</exception>
        <exception cref="T:System.Security.Authentication.InvalidCredentialException">Сбой проверки подлинности. Этот объект можно использовать для повторной проверки подлинности.</exception>
        <exception cref="T:System.ObjectDisposedException">Объект закрыт.</exception>
        <exception cref="T:System.InvalidOperationException">Проверка подлинности уже выполнена.  
  
 \- или -  
  
 Этот поток уже использовался ранее при попытке проверки подлинности со стороны сервера. Этот поток нельзя использовать для повторной проверки подлинности со стороны клиента.</exception>
        <permission cref="T:System.Security.Permissions.SecurityPermission">для использования явное <see cref="T:System.Net.NetworkCredential" />. Связанное перечисление: <see cref="F:System.Security.Permissions.SecurityPermissionFlag.ControlPrincipal" />.</permission>
      </Docs>
    </Member>
    <Member MemberName="AuthenticateAsClient">
      <MemberSignature Language="C#" Value="public virtual void AuthenticateAsClient (System.Net.NetworkCredential credential, System.Security.Authentication.ExtendedProtection.ChannelBinding binding, string targetName, System.Net.Security.ProtectionLevel requiredProtectionLevel, System.Security.Principal.TokenImpersonationLevel allowedImpersonationLevel);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void AuthenticateAsClient(class System.Net.NetworkCredential credential, class System.Security.Authentication.ExtendedProtection.ChannelBinding binding, string targetName, valuetype System.Net.Security.ProtectionLevel requiredProtectionLevel, valuetype System.Security.Principal.TokenImpersonationLevel allowedImpersonationLevel) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Security.NegotiateStream.AuthenticateAsClient(System.Net.NetworkCredential,System.Security.Authentication.ExtendedProtection.ChannelBinding,System.String,System.Net.Security.ProtectionLevel,System.Security.Principal.TokenImpersonationLevel)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub AuthenticateAsClient (credential As NetworkCredential, binding As ChannelBinding, targetName As String, requiredProtectionLevel As ProtectionLevel, allowedImpersonationLevel As TokenImpersonationLevel)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void AuthenticateAsClient(System::Net::NetworkCredential ^ credential, System::Security::Authentication::ExtendedProtection::ChannelBinding ^ binding, System::String ^ targetName, System::Net::Security::ProtectionLevel requiredProtectionLevel, System::Security::Principal::TokenImpersonationLevel allowedImpersonationLevel);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.Security</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.MonoTODO</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="credential" Type="System.Net.NetworkCredential" />
        <Parameter Name="binding" Type="System.Security.Authentication.ExtendedProtection.ChannelBinding" />
        <Parameter Name="targetName" Type="System.String" />
        <Parameter Name="requiredProtectionLevel" Type="System.Net.Security.ProtectionLevel" />
        <Parameter Name="allowedImpersonationLevel" Type="System.Security.Principal.TokenImpersonationLevel" />
      </Parameters>
      <Docs>
        <param name="credential">Учетные данные <see cref="T:System.Net.NetworkCredential" />, используемые для установления идентификации клиента.</param>
        <param name="binding">Объект <see cref="T:System.Security.Authentication.ExtendedProtection.ChannelBinding" />, который используется для расширенной защиты.</param>
        <param name="targetName">Имя участника-службы (SPN), уникально определяющее сервер, подлинность которого проверяется.</param>
        <param name="requiredProtectionLevel">Одно из значений перечисления <see cref="T:System.Net.Security.ProtectionLevel" />, указывающее службы безопасности для потока.</param>
        <param name="allowedImpersonationLevel">Одно из значений перечисления <see cref="T:System.Security.Principal.TokenImpersonationLevel" />, указывающее, как сервер может использовать учетные записи клиента для доступа к ресурсам.</param>
        <summary>Вызывается клиентами для проверки подлинности клиента и, при необходимости, сервера в соединении клиент-сервер. Процесс проверки подлинности использует заданные учетные данные, параметры проверки подлинности и привязку канала.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Используйте `requiredProtectionLevel` параметр для запроса служб безопасности для данных, передаваемых с помощью потока с выполненной проверкой подлинности. Например, чтобы данные шифруются и подписываются, укажите <xref:System.Net.Security.ProtectionLevel.EncryptAndSign> значение. Для успешной проверки подлинности не гарантируют того, запрошенный <xref:System.Net.Security.ProtectionLevel> были предоставлены. Необходимо проверить <xref:System.Net.Security.NegotiateStream.IsEncrypted%2A> и <xref:System.Net.Security.NegotiateStream.IsSigned%2A> свойства, чтобы определить, какие службы безопасности используются <xref:System.Net.Security.NegotiateStream>.  
  
 <xref:System.Security.Authentication.ExtendedProtection.ChannelBinding> Используется для расширенной защиты, который передается методу в `binding` параметр будет вызываться из приложения <xref:System.Net.Security.SslStream.TransportContext%2A> свойства в связанном <xref:System.Net.Security.SslStream>.  
  
 Если происходит сбой проверки подлинности, вы получите <xref:System.Security.Authentication.AuthenticationException> или <xref:System.Security.Authentication.InvalidCredentialException>. В этом случае можно повторить попытку с другими учетными данными проверки подлинности.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          Свойство <paramref name="targetName" /> имеет значение <see langword="null" />.  
  
 \- или -  
  
 Свойство <paramref name="credential" /> имеет значение <see langword="null" />.</exception>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <paramref name="allowedImpersonationLevel" /> не является допустимым значением.</exception>
        <exception cref="T:System.Security.Authentication.AuthenticationException">Сбой проверки подлинности. Этот объект можно использовать для повторной проверки подлинности.</exception>
        <exception cref="T:System.Security.Authentication.InvalidCredentialException">Сбой проверки подлинности. Этот объект можно использовать для повторной проверки подлинности.</exception>
        <exception cref="T:System.InvalidOperationException">Проверка подлинности уже выполнена.  
  
 \- или -  
  
 Этот поток уже использовался ранее при попытке проверки подлинности со стороны сервера. Этот поток нельзя использовать для повторной проверки подлинности со стороны клиента.</exception>
        <exception cref="T:System.ObjectDisposedException">Объект закрыт.</exception>
        <altmember cref="T:System.Security.Authentication.ExtendedProtection.ChannelBinding" />
      </Docs>
    </Member>
    <MemberGroup MemberName="AuthenticateAsClientAsync">
      <AssemblyInfo>
        <AssemblyName>System.Net.Security</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Вызывается клиентами аутентификации клиента, и, при необходимости, сервера в соединении клиент-сервер как асинхронная операция.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="AuthenticateAsClientAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task AuthenticateAsClientAsync ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task AuthenticateAsClientAsync() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Security.NegotiateStream.AuthenticateAsClientAsync" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function AuthenticateAsClientAsync () As Task" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::Threading::Tasks::Task ^ AuthenticateAsClientAsync();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Security</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Вызывается клиентами аутентификации клиента, и, при необходимости, сервера в соединении клиент-сервер как асинхронная операция.</summary>
        <returns>Возвращает <see cref="T:System.Threading.Tasks.Task" />.  
  
 Объект задачи, представляющий асинхронную операцию.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Проверка подлинности использует клиент <xref:System.Net.CredentialCache.DefaultCredentials%2A>. Нет имя участника службы (SPN), указанную для сервера. Уровень олицетворения равен <xref:System.Security.Principal.TokenImpersonationLevel.Identification>, уровень безопасности при <xref:System.Net.Security.ProtectionLevel.EncryptAndSign>, и запрашивается взаимной проверки подлинности. <xref:System.Net.Security.NegotiateStream> Класс создает имя участника-службы, используемого для взаимной проверки подлинности.  
  
 При успешной проверке подлинности, необходимо проверить <xref:System.Net.Security.NegotiateStream.IsEncrypted%2A> и <xref:System.Net.Security.NegotiateStream.IsSigned%2A> свойства, чтобы определить, какие службы безопасности используются <xref:System.Net.Security.NegotiateStream>. Проверьте <xref:System.Net.Security.NegotiateStream.IsMutuallyAuthenticated%2A> свойства, чтобы определить, выполнена ли взаимная проверка подлинности.  
  
 Если происходит сбой проверки подлинности, вы получите <xref:System.Security.Authentication.AuthenticationException> или <xref:System.Security.Authentication.InvalidCredentialException>. В этом случае можно повторить попытку с другими учетными данными проверки подлинности.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Security.Authentication.AuthenticationException">Сбой проверки подлинности. Этот объект можно использовать для повторной проверки подлинности.</exception>
        <exception cref="T:System.Security.Authentication.InvalidCredentialException">Сбой проверки подлинности. Этот объект можно использовать для повторной проверки подлинности.</exception>
        <exception cref="T:System.ObjectDisposedException">Объект закрыт.</exception>
        <exception cref="T:System.InvalidOperationException">Проверка подлинности уже выполнена.  
  
 \- или -  
  
 Этот поток уже использовался ранее при попытке проверки подлинности со стороны сервера. Этот поток нельзя использовать для повторной проверки подлинности со стороны клиента.</exception>
        <permission cref="T:System.Security.Permissions.SecurityPermission">для использования явное <see cref="T:System.Net.NetworkCredential" />. Связанное перечисление: <see cref="F:System.Security.Permissions.SecurityPermissionFlag.ControlPrincipal" />.</permission>
      </Docs>
    </Member>
    <Member MemberName="AuthenticateAsClientAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task AuthenticateAsClientAsync (System.Net.NetworkCredential credential, string targetName);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task AuthenticateAsClientAsync(class System.Net.NetworkCredential credential, string targetName) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Security.NegotiateStream.AuthenticateAsClientAsync(System.Net.NetworkCredential,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function AuthenticateAsClientAsync (credential As NetworkCredential, targetName As String) As Task" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::Threading::Tasks::Task ^ AuthenticateAsClientAsync(System::Net::NetworkCredential ^ credential, System::String ^ targetName);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Security</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="credential" Type="System.Net.NetworkCredential" />
        <Parameter Name="targetName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="credential">Учетные данные <see cref="T:System.Net.NetworkCredential" />, используемые для установления идентификации клиента.</param>
        <param name="targetName">Имя участника-службы (SPN), уникально определяющее сервер, подлинность которого проверяется.</param>
        <summary>Вызывается клиентами аутентификации клиента, и, при необходимости, сервера в соединении клиент-сервер как асинхронная операция. Процесс проверки подлинности использует заданные учетные данные клиента.</summary>
        <returns>Возвращает <see cref="T:System.Threading.Tasks.Task" />.  
  
 Объект задачи, представляющий асинхронную операцию.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Уровень олицетворения равен <xref:System.Security.Principal.TokenImpersonationLevel.Identification>, уровень безопасности при <xref:System.Net.Security.ProtectionLevel.EncryptAndSign>, и запрашивается взаимной проверки подлинности. <xref:System.Net.Security.NegotiateStream> Класс создает имя участника-службы, используемого для взаимной проверки подлинности.  
  
 При успешной проверке подлинности, необходимо проверить <xref:System.Net.Security.NegotiateStream.IsEncrypted%2A> и <xref:System.Net.Security.NegotiateStream.IsSigned%2A> свойства, чтобы определить, какие службы безопасности используются <xref:System.Net.Security.NegotiateStream>. Проверьте <xref:System.Net.Security.NegotiateStream.IsMutuallyAuthenticated%2A> свойства, чтобы определить, выполнена ли взаимная проверка подлинности.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Security.Authentication.AuthenticationException">Сбой проверки подлинности. Этот объект можно использовать для повторной проверки подлинности.</exception>
        <exception cref="T:System.Security.Authentication.InvalidCredentialException">Сбой проверки подлинности. Этот объект можно использовать для повторной проверки подлинности.</exception>
        <exception cref="T:System.ObjectDisposedException">Объект закрыт.</exception>
        <exception cref="T:System.InvalidOperationException">Проверка подлинности уже выполнена.  
  
 \- или -  
  
 Этот поток уже использовался ранее при попытке проверки подлинности со стороны сервера. Этот поток нельзя использовать для повторной проверки подлинности со стороны клиента.</exception>
        <exception cref="T:System.ArgumentNullException">
          Свойство <paramref name="targetName" /> имеет значение <see langword="null" />.</exception>
        <permission cref="T:System.Security.Permissions.SecurityPermission">для использования явное <see cref="T:System.Net.NetworkCredential" />. Связанное перечисление: <see cref="F:System.Security.Permissions.SecurityPermissionFlag.ControlPrincipal" />.</permission>
      </Docs>
    </Member>
    <Member MemberName="AuthenticateAsClientAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task AuthenticateAsClientAsync (System.Net.NetworkCredential credential, System.Security.Authentication.ExtendedProtection.ChannelBinding binding, string targetName);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task AuthenticateAsClientAsync(class System.Net.NetworkCredential credential, class System.Security.Authentication.ExtendedProtection.ChannelBinding binding, string targetName) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Security.NegotiateStream.AuthenticateAsClientAsync(System.Net.NetworkCredential,System.Security.Authentication.ExtendedProtection.ChannelBinding,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function AuthenticateAsClientAsync (credential As NetworkCredential, binding As ChannelBinding, targetName As String) As Task" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::Threading::Tasks::Task ^ AuthenticateAsClientAsync(System::Net::NetworkCredential ^ credential, System::Security::Authentication::ExtendedProtection::ChannelBinding ^ binding, System::String ^ targetName);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Security</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="credential" Type="System.Net.NetworkCredential" />
        <Parameter Name="binding" Type="System.Security.Authentication.ExtendedProtection.ChannelBinding" />
        <Parameter Name="targetName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="credential">Учетные данные <see cref="T:System.Net.NetworkCredential" />, используемые для установления идентификации клиента.</param>
        <param name="binding">Объект <see cref="T:System.Security.Authentication.ExtendedProtection.ChannelBinding" />, который используется для расширенной защиты.</param>
        <param name="targetName">Имя участника-службы (SPN), уникально определяющее сервер, подлинность которого проверяется.</param>
        <summary>Вызывается клиентами аутентификации клиента, и, при необходимости, сервера в соединении клиент-сервер как асинхронная операция. Процесс проверки подлинности использует заданные учетные данные клиента и привязку канала.</summary>
        <returns>Возвращает <see cref="T:System.Threading.Tasks.Task" />.  
  
 Объект задачи, представляющий асинхронную операцию.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Уровень олицетворения равен <xref:System.Security.Principal.TokenImpersonationLevel.Identification>, уровень безопасности при <xref:System.Net.Security.ProtectionLevel.EncryptAndSign>, и запрашивается взаимной проверки подлинности. <xref:System.Net.Security.NegotiateStream> Класс создает имя участника-службы, используемого для взаимной проверки подлинности.  
  
 <xref:System.Security.Authentication.ExtendedProtection.ChannelBinding> Используется для расширенной защиты, который передается методу в `binding` параметр будет вызываться из приложения <xref:System.Net.Security.SslStream.TransportContext%2A> свойства в связанном <xref:System.Net.Security.SslStream>.  
  
 При успешной проверке подлинности, необходимо проверить <xref:System.Net.Security.NegotiateStream.IsEncrypted%2A> и <xref:System.Net.Security.NegotiateStream.IsSigned%2A> свойства, чтобы определить, какие службы безопасности используются <xref:System.Net.Security.NegotiateStream>. Проверьте <xref:System.Net.Security.NegotiateStream.IsMutuallyAuthenticated%2A> свойства, чтобы определить, выполнена ли взаимная проверка подлинности.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          Свойство <paramref name="targetName" /> имеет значение <see langword="null" />.  
  
 \- или -  
  
 Свойство <paramref name="credential" /> имеет значение <see langword="null" />.</exception>
        <exception cref="T:System.Security.Authentication.AuthenticationException">Сбой проверки подлинности. Этот объект можно использовать для повторной проверки подлинности.</exception>
        <exception cref="T:System.Security.Authentication.InvalidCredentialException">Сбой проверки подлинности. Этот объект можно использовать для повторной проверки подлинности.</exception>
        <exception cref="T:System.InvalidOperationException">Проверка подлинности уже выполнена.  
  
 \- или -  
  
 Этот поток уже использовался ранее при попытке проверки подлинности со стороны сервера. Этот поток нельзя использовать для повторной проверки подлинности со стороны клиента.</exception>
        <exception cref="T:System.ObjectDisposedException">Объект закрыт.</exception>
        <altmember cref="T:System.Security.Authentication.ExtendedProtection.ChannelBinding" />
      </Docs>
    </Member>
    <Member MemberName="AuthenticateAsClientAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task AuthenticateAsClientAsync (System.Net.NetworkCredential credential, string targetName, System.Net.Security.ProtectionLevel requiredProtectionLevel, System.Security.Principal.TokenImpersonationLevel allowedImpersonationLevel);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task AuthenticateAsClientAsync(class System.Net.NetworkCredential credential, string targetName, valuetype System.Net.Security.ProtectionLevel requiredProtectionLevel, valuetype System.Security.Principal.TokenImpersonationLevel allowedImpersonationLevel) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Security.NegotiateStream.AuthenticateAsClientAsync(System.Net.NetworkCredential,System.String,System.Net.Security.ProtectionLevel,System.Security.Principal.TokenImpersonationLevel)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function AuthenticateAsClientAsync (credential As NetworkCredential, targetName As String, requiredProtectionLevel As ProtectionLevel, allowedImpersonationLevel As TokenImpersonationLevel) As Task" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::Threading::Tasks::Task ^ AuthenticateAsClientAsync(System::Net::NetworkCredential ^ credential, System::String ^ targetName, System::Net::Security::ProtectionLevel requiredProtectionLevel, System::Security::Principal::TokenImpersonationLevel allowedImpersonationLevel);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Security</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="credential" Type="System.Net.NetworkCredential" />
        <Parameter Name="targetName" Type="System.String" />
        <Parameter Name="requiredProtectionLevel" Type="System.Net.Security.ProtectionLevel" />
        <Parameter Name="allowedImpersonationLevel" Type="System.Security.Principal.TokenImpersonationLevel" />
      </Parameters>
      <Docs>
        <param name="credential">Учетные данные <see cref="T:System.Net.NetworkCredential" />, используемые для установления идентификации клиента.</param>
        <param name="targetName">Имя участника-службы (SPN), уникально определяющее сервер, подлинность которого проверяется.</param>
        <param name="requiredProtectionLevel">Одно из значений перечисления <see cref="T:System.Net.Security.ProtectionLevel" />, указывающее службы безопасности для потока.</param>
        <param name="allowedImpersonationLevel">Одно из значений перечисления <see cref="T:System.Security.Principal.TokenImpersonationLevel" />, указывающее, как сервер может использовать учетные записи клиента для доступа к ресурсам.</param>
        <summary>Вызывается клиентами аутентификации клиента, и, при необходимости, сервера в соединении клиент-сервер как асинхронная операция. Процесс проверки подлинности использует заданные учетные данные сервера и параметры проверки подлинности.</summary>
        <returns>Возвращает <see cref="T:System.Threading.Tasks.Task" />.  
  
 Объект задачи, представляющий асинхронную операцию.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Используйте `requiredProtectionLevel` параметр для запроса служб безопасности для данных, передаваемых с помощью потока с выполненной проверкой подлинности. Например, чтобы данные шифруются и подписываются, укажите <xref:System.Net.Security.ProtectionLevel.EncryptAndSign> значение. Для успешной проверки подлинности не гарантируют того, запрошенный <xref:System.Net.Security.ProtectionLevel> были предоставлены. Необходимо проверить <xref:System.Net.Security.NegotiateStream.IsEncrypted%2A> и <xref:System.Net.Security.NegotiateStream.IsSigned%2A> свойства, чтобы определить, какие службы безопасности используются <xref:System.Net.Security.NegotiateStream>.  
  
 Если происходит сбой проверки подлинности, вы получите <xref:System.Security.Authentication.AuthenticationException> или <xref:System.Security.Authentication.InvalidCredentialException>. В этом случае можно повторить попытку с другими учетными данными проверки подлинности.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <paramref name="allowedImpersonationLevel" /> не является допустимым значением.</exception>
        <exception cref="T:System.ArgumentNullException">
          Параметр <paramref name="targetName" /> имеет значение null.</exception>
        <exception cref="T:System.Security.Authentication.AuthenticationException">Сбой проверки подлинности. Этот объект можно использовать для повторной проверки подлинности.</exception>
        <exception cref="T:System.Security.Authentication.InvalidCredentialException">Сбой проверки подлинности. Этот объект можно использовать для повторной проверки подлинности.</exception>
        <exception cref="T:System.ObjectDisposedException">Объект закрыт.</exception>
        <exception cref="T:System.InvalidOperationException">Проверка подлинности уже выполнена.  
  
 \- или -  
  
 Этот поток уже использовался ранее при попытке проверки подлинности со стороны сервера. Этот поток нельзя использовать для повторной проверки подлинности со стороны клиента.</exception>
        <permission cref="T:System.Security.Permissions.SecurityPermission">для использования явное <see cref="T:System.Net.NetworkCredential" />. Связанное перечисление: <see cref="F:System.Security.Permissions.SecurityPermissionFlag.ControlPrincipal" />.</permission>
      </Docs>
    </Member>
    <Member MemberName="AuthenticateAsClientAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task AuthenticateAsClientAsync (System.Net.NetworkCredential credential, System.Security.Authentication.ExtendedProtection.ChannelBinding binding, string targetName, System.Net.Security.ProtectionLevel requiredProtectionLevel, System.Security.Principal.TokenImpersonationLevel allowedImpersonationLevel);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task AuthenticateAsClientAsync(class System.Net.NetworkCredential credential, class System.Security.Authentication.ExtendedProtection.ChannelBinding binding, string targetName, valuetype System.Net.Security.ProtectionLevel requiredProtectionLevel, valuetype System.Security.Principal.TokenImpersonationLevel allowedImpersonationLevel) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Security.NegotiateStream.AuthenticateAsClientAsync(System.Net.NetworkCredential,System.Security.Authentication.ExtendedProtection.ChannelBinding,System.String,System.Net.Security.ProtectionLevel,System.Security.Principal.TokenImpersonationLevel)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function AuthenticateAsClientAsync (credential As NetworkCredential, binding As ChannelBinding, targetName As String, requiredProtectionLevel As ProtectionLevel, allowedImpersonationLevel As TokenImpersonationLevel) As Task" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::Threading::Tasks::Task ^ AuthenticateAsClientAsync(System::Net::NetworkCredential ^ credential, System::Security::Authentication::ExtendedProtection::ChannelBinding ^ binding, System::String ^ targetName, System::Net::Security::ProtectionLevel requiredProtectionLevel, System::Security::Principal::TokenImpersonationLevel allowedImpersonationLevel);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Security</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="credential" Type="System.Net.NetworkCredential" />
        <Parameter Name="binding" Type="System.Security.Authentication.ExtendedProtection.ChannelBinding" />
        <Parameter Name="targetName" Type="System.String" />
        <Parameter Name="requiredProtectionLevel" Type="System.Net.Security.ProtectionLevel" />
        <Parameter Name="allowedImpersonationLevel" Type="System.Security.Principal.TokenImpersonationLevel" />
      </Parameters>
      <Docs>
        <param name="credential">Учетные данные <see cref="T:System.Net.NetworkCredential" />, используемые для установления идентификации клиента.</param>
        <param name="binding">Объект <see cref="T:System.Security.Authentication.ExtendedProtection.ChannelBinding" />, который используется для расширенной защиты.</param>
        <param name="targetName">Имя участника-службы (SPN), уникально определяющее сервер, подлинность которого проверяется.</param>
        <param name="requiredProtectionLevel">Одно из значений перечисления <see cref="T:System.Net.Security.ProtectionLevel" />, указывающее службы безопасности для потока.</param>
        <param name="allowedImpersonationLevel">Одно из значений перечисления <see cref="T:System.Security.Principal.TokenImpersonationLevel" />, указывающее, как сервер может использовать учетные записи клиента для доступа к ресурсам.</param>
        <summary>Вызывается клиентами аутентификации клиента, и, при необходимости, сервера в соединении клиент-сервер как асинхронная операция. Процесс проверки подлинности использует заданные учетные данные, параметры проверки подлинности и привязку канала.</summary>
        <returns>Возвращает <see cref="T:System.Threading.Tasks.Task" />.  
  
 Объект задачи, представляющий асинхронную операцию.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Используйте `requiredProtectionLevel` параметр для запроса служб безопасности для данных, передаваемых с помощью потока с выполненной проверкой подлинности. Например, чтобы данные шифруются и подписываются, укажите <xref:System.Net.Security.ProtectionLevel.EncryptAndSign> значение. Для успешной проверки подлинности не гарантируют того, запрошенный <xref:System.Net.Security.ProtectionLevel> были предоставлены. Необходимо проверить <xref:System.Net.Security.NegotiateStream.IsEncrypted%2A> и <xref:System.Net.Security.NegotiateStream.IsSigned%2A> свойства, чтобы определить, какие службы безопасности используются <xref:System.Net.Security.NegotiateStream>.  
  
 <xref:System.Security.Authentication.ExtendedProtection.ChannelBinding> Используется для расширенной защиты, который передается методу в `binding` параметр будет вызываться из приложения <xref:System.Net.Security.SslStream.TransportContext%2A> свойства в связанном <xref:System.Net.Security.SslStream>.  
  
 Если происходит сбой проверки подлинности, вы получите <xref:System.Security.Authentication.AuthenticationException> или <xref:System.Security.Authentication.InvalidCredentialException>. В этом случае можно повторить попытку с другими учетными данными проверки подлинности.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          Свойство <paramref name="targetName" /> имеет значение <see langword="null" />.  
  
 \- или -  
  
 Свойство <paramref name="credential" /> имеет значение <see langword="null" />.</exception>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <paramref name="allowedImpersonationLevel" /> не является допустимым значением.</exception>
        <exception cref="T:System.Security.Authentication.AuthenticationException">Сбой проверки подлинности. Этот объект можно использовать для повторной проверки подлинности.</exception>
        <exception cref="T:System.Security.Authentication.InvalidCredentialException">Сбой проверки подлинности. Этот объект можно использовать для повторной проверки подлинности.</exception>
        <exception cref="T:System.InvalidOperationException">Проверка подлинности уже выполнена.  
  
 \- или -  
  
 Этот поток уже использовался ранее при попытке проверки подлинности со стороны сервера. Этот поток нельзя использовать для повторной проверки подлинности со стороны клиента.</exception>
        <exception cref="T:System.ObjectDisposedException">Объект закрыт.</exception>
        <altmember cref="T:System.Security.Authentication.ExtendedProtection.ChannelBinding" />
      </Docs>
    </Member>
    <MemberGroup MemberName="AuthenticateAsServer">
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Выполняет проверку подлинности со стороны сервера в соединении клиент-сервер.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Эти методы блокируются во время проверки подлинности. Чтобы предотвратить приложения от блокировки при ожидании завершения операции проверки подлинности, используйте <xref:System.Net.Security.NegotiateStream.BeginAuthenticateAsServer%2A> метод.  
  
 ]]></format>
        </remarks>
      </Docs>
    </MemberGroup>
    <Member MemberName="AuthenticateAsServer">
      <MemberSignature Language="C#" Value="public virtual void AuthenticateAsServer ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void AuthenticateAsServer() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Security.NegotiateStream.AuthenticateAsServer" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub AuthenticateAsServer ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void AuthenticateAsServer();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.Security</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.MonoTODO</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Вызывается серверами для проверки подлинности клиента и, при необходимости, сервера в соединении клиент-сервер.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Сервер использует проверку подлинности <xref:System.Net.CredentialCache.DefaultCredentials%2A>. Нет имя участника службы (SPN), указанную для сервера. Уровень олицетворения равен <xref:System.Security.Principal.TokenImpersonationLevel.Identification>, а уровень безопасности — <xref:System.Net.Security.ProtectionLevel.EncryptAndSign>.  
  
 При успешной проверке подлинности, необходимо проверить <xref:System.Net.Security.NegotiateStream.IsEncrypted%2A> и <xref:System.Net.Security.NegotiateStream.IsSigned%2A> свойства, чтобы определить, какие службы безопасности используются <xref:System.Net.Security.NegotiateStream>. Проверьте <xref:System.Net.Security.NegotiateStream.IsMutuallyAuthenticated%2A> свойства, чтобы определить, выполнена ли взаимная проверка подлинности.  
  
 Этот метод блокируется до завершения операции. Чтобы предотвратить блокировку до завершения операции, используйте один из <xref:System.Net.Security.NegotiateStream.BeginAuthenticateAsServer%2A> перегруженных версий метода.  
  
 Если происходит сбой проверки подлинности, вы получите <xref:System.Security.Authentication.AuthenticationException> или <xref:System.Security.Authentication.InvalidCredentialException>. В этом случае можно повторить попытку с другими учетными данными проверки подлинности.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Security.Authentication.AuthenticationException">Сбой проверки подлинности. Этот объект можно использовать для повторной проверки подлинности.</exception>
        <exception cref="T:System.Security.Authentication.InvalidCredentialException">Сбой проверки подлинности. Этот объект можно использовать для повторной проверки подлинности.</exception>
        <exception cref="T:System.ObjectDisposedException">Объект закрыт.</exception>
        <exception cref="T:System.NotSupportedException">Системы Windows 95 и Windows 98 не поддерживаются.</exception>
        <permission cref="T:System.Security.Permissions.SecurityPermission">для использования явное <see cref="T:System.Net.NetworkCredential" />. Связанное перечисление: <see cref="F:System.Security.Permissions.SecurityPermissionFlag.ControlPrincipal" />.</permission>
      </Docs>
    </Member>
    <Member MemberName="AuthenticateAsServer">
      <MemberSignature Language="C#" Value="public virtual void AuthenticateAsServer (System.Security.Authentication.ExtendedProtection.ExtendedProtectionPolicy policy);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void AuthenticateAsServer(class System.Security.Authentication.ExtendedProtection.ExtendedProtectionPolicy policy) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Security.NegotiateStream.AuthenticateAsServer(System.Security.Authentication.ExtendedProtection.ExtendedProtectionPolicy)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub AuthenticateAsServer (policy As ExtendedProtectionPolicy)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void AuthenticateAsServer(System::Security::Authentication::ExtendedProtection::ExtendedProtectionPolicy ^ policy);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.Security</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.MonoTODO</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="policy" Type="System.Security.Authentication.ExtendedProtection.ExtendedProtectionPolicy" />
      </Parameters>
      <Docs>
        <param name="policy">Объект <see cref="T:System.Security.Authentication.ExtendedProtection.ExtendedProtectionPolicy" />, который используется для расширенной защиты.</param>
        <summary>Вызывается серверами для проверки подлинности клиента и, при необходимости, сервера в соединении клиент-сервер. Процесс проверки подлинности использует заданную политику расширенной защиты.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Сервер использует проверку подлинности <xref:System.Net.CredentialCache.DefaultCredentials%2A>. Нет имя участника службы (SPN), указанную для сервера. Уровень олицетворения равен <xref:System.Security.Principal.TokenImpersonationLevel.Identification>, а уровень безопасности — <xref:System.Net.Security.ProtectionLevel.EncryptAndSign>.  
  
 Если `policy` параметр `null`, то используется Расширенная политика защиты с <xref:System.Security.Authentication.ExtendedProtection.ExtendedProtectionPolicy.PolicyEnforcement%2A> значение <xref:System.Security.Authentication.ExtendedProtection.PolicyEnforcement.Never>.  
  
 При успешной проверке подлинности, необходимо проверить <xref:System.Net.Security.NegotiateStream.IsEncrypted%2A> и <xref:System.Net.Security.NegotiateStream.IsSigned%2A> свойства, чтобы определить, какие службы безопасности используются <xref:System.Net.Security.NegotiateStream>. Проверьте <xref:System.Net.Security.NegotiateStream.IsMutuallyAuthenticated%2A> свойства, чтобы определить, выполнена ли взаимная проверка подлинности.  
  
 Этот метод блокируется до завершения операции. Чтобы предотвратить блокировку до завершения операции, используйте один из <xref:System.Net.Security.NegotiateStream.BeginAuthenticateAsServer%2A> перегруженных версий метода.  
  
 Если происходит сбой проверки подлинности, вы получите <xref:System.Security.Authentication.AuthenticationException> или <xref:System.Security.Authentication.InvalidCredentialException>. В этом случае можно повторить попытку с другими учетными данными проверки подлинности.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">Оба свойства <see cref="P:System.Security.Authentication.ExtendedProtection.ExtendedProtectionPolicy.CustomChannelBinding" /> и <see cref="P:System.Security.Authentication.ExtendedProtection.ExtendedProtectionPolicy.CustomServiceNames" /> в расширенной политике защиты, переданной параметром <paramref name="policy" />, имеют значение <see langword="null" />.</exception>
        <exception cref="T:System.Security.Authentication.AuthenticationException">Сбой проверки подлинности. Этот объект можно использовать для повторной проверки подлинности.</exception>
        <exception cref="T:System.Security.Authentication.InvalidCredentialException">Сбой проверки подлинности. Этот объект можно использовать для повторной проверки подлинности.</exception>
        <exception cref="T:System.NotSupportedException">Системы Windows 95 и Windows 98 не поддерживаются.</exception>
        <exception cref="T:System.ObjectDisposedException">Объект закрыт.</exception>
        <exception cref="T:System.PlatformNotSupportedException">Параметру <paramref name="policy" /> было присвоено значение параметра <see cref="F:System.Security.Authentication.ExtendedProtection.PolicyEnforcement.Always" /> на платформе, которая не поддерживает расширенную защиту.</exception>
        <altmember cref="T:System.Security.Authentication.ExtendedProtection.ExtendedProtectionPolicy" />
      </Docs>
    </Member>
    <Member MemberName="AuthenticateAsServer">
      <MemberSignature Language="C#" Value="public virtual void AuthenticateAsServer (System.Net.NetworkCredential credential, System.Net.Security.ProtectionLevel requiredProtectionLevel, System.Security.Principal.TokenImpersonationLevel requiredImpersonationLevel);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void AuthenticateAsServer(class System.Net.NetworkCredential credential, valuetype System.Net.Security.ProtectionLevel requiredProtectionLevel, valuetype System.Security.Principal.TokenImpersonationLevel requiredImpersonationLevel) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Security.NegotiateStream.AuthenticateAsServer(System.Net.NetworkCredential,System.Net.Security.ProtectionLevel,System.Security.Principal.TokenImpersonationLevel)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub AuthenticateAsServer (credential As NetworkCredential, requiredProtectionLevel As ProtectionLevel, requiredImpersonationLevel As TokenImpersonationLevel)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void AuthenticateAsServer(System::Net::NetworkCredential ^ credential, System::Net::Security::ProtectionLevel requiredProtectionLevel, System::Security::Principal::TokenImpersonationLevel requiredImpersonationLevel);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.Security</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.MonoTODO</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="credential" Type="System.Net.NetworkCredential" />
        <Parameter Name="requiredProtectionLevel" Type="System.Net.Security.ProtectionLevel" />
        <Parameter Name="requiredImpersonationLevel" Type="System.Security.Principal.TokenImpersonationLevel" />
      </Parameters>
      <Docs>
        <param name="credential">Учетные данные <see cref="T:System.Net.NetworkCredential" />, используемые для установления идентификации сервера.</param>
        <param name="requiredProtectionLevel">Одно из значений перечисления <see cref="T:System.Net.Security.ProtectionLevel" />, указывающее службы безопасности для потока.</param>
        <param name="requiredImpersonationLevel">Одно из значений перечисления <see cref="T:System.Security.Principal.TokenImpersonationLevel" />, указывающее, как сервер может использовать учетные записи клиента для доступа к ресурсам.</param>
        <summary>Вызывается серверами для проверки подлинности клиента и, при необходимости, сервера в соединении клиент-сервер. Процесс проверки подлинности использует заданные учетные данные сервера и параметры проверки подлинности.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 При успешной проверке подлинности, необходимо проверить <xref:System.Net.Security.NegotiateStream.IsEncrypted%2A> и <xref:System.Net.Security.NegotiateStream.IsSigned%2A> свойства, чтобы определить, какие службы безопасности используются <xref:System.Net.Security.NegotiateStream>. Проверьте <xref:System.Net.Security.NegotiateStream.IsMutuallyAuthenticated%2A> свойства, чтобы определить, выполнена ли взаимная проверка подлинности.  
  
 Этот метод блокируется до завершения операции. Чтобы предотвратить блокировку до завершения операции, используйте один из <xref:System.Net.Security.NegotiateStream.BeginAuthenticateAsServer%2A> перегруженных версий метода.  
  
 Если происходит сбой проверки подлинности, вы получите <xref:System.Security.Authentication.AuthenticationException> или <xref:System.Security.Authentication.InvalidCredentialException>. В этом случае можно повторить попытку с другими учетными данными проверки подлинности.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          Свойство <paramref name="credential" /> имеет значение <see langword="null" />.</exception>
        <exception cref="T:System.ArgumentOutOfRangeException">
          Параметр <paramref name="requiredImpersonationLevel" /> должен иметь значение <see cref="F:System.Security.Principal.TokenImpersonationLevel.Identification" />, <see cref="F:System.Security.Principal.TokenImpersonationLevel.Impersonation" /> или <see cref="F:System.Security.Principal.TokenImpersonationLevel.Delegation" />,</exception>
        <exception cref="T:System.Security.Authentication.AuthenticationException">Сбой проверки подлинности. Этот объект можно использовать для повторной проверки подлинности.</exception>
        <exception cref="T:System.Security.Authentication.InvalidCredentialException">Сбой проверки подлинности. Этот объект можно использовать для повторной проверки подлинности.</exception>
        <exception cref="T:System.ObjectDisposedException">Объект закрыт.</exception>
        <exception cref="T:System.InvalidOperationException">Проверка подлинности уже выполнена.  
  
 \- или -  
  
 Этот поток уже использовался ранее при попытке проверки подлинности со стороны клиента. Этот поток нельзя использовать для повторной проверки подлинности со стороны сервера.</exception>
        <exception cref="T:System.NotSupportedException">Системы Windows 95 и Windows 98 не поддерживаются.</exception>
        <permission cref="T:System.Security.Permissions.SecurityPermission">для использования явное <see cref="T:System.Net.NetworkCredential" />. Связанное перечисление: <see cref="F:System.Security.Permissions.SecurityPermissionFlag.ControlPrincipal" />.</permission>
      </Docs>
    </Member>
    <Member MemberName="AuthenticateAsServer">
      <MemberSignature Language="C#" Value="public virtual void AuthenticateAsServer (System.Net.NetworkCredential credential, System.Security.Authentication.ExtendedProtection.ExtendedProtectionPolicy policy, System.Net.Security.ProtectionLevel requiredProtectionLevel, System.Security.Principal.TokenImpersonationLevel requiredImpersonationLevel);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void AuthenticateAsServer(class System.Net.NetworkCredential credential, class System.Security.Authentication.ExtendedProtection.ExtendedProtectionPolicy policy, valuetype System.Net.Security.ProtectionLevel requiredProtectionLevel, valuetype System.Security.Principal.TokenImpersonationLevel requiredImpersonationLevel) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Security.NegotiateStream.AuthenticateAsServer(System.Net.NetworkCredential,System.Security.Authentication.ExtendedProtection.ExtendedProtectionPolicy,System.Net.Security.ProtectionLevel,System.Security.Principal.TokenImpersonationLevel)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub AuthenticateAsServer (credential As NetworkCredential, policy As ExtendedProtectionPolicy, requiredProtectionLevel As ProtectionLevel, requiredImpersonationLevel As TokenImpersonationLevel)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void AuthenticateAsServer(System::Net::NetworkCredential ^ credential, System::Security::Authentication::ExtendedProtection::ExtendedProtectionPolicy ^ policy, System::Net::Security::ProtectionLevel requiredProtectionLevel, System::Security::Principal::TokenImpersonationLevel requiredImpersonationLevel);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.Security</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.MonoTODO</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="credential" Type="System.Net.NetworkCredential" />
        <Parameter Name="policy" Type="System.Security.Authentication.ExtendedProtection.ExtendedProtectionPolicy" />
        <Parameter Name="requiredProtectionLevel" Type="System.Net.Security.ProtectionLevel" />
        <Parameter Name="requiredImpersonationLevel" Type="System.Security.Principal.TokenImpersonationLevel" />
      </Parameters>
      <Docs>
        <param name="credential">Учетные данные <see cref="T:System.Net.NetworkCredential" />, используемые для установления идентификации клиента.</param>
        <param name="policy">Объект <see cref="T:System.Security.Authentication.ExtendedProtection.ExtendedProtectionPolicy" />, который используется для расширенной защиты.</param>
        <param name="requiredProtectionLevel">Одно из значений перечисления <see cref="T:System.Net.Security.ProtectionLevel" />, указывающее службы безопасности для потока.</param>
        <param name="requiredImpersonationLevel">Одно из значений перечисления <see cref="T:System.Security.Principal.TokenImpersonationLevel" />, указывающее, как сервер может использовать учетные записи клиента для доступа к ресурсам.</param>
        <summary>Вызывается серверами для проверки подлинности клиента и, при необходимости, сервера в соединении клиент-сервер. Процесс проверки подлинности использует заданные учетные данные сервера, параметры проверки подлинности и политику расширенной защиты.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Если `policy` параметр `null`, то используется Расширенная политика защиты с <xref:System.Security.Authentication.ExtendedProtection.ExtendedProtectionPolicy.PolicyEnforcement%2A> значение <xref:System.Security.Authentication.ExtendedProtection.PolicyEnforcement.Never>.  
  
 При успешной проверке подлинности, необходимо проверить <xref:System.Net.Security.NegotiateStream.IsEncrypted%2A> и <xref:System.Net.Security.NegotiateStream.IsSigned%2A> свойства, чтобы определить, какие службы безопасности используются <xref:System.Net.Security.NegotiateStream>. Проверьте <xref:System.Net.Security.NegotiateStream.IsMutuallyAuthenticated%2A> свойства, чтобы определить, выполнена ли взаимная проверка подлинности.  
  
 Этот метод блокируется до завершения операции. Чтобы предотвратить блокировку до завершения операции, используйте один из <xref:System.Net.Security.NegotiateStream.BeginAuthenticateAsServer%2A> перегруженных версий метода.  
  
 Если происходит сбой проверки подлинности, вы получите <xref:System.Security.Authentication.AuthenticationException> или <xref:System.Security.Authentication.InvalidCredentialException>. В этом случае можно повторить попытку с другими учетными данными проверки подлинности.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">Оба свойства <see cref="P:System.Security.Authentication.ExtendedProtection.ExtendedProtectionPolicy.CustomChannelBinding" /> и <see cref="P:System.Security.Authentication.ExtendedProtection.ExtendedProtectionPolicy.CustomServiceNames" /> в расширенной политике защиты, переданной параметром <paramref name="policy" />, имеют значение <see langword="null" />.</exception>
        <exception cref="T:System.ArgumentNullException">
          Свойство <paramref name="credential" /> имеет значение <see langword="null" />.</exception>
        <exception cref="T:System.ArgumentOutOfRangeException">
          Параметр <paramref name="requiredImpersonationLevel" /> должен иметь значение <see cref="F:System.Security.Principal.TokenImpersonationLevel.Identification" />, <see cref="F:System.Security.Principal.TokenImpersonationLevel.Impersonation" /> или <see cref="F:System.Security.Principal.TokenImpersonationLevel.Delegation" />,</exception>
        <exception cref="T:System.Security.Authentication.AuthenticationException">Сбой проверки подлинности. Этот объект можно использовать для повторной проверки подлинности.</exception>
        <exception cref="T:System.Security.Authentication.InvalidCredentialException">Сбой проверки подлинности. Этот объект можно использовать для повторной проверки подлинности.</exception>
        <exception cref="T:System.InvalidOperationException">Проверка подлинности уже выполнена.  
  
 \- или -  
  
 Этот поток уже использовался ранее при попытке проверки подлинности со стороны клиента. Этот поток нельзя использовать для повторной проверки подлинности со стороны сервера.</exception>
        <exception cref="T:System.NotSupportedException">Системы Windows 95 и Windows 98 не поддерживаются.</exception>
        <exception cref="T:System.ObjectDisposedException">Объект закрыт.</exception>
        <exception cref="T:System.PlatformNotSupportedException">Параметру <paramref name="policy" /> было присвоено значение параметра <see cref="F:System.Security.Authentication.ExtendedProtection.PolicyEnforcement.Always" /> на платформе, которая не поддерживает расширенную защиту.</exception>
        <altmember cref="T:System.Security.Authentication.ExtendedProtection.ExtendedProtectionPolicy" />
      </Docs>
    </Member>
    <MemberGroup MemberName="AuthenticateAsServerAsync">
      <AssemblyInfo>
        <AssemblyName>System.Net.Security</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Обрабатывает серверную сторону аутентификации для соединения клиент-сервер как асинхронная операция.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="AuthenticateAsServerAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task AuthenticateAsServerAsync ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task AuthenticateAsServerAsync() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Security.NegotiateStream.AuthenticateAsServerAsync" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function AuthenticateAsServerAsync () As Task" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::Threading::Tasks::Task ^ AuthenticateAsServerAsync();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Security</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Вызывается серверами аутентификации клиента, и, при необходимости, сервера в соединении клиент-сервер как асинхронная операция.</summary>
        <returns>Возвращает <see cref="T:System.Threading.Tasks.Task" />.  
  
 Объект задачи, представляющий асинхронную операцию.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Сервер использует проверку подлинности <xref:System.Net.CredentialCache.DefaultCredentials%2A>. Нет имя участника службы (SPN), указанную для сервера. Уровень олицетворения равен <xref:System.Security.Principal.TokenImpersonationLevel.Identification>, а уровень безопасности — <xref:System.Net.Security.ProtectionLevel.EncryptAndSign>.  
  
 При успешной проверке подлинности, необходимо проверить <xref:System.Net.Security.NegotiateStream.IsEncrypted%2A> и <xref:System.Net.Security.NegotiateStream.IsSigned%2A> свойства, чтобы определить, какие службы безопасности используются <xref:System.Net.Security.NegotiateStream>. Проверьте <xref:System.Net.Security.NegotiateStream.IsMutuallyAuthenticated%2A> свойства, чтобы определить, выполнена ли взаимная проверка подлинности.  
  
 Если происходит сбой проверки подлинности, вы получите <xref:System.Security.Authentication.AuthenticationException> или <xref:System.Security.Authentication.InvalidCredentialException>. В этом случае можно повторить попытку с другими учетными данными проверки подлинности.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Security.Authentication.AuthenticationException">Сбой проверки подлинности. Этот объект можно использовать для повторной проверки подлинности.</exception>
        <exception cref="T:System.Security.Authentication.InvalidCredentialException">Сбой проверки подлинности. Этот объект можно использовать для повторной проверки подлинности.</exception>
        <exception cref="T:System.ObjectDisposedException">Объект закрыт.</exception>
        <exception cref="T:System.NotSupportedException">Системы Windows 95 и Windows 98 не поддерживаются.</exception>
        <permission cref="T:System.Security.Permissions.SecurityPermission">для использования явное <see cref="T:System.Net.NetworkCredential" />. Связанное перечисление: <see cref="F:System.Security.Permissions.SecurityPermissionFlag.ControlPrincipal" />.</permission>
      </Docs>
    </Member>
    <Member MemberName="AuthenticateAsServerAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task AuthenticateAsServerAsync (System.Security.Authentication.ExtendedProtection.ExtendedProtectionPolicy policy);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task AuthenticateAsServerAsync(class System.Security.Authentication.ExtendedProtection.ExtendedProtectionPolicy policy) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Security.NegotiateStream.AuthenticateAsServerAsync(System.Security.Authentication.ExtendedProtection.ExtendedProtectionPolicy)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function AuthenticateAsServerAsync (policy As ExtendedProtectionPolicy) As Task" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::Threading::Tasks::Task ^ AuthenticateAsServerAsync(System::Security::Authentication::ExtendedProtection::ExtendedProtectionPolicy ^ policy);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Security</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="policy" Type="System.Security.Authentication.ExtendedProtection.ExtendedProtectionPolicy" />
      </Parameters>
      <Docs>
        <param name="policy">Объект <see cref="T:System.Security.Authentication.ExtendedProtection.ExtendedProtectionPolicy" />, который используется для расширенной защиты.</param>
        <summary>Вызывается серверами аутентификации клиента, и, при необходимости, сервера в соединении клиент-сервер как асинхронная операция. Процесс проверки подлинности использует заданную политику расширенной защиты.</summary>
        <returns>Возвращает <see cref="T:System.Threading.Tasks.Task" />.  
  
 Объект задачи, представляющий асинхронную операцию.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Сервер использует проверку подлинности <xref:System.Net.CredentialCache.DefaultCredentials%2A>. Нет имя участника службы (SPN), указанную для сервера. Уровень олицетворения равен <xref:System.Security.Principal.TokenImpersonationLevel.Identification>, а уровень безопасности — <xref:System.Net.Security.ProtectionLevel.EncryptAndSign>.  
  
 Если `policy` параметр `null`, то используется Расширенная политика защиты с <xref:System.Security.Authentication.ExtendedProtection.ExtendedProtectionPolicy.PolicyEnforcement%2A> значение <xref:System.Security.Authentication.ExtendedProtection.PolicyEnforcement.Never>.  
  
 При успешной проверке подлинности, необходимо проверить <xref:System.Net.Security.NegotiateStream.IsEncrypted%2A> и <xref:System.Net.Security.NegotiateStream.IsSigned%2A> свойства, чтобы определить, какие службы безопасности используются <xref:System.Net.Security.NegotiateStream>. Проверьте <xref:System.Net.Security.NegotiateStream.IsMutuallyAuthenticated%2A> свойства, чтобы определить, выполнена ли взаимная проверка подлинности.  
  
 Если происходит сбой проверки подлинности, вы получите <xref:System.Security.Authentication.AuthenticationException> или <xref:System.Security.Authentication.InvalidCredentialException>. В этом случае можно повторить попытку с другими учетными данными проверки подлинности.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">Оба свойства <see cref="P:System.Security.Authentication.ExtendedProtection.ExtendedProtectionPolicy.CustomChannelBinding" /> и <see cref="P:System.Security.Authentication.ExtendedProtection.ExtendedProtectionPolicy.CustomServiceNames" /> в расширенной политике защиты, переданной параметром <paramref name="policy" />, имеют значение <see langword="null" />.</exception>
        <exception cref="T:System.Security.Authentication.AuthenticationException">Сбой проверки подлинности. Этот объект можно использовать для повторной проверки подлинности.</exception>
        <exception cref="T:System.Security.Authentication.InvalidCredentialException">Сбой проверки подлинности. Этот объект можно использовать для повторной проверки подлинности.</exception>
        <exception cref="T:System.NotSupportedException">Системы Windows 95 и Windows 98 не поддерживаются.</exception>
        <exception cref="T:System.ObjectDisposedException">Объект закрыт.</exception>
        <exception cref="T:System.PlatformNotSupportedException">Параметру <paramref name="policy" /> было присвоено значение параметра <see cref="F:System.Security.Authentication.ExtendedProtection.PolicyEnforcement.Always" /> на платформе, которая не поддерживает расширенную защиту.</exception>
        <altmember cref="T:System.Security.Authentication.ExtendedProtection.ExtendedProtectionPolicy" />
      </Docs>
    </Member>
    <Member MemberName="AuthenticateAsServerAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task AuthenticateAsServerAsync (System.Net.NetworkCredential credential, System.Net.Security.ProtectionLevel requiredProtectionLevel, System.Security.Principal.TokenImpersonationLevel requiredImpersonationLevel);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task AuthenticateAsServerAsync(class System.Net.NetworkCredential credential, valuetype System.Net.Security.ProtectionLevel requiredProtectionLevel, valuetype System.Security.Principal.TokenImpersonationLevel requiredImpersonationLevel) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Security.NegotiateStream.AuthenticateAsServerAsync(System.Net.NetworkCredential,System.Net.Security.ProtectionLevel,System.Security.Principal.TokenImpersonationLevel)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function AuthenticateAsServerAsync (credential As NetworkCredential, requiredProtectionLevel As ProtectionLevel, requiredImpersonationLevel As TokenImpersonationLevel) As Task" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::Threading::Tasks::Task ^ AuthenticateAsServerAsync(System::Net::NetworkCredential ^ credential, System::Net::Security::ProtectionLevel requiredProtectionLevel, System::Security::Principal::TokenImpersonationLevel requiredImpersonationLevel);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Security</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="credential" Type="System.Net.NetworkCredential" />
        <Parameter Name="requiredProtectionLevel" Type="System.Net.Security.ProtectionLevel" />
        <Parameter Name="requiredImpersonationLevel" Type="System.Security.Principal.TokenImpersonationLevel" />
      </Parameters>
      <Docs>
        <param name="credential">Учетные данные <see cref="T:System.Net.NetworkCredential" />, используемые для установления идентификации сервера.</param>
        <param name="requiredProtectionLevel">Одно из значений перечисления <see cref="T:System.Net.Security.ProtectionLevel" />, указывающее службы безопасности для потока.</param>
        <param name="requiredImpersonationLevel">Одно из значений перечисления <see cref="T:System.Security.Principal.TokenImpersonationLevel" />, указывающее, как сервер может использовать учетные записи клиента для доступа к ресурсам.</param>
        <summary>Вызывается серверами аутентификации клиента, и, при необходимости, сервера в соединении клиент-сервер как асинхронная операция. Процесс проверки подлинности использует заданные учетные данные сервера и параметры проверки подлинности.</summary>
        <returns>Возвращает <see cref="T:System.Threading.Tasks.Task" />.  
  
 Объект задачи, представляющий асинхронную операцию.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 При успешной проверке подлинности, необходимо проверить <xref:System.Net.Security.NegotiateStream.IsEncrypted%2A> и <xref:System.Net.Security.NegotiateStream.IsSigned%2A> свойства, чтобы определить, какие службы безопасности используются <xref:System.Net.Security.NegotiateStream>. Проверьте <xref:System.Net.Security.NegotiateStream.IsMutuallyAuthenticated%2A> свойства, чтобы определить, выполнена ли взаимная проверка подлинности.  
  
 Если происходит сбой проверки подлинности, вы получите <xref:System.Security.Authentication.AuthenticationException> или <xref:System.Security.Authentication.InvalidCredentialException>. В этом случае можно повторить попытку с другими учетными данными проверки подлинности.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          Свойство <paramref name="credential" /> имеет значение <see langword="null" />.</exception>
        <exception cref="T:System.ArgumentOutOfRangeException">
          Параметр <paramref name="requiredImpersonationLevel" /> должен иметь значение <see cref="F:System.Security.Principal.TokenImpersonationLevel.Identification" />, <see cref="F:System.Security.Principal.TokenImpersonationLevel.Impersonation" /> или <see cref="F:System.Security.Principal.TokenImpersonationLevel.Delegation" />,</exception>
        <exception cref="T:System.Security.Authentication.AuthenticationException">Сбой проверки подлинности. Этот объект можно использовать для повторной проверки подлинности.</exception>
        <exception cref="T:System.Security.Authentication.InvalidCredentialException">Сбой проверки подлинности. Этот объект можно использовать для повторной проверки подлинности.</exception>
        <exception cref="T:System.ObjectDisposedException">Объект закрыт.</exception>
        <exception cref="T:System.InvalidOperationException">Проверка подлинности уже выполнена.  
  
 \- или -  
  
 Этот поток уже использовался ранее при попытке проверки подлинности со стороны клиента. Этот поток нельзя использовать для повторной проверки подлинности со стороны сервера.</exception>
        <exception cref="T:System.NotSupportedException">Системы Windows 95 и Windows 98 не поддерживаются.</exception>
        <permission cref="T:System.Security.Permissions.SecurityPermission">для использования явное <see cref="T:System.Net.NetworkCredential" />. Связанное перечисление: <see cref="F:System.Security.Permissions.SecurityPermissionFlag.ControlPrincipal" />.</permission>
      </Docs>
    </Member>
    <Member MemberName="AuthenticateAsServerAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task AuthenticateAsServerAsync (System.Net.NetworkCredential credential, System.Security.Authentication.ExtendedProtection.ExtendedProtectionPolicy policy, System.Net.Security.ProtectionLevel requiredProtectionLevel, System.Security.Principal.TokenImpersonationLevel requiredImpersonationLevel);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task AuthenticateAsServerAsync(class System.Net.NetworkCredential credential, class System.Security.Authentication.ExtendedProtection.ExtendedProtectionPolicy policy, valuetype System.Net.Security.ProtectionLevel requiredProtectionLevel, valuetype System.Security.Principal.TokenImpersonationLevel requiredImpersonationLevel) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Security.NegotiateStream.AuthenticateAsServerAsync(System.Net.NetworkCredential,System.Security.Authentication.ExtendedProtection.ExtendedProtectionPolicy,System.Net.Security.ProtectionLevel,System.Security.Principal.TokenImpersonationLevel)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function AuthenticateAsServerAsync (credential As NetworkCredential, policy As ExtendedProtectionPolicy, requiredProtectionLevel As ProtectionLevel, requiredImpersonationLevel As TokenImpersonationLevel) As Task" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::Threading::Tasks::Task ^ AuthenticateAsServerAsync(System::Net::NetworkCredential ^ credential, System::Security::Authentication::ExtendedProtection::ExtendedProtectionPolicy ^ policy, System::Net::Security::ProtectionLevel requiredProtectionLevel, System::Security::Principal::TokenImpersonationLevel requiredImpersonationLevel);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Security</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="credential" Type="System.Net.NetworkCredential" />
        <Parameter Name="policy" Type="System.Security.Authentication.ExtendedProtection.ExtendedProtectionPolicy" />
        <Parameter Name="requiredProtectionLevel" Type="System.Net.Security.ProtectionLevel" />
        <Parameter Name="requiredImpersonationLevel" Type="System.Security.Principal.TokenImpersonationLevel" />
      </Parameters>
      <Docs>
        <param name="credential">Учетные данные <see cref="T:System.Net.NetworkCredential" />, используемые для установления идентификации клиента.</param>
        <param name="policy">Объект <see cref="T:System.Security.Authentication.ExtendedProtection.ExtendedProtectionPolicy" />, который используется для расширенной защиты.</param>
        <param name="requiredProtectionLevel">Одно из значений перечисления <see cref="T:System.Net.Security.ProtectionLevel" />, указывающее службы безопасности для потока.</param>
        <param name="requiredImpersonationLevel">Одно из значений перечисления <see cref="T:System.Security.Principal.TokenImpersonationLevel" />, указывающее, как сервер может использовать учетные записи клиента для доступа к ресурсам.</param>
        <summary>Вызывается серверами аутентификации клиента, и, при необходимости, сервера в соединении клиент-сервер как асинхронная операция. Процесс проверки подлинности использует заданные учетные данные сервера, параметры проверки подлинности и политику расширенной защиты.</summary>
        <returns>Возвращает <see cref="T:System.Threading.Tasks.Task" />.  
  
 Объект задачи, представляющий асинхронную операцию.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Если `policy` параметр `null`, то используется Расширенная политика защиты с <xref:System.Security.Authentication.ExtendedProtection.ExtendedProtectionPolicy.PolicyEnforcement%2A> значение <xref:System.Security.Authentication.ExtendedProtection.PolicyEnforcement.Never>.  
  
 При успешной проверке подлинности, необходимо проверить <xref:System.Net.Security.NegotiateStream.IsEncrypted%2A> и <xref:System.Net.Security.NegotiateStream.IsSigned%2A> свойства, чтобы определить, какие службы безопасности используются <xref:System.Net.Security.NegotiateStream>. Проверьте <xref:System.Net.Security.NegotiateStream.IsMutuallyAuthenticated%2A> свойства, чтобы определить, выполнена ли взаимная проверка подлинности.  
  
 Если происходит сбой проверки подлинности, вы получите <xref:System.Security.Authentication.AuthenticationException> или <xref:System.Security.Authentication.InvalidCredentialException>. В этом случае можно повторить попытку с другими учетными данными проверки подлинности.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">Оба свойства <see cref="P:System.Security.Authentication.ExtendedProtection.ExtendedProtectionPolicy.CustomChannelBinding" /> и <see cref="P:System.Security.Authentication.ExtendedProtection.ExtendedProtectionPolicy.CustomServiceNames" /> в расширенной политике защиты, переданной параметром <paramref name="policy" />, имеют значение <see langword="null" />.</exception>
        <exception cref="T:System.ArgumentNullException">
          Свойство <paramref name="credential" /> имеет значение <see langword="null" />.</exception>
        <exception cref="T:System.ArgumentOutOfRangeException">
          Параметр <paramref name="requiredImpersonationLevel" /> должен иметь значение <see cref="F:System.Security.Principal.TokenImpersonationLevel.Identification" />, <see cref="F:System.Security.Principal.TokenImpersonationLevel.Impersonation" /> или <see cref="F:System.Security.Principal.TokenImpersonationLevel.Delegation" />,</exception>
        <exception cref="T:System.Security.Authentication.AuthenticationException">Сбой проверки подлинности. Этот объект можно использовать для повторной проверки подлинности.</exception>
        <exception cref="T:System.Security.Authentication.InvalidCredentialException">Сбой проверки подлинности. Этот объект можно использовать для повторной проверки подлинности.</exception>
        <exception cref="T:System.InvalidOperationException">Проверка подлинности уже выполнена.  
  
 \- или -  
  
 Этот поток уже использовался ранее при попытке проверки подлинности со стороны клиента. Этот поток нельзя использовать для повторной проверки подлинности со стороны сервера.</exception>
        <exception cref="T:System.NotSupportedException">Системы Windows 95 и Windows 98 не поддерживаются.</exception>
        <exception cref="T:System.ObjectDisposedException">Объект закрыт.</exception>
        <exception cref="T:System.PlatformNotSupportedException">Параметру <paramref name="policy" /> было присвоено значение параметра <see cref="F:System.Security.Authentication.ExtendedProtection.PolicyEnforcement.Always" /> на платформе, которая не поддерживает расширенную защиту.</exception>
        <altmember cref="T:System.Security.Authentication.ExtendedProtection.ExtendedProtectionPolicy" />
      </Docs>
    </Member>
    <MemberGroup MemberName="BeginAuthenticateAsClient">
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Начинает асинхронную операцию для проверки подлинности клиентской стороны соединения клиент-сервер.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Перегрузки этого метода не блокируют во время проверки подлинности. На время ожидания для проверки подлинности для завершения, используйте один из <xref:System.Net.Security.NegotiateStream.AuthenticateAsClient%2A> методы.  
  
 ]]></format>
        </remarks>
      </Docs>
    </MemberGroup>
    <Member MemberName="BeginAuthenticateAsClient">
      <MemberSignature Language="C#" Value="public virtual IAsyncResult BeginAuthenticateAsClient (AsyncCallback asyncCallback, object asyncState);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.IAsyncResult BeginAuthenticateAsClient(class System.AsyncCallback asyncCallback, object asyncState) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Security.NegotiateStream.BeginAuthenticateAsClient(System.AsyncCallback,System.Object)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual IAsyncResult ^ BeginAuthenticateAsClient(AsyncCallback ^ asyncCallback, System::Object ^ asyncState);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.Security</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.MonoTODO</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.IAsyncResult</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="asyncCallback" Type="System.AsyncCallback" />
        <Parameter Name="asyncState" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="asyncCallback">Делегат <see cref="T:System.AsyncCallback" />, который ссылается на метод, вызываемый после выполнения проверки подлинности.</param>
        <param name="asyncState">Пользовательский объект, содержащий сведения о данной операции. Этот объект передается делегату <c>asyncCallback</c> после завершения операции.</param>
        <summary>Вызывается клиентами для начала асинхронной операции проверки подлинности клиента, и, при необходимости, сервера в соединении клиент-сервер. Этот метод не блокируется.</summary>
        <returns>Объект <see cref="T:System.IAsyncResult" />, указывающий состояние асинхронной операции.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Проверка подлинности использует клиент <xref:System.Net.CredentialCache.DefaultCredentials%2A>. Нет имя участника службы (SPN), указанную для сервера. Уровень олицетворения равен <xref:System.Security.Principal.TokenImpersonationLevel.Identification>, а уровень безопасности — <xref:System.Net.Security.ProtectionLevel.EncryptAndSign>. <xref:System.Net.Security.NegotiateStream> Класс создает имя участника-службы, используемого для взаимной проверки подлинности.  
  
 Этот метод является асинхронным и не блокируется до завершения операции. Для блокирования до завершения операции, используйте один из <xref:System.Net.Security.NegotiateStream.AuthenticateAsClient%2A> перегруженных версий метода.  
  
 Необходимо выполнить операцию асинхронной проверки подлинности путем вызова <xref:System.Net.Security.NegotiateStream.EndAuthenticateAsClient%2A> метод. Как правило, вызывается метод `asyncCallback` делегата. Подробные сведения об использовании модели асинхронного программирования см. в разделе [асинхронный вызов синхронных методов](~/docs/standard/asynchronous-programming-patterns/calling-synchronous-methods-asynchronously.md)  
  
 Если происходит сбой проверки подлинности, вы получите <xref:System.Security.Authentication.AuthenticationException> или <xref:System.Security.Authentication.InvalidCredentialException>. В этом случае можно повторить попытку с другими учетными данными проверки подлинности.  
  
   
  
## Examples  
 В следующем примере кода демонстрируется вызов этого метода для начала асинхронной проверки подлинности для клиента.  
  
 [!code-cpp[NclNegoAsyncClient#2](~/samples/snippets/cpp/VS_Snippets_Remoting/NclNegoasyncClient/CPP/NclNegoasyncClient.cpp#2)]
 [!code-csharp[NclNegoAsyncClient#2](~/samples/snippets/csharp/VS_Snippets_Remoting/NclNegoasyncClient/CS/client.cs#2)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Security.Authentication.AuthenticationException">Сбой проверки подлинности. Этот объект можно использовать для повторной проверки подлинности.</exception>
        <exception cref="T:System.Security.Authentication.InvalidCredentialException">Сбой проверки подлинности. Этот объект можно использовать для повторной проверки подлинности.</exception>
        <exception cref="T:System.ObjectDisposedException">Объект закрыт.</exception>
        <exception cref="T:System.InvalidOperationException">Проверка подлинности уже выполнена.  
  
 \- или -  
  
 Этот поток уже использовался ранее при попытке проверки подлинности со стороны сервера. Этот поток нельзя использовать для повторной проверки подлинности со стороны клиента.</exception>
        <permission cref="T:System.Security.Permissions.SecurityPermission">для использования явное <see cref="T:System.Net.NetworkCredential" />. Связанное перечисление: <see cref="F:System.Security.Permissions.SecurityPermissionFlag.ControlPrincipal" />.</permission>
      </Docs>
    </Member>
    <Member MemberName="BeginAuthenticateAsClient">
      <MemberSignature Language="C#" Value="public virtual IAsyncResult BeginAuthenticateAsClient (System.Net.NetworkCredential credential, string targetName, AsyncCallback asyncCallback, object asyncState);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.IAsyncResult BeginAuthenticateAsClient(class System.Net.NetworkCredential credential, string targetName, class System.AsyncCallback asyncCallback, object asyncState) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Security.NegotiateStream.BeginAuthenticateAsClient(System.Net.NetworkCredential,System.String,System.AsyncCallback,System.Object)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual IAsyncResult ^ BeginAuthenticateAsClient(System::Net::NetworkCredential ^ credential, System::String ^ targetName, AsyncCallback ^ asyncCallback, System::Object ^ asyncState);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.Security</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.MonoTODO</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.IAsyncResult</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="credential" Type="System.Net.NetworkCredential" />
        <Parameter Name="targetName" Type="System.String" />
        <Parameter Name="asyncCallback" Type="System.AsyncCallback" />
        <Parameter Name="asyncState" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="credential">Учетные данные <see cref="T:System.Net.NetworkCredential" />, используемые для установления идентификации клиента.</param>
        <param name="targetName">Имя участника-службы (SPN), уникально определяющее сервер, подлинность которого проверяется.</param>
        <param name="asyncCallback">Делегат <see cref="T:System.AsyncCallback" />, который ссылается на метод, вызываемый после выполнения проверки подлинности.</param>
        <param name="asyncState">Пользовательский объект, содержащий сведения об операции записи. Этот объект передается делегату <c>asyncCallback</c> после завершения операции.</param>
        <summary>Вызывается клиентами для начала асинхронной операции проверки подлинности клиента, и, при необходимости, сервера в соединении клиент-сервер. Процесс проверки подлинности использует заданные учетные данные. Этот метод не блокируется.</summary>
        <returns>Объект <see cref="T:System.IAsyncResult" />, указывающий состояние асинхронной операции.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Этот метод является асинхронным и не блокируется до завершения операции. Для блокирования до завершения операции, используйте один из <xref:System.Net.Security.NegotiateStream.AuthenticateAsClient%2A> перегруженных версий метода.  
  
 Необходимо выполнить операцию асинхронной проверки подлинности путем вызова <xref:System.Net.Security.NegotiateStream.EndAuthenticateAsClient%2A> метод. Как правило, вызывается метод `asyncCallback` делегата. Подробные сведения об использовании модели асинхронного программирования см. в разделе [асинхронный вызов синхронных методов](~/docs/standard/asynchronous-programming-patterns/calling-synchronous-methods-asynchronously.md)  
  
 Если происходит сбой проверки подлинности, вы получите <xref:System.Security.Authentication.AuthenticationException> или <xref:System.Security.Authentication.InvalidCredentialException>. В этом случае можно повторить попытку с другими учетными данными проверки подлинности.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          Свойство <paramref name="credential" /> имеет значение <see langword="null" />.  
  
 \- или -  
  
 Свойство <paramref name="targetName" /> имеет значение <see langword="null" />.</exception>
        <exception cref="T:System.Security.Authentication.AuthenticationException">Сбой проверки подлинности. Этот объект можно использовать для повторной проверки подлинности.</exception>
        <exception cref="T:System.Security.Authentication.InvalidCredentialException">Сбой проверки подлинности. Этот объект можно использовать для повторной проверки подлинности.</exception>
        <exception cref="T:System.ObjectDisposedException">Объект закрыт.</exception>
        <exception cref="T:System.InvalidOperationException">Проверка подлинности уже выполнена.  
  
 \- или -  
  
 Этот поток уже использовался ранее при попытке проверки подлинности со стороны сервера. Этот поток нельзя использовать для повторной проверки подлинности со стороны клиента.</exception>
        <permission cref="T:System.Security.Permissions.SecurityPermission">для использования явное <see cref="T:System.Net.NetworkCredential" />. Связанное перечисление: <see cref="F:System.Security.Permissions.SecurityPermissionFlag.ControlPrincipal" />.</permission>
      </Docs>
    </Member>
    <Member MemberName="BeginAuthenticateAsClient">
      <MemberSignature Language="C#" Value="public virtual IAsyncResult BeginAuthenticateAsClient (System.Net.NetworkCredential credential, System.Security.Authentication.ExtendedProtection.ChannelBinding binding, string targetName, AsyncCallback asyncCallback, object asyncState);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.IAsyncResult BeginAuthenticateAsClient(class System.Net.NetworkCredential credential, class System.Security.Authentication.ExtendedProtection.ChannelBinding binding, string targetName, class System.AsyncCallback asyncCallback, object asyncState) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Security.NegotiateStream.BeginAuthenticateAsClient(System.Net.NetworkCredential,System.Security.Authentication.ExtendedProtection.ChannelBinding,System.String,System.AsyncCallback,System.Object)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual IAsyncResult ^ BeginAuthenticateAsClient(System::Net::NetworkCredential ^ credential, System::Security::Authentication::ExtendedProtection::ChannelBinding ^ binding, System::String ^ targetName, AsyncCallback ^ asyncCallback, System::Object ^ asyncState);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.Security</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.MonoTODO</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.IAsyncResult</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="credential" Type="System.Net.NetworkCredential" />
        <Parameter Name="binding" Type="System.Security.Authentication.ExtendedProtection.ChannelBinding" />
        <Parameter Name="targetName" Type="System.String" />
        <Parameter Name="asyncCallback" Type="System.AsyncCallback" />
        <Parameter Name="asyncState" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="credential">Учетные данные <see cref="T:System.Net.NetworkCredential" />, используемые для установления идентификации клиента.</param>
        <param name="binding">Объект <see cref="T:System.Security.Authentication.ExtendedProtection.ChannelBinding" />, который используется для расширенной защиты.</param>
        <param name="targetName">Имя участника-службы (SPN), уникально определяющее сервер, подлинность которого проверяется.</param>
        <param name="asyncCallback">Делегат <see cref="T:System.AsyncCallback" />, который ссылается на метод, вызываемый после выполнения проверки подлинности.</param>
        <param name="asyncState">Пользовательский объект, содержащий сведения об операции записи. Этот объект передается делегату <c>asyncCallback</c> после завершения операции.</param>
        <summary>Вызывается клиентами для начала асинхронной операции проверки подлинности клиента, и, при необходимости, сервера в соединении клиент-сервер. Процесс проверки подлинности использует заданные учетные данные и привязку канала. Этот метод не блокируется.</summary>
        <returns>Объект <see cref="T:System.IAsyncResult" />, указывающий состояние асинхронной операции.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Этот метод является асинхронным и не блокируется до завершения операции. Для блокирования до завершения операции, используйте один из <xref:System.Net.Security.NegotiateStream.AuthenticateAsClient%2A> перегруженных версий метода.  
  
 Необходимо выполнить операцию асинхронной проверки подлинности путем вызова <xref:System.Net.Security.NegotiateStream.EndAuthenticateAsClient%2A> метод. Как правило, вызывается метод `asyncCallback` делегата. Подробные сведения об использовании модели асинхронного программирования см. в разделе [асинхронный вызов синхронных методов](~/docs/standard/asynchronous-programming-patterns/calling-synchronous-methods-asynchronously.md)  
  
 Если происходит сбой проверки подлинности, вы получите <xref:System.Security.Authentication.AuthenticationException> или <xref:System.Security.Authentication.InvalidCredentialException>. В этом случае можно повторить попытку с другими учетными данными проверки подлинности.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          Свойство <paramref name="credential" /> имеет значение <see langword="null" />.  
  
 \- или -  
  
 Свойство <paramref name="targetName" /> имеет значение <see langword="null" />.</exception>
        <exception cref="T:System.Security.Authentication.AuthenticationException">Сбой проверки подлинности. Этот объект можно использовать для повторной проверки подлинности.</exception>
        <exception cref="T:System.Security.Authentication.InvalidCredentialException">Сбой проверки подлинности. Этот объект можно использовать для повторной проверки подлинности.</exception>
        <exception cref="T:System.InvalidOperationException">Проверка подлинности уже выполнена.  
  
 \- или -  
  
 Этот поток уже использовался ранее при попытке проверки подлинности со стороны сервера. Этот поток нельзя использовать для повторной проверки подлинности со стороны клиента.</exception>
        <exception cref="T:System.ObjectDisposedException">Объект закрыт.</exception>
        <altmember cref="T:System.Security.Authentication.ExtendedProtection.ChannelBinding" />
      </Docs>
    </Member>
    <Member MemberName="BeginAuthenticateAsClient">
      <MemberSignature Language="C#" Value="public virtual IAsyncResult BeginAuthenticateAsClient (System.Net.NetworkCredential credential, string targetName, System.Net.Security.ProtectionLevel requiredProtectionLevel, System.Security.Principal.TokenImpersonationLevel allowedImpersonationLevel, AsyncCallback asyncCallback, object asyncState);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.IAsyncResult BeginAuthenticateAsClient(class System.Net.NetworkCredential credential, string targetName, valuetype System.Net.Security.ProtectionLevel requiredProtectionLevel, valuetype System.Security.Principal.TokenImpersonationLevel allowedImpersonationLevel, class System.AsyncCallback asyncCallback, object asyncState) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Security.NegotiateStream.BeginAuthenticateAsClient(System.Net.NetworkCredential,System.String,System.Net.Security.ProtectionLevel,System.Security.Principal.TokenImpersonationLevel,System.AsyncCallback,System.Object)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual IAsyncResult ^ BeginAuthenticateAsClient(System::Net::NetworkCredential ^ credential, System::String ^ targetName, System::Net::Security::ProtectionLevel requiredProtectionLevel, System::Security::Principal::TokenImpersonationLevel allowedImpersonationLevel, AsyncCallback ^ asyncCallback, System::Object ^ asyncState);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.Security</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.MonoTODO</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.IAsyncResult</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="credential" Type="System.Net.NetworkCredential" />
        <Parameter Name="targetName" Type="System.String" />
        <Parameter Name="requiredProtectionLevel" Type="System.Net.Security.ProtectionLevel" />
        <Parameter Name="allowedImpersonationLevel" Type="System.Security.Principal.TokenImpersonationLevel" />
        <Parameter Name="asyncCallback" Type="System.AsyncCallback" />
        <Parameter Name="asyncState" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="credential">Учетные данные <see cref="T:System.Net.NetworkCredential" />, используемые для установления идентификации клиента.</param>
        <param name="targetName">Имя участника-службы (SPN), уникально определяющее сервер, подлинность которого проверяется.</param>
        <param name="requiredProtectionLevel">Одно из значений перечисления <see cref="T:System.Net.Security.ProtectionLevel" />, указывающее службы безопасности для потока.</param>
        <param name="allowedImpersonationLevel">Одно из значений перечисления <see cref="T:System.Security.Principal.TokenImpersonationLevel" />, указывающее, как сервер может использовать учетные записи клиента для доступа к ресурсам.</param>
        <param name="asyncCallback">Делегат <see cref="T:System.AsyncCallback" />, который ссылается на метод, вызываемый после выполнения проверки подлинности.</param>
        <param name="asyncState">Пользовательский объект, содержащий сведения об операции записи. Этот объект передается делегату <c>asyncCallback</c> после завершения операции.</param>
        <summary>Вызывается клиентами для начала асинхронной операции проверки подлинности клиента, и, при необходимости, сервера в соединении клиент-сервер. Процесс проверки подлинности использует заданные учетные данные сервера и параметры проверки подлинности. Этот метод не блокируется.</summary>
        <returns>Объект <see cref="T:System.IAsyncResult" />, указывающий состояние асинхронной операции.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Используйте `requiredProtectionLevel` параметр для запроса служб безопасности для данных, передаваемых с помощью потока с выполненной проверкой подлинности. Например, чтобы данные шифруются и подписываются, укажите <xref:System.Net.Security.ProtectionLevel.EncryptAndSign> значение. Для успешной проверки подлинности не гарантируют того, запрошенный <xref:System.Net.Security.ProtectionLevel> были предоставлены. Необходимо проверить <xref:System.Net.Security.NegotiateStream.IsEncrypted%2A> и <xref:System.Net.Security.NegotiateStream.IsSigned%2A> свойства, чтобы определить, какие службы безопасности используются <xref:System.Net.Security.NegotiateStream>.  
  
 Этот метод является асинхронным и не блокируется до завершения операции. Для блокирования до завершения операции, используйте один из <xref:System.Net.Security.NegotiateStream.AuthenticateAsClient%2A> перегруженных версий метода.  
  
 Необходимо выполнить операцию асинхронной проверки подлинности путем вызова <xref:System.Net.Security.NegotiateStream.EndAuthenticateAsClient%2A> метод. Как правило, вызывается метод `asyncCallback` делегата. Подробные сведения об использовании модели асинхронного программирования см. в разделе [асинхронный вызов синхронных методов](~/docs/standard/asynchronous-programming-patterns/calling-synchronous-methods-asynchronously.md)  
  
 Если происходит сбой проверки подлинности, вы получите <xref:System.Security.Authentication.AuthenticationException> или <xref:System.Security.Authentication.InvalidCredentialException>. В этом случае можно повторить попытку с другими учетными данными проверки подлинности.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          Свойство <paramref name="credential" /> имеет значение <see langword="null" />.  
  
 \- или -  
  
 Свойство <paramref name="targetName" /> имеет значение <see langword="null" />.</exception>
        <exception cref="T:System.Security.Authentication.AuthenticationException">Сбой проверки подлинности. Этот объект можно использовать для повторной проверки подлинности.</exception>
        <exception cref="T:System.Security.Authentication.InvalidCredentialException">Сбой проверки подлинности. Этот объект можно использовать для повторной проверки подлинности.</exception>
        <exception cref="T:System.ObjectDisposedException">Объект закрыт.</exception>
        <exception cref="T:System.InvalidOperationException">Проверка подлинности уже выполнена.  
  
 \- или -  
  
 Этот поток уже использовался ранее при попытке проверки подлинности со стороны сервера. Этот поток нельзя использовать для повторной проверки подлинности со стороны клиента.</exception>
        <permission cref="T:System.Security.Permissions.SecurityPermission">для использования явное <see cref="T:System.Net.NetworkCredential" />. Связанное перечисление: <see cref="F:System.Security.Permissions.SecurityPermissionFlag.ControlPrincipal" />.</permission>
      </Docs>
    </Member>
    <Member MemberName="BeginAuthenticateAsClient">
      <MemberSignature Language="C#" Value="public virtual IAsyncResult BeginAuthenticateAsClient (System.Net.NetworkCredential credential, System.Security.Authentication.ExtendedProtection.ChannelBinding binding, string targetName, System.Net.Security.ProtectionLevel requiredProtectionLevel, System.Security.Principal.TokenImpersonationLevel allowedImpersonationLevel, AsyncCallback asyncCallback, object asyncState);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.IAsyncResult BeginAuthenticateAsClient(class System.Net.NetworkCredential credential, class System.Security.Authentication.ExtendedProtection.ChannelBinding binding, string targetName, valuetype System.Net.Security.ProtectionLevel requiredProtectionLevel, valuetype System.Security.Principal.TokenImpersonationLevel allowedImpersonationLevel, class System.AsyncCallback asyncCallback, object asyncState) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Security.NegotiateStream.BeginAuthenticateAsClient(System.Net.NetworkCredential,System.Security.Authentication.ExtendedProtection.ChannelBinding,System.String,System.Net.Security.ProtectionLevel,System.Security.Principal.TokenImpersonationLevel,System.AsyncCallback,System.Object)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual IAsyncResult ^ BeginAuthenticateAsClient(System::Net::NetworkCredential ^ credential, System::Security::Authentication::ExtendedProtection::ChannelBinding ^ binding, System::String ^ targetName, System::Net::Security::ProtectionLevel requiredProtectionLevel, System::Security::Principal::TokenImpersonationLevel allowedImpersonationLevel, AsyncCallback ^ asyncCallback, System::Object ^ asyncState);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.Security</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.MonoTODO</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.IAsyncResult</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="credential" Type="System.Net.NetworkCredential" />
        <Parameter Name="binding" Type="System.Security.Authentication.ExtendedProtection.ChannelBinding" />
        <Parameter Name="targetName" Type="System.String" />
        <Parameter Name="requiredProtectionLevel" Type="System.Net.Security.ProtectionLevel" />
        <Parameter Name="allowedImpersonationLevel" Type="System.Security.Principal.TokenImpersonationLevel" />
        <Parameter Name="asyncCallback" Type="System.AsyncCallback" />
        <Parameter Name="asyncState" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="credential">Учетные данные <see cref="T:System.Net.NetworkCredential" />, используемые для установления идентификации клиента.</param>
        <param name="binding">Объект <see cref="T:System.Security.Authentication.ExtendedProtection.ChannelBinding" />, который используется для расширенной защиты.</param>
        <param name="targetName">Имя участника-службы (SPN), уникально определяющее сервер, подлинность которого проверяется.</param>
        <param name="requiredProtectionLevel">Одно из значений перечисления <see cref="T:System.Net.Security.ProtectionLevel" />, указывающее службы безопасности для потока.</param>
        <param name="allowedImpersonationLevel">Одно из значений перечисления <see cref="T:System.Security.Principal.TokenImpersonationLevel" />, указывающее, как сервер может использовать учетные записи клиента для доступа к ресурсам.</param>
        <param name="asyncCallback">Делегат <see cref="T:System.AsyncCallback" />, который ссылается на метод, вызываемый после выполнения проверки подлинности.</param>
        <param name="asyncState">Пользовательский объект, содержащий сведения об операции записи. Этот объект передается делегату <c>asyncCallback</c> после завершения операции.</param>
        <summary>Вызывается клиентами для начала асинхронной операции проверки подлинности клиента, и, при необходимости, сервера в соединении клиент-сервер. Процесс проверки подлинности использует заданные учетные данные, параметры проверки подлинности и привязку канала. Этот метод не блокируется.</summary>
        <returns>Объект <see cref="T:System.IAsyncResult" />, указывающий состояние асинхронной операции.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Используйте `requiredProtectionLevel` параметр для запроса служб безопасности для данных, передаваемых с помощью потока с выполненной проверкой подлинности. Например, чтобы данные шифруются и подписываются, укажите <xref:System.Net.Security.ProtectionLevel.EncryptAndSign> значение. Для успешной проверки подлинности не гарантируют того, запрошенный <xref:System.Net.Security.ProtectionLevel> были предоставлены. Необходимо проверить <xref:System.Net.Security.NegotiateStream.IsEncrypted%2A> и <xref:System.Net.Security.NegotiateStream.IsSigned%2A> свойства, чтобы определить, какие службы безопасности используются <xref:System.Net.Security.NegotiateStream>.  
  
 Этот метод является асинхронным и не блокируется до завершения операции. Для блокирования до завершения операции, используйте один из <xref:System.Net.Security.NegotiateStream.AuthenticateAsClient%2A> перегруженных версий метода.  
  
 Необходимо выполнить операцию асинхронной проверки подлинности путем вызова <xref:System.Net.Security.NegotiateStream.EndAuthenticateAsClient%2A> метод. Как правило, вызывается метод `asyncCallback` делегата. Подробные сведения об использовании модели асинхронного программирования см. в разделе [асинхронный вызов синхронных методов](~/docs/standard/asynchronous-programming-patterns/calling-synchronous-methods-asynchronously.md)  
  
 Если происходит сбой проверки подлинности, вы получите <xref:System.Security.Authentication.AuthenticationException> или <xref:System.Security.Authentication.InvalidCredentialException>. В этом случае можно повторить попытку с другими учетными данными проверки подлинности.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          Свойство <paramref name="credential" /> имеет значение <see langword="null" />.  
  
 \- или -  
  
 Свойство <paramref name="targetName" /> имеет значение <see langword="null" />.</exception>
        <exception cref="T:System.Security.Authentication.AuthenticationException">Сбой проверки подлинности. Этот объект можно использовать для повторной проверки подлинности.</exception>
        <exception cref="T:System.Security.Authentication.InvalidCredentialException">Сбой проверки подлинности. Этот объект можно использовать для повторной проверки подлинности.</exception>
        <exception cref="T:System.InvalidOperationException">Проверка подлинности уже выполнена.  
  
 \- или -  
  
 Этот поток уже использовался ранее при попытке проверки подлинности со стороны сервера. Этот поток нельзя использовать для повторной проверки подлинности со стороны клиента.</exception>
        <exception cref="T:System.ObjectDisposedException">Объект закрыт.</exception>
        <altmember cref="T:System.Security.Authentication.ExtendedProtection.ChannelBinding" />
      </Docs>
    </Member>
    <MemberGroup MemberName="BeginAuthenticateAsServer">
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Начинает асинхронную операцию для проверки подлинности серверной стороны соединения клиент-сервер.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Перегрузки этого метода не блокируют проверку подлинности во время выполнения. Чтобы заблокировать при ожидании завершения операции проверки подлинности, используется <xref:System.Net.Security.NegotiateStream.AuthenticateAsServer%2A> метод.  
  
 ]]></format>
        </remarks>
      </Docs>
    </MemberGroup>
    <Member MemberName="BeginAuthenticateAsServer">
      <MemberSignature Language="C#" Value="public virtual IAsyncResult BeginAuthenticateAsServer (AsyncCallback asyncCallback, object asyncState);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.IAsyncResult BeginAuthenticateAsServer(class System.AsyncCallback asyncCallback, object asyncState) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Security.NegotiateStream.BeginAuthenticateAsServer(System.AsyncCallback,System.Object)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual IAsyncResult ^ BeginAuthenticateAsServer(AsyncCallback ^ asyncCallback, System::Object ^ asyncState);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.Security</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.MonoTODO</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.IAsyncResult</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="asyncCallback" Type="System.AsyncCallback" />
        <Parameter Name="asyncState" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="asyncCallback">Делегат <see cref="T:System.AsyncCallback" />, который ссылается на метод, вызываемый после выполнения проверки подлинности.</param>
        <param name="asyncState">Пользовательский объект, содержащий сведения о данной операции. Этот объект передается делегату <c>asyncCallback</c> после завершения операции.</param>
        <summary>Вызывается серверами для начала асинхронной операции проверки подлинности клиента, и, при необходимости, сервера в соединении клиент-сервер. Этот метод не блокируется.</summary>
        <returns>Объект <see cref="T:System.IAsyncResult" />, указывающий состояние асинхронной операции.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Сервер использует проверку подлинности <xref:System.Net.CredentialCache.DefaultCredentials%2A>. Нет имя участника службы (SPN), указанную для сервера. Уровень олицетворения равен <xref:System.Security.Principal.TokenImpersonationLevel.Identification>, уровень безопасности при <xref:System.Net.Security.ProtectionLevel.EncryptAndSign>.  
  
 При успешной проверке подлинности, необходимо проверить <xref:System.Net.Security.NegotiateStream.IsEncrypted%2A> и <xref:System.Net.Security.NegotiateStream.IsSigned%2A> свойства, чтобы определить, какие службы безопасности используются <xref:System.Net.Security.NegotiateStream>. Проверьте <xref:System.Net.Security.NegotiateStream.IsMutuallyAuthenticated%2A> свойства, чтобы определить, выполнена ли взаимная проверка подлинности.  
  
 Для блокирования до завершения операции, используйте один из <xref:System.Net.Security.NegotiateStream.AuthenticateAsServer%2A> перегруженных версий метода.  
  
 Если происходит сбой проверки подлинности, вы получите <xref:System.Security.Authentication.AuthenticationException> или <xref:System.Security.Authentication.InvalidCredentialException>. В этом случае можно повторить попытку с другими учетными данными проверки подлинности.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Security.Authentication.AuthenticationException">Сбой проверки подлинности. Этот объект можно использовать для повторной проверки подлинности.</exception>
        <exception cref="T:System.Security.Authentication.InvalidCredentialException">Сбой проверки подлинности. Этот объект можно использовать для повторной проверки подлинности.</exception>
        <exception cref="T:System.ObjectDisposedException">Объект закрыт.</exception>
        <exception cref="T:System.NotSupportedException">Системы Windows 95 и Windows 98 не поддерживаются.</exception>
        <permission cref="T:System.Security.Permissions.SecurityPermission">для использования явное <see cref="T:System.Net.NetworkCredential" />. Связанное перечисление: <see cref="F:System.Security.Permissions.SecurityPermissionFlag.ControlPrincipal" />.</permission>
      </Docs>
    </Member>
    <Member MemberName="BeginAuthenticateAsServer">
      <MemberSignature Language="C#" Value="public virtual IAsyncResult BeginAuthenticateAsServer (System.Security.Authentication.ExtendedProtection.ExtendedProtectionPolicy policy, AsyncCallback asyncCallback, object asyncState);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.IAsyncResult BeginAuthenticateAsServer(class System.Security.Authentication.ExtendedProtection.ExtendedProtectionPolicy policy, class System.AsyncCallback asyncCallback, object asyncState) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Security.NegotiateStream.BeginAuthenticateAsServer(System.Security.Authentication.ExtendedProtection.ExtendedProtectionPolicy,System.AsyncCallback,System.Object)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual IAsyncResult ^ BeginAuthenticateAsServer(System::Security::Authentication::ExtendedProtection::ExtendedProtectionPolicy ^ policy, AsyncCallback ^ asyncCallback, System::Object ^ asyncState);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.Security</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.MonoTODO</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.IAsyncResult</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="policy" Type="System.Security.Authentication.ExtendedProtection.ExtendedProtectionPolicy" />
        <Parameter Name="asyncCallback" Type="System.AsyncCallback" />
        <Parameter Name="asyncState" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="policy">Объект <see cref="T:System.Security.Authentication.ExtendedProtection.ExtendedProtectionPolicy" />, который используется для расширенной защиты.</param>
        <param name="asyncCallback">Делегат <see cref="T:System.AsyncCallback" />, который ссылается на метод, вызываемый после выполнения проверки подлинности.</param>
        <param name="asyncState">Пользовательский объект, содержащий сведения об операции записи. Этот объект передается делегату <c>asyncCallback</c> после завершения операции.</param>
        <summary>Вызывается серверами для начала асинхронной операции проверки подлинности клиента, и, при необходимости, сервера в соединении клиент-сервер. Процесс проверки подлинности использует заданную политику расширенной защиты. Этот метод не блокируется.</summary>
        <returns>Объект <see cref="T:System.IAsyncResult" />, указывающий состояние асинхронной операции.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Сервер использует проверку подлинности <xref:System.Net.CredentialCache.DefaultCredentials%2A>. Нет имя участника службы (SPN), указанную для сервера. Уровень олицетворения равен <xref:System.Security.Principal.TokenImpersonationLevel.Identification>, уровень безопасности при <xref:System.Net.Security.ProtectionLevel.EncryptAndSign>.  
  
 Если `policy` параметр `null`, то используется Расширенная политика защиты с <xref:System.Security.Authentication.ExtendedProtection.ExtendedProtectionPolicy.PolicyEnforcement%2A> значение <xref:System.Security.Authentication.ExtendedProtection.PolicyEnforcement.Never>.  
  
 При успешной проверке подлинности, необходимо проверить <xref:System.Net.Security.NegotiateStream.IsEncrypted%2A> и <xref:System.Net.Security.NegotiateStream.IsSigned%2A> свойства, чтобы определить, какие службы безопасности используются <xref:System.Net.Security.NegotiateStream>. Проверьте <xref:System.Net.Security.NegotiateStream.IsMutuallyAuthenticated%2A> свойства, чтобы определить, выполнена ли взаимная проверка подлинности.  
  
 Для блокирования до завершения операции, используйте один из <xref:System.Net.Security.NegotiateStream.AuthenticateAsServer%2A> перегруженных версий метода.  
  
 Если происходит сбой проверки подлинности, вы получите <xref:System.Security.Authentication.AuthenticationException> или <xref:System.Security.Authentication.InvalidCredentialException>. В этом случае можно повторить попытку с другими учетными данными проверки подлинности.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">Оба свойства <see cref="P:System.Security.Authentication.ExtendedProtection.ExtendedProtectionPolicy.CustomChannelBinding" /> и <see cref="P:System.Security.Authentication.ExtendedProtection.ExtendedProtectionPolicy.CustomServiceNames" /> в расширенной политике защиты, переданной параметром <paramref name="policy" />, имеют значение <see langword="null" />.</exception>
        <exception cref="T:System.Security.Authentication.AuthenticationException">Сбой проверки подлинности. Этот объект можно использовать для повторной проверки подлинности.</exception>
        <exception cref="T:System.Security.Authentication.InvalidCredentialException">Сбой проверки подлинности. Этот объект можно использовать для повторной проверки подлинности.</exception>
        <exception cref="T:System.NotSupportedException">Системы Windows 95 и Windows 98 не поддерживаются.</exception>
        <exception cref="T:System.ObjectDisposedException">Объект закрыт.</exception>
        <exception cref="T:System.PlatformNotSupportedException">Параметру <paramref name="policy" /> было присвоено значение параметра <see cref="F:System.Security.Authentication.ExtendedProtection.PolicyEnforcement.Always" /> на платформе, которая не поддерживает расширенную защиту.</exception>
        <altmember cref="T:System.Security.Authentication.ExtendedProtection.ExtendedProtectionPolicy" />
      </Docs>
    </Member>
    <Member MemberName="BeginAuthenticateAsServer">
      <MemberSignature Language="C#" Value="public virtual IAsyncResult BeginAuthenticateAsServer (System.Net.NetworkCredential credential, System.Net.Security.ProtectionLevel requiredProtectionLevel, System.Security.Principal.TokenImpersonationLevel requiredImpersonationLevel, AsyncCallback asyncCallback, object asyncState);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.IAsyncResult BeginAuthenticateAsServer(class System.Net.NetworkCredential credential, valuetype System.Net.Security.ProtectionLevel requiredProtectionLevel, valuetype System.Security.Principal.TokenImpersonationLevel requiredImpersonationLevel, class System.AsyncCallback asyncCallback, object asyncState) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Security.NegotiateStream.BeginAuthenticateAsServer(System.Net.NetworkCredential,System.Net.Security.ProtectionLevel,System.Security.Principal.TokenImpersonationLevel,System.AsyncCallback,System.Object)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual IAsyncResult ^ BeginAuthenticateAsServer(System::Net::NetworkCredential ^ credential, System::Net::Security::ProtectionLevel requiredProtectionLevel, System::Security::Principal::TokenImpersonationLevel requiredImpersonationLevel, AsyncCallback ^ asyncCallback, System::Object ^ asyncState);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.Security</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.MonoTODO</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.IAsyncResult</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="credential" Type="System.Net.NetworkCredential" />
        <Parameter Name="requiredProtectionLevel" Type="System.Net.Security.ProtectionLevel" />
        <Parameter Name="requiredImpersonationLevel" Type="System.Security.Principal.TokenImpersonationLevel" />
        <Parameter Name="asyncCallback" Type="System.AsyncCallback" />
        <Parameter Name="asyncState" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="credential">Учетные данные <see cref="T:System.Net.NetworkCredential" />, используемые для установления идентификации клиента.</param>
        <param name="requiredProtectionLevel">Одно из значений перечисления <see cref="T:System.Net.Security.ProtectionLevel" />, указывающее службы безопасности для потока.</param>
        <param name="requiredImpersonationLevel">Одно из значений перечисления <see cref="T:System.Security.Principal.TokenImpersonationLevel" />, указывающее, как сервер может использовать учетные записи клиента для доступа к ресурсам.</param>
        <param name="asyncCallback">Делегат <see cref="T:System.AsyncCallback" />, который ссылается на метод, вызываемый после выполнения проверки подлинности.</param>
        <param name="asyncState">Пользовательский объект, содержащий сведения о данной операции. Этот объект передается делегату <c>asyncCallback</c> после завершения операции.</param>
        <summary>Вызывается серверами для начала асинхронной операции проверки подлинности клиента, и, при необходимости, сервера в соединении клиент-сервер. Процесс проверки подлинности использует заданные учетные данные сервера и параметры проверки подлинности. Этот метод не блокируется.</summary>
        <returns>Объект <see cref="T:System.IAsyncResult" />, указывающий состояние асинхронной операции.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Используйте `requiredProtectionLevel` параметр для запроса служб безопасности для данных, передаваемых с помощью потока с выполненной проверкой подлинности. Например, чтобы данные шифруются и подписываются, укажите <xref:System.Net.Security.ProtectionLevel.EncryptAndSign> значение. Для успешной проверки подлинности не гарантировать, что запрошенный <xref:System.Net.Security.ProtectionLevel> были предоставлены. Необходимо проверить <xref:System.Net.Security.NegotiateStream.IsEncrypted%2A> и <xref:System.Net.Security.NegotiateStream.IsSigned%2A> свойства, чтобы определить, какие службы безопасности используются <xref:System.Net.Security.NegotiateStream>.  
  
 Этот метод является асинхронным и не блокируется до завершения операции. Для блокирования до завершения операции, используйте один из <xref:System.Net.Security.NegotiateStream.AuthenticateAsServer%2A> перегруженных версий метода.  
  
 Необходимо выполнить операцию асинхронной проверки подлинности путем вызова <xref:System.Net.Security.NegotiateStream.EndAuthenticateAsServer%2A> метод. Как правило, вызывается метод `asyncCallback` делегата. Подробные сведения об использовании модели асинхронного программирования см. в разделе [асинхронный вызов синхронных методов](~/docs/standard/asynchronous-programming-patterns/calling-synchronous-methods-asynchronously.md)  
  
 Если происходит сбой проверки подлинности, вы получите <xref:System.Security.Authentication.AuthenticationException> или <xref:System.Security.Authentication.InvalidCredentialException>. В этом случае можно повторить попытку с другими учетными данными проверки подлинности.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          Свойство <paramref name="credential" /> имеет значение <see langword="null" />.</exception>
        <exception cref="T:System.ArgumentOutOfRangeException">
          Параметр <paramref name="requiredImpersonationLevel" /> должен иметь значение <see cref="F:System.Security.Principal.TokenImpersonationLevel.Identification" />, <see cref="F:System.Security.Principal.TokenImpersonationLevel.Impersonation" /> или <see cref="F:System.Security.Principal.TokenImpersonationLevel.Delegation" />,</exception>
        <exception cref="T:System.Security.Authentication.AuthenticationException">Сбой проверки подлинности. Этот объект можно использовать для повторной проверки подлинности.</exception>
        <exception cref="T:System.Security.Authentication.InvalidCredentialException">Сбой проверки подлинности. Этот объект можно использовать для повторной проверки подлинности.</exception>
        <exception cref="T:System.ObjectDisposedException">Объект закрыт.</exception>
        <exception cref="T:System.InvalidOperationException">Проверка подлинности уже выполнена.  
  
 \- или -  
  
 Этот поток уже использовался ранее при попытке проверки подлинности со стороны клиента. Этот поток нельзя использовать для повторной проверки подлинности со стороны сервера.</exception>
        <exception cref="T:System.NotSupportedException">Системы Windows 95 и Windows 98 не поддерживаются.</exception>
        <permission cref="T:System.Security.Permissions.SecurityPermission">для использования явное <see cref="T:System.Net.NetworkCredential" />. Связанное перечисление: <see cref="F:System.Security.Permissions.SecurityPermissionFlag.ControlPrincipal" />.</permission>
      </Docs>
    </Member>
    <Member MemberName="BeginAuthenticateAsServer">
      <MemberSignature Language="C#" Value="public virtual IAsyncResult BeginAuthenticateAsServer (System.Net.NetworkCredential credential, System.Security.Authentication.ExtendedProtection.ExtendedProtectionPolicy policy, System.Net.Security.ProtectionLevel requiredProtectionLevel, System.Security.Principal.TokenImpersonationLevel requiredImpersonationLevel, AsyncCallback asyncCallback, object asyncState);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.IAsyncResult BeginAuthenticateAsServer(class System.Net.NetworkCredential credential, class System.Security.Authentication.ExtendedProtection.ExtendedProtectionPolicy policy, valuetype System.Net.Security.ProtectionLevel requiredProtectionLevel, valuetype System.Security.Principal.TokenImpersonationLevel requiredImpersonationLevel, class System.AsyncCallback asyncCallback, object asyncState) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Security.NegotiateStream.BeginAuthenticateAsServer(System.Net.NetworkCredential,System.Security.Authentication.ExtendedProtection.ExtendedProtectionPolicy,System.Net.Security.ProtectionLevel,System.Security.Principal.TokenImpersonationLevel,System.AsyncCallback,System.Object)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual IAsyncResult ^ BeginAuthenticateAsServer(System::Net::NetworkCredential ^ credential, System::Security::Authentication::ExtendedProtection::ExtendedProtectionPolicy ^ policy, System::Net::Security::ProtectionLevel requiredProtectionLevel, System::Security::Principal::TokenImpersonationLevel requiredImpersonationLevel, AsyncCallback ^ asyncCallback, System::Object ^ asyncState);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.Security</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.MonoTODO</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.IAsyncResult</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="credential" Type="System.Net.NetworkCredential" />
        <Parameter Name="policy" Type="System.Security.Authentication.ExtendedProtection.ExtendedProtectionPolicy" />
        <Parameter Name="requiredProtectionLevel" Type="System.Net.Security.ProtectionLevel" />
        <Parameter Name="requiredImpersonationLevel" Type="System.Security.Principal.TokenImpersonationLevel" />
        <Parameter Name="asyncCallback" Type="System.AsyncCallback" />
        <Parameter Name="asyncState" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="credential">Учетные данные <see cref="T:System.Net.NetworkCredential" />, используемые для установления идентификации клиента.</param>
        <param name="policy">Объект <see cref="T:System.Security.Authentication.ExtendedProtection.ExtendedProtectionPolicy" />, который используется для расширенной защиты.</param>
        <param name="requiredProtectionLevel">Одно из значений перечисления <see cref="T:System.Net.Security.ProtectionLevel" />, указывающее службы безопасности для потока.</param>
        <param name="requiredImpersonationLevel">Одно из значений перечисления <see cref="T:System.Security.Principal.TokenImpersonationLevel" />, указывающее, как сервер может использовать учетные записи клиента для доступа к ресурсам.</param>
        <param name="asyncCallback">Делегат <see cref="T:System.AsyncCallback" />, который ссылается на метод, вызываемый после выполнения проверки подлинности.</param>
        <param name="asyncState">Пользовательский объект, содержащий сведения об операции записи. Этот объект передается делегату <c>asyncCallback</c> после завершения операции.</param>
        <summary>Вызывается серверами для начала асинхронной операции проверки подлинности клиента, и, при необходимости, сервера в соединении клиент-сервер. Процесс проверки подлинности использует заданные учетные данные сервера, параметры проверки подлинности и политику расширенной защиты. Этот метод не блокируется.</summary>
        <returns>Объект <see cref="T:System.IAsyncResult" />, указывающий состояние асинхронной операции.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Используйте `requiredProtectionLevel` параметр для запроса служб безопасности для данных, передаваемых с помощью потока с выполненной проверкой подлинности. Например, чтобы данные шифруются и подписываются, укажите <xref:System.Net.Security.ProtectionLevel.EncryptAndSign> значение. Для успешной проверки подлинности не гарантировать, что запрошенный <xref:System.Net.Security.ProtectionLevel> были предоставлены. Необходимо проверить <xref:System.Net.Security.NegotiateStream.IsEncrypted%2A> и <xref:System.Net.Security.NegotiateStream.IsSigned%2A> свойства, чтобы определить, какие службы безопасности используются <xref:System.Net.Security.NegotiateStream>.  
  
 Если `policy` параметр `null`, то используется Расширенная политика защиты с <xref:System.Security.Authentication.ExtendedProtection.ExtendedProtectionPolicy.PolicyEnforcement%2A> значение <xref:System.Security.Authentication.ExtendedProtection.PolicyEnforcement.Never>.  
  
 Этот метод является асинхронным и не блокируется до завершения операции. Для блокирования до завершения операции, используйте один из <xref:System.Net.Security.NegotiateStream.AuthenticateAsServer%2A> перегруженных версий метода.  
  
 Необходимо выполнить операцию асинхронной проверки подлинности путем вызова <xref:System.Net.Security.NegotiateStream.EndAuthenticateAsServer%2A> метод. Как правило, вызывается метод `asyncCallback` делегата. Подробные сведения об использовании модели асинхронного программирования см. в разделе [асинхронный вызов синхронных методов](~/docs/standard/asynchronous-programming-patterns/calling-synchronous-methods-asynchronously.md)  
  
 Если происходит сбой проверки подлинности, вы получите <xref:System.Security.Authentication.AuthenticationException> или <xref:System.Security.Authentication.InvalidCredentialException>. В этом случае можно повторить попытку с другими учетными данными проверки подлинности.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">Оба свойства <see cref="P:System.Security.Authentication.ExtendedProtection.ExtendedProtectionPolicy.CustomChannelBinding" /> и <see cref="P:System.Security.Authentication.ExtendedProtection.ExtendedProtectionPolicy.CustomServiceNames" /> в расширенной политике защиты, переданной параметром <paramref name="policy" />, имеют значение <see langword="null" />.</exception>
        <exception cref="T:System.ArgumentNullException">
          Свойство <paramref name="credential" /> имеет значение <see langword="null" />.</exception>
        <exception cref="T:System.ArgumentOutOfRangeException">
          Параметр <paramref name="requiredImpersonationLevel" /> должен иметь значение <see cref="F:System.Security.Principal.TokenImpersonationLevel.Identification" />, <see cref="F:System.Security.Principal.TokenImpersonationLevel.Impersonation" /> или <see cref="F:System.Security.Principal.TokenImpersonationLevel.Delegation" />,</exception>
        <exception cref="T:System.Security.Authentication.AuthenticationException">Сбой проверки подлинности. Этот объект можно использовать для повторной проверки подлинности.</exception>
        <exception cref="T:System.Security.Authentication.InvalidCredentialException">Сбой проверки подлинности. Этот объект можно использовать для повторной проверки подлинности.</exception>
        <exception cref="T:System.InvalidOperationException">Проверка подлинности уже выполнена.  
  
 \- или -  
  
 Этот поток уже использовался ранее при попытке проверки подлинности со стороны клиента. Этот поток нельзя использовать для повторной проверки подлинности со стороны сервера.</exception>
        <exception cref="T:System.NotSupportedException">Системы Windows 95 и Windows 98 не поддерживаются.</exception>
        <exception cref="T:System.ObjectDisposedException">Объект закрыт.</exception>
        <exception cref="T:System.PlatformNotSupportedException">Параметру <paramref name="policy" /> было присвоено значение параметра <see cref="F:System.Security.Authentication.ExtendedProtection.PolicyEnforcement.Always" /> на платформе, которая не поддерживает расширенную защиту.</exception>
        <altmember cref="T:System.Security.Authentication.ExtendedProtection.ExtendedProtectionPolicy" />
      </Docs>
    </Member>
    <Member MemberName="BeginRead">
      <MemberSignature Language="C#" Value="public override IAsyncResult BeginRead (byte[] buffer, int offset, int count, AsyncCallback asyncCallback, object asyncState);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance class System.IAsyncResult BeginRead(unsigned int8[] buffer, int32 offset, int32 count, class System.AsyncCallback asyncCallback, object asyncState) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Security.NegotiateStream.BeginRead(System.Byte[],System.Int32,System.Int32,System.AsyncCallback,System.Object)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override IAsyncResult ^ BeginRead(cli::array &lt;System::Byte&gt; ^ buffer, int offset, int count, AsyncCallback ^ asyncCallback, System::Object ^ asyncState);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.Security</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.MonoTODO</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.IAsyncResult</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="buffer" Type="System.Byte[]" />
        <Parameter Name="offset" Type="System.Int32" />
        <Parameter Name="count" Type="System.Int32" />
        <Parameter Name="asyncCallback" Type="System.AsyncCallback" />
        <Parameter Name="asyncState" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="buffer">Массив элементов <see cref="T:System.Byte" />, куда помещаются байты, считанные из потока.</param>
        <param name="offset">Отсчитываемое от нуля расположение в <c>buffer</c>, с которого начинается сохранение данных, считанных из этого потока.</param>
        <param name="count">Максимальное число байтов, которое должно быть считано из потока.</param>
        <param name="asyncCallback">Делегат <see cref="T:System.AsyncCallback" />, ссылающийся на метод, который следует вызвать после завершения операции чтения.</param>
        <param name="asyncState">Пользовательский объект, содержащий сведения о данной операции. Этот объект передается делегату <c>asyncCallback</c> после завершения операции.</param>
        <summary>Начинает асинхронную операцию чтения, которая считывает данные из потока и сохраняет их в заданном массиве.</summary>
        <returns>Объект <see cref="T:System.IAsyncResult" />, указывающий состояние асинхронной операции.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Если включено шифрование, подписывание или шифрования и подписи, операция чтения считывает данные из базового потока, проверяет целостность данных и расшифровывает его. Если службы безопасности, такие как шифрование данных или подписывание, используется, этот метод запускает асинхронную операцию чтения базового потока.  
  
 Этот метод является асинхронным и не блокируется до завершения операции. Для блокирования до завершения операции, используйте <xref:System.Net.Security.NegotiateStream.Read%2A> метод.  
  
 Необходимо выполнить операцию асинхронного чтения путем вызова <xref:System.Net.Security.NegotiateStream.EndRead%2A> метод. Как правило, вызывается метод `asyncCallback` делегата. Подробные сведения об использовании модели асинхронного программирования см. в разделе [асинхронный вызов синхронных методов](~/docs/standard/asynchronous-programming-patterns/calling-synchronous-methods-asynchronously.md)  
  
 <xref:System.Net.Security.NegotiateStream> Класс не поддерживает несколько одновременных операций чтения. При попытке запустить операцию чтения при другой операции чтения в том же потоке уже выполняется операция <xref:System.NotSupportedException> будет создано исключение.  
  
 Этот метод нельзя вызывать до успешного выполнения проверки подлинности. Для проверки подлинности, вызовите один из <xref:System.Net.Security.NegotiateStream.AuthenticateAsClient%2A>, <xref:System.Net.Security.NegotiateStream.BeginAuthenticateAsClient%2A>, <xref:System.Net.Security.NegotiateStream.AuthenticateAsServer%2A>, или <xref:System.Net.Security.NegotiateStream.BeginAuthenticateAsServer%2A> методы.  
  
   
  
## Examples  
 В следующем примере кода показано, как запускается асинхронная операция чтения. Данный пример кода является частью большего примера, приведенного для <xref:System.Net.Security.NegotiateStream> класса.  
  
 [!code-cpp[NclNegoAsyncServer#1](~/samples/snippets/cpp/VS_Snippets_Remoting/NclNegoAsyncServer/CPP/NclNegoAsyncServer.cpp#1)]
 [!code-csharp[NclNegoAsyncServer#1](~/samples/snippets/csharp/VS_Snippets_Remoting/NclNegoAsyncServer/CS/server.cs#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          Свойство <paramref name="buffer" /> имеет значение <see langword="null" />.</exception>
        <exception cref="T:System.ArgumentException">
          Значение параметра <paramref name="offset" /> меньше 0.  
  
 \- или -  
  
 Значение <paramref name="offset" /> превышает длину <paramref name="buffer" />.  
  
 \- или -  
  
 <paramref name="offset" /> плюс <paramref name="count" /> превышает длину массива <paramref name="buffer" />.</exception>
        <exception cref="T:System.IO.IOException">Сбой операции чтения.  
  
 \- или -  
  
 Используется шифрование, но не удается расшифровать данные.</exception>
        <exception cref="T:System.NotSupportedException">Уже существует выполняющаяся операция чтения.</exception>
        <exception cref="T:System.ObjectDisposedException">Объект закрыт.</exception>
        <exception cref="T:System.InvalidOperationException">Проверка подлинности не выполнялась.</exception>
      </Docs>
    </Member>
    <Member MemberName="BeginWrite">
      <MemberSignature Language="C#" Value="public override IAsyncResult BeginWrite (byte[] buffer, int offset, int count, AsyncCallback asyncCallback, object asyncState);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance class System.IAsyncResult BeginWrite(unsigned int8[] buffer, int32 offset, int32 count, class System.AsyncCallback asyncCallback, object asyncState) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Security.NegotiateStream.BeginWrite(System.Byte[],System.Int32,System.Int32,System.AsyncCallback,System.Object)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override IAsyncResult ^ BeginWrite(cli::array &lt;System::Byte&gt; ^ buffer, int offset, int count, AsyncCallback ^ asyncCallback, System::Object ^ asyncState);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.Security</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.MonoTODO</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.IAsyncResult</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="buffer" Type="System.Byte[]" />
        <Parameter Name="offset" Type="System.Int32" />
        <Parameter Name="count" Type="System.Int32" />
        <Parameter Name="asyncCallback" Type="System.AsyncCallback" />
        <Parameter Name="asyncState" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="buffer">Массив элементов <see cref="T:System.Byte" />, предоставляющий байты для записи в поток.</param>
        <param name="offset">Отсчитываемое от нуля расположение в <c>buffer</c>, с которого требуется начать считывать байты, предназначенные для записи в поток.</param>
        <param name="count">Значение <see cref="T:System.Int32" />, определяющее количество байтов, которое требуется считать из массива <c>buffer</c>.</param>
        <param name="asyncCallback">Делегат <see cref="T:System.AsyncCallback" />, ссылающийся на метод, который следует вызвать после завершения операции записи.</param>
        <param name="asyncState">Пользовательский объект, содержащий сведения об операции записи. Этот объект передается делегату <c>asyncCallback</c> после завершения операции.</param>
        <summary>Начинает асинхронную операцию записи, которая записывает байты (<see cref="T:System.Byte" />) из указанного буфера в поток.</summary>
        <returns>Объект <see cref="T:System.IAsyncResult" />, указывающий состояние асинхронной операции.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Если включено шифрование, подписывание или шифрования и подписи, этот метод считывает данные из буфера, зашифровывает, подписывает их, или шифрует и подписывает его и передает их с помощью базового потока. Если службы безопасности, такие как шифрование данных или подписывание, используется, этот метод запускает асинхронную операцию записи базового потока.  
  
 Этот метод является асинхронным и не блокируется до завершения операции. Для блокирования до завершения операции, используйте <xref:System.Net.Security.NegotiateStream.Read%2A> метод.  
  
 Необходимо выполнить операцию асинхронного чтения путем вызова <xref:System.Net.Security.NegotiateStream.EndWrite%2A> метод. Как правило, вызывается метод `asyncCallback` делегата. Подробные сведения об использовании модели асинхронного программирования см. в разделе [асинхронный вызов синхронных методов](~/docs/standard/asynchronous-programming-patterns/calling-synchronous-methods-asynchronously.md)  
  
 <xref:System.Net.Security.NegotiateStream> Класс не поддерживает несколько одновременных записи операций. При попытке запустить операцию записи, когда уже выполняется другая операция записи в том же потоке, <xref:System.NotSupportedException> будет создано исключение.  
  
 Этот метод нельзя вызывать до успешного выполнения проверки подлинности. Для проверки подлинности, вызовите один из <xref:System.Net.Security.NegotiateStream.AuthenticateAsClient%2A>, <xref:System.Net.Security.NegotiateStream.BeginAuthenticateAsClient%2A>, <xref:System.Net.Security.NegotiateStream.AuthenticateAsServer%2A>, или <xref:System.Net.Security.NegotiateStream.BeginAuthenticateAsServer%2A> методы.  
  
   
  
## Examples  
 В следующем примере кода демонстрируется начало операции асинхронной записи.  
  
 [!code-cpp[NclNegoAsyncClient#3](~/samples/snippets/cpp/VS_Snippets_Remoting/NclNegoasyncClient/CPP/NclNegoasyncClient.cpp#3)]
 [!code-csharp[NclNegoAsyncClient#3](~/samples/snippets/csharp/VS_Snippets_Remoting/NclNegoasyncClient/CS/client.cs#3)]  
  
 Следующий метод вызывается после завершения операции.  
  
 [!code-cpp[NclNegoAsyncClient#4](~/samples/snippets/cpp/VS_Snippets_Remoting/NclNegoasyncClient/CPP/NclNegoasyncClient.cpp#4)]
 [!code-csharp[NclNegoAsyncClient#4](~/samples/snippets/csharp/VS_Snippets_Remoting/NclNegoasyncClient/CS/client.cs#4)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          Свойство <paramref name="buffer" /> имеет значение <see langword="null" />.</exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="offset is less than 0" />.  
  
 \- или -  
  
 Значение <paramref name="offset" /> превышает длину <paramref name="buffer" />.  
  
 \- или -  
  
 Сумма значений <paramref name="offset" /> и count превышает длину массива <paramref name="buffer" />.</exception>
        <exception cref="T:System.IO.IOException">Не удалось выполнить операцию записи.  
  
 \- или -  
  
 Используется шифрование, но не удается зашифровать данные.</exception>
        <exception cref="T:System.NotSupportedException">Уже существует выполняющаяся операция записи.</exception>
        <exception cref="T:System.ObjectDisposedException">Объект закрыт.</exception>
        <exception cref="T:System.InvalidOperationException">Проверка подлинности не выполнялась.</exception>
      </Docs>
    </Member>
    <Member MemberName="CanRead">
      <MemberSignature Language="C#" Value="public override bool CanRead { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool CanRead" />
      <MemberSignature Language="DocId" Value="P:System.Net.Security.NegotiateStream.CanRead" />
      <MemberSignature Language="VB.NET" Value="Public Overrides ReadOnly Property CanRead As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property bool CanRead { bool get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Security</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Возвращает значение типа <see cref="T:System.Boolean" />, указывающее, разрешено ли чтение из базового потока.</summary>
        <value>
          Значение <see langword="true" />, если проверка подлинности выполнена, а чтение из базового потока разрешено; иначе — <see langword="false" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Если проверка подлинности завершилась успешно, это свойство возвращает значение, возвращаемое вызовом <xref:System.IO.Stream.CanRead%2A> свойства базового потока. Основной поток указывается при создании экземпляра <xref:System.Net.Security.NegotiateStream> класса.  
  
   
  
## Examples  
 В следующем примере кода демонстрируется отображение значения этого свойства.  
  
 [!code-cpp[NclNegoSyncClient#2](~/samples/snippets/cpp/VS_Snippets_Remoting/NclNegoSyncClient/CPP/NclNegoSyncClient.cpp#2)]
 [!code-csharp[NclNegoSyncClient#2](~/samples/snippets/csharp/VS_Snippets_Remoting/NclNegoSyncClient/CS/client.cs#2)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="CanSeek">
      <MemberSignature Language="C#" Value="public override bool CanSeek { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool CanSeek" />
      <MemberSignature Language="DocId" Value="P:System.Net.Security.NegotiateStream.CanSeek" />
      <MemberSignature Language="VB.NET" Value="Public Overrides ReadOnly Property CanSeek As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property bool CanSeek { bool get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Security</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Возвращает значение типа <see cref="T:System.Boolean" />, указывающее, разрешен ли поиск в базовом потоке.</summary>
        <value>Данное свойство всегда возвращает значение <see langword="false" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Не следует пытаться установить позицию <xref:System.Net.Security.NegotiateStream> объекта или его базовый поток. Основной поток указывается при создании экземпляра <xref:System.Net.Security.NegotiateStream> класса.  
  
   
  
## Examples  
 В следующем примере кода демонстрируется отображение значения этого свойства.  
  
 [!code-cpp[NclNegoSyncClient#2](~/samples/snippets/cpp/VS_Snippets_Remoting/NclNegoSyncClient/CPP/NclNegoSyncClient.cpp#2)]
 [!code-csharp[NclNegoSyncClient#2](~/samples/snippets/csharp/VS_Snippets_Remoting/NclNegoSyncClient/CS/client.cs#2)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Net.Security.NegotiateStream.Position" />
      </Docs>
    </Member>
    <Member MemberName="CanTimeout">
      <MemberSignature Language="C#" Value="public override bool CanTimeout { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool CanTimeout" />
      <MemberSignature Language="DocId" Value="P:System.Net.Security.NegotiateStream.CanTimeout" />
      <MemberSignature Language="VB.NET" Value="Public Overrides ReadOnly Property CanTimeout As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property bool CanTimeout { bool get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Security</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.MonoTODO</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Возвращает значение типа <see cref="T:System.Boolean" />, указывающее, поддерживает ли базовый поток использование времени ожидания.</summary>
        <value>
          Значение <see langword="true" />, если базовый поток поддерживает время ожидания; иначе — <see langword="false" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Это свойство возвращает значение, возвращаемое вызовом <xref:System.IO.Stream.CanTimeout%2A> свойства базового потока. Основной поток указывается при создании экземпляра <xref:System.Net.Security.NegotiateStream> класса.  
  
   
  
## Examples  
 В следующем примере кода демонстрируется отображение значения этого свойства.  
  
 [!code-cpp[NclNegoSyncClient#2](~/samples/snippets/cpp/VS_Snippets_Remoting/NclNegoSyncClient/CPP/NclNegoSyncClient.cpp#2)]
 [!code-csharp[NclNegoSyncClient#2](~/samples/snippets/csharp/VS_Snippets_Remoting/NclNegoSyncClient/CS/client.cs#2)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="CanWrite">
      <MemberSignature Language="C#" Value="public override bool CanWrite { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool CanWrite" />
      <MemberSignature Language="DocId" Value="P:System.Net.Security.NegotiateStream.CanWrite" />
      <MemberSignature Language="VB.NET" Value="Public Overrides ReadOnly Property CanWrite As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property bool CanWrite { bool get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Security</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Возвращает значение типа <see cref="T:System.Boolean" />, указывающее, разрешена ли запись в базовый поток.</summary>
        <value>
          Значение <see langword="true" />, если проверка подлинности выполнена, а запись в базовый поток разрешена; иначе — <see langword="false" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Если проверка подлинности завершилась успешно, это свойство возвращает значение, возвращаемое вызовом <xref:System.IO.Stream.CanWrite%2A> свойства базового потока. Основной поток указывается при создании экземпляра <xref:System.Net.Security.NegotiateStream> класса.  
  
   
  
## Examples  
 В следующем примере кода демонстрируется отображение значения этого свойства.  
  
 [!code-cpp[NclNegoSyncClient#2](~/samples/snippets/cpp/VS_Snippets_Remoting/NclNegoSyncClient/CPP/NclNegoSyncClient.cpp#2)]
 [!code-csharp[NclNegoSyncClient#2](~/samples/snippets/csharp/VS_Snippets_Remoting/NclNegoSyncClient/CS/client.cs#2)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Dispose">
      <MemberSignature Language="C#" Value="protected override void Dispose (bool disposing);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance void Dispose(bool disposing) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Security.NegotiateStream.Dispose(System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Sub Dispose (disposing As Boolean)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; override void Dispose(bool disposing);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.Security</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.MonoTODO</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="disposing" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="disposing">
          Значение <see langword="true" /> позволяет освободить как управляемые, так и неуправляемые ресурсы; значение <see langword="false" /> освобождает только неуправляемые ресурсы.</param>
        <summary>Освобождает неуправляемые ресурсы, используемые объектом <see cref="T:System.Net.Security.NegotiateStream" />, а при необходимости освобождает также управляемые ресурсы.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Этот метод вызывается методом открытые `Dispose()` метод и <xref:System.Object.Finalize%2A> метод. `Dispose()` вызывает защищенный `Dispose(Boolean)` метод с `disposing` равным `true`. <xref:System.Object.Finalize%2A> вызывает `Dispose` с `disposing` значение `false`.  
  
 При `disposing` параметр имеет значение true, данный метод освобождает все ресурсы, занятые любыми управляемыми объектами, которые <xref:System.Net.Security.NegotiateStream> ссылки. Этот метод вызывает метод `Dispose()` каждого объекта, на который есть ссылка.  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides">
          <para>
            Метод <see langword="Dispose" /> может вызываться несколько раз другими объектами. При переопределении метода <see langword="Dispose(Boolean)" /> нужно избегать ссылок на объекты, которые были уничтожены предыдущими вызовами метода <see langword="Dispose" />. Дополнительные сведения о реализации <see langword="Dispose(Boolean)" />, в разделе [метода](~/docs/standard/garbage-collection/implementing-dispose.md).  
  
 Дополнительные сведения о <see langword="Dispose" /> и <see cref="M:System.Object.Finalize" />, в разделе [очистки неуправляемых ресурсов](~/docs/standard/garbage-collection/unmanaged.md) и [переопределение метода Finalize](http://msdn.microsoft.com/library/8026cb68-fe93-43fc-96c1-c09ad7d64cd3).</para>
        </block>
      </Docs>
    </Member>
    <Member MemberName="EndAuthenticateAsClient">
      <MemberSignature Language="C#" Value="public virtual void EndAuthenticateAsClient (IAsyncResult asyncResult);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void EndAuthenticateAsClient(class System.IAsyncResult asyncResult) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Security.NegotiateStream.EndAuthenticateAsClient(System.IAsyncResult)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub EndAuthenticateAsClient (asyncResult As IAsyncResult)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void EndAuthenticateAsClient(IAsyncResult ^ asyncResult);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.Security</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.MonoTODO</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="asyncResult" Type="System.IAsyncResult" />
      </Parameters>
      <Docs>
        <param name="asyncResult">Экземпляр <see cref="T:System.IAsyncResult" />, возвращенный вызовом метода <see cref="Overload:System.Net.Security.NegotiateStream.BeginAuthenticateAsClient" />.</param>
        <summary>Завершает находящуюся в состоянии ожидания асинхронную операцию проверки подлинности клиента, которая была до этого запущена вызовом метода <see cref="Overload:System.Net.Security.NegotiateStream.BeginAuthenticateAsClient" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Если операция не завершена, этот метод блокируется до завершения удаления. При успешной проверке подлинности, необходимо проверить <xref:System.Net.Security.NegotiateStream.IsEncrypted%2A> и <xref:System.Net.Security.NegotiateStream.IsSigned%2A> свойства, чтобы определить, какие службы безопасности используются <xref:System.Net.Security.NegotiateStream>. Проверьте <xref:System.Net.Security.NegotiateStream.IsMutuallyAuthenticated%2A> свойства, чтобы определить, выполнена ли взаимная проверка подлинности.  
  
 Если происходит сбой проверки подлинности, вы получите <xref:System.Security.Authentication.AuthenticationException> или <xref:System.Security.Authentication.InvalidCredentialException>. В этом случае можно повторить попытку с другими учетными данными проверки подлинности.  
  
 Для выполнения этой операции в синхронном режиме, воспользуйтесь одним из <xref:System.Net.Security.NegotiateStream.AuthenticateAsClient%2A> метод.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          Свойство <paramref name="asyncResult" /> имеет значение <see langword="null" />.</exception>
        <exception cref="T:System.ArgumentException">
          Параметр <paramref name="asyncResult" /> не был создан вызовом метода <see cref="Overload:System.Net.Security.NegotiateStream.BeginAuthenticateAsClient" />.</exception>
        <exception cref="T:System.Security.Authentication.AuthenticationException">Сбой проверки подлинности. Этот объект можно использовать для повторной проверки подлинности.</exception>
        <exception cref="T:System.Security.Authentication.InvalidCredentialException">Сбой проверки подлинности. Этот объект можно использовать для повторной проверки подлинности.</exception>
        <exception cref="T:System.InvalidOperationException">Нет ожидающей завершения операции проверки подлинности клиента.</exception>
      </Docs>
    </Member>
    <Member MemberName="EndAuthenticateAsServer">
      <MemberSignature Language="C#" Value="public virtual void EndAuthenticateAsServer (IAsyncResult asyncResult);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void EndAuthenticateAsServer(class System.IAsyncResult asyncResult) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Security.NegotiateStream.EndAuthenticateAsServer(System.IAsyncResult)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub EndAuthenticateAsServer (asyncResult As IAsyncResult)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void EndAuthenticateAsServer(IAsyncResult ^ asyncResult);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.Security</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.MonoTODO</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="asyncResult" Type="System.IAsyncResult" />
      </Parameters>
      <Docs>
        <param name="asyncResult">Экземпляр <see cref="T:System.IAsyncResult" />, возвращенный вызовом метода <see cref="Overload:System.Net.Security.NegotiateStream.BeginAuthenticateAsServer" />.</param>
        <summary>Завершает находящуюся в состоянии ожидания асинхронную операцию проверки подлинности клиента, которая была до этого запущена вызовом метода <see cref="Overload:System.Net.Security.NegotiateStream.BeginAuthenticateAsServer" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Если операция не завершена, этот метод блокируется до завершения удаления.  
  
 При успешной проверке подлинности, необходимо проверить <xref:System.Net.Security.NegotiateStream.IsEncrypted%2A> и <xref:System.Net.Security.NegotiateStream.IsSigned%2A> свойства, чтобы определить, какие службы безопасности используются <xref:System.Net.Security.NegotiateStream>. Проверьте <xref:System.Net.Security.NegotiateStream.IsMutuallyAuthenticated%2A> свойства, чтобы определить, выполнена ли взаимная проверка подлинности.  
  
 Если происходит сбой проверки подлинности, вы получите <xref:System.Security.Authentication.AuthenticationException> или <xref:System.Security.Authentication.InvalidCredentialException>. В этом случае можно повторить попытку с другими учетными данными проверки подлинности.  
  
 Для синхронного выполнения этой операции, используйте <xref:System.Net.Security.NegotiateStream.AuthenticateAsServer%2A> метод.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          Свойство <paramref name="asyncResult" /> имеет значение <see langword="null" />.</exception>
        <exception cref="T:System.ArgumentException">
          Параметр <paramref name="asyncResult" /> не был создан вызовом метода <see cref="Overload:System.Net.Security.NegotiateStream.BeginAuthenticateAsServer" />.</exception>
        <exception cref="T:System.Security.Authentication.AuthenticationException">Сбой проверки подлинности. Этот объект можно использовать для повторной проверки подлинности.</exception>
        <exception cref="T:System.Security.Authentication.InvalidCredentialException">Сбой проверки подлинности. Этот объект можно использовать для повторной проверки подлинности.</exception>
        <exception cref="T:System.InvalidOperationException">Нет ожидающей завершения операции проверки подлинности.</exception>
      </Docs>
    </Member>
    <Member MemberName="EndRead">
      <MemberSignature Language="C#" Value="public override int EndRead (IAsyncResult asyncResult);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance int32 EndRead(class System.IAsyncResult asyncResult) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Security.NegotiateStream.EndRead(System.IAsyncResult)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function EndRead (asyncResult As IAsyncResult) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override int EndRead(IAsyncResult ^ asyncResult);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.Security</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.MonoTODO</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="asyncResult" Type="System.IAsyncResult" />
      </Parameters>
      <Docs>
        <param name="asyncResult">Экземпляр <see cref="T:System.IAsyncResult" />, возвращенный вызовом метода <see cref="M:System.Net.Security.NegotiateStream.BeginRead(System.Byte[],System.Int32,System.Int32,System.AsyncCallback,System.Object)" />.</param>
        <summary>Заканчивает асинхронную операцию чтения, запущенную до этого вызовом метода <see cref="M:System.Net.Security.NegotiateStream.BeginRead(System.Byte[],System.Int32,System.Int32,System.AsyncCallback,System.Object)" />.</summary>
        <returns>Значение <see cref="T:System.Int32" />, указывающее количество байтов, считанное из базового потока.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Если операция не завершена, этот метод блокируется до завершения удаления.  
  
 Для синхронного выполнения этой операции, используйте <xref:System.Net.Security.NegotiateStream.Read%2A> метод.  
  
 Этот метод нельзя вызывать до успешного выполнения проверки подлинности. Для проверки подлинности, вызовите один из <xref:System.Net.Security.NegotiateStream.AuthenticateAsClient%2A>, <xref:System.Net.Security.NegotiateStream.BeginAuthenticateAsClient%2A>, <xref:System.Net.Security.NegotiateStream.AuthenticateAsServer%2A>, или <xref:System.Net.Security.NegotiateStream.BeginAuthenticateAsServer%2A> методы.  
  
   
  
## Examples  
 В следующем примере кода показано завершение асинхронной операции чтения. Пример, демонстрирующий Запуск операции см. в разделе <xref:System.Net.Security.NegotiateStream.BeginRead%2A>.  
  
 [!code-cpp[NclNegoAsyncServer#3](~/samples/snippets/cpp/VS_Snippets_Remoting/NclNegoAsyncServer/CPP/NclNegoAsyncServer.cpp#3)]
 [!code-csharp[NclNegoAsyncServer#3](~/samples/snippets/csharp/VS_Snippets_Remoting/NclNegoAsyncServer/CS/server.cs#3)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          Свойство <paramref name="asyncResult" /> имеет значение <see langword="null" />.</exception>
        <exception cref="T:System.ArgumentException">Значение asyncResult не было создано при вызове метода <see cref="M:System.Net.Security.NegotiateStream.BeginRead(System.Byte[],System.Int32,System.Int32,System.AsyncCallback,System.Object)" />.</exception>
        <exception cref="T:System.InvalidOperationException">Проверка подлинности не выполнялась.</exception>
        <exception cref="T:System.IO.IOException">Сбой операции чтения.</exception>
      </Docs>
    </Member>
    <Member MemberName="EndWrite">
      <MemberSignature Language="C#" Value="public override void EndWrite (IAsyncResult asyncResult);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance void EndWrite(class System.IAsyncResult asyncResult) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Security.NegotiateStream.EndWrite(System.IAsyncResult)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Sub EndWrite (asyncResult As IAsyncResult)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override void EndWrite(IAsyncResult ^ asyncResult);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.Security</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.MonoTODO</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="asyncResult" Type="System.IAsyncResult" />
      </Parameters>
      <Docs>
        <param name="asyncResult">Экземпляр <see cref="T:System.IAsyncResult" />, возвращенный вызовом метода <see cref="M:System.Net.Security.NegotiateStream.BeginWrite(System.Byte[],System.Int32,System.Int32,System.AsyncCallback,System.Object)" />.</param>
        <summary>Заканчивает асинхронную операцию чтения, запущенную до этого вызовом метода <see cref="M:System.Net.Security.NegotiateStream.BeginWrite(System.Byte[],System.Int32,System.Int32,System.AsyncCallback,System.Object)" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Если операция не завершена, этот метод блокируется до завершения удаления.  
  
 Этот метод нельзя вызывать до успешного выполнения проверки подлинности. Для проверки подлинности, вызовите один из <xref:System.Net.Security.NegotiateStream.AuthenticateAsClient%2A>, <xref:System.Net.Security.NegotiateStream.BeginAuthenticateAsClient%2A>, <xref:System.Net.Security.NegotiateStream.AuthenticateAsServer%2A>, или <xref:System.Net.Security.NegotiateStream.BeginAuthenticateAsServer%2A> методы.  
  
 Для синхронного выполнения этой операции, используйте <xref:System.Net.Security.NegotiateStream.Write%2A> метод.  
  
   
  
## Examples  
 В следующем примере кода демонстрируется метод, который вызывается для завершения операции асинхронной записи. Пример, демонстрирующий Запуск операции см. в разделе <xref:System.Net.Security.NegotiateStream.BeginWrite%2A>.  
  
 [!code-cpp[NclNegoAsyncClient#4](~/samples/snippets/cpp/VS_Snippets_Remoting/NclNegoasyncClient/CPP/NclNegoasyncClient.cpp#4)]
 [!code-csharp[NclNegoAsyncClient#4](~/samples/snippets/csharp/VS_Snippets_Remoting/NclNegoasyncClient/CS/client.cs#4)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          Свойство <paramref name="asyncResult" /> имеет значение <see langword="null" />.</exception>
        <exception cref="T:System.ArgumentException">Значение asyncResult не было создано при вызове метода <see cref="M:System.Net.Security.NegotiateStream.BeginWrite(System.Byte[],System.Int32,System.Int32,System.AsyncCallback,System.Object)" />.</exception>
        <exception cref="T:System.InvalidOperationException">Проверка подлинности не выполнялась.</exception>
        <exception cref="T:System.IO.IOException">Не удалось выполнить операцию записи.</exception>
      </Docs>
    </Member>
    <Member MemberName="Flush">
      <MemberSignature Language="C#" Value="public override void Flush ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance void Flush() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Security.NegotiateStream.Flush" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Sub Flush ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override void Flush();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Security</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.MonoTODO</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Принудительно записывает все буферизированные данные в базовое устройство.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Этот метод вызывает <xref:System.IO.Stream.Flush%2A> базового потока.  
  
   
  
## Examples  
 В следующем примере кода демонстрируется сбросе потока.  
  
 [!code-cpp[NclNegoSyncClient#4](~/samples/snippets/cpp/VS_Snippets_Remoting/NclNegoSyncClient/CPP/NclNegoSyncClient.cpp#4)]
 [!code-csharp[NclNegoSyncClient#4](~/samples/snippets/csharp/VS_Snippets_Remoting/NclNegoSyncClient/CS/client.cs#4)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="FlushAsync">
      <MemberSignature Language="C#" Value="public override System.Threading.Tasks.Task FlushAsync (System.Threading.CancellationToken cancellationToken);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance class System.Threading.Tasks.Task FlushAsync(valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Security.NegotiateStream.FlushAsync(System.Threading.CancellationToken)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override System::Threading::Tasks::Task ^ FlushAsync(System::Threading::CancellationToken cancellationToken);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Security</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="cancellationToken">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ImpersonationLevel">
      <MemberSignature Language="C#" Value="public virtual System.Security.Principal.TokenImpersonationLevel ImpersonationLevel { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Security.Principal.TokenImpersonationLevel ImpersonationLevel" />
      <MemberSignature Language="DocId" Value="P:System.Net.Security.NegotiateStream.ImpersonationLevel" />
      <MemberSignature Language="VB.NET" Value="Public Overridable ReadOnly Property ImpersonationLevel As TokenImpersonationLevel" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property System::Security::Principal::TokenImpersonationLevel ImpersonationLevel { System::Security::Principal::TokenImpersonationLevel get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Security</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.MonoTODO</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Security.Principal.TokenImpersonationLevel</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Возвращает значение, указывающее, как сервер может использовать учетные данные клиента.</summary>
        <value>Одно из значений перечисления <see cref="T:System.Security.Principal.TokenImpersonationLevel" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Вы должны успешно пройти проверку подлинности перед вызовом этого метода. Клиенты указать уровень олицетворения при запросе проверки подлинности путем вызова одного из <xref:System.Net.Security.NegotiateStream.AuthenticateAsClient%2A> или <xref:System.Net.Security.NegotiateStream.BeginAuthenticateAsClient%2A> методы. Если проверку подлинности без указания <xref:System.Security.Principal.TokenImpersonationLevel> , <xref:System.Security.Principal.TokenImpersonationLevel.Identification> используется.  
  
   
  
## Examples  
 В следующем примере кода демонстрируется отображение значения этого свойства.  
  
 [!code-cpp[NclNegoSyncClient#1](~/samples/snippets/cpp/VS_Snippets_Remoting/NclNegoSyncClient/CPP/NclNegoSyncClient.cpp#1)]
 [!code-csharp[NclNegoSyncClient#1](~/samples/snippets/csharp/VS_Snippets_Remoting/NclNegoSyncClient/CS/client.cs#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">Проверка подлинности завершилась неудачно или не выполнялась.</exception>
      </Docs>
    </Member>
    <Member MemberName="IsAuthenticated">
      <MemberSignature Language="C#" Value="public override bool IsAuthenticated { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsAuthenticated" />
      <MemberSignature Language="DocId" Value="P:System.Net.Security.NegotiateStream.IsAuthenticated" />
      <MemberSignature Language="VB.NET" Value="Public Overrides ReadOnly Property IsAuthenticated As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property bool IsAuthenticated { bool get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Security</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.MonoTODO</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Возвращает значение типа <see cref="T:System.Boolean" />, указывающее, была ли проверка подлинности успешной.</summary>
        <value>
          Значение <see langword="true" />, если произошла успешная проверка подлинности; в противном случае — <see langword="false" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Проверка подлинности клиентов путем вызова <xref:System.Net.Security.NegotiateStream.AuthenticateAsClient%2A> или <xref:System.Net.Security.NegotiateStream.BeginAuthenticateAsClient%2A> методы. Серверы, проверку подлинности путем вызова <xref:System.Net.Security.NegotiateStream.AuthenticateAsServer%2A> или <xref:System.Net.Security.NegotiateStream.BeginAuthenticateAsServer%2A> методы.  
  
   
  
## Examples  
 В следующем примере кода демонстрируется отображение значения этого свойства.  
  
 [!code-cpp[NclNegoSyncClient#1](~/samples/snippets/cpp/VS_Snippets_Remoting/NclNegoSyncClient/CPP/NclNegoSyncClient.cpp#1)]
 [!code-csharp[NclNegoSyncClient#1](~/samples/snippets/csharp/VS_Snippets_Remoting/NclNegoSyncClient/CS/client.cs#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsEncrypted">
      <MemberSignature Language="C#" Value="public override bool IsEncrypted { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsEncrypted" />
      <MemberSignature Language="DocId" Value="P:System.Net.Security.NegotiateStream.IsEncrypted" />
      <MemberSignature Language="VB.NET" Value="Public Overrides ReadOnly Property IsEncrypted As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property bool IsEncrypted { bool get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Security</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.MonoTODO</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Возвращает значение типа <see cref="T:System.Boolean" />, указывающее, использует ли данный поток <see cref="T:System.Net.Security.NegotiateStream" /> шифрование данных.</summary>
        <value>
          Значение <see langword="true" />, если данные шифруются до передачи по сети и дешифруются при достижении удаленной конечной точки; иначе — <see langword="false" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Шифрование помогает защитить конфиденциальность данных. а именно позволяет гарантировать, что при передаче данных они его невозможно расшифровать третьей стороной.  
  
   
  
## Examples  
 В следующем примере кода демонстрируется отображение значения этого свойства.  
  
 [!code-cpp[NclNegoSyncClient#1](~/samples/snippets/cpp/VS_Snippets_Remoting/NclNegoSyncClient/CPP/NclNegoSyncClient.cpp#1)]
 [!code-csharp[NclNegoSyncClient#1](~/samples/snippets/csharp/VS_Snippets_Remoting/NclNegoSyncClient/CS/client.cs#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Net.Security.ProtectionLevel" />
      </Docs>
    </Member>
    <Member MemberName="IsMutuallyAuthenticated">
      <MemberSignature Language="C#" Value="public override bool IsMutuallyAuthenticated { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsMutuallyAuthenticated" />
      <MemberSignature Language="DocId" Value="P:System.Net.Security.NegotiateStream.IsMutuallyAuthenticated" />
      <MemberSignature Language="VB.NET" Value="Public Overrides ReadOnly Property IsMutuallyAuthenticated As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property bool IsMutuallyAuthenticated { bool get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Security</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.MonoTODO</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Возвращает значение типа <see cref="T:System.Boolean" />, указывающее, что и сервер, и клиент прошли проверку подлинности.</summary>
        <value>
          Значение <see langword="true" />, если подлинность сервера была проверена, иначе — <see langword="false" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Взаимная проверка подлинности указанный клиентом, когда клиенту требуется предоставить учетные данные для проверки подлинности сервера. По умолчанию клиенты запрашивают взаимной проверки подлинности.  
  
 Протокол Negotiate выбирает NTLM или Kerberos, в зависимости от протоколы безопасности, поддерживаемые клиентом и сервером. NTLM не поддерживает взаимной проверки подлинности.  
  
   
  
## Examples  
 В следующем примере кода демонстрируется отображение значения этого свойства.  
  
 [!code-cpp[NclNegoSyncClient#1](~/samples/snippets/cpp/VS_Snippets_Remoting/NclNegoSyncClient/CPP/NclNegoSyncClient.cpp#1)]
 [!code-csharp[NclNegoSyncClient#1](~/samples/snippets/csharp/VS_Snippets_Remoting/NclNegoSyncClient/CS/client.cs#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsServer">
      <MemberSignature Language="C#" Value="public override bool IsServer { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsServer" />
      <MemberSignature Language="DocId" Value="P:System.Net.Security.NegotiateStream.IsServer" />
      <MemberSignature Language="VB.NET" Value="Public Overrides ReadOnly Property IsServer As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property bool IsServer { bool get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Security</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.MonoTODO</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Возвращает значение типа <see cref="T:System.Boolean" />, указывающее, прошла ли локальная сторона соединения, используемого данным потоком <see cref="T:System.Net.Security.NegotiateStream" />, проверку подлинности как сервер.</summary>
        <value>
          Значение <see langword="true" />, если локальная конечная точка успешно прошла проверку подлинности как серверная сторона соединения с проверкой подлинности; иначе — <see langword="false" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Если проверка подлинности не удалось или не применялась, это свойство возвращает `false`.  
  
 Для проверки подлинности, что и сервер, вызовите <xref:System.Net.Security.NegotiateStream.AuthenticateAsServer%2A> или <xref:System.Net.Security.NegotiateStream.BeginAuthenticateAsServer%2A> методы.  
  
   
  
## Examples  
 В следующем примере кода демонстрируется отображение значения этого свойства.  
  
 [!code-cpp[NclNegoSyncClient#1](~/samples/snippets/cpp/VS_Snippets_Remoting/NclNegoSyncClient/CPP/NclNegoSyncClient.cpp#1)]
 [!code-csharp[NclNegoSyncClient#1](~/samples/snippets/csharp/VS_Snippets_Remoting/NclNegoSyncClient/CS/client.cs#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsSigned">
      <MemberSignature Language="C#" Value="public override bool IsSigned { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsSigned" />
      <MemberSignature Language="DocId" Value="P:System.Net.Security.NegotiateStream.IsSigned" />
      <MemberSignature Language="VB.NET" Value="Public Overrides ReadOnly Property IsSigned As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property bool IsSigned { bool get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Security</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.MonoTODO</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Возвращает значение типа <see cref="T:System.Boolean" />, указывающее, подписаны ли данные, отправленные с помощью данного потока.</summary>
        <value>
          Значение <see langword="true" />, если данные были подписаны перед передачей; иначе — <see langword="false" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Подписывание данных помогает защитить целостность данных. а именно полезно, чтобы получатель мог определить, является ли данные подделки во время передачи.  
  
   
  
## Examples  
 В следующем примере кода демонстрируется отображение значения этого свойства.  
  
 [!code-cpp[NclNegoSyncClient#1](~/samples/snippets/cpp/VS_Snippets_Remoting/NclNegoSyncClient/CPP/NclNegoSyncClient.cpp#1)]
 [!code-csharp[NclNegoSyncClient#1](~/samples/snippets/csharp/VS_Snippets_Remoting/NclNegoSyncClient/CS/client.cs#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Length">
      <MemberSignature Language="C#" Value="public override long Length { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int64 Length" />
      <MemberSignature Language="DocId" Value="P:System.Net.Security.NegotiateStream.Length" />
      <MemberSignature Language="VB.NET" Value="Public Overrides ReadOnly Property Length As Long" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property long Length { long get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Security</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int64</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Возвращает длину данных в базовом потоке.</summary>
        <value>Значение <see cref="T:System.Int64" />, указывающее длину базового потока.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Это свойство возвращает значение, возвращаемое вызовом <xref:System.IO.Stream.Length%2A> свойства базового потока. Если базовый поток не допускает, это свойство обычно вызовет исключение. Тип времени выполнения базового потока определяет тип времени выполнения исключение создается.  
  
   
  
## Examples  
 В следующем примере кода демонстрируется отображение значения этого свойства.  
  
 [!code-cpp[NclNegoSyncClient#2](~/samples/snippets/cpp/VS_Snippets_Remoting/NclNegoSyncClient/CPP/NclNegoSyncClient.cpp#2)]
 [!code-csharp[NclNegoSyncClient#2](~/samples/snippets/csharp/VS_Snippets_Remoting/NclNegoSyncClient/CS/client.cs#2)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.NotSupportedException">Возвращение значения данного свойства не поддерживается, если базовый поток является экземпляром класса <see cref="T:System.Net.Sockets.NetworkStream" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="Position">
      <MemberSignature Language="C#" Value="public override long Position { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int64 Position" />
      <MemberSignature Language="DocId" Value="P:System.Net.Security.NegotiateStream.Position" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Property Position As Long" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property long Position { long get(); void set(long value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Security</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int64</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Возвращает или задает текущую позицию в базовом потоке.</summary>
        <value>Значение <see cref="T:System.Int64" />, указывающее текущую позицию в базовом потока.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Это свойство возвращает значение, возвращаемое вызовом <xref:System.IO.Stream.Position%2A> свойства базового потока. Если базовый поток не допускает, это свойство обычно вызовет исключение. Тип времени выполнения базового потока определяет тип времени выполнения исключение создается.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.NotSupportedException">Задание данного свойства не поддерживается.  
  
 \- или -  
  
 Возвращение значения данного свойства не поддерживается, если базовый поток является экземпляром класса <see cref="T:System.Net.Sockets.NetworkStream" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="Read">
      <MemberSignature Language="C#" Value="public override int Read (byte[] buffer, int offset, int count);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance int32 Read(unsigned int8[] buffer, int32 offset, int32 count) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Security.NegotiateStream.Read(System.Byte[],System.Int32,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function Read (buffer As Byte(), offset As Integer, count As Integer) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override int Read(cli::array &lt;System::Byte&gt; ^ buffer, int offset, int count);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Security</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.MonoTODO</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="buffer" Type="System.Byte[]" />
        <Parameter Name="offset" Type="System.Int32" />
        <Parameter Name="count" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="buffer">Массив элементов <see cref="T:System.Byte" />, куда помещаются байты, считанные из потока.</param>
        <param name="offset">Значение <see cref="T:System.Int32" />, содержащее отсчитываемое от нуля расположение в массиве <c>buffer</c>, с которого следует начинать сохранение данных, считанных из этого потока.</param>
        <param name="count">Значение <see cref="T:System.Int32" />, содержащее максимальное количество байтов, которое требуется считать из потока.</param>
        <summary>Считывает данные из этого потока и сохраняет их в заданном массиве.</summary>
        <returns>Значение <see cref="T:System.Int32" />, указывающее количество байтов, считанное из базового потока. Когда данных для чтения не остается, возвращает 0.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Этот метод считывает более `count` байтов из текущего потока и сохраняет их в `buffer` начиная `offset`.  
  
 Этот метод нельзя вызывать до успешного выполнения проверки подлинности. Для проверки подлинности, вызовите один из <xref:System.Net.Security.NegotiateStream.AuthenticateAsClient%2A>, <xref:System.Net.Security.NegotiateStream.BeginAuthenticateAsClient%2A>, <xref:System.Net.Security.NegotiateStream.AuthenticateAsServer%2A>, или <xref:System.Net.Security.NegotiateStream.BeginAuthenticateAsServer%2A> методы.  
  
 Чтобы выполнить эту операцию асинхронно, используйте <xref:System.Net.Security.NegotiateStream.BeginRead%2A> метод.  
  
   
  
## Examples  
 В следующем примере кода демонстрируется чтение из <xref:System.Net.Security.NegotiateStream>.  
  
 [!code-cpp[NclNegoSyncServer#1](~/samples/snippets/cpp/VS_Snippets_Remoting/NclNegoSyncServer/CPP/NclNegoSyncServer.cpp#1)]
 [!code-csharp[NclNegoSyncServer#1](~/samples/snippets/csharp/VS_Snippets_Remoting/NclNegoSyncServer/CS/server.cs#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.IO.IOException">Сбой операции чтения.</exception>
        <exception cref="T:System.InvalidOperationException">Проверка подлинности не выполнялась.</exception>
        <exception cref="T:System.NotSupportedException">Операция <see cref="M:System.Net.Security.NegotiateStream.Read(System.Byte[],System.Int32,System.Int32)" /> уже выполняется в настоящее время.</exception>
      </Docs>
    </Member>
    <Member MemberName="ReadTimeout">
      <MemberSignature Language="C#" Value="public override int ReadTimeout { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 ReadTimeout" />
      <MemberSignature Language="DocId" Value="P:System.Net.Security.NegotiateStream.ReadTimeout" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Property ReadTimeout As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property int ReadTimeout { int get(); void set(int value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Security</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Возвращает или задает временной интервал, в течение которого операция чтения будет блокироваться, ожидая получения данных.</summary>
        <value>Значение типа <see cref="T:System.Int32" />, указывающее период времени (в миллисекундах), по истечении которого происходит сбой операции чтения.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Это свойство возвращает значение, возвращаемое вызовом <xref:System.IO.Stream.ReadTimeout%2A> свойства базового потока. Если значение этого свойства <xref:System.IO.Stream.ReadTimeout%2A> базового потока будет присвоено указанное значение.  
  
 Если базовый поток <xref:System.Net.Sockets.NetworkStream>, <xref:System.Net.Security.NegotiateStream.ReadTimeout%2A> указывается в миллисекундах и имеет значение <xref:System.Threading.Timeout.Infinite> по умолчанию, поэтому, читать операции имеют неограниченное время ожидания.  
  
   
  
## Examples  
 В следующем примере кода демонстрируется отображение значения этого свойства.  
  
 [!code-cpp[NclNegoSyncClient#2](~/samples/snippets/cpp/VS_Snippets_Remoting/NclNegoSyncClient/CPP/NclNegoSyncClient.cpp#2)]
 [!code-csharp[NclNegoSyncClient#2](~/samples/snippets/csharp/VS_Snippets_Remoting/NclNegoSyncClient/CS/client.cs#2)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="RemoteIdentity">
      <MemberSignature Language="C#" Value="public virtual System.Security.Principal.IIdentity RemoteIdentity { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Security.Principal.IIdentity RemoteIdentity" />
      <MemberSignature Language="DocId" Value="P:System.Net.Security.NegotiateStream.RemoteIdentity" />
      <MemberSignature Language="VB.NET" Value="Public Overridable ReadOnly Property RemoteIdentity As IIdentity" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property System::Security::Principal::IIdentity ^ RemoteIdentity { System::Security::Principal::IIdentity ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Security</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.MonoTODO</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Security.Principal.IIdentity</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Возвращает сведения о идентификации удаленной стороны, использующей данный поток с проверкой подлинности.</summary>
        <value>Объект <see cref="T:System.Security.Principal.IIdentity" />, описывающий идентификацию удаленной конечной точки.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 При обращении клиента, это свойство возвращает <xref:System.Security.Principal.GenericIdentity> содержащий основной имя службы (SPN) сервера и протокола проверки подлинности, используемого. При обращении к серверу, это свойство возвращает <xref:System.Security.Principal.WindowsIdentity> , описывающий клиента. Если <xref:System.Security.Principal.WindowsIdentity> будет недоступен, клиент возвращается информация на сервер в <xref:System.Security.Principal.GenericIdentity>.  
  
   
  
## Examples  
 В следующем примере кода демонстрируется отображение значения этого свойства.  
  
 [!code-cpp[NclNegoAsyncServer#2](~/samples/snippets/cpp/VS_Snippets_Remoting/NclNegoAsyncServer/CPP/NclNegoAsyncServer.cpp#2)]
 [!code-csharp[NclNegoAsyncServer#2](~/samples/snippets/csharp/VS_Snippets_Remoting/NclNegoAsyncServer/CS/server.cs#2)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">Проверка подлинности завершилась неудачно или не выполнялась.</exception>
      </Docs>
    </Member>
    <Member MemberName="Seek">
      <MemberSignature Language="C#" Value="public override long Seek (long offset, System.IO.SeekOrigin origin);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance int64 Seek(int64 offset, valuetype System.IO.SeekOrigin origin) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Security.NegotiateStream.Seek(System.Int64,System.IO.SeekOrigin)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function Seek (offset As Long, origin As SeekOrigin) As Long" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override long Seek(long offset, System::IO::SeekOrigin origin);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Security</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.MonoTODO</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int64</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="offset" Type="System.Int64" />
        <Parameter Name="origin" Type="System.IO.SeekOrigin" />
      </Parameters>
      <Docs>
        <param name="offset">Это значение игнорируется.</param>
        <param name="origin">Это значение игнорируется.</param>
        <summary>Выдает исключение <see cref="T:System.NotSupportedException" />.</summary>
        <returns>Всегда создает исключение <see cref="T:System.NotSupportedException" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Этот метод не следует вызывать. Он наследуется, но не поддерживается <xref:System.Net.Security.NegotiateStream>.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.NotSupportedException">Поиск в потоке <see cref="T:System.Net.Security.NegotiateStream" /> не поддерживается.</exception>
      </Docs>
    </Member>
    <Member MemberName="SetLength">
      <MemberSignature Language="C#" Value="public override void SetLength (long value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance void SetLength(int64 value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Security.NegotiateStream.SetLength(System.Int64)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Sub SetLength (value As Long)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override void SetLength(long value);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Security</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.MonoTODO</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Int64" />
      </Parameters>
      <Docs>
        <param name="value">Значение <see cref="T:System.Int64" />, указывающее длину потока.</param>
        <summary>Задает длину данных в базовом потоке.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Write">
      <MemberSignature Language="C#" Value="public override void Write (byte[] buffer, int offset, int count);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance void Write(unsigned int8[] buffer, int32 offset, int32 count) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Security.NegotiateStream.Write(System.Byte[],System.Int32,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Sub Write (buffer As Byte(), offset As Integer, count As Integer)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override void Write(cli::array &lt;System::Byte&gt; ^ buffer, int offset, int count);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Security</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.MonoTODO</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="buffer" Type="System.Byte[]" />
        <Parameter Name="offset" Type="System.Int32" />
        <Parameter Name="count" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="buffer">Массив элементов <see cref="T:System.Byte" />, предоставляющий байты для записи в поток.</param>
        <param name="offset">Значение <see cref="T:System.Int32" />, содержащее отсчитываемое от нуля расположение в массиве <c>buffer</c>, с которого требуется начать чтение байтов, записываемых в поток.</param>
        <param name="count">Значение <see cref="T:System.Int32" />, содержащее количество байтов, считываемых из массива <c>buffer</c>.</param>
        <summary>Записывает указанное количество элементов <see cref="T:System.Byte" /> в базовый поток, используя заданный буфер (параметр buffer) и начальное расположение (параметр offset).</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Если включено шифрование, подписывание или шифрования и подписи, этот метод считывает данные из буфера, зашифровывает, подписывает их, или шифрует и подписывает его и передает их с помощью базового потока. Если службы безопасности, такие как шифрование данных или подписывание, используется, этот метод вызывает <xref:System.IO.Stream.Write%2A> базового потока.  
  
 Этот метод блокируется во время выполнения операции записи. Чтобы предотвратить блокировку во время завершения операции, используйте <xref:System.Net.Security.NegotiateStream.Write%2A> метод.  
  
 Этот метод нельзя вызывать до успешного выполнения проверки подлинности. Для проверки подлинности, вызовите один из <xref:System.Net.Security.NegotiateStream.AuthenticateAsClient%2A>, <xref:System.Net.Security.NegotiateStream.BeginAuthenticateAsClient%2A>, <xref:System.Net.Security.NegotiateStream.AuthenticateAsServer%2A>, или <xref:System.Net.Security.NegotiateStream.BeginAuthenticateAsServer%2A> методы.  
  
 <xref:System.Net.Security.NegotiateStream> Класс не поддерживает несколько одновременных записи операций. При попытке запустить операцию записи, когда уже выполняется другая операция записи в том же потоке, <xref:System.NotSupportedException> будет создано исключение.  
  
   
  
## Examples  
 В следующем примере кода демонстрируется запись <xref:System.Net.Security.NegotiateStream>.  
  
 [!code-cpp[NclNegoSyncClient#4](~/samples/snippets/cpp/VS_Snippets_Remoting/NclNegoSyncClient/CPP/NclNegoSyncClient.cpp#4)]
 [!code-csharp[NclNegoSyncClient#4](~/samples/snippets/csharp/VS_Snippets_Remoting/NclNegoSyncClient/CS/client.cs#4)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          Свойство <paramref name="buffer" /> имеет значение <see langword="null" />.</exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="offset is less than 0" />.  
  
 \- или -  
  
 Значение <paramref name="offset" /> превышает длину <paramref name="buffer" />.  
  
 \- или -  
  
 Сумма значений <paramref name="offset" /> и count превышает длину массива <paramref name="buffer" />.</exception>
        <exception cref="T:System.IO.IOException">Не удалось выполнить операцию записи.  
  
 \- или -  
  
 Используется шифрование, но не удается зашифровать данные.</exception>
        <exception cref="T:System.NotSupportedException">Уже существует выполняющаяся операция записи.</exception>
        <exception cref="T:System.ObjectDisposedException">Объект закрыт.</exception>
        <exception cref="T:System.InvalidOperationException">Проверка подлинности не выполнялась.</exception>
      </Docs>
    </Member>
    <Member MemberName="WriteTimeout">
      <MemberSignature Language="C#" Value="public override int WriteTimeout { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 WriteTimeout" />
      <MemberSignature Language="DocId" Value="P:System.Net.Security.NegotiateStream.WriteTimeout" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Property WriteTimeout As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property int WriteTimeout { int get(); void set(int value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Security</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Возвращает или задает период времени, в течение которого операция записи блокирует выполнение, ожидая данных.</summary>
        <value>Значение типа <see cref="T:System.Int32" />, указывающее период времени (в миллисекундах), по истечении которого происходит сбой операции записи.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Это свойство возвращает значение, возвращаемое вызовом <xref:System.IO.Stream.WriteTimeout%2A> свойства базового потока. Набор операций, задает указанное значение <xref:System.IO.Stream.WriteTimeout%2A> значение базового потока.  
  
 Если базовый поток <xref:System.Net.Sockets.NetworkStream>, <xref:System.Net.Security.NegotiateStream.WriteTimeout%2A> указывается в миллисекундах и имеет значение <xref:System.Threading.Timeout.Infinite> по умолчанию, поэтому, используемых для записи операции имеют неограниченное время ожидания.  
  
   
  
## Examples  
 В следующем примере кода демонстрируется отображение значения этого свойства.  
  
 [!code-cpp[NclNegoSyncClient#2](~/samples/snippets/cpp/VS_Snippets_Remoting/NclNegoSyncClient/CPP/NclNegoSyncClient.cpp#2)]
 [!code-csharp[NclNegoSyncClient#2](~/samples/snippets/csharp/VS_Snippets_Remoting/NclNegoSyncClient/CS/client.cs#2)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>