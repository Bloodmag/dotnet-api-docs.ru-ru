<Type Name="NetworkStream" FullName="System.Net.Sockets.NetworkStream">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="0f9b3287ea8eafb8d3d2d9f207429a0f3d86eb49" />
    <Meta Name="ms.sourcegitcommit" Value="d31dc2ede16f6f7bc64e90d9f897ff54c4e3869b" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="ru-RU" />
    <Meta Name="ms.lasthandoff" Value="04/03/2018" />
    <Meta Name="ms.locfileid" Value="30460988" />
  </Metadata>
  <TypeSignature Language="C#" Value="public class NetworkStream : System.IO.Stream" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit NetworkStream extends System.IO.Stream" />
  <TypeSignature Language="DocId" Value="T:System.Net.Sockets.NetworkStream" />
  <TypeSignature Language="VB.NET" Value="Public Class NetworkStream&#xA;Inherits Stream" />
  <TypeSignature Language="C++ CLI" Value="public ref class NetworkStream : System::IO::Stream" />
  <AssemblyInfo>
    <AssemblyName>System.Net.Sockets</AssemblyName>
    <AssemblyVersion>4.1.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.1.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>System</AssemblyName>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.IO.Stream</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>Обеспечивает базовый поток данных для доступа к сети.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Net.Sockets.NetworkStream> Класс предоставляет методы для отправки и получения данных через <xref:System.Net.Sockets.SocketType.Stream> сокетов в блокирующем режиме. Дополнительные сведения о блокирующей версии неблокирующего <xref:System.Net.Sockets.Socket>s, в разделе [использование асинхронных сокетов клиента](~/docs/framework/network-programming/using-an-asynchronous-client-socket.md). Можно использовать <xref:System.Net.Sockets.NetworkStream> класса для обоих синхронной и асинхронной передачи. Дополнительные сведения о синхронной и асинхронной связи см. в разделе [сокеты](~/docs/framework/network-programming/sockets.md).  
  
 Для создания <xref:System.Net.Sockets.NetworkStream>, необходимо обеспечить подключенный <xref:System.Net.Sockets.Socket>. Можно также указать, что <xref:System.IO.FileAccess> разрешение <xref:System.Net.Sockets.NetworkStream> с использованием предоставленного <xref:System.Net.Sockets.Socket>. По умолчанию, закрытие <xref:System.Net.Sockets.NetworkStream> не закрывает указанных <xref:System.Net.Sockets.Socket>. Если вы хотите <xref:System.Net.Sockets.NetworkStream> иметь разрешение на закрытие обеспечивающего <xref:System.Net.Sockets.Socket>, необходимо указать `true` значения `ownsSocket` параметра.  
  
 Используйте <xref:System.Net.Sockets.NetworkStream.Write%2A> и <xref:System.Net.Sockets.NetworkStream.Read%2A> методы для простой одного потока синхронной блокировки ввода-вывода. Если вы хотите обработки вашей ввода-вывода с помощью отдельных потоков, рассмотрите возможность использования <xref:System.Net.Sockets.NetworkStream.BeginWrite%2A> и <xref:System.Net.Sockets.NetworkStream.EndWrite%2A> методов, или <xref:System.Net.Sockets.NetworkStream.BeginRead%2A> и <xref:System.Net.Sockets.NetworkStream.EndRead%2A> методы для обмена данными.  
  
 <xref:System.Net.Sockets.NetworkStream> Не поддерживает произвольный доступ к сети потока данных. Значение <xref:System.Net.Sockets.NetworkStream.CanSeek%2A> свойство, которое указывает, поддерживает ли поток поиск, всегда является `false`; чтение <xref:System.Net.Sockets.NetworkStream.Position%2A> свойства <xref:System.Net.Sockets.NetworkStream.Length%2A> свойства или метода <xref:System.Net.Sockets.NetworkStream.Seek%2A> метод вызывает исключение <xref:System.NotSupportedException>.  
  
 Чтение и запись операции могут выполняться одновременно на экземпляре <xref:System.Net.Sockets.NetworkStream> класс без необходимости синхронизации. При условии, что имеется один уникальный поток для операций записи и один уникальный поток для операций чтения, будет перекрестных конфликтов между чтения и записи потоков и синхронизация не требуется.  
  
   
  
## Examples  
 В следующем примере кода показано, как создать <xref:System.Net.Sockets.NetworkStream> из подключенного <xref:System.Net.Sockets.SocketType.Stream> <xref:System.Net.Sockets.Socket> и выполнять базовые синхронной блокировки ввода-вывода.  
  
 [!code-cpp[NetworkStream_Synch_SendAndReceive#2](~/samples/snippets/cpp/VS_Snippets_Remoting/NetworkStream_Synch_SendAndReceive/CPP/source.cpp#2)]
 [!code-csharp[NetworkStream_Synch_SendAndReceive#2](~/samples/snippets/csharp/VS_Snippets_Remoting/NetworkStream_Synch_SendAndReceive/CS/source.cs#2)]
 [!code-vb[NetworkStream_Synch_SendAndReceive#2](~/samples/snippets/visualbasic/VS_Snippets_Remoting/NetworkStream_Synch_SendAndReceive/VB/source.vb#2)]  
  
 ]]></format>
    </remarks>
    <altmember cref="T:System.Net.Sockets.TcpClient" />
  </Docs>
  <Members>
    <MemberGroup MemberName=".ctor">
      <AssemblyInfo>
        <AssemblyName>System.Net.Sockets</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Создает новый экземпляр класса <see cref="T:System.Net.Sockets.NetworkStream" />.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public NetworkStream (System.Net.Sockets.Socket socket);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.Net.Sockets.Socket socket) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Sockets.NetworkStream.#ctor(System.Net.Sockets.Socket)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; NetworkStream(System::Net::Sockets::Socket ^ socket);" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Sockets</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="socket" Type="System.Net.Sockets.Socket" />
      </Parameters>
      <Docs>
        <param name="socket">Объект <see cref="T:System.Net.Sockets.Socket" />, который будет использоваться <see cref="T:System.Net.Sockets.NetworkStream" /> для отправки и приема данных.</param>
        <summary>Создает новый экземпляр класса <see cref="T:System.Net.Sockets.NetworkStream" /> для указанного объекта <see cref="T:System.Net.Sockets.Socket" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Net.Sockets.NetworkStream> Создается с доступом на чтение и запись в указанный <xref:System.Net.Sockets.Socket>. <xref:System.Net.Sockets.NetworkStream> Не владеет базовой <xref:System.Net.Sockets.Socket>, поэтому вызов <xref:System.Net.Sockets.NetworkStream.Close%2A> метод не закрывает <xref:System.Net.Sockets.Socket>.  
  
   
  
## Examples  
 В следующем примере кода показано, как создать <xref:System.Net.Sockets.NetworkStream> с <xref:System.Net.Sockets.Socket>.  
  
 [!code-cpp[NetworkStream_Synch_SendAndReceive#2](~/samples/snippets/cpp/VS_Snippets_Remoting/NetworkStream_Synch_SendAndReceive/CPP/source.cpp#2)]
 [!code-csharp[NetworkStream_Synch_SendAndReceive#2](~/samples/snippets/csharp/VS_Snippets_Remoting/NetworkStream_Synch_SendAndReceive/CS/source.cs#2)]
 [!code-vb[NetworkStream_Synch_SendAndReceive#2](~/samples/snippets/visualbasic/VS_Snippets_Remoting/NetworkStream_Synch_SendAndReceive/VB/source.vb#2)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">Параметр <paramref name="socket" /> имеет значение <see langword="null" />.</exception>
        <exception cref="T:System.IO.IOException">Параметр <paramref name="socket" /> не используется.  
  
 - или -  
  
 Свойство <see cref="P:System.Net.Sockets.Socket.SocketType" /> параметра <paramref name="socket" /> не содержит значения <see cref="F:System.Net.Sockets.SocketType.Stream" />.  
  
 - или -  
  
 Параметр <paramref name="socket" /> находится в неблокирующем состоянии.</exception>
        <altmember cref="M:System.Net.Sockets.NetworkStream.Close(System.Int32)" />
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public NetworkStream (System.Net.Sockets.Socket socket, bool ownsSocket);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.Net.Sockets.Socket socket, bool ownsSocket) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Sockets.NetworkStream.#ctor(System.Net.Sockets.Socket,System.Boolean)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; NetworkStream(System::Net::Sockets::Socket ^ socket, bool ownsSocket);" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Sockets</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="socket" Type="System.Net.Sockets.Socket" />
        <Parameter Name="ownsSocket" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="socket">Объект <see cref="T:System.Net.Sockets.Socket" />, который будет использоваться <see cref="T:System.Net.Sockets.NetworkStream" /> для отправки и приема данных.</param>
        <param name="ownsSocket">Задайте значение <see langword="true" />, чтобы указать на то, что объект <see cref="T:System.Net.Sockets.NetworkStream" /> будет иметь право владения объектом <see cref="T:System.Net.Sockets.Socket" />; в противном случае — значение <see langword="false" />.</param>
        <summary>Инициализирует новый экземпляр класса <see cref="T:System.Net.Sockets.NetworkStream" /> для указанного объекта <see cref="T:System.Net.Sockets.Socket" /> с заданным правом на владение <see cref="T:System.Net.Sockets.Socket" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Net.Sockets.NetworkStream> Создается с доступом на чтение и запись в указанный <xref:System.Net.Sockets.Socket>. Если значение `ownsSocket` параметр `true`, <xref:System.Net.Sockets.NetworkStream> принимает право на владение базовым <xref:System.Net.Sockets.Socket>и вызов <xref:System.Net.Sockets.NetworkStream.Close%2A> метод закрывает основной <xref:System.Net.Sockets.Socket>.  
  
   
  
## Examples  
 В следующем примере кода создается <xref:System.Net.Sockets.NetworkStream> с владением <xref:System.Net.Sockets.Socket>.  
  
 [!code-cpp[NetworkStream_Synch_SendAndReceive#2](~/samples/snippets/cpp/VS_Snippets_Remoting/NetworkStream_Synch_SendAndReceive/CPP/source.cpp#2)]
 [!code-csharp[NetworkStream_Synch_SendAndReceive#2](~/samples/snippets/csharp/VS_Snippets_Remoting/NetworkStream_Synch_SendAndReceive/CS/source.cs#2)]
 [!code-vb[NetworkStream_Synch_SendAndReceive#2](~/samples/snippets/visualbasic/VS_Snippets_Remoting/NetworkStream_Synch_SendAndReceive/VB/source.vb#2)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">Параметр <paramref name="socket" /> имеет значение <see langword="null" />.</exception>
        <exception cref="T:System.IO.IOException">Параметр <paramref name="socket" /> не используется.  
  
 - или -  
  
 значение свойства <see cref="P:System.Net.Sockets.Socket.SocketType" /> параметра <paramref name="socket" /> не является значением <see cref="F:System.Net.Sockets.SocketType.Stream" />.  
  
 - или -  
  
 параметр <paramref name="socket" /> находится в неблокирующем состоянии.</exception>
        <altmember cref="M:System.Net.Sockets.NetworkStream.Close(System.Int32)" />
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public NetworkStream (System.Net.Sockets.Socket socket, System.IO.FileAccess access);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.Net.Sockets.Socket socket, valuetype System.IO.FileAccess access) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Sockets.NetworkStream.#ctor(System.Net.Sockets.Socket,System.IO.FileAccess)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; NetworkStream(System::Net::Sockets::Socket ^ socket, System::IO::FileAccess access);" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.Sockets</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="socket" Type="System.Net.Sockets.Socket" />
        <Parameter Name="access" Type="System.IO.FileAccess" />
      </Parameters>
      <Docs>
        <param name="socket">Объект <see cref="T:System.Net.Sockets.Socket" />, который будет использоваться <see cref="T:System.Net.Sockets.NetworkStream" /> для отправки и приема данных.</param>
        <param name="access">Комбинация битов значений <see cref="T:System.IO.FileAccess" />, указывающих тот тип доступа, который дан объекту <see cref="T:System.Net.Sockets.NetworkStream" /> с использованием предоставленного объекта <see cref="T:System.Net.Sockets.Socket" />.</param>
        <summary>Создает новый экземпляр класса <see cref="T:System.Net.Sockets.NetworkStream" /> для указанного объекта <see cref="T:System.Net.Sockets.Socket" /> с заданными правами на доступ.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Net.Sockets.NetworkStream> Создается с указанным доступом к указанным <xref:System.Net.Sockets.Socket>. С помощью этого конструктора <xref:System.Net.Sockets.NetworkStream> не владеет базовой <xref:System.Net.Sockets.Socket>, поэтому вызов <xref:System.Net.Sockets.NetworkStream.Close%2A> метод не приводит к закрытию базового <xref:System.Net.Sockets.Socket>.  
  
 `access` Наборов параметров <xref:System.Net.Sockets.NetworkStream.CanRead%2A> и <xref:System.Net.Sockets.NetworkStream.CanWrite%2A> свойства <xref:System.Net.Sockets.NetworkStream>. При указании <xref:System.IO.FileAccess.Write>, то <xref:System.Net.Sockets.NetworkStream> разрешает вызовы <xref:System.Net.Sockets.NetworkStream.Write%2A> метод. При указании <xref:System.IO.FileAccess.Read>, то <xref:System.Net.Sockets.NetworkStream> разрешает вызовы <xref:System.Net.Sockets.NetworkStream.Read%2A> метод. При указании <xref:System.IO.FileAccess.ReadWrite>, оба вызова метода разрешены.  
  
   
  
## Examples  
 В следующем примере кода создается <xref:System.Net.Sockets.NetworkStream> с возможностью чтения и записи в <xref:System.Net.Sockets.Socket>.  
  
 [!code-cpp[NetworkStream_Async_SendAndReceive#1](~/samples/snippets/cpp/VS_Snippets_Remoting/NetworkStream_Async_SendAndReceive/CPP/source.cpp#1)]
 [!code-csharp[NetworkStream_Async_SendAndReceive#1](~/samples/snippets/csharp/VS_Snippets_Remoting/NetworkStream_Async_SendAndReceive/CS/source.cs#1)]
 [!code-vb[NetworkStream_Async_SendAndReceive#1](~/samples/snippets/visualbasic/VS_Snippets_Remoting/NetworkStream_Async_SendAndReceive/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">Параметр <paramref name="socket" /> имеет значение <see langword="null" />.</exception>
        <exception cref="T:System.IO.IOException">Параметр <paramref name="socket" /> не используется.  
  
 - или -  
  
 свойство <see cref="P:System.Net.Sockets.Socket.SocketType" /> параметра <paramref name="socket" /> не содержит значения <see cref="F:System.Net.Sockets.SocketType.Stream" />.  
  
 - или -  
  
 параметр <paramref name="socket" /> находится в неблокирующем состоянии.</exception>
        <altmember cref="T:System.IO.FileAccess" />
        <altmember cref="P:System.Net.Sockets.NetworkStream.CanRead" />
        <altmember cref="P:System.Net.Sockets.NetworkStream.CanWrite" />
        <altmember cref="M:System.Net.Sockets.NetworkStream.Read(System.Byte[],System.Int32,System.Int32)" />
        <altmember cref="M:System.Net.Sockets.NetworkStream.Write(System.Byte[],System.Int32,System.Int32)" />
        <altmember cref="M:System.Net.Sockets.NetworkStream.Close(System.Int32)" />
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public NetworkStream (System.Net.Sockets.Socket socket, System.IO.FileAccess access, bool ownsSocket);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.Net.Sockets.Socket socket, valuetype System.IO.FileAccess access, bool ownsSocket) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Sockets.NetworkStream.#ctor(System.Net.Sockets.Socket,System.IO.FileAccess,System.Boolean)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; NetworkStream(System::Net::Sockets::Socket ^ socket, System::IO::FileAccess access, bool ownsSocket);" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.Sockets</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="socket" Type="System.Net.Sockets.Socket" />
        <Parameter Name="access" Type="System.IO.FileAccess" />
        <Parameter Name="ownsSocket" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="socket">Объект <see cref="T:System.Net.Sockets.Socket" />, который будет использоваться <see cref="T:System.Net.Sockets.NetworkStream" /> для отправки и приема данных.</param>
        <param name="access">Комбинация битов значений <see cref="T:System.IO.FileAccess" />, указывающая тот тип доступа, который дан объекту <see cref="T:System.Net.Sockets.NetworkStream" /> с использованием предоставленного объекта <see cref="T:System.Net.Sockets.Socket" />.</param>
        <param name="ownsSocket">Задайте значение <see langword="true" />, чтобы указать на то, что объект <see cref="T:System.Net.Sockets.NetworkStream" /> будет иметь право владения объектом <see cref="T:System.Net.Sockets.Socket" />; в противном случае — значение <see langword="false" />.</param>
        <summary>Создает новый экземпляр класса <see cref="T:System.Net.Sockets.NetworkStream" /> для указанного объекта <see cref="T:System.Net.Sockets.Socket" /> с заданными правами доступа и указанными правами владения объектом <see cref="T:System.Net.Sockets.Socket" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Net.Sockets.NetworkStream> Создается с доступом на чтение и запись в указанный <xref:System.Net.Sockets.Socket>. Если значение `ownsSocket` параметр `true`, <xref:System.Net.Sockets.NetworkStream> принимает право на владение базовым <xref:System.Net.Sockets.Socket>и вызов <xref:System.Net.Sockets.NetworkStream.Close%2A> метод закрывает основной <xref:System.Net.Sockets.Socket>.  
  
 `access` Наборов параметров <xref:System.Net.Sockets.NetworkStream.CanRead%2A> и <xref:System.Net.Sockets.NetworkStream.CanWrite%2A> свойства <xref:System.Net.Sockets.NetworkStream>. При указании <xref:System.IO.FileAccess.Write>, то <xref:System.Net.Sockets.NetworkStream> разрешает вызовы <xref:System.Net.Sockets.NetworkStream.Write%2A> метод. При указании <xref:System.IO.FileAccess.Read>, то <xref:System.Net.Sockets.NetworkStream> разрешает вызовы <xref:System.Net.Sockets.NetworkStream.Read%2A> метод. При указании <xref:System.IO.FileAccess.ReadWrite>, оба вызова метода разрешены.  
  
   
  
## Examples  
 В следующем примере кода создается <xref:System.Net.Sockets.NetworkStream> с возможностью чтения и записи в <xref:System.Net.Sockets.Socket>. Владение <xref:System.Net.Sockets.Socket> дано этому <xref:System.Net.Sockets.NetworkStream> , указав `true` для `ownsSocket` параметра.  
  
 [!code-cpp[NetworkStream_Async_SendAndReceive#1](~/samples/snippets/cpp/VS_Snippets_Remoting/NetworkStream_Async_SendAndReceive/CPP/source.cpp#1)]
 [!code-csharp[NetworkStream_Async_SendAndReceive#1](~/samples/snippets/csharp/VS_Snippets_Remoting/NetworkStream_Async_SendAndReceive/CS/source.cs#1)]
 [!code-vb[NetworkStream_Async_SendAndReceive#1](~/samples/snippets/visualbasic/VS_Snippets_Remoting/NetworkStream_Async_SendAndReceive/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">Параметр <paramref name="socket" /> имеет значение <see langword="null" />.</exception>
        <exception cref="T:System.IO.IOException">Параметр <paramref name="socket" /> не используется.  
  
 - или -  
  
 Свойство <see cref="P:System.Net.Sockets.Socket.SocketType" /> параметра <paramref name="socket" /> не содержит значения <see cref="F:System.Net.Sockets.SocketType.Stream" />.  
  
 - или -  
  
 Параметр <paramref name="socket" /> находится в неблокирующем состоянии.</exception>
        <altmember cref="T:System.IO.FileAccess" />
        <altmember cref="P:System.Net.Sockets.NetworkStream.CanRead" />
        <altmember cref="P:System.Net.Sockets.NetworkStream.CanWrite" />
        <altmember cref="M:System.Net.Sockets.NetworkStream.Close(System.Int32)" />
        <altmember cref="M:System.Net.Sockets.NetworkStream.Read(System.Byte[],System.Int32,System.Int32)" />
        <altmember cref="M:System.Net.Sockets.NetworkStream.Write(System.Byte[],System.Int32,System.Int32)" />
      </Docs>
    </Member>
    <Member MemberName="BeginRead">
      <MemberSignature Language="C#" Value="public override IAsyncResult BeginRead (byte[] buffer, int offset, int size, AsyncCallback callback, object state);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance class System.IAsyncResult BeginRead(unsigned int8[] buffer, int32 offset, int32 size, class System.AsyncCallback callback, object state) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Sockets.NetworkStream.BeginRead(System.Byte[],System.Int32,System.Int32,System.AsyncCallback,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function BeginRead (buffer As Byte(), offset As Integer, size As Integer, callback As AsyncCallback, state As Object) As IAsyncResult" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override IAsyncResult ^ BeginRead(cli::array &lt;System::Byte&gt; ^ buffer, int offset, int size, AsyncCallback ^ callback, System::Object ^ state);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.Sockets</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IAsyncResult</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="buffer" Type="System.Byte[]" />
        <Parameter Name="offset" Type="System.Int32" />
        <Parameter Name="size" Type="System.Int32" />
        <Parameter Name="callback" Type="System.AsyncCallback" />
        <Parameter Name="state" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="buffer">Массив типа <see cref="T:System.Byte" />, который является местоположением в памяти для хранения данных, прочитанных из <see cref="T:System.Net.Sockets.NetworkStream" />.</param>
        <param name="offset">Местоположение в объекте <c>buffer</c>, начиная с которого сохраняются данные.</param>
        <param name="size">Число байтов, читаемых из объекта <see cref="T:System.Net.Sockets.NetworkStream" />.</param>
        <param name="callback">Делегат <see cref="T:System.AsyncCallback" />, который выполняется после выполнения метода <see cref="M:System.Net.Sockets.NetworkStream.BeginRead(System.Byte[],System.Int32,System.Int32,System.AsyncCallback,System.Object)" />.</param>
        <param name="state">Объект, содержащий любые дополнительные данные, определенные пользователем.</param>
        <summary>Начинает асинхронное чтение из объекта <see cref="T:System.Net.Sockets.NetworkStream" />.</summary>
        <returns>Объект <see cref="T:System.IAsyncResult" />, который представляет асинхронный вызов.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Net.Sockets.NetworkStream.BeginRead%2A> Метод начинает асинхронное чтение данных из входящих сетевых буферов. Вызов <xref:System.Net.Sockets.NetworkStream.BeginRead%2A> метод дает возможность принимать данные в отдельном потоке.  
  
 Необходимо создать метод обратного вызова, который реализует <xref:System.AsyncCallback> делегат и передайте ее имя на <xref:System.Net.Sockets.NetworkStream.BeginRead%2A> метод. По крайней мере к `state` параметр должен содержать <xref:System.Net.Sockets.NetworkStream>. Так как может потребоваться получить поступившие данные в рамках метода обратного вызова, следует создать небольшой класс или структуру для хранения буфера чтения и любых других полезных сведений. Передайте этот экземпляр структуры или класса, чтобы <xref:System.Net.Sockets.NetworkStream.BeginRead%2A> метода с помощью `state` параметра.  
  
 Метод обратного вызова должен вызывать <xref:System.Net.Sockets.NetworkStream.EndRead%2A> метод. Когда приложение вызывает метод <xref:System.Net.Sockets.NetworkStream.BeginRead%2A>, система будет ждать получения данных или возникает ошибка и затем система будет использовать отдельный поток для выполнения указанный метод обратного вызова и блоки на <xref:System.Net.Sockets.NetworkStream.EndRead%2A> до указанных <xref:System.Net.Sockets.NetworkStream> считывает данные или создает исключение. Если необходимо, чтобы заблокировать после вызова исходный поток <xref:System.Net.Sockets.NetworkStream.BeginRead%2A> используйте <xref:System.Threading.WaitHandle.WaitOne%2A> метод. Вызовите <xref:System.Threading.EventWaitHandle.Set%2A> в методе обратного вызова, если необходимо продолжить исполнение исходного потока. Дополнительные сведения о создании методов обратного вызова см. в разделе [маршалинг делегата как метода обратного вызова](~/docs/framework/interop/marshaling-a-delegate-as-a-callback-method.md).  
  
 <xref:System.Net.Sockets.NetworkStream.BeginRead%2A> Метод считывает столько доступных данных, до числа байтов, указанное в `size` параметра.  
  
> [!NOTE]
>  При получении <xref:System.IO.IOException>, проверьте <xref:System.Exception.InnerException%2A> свойства, чтобы определить, если оно было вызвано <xref:System.Net.Sockets.SocketException>. В этом случае используйте <xref:System.Net.Sockets.SocketException.ErrorCode%2A> свойство для получения определенного кода ошибки и ссылки на подробное описание ошибки документации по кодам ошибок API Windows Sockets версии 2 в библиотеке MSDN.  
  
 Чтение и запись операции могут выполняться одновременно на экземпляре <xref:System.Net.Sockets.NetworkStream> класс без необходимости синхронизации. При условии, что имеется один уникальный поток для операций записи и один уникальный поток для операций чтения, будет перекрестных конфликтов между чтения и записи потоков и синхронизация не требуется.  
  
   
  
## Examples  
 Следующий пример кода использует <xref:System.Net.Sockets.NetworkStream.BeginRead%2A> для асинхронного чтения данных из сетевого потока. `myReadCallBack` Реализует метод <xref:System.AsyncCallback> делегата и вызывается системой при <xref:System.Net.Sockets.NetworkStream.BeginRead%2A> возвращает.  
  
 [!code-cpp[NetworkStream_Async_SendAndReceive#3](~/samples/snippets/cpp/VS_Snippets_Remoting/NetworkStream_Async_SendAndReceive/CPP/source.cpp#3)]
 [!code-csharp[NetworkStream_Async_SendAndReceive#3](~/samples/snippets/csharp/VS_Snippets_Remoting/NetworkStream_Async_SendAndReceive/CS/source.cs#3)]
 [!code-vb[NetworkStream_Async_SendAndReceive#3](~/samples/snippets/visualbasic/VS_Snippets_Remoting/NetworkStream_Async_SendAndReceive/VB/source.vb#3)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">Параметр <paramref name="buffer" /> имеет значение <see langword="null" />.</exception>
        <exception cref="T:System.ArgumentOutOfRangeException">Значение параметра <paramref name="offset" /> меньше 0.  
  
 - или -  
  
 Значение параметра <paramref name="offset" />  больше длины значения, указанного в параметре <paramref name="buffer" />.  
  
 - или -  
  
 Значение параметра <paramref name="size" /> меньше 0.  
  
 - или -  
  
 Значение параметра <paramref name="size" /> больше разности значений длины в параметре <paramref name="buffer" /> и значения параметра <paramref name="offset" />.</exception>
        <exception cref="T:System.IO.IOException">Основной объект <see cref="T:System.Net.Sockets.Socket" /> закрыт.  
  
 - или -  
  
 Произошел сбой в процессе чтения из сети.  
  
 - или -  
  
 Произошла ошибка при обращении к сокету.</exception>
        <exception cref="T:System.ObjectDisposedException">Объект <see cref="T:System.Net.Sockets.NetworkStream" /> закрыт.</exception>
        <altmember cref="M:System.Net.Sockets.NetworkStream.EndRead(System.IAsyncResult)" />
      </Docs>
    </Member>
    <Member MemberName="BeginWrite">
      <MemberSignature Language="C#" Value="public override IAsyncResult BeginWrite (byte[] buffer, int offset, int size, AsyncCallback callback, object state);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance class System.IAsyncResult BeginWrite(unsigned int8[] buffer, int32 offset, int32 size, class System.AsyncCallback callback, object state) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Sockets.NetworkStream.BeginWrite(System.Byte[],System.Int32,System.Int32,System.AsyncCallback,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function BeginWrite (buffer As Byte(), offset As Integer, size As Integer, callback As AsyncCallback, state As Object) As IAsyncResult" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override IAsyncResult ^ BeginWrite(cli::array &lt;System::Byte&gt; ^ buffer, int offset, int size, AsyncCallback ^ callback, System::Object ^ state);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.Sockets</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IAsyncResult</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="buffer" Type="System.Byte[]" />
        <Parameter Name="offset" Type="System.Int32" />
        <Parameter Name="size" Type="System.Int32" />
        <Parameter Name="callback" Type="System.AsyncCallback" />
        <Parameter Name="state" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="buffer">Массив типа <see cref="T:System.Byte" />, содержащий данные для записи в объект <see cref="T:System.Net.Sockets.NetworkStream" />.</param>
        <param name="offset">Местоположение в объекте <c>buffer</c>, начиная с которого отправляются данные.</param>
        <param name="size">Число байтов для записи в объект <see cref="T:System.Net.Sockets.NetworkStream" />.</param>
        <param name="callback">Делегат <see cref="T:System.AsyncCallback" />, который выполняется после выполнения метода <see cref="M:System.Net.Sockets.NetworkStream.BeginWrite(System.Byte[],System.Int32,System.Int32,System.AsyncCallback,System.Object)" />.</param>
        <param name="state">Объект, содержащий любые дополнительные данные, определенные пользователем.</param>
        <summary>Начинает асинхронную запись в поток.</summary>
        <returns>Объект <see cref="T:System.IAsyncResult" />, который представляет асинхронный вызов.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Net.Sockets.NetworkStream.BeginWrite%2A> Метод начинает операцию асинхронной передачи на удаленный узел. Вызов <xref:System.Net.Sockets.NetworkStream.BeginWrite%2A> метод дает возможность отправлять данные в отдельном потоке.  
  
 Необходимо создать метод обратного вызова, который реализует <xref:System.AsyncCallback> делегат и передайте ее имя на <xref:System.Net.Sockets.NetworkStream.BeginWrite%2A> метод. По крайней мере к `state` параметр должен содержать <xref:System.Net.Sockets.NetworkStream>. Если обратного вызова необходимы дополнительные сведения, можно создать небольшой класс или структуру для хранения <xref:System.Net.Sockets.NetworkStream> и другие необходимые сведения. Передайте этот экземпляр структуры или класса, чтобы <xref:System.Net.Sockets.NetworkStream.BeginWrite%2A> метода с помощью `state` параметра.  
  
 Метод обратного вызова должен реализовывать <xref:System.Net.Sockets.NetworkStream.EndWrite%2A> метод. Когда приложение вызывает метод <xref:System.Net.Sockets.NetworkStream.BeginWrite%2A>, система использует отдельный поток для выполнения указанный метод обратного вызова и блокирует на <xref:System.Net.Sockets.NetworkStream.EndWrite%2A> до <xref:System.Net.Sockets.NetworkStream> отправляет запрошенного числа байтов или создает исключение. Если необходимо, чтобы заблокировать после вызова исходный поток <xref:System.Net.Sockets.NetworkStream.BeginWrite%2A> используйте <xref:System.Threading.WaitHandle.WaitOne%2A> метод. Вызовите <xref:System.Threading.EventWaitHandle.Set%2A> в методе обратного вызова, если необходимо продолжить исполнение исходного потока. Дополнительные сведения о создании методов обратного вызова см. в разделе [маршалинг делегата как метода обратного вызова](~/docs/framework/interop/marshaling-a-delegate-as-a-callback-method.md).  
  
> [!NOTE]
>  При получении <xref:System.IO.IOException>, проверьте <xref:System.Exception.InnerException%2A> свойства, чтобы определить, если оно было вызвано <xref:System.Net.Sockets.SocketException>. В этом случае используйте <xref:System.Net.Sockets.SocketException.ErrorCode%2A> свойство для получения определенного кода ошибки и ссылки на подробное описание ошибки документации по кодам ошибок API Windows Sockets версии 2 в библиотеке MSDN.  
  
 Чтение и запись операции могут выполняться одновременно на экземпляре <xref:System.Net.Sockets.NetworkStream> класс без необходимости синхронизации. При условии, что имеется один уникальный поток для операций записи и один уникальный поток для операций чтения, будет перекрестных конфликтов между чтения и записи потоков и синхронизация не требуется.  
  
   
  
## Examples  
 Следующий пример кода использует <xref:System.Net.Sockets.NetworkStream.BeginWrite%2A> для записи данных асинхронно в сетевой поток. `myWriteCallBack` Реализует метод <xref:System.AsyncCallback> делегата и вызывается системой при <xref:System.Net.Sockets.NetworkStream.BeginWrite%2A> возвращает.  
  
 [!code-cpp[NetworkStream_Async_SendAndReceive#2](~/samples/snippets/cpp/VS_Snippets_Remoting/NetworkStream_Async_SendAndReceive/CPP/source.cpp#2)]
 [!code-csharp[NetworkStream_Async_SendAndReceive#2](~/samples/snippets/csharp/VS_Snippets_Remoting/NetworkStream_Async_SendAndReceive/CS/source.cs#2)]
 [!code-vb[NetworkStream_Async_SendAndReceive#2](~/samples/snippets/visualbasic/VS_Snippets_Remoting/NetworkStream_Async_SendAndReceive/VB/source.vb#2)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">Параметр <paramref name="buffer" /> имеет значение <see langword="null" />.</exception>
        <exception cref="T:System.ArgumentOutOfRangeException">Значение параметра <paramref name="offset" /> меньше 0.  
  
 - или -  
  
 Значение параметра <paramref name="offset" />  больше длины значения, указанного в параметре <paramref name="buffer" />.  
  
 - или -  
  
 Значение параметра <paramref name="size" /> меньше 0.  
  
 - или -  
  
 Значение параметра <paramref name="size" /> больше разности значений длины в параметре <paramref name="buffer" /> и значения параметра <paramref name="offset" />.</exception>
        <exception cref="T:System.IO.IOException">Основной объект <see cref="T:System.Net.Sockets.Socket" /> закрыт.  
  
 - или -  
  
 Произошел сбой в процессе записи в сеть.  
  
 - или -  
  
 Произошла ошибка при обращении к сокету.</exception>
        <exception cref="T:System.ObjectDisposedException">Объект <see cref="T:System.Net.Sockets.NetworkStream" /> закрыт.</exception>
        <altmember cref="M:System.Net.Sockets.NetworkStream.EndWrite(System.IAsyncResult)" />
      </Docs>
    </Member>
    <Member MemberName="CanRead">
      <MemberSignature Language="C#" Value="public override bool CanRead { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool CanRead" />
      <MemberSignature Language="DocId" Value="P:System.Net.Sockets.NetworkStream.CanRead" />
      <MemberSignature Language="VB.NET" Value="Public Overrides ReadOnly Property CanRead As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property bool CanRead { bool get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Sockets</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Возвращает значение, указывающее, поддерживает ли объект <see cref="T:System.Net.Sockets.NetworkStream" /> чтение.</summary>
        <value>
          Значение <see langword="true" />, если данные могут быть прочитаны из потока; в противном случае — <see langword="false" />. Значение по умолчанию — <see langword="true" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Если <xref:System.Net.Sockets.NetworkStream.CanRead%2A> — `true`, <xref:System.Net.Sockets.NetworkStream> разрешает вызовы <xref:System.Net.Sockets.NetworkStream.Read%2A> метод. Обеспечивает соответствующее <xref:System.IO.FileAccess> последовательные значения в конструкторе, чтобы задать для удобства чтения и записи для объекта <xref:System.Net.Sockets.NetworkStream>. <xref:System.Net.Sockets.NetworkStream.CanRead%2A> Свойство устанавливается, когда <xref:System.Net.Sockets.NetworkStream> инициализируется.  
  
   
  
## Examples  
 В следующем примере кода в примере выполняется проверка <xref:System.Net.Sockets.NetworkStream.CanRead%2A> и убедитесь, что <xref:System.Net.Sockets.NetworkStream> доступен для чтения. Затем выполняется операция чтения на <xref:System.Net.Sockets.NetworkStream>.  
  
 [!code-cpp[NetworkStream_Synch_SendAndReceive#4](~/samples/snippets/cpp/VS_Snippets_Remoting/NetworkStream_Synch_SendAndReceive/CPP/source.cpp#4)]
 [!code-csharp[NetworkStream_Synch_SendAndReceive#4](~/samples/snippets/csharp/VS_Snippets_Remoting/NetworkStream_Synch_SendAndReceive/CS/source.cs#4)]
 [!code-vb[NetworkStream_Synch_SendAndReceive#4](~/samples/snippets/visualbasic/VS_Snippets_Remoting/NetworkStream_Synch_SendAndReceive/VB/source.vb#4)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Net.Sockets.NetworkStream.Readable" />
        <altmember cref="T:System.IO.FileAccess" />
      </Docs>
    </Member>
    <Member MemberName="CanSeek">
      <MemberSignature Language="C#" Value="public override bool CanSeek { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool CanSeek" />
      <MemberSignature Language="DocId" Value="P:System.Net.Sockets.NetworkStream.CanSeek" />
      <MemberSignature Language="VB.NET" Value="Public Overrides ReadOnly Property CanSeek As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property bool CanSeek { bool get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Sockets</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Получает значение, указывающее, поддерживает ли поток поиск. Это свойство в настоящее время не поддерживается и всегда возвращает значение <see langword="false" />.</summary>
        <value>
          Значение <see langword="false" /> всегда указывает на то, что объект <see cref="T:System.Net.Sockets.NetworkStream" /> не может выполнять поиск определенного местоположения в потоке.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CanTimeout">
      <MemberSignature Language="C#" Value="public override bool CanTimeout { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool CanTimeout" />
      <MemberSignature Language="DocId" Value="P:System.Net.Sockets.NetworkStream.CanTimeout" />
      <MemberSignature Language="VB.NET" Value="Public Overrides ReadOnly Property CanTimeout As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property bool CanTimeout { bool get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Sockets</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Указывает, применимы ли для объекта <see cref="T:System.Net.Sockets.NetworkStream" /> свойства тайм-аута.</summary>
        <value>
          Значение <see langword="true" /> во всех случаях.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Это свойство присутствует, поскольку оно унаследовано из <xref:System.IO.Stream>.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="CanWrite">
      <MemberSignature Language="C#" Value="public override bool CanWrite { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool CanWrite" />
      <MemberSignature Language="DocId" Value="P:System.Net.Sockets.NetworkStream.CanWrite" />
      <MemberSignature Language="VB.NET" Value="Public Overrides ReadOnly Property CanWrite As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property bool CanWrite { bool get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Sockets</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Получает значение, указывающее, поддерживает ли объект <see cref="T:System.Net.Sockets.NetworkStream" /> запись.</summary>
        <value>
          Значение <see langword="true" />, если данные могут быть записаны в объект <see cref="T:System.Net.Sockets.NetworkStream" />; в противном случае — значение <see langword="false" />. Значение по умолчанию — <see langword="true" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Если <xref:System.Net.Sockets.NetworkStream.CanWrite%2A> — `true`, <xref:System.Net.Sockets.NetworkStream> разрешает вызовы <xref:System.Net.Sockets.NetworkStream.Write%2A> метод. Обеспечивает соответствующее <xref:System.IO.FileAccess> последовательные значения в конструкторе, чтобы задать для удобства чтения и записи для объекта <xref:System.Net.Sockets.NetworkStream>. <xref:System.Net.Sockets.NetworkStream.CanWrite%2A> Свойство устанавливается, когда <xref:System.Net.Sockets.NetworkStream> инициализируется.  
  
   
  
## Examples  
 В следующем примере кода в примере выполняется проверка <xref:System.Net.Sockets.NetworkStream.CanWrite%2A> и убедитесь, что <xref:System.Net.Sockets.NetworkStream> доступен для записи. Затем он выполняет операцию записи на <xref:System.Net.Sockets.NetworkStream>.  
  
 [!code-cpp[NetworkStream_Synch_SendAndReceive#3](~/samples/snippets/cpp/VS_Snippets_Remoting/NetworkStream_Synch_SendAndReceive/CPP/source.cpp#3)]
 [!code-csharp[NetworkStream_Synch_SendAndReceive#3](~/samples/snippets/csharp/VS_Snippets_Remoting/NetworkStream_Synch_SendAndReceive/CS/source.cs#3)]
 [!code-vb[NetworkStream_Synch_SendAndReceive#3](~/samples/snippets/visualbasic/VS_Snippets_Remoting/NetworkStream_Synch_SendAndReceive/VB/source.vb#3)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Net.Sockets.NetworkStream.Writeable" />
        <altmember cref="T:System.IO.FileAccess" />
      </Docs>
    </Member>
    <Member MemberName="Close">
      <MemberSignature Language="C#" Value="public void Close (int timeout);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Close(int32 timeout) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Sockets.NetworkStream.Close(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Close (timeout As Integer)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Close(int timeout);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.Sockets</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="timeout" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="timeout">32-битное целое число со знаком, определяющее количество миллисекунд ожидания для отправки оставшихся данных перед закрытием.</param>
        <summary>Закрывает объект <see cref="T:System.Net.Sockets.NetworkStream" /> после ожидания в течение указанного времени, позволяя выполнить отправку данных.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Net.Sockets.NetworkStream.Close%2A> Метод освобождает управляемые и неуправляемые ресурсы, связанные с <xref:System.Net.Sockets.NetworkStream>. Если <xref:System.Net.Sockets.NetworkStream> владеет основным <xref:System.Net.Sockets.Socket>, также закрывается.  
  
 Если <xref:System.Net.Sockets.NetworkStream> была связана с <xref:System.Net.Sockets.TcpClient>, <xref:System.Net.Sockets.NetworkStream.Close%2A> метод закрыть подключение TCP, но не удаления связанного <xref:System.Net.Sockets.TcpClient>.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">Значение параметра <paramref name="timeout" /> меньше –1.</exception>
      </Docs>
    </Member>
    <Member MemberName="DataAvailable">
      <MemberSignature Language="C#" Value="public virtual bool DataAvailable { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool DataAvailable" />
      <MemberSignature Language="DocId" Value="P:System.Net.Sockets.NetworkStream.DataAvailable" />
      <MemberSignature Language="VB.NET" Value="Public Overridable ReadOnly Property DataAvailable As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property bool DataAvailable { bool get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Sockets</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Возвращает значение, указывающее, имеются ли в объекте <see cref="T:System.Net.Sockets.NetworkStream" /> данные, доступные для чтения.</summary>
        <value>
          Значение <see langword="true" />, если содержащиеся в потоке данные могут быть прочитаны; в противном случае — <see langword="false" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Используйте <xref:System.Net.Sockets.NetworkStream.DataAvailable%2A> свойство, чтобы определить, готов ли данных для чтения. Если <xref:System.Net.Sockets.NetworkStream.DataAvailable%2A> — `true`, вызов <xref:System.Net.Sockets.NetworkStream.Read%2A> возвращается немедленно. Если удаленный узел отключает или закрывает соединение, <xref:System.Net.Sockets.NetworkStream.DataAvailable%2A> может вызвать исключение <xref:System.Net.Sockets.SocketException>.  
  
   
  
## Examples  
 В следующем примере кода считывает из <xref:System.Net.Sockets.NetworkStream> при условии, что данные недоступны.  
  
 [!code-cpp[NetworkStream_Synch_SendAndReceive#4](~/samples/snippets/cpp/VS_Snippets_Remoting/NetworkStream_Synch_SendAndReceive/CPP/source.cpp#4)]
 [!code-csharp[NetworkStream_Synch_SendAndReceive#4](~/samples/snippets/csharp/VS_Snippets_Remoting/NetworkStream_Synch_SendAndReceive/CS/source.cs#4)]
 [!code-vb[NetworkStream_Synch_SendAndReceive#4](~/samples/snippets/visualbasic/VS_Snippets_Remoting/NetworkStream_Synch_SendAndReceive/VB/source.vb#4)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ObjectDisposedException">Объект <see cref="T:System.Net.Sockets.NetworkStream" /> закрыт.</exception>
        <exception cref="T:System.IO.IOException">Основной объект <see cref="T:System.Net.Sockets.Socket" /> закрыт.</exception>
        <exception cref="T:System.Net.Sockets.SocketException">Используйте свойство <see cref="P:System.Net.Sockets.SocketException.ErrorCode" /> для получения конкретного кода ошибки и обратитесь за подробным описанием ошибки к документации по кодам ошибок API Windows Socket версии 2 в библиотеке MSDN.</exception>
        <altmember cref="M:System.Net.Sockets.NetworkStream.Read(System.Byte[],System.Int32,System.Int32)" />
      </Docs>
    </Member>
    <Member MemberName="Dispose">
      <MemberSignature Language="C#" Value="protected override void Dispose (bool disposing);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance void Dispose(bool disposing) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Sockets.NetworkStream.Dispose(System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Sub Dispose (disposing As Boolean)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; override void Dispose(bool disposing);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Sockets</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="disposing" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="disposing">
          Значение <see langword="true" /> позволяет освободить как управляемые, так и неуправляемые ресурсы; значение <see langword="false" /> освобождает только неуправляемые ресурсы.</param>
        <summary>Освобождает неуправляемые ресурсы, используемые объектом <see cref="T:System.Net.Sockets.NetworkStream" />, а при необходимости освобождает также управляемые ресурсы.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Этот метод вызывается методом открытые `Dispose` метод и <xref:System.Object.Finalize%2A> метод. `Dispose` вызывает защищенный `Dispose(Boolean)` метод с `disposing` равным `true`. <xref:System.Object.Finalize%2A> вызывает `Dispose` с `disposing` значение `false`.  
  
 Если параметр `disposing` имеет значение `true`, то данный метод освобождает все ресурсы, занятые любыми управляемыми объектами, на которые ссылается этот объект <xref:System.Net.Sockets.NetworkStream>. Этот метод вызывает метод `Dispose` каждого объекта, на который есть ссылка.  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides">
          <para>
            Метод <see langword="Dispose" /> может вызываться несколько раз другими объектами. При переопределении метода <see langword="Dispose(Boolean)" /> нужно избегать ссылок на объекты, которые были уничтожены предыдущими вызовами метода <see langword="Dispose" />. Дополнительные сведения о реализации <see langword="Dispose(Boolean)" />, в разделе [метода](~/docs/standard/garbage-collection/implementing-dispose.md).  
  
 Дополнительные сведения о <see langword="Dispose" /> и <see cref="M:System.Object.Finalize" />, в разделе [очистки неуправляемых ресурсов](~/docs/standard/garbage-collection/unmanaged.md) и [переопределение метода Finalize](http://msdn.microsoft.com/library/8026cb68-fe93-43fc-96c1-c09ad7d64cd3).</para>
        </block>
      </Docs>
    </Member>
    <Member MemberName="EndRead">
      <MemberSignature Language="C#" Value="public override int EndRead (IAsyncResult asyncResult);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance int32 EndRead(class System.IAsyncResult asyncResult) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Sockets.NetworkStream.EndRead(System.IAsyncResult)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function EndRead (asyncResult As IAsyncResult) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override int EndRead(IAsyncResult ^ asyncResult);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.Sockets</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="asyncResult" Type="System.IAsyncResult" />
      </Parameters>
      <Docs>
        <param name="asyncResult">Объект <see cref="T:System.IAsyncResult" />, который представляет асинхронный вызов.</param>
        <summary>Обрабатывает завершение асинхронного чтения.</summary>
        <returns>Число байтов, читаемых из объекта <see cref="T:System.Net.Sockets.NetworkStream" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Net.Sockets.NetworkStream.EndRead%2A> Метод завершает асинхронную операцию чтения, запущенную <xref:System.Net.Sockets.NetworkStream.BeginRead%2A> метод.  
  
 Перед вызовом метода <xref:System.Net.Sockets.NetworkStream.BeginRead%2A>, необходимо создать метод обратного вызова, который реализует <xref:System.AsyncCallback> делегата. Этот метод обратного вызова выполняется в отдельном потоке и вызывается системой после <xref:System.Net.Sockets.NetworkStream.BeginRead%2A> возвращает. Метод обратного вызова должен принимать <xref:System.IAsyncResult> , возвращенные <xref:System.Net.Sockets.NetworkStream.BeginRead%2A> методу в качестве параметра.  
  
 В методе обратного вызова <xref:System.IAsyncResult.AsyncState%2A> свойство <xref:System.IAsyncResult> получить состояние объекта, переданного в <xref:System.Net.Sockets.NetworkStream.BeginRead%2A> метод. Извлеките полученный <xref:System.Net.Sockets.NetworkStream> из этого объекта состояния. После получения <xref:System.Net.Sockets.NetworkStream>, вызовите <xref:System.Net.Sockets.NetworkStream.EndRead%2A> метод для успешного завершения операции чтения и возвращают число считанных байтов.  
  
 <xref:System.Net.Sockets.NetworkStream.EndRead%2A> Метод блокируется до данные недоступны. <xref:System.Net.Sockets.NetworkStream.EndRead%2A> Метод считывает столько данных доступно до числа байтов, указанного в `size` параметр <xref:System.Net.Sockets.NetworkStream.BeginRead%2A> метода. Если удаленный узел отключает <xref:System.Net.Sockets.Socket> получено подключения и все доступные данные <xref:System.Net.Sockets.NetworkStream.EndRead%2A> метод сразу же завершает работу и возвращает ноль байтов.  
  
 Чтобы получить поступившие данные, вызовите <xref:System.IAsyncResult.AsyncState%2A> свойство <xref:System.IAsyncResult>и извлеките буфер, содержащийся в объекте результирующего состояния.  
  
> [!NOTE]
>  При получении <xref:System.IO.IOException>, проверьте <xref:System.Exception.InnerException%2A> свойства, чтобы определить, если оно было вызвано <xref:System.Net.Sockets.SocketException>. В этом случае используйте <xref:System.Net.Sockets.SocketException.ErrorCode%2A> свойство для получения определенного кода ошибки и ссылки на подробное описание ошибки документации по кодам ошибок API Windows Sockets версии 2 в библиотеке MSDN.  
  
   
  
## Examples  
 В следующем примере кода `myReadCallback` передается <xref:System.Net.Sockets.NetworkStream.BeginRead%2A> как метод обратного вызова. <xref:System.Net.Sockets.NetworkStream.EndRead%2A> реализуется в `myReadCallback` для завершения асинхронного чтения, запущенную вызов <xref:System.Net.Sockets.NetworkStream.BeginRead%2A>.  
  
 [!code-cpp[NetworkStream_Async_SendAndReceive#5](~/samples/snippets/cpp/VS_Snippets_Remoting/NetworkStream_Async_SendAndReceive/CPP/source.cpp#5)]
 [!code-csharp[NetworkStream_Async_SendAndReceive#5](~/samples/snippets/csharp/VS_Snippets_Remoting/NetworkStream_Async_SendAndReceive/CS/source.cs#5)]
 [!code-vb[NetworkStream_Async_SendAndReceive#5](~/samples/snippets/visualbasic/VS_Snippets_Remoting/NetworkStream_Async_SendAndReceive/VB/source.vb#5)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">Параметр <paramref name="asyncResult" /> имеет значение <see langword="null" />.</exception>
        <exception cref="T:System.IO.IOException">Основной объект <see cref="T:System.Net.Sockets.Socket" /> закрыт.  
  
 - или -  
  
 Произошла ошибка при обращении к сокету.</exception>
        <exception cref="T:System.ObjectDisposedException">Объект <see cref="T:System.Net.Sockets.NetworkStream" /> закрыт.</exception>
        <altmember cref="M:System.Net.Sockets.NetworkStream.BeginRead(System.Byte[],System.Int32,System.Int32,System.AsyncCallback,System.Object)" />
      </Docs>
    </Member>
    <Member MemberName="EndWrite">
      <MemberSignature Language="C#" Value="public override void EndWrite (IAsyncResult asyncResult);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance void EndWrite(class System.IAsyncResult asyncResult) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Sockets.NetworkStream.EndWrite(System.IAsyncResult)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Sub EndWrite (asyncResult As IAsyncResult)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override void EndWrite(IAsyncResult ^ asyncResult);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.Sockets</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="asyncResult" Type="System.IAsyncResult" />
      </Parameters>
      <Docs>
        <param name="asyncResult">Объект <see cref="T:System.IAsyncResult" />, который представляет асинхронный вызов.</param>
        <summary>Обрабатывает завершение асинхронной записи.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Net.Sockets.NetworkStream.EndWrite%2A> Завершает асинхронную операцию отправки запущен в <xref:System.Net.Sockets.NetworkStream.BeginWrite%2A>.  
  
 Перед вызовом метода <xref:System.Net.Sockets.NetworkStream.BeginWrite%2A>, необходимо создать метод обратного вызова, который реализует <xref:System.AsyncCallback> делегата. Этот метод обратного вызова выполняется в отдельном потоке и вызывается системой после <xref:System.Net.Sockets.NetworkStream.BeginWrite%2A> возвращает. Метод обратного вызова должен принимать <xref:System.IAsyncResult> , возвращенные <xref:System.Net.Sockets.NetworkStream.BeginWrite%2A> методу в качестве параметра.  
  
 В методе обратного вызова <xref:System.IAsyncResult.AsyncState%2A> свойство `IAsyncResult` параметр, чтобы получить <xref:System.Net.Sockets.NetworkStream>. После получения <xref:System.Net.Sockets.NetworkStream>, можно вызвать <xref:System.Net.Sockets.NetworkStream.EndWrite%2A> метод для успешного завершения операции отправки и возвращают число отправленных байтов.  
  
 <xref:System.Net.Sockets.NetworkStream.EndWrite%2A> Метод блокируется, пока не будут отправлены запрошенного числа байтов.  
  
> [!NOTE]
>  При получении <xref:System.IO.IOException>, проверьте <xref:System.Exception.InnerException%2A> свойства, чтобы определить, если оно было вызвано <xref:System.Net.Sockets.SocketException>. В этом случае используйте <xref:System.Net.Sockets.SocketException.ErrorCode%2A> свойство для получения определенного кода ошибки и ссылки на подробное описание ошибки документации по кодам ошибок API Windows Sockets версии 2 в библиотеке MSDN.  
  
   
  
## Examples  
 В следующем примере кода `myWriteCallback` передается <xref:System.Net.Sockets.NetworkStream.BeginWrite%2A> как метод обратного вызова. <xref:System.Net.Sockets.NetworkStream.EndWrite%2A> реализуется в `myWriteCallback` для завершения вызова асинхронной записи, запущенную <xref:System.Net.Sockets.NetworkStream.BeginWrite%2A>.  
  
 [!code-cpp[NetworkStream_Async_SendAndReceive#4](~/samples/snippets/cpp/VS_Snippets_Remoting/NetworkStream_Async_SendAndReceive/CPP/source.cpp#4)]
 [!code-csharp[NetworkStream_Async_SendAndReceive#4](~/samples/snippets/csharp/VS_Snippets_Remoting/NetworkStream_Async_SendAndReceive/CS/source.cs#4)]
 [!code-vb[NetworkStream_Async_SendAndReceive#4](~/samples/snippets/visualbasic/VS_Snippets_Remoting/NetworkStream_Async_SendAndReceive/VB/source.vb#4)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">Параметр <paramref name="asyncResult" /> имеет значение <see langword="null" />.</exception>
        <exception cref="T:System.IO.IOException">Основной объект <see cref="T:System.Net.Sockets.Socket" /> закрыт.  
  
 - или -  
  
 Произошла ошибка в процессе записи в сеть.  
  
 - или -  
  
 Произошла ошибка при обращении к сокету.</exception>
        <exception cref="T:System.ObjectDisposedException">Объект <see cref="T:System.Net.Sockets.NetworkStream" /> закрыт.</exception>
        <altmember cref="M:System.Net.Sockets.NetworkStream.BeginWrite(System.Byte[],System.Int32,System.Int32,System.AsyncCallback,System.Object)" />
      </Docs>
    </Member>
    <Member MemberName="Finalize">
      <MemberSignature Language="C#" Value="~NetworkStream ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance void Finalize() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Sockets.NetworkStream.Finalize" />
      <MemberSignature Language="VB.NET" Value="Finalize ()" />
      <MemberSignature Language="C++ CLI" Value="!NetworkStream ()" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Sockets</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Освобождает все ресурсы, занятые модулем <see cref="T:System.Net.Sockets.NetworkStream" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Этот метод переопределяет метод <xref:System.Object.Finalize%2A?displayProperty=nameWithType>. Код приложения не должен вызывать этот метод; Объект <xref:System.Object.Finalize%2A> метод автоматически вызывается во время сборки мусора, если завершение работы сборщика мусора была отключена с помощью вызова <xref:System.GC.SuppressFinalize%2A?displayProperty=nameWithType> метод.  
  
 Дополнительные сведения об использовании метода Finalize см. в разделе [методы Finalize и деструкторы](http://msdn.microsoft.com/library/fd376774-1643-499b-869e-9546a3aeea70), [очистки неуправляемых ресурсов](~/docs/standard/garbage-collection/unmanaged.md), и [переопределение метода Finalize](http://msdn.microsoft.com/library/8026cb68-fe93-43fc-96c1-c09ad7d64cd3) .  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Flush">
      <MemberSignature Language="C#" Value="public override void Flush ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance void Flush() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Sockets.NetworkStream.Flush" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Sub Flush ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override void Flush();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Sockets</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Удаляет данные из потока. Этот метод зарезервирован для использования в будущем.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Net.Sockets.NetworkStream.Flush%2A> Реализует метод <xref:System.IO.Stream.Flush%2A?displayProperty=nameWithType> метод, однако, поскольку <xref:System.Net.Sockets.NetworkStream> является не помещаются в буфер, он не оказывает воздействия на потоки в сети. Вызов <xref:System.Net.Sockets.NetworkStream.Flush%2A> метод не вызывает исключение.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="FlushAsync">
      <MemberSignature Language="C#" Value="public override System.Threading.Tasks.Task FlushAsync (System.Threading.CancellationToken cancellationToken);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance class System.Threading.Tasks.Task FlushAsync(valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Sockets.NetworkStream.FlushAsync(System.Threading.CancellationToken)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override System::Threading::Tasks::Task ^ FlushAsync(System::Threading::CancellationToken cancellationToken);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Sockets</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="cancellationToken">Токен отмены, используемый для распространения уведомления о том, что эта операция должна быть отменена.</param>
        <summary>Удаляет данные из потока в качестве асинхронной операции.</summary>
        <returns>Возвращает <see cref="T:System.Threading.Tasks.Task" />.  
  
 Объект задачи, представляющий асинхронную операцию.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Эта операция не будет блокирована. Возвращенный <xref:System.Threading.Tasks.Task> объекта будет выполнена после очистки данных из потока для <xref:System.Net.Sockets.NetworkStream> экземпляра.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Length">
      <MemberSignature Language="C#" Value="public override long Length { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int64 Length" />
      <MemberSignature Language="DocId" Value="P:System.Net.Sockets.NetworkStream.Length" />
      <MemberSignature Language="VB.NET" Value="Public Overrides ReadOnly Property Length As Long" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property long Length { long get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Sockets</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int64</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Получает длину данных, доступных в потоке. Это свойство в настоящее время не поддерживается, и обращение к нему всегда создает исключение <see cref="T:System.NotSupportedException" />.</summary>
        <value>Длина данных, доступных в потоке.</value>
        <remarks>To be added.</remarks>
        <exception cref="T:System.NotSupportedException">При любом использовании этого свойства.</exception>
      </Docs>
    </Member>
    <Member MemberName="Position">
      <MemberSignature Language="C#" Value="public override long Position { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int64 Position" />
      <MemberSignature Language="DocId" Value="P:System.Net.Sockets.NetworkStream.Position" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Property Position As Long" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property long Position { long get(); void set(long value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Sockets</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int64</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Возвращает или задает текущую позицию в потоке. Это свойство в настоящее время не поддерживается, и обращение к нему всегда создает исключение <see cref="T:System.NotSupportedException" />.</summary>
        <value>Текущая позиция в потоке.</value>
        <remarks>To be added.</remarks>
        <exception cref="T:System.NotSupportedException">При любом использовании этого свойства.</exception>
      </Docs>
    </Member>
    <Member MemberName="Read">
      <MemberSignature Language="C#" Value="public override int Read (byte[] buffer, int offset, int size);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance int32 Read([out] unsigned int8[] buffer, int32 offset, int32 size) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Sockets.NetworkStream.Read(System.Byte[],System.Int32,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function Read (buffer As Byte(), offset As Integer, size As Integer) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override int Read(cli::array &lt;System::Byte&gt; ^ buffer, int offset, int size);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Sockets</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="buffer" Type="System.Byte[]" />
        <Parameter Name="offset" Type="System.Int32" />
        <Parameter Name="size" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="buffer">Массив типа <see cref="T:System.Byte" />, который является местоположением в памяти для хранения данных, прочитанных из <see cref="T:System.Net.Sockets.NetworkStream" />.</param>
        <param name="offset">Местоположение в объекте <c>buffer</c>, начиная с которого сохраняются данные.</param>
        <param name="size">Число байтов, читаемых из объекта <see cref="T:System.Net.Sockets.NetworkStream" />.</param>
        <summary>Читает данные из объекта <see cref="T:System.Net.Sockets.NetworkStream" />.</summary>
        <returns>Количество считанных байтов из <see cref="T:System.Net.Sockets.NetworkStream" />, или 0, если сокет закрыт.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Этот метод считывает данные в `buffer` параметра и возвращает количество успешно прочитанных байтов. Если закрыть сокет, <xref:System.Net.Sockets.NetworkStream.Read%2A> метод возвращает значение 0. <xref:System.Net.Sockets.NetworkStream.Read%2A> Операция считывает столько доступных данных, до числа байтов, указанное в `size` параметра. Если удаленный узел отключает соединение и получил все доступные данные <xref:System.Net.Sockets.NetworkStream.Read%2A> метод сразу же завершает работу и возвращает 0 байт.  
  
> [!NOTE]
>  Проверьте <xref:System.Net.Sockets.NetworkStream> доступен для чтения, вызвав <xref:System.Net.Sockets.NetworkStream.CanRead%2A> свойство. При попытке чтения из <xref:System.Net.Sockets.NetworkStream> недоступна для чтения, вы получите <xref:System.IO.IOException>.  
  
> [!NOTE]
>  При получении <xref:System.IO.IOException>, проверьте <xref:System.Exception.InnerException%2A> свойства, чтобы определить, если оно было вызвано <xref:System.Net.Sockets.SocketException>. В этом случае используйте <xref:System.Net.Sockets.SocketException.ErrorCode%2A> свойство для получения определенного кода ошибки и ссылки на подробное описание ошибки документации по кодам ошибок API Windows Sockets версии 2 в библиотеке MSDN.  
  
   
  
## Examples  
 Следующий пример кода использует <xref:System.Net.Sockets.NetworkStream.DataAvailable%2A> для определения доступных для чтения данных. При наличии данных, она считывает данные из <xref:System.Net.Sockets.NetworkStream>.  
  
 [!code-cpp[NetworkStream_Synch_SendAndReceive#4](~/samples/snippets/cpp/VS_Snippets_Remoting/NetworkStream_Synch_SendAndReceive/CPP/source.cpp#4)]
 [!code-csharp[NetworkStream_Synch_SendAndReceive#4](~/samples/snippets/csharp/VS_Snippets_Remoting/NetworkStream_Synch_SendAndReceive/CS/source.cs#4)]
 [!code-vb[NetworkStream_Synch_SendAndReceive#4](~/samples/snippets/visualbasic/VS_Snippets_Remoting/NetworkStream_Synch_SendAndReceive/VB/source.vb#4)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">Параметр <paramref name="buffer" /> имеет значение <see langword="null" />.</exception>
        <exception cref="T:System.ArgumentOutOfRangeException">Значение параметра <paramref name="offset" /> меньше 0.  
  
 - или -  
  
 Значение параметра <paramref name="offset" />  больше длины значения, указанного в параметре <paramref name="buffer" />.  
  
 - или -  
  
 Значение параметра <paramref name="size" /> меньше 0.  
  
 - или -  
  
 Значение параметра <paramref name="size" /> больше разности значений длины в параметре <paramref name="buffer" /> и значения параметра <paramref name="offset" />.  
  
 - или -  
  
 Произошла ошибка при обращении к сокету.</exception>
        <exception cref="T:System.IO.IOException">Основной объект <see cref="T:System.Net.Sockets.Socket" /> закрыт.</exception>
        <exception cref="T:System.ObjectDisposedException">Объект <see cref="T:System.Net.Sockets.NetworkStream" /> закрыт.  
  
 - или -  
  
 Произошел отказ в процессе чтения из сети.</exception>
        <altmember cref="M:System.Net.Sockets.Socket.Receive(System.Byte[],System.Int32,System.Net.Sockets.SocketFlags)" />
        <altmember cref="P:System.Net.Sockets.NetworkStream.DataAvailable" />
        <altmember cref="P:System.Net.Sockets.NetworkStream.CanRead" />
      </Docs>
    </Member>
    <Member MemberName="Readable">
      <MemberSignature Language="C#" Value="protected bool Readable { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool Readable" />
      <MemberSignature Language="DocId" Value="P:System.Net.Sockets.NetworkStream.Readable" />
      <MemberSignature Language="VB.NET" Value="Protected Property Readable As Boolean" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; property bool Readable { bool get(); void set(bool value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.Sockets</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Получает или устанавливает значение, указывающее, может ли выполняться чтение из объекта <see cref="T:System.Net.Sockets.NetworkStream" />.</summary>
        <value>
          Значение <see langword="true" />, указывающее на то, что может выполняться чтение из объекта <see cref="T:System.Net.Sockets.NetworkStream" />; в противном случае — значение <see langword="false" />. Значение по умолчанию — <see langword="true" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Должен быть производным от <xref:System.Net.Sockets.NetworkStream> класс использовать <xref:System.Net.Sockets.NetworkStream.Readable%2A> свойства. Если <xref:System.Net.Sockets.NetworkStream.Readable%2A> — `true`, <xref:System.Net.Sockets.NetworkStream> разрешает вызовы <xref:System.Net.Sockets.NetworkStream.Read%2A> метод. Можно также определить ли <xref:System.Net.Sockets.NetworkStream> доступен для чтения, путем проверки общедоступного <xref:System.Net.Sockets.NetworkStream.CanRead%2A> свойство.  
  
 <xref:System.Net.Sockets.NetworkStream.Readable%2A> Свойство устанавливается, когда <xref:System.Net.Sockets.NetworkStream> инициализируется.  
  
   
  
## Examples  
 В следующем примере кода `CanCommunicate` проверки свойств <xref:System.Net.Sockets.NetworkStream.Readable%2A> свойства, чтобы определить, если <xref:System.Net.Sockets.NetworkStream> доступен для чтения.  
  
 [!code-cpp[NetworkStream_Protected_Members#1](~/samples/snippets/cpp/VS_Snippets_Remoting/NetworkStream_Protected_Members/CPP/source.cpp#1)]
 [!code-csharp[NetworkStream_Protected_Members#1](~/samples/snippets/csharp/VS_Snippets_Remoting/NetworkStream_Protected_Members/CS/source.cs#1)]
 [!code-vb[NetworkStream_Protected_Members#1](~/samples/snippets/visualbasic/VS_Snippets_Remoting/NetworkStream_Protected_Members/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Net.Sockets.NetworkStream.CanRead" />
        <altmember cref="P:System.Net.Sockets.NetworkStream.CanWrite" />
        <altmember cref="P:System.Net.Sockets.NetworkStream.Writeable" />
      </Docs>
    </Member>
    <Member MemberName="ReadAsync">
      <MemberSignature Language="C#" Value="public override System.Threading.Tasks.Task&lt;int&gt; ReadAsync (byte[] buffer, int offset, int size, System.Threading.CancellationToken cancellationToken);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance class System.Threading.Tasks.Task`1&lt;int32&gt; ReadAsync(unsigned int8[] buffer, int32 offset, int32 size, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Sockets.NetworkStream.ReadAsync(System.Byte[],System.Int32,System.Int32,System.Threading.CancellationToken)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override System::Threading::Tasks::Task&lt;int&gt; ^ ReadAsync(cli::array &lt;System::Byte&gt; ^ buffer, int offset, int size, System::Threading::CancellationToken cancellationToken);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Sockets</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;System.Int32&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="buffer" Type="System.Byte[]" />
        <Parameter Name="offset" Type="System.Int32" />
        <Parameter Name="size" Type="System.Int32" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="buffer">To be added.</param>
        <param name="offset">To be added.</param>
        <param name="size">To be added.</param>
        <param name="cancellationToken">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ReadTimeout">
      <MemberSignature Language="C#" Value="public override int ReadTimeout { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 ReadTimeout" />
      <MemberSignature Language="DocId" Value="P:System.Net.Sockets.NetworkStream.ReadTimeout" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Property ReadTimeout As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property int ReadTimeout { int get(); void set(int value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Sockets</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Возвращает или задает время, в течение которого операция чтения блокирует ожидание данных.</summary>
        <value>Объект <see cref="T:System.Int32" />, указывающий период времени (в миллисекундах), по истечении которого происходит сбой операции чтения. По умолчанию установлен флаг <see cref="F:System.Threading.Timeout.Infinite" />, указывающий, что время операции чтения не ограничено.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Если операция чтения не завершается в течение времени, заданного этим свойством, вызывает исключение <xref:System.IO.IOException>.  
  
> [!NOTE]
>  Это свойство влияет только синхронных операций чтения, выполненных вызов <xref:System.Net.Sockets.NetworkStream.Read%2A> метод. Это свойство не влияет на асинхронных операций чтения, выполненных вызов <xref:System.Net.Sockets.NetworkStream.BeginRead%2A> метод.  
  
   
  
## Examples  
 В следующем примере кода устанавливается тайм-аут чтения для сетевого потока, равный 10 миллисекундам.  
  
 [!code-csharp[NCLTcpClientSync#2](~/samples/snippets/csharp/VS_Snippets_Remoting/NCLTcpClientSync/CS/tcpclient.cs#2)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">Указанное значение меньше или равно нулю, и флаг <see cref="F:System.Threading.Timeout.Infinite" /> не установлен.</exception>
      </Docs>
    </Member>
    <Member MemberName="Seek">
      <MemberSignature Language="C#" Value="public override long Seek (long offset, System.IO.SeekOrigin origin);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance int64 Seek(int64 offset, valuetype System.IO.SeekOrigin origin) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Sockets.NetworkStream.Seek(System.Int64,System.IO.SeekOrigin)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function Seek (offset As Long, origin As SeekOrigin) As Long" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override long Seek(long offset, System::IO::SeekOrigin origin);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Sockets</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int64</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="offset" Type="System.Int64" />
        <Parameter Name="origin" Type="System.IO.SeekOrigin" />
      </Parameters>
      <Docs>
        <param name="offset">Этот параметр не используется.</param>
        <param name="origin">Этот параметр не используется.</param>
        <summary>Устанавливает заданное значение для текущей позиции потока. Этот метод в настоящее время не поддерживается, и он всегда создает исключение <see cref="T:System.NotSupportedException" />.</summary>
        <returns>Позиция в потоке.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.NotSupportedException">При любом использовании этого свойства.</exception>
      </Docs>
    </Member>
    <Member MemberName="SetLength">
      <MemberSignature Language="C#" Value="public override void SetLength (long value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance void SetLength(int64 value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Sockets.NetworkStream.SetLength(System.Int64)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Sub SetLength (value As Long)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override void SetLength(long value);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Sockets</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Int64" />
      </Parameters>
      <Docs>
        <param name="value">Этот параметр не используется.</param>
        <summary>Задает длину потока. Этот метод всегда создает исключение <see cref="T:System.NotSupportedException" />.</summary>
        <remarks>To be added.</remarks>
        <exception cref="T:System.NotSupportedException">При любом использовании этого свойства.</exception>
      </Docs>
    </Member>
    <Member MemberName="Socket">
      <MemberSignature Language="C#" Value="protected System.Net.Sockets.Socket Socket { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Net.Sockets.Socket Socket" />
      <MemberSignature Language="DocId" Value="P:System.Net.Sockets.NetworkStream.Socket" />
      <MemberSignature Language="VB.NET" Value="Protected ReadOnly Property Socket As Socket" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; property System::Net::Sockets::Socket ^ Socket { System::Net::Sockets::Socket ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.Sockets</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Net.Sockets.Socket</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Возвращает основной объект <see cref="T:System.Net.Sockets.Socket" />.</summary>
        <value>Объект <see cref="T:System.Net.Sockets.Socket" />, который представляет основное сетевое подключение.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Классы, производные от <xref:System.Net.Sockets.NetworkStream> это свойство можно использовать для получения базового <xref:System.Net.Sockets.Socket>. Используйте основной <xref:System.Net.Sockets.Socket> , возвращенные <xref:System.Net.Sockets.NetworkStream.Socket%2A> свойство, если требуется доступа, чем, который <xref:System.Net.Sockets.NetworkStream> предоставляет.  
  
> [!NOTE]
>  Это свойство доступно только с помощью этого класса или производного класса.  
  
   
  
## Examples  
 В следующем примере кода извлекается основной <xref:System.Net.Sockets.Socket> для проверки активного подключения.  
  
 [!code-cpp[NetworkStream_Protected_Members#1](~/samples/snippets/cpp/VS_Snippets_Remoting/NetworkStream_Protected_Members/CPP/source.cpp#1)]
 [!code-csharp[NetworkStream_Protected_Members#1](~/samples/snippets/csharp/VS_Snippets_Remoting/NetworkStream_Protected_Members/CS/source.cs#1)]
 [!code-vb[NetworkStream_Protected_Members#1](~/samples/snippets/visualbasic/VS_Snippets_Remoting/NetworkStream_Protected_Members/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Write">
      <MemberSignature Language="C#" Value="public override void Write (byte[] buffer, int offset, int size);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance void Write(unsigned int8[] buffer, int32 offset, int32 size) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Sockets.NetworkStream.Write(System.Byte[],System.Int32,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Sub Write (buffer As Byte(), offset As Integer, size As Integer)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override void Write(cli::array &lt;System::Byte&gt; ^ buffer, int offset, int size);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Sockets</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="buffer" Type="System.Byte[]" />
        <Parameter Name="offset" Type="System.Int32" />
        <Parameter Name="size" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="buffer">Массив типа <see cref="T:System.Byte" />, содержащий данные для записи в объект <see cref="T:System.Net.Sockets.NetworkStream" />.</param>
        <param name="offset">Место в объекте <c>buffer</c>, начиная с которого записываются данные.</param>
        <param name="size">Число байтов для записи в объект <see cref="T:System.Net.Sockets.NetworkStream" />.</param>
        <summary>Записывает данные в объект <see cref="T:System.Net.Sockets.NetworkStream" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Net.Sockets.NetworkStream.Write%2A> Метод начинается с указанного `offset` и отправляет `size` байт из содержимого `buffer` к сети. <xref:System.Net.Sockets.NetworkStream.Write%2A> Метод блокируется, пока не будет передано запрошенное количество байтов или <xref:System.Net.Sockets.SocketException> возникает исключение. При получении <xref:System.Net.Sockets.SocketException>, используйте <xref:System.Net.Sockets.SocketException.ErrorCode%2A?displayProperty=nameWithType> свойство для получения определенного кода ошибки и ссылки на подробное описание ошибки документации по кодам ошибок API Windows Sockets версии 2 в библиотеке MSDN.  
  
> [!NOTE]
>  Проверьте <xref:System.Net.Sockets.NetworkStream> доступен для записи, обратившись к <xref:System.Net.Sockets.NetworkStream.CanWrite%2A> свойство. При попытке записи в <xref:System.Net.Sockets.NetworkStream> недоступен для записи, вы получите <xref:System.IO.IOException>. При получении <xref:System.IO.IOException>, проверьте <xref:System.Exception.InnerException%2A> свойства, чтобы определить, если оно было вызвано <xref:System.Net.Sockets.SocketException>.  
  
   
  
## Examples  
 В следующем примере кода примера проверяет, является ли <xref:System.Net.Sockets.NetworkStream> доступен для записи. Если это так, затем <xref:System.Net.Sockets.NetworkStream.Write%2A> используется для записи небольшого сообщения.  
  
 [!code-cpp[NetworkStream_Synch_SendAndReceive#3](~/samples/snippets/cpp/VS_Snippets_Remoting/NetworkStream_Synch_SendAndReceive/CPP/source.cpp#3)]
 [!code-csharp[NetworkStream_Synch_SendAndReceive#3](~/samples/snippets/csharp/VS_Snippets_Remoting/NetworkStream_Synch_SendAndReceive/CS/source.cs#3)]
 [!code-vb[NetworkStream_Synch_SendAndReceive#3](~/samples/snippets/visualbasic/VS_Snippets_Remoting/NetworkStream_Synch_SendAndReceive/VB/source.vb#3)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">Параметр <paramref name="buffer" /> имеет значение <see langword="null" />.</exception>
        <exception cref="T:System.ArgumentOutOfRangeException">Значение параметра <paramref name="offset" /> меньше 0.  
  
 - или -  
  
 Значение параметра <paramref name="offset" />  больше длины значения, указанного в параметре <paramref name="buffer" />.  
  
 - или -  
  
 Значение параметра <paramref name="size" /> меньше 0.  
  
 - или -  
  
 Значение параметра <paramref name="size" /> больше разности значений длины в параметре <paramref name="buffer" /> и значения параметра <paramref name="offset" />.</exception>
        <exception cref="T:System.IO.IOException">Произошел сбой в процессе записи в сеть.  
  
 - или -  
  
 Произошла ошибка при обращении к сокету.</exception>
        <exception cref="T:System.ObjectDisposedException">Объект <see cref="T:System.Net.Sockets.NetworkStream" /> закрыт.  
  
 - или -  
  
 Произошел отказ в процессе чтения из сети.</exception>
        <altmember cref="P:System.Net.Sockets.NetworkStream.CanWrite" />
        <altmember cref="P:System.Net.Sockets.NetworkStream.Writeable" />
      </Docs>
    </Member>
    <Member MemberName="Writeable">
      <MemberSignature Language="C#" Value="protected bool Writeable { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool Writeable" />
      <MemberSignature Language="DocId" Value="P:System.Net.Sockets.NetworkStream.Writeable" />
      <MemberSignature Language="VB.NET" Value="Protected Property Writeable As Boolean" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; property bool Writeable { bool get(); void set(bool value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.Sockets</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Получает значение, указывающее, предусмотрена ли запись в объект <see cref="T:System.Net.Sockets.NetworkStream" />.</summary>
        <value>
          Значение <see langword="true" />, если данные могут быть записаны в поток; в противном случае — значение <see langword="false" />. Значение по умолчанию — <see langword="true" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Должен быть производным от <xref:System.Net.Sockets.NetworkStream> класс использовать <xref:System.Net.Sockets.NetworkStream.Writeable%2A> свойства. Если <xref:System.Net.Sockets.NetworkStream.Writeable%2A> — `true`, <xref:System.Net.Sockets.NetworkStream> разрешает вызовы <xref:System.Net.Sockets.NetworkStream.Write%2A> метод. Можно также определить ли <xref:System.Net.Sockets.NetworkStream> доступен для записи, путем проверки общедоступного <xref:System.Net.Sockets.NetworkStream.CanWrite%2A> свойство.  
  
 <xref:System.Net.Sockets.NetworkStream.Writeable%2A> Свойство устанавливается, когда <xref:System.Net.Sockets.NetworkStream> инициализируется.  
  
   
  
## Examples  
 В следующем примере кода `CanCommunicate` проверки свойств <xref:System.Net.Sockets.NetworkStream.Writeable%2A> свойства, чтобы определить, если <xref:System.Net.Sockets.NetworkStream> доступен для записи.  
  
 [!code-cpp[NetworkStream_Protected_Members#1](~/samples/snippets/cpp/VS_Snippets_Remoting/NetworkStream_Protected_Members/CPP/source.cpp#1)]
 [!code-csharp[NetworkStream_Protected_Members#1](~/samples/snippets/csharp/VS_Snippets_Remoting/NetworkStream_Protected_Members/CS/source.cs#1)]
 [!code-vb[NetworkStream_Protected_Members#1](~/samples/snippets/visualbasic/VS_Snippets_Remoting/NetworkStream_Protected_Members/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Net.Sockets.NetworkStream.CanWrite" />
        <altmember cref="P:System.Net.Sockets.NetworkStream.Readable" />
      </Docs>
    </Member>
    <Member MemberName="WriteAsync">
      <MemberSignature Language="C#" Value="public override System.Threading.Tasks.Task WriteAsync (byte[] buffer, int offset, int size, System.Threading.CancellationToken cancellationToken);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance class System.Threading.Tasks.Task WriteAsync(unsigned int8[] buffer, int32 offset, int32 size, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Sockets.NetworkStream.WriteAsync(System.Byte[],System.Int32,System.Int32,System.Threading.CancellationToken)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override System::Threading::Tasks::Task ^ WriteAsync(cli::array &lt;System::Byte&gt; ^ buffer, int offset, int size, System::Threading::CancellationToken cancellationToken);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Sockets</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="buffer" Type="System.Byte[]" />
        <Parameter Name="offset" Type="System.Int32" />
        <Parameter Name="size" Type="System.Int32" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="buffer">To be added.</param>
        <param name="offset">To be added.</param>
        <param name="size">To be added.</param>
        <param name="cancellationToken">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="WriteTimeout">
      <MemberSignature Language="C#" Value="public override int WriteTimeout { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 WriteTimeout" />
      <MemberSignature Language="DocId" Value="P:System.Net.Sockets.NetworkStream.WriteTimeout" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Property WriteTimeout As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property int WriteTimeout { int get(); void set(int value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Sockets</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Возвращает или задает время, в течение которого операция записи блокирует ожидание данных.</summary>
        <value>Объект <see cref="T:System.Int32" />, указывающий период времени (в миллисекундах), по истечении которого происходит сбой операции записи. По умолчанию установлен флаг <see cref="F:System.Threading.Timeout.Infinite" />, указывающий, что время операции записи не ограничено.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Если операция записи не завершается в течение времени, заданного этим свойством, операция записи вызывает <xref:System.IO.IOException>.  
  
> [!NOTE]
>  Это свойство влияет только синхронной записи операций путем вызова <xref:System.Net.Sockets.NetworkStream.Write%2A> метод. Это свойство не влияет на асинхронных операций записи при вызове <xref:System.Net.Sockets.NetworkStream.BeginWrite%2A> метода.  
  
   
  
## Examples  
 В следующем примере кода устанавливается тайм-аут записи для сетевого потока, равный 10 миллисекундам.  
  
 [!code-cpp[NCLTcpServerSync#0](~/samples/snippets/cpp/VS_Snippets_Remoting/NclTcpServerSync/cpp/tcplistener.cpp#0)]
 [!code-csharp[NCLTcpServerSync#0](~/samples/snippets/csharp/VS_Snippets_Remoting/NclTcpServerSync/CS/tcplistener.cs#0)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">Указанное значение меньше или равно нулю, и флаг <see cref="F:System.Threading.Timeout.Infinite" /> не установлен.</exception>
      </Docs>
    </Member>
  </Members>
</Type>