<Type Name="TcpListener" FullName="System.Net.Sockets.TcpListener">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="0745613c4e13b086fa4d68e1356349ed35a3b9ba" />
    <Meta Name="ms.sourcegitcommit" Value="6a0b904069161bbaec4ffd02aa7d9cf38c61e72e" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="ru-RU" />
    <Meta Name="ms.lasthandoff" Value="06/24/2018" />
    <Meta Name="ms.locfileid" Value="36550579" />
  </Metadata>
  <TypeSignature Language="C#" Value="public class TcpListener" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit TcpListener extends System.Object" />
  <TypeSignature Language="DocId" Value="T:System.Net.Sockets.TcpListener" />
  <TypeSignature Language="VB.NET" Value="Public Class TcpListener" />
  <TypeSignature Language="C++ CLI" Value="public ref class TcpListener" />
  <TypeSignature Language="F#" Value="type TcpListener = class" />
  <AssemblyInfo>
    <AssemblyName>System.Net.Sockets</AssemblyName>
    <AssemblyVersion>4.1.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.1.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>System</AssemblyName>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>
      <span data-ttu-id="59012-101">Прослушивает подключения от TCP-клиентов сети.</span>
      <span class="sxs-lookup">
        <span data-stu-id="59012-101">Listens for connections from TCP network clients.</span>
      </span>
    </summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="59012-102"><xref:System.Net.Sockets.TcpListener> Класс предоставляет простые методы, которые прослушивать и принимать входящие запросы на подключение в блокирующем синхронном режиме.</span><span class="sxs-lookup"><span data-stu-id="59012-102">The <xref:System.Net.Sockets.TcpListener> class provides simple methods that listen for and accept incoming connection requests in blocking synchronous mode.</span></span> <span data-ttu-id="59012-103">Можно использовать любой <xref:System.Net.Sockets.TcpClient> или <xref:System.Net.Sockets.Socket> соединяться с <xref:System.Net.Sockets.TcpListener>.</span><span class="sxs-lookup"><span data-stu-id="59012-103">You can use either a <xref:System.Net.Sockets.TcpClient> or a <xref:System.Net.Sockets.Socket> to connect with a <xref:System.Net.Sockets.TcpListener>.</span></span> <span data-ttu-id="59012-104">Создание <xref:System.Net.Sockets.TcpListener> с помощью <xref:System.Net.IPEndPoint>, локальный IP-адрес и номер порта или номер порта.</span><span class="sxs-lookup"><span data-stu-id="59012-104">Create a <xref:System.Net.Sockets.TcpListener> using an <xref:System.Net.IPEndPoint>, a Local IP address and port number, or just a port number.</span></span> <span data-ttu-id="59012-105">Укажите <xref:System.Net.IPAddress.Any> для локального IP-адреса и значение 0 для номера локального порта, если требуется, чтобы эти значения были присвоены основным поставщиком услуг.</span><span class="sxs-lookup"><span data-stu-id="59012-105">Specify <xref:System.Net.IPAddress.Any> for the local IP address and 0 for the local port number if you want the underlying service provider to assign those values for you.</span></span> <span data-ttu-id="59012-106">Если вы решите сделать это, можно использовать <xref:System.Net.Sockets.TcpListener.LocalEndpoint%2A> свойство для идентификации связанных сведений после подключения сокета.</span><span class="sxs-lookup"><span data-stu-id="59012-106">If you choose to do this, you can use the <xref:System.Net.Sockets.TcpListener.LocalEndpoint%2A> property to identify the assigned information, after the socket has connected.</span></span>  
  
 <span data-ttu-id="59012-107">Используйте <xref:System.Net.Sockets.TcpListener.Start%2A> метод, чтобы начать прослушивание входящих запросов на подключение.</span><span class="sxs-lookup"><span data-stu-id="59012-107">Use the <xref:System.Net.Sockets.TcpListener.Start%2A> method to begin listening for incoming connection requests.</span></span> <span data-ttu-id="59012-108"><xref:System.Net.Sockets.TcpListener.Start%2A> очередь входящих подключений до вызова функции <xref:System.Net.Sockets.TcpListener.Stop%2A> метода или он поставил в очередь <xref:System.Net.Sockets.SocketOptionName.MaxConnections>.</span><span class="sxs-lookup"><span data-stu-id="59012-108"><xref:System.Net.Sockets.TcpListener.Start%2A> will queue incoming connections until you either call the <xref:System.Net.Sockets.TcpListener.Stop%2A> method or it has queued <xref:System.Net.Sockets.SocketOptionName.MaxConnections>.</span></span> <span data-ttu-id="59012-109">Используйте либо <xref:System.Net.Sockets.TcpListener.AcceptSocket%2A> или <xref:System.Net.Sockets.TcpListener.AcceptTcpClient%2A> для приема подключения из входной очереди подключений.</span><span class="sxs-lookup"><span data-stu-id="59012-109">Use either <xref:System.Net.Sockets.TcpListener.AcceptSocket%2A> or <xref:System.Net.Sockets.TcpListener.AcceptTcpClient%2A> to pull a connection from the incoming connection request queue.</span></span> <span data-ttu-id="59012-110">Эти два метода будет блокировать.</span><span class="sxs-lookup"><span data-stu-id="59012-110">These two methods will block.</span></span> <span data-ttu-id="59012-111">Если вы хотите избежать блокировки, можно использовать <xref:System.Net.Sockets.TcpListener.Pending%2A> метод, чтобы определить, если запросы на подключение в очереди.</span><span class="sxs-lookup"><span data-stu-id="59012-111">If you want to avoid blocking, you can use the <xref:System.Net.Sockets.TcpListener.Pending%2A> method first to determine if connection requests are available in the queue.</span></span>  
  
 <span data-ttu-id="59012-112">Вызовите <xref:System.Net.Sockets.TcpListener.Stop%2A> метод закрытия <xref:System.Net.Sockets.TcpListener>.</span><span class="sxs-lookup"><span data-stu-id="59012-112">Call the <xref:System.Net.Sockets.TcpListener.Stop%2A> method to close the <xref:System.Net.Sockets.TcpListener>.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="59012-113"><xref:System.Net.Sockets.TcpListener.Stop%2A> Метод не закрывает все допустимые подключения.</span><span class="sxs-lookup"><span data-stu-id="59012-113">The <xref:System.Net.Sockets.TcpListener.Stop%2A> method does not close any accepted connections.</span></span> <span data-ttu-id="59012-114">Вы несете ответственность за закрытие их отдельно.</span><span class="sxs-lookup"><span data-stu-id="59012-114">You are responsible for closing these separately.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="59012-115">В следующем примере кода создается <xref:System.Net.Sockets.TcpListener>.</span><span class="sxs-lookup"><span data-stu-id="59012-115">The following code example creates a <xref:System.Net.Sockets.TcpListener>.</span></span>  
  
 [!code-cpp[System.Net.Sockets.TcpListener#1](~/samples/snippets/cpp/VS_Snippets_Remoting/System.Net.Sockets.TcpListener/CPP/tcpserver.cpp#1)]
 [!code-csharp[System.Net.Sockets.TcpListener#1](~/samples/snippets/csharp/VS_Snippets_Remoting/System.Net.Sockets.TcpListener/CS/tcpserver.cs#1)]
 [!code-vb[System.Net.Sockets.TcpListener#1](~/samples/snippets/visualbasic/VS_Snippets_Remoting/System.Net.Sockets.TcpListener/VB/tcpserver.vb#1)]  
  
 <span data-ttu-id="59012-116">В разделе <xref:System.Net.Sockets.TcpClient> пример для клиента.</span><span class="sxs-lookup"><span data-stu-id="59012-116">See <xref:System.Net.Sockets.TcpClient> for a client example.</span></span>  
  
 ]]></format>
    </remarks>
    <permission cref="T:System.Net.SocketPermission">
      <span data-ttu-id="59012-117">Чтобы установить исходящее соединение или принять входящий запрос.</span>
      <span class="sxs-lookup">
        <span data-stu-id="59012-117">to establish an outgoing connection or accept an incoming request.</span>
      </span>
    </permission>
    <altmember cref="T:System.Net.Sockets.TcpClient" />
  </Docs>
  <Members>
    <MemberGroup MemberName=".ctor">
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="59012-118">Инициализирует новый экземпляр класса <see cref="T:System.Net.Sockets.TcpListener" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="59012-118">Initializes a new instance of the <see cref="T:System.Net.Sockets.TcpListener" /> class.</span>
          </span>
        </summary>
      </Docs>
    </MemberGroup>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public TcpListener (int port);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(int32 port) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Sockets.TcpListener.#ctor(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (port As Integer)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; TcpListener(int port);" />
      <MemberSignature Language="F#" Value="new System.Net.Sockets.TcpListener : int -&gt; System.Net.Sockets.TcpListener" Usage="new System.Net.Sockets.TcpListener port" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.Sockets</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Obsolete("Use TcpListener (IPAddress address, int port) instead")</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters>
        <Parameter Name="port" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="port">
          <span data-ttu-id="59012-119">Порт, на котором производится ожидание входящих попыток подключений.</span>
          <span class="sxs-lookup">
            <span data-stu-id="59012-119">The port on which to listen for incoming connection attempts.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="59012-120">Инициализирует новый экземпляр класса <see cref="T:System.Net.Sockets.TcpListener" />, который ожидает передачу данных для указанного порта.</span>
          <span class="sxs-lookup">
            <span data-stu-id="59012-120">Initializes a new instance of the <see cref="T:System.Net.Sockets.TcpListener" /> class that listens on the specified port.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="59012-121">Этот конструктор является устаревшим.</span><span class="sxs-lookup"><span data-stu-id="59012-121">This constructor is obsolete.</span></span> <span data-ttu-id="59012-122">Используйте <xref:System.Net.Sockets.TcpListener.%23ctor%28System.Net.IPAddress%2CSystem.Int32%29?displayProperty=nameWithType> или <xref:System.Net.Sockets.TcpListener.%23ctor%28System.Net.IPEndPoint%29?displayProperty=nameWithType> конструкторы.</span><span class="sxs-lookup"><span data-stu-id="59012-122">Use the <xref:System.Net.Sockets.TcpListener.%23ctor%28System.Net.IPAddress%2CSystem.Int32%29?displayProperty=nameWithType> or <xref:System.Net.Sockets.TcpListener.%23ctor%28System.Net.IPEndPoint%29?displayProperty=nameWithType> constructors.</span></span>  
  
 <span data-ttu-id="59012-123">Этот конструктор позволяет указать номер порта для прослушивания входящих попыток подключения.</span><span class="sxs-lookup"><span data-stu-id="59012-123">This constructor allows you to specify the port number on which to listen for incoming connection attempts.</span></span> <span data-ttu-id="59012-124">С помощью этого конструктора основной поставщик услуг присваивает наиболее подходящий сетевой адрес.</span><span class="sxs-lookup"><span data-stu-id="59012-124">With this constructor, the underlying service provider assigns the most appropriate network address.</span></span> <span data-ttu-id="59012-125">Если неважно, какой локальный порт используется, можно указать 0 для номера порта.</span><span class="sxs-lookup"><span data-stu-id="59012-125">If you do not care which local port is used, you can specify 0 for the port number.</span></span> <span data-ttu-id="59012-126">В этом случае поставщик услуг присвоит доступный эфемерных номер порта.</span><span class="sxs-lookup"><span data-stu-id="59012-126">In this case, the service provider will assign an available ephemeral port number.</span></span> <span data-ttu-id="59012-127">При использовании этого подхода можно выяснить, какой локальный сетевой адрес и номер порта присвоены с помощью <xref:System.Net.Sockets.TcpListener.LocalEndpoint%2A> свойство.</span><span class="sxs-lookup"><span data-stu-id="59012-127">If you use this approach, you can discover what local network address and port number has been assigned by using the <xref:System.Net.Sockets.TcpListener.LocalEndpoint%2A> property.</span></span>  
  
 <span data-ttu-id="59012-128">Вызовите <xref:System.Net.Sockets.TcpListener.Start%2A> метод, чтобы начать прослушивание входящих попыток подключения.</span><span class="sxs-lookup"><span data-stu-id="59012-128">Call the <xref:System.Net.Sockets.TcpListener.Start%2A> method to begin listening for incoming connection attempts.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="59012-129">В следующем примере кода создается <xref:System.Net.Sockets.TcpListener> с помощью нескольких локальных портов.</span><span class="sxs-lookup"><span data-stu-id="59012-129">The following code example creates a <xref:System.Net.Sockets.TcpListener> using a local port number.</span></span>  
  
 [!code-cpp[Classic TcpListener.PublicMethodsAndPropertiesExample#3](~/samples/snippets/cpp/VS_Snippets_Remoting/Classic TcpListener.PublicMethodsAndPropertiesExample/CPP/source.cpp#3)]
 [!code-csharp[Classic TcpListener.PublicMethodsAndPropertiesExample#3](~/samples/snippets/csharp/VS_Snippets_Remoting/Classic TcpListener.PublicMethodsAndPropertiesExample/CS/source.cs#3)]
 [!code-vb[Classic TcpListener.PublicMethodsAndPropertiesExample#3](~/samples/snippets/visualbasic/VS_Snippets_Remoting/Classic TcpListener.PublicMethodsAndPropertiesExample/VB/source.vb#3)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <span data-ttu-id="59012-130">Значение параметра <paramref name="port" /> не находится в диапазоне между значениями <see cref="F:System.Net.IPEndPoint.MinPort" /> и <see cref="F:System.Net.IPEndPoint.MaxPort" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="59012-130">
              <paramref name="port" /> is not between <see cref="F:System.Net.IPEndPoint.MinPort" /> and <see cref="F:System.Net.IPEndPoint.MaxPort" />.</span>
          </span>
        </exception>
        <altmember cref="M:System.Net.Sockets.TcpListener.Start" />
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public TcpListener (System.Net.IPEndPoint localEP);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.Net.IPEndPoint localEP) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Sockets.TcpListener.#ctor(System.Net.IPEndPoint)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (localEP As IPEndPoint)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; TcpListener(System::Net::IPEndPoint ^ localEP);" />
      <MemberSignature Language="F#" Value="new System.Net.Sockets.TcpListener : System.Net.IPEndPoint -&gt; System.Net.Sockets.TcpListener" Usage="new System.Net.Sockets.TcpListener localEP" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Sockets</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="localEP" Type="System.Net.IPEndPoint" />
      </Parameters>
      <Docs>
        <param name="localEP">
          <span data-ttu-id="59012-131">Объект <see cref="T:System.Net.IPEndPoint" />, представляющий локальную конечную точка, назначенную для связывания со слушателем <see cref="T:System.Net.Sockets.Socket" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="59012-131">An <see cref="T:System.Net.IPEndPoint" /> that represents the local endpoint to which to bind the listener <see cref="T:System.Net.Sockets.Socket" />.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="59012-132">Инициализирует новый экземпляр класса <see cref="T:System.Net.Sockets.TcpListener" /> с заданной локальной конечной точкой.</span>
          <span class="sxs-lookup">
            <span data-stu-id="59012-132">Initializes a new instance of the <see cref="T:System.Net.Sockets.TcpListener" /> class with the specified local endpoint.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="59012-133">Этот конструктор позволяет указать локальный IP-адрес и номер порта, на котором будет прослушивать входящие подключения попыток.</span><span class="sxs-lookup"><span data-stu-id="59012-133">This constructor allows you to specify the local IP address and port number on which to listen for incoming connection attempts.</span></span> <span data-ttu-id="59012-134">Прежде чем использовать этот конструктор, необходимо создать <xref:System.Net.IPEndPoint> с помощью нужный локальный IP-адрес и порт номер.</span><span class="sxs-lookup"><span data-stu-id="59012-134">Before using this constructor, you must create an <xref:System.Net.IPEndPoint> using the desired local IP address and port number.</span></span> <span data-ttu-id="59012-135">Передать этот <xref:System.Net.IPEndPoint> конструктору как `localEP` параметр.</span><span class="sxs-lookup"><span data-stu-id="59012-135">Pass this <xref:System.Net.IPEndPoint> to the constructor as the `localEP` parameter.</span></span>  
  
 <span data-ttu-id="59012-136">Если неважно, какой локальный адрес будет присвоен, можно создать <xref:System.Net.IPEndPoint> с помощью <xref:System.Net.IPAddress.Any?displayProperty=nameWithType> как параметр address и базовой службы Поставщик присвоит наиболее подходящий сетевой адрес.</span><span class="sxs-lookup"><span data-stu-id="59012-136">If you do not care which local address is assigned, you can create an <xref:System.Net.IPEndPoint> using <xref:System.Net.IPAddress.Any?displayProperty=nameWithType> as the address parameter, and the underlying service provider will assign the most appropriate network address.</span></span> <span data-ttu-id="59012-137">Это поможет упростить приложение, если имеется несколько сетевых интерфейсов.</span><span class="sxs-lookup"><span data-stu-id="59012-137">This might help simplify your application if you have multiple network interfaces.</span></span> <span data-ttu-id="59012-138">Если неважно, какой локальный порт используется, можно создать <xref:System.Net.IPEndPoint> используется значение 0 для номера порта.</span><span class="sxs-lookup"><span data-stu-id="59012-138">If you do not care which local port is used, you can create an <xref:System.Net.IPEndPoint> using 0 for the port number.</span></span> <span data-ttu-id="59012-139">В этом случае поставщик услуг присвоит доступный эфемерных номер порта.</span><span class="sxs-lookup"><span data-stu-id="59012-139">In this case, the service provider will assign an available ephemeral port number.</span></span> <span data-ttu-id="59012-140">При использовании этого подхода можно выяснить, какой локальный сетевой адрес и номер порта присвоены с помощью <xref:System.Net.Sockets.TcpListener.LocalEndpoint%2A> свойство.</span><span class="sxs-lookup"><span data-stu-id="59012-140">If you use this approach, you can discover what local network address and port number has been assigned by using the <xref:System.Net.Sockets.TcpListener.LocalEndpoint%2A> property.</span></span>  
  
 <span data-ttu-id="59012-141">Вызовите <xref:System.Net.Sockets.TcpListener.Start%2A> метод, чтобы начать прослушивание входящих попыток подключения.</span><span class="sxs-lookup"><span data-stu-id="59012-141">Call the <xref:System.Net.Sockets.TcpListener.Start%2A> method to begin listening for incoming connection attempts.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="59012-142">Данный член генерирует сведения трассировки, если в приложении включена трассировка сети.</span><span class="sxs-lookup"><span data-stu-id="59012-142">This member outputs trace information when you enable network tracing in your application.</span></span> <span data-ttu-id="59012-143">Дополнительные сведения см. в разделе [Трассировка сети в .NET Framework](~/docs/framework/network-programming/network-tracing.md).</span><span class="sxs-lookup"><span data-stu-id="59012-143">For more information, see [Network Tracing in the .NET Framework](~/docs/framework/network-programming/network-tracing.md).</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="59012-144">В следующем примере кода создается экземпляр <xref:System.Net.Sockets.TcpListener> класса с помощью локальной конечной точки.</span><span class="sxs-lookup"><span data-stu-id="59012-144">The following code example creates an instance of the <xref:System.Net.Sockets.TcpListener> class using the local endpoint.</span></span>  
  
 [!code-cpp[Classic TcpListener.PublicMethodsAndPropertiesExample#1](~/samples/snippets/cpp/VS_Snippets_Remoting/Classic TcpListener.PublicMethodsAndPropertiesExample/CPP/source.cpp#1)]
 [!code-csharp[Classic TcpListener.PublicMethodsAndPropertiesExample#1](~/samples/snippets/csharp/VS_Snippets_Remoting/Classic TcpListener.PublicMethodsAndPropertiesExample/CS/source.cs#1)]
 [!code-vb[Classic TcpListener.PublicMethodsAndPropertiesExample#1](~/samples/snippets/visualbasic/VS_Snippets_Remoting/Classic TcpListener.PublicMethodsAndPropertiesExample/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="59012-145">Свойство <paramref name="localEP" /> имеет значение <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="59012-145">
              <paramref name="localEP" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <altmember cref="T:System.Net.IPEndPoint" />
        <altmember cref="M:System.Net.Sockets.TcpListener.Start" />
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public TcpListener (System.Net.IPAddress localaddr, int port);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.Net.IPAddress localaddr, int32 port) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Sockets.TcpListener.#ctor(System.Net.IPAddress,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (localaddr As IPAddress, port As Integer)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; TcpListener(System::Net::IPAddress ^ localaddr, int port);" />
      <MemberSignature Language="F#" Value="new System.Net.Sockets.TcpListener : System.Net.IPAddress * int -&gt; System.Net.Sockets.TcpListener" Usage="new System.Net.Sockets.TcpListener (localaddr, port)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Sockets</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="localaddr" Type="System.Net.IPAddress" />
        <Parameter Name="port" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="localaddr">
          <span data-ttu-id="59012-146">Объект <see cref="T:System.Net.IPAddress" />, представляющий локальный IP-адрес.</span>
          <span class="sxs-lookup">
            <span data-stu-id="59012-146">An <see cref="T:System.Net.IPAddress" /> that represents the local IP address.</span>
          </span>
        </param>
        <param name="port">
          <span data-ttu-id="59012-147">Порт, на котором производится ожидание входящих попыток подключений.</span>
          <span class="sxs-lookup">
            <span data-stu-id="59012-147">The port on which to listen for incoming connection attempts.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="59012-148">Инициализирует новый экземпляр класса <see cref="T:System.Net.Sockets.TcpListener" />, который выполняет ожидание входящих попыток подключения для заданных локального IP-адреса и номера локального порта.</span>
          <span class="sxs-lookup">
            <span data-stu-id="59012-148">Initializes a new instance of the <see cref="T:System.Net.Sockets.TcpListener" /> class that listens for incoming connection attempts on the specified local IP address and port number.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="59012-149">Этот конструктор позволяет указать локальный IP-адрес и номер порта, на котором будет прослушивать входящие подключения попыток.</span><span class="sxs-lookup"><span data-stu-id="59012-149">This constructor allows you to specify the local IP address and port number on which to listen for incoming connection attempts.</span></span> <span data-ttu-id="59012-150">Перед вызовом конструктора, необходимо сначала создать <xref:System.Net.IPAddress> с помощью необходимый локальный адрес.</span><span class="sxs-lookup"><span data-stu-id="59012-150">Before calling this constructor you must first create an <xref:System.Net.IPAddress> using the desired local address.</span></span> <span data-ttu-id="59012-151">Передать этот <xref:System.Net.IPAddress> конструктору как `localaddr` параметр.</span><span class="sxs-lookup"><span data-stu-id="59012-151">Pass this <xref:System.Net.IPAddress> to the constructor as the `localaddr` parameter.</span></span> <span data-ttu-id="59012-152">Если неважно, какой локальный адрес будет присвоен, укажите <xref:System.Net.IPAddress.Any?displayProperty=nameWithType> для `localaddr` параметр и основной поставщик услуг присвоит наиболее подходящий сетевой адрес.</span><span class="sxs-lookup"><span data-stu-id="59012-152">If you do not care which local address is assigned, specify <xref:System.Net.IPAddress.Any?displayProperty=nameWithType> for the `localaddr` parameter, and the underlying service provider will assign the most appropriate network address.</span></span> <span data-ttu-id="59012-153">Это поможет упростить приложение, если имеется несколько сетевых интерфейсов.</span><span class="sxs-lookup"><span data-stu-id="59012-153">This might help simplify your application if you have multiple network interfaces.</span></span> <span data-ttu-id="59012-154">Если неважно, какой локальный порт используется, можно указать 0 для номера порта.</span><span class="sxs-lookup"><span data-stu-id="59012-154">If you do not care which local port is used, you can specify 0 for the port number.</span></span> <span data-ttu-id="59012-155">В этом случае поставщик услуг присвоит доступный номер порта от 1024 до 5000.</span><span class="sxs-lookup"><span data-stu-id="59012-155">In this case, the service provider will assign an available port number between 1024 and 5000.</span></span> <span data-ttu-id="59012-156">При использовании этого подхода можно выяснить, какой локальный сетевой адрес и номер порта присвоены с помощью <xref:System.Net.Sockets.TcpListener.LocalEndpoint%2A> свойство.</span><span class="sxs-lookup"><span data-stu-id="59012-156">If you use this approach, you can discover what local network address and port number has been assigned by using the <xref:System.Net.Sockets.TcpListener.LocalEndpoint%2A> property.</span></span>  
  
 <span data-ttu-id="59012-157">Вызовите <xref:System.Net.Sockets.TcpListener.Start%2A> метод, чтобы начать прослушивание входящих попыток подключения.</span><span class="sxs-lookup"><span data-stu-id="59012-157">Call the <xref:System.Net.Sockets.TcpListener.Start%2A> method to begin listening for incoming connection attempts.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="59012-158">Данный член генерирует сведения трассировки, если в приложении включена трассировка сети.</span><span class="sxs-lookup"><span data-stu-id="59012-158">This member outputs trace information when you enable network tracing in your application.</span></span> <span data-ttu-id="59012-159">Дополнительные сведения см. в разделе [Трассировка сети в .NET Framework](~/docs/framework/network-programming/network-tracing.md).</span><span class="sxs-lookup"><span data-stu-id="59012-159">For more information, see [Network Tracing in the .NET Framework](~/docs/framework/network-programming/network-tracing.md).</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="59012-160">В следующем примере кода создается экземпляр <xref:System.Net.Sockets.TcpListener> класса, используя локальный IP-адрес и порт номер.</span><span class="sxs-lookup"><span data-stu-id="59012-160">The following code example creates an instance of the <xref:System.Net.Sockets.TcpListener> class using a local IP address and port number.</span></span>  
  
 [!code-cpp[Classic TcpListener.PublicMethodsAndPropertiesExample#2](~/samples/snippets/cpp/VS_Snippets_Remoting/Classic TcpListener.PublicMethodsAndPropertiesExample/CPP/source.cpp#2)]
 [!code-csharp[Classic TcpListener.PublicMethodsAndPropertiesExample#2](~/samples/snippets/csharp/VS_Snippets_Remoting/Classic TcpListener.PublicMethodsAndPropertiesExample/CS/source.cs#2)]
 [!code-vb[Classic TcpListener.PublicMethodsAndPropertiesExample#2](~/samples/snippets/visualbasic/VS_Snippets_Remoting/Classic TcpListener.PublicMethodsAndPropertiesExample/VB/source.vb#2)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="59012-161">Свойство <paramref name="localaddr" /> имеет значение <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="59012-161">
              <paramref name="localaddr" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <span data-ttu-id="59012-162">Значение параметра <paramref name="port" /> не находится в диапазоне между значениями <see cref="F:System.Net.IPEndPoint.MinPort" /> и <see cref="F:System.Net.IPEndPoint.MaxPort" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="59012-162">
              <paramref name="port" /> is not between <see cref="F:System.Net.IPEndPoint.MinPort" /> and <see cref="F:System.Net.IPEndPoint.MaxPort" />.</span>
          </span>
        </exception>
        <altmember cref="T:System.Net.IPAddress" />
        <altmember cref="M:System.Net.Sockets.TcpListener.Start" />
      </Docs>
    </Member>
    <Member MemberName="AcceptSocket">
      <MemberSignature Language="C#" Value="public System.Net.Sockets.Socket AcceptSocket ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Net.Sockets.Socket AcceptSocket() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Sockets.TcpListener.AcceptSocket" />
      <MemberSignature Language="VB.NET" Value="Public Function AcceptSocket () As Socket" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Net::Sockets::Socket ^ AcceptSocket();" />
      <MemberSignature Language="F#" Value="member this.AcceptSocket : unit -&gt; System.Net.Sockets.Socket" Usage="tcpListener.AcceptSocket " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.Sockets</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Net.Sockets.Socket</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="59012-163">Принимает ожидающий запрос на подключение.</span>
          <span class="sxs-lookup">
            <span data-stu-id="59012-163">Accepts a pending connection request.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="59012-164">Объект <see cref="T:System.Net.Sockets.Socket" />, используемый для приема и передачи данных.</span>
          <span class="sxs-lookup">
            <span data-stu-id="59012-164">A <see cref="T:System.Net.Sockets.Socket" /> used to send and receive data.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="59012-165"><xref:System.Net.Sockets.TcpListener.AcceptSocket%2A> — Это блокирующий метод, возвращающий <xref:System.Net.Sockets.Socket> , можно использовать для отправки и получения данных.</span><span class="sxs-lookup"><span data-stu-id="59012-165"><xref:System.Net.Sockets.TcpListener.AcceptSocket%2A> is a blocking method that returns a <xref:System.Net.Sockets.Socket> that you can use to send and receive data.</span></span> <span data-ttu-id="59012-166">Если вы хотите избежать блокировки, используйте <xref:System.Net.Sockets.TcpListener.Pending%2A> метод для определения запросов на подключение в очереди входящих подключений.</span><span class="sxs-lookup"><span data-stu-id="59012-166">If you want to avoid blocking, use the <xref:System.Net.Sockets.TcpListener.Pending%2A> method to determine if connection requests are available in the incoming connection queue.</span></span>  
  
 <span data-ttu-id="59012-167"><xref:System.Net.Sockets.Socket> Вернул инициализируется при помощи IP адрес и номер порта удаленного узла.</span><span class="sxs-lookup"><span data-stu-id="59012-167">The <xref:System.Net.Sockets.Socket> returned is initialized with the IP address and port number of the remote host.</span></span> <span data-ttu-id="59012-168">Можно использовать любой из <xref:System.Net.Sockets.Socket.Send%2A> и <xref:System.Net.Sockets.Socket.Receive%2A> методов, доступных в <xref:System.Net.Sockets.Socket> класса для взаимодействия с удаленным узлом.</span><span class="sxs-lookup"><span data-stu-id="59012-168">You can use any of the <xref:System.Net.Sockets.Socket.Send%2A> and <xref:System.Net.Sockets.Socket.Receive%2A> methods available in the <xref:System.Net.Sockets.Socket> class to communicate with the remote host.</span></span> <span data-ttu-id="59012-169">По окончании с помощью <xref:System.Net.Sockets.Socket>, необходимо вызвать его <xref:System.Net.Sockets.Socket.Close%2A> метод.</span><span class="sxs-lookup"><span data-stu-id="59012-169">When you are finished using the <xref:System.Net.Sockets.Socket>, be sure to call its <xref:System.Net.Sockets.Socket.Close%2A> method.</span></span> <span data-ttu-id="59012-170">Если приложения относительно прост, рассмотрите возможность использования <xref:System.Net.Sockets.TcpListener.AcceptTcpClient%2A> метод вместо <xref:System.Net.Sockets.TcpListener.AcceptSocket%2A> метод.</span><span class="sxs-lookup"><span data-stu-id="59012-170">If your application is relatively simple, consider using the <xref:System.Net.Sockets.TcpListener.AcceptTcpClient%2A> method rather than the <xref:System.Net.Sockets.TcpListener.AcceptSocket%2A> method.</span></span> <span data-ttu-id="59012-171"><xref:System.Net.Sockets.TcpClient> предоставляет простые методы для отправки и получения данных по сети в блокирующем синхронном режиме.</span><span class="sxs-lookup"><span data-stu-id="59012-171"><xref:System.Net.Sockets.TcpClient> provides you with simple methods for sending and receiving data over a network in blocking synchronous mode.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="59012-172">Данный член генерирует сведения трассировки, если в приложении включена трассировка сети.</span><span class="sxs-lookup"><span data-stu-id="59012-172">This member outputs trace information when you enable network tracing in your application.</span></span> <span data-ttu-id="59012-173">Дополнительные сведения см. в разделе [Трассировка сети в .NET Framework](~/docs/framework/network-programming/network-tracing.md).</span><span class="sxs-lookup"><span data-stu-id="59012-173">For more information, see [Network Tracing in the .NET Framework](~/docs/framework/network-programming/network-tracing.md).</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="59012-174">В следующем примере кода <xref:System.Net.Sockets.TcpListener.AcceptSocket%2A> метод используется для возврата <xref:System.Net.Sockets.Socket>.</span><span class="sxs-lookup"><span data-stu-id="59012-174">In the following code example, the <xref:System.Net.Sockets.TcpListener.AcceptSocket%2A> method is used to return a <xref:System.Net.Sockets.Socket>.</span></span> <span data-ttu-id="59012-175">Это <xref:System.Net.Sockets.Socket> используется для связи с вновь подключенным клиентом.</span><span class="sxs-lookup"><span data-stu-id="59012-175">This <xref:System.Net.Sockets.Socket> is used to communicate with the newly connected client.</span></span>  
  
 [!code-cpp[Classic TcpListener.PublicMethodsAndPropertiesExample#4](~/samples/snippets/cpp/VS_Snippets_Remoting/Classic TcpListener.PublicMethodsAndPropertiesExample/CPP/source.cpp#4)]
 [!code-csharp[Classic TcpListener.PublicMethodsAndPropertiesExample#4](~/samples/snippets/csharp/VS_Snippets_Remoting/Classic TcpListener.PublicMethodsAndPropertiesExample/CS/source.cs#4)]
 [!code-vb[Classic TcpListener.PublicMethodsAndPropertiesExample#4](~/samples/snippets/visualbasic/VS_Snippets_Remoting/Classic TcpListener.PublicMethodsAndPropertiesExample/VB/source.vb#4)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">
          <span data-ttu-id="59012-176">Слушатель не запущен с помощью вызова метода <see cref="M:System.Net.Sockets.TcpListener.Start" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="59012-176">The listener has not been started with a call to <see cref="M:System.Net.Sockets.TcpListener.Start" />.</span>
          </span>
        </exception>
        <altmember cref="M:System.Net.Sockets.TcpListener.AcceptTcpClient" />
        <altmember cref="T:System.Net.Sockets.Socket" />
        <altmember cref="M:System.Net.Sockets.TcpListener.Pending" />
      </Docs>
    </Member>
    <Member MemberName="AcceptSocketAsync">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task&lt;System.Net.Sockets.Socket&gt; AcceptSocketAsync ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task`1&lt;class System.Net.Sockets.Socket&gt; AcceptSocketAsync() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Sockets.TcpListener.AcceptSocketAsync" />
      <MemberSignature Language="VB.NET" Value="Public Function AcceptSocketAsync () As Task(Of Socket)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Threading::Tasks::Task&lt;System::Net::Sockets::Socket ^&gt; ^ AcceptSocketAsync();" />
      <MemberSignature Language="F#" Value="member this.AcceptSocketAsync : unit -&gt; System.Threading.Tasks.Task&lt;System.Net.Sockets.Socket&gt;" Usage="tcpListener.AcceptSocketAsync " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Sockets</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;System.Net.Sockets.Socket&gt;</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="59012-177">Принимает запрос ожидающего подключения как асинхронную операцию.</span>
          <span class="sxs-lookup">
            <span data-stu-id="59012-177">Accepts a pending connection request as an asynchronous operation.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="59012-178">Возвращает <see cref="T:System.Threading.Tasks.Task`1" />  Объект задачи, представляющий асинхронную операцию.</span>
          <span class="sxs-lookup">
            <span data-stu-id="59012-178">Returns <see cref="T:System.Threading.Tasks.Task`1" />  The task object representing the asynchronous operation.</span>
          </span>
          <span data-ttu-id="59012-179">Свойство <see cref="P:System.Threading.Tasks.Task`1.Result" /> в объекте задачи возвращает <see cref="T:System.Net.Sockets.Socket" />, используемый для отправки и получения данных.</span>
          <span class="sxs-lookup">
            <span data-stu-id="59012-179">The <see cref="P:System.Threading.Tasks.Task`1.Result" /> property on the task object returns a <see cref="T:System.Net.Sockets.Socket" /> used to send and receive data.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="59012-180">Эта операция не будет блокирована.</span><span class="sxs-lookup"><span data-stu-id="59012-180">This operation will not block.</span></span> <span data-ttu-id="59012-181">Возвращенный <xref:System.Threading.Tasks.Task%601> объекта будет выполнена после принятия подключение к сокету.</span><span class="sxs-lookup"><span data-stu-id="59012-181">The returned <xref:System.Threading.Tasks.Task%601> object will complete after the socket connection has been accepted.</span></span>  
  
 <span data-ttu-id="59012-182"><xref:System.Net.Sockets.Socket> Возвращается в <xref:System.Threading.Tasks.Task%601> инициализируется при помощи IP адрес и номер порта удаленного узла.</span><span class="sxs-lookup"><span data-stu-id="59012-182">The <xref:System.Net.Sockets.Socket> returned in <xref:System.Threading.Tasks.Task%601> is initialized with the IP address and port number of the remote host.</span></span> <span data-ttu-id="59012-183">Можно использовать любой из <xref:System.Net.Sockets.Socket.Send%2A> и <xref:System.Net.Sockets.Socket.Receive%2A> методов, доступных в <xref:System.Net.Sockets.Socket> класса для взаимодействия с удаленным узлом.</span><span class="sxs-lookup"><span data-stu-id="59012-183">You can use any of the <xref:System.Net.Sockets.Socket.Send%2A> and <xref:System.Net.Sockets.Socket.Receive%2A> methods available in the <xref:System.Net.Sockets.Socket> class to communicate with the remote host.</span></span> <span data-ttu-id="59012-184">По окончании с помощью <xref:System.Net.Sockets.Socket>, необходимо вызвать его <xref:System.Net.Sockets.Socket.Close%2A> метод.</span><span class="sxs-lookup"><span data-stu-id="59012-184">When you are finished using the <xref:System.Net.Sockets.Socket>, be sure to call its <xref:System.Net.Sockets.Socket.Close%2A> method.</span></span> <span data-ttu-id="59012-185">Если приложения относительно прост, рассмотрите возможность использования <xref:System.Net.Sockets.TcpListener.AcceptTcpClient%2A> метод вместо <xref:System.Net.Sockets.TcpListener.AcceptSocketAsync%2A> метод.</span><span class="sxs-lookup"><span data-stu-id="59012-185">If your application is relatively simple, consider using the <xref:System.Net.Sockets.TcpListener.AcceptTcpClient%2A> method rather than the <xref:System.Net.Sockets.TcpListener.AcceptSocketAsync%2A> method.</span></span> <span data-ttu-id="59012-186"><xref:System.Net.Sockets.TcpClient> предоставляет простые методы для отправки и получения данных по сети в блокирующем синхронном режиме.</span><span class="sxs-lookup"><span data-stu-id="59012-186"><xref:System.Net.Sockets.TcpClient> provides you with simple methods for sending and receiving data over a network in blocking synchronous mode.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="59012-187">Данный член генерирует сведения трассировки, если в приложении включена трассировка сети.</span><span class="sxs-lookup"><span data-stu-id="59012-187">This member outputs trace information when you enable network tracing in your application.</span></span> <span data-ttu-id="59012-188">Дополнительные сведения см. в разделе [Трассировка сети в .NET Framework](~/docs/framework/network-programming/network-tracing.md).</span><span class="sxs-lookup"><span data-stu-id="59012-188">For more information, see [Network Tracing in the .NET Framework](~/docs/framework/network-programming/network-tracing.md).</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">
          <span data-ttu-id="59012-189">Слушатель не запущен с помощью вызова метода <see cref="M:System.Net.Sockets.TcpListener.Start" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="59012-189">The listener has not been started with a call to <see cref="M:System.Net.Sockets.TcpListener.Start" />.</span>
          </span>
        </exception>
        <altmember cref="M:System.Net.Sockets.TcpListener.AcceptTcpClient" />
        <altmember cref="T:System.Net.Sockets.Socket" />
        <altmember cref="M:System.Net.Sockets.TcpListener.Pending" />
      </Docs>
    </Member>
    <Member MemberName="AcceptTcpClient">
      <MemberSignature Language="C#" Value="public System.Net.Sockets.TcpClient AcceptTcpClient ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Net.Sockets.TcpClient AcceptTcpClient() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Sockets.TcpListener.AcceptTcpClient" />
      <MemberSignature Language="VB.NET" Value="Public Function AcceptTcpClient () As TcpClient" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Net::Sockets::TcpClient ^ AcceptTcpClient();" />
      <MemberSignature Language="F#" Value="member this.AcceptTcpClient : unit -&gt; System.Net.Sockets.TcpClient" Usage="tcpListener.AcceptTcpClient " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.Sockets</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Net.Sockets.TcpClient</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="59012-190">Принимает ожидающий запрос на подключение.</span>
          <span class="sxs-lookup">
            <span data-stu-id="59012-190">Accepts a pending connection request.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="59012-191">Объект <see cref="T:System.Net.Sockets.TcpClient" />, используемый для приема и передачи данных.</span>
          <span class="sxs-lookup">
            <span data-stu-id="59012-191">A <see cref="T:System.Net.Sockets.TcpClient" /> used to send and receive data.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="59012-192"><xref:System.Net.Sockets.TcpListener.AcceptTcpClient%2A> — Это блокирующий метод, возвращающий <xref:System.Net.Sockets.TcpClient> , можно использовать для отправки и получения данных.</span><span class="sxs-lookup"><span data-stu-id="59012-192"><xref:System.Net.Sockets.TcpListener.AcceptTcpClient%2A> is a blocking method that returns a <xref:System.Net.Sockets.TcpClient> that you can use to send and receive data.</span></span> <span data-ttu-id="59012-193">Используйте <xref:System.Net.Sockets.TcpListener.Pending%2A> метод, чтобы определить, если запросы на подключение доступны в очереди входящих подключений, чтобы избежать блокировки.</span><span class="sxs-lookup"><span data-stu-id="59012-193">Use the <xref:System.Net.Sockets.TcpListener.Pending%2A> method to determine if connection requests are available in the incoming connection queue if you want to avoid blocking.</span></span>  
  
 <span data-ttu-id="59012-194">Используйте <xref:System.Net.Sockets.TcpClient.GetStream%2A?displayProperty=nameWithType> метод, чтобы получить основной <xref:System.Net.Sockets.NetworkStream> возвращаемого <xref:System.Net.Sockets.TcpClient>.</span><span class="sxs-lookup"><span data-stu-id="59012-194">Use the <xref:System.Net.Sockets.TcpClient.GetStream%2A?displayProperty=nameWithType> method to obtain the underlying <xref:System.Net.Sockets.NetworkStream> of the returned <xref:System.Net.Sockets.TcpClient>.</span></span> <span data-ttu-id="59012-195"><xref:System.Net.Sockets.NetworkStream> Будет предоставляют методы для отправки и получения с удаленного узла.</span><span class="sxs-lookup"><span data-stu-id="59012-195">The <xref:System.Net.Sockets.NetworkStream> will provide you with methods for sending and receiving with the remote host.</span></span> <span data-ttu-id="59012-196">После завершения использования с <xref:System.Net.Sockets.TcpClient>, необходимо вызвать его <xref:System.Net.Sockets.TcpClient.Close%2A> метод.</span><span class="sxs-lookup"><span data-stu-id="59012-196">When you are through with the <xref:System.Net.Sockets.TcpClient>, be sure to call its <xref:System.Net.Sockets.TcpClient.Close%2A> method.</span></span> <span data-ttu-id="59012-197">Если требуется больше гибкости, чем <xref:System.Net.Sockets.TcpClient> предложений, рассмотрите возможность использования <xref:System.Net.Sockets.TcpListener.AcceptSocket%2A>.</span><span class="sxs-lookup"><span data-stu-id="59012-197">If you want greater flexibility than a <xref:System.Net.Sockets.TcpClient> offers, consider using <xref:System.Net.Sockets.TcpListener.AcceptSocket%2A>.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="59012-198">Данный член генерирует сведения трассировки, если в приложении включена трассировка сети.</span><span class="sxs-lookup"><span data-stu-id="59012-198">This member outputs trace information when you enable network tracing in your application.</span></span> <span data-ttu-id="59012-199">Дополнительные сведения см. в разделе [Трассировка сети в .NET Framework](~/docs/framework/network-programming/network-tracing.md).</span><span class="sxs-lookup"><span data-stu-id="59012-199">For more information, see [Network Tracing in the .NET Framework](~/docs/framework/network-programming/network-tracing.md).</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="59012-200">В следующем примере кода <xref:System.Net.Sockets.TcpListener.AcceptTcpClient%2A> метод используется для возврата <xref:System.Net.Sockets.TcpClient>.</span><span class="sxs-lookup"><span data-stu-id="59012-200">In the following code example, the <xref:System.Net.Sockets.TcpListener.AcceptTcpClient%2A> method is used to return a <xref:System.Net.Sockets.TcpClient>.</span></span> <span data-ttu-id="59012-201">Это <xref:System.Net.Sockets.TcpClient> используется для связи с вновь подключенным клиентом.</span><span class="sxs-lookup"><span data-stu-id="59012-201">This <xref:System.Net.Sockets.TcpClient> is used to communicate with the newly connected client.</span></span>  
  
 [!code-cpp[Classic TcpListenerExample#1](~/samples/snippets/cpp/VS_Snippets_Remoting/Classic TcpListenerExample/CPP/source.cpp#1)]
 [!code-csharp[Classic TcpListenerExample#1](~/samples/snippets/csharp/VS_Snippets_Remoting/Classic TcpListenerExample/CS/source.cs#1)]
 [!code-vb[Classic TcpListenerExample#1](~/samples/snippets/visualbasic/VS_Snippets_Remoting/Classic TcpListenerExample/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">
          <span data-ttu-id="59012-202">Слушатель не запущен с помощью вызова метода <see cref="M:System.Net.Sockets.TcpListener.Start" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="59012-202">The listener has not been started with a call to <see cref="M:System.Net.Sockets.TcpListener.Start" />.</span>
          </span>
        </exception>
        <exception cref="T:System.Net.Sockets.SocketException">
          <span data-ttu-id="59012-203">Для получения кода ошибки можно воспользоваться свойством <see cref="P:System.Net.Sockets.SocketException.ErrorCode" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="59012-203">Use the <see cref="P:System.Net.Sockets.SocketException.ErrorCode" /> property to obtain the specific error code.</span>
          </span>
          <span data-ttu-id="59012-204">Получив этот код, можно обратиться за подробным описанием ошибки к документации по кодам ошибок API для сокетов Windows версии 2 в библиотеке MSDN.</span>
          <span class="sxs-lookup">
            <span data-stu-id="59012-204">When you have obtained this code, you can refer to the Windows Sockets version 2 API error code documentation in MSDN for a detailed description of the error.</span>
          </span>
        </exception>
        <altmember cref="T:System.Net.Sockets.TcpClient" />
        <altmember cref="M:System.Net.Sockets.TcpListener.AcceptSocket" />
        <altmember cref="T:System.Net.Sockets.Socket" />
        <altmember cref="T:System.Net.Sockets.NetworkStream" />
      </Docs>
    </Member>
    <Member MemberName="AcceptTcpClientAsync">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task&lt;System.Net.Sockets.TcpClient&gt; AcceptTcpClientAsync ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task`1&lt;class System.Net.Sockets.TcpClient&gt; AcceptTcpClientAsync() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Sockets.TcpListener.AcceptTcpClientAsync" />
      <MemberSignature Language="VB.NET" Value="Public Function AcceptTcpClientAsync () As Task(Of TcpClient)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Threading::Tasks::Task&lt;System::Net::Sockets::TcpClient ^&gt; ^ AcceptTcpClientAsync();" />
      <MemberSignature Language="F#" Value="member this.AcceptTcpClientAsync : unit -&gt; System.Threading.Tasks.Task&lt;System.Net.Sockets.TcpClient&gt;" Usage="tcpListener.AcceptTcpClientAsync " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Sockets</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;System.Net.Sockets.TcpClient&gt;</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="59012-205">Принимает запрос ожидающего подключения как асинхронную операцию.</span>
          <span class="sxs-lookup">
            <span data-stu-id="59012-205">Accepts a pending connection request as an asynchronous operation.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="59012-206">Возвращает <see cref="T:System.Threading.Tasks.Task`1" />  Объект задачи, представляющий асинхронную операцию.</span>
          <span class="sxs-lookup">
            <span data-stu-id="59012-206">Returns <see cref="T:System.Threading.Tasks.Task`1" />  The task object representing the asynchronous operation.</span>
          </span>
          <span data-ttu-id="59012-207">Свойство <see cref="P:System.Threading.Tasks.Task`1.Result" /> в объекте задачи возвращает <see cref="T:System.Net.Sockets.TcpClient" />, используемый для отправки и получения данных.</span>
          <span class="sxs-lookup">
            <span data-stu-id="59012-207">The <see cref="P:System.Threading.Tasks.Task`1.Result" /> property on the task object returns a <see cref="T:System.Net.Sockets.TcpClient" /> used to send and receive data.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="59012-208">Эта операция не будет блокирована.</span><span class="sxs-lookup"><span data-stu-id="59012-208">This operation will not block.</span></span> <span data-ttu-id="59012-209">Возвращенный <xref:System.Threading.Tasks.Task%601> объекта будет выполнена после принятия соединения по протоколу TCP.</span><span class="sxs-lookup"><span data-stu-id="59012-209">The returned <xref:System.Threading.Tasks.Task%601> object will complete after the TCP connection has been accepted.</span></span>  
  
 <span data-ttu-id="59012-210">Используйте <xref:System.Net.Sockets.TcpClient.GetStream%2A?displayProperty=nameWithType> метод, чтобы получить основной <xref:System.Net.Sockets.NetworkStream> возвращаемого <xref:System.Net.Sockets.TcpClient> в <xref:System.Threading.Tasks.Task%601>.</span><span class="sxs-lookup"><span data-stu-id="59012-210">Use the <xref:System.Net.Sockets.TcpClient.GetStream%2A?displayProperty=nameWithType> method to obtain the underlying <xref:System.Net.Sockets.NetworkStream> of the returned <xref:System.Net.Sockets.TcpClient> in the <xref:System.Threading.Tasks.Task%601>.</span></span> <span data-ttu-id="59012-211"><xref:System.Net.Sockets.NetworkStream> Будет предоставляют методы для отправки и получения с удаленного узла.</span><span class="sxs-lookup"><span data-stu-id="59012-211">The <xref:System.Net.Sockets.NetworkStream> will provide you with methods for sending and receiving with the remote host.</span></span> <span data-ttu-id="59012-212">После завершения использования с <xref:System.Net.Sockets.TcpClient>, необходимо вызвать его <xref:System.Net.Sockets.TcpClient.Close%2A> метод.</span><span class="sxs-lookup"><span data-stu-id="59012-212">When you are through with the <xref:System.Net.Sockets.TcpClient>, be sure to call its <xref:System.Net.Sockets.TcpClient.Close%2A> method.</span></span> <span data-ttu-id="59012-213">Если требуется больше гибкости, чем <xref:System.Net.Sockets.TcpClient> предложений, рассмотрите возможность использования <xref:System.Net.Sockets.TcpListener.AcceptSocket%2A> или <xref:System.Net.Sockets.TcpListener.AcceptSocketAsync%2A>.</span><span class="sxs-lookup"><span data-stu-id="59012-213">If you want greater flexibility than a <xref:System.Net.Sockets.TcpClient> offers, consider using <xref:System.Net.Sockets.TcpListener.AcceptSocket%2A> or <xref:System.Net.Sockets.TcpListener.AcceptSocketAsync%2A>.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="59012-214">Данный член генерирует сведения трассировки, если в приложении включена трассировка сети.</span><span class="sxs-lookup"><span data-stu-id="59012-214">This member outputs trace information when you enable network tracing in your application.</span></span> <span data-ttu-id="59012-215">Дополнительные сведения см. в разделе [Трассировка сети в .NET Framework](~/docs/framework/network-programming/network-tracing.md).</span><span class="sxs-lookup"><span data-stu-id="59012-215">For more information, see [Network Tracing in the .NET Framework](~/docs/framework/network-programming/network-tracing.md).</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">
          <span data-ttu-id="59012-216">Слушатель не запущен с помощью вызова метода <see cref="M:System.Net.Sockets.TcpListener.Start" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="59012-216">The listener has not been started with a call to <see cref="M:System.Net.Sockets.TcpListener.Start" />.</span>
          </span>
        </exception>
        <exception cref="T:System.Net.Sockets.SocketException">
          <span data-ttu-id="59012-217">Для получения кода ошибки можно воспользоваться свойством <see cref="P:System.Net.Sockets.SocketException.ErrorCode" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="59012-217">Use the <see cref="P:System.Net.Sockets.SocketException.ErrorCode" /> property to obtain the specific error code.</span>
          </span>
          <span data-ttu-id="59012-218">Получив этот код, можно обратиться за подробным описанием ошибки к документации по кодам ошибок API для сокетов Windows версии 2 в библиотеке MSDN.</span>
          <span class="sxs-lookup">
            <span data-stu-id="59012-218">When you have obtained this code, you can refer to the Windows Sockets version 2 API error code documentation in MSDN for a detailed description of the error.</span>
          </span>
        </exception>
        <altmember cref="T:System.Net.Sockets.TcpClient" />
        <altmember cref="M:System.Net.Sockets.TcpListener.AcceptSocket" />
        <altmember cref="T:System.Net.Sockets.Socket" />
        <altmember cref="T:System.Net.Sockets.NetworkStream" />
      </Docs>
    </Member>
    <Member MemberName="Active">
      <MemberSignature Language="C#" Value="protected bool Active { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool Active" />
      <MemberSignature Language="DocId" Value="P:System.Net.Sockets.TcpListener.Active" />
      <MemberSignature Language="VB.NET" Value="Protected ReadOnly Property Active As Boolean" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; property bool Active { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.Active : bool" Usage="System.Net.Sockets.TcpListener.Active" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Sockets</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="59012-219">Получает значение, указывающее, является ли активным объект <see cref="T:System.Net.Sockets.TcpListener" />, выполняющий прослушивание клиентских подключений.</span>
          <span class="sxs-lookup">
            <span data-stu-id="59012-219">Gets a value that indicates whether <see cref="T:System.Net.Sockets.TcpListener" /> is actively listening for client connections.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="59012-220">Значение <see langword="true" />, если прослушивающий объект <see cref="T:System.Net.Sockets.TcpListener" /> активен; в противном случае — <see langword="false" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="59012-220">
              <see langword="true" /> if <see cref="T:System.Net.Sockets.TcpListener" /> is actively listening; otherwise, <see langword="false" />.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="59012-221">Классы, производные от <xref:System.Net.Sockets.TcpListener> это свойство можно использовать для определения <xref:System.Net.Sockets.Socket> в настоящее время прослушивание входящих попыток подключения.</span><span class="sxs-lookup"><span data-stu-id="59012-221">Classes deriving from <xref:System.Net.Sockets.TcpListener> can use this property to determine if the <xref:System.Net.Sockets.Socket> is currently listening for incoming connection attempts.</span></span> <span data-ttu-id="59012-222"><xref:System.Net.Sockets.TcpClient.Active%2A> Свойство может использоваться, чтобы избежать избыточных <xref:System.Net.Sockets.TcpListener.Start%2A> попыток.</span><span class="sxs-lookup"><span data-stu-id="59012-222">The <xref:System.Net.Sockets.TcpClient.Active%2A> property can be used to avoid redundant <xref:System.Net.Sockets.TcpListener.Start%2A> attempts.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Net.Sockets.TcpListener.Start" />
      </Docs>
    </Member>
    <Member MemberName="AllowNatTraversal">
      <MemberSignature Language="C#" Value="public void AllowNatTraversal (bool allowed);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void AllowNatTraversal(bool allowed) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Sockets.TcpListener.AllowNatTraversal(System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Sub AllowNatTraversal (allowed As Boolean)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void AllowNatTraversal(bool allowed);" />
      <MemberSignature Language="F#" Value="member this.AllowNatTraversal : bool -&gt; unit" Usage="tcpListener.AllowNatTraversal allowed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.Sockets</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="allowed" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="allowed">
          <span data-ttu-id="59012-223">Логическое значение, указывающее, что надо включить или выключить обход NAT.</span>
          <span class="sxs-lookup">
            <span data-stu-id="59012-223">A Boolean value that specifies whether to enable or disable NAT traversal.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="59012-224">Включает или отключает обход механизма преобразования сетевых адресов (NAT) для экземпляра <see cref="T:System.Net.Sockets.TcpListener" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="59012-224">Enables or disables Network Address Translation (NAT) traversal on a <see cref="T:System.Net.Sockets.TcpListener" /> instance.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="59012-225"><xref:System.Net.Sockets.TcpListener.AllowNatTraversal%2A> Метод используется для включения или отключения прохождения NAT для <xref:System.Net.Sockets.TcpListener> экземпляра.</span><span class="sxs-lookup"><span data-stu-id="59012-225">The <xref:System.Net.Sockets.TcpListener.AllowNatTraversal%2A> method is used to enable or disable NAT traversal for a <xref:System.Net.Sockets.TcpListener> instance.</span></span> <span data-ttu-id="59012-226">Обход NAT может предоставляться Teredo, 6to4 или туннель ISATAP.</span><span class="sxs-lookup"><span data-stu-id="59012-226">NAT traversal may be provided using Teredo, 6to4, or an ISATAP tunnel.</span></span>  
  
 <span data-ttu-id="59012-227">Когда `allowed` параметр имеет значение false, <xref:System.Net.Sockets.SocketOptionName.IPProtectionLevel> на связанного сокета был установлен в <xref:System.Net.Sockets.IPProtectionLevel.EdgeRestricted>.</span><span class="sxs-lookup"><span data-stu-id="59012-227">When the `allowed` parameter is false, the <xref:System.Net.Sockets.SocketOptionName.IPProtectionLevel> option on the associated socket is set to <xref:System.Net.Sockets.IPProtectionLevel.EdgeRestricted>.</span></span> <span data-ttu-id="59012-228">Это явно отключает прохождения NAT для <xref:System.Net.Sockets.TcpListener> экземпляра.</span><span class="sxs-lookup"><span data-stu-id="59012-228">This explicitly disables NAT traversal for a <xref:System.Net.Sockets.TcpListener> instance.</span></span>  
  
 <span data-ttu-id="59012-229">Когда `allowed` параметр имеет значение true, <xref:System.Net.Sockets.SocketOptionName.IPProtectionLevel> на связанного сокета был установлен в <xref:System.Net.Sockets.IPProtectionLevel.Unrestricted>.</span><span class="sxs-lookup"><span data-stu-id="59012-229">When the `allowed` parameter is true, the <xref:System.Net.Sockets.SocketOptionName.IPProtectionLevel> option on the associated socket is set to <xref:System.Net.Sockets.IPProtectionLevel.Unrestricted>.</span></span> <span data-ttu-id="59012-230">Это может позволить прохождения NAT для <xref:System.Net.Sockets.TcpListener> в зависимости от правил брандмауэра на месте в системе.</span><span class="sxs-lookup"><span data-stu-id="59012-230">This may allow NAT traversal for a <xref:System.Net.Sockets.TcpListener> depending on firewall rules in place on the system.</span></span>  
  
 <span data-ttu-id="59012-231"><xref:System.Net.Sockets.TcpListener.AllowNatTraversal%2A> Метод должен быть вызван до вызова метода <xref:System.Net.Sockets.TcpListener.Start%2A> метод, чтобы начать прослушивание входящих запросов на подключение (перед привязкой сокета).</span><span class="sxs-lookup"><span data-stu-id="59012-231">The <xref:System.Net.Sockets.TcpListener.AllowNatTraversal%2A> method must be invoked prior to calling the <xref:System.Net.Sockets.TcpListener.Start%2A> method to begin listening for incoming connection requests (before the socket is bound).</span></span> <span data-ttu-id="59012-232">Если <xref:System.Net.Sockets.TcpListener.AllowNatTraversal%2A> метод вызывается после <xref:System.Net.Sockets.TcpListener.Start%2A> метод, то <xref:System.InvalidOperationException> будет создано.</span><span class="sxs-lookup"><span data-stu-id="59012-232">If <xref:System.Net.Sockets.TcpListener.AllowNatTraversal%2A> method is called after the <xref:System.Net.Sockets.TcpListener.Start%2A> method, then an <xref:System.InvalidOperationException> will be thrown.</span></span>  
  
 <span data-ttu-id="59012-233">Адрес Teredo — IPv6-адрес с префиксом 2001:: / 32.</span><span class="sxs-lookup"><span data-stu-id="59012-233">A Teredo address is an IPv6 address with the prefix of 2001::/32.</span></span> <span data-ttu-id="59012-234">Адреса Teredo можно возвращенные с помощью обычного разрешения имен DNS или перечислены как IPv6-адрес локального интерфейса.</span><span class="sxs-lookup"><span data-stu-id="59012-234">Teredo addresses can be returned through normal DNS name resolution or enumerated as an IPv6 address assigned to a local interface.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">
          <span data-ttu-id="59012-235">Метод <see cref="M:System.Net.Sockets.TcpListener.AllowNatTraversal(System.Boolean)" /> был вызван после метода <see cref="M:System.Net.Sockets.TcpListener.Start" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="59012-235">The <see cref="M:System.Net.Sockets.TcpListener.AllowNatTraversal(System.Boolean)" /> method was called after calling the <see cref="M:System.Net.Sockets.TcpListener.Start" /> method</span>
          </span>
        </exception>
        <altmember cref="P:System.Net.IPAddress.IsIPv6Teredo" />
        <altmember cref="T:System.Net.Sockets.IPProtectionLevel" />
        <altmember cref="F:System.Net.Sockets.SocketOptionName.IPProtectionLevel" />
        <altmember cref="M:System.Net.Sockets.Socket.SetIPProtectionLevel(System.Net.Sockets.IPProtectionLevel)" />
        <altmember cref="M:System.Net.Sockets.UdpClient.AllowNatTraversal(System.Boolean)" />
      </Docs>
    </Member>
    <Member MemberName="BeginAcceptSocket">
      <MemberSignature Language="C#" Value="public IAsyncResult BeginAcceptSocket (AsyncCallback callback, object state);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.IAsyncResult BeginAcceptSocket(class System.AsyncCallback callback, object state) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Sockets.TcpListener.BeginAcceptSocket(System.AsyncCallback,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function BeginAcceptSocket (callback As AsyncCallback, state As Object) As IAsyncResult" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; IAsyncResult ^ BeginAcceptSocket(AsyncCallback ^ callback, System::Object ^ state);" />
      <MemberSignature Language="F#" Value="member this.BeginAcceptSocket : AsyncCallback * obj -&gt; IAsyncResult" Usage="tcpListener.BeginAcceptSocket (callback, state)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.Sockets</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IAsyncResult</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="callback" Type="System.AsyncCallback" />
        <Parameter Name="state" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="callback">
          <span data-ttu-id="59012-236">Делегат <see cref="T:System.AsyncCallback" />, ссылающийся на метод, вызываемый по завершении данной операции.</span>
          <span class="sxs-lookup">
            <span data-stu-id="59012-236">An <see cref="T:System.AsyncCallback" /> delegate that references the method to invoke when the operation is complete.</span>
          </span>
        </param>
        <param name="state">
          <span data-ttu-id="59012-237">Пользовательский объект, содержащий информацию о данной операции принятия запроса на подключения.</span>
          <span class="sxs-lookup">
            <span data-stu-id="59012-237">A user-defined object containing information about the accept operation.</span>
          </span>
          <span data-ttu-id="59012-238">Этот объект передается делегату <c>callback</c> по завершении операции.</span>
          <span class="sxs-lookup">
            <span data-stu-id="59012-238">This object is passed to the <c>callback</c> delegate when the operation is complete.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="59012-239">Начинает асинхронную операцию, чтобы принять попытку входящего подключения.</span>
          <span class="sxs-lookup">
            <span data-stu-id="59012-239">Begins an asynchronous operation to accept an incoming connection attempt.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="59012-240">Объект <see cref="T:System.IAsyncResult" />, который ссылается на асинхронное создание объекта <see cref="T:System.Net.Sockets.Socket" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="59012-240">An <see cref="T:System.IAsyncResult" /> that references the asynchronous creation of the <see cref="T:System.Net.Sockets.Socket" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="59012-241">Асинхронная <xref:System.Net.Sockets.TcpListener.BeginAcceptSocket%2A> операция должна быть завершена, вызвав <xref:System.Net.Sockets.TcpListener.EndAcceptSocket%2A> метод.</span><span class="sxs-lookup"><span data-stu-id="59012-241">The asynchronous <xref:System.Net.Sockets.TcpListener.BeginAcceptSocket%2A> operation must be completed by calling the <xref:System.Net.Sockets.TcpListener.EndAcceptSocket%2A> method.</span></span> <span data-ttu-id="59012-242">Как правило, вызывается метод `callback` делегата.</span><span class="sxs-lookup"><span data-stu-id="59012-242">Typically, the method is invoked by the `callback` delegate.</span></span>  
  
 <span data-ttu-id="59012-243">Этот метод блокируется до завершения операции.</span><span class="sxs-lookup"><span data-stu-id="59012-243">This method does not block until the operation completes.</span></span> <span data-ttu-id="59012-244">Для блокирования до завершения операции, используйте <xref:System.Net.Sockets.TcpListener.AcceptSocket%2A> метод.</span><span class="sxs-lookup"><span data-stu-id="59012-244">To block until the operation completes, use the <xref:System.Net.Sockets.TcpListener.AcceptSocket%2A> method.</span></span>  
  
 <span data-ttu-id="59012-245">Подробные сведения об использовании модели асинхронного программирования см. в разделе [асинхронный вызов синхронных методов](~/docs/standard/asynchronous-programming-patterns/calling-synchronous-methods-asynchronously.md).</span><span class="sxs-lookup"><span data-stu-id="59012-245">For detailed information about using the asynchronous programming model, see [Calling Synchronous Methods Asynchronously](~/docs/standard/asynchronous-programming-patterns/calling-synchronous-methods-asynchronously.md).</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="59012-246">Можно вызвать <xref:System.Net.Sockets.Socket.RemoteEndPoint%2A> свойство возвращаемого <xref:System.Net.Sockets.Socket> для идентификации удаленного узла сетевой адрес и номер порта.</span><span class="sxs-lookup"><span data-stu-id="59012-246">You can call the <xref:System.Net.Sockets.Socket.RemoteEndPoint%2A> property of the returned <xref:System.Net.Sockets.Socket> to identify the remote host's network address and port number.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="59012-247">При получении <xref:System.Net.Sockets.SocketException>, используйте <xref:System.Net.Sockets.SocketException.ErrorCode%2A?displayProperty=nameWithType> свойство, чтобы получить конкретный код ошибки и обратитесь к документации Windows Sockets версии 2 API ошибок кода в библиотеке MSDN по [ http://msdn.microsoft.com/library/ ](http://msdn.microsoft.com/library/) для подробные Описание ошибки.</span><span class="sxs-lookup"><span data-stu-id="59012-247">If you receive a <xref:System.Net.Sockets.SocketException>, use the <xref:System.Net.Sockets.SocketException.ErrorCode%2A?displayProperty=nameWithType> property to obtain the specific error code and refer to the Windows Sockets version 2 API error code documentation in the MSDN library at [http://msdn.microsoft.com/library/](http://msdn.microsoft.com/library/) for a detailed description of the error.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="59012-248">Данный член генерирует сведения трассировки, если в приложении включена трассировка сети.</span><span class="sxs-lookup"><span data-stu-id="59012-248">This member outputs trace information when you enable network tracing in your application.</span></span> <span data-ttu-id="59012-249">Дополнительные сведения см. в разделе [Трассировка сети в .NET Framework](~/docs/framework/network-programming/network-tracing.md).</span><span class="sxs-lookup"><span data-stu-id="59012-249">For more information, see [Network Tracing in the .NET Framework](~/docs/framework/network-programming/network-tracing.md).</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="59012-250">В следующем примере кода показано использование <xref:System.Net.Sockets.TcpListener.BeginAcceptSocket%2A> метод для создания и подключения сокета.</span><span class="sxs-lookup"><span data-stu-id="59012-250">The following code example demonstrates the use of the <xref:System.Net.Sockets.TcpListener.BeginAcceptSocket%2A> method to create and connect a socket.</span></span> <span data-ttu-id="59012-251">Вызывает делегат обратного вызова <xref:System.Net.Sockets.TcpListener.EndAcceptSocket%2A> метод для завершения асинхронного запроса.</span><span class="sxs-lookup"><span data-stu-id="59012-251">The callback delegate calls the <xref:System.Net.Sockets.TcpListener.EndAcceptSocket%2A> method to end the asynchronous request.</span></span>  
  
 [!code-cpp[System.Net.Sockets.TcpListener1#4](~/samples/snippets/cpp/VS_Snippets_Remoting/System.Net.Sockets.TcpListener1/cpp/tcpserver.cpp#4)]
 [!code-csharp[System.Net.Sockets.TcpListener1#4](~/samples/snippets/csharp/VS_Snippets_Remoting/System.Net.Sockets.TcpListener1/CS/tcpserver.cs#4)]
 [!code-vb[System.Net.Sockets.TcpListener1#4](~/samples/snippets/visualbasic/VS_Snippets_Remoting/System.Net.Sockets.TcpListener1/VB/tcpserver.vb#4)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Net.Sockets.SocketException">
          <span data-ttu-id="59012-252">Произошла ошибка при попытке доступа к сокету.</span>
          <span class="sxs-lookup">
            <span data-stu-id="59012-252">An error occurred while attempting to access the socket.</span>
          </span>
        </exception>
        <exception cref="T:System.ObjectDisposedException">
          <span data-ttu-id="59012-253">
            <see cref="T:System.Net.Sockets.Socket" /> был закрыт.</span>
          <span class="sxs-lookup">
            <span data-stu-id="59012-253">The <see cref="T:System.Net.Sockets.Socket" /> has been closed.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="BeginAcceptTcpClient">
      <MemberSignature Language="C#" Value="public IAsyncResult BeginAcceptTcpClient (AsyncCallback callback, object state);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.IAsyncResult BeginAcceptTcpClient(class System.AsyncCallback callback, object state) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Sockets.TcpListener.BeginAcceptTcpClient(System.AsyncCallback,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function BeginAcceptTcpClient (callback As AsyncCallback, state As Object) As IAsyncResult" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; IAsyncResult ^ BeginAcceptTcpClient(AsyncCallback ^ callback, System::Object ^ state);" />
      <MemberSignature Language="F#" Value="member this.BeginAcceptTcpClient : AsyncCallback * obj -&gt; IAsyncResult" Usage="tcpListener.BeginAcceptTcpClient (callback, state)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.Sockets</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IAsyncResult</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="callback" Type="System.AsyncCallback" />
        <Parameter Name="state" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="callback">
          <span data-ttu-id="59012-254">Делегат <see cref="T:System.AsyncCallback" />, ссылающийся на метод, вызываемый по завершении данной операции.</span>
          <span class="sxs-lookup">
            <span data-stu-id="59012-254">An <see cref="T:System.AsyncCallback" /> delegate that references the method to invoke when the operation is complete.</span>
          </span>
        </param>
        <param name="state">
          <span data-ttu-id="59012-255">Пользовательский объект, содержащий информацию о данной операции принятия запроса на подключения.</span>
          <span class="sxs-lookup">
            <span data-stu-id="59012-255">A user-defined object containing information about the accept operation.</span>
          </span>
          <span data-ttu-id="59012-256">Этот объект передается делегату <c>callback</c> по завершении операции.</span>
          <span class="sxs-lookup">
            <span data-stu-id="59012-256">This object is passed to the <c>callback</c> delegate when the operation is complete.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="59012-257">Начинает асинхронную операцию, чтобы принять попытку входящего подключения.</span>
          <span class="sxs-lookup">
            <span data-stu-id="59012-257">Begins an asynchronous operation to accept an incoming connection attempt.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="59012-258">Объект <see cref="T:System.IAsyncResult" />, который ссылается на асинхронное создание объекта <see cref="T:System.Net.Sockets.TcpClient" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="59012-258">An <see cref="T:System.IAsyncResult" /> that references the asynchronous creation of the <see cref="T:System.Net.Sockets.TcpClient" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="59012-259">Асинхронная <xref:System.Net.Sockets.TcpListener.BeginAcceptTcpClient%2A> операция должна быть завершена, вызвав <xref:System.Net.Sockets.TcpListener.EndAcceptTcpClient%2A> метод.</span><span class="sxs-lookup"><span data-stu-id="59012-259">The asynchronous <xref:System.Net.Sockets.TcpListener.BeginAcceptTcpClient%2A> operation must be completed by calling the <xref:System.Net.Sockets.TcpListener.EndAcceptTcpClient%2A> method.</span></span> <span data-ttu-id="59012-260">Как правило, вызывается метод `callback` делегата.</span><span class="sxs-lookup"><span data-stu-id="59012-260">Typically, the method is invoked by the `callback` delegate.</span></span>  
  
 <span data-ttu-id="59012-261">Этот метод блокируется до завершения операции.</span><span class="sxs-lookup"><span data-stu-id="59012-261">This method does not block until the operation completes.</span></span> <span data-ttu-id="59012-262">Для блокирования до завершения операции, используйте <xref:System.Net.Sockets.TcpListener.AcceptTcpClient%2A> метод.</span><span class="sxs-lookup"><span data-stu-id="59012-262">To block until the operation completes, use the <xref:System.Net.Sockets.TcpListener.AcceptTcpClient%2A> method.</span></span>  
  
 <span data-ttu-id="59012-263">Подробные сведения об использовании модели асинхронного программирования см. в разделе [асинхронный вызов синхронных методов](~/docs/standard/asynchronous-programming-patterns/calling-synchronous-methods-asynchronously.md).</span><span class="sxs-lookup"><span data-stu-id="59012-263">For detailed information about using the asynchronous programming model, see [Calling Synchronous Methods Asynchronously](~/docs/standard/asynchronous-programming-patterns/calling-synchronous-methods-asynchronously.md).</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="59012-264">При получении <xref:System.Net.Sockets.SocketException>, используйте <xref:System.Net.Sockets.SocketException.ErrorCode%2A?displayProperty=nameWithType> свойство, чтобы получить конкретный код ошибки и обратитесь к документации Windows Sockets версии 2 API ошибок кода в библиотеке MSDN по [ http://msdn.microsoft.com/library/ ](http://msdn.microsoft.com/library/) для подробные Описание ошибки.</span><span class="sxs-lookup"><span data-stu-id="59012-264">If you receive a <xref:System.Net.Sockets.SocketException>, use the <xref:System.Net.Sockets.SocketException.ErrorCode%2A?displayProperty=nameWithType> property to obtain the specific error code and refer to the Windows Sockets version 2 API error code documentation in the MSDN library at [http://msdn.microsoft.com/library/](http://msdn.microsoft.com/library/) for a detailed description of the error.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="59012-265">Данный член генерирует сведения трассировки, если в приложении включена трассировка сети.</span><span class="sxs-lookup"><span data-stu-id="59012-265">This member outputs trace information when you enable network tracing in your application.</span></span> <span data-ttu-id="59012-266">Дополнительные сведения см. в разделе [Трассировка сети в .NET Framework](~/docs/framework/network-programming/network-tracing.md).</span><span class="sxs-lookup"><span data-stu-id="59012-266">For more information, see [Network Tracing in the .NET Framework](~/docs/framework/network-programming/network-tracing.md).</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="59012-267">В следующем примере кода показано использование <xref:System.Net.Sockets.TcpListener.BeginAcceptTcpClient%2A> метод для создания и подключения сокета.</span><span class="sxs-lookup"><span data-stu-id="59012-267">The following code example demonstrates the use of the <xref:System.Net.Sockets.TcpListener.BeginAcceptTcpClient%2A> method to create and connect a socket.</span></span> <span data-ttu-id="59012-268">Вызывает делегат обратного вызова <xref:System.Net.Sockets.TcpListener.EndAcceptTcpClient%2A> метод для завершения асинхронного запроса.</span><span class="sxs-lookup"><span data-stu-id="59012-268">The callback delegate calls the <xref:System.Net.Sockets.TcpListener.EndAcceptTcpClient%2A> method to end the asynchronous request.</span></span>  
  
 [!code-cpp[System.Net.Sockets.TcpListener1#5](~/samples/snippets/cpp/VS_Snippets_Remoting/System.Net.Sockets.TcpListener1/cpp/tcpserver.cpp#5)]
 [!code-csharp[System.Net.Sockets.TcpListener1#5](~/samples/snippets/csharp/VS_Snippets_Remoting/System.Net.Sockets.TcpListener1/CS/tcpserver.cs#5)]
 [!code-vb[System.Net.Sockets.TcpListener1#5](~/samples/snippets/visualbasic/VS_Snippets_Remoting/System.Net.Sockets.TcpListener1/VB/tcpserver.vb#5)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Net.Sockets.SocketException">
          <span data-ttu-id="59012-269">Произошла ошибка при попытке доступа к сокету.</span>
          <span class="sxs-lookup">
            <span data-stu-id="59012-269">An error occurred while attempting to access the socket.</span>
          </span>
        </exception>
        <exception cref="T:System.ObjectDisposedException">
          <span data-ttu-id="59012-270">
            <see cref="T:System.Net.Sockets.Socket" /> был закрыт.</span>
          <span class="sxs-lookup">
            <span data-stu-id="59012-270">The <see cref="T:System.Net.Sockets.Socket" /> has been closed.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="Create">
      <MemberSignature Language="C#" Value="public static System.Net.Sockets.TcpListener Create (int port);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Net.Sockets.TcpListener Create(int32 port) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Sockets.TcpListener.Create(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Create (port As Integer) As TcpListener" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Net::Sockets::TcpListener ^ Create(int port);" />
      <MemberSignature Language="F#" Value="static member Create : int -&gt; System.Net.Sockets.TcpListener" Usage="System.Net.Sockets.TcpListener.Create port" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.Sockets</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Net.Sockets.TcpListener</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="port" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="port">
          <span data-ttu-id="59012-271">Порт, на котором производится ожидание входящих попыток подключений.</span>
          <span class="sxs-lookup">
            <span data-stu-id="59012-271">The port on which to listen for incoming connection attempts.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="59012-272">Создает Новый экземпляр <see cref="T:System.Net.Sockets.TcpListener" />, который должен прослушивать на определенном порту.</span>
          <span class="sxs-lookup">
            <span data-stu-id="59012-272">Creates a new <see cref="T:System.Net.Sockets.TcpListener" /> instance to listen on the specified port.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="59012-273">Возвращает <see cref="T:System.Net.Sockets.TcpListener" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="59012-273">Returns <see cref="T:System.Net.Sockets.TcpListener" />.</span>
          </span>
          <span data-ttu-id="59012-274">Новый экземпляр <see cref="T:System.Net.Sockets.TcpListener" />, который должен прослушивать на определенном порту.</span>
          <span class="sxs-lookup">
            <span data-stu-id="59012-274">A new <see cref="T:System.Net.Sockets.TcpListener" /> instance to listen on the specified port.</span>
          </span>
        </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="EndAcceptSocket">
      <MemberSignature Language="C#" Value="public System.Net.Sockets.Socket EndAcceptSocket (IAsyncResult asyncResult);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Net.Sockets.Socket EndAcceptSocket(class System.IAsyncResult asyncResult) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Sockets.TcpListener.EndAcceptSocket(System.IAsyncResult)" />
      <MemberSignature Language="VB.NET" Value="Public Function EndAcceptSocket (asyncResult As IAsyncResult) As Socket" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Net::Sockets::Socket ^ EndAcceptSocket(IAsyncResult ^ asyncResult);" />
      <MemberSignature Language="F#" Value="member this.EndAcceptSocket : IAsyncResult -&gt; System.Net.Sockets.Socket" Usage="tcpListener.EndAcceptSocket asyncResult" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.Sockets</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Net.Sockets.Socket</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="asyncResult" Type="System.IAsyncResult" />
      </Parameters>
      <Docs>
        <param name="asyncResult">
          <span data-ttu-id="59012-275">Объект <see cref="T:System.IAsyncResult" /> возвращен посредством вызова метода <see cref="M:System.Net.Sockets.TcpListener.BeginAcceptSocket(System.AsyncCallback,System.Object)" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="59012-275">An <see cref="T:System.IAsyncResult" /> returned by a call to the <see cref="M:System.Net.Sockets.TcpListener.BeginAcceptSocket(System.AsyncCallback,System.Object)" /> method.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="59012-276">Асинхронно принимает входящие попытки подключения и создает новый объект <see cref="T:System.Net.Sockets.Socket" /> для связи с удаленным узлом.</span>
          <span class="sxs-lookup">
            <span data-stu-id="59012-276">Asynchronously accepts an incoming connection attempt and creates a new <see cref="T:System.Net.Sockets.Socket" /> to handle remote host communication.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="59012-277">Объект <see cref="T:System.Net.Sockets.Socket" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="59012-277">A <see cref="T:System.Net.Sockets.Socket" />.</span>
          </span>
          <span data-ttu-id="59012-278">Объект <see cref="T:System.Net.Sockets.Socket" />, используемый для приема и передачи данных.</span>
          <span class="sxs-lookup">
            <span data-stu-id="59012-278">The <see cref="T:System.Net.Sockets.Socket" /> used to send and receive data.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="59012-279">Этот метод блокируется до операции завершения.</span><span class="sxs-lookup"><span data-stu-id="59012-279">This method blocks until the operation is complete.</span></span> <span data-ttu-id="59012-280">Для синхронного выполнения этой операции, используйте <xref:System.Net.Sockets.TcpListener.AcceptSocket%2A> метод.</span><span class="sxs-lookup"><span data-stu-id="59012-280">To perform this operation synchronously, use the <xref:System.Net.Sockets.TcpListener.AcceptSocket%2A> method.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="59012-281">Можно вызвать <xref:System.Net.Sockets.Socket.RemoteEndPoint%2A> свойство возвращаемого <xref:System.Net.Sockets.Socket> для идентификации удаленного узла сетевой адрес и номер порта.</span><span class="sxs-lookup"><span data-stu-id="59012-281">You can call the <xref:System.Net.Sockets.Socket.RemoteEndPoint%2A> property of the returned <xref:System.Net.Sockets.Socket> to identify the remote host's network address and port number.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="59012-282">При получении <xref:System.Net.Sockets.SocketException>, используйте <xref:System.Net.Sockets.SocketException.ErrorCode%2A?displayProperty=nameWithType> свойство, чтобы получить конкретный код ошибки и обратитесь к документации Windows Sockets версии 2 API ошибок кода в библиотеке MSDN по [ http://msdn.microsoft.com/library/ ](http://msdn.microsoft.com/library/) для подробные Описание ошибки.</span><span class="sxs-lookup"><span data-stu-id="59012-282">If you receive a <xref:System.Net.Sockets.SocketException>, use the <xref:System.Net.Sockets.SocketException.ErrorCode%2A?displayProperty=nameWithType> property to obtain the specific error code and refer to the Windows Sockets version 2 API error code documentation in the MSDN library at [http://msdn.microsoft.com/library/](http://msdn.microsoft.com/library/) for a detailed description of the error.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="59012-283">Данный член генерирует сведения трассировки, если в приложении включена трассировка сети.</span><span class="sxs-lookup"><span data-stu-id="59012-283">This member outputs trace information when you enable network tracing in your application.</span></span> <span data-ttu-id="59012-284">Дополнительные сведения см. в разделе [Трассировка сети в .NET Framework](~/docs/framework/network-programming/network-tracing.md).</span><span class="sxs-lookup"><span data-stu-id="59012-284">For more information, see [Network Tracing in the .NET Framework](~/docs/framework/network-programming/network-tracing.md).</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="59012-285">В следующем примере кода показано использование <xref:System.Net.Sockets.TcpListener.BeginAcceptSocket%2A> метод для создания и подключения сокета.</span><span class="sxs-lookup"><span data-stu-id="59012-285">The following code example demonstrates the use of the <xref:System.Net.Sockets.TcpListener.BeginAcceptSocket%2A> method to create and connect a socket.</span></span> <span data-ttu-id="59012-286">Вызывает делегат обратного вызова <xref:System.Net.Sockets.TcpListener.EndAcceptSocket%2A> метод для завершения асинхронного запроса.</span><span class="sxs-lookup"><span data-stu-id="59012-286">The callback delegate calls the <xref:System.Net.Sockets.TcpListener.EndAcceptSocket%2A> method to end the asynchronous request.</span></span>  
  
 [!code-cpp[System.Net.Sockets.TcpListener1#4](~/samples/snippets/cpp/VS_Snippets_Remoting/System.Net.Sockets.TcpListener1/cpp/tcpserver.cpp#4)]
 [!code-csharp[System.Net.Sockets.TcpListener1#4](~/samples/snippets/csharp/VS_Snippets_Remoting/System.Net.Sockets.TcpListener1/CS/tcpserver.cs#4)]
 [!code-vb[System.Net.Sockets.TcpListener1#4](~/samples/snippets/visualbasic/VS_Snippets_Remoting/System.Net.Sockets.TcpListener1/VB/tcpserver.vb#4)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ObjectDisposedException">
          <span data-ttu-id="59012-287">Основной объект <see cref="T:System.Net.Sockets.Socket" /> закрыт.</span>
          <span class="sxs-lookup">
            <span data-stu-id="59012-287">The underlying <see cref="T:System.Net.Sockets.Socket" /> has been closed.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="59012-288">Параметр <paramref name="asyncResult" /> имеет значение <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="59012-288">The <paramref name="asyncResult" /> parameter is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="59012-289">Значение параметра <paramref name="asyncResult" /> не было создано при вызове метода <see cref="M:System.Net.Sockets.TcpListener.BeginAcceptSocket(System.AsyncCallback,System.Object)" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="59012-289">The <paramref name="asyncResult" /> parameter was not created by a call to the <see cref="M:System.Net.Sockets.TcpListener.BeginAcceptSocket(System.AsyncCallback,System.Object)" /> method.</span>
          </span>
        </exception>
        <exception cref="T:System.InvalidOperationException">
          <span data-ttu-id="59012-290">Был ранее вызван метод <see cref="M:System.Net.Sockets.TcpListener.EndAcceptSocket(System.IAsyncResult)" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="59012-290">The <see cref="M:System.Net.Sockets.TcpListener.EndAcceptSocket(System.IAsyncResult)" /> method was previously called.</span>
          </span>
        </exception>
        <exception cref="T:System.Net.Sockets.SocketException">
          <span data-ttu-id="59012-291">Произошла ошибка при попытке доступа к объекту <see cref="T:System.Net.Sockets.Socket" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="59012-291">An error occurred while attempting to access the <see cref="T:System.Net.Sockets.Socket" />.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="EndAcceptTcpClient">
      <MemberSignature Language="C#" Value="public System.Net.Sockets.TcpClient EndAcceptTcpClient (IAsyncResult asyncResult);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Net.Sockets.TcpClient EndAcceptTcpClient(class System.IAsyncResult asyncResult) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Sockets.TcpListener.EndAcceptTcpClient(System.IAsyncResult)" />
      <MemberSignature Language="VB.NET" Value="Public Function EndAcceptTcpClient (asyncResult As IAsyncResult) As TcpClient" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Net::Sockets::TcpClient ^ EndAcceptTcpClient(IAsyncResult ^ asyncResult);" />
      <MemberSignature Language="F#" Value="member this.EndAcceptTcpClient : IAsyncResult -&gt; System.Net.Sockets.TcpClient" Usage="tcpListener.EndAcceptTcpClient asyncResult" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.Sockets</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Net.Sockets.TcpClient</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="asyncResult" Type="System.IAsyncResult" />
      </Parameters>
      <Docs>
        <param name="asyncResult">
          <span data-ttu-id="59012-292">Объект <see cref="T:System.IAsyncResult" /> возвращен посредством вызова метода <see cref="M:System.Net.Sockets.TcpListener.BeginAcceptTcpClient(System.AsyncCallback,System.Object)" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="59012-292">An <see cref="T:System.IAsyncResult" /> returned by a call to the <see cref="M:System.Net.Sockets.TcpListener.BeginAcceptTcpClient(System.AsyncCallback,System.Object)" /> method.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="59012-293">Асинхронно принимает входящие попытки подключения и создает новый объект <see cref="T:System.Net.Sockets.TcpClient" /> для связи с удаленным узлом.</span>
          <span class="sxs-lookup">
            <span data-stu-id="59012-293">Asynchronously accepts an incoming connection attempt and creates a new <see cref="T:System.Net.Sockets.TcpClient" /> to handle remote host communication.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="59012-294">Объект <see cref="T:System.Net.Sockets.TcpClient" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="59012-294">A <see cref="T:System.Net.Sockets.TcpClient" />.</span>
          </span>
          <span data-ttu-id="59012-295">Объект <see cref="T:System.Net.Sockets.TcpClient" />, используемый для приема и передачи данных.</span>
          <span class="sxs-lookup">
            <span data-stu-id="59012-295">The <see cref="T:System.Net.Sockets.TcpClient" /> used to send and receive data.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="59012-296">Этот метод блокируется до операции завершения.</span><span class="sxs-lookup"><span data-stu-id="59012-296">This method blocks until the operation is complete.</span></span> <span data-ttu-id="59012-297">Для синхронного выполнения этой операции, используйте <xref:System.Net.Sockets.TcpListener.AcceptTcpClient%2A> метод.</span><span class="sxs-lookup"><span data-stu-id="59012-297">To perform this operation synchronously, use the <xref:System.Net.Sockets.TcpListener.AcceptTcpClient%2A> method.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="59012-298">Можно вызвать <xref:System.Net.Sockets.Socket.RemoteEndPoint%2A> свойства базового сокета (<xref:System.Net.Sockets.TcpClient.Client%2A>) для определения удаленного узла сетевой адрес и номер порта.</span><span class="sxs-lookup"><span data-stu-id="59012-298">You can call the <xref:System.Net.Sockets.Socket.RemoteEndPoint%2A> property of the underlying socket (<xref:System.Net.Sockets.TcpClient.Client%2A>) to identify the remote host's network address and port number.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="59012-299">При получении <xref:System.Net.Sockets.SocketException>, используйте <xref:System.Net.Sockets.SocketException.ErrorCode%2A?displayProperty=nameWithType> свойство, чтобы получить конкретный код ошибки и обратитесь к документации Windows Sockets версии 2 API ошибок кода в библиотеке MSDN по [ http://msdn.microsoft.com/library/ ](http://msdn.microsoft.com/library/) для подробные Описание ошибки.</span><span class="sxs-lookup"><span data-stu-id="59012-299">If you receive a <xref:System.Net.Sockets.SocketException>, use the <xref:System.Net.Sockets.SocketException.ErrorCode%2A?displayProperty=nameWithType> property to obtain the specific error code and refer to the Windows Sockets version 2 API error code documentation in the MSDN library at [http://msdn.microsoft.com/library/](http://msdn.microsoft.com/library/) for a detailed description of the error.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="59012-300">Данный член генерирует сведения трассировки, если в приложении включена трассировка сети.</span><span class="sxs-lookup"><span data-stu-id="59012-300">This member outputs trace information when you enable network tracing in your application.</span></span> <span data-ttu-id="59012-301">Дополнительные сведения см. в разделе [Трассировка сети в .NET Framework](~/docs/framework/network-programming/network-tracing.md).</span><span class="sxs-lookup"><span data-stu-id="59012-301">For more information, see [Network Tracing in the .NET Framework](~/docs/framework/network-programming/network-tracing.md).</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="59012-302">В следующем примере кода показано использование <xref:System.Net.Sockets.TcpListener.BeginAcceptTcpClient%2A> метод для создания и подключения сокета.</span><span class="sxs-lookup"><span data-stu-id="59012-302">The following code example demonstrates the use of the <xref:System.Net.Sockets.TcpListener.BeginAcceptTcpClient%2A> method to create and connect a socket.</span></span> <span data-ttu-id="59012-303">Вызывает делегат обратного вызова <xref:System.Net.Sockets.TcpListener.EndAcceptTcpClient%2A> метод для завершения асинхронного запроса.</span><span class="sxs-lookup"><span data-stu-id="59012-303">The callback delegate calls the <xref:System.Net.Sockets.TcpListener.EndAcceptTcpClient%2A> method to end the asynchronous request.</span></span>  
  
 [!code-cpp[System.Net.Sockets.TcpListener1#5](~/samples/snippets/cpp/VS_Snippets_Remoting/System.Net.Sockets.TcpListener1/cpp/tcpserver.cpp#5)]
 [!code-csharp[System.Net.Sockets.TcpListener1#5](~/samples/snippets/csharp/VS_Snippets_Remoting/System.Net.Sockets.TcpListener1/CS/tcpserver.cs#5)]
 [!code-vb[System.Net.Sockets.TcpListener1#5](~/samples/snippets/visualbasic/VS_Snippets_Remoting/System.Net.Sockets.TcpListener1/VB/tcpserver.vb#5)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ExclusiveAddressUse">
      <MemberSignature Language="C#" Value="public bool ExclusiveAddressUse { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool ExclusiveAddressUse" />
      <MemberSignature Language="DocId" Value="P:System.Net.Sockets.TcpListener.ExclusiveAddressUse" />
      <MemberSignature Language="VB.NET" Value="Public Property ExclusiveAddressUse As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool ExclusiveAddressUse { bool get(); void set(bool value); };" />
      <MemberSignature Language="F#" Value="member this.ExclusiveAddressUse : bool with get, set" Usage="System.Net.Sockets.TcpListener.ExclusiveAddressUse" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Sockets</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="59012-304">Возвращает или задает значение <see cref="T:System.Boolean" />, указывающее, позволяет ли объект <see cref="T:System.Net.Sockets.TcpListener" /> осуществлять ожидание передачи данных только на одном основном сокете на указанном порту.</span>
          <span class="sxs-lookup">
            <span data-stu-id="59012-304">Gets or sets a <see cref="T:System.Boolean" /> value that specifies whether the <see cref="T:System.Net.Sockets.TcpListener" /> allows only one underlying socket to listen to a specific port.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="59012-305">Значение <see langword="true" />, если объект <see cref="T:System.Net.Sockets.TcpListener" /> разрешает осуществлять ожидание передачи данных только на одном объекте <see cref="T:System.Net.Sockets.TcpListener" /> на указанном порту; в противном случае — значение <see langword="false" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="59012-305">
              <see langword="true" /> if the <see cref="T:System.Net.Sockets.TcpListener" /> allows only one <see cref="T:System.Net.Sockets.TcpListener" /> to listen to a specific port; otherwise, <see langword="false" />.</span>
          </span>
          <span data-ttu-id="59012-306">.</span>
          <span class="sxs-lookup">
            <span data-stu-id="59012-306">.</span>
          </span>
          <span data-ttu-id="59012-307">По умолчанию используется значение <see langword="true" /> для Windows Server 2003 и Windows XP с пакетом обновления 2 (SP2) и более поздней версии; для всех остальных версий по умолчанию используется значение <see langword="false" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="59012-307">The default is <see langword="true" /> for Windows Server 2003 and Windows XP Service Pack 2 and later, and <see langword="false" /> for all other versions.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="59012-308">По умолчанию несколько прослушивателей может прослушивать определенный порт.</span><span class="sxs-lookup"><span data-stu-id="59012-308">By default, multiple listeners can listen to a specific port.</span></span> <span data-ttu-id="59012-309">Однако только один из прослушивателей выполнять операции на сетевом трафике, отправляемом на порт.</span><span class="sxs-lookup"><span data-stu-id="59012-309">However, only one of the listeners can perform operations on the network traffic sent to the port.</span></span> <span data-ttu-id="59012-310">Если более одного прослушивателя пытается выполнить привязку к конкретному порту, тем более конкретные IP-адрес обрабатывает сетевого трафика, отправляемого на порт.</span><span class="sxs-lookup"><span data-stu-id="59012-310">If more than one listener attempts to bind to a particular port, then the one with the more specific IP address handles the network traffic sent to that port.</span></span> <span data-ttu-id="59012-311">Можно использовать <xref:System.Net.Sockets.Socket.ExclusiveAddressUse%2A> свойства, чтобы предотвратить прослушивание определенного порта несколько прослушивателей.</span><span class="sxs-lookup"><span data-stu-id="59012-311">You can use the <xref:System.Net.Sockets.Socket.ExclusiveAddressUse%2A> property to prevent multiple listeners from listening to a specific port.</span></span>  
  
 <span data-ttu-id="59012-312">Задать это свойство до вызова метода <xref:System.Net.Sockets.TcpListener.Start%2A>, или вызов <xref:System.Net.Sockets.TcpListener.Stop%2A> метод и задайте для этого свойства.</span><span class="sxs-lookup"><span data-stu-id="59012-312">Set this property before calling <xref:System.Net.Sockets.TcpListener.Start%2A>, or call the <xref:System.Net.Sockets.TcpListener.Stop%2A> method and then set this property.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="59012-313">В следующем примере кода возвращает и задает <xref:System.Net.Sockets.TcpListener.ExclusiveAddressUse%2A> свойства.</span><span class="sxs-lookup"><span data-stu-id="59012-313">The following code example gets and sets the <xref:System.Net.Sockets.TcpListener.ExclusiveAddressUse%2A> property.</span></span>  
  
 [!code-cpp[System.Net.Sockets.TcpListener1#2](~/samples/snippets/cpp/VS_Snippets_Remoting/System.Net.Sockets.TcpListener1/cpp/tcpserver.cpp#2)]
 [!code-csharp[System.Net.Sockets.TcpListener1#2](~/samples/snippets/csharp/VS_Snippets_Remoting/System.Net.Sockets.TcpListener1/CS/tcpserver.cs#2)]
 [!code-vb[System.Net.Sockets.TcpListener1#2](~/samples/snippets/visualbasic/VS_Snippets_Remoting/System.Net.Sockets.TcpListener1/VB/tcpserver.vb#2)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">
          <span data-ttu-id="59012-314">Объект <see cref="T:System.Net.Sockets.TcpListener" /> запущен.</span>
          <span class="sxs-lookup">
            <span data-stu-id="59012-314">The <see cref="T:System.Net.Sockets.TcpListener" /> has been started.</span>
          </span>
          <span data-ttu-id="59012-315">Вызовите метод <see cref="M:System.Net.Sockets.TcpListener.Stop" />, а затем задайте свойство <see cref="P:System.Net.Sockets.Socket.ExclusiveAddressUse" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="59012-315">Call the <see cref="M:System.Net.Sockets.TcpListener.Stop" /> method and then set the <see cref="P:System.Net.Sockets.Socket.ExclusiveAddressUse" /> property.</span>
          </span>
        </exception>
        <exception cref="T:System.Net.Sockets.SocketException">
          <span data-ttu-id="59012-316">Произошла ошибка при попытке доступа к основному сокету.</span>
          <span class="sxs-lookup">
            <span data-stu-id="59012-316">An error occurred when attempting to access the underlying socket.</span>
          </span>
        </exception>
        <exception cref="T:System.ObjectDisposedException">
          <span data-ttu-id="59012-317">Основной объект <see cref="T:System.Net.Sockets.Socket" /> закрыт.</span>
          <span class="sxs-lookup">
            <span data-stu-id="59012-317">The underlying <see cref="T:System.Net.Sockets.Socket" /> has been closed.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="Finalize">
      <MemberSignature Language="C#" Value="~TcpListener ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance void Finalize() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Sockets.TcpListener.Finalize" />
      <MemberSignature Language="VB.NET" Value="Finalize ()" />
      <MemberSignature Language="C++ CLI" Value="!TcpListener ()" />
      <MemberSignature Language="F#" Value="override this.Finalize : unit -&gt; unit" Usage="tcpListener.Finalize " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="LocalEndpoint">
      <MemberSignature Language="C#" Value="public System.Net.EndPoint LocalEndpoint { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Net.EndPoint LocalEndpoint" />
      <MemberSignature Language="DocId" Value="P:System.Net.Sockets.TcpListener.LocalEndpoint" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property LocalEndpoint As EndPoint" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Net::EndPoint ^ LocalEndpoint { System::Net::EndPoint ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.LocalEndpoint : System.Net.EndPoint" Usage="System.Net.Sockets.TcpListener.LocalEndpoint" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Sockets</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Net.EndPoint</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="59012-318">Получает основной объект <see cref="T:System.Net.EndPoint" /> для текущего объекта <see cref="T:System.Net.Sockets.TcpListener" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="59012-318">Gets the underlying <see cref="T:System.Net.EndPoint" /> of the current <see cref="T:System.Net.Sockets.TcpListener" />.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="59012-319">Объект <see cref="T:System.Net.EndPoint" />, с которым связан объект <see cref="T:System.Net.Sockets.Socket" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="59012-319">The <see cref="T:System.Net.EndPoint" /> to which the <see cref="T:System.Net.Sockets.Socket" /> is bound.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="59012-320">Можно использовать <xref:System.Net.Sockets.TcpListener.LocalEndpoint%2A> свойство для идентификации локальной сетевой интерфейс и номер порта, используемого для прослушивания входящих клиентских запросов на подключение после подключения к сокету.</span><span class="sxs-lookup"><span data-stu-id="59012-320">You can use the <xref:System.Net.Sockets.TcpListener.LocalEndpoint%2A> property to identify the local network interface and port number being used to listen for incoming client connection requests, after a socket connection has been made.</span></span> <span data-ttu-id="59012-321">Необходимо сначала привести <xref:System.Net.EndPoint> для <xref:System.Net.IPEndPoint>.</span><span class="sxs-lookup"><span data-stu-id="59012-321">You must first cast this <xref:System.Net.EndPoint> to an <xref:System.Net.IPEndPoint>.</span></span> <span data-ttu-id="59012-322">Затем можно вызвать <xref:System.Net.IPEndPoint.Address%2A?displayProperty=nameWithType> свойства, чтобы получить локальный IP-адрес и <xref:System.Net.IPEndPoint.Port%2A?displayProperty=nameWithType> свойства, чтобы получить имя локального порта.</span><span class="sxs-lookup"><span data-stu-id="59012-322">You can then call the <xref:System.Net.IPEndPoint.Address%2A?displayProperty=nameWithType> property to retrieve the local IP address, and the <xref:System.Net.IPEndPoint.Port%2A?displayProperty=nameWithType> property to retrieve the local port number.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="59012-323">В следующем примере кода отображаются локальный IP-адрес и порт номер, на котором <xref:System.Net.Sockets.TcpListener> прослушивание входящих запросов на подключение.</span><span class="sxs-lookup"><span data-stu-id="59012-323">The following code example displays the local IP address and port number on which the <xref:System.Net.Sockets.TcpListener> is listening for incoming connection requests.</span></span>  
  
 [!code-cpp[TcpListener_Pending_LocalEndPoint#1](~/samples/snippets/cpp/VS_Snippets_Remoting/TcpListener_Pending_LocalEndPoint/CPP/source.cpp#1)]
 [!code-csharp[TcpListener_Pending_LocalEndPoint#1](~/samples/snippets/csharp/VS_Snippets_Remoting/TcpListener_Pending_LocalEndPoint/CS/source.cs#1)]
 [!code-vb[TcpListener_Pending_LocalEndPoint#1](~/samples/snippets/visualbasic/VS_Snippets_Remoting/TcpListener_Pending_LocalEndPoint/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Net.Sockets.Socket.Listen(System.Int32)" />
        <altmember cref="T:System.Net.EndPoint" />
      </Docs>
    </Member>
    <Member MemberName="Pending">
      <MemberSignature Language="C#" Value="public bool Pending ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool Pending() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Sockets.TcpListener.Pending" />
      <MemberSignature Language="VB.NET" Value="Public Function Pending () As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool Pending();" />
      <MemberSignature Language="F#" Value="member this.Pending : unit -&gt; bool" Usage="tcpListener.Pending " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Sockets</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="59012-324">Определяет, имеются ли ожидающие запросы на подключение.</span>
          <span class="sxs-lookup">
            <span data-stu-id="59012-324">Determines if there are pending connection requests.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="59012-325">Значение <see langword="true" />, если имеются ожидающие подключения; в противном случае — <see langword="false" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="59012-325">
              <see langword="true" /> if connections are pending; otherwise, <see langword="false" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="59012-326">Это неблокирующий метод определяет, имеются все ожидающие запросы на подключение.</span><span class="sxs-lookup"><span data-stu-id="59012-326">This non-blocking method determines if there are any pending connection requests.</span></span> <span data-ttu-id="59012-327">Поскольку <xref:System.Net.Sockets.TcpListener.AcceptSocket%2A> и <xref:System.Net.Sockets.TcpListener.AcceptTcpClient%2A> методов блокировки выполнения до <xref:System.Net.Sockets.TcpListener.Start%2A> метод поставил в очередь входящий запрос на подключение, <xref:System.Net.Sockets.TcpListener.Pending%2A> метод может использоваться для определения доступных подключений перед попыткой принять их.</span><span class="sxs-lookup"><span data-stu-id="59012-327">Because the <xref:System.Net.Sockets.TcpListener.AcceptSocket%2A> and <xref:System.Net.Sockets.TcpListener.AcceptTcpClient%2A> methods block execution until the <xref:System.Net.Sockets.TcpListener.Start%2A> method has queued an incoming connection request, the <xref:System.Net.Sockets.TcpListener.Pending%2A> method can be used to determine if connections are available before attempting to accept them.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="59012-328">В следующем примере кода в примере выполняется проверка <xref:System.Net.Sockets.TcpListener.Pending%2A> метод.</span><span class="sxs-lookup"><span data-stu-id="59012-328">The following code example checks the <xref:System.Net.Sockets.TcpListener.Pending%2A> method.</span></span> <span data-ttu-id="59012-329">Если запрос на подключение был принят, затем вызов <xref:System.Net.Sockets.TcpListener.AcceptTcpClient%2A> метода.</span><span class="sxs-lookup"><span data-stu-id="59012-329">If a connection request is waiting to be accepted, then a call to the <xref:System.Net.Sockets.TcpListener.AcceptTcpClient%2A> method is made.</span></span>  
  
 [!code-cpp[TcpListener_Pending_LocalEndPoint#1](~/samples/snippets/cpp/VS_Snippets_Remoting/TcpListener_Pending_LocalEndPoint/CPP/source.cpp#1)]
 [!code-csharp[TcpListener_Pending_LocalEndPoint#1](~/samples/snippets/csharp/VS_Snippets_Remoting/TcpListener_Pending_LocalEndPoint/CS/source.cs#1)]
 [!code-vb[TcpListener_Pending_LocalEndPoint#1](~/samples/snippets/visualbasic/VS_Snippets_Remoting/TcpListener_Pending_LocalEndPoint/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">
          <span data-ttu-id="59012-330">Слушатель не запущен с помощью вызова метода <see cref="M:System.Net.Sockets.TcpListener.Start" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="59012-330">The listener has not been started with a call to <see cref="M:System.Net.Sockets.TcpListener.Start" />.</span>
          </span>
        </exception>
        <altmember cref="M:System.Net.Sockets.TcpListener.Start" />
        <altmember cref="M:System.Net.Sockets.TcpListener.AcceptSocket" />
        <altmember cref="M:System.Net.Sockets.TcpListener.AcceptTcpClient" />
      </Docs>
    </Member>
    <Member MemberName="Server">
      <MemberSignature Language="C#" Value="public System.Net.Sockets.Socket Server { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Net.Sockets.Socket Server" />
      <MemberSignature Language="DocId" Value="P:System.Net.Sockets.TcpListener.Server" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Server As Socket" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Net::Sockets::Socket ^ Server { System::Net::Sockets::Socket ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.Server : System.Net.Sockets.Socket" Usage="System.Net.Sockets.TcpListener.Server" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Sockets</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Net.Sockets.Socket</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="59012-331">Получает основной сетевой объект <see cref="T:System.Net.Sockets.Socket" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="59012-331">Gets the underlying network <see cref="T:System.Net.Sockets.Socket" />.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="59012-332">Базовый объект <see cref="T:System.Net.Sockets.Socket" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="59012-332">The underlying <see cref="T:System.Net.Sockets.Socket" />.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="59012-333"><xref:System.Net.Sockets.TcpListener> Создает <xref:System.Net.Sockets.Socket> для прослушивания входящих клиентских запросов на подключение.</span><span class="sxs-lookup"><span data-stu-id="59012-333"><xref:System.Net.Sockets.TcpListener> creates a <xref:System.Net.Sockets.Socket> to listen for incoming client connection requests.</span></span> <span data-ttu-id="59012-334">Классы, производные от <xref:System.Net.Sockets.TcpListener> это свойство можно использовать для получения этого <xref:System.Net.Sockets.Socket>.</span><span class="sxs-lookup"><span data-stu-id="59012-334">Classes deriving from <xref:System.Net.Sockets.TcpListener> can use this property to get this <xref:System.Net.Sockets.Socket>.</span></span> <span data-ttu-id="59012-335">Используйте основной <xref:System.Net.Sockets.Socket> возвращенных <xref:System.Net.Sockets.TcpListener.Server%2A> свойство, если требуется доступа, чем, который <xref:System.Net.Sockets.TcpListener> предоставляет.</span><span class="sxs-lookup"><span data-stu-id="59012-335">Use the underlying <xref:System.Net.Sockets.Socket> returned by the <xref:System.Net.Sockets.TcpListener.Server%2A> property if you require access beyond that which <xref:System.Net.Sockets.TcpListener> provides.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="59012-336"><xref:System.Net.Sockets.TcpListener.Server%2A> Свойство возвращает только <xref:System.Net.Sockets.Socket> используемый для прослушивания входящих клиентских запросов на подключение.</span><span class="sxs-lookup"><span data-stu-id="59012-336">The <xref:System.Net.Sockets.TcpListener.Server%2A> property only returns the <xref:System.Net.Sockets.Socket> used to listen for incoming client connection requests.</span></span> <span data-ttu-id="59012-337">Используйте <xref:System.Net.Sockets.TcpListener.AcceptSocket%2A> метод для принятия ожидающего запроса на подключение и для получения <xref:System.Net.Sockets.Socket> для отправки и получения данных.</span><span class="sxs-lookup"><span data-stu-id="59012-337">Use the <xref:System.Net.Sockets.TcpListener.AcceptSocket%2A> method to accept a pending connection request and obtain a <xref:System.Net.Sockets.Socket> for sending and receiving data.</span></span> <span data-ttu-id="59012-338">Можно также использовать <xref:System.Net.Sockets.TcpListener.AcceptTcpClient%2A> метод для принятия ожидающего запроса на подключение и для получения <xref:System.Net.Sockets.TcpClient> для отправки и получения данных.</span><span class="sxs-lookup"><span data-stu-id="59012-338">You can also use the <xref:System.Net.Sockets.TcpListener.AcceptTcpClient%2A> method to accept a pending connection request and obtain a <xref:System.Net.Sockets.TcpClient> for sending and receiving data.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="59012-339">В следующем примере кода показано использование <xref:System.Net.Sockets.TcpListener.Server%2A> свойство.</span><span class="sxs-lookup"><span data-stu-id="59012-339">The following code example demonstrates the use of the <xref:System.Net.Sockets.TcpListener.Server%2A> property.</span></span> <span data-ttu-id="59012-340">Базовый <xref:System.Net.Sockets.Socket> извлекается и <xref:System.Net.Sockets.SocketOptionName.Linger> <xref:System.Net.Sockets.Socket> параметр требует времени ожидания после 10 секунд, если данные по-прежнему находится в сетевом буфере после закрытия соединения.</span><span class="sxs-lookup"><span data-stu-id="59012-340">The underlying <xref:System.Net.Sockets.Socket> is retrieved and the <xref:System.Net.Sockets.SocketOptionName.Linger><xref:System.Net.Sockets.Socket> option is configured to time out after 10 seconds if data still remains in the network buffer after the connection is closed.</span></span>  
  
 [!code-csharp[TcpListenerProtectedMembers1#1](~/samples/snippets/csharp/VS_Snippets_Remoting/TcpListenerProtectedMembers1/CS/source.cs#1)]
 [!code-vb[TcpListenerProtectedMembers1#1](~/samples/snippets/visualbasic/VS_Snippets_Remoting/TcpListenerProtectedMembers1/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Net.Sockets.Socket" />
        <altmember cref="M:System.Net.Sockets.TcpListener.AcceptSocket" />
        <altmember cref="M:System.Net.Sockets.TcpListener.AcceptTcpClient" />
      </Docs>
    </Member>
    <MemberGroup MemberName="Start">
      <AssemblyInfo>
        <AssemblyName>System.Net.Sockets</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="59012-341">Запускает ожидание входящих запросов на подключение.</span>
          <span class="sxs-lookup">
            <span data-stu-id="59012-341">Starts listening for incoming connection requests.</span>
          </span>
        </summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Start">
      <MemberSignature Language="C#" Value="public void Start ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Start() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Sockets.TcpListener.Start" />
      <MemberSignature Language="VB.NET" Value="Public Sub Start ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Start();" />
      <MemberSignature Language="F#" Value="member this.Start : unit -&gt; unit" Usage="tcpListener.Start " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Sockets</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="59012-342">Запускает ожидание входящих запросов на подключение.</span>
          <span class="sxs-lookup">
            <span data-stu-id="59012-342">Starts listening for incoming connection requests.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="59012-343"><xref:System.Net.Sockets.TcpListener.Start%2A> Метод инициализирует базовый <xref:System.Net.Sockets.Socket>, связывает его с локальной конечной точкой и выполняет прослушивание входящих попыток подключения.</span><span class="sxs-lookup"><span data-stu-id="59012-343">The <xref:System.Net.Sockets.TcpListener.Start%2A> method initializes the underlying <xref:System.Net.Sockets.Socket>, binds it to a local endpoint, and listens for incoming connection attempts.</span></span> <span data-ttu-id="59012-344">Если получен запрос на подключение, <xref:System.Net.Sockets.TcpListener.Start%2A> будет поместить запрос в очередь и продолжит ожидание дополнительные запросы, пока не будет вызван метод <xref:System.Net.Sockets.TcpListener.Stop%2A> метод.</span><span class="sxs-lookup"><span data-stu-id="59012-344">If a connection request is received, the <xref:System.Net.Sockets.TcpListener.Start%2A> method will queue the request and continue listening for additional requests until you call the <xref:System.Net.Sockets.TcpListener.Stop%2A> method.</span></span> <span data-ttu-id="59012-345">Если <xref:System.Net.Sockets.TcpListener> получает запрос на соединение после его в очереди уже имеется максимальное число подключений, он будет вызывать <xref:System.Net.Sockets.SocketException> на стороне клиента.</span><span class="sxs-lookup"><span data-stu-id="59012-345">If <xref:System.Net.Sockets.TcpListener> receives a connection request after it has already queued the maximum number of connections, it will throw a <xref:System.Net.Sockets.SocketException> on the client.</span></span>  
  
 <span data-ttu-id="59012-346">Чтобы удалить подключение из входной очереди, используйте <xref:System.Net.Sockets.TcpListener.AcceptTcpClient%2A> метода или <xref:System.Net.Sockets.TcpListener.AcceptSocket%2A> метод.</span><span class="sxs-lookup"><span data-stu-id="59012-346">To remove a connection from the incoming connection queue, use either the <xref:System.Net.Sockets.TcpListener.AcceptTcpClient%2A> method or the <xref:System.Net.Sockets.TcpListener.AcceptSocket%2A> method.</span></span> <span data-ttu-id="59012-347"><xref:System.Net.Sockets.TcpListener.AcceptTcpClient%2A> Удалит подключение из очереди и возвращать метод <xref:System.Net.Sockets.TcpClient> , можно использовать для отправки и получения данных.</span><span class="sxs-lookup"><span data-stu-id="59012-347">The <xref:System.Net.Sockets.TcpListener.AcceptTcpClient%2A> method will remove a connection from the queue and return a <xref:System.Net.Sockets.TcpClient> that you can use to send and receive data.</span></span> <span data-ttu-id="59012-348"><xref:System.Net.Sockets.TcpListener.AcceptSocket%2A> Метод будет возвращать <xref:System.Net.Sockets.Socket> , можно использовать для сделайте то же самое.</span><span class="sxs-lookup"><span data-stu-id="59012-348">The <xref:System.Net.Sockets.TcpListener.AcceptSocket%2A> method will return a <xref:System.Net.Sockets.Socket> that you can use to do the same.</span></span> <span data-ttu-id="59012-349">Если приложению требуется только синхронный ввод-вывод, используйте <xref:System.Net.Sockets.TcpListener.AcceptTcpClient%2A>.</span><span class="sxs-lookup"><span data-stu-id="59012-349">If your application only requires synchronous I/O, use <xref:System.Net.Sockets.TcpListener.AcceptTcpClient%2A>.</span></span> <span data-ttu-id="59012-350">Для детального контроля поведения используйте <xref:System.Net.Sockets.TcpListener.AcceptSocket%2A>.</span><span class="sxs-lookup"><span data-stu-id="59012-350">For more detailed behavioral control, use <xref:System.Net.Sockets.TcpListener.AcceptSocket%2A>.</span></span> <span data-ttu-id="59012-351">Оба эти метода блокированными, пока запрос на подключение в очереди.</span><span class="sxs-lookup"><span data-stu-id="59012-351">Both of these methods block until a connection request is available in the queue.</span></span>  
  
 <span data-ttu-id="59012-352">Используйте <xref:System.Net.Sockets.TcpListener.Stop%2A> метод закрытия <xref:System.Net.Sockets.TcpListener> и прекратить прослушивание.</span><span class="sxs-lookup"><span data-stu-id="59012-352">Use the <xref:System.Net.Sockets.TcpListener.Stop%2A> method to close the <xref:System.Net.Sockets.TcpListener> and stop listening.</span></span> <span data-ttu-id="59012-353">Вы несете ответственность за закрытие каждого из принятых подключений отдельно.</span><span class="sxs-lookup"><span data-stu-id="59012-353">You are responsible for closing your accepted connections separately.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="59012-354">Данный член генерирует сведения трассировки, если в приложении включена трассировка сети.</span><span class="sxs-lookup"><span data-stu-id="59012-354">This member outputs trace information when you enable network tracing in your application.</span></span> <span data-ttu-id="59012-355">Дополнительные сведения см. в разделе [Трассировка сети в .NET Framework](~/docs/framework/network-programming/network-tracing.md).</span><span class="sxs-lookup"><span data-stu-id="59012-355">For more information, see [Network Tracing in the .NET Framework](~/docs/framework/network-programming/network-tracing.md).</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="59012-356">В следующем примере кода показано, как <xref:System.Net.Sockets.TcpListener.Start%2A> используется для прослушивания входящих попыток клиентских подключений.</span><span class="sxs-lookup"><span data-stu-id="59012-356">The following code example demonstrates how <xref:System.Net.Sockets.TcpListener.Start%2A> is used to listen for incoming client connection attempts.</span></span>  
  
 [!code-cpp[System.Net.Sockets.TcpListener1#3](~/samples/snippets/cpp/VS_Snippets_Remoting/System.Net.Sockets.TcpListener1/cpp/tcpserver.cpp#3)]
 [!code-csharp[System.Net.Sockets.TcpListener1#3](~/samples/snippets/csharp/VS_Snippets_Remoting/System.Net.Sockets.TcpListener1/CS/tcpserver.cs#3)]
 [!code-vb[System.Net.Sockets.TcpListener1#3](~/samples/snippets/visualbasic/VS_Snippets_Remoting/System.Net.Sockets.TcpListener1/VB/tcpserver.vb#3)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Net.Sockets.SocketException">
          <span data-ttu-id="59012-357">Для получения кода ошибки можно воспользоваться свойством <see cref="P:System.Net.Sockets.SocketException.ErrorCode" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="59012-357">Use the <see cref="P:System.Net.Sockets.SocketException.ErrorCode" /> property to obtain the specific error code.</span>
          </span>
          <span data-ttu-id="59012-358">Получив этот код, можно обратиться за подробным описанием ошибки к документации по кодам ошибок API для сокетов Windows версии 2 в библиотеке MSDN.</span>
          <span class="sxs-lookup">
            <span data-stu-id="59012-358">When you have obtained this code, you can refer to the Windows Sockets version 2 API error code documentation in MSDN for a detailed description of the error.</span>
          </span>
        </exception>
        <altmember cref="M:System.Net.Sockets.Socket.Listen(System.Int32)" />
        <altmember cref="M:System.Net.Sockets.Socket.Bind(System.Net.EndPoint)" />
        <altmember cref="M:System.Net.Sockets.TcpListener.AcceptTcpClient" />
        <altmember cref="M:System.Net.Sockets.TcpListener.Stop" />
      </Docs>
    </Member>
    <Member MemberName="Start">
      <MemberSignature Language="C#" Value="public void Start (int backlog);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Start(int32 backlog) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Sockets.TcpListener.Start(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Start (backlog As Integer)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Start(int backlog);" />
      <MemberSignature Language="F#" Value="member this.Start : int -&gt; unit" Usage="tcpListener.Start backlog" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Sockets</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="backlog" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="backlog">
          <span data-ttu-id="59012-359">Максимальная длина очереди ожидающих подключений.</span>
          <span class="sxs-lookup">
            <span data-stu-id="59012-359">The maximum length of the pending connections queue.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="59012-360">Запускает ожидание входящих запросов на подключение с максимальным числом ожидающих подключений.</span>
          <span class="sxs-lookup">
            <span data-stu-id="59012-360">Starts listening for incoming connection requests with a maximum number of pending connection.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="59012-361"><xref:System.Net.Sockets.TcpListener.Start%2A> Метод инициализирует базовый <xref:System.Net.Sockets.Socket>, связывает его с локальной конечной точкой и выполняет прослушивание входящих попыток подключения.</span><span class="sxs-lookup"><span data-stu-id="59012-361">The <xref:System.Net.Sockets.TcpListener.Start%2A> method initializes the underlying <xref:System.Net.Sockets.Socket>, binds it to a local endpoint, and listens for incoming connection attempts.</span></span> <span data-ttu-id="59012-362">Если получен запрос на подключение, <xref:System.Net.Sockets.TcpListener.Start%2A> будет поместить запрос в очередь и продолжит ожидание дополнительные запросы, пока не будет вызван <xref:System.Net.Sockets.TcpListener.Stop%2A> метод.</span><span class="sxs-lookup"><span data-stu-id="59012-362">If a connection request is received, <xref:System.Net.Sockets.TcpListener.Start%2A> will queue the request and continue listening for additional requests until you call the <xref:System.Net.Sockets.TcpListener.Stop%2A> method.</span></span> <span data-ttu-id="59012-363">Если <xref:System.Net.Sockets.TcpListener> получает запрос на соединение после его в очереди уже имеется максимальное число подключений, он будет вызывать <xref:System.Net.Sockets.SocketException> на стороне клиента.</span><span class="sxs-lookup"><span data-stu-id="59012-363">If <xref:System.Net.Sockets.TcpListener> receives a connection request after it has already queued the maximum number of connections it will throw a <xref:System.Net.Sockets.SocketException> on the client.</span></span>  
  
 <span data-ttu-id="59012-364">Чтобы удалить подключение из входной очереди, используйте <xref:System.Net.Sockets.TcpListener.AcceptTcpClient%2A> метода или <xref:System.Net.Sockets.TcpListener.AcceptSocket%2A> метод.</span><span class="sxs-lookup"><span data-stu-id="59012-364">To remove a connection from the incoming connection queue, use either the <xref:System.Net.Sockets.TcpListener.AcceptTcpClient%2A> method or the <xref:System.Net.Sockets.TcpListener.AcceptSocket%2A> method.</span></span> <span data-ttu-id="59012-365"><xref:System.Net.Sockets.TcpListener.AcceptTcpClient%2A> Удалит подключение из очереди и возвращать метод <xref:System.Net.Sockets.TcpClient> , можно использовать для отправки и получения данных.</span><span class="sxs-lookup"><span data-stu-id="59012-365">The <xref:System.Net.Sockets.TcpListener.AcceptTcpClient%2A> method will remove a connection from the queue and return a <xref:System.Net.Sockets.TcpClient> that you can use to send and receive data.</span></span> <span data-ttu-id="59012-366"><xref:System.Net.Sockets.TcpListener.AcceptSocket%2A> Метод будет возвращать <xref:System.Net.Sockets.Socket> , можно использовать для сделайте то же самое.</span><span class="sxs-lookup"><span data-stu-id="59012-366">The <xref:System.Net.Sockets.TcpListener.AcceptSocket%2A> method will return a <xref:System.Net.Sockets.Socket> that you can use to do the same.</span></span> <span data-ttu-id="59012-367">Если приложению требуется только синхронный ввод-вывод, используйте <xref:System.Net.Sockets.TcpListener.AcceptTcpClient%2A>.</span><span class="sxs-lookup"><span data-stu-id="59012-367">If your application only requires synchronous I/O, use the <xref:System.Net.Sockets.TcpListener.AcceptTcpClient%2A>.</span></span> <span data-ttu-id="59012-368">Для детального контроля поведения используйте <xref:System.Net.Sockets.TcpListener.AcceptSocket%2A> метод.</span><span class="sxs-lookup"><span data-stu-id="59012-368">For more detailed behavioral control, use <xref:System.Net.Sockets.TcpListener.AcceptSocket%2A> method.</span></span> <span data-ttu-id="59012-369">Оба эти метода блокированными, пока запрос на подключение в очереди.</span><span class="sxs-lookup"><span data-stu-id="59012-369">Both of these methods block until a connection request is available in the queue.</span></span>  
  
 <span data-ttu-id="59012-370">Используйте <xref:System.Net.Sockets.TcpListener.Stop%2A> метод закрытия <xref:System.Net.Sockets.TcpListener> и прекратить прослушивание.</span><span class="sxs-lookup"><span data-stu-id="59012-370">Use the <xref:System.Net.Sockets.TcpListener.Stop%2A> method to close the <xref:System.Net.Sockets.TcpListener> and stop listening.</span></span> <span data-ttu-id="59012-371">Вы несете ответственность за закрытие каждого из принятых подключений отдельно.</span><span class="sxs-lookup"><span data-stu-id="59012-371">You are responsible for closing your accepted connections separately.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="59012-372">Используйте <xref:System.Net.Sockets.SocketException.ErrorCode%2A?displayProperty=nameWithType> свойство, чтобы получить конкретный код ошибки и обратитесь к документации Windows Sockets версии 2 API ошибок кода в библиотеке MSDN по [ http://msdn.microsoft.com/library/ ](http://msdn.microsoft.com/library/) подробное описание ошибки.</span><span class="sxs-lookup"><span data-stu-id="59012-372">Use the <xref:System.Net.Sockets.SocketException.ErrorCode%2A?displayProperty=nameWithType> property to obtain the specific error code and refer to the Windows Sockets version 2 API error code documentation in the MSDN library at [http://msdn.microsoft.com/library/](http://msdn.microsoft.com/library/) for a detailed description of the error.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="59012-373">Данный член генерирует сведения трассировки, если в приложении включена трассировка сети.</span><span class="sxs-lookup"><span data-stu-id="59012-373">This member outputs trace information when you enable network tracing in your application.</span></span> <span data-ttu-id="59012-374">Дополнительные сведения см. в разделе [Трассировка сети в .NET Framework](~/docs/framework/network-programming/network-tracing.md).</span><span class="sxs-lookup"><span data-stu-id="59012-374">For more information, see [Network Tracing in the .NET Framework](~/docs/framework/network-programming/network-tracing.md).</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="59012-375">В следующем примере кода показано, как <xref:System.Net.Sockets.TcpListener.Start%2A> используется для прослушивания входящих попыток клиентских подключений.</span><span class="sxs-lookup"><span data-stu-id="59012-375">The following code example demonstrates how <xref:System.Net.Sockets.TcpListener.Start%2A> is used to listen for incoming client connection attempts.</span></span>  
  
 [!code-cpp[System.Net.Sockets.TcpListener1#3](~/samples/snippets/cpp/VS_Snippets_Remoting/System.Net.Sockets.TcpListener1/cpp/tcpserver.cpp#3)]
 [!code-csharp[System.Net.Sockets.TcpListener1#3](~/samples/snippets/csharp/VS_Snippets_Remoting/System.Net.Sockets.TcpListener1/CS/tcpserver.cs#3)]
 [!code-vb[System.Net.Sockets.TcpListener1#3](~/samples/snippets/visualbasic/VS_Snippets_Remoting/System.Net.Sockets.TcpListener1/VB/tcpserver.vb#3)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Net.Sockets.SocketException">
          <span data-ttu-id="59012-376">Произошла ошибка при получении доступа к сокету.</span>
          <span class="sxs-lookup">
            <span data-stu-id="59012-376">An error occurred while accessing the socket.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <span data-ttu-id="59012-377">Значение параметра <paramref name="backlog" /> меньше нуля или превышает максимальное число разрешенных подключений.</span>
          <span class="sxs-lookup">
            <span data-stu-id="59012-377">The <paramref name="backlog" /> parameter is less than zero or exceeds the maximum number of permitted connections.</span>
          </span>
        </exception>
        <exception cref="T:System.InvalidOperationException">
          <span data-ttu-id="59012-378">Основной объект <see cref="T:System.Net.Sockets.Socket" /> имеет значение null.</span>
          <span class="sxs-lookup">
            <span data-stu-id="59012-378">The underlying <see cref="T:System.Net.Sockets.Socket" /> is null.</span>
          </span>
        </exception>
        <altmember cref="M:System.Net.Sockets.Socket.Listen(System.Int32)" />
        <altmember cref="M:System.Net.Sockets.Socket.Bind(System.Net.EndPoint)" />
        <altmember cref="M:System.Net.Sockets.TcpListener.AcceptTcpClient" />
        <altmember cref="M:System.Net.Sockets.TcpListener.AcceptSocket" />
        <altmember cref="M:System.Net.Sockets.TcpListener.Stop" />
      </Docs>
    </Member>
    <Member MemberName="Stop">
      <MemberSignature Language="C#" Value="public void Stop ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Stop() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Sockets.TcpListener.Stop" />
      <MemberSignature Language="VB.NET" Value="Public Sub Stop ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Stop();" />
      <MemberSignature Language="F#" Value="member this.Stop : unit -&gt; unit" Usage="tcpListener.Stop " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Sockets</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="59012-379">Закрывает слушатель.</span>
          <span class="sxs-lookup">
            <span data-stu-id="59012-379">Closes the listener.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="59012-380"><xref:System.Net.Sockets.TcpListener.Stop%2A> Закрывает прослушиватель.</span><span class="sxs-lookup"><span data-stu-id="59012-380"><xref:System.Net.Sockets.TcpListener.Stop%2A> closes the listener.</span></span> <span data-ttu-id="59012-381">Запросы на подключение, неподдерживаемого в очереди будут потеряны.</span><span class="sxs-lookup"><span data-stu-id="59012-381">Any unaccepted connection requests in the queue will be lost.</span></span> <span data-ttu-id="59012-382">Вызовет удаленных узлов, Ожидание подключения могут быть приняты <xref:System.Net.Sockets.SocketException>.</span><span class="sxs-lookup"><span data-stu-id="59012-382">Remote hosts waiting for a connection to be accepted will throw a <xref:System.Net.Sockets.SocketException>.</span></span> <span data-ttu-id="59012-383">Вы несете ответственность за закрытие каждого из принятых подключений отдельно.</span><span class="sxs-lookup"><span data-stu-id="59012-383">You are responsible for closing your accepted connections separately.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="59012-384">Данный член генерирует сведения трассировки, если в приложении включена трассировка сети.</span><span class="sxs-lookup"><span data-stu-id="59012-384">This member outputs trace information when you enable network tracing in your application.</span></span> <span data-ttu-id="59012-385">Дополнительные сведения см. в разделе [Трассировка сети в .NET Framework](~/docs/framework/network-programming/network-tracing.md).</span><span class="sxs-lookup"><span data-stu-id="59012-385">For more information, see [Network Tracing in the .NET Framework](~/docs/framework/network-programming/network-tracing.md).</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="59012-386">В следующем примере кода показано использование <xref:System.Net.Sockets.TcpListener.Stop%2A> метод закрытия базового <xref:System.Net.Sockets.Socket>.</span><span class="sxs-lookup"><span data-stu-id="59012-386">The following code example demonstrates using the <xref:System.Net.Sockets.TcpListener.Stop%2A> method to close the underlying <xref:System.Net.Sockets.Socket>.</span></span>  
  
 [!code-cpp[System.Net.Sockets.TcpListener#1](~/samples/snippets/cpp/VS_Snippets_Remoting/System.Net.Sockets.TcpListener/CPP/tcpserver.cpp#1)]
 [!code-csharp[System.Net.Sockets.TcpListener#1](~/samples/snippets/csharp/VS_Snippets_Remoting/System.Net.Sockets.TcpListener/CS/tcpserver.cs#1)]
 [!code-vb[System.Net.Sockets.TcpListener#1](~/samples/snippets/visualbasic/VS_Snippets_Remoting/System.Net.Sockets.TcpListener/VB/tcpserver.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Net.Sockets.SocketException">
          <span data-ttu-id="59012-387">Для получения кода ошибки можно воспользоваться свойством <see cref="P:System.Net.Sockets.SocketException.ErrorCode" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="59012-387">Use the <see cref="P:System.Net.Sockets.SocketException.ErrorCode" /> property to obtain the specific error code.</span>
          </span>
          <span data-ttu-id="59012-388">Получив этот код, можно обратиться за подробным описанием ошибки к документации по кодам ошибок API для сокетов Windows версии 2 в библиотеке MSDN.</span>
          <span class="sxs-lookup">
            <span data-stu-id="59012-388">When you have obtained this code, you can refer to the Windows Sockets version 2 API error code documentation in MSDN for a detailed description of the error.</span>
          </span>
        </exception>
        <block subset="none" type="usage">
          <span data-ttu-id="59012-389">
            <para>
              <see cref="M:System.Net.Sockets.TcpListener.Stop" /> Метод закрывает основной <see cref="T:System.Net.Sockets.Socket" />и создает новый <see cref="T:System.Net.Sockets.Socket" /> для <see cref="T:System.Net.Sockets.TcpListener" />. Если значение любого свойства для базового <see cref="T:System.Net.Sockets.Socket" /> до вызова метода <see cref="M:System.Net.Sockets.TcpListener.Stop" /> метод, эти свойства будут не переносятся в новый <see cref="T:System.Net.Sockets.Socket" />.</para>
          </span>
          <span class="sxs-lookup">
            <span data-stu-id="59012-389">
              <para>The <see cref="M:System.Net.Sockets.TcpListener.Stop" /> method also closes the underlying <see cref="T:System.Net.Sockets.Socket" />, and creates a new <see cref="T:System.Net.Sockets.Socket" /> for the <see cref="T:System.Net.Sockets.TcpListener" />. If you set any properties on the underlying <see cref="T:System.Net.Sockets.Socket" /> prior to calling the <see cref="M:System.Net.Sockets.TcpListener.Stop" /> method, those properties will not carry over to the new <see cref="T:System.Net.Sockets.Socket" />.</para>
            </span>
          </span>
        </block>
        <altmember cref="M:System.Net.Sockets.Socket.Close" />
      </Docs>
    </Member>
  </Members>
</Type>