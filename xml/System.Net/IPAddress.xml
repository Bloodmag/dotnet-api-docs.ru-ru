<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" version="1.2" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="IPAddress.xml" source-language="en-US" target-language="ru-RU">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-15c36f0" tool-company="Microsoft" />
      <xliffext:skl_file_name xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">02cd5861-7ce2-4a82-b358-31f8435a0ac5b382b2e424f3335e396090615b29820d1cd62c1d.skl</xliffext:skl_file_name>
      <xliffext:version xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">1.2</xliffext:version>
      <xliffext:ms.openlocfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">b382b2e424f3335e396090615b29820d1cd62c1d</xliffext:ms.openlocfilehash>
      <xliffext:ms.sourcegitcommit xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">d31dc2ede16f6f7bc64e90d9f897ff54c4e3869b</xliffext:ms.sourcegitcommit>
      <xliffext:ms.lasthandoff xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">04/03/2018</xliffext:ms.lasthandoff>
      <xliffext:moniker_ids xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">netcore-1.0,netcore-1.1,netcore-2.0,netcore-2.1,netframework-4.5.1,netframework-4.5.2,netframework-4.5,netframework-4.6.1,netframework-4.6.2,netframework-4.6,netframework-4.7.1,netframework-4.7,netstandard-1.3,netstandard-1.4,netstandard-1.6,netstandard-2.0,xamarinandroid-7.1,xamarinios-10.8,xamarinmac-3.0</xliffext:moniker_ids>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve" uid="T:System.Net.IPAddress">
          <source>Provides an Internet Protocol (IP) address.</source>
          
        </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Net.IPAddress">
          <source>The <ph id="ph1">&lt;xref:System.Net.IPAddress&gt;</ph> class contains the address of a computer on an IP network.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Net.IPAddress&gt;</ph> Класс содержит адрес компьютера в IP-сети.</target>       </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Net.IPAddress">
          <source>The following code example shows how to query a server to obtain the family addresses and the IP addresses it supports.</source>
          <target state="translated">В следующем примере кода показано, как для запроса к серверу для получения семейства адресов и IP-адреса, он поддерживает.</target>       </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve" uid="T:System.Net.IPAddress">
          <source>Initializes a new instance of the <ph id="ph1">&lt;see cref="T:System.Net.IPAddress" /&gt;</ph> class.</source>
          
        </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve" uid="M:System.Net.IPAddress.#ctor(System.Byte[])">
          <source>The byte array value of the IP address.</source>
          
        </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve" uid="M:System.Net.IPAddress.#ctor(System.Byte[])">
          <source>Initializes a new instance of the <ph id="ph1">&lt;see cref="T:System.Net.IPAddress" /&gt;</ph> class with the address specified as a <ph id="ph2">&lt;see cref="T:System.Byte" /&gt;</ph> array.</source>
          
        </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Net.IPAddress.#ctor(System.Byte[])">
          <source>The <ph id="ph1">&lt;xref:System.Net.IPAddress&gt;</ph> is created with the <ph id="ph2">&lt;xref:System.Net.IPAddress.Address%2A&gt;</ph> property set to <ph id="ph3">`address`</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Net.IPAddress&gt;</ph> Создается с <ph id="ph2">&lt;xref:System.Net.IPAddress.Address%2A&gt;</ph> свойство <ph id="ph3">`address`</ph>.</target>       </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Net.IPAddress.#ctor(System.Byte[])">
          <source>If the length of <ph id="ph1">`address`</ph> is 4, <ph id="ph2">&lt;xref:System.Net.IPAddress.%23ctor%28System.Byte%5B%5D%29&gt;</ph> constructs an IPv4 address; otherwise, an IPv6 address with a scope of 0 is constructed.</source>
          <target state="translated">Если длина <ph id="ph1">`address`</ph> равен 4, <ph id="ph2">&lt;xref:System.Net.IPAddress.%23ctor%28System.Byte%5B%5D%29&gt;</ph> создает IPv4-адрес; в противном случае создается IPv6-адрес с областью 0.</target>       </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Net.IPAddress.#ctor(System.Byte[])">
          <source>The <ph id="ph1">&lt;xref:System.Byte&gt;</ph> array is assumed to be in network byte order with the most significant byte first in index position 0.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Byte&gt;</ph> Массива считается в сетевой порядок байтов с самый старший байт в позиции индекса 0.</target>       </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve" uid="M:System.Net.IPAddress.#ctor(System.Byte[])">
          <source><ph id="ph1">&lt;paramref name="address" /&gt;</ph> is <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</source>
          
        </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve" uid="M:System.Net.IPAddress.#ctor(System.Byte[])">
          <source><ph id="ph1">&lt;paramref name="address" /&gt;</ph> contains a bad IP address.</source>
          
        </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve" uid="M:System.Net.IPAddress.#ctor(System.Int64)">
          <source>The long value of the IP address.</source>
          
        </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve" uid="M:System.Net.IPAddress.#ctor(System.Int64)">
          <source>For example, the value 0x2414188f in big-endian format would be the IP address "143.24.20.36".</source>
          
        </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve" uid="M:System.Net.IPAddress.#ctor(System.Int64)">
          <source>Initializes a new instance of the <ph id="ph1">&lt;see cref="T:System.Net.IPAddress" /&gt;</ph> class with the address specified as an <ph id="ph2">&lt;see cref="T:System.Int64" /&gt;</ph>.</source>
          
        </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Net.IPAddress.#ctor(System.Int64)">
          <source>The <ph id="ph1">&lt;xref:System.Net.IPAddress&gt;</ph> instance is created with the <ph id="ph2">&lt;xref:System.Net.IPAddress.Address%2A&gt;</ph> property set to <ph id="ph3">`newAddress`</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Net.IPAddress&gt;</ph> Создается экземпляр с <ph id="ph2">&lt;xref:System.Net.IPAddress.Address%2A&gt;</ph> свойство <ph id="ph3">`newAddress`</ph>.</target>       </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Net.IPAddress.#ctor(System.Int64)">
          <source>The <ph id="ph1">&lt;xref:System.Int64&gt;</ph> value is assumed to be in network byte order.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Int64&gt;</ph> Значение считается в сетевой порядок байтов.</target>       </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve" uid="M:System.Net.IPAddress.#ctor(System.Int64)">
          <source><ph id="ph1">&lt;paramref name="newAddress" /&gt;</ph> <ph id="ph2">&amp;lt;</ph> 0 or</source>
          
        </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve" uid="M:System.Net.IPAddress.#ctor(System.Int64)">
          <source><ph id="ph1">&lt;paramref name="newAddress" /&gt;</ph> <ph id="ph2">&amp;gt;</ph> 0x00000000FFFFFFFF</source>
          
        </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve" uid="M:System.Net.IPAddress.#ctor(System.Byte[],System.Int64)">
          <source>The byte array value of the IP address.</source>
          
        </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve" uid="M:System.Net.IPAddress.#ctor(System.Byte[],System.Int64)">
          <source>The long value of the scope identifier.</source>
          
        </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve" uid="M:System.Net.IPAddress.#ctor(System.Byte[],System.Int64)">
          <source>Initializes a new instance of the <ph id="ph1">&lt;see cref="T:System.Net.IPAddress" /&gt;</ph> class with the address specified as a <ph id="ph2">&lt;see cref="T:System.Byte" /&gt;</ph> array and the specified scope identifier.</source>
          
        </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Net.IPAddress.#ctor(System.Byte[],System.Int64)">
          <source>This constructor instantiates an IPv6 address.</source>
          <target state="translated">Этот конструктор создает IPv6-адрес.</target>       </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Net.IPAddress.#ctor(System.Byte[],System.Int64)">
          <source>The <ph id="ph1">`scopeid`</ph> identifies a network interface in the case of a link-local address.</source>
          <target state="translated"><ph id="ph1">`scopeid`</ph> Определяет сетевой интерфейс в случае адрес локальной связи.</target>       </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Net.IPAddress.#ctor(System.Byte[],System.Int64)">
          <source>The scope is valid only for link-local and site-local addresses.</source>
          <target state="translated">Область является допустимым только для адресов локальной связи и локального сайта.</target>       </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Net.IPAddress.#ctor(System.Byte[],System.Int64)">
          <source>The <ph id="ph1">&lt;xref:System.Byte&gt;</ph> array is assumed to be in network byte order with the most significant byte first in index position 0.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Byte&gt;</ph> Массива считается в сетевой порядок байтов с самый старший байт в позиции индекса 0.</target>       </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve" uid="M:System.Net.IPAddress.#ctor(System.Byte[],System.Int64)">
          <source><ph id="ph1">&lt;paramref name="address" /&gt;</ph> is <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</source>
          
        </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve" uid="M:System.Net.IPAddress.#ctor(System.Byte[],System.Int64)">
          <source><ph id="ph1">&lt;paramref name="address" /&gt;</ph> contains a bad IP address.</source>
          
        </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve" uid="M:System.Net.IPAddress.#ctor(System.Byte[],System.Int64)">
          <source><ph id="ph1">&lt;paramref name="scopeid" /&gt;</ph> <ph id="ph2">&amp;lt;</ph> 0 or</source>
          
        </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve" uid="M:System.Net.IPAddress.#ctor(System.Byte[],System.Int64)">
          <source><ph id="ph1">&lt;paramref name="scopeid" /&gt;</ph> <ph id="ph2">&amp;gt;</ph> 0x00000000FFFFFFFF</source>
          
        </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve" uid="P:System.Net.IPAddress.Address">
          <source>An Internet Protocol (IP) address.</source>
          
        </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Net.IPAddress.Address">
          <source>The long value of the IP address.</source>
          <target state="translated">Длинное целое значение IP-адрес.</target>       </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Net.IPAddress.Address">
          <source>This property is obsolete.</source>
          <target state="translated">Это свойство устарело.</target>       </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Net.IPAddress.Address">
          <source>Use <ph id="ph1">&lt;xref:System.Net.IPAddress.GetAddressBytes%2A&gt;</ph>.</source>
          <target state="translated">Используйте ключевое слово <ph id="ph1">&lt;xref:System.Net.IPAddress.GetAddressBytes%2A&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Net.IPAddress.Address">
          <source>To convert <ph id="ph1">&lt;xref:System.Net.IPAddress.Address%2A&gt;</ph> to dotted-quad notation, use the <ph id="ph2">&lt;xref:System.Net.IPAddress.ToString%2A&gt;</ph> method.</source>
          <target state="translated">Чтобы преобразовать <ph id="ph1">&lt;xref:System.Net.IPAddress.Address%2A&gt;</ph> нотация с точками quad используйте <ph id="ph2">&lt;xref:System.Net.IPAddress.ToString%2A&gt;</ph> метод.</target>       </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Net.IPAddress.Address">
          <source>The following example uses the <ph id="ph1">&lt;xref:System.Net.IPAddress.Address%2A&gt;</ph> parameter to retrieve the IP address of the <ph id="ph2">&lt;xref:System.Net.IPAddress&gt;</ph> instance.</source>
          <target state="translated">В следующем примере используется <ph id="ph1">&lt;xref:System.Net.IPAddress.Address%2A&gt;</ph> параметр для получения IP-адрес <ph id="ph2">&lt;xref:System.Net.IPAddress&gt;</ph> экземпляра.</target>       </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve" uid="P:System.Net.IPAddress.Address">
          <source>The address family is <ph id="ph1">&lt;see cref="F:System.Net.Sockets.AddressFamily.InterNetworkV6" /&gt;</ph>.</source>
          
        </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve" uid="P:System.Net.IPAddress.AddressFamily">
          <source>Gets the address family of the IP address.</source>
          
        </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Net.IPAddress.AddressFamily">
          <source>Returns <ph id="ph1">&lt;see cref="F:System.Net.Sockets.AddressFamily.InterNetwork" /&gt;</ph> for IPv4 or <ph id="ph2">&lt;see cref="F:System.Net.Sockets.AddressFamily.InterNetworkV6" /&gt;</ph> for IPv6.</source>
          <target state="translated">Возвращает <ph id="ph1">&lt;see cref="F:System.Net.Sockets.AddressFamily.InterNetwork" /&gt;</ph> для IPv4 или <ph id="ph2">&lt;see cref="F:System.Net.Sockets.AddressFamily.InterNetworkV6" /&gt;</ph> для IPv6.</target>       </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Net.IPAddress.AddressFamily">
          <source>Refer to the example in the <ph id="ph1">&lt;xref:System.Net.IPAddress&gt;</ph> class topic.</source>
          <target state="translated">В примере в <ph id="ph1">&lt;xref:System.Net.IPAddress&gt;</ph> разделе, посвященном классу.</target>       </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve" uid="F:System.Net.IPAddress.Any">
          <source>Provides an IP address that indicates that the server must listen for client activity on all network interfaces.</source>
          
        </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve" uid="F:System.Net.IPAddress.Any">
          <source>This field is read-only.</source>
          
        </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve" extradata="MT" uid="F:System.Net.IPAddress.Any">
          <source>The <ph id="ph1">&lt;xref:System.Net.Sockets.Socket.Bind%2A?displayProperty=nameWithType&gt;</ph> method uses the <ph id="ph2">&lt;xref:System.Net.IPAddress.Any&gt;</ph> field to indicate that a <ph id="ph3">&lt;xref:System.Net.Sockets.Socket&gt;</ph> instance must listen for client activity on all network interfaces.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Net.Sockets.Socket.Bind%2A?displayProperty=nameWithType&gt;</ph> Использует метод <ph id="ph2">&lt;xref:System.Net.IPAddress.Any&gt;</ph> поле, чтобы указать, что <ph id="ph3">&lt;xref:System.Net.Sockets.Socket&gt;</ph> экземпляра необходимо контролировать действия клиента во всех сетевых интерфейсах.</target>       </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve" extradata="MT" uid="F:System.Net.IPAddress.Any">
          <source>The <ph id="ph1">&lt;xref:System.Net.IPAddress.Any&gt;</ph> field is equivalent to 0.0.0.0 in dotted-quad notation.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Net.IPAddress.Any&gt;</ph> Эквивалентно 0.0.0.0 в нотации с точками четыре.</target>       </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve" uid="F:System.Net.IPAddress.Broadcast">
          <source>Provides the IP broadcast address.</source>
          
        </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve" uid="F:System.Net.IPAddress.Broadcast">
          <source>This field is read-only.</source>
          
        </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve" extradata="MT" uid="F:System.Net.IPAddress.Broadcast">
          <source>The <ph id="ph1">&lt;xref:System.Net.IPAddress.Broadcast&gt;</ph> field is equivalent to 255.255.255.255 in dotted-quad notation.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Net.IPAddress.Broadcast&gt;</ph> Эквивалентно 255.255.255.255 в нотации с точками четыре.</target>       </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve" extradata="MT" uid="F:System.Net.IPAddress.Broadcast">
          <source>The following example prints the <ph id="ph1">&lt;xref:System.Net.IPAddress.Broadcast&gt;</ph> address to the console.</source>
          <target state="translated">В следующем примере выводится <ph id="ph1">&lt;xref:System.Net.IPAddress.Broadcast&gt;</ph> адрес на консоль.</target>       </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve" uid="M:System.Net.IPAddress.Equals(System.Object)">
          <source>An <ph id="ph1">&lt;see cref="T:System.Net.IPAddress" /&gt;</ph> instance to compare to the current instance.</source>
          
        </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve" uid="M:System.Net.IPAddress.Equals(System.Object)">
          <source>Compares two IP addresses.</source>
          
        </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve" uid="M:System.Net.IPAddress.Equals(System.Object)">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph> if the two addresses are equal; otherwise, <ph id="ph2">&lt;see langword="false" /&gt;</ph>.</source>
          
        </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Net.IPAddress.Equals(System.Object)">
          <source>The <ph id="ph1">&lt;xref:System.Net.IPAddress.Equals%2A&gt;</ph> method compares the current <ph id="ph2">&lt;xref:System.Net.IPAddress&gt;</ph> instance with the <ph id="ph3">`comparand`</ph> parameter and returns <ph id="ph4">`true`</ph> if the two instances contain the same IP address.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Net.IPAddress.Equals%2A&gt;</ph> Метод сравнивает текущий <ph id="ph2">&lt;xref:System.Net.IPAddress&gt;</ph> экземпляра с <ph id="ph3">`comparand`</ph> параметра и возвращает <ph id="ph4">`true`</ph> , если два экземпляра содержат же IP-адрес.</target>       </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve" uid="M:System.Net.IPAddress.GetAddressBytes">
          <source>Provides a copy of the <ph id="ph1">&lt;see cref="T:System.Net.IPAddress" /&gt;</ph> as an array of bytes.</source>
          
        </trans-unit>
        <trans-unit id="153" translate="yes" xml:space="preserve" uid="M:System.Net.IPAddress.GetAddressBytes">
          <source>A <ph id="ph1">&lt;see cref="T:System.Byte" /&gt;</ph> array.</source>
          
        </trans-unit>
        <trans-unit id="154" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Net.IPAddress.GetAddressBytes">
          <source>The following code example shows how to get a server IP address in byte format.</source>
          <target state="translated">В следующем примере кода показано, как получить IP-адрес сервера в байтовом формате.</target>       </trans-unit>
        <trans-unit id="155" translate="yes" xml:space="preserve" uid="M:System.Net.IPAddress.GetHashCode">
          <source>Returns a hash value for an IP address.</source>
          
        </trans-unit>
        <trans-unit id="156" translate="yes" xml:space="preserve" uid="M:System.Net.IPAddress.GetHashCode">
          <source>An integer hash value.</source>
          
        </trans-unit>
        <trans-unit id="157" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Net.IPAddress.GetHashCode">
          <source>The <ph id="ph1">&lt;xref:System.Net.IPAddress.GetHashCode%2A&gt;</ph> method returns a hash code of the IP address.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Net.IPAddress.GetHashCode%2A&gt;</ph> Метод возвращает хэш-код IP-адреса.</target>       </trans-unit>
        <trans-unit id="158" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Net.IPAddress.GetHashCode">
          <source>This value can be used as a key in hash tables.</source>
          <target state="translated">Это значение может использоваться в качестве ключа в хэш-таблицах.</target>       </trans-unit>
        <trans-unit id="159" translate="yes" xml:space="preserve" uid="T:System.Net.IPAddress">
          <source>Converts a value from host byte order to network byte order.</source>
          
        </trans-unit>
        <trans-unit id="160" translate="yes" xml:space="preserve" uid="M:System.Net.IPAddress.HostToNetworkOrder(System.Int16)">
          <source>The number to convert, expressed in host byte order.</source>
          
        </trans-unit>
        <trans-unit id="161" translate="yes" xml:space="preserve" uid="M:System.Net.IPAddress.HostToNetworkOrder(System.Int16)">
          <source>Converts a short value from host byte order to network byte order.</source>
          
        </trans-unit>
        <trans-unit id="162" translate="yes" xml:space="preserve" uid="M:System.Net.IPAddress.HostToNetworkOrder(System.Int16)">
          <source>A short value, expressed in network byte order.</source>
          
        </trans-unit>
        <trans-unit id="163" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Net.IPAddress.HostToNetworkOrder(System.Int16)">
          <source>Different computers use different conventions for ordering the bytes within multibyte integer values.</source>
          <target state="translated">Разные компьютеры используют разные соглашения для упорядочивания байтов в многобайтовых целых значений.</target>       </trans-unit>
        <trans-unit id="164" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Net.IPAddress.HostToNetworkOrder(System.Int16)">
          <source>Some computers put the most significant byte first (known as big-endian order) and others put the least-significant byte first (known as little-endian order).</source>
          <target state="translated">На некоторых компьютерах сначала поместите самый старший байт (это называется обратным порядком следования байтов) и другие сначала поместите младший байт (известный как порядком).</target>       </trans-unit>
        <trans-unit id="165" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Net.IPAddress.HostToNetworkOrder(System.Int16)">
          <source>To work with computers that use different byte ordering, all integer values that are sent over the network are sent in network byte order which has the most significant byte first.</source>
          <target state="translated">Для работы с компьютерами, использующими разный порядок расположения байтов, все целочисленные значения, которые отправляются по сети, отправляются в сетевой порядок байтов, который сначала имеет самый старший байт.</target>       </trans-unit>
        <trans-unit id="166" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Net.IPAddress.HostToNetworkOrder(System.Int16)">
          <source>The <ph id="ph1">&lt;xref:System.Net.IPAddress.HostToNetworkOrder%2A&gt;</ph> method converts multibyte integer values that are stored on the host system from the byte order used by the host to the byte order used by the network.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Net.IPAddress.HostToNetworkOrder%2A&gt;</ph> Метод преобразует многобайтовые целые значения, которые хранятся в основной системе от порядка байтов, используемых узлом байтовый, используемую сетью.</target>       </trans-unit>
        <trans-unit id="167" translate="yes" xml:space="preserve" uid="M:System.Net.IPAddress.HostToNetworkOrder(System.Int32)">
          <source>The number to convert, expressed in host byte order.</source>
          
        </trans-unit>
        <trans-unit id="168" translate="yes" xml:space="preserve" uid="M:System.Net.IPAddress.HostToNetworkOrder(System.Int32)">
          <source>Converts an integer value from host byte order to network byte order.</source>
          
        </trans-unit>
        <trans-unit id="169" translate="yes" xml:space="preserve" uid="M:System.Net.IPAddress.HostToNetworkOrder(System.Int32)">
          <source>An integer value, expressed in network byte order.</source>
          
        </trans-unit>
        <trans-unit id="170" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Net.IPAddress.HostToNetworkOrder(System.Int32)">
          <source>Different computers use different conventions for ordering the bytes within multibyte integer values.</source>
          <target state="translated">Разные компьютеры используют разные соглашения для упорядочивания байтов в многобайтовых целых значений.</target>       </trans-unit>
        <trans-unit id="171" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Net.IPAddress.HostToNetworkOrder(System.Int32)">
          <source>Some computers put the most significant byte first (known as big-endian order) and others put the least-significant byte first (known as little-endian order).</source>
          <target state="translated">На некоторых компьютерах сначала поместите самый старший байт (это называется обратным порядком следования байтов) и другие сначала поместите младший байт (известный как порядком).</target>       </trans-unit>
        <trans-unit id="172" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Net.IPAddress.HostToNetworkOrder(System.Int32)">
          <source>To work with computers that use different byte ordering, all integer values that are sent over the network are sent in network byte order which has the most significant byte first.</source>
          <target state="translated">Для работы с компьютерами, использующими разный порядок расположения байтов, все целочисленные значения, которые отправляются по сети, отправляются в сетевой порядок байтов, который сначала имеет самый старший байт.</target>       </trans-unit>
        <trans-unit id="173" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Net.IPAddress.HostToNetworkOrder(System.Int32)">
          <source>The <ph id="ph1">&lt;xref:System.Net.IPAddress.HostToNetworkOrder%2A&gt;</ph> method converts multibyte integer values that are stored on the host system from the byte order used by the host to the byte order used by the network.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Net.IPAddress.HostToNetworkOrder%2A&gt;</ph> Метод преобразует многобайтовые целые значения, которые хранятся в основной системе от порядка байтов, используемых узлом байтовый, используемую сетью.</target>       </trans-unit>
        <trans-unit id="174" translate="yes" xml:space="preserve" uid="M:System.Net.IPAddress.HostToNetworkOrder(System.Int64)">
          <source>The number to convert, expressed in host byte order.</source>
          
        </trans-unit>
        <trans-unit id="175" translate="yes" xml:space="preserve" uid="M:System.Net.IPAddress.HostToNetworkOrder(System.Int64)">
          <source>Converts a long value from host byte order to network byte order.</source>
          
        </trans-unit>
        <trans-unit id="176" translate="yes" xml:space="preserve" uid="M:System.Net.IPAddress.HostToNetworkOrder(System.Int64)">
          <source>A long value, expressed in network byte order.</source>
          
        </trans-unit>
        <trans-unit id="177" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Net.IPAddress.HostToNetworkOrder(System.Int64)">
          <source>Different computers use different conventions for ordering the bytes within multibyte integer values.</source>
          <target state="translated">Разные компьютеры используют разные соглашения для упорядочивания байтов в многобайтовых целых значений.</target>       </trans-unit>
        <trans-unit id="178" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Net.IPAddress.HostToNetworkOrder(System.Int64)">
          <source>Some computers put the most significant byte first (known as big-endian order) and others put the least-significant byte first (known as little-endian order).</source>
          <target state="translated">На некоторых компьютерах сначала поместите самый старший байт (это называется обратным порядком следования байтов) и другие сначала поместите младший байт (известный как порядком).</target>       </trans-unit>
        <trans-unit id="179" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Net.IPAddress.HostToNetworkOrder(System.Int64)">
          <source>To work with computers that use different byte ordering, all integer values that are sent over the network are sent in network byte order which has the most significant byte first.</source>
          <target state="translated">Для работы с компьютерами, использующими разный порядок расположения байтов, все целочисленные значения, которые отправляются по сети, отправляются в сетевой порядок байтов, который сначала имеет самый старший байт.</target>       </trans-unit>
        <trans-unit id="180" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Net.IPAddress.HostToNetworkOrder(System.Int64)">
          <source>The <ph id="ph1">&lt;xref:System.Net.IPAddress.HostToNetworkOrder%2A&gt;</ph> method converts multibyte integer values that are stored on the host system from the byte order used by the host to the byte order used by the network.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Net.IPAddress.HostToNetworkOrder%2A&gt;</ph> Метод преобразует многобайтовые целые значения, которые хранятся в основной системе от порядка байтов, используемых узлом байтовый, используемую сетью.</target>       </trans-unit>
        <trans-unit id="181" translate="yes" xml:space="preserve" uid="F:System.Net.IPAddress.IPv6Any">
          <source>The <ph id="ph1">&lt;see cref="M:System.Net.Sockets.Socket.Bind(System.Net.EndPoint)" /&gt;</ph> method uses the <ph id="ph2">&lt;see cref="F:System.Net.IPAddress.IPv6Any" /&gt;</ph> field to indicate that a <ph id="ph3">&lt;see cref="T:System.Net.Sockets.Socket" /&gt;</ph> must listen for client activity on all network interfaces.</source>
          
        </trans-unit>
        <trans-unit id="182" translate="yes" xml:space="preserve" extradata="MT" uid="F:System.Net.IPAddress.IPv6Any">
          <source>The <ph id="ph1">&lt;xref:System.Net.IPAddress.IPv6Any&gt;</ph> field is equivalent to 0:0:0:0:0:0:0:0 in colon-hexadecimal notation, or to :: in compact notation.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Net.IPAddress.IPv6Any&gt;</ph> 0:0:0:0:0:0:0:0 в шестнадцатеричном представлении или эквивалентно:: в компактном представлении.</target>       </trans-unit>
        <trans-unit id="183" translate="yes" xml:space="preserve" extradata="MT" uid="F:System.Net.IPAddress.IPv6Any">
          <source>The following code example displays the value of the current host's Any address in standard compressed format.</source>
          <target state="translated">В следующем примере кода отображает значение текущего все адреса в стандартном сжатом формате.</target>       </trans-unit>
        <trans-unit id="184" translate="yes" xml:space="preserve" uid="F:System.Net.IPAddress.IPv6Loopback">
          <source>Provides the IP loopback address.</source>
          
        </trans-unit>
        <trans-unit id="185" translate="yes" xml:space="preserve" uid="F:System.Net.IPAddress.IPv6Loopback">
          <source>This property is read-only.</source>
          
        </trans-unit>
        <trans-unit id="186" translate="yes" xml:space="preserve" extradata="MT" uid="F:System.Net.IPAddress.IPv6Loopback">
          <source>The <ph id="ph1">&lt;xref:System.Net.IPAddress.IPv6Loopback&gt;</ph> field is equivalent to 0:0:0:0:0:0:0:1 in colon-hexadecimal notation, or to ::1 in compact notation.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Net.IPAddress.IPv6Loopback&gt;</ph> 0:0:0:0:0:0:0:1 в шестнадцатеричном представлении или эквивалентно:: 1 в компактном представлении.</target>       </trans-unit>
        <trans-unit id="187" translate="yes" xml:space="preserve" extradata="MT" uid="F:System.Net.IPAddress.IPv6Loopback">
          <source>The following code example displays the value of the current host's loopback address in standard compressed format.</source>
          <target state="translated">В следующем примере кода отображает значение текущего узла петлевой адрес в стандартном сжатом формате.</target>       </trans-unit>
        <trans-unit id="188" translate="yes" xml:space="preserve" uid="F:System.Net.IPAddress.IPv6None">
          <source>Provides an IP address that indicates that no network interface should be used.</source>
          
        </trans-unit>
        <trans-unit id="189" translate="yes" xml:space="preserve" uid="F:System.Net.IPAddress.IPv6None">
          <source>This property is read-only.</source>
          
        </trans-unit>
        <trans-unit id="190" translate="yes" xml:space="preserve" extradata="MT" uid="F:System.Net.IPAddress.IPv6None">
          <source>The <ph id="ph1">&lt;xref:System.Net.Sockets.Socket.Bind%2A?displayProperty=nameWithType&gt;</ph> method uses the <ph id="ph2">&lt;xref:System.Net.IPAddress.IPv6None&gt;</ph> field to indicate that a <ph id="ph3">&lt;xref:System.Net.Sockets.Socket&gt;</ph> must not listen for client activity.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Net.Sockets.Socket.Bind%2A?displayProperty=nameWithType&gt;</ph> Использует метод <ph id="ph2">&lt;xref:System.Net.IPAddress.IPv6None&gt;</ph> поле, чтобы указать, что <ph id="ph3">&lt;xref:System.Net.Sockets.Socket&gt;</ph> не должен контролировать действия клиента.</target>       </trans-unit>
        <trans-unit id="191" translate="yes" xml:space="preserve" extradata="MT" uid="F:System.Net.IPAddress.IPv6None">
          <source>The <ph id="ph1">&lt;xref:System.Net.IPAddress.IPv6None&gt;</ph> field is equivalent to 0:0:0:0:0:0:0:0 in colon-hexadecimal notation, or to ::0 in compact notation.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Net.IPAddress.IPv6None&gt;</ph> 0:0:0:0:0:0:0:0 в шестнадцатеричном представлении или эквивалентно:: 0 в компактном формате.</target>       </trans-unit>
        <trans-unit id="192" translate="yes" xml:space="preserve" extradata="MT" uid="F:System.Net.IPAddress.IPv6None">
          <source>The following code example displays the value of the current host's None address in standard compressed format.</source>
          <target state="translated">В следующем примере кода отображаются значения текущего адреса None в стандартном сжатом формате.</target>       </trans-unit>
        <trans-unit id="193" translate="yes" xml:space="preserve" uid="P:System.Net.IPAddress.IsIPv4MappedToIPv6">
          <source>Gets whether the IP address is an IPv4-mapped IPv6 address.</source>
          
        </trans-unit>
        <trans-unit id="194" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Net.IPAddress.IsIPv4MappedToIPv6">
          <source>Returns <ph id="ph1">&lt;see cref="T:System.Boolean" /&gt;</ph>.</source>
          <target state="translated">Возвращает <ph id="ph1">&lt;see cref="T:System.Boolean" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="195" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Net.IPAddress.IsIPv4MappedToIPv6">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph> if the IP address is an IPv4-mapped IPv6 address; otherwise, <ph id="ph2">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;see langword="true" /&gt;</ph> Если IP-адрес не является адресом IPv4-сопоставленный IPv6; в противном случае <ph id="ph2">&lt;see langword="false" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="196" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Net.IPAddress.IsIPv4MappedToIPv6">
          <source>Dual-stack sockets always require IPv6 addresses.</source>
          <target state="translated">Сокеты двойной стек всегда требуют IPv6-адресов.</target>       </trans-unit>
        <trans-unit id="197" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Net.IPAddress.IsIPv4MappedToIPv6">
          <source>The ability to interact with an IPv4 address requires the use of the IPv4-mapped IPv6 address format.</source>
          <target state="translated">Возможность взаимодействия с адресами IPv4 требует использования формата адреса IPv6 на IPv4-сопоставленный.</target>       </trans-unit>
        <trans-unit id="198" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Net.IPAddress.IsIPv4MappedToIPv6">
          <source>Any IPv4 addresses must be represented in the IPv4-mapped IPv6 address format which enables an IPv6 only application to communicate with an IPv4 node.</source>
          <target state="translated">IPv4-адреса должны быть представлены в формате адреса IPv4-сопоставленный IPv6, что позволяет приложению только IPv6 для взаимодействия с узлом IPv4.</target>       </trans-unit>
        <trans-unit id="199" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Net.IPAddress.IsIPv4MappedToIPv6">
          <source>The IPv4-mapped IPv6 address format allows the IPv4 address of an IPv4 node to be represented as an IPv6 address.</source>
          <target state="translated">Формат адреса IPv6 на IPv4-сопоставленный позволяет IPv4-адрес узла в виде IPv6-адрес IPv4.</target>       </trans-unit>
        <trans-unit id="200" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Net.IPAddress.IsIPv4MappedToIPv6">
          <source>The IPv4 address is encoded into the low-order 32 bits of the IPv6 address, and the high-order 96 bits hold the fixed prefix 0:0:0:0:0:FFFF.</source>
          <target state="translated">IPv4-адрес кодируется в младшие 32 бита адреса IPv6 и 96 битов высокого порядка хранения 0:0:0:0:0:FFFF основных префикс.</target>       </trans-unit>
        <trans-unit id="201" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Net.IPAddress.IsIPv4MappedToIPv6">
          <source>The IPv4-mapped IPv6 address format is specified in RFC 4291.</source>
          <target state="translated">Формат адреса IPv6 на IPv4-сопоставленный указывается в документе RFC 4291.</target>       </trans-unit>
        <trans-unit id="202" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Net.IPAddress.IsIPv4MappedToIPv6">
          <source>For more information, see <bpt id="p1">[</bpt>www.ietf.org/rfc/rfc4291.txt<ept id="p1">](http://go.microsoft.com/fwlink/?LinkID=92231)</ept>.</source>
          <target state="translated">Дополнительные сведения см. в разделе <bpt id="p1">[</bpt>www.ietf.org/rfc/rfc4291.txt<ept id="p1">](http://go.microsoft.com/fwlink/?LinkID=92231)</ept>.</target>       </trans-unit>
        <trans-unit id="203" translate="yes" xml:space="preserve" uid="P:System.Net.IPAddress.IsIPv6LinkLocal">
          <source>Gets whether the address is an IPv6 link local address.</source>
          
        </trans-unit>
        <trans-unit id="204" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Net.IPAddress.IsIPv6LinkLocal">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph> if the IP address is an IPv6 link local address; otherwise, <ph id="ph2">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;see langword="true" /&gt;</ph> Если IP-адрес IPv6 адрес локальной связи; в противном случае <ph id="ph2">&lt;see langword="false" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="205" translate="yes" xml:space="preserve" uid="P:System.Net.IPAddress.IsIPv6Multicast">
          <source>Gets whether the address is an IPv6 multicast global address.</source>
          
        </trans-unit>
        <trans-unit id="206" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Net.IPAddress.IsIPv6Multicast">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph> if the IP address is an IPv6 multicast global address; otherwise, <ph id="ph2">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;see langword="true" /&gt;</ph> Если IP-адрес является многоадресным глобальным IPv6 адрес; в противном случае <ph id="ph2">&lt;see langword="false" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="207" translate="yes" xml:space="preserve" uid="P:System.Net.IPAddress.IsIPv6SiteLocal">
          <source>Gets whether the address is an IPv6 site local address.</source>
          
        </trans-unit>
        <trans-unit id="208" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Net.IPAddress.IsIPv6SiteLocal">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph> if the IP address is an IPv6 site local address; otherwise, <ph id="ph2">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;see langword="true" /&gt;</ph> Если IP-адрес сайта локальный адрес IPv6; в противном случае <ph id="ph2">&lt;see langword="false" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="209" translate="yes" xml:space="preserve" uid="P:System.Net.IPAddress.IsIPv6Teredo">
          <source>Gets whether the address is an IPv6 Teredo address.</source>
          
        </trans-unit>
        <trans-unit id="210" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Net.IPAddress.IsIPv6Teredo">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph> if the IP address is an IPv6 Teredo address; otherwise, <ph id="ph2">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;see langword="true" /&gt;</ph> Если IP-адрес является адресом IPv6 Teredo; в противном случае <ph id="ph2">&lt;see langword="false" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="211" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Net.IPAddress.IsIPv6Teredo">
          <source>A Teredo address is an IPv6 address with the prefix of 2001::/32.</source>
          <target state="translated">Адрес Teredo — IPv6-адрес с префиксом 2001:: / 32.</target>       </trans-unit>
        <trans-unit id="212" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Net.IPAddress.IsIPv6Teredo">
          <source>Teredo addresses can be returned through normal DNS name resolution or enumerated as an IPv6 address assigned to a local interface.</source>
          <target state="translated">Адреса Teredo можно возвращенные с помощью обычного разрешения имен DNS или перечислены как IPv6-адрес локального интерфейса.</target>       </trans-unit>
        <trans-unit id="213" translate="yes" xml:space="preserve" uid="M:System.Net.IPAddress.IsLoopback(System.Net.IPAddress)">
          <source>An IP address.</source>
          
        </trans-unit>
        <trans-unit id="214" translate="yes" xml:space="preserve" uid="M:System.Net.IPAddress.IsLoopback(System.Net.IPAddress)">
          <source>Indicates whether the specified IP address is the loopback address.</source>
          
        </trans-unit>
        <trans-unit id="215" translate="yes" xml:space="preserve" uid="M:System.Net.IPAddress.IsLoopback(System.Net.IPAddress)">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph> if <ph id="ph2">&lt;paramref name="address" /&gt;</ph> is the loopback address; otherwise, <ph id="ph3">&lt;see langword="false" /&gt;</ph>.</source>
          
        </trans-unit>
        <trans-unit id="216" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Net.IPAddress.IsLoopback(System.Net.IPAddress)">
          <source>The <ph id="ph1">&lt;xref:System.Net.IPAddress.IsLoopback%2A&gt;</ph> method compares <ph id="ph2">`address`</ph> to <ph id="ph3">&lt;xref:System.Net.IPAddress.Loopback&gt;</ph> and returns <ph id="ph4">`true`</ph> if the two IP addresses are the same.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Net.IPAddress.IsLoopback%2A&gt;</ph> Метод сравнивает <ph id="ph2">`address`</ph> для <ph id="ph3">&lt;xref:System.Net.IPAddress.Loopback&gt;</ph> и возвращает <ph id="ph4">`true`</ph> , если два IP-адреса совпадают.</target>       </trans-unit>
        <trans-unit id="217" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Net.IPAddress.IsLoopback(System.Net.IPAddress)">
          <source>In the case of IPv4, that the <ph id="ph1">&lt;xref:System.Net.IPAddress.IsLoopback%2A&gt;</ph> method returns <ph id="ph2">`true`</ph> for any IP address of the form 127.X.Y.Z (where X, Y, and Z are in the range 0-255), not just <ph id="ph3">&lt;xref:System.Net.IPAddress.Loopback&gt;</ph> (127.0.0.1).</source>
          <target state="translated">В случае IPv4, <ph id="ph1">&lt;xref:System.Net.IPAddress.IsLoopback%2A&gt;</ph> возвращает <ph id="ph2">`true`</ph> для любого IP-адреса в форме формате 127.X.Y.Z (где X, Y и Z являются в диапазоне от 0 до 255), не только <ph id="ph3">&lt;xref:System.Net.IPAddress.Loopback&gt;</ph> (127.0.0.1).</target>       </trans-unit>
        <trans-unit id="218" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Net.IPAddress.IsLoopback(System.Net.IPAddress)">
          <source>The following code example uses the <ph id="ph1">&lt;xref:System.Net.IPAddress.IsLoopback%2A&gt;</ph> method to determine whether the specified address is a loopback address.</source>
          <target state="translated">Следующий пример кода использует <ph id="ph1">&lt;xref:System.Net.IPAddress.IsLoopback%2A&gt;</ph> метод, чтобы определить, является ли указанный адрес адрес замыкания на себя.</target>       </trans-unit>
        <trans-unit id="219" translate="yes" xml:space="preserve" uid="F:System.Net.IPAddress.Loopback">
          <source>Provides the IP loopback address.</source>
          
        </trans-unit>
        <trans-unit id="220" translate="yes" xml:space="preserve" uid="F:System.Net.IPAddress.Loopback">
          <source>This field is read-only.</source>
          
        </trans-unit>
        <trans-unit id="221" translate="yes" xml:space="preserve" extradata="MT" uid="F:System.Net.IPAddress.Loopback">
          <source>The <ph id="ph1">&lt;xref:System.Net.IPAddress.Loopback&gt;</ph> field is equivalent to 127.0.0.1 in dotted-quad notation.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Net.IPAddress.Loopback&gt;</ph> Эквивалентно 127.0.0.1 в нотации с точками четыре.</target>       </trans-unit>
        <trans-unit id="222" translate="yes" xml:space="preserve" extradata="MT" uid="F:System.Net.IPAddress.Loopback">
          <source>The following example prints the <ph id="ph1">&lt;xref:System.Net.IPAddress.Loopback&gt;</ph> address to the console.</source>
          <target state="translated">В следующем примере выводится <ph id="ph1">&lt;xref:System.Net.IPAddress.Loopback&gt;</ph> адрес на консоль.</target>       </trans-unit>
        <trans-unit id="223" translate="yes" xml:space="preserve" uid="M:System.Net.IPAddress.MapToIPv4">
          <source>Maps the <ph id="ph1">&lt;see cref="T:System.Net.IPAddress" /&gt;</ph> object to an IPv4 address.</source>
          
        </trans-unit>
        <trans-unit id="224" translate="yes" xml:space="preserve" uid="M:System.Net.IPAddress.MapToIPv4">
          <source>Returns <ph id="ph1">&lt;see cref="T:System.Net.IPAddress" /&gt;</ph>.</source>
          
        </trans-unit>
        <trans-unit id="225" translate="yes" xml:space="preserve" uid="M:System.Net.IPAddress.MapToIPv4">
          <source>An IPv4 address.</source>
          
        </trans-unit>
        <trans-unit id="226" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Net.IPAddress.MapToIPv4">
          <source>Dual-stack sockets always require IPv6 addresses.</source>
          <target state="translated">Сокеты двойной стек всегда требуют IPv6-адресов.</target>       </trans-unit>
        <trans-unit id="227" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Net.IPAddress.MapToIPv4">
          <source>The ability to interact with an IPv4 address requires the use of the IPv4-mapped IPv6 address format.</source>
          <target state="translated">Возможность взаимодействия с адресами IPv4 требует использования формата адреса IPv6 на IPv4-сопоставленный.</target>       </trans-unit>
        <trans-unit id="228" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Net.IPAddress.MapToIPv4">
          <source>Any IPv4 addresses must be represented in the IPv4-mapped IPv6 address format which enables an IPv6 only application to communicate with an IPv4 node.</source>
          <target state="translated">IPv4-адреса должны быть представлены в формате адреса IPv4-сопоставленный IPv6, что позволяет приложению только IPv6 для взаимодействия с узлом IPv4.</target>       </trans-unit>
        <trans-unit id="229" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Net.IPAddress.MapToIPv4">
          <source>The IPv4-mapped IPv6 address format allows the IPv4 address of an IPv4 node to be represented as an IPv6 address.</source>
          <target state="translated">Формат адреса IPv6 на IPv4-сопоставленный позволяет IPv4-адрес узла в виде IPv6-адрес IPv4.</target>       </trans-unit>
        <trans-unit id="230" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Net.IPAddress.MapToIPv4">
          <source>The IPv4 address is encoded into the low-order 32 bits of the IPv6 address, and the high-order 96 bits hold the fixed prefix 0:0:0:0:0:FFFF.</source>
          <target state="translated">IPv4-адрес кодируется в младшие 32 бита адреса IPv6 и 96 битов высокого порядка хранения 0:0:0:0:0:FFFF основных префикс.</target>       </trans-unit>
        <trans-unit id="231" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Net.IPAddress.MapToIPv4">
          <source>The IPv4-mapped IPv6 address format is specified in RFC 4291.</source>
          <target state="translated">Формат адреса IPv6 на IPv4-сопоставленный указывается в документе RFC 4291.</target>       </trans-unit>
        <trans-unit id="232" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Net.IPAddress.MapToIPv4">
          <source>For more information, see <bpt id="p1">[</bpt>www.ietf.org/rfc/rfc4291.txt<ept id="p1">](http://go.microsoft.com/fwlink/?LinkID=92231)</ept>.</source>
          <target state="translated">Дополнительные сведения см. в разделе <bpt id="p1">[</bpt>www.ietf.org/rfc/rfc4291.txt<ept id="p1">](http://go.microsoft.com/fwlink/?LinkID=92231)</ept>.</target>       </trans-unit>
        <trans-unit id="233" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Net.IPAddress.MapToIPv4">
          <source>If you want to use <ph id="ph1">&lt;xref:System.Net.IPAddress.MapToIPv4%2A&gt;</ph> to convert an IPv4 address from IPv6 format to IPv4 format, you must first ensure that you've got an IPv4 address.</source>
          <target state="translated">Если вы хотите использовать <ph id="ph1">&lt;xref:System.Net.IPAddress.MapToIPv4%2A&gt;</ph> для преобразования IPv4-адрес в формате IPv6 в формате IPv4, сначала убедитесь, что у вас есть адрес IPv4.</target>       </trans-unit>
        <trans-unit id="234" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Net.IPAddress.MapToIPv4">
          <source>Call <ph id="ph1">&lt;xref:System.Net.IPAddress.IsIPv4MappedToIPv6%2A&gt;</ph>, which will return <ph id="ph2">`true`</ph> if the IP address is originally IPv4 written as IPv6, or <ph id="ph3">`false`</ph> otherwise.</source>
          <target state="translated">Вызовите <ph id="ph1">&lt;xref:System.Net.IPAddress.IsIPv4MappedToIPv6%2A&gt;</ph>, возвращающий <ph id="ph2">`true`</ph> Если IP-адрес, изначально записан как IPv6, IPv4 или <ph id="ph3">`false`</ph> в противном случае.</target>       </trans-unit>
        <trans-unit id="235" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Net.IPAddress.MapToIPv4">
          <source>If <ph id="ph1">&lt;xref:System.Net.IPAddress.IsIPv4MappedToIPv6%2A&gt;</ph> returns <ph id="ph2">`true`</ph>, use <ph id="ph3">&lt;xref:System.Net.IPAddress.MapToIPv4%2A&gt;</ph> to make the conversion.</source>
          <target state="translated">Если <ph id="ph1">&lt;xref:System.Net.IPAddress.IsIPv4MappedToIPv6%2A&gt;</ph> возвращает <ph id="ph2">`true`</ph>, используйте <ph id="ph3">&lt;xref:System.Net.IPAddress.MapToIPv4%2A&gt;</ph> вносить преобразование.</target>       </trans-unit>
        <trans-unit id="236" translate="yes" xml:space="preserve" uid="M:System.Net.IPAddress.MapToIPv6">
          <source>Maps the <ph id="ph1">&lt;see cref="T:System.Net.IPAddress" /&gt;</ph> object to an IPv6 address.</source>
          
        </trans-unit>
        <trans-unit id="237" translate="yes" xml:space="preserve" uid="M:System.Net.IPAddress.MapToIPv6">
          <source>Returns <ph id="ph1">&lt;see cref="T:System.Net.IPAddress" /&gt;</ph>.</source>
          
        </trans-unit>
        <trans-unit id="238" translate="yes" xml:space="preserve" uid="M:System.Net.IPAddress.MapToIPv6">
          <source>An IPv6 address.</source>
          
        </trans-unit>
        <trans-unit id="239" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Net.IPAddress.MapToIPv6">
          <source>Dual-stack sockets always require IPv6 addresses.</source>
          <target state="translated">Сокеты двойной стек всегда требуют IPv6-адресов.</target>       </trans-unit>
        <trans-unit id="240" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Net.IPAddress.MapToIPv6">
          <source>The ability to interact with an IPv4 address requires the use of the IPv4-mapped IPv6 address format.</source>
          <target state="translated">Возможность взаимодействия с адресами IPv4 требует использования формата адреса IPv6 на IPv4-сопоставленный.</target>       </trans-unit>
        <trans-unit id="241" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Net.IPAddress.MapToIPv6">
          <source>Any IPv4 addresses must be represented in the IPv4-mapped IPv6 address format which enables an IPv6 only application to communicate with an IPv4 node.</source>
          <target state="translated">IPv4-адреса должны быть представлены в формате адреса IPv4-сопоставленный IPv6, что позволяет приложению только IPv6 для взаимодействия с узлом IPv4.</target>       </trans-unit>
        <trans-unit id="242" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Net.IPAddress.MapToIPv6">
          <source>The IPv4-mapped IPv6 address format allows the IPv4 address of an IPv4 node to be represented as an IPv6 address.</source>
          <target state="translated">Формат адреса IPv6 на IPv4-сопоставленный позволяет IPv4-адрес узла в виде IPv6-адрес IPv4.</target>       </trans-unit>
        <trans-unit id="243" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Net.IPAddress.MapToIPv6">
          <source>The IPv4 address is encoded into the low-order 32 bits of the IPv6 address, and the high-order 96 bits hold the fixed prefix 0:0:0:0:0:FFFF.</source>
          <target state="translated">IPv4-адрес кодируется в младшие 32 бита адреса IPv6 и 96 битов высокого порядка хранения 0:0:0:0:0:FFFF основных префикс.</target>       </trans-unit>
        <trans-unit id="244" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Net.IPAddress.MapToIPv6">
          <source>The IPv4-mapped IPv6 address format is specified in RFC 4291.</source>
          <target state="translated">Формат адреса IPv6 на IPv4-сопоставленный указывается в документе RFC 4291.</target>       </trans-unit>
        <trans-unit id="245" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Net.IPAddress.MapToIPv6">
          <source>For more information, see <bpt id="p1">[</bpt>www.ietf.org/rfc/rfc4291.txt<ept id="p1">](http://go.microsoft.com/fwlink/?LinkID=92231)</ept>.</source>
          <target state="translated">Дополнительные сведения см. в разделе <bpt id="p1">[</bpt>www.ietf.org/rfc/rfc4291.txt<ept id="p1">](http://go.microsoft.com/fwlink/?LinkID=92231)</ept>.</target>       </trans-unit>
        <trans-unit id="246" translate="yes" xml:space="preserve" uid="T:System.Net.IPAddress">
          <source>Converts a number from network byte order to host byte order.</source>
          
        </trans-unit>
        <trans-unit id="247" translate="yes" xml:space="preserve" uid="M:System.Net.IPAddress.NetworkToHostOrder(System.Int16)">
          <source>The number to convert, expressed in network byte order.</source>
          
        </trans-unit>
        <trans-unit id="248" translate="yes" xml:space="preserve" uid="M:System.Net.IPAddress.NetworkToHostOrder(System.Int16)">
          <source>Converts a short value from network byte order to host byte order.</source>
          
        </trans-unit>
        <trans-unit id="249" translate="yes" xml:space="preserve" uid="M:System.Net.IPAddress.NetworkToHostOrder(System.Int16)">
          <source>A short value, expressed in host byte order.</source>
          
        </trans-unit>
        <trans-unit id="250" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Net.IPAddress.NetworkToHostOrder(System.Int16)">
          <source>Different computers use different conventions for ordering the bytes within multibyte integer values.</source>
          <target state="translated">Разные компьютеры используют разные соглашения для упорядочивания байтов в многобайтовых целых значений.</target>       </trans-unit>
        <trans-unit id="251" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Net.IPAddress.NetworkToHostOrder(System.Int16)">
          <source>Some computers put the most significant byte first (known as big-endian order) and others put the least-significant byte first (known as little-endian order).</source>
          <target state="translated">На некоторых компьютерах сначала поместите самый старший байт (это называется обратным порядком следования байтов) и другие сначала поместите младший байт (известный как порядком).</target>       </trans-unit>
        <trans-unit id="252" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Net.IPAddress.NetworkToHostOrder(System.Int16)">
          <source>To work with computers that use different byte ordering, all integer values that are sent over the network are sent in network byte order which has the most significant byte first.</source>
          <target state="translated">Для работы с компьютерами, использующими разный порядок расположения байтов, все целочисленные значения, которые отправляются по сети, отправляются в сетевой порядок байтов, который сначала имеет самый старший байт.</target>       </trans-unit>
        <trans-unit id="253" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Net.IPAddress.NetworkToHostOrder(System.Int16)">
          <source>The <ph id="ph1">&lt;xref:System.Net.IPAddress.NetworkToHostOrder%2A&gt;</ph> method converts multibyte integer values that are stored on the host system from the byte order used by the network to the byte order used by the host.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Net.IPAddress.NetworkToHostOrder%2A&gt;</ph> Метод преобразует многобайтовые целые значения, которые хранятся в основной системе от порядка байтов, используемую сетью байтовый, используемые узлом.</target>       </trans-unit>
        <trans-unit id="254" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Net.IPAddress.NetworkToHostOrder(System.Int16)">
          <source>The following example uses the <ph id="ph1">&lt;xref:System.Net.IPAddress.NetworkToHostOrder%2A&gt;</ph> method to convert a short value from network byte order to host byte order.</source>
          <target state="translated">В следующем примере используется <ph id="ph1">&lt;xref:System.Net.IPAddress.NetworkToHostOrder%2A&gt;</ph> метод преобразования короткое значение из сетевой порядок байтов в байтовом формате узла.</target>       </trans-unit>
        <trans-unit id="255" translate="yes" xml:space="preserve" uid="M:System.Net.IPAddress.NetworkToHostOrder(System.Int32)">
          <source>The number to convert, expressed in network byte order.</source>
          
        </trans-unit>
        <trans-unit id="256" translate="yes" xml:space="preserve" uid="M:System.Net.IPAddress.NetworkToHostOrder(System.Int32)">
          <source>Converts an integer value from network byte order to host byte order.</source>
          
        </trans-unit>
        <trans-unit id="257" translate="yes" xml:space="preserve" uid="M:System.Net.IPAddress.NetworkToHostOrder(System.Int32)">
          <source>An integer value, expressed in host byte order.</source>
          
        </trans-unit>
        <trans-unit id="258" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Net.IPAddress.NetworkToHostOrder(System.Int32)">
          <source>Different computers use different conventions for ordering the bytes within multibyte integer values.</source>
          <target state="translated">Разные компьютеры используют разные соглашения для упорядочивания байтов в многобайтовых целых значений.</target>       </trans-unit>
        <trans-unit id="259" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Net.IPAddress.NetworkToHostOrder(System.Int32)">
          <source>Some computers put the most significant byte first (known as big-endian order) and others put the least-significant byte first (known as little-endian order).</source>
          <target state="translated">На некоторых компьютерах сначала поместите самый старший байт (это называется обратным порядком следования байтов) и другие сначала поместите младший байт (известный как порядком).</target>       </trans-unit>
        <trans-unit id="260" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Net.IPAddress.NetworkToHostOrder(System.Int32)">
          <source>To work with computers that use different byte ordering, all integer values that are sent over the network are sent in network byte order which has the most significant byte first.</source>
          <target state="translated">Для работы с компьютерами, использующими разный порядок расположения байтов, все целочисленные значения, которые отправляются по сети, отправляются в сетевой порядок байтов, который сначала имеет самый старший байт.</target>       </trans-unit>
        <trans-unit id="261" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Net.IPAddress.NetworkToHostOrder(System.Int32)">
          <source>The <ph id="ph1">&lt;xref:System.Net.IPAddress.NetworkToHostOrder%2A&gt;</ph> method converts multibyte integer values that are stored on the host system from the byte order used by the network to the byte order used by the host.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Net.IPAddress.NetworkToHostOrder%2A&gt;</ph> Метод преобразует многобайтовые целые значения, которые хранятся в основной системе от порядка байтов, используемую сетью байтовый, используемые узлом.</target>       </trans-unit>
        <trans-unit id="262" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Net.IPAddress.NetworkToHostOrder(System.Int32)">
          <source>The following example uses the <ph id="ph1">&lt;xref:System.Net.IPAddress.NetworkToHostOrder%2A&gt;</ph> method to convert an integer value from network byte order to host byte order.</source>
          <target state="translated">В следующем примере используется <ph id="ph1">&lt;xref:System.Net.IPAddress.NetworkToHostOrder%2A&gt;</ph> метод преобразования целочисленное значение от сетевой порядок байтов в байтовом формате узла.</target>       </trans-unit>
        <trans-unit id="263" translate="yes" xml:space="preserve" uid="M:System.Net.IPAddress.NetworkToHostOrder(System.Int64)">
          <source>The number to convert, expressed in network byte order.</source>
          
        </trans-unit>
        <trans-unit id="264" translate="yes" xml:space="preserve" uid="M:System.Net.IPAddress.NetworkToHostOrder(System.Int64)">
          <source>Converts a long value from network byte order to host byte order.</source>
          
        </trans-unit>
        <trans-unit id="265" translate="yes" xml:space="preserve" uid="M:System.Net.IPAddress.NetworkToHostOrder(System.Int64)">
          <source>A long value, expressed in host byte order.</source>
          
        </trans-unit>
        <trans-unit id="266" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Net.IPAddress.NetworkToHostOrder(System.Int64)">
          <source>Different computers use different conventions for ordering the bytes within multibyte integer values.</source>
          <target state="translated">Разные компьютеры используют разные соглашения для упорядочивания байтов в многобайтовых целых значений.</target>       </trans-unit>
        <trans-unit id="267" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Net.IPAddress.NetworkToHostOrder(System.Int64)">
          <source>Some computers put the most significant byte first (known as big-endian order) and others put the least-significant byte first (known as little-endian order).</source>
          <target state="translated">На некоторых компьютерах сначала поместите самый старший байт (это называется обратным порядком следования байтов) и другие сначала поместите младший байт (известный как порядком).</target>       </trans-unit>
        <trans-unit id="268" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Net.IPAddress.NetworkToHostOrder(System.Int64)">
          <source>To work with computers that use different byte ordering, all integer values that are sent over the network are sent in network byte order which has the most significant byte first.</source>
          <target state="translated">Для работы с компьютерами, использующими разный порядок расположения байтов, все целочисленные значения, которые отправляются по сети, отправляются в сетевой порядок байтов, который сначала имеет самый старший байт.</target>       </trans-unit>
        <trans-unit id="269" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Net.IPAddress.NetworkToHostOrder(System.Int64)">
          <source>The <ph id="ph1">&lt;xref:System.Net.IPAddress.NetworkToHostOrder%2A&gt;</ph> method converts multibyte integer values that are stored on the host system from the byte order used by the network to the byte order used by the host.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Net.IPAddress.NetworkToHostOrder%2A&gt;</ph> Метод преобразует многобайтовые целые значения, которые хранятся в основной системе от порядка байтов, используемую сетью байтовый, используемые узлом.</target>       </trans-unit>
        <trans-unit id="270" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Net.IPAddress.NetworkToHostOrder(System.Int64)">
          <source>The following example uses the <ph id="ph1">&lt;xref:System.Net.IPAddress.NetworkToHostOrder%2A&gt;</ph> method to convert a long value from network byte order to host byte order.</source>
          <target state="translated">В следующем примере используется <ph id="ph1">&lt;xref:System.Net.IPAddress.NetworkToHostOrder%2A&gt;</ph> метод преобразования длинное целое значение из сетевой порядок байтов в байтовом формате узла.</target>       </trans-unit>
        <trans-unit id="271" translate="yes" xml:space="preserve" uid="F:System.Net.IPAddress.None">
          <source>Provides an IP address that indicates that no network interface should be used.</source>
          
        </trans-unit>
        <trans-unit id="272" translate="yes" xml:space="preserve" uid="F:System.Net.IPAddress.None">
          <source>This field is read-only.</source>
          
        </trans-unit>
        <trans-unit id="273" translate="yes" xml:space="preserve" extradata="MT" uid="F:System.Net.IPAddress.None">
          <source>The <ph id="ph1">&lt;xref:System.Net.Sockets.Socket.Bind%2A?displayProperty=nameWithType&gt;</ph> method uses the <ph id="ph2">&lt;xref:System.Net.IPAddress.None&gt;</ph> field to indicate that a <ph id="ph3">&lt;xref:System.Net.Sockets.Socket&gt;</ph> must not listen for client activity.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Net.Sockets.Socket.Bind%2A?displayProperty=nameWithType&gt;</ph> Использует метод <ph id="ph2">&lt;xref:System.Net.IPAddress.None&gt;</ph> поле, чтобы указать, что <ph id="ph3">&lt;xref:System.Net.Sockets.Socket&gt;</ph> не должен контролировать действия клиента.</target>       </trans-unit>
        <trans-unit id="274" translate="yes" xml:space="preserve" extradata="MT" uid="F:System.Net.IPAddress.None">
          <source>The <ph id="ph1">&lt;xref:System.Net.IPAddress.None&gt;</ph> field is equivalent to 255.255.255.255 in dotted-quad notation.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Net.IPAddress.None&gt;</ph> Эквивалентно 255.255.255.255 в нотации с точками четыре.</target>       </trans-unit>
        <trans-unit id="275" translate="yes" xml:space="preserve" extradata="MT" uid="F:System.Net.IPAddress.None">
          <source>The following example uses the <ph id="ph1">&lt;xref:System.Net.IPAddress.None&gt;</ph> property to indicate that no network interface should be used.</source>
          <target state="translated">В следующем примере используется <ph id="ph1">&lt;xref:System.Net.IPAddress.None&gt;</ph> свойство, указывающее, что сетевой интерфейс не должен использоваться.</target>       </trans-unit>
        <trans-unit id="276" translate="yes" xml:space="preserve" uid="M:System.Net.IPAddress.Parse(System.String)">
          <source>A string that contains an IP address in dotted-quad notation for IPv4 and in colon-hexadecimal notation for IPv6.</source>
          
        </trans-unit>
        <trans-unit id="277" translate="yes" xml:space="preserve" uid="M:System.Net.IPAddress.Parse(System.String)">
          <source>Converts an IP address string to an <ph id="ph1">&lt;see cref="T:System.Net.IPAddress" /&gt;</ph> instance.</source>
          
        </trans-unit>
        <trans-unit id="278" translate="yes" xml:space="preserve" uid="M:System.Net.IPAddress.Parse(System.String)">
          <source>An <ph id="ph1">&lt;see cref="T:System.Net.IPAddress" /&gt;</ph> instance.</source>
          
        </trans-unit>
        <trans-unit id="279" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Net.IPAddress.Parse(System.String)">
          <source>The static <ph id="ph1">&lt;xref:System.Net.IPAddress.Parse%2A&gt;</ph> method creates an <ph id="ph2">&lt;xref:System.Net.IPAddress&gt;</ph> instance from an IP address expressed in dotted-quad notation for IPv4 and in colon-hexadecimal notation for IPv6.</source>
          <target state="translated">Статический <ph id="ph1">&lt;xref:System.Net.IPAddress.Parse%2A&gt;</ph> создает метод <ph id="ph2">&lt;xref:System.Net.IPAddress&gt;</ph> экземпляра с IP-адреса, выраженное в нотации с точками quad для IPv4, так и в шестнадцатеричном представлении для IPv6.</target>       </trans-unit>
        <trans-unit id="280" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Net.IPAddress.Parse(System.String)">
          <source>The number of parts (each part is separated by a period) in <ph id="ph1">`ipString`</ph> determines how the IP address is constructed.</source>
          <target state="translated">Число частей (каждая часть разделенный точкой) в <ph id="ph1">`ipString`</ph> определяет, как создавать IP-адрес.</target>       </trans-unit>
        <trans-unit id="281" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Net.IPAddress.Parse(System.String)">
          <source>A one part address is stored directly in the network address.</source>
          <target state="translated">Адрес одной части хранятся непосредственно в сетевой адрес.</target>       </trans-unit>
        <trans-unit id="282" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Net.IPAddress.Parse(System.String)">
          <source>A two part address, convenient for specifying a class A address, puts the leading part in the first byte and the trailing part in the right-most three bytes of the network address.</source>
          <target state="translated">Две части адрес, удобный для указания адресом класса помещает часть в первый байт, а завершающая часть в три байта справа сетевого адреса.</target>       </trans-unit>
        <trans-unit id="283" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Net.IPAddress.Parse(System.String)">
          <source>A three part address, convenient for specifying a class B address, puts the first part in the first byte, the second part in the second byte, and the final part in the right-most two bytes of the network address.</source>
          <target state="translated">Три части адрес, удобный для указания адреса класса B, первая часть помещает в первый байт, вторая часть — во второй байт и заключительную часть сетевой адрес в два байта справа.</target>       </trans-unit>
        <trans-unit id="284" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Net.IPAddress.Parse(System.String)">
          <source>For example:</source>
          <target state="translated">Пример:</target>       </trans-unit>
        <trans-unit id="285" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Net.IPAddress.Parse(System.String)">
          <source>Number of parts and example <ph id="ph1">`ipString`</ph></source>
          <target state="translated">Число частей и пример <ph id="ph1">`ipString`</ph></target>       </trans-unit>
        <trans-unit id="286" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Net.IPAddress.Parse(System.String)">
          <source>IPv4 address for IPAddress</source>
          <target state="translated">IPv4-адрес для IP-адрес</target>       </trans-unit>
        <trans-unit id="287" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Net.IPAddress.Parse(System.String)">
          <source>1 -- "65535"</source>
          <target state="translated">1 -- "65535"</target>       </trans-unit>
        <trans-unit id="288" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Net.IPAddress.Parse(System.String)">
          <source>0.0.255.255</source>
          <target state="translated">0.0.255.255</target>       </trans-unit>
        <trans-unit id="289" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Net.IPAddress.Parse(System.String)">
          <source>2 -- "20.2"</source>
          <target state="translated">2 -- "20.2"</target>       </trans-unit>
        <trans-unit id="290" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Net.IPAddress.Parse(System.String)">
          <source>20.0.0.2</source>
          <target state="translated">20.0.0.2</target>       </trans-unit>
        <trans-unit id="291" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Net.IPAddress.Parse(System.String)">
          <source>2 -- "20.65535"</source>
          <target state="translated">2 -- "20.65535"</target>       </trans-unit>
        <trans-unit id="292" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Net.IPAddress.Parse(System.String)">
          <source>20.0.255.255</source>
          <target state="translated">20.0.255.255</target>       </trans-unit>
        <trans-unit id="293" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Net.IPAddress.Parse(System.String)">
          <source>3 -- "128.1.2"</source>
          <target state="translated">3 -- "128.1.2"</target>       </trans-unit>
        <trans-unit id="294" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Net.IPAddress.Parse(System.String)">
          <source>128.1.0.2</source>
          <target state="translated">128.1.0.2</target>       </trans-unit>
        <trans-unit id="295" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Net.IPAddress.Parse(System.String)">
          <source>The following code converts a string that contains an IP address, in dotted-quad notation for IPv4 or in colon-hexadecimal notation for IPv6, into an instance of the <ph id="ph1">&lt;xref:System.Net.IPAddress&gt;</ph> class.</source>
          <target state="translated">Следующий код преобразует строку, содержащую IP-адрес, в нотации с точками quad для IPv4 или в шестнадцатеричном представлении протокола IPv6, в экземпляр <ph id="ph1">&lt;xref:System.Net.IPAddress&gt;</ph> класса.</target>       </trans-unit>
        <trans-unit id="296" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Net.IPAddress.Parse(System.String)">
          <source>Then it uses the overloaded <ph id="ph1">&lt;xref:System.Net.IPAddress.ToString%2A&gt;</ph> method to display the address in standard notation.</source>
          <target state="translated">Затем она использует перегруженных <ph id="ph1">&lt;xref:System.Net.IPAddress.ToString%2A&gt;</ph> метод для отображения адреса в стандартной нотации.</target>       </trans-unit>
        <trans-unit id="297" translate="yes" xml:space="preserve" uid="M:System.Net.IPAddress.Parse(System.String)">
          <source><ph id="ph1">&lt;paramref name="ipString" /&gt;</ph> is <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</source>
          
        </trans-unit>
        <trans-unit id="298" translate="yes" xml:space="preserve" uid="M:System.Net.IPAddress.Parse(System.String)">
          <source><ph id="ph1">&lt;paramref name="ipString" /&gt;</ph> is not a valid IP address.</source>
          
        </trans-unit>
        <trans-unit id="299" translate="yes" xml:space="preserve" uid="P:System.Net.IPAddress.ScopeId">
          <source>Gets or sets the IPv6 address scope identifier.</source>
          
        </trans-unit>
        <trans-unit id="300" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Net.IPAddress.ScopeId">
          <source>A long integer that specifies the scope of the address.</source>
          <target state="translated">Длинное целое число, определяющее область адреса.</target>       </trans-unit>
        <trans-unit id="301" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Net.IPAddress.ScopeId">
          <source>The meaning of <ph id="ph1">&lt;xref:System.Net.IPAddress.ScopeId%2A&gt;</ph> changes depending on the context in which it is used.</source>
          <target state="translated">Значение <ph id="ph1">&lt;xref:System.Net.IPAddress.ScopeId%2A&gt;</ph> изменяется в зависимости от контекста, в котором он используется.</target>       </trans-unit>
        <trans-unit id="302" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Net.IPAddress.ScopeId">
          <source>Link-local address.</source>
          <target state="translated">Адрес локальной связи.</target>       </trans-unit>
        <trans-unit id="303" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Net.IPAddress.ScopeId">
          <source>On a host with multiple interfaces connected to separate links, the same link-local address can be assigned to multiple interfaces.</source>
          <target state="translated">На узле, имеющем несколько интерфейсов, подключенных к отдельным каналам связи один и тот же адрес локальной связи может назначаться несколько интерфейсов.</target>       </trans-unit>
        <trans-unit id="304" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Net.IPAddress.ScopeId">
          <source>To eliminate this ambiguity, a scope identifier is used to specify the interface over which messages are exchanged.</source>
          <target state="translated">Чтобы устранить неоднозначность, в области идентификатора используется для указания интерфейса, по которому обмен сообщениями.</target>       </trans-unit>
        <trans-unit id="305" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Net.IPAddress.ScopeId">
          <source>Link-local addresses, identified by the Format Prefix (FP) FE80, are used by nodes when communicating with neighboring nodes on the same link.</source>
          <target state="translated">Адреса локальной связи, определяемые префиксом формата (FP) FE80, используются узлами при обмене данными с соседними узлами на той же связи.</target>       </trans-unit>
        <trans-unit id="306" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Net.IPAddress.ScopeId">
          <source>Site-local addresses.</source>
          <target state="translated">Адреса локальных сайтов.</target>       </trans-unit>
        <trans-unit id="307" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Net.IPAddress.ScopeId">
          <source>A host can be connected to multiple sites.</source>
          <target state="translated">Узел может подключаться к нескольким сайтам.</target>       </trans-unit>
        <trans-unit id="308" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Net.IPAddress.ScopeId">
          <source>In this case, a scope identifier is used to indicate a specific site to communicate with.</source>
          <target state="translated">В этом случае в области идентификатора используется для указания конкретного узла для взаимодействия с.</target>       </trans-unit>
        <trans-unit id="309" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Net.IPAddress.ScopeId">
          <source>Site-local addresses, identified by the Format Prefix (FP) FEC0, are used by nodes when communicating on private intranets.</source>
          <target state="translated">Адреса локального сайта, определяемые префиксом формата (FP) FEC0, используются узлами при связывании с частной интрасети.</target>       </trans-unit>
        <trans-unit id="310" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Net.IPAddress.ScopeId">
          <source>The notation that is used to specify the <ph id="ph1">`ScopeId`</ph> with an address is <ph id="ph2">`Address%ScopeId`</ph>.</source>
          <target state="translated">Нотацию, которая используется для указания <ph id="ph1">`ScopeId`</ph> с адресом — <ph id="ph2">`Address%ScopeId`</ph>.</target>       </trans-unit>
        <trans-unit id="311" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Net.IPAddress.ScopeId">
          <source>For example, <ph id="ph1">`FE80::5EFE:192.168.41.30%2.`</ph></source>
          <target state="translated">Например <ph id="ph1">`FE80::5EFE:192.168.41.30%2.`</ph>.</target>       </trans-unit>
        <trans-unit id="312" translate="yes" xml:space="preserve" uid="P:System.Net.IPAddress.ScopeId">
          <source><ph id="ph1">&lt;see langword="AddressFamily" /&gt;</ph><ph id="ph2"> = </ph><ph id="ph3">&lt;see langword="InterNetwork" /&gt;</ph>.</source>
          
        </trans-unit>
        <trans-unit id="313" translate="yes" xml:space="preserve" uid="P:System.Net.IPAddress.ScopeId">
          <source><ph id="ph1">&lt;paramref name="scopeId" /&gt;</ph> <ph id="ph2">&amp;lt;</ph> 0</source>
          
        </trans-unit>
        <trans-unit id="314" translate="yes" xml:space="preserve" uid="P:System.Net.IPAddress.ScopeId">
          <source><ph id="ph1">\-</ph> or -</source>
          
        </trans-unit>
        <trans-unit id="315" translate="yes" xml:space="preserve" uid="P:System.Net.IPAddress.ScopeId">
          <source><ph id="ph1">&lt;paramref name="scopeId" /&gt;</ph> <ph id="ph2">&amp;gt;</ph> 0x00000000FFFFFFFF</source>
          
        </trans-unit>
        <trans-unit id="316" translate="yes" xml:space="preserve" uid="M:System.Net.IPAddress.ToString">
          <source>Converts an Internet address to its standard notation.</source>
          
        </trans-unit>
        <trans-unit id="317" translate="yes" xml:space="preserve" uid="M:System.Net.IPAddress.ToString">
          <source>A string that contains the IP address in either IPv4 dotted-quad or in IPv6 colon-hexadecimal notation.</source>
          
        </trans-unit>
        <trans-unit id="318" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Net.IPAddress.ToString">
          <source>The <ph id="ph1">&lt;xref:System.Net.IPAddress.ToString%2A&gt;</ph> method converts the IP address that is stored in the <ph id="ph2">&lt;xref:System.Net.IPAddress.Address%2A&gt;</ph> property to either IPv4 dotted-quad or IPv6 colon-hexadecimal notation.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Net.IPAddress.ToString%2A&gt;</ph> Метод преобразует IP-адрес, который хранится в <ph id="ph2">&lt;xref:System.Net.IPAddress.Address%2A&gt;</ph> свойство точечные четыре IPv4 или IPv6 шестнадцатеричном представлении.</target>       </trans-unit>
        <trans-unit id="319" translate="yes" xml:space="preserve" uid="M:System.Net.IPAddress.ToString">
          <source>The address family is <ph id="ph1">&lt;see cref="F:System.Net.Sockets.AddressFamily.InterNetworkV6" /&gt;</ph> and the address is bad.</source>
          
        </trans-unit>
        <trans-unit id="320" translate="yes" xml:space="preserve" uid="M:System.Net.IPAddress.TryParse(System.String,System.Net.IPAddress@)">
          <source>The string to validate.</source>
          
        </trans-unit>
        <trans-unit id="321" translate="yes" xml:space="preserve" uid="M:System.Net.IPAddress.TryParse(System.String,System.Net.IPAddress@)">
          <source>The <ph id="ph1">&lt;see cref="T:System.Net.IPAddress" /&gt;</ph> version of the string.</source>
          
        </trans-unit>
        <trans-unit id="322" translate="yes" xml:space="preserve" uid="M:System.Net.IPAddress.TryParse(System.String,System.Net.IPAddress@)">
          <source>Determines whether a string is a valid IP address.</source>
          
        </trans-unit>
        <trans-unit id="323" translate="yes" xml:space="preserve" uid="M:System.Net.IPAddress.TryParse(System.String,System.Net.IPAddress@)">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph> if <ph id="ph2">&lt;paramref name="ipString" /&gt;</ph> was able to be parsed as an IP address; otherwise, <ph id="ph3">&lt;see langword="false" /&gt;</ph>.</source>
          
        </trans-unit>
        <trans-unit id="324" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Net.IPAddress.TryParse(System.String,System.Net.IPAddress@)">
          <source>Note that this method accepts as valid an ipString value that can be parsed as an <ph id="ph1">&lt;xref:System.Int64&gt;</ph>, and then treats that Int64 as the long value of an IP address in network byte order, similar to the way that the <ph id="ph2">&lt;xref:System.Net.IPAddress.%23ctor%2A&gt;</ph> constructor does.</source>
          <target state="translated">Обратите внимание, что этот метод принимает как допустимое значение ipString, которое может быть проанализировано как <ph id="ph1">&lt;xref:System.Int64&gt;</ph>и тогда будут воспринимать как длинное целое значение IP-адрес сетевой порядок байтов, аналогично тому, как, Int64, <ph id="ph2">&lt;xref:System.Net.IPAddress.%23ctor%2A&gt;</ph> конструктор не.</target>       </trans-unit>
        <trans-unit id="325" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Net.IPAddress.TryParse(System.String,System.Net.IPAddress@)">
          <source>This means that this method returns true if the Int64 is parsed successfully, even if it represents an address that's not a valid IP address.</source>
          <target state="translated">Это означает, что данный метод возвращает значение true, если значение Int64 анализируется успешно, даже если он представляет адрес, который не является допустимым IP-адресом.</target>       </trans-unit>
        <trans-unit id="326" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Net.IPAddress.TryParse(System.String,System.Net.IPAddress@)">
          <source>For example, if ipString is "1", this method returns true even though "1" (or 0.0.0.1) is not a valid IP address and you might expect this method to return false.</source>
          <target state="translated">Например если ipString — «1», этот метод возвращает значение true, даже если «1» (или 0.0.0.1) не является допустимым IP-адресом, и можно ожидать, этот метод возвращает значение false.</target>       </trans-unit>
        <trans-unit id="327" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Net.IPAddress.TryParse(System.String,System.Net.IPAddress@)">
          <source>Fixing this bug would break existing apps, so the current behavior will not be changed.</source>
          <target state="translated">Устранение этой ошибки будет нарушена существующих приложений, текущее поведение не будут изменены.</target>       </trans-unit>
        <trans-unit id="328" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Net.IPAddress.TryParse(System.String,System.Net.IPAddress@)">
          <source>Your code can avoid this behavior by ensuring that it only uses this method to parse IP addresses in dotted-decimal format.</source>
          <target state="translated">Код можно избежать за счет того, что он только этот метод используется для синтаксического анализа IP-адресов в десятичном формате.</target>       </trans-unit>
      </group>
    </body>
  </file>
</xliff>