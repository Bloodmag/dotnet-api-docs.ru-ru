<Type Name="WebProxy" FullName="System.Net.WebProxy">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="0a54f3bb83fdc6d7478b8015221f9881fbafe6fa" />
    <Meta Name="ms.sourcegitcommit" Value="6a0b904069161bbaec4ffd02aa7d9cf38c61e72e" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="ru-RU" />
    <Meta Name="ms.lasthandoff" Value="06/24/2018" />
    <Meta Name="ms.locfileid" Value="36548196" />
  </Metadata>
  <TypeSignature Language="C#" Value="public class WebProxy : System.Runtime.Serialization.ISerializable" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi serializable beforefieldinit WebProxy extends System.Object implements class System.Net.IWebProxy, class System.Runtime.Serialization.ISerializable" />
  <TypeSignature Language="DocId" Value="T:System.Net.WebProxy" />
  <TypeSignature Language="VB.NET" Value="Public Class WebProxy&#xA;Implements ISerializable" />
  <TypeSignature Language="C++ CLI" Value="public ref class WebProxy : System::Runtime::Serialization::ISerializable" />
  <TypeSignature Language="F#" Value="type WebProxy = class&#xA;    interface ISerializable&#xA;    interface IWebProxy" />
  <AssemblyInfo>
    <AssemblyName>System</AssemblyName>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>System.Net.WebProxy</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.1.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>System.Runtime.Serialization.ISerializable</InterfaceName>
    </Interface>
  </Interfaces>
  <Docs>
    <summary>Содержит параметры прокси-сервера HTTP для класса <see cref="T:System.Net.WebRequest" />.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Net.WebProxy> Класс содержит параметры прокси-сервера, <xref:System.Net.WebRequest> экземпляры используют, чтобы определить, используется ли веб-прокси для отправки запросов. Глобальные Web в машины и файлы конфигурации приложений и приложений можно указать параметры прокси-сервера можно использовать экземпляры <xref:System.Net.WebProxy> класса для настройки использования веб-прокси. <xref:System.Net.WebProxy> Класс является базовую реализацию <xref:System.Net.IWebProxy> интерфейса.  
  
 Чтобы получить экземпляры класса веб-прокси-сервера, можно использовать любой из следующих методов:  
  
-   <xref:System.Net.WebProxy.%23ctor%2A> Конструктор.  
  
-   метод <xref:System.Net.WebProxy.GetDefaultProxy%2A>;  
  
-   метод <xref:System.Net.GlobalProxySelection.Select%2A>;  
  
 Эти методы предоставляют <xref:System.Net.WebProxy> настроить экземпляр, можно продолжить; различие между ними — способ инициализации экземпляра перед возвратом к приложению. <xref:System.Net.WebProxy.%23ctor%2A> Конструктор возвращает экземпляр <xref:System.Net.WebProxy> класса <xref:System.Net.WebProxy.Address%2A> свойство `null`. Если запрос использует <xref:System.Net.WebProxy> экземпляр в этом состоянии не прокси-сервера используется для отправки запроса.  
  
 <xref:System.Net.WebProxy.GetDefaultProxy%2A> Метод возвращает экземпляр класса <xref:System.Net.WebProxy> класса <xref:System.Net.WebProxy.Address%2A>, <xref:System.Net.WebProxy.BypassProxyOnLocal%2A>, и <xref:System.Net.WebProxy.BypassList%2A> заданы значения, используемые в Internet Explorer 5.5 и более поздних версий.  
  
 <xref:System.Net.GlobalProxySelection.Select%2A> Метод возвращает экземпляр класса <xref:System.Net.WebProxy> класса с ним свойства, заданные в соответствии с сочетание Internet Explorer и файл параметров конфигурации.  
  
 <xref:System.Net.WebProxy> Класс поддерживает автоматическое определение и выполнение сценариев конфигурации прокси-сервера. Эта функция также называется автообнаружением веб-прокси (WPAD). При использовании автоматической настройки прокси, сценарий конфигурации, обычно называемый Wpad.dat, должен быть расположен, загрузки, компиляции и запуска. Если эти операции выполняются успешно, сценарий возвращает прокси-серверы, которые могут использоваться для запроса.  
  
   
  
## Examples  
 В следующем примере кода пример назначает <xref:System.Net.WebProxy> экземпляр <xref:System.Net.WebRequest> экземпляра. <xref:System.Net.WebRequest> Экземпляр использует прокси-сервер для подключения к внешним интернет-ресурсам. (Например, показано использование функции WPAD, см. в документации для <xref:System.Net.IWebProxyScript> класса.)  
  
 [!code-cpp[Classic WebProxy Example#1](~/samples/snippets/cpp/VS_Snippets_Remoting/Classic WebProxy Example/CPP/source.cpp#1)]
 [!code-csharp[Classic WebProxy Example#1](~/samples/snippets/csharp/VS_Snippets_Remoting/Classic WebProxy Example/CS/source.cs#1)]
 [!code-vb[Classic WebProxy Example#1](~/samples/snippets/visualbasic/VS_Snippets_Remoting/Classic WebProxy Example/VB/source.vb#1)]  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <MemberGroup MemberName=".ctor">
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Инициализирует новый экземпляр класса <see cref="T:System.Net.WebProxy" />.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public WebProxy ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.WebProxy.#ctor" />
      <MemberSignature Language="VB.NET" Value="Public Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; WebProxy();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.WebProxy</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary>Инициализирует пустой экземпляр класса <see cref="T:System.Net.WebProxy" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Конструктор по умолчанию инициализирует пустой экземпляр <xref:System.Net.WebProxy> класса <xref:System.Net.WebProxy.Address%2A> свойство `null`.  
  
 Когда <xref:System.Net.WebProxy.Address%2A> свойство `null`, <xref:System.Net.WebProxy.IsBypassed%2A> возвращает `true` и <xref:System.Net.WebProxy.GetProxy%2A> метод возвращает адрес назначения.  
  
   
  
## Examples  
 В следующем примере кода демонстрируется вызов этого конструктора.  
  
 [!code-cpp[NCLWebProxy#1](~/samples/snippets/cpp/VS_Snippets_Remoting/NCLWebProxy/CPP/nclwebproxy.cpp#1)]
 [!code-csharp[NCLWebProxy#1](~/samples/snippets/csharp/VS_Snippets_Remoting/NCLWebProxy/CS/nclwebproxy.cs#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public WebProxy (string Address);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(string Address) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.WebProxy.#ctor(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (Address As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; WebProxy(System::String ^ Address);" />
      <MemberSignature Language="F#" Value="new System.Net.WebProxy : string -&gt; System.Net.WebProxy" Usage="new System.Net.WebProxy Address" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.WebProxy</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="Address" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="Address">URI прокси-сервера.</param>
        <summary>Инициализирует новый экземпляр класса <see cref="T:System.Net.WebProxy" /> с заданным универсальным кодом ресурса.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Net.WebProxy> Экземпляра инициализируется с <xref:System.Net.WebProxy.Address%2A> свойство <xref:System.Uri> содержащий экземпляр `Address`.  
  
   
  
## Examples  
 В следующем примере кода демонстрируется вызов этого конструктора.  
  
 [!code-cpp[NCLWebProxy#6](~/samples/snippets/cpp/VS_Snippets_Remoting/NCLWebProxy/CPP/nclwebproxy.cpp#6)]
 [!code-csharp[NCLWebProxy#6](~/samples/snippets/csharp/VS_Snippets_Remoting/NCLWebProxy/CS/nclwebproxy.cs#6)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.UriFormatException">
          <paramref name="Address" /> не является допустимым URI.</exception>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public WebProxy (Uri Address);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.Uri Address) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.WebProxy.#ctor(System.Uri)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (Address As Uri)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; WebProxy(Uri ^ Address);" />
      <MemberSignature Language="F#" Value="new System.Net.WebProxy : Uri -&gt; System.Net.WebProxy" Usage="new System.Net.WebProxy Address" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.WebProxy</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="Address" Type="System.Uri" />
      </Parameters>
      <Docs>
        <param name="Address">Экземпляр <see cref="T:System.Uri" />, содержащий адрес прокси-сервера.</param>
        <summary>Инициализирует новый экземпляр класса <see cref="T:System.Net.WebProxy" /> из указанного экземпляра <see cref="T:System.Uri" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Net.WebProxy> Экземпляра инициализируется с <xref:System.Net.WebProxy.Address%2A> свойство `Address` параметр.  
  
   
  
## Examples  
 В следующем примере кода демонстрируется вызов этого конструктора.  
  
 [!code-cpp[NCLWebProxy#2](~/samples/snippets/cpp/VS_Snippets_Remoting/NCLWebProxy/CPP/nclwebproxy.cpp#2)]
 [!code-csharp[NCLWebProxy#2](~/samples/snippets/csharp/VS_Snippets_Remoting/NCLWebProxy/CS/nclwebproxy.cs#2)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="protected WebProxy (System.Runtime.Serialization.SerializationInfo serializationInfo, System.Runtime.Serialization.StreamingContext streamingContext);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig specialname rtspecialname instance void .ctor(class System.Runtime.Serialization.SerializationInfo serializationInfo, valuetype System.Runtime.Serialization.StreamingContext streamingContext) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.WebProxy.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; WebProxy(System::Runtime::Serialization::SerializationInfo ^ serializationInfo, System::Runtime::Serialization::StreamingContext streamingContext);" />
      <MemberSignature Language="F#" Value="new System.Net.WebProxy : System.Runtime.Serialization.SerializationInfo * System.Runtime.Serialization.StreamingContext -&gt; System.Net.WebProxy" Usage="new System.Net.WebProxy (serializationInfo, streamingContext)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.WebProxy</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="serializationInfo" Type="System.Runtime.Serialization.SerializationInfo" />
        <Parameter Name="streamingContext" Type="System.Runtime.Serialization.StreamingContext" />
      </Parameters>
      <Docs>
        <param name="serializationInfo">Данные сериализации.</param>
        <param name="streamingContext">Контекст для данных сериализации.</param>
        <summary>Инициализирует экземпляр класса <see cref="T:System.Net.WebProxy" /> и использованием ранее сериализованного содержимого.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Этот метод вызывается системой для десериализации <xref:System.Net.WebProxy> экземпляр; приложения не вызывает ее.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public WebProxy (string Address, bool BypassOnLocal);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(string Address, bool BypassOnLocal) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.WebProxy.#ctor(System.String,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (Address As String, BypassOnLocal As Boolean)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; WebProxy(System::String ^ Address, bool BypassOnLocal);" />
      <MemberSignature Language="F#" Value="new System.Net.WebProxy : string * bool -&gt; System.Net.WebProxy" Usage="new System.Net.WebProxy (Address, BypassOnLocal)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.WebProxy</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="Address" Type="System.String" />
        <Parameter Name="BypassOnLocal" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="Address">URI прокси-сервера.</param>
        <param name="BypassOnLocal">
          <see langword="true" /> при обходе прокси-сервера для локальных адресов, в противном случае <see langword="false" />.</param>
        <summary>Инициализирует новый экземпляр класса <see cref="T:System.Net.WebProxy" /> с указанным URI и параметром обхода.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Net.WebProxy> Экземпляра инициализируется с <xref:System.Net.WebProxy.Address%2A> свойство <xref:System.Uri> экземпляру, содержащему `Address` и <xref:System.Net.WebProxy.BypassProxyOnLocal%2A> свойство `BypassOnLocal`.  
  
   
  
## Examples  
 В следующем примере кода демонстрируется вызов этого конструктора.  
  
 [!code-cpp[NCLWebProxy#7](~/samples/snippets/cpp/VS_Snippets_Remoting/NCLWebProxy/CPP/nclwebproxy.cpp#7)]
 [!code-csharp[NCLWebProxy#7](~/samples/snippets/csharp/VS_Snippets_Remoting/NCLWebProxy/CS/nclwebproxy.cs#7)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.UriFormatException">
          <paramref name="Address" /> не является допустимым URI.</exception>
        <altmember cref="P:System.Net.WebProxy.BypassProxyOnLocal" />
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public WebProxy (string Host, int Port);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(string Host, int32 Port) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.WebProxy.#ctor(System.String,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (Host As String, Port As Integer)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; WebProxy(System::String ^ Host, int Port);" />
      <MemberSignature Language="F#" Value="new System.Net.WebProxy : string * int -&gt; System.Net.WebProxy" Usage="new System.Net.WebProxy (Host, Port)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.WebProxy</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="Host" Type="System.String" />
        <Parameter Name="Port" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="Host">Имя узла прокси-сервера.</param>
        <param name="Port">Номер порта для использования на узле <c>Host</c>.</param>
        <summary>Инициализирует новый экземпляр класса <see cref="T:System.Net.WebProxy" /> с указанным узлом и номером порта.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Net.WebProxy> Экземпляра инициализируется с <xref:System.Net.WebProxy.Address%2A> свойство <xref:System.Uri> экземпляр вид http:// `Host` : `Port`.  
  
   
  
## Examples  
 В следующем примере кода демонстрируется вызов этого конструктора.  
  
 [!code-cpp[NCLWebProxy#5](~/samples/snippets/cpp/VS_Snippets_Remoting/NCLWebProxy/CPP/nclwebproxy.cpp#5)]
 [!code-csharp[NCLWebProxy#5](~/samples/snippets/csharp/VS_Snippets_Remoting/NCLWebProxy/CS/nclwebproxy.cs#5)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.UriFormatException">URI, образованный сочетанием <paramref name="Host" /> и <paramref name="Port" />, является недопустимым.</exception>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public WebProxy (Uri Address, bool BypassOnLocal);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.Uri Address, bool BypassOnLocal) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.WebProxy.#ctor(System.Uri,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (Address As Uri, BypassOnLocal As Boolean)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; WebProxy(Uri ^ Address, bool BypassOnLocal);" />
      <MemberSignature Language="F#" Value="new System.Net.WebProxy : Uri * bool -&gt; System.Net.WebProxy" Usage="new System.Net.WebProxy (Address, BypassOnLocal)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.WebProxy</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="Address" Type="System.Uri" />
        <Parameter Name="BypassOnLocal" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="Address">Экземпляр <see cref="T:System.Uri" />, содержащий адрес прокси-сервера.</param>
        <param name="BypassOnLocal">
          <see langword="true" /> при обходе прокси-сервера для локальных адресов, в противном случае <see langword="false" />.</param>
        <summary>Инициализирует новый экземпляр класса <see cref="T:System.Net.WebProxy" /> с экземпляром <see cref="T:System.Uri" /> и настройками для пропускаемых адресов.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Net.WebProxy> Экземпляра инициализируется с <xref:System.Net.WebProxy.Address%2A> свойство `Address` и <xref:System.Net.WebProxy.BypassProxyOnLocal%2A> свойство `BypassOnLocal`.  
  
   
  
## Examples  
 В следующем примере кода демонстрируется вызов этого конструктора.  
  
 [!code-cpp[NCLWebProxy#3](~/samples/snippets/cpp/VS_Snippets_Remoting/NCLWebProxy/CPP/nclwebproxy.cpp#3)]
 [!code-csharp[NCLWebProxy#3](~/samples/snippets/csharp/VS_Snippets_Remoting/NCLWebProxy/CS/nclwebproxy.cs#3)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public WebProxy (string Address, bool BypassOnLocal, string[] BypassList);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(string Address, bool BypassOnLocal, string[] BypassList) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.WebProxy.#ctor(System.String,System.Boolean,System.String[])" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (Address As String, BypassOnLocal As Boolean, BypassList As String())" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; WebProxy(System::String ^ Address, bool BypassOnLocal, cli::array &lt;System::String ^&gt; ^ BypassList);" />
      <MemberSignature Language="F#" Value="new System.Net.WebProxy : string * bool * string[] -&gt; System.Net.WebProxy" Usage="new System.Net.WebProxy (Address, BypassOnLocal, BypassList)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.WebProxy</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="Address" Type="System.String" />
        <Parameter Name="BypassOnLocal" Type="System.Boolean" />
        <Parameter Name="BypassList" Type="System.String[]" />
      </Parameters>
      <Docs>
        <param name="Address">URI прокси-сервера.</param>
        <param name="BypassOnLocal">
          <see langword="true" /> при обходе прокси-сервера для локальных адресов, в противном случае <see langword="false" />.</param>
        <param name="BypassList">Массив строк регулярных выражений, содержащих URI пропускаемых серверов.</param>
        <summary>Инициализирует новый экземпляр класса <see cref="T:System.Net.WebProxy" /> с указанным URI, настройками для пропускаемых адресов и списком пропускаемых URI.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Net.WebProxy> Экземпляра инициализируется с <xref:System.Net.WebProxy.Address%2A> свойство <xref:System.Uri> экземпляр, содержащий `Address`, <xref:System.Net.WebProxy.BypassProxyOnLocal%2A> свойство `BypassOnLocal`и <xref:System.Net.WebProxy.BypassList%2A> свойство `BypassList`.  
  
   
  
## Examples  
 В следующем примере кода демонстрируется вызов этого конструктора.  
  
 [!code-cpp[NCLWebProxy#8](~/samples/snippets/cpp/VS_Snippets_Remoting/NCLWebProxy/CPP/nclwebproxy.cpp#8)]
 [!code-csharp[NCLWebProxy#8](~/samples/snippets/csharp/VS_Snippets_Remoting/NCLWebProxy/CS/nclwebproxy.cs#8)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.UriFormatException">
          <paramref name="Address" /> не является допустимым URI.</exception>
        <altmember cref="P:System.Net.WebProxy.BypassProxyOnLocal" />
        <altmember cref="P:System.Net.WebProxy.BypassList" />
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public WebProxy (Uri Address, bool BypassOnLocal, string[] BypassList);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.Uri Address, bool BypassOnLocal, string[] BypassList) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.WebProxy.#ctor(System.Uri,System.Boolean,System.String[])" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (Address As Uri, BypassOnLocal As Boolean, BypassList As String())" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; WebProxy(Uri ^ Address, bool BypassOnLocal, cli::array &lt;System::String ^&gt; ^ BypassList);" />
      <MemberSignature Language="F#" Value="new System.Net.WebProxy : Uri * bool * string[] -&gt; System.Net.WebProxy" Usage="new System.Net.WebProxy (Address, BypassOnLocal, BypassList)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.WebProxy</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="Address" Type="System.Uri" />
        <Parameter Name="BypassOnLocal" Type="System.Boolean" />
        <Parameter Name="BypassList" Type="System.String[]" />
      </Parameters>
      <Docs>
        <param name="Address">Экземпляр <see cref="T:System.Uri" />, содержащий адрес прокси-сервера.</param>
        <param name="BypassOnLocal">
          <see langword="true" /> при обходе прокси-сервера для локальных адресов, в противном случае <see langword="false" />.</param>
        <param name="BypassList">Массив строк регулярных выражений, содержащих URI пропускаемых серверов.</param>
        <summary>Инициализирует новый экземпляр класса <see cref="T:System.Net.WebProxy" /> с указанным экземпляром <see cref="T:System.Uri" />, настройками для пропускаемых адресов и списком пропускаемых URI.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Net.WebProxy> Экземпляра инициализируется с <xref:System.Net.WebProxy.Address%2A> свойство `Address`, <xref:System.Net.WebProxy.BypassProxyOnLocal%2A> свойство `BypassOnLocal`и <xref:System.Net.WebProxy.BypassList%2A> свойство `BypassList`.  
  
   
  
## Examples  
 В следующем примере кода демонстрируется вызов этого конструктора.  
  
 [!code-cpp[NCLWebProxy#4](~/samples/snippets/cpp/VS_Snippets_Remoting/NCLWebProxy/CPP/nclwebproxy.cpp#4)]
 [!code-csharp[NCLWebProxy#4](~/samples/snippets/csharp/VS_Snippets_Remoting/NCLWebProxy/CS/nclwebproxy.cs#4)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public WebProxy (string Address, bool BypassOnLocal, string[] BypassList, System.Net.ICredentials Credentials);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(string Address, bool BypassOnLocal, string[] BypassList, class System.Net.ICredentials Credentials) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.WebProxy.#ctor(System.String,System.Boolean,System.String[],System.Net.ICredentials)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (Address As String, BypassOnLocal As Boolean, BypassList As String(), Credentials As ICredentials)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; WebProxy(System::String ^ Address, bool BypassOnLocal, cli::array &lt;System::String ^&gt; ^ BypassList, System::Net::ICredentials ^ Credentials);" />
      <MemberSignature Language="F#" Value="new System.Net.WebProxy : string * bool * string[] * System.Net.ICredentials -&gt; System.Net.WebProxy" Usage="new System.Net.WebProxy (Address, BypassOnLocal, BypassList, Credentials)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.WebProxy</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="Address" Type="System.String" />
        <Parameter Name="BypassOnLocal" Type="System.Boolean" />
        <Parameter Name="BypassList" Type="System.String[]" />
        <Parameter Name="Credentials" Type="System.Net.ICredentials" />
      </Parameters>
      <Docs>
        <param name="Address">URI прокси-сервера.</param>
        <param name="BypassOnLocal">
          <see langword="true" /> при обходе прокси-сервера для локальных адресов, в противном случае <see langword="false" />.</param>
        <param name="BypassList">Массив строк регулярных выражений, содержащих URI пропускаемых серверов.</param>
        <param name="Credentials">Экземпляр <see cref="T:System.Net.ICredentials" /> для передачи прокси-серверу с целью проверки подлинности.</param>
        <summary>Инициализирует новый экземпляр класса <see cref="T:System.Net.WebProxy" /> с указанным URI, настройками для пропускаемых адресов, списком пропускаемых URI и учетными данными.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Net.WebProxy> Экземпляра инициализируется с <xref:System.Net.WebProxy.Address%2A> свойство <xref:System.Uri> экземпляр, содержащий `Address`, <xref:System.Net.WebProxy.BypassProxyOnLocal%2A> свойство `BypassOnLocal`, <xref:System.Net.WebProxy.BypassList%2A> свойство `BypassList`, и <xref:System.Net.WebProxy.Credentials%2A> свойство `Credentials`.  
  
   
  
## Examples  
 В следующем примере кода демонстрируется вызов этого конструктора.  
  
 [!code-cpp[NCLWebProxy#9](~/samples/snippets/cpp/VS_Snippets_Remoting/NCLWebProxy/CPP/nclwebproxy.cpp#9)]
 [!code-csharp[NCLWebProxy#9](~/samples/snippets/csharp/VS_Snippets_Remoting/NCLWebProxy/CS/nclwebproxy.cs#9)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.UriFormatException">
          <paramref name="Address" /> не является допустимым URI.</exception>
        <altmember cref="P:System.Net.WebProxy.BypassProxyOnLocal" />
        <altmember cref="P:System.Net.WebProxy.BypassList" />
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public WebProxy (Uri Address, bool BypassOnLocal, string[] BypassList, System.Net.ICredentials Credentials);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.Uri Address, bool BypassOnLocal, string[] BypassList, class System.Net.ICredentials Credentials) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.WebProxy.#ctor(System.Uri,System.Boolean,System.String[],System.Net.ICredentials)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (Address As Uri, BypassOnLocal As Boolean, BypassList As String(), Credentials As ICredentials)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; WebProxy(Uri ^ Address, bool BypassOnLocal, cli::array &lt;System::String ^&gt; ^ BypassList, System::Net::ICredentials ^ Credentials);" />
      <MemberSignature Language="F#" Value="new System.Net.WebProxy : Uri * bool * string[] * System.Net.ICredentials -&gt; System.Net.WebProxy" Usage="new System.Net.WebProxy (Address, BypassOnLocal, BypassList, Credentials)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.WebProxy</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="Address" Type="System.Uri" />
        <Parameter Name="BypassOnLocal" Type="System.Boolean" />
        <Parameter Name="BypassList" Type="System.String[]" />
        <Parameter Name="Credentials" Type="System.Net.ICredentials" />
      </Parameters>
      <Docs>
        <param name="Address">Экземпляр <see cref="T:System.Uri" />, содержащий адрес прокси-сервера.</param>
        <param name="BypassOnLocal">
          <see langword="true" /> при обходе прокси-сервера для локальных адресов, в противном случае <see langword="false" />.</param>
        <param name="BypassList">Массив строк регулярных выражений, содержащих URI пропускаемых серверов.</param>
        <param name="Credentials">Экземпляр <see cref="T:System.Net.ICredentials" /> для передачи прокси-серверу с целью проверки подлинности.</param>
        <summary>Инициализирует новый экземпляр класса <see cref="T:System.Net.WebProxy" /> с указанным экземпляром <see cref="T:System.Uri" />, настройками для пропускаемых адресов, списком пропускаемых URI и учетными данными.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Net.WebProxy> Экземпляра инициализируется с <xref:System.Net.WebProxy.Address%2A> свойство `Address`, <xref:System.Net.WebProxy.BypassProxyOnLocal%2A> свойство `BypassOnLocal`, <xref:System.Net.WebProxy.BypassList%2A> свойство `BypassList`и <xref:System.Net.WebProxy.Credentials%2A> свойством, имеющим значение `Credentials`.  
  
   
  
## Examples  
 В следующем примере кода демонстрируется вызов этого конструктора.  
  
 [!code-cpp[NCLWebProxy#13](~/samples/snippets/cpp/VS_Snippets_Remoting/NCLWebProxy/CPP/nclwebproxy.cpp#13)]
 [!code-csharp[NCLWebProxy#13](~/samples/snippets/csharp/VS_Snippets_Remoting/NCLWebProxy/CS/nclwebproxy.cs#13)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Address">
      <MemberSignature Language="C#" Value="public Uri Address { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Uri Address" />
      <MemberSignature Language="DocId" Value="P:System.Net.WebProxy.Address" />
      <MemberSignature Language="VB.NET" Value="Public Property Address As Uri" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property Uri ^ Address { Uri ^ get(); void set(Uri ^ value); };" />
      <MemberSignature Language="F#" Value="member this.Address : Uri with get, set" Usage="System.Net.WebProxy.Address" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.WebProxy</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Uri</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Возвращает или задает адрес прокси-сервера.</summary>
        <value>Экземпляр <see cref="T:System.Uri" />, содержащий адрес прокси-сервера.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Net.WebProxy.Address%2A> Свойство содержит адрес прокси-сервера. Когда не включена функция автоматического прокси-сервера обнаружения и указан ни один сценарий автоматической настройки, <xref:System.Net.WebProxy.Address%2A> свойство и <xref:System.Net.WebProxy.BypassList%2A> определения прокси, используемый для запроса.  
  
 Когда <xref:System.Net.WebProxy.Address%2A> свойство `null`, запросов на обход прокси-сервер и подключение непосредственно в узле назначения.  
  
   
  
## Examples  
 В следующем примере кода отображаются свойства <xref:System.Net.WebProxy> объекта, включая его <xref:System.Net.WebProxy.Address%2A>.  
  
 [!code-cpp[NCLAutoProxy#1](~/samples/snippets/cpp/VS_Snippets_Remoting/NCLAutoProxy/CPP/proxy.cpp#1)]
 [!code-csharp[NCLAutoProxy#1](~/samples/snippets/csharp/VS_Snippets_Remoting/NCLAutoProxy/CS/proxy.cs#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="BypassArrayList">
      <MemberSignature Language="C#" Value="public System.Collections.ArrayList BypassArrayList { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Collections.ArrayList BypassArrayList" />
      <MemberSignature Language="DocId" Value="P:System.Net.WebProxy.BypassArrayList" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property BypassArrayList As ArrayList" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Collections::ArrayList ^ BypassArrayList { System::Collections::ArrayList ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.BypassArrayList : System.Collections.ArrayList" Usage="System.Net.WebProxy.BypassArrayList" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.WebProxy</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.ArrayList</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Возвращает список адресов, не использующих прокси-сервер.</summary>
        <value>Список <see cref="T:System.Collections.ArrayList" />, содержащий массив <see cref="P:System.Net.WebProxy.BypassList" />, который представляет URI, не использующие прокси-сервер при доступе.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Net.WebProxy.BypassList%2A> Является списком массив строк регулярных выражений, описывающих URI, <xref:System.Net.WebRequest> экземпляр непосредственно получает доступ вместо доступа через прокси-сервер.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="BypassList">
      <MemberSignature Language="C#" Value="public string[] BypassList { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string[] BypassList" />
      <MemberSignature Language="DocId" Value="P:System.Net.WebProxy.BypassList" />
      <MemberSignature Language="VB.NET" Value="Public Property BypassList As String()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property cli::array &lt;System::String ^&gt; ^ BypassList { cli::array &lt;System::String ^&gt; ^ get(); void set(cli::array &lt;System::String ^&gt; ^ value); };" />
      <MemberSignature Language="F#" Value="member this.BypassList : string[] with get, set" Usage="System.Net.WebProxy.BypassList" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.WebProxy</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String[]</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Возвращает или устанавливает массив адресов, не использующих прокси-сервер.</summary>
        <value>Массив, содержащий список регулярных выражений, описывающих URI, которые при доступе не будут использовать данный прокси-сервер.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Net.WebProxy.BypassList%2A> Свойство содержит массив регулярных выражений, описывающих URI, <xref:System.Net.WebRequest> экземпляр непосредственно получает доступ вместо доступа через прокси-сервер.  
  
   
  
## Examples  
 В следующем примере кода отображаются свойства <xref:System.Net.WebProxy> объекта, включая его <xref:System.Net.WebProxy.BypassList%2A> свойство.  
  
 [!code-cpp[NCLAutoProxy#1](~/samples/snippets/cpp/VS_Snippets_Remoting/NCLAutoProxy/CPP/proxy.cpp#1)]
 [!code-csharp[NCLAutoProxy#1](~/samples/snippets/csharp/VS_Snippets_Remoting/NCLAutoProxy/CS/proxy.cs#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Text.RegularExpressions.Regex" />
      </Docs>
    </Member>
    <Member MemberName="BypassProxyOnLocal">
      <MemberSignature Language="C#" Value="public bool BypassProxyOnLocal { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool BypassProxyOnLocal" />
      <MemberSignature Language="DocId" Value="P:System.Net.WebProxy.BypassProxyOnLocal" />
      <MemberSignature Language="VB.NET" Value="Public Property BypassProxyOnLocal As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool BypassProxyOnLocal { bool get(); void set(bool value); };" />
      <MemberSignature Language="F#" Value="member this.BypassProxyOnLocal : bool with get, set" Usage="System.Net.WebProxy.BypassProxyOnLocal" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.WebProxy</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Возвращает или задает значение, указывающее, будет ли доступ к локальным адресам осуществляться в обход прокси-сервера.</summary>
        <value>Значение <see langword="true" /> — для обхода прокси-сервера для локальных адресов; в противном случае — значение <see langword="false" />. Значение по умолчанию — <see langword="false" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Параметр <xref:System.Net.WebProxy.BypassProxyOnLocal%2A> свойство определяет, является ли <xref:System.Net.WebRequest> экземпляры используют прокси-сервер при доступе к локальным Интернет-ресурсам.  
  
 Если свойству <xref:System.Net.WebProxy.BypassProxyOnLocal%2A> присвоено значение `true`, данный прокси-сервер не будет использоваться в запросах к локальным интернет-ресурсам. Локальные запросы определяются по отсутствию точки (.) в URI, как и в http://webserver/, или доступ к локальным сервером, включая http://localhost, http://loopback, или http://127.0.0.1. Если <xref:System.Net.WebProxy.BypassProxyOnLocal%2A> присвоено значение `false`, все интернет-запросы выполняются через прокси-сервер.  
  
> [!NOTE]
>  Запросы к локальному узлу с URI, содержащие точку используют прокси-сервер. Чтобы избежать использования прокси-сервера в таких случаях, необходимо создать запись для узла в <xref:System.Net.WebProxy.BypassList%2A>.  
  
   
  
## Examples  
 В следующем примере кода демонстрируется вызов конструктора, который задает это свойство и получение значения данного свойства.  
  
 [!code-cpp[NCLWebProxy#7](~/samples/snippets/cpp/VS_Snippets_Remoting/NCLWebProxy/CPP/nclwebproxy.cpp#7)]
 [!code-csharp[NCLWebProxy#7](~/samples/snippets/csharp/VS_Snippets_Remoting/NCLWebProxy/CS/nclwebproxy.cs#7)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="CreateDefaultProxy">
      <MemberSignature Language="C#" Value="public static System.Net.IWebProxy CreateDefaultProxy ();" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Net.IWebProxy CreateDefaultProxy() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.WebProxy.CreateDefaultProxy" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function CreateDefaultProxy () As IWebProxy" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Net::IWebProxy ^ CreateDefaultProxy();" />
      <MemberSignature Language="F#" Value="static member CreateDefaultProxy : unit -&gt; System.Net.IWebProxy" Usage="System.Net.WebProxy.CreateDefaultProxy " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Net.IWebProxy</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Credentials">
      <MemberSignature Language="C#" Value="public System.Net.ICredentials Credentials { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Net.ICredentials Credentials" />
      <MemberSignature Language="DocId" Value="P:System.Net.WebProxy.Credentials" />
      <MemberSignature Language="VB.NET" Value="Public Property Credentials As ICredentials" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Net::ICredentials ^ Credentials { System::Net::ICredentials ^ get(); void set(System::Net::ICredentials ^ value); };" />
      <MemberSignature Language="F#" Value="member this.Credentials : System.Net.ICredentials with get, set" Usage="System.Net.WebProxy.Credentials" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Net.IWebProxy.Credentials</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.WebProxy</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Net.ICredentials</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Получает или задает учетные данные для отправки на прокси-сервер для проверки подлинности.</summary>
        <value>Экземпляр <see cref="T:System.Net.ICredentials" />, содержащий учетные данные для передачи прокси-серверу с целью проверки подлинности.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Net.WebProxy.Credentials%2A> Свойство содержит учетные данные проверки подлинности для отправки в ответ на код состояния HTTP 407 (авторизация) прокси-сервера. В большинстве сценариев клиента, следует использовать <xref:System.Net.CredentialCache.DefaultCredentials%2A>, которые являются учетные данные текущего пользователя. Чтобы сделать это, задайте <xref:System.Net.WebProxy.UseDefaultCredentials%2A> свойства `true` вместо задания этого свойства.  
  
> [!NOTE]
>  Если задать <xref:System.Net.WebProxy.Credentials%2A> свойства учетных данных, отличных от <xref:System.Net.CredentialCache.DefaultCredentials%2A>, параметр <xref:System.Net.WebProxy.UseDefaultCredentials%2A> свойства `true` вызывает <xref:System.InvalidOperationException>. Чтобы избежать этого, необходимо задать <xref:System.Net.WebProxy.Credentials%2A> свойства `null` перед установкой <xref:System.Net.WebProxy.UseDefaultCredentials%2A> свойства `true`. Аналогично, невозможно задать это свойство для любого значения при <xref:System.Net.WebProxy.UseDefaultCredentials%2A> — `true`.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">Произведена попытка настройки этого свойства при значении свойства <see cref="P:System.Net.WebProxy.UseDefaultCredentials" />, равного <see langword="true" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="GetDefaultProxy">
      <MemberSignature Language="C#" Value="public static System.Net.WebProxy GetDefaultProxy ();" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Net.WebProxy GetDefaultProxy() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.WebProxy.GetDefaultProxy" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function GetDefaultProxy () As WebProxy" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Net::WebProxy ^ GetDefaultProxy();" />
      <MemberSignature Language="F#" Value="static member GetDefaultProxy : unit -&gt; System.Net.WebProxy" Usage="System.Net.WebProxy.GetDefaultProxy " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.WebProxy</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Obsolete("This method has been deprecated. Please use the proxy selected for you by default. http://go.microsoft.com/fwlink/?linkid=14202")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Net.WebProxy</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Считывает нединамические параметры прокси-сервера из Internet Explorer.</summary>
        <returns>Экземпляр <see cref="T:System.Net.WebProxy" />, содержащий нединамические параметры прокси-сервера из Internet Explorer версии 5.5 и более поздней версии.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Net.WebProxy.GetDefaultProxy%2A> Метод считывает нединамические параметры прокси хранятся в Internet Explorer 5.5 и более поздних версий и создает <xref:System.Net.WebProxy> экземпляра с этими параметрами.  
  
 <xref:System.Net.WebProxy.GetDefaultProxy%2A> Метод не может получить никаких динамических параметров, которые создаются из сценариев, запускаемых Internet Explorer, из записей автоматической конфигурации или из поиска DHCP или DNS.  
  
 Приложения должны использовать <xref:System.Net.WebRequest.DefaultWebProxy%2A?displayProperty=nameWithType> свойство и <xref:System.Net.WebRequest.GetSystemWebProxy%2A?displayProperty=nameWithType> вместо метода <xref:System.Net.WebProxy.GetDefaultProxy%2A> метод.  
  
   
  
## Examples  
 В следующем примере кода демонстрируется вызов этого метода.  
  
 [!code-cpp[NCLWebProxy#11](~/samples/snippets/cpp/VS_Snippets_Remoting/NCLWebProxy/CPP/nclwebproxy.cpp#11)]
 [!code-csharp[NCLWebProxy#11](~/samples/snippets/csharp/VS_Snippets_Remoting/NCLWebProxy/CS/nclwebproxy.cs#11)]  
  
 ]]></format>
        </remarks>
        <permission cref="T:System.Net.WebPermission">Для неограниченного доступа к сетевым ресурсам. Соответствующее перечисление: <see cref="F:System.Security.Permissions.PermissionState.Unrestricted" />.</permission>
      </Docs>
    </Member>
    <Member MemberName="GetObjectData">
      <MemberSignature Language="C#" Value="protected virtual void GetObjectData (System.Runtime.Serialization.SerializationInfo serializationInfo, System.Runtime.Serialization.StreamingContext streamingContext);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void GetObjectData(class System.Runtime.Serialization.SerializationInfo serializationInfo, valuetype System.Runtime.Serialization.StreamingContext streamingContext) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.WebProxy.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void GetObjectData(System::Runtime::Serialization::SerializationInfo ^ serializationInfo, System::Runtime::Serialization::StreamingContext streamingContext);" />
      <MemberSignature Language="F#" Value="abstract member GetObjectData : System.Runtime.Serialization.SerializationInfo * System.Runtime.Serialization.StreamingContext -&gt; unit&#xA;override this.GetObjectData : System.Runtime.Serialization.SerializationInfo * System.Runtime.Serialization.StreamingContext -&gt; unit" Usage="webProxy.GetObjectData (serializationInfo, streamingContext)" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Runtime.Serialization.ISerializable.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.WebProxy</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="serializationInfo" Type="System.Runtime.Serialization.SerializationInfo" />
        <Parameter Name="streamingContext" Type="System.Runtime.Serialization.StreamingContext" />
      </Parameters>
      <Docs>
        <param name="serializationInfo">Объект <see cref="T:System.Runtime.Serialization.SerializationInfo" /> для заполнения данными.</param>
        <param name="streamingContext">Контекст <see cref="T:System.Runtime.Serialization.StreamingContext" />, определяющий целевой объект сериализации.</param>
        <summary>Заполняет объект <see cref="T:System.Runtime.Serialization.SerializationInfo" /> данными, необходимыми для сериализации целевого объекта.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Объекты, включенные в <xref:System.Runtime.Serialization.SerializationInfo> , автоматически отслеживаются и сериализации модулем форматирования.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetProxy">
      <MemberSignature Language="C#" Value="public Uri GetProxy (Uri destination);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Uri GetProxy(class System.Uri destination) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.WebProxy.GetProxy(System.Uri)" />
      <MemberSignature Language="VB.NET" Value="Public Function GetProxy (destination As Uri) As Uri" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual Uri ^ GetProxy(Uri ^ destination);" />
      <MemberSignature Language="F#" Value="abstract member GetProxy : Uri -&gt; Uri&#xA;override this.GetProxy : Uri -&gt; Uri" Usage="webProxy.GetProxy destination" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Net.IWebProxy.GetProxy(System.Uri)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.WebProxy</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Uri</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="destination" Type="System.Uri" />
      </Parameters>
      <Docs>
        <param name="destination">Экземпляр <see cref="T:System.Uri" /> запрошенного интернет-ресурса.</param>
        <summary>Возвращает URI, использующий прокси-сервер, для запроса.</summary>
        <returns>Экземпляр <see cref="T:System.Uri" /> интернет-ресурса, если этот ресурс находится в списке пропускаемых адресов, в противном случае — экземпляр <see cref="T:System.Uri" /> прокси-сервера.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Net.WebProxy.GetProxy%2A> Метод возвращает URI <xref:System.Net.WebRequest> экземпляр использует для доступа к Интернет-ресурса.  
  
 <xref:System.Net.WebProxy.GetProxy%2A> Сравнивает `destination` содержимым <xref:System.Net.WebProxy.BypassList%2A>, с использованием <xref:System.Net.WebProxy.IsBypassed%2A> метод. Если <xref:System.Net.WebProxy.IsBypassed%2A> возвращает `true`, <xref:System.Net.WebProxy.GetProxy%2A> возвращает `destination` и <xref:System.Net.WebRequest> экземпляр не использовать прокси-сервер.  
  
 Если `destination` не находится в <xref:System.Net.WebProxy.BypassList%2A>, <xref:System.Net.WebRequest> экземпляр использует прокси-сервера и <xref:System.Net.WebProxy.Address%2A> возвращается свойство.  
  
   
  
## Examples  
 В следующем примере кода создается <xref:System.Net.WebProxy> объекта и вызывает этот метод, чтобы получить прокси-сервера, выбранного для ресурса.  
  
 [!code-cpp[NCLAutoProxy#2](~/samples/snippets/cpp/VS_Snippets_Remoting/NCLAutoProxy/CPP/proxy.cpp#2)]
 [!code-csharp[NCLAutoProxy#2](~/samples/snippets/csharp/VS_Snippets_Remoting/NCLAutoProxy/CS/proxy.cs#2)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">Параметр <paramref name="destination" /> имеет значение <see langword="null" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="IsBypassed">
      <MemberSignature Language="C#" Value="public bool IsBypassed (Uri host);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool IsBypassed(class System.Uri host) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.WebProxy.IsBypassed(System.Uri)" />
      <MemberSignature Language="VB.NET" Value="Public Function IsBypassed (host As Uri) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual bool IsBypassed(Uri ^ host);" />
      <MemberSignature Language="F#" Value="abstract member IsBypassed : Uri -&gt; bool&#xA;override this.IsBypassed : Uri -&gt; bool" Usage="webProxy.IsBypassed host" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Net.IWebProxy.IsBypassed(System.Uri)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.WebProxy</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="host" Type="System.Uri" />
      </Parameters>
      <Docs>
        <param name="host">Принадлежащий узлу экземпляр <see cref="T:System.Uri" /> для проверки использования прокси-сервера.</param>
        <summary>Показывает, используется ли данный прокси-сервер для заданного узла.</summary>
        <returns>Значение <see langword="true" />, если прокси-сервер не должен использоваться для <paramref name="host" />; в противном случае — <see langword="false" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Net.WebProxy.IsBypassed%2A> Метод используется для определения, следует ли обходить прокси-сервер при доступе к Интернет-ресурсу.  
  
 <xref:System.Net.WebProxy.BypassProxyOnLocal%2A> И <xref:System.Net.WebProxy.BypassList%2A> свойства управляют возвращаемое значение <xref:System.Net.WebProxy.IsBypassed%2A> метод.  
  
 <xref:System.Net.WebProxy.IsBypassed%2A> Возвращает `true` при выполнении любого из следующих условий:  
  
-   Если <xref:System.Net.WebProxy.BypassProxyOnLocal%2A> — `true` и `host` — локальный URI. Локальные запросы определяются по отсутствию точки (.) в URI, как в «http://webserver/».  
  
-   Если `host` соответствует регулярному выражению в <xref:System.Net.WebProxy.BypassList%2A>.  
  
-   Если <xref:System.Net.WebProxy.Address%2A> имеет значение `null`.  
  
 Все другие условия возвращают `false`.  
  
   
  
## Examples  
 В следующем примере кода создается <xref:System.Net.WebProxy> объекта и вызывает этот метод, чтобы проверить, установлен ли список пропускаемых должным образом.  
  
 [!code-cpp[NCLWebProxy#12](~/samples/snippets/cpp/VS_Snippets_Remoting/NCLWebProxy/CPP/nclwebproxy.cpp#12)]
 [!code-csharp[NCLWebProxy#12](~/samples/snippets/csharp/VS_Snippets_Remoting/NCLWebProxy/CS/nclwebproxy.cs#12)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">Параметр <paramref name="host" /> имеет значение <see langword="null" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="System.Runtime.Serialization.ISerializable.GetObjectData">
      <MemberSignature Language="C#" Value="void ISerializable.GetObjectData (System.Runtime.Serialization.SerializationInfo serializationInfo, System.Runtime.Serialization.StreamingContext streamingContext);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance void System.Runtime.Serialization.ISerializable.GetObjectData(class System.Runtime.Serialization.SerializationInfo serializationInfo, valuetype System.Runtime.Serialization.StreamingContext streamingContext) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.WebProxy.System#Runtime#Serialization#ISerializable#GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)" />
      <MemberSignature Language="C++ CLI" Value=" virtual void System.Runtime.Serialization.ISerializable.GetObjectData(System::Runtime::Serialization::SerializationInfo ^ serializationInfo, System::Runtime::Serialization::StreamingContext streamingContext) = System::Runtime::Serialization::ISerializable::GetObjectData;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Runtime.Serialization.ISerializable.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.WebProxy</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="serializationInfo" Type="System.Runtime.Serialization.SerializationInfo" />
        <Parameter Name="streamingContext" Type="System.Runtime.Serialization.StreamingContext" />
      </Parameters>
      <Docs>
        <param name="serializationInfo">Объект <see cref="T:System.Runtime.Serialization.SerializationInfo" />, который требуется заполнить данными.</param>
        <param name="streamingContext">Структура <see cref="T:System.Runtime.Serialization.StreamingContext" /> указывающая назначение этой сериализации.</param>
        <summary>Создает данные и контекст сериализации, которые будут использоваться в системе для сериализации объекта <see cref="T:System.Net.WebProxy" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Система вызывает этот метод для сериализации объекта. приложения не вызывают его напрямую.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="UseDefaultCredentials">
      <MemberSignature Language="C#" Value="public bool UseDefaultCredentials { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool UseDefaultCredentials" />
      <MemberSignature Language="DocId" Value="P:System.Net.WebProxy.UseDefaultCredentials" />
      <MemberSignature Language="VB.NET" Value="Public Property UseDefaultCredentials As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool UseDefaultCredentials { bool get(); void set(bool value); };" />
      <MemberSignature Language="F#" Value="member this.UseDefaultCredentials : bool with get, set" Usage="System.Net.WebProxy.UseDefaultCredentials" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.WebProxy</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Возвращает или задает значение <see cref="T:System.Boolean" />, которое управляет отправкой учетных данных <see cref="P:System.Net.CredentialCache.DefaultCredentials" /> вместе с запросами.</summary>
        <value>Значение равно <see langword="true" />, если используются учетные данные по умолчанию, в противном случае — <see langword="false" />. Значение по умолчанию — <see langword="false" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Присвойте этому свойству значение `true` при запросов, выполненных этим <xref:System.Net.WebProxy> объекта по запросу сервера, проверка подлинности должна выполняться с использованием учетных данных пользователя, выполнившего вход. Для клиентских приложений это приемлемо в большинстве сценариев. Для приложений среднего уровня, таких как приложения ASP.NET, вместо того чтобы использовать это свойство обычно устанавливается <xref:System.Net.WebProxy.Credentials%2A> свойства учетные данные клиента, от лица которого выполняется запрос.  
  
 В следующей таблице показаны влияние параметра <xref:System.Net.WebProxy.UseDefaultCredentials%2A> значения, основанного на значении <xref:System.Net.WebProxy.Credentials%2A> свойство.  
  
|Значение <xref:System.Net.WebProxy.Credentials%2A>|Значение <xref:System.Net.WebProxy.UseDefaultCredentials%2A>|Действие|  
|----------------------------------------------------------------------------------------------------------------------------------------------------|--------------------------------------------------------------------------------------------------------------------------------------------------------------|------------|  
|<xref:System.Net.CredentialCache.DefaultCredentials%2A>|`true`|Не влияет.|  
|<xref:System.Net.CredentialCache.DefaultCredentials%2A>|`false`|Параметру <xref:System.Net.WebProxy.Credentials%2A> задается значение `null`.|  
|`null`|`true`|Параметру <xref:System.Net.WebProxy.Credentials%2A> задается значение <xref:System.Net.CredentialCache.DefaultCredentials%2A>.|  
|Любое значение, отличное от <xref:System.Net.CredentialCache.DefaultCredentials%2A> или `null`|`true` или `false`|Параметр <xref:System.Net.WebProxy.UseDefaultCredentials%2A> приводит к возникновению исключения.|  
  
 Если <xref:System.Net.WebProxy.UseDefaultCredentials%2A> — `false`, вы можете изменить <xref:System.Net.WebProxy.Credentials%2A> свойства любые учетные данные. Если <xref:System.Net.WebProxy.UseDefaultCredentials%2A> — `true`, замена <xref:System.Net.WebProxy.Credentials%2A> свойство из <xref:System.Net.CredentialCache.DefaultCredentials%2A> (значение, которое задается при <xref:System.Net.WebProxy.UseDefaultCredentials%2A> свойству `true`) будет создано исключение.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">Произведена попытка задать это свойства, в то время как свойство <see cref="P:System.Net.WebProxy.Credentials" /> содержит учетные данные, отличные от учетных данных по умолчанию.</exception>
      </Docs>
    </Member>
  </Members>
</Type>