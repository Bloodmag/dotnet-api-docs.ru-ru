<Type Name="DynamicMethod" FullName="System.Reflection.Emit.DynamicMethod">
  <TypeSignature Language="C#" Value="public sealed class DynamicMethod : System.Reflection.MethodInfo" />
  <TypeSignature Language="ILAsm" Value=".class public sequential ansi sealed beforefieldinit DynamicMethod extends System.Reflection.MethodInfo" />
  <TypeSignature Language="DocId" Value="T:System.Reflection.Emit.DynamicMethod" />
  <TypeSignature Language="VB.NET" Value="Public NotInheritable Class DynamicMethod&#xA;Inherits MethodInfo" />
  <TypeSignature Language="C++ CLI" Value="public ref class DynamicMethod sealed : System::Reflection::MethodInfo" />
  <AssemblyInfo>
    <AssemblyName>System.Reflection.Emit.Lightweight</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.3.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>mscorlib</AssemblyName>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Reflection.MethodInfo</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute>
      <AttributeName>System.Runtime.InteropServices.ComVisible(true)</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary><span data-ttu-id="86b04-101">Определяет и представляет динамический метод, который можно скомпилировать, выполнить и удалить.</span><span class="sxs-lookup"><span data-stu-id="86b04-101">Defines and represents a dynamic method that can be compiled, executed, and discarded.</span></span> <span data-ttu-id="86b04-102">Удаленные методы доступны для сборки мусора.</span><span class="sxs-lookup"><span data-stu-id="86b04-102">Discarded methods are available for garbage collection.</span></span></summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="86b04-103">Можно использовать <xref:System.Reflection.Emit.DynamicMethod> класс для создания и выполнения метода во время выполнения, без необходимости создания динамическую сборку и динамический тип, который будет содержать метод.</span><span class="sxs-lookup"><span data-stu-id="86b04-103">You can use the <xref:System.Reflection.Emit.DynamicMethod> class to generate and execute a method at run time, without having to generate a dynamic assembly and a dynamic type to contain the method.</span></span> <span data-ttu-id="86b04-104">Исполняемый код, созданный компилятором just-in-time (JIT) будет удален при <xref:System.Reflection.Emit.DynamicMethod> объект будет освобожден.</span><span class="sxs-lookup"><span data-stu-id="86b04-104">The executable code created by the just-in-time (JIT) compiler is reclaimed when the <xref:System.Reflection.Emit.DynamicMethod> object is reclaimed.</span></span> <span data-ttu-id="86b04-105">Динамические методы являются наиболее эффективный способ создания и выполнения кода небольшого объема.</span><span class="sxs-lookup"><span data-stu-id="86b04-105">Dynamic methods are the most efficient way to generate and execute small amounts of code.</span></span>  
  
 <span data-ttu-id="86b04-106">Анонимно размещенных динамических методов, или он может быть логически связан с модулем или типом.</span><span class="sxs-lookup"><span data-stu-id="86b04-106">A dynamic method can be anonymously hosted, or it can be logically associated with a module or with a type.</span></span>  
  
-   <span data-ttu-id="86b04-107">Если динамический метод размещен анонимно, находится в сборке, предоставляемых системой и поэтому изолирован от другого кода.</span><span class="sxs-lookup"><span data-stu-id="86b04-107">If the dynamic method is anonymously hosted, it is located in a system-provided assembly, and therefore is isolated from other code.</span></span> <span data-ttu-id="86b04-108">По умолчанию он имеет доступ ко всем данным, не являющиеся открытыми.</span><span class="sxs-lookup"><span data-stu-id="86b04-108">By default, it does not have access to any non-public data.</span></span> <span data-ttu-id="86b04-109">Анонимно размещенный динамический метод может быть ограничен возможность пропускать проверки видимости JIT-компилятора, если оно было предоставлено <xref:System.Security.Permissions.ReflectionPermission> с <xref:System.Security.Permissions.ReflectionPermissionFlag.RestrictedMemberAccess?displayProperty=nameWithType> флаг.</span><span class="sxs-lookup"><span data-stu-id="86b04-109">An anonymously hosted dynamic method can have restricted ability to skip the JIT compiler's visibility checks, if it has been granted <xref:System.Security.Permissions.ReflectionPermission> with the <xref:System.Security.Permissions.ReflectionPermissionFlag.RestrictedMemberAccess?displayProperty=nameWithType> flag.</span></span> <span data-ttu-id="86b04-110">Уровень доверия сборки, не являющиеся открытыми члены, осуществляется динамического метода необходимо, равным или подмножество, уровень доверия стека вызовов, создавшего динамического метода.</span><span class="sxs-lookup"><span data-stu-id="86b04-110">The trust level of the assembly whose non-public members are accessed by the dynamic method must be equal to, or a subset of, the trust level of the call stack that emitted the dynamic method.</span></span> <span data-ttu-id="86b04-111">Дополнительные сведения о анонимно размещенные динамические методы см. в разделе [Пошаговое руководство: порождение кода в сценариях частичного доверия](~/docs/framework/reflection-and-codedom/walkthrough-emitting-code-in-partial-trust-scenarios.md).</span><span class="sxs-lookup"><span data-stu-id="86b04-111">For more information about anonymously hosted dynamic methods, see [Walkthrough: Emitting Code in Partial Trust Scenarios](~/docs/framework/reflection-and-codedom/walkthrough-emitting-code-in-partial-trust-scenarios.md).</span></span>  
  
-   <span data-ttu-id="86b04-112">Если динамический метод связан с модулем, который указывается, динамический метод является фактически глобальными для данного модуля.</span><span class="sxs-lookup"><span data-stu-id="86b04-112">If the dynamic method is associated with a module that you specify, the dynamic method is effectively global to that module.</span></span> <span data-ttu-id="86b04-113">Он может получить доступ к все типы в модуль и все `internal` (`Friend` в Visual Basic) члены типов.</span><span class="sxs-lookup"><span data-stu-id="86b04-113">It can access all types in the module and all `internal` (`Friend` in Visual Basic) members of the types.</span></span> <span data-ttu-id="86b04-114">Можно связать динамический метод с любого модуля, независимо от того создания модуля, при условии, что спрос на <xref:System.Security.Permissions.ReflectionPermission> с <xref:System.Security.Permissions.ReflectionPermissionFlag.RestrictedMemberAccess> флаг можно удовлетворить стек вызовов, включающее код.</span><span class="sxs-lookup"><span data-stu-id="86b04-114">You can associate a dynamic method with any module, regardless of whether you created the module, provided that a demand for <xref:System.Security.Permissions.ReflectionPermission> with the <xref:System.Security.Permissions.ReflectionPermissionFlag.RestrictedMemberAccess> flag can be satisfied by the call stack that includes your code.</span></span> <span data-ttu-id="86b04-115">Если <xref:System.Security.Permissions.ReflectionPermissionFlag.MemberAccess?displayProperty=nameWithType> флаг включен в прав, можно пропускать проверки видимости JIT-компилятора и доступ к конфиденциальным данным всех типов, объявленных в модуле или в любой другой модуль в любой сборке динамического метода.</span><span class="sxs-lookup"><span data-stu-id="86b04-115">If the <xref:System.Security.Permissions.ReflectionPermissionFlag.MemberAccess?displayProperty=nameWithType> flag is included in the grant, the dynamic method can skip the JIT compiler's visibility checks and access the private data of all types declared in the module or in any other module in any assembly.</span></span>  
  
    > [!NOTE]
    >  <span data-ttu-id="86b04-116">При указании модуля, с которым связан динамический метод, что этот модуль должен отсутствовать в системную сборку, которая используется для анонимного размещения.</span><span class="sxs-lookup"><span data-stu-id="86b04-116">When you specify the module with which a dynamic method is associated, that module must not be in the system-provided assembly that is used for anonymous hosting.</span></span>  
  
-   <span data-ttu-id="86b04-117">Если динамический метод связан с указанного типа, он получает доступ ко всем членам типа, независимо от уровня доступа.</span><span class="sxs-lookup"><span data-stu-id="86b04-117">If the dynamic method is associated with a type that you specify, it has access to all members of the type, regardless of access level.</span></span> <span data-ttu-id="86b04-118">Кроме того можно пропускать проверки видимости JIT-компилятора.</span><span class="sxs-lookup"><span data-stu-id="86b04-118">In addition, JIT visibility checks can be skipped.</span></span> <span data-ttu-id="86b04-119">Это дает динамическому методу получать доступ к конфиденциальным данным других типов, объявленных в том же модуле или в любой другой модуль в любой сборке.</span><span class="sxs-lookup"><span data-stu-id="86b04-119">This gives the dynamic method access to the private data of other types declared in the same module or in any other module in any assembly.</span></span> <span data-ttu-id="86b04-120">Динамический метод можно связать с любым типом, но необходимо предоставить код <xref:System.Security.Permissions.ReflectionPermission> с обоими <xref:System.Security.Permissions.ReflectionPermissionFlag.RestrictedMemberAccess> и <xref:System.Security.Permissions.ReflectionPermissionFlag.MemberAccess> флаги.</span><span class="sxs-lookup"><span data-stu-id="86b04-120">You can associate a dynamic method with any type, but your code must be granted <xref:System.Security.Permissions.ReflectionPermission> with both the <xref:System.Security.Permissions.ReflectionPermissionFlag.RestrictedMemberAccess> and <xref:System.Security.Permissions.ReflectionPermissionFlag.MemberAccess> flags.</span></span>  
  
 <span data-ttu-id="86b04-121">В следующей таблице приведены типы и члены доступны анонимно размещенный динамический метод, с и без проверки видимости JIT-компилятора, в зависимости от того, следует ли <xref:System.Security.Permissions.ReflectionPermission> с <xref:System.Security.Permissions.ReflectionPermissionFlag.RestrictedMemberAccess> предоставляется флаг.</span><span class="sxs-lookup"><span data-stu-id="86b04-121">The following table shows which types and members are accessible to an anonymously hosted dynamic method, with and without JIT visibility checks, depending on whether <xref:System.Security.Permissions.ReflectionPermission> with the <xref:System.Security.Permissions.ReflectionPermissionFlag.RestrictedMemberAccess> flag is granted.</span></span>  
  
||<span data-ttu-id="86b04-122">Без <xref:System.Security.Permissions.ReflectionPermissionFlag.RestrictedMemberAccess></span><span class="sxs-lookup"><span data-stu-id="86b04-122">Without <xref:System.Security.Permissions.ReflectionPermissionFlag.RestrictedMemberAccess></span></span>|<span data-ttu-id="86b04-123">С <xref:System.Security.Permissions.ReflectionPermissionFlag.RestrictedMemberAccess></span><span class="sxs-lookup"><span data-stu-id="86b04-123">With <xref:System.Security.Permissions.ReflectionPermissionFlag.RestrictedMemberAccess></span></span>|  
|-|-|-|  
|<span data-ttu-id="86b04-124">Без пропуска проверки видимости JIT-компилятора</span><span class="sxs-lookup"><span data-stu-id="86b04-124">Without skipping JIT visibility checks</span></span>|<span data-ttu-id="86b04-125">Открытые элементы открытых типов в любой сборке.</span><span class="sxs-lookup"><span data-stu-id="86b04-125">Public members of public types in any assembly.</span></span>|<span data-ttu-id="86b04-126">Открытые элементы открытых типов в любой сборке.</span><span class="sxs-lookup"><span data-stu-id="86b04-126">Public members of public types in any assembly.</span></span>|  
|<span data-ttu-id="86b04-127">JIT-компилятора пропуска проверки видимости, с ограничениями</span><span class="sxs-lookup"><span data-stu-id="86b04-127">Skipping JIT visibility checks, with restrictions</span></span>|<span data-ttu-id="86b04-128">Открытые элементы открытых типов в любой сборке.</span><span class="sxs-lookup"><span data-stu-id="86b04-128">Public members of public types in any assembly.</span></span>|<span data-ttu-id="86b04-129">Все члены всех типов, только в сборках, уровни доверия которых равно или меньше, чем уровень доверия сборки, выпущенной динамического метода.</span><span class="sxs-lookup"><span data-stu-id="86b04-129">All members of all types, only in assemblies whose trust levels are equal to or less than the trust level of the assembly that emitted the dynamic method.</span></span>|  
  
> [!NOTE]
>  <span data-ttu-id="86b04-130">До появления [!INCLUDE[net_v20sp1_long](~/includes/net-v20sp1-long-md.md)], выпуска кода требовалось <xref:System.Security.Permissions.ReflectionPermission> с <xref:System.Security.Permissions.ReflectionPermissionFlag.ReflectionEmit?displayProperty=nameWithType> флаг.</span><span class="sxs-lookup"><span data-stu-id="86b04-130">Prior to the [!INCLUDE[net_v20sp1_long](~/includes/net-v20sp1-long-md.md)], emitting code required <xref:System.Security.Permissions.ReflectionPermission> with the <xref:System.Security.Permissions.ReflectionPermissionFlag.ReflectionEmit?displayProperty=nameWithType> flag.</span></span> <span data-ttu-id="86b04-131">Это разрешение включено по умолчанию в FullTrust и LocalIntranet, именованные наборы разрешений, но отсутствует в наборе разрешений Интернета.</span><span class="sxs-lookup"><span data-stu-id="86b04-131">This permission is included by default in the FullTrust and LocalIntranet named permission sets, but not in the Internet permission set.</span></span> <span data-ttu-id="86b04-132">Таким образом, в более ранних версиях [!INCLUDE[dnprdnshort](~/includes/dnprdnshort-md.md)] библиотека может использоваться с интернет-разрешениями только в том случае, если он имеет <xref:System.Security.SecurityCriticalAttribute> атрибута, а также выполняет <xref:System.Security.PermissionSet.Assert%2A> для <xref:System.Security.Permissions.ReflectionPermissionFlag.ReflectionEmit>.</span><span class="sxs-lookup"><span data-stu-id="86b04-132">Therefore, in earlier versions of the [!INCLUDE[dnprdnshort](~/includes/dnprdnshort-md.md)] a library can be used with Internet permissions only if it has the <xref:System.Security.SecurityCriticalAttribute> attribute and also executes an <xref:System.Security.PermissionSet.Assert%2A> for <xref:System.Security.Permissions.ReflectionPermissionFlag.ReflectionEmit>.</span></span> <span data-ttu-id="86b04-133">Такие библиотеки требуют тщательной проверки безопасности, так как ошибки в коде могут стать причиной уязвимости.</span><span class="sxs-lookup"><span data-stu-id="86b04-133">Such libraries require careful security review because coding errors could result in security holes.</span></span> <span data-ttu-id="86b04-134">Платформа [!INCLUDE[net_v20SP1_short](~/includes/net-v20sp1-short-md.md)] позволяет создавать код в сценариях частичного доверия без предъявления каких-либо требований к безопасности, так как создание кода по сути не является привилегированной операцией.</span><span class="sxs-lookup"><span data-stu-id="86b04-134">The [!INCLUDE[net_v20SP1_short](~/includes/net-v20sp1-short-md.md)] allows code to be emitted in partial trust scenarios without issuing any security demands, because generating code is not inherently a privileged operation.</span></span> <span data-ttu-id="86b04-135">То есть созданный код имеет не больше разрешений, чем породившая его сборка.</span><span class="sxs-lookup"><span data-stu-id="86b04-135">That is, the generated code has no more permissions than the assembly that emits it.</span></span> <span data-ttu-id="86b04-136">Это позволяет библиотекам, порождающим код, сохранять прозрачность для системы безопасности, что устраняет необходимость в утверждении перечисления <xref:System.Security.Permissions.ReflectionPermissionFlag.ReflectionEmit> и упрощает задачу написания безопасной библиотеки.</span><span class="sxs-lookup"><span data-stu-id="86b04-136">This allows libraries that emit code to be security transparent and removes the need to assert <xref:System.Security.Permissions.ReflectionPermissionFlag.ReflectionEmit>, which simplifies the task of writing a secure library.</span></span> <span data-ttu-id="86b04-137">Чтобы использовать эту функцию, приложение должно использовать [!INCLUDE[net_v35_long](~/includes/net-v35-long-md.md)] или более поздней версии.</span><span class="sxs-lookup"><span data-stu-id="86b04-137">To use this feature, your application should target the [!INCLUDE[net_v35_long](~/includes/net-v35-long-md.md)] or later.</span></span>  
  
 <span data-ttu-id="86b04-138">В следующей таблице приведены типы и члены доступны для динамического метода, связанного с модулем или с типом в модуле.</span><span class="sxs-lookup"><span data-stu-id="86b04-138">The following table shows which types and members are accessible to a dynamic method that is associated with a module or with a type in a module.</span></span>  
  
||<span data-ttu-id="86b04-139">Связанный с модулем</span><span class="sxs-lookup"><span data-stu-id="86b04-139">Associated with module</span></span>|<span data-ttu-id="86b04-140">Связанный с типом</span><span class="sxs-lookup"><span data-stu-id="86b04-140">Associated with type</span></span>|  
|-|-|-|  
|<span data-ttu-id="86b04-141">Без пропуска проверки видимости JIT-компилятора</span><span class="sxs-lookup"><span data-stu-id="86b04-141">Without skipping JIT visibility checks</span></span>|<span data-ttu-id="86b04-142">Открытые и внутренние элементы открытых, внутренних и закрытых типов в модуле.</span><span class="sxs-lookup"><span data-stu-id="86b04-142">Public and internal members of public, internal, and private types in the module.</span></span><br /><br /> <span data-ttu-id="86b04-143">Открытые элементы открытых типов в любой сборке.</span><span class="sxs-lookup"><span data-stu-id="86b04-143">Public members of public types in any assembly.</span></span>|<span data-ttu-id="86b04-144">Все члены связанного типа.</span><span class="sxs-lookup"><span data-stu-id="86b04-144">All members of the associated type.</span></span> <span data-ttu-id="86b04-145">Открытые и внутренние элементы всех других типов в модуле.</span><span class="sxs-lookup"><span data-stu-id="86b04-145">Public and internal members of all the other types in the module.</span></span><br /><br /> <span data-ttu-id="86b04-146">Открытые элементы открытых типов в любой сборке.</span><span class="sxs-lookup"><span data-stu-id="86b04-146">Public members of public types in any assembly.</span></span>|  
|<span data-ttu-id="86b04-147">Пропуск проверки видимости JIT-компилятора</span><span class="sxs-lookup"><span data-stu-id="86b04-147">Skipping JIT visibility checks</span></span>|<span data-ttu-id="86b04-148">Все члены всех типов в любой сборке.</span><span class="sxs-lookup"><span data-stu-id="86b04-148">All members of all types in any assembly.</span></span>|<span data-ttu-id="86b04-149">Все члены всех типов в любой сборке.</span><span class="sxs-lookup"><span data-stu-id="86b04-149">All members of all types in any assembly.</span></span>|  
  
 <span data-ttu-id="86b04-150">Динамический метод, который связан с модулем, имеет разрешения модуля.</span><span class="sxs-lookup"><span data-stu-id="86b04-150">A dynamic method that is associated with a module has the permissions of that module.</span></span> <span data-ttu-id="86b04-151">Динамический метод, который связан с типом, имеет разрешения модуля, содержащего типа.</span><span class="sxs-lookup"><span data-stu-id="86b04-151">A dynamic method that is associated with a type has the permissions of the module containing that type.</span></span>  
  
 <span data-ttu-id="86b04-152">Динамические методы и их параметры не обязательно присваивать имя, но можно указать имена, чтобы упростить отладку.</span><span class="sxs-lookup"><span data-stu-id="86b04-152">Dynamic methods and their parameters do not have to be named, but you can specify names to assist in debugging.</span></span> <span data-ttu-id="86b04-153">Пользовательские атрибуты не поддерживаются для динамических методов или их параметров.</span><span class="sxs-lookup"><span data-stu-id="86b04-153">Custom attributes are not supported on dynamic methods or their parameters.</span></span>  
  
 <span data-ttu-id="86b04-154">Несмотря на то, что динамические методы являются `static` методы (`Shared` методы в Visual Basic), настроить правила для привязки делегата, представленных в [!INCLUDE[dnprdnlong](~/includes/dnprdnlong-md.md)] Разрешить динамический метод может быть привязано к объекту, чтобы они работали как метод экземпляра при вызван с использованием этого экземпляра делегата.</span><span class="sxs-lookup"><span data-stu-id="86b04-154">Although dynamic methods are `static` methods (`Shared` methods in Visual Basic), the relaxed rules for delegate binding introduced in the [!INCLUDE[dnprdnlong](~/includes/dnprdnlong-md.md)] allow a dynamic method to be bound to an object, so that it acts like an instance method when called using that delegate instance.</span></span> <span data-ttu-id="86b04-155">Пример, демонстрирующий это предоставляется для <xref:System.Reflection.Emit.DynamicMethod.CreateDelegate%28System.Type%2CSystem.Object%29> перегрузки метода.</span><span class="sxs-lookup"><span data-stu-id="86b04-155">An example that demonstrates this is provided for the <xref:System.Reflection.Emit.DynamicMethod.CreateDelegate%28System.Type%2CSystem.Object%29> method overload.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="86b04-156">В [!INCLUDE[dnprdnlong](~/includes/dnprdnlong-md.md)], динамические методы не поддерживают сведения символа, то есть, имена локальных переменных и сопоставления номеров строк.</span><span class="sxs-lookup"><span data-stu-id="86b04-156">In the [!INCLUDE[dnprdnlong](~/includes/dnprdnlong-md.md)], dynamic methods do not support symbol information, that is, local variable names and line-number mapping.</span></span> <span data-ttu-id="86b04-157">Это ограничение может быть удален в будущей версии.</span><span class="sxs-lookup"><span data-stu-id="86b04-157">This limitation might be removed in a future version.</span></span> <span data-ttu-id="86b04-158">Можно использовать <xref:System.Reflection.Emit.AssemblyBuilder> во время разработки, чтобы упростить процесс отладки созданный промежуточный язык Майкрософт (MSIL), а затем переключиться в динамические методы во время окончательного развертывания, так как <xref:System.Reflection.Emit.ILGenerator> , вызываются в обоих случаях совпадают.</span><span class="sxs-lookup"><span data-stu-id="86b04-158">You can use <xref:System.Reflection.Emit.AssemblyBuilder> during development to simplify debugging the generated Microsoft intermediate language (MSIL), and then switch to dynamic methods during final deployment, because the <xref:System.Reflection.Emit.ILGenerator> calls are the same in both cases.</span></span>  
  
## <a name="verification"></a><span data-ttu-id="86b04-159">Проверка</span><span class="sxs-lookup"><span data-stu-id="86b04-159">Verification</span></span>  
 <span data-ttu-id="86b04-160">В следующем списке перечислены условия, при которых динамические методы могут содержать непроверяемый код.</span><span class="sxs-lookup"><span data-stu-id="86b04-160">The following list summarizes the conditions under which dynamic methods can contain unverifiable code.</span></span> <span data-ttu-id="86b04-161">(Например, динамический метод не может быть проверен при его <xref:System.Reflection.Emit.DynamicMethod.InitLocals%2A> свойству `false`.)</span><span class="sxs-lookup"><span data-stu-id="86b04-161">(For example, a dynamic method is unverifiable if its <xref:System.Reflection.Emit.DynamicMethod.InitLocals%2A> property is set to `false`.)</span></span>  
  
-   <span data-ttu-id="86b04-162">Динамический метод, который связан с точки зрения безопасности сборки также является критическим с точки зрения безопасности и проверку можно пропустить.</span><span class="sxs-lookup"><span data-stu-id="86b04-162">A dynamic method that is associated with a security-critical assembly is also security-critical, and can skip verification.</span></span> <span data-ttu-id="86b04-163">Например сборки без атрибутов безопасности, который выполняется как классическое приложение рассматривает как критические для безопасности среды выполнения.</span><span class="sxs-lookup"><span data-stu-id="86b04-163">For example, an assembly without security attributes that is run as a desktop application is treated as security-critical by the runtime.</span></span> <span data-ttu-id="86b04-164">Если динамический метод связан со сборкой, динамический метод может содержать непроверяемый код.</span><span class="sxs-lookup"><span data-stu-id="86b04-164">If you associate a dynamic method with the assembly, the dynamic method can contain unverifiable code.</span></span>  
  
-   <span data-ttu-id="86b04-165">Если динамический метод, который содержит непроверяемый код связан с сборку, которая имеет прозрачность уровня 1, компилятор just-in-time (JIT) внедряет требование безопасности.</span><span class="sxs-lookup"><span data-stu-id="86b04-165">If a dynamic method that contains unverifiable code is associated with an assembly that has level 1 transparency, the just-in-time (JIT) compiler injects a security demand.</span></span> <span data-ttu-id="86b04-166">Требование завершается успешно только в том случае, если динамический метод выполняется полностью доверенным кодом.</span><span class="sxs-lookup"><span data-stu-id="86b04-166">The demand succeeds only if the dynamic method is executed by fully trusted code.</span></span> <span data-ttu-id="86b04-167">В разделе [прозрачный с точки зрения безопасности код, уровень 1](~/docs/framework/misc/security-transparent-code-level-1.md).</span><span class="sxs-lookup"><span data-stu-id="86b04-167">See [Security-Transparent Code, Level 1](~/docs/framework/misc/security-transparent-code-level-1.md).</span></span>  
  
-   <span data-ttu-id="86b04-168">Если динамический метод, который содержит непроверяемый код связан с сборку, которая имеет прозрачность уровня 2 (например mscorlib.dll), создается исключение (поступающее JIT-компилятором) вместо создания требования безопасности.</span><span class="sxs-lookup"><span data-stu-id="86b04-168">If a dynamic method that contains unverifiable code is associated with an assembly that has level 2 transparency (such as mscorlib.dll), it throws an exception (injected by the JIT compiler) instead of making a security demand.</span></span> <span data-ttu-id="86b04-169">В разделе [прозрачный с точки зрения безопасности код, уровень 2](~/docs/framework/misc/security-transparent-code-level-2.md).</span><span class="sxs-lookup"><span data-stu-id="86b04-169">See [Security-Transparent Code, Level 2](~/docs/framework/misc/security-transparent-code-level-2.md).</span></span>  
  
-   <span data-ttu-id="86b04-170">Анонимно размещенный динамический метод, который содержит непроверяемый код всегда создает исключение.</span><span class="sxs-lookup"><span data-stu-id="86b04-170">An anonymously hosted dynamic method that contains unverifiable code always throws an exception.</span></span> <span data-ttu-id="86b04-171">Он никогда не может пропускать проверку, даже в том случае, если он создается и выполняется полностью доверенным кодом.</span><span class="sxs-lookup"><span data-stu-id="86b04-171">It can never skip verification, even if it is created and executed by fully trusted code.</span></span>  
  
 <span data-ttu-id="86b04-172">Исключение, которое выдается в случае непроверяемый код зависит от способа вызова динамического метода.</span><span class="sxs-lookup"><span data-stu-id="86b04-172">The exception that is thrown for unverifiable code varies depending on the way the dynamic method is invoked.</span></span> <span data-ttu-id="86b04-173">Если вызвать динамический метод с помощью делегата, возвращенные <xref:System.Reflection.Emit.DynamicMethod.CreateDelegate%2A> метода <xref:System.Security.VerificationException> создается исключение.</span><span class="sxs-lookup"><span data-stu-id="86b04-173">If you invoke a dynamic method by using a delegate returned from the <xref:System.Reflection.Emit.DynamicMethod.CreateDelegate%2A> method, a <xref:System.Security.VerificationException> is thrown.</span></span> <span data-ttu-id="86b04-174">Если динамический метод вызывается с помощью <xref:System.Reflection.Emit.DynamicMethod.Invoke%2A> метода <xref:System.Reflection.TargetInvocationException> создается внутренний <xref:System.Security.VerificationException>.</span><span class="sxs-lookup"><span data-stu-id="86b04-174">If you invoke the dynamic method by using the <xref:System.Reflection.Emit.DynamicMethod.Invoke%2A> method, a <xref:System.Reflection.TargetInvocationException> is thrown with an inner <xref:System.Security.VerificationException>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="86b04-175">В следующем примере кода создается динамический метод, который принимает два параметра.</span><span class="sxs-lookup"><span data-stu-id="86b04-175">The following code example creates a dynamic method that takes two parameters.</span></span> <span data-ttu-id="86b04-176">В этом примере выпускается основной текст простой функции, который выводит первый параметр в консоль, а в примере используется второй параметр в качестве возвращаемого значения метода.</span><span class="sxs-lookup"><span data-stu-id="86b04-176">The example emits a simple function body that prints the first parameter to the console, and the example uses the second parameter as the return value of the method.</span></span> <span data-ttu-id="86b04-177">В примере завершает метод путем создания делегата, вызывает делегат с различными параметрами и наконец вызывает динамический метод с помощью <xref:System.Reflection.Emit.DynamicMethod.Invoke%2A> метод.</span><span class="sxs-lookup"><span data-stu-id="86b04-177">The example completes the method by creating a delegate, invokes the delegate with different parameters, and finally invokes the dynamic method using the <xref:System.Reflection.Emit.DynamicMethod.Invoke%2A> method.</span></span>  
  
 [!code-cpp[Reflection.DynamicMethod.All#1](~/samples/snippets/cpp/VS_Snippets_CLR/Reflection.DynamicMethod.All/cpp/source.cpp#1)]
 [!code-csharp[Reflection.DynamicMethod.All#1](~/samples/snippets/csharp/VS_Snippets_CLR/Reflection.DynamicMethod.All/CS/source.cs#1)]
 [!code-vb[Reflection.DynamicMethod.All#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/Reflection.DynamicMethod.All/VB/source.vb#1)]  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <MemberGroup MemberName=".ctor">
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Emit.Lightweight</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.3.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="86b04-178">Создает динамический метод.</span><span class="sxs-lookup"><span data-stu-id="86b04-178">Creates a dynamic method.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public DynamicMethod (string name, Type returnType, Type[] parameterTypes);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(string name, class System.Type returnType, class System.Type[] parameterTypes) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.Emit.DynamicMethod.#ctor(System.String,System.Type,System.Type[])" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (name As String, returnType As Type, parameterTypes As Type())" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; DynamicMethod(System::String ^ name, Type ^ returnType, cli::array &lt;Type ^&gt; ^ parameterTypes);" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Emit.Lightweight</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.3.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
        <Parameter Name="returnType" Type="System.Type" />
        <Parameter Name="parameterTypes" Type="System.Type[]" />
      </Parameters>
      <Docs>
        <param name="name"><span data-ttu-id="86b04-179">Имя динамического метода.</span><span class="sxs-lookup"><span data-stu-id="86b04-179">The name of the dynamic method.</span></span> <span data-ttu-id="86b04-180">Это может быть строка нулевой длины, но не <see langword="null" />.</span><span class="sxs-lookup"><span data-stu-id="86b04-180">This can be a zero-length string, but it cannot be <see langword="null" />.</span></span></param>
        <param name="returnType"><span data-ttu-id="86b04-181">Объект <see cref="T:System.Type" />, который указывает возвращаемый тип динамического метода, или значение <see langword="null" />, если метод не имеет возвращаемого типа.</span><span class="sxs-lookup"><span data-stu-id="86b04-181">A <see cref="T:System.Type" /> object that specifies the return type of the dynamic method, or <see langword="null" /> if the method has no return type.</span></span></param>
        <param name="parameterTypes"><span data-ttu-id="86b04-182">Массив объектов <see cref="T:System.Type" />, указывающих типы параметров динамического метода, или значение <see langword="null" />, если метод не имеет параметров.</span><span class="sxs-lookup"><span data-stu-id="86b04-182">An array of <see cref="T:System.Type" /> objects specifying the types of the parameters of the dynamic method, or <see langword="null" /> if the method has no parameters.</span></span></param>
        <summary><span data-ttu-id="86b04-183">Инициализирует анонимно размещенный динамический метод, указывая имя метода, возвращаемый тип и типы параметров.</span><span class="sxs-lookup"><span data-stu-id="86b04-183">Initializes an anonymously hosted dynamic method, specifying the method name, return type, and parameter types.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="86b04-184">Динамический метод, который создан этим конструктором связан с анонимной сборкой, а не существующий тип или модуль.</span><span class="sxs-lookup"><span data-stu-id="86b04-184">The dynamic method that is created by this constructor is associated with an anonymous assembly instead of an existing type or module.</span></span> <span data-ttu-id="86b04-185">Анонимная сборка существует только для предоставления изолированной среды для динамических методов, то есть, чтобы изолировать их из другого кода.</span><span class="sxs-lookup"><span data-stu-id="86b04-185">The anonymous assembly exists only to provide a sandbox environment for dynamic methods, that is, to isolate them from other code.</span></span> <span data-ttu-id="86b04-186">Эта среда делает безопасным для динамического метода, чтобы выпуск и выполнение кода с частичным доверием.</span><span class="sxs-lookup"><span data-stu-id="86b04-186">This environment makes it safe for the dynamic method to be emitted and executed by partially trusted code.</span></span>  
  
 <span data-ttu-id="86b04-187">Этот конструктор указывает, что видимость just-in-time (JIT) проверяет, будет действовать для промежуточного языка Майкрософт (MSIL) динамического метода.</span><span class="sxs-lookup"><span data-stu-id="86b04-187">This constructor specifies that just-in-time (JIT) visibility checks will be enforced for the Microsoft intermediate language (MSIL) of the dynamic method.</span></span> <span data-ttu-id="86b04-188">То есть код в динамическом методе имеет доступ для открытых методов открытых классов.</span><span class="sxs-lookup"><span data-stu-id="86b04-188">That is, the code in the dynamic method has access to public methods of public classes.</span></span> <span data-ttu-id="86b04-189">Исключения возникают в том случае, если метод пытается обращаться к типам и членам, которые имеют `private`, `protected`, или `internal` (`Friend` в Visual Basic).</span><span class="sxs-lookup"><span data-stu-id="86b04-189">Exceptions are thrown if the method tries to access types or members that are `private`, `protected`, or `internal` (`Friend` in Visual Basic).</span></span> <span data-ttu-id="86b04-190">Чтобы создать динамический метод, который имеет ограниченные возможности пропуска проверки видимости JIT-компилятора, используйте <xref:System.Reflection.Emit.DynamicMethod.%23ctor%28System.String%2CSystem.Type%2CSystem.Type%5B%5D%2CSystem.Boolean%29> конструктор.</span><span class="sxs-lookup"><span data-stu-id="86b04-190">To create a dynamic method that has restricted ability to skip JIT visibility checks, use the <xref:System.Reflection.Emit.DynamicMethod.%23ctor%28System.String%2CSystem.Type%2CSystem.Type%5B%5D%2CSystem.Boolean%29> constructor.</span></span>  
  
 <span data-ttu-id="86b04-191">При создании анонимно размещенный динамический метод входит в стеке вызовов порождающей сборки.</span><span class="sxs-lookup"><span data-stu-id="86b04-191">When an anonymously hosted dynamic method is constructed, the call stack of the emitting assembly is included.</span></span> <span data-ttu-id="86b04-192">При вызове метода разрешения порождающей сборки используются вместо фактического вызывающего объекта разрешений.</span><span class="sxs-lookup"><span data-stu-id="86b04-192">When the method is invoked, the permissions of the emitting assembly are used instead of the permissions of the actual caller.</span></span> <span data-ttu-id="86b04-193">Таким образом динамический метод не может выполняться на более высокий уровень привилегий, чем, выпустившей его сборки, даже если он был передан и выполнен в сборке, которая имеет более высокий уровень доверия.</span><span class="sxs-lookup"><span data-stu-id="86b04-193">Thus, the dynamic method cannot execute at a higher level of privilege than that of the assembly that emitted it, even if it is passed to and executed by an assembly that has a higher trust level.</span></span>  
  
 <span data-ttu-id="86b04-194">Этот конструктор задает атрибуты метода <xref:System.Reflection.MethodAttributes.Public?displayProperty=nameWithType> и <xref:System.Reflection.MethodAttributes.Static?displayProperty=nameWithType>и соглашение о вызовах <xref:System.Reflection.CallingConventions.Standard?displayProperty=nameWithType>.</span><span class="sxs-lookup"><span data-stu-id="86b04-194">This constructor specifies the method attributes <xref:System.Reflection.MethodAttributes.Public?displayProperty=nameWithType> and <xref:System.Reflection.MethodAttributes.Static?displayProperty=nameWithType>, and the calling convention <xref:System.Reflection.CallingConventions.Standard?displayProperty=nameWithType>.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="86b04-195">Этот конструктор впервые появился в [!INCLUDE[net_v35_long](~/includes/net-v35-long-md.md)] или более поздней версии.</span><span class="sxs-lookup"><span data-stu-id="86b04-195">This constructor was introduced in the [!INCLUDE[net_v35_long](~/includes/net-v35-long-md.md)] or later.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="86b04-196">Элемент <paramref name="parameterTypes" /> имеет значение <see langword="null" /> или <see cref="T:System.Void" />.</span><span class="sxs-lookup"><span data-stu-id="86b04-196">An element of <paramref name="parameterTypes" /> is <see langword="null" /> or <see cref="T:System.Void" />.</span></span></exception>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="86b04-197">Свойство <paramref name="name" /> имеет значение <see langword="null" />.</span><span class="sxs-lookup"><span data-stu-id="86b04-197"><paramref name="name" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.NotSupportedException">
          <span data-ttu-id="86b04-198"><paramref name="returnType" /> — это тип, для которого <see cref="P:System.Type.IsByRef" /> возвращает <see langword="true" />.</span><span class="sxs-lookup"><span data-stu-id="86b04-198"><paramref name="returnType" /> is a type for which <see cref="P:System.Type.IsByRef" /> returns <see langword="true" />.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public DynamicMethod (string name, Type returnType, Type[] parameterTypes, bool restrictedSkipVisibility);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(string name, class System.Type returnType, class System.Type[] parameterTypes, bool restrictedSkipVisibility) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.Emit.DynamicMethod.#ctor(System.String,System.Type,System.Type[],System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (name As String, returnType As Type, parameterTypes As Type(), restrictedSkipVisibility As Boolean)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; DynamicMethod(System::String ^ name, Type ^ returnType, cli::array &lt;Type ^&gt; ^ parameterTypes, bool restrictedSkipVisibility);" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Emit.Lightweight</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.3.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
        <Parameter Name="returnType" Type="System.Type" />
        <Parameter Name="parameterTypes" Type="System.Type[]" />
        <Parameter Name="restrictedSkipVisibility" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="name"><span data-ttu-id="86b04-199">Имя динамического метода.</span><span class="sxs-lookup"><span data-stu-id="86b04-199">The name of the dynamic method.</span></span> <span data-ttu-id="86b04-200">Это может быть строка нулевой длины, но не <see langword="null" />.</span><span class="sxs-lookup"><span data-stu-id="86b04-200">This can be a zero-length string, but it cannot be <see langword="null" />.</span></span></param>
        <param name="returnType"><span data-ttu-id="86b04-201">Объект <see cref="T:System.Type" />, который указывает возвращаемый тип динамического метода, или значение <see langword="null" />, если метод не имеет возвращаемого типа.</span><span class="sxs-lookup"><span data-stu-id="86b04-201">A <see cref="T:System.Type" /> object that specifies the return type of the dynamic method, or <see langword="null" /> if the method has no return type.</span></span></param>
        <param name="parameterTypes"><span data-ttu-id="86b04-202">Массив объектов <see cref="T:System.Type" />, указывающих типы параметров динамического метода, или значение <see langword="null" />, если метод не имеет параметров.</span><span class="sxs-lookup"><span data-stu-id="86b04-202">An array of <see cref="T:System.Type" /> objects specifying the types of the parameters of the dynamic method, or <see langword="null" /> if the method has no parameters.</span></span></param>
        <param name="restrictedSkipVisibility">
          <span data-ttu-id="86b04-203"><see langword="true" /> — пропускает проверки видимости JIT для типов и членов, к которым получает доступ MSIL динамического метода, с таким ограничением: уровень доверия сборок, содержащих эти типы и члены, должен быть равен уровню доверия стека вызовов, создающего динамический метод, или меньше его. В противном случае — <see langword="false" />.</span><span class="sxs-lookup"><span data-stu-id="86b04-203"><see langword="true" /> to skip JIT visibility checks on types and members accessed by the MSIL of the dynamic method, with this restriction: the trust level of the assemblies that contain those types and members must be equal to or less than the trust level of the call stack that emits the dynamic method; otherwise, <see langword="false" />.</span></span></param>
        <summary><span data-ttu-id="86b04-204">Инициализирует анонимно размещенный динамический метод, указывая имя метода, возвращаемый тип, типы параметров и необходимость пропуска проверки видимости JIT для типов и членов, к которым получает доступ MSIL динамического метода.</span><span class="sxs-lookup"><span data-stu-id="86b04-204">Initializes an anonymously hosted dynamic method, specifying the method name, return type, parameter types, and whether just-in-time (JIT) visibility checks should be skipped for types and members accessed by the Microsoft intermediate language (MSIL) of the dynamic method.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="86b04-205">Динамический метод, который создан этим конструктором связан с анонимной сборкой, а не существующий тип или модуль.</span><span class="sxs-lookup"><span data-stu-id="86b04-205">The dynamic method that is created by this constructor is associated with an anonymous assembly instead of an existing type or module.</span></span> <span data-ttu-id="86b04-206">Анонимная сборка существует только для предоставления изолированной среды для динамических методов, то есть, чтобы изолировать их из другого кода.</span><span class="sxs-lookup"><span data-stu-id="86b04-206">The anonymous assembly exists only to provide a sandbox environment for dynamic methods, that is, to isolate them from other code.</span></span> <span data-ttu-id="86b04-207">Эта среда делает безопасным для динамического метода, чтобы выпуск и выполнение кода с частичным доверием.</span><span class="sxs-lookup"><span data-stu-id="86b04-207">This environment makes it safe for the dynamic method to be emitted and executed by partially trusted code.</span></span>  
  
 <span data-ttu-id="86b04-208">Анонимно размещенные динамические методы имеют автоматический доступ к устаревшие типы и члены, которые являются `private`, `protected`, или `internal` (`Friend` в Visual Basic).</span><span class="sxs-lookup"><span data-stu-id="86b04-208">Anonymously hosted dynamic methods do not have automatic access to any types or members that are `private`, `protected`, or `internal` (`Friend` in Visual Basic).</span></span> <span data-ttu-id="86b04-209">Это отличается от динамических методов, связанных с существующим типом или модулем, которые имеют доступ к скрытым элементам в соответствующей области.</span><span class="sxs-lookup"><span data-stu-id="86b04-209">This is different from dynamic methods that are associated with an existing type or module, which have access to hidden members in their associated scope.</span></span>  
  
 <span data-ttu-id="86b04-210">Укажите `true` для `restrictedSkipVisibility` Если динамический метод имеет доступ к типы или члены, которые являются `private`, `protected`, или `internal`.</span><span class="sxs-lookup"><span data-stu-id="86b04-210">Specify `true` for `restrictedSkipVisibility` if your dynamic method has to access types or members that are `private`, `protected`, or `internal`.</span></span> <span data-ttu-id="86b04-211">Это дает динамическому методу ограниченный доступ к этим членам.</span><span class="sxs-lookup"><span data-stu-id="86b04-211">This gives the dynamic method restricted access to these members.</span></span> <span data-ttu-id="86b04-212">То есть члены доступны только в том случае, если выполняются следующие условия:</span><span class="sxs-lookup"><span data-stu-id="86b04-212">That is, the members can be accessed only if the following conditions are met:</span></span>  
  
-   <span data-ttu-id="86b04-213">Целевые элементы принадлежат к сборке, уровень доверия выше, чем стека вызовов, создающего динамический метод.</span><span class="sxs-lookup"><span data-stu-id="86b04-213">The target members belong to an assembly that has a level of trust equal to or lower than the call stack that emits the dynamic method.</span></span>  
  
-   <span data-ttu-id="86b04-214">Стек вызовов, создающего динамический метод предоставляется <xref:System.Security.Permissions.ReflectionPermission> с <xref:System.Security.Permissions.ReflectionPermissionFlag.RestrictedMemberAccess?displayProperty=nameWithType> флаг.</span><span class="sxs-lookup"><span data-stu-id="86b04-214">The call stack that emits the dynamic method is granted <xref:System.Security.Permissions.ReflectionPermission> with the <xref:System.Security.Permissions.ReflectionPermissionFlag.RestrictedMemberAccess?displayProperty=nameWithType> flag.</span></span> <span data-ttu-id="86b04-215">Это всегда значение true, если код выполняется с полным доверием.</span><span class="sxs-lookup"><span data-stu-id="86b04-215">This is always true when the code is executed with full trust.</span></span> <span data-ttu-id="86b04-216">Частично доверенным кодом он имеет значение true только в том случае, если узел явным образом предоставляет разрешение.</span><span class="sxs-lookup"><span data-stu-id="86b04-216">For partially trusted code, it is true only if the host explicitly grants the permission.</span></span>  
  
    > [!IMPORTANT]
    >  <span data-ttu-id="86b04-217">Если не предоставлено разрешение, возникает исключение безопасности при <xref:System.Reflection.Emit.DynamicMethod.CreateDelegate%2A> вызывается или при вызове динамического метода, не когда этот конструктор вызывается.</span><span class="sxs-lookup"><span data-stu-id="86b04-217">If the permission has not been granted, a security exception is thrown when <xref:System.Reflection.Emit.DynamicMethod.CreateDelegate%2A> is called or when the dynamic method is invoked, not when this constructor is called.</span></span> <span data-ttu-id="86b04-218">Специальные разрешения не требуются для создания динамического метода.</span><span class="sxs-lookup"><span data-stu-id="86b04-218">No special permissions are required to emit the dynamic method.</span></span>  
  
 <span data-ttu-id="86b04-219">Например, динамический метод, который создается с `restrictedSkipVisibility` значение `true` можно доступ к закрытому элементу любой сборки в стеке вызовов, если стек вызовов имеет ограниченный доступ к элементу.</span><span class="sxs-lookup"><span data-stu-id="86b04-219">For example, a dynamic method that is created with `restrictedSkipVisibility` set to `true` can access a private member of any assembly on the call stack if the call stack has been granted restricted member access.</span></span> <span data-ttu-id="86b04-220">Если динамический метод создается с частично доверенным кодом в стеке вызовов, ему не удается открыть закрытый член типа в [!INCLUDE[dnprdnshort](~/includes/dnprdnshort-md.md)] сборки, поскольку такие сборки являются полностью доверенными.</span><span class="sxs-lookup"><span data-stu-id="86b04-220">If the dynamic method is created with partially trusted code on the call stack, it cannot access a private member of a type in a [!INCLUDE[dnprdnshort](~/includes/dnprdnshort-md.md)] assembly, because such assemblies are fully trusted.</span></span>  
  
 <span data-ttu-id="86b04-221">Если `restrictedSkipVisibility` — `false`, применяются проверки видимости JIT.</span><span class="sxs-lookup"><span data-stu-id="86b04-221">If `restrictedSkipVisibility` is `false`, JIT visibility checks are enforced.</span></span> <span data-ttu-id="86b04-222">Код в динамический метод имеет доступ к открытых методов открытых классов, и исключения возникают в том случае, если он пытается обращаться к типам и членам, которые имеют `private`, `protected`, или `internal`.</span><span class="sxs-lookup"><span data-stu-id="86b04-222">The code in the dynamic method has access to public methods of public classes, and exceptions are thrown if it tries to access types or members that are `private`, `protected`, or `internal`.</span></span>  
  
 <span data-ttu-id="86b04-223">При создании анонимно размещенный динамический метод входит в стеке вызовов порождающей сборки.</span><span class="sxs-lookup"><span data-stu-id="86b04-223">When an anonymously hosted dynamic method is constructed, the call stack of the emitting assembly is included.</span></span> <span data-ttu-id="86b04-224">При вызове метода разрешения порождающего стека вызовов используются вместо фактического вызывающего объекта разрешений.</span><span class="sxs-lookup"><span data-stu-id="86b04-224">When the method is invoked, the permissions of the emitting call stack are used instead of the permissions of the actual caller.</span></span> <span data-ttu-id="86b04-225">Таким образом динамический метод не может выполняться на более высокий уровень привилегий, чем, выпустившей его сборки, даже если он был передан и выполнен в сборке, которая имеет более высокий уровень доверия.</span><span class="sxs-lookup"><span data-stu-id="86b04-225">Thus, the dynamic method cannot execute at a higher level of privilege than that of the assembly that emitted it, even if it is passed to and executed by an assembly that has a higher trust level.</span></span>  
  
 <span data-ttu-id="86b04-226">Этот конструктор задает атрибуты метода <xref:System.Reflection.MethodAttributes.Public?displayProperty=nameWithType> и <xref:System.Reflection.MethodAttributes.Static?displayProperty=nameWithType>и соглашение о вызовах <xref:System.Reflection.CallingConventions.Standard?displayProperty=nameWithType>.</span><span class="sxs-lookup"><span data-stu-id="86b04-226">This constructor specifies the method attributes <xref:System.Reflection.MethodAttributes.Public?displayProperty=nameWithType> and <xref:System.Reflection.MethodAttributes.Static?displayProperty=nameWithType>, and the calling convention <xref:System.Reflection.CallingConventions.Standard?displayProperty=nameWithType>.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="86b04-227">Этот конструктор впервые появился в [!INCLUDE[net_v35_long](~/includes/net-v35-long-md.md)] или более поздней версии.</span><span class="sxs-lookup"><span data-stu-id="86b04-227">This constructor was introduced in the [!INCLUDE[net_v35_long](~/includes/net-v35-long-md.md)] or later.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="86b04-228">Элемент <paramref name="parameterTypes" /> имеет значение <see langword="null" /> или <see cref="T:System.Void" />.</span><span class="sxs-lookup"><span data-stu-id="86b04-228">An element of <paramref name="parameterTypes" /> is <see langword="null" /> or <see cref="T:System.Void" />.</span></span></exception>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="86b04-229">Свойство <paramref name="name" /> имеет значение <see langword="null" />.</span><span class="sxs-lookup"><span data-stu-id="86b04-229"><paramref name="name" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.NotSupportedException">
          <span data-ttu-id="86b04-230"><paramref name="returnType" /> — это тип, для которого <see cref="P:System.Type.IsByRef" /> возвращает <see langword="true" />.</span><span class="sxs-lookup"><span data-stu-id="86b04-230"><paramref name="returnType" /> is a type for which <see cref="P:System.Type.IsByRef" /> returns <see langword="true" />.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public DynamicMethod (string name, Type returnType, Type[] parameterTypes, System.Reflection.Module m);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(string name, class System.Type returnType, class System.Type[] parameterTypes, class System.Reflection.Module m) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.Emit.DynamicMethod.#ctor(System.String,System.Type,System.Type[],System.Reflection.Module)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (name As String, returnType As Type, parameterTypes As Type(), m As Module)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; DynamicMethod(System::String ^ name, Type ^ returnType, cli::array &lt;Type ^&gt; ^ parameterTypes, System::Reflection::Module ^ m);" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Emit.Lightweight</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.3.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
        <Parameter Name="returnType" Type="System.Type" />
        <Parameter Name="parameterTypes" Type="System.Type[]" />
        <Parameter Name="m" Type="System.Reflection.Module" />
      </Parameters>
      <Docs>
        <param name="name"><span data-ttu-id="86b04-231">Имя динамического метода.</span><span class="sxs-lookup"><span data-stu-id="86b04-231">The name of the dynamic method.</span></span> <span data-ttu-id="86b04-232">Это может быть строка нулевой длины, но не <see langword="null" />.</span><span class="sxs-lookup"><span data-stu-id="86b04-232">This can be a zero-length string, but it cannot be <see langword="null" />.</span></span></param>
        <param name="returnType"><span data-ttu-id="86b04-233">Объект <see cref="T:System.Type" />, который указывает возвращаемый тип динамического метода, или значение <see langword="null" />, если метод не имеет возвращаемого типа.</span><span class="sxs-lookup"><span data-stu-id="86b04-233">A <see cref="T:System.Type" /> object that specifies the return type of the dynamic method, or <see langword="null" /> if the method has no return type.</span></span></param>
        <param name="parameterTypes"><span data-ttu-id="86b04-234">Массив объектов <see cref="T:System.Type" />, указывающих типы параметров динамического метода, или значение <see langword="null" />, если метод не имеет параметров.</span><span class="sxs-lookup"><span data-stu-id="86b04-234">An array of <see cref="T:System.Type" /> objects specifying the types of the parameters of the dynamic method, or <see langword="null" /> if the method has no parameters.</span></span></param>
        <param name="m"><span data-ttu-id="86b04-235">Объект <see cref="T:System.Reflection.Module" />, представляющий модуль, с которым должен быть логически связан динамический метод.</span><span class="sxs-lookup"><span data-stu-id="86b04-235">A <see cref="T:System.Reflection.Module" /> representing the module with which the dynamic method is to be logically associated.</span></span></param>
        <summary><span data-ttu-id="86b04-236">Создает динамический метод, который является глобальным по отношению к модулю, используя имя метода, возвращаемый тип, типы параметров и модуль.</span><span class="sxs-lookup"><span data-stu-id="86b04-236">Creates a dynamic method that is global to a module, specifying the method name, return type, parameter types, and module.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="86b04-237">Этот конструктор задает атрибуты метода <xref:System.Reflection.MethodAttributes.Public?displayProperty=nameWithType> и <xref:System.Reflection.MethodAttributes.Static?displayProperty=nameWithType>, соглашение о вызовах <xref:System.Reflection.CallingConventions.Standard?displayProperty=nameWithType>и не пропускает проверки видимости just-in-time (JIT).</span><span class="sxs-lookup"><span data-stu-id="86b04-237">This constructor specifies method attributes <xref:System.Reflection.MethodAttributes.Public?displayProperty=nameWithType> and <xref:System.Reflection.MethodAttributes.Static?displayProperty=nameWithType>, calling convention <xref:System.Reflection.CallingConventions.Standard?displayProperty=nameWithType>, and does not skip just-in-time (JIT) visibility checks.</span></span>  
  
 <span data-ttu-id="86b04-238">Созданный с помощью этого конструктора динамический метод имеет доступ к открытым и `internal` (`Friend` в Visual Basic) члены всех типов, содержащихся в модуле `m`.</span><span class="sxs-lookup"><span data-stu-id="86b04-238">The dynamic method created with this constructor has access to public and `internal` (`Friend` in Visual Basic) members of all the types contained in module `m`.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="86b04-239">Для обеспечения обратной совместимости это конструктору требуется <xref:System.Security.Permissions.SecurityPermission> с <xref:System.Security.Permissions.SecurityPermissionFlag.ControlEvidence?displayProperty=nameWithType> флаг, если выполняются следующие условия, как true: `m` — это модуль, отличный от вызывающего и потребности в <xref:System.Security.Permissions.ReflectionPermission> с <xref:System.Security.Permissions.ReflectionPermissionFlag.MemberAccess?displayProperty=nameWithType> флаг не удалось.</span><span class="sxs-lookup"><span data-stu-id="86b04-239">For backward compatibility, this constructor demands <xref:System.Security.Permissions.SecurityPermission> with the <xref:System.Security.Permissions.SecurityPermissionFlag.ControlEvidence?displayProperty=nameWithType> flag if the following conditions are both true: `m` is a module other than the calling module, and the demand for <xref:System.Security.Permissions.ReflectionPermission> with the <xref:System.Security.Permissions.ReflectionPermissionFlag.MemberAccess?displayProperty=nameWithType> flag has failed.</span></span> <span data-ttu-id="86b04-240">Если потребность в <xref:System.Security.Permissions.SecurityPermission> завершается успешно, операция разрешена.</span><span class="sxs-lookup"><span data-stu-id="86b04-240">If the demand for <xref:System.Security.Permissions.SecurityPermission> succeeds, the operation is allowed.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="86b04-241">Начиная с [!INCLUDE[net_v20sp1_long](~/includes/net-v20sp1-long-md.md)], этот элемент больше не требуется <xref:System.Security.Permissions.ReflectionPermission> с <xref:System.Security.Permissions.ReflectionPermissionFlag.ReflectionEmit?displayProperty=nameWithType> флаг.</span><span class="sxs-lookup"><span data-stu-id="86b04-241">Starting with the [!INCLUDE[net_v20sp1_long](~/includes/net-v20sp1-long-md.md)], this member no longer requires <xref:System.Security.Permissions.ReflectionPermission> with the <xref:System.Security.Permissions.ReflectionPermissionFlag.ReflectionEmit?displayProperty=nameWithType> flag.</span></span> <span data-ttu-id="86b04-242">(См. [вопросы безопасности в порождаемом отражении](~/docs/framework/reflection-and-codedom/security-issues-in-reflection-emit.md).) Для применения этих функциональных возможностей приложение должно использовать [!INCLUDE[net_v35_long](~/includes/net-v35-long-md.md)] или более поздние версии.</span><span class="sxs-lookup"><span data-stu-id="86b04-242">(See [Security Issues in Reflection Emit](~/docs/framework/reflection-and-codedom/security-issues-in-reflection-emit.md).) To use this functionality, your application should target the [!INCLUDE[net_v35_long](~/includes/net-v35-long-md.md)] or later.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="86b04-243">В следующем примере кода создается динамический метод, который принимает два параметра.</span><span class="sxs-lookup"><span data-stu-id="86b04-243">The following code example creates a dynamic method that takes two parameters.</span></span> <span data-ttu-id="86b04-244">В этом примере выпускается основной текст простой функции, который выводит первый параметр в консоль, а в примере используется второй параметр в качестве возвращаемого значения метода.</span><span class="sxs-lookup"><span data-stu-id="86b04-244">The example emits a simple function body that prints the first parameter to the console, and the example uses the second parameter as the return value of the method.</span></span> <span data-ttu-id="86b04-245">В примере завершает метод путем создания делегата, вызывает делегат с различными параметрами и наконец вызывает динамический метод с помощью <xref:System.Reflection.Emit.DynamicMethod.Invoke%28System.Object%2CSystem.Reflection.BindingFlags%2CSystem.Reflection.Binder%2CSystem.Object%5B%5D%2CSystem.Globalization.CultureInfo%29> метод.</span><span class="sxs-lookup"><span data-stu-id="86b04-245">The example completes the method by creating a delegate, invokes the delegate with different parameters, and finally invokes the dynamic method using the <xref:System.Reflection.Emit.DynamicMethod.Invoke%28System.Object%2CSystem.Reflection.BindingFlags%2CSystem.Reflection.Binder%2CSystem.Object%5B%5D%2CSystem.Globalization.CultureInfo%29> method.</span></span>  
  
 [!code-cpp[Reflection.DynamicMethod.ctor1#1](~/samples/snippets/cpp/VS_Snippets_CLR/Reflection.DynamicMethod.ctor1/cpp/source.cpp#1)]
 [!code-csharp[Reflection.DynamicMethod.ctor1#1](~/samples/snippets/csharp/VS_Snippets_CLR/Reflection.DynamicMethod.ctor1/CS/source.cs#1)]
 [!code-vb[Reflection.DynamicMethod.ctor1#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/Reflection.DynamicMethod.ctor1/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="86b04-246">Элемент <paramref name="parameterTypes" /> имеет значение <see langword="null" /> или <see cref="T:System.Void" />.</span><span class="sxs-lookup"><span data-stu-id="86b04-246">An element of <paramref name="parameterTypes" /> is <see langword="null" /> or <see cref="T:System.Void" />.</span></span>  
  
 <span data-ttu-id="86b04-247">- или -</span><span class="sxs-lookup"><span data-stu-id="86b04-247">-or-</span></span>  
  
 <span data-ttu-id="86b04-248"><paramref name="m" /> — это модуль, предоставляющий анонимное размещение для динамических методов.</span><span class="sxs-lookup"><span data-stu-id="86b04-248"><paramref name="m" /> is a module that provides anonymous hosting for dynamic methods.</span></span></exception>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="86b04-249">Свойство <paramref name="name" /> имеет значение <see langword="null" />.</span><span class="sxs-lookup"><span data-stu-id="86b04-249"><paramref name="name" /> is <see langword="null" />.</span></span>  
  
 <span data-ttu-id="86b04-250">- или -</span><span class="sxs-lookup"><span data-stu-id="86b04-250">-or-</span></span>  
  
 <span data-ttu-id="86b04-251">Свойство <paramref name="m" /> имеет значение <see langword="null" />.</span><span class="sxs-lookup"><span data-stu-id="86b04-251"><paramref name="m" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.NotSupportedException">
          <span data-ttu-id="86b04-252"><paramref name="returnType" /> — это тип, для которого <see cref="P:System.Type.IsByRef" /> возвращает <see langword="true" />.</span><span class="sxs-lookup"><span data-stu-id="86b04-252"><paramref name="returnType" /> is a type for which <see cref="P:System.Type.IsByRef" /> returns <see langword="true" />.</span></span></exception>
        <permission cref="T:System.Security.Permissions.ReflectionPermission"><span data-ttu-id="86b04-253">Чтобы связать динамический метод с модулем, отличным от вызывающего.</span><span class="sxs-lookup"><span data-stu-id="86b04-253">to associate the dynamic method with a module other than the calling module.</span></span> <span data-ttu-id="86b04-254">Связанное перечисление: <see cref="F:System.Security.Permissions.ReflectionPermissionFlag.RestrictedMemberAccess" />.</span><span class="sxs-lookup"><span data-stu-id="86b04-254">Associated enumeration: <see cref="F:System.Security.Permissions.ReflectionPermissionFlag.RestrictedMemberAccess" />.</span></span></permission>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public DynamicMethod (string name, Type returnType, Type[] parameterTypes, Type owner);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(string name, class System.Type returnType, class System.Type[] parameterTypes, class System.Type owner) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.Emit.DynamicMethod.#ctor(System.String,System.Type,System.Type[],System.Type)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (name As String, returnType As Type, parameterTypes As Type(), owner As Type)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; DynamicMethod(System::String ^ name, Type ^ returnType, cli::array &lt;Type ^&gt; ^ parameterTypes, Type ^ owner);" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Emit.Lightweight</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.3.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
        <Parameter Name="returnType" Type="System.Type" />
        <Parameter Name="parameterTypes" Type="System.Type[]" />
        <Parameter Name="owner" Type="System.Type" />
      </Parameters>
      <Docs>
        <param name="name"><span data-ttu-id="86b04-255">Имя динамического метода.</span><span class="sxs-lookup"><span data-stu-id="86b04-255">The name of the dynamic method.</span></span> <span data-ttu-id="86b04-256">Это может быть строка нулевой длины, но не <see langword="null" />.</span><span class="sxs-lookup"><span data-stu-id="86b04-256">This can be a zero-length string, but it cannot be <see langword="null" />.</span></span></param>
        <param name="returnType"><span data-ttu-id="86b04-257">Объект <see cref="T:System.Type" />, который указывает возвращаемый тип динамического метода, или значение <see langword="null" />, если метод не имеет возвращаемого типа.</span><span class="sxs-lookup"><span data-stu-id="86b04-257">A <see cref="T:System.Type" /> object that specifies the return type of the dynamic method, or <see langword="null" /> if the method has no return type.</span></span></param>
        <param name="parameterTypes"><span data-ttu-id="86b04-258">Массив объектов <see cref="T:System.Type" />, указывающих типы параметров динамического метода, или значение <see langword="null" />, если метод не имеет параметров.</span><span class="sxs-lookup"><span data-stu-id="86b04-258">An array of <see cref="T:System.Type" /> objects specifying the types of the parameters of the dynamic method, or <see langword="null" /> if the method has no parameters.</span></span></param>
        <param name="owner"><span data-ttu-id="86b04-259">Тип <see cref="T:System.Type" />, с которым логически связан динамический метод.</span><span class="sxs-lookup"><span data-stu-id="86b04-259">A <see cref="T:System.Type" /> with which the dynamic method is logically associated.</span></span> <span data-ttu-id="86b04-260">Динамический метод имеет доступ ко всем членам типа.</span><span class="sxs-lookup"><span data-stu-id="86b04-260">The dynamic method has access to all members of the type.</span></span></param>
        <summary><span data-ttu-id="86b04-261">Создает динамический метод, указывая имя метода, возвращаемый тип, типы параметров и тип, с которым логически связан динамический метод.</span><span class="sxs-lookup"><span data-stu-id="86b04-261">Creates a dynamic method, specifying the method name, return type, parameter types, and the type with which the dynamic method is logically associated.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="86b04-262">Созданный с помощью этого конструктора динамический метод имеет доступ ко всем членам типа `owner`и общедоступный и `internal` (`Friend` в Visual Basic) члены других типов в модуль, содержащий `owner`.</span><span class="sxs-lookup"><span data-stu-id="86b04-262">The dynamic method created with this constructor has access to all members of the type `owner`, and to public and `internal` (`Friend` in Visual Basic) members of all the other types in the module that contains `owner`.</span></span>  
  
 <span data-ttu-id="86b04-263">Этот конструктор задает атрибуты метода <xref:System.Reflection.MethodAttributes.Public?displayProperty=nameWithType> и <xref:System.Reflection.MethodAttributes.Static?displayProperty=nameWithType>, соглашение о вызовах <xref:System.Reflection.CallingConventions.Standard?displayProperty=nameWithType>и не пропускает проверки видимости just-in-time (JIT).</span><span class="sxs-lookup"><span data-stu-id="86b04-263">This constructor specifies method attributes <xref:System.Reflection.MethodAttributes.Public?displayProperty=nameWithType> and <xref:System.Reflection.MethodAttributes.Static?displayProperty=nameWithType>, calling convention <xref:System.Reflection.CallingConventions.Standard?displayProperty=nameWithType>, and does not skip just-in-time (JIT) visibility checks.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="86b04-264">Для обеспечения обратной совместимости это конструктору требуется <xref:System.Security.Permissions.SecurityPermission> с <xref:System.Security.Permissions.SecurityPermissionFlag.ControlEvidence?displayProperty=nameWithType> флаг, если выполняются следующие условия, как true: `owner` находится в модуле, отличном от вызывающего и потребности в <xref:System.Security.Permissions.ReflectionPermission> с <xref:System.Security.Permissions.ReflectionPermissionFlag.MemberAccess?displayProperty=nameWithType> Сбой флаг.</span><span class="sxs-lookup"><span data-stu-id="86b04-264">For backward compatibility, this constructor demands <xref:System.Security.Permissions.SecurityPermission> with the <xref:System.Security.Permissions.SecurityPermissionFlag.ControlEvidence?displayProperty=nameWithType> flag if the following conditions are both true: `owner` is in a module other than the calling module, and the demand for <xref:System.Security.Permissions.ReflectionPermission> with the <xref:System.Security.Permissions.ReflectionPermissionFlag.MemberAccess?displayProperty=nameWithType> flag has failed.</span></span> <span data-ttu-id="86b04-265">Если потребность в <xref:System.Security.Permissions.SecurityPermission> завершается успешно, операция разрешена.</span><span class="sxs-lookup"><span data-stu-id="86b04-265">If the demand for <xref:System.Security.Permissions.SecurityPermission> succeeds, the operation is allowed.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="86b04-266">Начиная с [!INCLUDE[net_v20sp1_long](~/includes/net-v20sp1-long-md.md)], этот элемент больше не требуется <xref:System.Security.Permissions.ReflectionPermission> с <xref:System.Security.Permissions.ReflectionPermissionFlag.ReflectionEmit?displayProperty=nameWithType> флаг.</span><span class="sxs-lookup"><span data-stu-id="86b04-266">Starting with the [!INCLUDE[net_v20sp1_long](~/includes/net-v20sp1-long-md.md)], this member no longer requires <xref:System.Security.Permissions.ReflectionPermission> with the <xref:System.Security.Permissions.ReflectionPermissionFlag.ReflectionEmit?displayProperty=nameWithType> flag.</span></span> <span data-ttu-id="86b04-267">(См. [вопросы безопасности в порождаемом отражении](~/docs/framework/reflection-and-codedom/security-issues-in-reflection-emit.md).) Для применения этих функциональных возможностей приложение должно использовать [!INCLUDE[net_v35_long](~/includes/net-v35-long-md.md)] или более поздние версии.</span><span class="sxs-lookup"><span data-stu-id="86b04-267">(See [Security Issues in Reflection Emit](~/docs/framework/reflection-and-codedom/security-issues-in-reflection-emit.md).) To use this functionality, your application should target the [!INCLUDE[net_v35_long](~/includes/net-v35-long-md.md)] or later.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="86b04-268">В следующем примере кода создается <xref:System.Reflection.Emit.DynamicMethod> , логически связан с типом.</span><span class="sxs-lookup"><span data-stu-id="86b04-268">The following code example creates a <xref:System.Reflection.Emit.DynamicMethod> that is logically associated with a type.</span></span> <span data-ttu-id="86b04-269">Это связь дает доступ к закрытым членам этого типа.</span><span class="sxs-lookup"><span data-stu-id="86b04-269">This association gives it access to the private members of that type.</span></span>  
  
 <span data-ttu-id="86b04-270">В примере кода определяется класс с именем `Example` с закрытое поле с именем класса `DerivedFromxample` , производный от первого класса, тип делегата с именем `UseLikeStatic` , возвращающий <xref:System.Int32> параметров типа `Example` и <xref:System.Int32>и тип делегата с именем `UseLikeInstance` , возвращающий <xref:System.Int32> и имеет один параметр типа <xref:System.Int32>.</span><span class="sxs-lookup"><span data-stu-id="86b04-270">The code example defines a class named `Example` with a private field, a class named `DerivedFromxample` that derives from the first class, a delegate type named `UseLikeStatic` that returns <xref:System.Int32> and has parameters of type `Example` and <xref:System.Int32>, and a delegate type named `UseLikeInstance` that returns <xref:System.Int32> and has one parameter of type <xref:System.Int32>.</span></span>  
  
 <span data-ttu-id="86b04-271">Затем в примере кода создается <xref:System.Reflection.Emit.DynamicMethod> , изменяющий закрытое поле экземпляра `Example` и возвращает предыдущее значение.</span><span class="sxs-lookup"><span data-stu-id="86b04-271">The example code then creates a <xref:System.Reflection.Emit.DynamicMethod> that changes the private field of an instance of `Example` and returns the previous value.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="86b04-272">Как правило изменение внутренних полей классов не объектно ориентированном программировании рекомендаций.</span><span class="sxs-lookup"><span data-stu-id="86b04-272">In general, changing the internal fields of classes is not good object-oriented coding practice.</span></span>  
  
 <span data-ttu-id="86b04-273">Этот пример кода создает экземпляр `Example` , а затем создает два делегата.</span><span class="sxs-lookup"><span data-stu-id="86b04-273">The example code creates an instance of `Example` and then creates two delegates.</span></span> <span data-ttu-id="86b04-274">Первый — типа `UseLikeStatic`, который имеет те же параметры динамического метода.</span><span class="sxs-lookup"><span data-stu-id="86b04-274">The first is of type `UseLikeStatic`, which has the same parameters as the dynamic method.</span></span> <span data-ttu-id="86b04-275">Второй — типа `UseLikeInstance`, у которого нет первый параметр (типа `Example`).</span><span class="sxs-lookup"><span data-stu-id="86b04-275">The second is of type `UseLikeInstance`, which lacks the first parameter (of type `Example`).</span></span> <span data-ttu-id="86b04-276">Этот делегат создается с помощью <xref:System.Reflection.Emit.DynamicMethod.CreateDelegate%28System.Type%2CSystem.Object%29> перегрузка метода; второй параметр этой перегрузки метода является экземпляром класса `Example`в данном случае экземпляр только что создали, который привязан к вновь созданного делегата.</span><span class="sxs-lookup"><span data-stu-id="86b04-276">This delegate is created using the <xref:System.Reflection.Emit.DynamicMethod.CreateDelegate%28System.Type%2CSystem.Object%29> method overload; the second parameter of that method overload is an instance of `Example`, in this case the instance just created, which is bound to the newly created delegate.</span></span> <span data-ttu-id="86b04-277">При каждом вызове делегата динамический метод начинает работать привязанный экземпляр `Example`.</span><span class="sxs-lookup"><span data-stu-id="86b04-277">Whenever that delegate is invoked, the dynamic method acts on the bound instance of `Example`.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="86b04-278">Это пример Мягкие правила для привязки делегата, представленных в [!INCLUDE[dnprdnlong](~/includes/dnprdnlong-md.md)], а также новые перегрузки <xref:System.Delegate.CreateDelegate%2A?displayProperty=nameWithType> метод.</span><span class="sxs-lookup"><span data-stu-id="86b04-278">This is an example of the relaxed rules for delegate binding introduced in the [!INCLUDE[dnprdnlong](~/includes/dnprdnlong-md.md)], along with new overloads of the <xref:System.Delegate.CreateDelegate%2A?displayProperty=nameWithType> method.</span></span> <span data-ttu-id="86b04-279">Дополнительные сведения см. в описании класса <xref:System.Delegate>.</span><span class="sxs-lookup"><span data-stu-id="86b04-279">For more information, see the <xref:System.Delegate> class.</span></span>  
  
 <span data-ttu-id="86b04-280">`UseLikeStatic` Вызове делегата, передавая экземпляр `Example` , привязанный к `UseLikeInstance` делегата.</span><span class="sxs-lookup"><span data-stu-id="86b04-280">The `UseLikeStatic` delegate is invoked, passing in the instance of `Example` that is bound to the `UseLikeInstance` delegate.</span></span> <span data-ttu-id="86b04-281">Затем `UseLikeInstance` вызове делегата, чтобы оба Представители действуют на том же экземпляре `Example`.</span><span class="sxs-lookup"><span data-stu-id="86b04-281">Then the `UseLikeInstance` delegate is invoked, so that both delegates act on the same instance of `Example`.</span></span> <span data-ttu-id="86b04-282">Изменения в значениях внутреннего поля отображаются после каждого вызова.</span><span class="sxs-lookup"><span data-stu-id="86b04-282">The changes in the values of the internal field are displayed after each call.</span></span> <span data-ttu-id="86b04-283">Наконец `UseLikeInstance` делегат привязан к экземпляру `DerivedFromxample`, и вызывает делегат повторяются.</span><span class="sxs-lookup"><span data-stu-id="86b04-283">Finally, a `UseLikeInstance` delegate is bound to an instance of `DerivedFromxample`, and the delegate calls are repeated.</span></span>  
  
 [!code-csharp[Reflection.DynamicMethod.ClosedOver#1](~/samples/snippets/csharp/VS_Snippets_CLR/Reflection.DynamicMethod.ClosedOver/cs/source.cs#1)]
 [!code-vb[Reflection.DynamicMethod.ClosedOver#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/Reflection.DynamicMethod.ClosedOver/vb/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="86b04-284">Элемент <paramref name="parameterTypes" /> имеет значение <see langword="null" /> или <see cref="T:System.Void" />.</span><span class="sxs-lookup"><span data-stu-id="86b04-284">An element of <paramref name="parameterTypes" /> is <see langword="null" /> or <see cref="T:System.Void" />.</span></span>  
  
 <span data-ttu-id="86b04-285">- или -</span><span class="sxs-lookup"><span data-stu-id="86b04-285">-or-</span></span>  
  
 <span data-ttu-id="86b04-286"><paramref name="owner" /> является интерфейсом, массивом, открытым универсальным типом или параметром универсального типа или метода.</span><span class="sxs-lookup"><span data-stu-id="86b04-286"><paramref name="owner" /> is an interface, an array, an open generic type, or a type parameter of a generic type or method.</span></span></exception>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="86b04-287">Свойство <paramref name="name" /> имеет значение <see langword="null" />.</span><span class="sxs-lookup"><span data-stu-id="86b04-287"><paramref name="name" /> is <see langword="null" />.</span></span>  
  
 <span data-ttu-id="86b04-288">- или -</span><span class="sxs-lookup"><span data-stu-id="86b04-288">-or-</span></span>  
  
 <span data-ttu-id="86b04-289">Свойство <paramref name="owner" /> имеет значение <see langword="null" />.</span><span class="sxs-lookup"><span data-stu-id="86b04-289"><paramref name="owner" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.NotSupportedException">
          <span data-ttu-id="86b04-290"><paramref name="returnType" /> имеет значение <see langword="null" /> или является типом, для которого <see cref="P:System.Type.IsByRef" /> возвращает <see langword="true" />.</span><span class="sxs-lookup"><span data-stu-id="86b04-290"><paramref name="returnType" /> is <see langword="null" />, or is a type for which <see cref="P:System.Type.IsByRef" /> returns <see langword="true" />.</span></span></exception>
        <permission cref="T:System.Security.Permissions.ReflectionPermission"><span data-ttu-id="86b04-291">Чтобы связать динамический метод с типом в модуле, отличном от вызывающего.</span><span class="sxs-lookup"><span data-stu-id="86b04-291">to associate the dynamic method with a type in a module other than the calling module.</span></span> <span data-ttu-id="86b04-292">Связанное перечисление: <see cref="F:System.Security.Permissions.ReflectionPermissionFlag.RestrictedMemberAccess" />.</span><span class="sxs-lookup"><span data-stu-id="86b04-292">Associated enumeration: <see cref="F:System.Security.Permissions.ReflectionPermissionFlag.RestrictedMemberAccess" />.</span></span></permission>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public DynamicMethod (string name, Type returnType, Type[] parameterTypes, System.Reflection.Module m, bool skipVisibility);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(string name, class System.Type returnType, class System.Type[] parameterTypes, class System.Reflection.Module m, bool skipVisibility) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.Emit.DynamicMethod.#ctor(System.String,System.Type,System.Type[],System.Reflection.Module,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (name As String, returnType As Type, parameterTypes As Type(), m As Module, skipVisibility As Boolean)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; DynamicMethod(System::String ^ name, Type ^ returnType, cli::array &lt;Type ^&gt; ^ parameterTypes, System::Reflection::Module ^ m, bool skipVisibility);" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Emit.Lightweight</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.3.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
        <Parameter Name="returnType" Type="System.Type" />
        <Parameter Name="parameterTypes" Type="System.Type[]" />
        <Parameter Name="m" Type="System.Reflection.Module" />
        <Parameter Name="skipVisibility" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="name"><span data-ttu-id="86b04-293">Имя динамического метода.</span><span class="sxs-lookup"><span data-stu-id="86b04-293">The name of the dynamic method.</span></span> <span data-ttu-id="86b04-294">Это может быть строка нулевой длины, но не <see langword="null" />.</span><span class="sxs-lookup"><span data-stu-id="86b04-294">This can be a zero-length string, but it cannot be <see langword="null" />.</span></span></param>
        <param name="returnType"><span data-ttu-id="86b04-295">Объект <see cref="T:System.Type" />, который указывает возвращаемый тип динамического метода, или значение <see langword="null" />, если метод не имеет возвращаемого типа.</span><span class="sxs-lookup"><span data-stu-id="86b04-295">A <see cref="T:System.Type" /> object that specifies the return type of the dynamic method, or <see langword="null" /> if the method has no return type.</span></span></param>
        <param name="parameterTypes"><span data-ttu-id="86b04-296">Массив объектов <see cref="T:System.Type" />, указывающих типы параметров динамического метода, или значение <see langword="null" />, если метод не имеет параметров.</span><span class="sxs-lookup"><span data-stu-id="86b04-296">An array of <see cref="T:System.Type" /> objects specifying the types of the parameters of the dynamic method, or <see langword="null" /> if the method has no parameters.</span></span></param>
        <param name="m"><span data-ttu-id="86b04-297">Объект <see cref="T:System.Reflection.Module" />, представляющий модуль, с которым должен быть логически связан динамический метод.</span><span class="sxs-lookup"><span data-stu-id="86b04-297">A <see cref="T:System.Reflection.Module" /> representing the module with which the dynamic method is to be logically associated.</span></span></param>
        <param name="skipVisibility">
          <span data-ttu-id="86b04-298">Значение <see langword="true" /> для пропуска проверки видимости JIT для типов и членов, к которым получает доступ MSIL динамического метода.</span><span class="sxs-lookup"><span data-stu-id="86b04-298"><see langword="true" /> to skip JIT visibility checks on types and members accessed by the MSIL of the dynamic method.</span></span></param>
        <summary><span data-ttu-id="86b04-299">Создает динамический метод, который является глобальным для модуля, указывая имя метода, возвращаемый тип, типы параметров, модуль и необходимость пропуска проверки видимости JIT для типов и членов, к которым получает доступ MSIL динамического метода.</span><span class="sxs-lookup"><span data-stu-id="86b04-299">Creates a dynamic method that is global to a module, specifying the method name, return type, parameter types, module, and whether just-in-time (JIT) visibility checks should be skipped for types and members accessed by the Microsoft intermediate language (MSIL) of the dynamic method.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="86b04-300">Этот конструктор задает атрибуты метода <xref:System.Reflection.MethodAttributes.Public?displayProperty=nameWithType> и <xref:System.Reflection.MethodAttributes.Static?displayProperty=nameWithType>и соглашение о вызовах <xref:System.Reflection.CallingConventions.Standard?displayProperty=nameWithType>.</span><span class="sxs-lookup"><span data-stu-id="86b04-300">This constructor specifies method attributes <xref:System.Reflection.MethodAttributes.Public?displayProperty=nameWithType> and <xref:System.Reflection.MethodAttributes.Static?displayProperty=nameWithType>, and calling convention <xref:System.Reflection.CallingConventions.Standard?displayProperty=nameWithType>.</span></span>  
  
 <span data-ttu-id="86b04-301">Созданный с помощью этого конструктора динамический метод имеет доступ к открытым и `internal` (`Friend` в Visual Basic) члены всех типов, содержащихся в модуле `m`.</span><span class="sxs-lookup"><span data-stu-id="86b04-301">The dynamic method created with this constructor has access to public and `internal` (`Friend` in Visual Basic) members of all the types in contained module `m`.</span></span> <span data-ttu-id="86b04-302">Пропуск JIT проверки видимости компилятора позволяет динамическому методу получать доступ к закрытым и защищенным членам всех других типов.</span><span class="sxs-lookup"><span data-stu-id="86b04-302">Skipping the JIT compiler's visibility checks allows the dynamic method to access private and protected members of all other types as well.</span></span> <span data-ttu-id="86b04-303">Это полезно, например, при написании кода для сериализации объектов.</span><span class="sxs-lookup"><span data-stu-id="86b04-303">This is useful, for example, when writing code to serialize objects.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="86b04-304">Для обеспечения обратной совместимости это конструктору требуется <xref:System.Security.Permissions.SecurityPermission> с <xref:System.Security.Permissions.SecurityPermissionFlag.ControlEvidence?displayProperty=nameWithType> флаг, если выполняются следующие условия, как true: `m` — это модуль, отличный от вызывающего и потребности в <xref:System.Security.Permissions.ReflectionPermission> с <xref:System.Security.Permissions.ReflectionPermissionFlag.MemberAccess?displayProperty=nameWithType> флаг не удалось.</span><span class="sxs-lookup"><span data-stu-id="86b04-304">For backward compatibility, this constructor demands <xref:System.Security.Permissions.SecurityPermission> with the <xref:System.Security.Permissions.SecurityPermissionFlag.ControlEvidence?displayProperty=nameWithType> flag if the following conditions are both true: `m` is a module other than the calling module, and the demand for <xref:System.Security.Permissions.ReflectionPermission> with the <xref:System.Security.Permissions.ReflectionPermissionFlag.MemberAccess?displayProperty=nameWithType> flag has failed.</span></span> <span data-ttu-id="86b04-305">Если потребность в <xref:System.Security.Permissions.SecurityPermission> завершается успешно, операция разрешена.</span><span class="sxs-lookup"><span data-stu-id="86b04-305">If the demand for <xref:System.Security.Permissions.SecurityPermission> succeeds, the operation is allowed.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="86b04-306">Начиная с [!INCLUDE[net_v20sp1_long](~/includes/net-v20sp1-long-md.md)], этот элемент больше не требуется <xref:System.Security.Permissions.ReflectionPermission> с <xref:System.Security.Permissions.ReflectionPermissionFlag.ReflectionEmit?displayProperty=nameWithType> флаг.</span><span class="sxs-lookup"><span data-stu-id="86b04-306">Starting with the [!INCLUDE[net_v20sp1_long](~/includes/net-v20sp1-long-md.md)], this member no longer requires <xref:System.Security.Permissions.ReflectionPermission> with the <xref:System.Security.Permissions.ReflectionPermissionFlag.ReflectionEmit?displayProperty=nameWithType> flag.</span></span> <span data-ttu-id="86b04-307">(См. [вопросы безопасности в порождаемом отражении](~/docs/framework/reflection-and-codedom/security-issues-in-reflection-emit.md).) Для применения этих функциональных возможностей приложение должно использовать [!INCLUDE[net_v35_long](~/includes/net-v35-long-md.md)] или более поздние версии.</span><span class="sxs-lookup"><span data-stu-id="86b04-307">(See [Security Issues in Reflection Emit](~/docs/framework/reflection-and-codedom/security-issues-in-reflection-emit.md).) To use this functionality, your application should target the [!INCLUDE[net_v35_long](~/includes/net-v35-long-md.md)] or later.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="86b04-308">Элемент <paramref name="parameterTypes" /> имеет значение <see langword="null" /> или <see cref="T:System.Void" />.</span><span class="sxs-lookup"><span data-stu-id="86b04-308">An element of <paramref name="parameterTypes" /> is <see langword="null" /> or <see cref="T:System.Void" />.</span></span>  
  
 <span data-ttu-id="86b04-309">- или -</span><span class="sxs-lookup"><span data-stu-id="86b04-309">-or-</span></span>  
  
 <span data-ttu-id="86b04-310"><paramref name="m" /> — это модуль, предоставляющий анонимное размещение для динамических методов.</span><span class="sxs-lookup"><span data-stu-id="86b04-310"><paramref name="m" /> is a module that provides anonymous hosting for dynamic methods.</span></span></exception>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="86b04-311">Свойство <paramref name="name" /> имеет значение <see langword="null" />.</span><span class="sxs-lookup"><span data-stu-id="86b04-311"><paramref name="name" /> is <see langword="null" />.</span></span>  
  
 <span data-ttu-id="86b04-312">- или -</span><span class="sxs-lookup"><span data-stu-id="86b04-312">-or-</span></span>  
  
 <span data-ttu-id="86b04-313">Свойство <paramref name="m" /> имеет значение <see langword="null" />.</span><span class="sxs-lookup"><span data-stu-id="86b04-313"><paramref name="m" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.NotSupportedException">
          <span data-ttu-id="86b04-314"><paramref name="returnType" /> — это тип, для которого <see cref="P:System.Type.IsByRef" /> возвращает <see langword="true" />.</span><span class="sxs-lookup"><span data-stu-id="86b04-314"><paramref name="returnType" /> is a type for which <see cref="P:System.Type.IsByRef" /> returns <see langword="true" />.</span></span></exception>
        <permission cref="T:System.Security.Permissions.ReflectionPermission"><span data-ttu-id="86b04-315">Чтобы связать динамический метод с модулем, отличным от вызывающего.</span><span class="sxs-lookup"><span data-stu-id="86b04-315">to associate the dynamic method with a module other than the calling module.</span></span> <span data-ttu-id="86b04-316">Связанное перечисление: <see cref="F:System.Security.Permissions.ReflectionPermissionFlag.RestrictedMemberAccess" />.</span><span class="sxs-lookup"><span data-stu-id="86b04-316">Associated enumeration: <see cref="F:System.Security.Permissions.ReflectionPermissionFlag.RestrictedMemberAccess" />.</span></span></permission>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public DynamicMethod (string name, Type returnType, Type[] parameterTypes, Type owner, bool skipVisibility);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(string name, class System.Type returnType, class System.Type[] parameterTypes, class System.Type owner, bool skipVisibility) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.Emit.DynamicMethod.#ctor(System.String,System.Type,System.Type[],System.Type,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (name As String, returnType As Type, parameterTypes As Type(), owner As Type, skipVisibility As Boolean)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; DynamicMethod(System::String ^ name, Type ^ returnType, cli::array &lt;Type ^&gt; ^ parameterTypes, Type ^ owner, bool skipVisibility);" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Emit.Lightweight</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.3.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
        <Parameter Name="returnType" Type="System.Type" />
        <Parameter Name="parameterTypes" Type="System.Type[]" />
        <Parameter Name="owner" Type="System.Type" />
        <Parameter Name="skipVisibility" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="name"><span data-ttu-id="86b04-317">Имя динамического метода.</span><span class="sxs-lookup"><span data-stu-id="86b04-317">The name of the dynamic method.</span></span> <span data-ttu-id="86b04-318">Это может быть строка нулевой длины, но не <see langword="null" />.</span><span class="sxs-lookup"><span data-stu-id="86b04-318">This can be a zero-length string, but it cannot be <see langword="null" />.</span></span></param>
        <param name="returnType"><span data-ttu-id="86b04-319">Объект <see cref="T:System.Type" />, который указывает возвращаемый тип динамического метода, или значение <see langword="null" />, если метод не имеет возвращаемого типа.</span><span class="sxs-lookup"><span data-stu-id="86b04-319">A <see cref="T:System.Type" /> object that specifies the return type of the dynamic method, or <see langword="null" /> if the method has no return type.</span></span></param>
        <param name="parameterTypes"><span data-ttu-id="86b04-320">Массив объектов <see cref="T:System.Type" />, указывающих типы параметров динамического метода, или значение <see langword="null" />, если метод не имеет параметров.</span><span class="sxs-lookup"><span data-stu-id="86b04-320">An array of <see cref="T:System.Type" /> objects specifying the types of the parameters of the dynamic method, or <see langword="null" /> if the method has no parameters.</span></span></param>
        <param name="owner"><span data-ttu-id="86b04-321">Тип <see cref="T:System.Type" />, с которым логически связан динамический метод.</span><span class="sxs-lookup"><span data-stu-id="86b04-321">A <see cref="T:System.Type" /> with which the dynamic method is logically associated.</span></span> <span data-ttu-id="86b04-322">Динамический метод имеет доступ ко всем членам типа.</span><span class="sxs-lookup"><span data-stu-id="86b04-322">The dynamic method has access to all members of the type.</span></span></param>
        <param name="skipVisibility">
          <span data-ttu-id="86b04-323">Значение <see langword="true" /> для пропуска проверки видимости JIT для типов и членов, к которым получает доступ MSIL динамического метода; в противном случае — значение <see langword="false" />.</span><span class="sxs-lookup"><span data-stu-id="86b04-323"><see langword="true" /> to skip JIT visibility checks on types and members accessed by the MSIL of the dynamic method; otherwise, <see langword="false" />.</span></span></param>
        <summary><span data-ttu-id="86b04-324">Создает динамический метод, указывая имя метода, возвращаемый тип, типы параметров, тип, с которым логически связан динамический метод, и необходимость пропуска проверки видимости JIT для типов и членов, к которым получает доступ MSIL динамического метода.</span><span class="sxs-lookup"><span data-stu-id="86b04-324">Creates a dynamic method, specifying the method name, return type, parameter types, the type with which the dynamic method is logically associated, and whether just-in-time (JIT) visibility checks should be skipped for types and members accessed by the Microsoft intermediate language (MSIL) of the dynamic method.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="86b04-325">Созданный с помощью этого конструктора динамический метод имеет доступ ко всем членам типа `owner`и общедоступный и `internal` (`Friend` в Visual Basic) члены других типов в модуль, содержащий `owner`.</span><span class="sxs-lookup"><span data-stu-id="86b04-325">The dynamic method created with this constructor has access to all members of the type `owner`, and to public and `internal` (`Friend` in Visual Basic) members of all the other types in the module that contains `owner`.</span></span> <span data-ttu-id="86b04-326">Пропуск JIT проверки видимости компилятора позволяет динамическому методу получать доступ к закрытым и защищенным членам всех других типов.</span><span class="sxs-lookup"><span data-stu-id="86b04-326">Skipping the JIT compiler's visibility checks allows the dynamic method to access private and protected members of all other types as well.</span></span> <span data-ttu-id="86b04-327">Это полезно, например, при написании кода для сериализации объектов.</span><span class="sxs-lookup"><span data-stu-id="86b04-327">This is useful, for example, when writing code to serialize objects.</span></span>  
  
 <span data-ttu-id="86b04-328">Этот конструктор задает атрибуты метода <xref:System.Reflection.MethodAttributes.Public?displayProperty=nameWithType> и <xref:System.Reflection.MethodAttributes.Static?displayProperty=nameWithType>и соглашение о вызовах <xref:System.Reflection.CallingConventions.Standard?displayProperty=nameWithType>.</span><span class="sxs-lookup"><span data-stu-id="86b04-328">This constructor specifies method attributes <xref:System.Reflection.MethodAttributes.Public?displayProperty=nameWithType> and <xref:System.Reflection.MethodAttributes.Static?displayProperty=nameWithType>, and calling convention <xref:System.Reflection.CallingConventions.Standard?displayProperty=nameWithType>.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="86b04-329">Для обеспечения обратной совместимости это конструктору требуется <xref:System.Security.Permissions.SecurityPermission> с <xref:System.Security.Permissions.SecurityPermissionFlag.ControlEvidence?displayProperty=nameWithType> флаг, если выполняются следующие условия, как true: `owner` находится в модуле, отличном от вызывающего и потребности в <xref:System.Security.Permissions.ReflectionPermission> с <xref:System.Security.Permissions.ReflectionPermissionFlag.MemberAccess?displayProperty=nameWithType> Сбой флаг.</span><span class="sxs-lookup"><span data-stu-id="86b04-329">For backward compatibility, this constructor demands <xref:System.Security.Permissions.SecurityPermission> with the <xref:System.Security.Permissions.SecurityPermissionFlag.ControlEvidence?displayProperty=nameWithType> flag if the following conditions are both true: `owner` is in a module other than the calling module, and the demand for <xref:System.Security.Permissions.ReflectionPermission> with the <xref:System.Security.Permissions.ReflectionPermissionFlag.MemberAccess?displayProperty=nameWithType> flag has failed.</span></span> <span data-ttu-id="86b04-330">Если потребность в <xref:System.Security.Permissions.SecurityPermission> завершается успешно, операция разрешена.</span><span class="sxs-lookup"><span data-stu-id="86b04-330">If the demand for <xref:System.Security.Permissions.SecurityPermission> succeeds, the operation is allowed.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="86b04-331">Начиная с [!INCLUDE[net_v20sp1_long](~/includes/net-v20sp1-long-md.md)], этот элемент больше не требуется <xref:System.Security.Permissions.ReflectionPermission> с <xref:System.Security.Permissions.ReflectionPermissionFlag.ReflectionEmit?displayProperty=nameWithType> флаг.</span><span class="sxs-lookup"><span data-stu-id="86b04-331">Starting with the [!INCLUDE[net_v20sp1_long](~/includes/net-v20sp1-long-md.md)], this member no longer requires <xref:System.Security.Permissions.ReflectionPermission> with the <xref:System.Security.Permissions.ReflectionPermissionFlag.ReflectionEmit?displayProperty=nameWithType> flag.</span></span> <span data-ttu-id="86b04-332">(См. [вопросы безопасности в порождаемом отражении](~/docs/framework/reflection-and-codedom/security-issues-in-reflection-emit.md).) Для применения этих функциональных возможностей приложение должно использовать [!INCLUDE[net_v35_long](~/includes/net-v35-long-md.md)] или более поздние версии.</span><span class="sxs-lookup"><span data-stu-id="86b04-332">(See [Security Issues in Reflection Emit](~/docs/framework/reflection-and-codedom/security-issues-in-reflection-emit.md).) To use this functionality, your application should target the [!INCLUDE[net_v35_long](~/includes/net-v35-long-md.md)] or later.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="86b04-333">Элемент <paramref name="parameterTypes" /> имеет значение <see langword="null" /> или <see cref="T:System.Void" />.</span><span class="sxs-lookup"><span data-stu-id="86b04-333">An element of <paramref name="parameterTypes" /> is <see langword="null" /> or <see cref="T:System.Void" />.</span></span>  
  
 <span data-ttu-id="86b04-334">- или -</span><span class="sxs-lookup"><span data-stu-id="86b04-334">-or-</span></span>  
  
 <span data-ttu-id="86b04-335"><paramref name="owner" /> является интерфейсом, массивом, открытым универсальным типом или параметром универсального типа или метода.</span><span class="sxs-lookup"><span data-stu-id="86b04-335"><paramref name="owner" /> is an interface, an array, an open generic type, or a type parameter of a generic type or method.</span></span></exception>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="86b04-336">Свойство <paramref name="name" /> имеет значение <see langword="null" />.</span><span class="sxs-lookup"><span data-stu-id="86b04-336"><paramref name="name" /> is <see langword="null" />.</span></span>  
  
 <span data-ttu-id="86b04-337">- или -</span><span class="sxs-lookup"><span data-stu-id="86b04-337">-or-</span></span>  
  
 <span data-ttu-id="86b04-338">Свойство <paramref name="owner" /> имеет значение <see langword="null" />.</span><span class="sxs-lookup"><span data-stu-id="86b04-338"><paramref name="owner" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.NotSupportedException">
          <span data-ttu-id="86b04-339"><paramref name="returnType" /> имеет значение <see langword="null" /> или является типом, для которого <see cref="P:System.Type.IsByRef" /> возвращает <see langword="true" />.</span><span class="sxs-lookup"><span data-stu-id="86b04-339"><paramref name="returnType" /> is <see langword="null" />, or is a type for which <see cref="P:System.Type.IsByRef" /> returns <see langword="true" />.</span></span></exception>
        <permission cref="T:System.Security.Permissions.ReflectionPermission"><span data-ttu-id="86b04-340">Чтобы связать динамический метод с типом в модуле, отличном от вызывающего.</span><span class="sxs-lookup"><span data-stu-id="86b04-340">to associate the dynamic method with a type in a module other than the calling module.</span></span> <span data-ttu-id="86b04-341">Связанное перечисление: <see cref="F:System.Security.Permissions.ReflectionPermissionFlag.RestrictedMemberAccess" />.</span><span class="sxs-lookup"><span data-stu-id="86b04-341">Associated enumeration: <see cref="F:System.Security.Permissions.ReflectionPermissionFlag.RestrictedMemberAccess" />.</span></span></permission>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public DynamicMethod (string name, System.Reflection.MethodAttributes attributes, System.Reflection.CallingConventions callingConvention, Type returnType, Type[] parameterTypes, System.Reflection.Module m, bool skipVisibility);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(string name, valuetype System.Reflection.MethodAttributes attributes, valuetype System.Reflection.CallingConventions callingConvention, class System.Type returnType, class System.Type[] parameterTypes, class System.Reflection.Module m, bool skipVisibility) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.Emit.DynamicMethod.#ctor(System.String,System.Reflection.MethodAttributes,System.Reflection.CallingConventions,System.Type,System.Type[],System.Reflection.Module,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (name As String, attributes As MethodAttributes, callingConvention As CallingConventions, returnType As Type, parameterTypes As Type(), m As Module, skipVisibility As Boolean)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; DynamicMethod(System::String ^ name, System::Reflection::MethodAttributes attributes, System::Reflection::CallingConventions callingConvention, Type ^ returnType, cli::array &lt;Type ^&gt; ^ parameterTypes, System::Reflection::Module ^ m, bool skipVisibility);" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Emit.Lightweight</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.3.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
        <Parameter Name="attributes" Type="System.Reflection.MethodAttributes" />
        <Parameter Name="callingConvention" Type="System.Reflection.CallingConventions" />
        <Parameter Name="returnType" Type="System.Type" />
        <Parameter Name="parameterTypes" Type="System.Type[]" />
        <Parameter Name="m" Type="System.Reflection.Module" />
        <Parameter Name="skipVisibility" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="name"><span data-ttu-id="86b04-342">Имя динамического метода.</span><span class="sxs-lookup"><span data-stu-id="86b04-342">The name of the dynamic method.</span></span> <span data-ttu-id="86b04-343">Это может быть строка нулевой длины, но не <see langword="null" />.</span><span class="sxs-lookup"><span data-stu-id="86b04-343">This can be a zero-length string, but it cannot be <see langword="null" />.</span></span></param>
        <param name="attributes"><span data-ttu-id="86b04-344">Битовая комбинация значений <see cref="T:System.Reflection.MethodAttributes" />, определяющая атрибуты динамического метода.</span><span class="sxs-lookup"><span data-stu-id="86b04-344">A bitwise combination of <see cref="T:System.Reflection.MethodAttributes" /> values that specifies the attributes of the dynamic method.</span></span> <span data-ttu-id="86b04-345">Разрешена только комбинация <see cref="F:System.Reflection.MethodAttributes.Public" /> и <see cref="F:System.Reflection.MethodAttributes.Static" />.</span><span class="sxs-lookup"><span data-stu-id="86b04-345">The only combination allowed is <see cref="F:System.Reflection.MethodAttributes.Public" /> and <see cref="F:System.Reflection.MethodAttributes.Static" />.</span></span></param>
        <param name="callingConvention"><span data-ttu-id="86b04-346">Соглашение о вызовах для динамического метода.</span><span class="sxs-lookup"><span data-stu-id="86b04-346">The calling convention for the dynamic method.</span></span> <span data-ttu-id="86b04-347">Должно иметь значение <see cref="F:System.Reflection.CallingConventions.Standard" />.</span><span class="sxs-lookup"><span data-stu-id="86b04-347">Must be <see cref="F:System.Reflection.CallingConventions.Standard" />.</span></span></param>
        <param name="returnType"><span data-ttu-id="86b04-348">Объект <see cref="T:System.Type" />, который указывает возвращаемый тип динамического метода, или значение <see langword="null" />, если метод не имеет возвращаемого типа.</span><span class="sxs-lookup"><span data-stu-id="86b04-348">A <see cref="T:System.Type" /> object that specifies the return type of the dynamic method, or <see langword="null" /> if the method has no return type.</span></span></param>
        <param name="parameterTypes"><span data-ttu-id="86b04-349">Массив объектов <see cref="T:System.Type" />, указывающих типы параметров динамического метода, или значение <see langword="null" />, если метод не имеет параметров.</span><span class="sxs-lookup"><span data-stu-id="86b04-349">An array of <see cref="T:System.Type" /> objects specifying the types of the parameters of the dynamic method, or <see langword="null" /> if the method has no parameters.</span></span></param>
        <param name="m">To be added.</param>
        <param name="skipVisibility">
          <span data-ttu-id="86b04-350">Значение <see langword="true" /> для пропуска проверки видимости JIT для типов и членов, к которым получает доступ MSIL динамического метода; в противном случае — значение <see langword="false" />.</span><span class="sxs-lookup"><span data-stu-id="86b04-350"><see langword="true" /> to skip JIT visibility checks on types and members accessed by the MSIL of the dynamic method; otherwise, <see langword="false" />.</span></span></param>
        <summary><span data-ttu-id="86b04-351">Создает динамический метод, который является глобальным для модуля, указывая имя метода, атрибуты, соглашение о вызовах, возвращаемый тип, типы параметров, модуль и необходимость пропуска проверки видимости JIT для типов и членов, к которым получает доступ промежуточный язык Майкрософт (MSIL) динамического метода.</span><span class="sxs-lookup"><span data-stu-id="86b04-351">Creates a dynamic method that is global to a module, specifying the method name, attributes, calling convention, return type, parameter types, module, and whether just-in-time (JIT) visibility checks should be skipped for types and members accessed by the Microsoft intermediate language (MSIL) of the dynamic method.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="86b04-352">Созданный с помощью этого конструктора динамический метод имеет доступ к открытым и `internal` (`Friend` в Visual Basic) члены всех открытых и внутренних типов, содержащихся в модуле `m`.</span><span class="sxs-lookup"><span data-stu-id="86b04-352">The dynamic method created with this constructor has access to public and `internal` (`Friend` in Visual Basic) members of all the public and internal types contained in module `m`.</span></span>  
  
 <span data-ttu-id="86b04-353">Пропуск JIT проверки видимости компилятора позволяет динамическому методу получать доступ к закрытым и защищенным членам других типов в модуль и все другие сборки.</span><span class="sxs-lookup"><span data-stu-id="86b04-353">Skipping the JIT compiler's visibility checks allows the dynamic method to access private and protected members of all other types in the module and in all other assemblies as well.</span></span> <span data-ttu-id="86b04-354">Это полезно, например, при написании кода для сериализации объектов.</span><span class="sxs-lookup"><span data-stu-id="86b04-354">This is useful, for example, when writing code to serialize objects.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="86b04-355">Для обеспечения обратной совместимости это конструктору требуется <xref:System.Security.Permissions.SecurityPermission> с <xref:System.Security.Permissions.SecurityPermissionFlag.ControlEvidence?displayProperty=nameWithType> флаг, если выполняются следующие условия, как true: `m` — это модуль, отличный от вызывающего и потребности в <xref:System.Security.Permissions.ReflectionPermission> с <xref:System.Security.Permissions.ReflectionPermissionFlag.MemberAccess?displayProperty=nameWithType> флаг не удалось.</span><span class="sxs-lookup"><span data-stu-id="86b04-355">For backward compatibility, this constructor demands <xref:System.Security.Permissions.SecurityPermission> with the <xref:System.Security.Permissions.SecurityPermissionFlag.ControlEvidence?displayProperty=nameWithType> flag if the following conditions are both true: `m` is a module other than the calling module, and the demand for <xref:System.Security.Permissions.ReflectionPermission> with the <xref:System.Security.Permissions.ReflectionPermissionFlag.MemberAccess?displayProperty=nameWithType> flag has failed.</span></span> <span data-ttu-id="86b04-356">Если потребность в <xref:System.Security.Permissions.SecurityPermission> завершается успешно, операция разрешена.</span><span class="sxs-lookup"><span data-stu-id="86b04-356">If the demand for <xref:System.Security.Permissions.SecurityPermission> succeeds, the operation is allowed.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="86b04-357">Начиная с [!INCLUDE[net_v20sp1_long](~/includes/net-v20sp1-long-md.md)], этот элемент больше не требуется <xref:System.Security.Permissions.ReflectionPermission> с <xref:System.Security.Permissions.ReflectionPermissionFlag.ReflectionEmit?displayProperty=nameWithType> флаг.</span><span class="sxs-lookup"><span data-stu-id="86b04-357">Starting with the [!INCLUDE[net_v20sp1_long](~/includes/net-v20sp1-long-md.md)], this member no longer requires <xref:System.Security.Permissions.ReflectionPermission> with the <xref:System.Security.Permissions.ReflectionPermissionFlag.ReflectionEmit?displayProperty=nameWithType> flag.</span></span> <span data-ttu-id="86b04-358">(См. [вопросы безопасности в порождаемом отражении](~/docs/framework/reflection-and-codedom/security-issues-in-reflection-emit.md).) Для применения этих функциональных возможностей приложение должно использовать [!INCLUDE[net_v35_long](~/includes/net-v35-long-md.md)] или более поздние версии.</span><span class="sxs-lookup"><span data-stu-id="86b04-358">(See [Security Issues in Reflection Emit](~/docs/framework/reflection-and-codedom/security-issues-in-reflection-emit.md).) To use this functionality, your application should target the [!INCLUDE[net_v35_long](~/includes/net-v35-long-md.md)] or later.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="86b04-359">Элемент <paramref name="parameterTypes" /> имеет значение <see langword="null" /> или <see cref="T:System.Void" />.</span><span class="sxs-lookup"><span data-stu-id="86b04-359">An element of <paramref name="parameterTypes" /> is <see langword="null" /> or <see cref="T:System.Void" />.</span></span>  
  
 <span data-ttu-id="86b04-360">- или -</span><span class="sxs-lookup"><span data-stu-id="86b04-360">-or-</span></span>  
  
 <span data-ttu-id="86b04-361"><paramref name="m" /> — это модуль, предоставляющий анонимное размещение для динамических методов.</span><span class="sxs-lookup"><span data-stu-id="86b04-361"><paramref name="m" /> is a module that provides anonymous hosting for dynamic methods.</span></span></exception>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="86b04-362">Свойство <paramref name="name" /> имеет значение <see langword="null" />.</span><span class="sxs-lookup"><span data-stu-id="86b04-362"><paramref name="name" /> is <see langword="null" />.</span></span>  
  
 <span data-ttu-id="86b04-363">- или -</span><span class="sxs-lookup"><span data-stu-id="86b04-363">-or-</span></span>  
  
 <span data-ttu-id="86b04-364">Свойство <paramref name="m" /> имеет значение <see langword="null" />.</span><span class="sxs-lookup"><span data-stu-id="86b04-364"><paramref name="m" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.NotSupportedException">
          <span data-ttu-id="86b04-365"><paramref name="attributes" /> представляет собой сочетание флагов, отличных от <see cref="F:System.Reflection.MethodAttributes.Public" /> и <see cref="F:System.Reflection.MethodAttributes.Static" />.</span><span class="sxs-lookup"><span data-stu-id="86b04-365"><paramref name="attributes" /> is a combination of flags other than <see cref="F:System.Reflection.MethodAttributes.Public" /> and <see cref="F:System.Reflection.MethodAttributes.Static" />.</span></span>  
  
 <span data-ttu-id="86b04-366">- или -</span><span class="sxs-lookup"><span data-stu-id="86b04-366">-or-</span></span>  
  
 <span data-ttu-id="86b04-367"><paramref name="callingConvention" /> не является <see cref="F:System.Reflection.CallingConventions.Standard" />.</span><span class="sxs-lookup"><span data-stu-id="86b04-367"><paramref name="callingConvention" /> is not <see cref="F:System.Reflection.CallingConventions.Standard" />.</span></span>  
  
 <span data-ttu-id="86b04-368">- или -</span><span class="sxs-lookup"><span data-stu-id="86b04-368">-or-</span></span>  
  
 <span data-ttu-id="86b04-369"><paramref name="returnType" /> — это тип, для которого <see cref="P:System.Type.IsByRef" /> возвращает <see langword="true" />.</span><span class="sxs-lookup"><span data-stu-id="86b04-369"><paramref name="returnType" /> is a type for which <see cref="P:System.Type.IsByRef" /> returns <see langword="true" />.</span></span></exception>
        <permission cref="T:System.Security.Permissions.ReflectionPermission"><span data-ttu-id="86b04-370">Чтобы связать динамический метод с модулем, отличным от вызывающего.</span><span class="sxs-lookup"><span data-stu-id="86b04-370">to associate the dynamic method with a module other than the calling module.</span></span> <span data-ttu-id="86b04-371">Связанное перечисление: <see cref="F:System.Security.Permissions.ReflectionPermissionFlag.RestrictedMemberAccess" />.</span><span class="sxs-lookup"><span data-stu-id="86b04-371">Associated enumeration: <see cref="F:System.Security.Permissions.ReflectionPermissionFlag.RestrictedMemberAccess" />.</span></span></permission>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public DynamicMethod (string name, System.Reflection.MethodAttributes attributes, System.Reflection.CallingConventions callingConvention, Type returnType, Type[] parameterTypes, Type owner, bool skipVisibility);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(string name, valuetype System.Reflection.MethodAttributes attributes, valuetype System.Reflection.CallingConventions callingConvention, class System.Type returnType, class System.Type[] parameterTypes, class System.Type owner, bool skipVisibility) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.Emit.DynamicMethod.#ctor(System.String,System.Reflection.MethodAttributes,System.Reflection.CallingConventions,System.Type,System.Type[],System.Type,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (name As String, attributes As MethodAttributes, callingConvention As CallingConventions, returnType As Type, parameterTypes As Type(), owner As Type, skipVisibility As Boolean)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; DynamicMethod(System::String ^ name, System::Reflection::MethodAttributes attributes, System::Reflection::CallingConventions callingConvention, Type ^ returnType, cli::array &lt;Type ^&gt; ^ parameterTypes, Type ^ owner, bool skipVisibility);" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Emit.Lightweight</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.3.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
        <Parameter Name="attributes" Type="System.Reflection.MethodAttributes" />
        <Parameter Name="callingConvention" Type="System.Reflection.CallingConventions" />
        <Parameter Name="returnType" Type="System.Type" />
        <Parameter Name="parameterTypes" Type="System.Type[]" />
        <Parameter Name="owner" Type="System.Type" />
        <Parameter Name="skipVisibility" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="name"><span data-ttu-id="86b04-372">Имя динамического метода.</span><span class="sxs-lookup"><span data-stu-id="86b04-372">The name of the dynamic method.</span></span> <span data-ttu-id="86b04-373">Это может быть строка нулевой длины, но не <see langword="null" />.</span><span class="sxs-lookup"><span data-stu-id="86b04-373">This can be a zero-length string, but it cannot be <see langword="null" />.</span></span></param>
        <param name="attributes"><span data-ttu-id="86b04-374">Битовая комбинация значений <see cref="T:System.Reflection.MethodAttributes" />, определяющая атрибуты динамического метода.</span><span class="sxs-lookup"><span data-stu-id="86b04-374">A bitwise combination of <see cref="T:System.Reflection.MethodAttributes" /> values that specifies the attributes of the dynamic method.</span></span> <span data-ttu-id="86b04-375">Разрешена только комбинация <see cref="F:System.Reflection.MethodAttributes.Public" /> и <see cref="F:System.Reflection.MethodAttributes.Static" />.</span><span class="sxs-lookup"><span data-stu-id="86b04-375">The only combination allowed is <see cref="F:System.Reflection.MethodAttributes.Public" /> and <see cref="F:System.Reflection.MethodAttributes.Static" />.</span></span></param>
        <param name="callingConvention"><span data-ttu-id="86b04-376">Соглашение о вызовах для динамического метода.</span><span class="sxs-lookup"><span data-stu-id="86b04-376">The calling convention for the dynamic method.</span></span> <span data-ttu-id="86b04-377">Должно иметь значение <see cref="F:System.Reflection.CallingConventions.Standard" />.</span><span class="sxs-lookup"><span data-stu-id="86b04-377">Must be <see cref="F:System.Reflection.CallingConventions.Standard" />.</span></span></param>
        <param name="returnType"><span data-ttu-id="86b04-378">Объект <see cref="T:System.Type" />, который указывает возвращаемый тип динамического метода, или значение <see langword="null" />, если метод не имеет возвращаемого типа.</span><span class="sxs-lookup"><span data-stu-id="86b04-378">A <see cref="T:System.Type" /> object that specifies the return type of the dynamic method, or <see langword="null" /> if the method has no return type.</span></span></param>
        <param name="parameterTypes"><span data-ttu-id="86b04-379">Массив объектов <see cref="T:System.Type" />, указывающих типы параметров динамического метода, или значение <see langword="null" />, если метод не имеет параметров.</span><span class="sxs-lookup"><span data-stu-id="86b04-379">An array of <see cref="T:System.Type" /> objects specifying the types of the parameters of the dynamic method, or <see langword="null" /> if the method has no parameters.</span></span></param>
        <param name="owner"><span data-ttu-id="86b04-380">Тип <see cref="T:System.Type" />, с которым логически связан динамический метод.</span><span class="sxs-lookup"><span data-stu-id="86b04-380">A <see cref="T:System.Type" /> with which the dynamic method is logically associated.</span></span> <span data-ttu-id="86b04-381">Динамический метод имеет доступ ко всем членам типа.</span><span class="sxs-lookup"><span data-stu-id="86b04-381">The dynamic method has access to all members of the type.</span></span></param>
        <param name="skipVisibility">
          <span data-ttu-id="86b04-382">Значение <see langword="true" /> для пропуска проверки видимости JIT для типов и членов, к которым получает доступ MSIL динамического метода; в противном случае — значение <see langword="false" />.</span><span class="sxs-lookup"><span data-stu-id="86b04-382"><see langword="true" /> to skip JIT visibility checks on types and members accessed by the MSIL of the dynamic method; otherwise, <see langword="false" />.</span></span></param>
        <summary><span data-ttu-id="86b04-383">Создает динамический метод, указывая имя метода, атрибуты, соглашение о вызовах, возвращаемый тип, типы параметров, тип, с которым логически связан динамический метод, и необходимость пропуска проверки видимости JIT для типов и членов, к которым получает доступ промежуточный язык Майкрософт (MSIL) динамического метода.</span><span class="sxs-lookup"><span data-stu-id="86b04-383">Creates a dynamic method, specifying the method name, attributes, calling convention, return type, parameter types, the type with which the dynamic method is logically associated, and whether just-in-time (JIT) visibility checks should be skipped for types and members accessed by the Microsoft intermediate language (MSIL) of the dynamic method.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="86b04-384">Динамический метод является глобальным для модуля, содержащего тип `owner`.</span><span class="sxs-lookup"><span data-stu-id="86b04-384">The dynamic method is global to the module that contains the type `owner`.</span></span> <span data-ttu-id="86b04-385">Он имеет доступ ко всем членам типа `owner`.</span><span class="sxs-lookup"><span data-stu-id="86b04-385">It has access to all members of the type `owner`.</span></span>  
  
 <span data-ttu-id="86b04-386">Созданный с помощью этого конструктора динамический метод имеет доступ ко всем членам типа `owner`и общедоступный и `internal` (`Friend` в Visual Basic) члены всех типов, содержащихся в модуле, который содержит `owner`.</span><span class="sxs-lookup"><span data-stu-id="86b04-386">The dynamic method created with this constructor has access to all members of the type `owner`, and to public and `internal` (`Friend` in Visual Basic) members of all the types contained in the module that contains `owner`.</span></span> <span data-ttu-id="86b04-387">Пропуск JIT проверки видимости компилятора позволяет динамическому методу получать доступ к закрытым и защищенным членам всех других типов.</span><span class="sxs-lookup"><span data-stu-id="86b04-387">Skipping the JIT compiler's visibility checks allows the dynamic method to access private and protected members of all other types as well.</span></span> <span data-ttu-id="86b04-388">Это полезно, например, при написании кода для сериализации объектов.</span><span class="sxs-lookup"><span data-stu-id="86b04-388">This is useful, for example, when writing code to serialize objects.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="86b04-389">Для обеспечения обратной совместимости это конструктору требуется <xref:System.Security.Permissions.SecurityPermission> с <xref:System.Security.Permissions.SecurityPermissionFlag.ControlEvidence?displayProperty=nameWithType> флаг, если выполняются следующие условия, как true: `owner` находится в модуле, отличном от вызывающего и потребности в <xref:System.Security.Permissions.ReflectionPermission> с <xref:System.Security.Permissions.ReflectionPermissionFlag.MemberAccess?displayProperty=nameWithType> Сбой флаг.</span><span class="sxs-lookup"><span data-stu-id="86b04-389">For backward compatibility, this constructor demands <xref:System.Security.Permissions.SecurityPermission> with the <xref:System.Security.Permissions.SecurityPermissionFlag.ControlEvidence?displayProperty=nameWithType> flag if the following conditions are both true: `owner` is in a module other than the calling module, and the demand for <xref:System.Security.Permissions.ReflectionPermission> with the <xref:System.Security.Permissions.ReflectionPermissionFlag.MemberAccess?displayProperty=nameWithType> flag has failed.</span></span> <span data-ttu-id="86b04-390">Если потребность в <xref:System.Security.Permissions.SecurityPermission> завершается успешно, операция разрешена.</span><span class="sxs-lookup"><span data-stu-id="86b04-390">If the demand for <xref:System.Security.Permissions.SecurityPermission> succeeds, the operation is allowed.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="86b04-391">Начиная с [!INCLUDE[net_v20sp1_long](~/includes/net-v20sp1-long-md.md)], этот элемент больше не требуется <xref:System.Security.Permissions.ReflectionPermission> с <xref:System.Security.Permissions.ReflectionPermissionFlag.ReflectionEmit?displayProperty=nameWithType> флаг.</span><span class="sxs-lookup"><span data-stu-id="86b04-391">Starting with the [!INCLUDE[net_v20sp1_long](~/includes/net-v20sp1-long-md.md)], this member no longer requires <xref:System.Security.Permissions.ReflectionPermission> with the <xref:System.Security.Permissions.ReflectionPermissionFlag.ReflectionEmit?displayProperty=nameWithType> flag.</span></span> <span data-ttu-id="86b04-392">(См. [вопросы безопасности в порождаемом отражении](~/docs/framework/reflection-and-codedom/security-issues-in-reflection-emit.md).) Для применения этих функциональных возможностей приложение должно использовать [!INCLUDE[net_v35_long](~/includes/net-v35-long-md.md)] или более поздние версии.</span><span class="sxs-lookup"><span data-stu-id="86b04-392">(See [Security Issues in Reflection Emit](~/docs/framework/reflection-and-codedom/security-issues-in-reflection-emit.md).) To use this functionality, your application should target the [!INCLUDE[net_v35_long](~/includes/net-v35-long-md.md)] or later.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="86b04-393">Элемент <paramref name="parameterTypes" /> имеет значение <see langword="null" /> или <see cref="T:System.Void" />.</span><span class="sxs-lookup"><span data-stu-id="86b04-393">An element of <paramref name="parameterTypes" /> is <see langword="null" /> or <see cref="T:System.Void" />.</span></span>  
  
 <span data-ttu-id="86b04-394">- или -</span><span class="sxs-lookup"><span data-stu-id="86b04-394">-or-</span></span>  
  
 <span data-ttu-id="86b04-395"><paramref name="owner" /> является интерфейсом, массивом, открытым универсальным типом или параметром универсального типа или метода.</span><span class="sxs-lookup"><span data-stu-id="86b04-395"><paramref name="owner" /> is an interface, an array, an open generic type, or a type parameter of a generic type or method.</span></span></exception>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="86b04-396">Свойство <paramref name="name" /> имеет значение <see langword="null" />.</span><span class="sxs-lookup"><span data-stu-id="86b04-396"><paramref name="name" /> is <see langword="null" />.</span></span>  
  
 <span data-ttu-id="86b04-397">- или -</span><span class="sxs-lookup"><span data-stu-id="86b04-397">-or-</span></span>  
  
 <span data-ttu-id="86b04-398">Свойство <paramref name="owner" /> имеет значение <see langword="null" />.</span><span class="sxs-lookup"><span data-stu-id="86b04-398"><paramref name="owner" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.NotSupportedException">
          <span data-ttu-id="86b04-399"><paramref name="attributes" /> представляет собой сочетание флагов, отличных от <see cref="F:System.Reflection.MethodAttributes.Public" /> и <see cref="F:System.Reflection.MethodAttributes.Static" />.</span><span class="sxs-lookup"><span data-stu-id="86b04-399"><paramref name="attributes" /> is a combination of flags other than <see cref="F:System.Reflection.MethodAttributes.Public" /> and <see cref="F:System.Reflection.MethodAttributes.Static" />.</span></span>  
  
 <span data-ttu-id="86b04-400">- или -</span><span class="sxs-lookup"><span data-stu-id="86b04-400">-or-</span></span>  
  
 <span data-ttu-id="86b04-401"><paramref name="callingConvention" /> не является <see cref="F:System.Reflection.CallingConventions.Standard" />.</span><span class="sxs-lookup"><span data-stu-id="86b04-401"><paramref name="callingConvention" /> is not <see cref="F:System.Reflection.CallingConventions.Standard" />.</span></span>  
  
 <span data-ttu-id="86b04-402">- или -</span><span class="sxs-lookup"><span data-stu-id="86b04-402">-or-</span></span>  
  
 <span data-ttu-id="86b04-403"><paramref name="returnType" /> — это тип, для которого <see cref="P:System.Type.IsByRef" /> возвращает <see langword="true" />.</span><span class="sxs-lookup"><span data-stu-id="86b04-403"><paramref name="returnType" /> is a type for which <see cref="P:System.Type.IsByRef" /> returns <see langword="true" />.</span></span></exception>
        <permission cref="T:System.Security.Permissions.ReflectionPermission"><span data-ttu-id="86b04-404">Чтобы связать динамический метод с типом в модуле, отличном от вызывающего.</span><span class="sxs-lookup"><span data-stu-id="86b04-404">to associate the dynamic method with a type in a module other than the calling module.</span></span> <span data-ttu-id="86b04-405">Связанное перечисление: <see cref="F:System.Security.Permissions.ReflectionPermissionFlag.RestrictedMemberAccess" />.</span><span class="sxs-lookup"><span data-stu-id="86b04-405">Associated enumeration: <see cref="F:System.Security.Permissions.ReflectionPermissionFlag.RestrictedMemberAccess" />.</span></span></permission>
      </Docs>
    </Member>
    <Member MemberName="Attributes">
      <MemberSignature Language="C#" Value="public override System.Reflection.MethodAttributes Attributes { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Reflection.MethodAttributes Attributes" />
      <MemberSignature Language="DocId" Value="P:System.Reflection.Emit.DynamicMethod.Attributes" />
      <MemberSignature Language="VB.NET" Value="Public Overrides ReadOnly Property Attributes As MethodAttributes" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property System::Reflection::MethodAttributes Attributes { System::Reflection::MethodAttributes get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Emit.Lightweight</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.3.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.MethodAttributes</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="86b04-406">Возвращает атрибуты, указанные при создании динамического метода.</span><span class="sxs-lookup"><span data-stu-id="86b04-406">Gets the attributes specified when the dynamic method was created.</span></span></summary>
        <value><span data-ttu-id="86b04-407">Побитовое сочетание значений <see cref="T:System.Reflection.MethodAttributes" />, представляющее атрибуты для метода.</span><span class="sxs-lookup"><span data-stu-id="86b04-407">A bitwise combination of the <see cref="T:System.Reflection.MethodAttributes" /> values representing the attributes for the method.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="86b04-408">В настоящее время, всегда являются атрибутами метода для динамического метода <xref:System.Reflection.MethodAttributes.Public> и <xref:System.Reflection.MethodAttributes.Static>.</span><span class="sxs-lookup"><span data-stu-id="86b04-408">Currently, the method attributes for a dynamic method are always <xref:System.Reflection.MethodAttributes.Public> and <xref:System.Reflection.MethodAttributes.Static>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="86b04-409">В следующем примере кода отображаются атрибуты метода динамического метода.</span><span class="sxs-lookup"><span data-stu-id="86b04-409">The following code example displays the method attributes of a dynamic method.</span></span> <span data-ttu-id="86b04-410">Данный пример кода является частью большего примера, приведенного для <xref:System.Reflection.Emit.DynamicMethod> класса.</span><span class="sxs-lookup"><span data-stu-id="86b04-410">This code example is part of a larger example provided for the <xref:System.Reflection.Emit.DynamicMethod> class.</span></span>  
  
 [!code-cpp[Reflection.DynamicMethod.All#21](~/samples/snippets/cpp/VS_Snippets_CLR/Reflection.DynamicMethod.All/cpp/source.cpp#21)]
 [!code-csharp[Reflection.DynamicMethod.All#21](~/samples/snippets/csharp/VS_Snippets_CLR/Reflection.DynamicMethod.All/CS/source.cs#21)]
 [!code-vb[Reflection.DynamicMethod.All#21](~/samples/snippets/visualbasic/VS_Snippets_CLR/Reflection.DynamicMethod.All/VB/source.vb#21)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="CallingConvention">
      <MemberSignature Language="C#" Value="public override System.Reflection.CallingConventions CallingConvention { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Reflection.CallingConventions CallingConvention" />
      <MemberSignature Language="DocId" Value="P:System.Reflection.Emit.DynamicMethod.CallingConvention" />
      <MemberSignature Language="VB.NET" Value="Public Overrides ReadOnly Property CallingConvention As CallingConventions" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property System::Reflection::CallingConventions CallingConvention { System::Reflection::CallingConventions get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Emit.Lightweight</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.3.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.CallingConventions</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="86b04-411">Получает соглашение о вызовах, указанное при создании динамического метода.</span><span class="sxs-lookup"><span data-stu-id="86b04-411">Gets the calling convention specified when the dynamic method was created.</span></span></summary>
        <value><span data-ttu-id="86b04-412">Одно из значений <see cref="T:System.Reflection.CallingConventions" />, указывающее соглашение о вызовах метода.</span><span class="sxs-lookup"><span data-stu-id="86b04-412">One of the <see cref="T:System.Reflection.CallingConventions" /> values that indicates the calling convention of the method.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="86b04-413">В настоящее время всегда равно соглашение о вызовах для динамического метода <xref:System.Reflection.CallingConventions.Standard>.</span><span class="sxs-lookup"><span data-stu-id="86b04-413">Currently, the calling convention for a dynamic method is always <xref:System.Reflection.CallingConventions.Standard>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="86b04-414">В следующем примере кода отображаются соглашение о вызовах для динамического метода.</span><span class="sxs-lookup"><span data-stu-id="86b04-414">The following code example displays the calling convention of a dynamic method.</span></span> <span data-ttu-id="86b04-415">Данный пример кода является частью большего примера, приведенного для <xref:System.Reflection.Emit.DynamicMethod> класса.</span><span class="sxs-lookup"><span data-stu-id="86b04-415">This code example is part of a larger example provided for the <xref:System.Reflection.Emit.DynamicMethod> class.</span></span>  
  
 [!code-cpp[Reflection.DynamicMethod.All#22](~/samples/snippets/cpp/VS_Snippets_CLR/Reflection.DynamicMethod.All/cpp/source.cpp#22)]
 [!code-csharp[Reflection.DynamicMethod.All#22](~/samples/snippets/csharp/VS_Snippets_CLR/Reflection.DynamicMethod.All/CS/source.cs#22)]
 [!code-vb[Reflection.DynamicMethod.All#22](~/samples/snippets/visualbasic/VS_Snippets_CLR/Reflection.DynamicMethod.All/VB/source.vb#22)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="CreateDelegate">
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Emit.Lightweight</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.3.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="86b04-416">Завершает динамический метод и создает делегата, который может использоваться для его выполнения.</span><span class="sxs-lookup"><span data-stu-id="86b04-416">Completes the dynamic method and creates a delegate that can be used to execute it.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="CreateDelegate">
      <MemberSignature Language="C#" Value="public override sealed Delegate CreateDelegate (Type delegateType);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance class System.Delegate CreateDelegate(class System.Type delegateType) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.Emit.DynamicMethod.CreateDelegate(System.Type)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides NotOverridable Function CreateDelegate (delegateType As Type) As Delegate" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override Delegate ^ CreateDelegate(Type ^ delegateType);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Emit.Lightweight</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.3.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.ComVisible(true)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Delegate</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="delegateType" Type="System.Type" />
      </Parameters>
      <Docs>
        <param name="delegateType"><span data-ttu-id="86b04-417">Тип делегата, подпись которого совпадает с подписью динамического метода.</span><span class="sxs-lookup"><span data-stu-id="86b04-417">A delegate type whose signature matches that of the dynamic method.</span></span></param>
        <summary><span data-ttu-id="86b04-418">Завершает динамический метод и создает делегата, который может использоваться для его выполнения.</span><span class="sxs-lookup"><span data-stu-id="86b04-418">Completes the dynamic method and creates a delegate that can be used to execute it.</span></span></summary>
        <returns><span data-ttu-id="86b04-419">Делегат указанного типа, который может использоваться для выполнения динамического метода.</span><span class="sxs-lookup"><span data-stu-id="86b04-419">A delegate of the specified type, which can be used to execute the dynamic method.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="86b04-420">Вызов <xref:System.Reflection.Emit.DynamicMethod.CreateDelegate%2A> метода или <xref:System.Reflection.Emit.DynamicMethod.Invoke%2A> метод завершает динамический метод.</span><span class="sxs-lookup"><span data-stu-id="86b04-420">Calling the <xref:System.Reflection.Emit.DynamicMethod.CreateDelegate%2A> method or the <xref:System.Reflection.Emit.DynamicMethod.Invoke%2A> method completes the dynamic method.</span></span> <span data-ttu-id="86b04-421">Любые дополнительные попытки изменить динамический метод, такие как изменение определений параметров или выпуска дополнительные промежуточного языка Майкрософт (MSIL), учитывается; исключение не возникает.</span><span class="sxs-lookup"><span data-stu-id="86b04-421">Any further attempt to alter the dynamic method, such as modifying parameter definitions or emitting more Microsoft intermediate language (MSIL), is ignored; no exception is thrown.</span></span>  
  
 <span data-ttu-id="86b04-422">Для создания тела метода для динамического метода, когда у вас есть генератор MSIL, вызовите <xref:System.Reflection.Emit.DynamicMethod.GetDynamicILInfo%2A> метод, чтобы получить <xref:System.Reflection.Emit.DynamicILInfo> объекта.</span><span class="sxs-lookup"><span data-stu-id="86b04-422">To create a method body for a dynamic method when you have your own MSIL generator, call the <xref:System.Reflection.Emit.DynamicMethod.GetDynamicILInfo%2A> method to obtain a <xref:System.Reflection.Emit.DynamicILInfo> object.</span></span> <span data-ttu-id="86b04-423">Если у вас генератор MSIL, вызовите <xref:System.Reflection.Emit.DynamicMethod.GetILGenerator%2A> метод, чтобы получить <xref:System.Reflection.Emit.ILGenerator> объект, который может использоваться для создания тела метода.</span><span class="sxs-lookup"><span data-stu-id="86b04-423">If you do not have your own MSIL generator, call the <xref:System.Reflection.Emit.DynamicMethod.GetILGenerator%2A> method to obtain an <xref:System.Reflection.Emit.ILGenerator> object that can be used to generate the method body.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="86b04-424">В следующем примере кода создается динамический метод, который принимает два параметра.</span><span class="sxs-lookup"><span data-stu-id="86b04-424">The following code example creates a dynamic method that takes two parameters.</span></span> <span data-ttu-id="86b04-425">В этом примере выпускается основной текст простой функции, который выводит первый параметр в консоль, а в примере используется второй параметр в качестве возвращаемого значения метода.</span><span class="sxs-lookup"><span data-stu-id="86b04-425">The example emits a simple function body that prints the first parameter to the console, and the example uses the second parameter as the return value of the method.</span></span> <span data-ttu-id="86b04-426">В примере завершает метод путем создания делегата, вызывает делегат с различными параметрами и наконец вызывает динамический метод с помощью <xref:System.Reflection.Emit.DynamicMethod.Invoke%2A> метод.</span><span class="sxs-lookup"><span data-stu-id="86b04-426">The example completes the method by creating a delegate, invokes the delegate with different parameters, and finally invokes the dynamic method using the <xref:System.Reflection.Emit.DynamicMethod.Invoke%2A> method.</span></span>  
  
 [!code-cpp[Reflection.DynamicMethod.ctor1#1](~/samples/snippets/cpp/VS_Snippets_CLR/Reflection.DynamicMethod.ctor1/cpp/source.cpp#1)]
 [!code-csharp[Reflection.DynamicMethod.ctor1#1](~/samples/snippets/csharp/VS_Snippets_CLR/Reflection.DynamicMethod.ctor1/CS/source.cs#1)]
 [!code-vb[Reflection.DynamicMethod.ctor1#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/Reflection.DynamicMethod.ctor1/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="86b04-427">У динамического метода отсутствует тело метода.</span><span class="sxs-lookup"><span data-stu-id="86b04-427">The dynamic method has no method body.</span></span></exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="86b04-428"><paramref name="delegateType" /> имеет неверное число параметров или неправильные типы параметров.</span><span class="sxs-lookup"><span data-stu-id="86b04-428"><paramref name="delegateType" /> has the wrong number of parameters or the wrong parameter types.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="CreateDelegate">
      <MemberSignature Language="C#" Value="public override sealed Delegate CreateDelegate (Type delegateType, object target);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance class System.Delegate CreateDelegate(class System.Type delegateType, object target) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.Emit.DynamicMethod.CreateDelegate(System.Type,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides NotOverridable Function CreateDelegate (delegateType As Type, target As Object) As Delegate" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override Delegate ^ CreateDelegate(Type ^ delegateType, System::Object ^ target);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Emit.Lightweight</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.3.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.ComVisible(true)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Delegate</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="delegateType" Type="System.Type" />
        <Parameter Name="target" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="delegateType"><span data-ttu-id="86b04-429">Тип делегата, подпись которого совпадает с подписью динамического метода минус первый параметр.</span><span class="sxs-lookup"><span data-stu-id="86b04-429">A delegate type whose signature matches that of the dynamic method, minus the first parameter.</span></span></param>
        <param name="target"><span data-ttu-id="86b04-430">Объект, к которому привязан делегат.</span><span class="sxs-lookup"><span data-stu-id="86b04-430">An object the delegate is bound to.</span></span> <span data-ttu-id="86b04-431">Должен быть того же типа, что и первый параметр динамического метода.</span><span class="sxs-lookup"><span data-stu-id="86b04-431">Must be of the same type as the first parameter of the dynamic method.</span></span></param>
        <summary><span data-ttu-id="86b04-432">Завершает динамический метод и создает делегат, который может использоваться для его выполнения, указывая тип делегата и объект, к которому привязан делегат.</span><span class="sxs-lookup"><span data-stu-id="86b04-432">Completes the dynamic method and creates a delegate that can be used to execute it, specifying the delegate type and an object the delegate is bound to.</span></span></summary>
        <returns><span data-ttu-id="86b04-433">Делегат указанного типа, который может использоваться для выполнения динамического метода с указанным целевым объектом.</span><span class="sxs-lookup"><span data-stu-id="86b04-433">A delegate of the specified type, which can be used to execute the dynamic method with the specified target object.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="86b04-434">Эта перегрузка метода создает делегат, привязанный к определенному объекту.</span><span class="sxs-lookup"><span data-stu-id="86b04-434">This method overload creates a delegate bound to a particular object.</span></span> <span data-ttu-id="86b04-435">Такой делегат считается закрытым в отношении своего первого аргумента.</span><span class="sxs-lookup"><span data-stu-id="86b04-435">Such a delegate is said to be closed over its first argument.</span></span> <span data-ttu-id="86b04-436">Несмотря на то, что метод является статическим, он действует, как если бы это был метод экземпляра; экземпляр является `target`.</span><span class="sxs-lookup"><span data-stu-id="86b04-436">Although the method is static, it acts as if it were an instance method; the instance is `target`.</span></span>  
  
 <span data-ttu-id="86b04-437">Эта перегрузка метода требуется `target` быть того же типа как первый параметр динамического метода, или был назначен этому типу (например, производном классе).</span><span class="sxs-lookup"><span data-stu-id="86b04-437">This method overload requires `target` to be of the same type as the first parameter of the dynamic method, or to be assignable to that type (for example, a derived class).</span></span>  <span data-ttu-id="86b04-438">Подпись `delegateType` содержит все параметры динамического метода, кроме первого.</span><span class="sxs-lookup"><span data-stu-id="86b04-438">The signature of `delegateType` has all the parameters of the dynamic method except the first.</span></span> <span data-ttu-id="86b04-439">Например, если динамический метод имеет параметры <xref:System.String>, <xref:System.Int32>, и <xref:System.Byte>, затем `delegateType` параметров <xref:System.Int32> и <xref:System.Byte>; `target` относится к типу <xref:System.String>.</span><span class="sxs-lookup"><span data-stu-id="86b04-439">For example, if the dynamic method has the parameters <xref:System.String>, <xref:System.Int32>, and <xref:System.Byte>, then `delegateType` has the parameters <xref:System.Int32> and <xref:System.Byte>; `target` is of type <xref:System.String>.</span></span>  
  
 <span data-ttu-id="86b04-440">Вызов <xref:System.Reflection.Emit.DynamicMethod.CreateDelegate%2A> метода или <xref:System.Reflection.Emit.DynamicMethod.Invoke%2A> метод завершает динамический метод.</span><span class="sxs-lookup"><span data-stu-id="86b04-440">Calling the <xref:System.Reflection.Emit.DynamicMethod.CreateDelegate%2A> method or the <xref:System.Reflection.Emit.DynamicMethod.Invoke%2A> method completes the dynamic method.</span></span> <span data-ttu-id="86b04-441">Любые дополнительные попытки изменить динамический метод, такие как изменение определений параметров или выпуска дополнительные промежуточного языка Майкрософт (MSIL), учитывается; исключение не возникает.</span><span class="sxs-lookup"><span data-stu-id="86b04-441">Any further attempt to alter the dynamic method, such as modifying parameter definitions or emitting more Microsoft intermediate language (MSIL), is ignored; no exception is thrown.</span></span>  
  
 <span data-ttu-id="86b04-442">Для создания тела метода для динамического метода, когда у вас есть генератор MSIL, вызовите <xref:System.Reflection.Emit.DynamicMethod.GetDynamicILInfo%2A> метод, чтобы получить <xref:System.Reflection.Emit.DynamicILInfo> объекта.</span><span class="sxs-lookup"><span data-stu-id="86b04-442">To create a method body for a dynamic method when you have your own MSIL generator, call the <xref:System.Reflection.Emit.DynamicMethod.GetDynamicILInfo%2A> method to obtain a <xref:System.Reflection.Emit.DynamicILInfo> object.</span></span> <span data-ttu-id="86b04-443">Если у вас генератор MSIL, вызовите <xref:System.Reflection.Emit.DynamicMethod.GetILGenerator%2A> метод, чтобы получить <xref:System.Reflection.Emit.ILGenerator> объект, который может использоваться для создания тела метода.</span><span class="sxs-lookup"><span data-stu-id="86b04-443">If you do not have your own MSIL generator, call the <xref:System.Reflection.Emit.DynamicMethod.GetILGenerator%2A> method to obtain an <xref:System.Reflection.Emit.ILGenerator> object that can be used to generate the method body.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="86b04-444">В следующем примере кода создается делегат, который привязывает <xref:System.Reflection.Emit.DynamicMethod> к экземпляру типа, чтобы метод действует на том же экземпляре при каждом вызове.</span><span class="sxs-lookup"><span data-stu-id="86b04-444">The following code example creates delegate that binds a <xref:System.Reflection.Emit.DynamicMethod> to an instance of a type, so that the method acts on the same instance each time it is invoked.</span></span>  
  
 <span data-ttu-id="86b04-445">В примере кода определяется класс с именем `Example` с закрытое поле с именем класса `DerivedFromxample` , производный от первого класса, тип делегата с именем `UseLikeStatic` , возвращающий <xref:System.Int32> параметров типа `Example` и <xref:System.Int32>и тип делегата с именем `UseLikeInstance` , возвращающий <xref:System.Int32> и имеет один параметр типа <xref:System.Int32>.</span><span class="sxs-lookup"><span data-stu-id="86b04-445">The code example defines a class named `Example` with a private field, a class named `DerivedFromxample` that derives from the first class, a delegate type named `UseLikeStatic` that returns <xref:System.Int32> and has parameters of type `Example` and <xref:System.Int32>, and a delegate type named `UseLikeInstance` that returns <xref:System.Int32> and has one parameter of type <xref:System.Int32>.</span></span>  
  
 <span data-ttu-id="86b04-446">Затем в примере кода создается <xref:System.Reflection.Emit.DynamicMethod> , изменяющий закрытое поле экземпляра `Example` и возвращает предыдущее значение.</span><span class="sxs-lookup"><span data-stu-id="86b04-446">The example code then creates a <xref:System.Reflection.Emit.DynamicMethod> that changes the private field of an instance of `Example` and returns the previous value.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="86b04-447">Как правило изменение внутренних полей классов не объектно ориентированном программировании рекомендаций.</span><span class="sxs-lookup"><span data-stu-id="86b04-447">In general, changing the internal fields of classes is not good object-oriented coding practice.</span></span>  
  
 <span data-ttu-id="86b04-448">Этот пример кода создает экземпляр `Example` , а затем создает два делегата.</span><span class="sxs-lookup"><span data-stu-id="86b04-448">The example code creates an instance of `Example` and then creates two delegates.</span></span> <span data-ttu-id="86b04-449">Первый — типа `UseLikeStatic`, который имеет те же параметры динамического метода.</span><span class="sxs-lookup"><span data-stu-id="86b04-449">The first is of type `UseLikeStatic`, which has the same parameters as the dynamic method.</span></span> <span data-ttu-id="86b04-450">Второй — типа `UseLikeInstance`, у которого нет первый параметр (типа `Example`).</span><span class="sxs-lookup"><span data-stu-id="86b04-450">The second is of type `UseLikeInstance`, which lacks the first parameter (of type `Example`).</span></span> <span data-ttu-id="86b04-451">Этот делегат создается с помощью <xref:System.Reflection.Emit.DynamicMethod.CreateDelegate%28System.Type%2CSystem.Object%29> перегрузка метода; второй параметр этой перегрузки метода является экземпляром класса `Example`в данном случае экземпляр только что создали, который привязан к вновь созданного делегата.</span><span class="sxs-lookup"><span data-stu-id="86b04-451">This delegate is created using the <xref:System.Reflection.Emit.DynamicMethod.CreateDelegate%28System.Type%2CSystem.Object%29> method overload; the second parameter of that method overload is an instance of `Example`, in this case the instance just created, which is bound to the newly created delegate.</span></span> <span data-ttu-id="86b04-452">При каждом вызове делегата динамический метод начинает работать привязанный экземпляр `Example`.</span><span class="sxs-lookup"><span data-stu-id="86b04-452">Whenever that delegate is invoked, the dynamic method acts on the bound instance of `Example`.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="86b04-453">Это пример Мягкие правила для привязки делегата, представленных в [!INCLUDE[dnprdnext](~/includes/dnprdnext-md.md)], а также новые перегрузки <xref:System.Delegate.CreateDelegate%2A?displayProperty=nameWithType> метод.</span><span class="sxs-lookup"><span data-stu-id="86b04-453">This is an example of the relaxed rules for delegate binding introduced in the [!INCLUDE[dnprdnext](~/includes/dnprdnext-md.md)], along with new overloads of the <xref:System.Delegate.CreateDelegate%2A?displayProperty=nameWithType> method.</span></span> <span data-ttu-id="86b04-454">Дополнительные сведения см. в описании класса <xref:System.Delegate>.</span><span class="sxs-lookup"><span data-stu-id="86b04-454">For more information, see the <xref:System.Delegate> class.</span></span>  
  
 <span data-ttu-id="86b04-455">`UseLikeStatic` Вызове делегата, передавая экземпляр `Example` , привязанный к `UseLikeInstance` делегата.</span><span class="sxs-lookup"><span data-stu-id="86b04-455">The `UseLikeStatic` delegate is invoked, passing in the instance of `Example` that is bound to the `UseLikeInstance` delegate.</span></span> <span data-ttu-id="86b04-456">Затем `UseLikeInstance` вызове делегата, чтобы оба Представители действуют на том же экземпляре `Example`.</span><span class="sxs-lookup"><span data-stu-id="86b04-456">Then the `UseLikeInstance` delegate is invoked, so that both delegates act on the same instance of `Example`.</span></span> <span data-ttu-id="86b04-457">Изменения в значениях внутреннего поля отображаются после каждого вызова.</span><span class="sxs-lookup"><span data-stu-id="86b04-457">The changes in the values of the internal field are displayed after each call.</span></span> <span data-ttu-id="86b04-458">Наконец `UseLikeInstance` делегат привязан к экземпляру `DerivedFromxample`, и вызывает делегат повторяются.</span><span class="sxs-lookup"><span data-stu-id="86b04-458">Finally, a `UseLikeInstance` delegate is bound to an instance of `DerivedFromxample`, and the delegate calls are repeated.</span></span>  
  
 [!code-csharp[Reflection.DynamicMethod.ClosedOver#1](~/samples/snippets/csharp/VS_Snippets_CLR/Reflection.DynamicMethod.ClosedOver/cs/source.cs#1)]
 [!code-vb[Reflection.DynamicMethod.ClosedOver#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/Reflection.DynamicMethod.ClosedOver/vb/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="86b04-459">У динамического метода отсутствует тело метода.</span><span class="sxs-lookup"><span data-stu-id="86b04-459">The dynamic method has no method body.</span></span></exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="86b04-460"><paramref name="target" /> не относится к тому же типу, что и первый параметр динамического метода, и не может быть назначен этому типу.</span><span class="sxs-lookup"><span data-stu-id="86b04-460"><paramref name="target" /> is not the same type as the first parameter of the dynamic method, and is not assignable to that type.</span></span>  
  
 <span data-ttu-id="86b04-461">- или -</span><span class="sxs-lookup"><span data-stu-id="86b04-461">-or-</span></span>  
  
 <span data-ttu-id="86b04-462"><paramref name="delegateType" /> имеет неверное число параметров или неправильные типы параметров.</span><span class="sxs-lookup"><span data-stu-id="86b04-462"><paramref name="delegateType" /> has the wrong number of parameters or the wrong parameter types.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="DeclaringType">
      <MemberSignature Language="C#" Value="public override Type DeclaringType { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Type DeclaringType" />
      <MemberSignature Language="DocId" Value="P:System.Reflection.Emit.DynamicMethod.DeclaringType" />
      <MemberSignature Language="VB.NET" Value="Public Overrides ReadOnly Property DeclaringType As Type" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property Type ^ DeclaringType { Type ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Emit.Lightweight</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.3.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Type</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="86b04-463">Возвращает тип, который объявляет метод, всегда являющийся <see langword="null" /> для динамических методов. </span><span class="sxs-lookup"><span data-stu-id="86b04-463">Gets the type that declares the method, which is always <see langword="null" /> for dynamic methods.</span></span></summary>
        <value><span data-ttu-id="86b04-464">Всегда <see langword="null" />.</span><span class="sxs-lookup"><span data-stu-id="86b04-464">Always <see langword="null" />.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="86b04-465">Это свойство всегда возвращает `null` для динамических методов.</span><span class="sxs-lookup"><span data-stu-id="86b04-465">This property always returns `null` for dynamic methods.</span></span> <span data-ttu-id="86b04-466">Даже в том случае, если динамический метод логически связан с типом, не объявлен в типе.</span><span class="sxs-lookup"><span data-stu-id="86b04-466">Even when a dynamic method is logically associated with a type, it is not declared by the type.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="86b04-467">В следующем примере кода объявляющий тип динамического метода.</span><span class="sxs-lookup"><span data-stu-id="86b04-467">The following code example displays the declaring type of a dynamic method.</span></span> <span data-ttu-id="86b04-468">Данный пример кода является частью большего примера, приведенного для <xref:System.Reflection.Emit.DynamicMethod> класса.</span><span class="sxs-lookup"><span data-stu-id="86b04-468">This code example is part of a larger example provided for the <xref:System.Reflection.Emit.DynamicMethod> class.</span></span>  
  
 [!code-cpp[Reflection.DynamicMethod.All#23](~/samples/snippets/cpp/VS_Snippets_CLR/Reflection.DynamicMethod.All/cpp/source.cpp#23)]
 [!code-csharp[Reflection.DynamicMethod.All#23](~/samples/snippets/csharp/VS_Snippets_CLR/Reflection.DynamicMethod.All/CS/source.cs#23)]
 [!code-vb[Reflection.DynamicMethod.All#23](~/samples/snippets/visualbasic/VS_Snippets_CLR/Reflection.DynamicMethod.All/VB/source.vb#23)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="DefineParameter">
      <MemberSignature Language="C#" Value="public System.Reflection.Emit.ParameterBuilder DefineParameter (int position, System.Reflection.ParameterAttributes attributes, string parameterName);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Reflection.Emit.ParameterBuilder DefineParameter(int32 position, valuetype System.Reflection.ParameterAttributes attributes, string parameterName) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.Emit.DynamicMethod.DefineParameter(System.Int32,System.Reflection.ParameterAttributes,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function DefineParameter (position As Integer, attributes As ParameterAttributes, parameterName As String) As ParameterBuilder" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Reflection::Emit::ParameterBuilder ^ DefineParameter(int position, System::Reflection::ParameterAttributes attributes, System::String ^ parameterName);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.ParameterBuilder</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="position" Type="System.Int32" />
        <Parameter Name="attributes" Type="System.Reflection.ParameterAttributes" />
        <Parameter Name="parameterName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="position"><span data-ttu-id="86b04-469">Позиция параметра в списке параметров.</span><span class="sxs-lookup"><span data-stu-id="86b04-469">The position of the parameter in the parameter list.</span></span> <span data-ttu-id="86b04-470">Параметры индексируются, начиная с номера 1 для первого параметра.</span><span class="sxs-lookup"><span data-stu-id="86b04-470">Parameters are indexed beginning with the number 1 for the first parameter.</span></span></param>
        <param name="attributes"><span data-ttu-id="86b04-471">Битовая комбинация значений <see cref="T:System.Reflection.ParameterAttributes" />, определяющая атрибуты параметра.</span><span class="sxs-lookup"><span data-stu-id="86b04-471">A bitwise combination of <see cref="T:System.Reflection.ParameterAttributes" /> values that specifies the attributes of the parameter.</span></span></param>
        <param name="parameterName"><span data-ttu-id="86b04-472">Имя параметра.</span><span class="sxs-lookup"><span data-stu-id="86b04-472">The name of the parameter.</span></span> <span data-ttu-id="86b04-473">Имя может быть строкой нулевой длины.</span><span class="sxs-lookup"><span data-stu-id="86b04-473">The name can be a zero-length string.</span></span></param>
        <summary><span data-ttu-id="86b04-474">Определяет параметр динамического метода.</span><span class="sxs-lookup"><span data-stu-id="86b04-474">Defines a parameter of the dynamic method.</span></span></summary>
        <returns><span data-ttu-id="86b04-475">Всегда возвращает значение <see langword="null" />.</span><span class="sxs-lookup"><span data-stu-id="86b04-475">Always returns <see langword="null" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="86b04-476">Если `position` равно 0, <xref:System.Reflection.Emit.DynamicMethod.DefineParameter%2A> метод относится к возвращаемому значению.</span><span class="sxs-lookup"><span data-stu-id="86b04-476">If `position` is 0, the <xref:System.Reflection.Emit.DynamicMethod.DefineParameter%2A> method refers to the return value.</span></span> <span data-ttu-id="86b04-477">Установка сведений о параметре не оказывает влияния на возвращаемое значение.</span><span class="sxs-lookup"><span data-stu-id="86b04-477">Setting parameter information has no effect on the return value.</span></span>  
  
 <span data-ttu-id="86b04-478">Если динамический метод уже была завершена, путем вызова <xref:System.Reflection.Emit.DynamicMethod.CreateDelegate%2A> или <xref:System.Reflection.Emit.DynamicMethod.Invoke%2A> метода <xref:System.Reflection.Emit.DynamicMethod.DefineParameter%2A> метод не оказывает влияния.</span><span class="sxs-lookup"><span data-stu-id="86b04-478">If the dynamic method has already been completed, by calling the <xref:System.Reflection.Emit.DynamicMethod.CreateDelegate%2A> or <xref:System.Reflection.Emit.DynamicMethod.Invoke%2A> method, the <xref:System.Reflection.Emit.DynamicMethod.DefineParameter%2A> method has no effect.</span></span> <span data-ttu-id="86b04-479">Исключение не возникает.</span><span class="sxs-lookup"><span data-stu-id="86b04-479">No exception is thrown.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="86b04-480">В следующем примере кода показано, как определить сведения о параметрах для динамического метода.</span><span class="sxs-lookup"><span data-stu-id="86b04-480">The following code example shows how to define parameter information for a dynamic method.</span></span> <span data-ttu-id="86b04-481">Данный пример кода является частью большего примера, приведенного для <xref:System.Reflection.Emit.DynamicMethod> класса.</span><span class="sxs-lookup"><span data-stu-id="86b04-481">This code example is part of a larger example provided for the <xref:System.Reflection.Emit.DynamicMethod> class.</span></span>  
  
 [!code-cpp[Reflection.DynamicMethod.All#33](~/samples/snippets/cpp/VS_Snippets_CLR/Reflection.DynamicMethod.All/cpp/source.cpp#33)]
 [!code-csharp[Reflection.DynamicMethod.All#33](~/samples/snippets/csharp/VS_Snippets_CLR/Reflection.DynamicMethod.All/CS/source.cs#33)]
 [!code-vb[Reflection.DynamicMethod.All#33](~/samples/snippets/visualbasic/VS_Snippets_CLR/Reflection.DynamicMethod.All/VB/source.vb#33)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException"><span data-ttu-id="86b04-482">Метод не имеет параметров.</span><span class="sxs-lookup"><span data-stu-id="86b04-482">The method has no parameters.</span></span>  
  
 <span data-ttu-id="86b04-483">- или -</span><span class="sxs-lookup"><span data-stu-id="86b04-483">-or-</span></span>  
  
 <span data-ttu-id="86b04-484">Значение параметра <paramref name="position" /> меньше 0.</span><span class="sxs-lookup"><span data-stu-id="86b04-484"><paramref name="position" /> is less than 0.</span></span>  
  
 <span data-ttu-id="86b04-485">- или -</span><span class="sxs-lookup"><span data-stu-id="86b04-485">-or-</span></span>  
  
 <span data-ttu-id="86b04-486"><paramref name="position" /> превышает число параметров метода.</span><span class="sxs-lookup"><span data-stu-id="86b04-486"><paramref name="position" /> is greater than the number of the method's parameters.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="GetBaseDefinition">
      <MemberSignature Language="C#" Value="public override System.Reflection.MethodInfo GetBaseDefinition ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance class System.Reflection.MethodInfo GetBaseDefinition() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.Emit.DynamicMethod.GetBaseDefinition" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function GetBaseDefinition () As MethodInfo" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override System::Reflection::MethodInfo ^ GetBaseDefinition();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Emit.Lightweight</AssemblyName>
        <AssemblyVersion>4.0.3.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.MethodInfo</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="86b04-487">Возвращает базовую реализацию метода.</span><span class="sxs-lookup"><span data-stu-id="86b04-487">Returns the base implementation for the method.</span></span></summary>
        <returns><span data-ttu-id="86b04-488">Базовая реализация метода.</span><span class="sxs-lookup"><span data-stu-id="86b04-488">The base implementation of the method.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="86b04-489">Этот метод всегда возвращает текущий `DynamicMethod` объекта.</span><span class="sxs-lookup"><span data-stu-id="86b04-489">This method always returns the current `DynamicMethod` object.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="GetCustomAttributes">
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="86b04-490">Возвращает настраиваемые атрибуты, примененные к методу.</span><span class="sxs-lookup"><span data-stu-id="86b04-490">Returns the custom attributes applied to the method.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="GetCustomAttributes">
      <MemberSignature Language="C#" Value="public override object[] GetCustomAttributes (bool inherit);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance object[] GetCustomAttributes(bool inherit) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.Emit.DynamicMethod.GetCustomAttributes(System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function GetCustomAttributes (inherit As Boolean) As Object()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override cli::array &lt;System::Object ^&gt; ^ GetCustomAttributes(bool inherit);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Emit.Lightweight</AssemblyName>
        <AssemblyVersion>4.0.3.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object[]</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="inherit" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="inherit">
          <span data-ttu-id="86b04-491">Значение <see langword="true" /> для поиска цепочки наследования метода с целью поиска пользовательских атрибутов; <see langword="false" /> для проверки только текущего метода.</span><span class="sxs-lookup"><span data-stu-id="86b04-491"><see langword="true" /> to search the method's inheritance chain to find the custom attributes; <see langword="false" /> to check only the current method.</span></span></param>
        <summary><span data-ttu-id="86b04-492">Возвращает все настраиваемые атрибуты, определенные для метода.</span><span class="sxs-lookup"><span data-stu-id="86b04-492">Returns all the custom attributes defined for the method.</span></span></summary>
        <returns><span data-ttu-id="86b04-493">Массив объектов, представляющих все настраиваемые атрибуты метода.</span><span class="sxs-lookup"><span data-stu-id="86b04-493">An array of objects representing all the custom attributes of the method.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="86b04-494">Для динамических методов, указав `true` для `inherit` не делает ничего, так как метод не объявлен в типе.</span><span class="sxs-lookup"><span data-stu-id="86b04-494">For dynamic methods, specifying `true` for `inherit` has no effect, because the method is not declared in a type.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="86b04-495">Пользовательские атрибуты не поддерживаются для динамических методов.</span><span class="sxs-lookup"><span data-stu-id="86b04-495">Custom attributes are not currently supported on dynamic methods.</span></span> <span data-ttu-id="86b04-496">Возвращается только атрибут <xref:System.Runtime.CompilerServices.MethodImplAttribute>; можно получить метод флаги реализации проще с помощью <xref:System.Reflection.Emit.DynamicMethod.GetMethodImplementationFlags%2A> метод.</span><span class="sxs-lookup"><span data-stu-id="86b04-496">The only attribute returned is <xref:System.Runtime.CompilerServices.MethodImplAttribute>; you can get the method implementation flags more easily using the <xref:System.Reflection.Emit.DynamicMethod.GetMethodImplementationFlags%2A> method.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Reflection.Emit.DynamicMethod.IsDefined(System.Type,System.Boolean)" />
      </Docs>
    </Member>
    <Member MemberName="GetCustomAttributes">
      <MemberSignature Language="C#" Value="public override object[] GetCustomAttributes (Type attributeType, bool inherit);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance object[] GetCustomAttributes(class System.Type attributeType, bool inherit) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.Emit.DynamicMethod.GetCustomAttributes(System.Type,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function GetCustomAttributes (attributeType As Type, inherit As Boolean) As Object()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override cli::array &lt;System::Object ^&gt; ^ GetCustomAttributes(Type ^ attributeType, bool inherit);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Emit.Lightweight</AssemblyName>
        <AssemblyVersion>4.0.3.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object[]</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="attributeType" Type="System.Type" />
        <Parameter Name="inherit" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="attributeType"><span data-ttu-id="86b04-497">Тип <see cref="T:System.Type" />, представляющий тип возвращаемого пользовательского атрибута.</span><span class="sxs-lookup"><span data-stu-id="86b04-497">A <see cref="T:System.Type" /> representing the type of custom attribute to return.</span></span></param>
        <param name="inherit">
          <span data-ttu-id="86b04-498">Значение <see langword="true" /> для поиска цепочки наследования метода с целью поиска пользовательских атрибутов; <see langword="false" /> для проверки только текущего метода.</span><span class="sxs-lookup"><span data-stu-id="86b04-498"><see langword="true" /> to search the method's inheritance chain to find the custom attributes; <see langword="false" /> to check only the current method.</span></span></param>
        <summary><span data-ttu-id="86b04-499">Возвращает настраиваемые атрибуты заданного типа, которые были применены к методу.</span><span class="sxs-lookup"><span data-stu-id="86b04-499">Returns the custom attributes of the specified type that have been applied to the method.</span></span></summary>
        <returns><span data-ttu-id="86b04-500">Массив объектов, представляющий атрибуты метода, которые или являются типом <paramref name="attributeType" />, или производными из типа <paramref name="attributeType" />.</span><span class="sxs-lookup"><span data-stu-id="86b04-500">An array of objects representing the attributes of the method that are of type <paramref name="attributeType" /> or derive from type <paramref name="attributeType" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="86b04-501">Для динамических методов, указав `true` для `inherit` не делает ничего, так как метод не объявлен в типе.</span><span class="sxs-lookup"><span data-stu-id="86b04-501">For dynamic methods, specifying `true` for `inherit` has no effect, because the method is not declared in a type.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="86b04-502">Пользовательские атрибуты не поддерживаются для динамических методов.</span><span class="sxs-lookup"><span data-stu-id="86b04-502">Custom attributes are not currently supported on dynamic methods.</span></span> <span data-ttu-id="86b04-503">Возвращается только атрибут <xref:System.Runtime.CompilerServices.MethodImplAttribute>; можно получить метод флаги реализации проще с помощью <xref:System.Reflection.Emit.DynamicMethod.GetMethodImplementationFlags%2A> метод.</span><span class="sxs-lookup"><span data-stu-id="86b04-503">The only attribute returned is <xref:System.Runtime.CompilerServices.MethodImplAttribute>; you can get the method implementation flags more easily using the <xref:System.Reflection.Emit.DynamicMethod.GetMethodImplementationFlags%2A> method.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="86b04-504">Свойство <paramref name="attributeType" /> имеет значение <see langword="null" />.</span><span class="sxs-lookup"><span data-stu-id="86b04-504"><paramref name="attributeType" /> is <see langword="null" />.</span></span></exception>
        <altmember cref="M:System.Reflection.Emit.DynamicMethod.IsDefined(System.Type,System.Boolean)" />
      </Docs>
    </Member>
    <Member MemberName="GetDynamicILInfo">
      <MemberSignature Language="C#" Value="public System.Reflection.Emit.DynamicILInfo GetDynamicILInfo ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Reflection.Emit.DynamicILInfo GetDynamicILInfo() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.Emit.DynamicMethod.GetDynamicILInfo" />
      <MemberSignature Language="VB.NET" Value="Public Function GetDynamicILInfo () As DynamicILInfo" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Reflection::Emit::DynamicILInfo ^ GetDynamicILInfo();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.DynamicILInfo</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="86b04-505">Возвращает объект <see cref="T:System.Reflection.Emit.DynamicILInfo" />, который может быть использован для создания основного текста метода из токенов метаданных, областей и потоков MSIL.</span><span class="sxs-lookup"><span data-stu-id="86b04-505">Returns a <see cref="T:System.Reflection.Emit.DynamicILInfo" /> object that can be used to generate a method body from metadata tokens, scopes, and Microsoft intermediate language (MSIL) streams.</span></span></summary>
        <returns><span data-ttu-id="86b04-506">Объект <see cref="T:System.Reflection.Emit.DynamicILInfo" />, который может быть использован для создания основного текста метода из токенов метаданных, областей и потоков MSIL.</span><span class="sxs-lookup"><span data-stu-id="86b04-506">A <see cref="T:System.Reflection.Emit.DynamicILInfo" /> object that can be used to generate a method body from metadata tokens, scopes, and MSIL streams.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="86b04-507"><xref:System.Reflection.Emit.DynamicILInfo> Класс предназначен для поддержки создания неуправляемого кода.</span><span class="sxs-lookup"><span data-stu-id="86b04-507">The <xref:System.Reflection.Emit.DynamicILInfo> class is provided to support unmanaged code generation.</span></span>  
  
 ]]></format>
        </remarks>
        <permission cref="T:System.Security.Permissions.SecurityPermission"><span data-ttu-id="86b04-508">на выполнение неуправляемого кода.</span><span class="sxs-lookup"><span data-stu-id="86b04-508">to execute unmanaged code.</span></span> <span data-ttu-id="86b04-509">Связанное перечисление: <see cref="F:System.Security.Permissions.SecurityPermissionFlag.UnmanagedCode" />.</span><span class="sxs-lookup"><span data-stu-id="86b04-509">Associated enumeration: <see cref="F:System.Security.Permissions.SecurityPermissionFlag.UnmanagedCode" />.</span></span></permission>
        <altmember cref="T:System.Reflection.Emit.DynamicILInfo" />
      </Docs>
    </Member>
    <MemberGroup MemberName="GetILGenerator">
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Emit.Lightweight</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.3.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="86b04-510">Возвращает генератор MSIL, который может использоваться для создания тела динамического метода.</span><span class="sxs-lookup"><span data-stu-id="86b04-510">Returns an MSIL generator that can be used to emit a body for the dynamic method.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="GetILGenerator">
      <MemberSignature Language="C#" Value="public System.Reflection.Emit.ILGenerator GetILGenerator ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Reflection.Emit.ILGenerator GetILGenerator() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.Emit.DynamicMethod.GetILGenerator" />
      <MemberSignature Language="VB.NET" Value="Public Function GetILGenerator () As ILGenerator" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Reflection::Emit::ILGenerator ^ GetILGenerator();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Emit.Lightweight</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.3.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.ILGenerator</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="86b04-511">Возвращает генератор MSIL для этого метода с размером потока MSIL, по умолчанию равным 64 байтам.</span><span class="sxs-lookup"><span data-stu-id="86b04-511">Returns a Microsoft intermediate language (MSIL) generator for the method with a default MSIL stream size of 64 bytes.</span></span></summary>
        <returns><span data-ttu-id="86b04-512">Объект <see cref="T:System.Reflection.Emit.ILGenerator" /> для метода.</span><span class="sxs-lookup"><span data-stu-id="86b04-512">An <see cref="T:System.Reflection.Emit.ILGenerator" /> object for the method.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="86b04-513">После завершения динамический метод, вызвав <xref:System.Reflection.Emit.DynamicMethod.CreateDelegate%2A> или <xref:System.Reflection.Emit.DynamicMethod.Invoke%2A> метод, любые дополнительные попытки добавления MSIL учитывается.</span><span class="sxs-lookup"><span data-stu-id="86b04-513">After a dynamic method has been completed, by calling the <xref:System.Reflection.Emit.DynamicMethod.CreateDelegate%2A> or <xref:System.Reflection.Emit.DynamicMethod.Invoke%2A> method, any further attempt to add MSIL is ignored.</span></span> <span data-ttu-id="86b04-514">Исключение не возникает.</span><span class="sxs-lookup"><span data-stu-id="86b04-514">No exception is thrown.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="86b04-515">Существуют ограничения на непроверяемый код в динамических методов, даже в некоторых сценариях полного доверия.</span><span class="sxs-lookup"><span data-stu-id="86b04-515">There are restrictions on unverifiable code in dynamic methods, even in some full-trust scenarios.</span></span> <span data-ttu-id="86b04-516">См. подраздел "Проверка" в разделе примечаний для <xref:System.Reflection.Emit.DynamicMethod>.</span><span class="sxs-lookup"><span data-stu-id="86b04-516">See the "Verification" section in Remarks for <xref:System.Reflection.Emit.DynamicMethod>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="86b04-517">В следующем примере кода создается динамический метод, который принимает два параметра.</span><span class="sxs-lookup"><span data-stu-id="86b04-517">The following code example creates a dynamic method that takes two parameters.</span></span> <span data-ttu-id="86b04-518">В этом примере выпускается основной текст простой функции, который выводит первый параметр в консоль, а в примере используется второй параметр в качестве возвращаемого значения метода.</span><span class="sxs-lookup"><span data-stu-id="86b04-518">The example emits a simple function body that prints the first parameter to the console, and the example uses the second parameter as the return value of the method.</span></span> <span data-ttu-id="86b04-519">В примере завершает метод путем создания делегата, вызывает делегат с различными параметрами и наконец вызывает динамический метод с помощью <xref:System.Reflection.Emit.DynamicMethod.Invoke%2A> метод.</span><span class="sxs-lookup"><span data-stu-id="86b04-519">The example completes the method by creating a delegate, invokes the delegate with different parameters, and finally invokes the dynamic method using the <xref:System.Reflection.Emit.DynamicMethod.Invoke%2A> method.</span></span>  
  
 [!code-cpp[Reflection.DynamicMethod.ctor1#1](~/samples/snippets/cpp/VS_Snippets_CLR/Reflection.DynamicMethod.ctor1/cpp/source.cpp#1)]
 [!code-csharp[Reflection.DynamicMethod.ctor1#1](~/samples/snippets/csharp/VS_Snippets_CLR/Reflection.DynamicMethod.ctor1/CS/source.cs#1)]
 [!code-vb[Reflection.DynamicMethod.ctor1#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/Reflection.DynamicMethod.ctor1/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetILGenerator">
      <MemberSignature Language="C#" Value="public System.Reflection.Emit.ILGenerator GetILGenerator (int streamSize);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Reflection.Emit.ILGenerator GetILGenerator(int32 streamSize) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.Emit.DynamicMethod.GetILGenerator(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Function GetILGenerator (streamSize As Integer) As ILGenerator" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Reflection::Emit::ILGenerator ^ GetILGenerator(int streamSize);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Emit.Lightweight</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.3.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.ILGenerator</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="streamSize" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="streamSize"><span data-ttu-id="86b04-520">Размер потока MSIL (в байтах).</span><span class="sxs-lookup"><span data-stu-id="86b04-520">The size of the MSIL stream, in bytes.</span></span></param>
        <summary><span data-ttu-id="86b04-521">Возвращает генератор промежуточного языка Майкрософт (MSIL) для этого метода с указанным размером потока MSIL.</span><span class="sxs-lookup"><span data-stu-id="86b04-521">Returns a Microsoft intermediate language (MSIL) generator for the method with the specified MSIL stream size.</span></span></summary>
        <returns><span data-ttu-id="86b04-522">Объект <see cref="T:System.Reflection.Emit.ILGenerator" /> для метода с указанным размером потока MSIL.</span><span class="sxs-lookup"><span data-stu-id="86b04-522">An <see cref="T:System.Reflection.Emit.ILGenerator" /> object for the method, with the specified MSIL stream size.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="86b04-523">После завершения динамический метод, вызвав <xref:System.Reflection.Emit.DynamicMethod.CreateDelegate%2A> или <xref:System.Reflection.Emit.DynamicMethod.Invoke%2A> метод, любые дополнительные попытки добавления MSIL учитывается.</span><span class="sxs-lookup"><span data-stu-id="86b04-523">After a dynamic method has been completed, by calling the <xref:System.Reflection.Emit.DynamicMethod.CreateDelegate%2A> or <xref:System.Reflection.Emit.DynamicMethod.Invoke%2A> method, any further attempt to add MSIL is ignored.</span></span> <span data-ttu-id="86b04-524">Исключение не возникает.</span><span class="sxs-lookup"><span data-stu-id="86b04-524">No exception is thrown.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="86b04-525">Существуют ограничения на непроверяемый код в динамических методов, даже в некоторых сценариях полного доверия.</span><span class="sxs-lookup"><span data-stu-id="86b04-525">There are restrictions on unverifiable code in dynamic methods, even in some full-trust scenarios.</span></span> <span data-ttu-id="86b04-526">См. подраздел "Проверка" в разделе примечаний для <xref:System.Reflection.Emit.DynamicMethod>.</span><span class="sxs-lookup"><span data-stu-id="86b04-526">See the "Verification" section in Remarks for <xref:System.Reflection.Emit.DynamicMethod>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="86b04-527">В следующем примере кода демонстрируется перегрузка метода.</span><span class="sxs-lookup"><span data-stu-id="86b04-527">The following code example demonstrates this method overload.</span></span> <span data-ttu-id="86b04-528">Данный пример кода является частью большего примера, приведенного для <xref:System.Reflection.Emit.DynamicMethod> класса.</span><span class="sxs-lookup"><span data-stu-id="86b04-528">This code example is part of a larger example provided for the <xref:System.Reflection.Emit.DynamicMethod> class.</span></span>  
  
 [!code-cpp[Reflection.DynamicMethod.All#2](~/samples/snippets/cpp/VS_Snippets_CLR/Reflection.DynamicMethod.All/cpp/source.cpp#2)]
 [!code-csharp[Reflection.DynamicMethod.All#2](~/samples/snippets/csharp/VS_Snippets_CLR/Reflection.DynamicMethod.All/CS/source.cs#2)]
 [!code-vb[Reflection.DynamicMethod.All#2](~/samples/snippets/visualbasic/VS_Snippets_CLR/Reflection.DynamicMethod.All/VB/source.vb#2)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetMethodImplementationFlags">
      <MemberSignature Language="C#" Value="public override System.Reflection.MethodImplAttributes GetMethodImplementationFlags ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance valuetype System.Reflection.MethodImplAttributes GetMethodImplementationFlags() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.Emit.DynamicMethod.GetMethodImplementationFlags" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function GetMethodImplementationFlags () As MethodImplAttributes" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override System::Reflection::MethodImplAttributes GetMethodImplementationFlags();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Emit.Lightweight</AssemblyName>
        <AssemblyVersion>4.0.3.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.MethodImplAttributes</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="86b04-529">Возвращает флаги реализации для метода.</span><span class="sxs-lookup"><span data-stu-id="86b04-529">Returns the implementation flags for the method.</span></span></summary>
        <returns><span data-ttu-id="86b04-530">Битовая комбинация значений <see cref="T:System.Reflection.MethodImplAttributes" />, представляющих флаги реализации этого метода.</span><span class="sxs-lookup"><span data-stu-id="86b04-530">A bitwise combination of <see cref="T:System.Reflection.MethodImplAttributes" /> values representing the implementation flags for the method.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="86b04-531">В настоящее время атрибутов реализации метода для динамических методов, всегда <xref:System.Reflection.MethodImplAttributes.IL> и <xref:System.Reflection.MethodImplAttributes.NoInlining>.</span><span class="sxs-lookup"><span data-stu-id="86b04-531">Currently, method implementation attributes for dynamic methods are always <xref:System.Reflection.MethodImplAttributes.IL> and <xref:System.Reflection.MethodImplAttributes.NoInlining>.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetParameters">
      <MemberSignature Language="C#" Value="public override System.Reflection.ParameterInfo[] GetParameters ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance class System.Reflection.ParameterInfo[] GetParameters() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.Emit.DynamicMethod.GetParameters" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function GetParameters () As ParameterInfo()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override cli::array &lt;System::Reflection::ParameterInfo ^&gt; ^ GetParameters();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Emit.Lightweight</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.3.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.ParameterInfo[]</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="86b04-532">Возвращает параметры динамического метода.</span><span class="sxs-lookup"><span data-stu-id="86b04-532">Returns the parameters of the dynamic method.</span></span></summary>
        <returns><span data-ttu-id="86b04-533">Массив объектов <see cref="T:System.Reflection.ParameterInfo" />, которые представляют параметры динамического метода.</span><span class="sxs-lookup"><span data-stu-id="86b04-533">An array of <see cref="T:System.Reflection.ParameterInfo" /> objects that represent the parameters of the dynamic method.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="86b04-534"><xref:System.Reflection.ParameterInfo> Объекты, возвращаемые этим методом, только в информационных целях.</span><span class="sxs-lookup"><span data-stu-id="86b04-534">The <xref:System.Reflection.ParameterInfo> objects returned by this method are for information only.</span></span> <span data-ttu-id="86b04-535">Используйте <xref:System.Reflection.Emit.DynamicMethod.DefineParameter%2A> метод, чтобы задать или изменить характеристики параметров.</span><span class="sxs-lookup"><span data-stu-id="86b04-535">Use the <xref:System.Reflection.Emit.DynamicMethod.DefineParameter%2A> method to set or change the characteristics of the parameters.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="86b04-536">В следующем примере кода отображаются параметры динамического метода.</span><span class="sxs-lookup"><span data-stu-id="86b04-536">The following code example displays the parameters of a dynamic method.</span></span> <span data-ttu-id="86b04-537">Данный пример кода является частью большего примера, приведенного для <xref:System.Reflection.Emit.DynamicMethod> класса.</span><span class="sxs-lookup"><span data-stu-id="86b04-537">This code example is part of a larger example provided for the <xref:System.Reflection.Emit.DynamicMethod> class.</span></span>  
  
 [!code-cpp[Reflection.DynamicMethod.All#34](~/samples/snippets/cpp/VS_Snippets_CLR/Reflection.DynamicMethod.All/cpp/source.cpp#34)]
 [!code-csharp[Reflection.DynamicMethod.All#34](~/samples/snippets/csharp/VS_Snippets_CLR/Reflection.DynamicMethod.All/CS/source.cs#34)]
 [!code-vb[Reflection.DynamicMethod.All#34](~/samples/snippets/visualbasic/VS_Snippets_CLR/Reflection.DynamicMethod.All/VB/source.vb#34)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Reflection.Emit.DynamicMethod.DefineParameter(System.Int32,System.Reflection.ParameterAttributes,System.String)" />
      </Docs>
    </Member>
    <Member MemberName="InitLocals">
      <MemberSignature Language="C#" Value="public bool InitLocals { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool InitLocals" />
      <MemberSignature Language="DocId" Value="P:System.Reflection.Emit.DynamicMethod.InitLocals" />
      <MemberSignature Language="VB.NET" Value="Public Property InitLocals As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool InitLocals { bool get(); void set(bool value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Emit.Lightweight</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.3.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="86b04-538">Возвращает или задает значение, указывающее, инициализированы ли локальные переменные в методе нулевым значением.</span><span class="sxs-lookup"><span data-stu-id="86b04-538">Gets or sets a value indicating whether the local variables in the method are zero-initialized.</span></span></summary>
        <value>
          <span data-ttu-id="86b04-539">Значение <see langword="true" />, если локальные переменные в методе инициализированы нулевым значением; в противном случае — значение <see langword="false" />.</span><span class="sxs-lookup"><span data-stu-id="86b04-539"><see langword="true" /> if the local variables in the method are zero-initialized; otherwise, <see langword="false" />.</span></span> <span data-ttu-id="86b04-540">Значение по умолчанию: <see langword="true" />.</span><span class="sxs-lookup"><span data-stu-id="86b04-540">The default is <see langword="true" />.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="86b04-541">Если это свойство имеет значение `true`, порожденный промежуточный язык Майкрософт (MSIL) включает инициализацию локальных переменных.</span><span class="sxs-lookup"><span data-stu-id="86b04-541">If this property is set to `true`, the emitted Microsoft intermediate language (MSIL) includes initialization of local variables.</span></span> <span data-ttu-id="86b04-542">Если задано значение `false`, локальные переменные не инициализируются и созданный код не может быть проверен.</span><span class="sxs-lookup"><span data-stu-id="86b04-542">If it is set to `false`, local variables are not initialized and the generated code is unverifiable.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="86b04-543">В следующем примере кода отображается <xref:System.Reflection.Emit.DynamicMethod.InitLocals%2A> свойства динамического метода.</span><span class="sxs-lookup"><span data-stu-id="86b04-543">The following code example displays the <xref:System.Reflection.Emit.DynamicMethod.InitLocals%2A> property of a dynamic method.</span></span> <span data-ttu-id="86b04-544">Данный пример кода является частью большего примера, приведенного для <xref:System.Reflection.Emit.DynamicMethod> класса.</span><span class="sxs-lookup"><span data-stu-id="86b04-544">This code example is part of a larger example provided for the <xref:System.Reflection.Emit.DynamicMethod> class.</span></span>  
  
 [!code-cpp[Reflection.DynamicMethod.All#24](~/samples/snippets/cpp/VS_Snippets_CLR/Reflection.DynamicMethod.All/cpp/source.cpp#24)]
 [!code-csharp[Reflection.DynamicMethod.All#24](~/samples/snippets/csharp/VS_Snippets_CLR/Reflection.DynamicMethod.All/CS/source.cs#24)]
 [!code-vb[Reflection.DynamicMethod.All#24](~/samples/snippets/visualbasic/VS_Snippets_CLR/Reflection.DynamicMethod.All/VB/source.vb#24)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Invoke">
      <MemberSignature Language="C#" Value="public override object Invoke (object obj, System.Reflection.BindingFlags invokeAttr, System.Reflection.Binder binder, object[] parameters, System.Globalization.CultureInfo culture);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance object Invoke(object obj, valuetype System.Reflection.BindingFlags invokeAttr, class System.Reflection.Binder binder, object[] parameters, class System.Globalization.CultureInfo culture) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.Emit.DynamicMethod.Invoke(System.Object,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object[],System.Globalization.CultureInfo)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override System::Object ^ Invoke(System::Object ^ obj, System::Reflection::BindingFlags invokeAttr, System::Reflection::Binder ^ binder, cli::array &lt;System::Object ^&gt; ^ parameters, System::Globalization::CultureInfo ^ culture);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Emit.Lightweight</AssemblyName>
        <AssemblyVersion>4.0.3.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="obj" Type="System.Object" />
        <Parameter Name="invokeAttr" Type="System.Reflection.BindingFlags" />
        <Parameter Name="binder" Type="System.Reflection.Binder" />
        <Parameter Name="parameters" Type="System.Object[]" />
        <Parameter Name="culture" Type="System.Globalization.CultureInfo" />
      </Parameters>
      <Docs>
        <param name="obj"><span data-ttu-id="86b04-545">Эти параметры игнорируются для динамических методов, поскольку они являются статическими.</span><span class="sxs-lookup"><span data-stu-id="86b04-545">This parameter is ignored for dynamic methods, because they are static.</span></span> <span data-ttu-id="86b04-546">Задайте имя <see langword="null" />.</span><span class="sxs-lookup"><span data-stu-id="86b04-546">Specify <see langword="null" />.</span></span></param>
        <param name="invokeAttr"><span data-ttu-id="86b04-547">Побитовое сочетание значений <see cref="T:System.Reflection.BindingFlags" />.</span><span class="sxs-lookup"><span data-stu-id="86b04-547">A bitwise combination of <see cref="T:System.Reflection.BindingFlags" /> values.</span></span></param>
        <param name="binder"><span data-ttu-id="86b04-548">Объект <see cref="T:System.Reflection.Binder" />, который допускает связывание, приведение типов аргументов, вызов элементов и извлечение объектов <see cref="T:System.Reflection.MemberInfo" /> путем отражения.</span><span class="sxs-lookup"><span data-stu-id="86b04-548">A <see cref="T:System.Reflection.Binder" /> object that enables the binding, coercion of argument types, invocation of members, and retrieval of <see cref="T:System.Reflection.MemberInfo" /> objects through reflection.</span></span> <span data-ttu-id="86b04-549">Если указан <c>модуль привязки</c> <see langword="null" />, используется модуль привязки по умолчанию.</span><span class="sxs-lookup"><span data-stu-id="86b04-549">If <c>binder</c> is <see langword="null" />, the default binder is used.</span></span> <span data-ttu-id="86b04-550">Дополнительные сведения см. в разделе <see cref="T:System.Reflection.Binder" />.</span><span class="sxs-lookup"><span data-stu-id="86b04-550">For more details, see <see cref="T:System.Reflection.Binder" />.</span></span></param>
        <param name="parameters"><span data-ttu-id="86b04-551">Список аргументов.</span><span class="sxs-lookup"><span data-stu-id="86b04-551">An argument list.</span></span> <span data-ttu-id="86b04-552">Это массив аргументов с тем же числом, порядком и типом, что и параметры вызываемого метода.</span><span class="sxs-lookup"><span data-stu-id="86b04-552">This is an array of arguments with the same number, order, and type as the parameters of the method to be invoked.</span></span> <span data-ttu-id="86b04-553">Если параметров нет, значением этого параметра должно быть <see langword="null" />.</span><span class="sxs-lookup"><span data-stu-id="86b04-553">If there are no parameters this parameter should be <see langword="null" />.</span></span></param>
        <param name="culture"><span data-ttu-id="86b04-554">Экземпляр объекта <see cref="T:System.Globalization.CultureInfo" />, используемого для управления приведением типов.</span><span class="sxs-lookup"><span data-stu-id="86b04-554">An instance of <see cref="T:System.Globalization.CultureInfo" /> used to govern the coercion of types.</span></span> <span data-ttu-id="86b04-555">Если значение этого объекта — <see langword="null" />, для текущего потока используется <see cref="T:System.Globalization.CultureInfo" />.</span><span class="sxs-lookup"><span data-stu-id="86b04-555">If this is <see langword="null" />, the <see cref="T:System.Globalization.CultureInfo" /> for the current thread is used.</span></span> <span data-ttu-id="86b04-556">Например, эти сведения необходимы для правильного преобразования строки <see cref="T:System.String" />, которая представляет 1000, в значение <see cref="T:System.Double" />, так как 1000 в различных языках и региональных параметрах представляется по-разному.</span><span class="sxs-lookup"><span data-stu-id="86b04-556">For example, this information is needed to correctly convert a <see cref="T:System.String" /> that represents 1000 to a <see cref="T:System.Double" /> value, because 1000 is represented differently by different cultures.</span></span></param>
        <summary><span data-ttu-id="86b04-557">Вызывает динамический метод, используя указанные параметры и учитывая ограничения заданного модуля привязки и указанные сведения о языке и региональных параметрах.</span><span class="sxs-lookup"><span data-stu-id="86b04-557">Invokes the dynamic method using the specified parameters, under the constraints of the specified binder, with the specified culture information.</span></span></summary>
        <returns><span data-ttu-id="86b04-558">Объект <see cref="T:System.Object" />, содержащий возвращенное значение вызванного метода.</span><span class="sxs-lookup"><span data-stu-id="86b04-558">A <see cref="T:System.Object" /> containing the return value of the invoked method.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="86b04-559">Помимо перечисленных исключений вызывающий код следует подготовить к перехватывать исключения, вызываемые динамического метода.</span><span class="sxs-lookup"><span data-stu-id="86b04-559">In addition to the listed exceptions, the calling code should be prepared to catch any exceptions thrown by the dynamic method.</span></span>  
  
 <span data-ttu-id="86b04-560">Выполнение динамического метода с делегатом, созданные <xref:System.Reflection.Emit.DynamicMethod.CreateDelegate%2A> метод является более эффективным, чем его с выполнением <xref:System.Reflection.Emit.DynamicMethod.Invoke%2A> метод.</span><span class="sxs-lookup"><span data-stu-id="86b04-560">Executing a dynamic method with a delegate created by the <xref:System.Reflection.Emit.DynamicMethod.CreateDelegate%2A> method is more efficient than executing it with the <xref:System.Reflection.Emit.DynamicMethod.Invoke%2A> method.</span></span>  
  
 <span data-ttu-id="86b04-561">Вызов <xref:System.Reflection.Emit.DynamicMethod.Invoke%2A> метода или <xref:System.Reflection.Emit.DynamicMethod.CreateDelegate%2A> метод завершает динамический метод.</span><span class="sxs-lookup"><span data-stu-id="86b04-561">Calling the <xref:System.Reflection.Emit.DynamicMethod.Invoke%2A> method or the <xref:System.Reflection.Emit.DynamicMethod.CreateDelegate%2A> method completes the dynamic method.</span></span> <span data-ttu-id="86b04-562">Любые дополнительные попытки изменить динамический метод, такие как изменение определений параметров или выпуска дополнительные промежуточного языка Майкрософт (MSIL), учитывается; исключение не возникает.</span><span class="sxs-lookup"><span data-stu-id="86b04-562">Any further attempt to alter the dynamic method, such as modifying parameter definitions or emitting more Microsoft intermediate language (MSIL), is ignored; no exception is thrown.</span></span>  
  
 <span data-ttu-id="86b04-563">Все динамические методы являются статическими, поэтому `obj` всегда игнорируется.</span><span class="sxs-lookup"><span data-stu-id="86b04-563">All dynamic methods are static, so the `obj` parameter is always ignored.</span></span> <span data-ttu-id="86b04-564">Чтобы рассматривать динамический метод, как если бы это был метод экземпляра, используйте <xref:System.Reflection.Emit.DynamicMethod.CreateDelegate%28System.Type%2CSystem.Object%29> перегрузку, принимающую экземпляр объекта.</span><span class="sxs-lookup"><span data-stu-id="86b04-564">To treat a dynamic method as if it were an instance method, use the <xref:System.Reflection.Emit.DynamicMethod.CreateDelegate%28System.Type%2CSystem.Object%29> overload that takes an object instance.</span></span>  
  
 <span data-ttu-id="86b04-565">Если динамический метод не имеет параметров, значение `parameters` должно быть `null`.</span><span class="sxs-lookup"><span data-stu-id="86b04-565">If the dynamic method has no parameters, the value of `parameters` should be `null`.</span></span> <span data-ttu-id="86b04-566">В противном случае число, тип и порядок элементов в массиве параметров должны быть идентичны количество, тип и порядок параметров динамического метода.</span><span class="sxs-lookup"><span data-stu-id="86b04-566">Otherwise the number, type, and order of elements in the parameters array should be identical to the number, type, and order of parameters of the dynamic method.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="86b04-567">Эта перегрузка метода вызывается <xref:System.Reflection.MethodBase.Invoke%28System.Object%2CSystem.Object%5B%5D%29> унаследован перегрузке метода <xref:System.Reflection.MethodBase> класса, поэтому выше примечания относятся к обе перегрузки.</span><span class="sxs-lookup"><span data-stu-id="86b04-567">This method overload is called by the <xref:System.Reflection.MethodBase.Invoke%28System.Object%2CSystem.Object%5B%5D%29> method overload inherited from the <xref:System.Reflection.MethodBase> class, so the preceding remarks apply to both overloads.</span></span>  
  
 <span data-ttu-id="86b04-568">Этот метод не требует разрешений напрямую, однако вызов динамического метода может привести к требований к безопасности, в зависимости от метода.</span><span class="sxs-lookup"><span data-stu-id="86b04-568">This method does not demand permissions directly, but invoking the dynamic method can result in security demands, depending on the method.</span></span> <span data-ttu-id="86b04-569">Например, нет требования предъявляются анонимно размещенные динамические методы, созданных с помощью `restrictedSkipVisibility` равным `false`.</span><span class="sxs-lookup"><span data-stu-id="86b04-569">For example, no demands are made for anonymously hosted dynamic methods that are created with the `restrictedSkipVisibility` parameter set to `false`.</span></span> <span data-ttu-id="86b04-570">С другой стороны, при создании метода с `restrictedSkipVisibility` значение `true` , он имеет доступ к скрытым членом целевой сборки, метод приведет к запросу для разрешения целевой сборки плюс <xref:System.Security.Permissions.ReflectionPermission> с <xref:System.Security.Permissions.ReflectionPermissionFlag.MemberAccess?displayProperty=nameWithType> флаг.</span><span class="sxs-lookup"><span data-stu-id="86b04-570">On the other hand, if you create a method with `restrictedSkipVisibility` set to `true` so it can access a hidden member of a target assembly, the method will cause a demand for the permissions of the target assembly plus <xref:System.Security.Permissions.ReflectionPermission> with the <xref:System.Security.Permissions.ReflectionPermissionFlag.MemberAccess?displayProperty=nameWithType> flag.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="86b04-571">До появления [!INCLUDE[net_v20sp1_long](~/includes/net-v20sp1-long-md.md)], этот метод требуется <xref:System.Security.Permissions.ReflectionPermission> с <xref:System.Security.Permissions.ReflectionPermissionFlag.MemberAccess> флаг.</span><span class="sxs-lookup"><span data-stu-id="86b04-571">Prior to the [!INCLUDE[net_v20sp1_long](~/includes/net-v20sp1-long-md.md)], this method required <xref:System.Security.Permissions.ReflectionPermission> with the <xref:System.Security.Permissions.ReflectionPermissionFlag.MemberAccess> flag.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="86b04-572">В следующем примере кода вызывается динамический метод с точной привязкой, английский (США) язык и региональные параметры.</span><span class="sxs-lookup"><span data-stu-id="86b04-572">The following code example invokes a dynamic method with exact binding, using the US-English culture.</span></span> <span data-ttu-id="86b04-573">Данный пример кода является частью большего примера, приведенного для <xref:System.Reflection.Emit.DynamicMethod> класса.</span><span class="sxs-lookup"><span data-stu-id="86b04-573">This code example is part of a larger example provided for the <xref:System.Reflection.Emit.DynamicMethod> class.</span></span>  
  
 [!code-cpp[Reflection.DynamicMethod.All#4](~/samples/snippets/cpp/VS_Snippets_CLR/Reflection.DynamicMethod.All/cpp/source.cpp#4)]
 [!code-csharp[Reflection.DynamicMethod.All#4](~/samples/snippets/csharp/VS_Snippets_CLR/Reflection.DynamicMethod.All/CS/source.cs#4)]
 [!code-vb[Reflection.DynamicMethod.All#4](~/samples/snippets/visualbasic/VS_Snippets_CLR/Reflection.DynamicMethod.All/VB/source.vb#4)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.NotSupportedException"><span data-ttu-id="86b04-574">Соглашение о вызове <see cref="F:System.Reflection.CallingConventions.VarArgs" /> не поддерживается.</span><span class="sxs-lookup"><span data-stu-id="86b04-574">The <see cref="F:System.Reflection.CallingConventions.VarArgs" /> calling convention is not supported.</span></span></exception>
        <exception cref="T:System.Reflection.TargetParameterCountException"><span data-ttu-id="86b04-575">Количество элементов в <paramref name="parameters" /> не соответствует количеству параметров в динамическом методе.</span><span class="sxs-lookup"><span data-stu-id="86b04-575">The number of elements in <paramref name="parameters" /> does not match the number of parameters in the dynamic method.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="86b04-576">Тип <paramref name="parameters" /> одного или нескольких элементов не сопоставляется с типом соответствующего параметра динамического метода.</span><span class="sxs-lookup"><span data-stu-id="86b04-576">The type of one or more elements of <paramref name="parameters" /> does not match the type of the corresponding parameter of the dynamic method.</span></span></exception>
        <exception cref="T:System.Reflection.TargetInvocationException"><span data-ttu-id="86b04-577">Динамический метод связан с модулем, не размещен анонимно и был сконструирован с параметром <paramref name="skipVisibility" />, равным <see langword="false" />, однако динамический метод получает доступ к элементам, которые не являются <see langword="public" /> или <see langword="internal" /> (<see langword="Friend" /> в Visual Basic).</span><span class="sxs-lookup"><span data-stu-id="86b04-577">The dynamic method is associated with a module, is not anonymously hosted, and was constructed with <paramref name="skipVisibility" /> set to <see langword="false" />, but the dynamic method accesses members that are not <see langword="public" /> or <see langword="internal" /> (<see langword="Friend" /> in Visual Basic).</span></span>  
  
 <span data-ttu-id="86b04-578">- или -</span><span class="sxs-lookup"><span data-stu-id="86b04-578">-or-</span></span>  
  
 <span data-ttu-id="86b04-579">Динамический метод размещен анонимно и был сконструирован с параметром <paramref name="skipVisibility" />, равным <see langword="false" />, однако он получает доступ к элементам, которые не являются <see langword="public" />.</span><span class="sxs-lookup"><span data-stu-id="86b04-579">The dynamic method is anonymously hosted and was constructed with <paramref name="skipVisibility" /> set to <see langword="false" />, but it accesses members that are not <see langword="public" />.</span></span>  
  
 <span data-ttu-id="86b04-580">- или -</span><span class="sxs-lookup"><span data-stu-id="86b04-580">-or-</span></span>  
  
 <span data-ttu-id="86b04-581">Динамический метод содержит непроверяемый код.</span><span class="sxs-lookup"><span data-stu-id="86b04-581">The dynamic method contains unverifiable code.</span></span> <span data-ttu-id="86b04-582">См. подраздел "Проверка" в разделе примечаний для <see cref="T:System.Reflection.Emit.DynamicMethod" />.</span><span class="sxs-lookup"><span data-stu-id="86b04-582">See the "Verification" section in Remarks for <see cref="T:System.Reflection.Emit.DynamicMethod" />.</span></span></exception>
        <altmember cref="M:System.Reflection.Emit.DynamicMethod.CreateDelegate(System.Type)" />
      </Docs>
    </Member>
    <Member MemberName="IsDefined">
      <MemberSignature Language="C#" Value="public override bool IsDefined (Type attributeType, bool inherit);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance bool IsDefined(class System.Type attributeType, bool inherit) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.Emit.DynamicMethod.IsDefined(System.Type,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function IsDefined (attributeType As Type, inherit As Boolean) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override bool IsDefined(Type ^ attributeType, bool inherit);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Emit.Lightweight</AssemblyName>
        <AssemblyVersion>4.0.3.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="attributeType" Type="System.Type" />
        <Parameter Name="inherit" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="attributeType"><span data-ttu-id="86b04-583">Тип <see cref="T:System.Type" />, представляющий искомый тип атрибута.</span><span class="sxs-lookup"><span data-stu-id="86b04-583">A <see cref="T:System.Type" /> representing the type of custom attribute to search for.</span></span></param>
        <param name="inherit">
          <span data-ttu-id="86b04-584">Значение <see langword="true" /> для поиска цепочки наследования метода с целью поиска пользовательских атрибутов; <see langword="false" /> для проверки только текущего метода.</span><span class="sxs-lookup"><span data-stu-id="86b04-584"><see langword="true" /> to search the method's inheritance chain to find the custom attributes; <see langword="false" /> to check only the current method.</span></span></param>
        <summary><span data-ttu-id="86b04-585">Указывает, определен ли заданный тип настраиваемых атрибутов.</span><span class="sxs-lookup"><span data-stu-id="86b04-585">Indicates whether the specified custom attribute type is defined.</span></span></summary>
        <returns>
          <span data-ttu-id="86b04-586"><see langword="true" />, если указанный пользовательский атрибут определен; в противном случае — <see langword="false" />.</span><span class="sxs-lookup"><span data-stu-id="86b04-586"><see langword="true" /> if the specified custom attribute type is defined; otherwise, <see langword="false" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="86b04-587">Для динамических методов, указав `true` для `inherit` не делает ничего.</span><span class="sxs-lookup"><span data-stu-id="86b04-587">For dynamic methods, specifying `true` for `inherit` has no effect.</span></span> <span data-ttu-id="86b04-588">Динамические методы не имеют цепочки наследования.</span><span class="sxs-lookup"><span data-stu-id="86b04-588">Dynamic methods have no inheritance chain.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="86b04-589">Пользовательские атрибуты не поддерживаются для динамических методов.</span><span class="sxs-lookup"><span data-stu-id="86b04-589">Custom attributes are not currently supported on dynamic methods.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Reflection.Emit.DynamicMethod.GetCustomAttributes(System.Type,System.Boolean)" />
      </Docs>
    </Member>
    <Member MemberName="IsSecurityCritical">
      <MemberSignature Language="C#" Value="public override bool IsSecurityCritical { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsSecurityCritical" />
      <MemberSignature Language="DocId" Value="P:System.Reflection.Emit.DynamicMethod.IsSecurityCritical" />
      <MemberSignature Language="VB.NET" Value="Public Overrides ReadOnly Property IsSecurityCritical As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property bool IsSecurityCritical { bool get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>get: System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="86b04-590">Получает значение, которое указывает, является ли текущий динамический метод критическим с точки зрения безопасности или надежным с точки зрения безопасности и, следовательно, может ли он выполнять важные операции.</span><span class="sxs-lookup"><span data-stu-id="86b04-590">Gets a value that indicates whether the current dynamic method is security-critical or security-safe-critical, and therefore can perform critical operations.</span></span></summary>
        <value>
          <span data-ttu-id="86b04-591">Значение <see langword="true" />, если текущий динамический метод является критически важным для безопасности или защищенным критически важным для безопасности; значение <see langword="false" />, если он является прозрачным.</span><span class="sxs-lookup"><span data-stu-id="86b04-591"><see langword="true" /> if the current dynamic method is security-critical or security-safe-critical; <see langword="false" /> if it is transparent.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="86b04-592"><xref:System.Reflection.Emit.DynamicMethod.IsSecurityCritical%2A>, <xref:System.Reflection.Emit.DynamicMethod.IsSecuritySafeCritical%2A>, И <xref:System.Reflection.Emit.DynamicMethod.IsSecurityTransparent%2A> свойства отчетов уровень прозрачности динамический метод, что определяется общеязыковой среды выполнения (CLR).</span><span class="sxs-lookup"><span data-stu-id="86b04-592">The <xref:System.Reflection.Emit.DynamicMethod.IsSecurityCritical%2A>, <xref:System.Reflection.Emit.DynamicMethod.IsSecuritySafeCritical%2A>, and <xref:System.Reflection.Emit.DynamicMethod.IsSecurityTransparent%2A> properties report the transparency level of the dynamic method as determined by the common language runtime (CLR).</span></span> <span data-ttu-id="86b04-593">В следующей таблице показаны сочетания этих свойств.</span><span class="sxs-lookup"><span data-stu-id="86b04-593">The combinations of these properties are shown in the following table:</span></span>  
  
|<span data-ttu-id="86b04-594">Уровень безопасности</span><span class="sxs-lookup"><span data-stu-id="86b04-594">Security level</span></span>|<span data-ttu-id="86b04-595">IsSecurityCritical</span><span class="sxs-lookup"><span data-stu-id="86b04-595">IsSecurityCritical</span></span>|<span data-ttu-id="86b04-596">IsSecuritySafeCritical</span><span class="sxs-lookup"><span data-stu-id="86b04-596">IsSecuritySafeCritical</span></span>|<span data-ttu-id="86b04-597">IsSecurityTransparent</span><span class="sxs-lookup"><span data-stu-id="86b04-597">IsSecurityTransparent</span></span>|  
|--------------------|------------------------|----------------------------|---------------------------|  
|<span data-ttu-id="86b04-598">Critical</span><span class="sxs-lookup"><span data-stu-id="86b04-598">Critical</span></span>|`true`|`false`|`false`|  
|<span data-ttu-id="86b04-599">Надежным с точки зрения</span><span class="sxs-lookup"><span data-stu-id="86b04-599">Safe critical</span></span>|`true`|`true`|`false`|  
|<span data-ttu-id="86b04-600">Прозрачный</span><span class="sxs-lookup"><span data-stu-id="86b04-600">Transparent</span></span>|`false`|`false`|`true`|  
  
 <span data-ttu-id="86b04-601">Использовать эти свойства гораздо проще, чем просматривать заметки о безопасности для сборки и ее типов, проверять текущий уровень доверия и пытаться дублировать правила среды выполнения.</span><span class="sxs-lookup"><span data-stu-id="86b04-601">Using these properties is much simpler than examining the security annotations of an assembly and its types, checking the current trust level, and attempting to duplicate the runtime's rules.</span></span>  
  
 <span data-ttu-id="86b04-602">Прозрачность динамического метода зависит от модуля, связанного с ним.</span><span class="sxs-lookup"><span data-stu-id="86b04-602">The transparency of a dynamic method depends on the module it is associated with.</span></span> <span data-ttu-id="86b04-603">Если динамический метод связан с типом вместо модуля, его прозрачность зависит от модуля, содержащего тип.</span><span class="sxs-lookup"><span data-stu-id="86b04-603">If the dynamic method is associated with a type rather than a module, its transparency depends on the module that contains the type.</span></span> <span data-ttu-id="86b04-604">Динамические методы не имеют заметки безопасности, поэтому им назначаются прозрачность по умолчанию для соответствующего модуля.</span><span class="sxs-lookup"><span data-stu-id="86b04-604">Dynamic methods do not have security annotations, so they are assigned the default transparency for the associated module.</span></span>  
  
-   <span data-ttu-id="86b04-605">Анонимно размещенные динамические методы всегда являются прозрачными, поскольку системные модуля, содержащего их является прозрачным.</span><span class="sxs-lookup"><span data-stu-id="86b04-605">Anonymously hosted dynamic methods are always transparent, because the system-provided module that contains them is transparent.</span></span>  
  
-   <span data-ttu-id="86b04-606">В следующей таблице описывается прозрачность динамического метода, который связан с надежной сборкой (то есть сборки строгим именем, установленной в глобальном кэше сборок).</span><span class="sxs-lookup"><span data-stu-id="86b04-606">The transparency of a dynamic method that is associated with a trusted assembly (that is, a strong-named assembly that is installed in the global assembly cache) is described in the following table.</span></span>  
  
    |<span data-ttu-id="86b04-607">Заметка сборки</span><span class="sxs-lookup"><span data-stu-id="86b04-607">Assembly annotation</span></span>|<span data-ttu-id="86b04-608">Прозрачность уровня 1</span><span class="sxs-lookup"><span data-stu-id="86b04-608">Level 1 transparency</span></span>|<span data-ttu-id="86b04-609">Прозрачность уровня 2</span><span class="sxs-lookup"><span data-stu-id="86b04-609">Level 2 transparency</span></span>|  
    |-------------------------|--------------------------|--------------------------|  
    |<span data-ttu-id="86b04-610">Полностью прозрачный</span><span class="sxs-lookup"><span data-stu-id="86b04-610">Fully transparent</span></span>|<span data-ttu-id="86b04-611">Прозрачный</span><span class="sxs-lookup"><span data-stu-id="86b04-611">Transparent</span></span>|<span data-ttu-id="86b04-612">Прозрачный</span><span class="sxs-lookup"><span data-stu-id="86b04-612">Transparent</span></span>|  
    |<span data-ttu-id="86b04-613">Полностью критический</span><span class="sxs-lookup"><span data-stu-id="86b04-613">Fully critical</span></span>|<span data-ttu-id="86b04-614">Critical</span><span class="sxs-lookup"><span data-stu-id="86b04-614">Critical</span></span>|<span data-ttu-id="86b04-615">Critical</span><span class="sxs-lookup"><span data-stu-id="86b04-615">Critical</span></span>|  
    |<span data-ttu-id="86b04-616">Смешанная прозрачность</span><span class="sxs-lookup"><span data-stu-id="86b04-616">Mixed transparency</span></span>|<span data-ttu-id="86b04-617">Прозрачный</span><span class="sxs-lookup"><span data-stu-id="86b04-617">Transparent</span></span>|<span data-ttu-id="86b04-618">Прозрачный</span><span class="sxs-lookup"><span data-stu-id="86b04-618">Transparent</span></span>|  
    |<span data-ttu-id="86b04-619">Зависит от безопасности</span><span class="sxs-lookup"><span data-stu-id="86b04-619">Security-agnostic</span></span>|<span data-ttu-id="86b04-620">Критический в плане безопасности</span><span class="sxs-lookup"><span data-stu-id="86b04-620">Safe-critical</span></span>|<span data-ttu-id="86b04-621">Critical</span><span class="sxs-lookup"><span data-stu-id="86b04-621">Critical</span></span>|  
  
     <span data-ttu-id="86b04-622">Например если динамический метод связан с типом, который находится в библиотеке mscorlib.dll, имеющей уровень 2 смешанной прозрачности, динамический метод является прозрачным и нельзя выполнить критический код.</span><span class="sxs-lookup"><span data-stu-id="86b04-622">For example, if you associate a dynamic method with a type that is in mscorlib.dll, which has level 2 mixed transparency, the dynamic method is transparent and cannot execute critical code.</span></span> <span data-ttu-id="86b04-623">Сведения об уровнях прозрачности см. в разделе [прозрачный с точки зрения безопасности код, уровень 1](~/docs/framework/misc/security-transparent-code-level-1.md) и [прозрачный с точки зрения безопасности код, уровень 2](~/docs/framework/misc/security-transparent-code-level-2.md).</span><span class="sxs-lookup"><span data-stu-id="86b04-623">For information about transparency levels, see [Security-Transparent Code, Level 1](~/docs/framework/misc/security-transparent-code-level-1.md) and [Security-Transparent Code, Level 2](~/docs/framework/misc/security-transparent-code-level-2.md).</span></span>  
  
    > [!NOTE]
    >  <span data-ttu-id="86b04-624">Сопоставление динамического метода с модулем в сборке доверенного уровня 1, которая не зависит от безопасности, например System.dll, не разрешает повышение уровня доверия.</span><span class="sxs-lookup"><span data-stu-id="86b04-624">Associating a dynamic method with a module in a trusted level 1 assembly that is security-agnostic, such as System.dll, does not permit elevation of trust.</span></span> <span data-ttu-id="86b04-625">Если набор прав код, который вызывает динамический метод не включает набор прав System.dll (то есть полное доверие), <xref:System.Security.SecurityException> создается при вызове динамического метода.</span><span class="sxs-lookup"><span data-stu-id="86b04-625">If the grant set of the code that calls the dynamic method does not include the grant set of System.dll (that is, full trust), <xref:System.Security.SecurityException> is thrown when the dynamic method is called.</span></span>  
  
-   <span data-ttu-id="86b04-626">Прозрачность динамического метода, который связан с частично доверенная сборка зависит от того, как сборка загружается.</span><span class="sxs-lookup"><span data-stu-id="86b04-626">The transparency of a dynamic method that is associated with a partially trusted assembly depends on how the assembly is loaded.</span></span> <span data-ttu-id="86b04-627">Если сборка загружается с частичным доверием (например, в изолированном домене приложения), среда выполнения игнорирует примечания безопасности сборки.</span><span class="sxs-lookup"><span data-stu-id="86b04-627">If the assembly is loaded with partial trust (for example, into a sandboxed application domain), the runtime ignores the security annotations of the assembly.</span></span> <span data-ttu-id="86b04-628">Сборка и все ее типы и члены, включая динамические методы, считается прозрачным.</span><span class="sxs-lookup"><span data-stu-id="86b04-628">The assembly and all its types and members, including dynamic methods, are treated as transparent.</span></span> <span data-ttu-id="86b04-629">Среда выполнения уделяет внимание заметки безопасности только в том случае, если частичным доверием сборка загружена с полным доверием (например, в домене приложения по умолчанию для настольного приложения).</span><span class="sxs-lookup"><span data-stu-id="86b04-629">The runtime pays attention to security annotations only if the partial-trust assembly is loaded with full trust (for example, into the default application domain of a desktop application).</span></span> <span data-ttu-id="86b04-630">В этом случае среда выполнения назначает динамическому методу прозрачность по умолчанию для методов, согласно примечаниям сборки.</span><span class="sxs-lookup"><span data-stu-id="86b04-630">In that case, the runtime assigns the dynamic method the default transparency for methods according to the assembly's annotations.</span></span>  
  
 <span data-ttu-id="86b04-631">Дополнительные сведения об отражении выпуска и прозрачности см [вопросы безопасности в порождение отражения](~/docs/framework/reflection-and-codedom/security-issues-in-reflection-emit.md).</span><span class="sxs-lookup"><span data-stu-id="86b04-631">For more information about reflection emit and transparency, see [Security Issues in Reflection Emit](~/docs/framework/reflection-and-codedom/security-issues-in-reflection-emit.md).</span></span> <span data-ttu-id="86b04-632">Сведения о прозрачности см. в разделе [изменения системы безопасности](~/docs/framework/security/security-changes.md).</span><span class="sxs-lookup"><span data-stu-id="86b04-632">For information about transparency, see [Security Changes](~/docs/framework/security/security-changes.md).</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="86b04-633">В этом динамическом методе отсутствует тело метода.</span><span class="sxs-lookup"><span data-stu-id="86b04-633">The dynamic method doesn't have a method body.</span></span></exception>
        <altmember cref="P:System.Reflection.Emit.DynamicMethod.IsSecuritySafeCritical" />
        <altmember cref="P:System.Reflection.Emit.DynamicMethod.IsSecurityTransparent" />
      </Docs>
    </Member>
    <Member MemberName="IsSecuritySafeCritical">
      <MemberSignature Language="C#" Value="public override bool IsSecuritySafeCritical { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsSecuritySafeCritical" />
      <MemberSignature Language="DocId" Value="P:System.Reflection.Emit.DynamicMethod.IsSecuritySafeCritical" />
      <MemberSignature Language="VB.NET" Value="Public Overrides ReadOnly Property IsSecuritySafeCritical As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property bool IsSecuritySafeCritical { bool get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>get: System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="86b04-634">Возвращает значение, которое указывает, является ли текущий динамический метод надежным с точки зрения безопасности на текущем уровне доверия и, следовательно, может ли он выполнять критически важные операции и предоставлять доступ прозрачному коду.</span><span class="sxs-lookup"><span data-stu-id="86b04-634">Gets a value that indicates whether the current dynamic method is security-safe-critical at the current trust level; that is, whether it can perform critical operations and can be accessed by transparent code.</span></span></summary>
        <value>
          <span data-ttu-id="86b04-635">Значение <see langword="true" />, если текущий динамический метод является защищенным критически важным для безопасности на текущем уровне доверия; значение <see langword="false" />, если он является критически важным для безопасности или прозрачным.</span><span class="sxs-lookup"><span data-stu-id="86b04-635"><see langword="true" /> if the dynamic method is security-safe-critical at the current trust level; <see langword="false" /> if it is security-critical or transparent.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="86b04-636"><xref:System.Reflection.Emit.DynamicMethod.IsSecurityCritical%2A>, <xref:System.Reflection.Emit.DynamicMethod.IsSecuritySafeCritical%2A>, И <xref:System.Reflection.Emit.DynamicMethod.IsSecurityTransparent%2A> свойства отчетов уровень прозрачности динамический метод, что определяется общеязыковой среды выполнения (CLR).</span><span class="sxs-lookup"><span data-stu-id="86b04-636">The <xref:System.Reflection.Emit.DynamicMethod.IsSecurityCritical%2A>, <xref:System.Reflection.Emit.DynamicMethod.IsSecuritySafeCritical%2A>, and <xref:System.Reflection.Emit.DynamicMethod.IsSecurityTransparent%2A> properties report the transparency level of the dynamic method as determined by the common language runtime (CLR).</span></span> <span data-ttu-id="86b04-637">В следующей таблице показаны сочетания этих свойств.</span><span class="sxs-lookup"><span data-stu-id="86b04-637">The combinations of these properties are shown in the following table:</span></span>  
  
|<span data-ttu-id="86b04-638">Уровень безопасности</span><span class="sxs-lookup"><span data-stu-id="86b04-638">Security level</span></span>|<span data-ttu-id="86b04-639">IsSecurityCritical</span><span class="sxs-lookup"><span data-stu-id="86b04-639">IsSecurityCritical</span></span>|<span data-ttu-id="86b04-640">IsSecuritySafeCritical</span><span class="sxs-lookup"><span data-stu-id="86b04-640">IsSecuritySafeCritical</span></span>|<span data-ttu-id="86b04-641">IsSecurityTransparent</span><span class="sxs-lookup"><span data-stu-id="86b04-641">IsSecurityTransparent</span></span>|  
|--------------------|------------------------|----------------------------|---------------------------|  
|<span data-ttu-id="86b04-642">Critical</span><span class="sxs-lookup"><span data-stu-id="86b04-642">Critical</span></span>|`true`|`false`|`false`|  
|<span data-ttu-id="86b04-643">Надежным с точки зрения</span><span class="sxs-lookup"><span data-stu-id="86b04-643">Safe critical</span></span>|`true`|`true`|`false`|  
|<span data-ttu-id="86b04-644">Прозрачный</span><span class="sxs-lookup"><span data-stu-id="86b04-644">Transparent</span></span>|`false`|`false`|`true`|  
  
 <span data-ttu-id="86b04-645">Использовать эти свойства гораздо проще, чем просматривать заметки о безопасности для сборки и ее типов, проверять текущий уровень доверия и пытаться дублировать правила среды выполнения.</span><span class="sxs-lookup"><span data-stu-id="86b04-645">Using these properties is much simpler than examining the security annotations of an assembly and its types, checking the current trust level, and attempting to duplicate the runtime's rules.</span></span>  
  
 <span data-ttu-id="86b04-646">Прозрачность динамического метода зависит от модуля, связанного с ним.</span><span class="sxs-lookup"><span data-stu-id="86b04-646">The transparency of a dynamic method depends on the module it is associated with.</span></span> <span data-ttu-id="86b04-647">Если динамический метод связан с типом вместо модуля, его прозрачность зависит от модуля, содержащего тип.</span><span class="sxs-lookup"><span data-stu-id="86b04-647">If the dynamic method is associated with a type rather than a module, its transparency depends on the module that contains the type.</span></span> <span data-ttu-id="86b04-648">Динамические методы не имеют заметки безопасности, поэтому им назначаются прозрачность по умолчанию для соответствующего модуля.</span><span class="sxs-lookup"><span data-stu-id="86b04-648">Dynamic methods do not have security annotations, so they are assigned the default transparency for the associated module.</span></span>  
  
-   <span data-ttu-id="86b04-649">Анонимно размещенные динамические методы всегда являются прозрачными, поскольку системные модуля, содержащего их является прозрачным.</span><span class="sxs-lookup"><span data-stu-id="86b04-649">Anonymously hosted dynamic methods are always transparent, because the system-provided module that contains them is transparent.</span></span>  
  
-   <span data-ttu-id="86b04-650">В следующей таблице описывается прозрачность динамического метода, который связан с надежной сборкой (то есть сборки строгим именем, установленной в глобальном кэше сборок).</span><span class="sxs-lookup"><span data-stu-id="86b04-650">The transparency of a dynamic method that is associated with a trusted assembly (that is, a strong-named assembly that is installed in the global assembly cache) is described in the following table.</span></span>  
  
    |<span data-ttu-id="86b04-651">Заметка сборки</span><span class="sxs-lookup"><span data-stu-id="86b04-651">Assembly annotation</span></span>|<span data-ttu-id="86b04-652">Прозрачность уровня 1</span><span class="sxs-lookup"><span data-stu-id="86b04-652">Level 1 transparency</span></span>|<span data-ttu-id="86b04-653">Прозрачность уровня 2</span><span class="sxs-lookup"><span data-stu-id="86b04-653">Level 2 transparency</span></span>|  
    |-------------------------|--------------------------|--------------------------|  
    |<span data-ttu-id="86b04-654">Полностью прозрачный</span><span class="sxs-lookup"><span data-stu-id="86b04-654">Fully transparent</span></span>|<span data-ttu-id="86b04-655">Прозрачный</span><span class="sxs-lookup"><span data-stu-id="86b04-655">Transparent</span></span>|<span data-ttu-id="86b04-656">Прозрачный</span><span class="sxs-lookup"><span data-stu-id="86b04-656">Transparent</span></span>|  
    |<span data-ttu-id="86b04-657">Полностью критический</span><span class="sxs-lookup"><span data-stu-id="86b04-657">Fully critical</span></span>|<span data-ttu-id="86b04-658">Critical</span><span class="sxs-lookup"><span data-stu-id="86b04-658">Critical</span></span>|<span data-ttu-id="86b04-659">Critical</span><span class="sxs-lookup"><span data-stu-id="86b04-659">Critical</span></span>|  
    |<span data-ttu-id="86b04-660">Смешанная прозрачность</span><span class="sxs-lookup"><span data-stu-id="86b04-660">Mixed transparency</span></span>|<span data-ttu-id="86b04-661">Прозрачный</span><span class="sxs-lookup"><span data-stu-id="86b04-661">Transparent</span></span>|<span data-ttu-id="86b04-662">Прозрачный</span><span class="sxs-lookup"><span data-stu-id="86b04-662">Transparent</span></span>|  
    |<span data-ttu-id="86b04-663">Зависит от безопасности</span><span class="sxs-lookup"><span data-stu-id="86b04-663">Security-agnostic</span></span>|<span data-ttu-id="86b04-664">Критический в плане безопасности</span><span class="sxs-lookup"><span data-stu-id="86b04-664">Safe-critical</span></span>|<span data-ttu-id="86b04-665">Critical</span><span class="sxs-lookup"><span data-stu-id="86b04-665">Critical</span></span>|  
  
     <span data-ttu-id="86b04-666">Например если динамический метод связан с типом, который находится в библиотеке mscorlib.dll, имеющей уровень 2 смешанной прозрачности, динамический метод является прозрачным и нельзя выполнить критический код.</span><span class="sxs-lookup"><span data-stu-id="86b04-666">For example, if you associate a dynamic method with a type that is in mscorlib.dll, which has level 2 mixed transparency, the dynamic method is transparent and cannot execute critical code.</span></span> <span data-ttu-id="86b04-667">Сведения об уровнях прозрачности см. в разделе [прозрачный с точки зрения безопасности код, уровень 1](~/docs/framework/misc/security-transparent-code-level-1.md) и [прозрачный с точки зрения безопасности код, уровень 2](~/docs/framework/misc/security-transparent-code-level-2.md).</span><span class="sxs-lookup"><span data-stu-id="86b04-667">For information about transparency levels, see [Security-Transparent Code, Level 1](~/docs/framework/misc/security-transparent-code-level-1.md) and [Security-Transparent Code, Level 2](~/docs/framework/misc/security-transparent-code-level-2.md).</span></span>  
  
    > [!NOTE]
    >  <span data-ttu-id="86b04-668">Сопоставление динамического метода с модулем в сборке доверенного уровня 1, которая не зависит от безопасности, например System.dll, не разрешает повышение уровня доверия.</span><span class="sxs-lookup"><span data-stu-id="86b04-668">Associating a dynamic method with a module in a trusted level 1 assembly that is security-agnostic, such as System.dll, does not permit elevation of trust.</span></span> <span data-ttu-id="86b04-669">Если набор прав код, который вызывает динамический метод не включает набор прав System.dll (то есть полное доверие), <xref:System.Security.SecurityException> создается при вызове динамического метода.</span><span class="sxs-lookup"><span data-stu-id="86b04-669">If the grant set of the code that calls the dynamic method does not include the grant set of System.dll (that is, full trust), <xref:System.Security.SecurityException> is thrown when the dynamic method is called.</span></span>  
  
-   <span data-ttu-id="86b04-670">Прозрачность динамического метода, который связан с частично доверенная сборка зависит от того, как сборка загружается.</span><span class="sxs-lookup"><span data-stu-id="86b04-670">The transparency of a dynamic method that is associated with a partially trusted assembly depends on how the assembly is loaded.</span></span> <span data-ttu-id="86b04-671">Если сборка загружается с частичным доверием (например, в изолированном домене приложения), среда выполнения игнорирует примечания безопасности сборки.</span><span class="sxs-lookup"><span data-stu-id="86b04-671">If the assembly is loaded with partial trust (for example, into a sandboxed application domain), the runtime ignores the security annotations of the assembly.</span></span> <span data-ttu-id="86b04-672">Сборка и все ее типы и члены, включая динамические методы, считается прозрачным.</span><span class="sxs-lookup"><span data-stu-id="86b04-672">The assembly and all its types and members, including dynamic methods, are treated as transparent.</span></span> <span data-ttu-id="86b04-673">Среда выполнения уделяет внимание заметки безопасности только в том случае, если частичным доверием сборка загружена с полным доверием (например, в домене приложения по умолчанию для настольного приложения).</span><span class="sxs-lookup"><span data-stu-id="86b04-673">The runtime pays attention to security annotations only if the partial-trust assembly is loaded with full trust (for example, into the default application domain of a desktop application).</span></span> <span data-ttu-id="86b04-674">В этом случае среда выполнения назначает динамическому методу прозрачность по умолчанию для методов, согласно примечаниям сборки.</span><span class="sxs-lookup"><span data-stu-id="86b04-674">In that case, the runtime assigns the dynamic method the default transparency for methods according to the assembly's annotations.</span></span>  
  
 <span data-ttu-id="86b04-675">Дополнительные сведения об отражении выпуска и прозрачности см [вопросы безопасности в порождение отражения](~/docs/framework/reflection-and-codedom/security-issues-in-reflection-emit.md).</span><span class="sxs-lookup"><span data-stu-id="86b04-675">For more information about reflection emit and transparency, see [Security Issues in Reflection Emit](~/docs/framework/reflection-and-codedom/security-issues-in-reflection-emit.md).</span></span> <span data-ttu-id="86b04-676">Сведения о прозрачности см. в разделе [изменения системы безопасности](~/docs/framework/security/security-changes.md).</span><span class="sxs-lookup"><span data-stu-id="86b04-676">For information about transparency, see [Security Changes](~/docs/framework/security/security-changes.md).</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="86b04-677">В этом динамическом методе отсутствует тело метода.</span><span class="sxs-lookup"><span data-stu-id="86b04-677">The dynamic method doesn't have a method body.</span></span></exception>
        <altmember cref="P:System.Reflection.Emit.DynamicMethod.IsSecurityCritical" />
        <altmember cref="P:System.Reflection.Emit.DynamicMethod.IsSecurityTransparent" />
      </Docs>
    </Member>
    <Member MemberName="IsSecurityTransparent">
      <MemberSignature Language="C#" Value="public override bool IsSecurityTransparent { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsSecurityTransparent" />
      <MemberSignature Language="DocId" Value="P:System.Reflection.Emit.DynamicMethod.IsSecurityTransparent" />
      <MemberSignature Language="VB.NET" Value="Public Overrides ReadOnly Property IsSecurityTransparent As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property bool IsSecurityTransparent { bool get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>get: System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="86b04-678">Получает значение, которое указывает, является ли текущий динамический метод прозрачным на текущем уровне доверия и, следовательно, не может выполнять критические операции.</span><span class="sxs-lookup"><span data-stu-id="86b04-678">Gets a value that indicates whether the current dynamic method is transparent at the current trust level, and therefore cannot perform critical operations.</span></span></summary>
        <value>
          <span data-ttu-id="86b04-679">Значение <see langword="true" />, если текущий динамический метод является прозрачным на текущем уровне доверия; в противном случае — значение <see langword="false" />.</span><span class="sxs-lookup"><span data-stu-id="86b04-679"><see langword="true" /> if the dynamic method is security-transparent at the current trust level; otherwise, <see langword="false" />.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="86b04-680"><xref:System.Reflection.Emit.DynamicMethod.IsSecurityCritical%2A>, <xref:System.Reflection.Emit.DynamicMethod.IsSecuritySafeCritical%2A>, И <xref:System.Reflection.Emit.DynamicMethod.IsSecurityTransparent%2A> свойства отчетов уровень прозрачности динамический метод, что определяется общеязыковой среды выполнения (CLR).</span><span class="sxs-lookup"><span data-stu-id="86b04-680">The <xref:System.Reflection.Emit.DynamicMethod.IsSecurityCritical%2A>, <xref:System.Reflection.Emit.DynamicMethod.IsSecuritySafeCritical%2A>, and <xref:System.Reflection.Emit.DynamicMethod.IsSecurityTransparent%2A> properties report the transparency level of the dynamic method as determined by the common language runtime (CLR).</span></span> <span data-ttu-id="86b04-681">В следующей таблице показаны сочетания этих свойств.</span><span class="sxs-lookup"><span data-stu-id="86b04-681">The combinations of these properties are shown in the following table:</span></span>  
  
|<span data-ttu-id="86b04-682">Уровень безопасности</span><span class="sxs-lookup"><span data-stu-id="86b04-682">Security level</span></span>|<span data-ttu-id="86b04-683">IsSecurityCritical</span><span class="sxs-lookup"><span data-stu-id="86b04-683">IsSecurityCritical</span></span>|<span data-ttu-id="86b04-684">IsSecuritySafeCritical</span><span class="sxs-lookup"><span data-stu-id="86b04-684">IsSecuritySafeCritical</span></span>|<span data-ttu-id="86b04-685">IsSecurityTransparent</span><span class="sxs-lookup"><span data-stu-id="86b04-685">IsSecurityTransparent</span></span>|  
|--------------------|------------------------|----------------------------|---------------------------|  
|<span data-ttu-id="86b04-686">Critical</span><span class="sxs-lookup"><span data-stu-id="86b04-686">Critical</span></span>|`true`|`false`|`false`|  
|<span data-ttu-id="86b04-687">Надежным с точки зрения</span><span class="sxs-lookup"><span data-stu-id="86b04-687">Safe critical</span></span>|`true`|`true`|`false`|  
|<span data-ttu-id="86b04-688">Прозрачный</span><span class="sxs-lookup"><span data-stu-id="86b04-688">Transparent</span></span>|`false`|`false`|`true`|  
  
 <span data-ttu-id="86b04-689">Использовать эти свойства гораздо проще, чем просматривать заметки о безопасности для сборки и ее типов, проверять текущий уровень доверия и пытаться дублировать правила среды выполнения.</span><span class="sxs-lookup"><span data-stu-id="86b04-689">Using these properties is much simpler than examining the security annotations of an assembly and its types, checking the current trust level, and attempting to duplicate the runtime's rules.</span></span>  
  
 <span data-ttu-id="86b04-690">Прозрачность динамического метода зависит от модуля, связанного с ним.</span><span class="sxs-lookup"><span data-stu-id="86b04-690">The transparency of a dynamic method depends on the module it is associated with.</span></span> <span data-ttu-id="86b04-691">Если динамический метод связан с типом вместо модуля, его прозрачность зависит от модуля, содержащего тип.</span><span class="sxs-lookup"><span data-stu-id="86b04-691">If the dynamic method is associated with a type rather than a module, its transparency depends on the module that contains the type.</span></span> <span data-ttu-id="86b04-692">Динамические методы не имеют заметки безопасности, поэтому им назначаются прозрачность по умолчанию для соответствующего модуля.</span><span class="sxs-lookup"><span data-stu-id="86b04-692">Dynamic methods do not have security annotations, so they are assigned the default transparency for the associated module.</span></span>  
  
-   <span data-ttu-id="86b04-693">Анонимно размещенные динамические методы всегда являются прозрачными, поскольку системные модуля, содержащего их является прозрачным.</span><span class="sxs-lookup"><span data-stu-id="86b04-693">Anonymously hosted dynamic methods are always transparent, because the system-provided module that contains them is transparent.</span></span>  
  
-   <span data-ttu-id="86b04-694">В следующей таблице описывается прозрачность динамического метода, который связан с надежной сборкой (то есть сборки строгим именем, установленной в глобальном кэше сборок).</span><span class="sxs-lookup"><span data-stu-id="86b04-694">The transparency of a dynamic method that is associated with a trusted assembly (that is, a strong-named assembly that is installed in the global assembly cache) is described in the following table.</span></span>  
  
    |<span data-ttu-id="86b04-695">Заметка сборки</span><span class="sxs-lookup"><span data-stu-id="86b04-695">Assembly annotation</span></span>|<span data-ttu-id="86b04-696">Прозрачность уровня 1</span><span class="sxs-lookup"><span data-stu-id="86b04-696">Level 1 transparency</span></span>|<span data-ttu-id="86b04-697">Прозрачность уровня 2</span><span class="sxs-lookup"><span data-stu-id="86b04-697">Level 2 transparency</span></span>|  
    |-------------------------|--------------------------|--------------------------|  
    |<span data-ttu-id="86b04-698">Полностью прозрачный</span><span class="sxs-lookup"><span data-stu-id="86b04-698">Fully transparent</span></span>|<span data-ttu-id="86b04-699">Прозрачный</span><span class="sxs-lookup"><span data-stu-id="86b04-699">Transparent</span></span>|<span data-ttu-id="86b04-700">Прозрачный</span><span class="sxs-lookup"><span data-stu-id="86b04-700">Transparent</span></span>|  
    |<span data-ttu-id="86b04-701">Полностью критический</span><span class="sxs-lookup"><span data-stu-id="86b04-701">Fully critical</span></span>|<span data-ttu-id="86b04-702">Critical</span><span class="sxs-lookup"><span data-stu-id="86b04-702">Critical</span></span>|<span data-ttu-id="86b04-703">Critical</span><span class="sxs-lookup"><span data-stu-id="86b04-703">Critical</span></span>|  
    |<span data-ttu-id="86b04-704">Смешанная прозрачность</span><span class="sxs-lookup"><span data-stu-id="86b04-704">Mixed transparency</span></span>|<span data-ttu-id="86b04-705">Прозрачный</span><span class="sxs-lookup"><span data-stu-id="86b04-705">Transparent</span></span>|<span data-ttu-id="86b04-706">Прозрачный</span><span class="sxs-lookup"><span data-stu-id="86b04-706">Transparent</span></span>|  
    |<span data-ttu-id="86b04-707">Зависит от безопасности</span><span class="sxs-lookup"><span data-stu-id="86b04-707">Security-agnostic</span></span>|<span data-ttu-id="86b04-708">Критический в плане безопасности</span><span class="sxs-lookup"><span data-stu-id="86b04-708">Safe-critical</span></span>|<span data-ttu-id="86b04-709">Critical</span><span class="sxs-lookup"><span data-stu-id="86b04-709">Critical</span></span>|  
  
     <span data-ttu-id="86b04-710">Например если динамический метод связан с типом, который находится в библиотеке mscorlib.dll, имеющей уровень 2 смешанной прозрачности, динамический метод является прозрачным и нельзя выполнить критический код.</span><span class="sxs-lookup"><span data-stu-id="86b04-710">For example, if you associate a dynamic method with a type that is in mscorlib.dll, which has level 2 mixed transparency, the dynamic method is transparent and cannot execute critical code.</span></span> <span data-ttu-id="86b04-711">Сведения об уровнях прозрачности см. в разделе [прозрачный с точки зрения безопасности код, уровень 1](~/docs/framework/misc/security-transparent-code-level-1.md) и [прозрачный с точки зрения безопасности код, уровень 2](~/docs/framework/misc/security-transparent-code-level-2.md).</span><span class="sxs-lookup"><span data-stu-id="86b04-711">For information about transparency levels, see [Security-Transparent Code, Level 1](~/docs/framework/misc/security-transparent-code-level-1.md) and [Security-Transparent Code, Level 2](~/docs/framework/misc/security-transparent-code-level-2.md).</span></span>  
  
    > [!NOTE]
    >  <span data-ttu-id="86b04-712">Сопоставление динамического метода с модулем в сборке доверенного уровня 1, которая не зависит от безопасности, например System.dll, не разрешает повышение уровня доверия.</span><span class="sxs-lookup"><span data-stu-id="86b04-712">Associating a dynamic method with a module in a trusted level 1 assembly that is security-agnostic, such as System.dll, does not permit elevation of trust.</span></span> <span data-ttu-id="86b04-713">Если набор прав код, который вызывает динамический метод не включает набор прав System.dll (то есть полное доверие), <xref:System.Security.SecurityException> создается при вызове динамического метода.</span><span class="sxs-lookup"><span data-stu-id="86b04-713">If the grant set of the code that calls the dynamic method does not include the grant set of System.dll (that is, full trust), <xref:System.Security.SecurityException> is thrown when the dynamic method is called.</span></span>  
  
-   <span data-ttu-id="86b04-714">Прозрачность динамического метода, который связан с частично доверенная сборка зависит от того, как сборка загружается.</span><span class="sxs-lookup"><span data-stu-id="86b04-714">The transparency of a dynamic method that is associated with a partially trusted assembly depends on how the assembly is loaded.</span></span> <span data-ttu-id="86b04-715">Если сборка загружается с частичным доверием (например, в изолированном домене приложения), среда выполнения игнорирует примечания безопасности сборки.</span><span class="sxs-lookup"><span data-stu-id="86b04-715">If the assembly is loaded with partial trust (for example, into a sandboxed application domain), the runtime ignores the security annotations of the assembly.</span></span> <span data-ttu-id="86b04-716">Сборка и все ее типы и члены, включая динамические методы, считается прозрачным.</span><span class="sxs-lookup"><span data-stu-id="86b04-716">The assembly and all its types and members, including dynamic methods, are treated as transparent.</span></span> <span data-ttu-id="86b04-717">Среда выполнения уделяет внимание заметки безопасности только в том случае, если частичным доверием сборка загружена с полным доверием (например, в домене приложения по умолчанию для настольного приложения).</span><span class="sxs-lookup"><span data-stu-id="86b04-717">The runtime pays attention to security annotations only if the partial-trust assembly is loaded with full trust (for example, into the default application domain of a desktop application).</span></span> <span data-ttu-id="86b04-718">В этом случае среда выполнения назначает динамическому методу прозрачность по умолчанию для методов, согласно примечаниям сборки.</span><span class="sxs-lookup"><span data-stu-id="86b04-718">In that case, the runtime assigns the dynamic method the default transparency for methods according to the assembly's annotations.</span></span>  
  
 <span data-ttu-id="86b04-719">Дополнительные сведения об отражении выпуска и прозрачности см [вопросы безопасности в порождение отражения](~/docs/framework/reflection-and-codedom/security-issues-in-reflection-emit.md).</span><span class="sxs-lookup"><span data-stu-id="86b04-719">For more information about reflection emit and transparency, see [Security Issues in Reflection Emit](~/docs/framework/reflection-and-codedom/security-issues-in-reflection-emit.md).</span></span> <span data-ttu-id="86b04-720">Сведения о прозрачности см. в разделе [изменения системы безопасности](~/docs/framework/security/security-changes.md).</span><span class="sxs-lookup"><span data-stu-id="86b04-720">For information about transparency, see [Security Changes](~/docs/framework/security/security-changes.md).</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="86b04-721">В этом динамическом методе отсутствует тело метода.</span><span class="sxs-lookup"><span data-stu-id="86b04-721">The dynamic method doesn't have a method body.</span></span></exception>
        <altmember cref="P:System.Reflection.Emit.DynamicMethod.IsSecurityCritical" />
        <altmember cref="P:System.Reflection.Emit.DynamicMethod.IsSecuritySafeCritical" />
      </Docs>
    </Member>
    <Member MemberName="MethodHandle">
      <MemberSignature Language="C#" Value="public override RuntimeMethodHandle MethodHandle { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.RuntimeMethodHandle MethodHandle" />
      <MemberSignature Language="DocId" Value="P:System.Reflection.Emit.DynamicMethod.MethodHandle" />
      <MemberSignature Language="VB.NET" Value="Public Overrides ReadOnly Property MethodHandle As RuntimeMethodHandle" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property RuntimeMethodHandle MethodHandle { RuntimeMethodHandle get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Emit.Lightweight</AssemblyName>
        <AssemblyVersion>4.0.3.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.RuntimeMethodHandle</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="86b04-722">Не поддерживается для динамических методов.</span><span class="sxs-lookup"><span data-stu-id="86b04-722">Not supported for dynamic methods.</span></span></summary>
        <value><span data-ttu-id="86b04-723">Не поддерживается для динамических методов.</span><span class="sxs-lookup"><span data-stu-id="86b04-723">Not supported for dynamic methods.</span></span></value>
        <remarks>To be added.</remarks>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="86b04-724">Не разрешено для динамических методов.</span><span class="sxs-lookup"><span data-stu-id="86b04-724">Not allowed for dynamic methods.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="MethodImplementationFlags">
      <MemberSignature Language="C#" Value="public override System.Reflection.MethodImplAttributes MethodImplementationFlags { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Reflection.MethodImplAttributes MethodImplementationFlags" />
      <MemberSignature Language="DocId" Value="P:System.Reflection.Emit.DynamicMethod.MethodImplementationFlags" />
      <MemberSignature Language="VB.NET" Value="Public Overrides ReadOnly Property MethodImplementationFlags As MethodImplAttributes" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property System::Reflection::MethodImplAttributes MethodImplementationFlags { System::Reflection::MethodImplAttributes get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Emit.Lightweight</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.MethodImplAttributes</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>To be added.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Module">
      <MemberSignature Language="C#" Value="public override System.Reflection.Module Module { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Reflection.Module Module" />
      <MemberSignature Language="DocId" Value="P:System.Reflection.Emit.DynamicMethod.Module" />
      <MemberSignature Language="VB.NET" Value="Public Overrides ReadOnly Property Module As Module" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property System::Reflection::Module ^ Module { System::Reflection::Module ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Module</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="86b04-725">Возвращает модуль, с которым логически связан динамический метод.</span><span class="sxs-lookup"><span data-stu-id="86b04-725">Gets the module with which the dynamic method is logically associated.</span></span></summary>
        <value><span data-ttu-id="86b04-726">Модуль <see cref="T:System.Reflection.Module" />, с которым логически связан текущий динамический метод.</span><span class="sxs-lookup"><span data-stu-id="86b04-726">The <see cref="T:System.Reflection.Module" /> with which the current dynamic method is associated.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="86b04-727">Если модуль был указан при создании динамического метода, это свойство возвращает данного модуля.</span><span class="sxs-lookup"><span data-stu-id="86b04-727">If a module was specified when the dynamic method was created, this property returns that module.</span></span> <span data-ttu-id="86b04-728">Если тип был указан в качестве владельца при создании динамического метода, это свойство возвращает модуль, содержащий указанный тип.</span><span class="sxs-lookup"><span data-stu-id="86b04-728">If a type was specified as the owner when the dynamic method was created, this property returns the module which contains that type.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="86b04-729">В следующем примере кода отображается <xref:System.Reflection.Emit.DynamicMethod.Module%2A> свойства динамического метода.</span><span class="sxs-lookup"><span data-stu-id="86b04-729">The following code example displays the <xref:System.Reflection.Emit.DynamicMethod.Module%2A> property of a dynamic method.</span></span> <span data-ttu-id="86b04-730">Данный пример кода является частью большего примера, приведенного для <xref:System.Reflection.Emit.DynamicMethod> класса.</span><span class="sxs-lookup"><span data-stu-id="86b04-730">This code example is part of a larger example provided for the <xref:System.Reflection.Emit.DynamicMethod> class.</span></span>  
  
 [!code-cpp[Reflection.DynamicMethod.All#26](~/samples/snippets/cpp/VS_Snippets_CLR/Reflection.DynamicMethod.All/cpp/source.cpp#26)]
 [!code-csharp[Reflection.DynamicMethod.All#26](~/samples/snippets/csharp/VS_Snippets_CLR/Reflection.DynamicMethod.All/CS/source.cs#26)]
 [!code-vb[Reflection.DynamicMethod.All#26](~/samples/snippets/visualbasic/VS_Snippets_CLR/Reflection.DynamicMethod.All/VB/source.vb#26)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Name">
      <MemberSignature Language="C#" Value="public override string Name { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string Name" />
      <MemberSignature Language="DocId" Value="P:System.Reflection.Emit.DynamicMethod.Name" />
      <MemberSignature Language="VB.NET" Value="Public Overrides ReadOnly Property Name As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property System::String ^ Name { System::String ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Emit.Lightweight</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.3.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="86b04-731">Получает имя динамического метода.</span><span class="sxs-lookup"><span data-stu-id="86b04-731">Gets the name of the dynamic method.</span></span></summary>
        <value><span data-ttu-id="86b04-732">Простое имя метода.</span><span class="sxs-lookup"><span data-stu-id="86b04-732">The simple name of the method.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
> [!NOTE]
>  <span data-ttu-id="86b04-733">Необязательно для имен динамических методов.</span><span class="sxs-lookup"><span data-stu-id="86b04-733">It is not necessary to name dynamic methods.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="86b04-734">В следующем примере кода имя динамического метода.</span><span class="sxs-lookup"><span data-stu-id="86b04-734">The following code example displays the name of a dynamic method.</span></span> <span data-ttu-id="86b04-735">Данный пример кода является частью большего примера, приведенного для <xref:System.Reflection.Emit.DynamicMethod> класса.</span><span class="sxs-lookup"><span data-stu-id="86b04-735">This code example is part of a larger example provided for  the <xref:System.Reflection.Emit.DynamicMethod> class.</span></span>  
  
 [!code-cpp[Reflection.DynamicMethod.All#27](~/samples/snippets/cpp/VS_Snippets_CLR/Reflection.DynamicMethod.All/cpp/source.cpp#27)]
 [!code-csharp[Reflection.DynamicMethod.All#27](~/samples/snippets/csharp/VS_Snippets_CLR/Reflection.DynamicMethod.All/CS/source.cs#27)]
 [!code-vb[Reflection.DynamicMethod.All#27](~/samples/snippets/visualbasic/VS_Snippets_CLR/Reflection.DynamicMethod.All/VB/source.vb#27)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ReflectedType">
      <MemberSignature Language="C#" Value="public override Type ReflectedType { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Type ReflectedType" />
      <MemberSignature Language="DocId" Value="P:System.Reflection.Emit.DynamicMethod.ReflectedType" />
      <MemberSignature Language="VB.NET" Value="Public Overrides ReadOnly Property ReflectedType As Type" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property Type ^ ReflectedType { Type ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Emit.Lightweight</AssemblyName>
        <AssemblyVersion>4.0.3.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Type</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="86b04-736">Возвращает класс, который использовался в отражении для получения метода.</span><span class="sxs-lookup"><span data-stu-id="86b04-736">Gets the class that was used in reflection to obtain the method.</span></span></summary>
        <value><span data-ttu-id="86b04-737">Всегда <see langword="null" />.</span><span class="sxs-lookup"><span data-stu-id="86b04-737">Always <see langword="null" />.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="86b04-738">Это свойство всегда возвращает `null` для динамических методов.</span><span class="sxs-lookup"><span data-stu-id="86b04-738">This property always returns `null` for dynamic methods.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="86b04-739">В следующем примере кода отраженный тип динамического метода.</span><span class="sxs-lookup"><span data-stu-id="86b04-739">The following code example displays the reflected type of a dynamic method.</span></span> <span data-ttu-id="86b04-740">Данный пример кода является частью большего примера, приведенного для <xref:System.Reflection.Emit.DynamicMethod> класса.</span><span class="sxs-lookup"><span data-stu-id="86b04-740">This code example is part of a larger example provided for the <xref:System.Reflection.Emit.DynamicMethod> class.</span></span>  
  
 [!code-cpp[Reflection.DynamicMethod.All#28](~/samples/snippets/cpp/VS_Snippets_CLR/Reflection.DynamicMethod.All/cpp/source.cpp#28)]
 [!code-csharp[Reflection.DynamicMethod.All#28](~/samples/snippets/csharp/VS_Snippets_CLR/Reflection.DynamicMethod.All/CS/source.cs#28)]
 [!code-vb[Reflection.DynamicMethod.All#28](~/samples/snippets/visualbasic/VS_Snippets_CLR/Reflection.DynamicMethod.All/VB/source.vb#28)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ReturnParameter">
      <MemberSignature Language="C#" Value="public override System.Reflection.ParameterInfo ReturnParameter { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Reflection.ParameterInfo ReturnParameter" />
      <MemberSignature Language="DocId" Value="P:System.Reflection.Emit.DynamicMethod.ReturnParameter" />
      <MemberSignature Language="VB.NET" Value="Public Overrides ReadOnly Property ReturnParameter As ParameterInfo" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property System::Reflection::ParameterInfo ^ ReturnParameter { System::Reflection::ParameterInfo ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Emit.Lightweight</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.3.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.ParameterInfo</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="86b04-741">Возвращает выходной параметр динамического метода.</span><span class="sxs-lookup"><span data-stu-id="86b04-741">Gets the return parameter of the dynamic method.</span></span></summary>
        <value><span data-ttu-id="86b04-742">Всегда <see langword="null" />.</span><span class="sxs-lookup"><span data-stu-id="86b04-742">Always <see langword="null" />.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="86b04-743">Это свойство всегда возвращает `null` для динамических методов.</span><span class="sxs-lookup"><span data-stu-id="86b04-743">This property always returns `null` for dynamic methods.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ReturnType">
      <MemberSignature Language="C#" Value="public override Type ReturnType { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Type ReturnType" />
      <MemberSignature Language="DocId" Value="P:System.Reflection.Emit.DynamicMethod.ReturnType" />
      <MemberSignature Language="VB.NET" Value="Public Overrides ReadOnly Property ReturnType As Type" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property Type ^ ReturnType { Type ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Emit.Lightweight</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.3.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Type</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="86b04-744">Получает тип возвращаемого значения для динамического метода.</span><span class="sxs-lookup"><span data-stu-id="86b04-744">Gets the type of return value for the dynamic method.</span></span></summary>
        <value><span data-ttu-id="86b04-745">Объект <see cref="T:System.Type" />, представляющий тип возвращаемого значения текущего метода; значение <see cref="T:System.Void" />, если метод не имеет возвращаемого типа.</span><span class="sxs-lookup"><span data-stu-id="86b04-745">A <see cref="T:System.Type" /> representing the type of the return value of the current method; <see cref="T:System.Void" /> if the method has no return type.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="86b04-746">Если `null` был указан для возвращаемого типа, при создании динамического метода, это свойство возвращает <xref:System.Void?displayProperty=nameWithType>.</span><span class="sxs-lookup"><span data-stu-id="86b04-746">If `null` was specified for the return type when the dynamic method was created, this property returns <xref:System.Void?displayProperty=nameWithType>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="86b04-747">В следующем примере кода отображает тип возвращаемого значения динамического метода.</span><span class="sxs-lookup"><span data-stu-id="86b04-747">The following code example displays the return type of a dynamic method.</span></span> <span data-ttu-id="86b04-748">Данный пример кода является частью большего примера, приведенного для <xref:System.Reflection.Emit.DynamicMethod> класса.</span><span class="sxs-lookup"><span data-stu-id="86b04-748">This code example is part of a larger example provided for the <xref:System.Reflection.Emit.DynamicMethod> class.</span></span>  
  
 [!code-cpp[Reflection.DynamicMethod.All#30](~/samples/snippets/cpp/VS_Snippets_CLR/Reflection.DynamicMethod.All/cpp/source.cpp#30)]
 [!code-csharp[Reflection.DynamicMethod.All#30](~/samples/snippets/csharp/VS_Snippets_CLR/Reflection.DynamicMethod.All/CS/source.cs#30)]
 [!code-vb[Reflection.DynamicMethod.All#30](~/samples/snippets/visualbasic/VS_Snippets_CLR/Reflection.DynamicMethod.All/VB/source.vb#30)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ReturnTypeCustomAttributes">
      <MemberSignature Language="C#" Value="public override System.Reflection.ICustomAttributeProvider ReturnTypeCustomAttributes { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Reflection.ICustomAttributeProvider ReturnTypeCustomAttributes" />
      <MemberSignature Language="DocId" Value="P:System.Reflection.Emit.DynamicMethod.ReturnTypeCustomAttributes" />
      <MemberSignature Language="VB.NET" Value="Public Overrides ReadOnly Property ReturnTypeCustomAttributes As ICustomAttributeProvider" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property System::Reflection::ICustomAttributeProvider ^ ReturnTypeCustomAttributes { System::Reflection::ICustomAttributeProvider ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Emit.Lightweight</AssemblyName>
        <AssemblyVersion>4.0.3.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.ICustomAttributeProvider</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="86b04-749">Получает настраиваемые атрибуты типа возвращаемого значения для динамического метода.</span><span class="sxs-lookup"><span data-stu-id="86b04-749">Gets the custom attributes of the return type for the dynamic method.</span></span></summary>
        <value><span data-ttu-id="86b04-750">Объект <see cref="T:System.Reflection.ICustomAttributeProvider" />, представляющий пользовательские атрибуты возвращаемого типа для динамического метода.</span><span class="sxs-lookup"><span data-stu-id="86b04-750">An <see cref="T:System.Reflection.ICustomAttributeProvider" /> representing the custom attributes of the return type for the dynamic method.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="86b04-751">Пользовательские атрибуты не поддерживаются на тип возвращаемого значения динамического метода, поэтому массив настраиваемых атрибутов, возвращаемый <xref:System.Reflection.ICustomAttributeProvider.GetCustomAttributes%2A> метод была всегда пуста.</span><span class="sxs-lookup"><span data-stu-id="86b04-751">Custom attributes are not supported on the return type of a dynamic method, so the array of custom attributes returned by the <xref:System.Reflection.ICustomAttributeProvider.GetCustomAttributes%2A> method is always empty.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="86b04-752">В следующем примере кода показано, как отобразить настраиваемые атрибуты возвращаемого типа динамического метода.</span><span class="sxs-lookup"><span data-stu-id="86b04-752">The following code example shows how to display the custom attributes of the return type of a dynamic method.</span></span> <span data-ttu-id="86b04-753">Данный пример кода является частью большего примера, приведенного для <xref:System.Reflection.Emit.DynamicMethod> класса.</span><span class="sxs-lookup"><span data-stu-id="86b04-753">This code example is part of a larger example provided for the <xref:System.Reflection.Emit.DynamicMethod> class.</span></span>  
  
 [!code-cpp[Reflection.DynamicMethod.All#31](~/samples/snippets/cpp/VS_Snippets_CLR/Reflection.DynamicMethod.All/cpp/source.cpp#31)]
 [!code-csharp[Reflection.DynamicMethod.All#31](~/samples/snippets/csharp/VS_Snippets_CLR/Reflection.DynamicMethod.All/CS/source.cs#31)]
 [!code-vb[Reflection.DynamicMethod.All#31](~/samples/snippets/visualbasic/VS_Snippets_CLR/Reflection.DynamicMethod.All/VB/source.vb#31)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Reflection.Emit.DynamicMethod.ReturnType" />
      </Docs>
    </Member>
    <Member MemberName="ToString">
      <MemberSignature Language="C#" Value="public override string ToString ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance string ToString() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.Emit.DynamicMethod.ToString" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function ToString () As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override System::String ^ ToString();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Emit.Lightweight</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.3.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="86b04-754">Возвращает сигнатуру метода, представленную в виде строки.</span><span class="sxs-lookup"><span data-stu-id="86b04-754">Returns the signature of the method, represented as a string.</span></span></summary>
        <returns><span data-ttu-id="86b04-755">Строка, представляющая сигнатуру метода.</span><span class="sxs-lookup"><span data-stu-id="86b04-755">A string representing the method signature.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="86b04-756">Сигнатура содержит только типы и имя метода, если таковые имеются.</span><span class="sxs-lookup"><span data-stu-id="86b04-756">The signature includes only types and the method name, if any.</span></span> <span data-ttu-id="86b04-757">Имена параметров не включаются.</span><span class="sxs-lookup"><span data-stu-id="86b04-757">Parameter names are not included.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="86b04-758">В следующем примере кода отображается <xref:System.Reflection.Emit.DynamicMethod.ToString%2A> метод динамического метода.</span><span class="sxs-lookup"><span data-stu-id="86b04-758">The following code example displays the <xref:System.Reflection.Emit.DynamicMethod.ToString%2A> method of a dynamic method.</span></span> <span data-ttu-id="86b04-759">Данный пример кода является частью большего примера, приведенного для <xref:System.Reflection.Emit.DynamicMethod> класса.</span><span class="sxs-lookup"><span data-stu-id="86b04-759">This code example is part of a larger example provided for the <xref:System.Reflection.Emit.DynamicMethod> class.</span></span>  
  
 [!code-cpp[Reflection.DynamicMethod.All#32](~/samples/snippets/cpp/VS_Snippets_CLR/Reflection.DynamicMethod.All/cpp/source.cpp#32)]
 [!code-csharp[Reflection.DynamicMethod.All#32](~/samples/snippets/csharp/VS_Snippets_CLR/Reflection.DynamicMethod.All/CS/source.cs#32)]
 [!code-vb[Reflection.DynamicMethod.All#32](~/samples/snippets/visualbasic/VS_Snippets_CLR/Reflection.DynamicMethod.All/VB/source.vb#32)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>
