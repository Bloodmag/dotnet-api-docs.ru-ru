<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" version="1.2" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="AssemblyName.xml" source-language="en-US" target-language="ru-RU">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-15c36f0" tool-company="Microsoft" />
      <xliffext:skl_file_name xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">02cd5861-7ce2-4a82-b358-31f8435a0ac55e8d575c8f6baf9dd58560db2cd8c587433f5908.skl</xliffext:skl_file_name>
      <xliffext:version xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">1.2</xliffext:version>
      <xliffext:ms.openlocfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">5e8d575c8f6baf9dd58560db2cd8c587433f5908</xliffext:ms.openlocfilehash>
      <xliffext:ms.sourcegitcommit xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">d31dc2ede16f6f7bc64e90d9f897ff54c4e3869b</xliffext:ms.sourcegitcommit>
      <xliffext:ms.lasthandoff xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">04/03/2018</xliffext:ms.lasthandoff>
      <xliffext:moniker_ids xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">netcore-1.0,netcore-1.1,netcore-2.0,netcore-2.1,netframework-4.5.1,netframework-4.5.2,netframework-4.5,netframework-4.6.1,netframework-4.6.2,netframework-4.6,netframework-4.7.1,netframework-4.7,netstandard-1.0,netstandard-1.1,netstandard-1.2,netstandard-1.3,netstandard-1.4,netstandard-1.5,netstandard-1.6,netstandard-2.0,xamarinandroid-7.1,xamarinios-10.8,xamarinmac-3.0</xliffext:moniker_ids>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve" uid="T:System.Reflection.AssemblyName">
          <source>Describes an assembly's unique identity in full.</source>
          <target state="translated">Подробно описывает уникальный идентификатор сборки.</target>       </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Reflection.AssemblyName">
          <source>The <ph id="ph1">&lt;xref:System.Reflection.AssemblyName&gt;</ph> object contains information about an assembly, which you can use to bind to that assembly.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Reflection.AssemblyName&gt;</ph> Объект содержит сведения о сборке, можно использовать для привязки для этой сборки.</target>       </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Reflection.AssemblyName">
          <source>An assembly's identity consists of the following:</source>
          <target state="translated">Удостоверение сборки состоит из следующих компонентов:</target>       </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Reflection.AssemblyName">
          <source>Simple name.</source>
          <target state="translated">Простое имя.</target>       </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Reflection.AssemblyName">
          <source>Version number.</source>
          <target state="translated">Номер версии.</target>       </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Reflection.AssemblyName">
          <source>Cryptographic key pair.</source>
          <target state="translated">Пары криптографических ключей.</target>       </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Reflection.AssemblyName">
          <source>Supported culture.</source>
          <target state="translated">Поддерживаемые языком и региональными параметрами.</target>       </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Reflection.AssemblyName">
          <source>The simple name is typically the file name for the manifest file without its extension.</source>
          <target state="translated">Простое имя обычно — имя файла для файла манифеста без расширения.</target>       </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Reflection.AssemblyName">
          <source>The key pair includes a public and private key, used to create strong-name signatures for assemblies.</source>
          <target state="translated">Пара ключей содержит открытый и закрытый ключ, используемый для создания подписи строгого имени для сборки.</target>       </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Reflection.AssemblyName">
          <source>All compilers that support the common language runtime will emit the simple name of a nested class, and reflection constructs a mangled name when queried, in accordance with the following conventions.</source>
          <target state="translated">Все компиляторы, поддерживающие общеязыковая среда выполнения будет выдавать простое имя вложенного класса, а отражение создает искаженное имя, если запрос, в соответствии со следующими соглашениями.</target>       </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Reflection.AssemblyName">
          <source>Delimiter</source>
          <target state="translated">разделитель</target>       </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Reflection.AssemblyName">
          <source>Meaning</source>
          <target state="translated">Значение</target>       </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Reflection.AssemblyName">
          <source>Backslash (<ph id="ph1">\\</ph>)</source>
          <target state="translated">Обратная косая черта (<ph id="ph1">\\</ph>)</target>       </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Reflection.AssemblyName">
          <source>Escape character.</source>
          <target state="translated">Escape-символ.</target>       </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Reflection.AssemblyName">
          <source>Comma (,)</source>
          <target state="translated">Запятая ()</target>       </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Reflection.AssemblyName">
          <source>Precedes the assembly name.</source>
          <target state="translated">Предшествует имени сборки.</target>       </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Reflection.AssemblyName">
          <source>Plus sign (+)</source>
          <target state="translated">Знак плюс (+)</target>       </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Reflection.AssemblyName">
          <source>Precedes a nested class.</source>
          <target state="translated">Перед вложенным классом.</target>       </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Reflection.AssemblyName">
          <source>For example, the fully qualified name for a class might look like this:</source>
          <target state="translated">Например полное имя класса может выглядеть следующим образом:</target>       </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Reflection.AssemblyName">
          <source>ContainingClass+NestedClass,MyAssembly</source>
          <target state="translated">ContainingClass + NestedClass MyAssembly</target>       </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Reflection.AssemblyName">
          <source>A "++" becomes "<ph id="ph1">\\</ph><ph id="ph2">+</ph><ph id="ph3">\\</ph>+", and a "<ph id="ph4">\\</ph>" becomes "<ph id="ph5">\\</ph><ph id="ph6">\\</ph>".</source>
          <target state="translated">Объект «++» становится «<ph id="ph1">\\</ph><ph id="ph2">+</ph><ph id="ph3">\\</ph>+» и»<ph id="ph4">\\</ph>«становится»<ph id="ph5">\\</ph><ph id="ph6">\\</ph>».</target>       </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Reflection.AssemblyName">
          <source>This qualified name can be persisted and later used to load the <ph id="ph1">&lt;xref:System.Type&gt;</ph>.</source>
          <target state="translated">Это полное имя можно сохранить и впоследствии использовано для загрузки <ph id="ph1">&lt;xref:System.Type&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Reflection.AssemblyName">
          <source>To search for and load a <ph id="ph1">&lt;xref:System.Type&gt;</ph>, use <ph id="ph2">&lt;xref:System.Type.GetType%2A&gt;</ph> either with the type name only or with the assembly qualified type name.</source>
          <target state="translated">Чтобы найти и загрузить <ph id="ph1">&lt;xref:System.Type&gt;</ph>, используйте <ph id="ph2">&lt;xref:System.Type.GetType%2A&gt;</ph> либо с типом имени, либо только имя типа с указанием сборки.</target>       </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Reflection.AssemblyName">
          <source><ph id="ph1">&lt;xref:System.Type.GetType%2A&gt;</ph> with the type name only will look for the <ph id="ph2">&lt;xref:System.Type&gt;</ph> in the caller's assembly and then in the System assembly.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Type.GetType%2A&gt;</ph> с типом имя только будет искать <ph id="ph2">&lt;xref:System.Type&gt;</ph> в сборке вызывающего, а затем в системе сборки.</target>       </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Reflection.AssemblyName">
          <source><ph id="ph1">&lt;xref:System.Type.GetType%2A&gt;</ph> with the assembly qualified type name will look for the <ph id="ph2">&lt;xref:System.Type&gt;</ph> in any assembly.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Type.GetType%2A&gt;</ph> в сборке будет искать имя типа с указанием <ph id="ph2">&lt;xref:System.Type&gt;</ph> в любой сборке.</target>       </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Reflection.AssemblyName">
          <source>A fully specified <ph id="ph1">&lt;xref:System.Reflection.AssemblyName&gt;</ph> must have the name, culture, public key or public key token, major version, minor version, build number, and revision number parameters.</source>
          <target state="translated">Полностью заданное <ph id="ph1">&lt;xref:System.Reflection.AssemblyName&gt;</ph> должен иметь имя, язык и региональные параметры, открытый ключ или маркер открытого ключа, основной версии, дополнительный номер версии, номер сборки и номер редакции.</target>       </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Reflection.AssemblyName">
          <source>The last four are packaged in the <ph id="ph1">&lt;xref:System.Version&gt;</ph> type.</source>
          <target state="translated">Последние четыре упакованы в <ph id="ph1">&lt;xref:System.Version&gt;</ph> типа.</target>       </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Reflection.AssemblyName">
          <source>To create a simple name, create an <ph id="ph1">&lt;xref:System.Reflection.AssemblyName&gt;</ph> object using the default constructor and set the <ph id="ph2">&lt;xref:System.Reflection.AssemblyName.Name%2A&gt;</ph>.</source>
          <target state="translated">Чтобы создать простое имя, создайте <ph id="ph1">&lt;xref:System.Reflection.AssemblyName&gt;</ph> с помощью конструктора по умолчанию и задать <ph id="ph2">&lt;xref:System.Reflection.AssemblyName.Name%2A&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Reflection.AssemblyName">
          <source>The other properties are optional.</source>
          <target state="translated">Другие свойства являются необязательными.</target>       </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Reflection.AssemblyName">
          <source>To create a full strong name, create an <ph id="ph1">&lt;xref:System.Reflection.AssemblyName&gt;</ph> object using the default constructor and set the <ph id="ph2">&lt;xref:System.Reflection.AssemblyName.Name%2A&gt;</ph> and <ph id="ph3">&lt;xref:System.Reflection.AssemblyName.KeyPair%2A&gt;</ph>.</source>
          <target state="translated">Чтобы создать полностью строгое имя, создайте <ph id="ph1">&lt;xref:System.Reflection.AssemblyName&gt;</ph> с помощью конструктора по умолчанию и задать <ph id="ph2">&lt;xref:System.Reflection.AssemblyName.Name%2A&gt;</ph> и <ph id="ph3">&lt;xref:System.Reflection.AssemblyName.KeyPair%2A&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Reflection.AssemblyName">
          <source>The other properties are optional.</source>
          <target state="translated">Другие свойства являются необязательными.</target>       </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Reflection.AssemblyName">
          <source>Use <ph id="ph1">&lt;xref:System.Reflection.AssemblyName.SetPublicKey%2A&gt;</ph> and <ph id="ph2">&lt;xref:System.Reflection.AssemblyName.SetPublicKeyToken%2A&gt;</ph> to set the public key and the strong name.</source>
          <target state="translated">Используйте <ph id="ph1">&lt;xref:System.Reflection.AssemblyName.SetPublicKey%2A&gt;</ph> и <ph id="ph2">&lt;xref:System.Reflection.AssemblyName.SetPublicKeyToken%2A&gt;</ph> задать открытый ключ и строгое имя.</target>       </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Reflection.AssemblyName">
          <source>The strong name signing always uses the <ph id="ph1">&lt;xref:System.Security.Cryptography.SHA1&gt;</ph> hash algorithm.</source>
          <target state="translated">Строгое имя подписи всегда использует <ph id="ph1">&lt;xref:System.Security.Cryptography.SHA1&gt;</ph> хэш-алгоритм.</target>       </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Reflection.AssemblyName">
          <source>To ensure that the names are constructed correctly, use the following properties:</source>
          <target state="translated">Чтобы обеспечить правильное создание имен, используйте следующие свойства:</target>       </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Reflection.AssemblyName">
          <source>You can also get the name by using the <ph id="ph1">`/l`</ph> option with the <bpt id="p1">[</bpt>Gacutil.exe (Global Assembly Cache Tool)<ept id="p1">](~/docs/framework/tools/gacutil-exe-gac-tool.md)</ept></source>
          <target state="translated">Кроме того, имя можно получить с помощью <ph id="ph1">`/l`</ph> вариант с <bpt id="p1">[</bpt>Gacutil.exe (программа глобального кэша сборок)<ept id="p1">](~/docs/framework/tools/gacutil-exe-gac-tool.md)</ept></target>       </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Reflection.AssemblyName">
          <source>For a partially specified strong name, create an <ph id="ph1">&lt;xref:System.Reflection.AssemblyName&gt;</ph> object using the default constructor and set the name and public key.</source>
          <target state="translated">Частично заданного строгого имени создайте <ph id="ph1">&lt;xref:System.Reflection.AssemblyName&gt;</ph> с помощью конструктора по умолчанию и задайте имя и открытый ключ.</target>       </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Reflection.AssemblyName">
          <source>An assembly created using such an <ph id="ph1">&lt;xref:System.Reflection.AssemblyName&gt;</ph> can be signed later using the Assembly Linker (Al.exe).</source>
          <target state="translated">Сборка, созданная с помощью подобного <ph id="ph1">&lt;xref:System.Reflection.AssemblyName&gt;</ph> может быть подписана позднее с помощью компоновщика сборок (Al.exe).</target>       </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Reflection.AssemblyName">
          <source>It is possible to specify a public key and a <ph id="ph1">&lt;xref:System.Reflection.AssemblyName.KeyPair%2A&gt;</ph> with inconsistent values.</source>
          <target state="translated">Можно указать открытый ключ и <ph id="ph1">&lt;xref:System.Reflection.AssemblyName.KeyPair%2A&gt;</ph> несогласованные значения.</target>       </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Reflection.AssemblyName">
          <source>This can be useful in developer scenarios.</source>
          <target state="translated">Это может быть полезным для разработчика.</target>       </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Reflection.AssemblyName">
          <source>In this case, the public key retrieved with <ph id="ph1">&lt;xref:System.Reflection.AssemblyName.GetPublicKey%2A&gt;</ph> specifies the correct public key, while the <ph id="ph2">&lt;xref:System.Reflection.AssemblyName.KeyPair%2A&gt;</ph> specifies the public and private keys used during development.</source>
          <target state="translated">В этом случае открытый ключ, возвращаемый <ph id="ph1">&lt;xref:System.Reflection.AssemblyName.GetPublicKey%2A&gt;</ph> указывает правильный открытый ключ, а <ph id="ph2">&lt;xref:System.Reflection.AssemblyName.KeyPair%2A&gt;</ph> задает открытый и закрытый ключи, используемые во время разработки.</target>       </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Reflection.AssemblyName">
          <source>When the runtime detects a mismatch between the <ph id="ph1">&lt;xref:System.Reflection.AssemblyName.KeyPair%2A&gt;</ph> and the public key, it looks up in the registry the correct key that matches the public key.</source>
          <target state="translated">Когда среда выполнения обнаруживает несоответствие между <ph id="ph1">&lt;xref:System.Reflection.AssemblyName.KeyPair%2A&gt;</ph> и открытый ключ, он ищет в реестре правильный ключ, соответствующий открытому ключу.</target>       </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Reflection.AssemblyName">
          <source>The format of the display name of an <ph id="ph1">&lt;xref:System.Reflection.AssemblyName&gt;</ph> is a comma-delimited Unicode string that begins with the name, as follows:</source>
          <target state="translated">Формат отображаемое имя <ph id="ph1">&lt;xref:System.Reflection.AssemblyName&gt;</ph> с разделителями запятыми строка в Юникоде, начинается с имени, как показано ниже:</target>       </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Reflection.AssemblyName">
          <source><ph id="ph1">`Name`</ph> is the textual name of the assembly.</source>
          <target state="translated"><ph id="ph1">`Name`</ph> — Это текстовое имя сборки.</target>       </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Reflection.AssemblyName">
          <source><ph id="ph1">`CultureInfo`</ph> is the RFC1766-format-defined culture.</source>
          <target state="translated"><ph id="ph1">`CultureInfo`</ph> — культура, определенные в формате RFC1766.</target>       </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Reflection.AssemblyName">
          <source><ph id="ph1">`Major`</ph>, <ph id="ph2">`Minor`</ph>, <ph id="ph3">`Build`</ph>, and <ph id="ph4">`Revision`</ph> are the major version, minor version, build number, and revision number of the assembly.</source>
          <target state="translated"><ph id="ph1">`Major`</ph>, <ph id="ph2">`Minor`</ph>, <ph id="ph3">`Build`</ph>, и <ph id="ph4">`Revision`</ph> являются основной номер версии, дополнительный номер версии, номер сборки и номер редакции сборки.</target>       </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Reflection.AssemblyName">
          <source><ph id="ph1">`StrongName`</ph> is the hexadecimal-encoded low-order 64 bits of the hash value of the public key generated using the SHA-1 hashing algorithm and the public key specified by <ph id="ph2">&lt;xref:System.Reflection.AssemblyName.SetPublicKey%2A&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">`StrongName`</ph> является шестнадцатеричной младшие 64 разряда хэш-значение открытого ключа, созданного с помощью алгоритма хэширования SHA-1 и открытого ключа, заданного <ph id="ph2">&lt;xref:System.Reflection.AssemblyName.SetPublicKey%2A&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Reflection.AssemblyName">
          <source><ph id="ph1">`PublicKeyToken`</ph> is the hexadecimal-encoded public key specified by <ph id="ph2">&lt;xref:System.Reflection.AssemblyName.SetPublicKey%2A&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">`PublicKeyToken`</ph> является шестнадцатеричной открытый ключ, указанный <ph id="ph2">&lt;xref:System.Reflection.AssemblyName.SetPublicKey%2A&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Reflection.AssemblyName">
          <source>Hexadecimal encoding is defined as the conversion of each byte of a binary object to two hexadecimal characters, progressing from least to most significant byte.</source>
          <target state="translated">Шестнадцатеричное кодирование определяется как преобразование каждого байта двоичного объекта в два шестнадцатеричных символов, с младшего до старшего байта.</target>       </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Reflection.AssemblyName">
          <source>Additional display values will be added as deemed necessary.</source>
          <target state="translated">При необходимости будут добавлены дополнительные отображаемые значения.</target>       </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Reflection.AssemblyName">
          <source>If the full public key is known, then PublicKey may be substituted for StrongName.</source>
          <target state="translated">Если известны полного открытого ключа, затем PublicKey может быть замещен StrongName.</target>       </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Reflection.AssemblyName">
          <source>Also note that except for <ph id="ph1">`Name`</ph>, which must come first, the lexical order of parameters is unimportant.</source>
          <target state="translated">Также Обратите внимание, за исключением <ph id="ph1">`Name`</ph>, которая должна быть сначала, лексический порядок параметров не имеет значения.</target>       </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Reflection.AssemblyName">
          <source>However, any parameter (<ph id="ph1">`Version`</ph>, <ph id="ph2">`Culture`</ph>, <ph id="ph3">`StrongName`</ph> or <ph id="ph4">`PublicKey`</ph>) not specifically set is considered to be omitted, and the <ph id="ph5">&lt;xref:System.Reflection.AssemblyName&gt;</ph> is then considered partial.</source>
          <target state="translated">Тем не менее любой параметр (<ph id="ph1">`Version`</ph>, <ph id="ph2">`Culture`</ph>, <ph id="ph3">`StrongName`</ph> или <ph id="ph4">`PublicKey`</ph>) не было специально набор считается следует пропустить и <ph id="ph5">&lt;xref:System.Reflection.AssemblyName&gt;</ph> рассматривается частичной.</target>       </trans-unit>
        <trans-unit id="153" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Reflection.AssemblyName">
          <source>When specifying partial information, Name parameters must be specified in the order described above.</source>
          <target state="translated">При указании частичные сведения, параметры имени необходимо указать в описанном выше порядке.</target>       </trans-unit>
        <trans-unit id="154" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Reflection.AssemblyName">
          <source>When supplying a display name, the convention <ph id="ph1">`StrongName =null`</ph> or <ph id="ph2">`PublicKey= null`</ph> indicates that binding and matching against a simply named assembly is required.</source>
          <target state="translated">При передаче отображаемого имени соглашение о <ph id="ph1">`StrongName =null`</ph> или <ph id="ph2">`PublicKey= null`</ph> указывает, что требуется привязка и сопоставление сборки с простым именем.</target>       </trans-unit>
        <trans-unit id="155" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Reflection.AssemblyName">
          <source>Additionally, the convention <ph id="ph1">`Culture= ""`</ph> (double quote representing an empty string) indicates matching against the default culture.</source>
          <target state="translated">Кроме того, соглашение <ph id="ph1">`Culture= ""`</ph> (двойные кавычки обозначают пустую строку) задает сравнение с культурой по умолчанию.</target>       </trans-unit>
        <trans-unit id="156" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Reflection.AssemblyName">
          <source>The following example shows an <ph id="ph1">&lt;xref:System.Reflection.AssemblyName&gt;</ph> for a simply named assembly with default culture.</source>
          <target state="translated">В следующем примере показан <ph id="ph1">&lt;xref:System.Reflection.AssemblyName&gt;</ph> для сборки с простым именем языка и региональных параметров по умолчанию.</target>       </trans-unit>
        <trans-unit id="157" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Reflection.AssemblyName">
          <source>The following example shows a fully specified reference for a strongly named assembly with culture "en".</source>
          <target state="translated">В приведенном ниже примере показана полностью определенная ссылка на сборку со строгим именем, для которой установлены язык и региональные параметры —"en".</target>       </trans-unit>
        <trans-unit id="158" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Reflection.AssemblyName">
          <source>This example shows how to use various reflection classes to analyze the metadata contained in an assembly.</source>
          <target state="translated">В этом примере показано, как использовать различные классы отражения для анализа метаданных, содержащихся в сборке.</target>       </trans-unit>
        <trans-unit id="159" translate="yes" xml:space="preserve" uid="T:System.Reflection.AssemblyName">
          <source>Initializes a new instance of the <ph id="ph1">&lt;see cref="T:System.Reflection.AssemblyName" /&gt;</ph> class.</source>
          <target state="translated">Инициализирует новый экземпляр класса <ph id="ph1">&lt;see cref="T:System.Reflection.AssemblyName" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="160" translate="yes" xml:space="preserve" uid="M:System.Reflection.AssemblyName.#ctor">
          <source>Initializes a new instance of the <ph id="ph1">&lt;see cref="T:System.Reflection.AssemblyName" /&gt;</ph> class.</source>
          <target state="translated">Инициализирует новый экземпляр класса <ph id="ph1">&lt;see cref="T:System.Reflection.AssemblyName" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="161" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.AssemblyName.#ctor">
          <source>The following example creates a dynamic assembly named <ph id="ph1">`MyAssembly.exe`</ph> and saves it to your hard disk.</source>
          <target state="translated">В следующем примере создается динамическая сборка с именем <ph id="ph1">`MyAssembly.exe`</ph> и сохраняет ее на жесткий диск.</target>       </trans-unit>
        <trans-unit id="162" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.AssemblyName.#ctor">
          <source>After running the example, you can use the <bpt id="p1">[</bpt>Ildasm.exe (IL Disassembler)<ept id="p1">](~/docs/framework/tools/ildasm-exe-il-disassembler.md)</ept> to examine the assembly metadata.</source>
          <target state="translated">После выполнения этого примера, можно использовать <bpt id="p1">[</bpt>Ildasm.exe (дизассемблер IL)<ept id="p1">](~/docs/framework/tools/ildasm-exe-il-disassembler.md)</ept> для просмотра метаданных сборки.</target>       </trans-unit>
        <trans-unit id="163" translate="yes" xml:space="preserve" uid="M:System.Reflection.AssemblyName.#ctor(System.String)">
          <source>The display name of the assembly, as returned by the <ph id="ph1">&lt;see cref="P:System.Reflection.AssemblyName.FullName" /&gt;</ph> property.</source>
          <target state="translated">Отображаемое имя сборки, возвращаемое свойством <ph id="ph1">&lt;see cref="P:System.Reflection.AssemblyName.FullName" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="164" translate="yes" xml:space="preserve" uid="M:System.Reflection.AssemblyName.#ctor(System.String)">
          <source>Initializes a new instance of the <ph id="ph1">&lt;see cref="T:System.Reflection.AssemblyName" /&gt;</ph> class with the specified display name.</source>
          <target state="translated">Инициализирует новый экземпляр класса <ph id="ph1">&lt;see cref="T:System.Reflection.AssemblyName" /&gt;</ph> с заданным отображаемым именем.</target>       </trans-unit>
        <trans-unit id="165" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.AssemblyName.#ctor(System.String)">
          <source>The supplied <ph id="ph1">`assemblyName`</ph> is parsed, and the appropriate fields of the new <ph id="ph2">&lt;xref:System.Reflection.AssemblyName&gt;</ph> are initialized with values from the display name.</source>
          <target state="translated">Предоставленный <ph id="ph1">`assemblyName`</ph> анализируется, но и соответствующие поля нового <ph id="ph2">&lt;xref:System.Reflection.AssemblyName&gt;</ph> инициализируются значениями из отображаемого имени.</target>       </trans-unit>
        <trans-unit id="166" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.AssemblyName.#ctor(System.String)">
          <source>This is the recommended way of parsing display names.</source>
          <target state="translated">Это рекомендуемый способ разбора отображаемых имен.</target>       </trans-unit>
        <trans-unit id="167" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.AssemblyName.#ctor(System.String)">
          <source>Writing your own code to parse display names is not recommended.</source>
          <target state="translated">Создание собственного кода для разбора отображаемых имен не рекомендуется.</target>       </trans-unit>
        <trans-unit id="168" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.AssemblyName.#ctor(System.String)">
          <source>The following example creates an instance of <ph id="ph1">&lt;xref:System.Reflection.AssemblyName&gt;</ph> from a display name.</source>
          <target state="translated">В следующем примере создается экземпляр <ph id="ph1">&lt;xref:System.Reflection.AssemblyName&gt;</ph> из отображаемого имени.</target>       </trans-unit>
        <trans-unit id="169" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.AssemblyName.#ctor(System.String)">
          <source>The individual elements of the display name are output to the console as properties of the <ph id="ph1">&lt;xref:System.Reflection.AssemblyName&gt;</ph> object.</source>
          <target state="translated">Вывод на консоль, отдельные элементы отображаемого имени как свойства <ph id="ph1">&lt;xref:System.Reflection.AssemblyName&gt;</ph> объекта.</target>       </trans-unit>
        <trans-unit id="170" translate="yes" xml:space="preserve" uid="M:System.Reflection.AssemblyName.#ctor(System.String)">
          <source><ph id="ph1">&lt;paramref name="assemblyName" /&gt;</ph> is <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated">Свойство <ph id="ph1">&lt;paramref name="assemblyName" /&gt;</ph> имеет значение <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="171" translate="yes" xml:space="preserve" uid="M:System.Reflection.AssemblyName.#ctor(System.String)">
          <source><ph id="ph1">&lt;paramref name="assemblyName" /&gt;</ph> is a zero length string.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="assemblyName" /&gt;</ph> — пустая строка.</target>       </trans-unit>
        <trans-unit id="172" translate="yes" xml:space="preserve" uid="M:System.Reflection.AssemblyName.#ctor(System.String)">
          <source>In the <bpt id="p1">[</bpt>.NET for Windows Store apps<ept id="p1">](http://go.microsoft.com/fwlink/?LinkID=247912)</ept> or the <bpt id="p2">[</bpt>Portable Class Library<ept id="p2">](~/docs/standard/cross-platform/cross-platform-development-with-the-portable-class-library.md)</ept>, catch the base class exception, <ph id="ph1">&lt;see cref="T:System.IO.IOException" /&gt;</ph>, instead.</source>
          <target state="translated">Вместо этого в <bpt id="p1">[</bpt>.NET для приложений Магазина Windows<ept id="p1">](http://go.microsoft.com/fwlink/?LinkID=247912)</ept> или в <bpt id="p2">[</bpt>переносимой библиотеке классов<ept id="p2">](~/docs/standard/cross-platform/cross-platform-development-with-the-portable-class-library.md)</ept> перехватите исключение базового класса <ph id="ph1">&lt;see cref="T:System.IO.IOException" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="173" translate="yes" xml:space="preserve" uid="M:System.Reflection.AssemblyName.#ctor(System.String)">
          <source>The referenced assembly could not be found, or could not be loaded.</source>
          <target state="translated">Не удалось найти или загрузить сборку, на которую указывает ссылка.</target>       </trans-unit>
        <trans-unit id="174" translate="yes" xml:space="preserve" uid="M:System.Reflection.AssemblyName.Clone">
          <source>Makes a copy of this <ph id="ph1">&lt;see cref="T:System.Reflection.AssemblyName" /&gt;</ph> object.</source>
          <target state="translated">Создает копию этого объекта <ph id="ph1">&lt;see cref="T:System.Reflection.AssemblyName" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="175" translate="yes" xml:space="preserve" uid="M:System.Reflection.AssemblyName.Clone">
          <source>An object that is a copy of this <ph id="ph1">&lt;see cref="T:System.Reflection.AssemblyName" /&gt;</ph> object.</source>
          <target state="translated">Объект, который является копией этого объекта <ph id="ph1">&lt;see cref="T:System.Reflection.AssemblyName" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="176" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.AssemblyName.Clone">
          <source>A new object is created, identical to the original.</source>
          <target state="translated">Создается новый объект, идентичный исходному.</target>       </trans-unit>
        <trans-unit id="177" translate="yes" xml:space="preserve" uid="P:System.Reflection.AssemblyName.CodeBase">
          <source>Gets or sets the location of the assembly as a URL.</source>
          <target state="translated">Возвращает или задает местонахождение сборки в виде URL-адреса.</target>       </trans-unit>
        <trans-unit id="178" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.AssemblyName.CodeBase">
          <source>A string that is the URL location of the assembly.</source>
          <target state="translated">Строка, представляющая URL-адрес расположения сборки.</target>       </trans-unit>
        <trans-unit id="179" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.AssemblyName.CodeBase">
          <source>When an assembly is loaded, this value can also be obtained using the <ph id="ph1">&lt;xref:System.Reflection.Assembly.CodeBase%2A?displayProperty=nameWithType&gt;</ph> property.</source>
          <target state="translated">Если сборка загружается, это значение можно получить с помощью <ph id="ph1">&lt;xref:System.Reflection.Assembly.CodeBase%2A?displayProperty=nameWithType&gt;</ph> свойство.</target>       </trans-unit>
        <trans-unit id="180" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.AssemblyName.CodeBase">
          <source>If the assembly was loaded as a byte array, this property returns the location of the caller of the <ph id="ph1">&lt;xref:System.Reflection.Assembly.Load%28System.Byte%5B%5D%29&gt;</ph> method overload, not the location of the loaded assembly.</source>
          <target state="translated">Если сборка была загружена как массив байтов, это свойство возвращает расположение объекта, вызывающего <ph id="ph1">&lt;xref:System.Reflection.Assembly.Load%28System.Byte%5B%5D%29&gt;</ph> перегрузка метода, а не загруженной сборки.</target>       </trans-unit>
        <trans-unit id="181" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.AssemblyName.CodeBase">
          <source>Do not use an <ph id="ph1">&lt;xref:System.Reflection.AssemblyName&gt;</ph> with only the <ph id="ph2">&lt;xref:System.Reflection.AssemblyName.CodeBase%2A&gt;</ph> property set.</source>
          <target state="translated">Не используйте <ph id="ph1">&lt;xref:System.Reflection.AssemblyName&gt;</ph> только с <ph id="ph2">&lt;xref:System.Reflection.AssemblyName.CodeBase%2A&gt;</ph> набор свойств.</target>       </trans-unit>
        <trans-unit id="182" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.AssemblyName.CodeBase">
          <source>The <ph id="ph1">&lt;xref:System.Reflection.AssemblyName.CodeBase%2A&gt;</ph> property does not supply any elements of the assembly identity (such as name or version), so loading does not occur according to load-by-identity rules, as you would expect from the <ph id="ph2">&lt;xref:System.Reflection.Assembly.Load%2A&gt;</ph> method.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Reflection.AssemblyName.CodeBase%2A&gt;</ph> Свойство не поддерживает какие-либо элементы удостоверения сборки (например, name и version), поэтому загрузка не происходит согласно правилам нагрузки, удостоверение, как и следовало ожидать из <ph id="ph2">&lt;xref:System.Reflection.Assembly.Load%2A&gt;</ph> метод.</target>       </trans-unit>
        <trans-unit id="183" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.AssemblyName.CodeBase">
          <source>Instead, the assembly is loaded using load-from rules.</source>
          <target state="translated">Вместо этого сборка загружена с помощью загрузить из правил.</target>       </trans-unit>
        <trans-unit id="184" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.AssemblyName.CodeBase">
          <source>For information about the disadvantages of using the load-from context, see the <ph id="ph1">&lt;xref:System.Reflection.Assembly.LoadFrom%2A?displayProperty=nameWithType&gt;</ph> method overload or <bpt id="p1">[</bpt>Best Practices for Assembly Loading<ept id="p1">](~/docs/framework/deployment/best-practices-for-assembly-loading.md)</ept>.</source>
          <target state="translated">Сведения о недостатках контекст загрузки с помощью см. в разделе <ph id="ph1">&lt;xref:System.Reflection.Assembly.LoadFrom%2A?displayProperty=nameWithType&gt;</ph> перегрузка метода или <bpt id="p1">[</bpt>советы и рекомендации для загрузки сборок<ept id="p1">](~/docs/framework/deployment/best-practices-for-assembly-loading.md)</ept>.</target>       </trans-unit>
        <trans-unit id="185" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.AssemblyName.CodeBase">
          <source>The following example emits a dynamic assembly and saves it to the current directory.</source>
          <target state="translated">В следующем примере создается динамическая сборка и сохраняет его в текущий каталог.</target>       </trans-unit>
        <trans-unit id="186" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.AssemblyName.CodeBase">
          <source>When the assembly is created, the <ph id="ph1">&lt;xref:System.Reflection.AssemblyName.CodeBase%2A&gt;</ph> property is used to specify the directory where the assembly is saved.</source>
          <target state="translated">При создании сборки <ph id="ph1">&lt;xref:System.Reflection.AssemblyName.CodeBase%2A&gt;</ph> свойство используется для указания каталога, где сохранена сборка.</target>       </trans-unit>
        <trans-unit id="187" translate="yes" xml:space="preserve" uid="P:System.Reflection.AssemblyName.ContentType">
          <source>Gets or sets a value that indicates what type of content the assembly contains.</source>
          <target state="translated">Получает или задает значение, указывающее, какой тип содержимого содержит сборка.</target>       </trans-unit>
        <trans-unit id="188" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.AssemblyName.ContentType">
          <source>A value that indicates what type of content the assembly contains.</source>
          <target state="translated">Значение, указывающее, какой тип содержимого сборка содержит.</target>       </trans-unit>
        <trans-unit id="189" translate="yes" xml:space="preserve" uid="P:System.Reflection.AssemblyName.CultureInfo">
          <source>Gets or sets the culture supported by the assembly.</source>
          <target state="translated">Возвращает или задает язык и региональные параметры, поддерживаемые сборкой.</target>       </trans-unit>
        <trans-unit id="190" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.AssemblyName.CultureInfo">
          <source>An object that represents the culture supported by the assembly.</source>
          <target state="translated">Объект, представляющий язык и региональные параметры, поддерживаемые сборкой.</target>       </trans-unit>
        <trans-unit id="191" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.AssemblyName.CultureInfo">
          <source>The following example emits a dynamic assembly and saves it to the current directory.</source>
          <target state="translated">В следующем примере создается динамическая сборка и сохраняет его в текущий каталог.</target>       </trans-unit>
        <trans-unit id="192" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.AssemblyName.CultureInfo">
          <source>When the assembly is created, the <ph id="ph1">&lt;xref:System.Reflection.AssemblyName.CultureInfo%2A&gt;</ph> property is used to specify the culture, which is part of the assembly's display name.</source>
          <target state="translated">При создании сборки <ph id="ph1">&lt;xref:System.Reflection.AssemblyName.CultureInfo%2A&gt;</ph> свойство используется для указания языка и региональных параметров, который является частью отображаемое имя сборки.</target>       </trans-unit>
        <trans-unit id="193" translate="yes" xml:space="preserve" uid="P:System.Reflection.AssemblyName.CultureName">
          <source>Gets or sets the name of the culture associated with the assembly.</source>
          <target state="translated">Получает или задает имя языка и региональных параметров, связанных со сборкой.</target>       </trans-unit>
        <trans-unit id="194" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.AssemblyName.CultureName">
          <source>The culture name.</source>
          <target state="translated">Имя языка и региональных параметров.</target>       </trans-unit>
        <trans-unit id="195" translate="yes" xml:space="preserve" uid="P:System.Reflection.AssemblyName.EscapedCodeBase">
          <source>Gets the URI, including escape characters, that represents the codebase.</source>
          <target state="translated">Получает универсальный код доступа (URI), предоставляющий базовый код, включая escape-символы.</target>       </trans-unit>
        <trans-unit id="196" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.AssemblyName.EscapedCodeBase">
          <source>A URI with escape characters.</source>
          <target state="translated">Универсальный код доступа (URI) с escape-символами.</target>       </trans-unit>
        <trans-unit id="197" translate="yes" xml:space="preserve" uid="P:System.Reflection.AssemblyName.Flags">
          <source>Gets or sets the attributes of the assembly.</source>
          <target state="translated">Возвращает или задает атрибуты сборки.</target>       </trans-unit>
        <trans-unit id="198" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.AssemblyName.Flags">
          <source>A value that represents the attributes of the assembly.</source>
          <target state="translated">Ззначение, представляющее атрибуты сборки.</target>       </trans-unit>
        <trans-unit id="199" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.AssemblyName.Flags">
          <source>The following example emits a dynamic assembly and saves it to the current directory.</source>
          <target state="translated">В следующем примере создается динамическая сборка и сохраняет его в текущий каталог.</target>       </trans-unit>
        <trans-unit id="200" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.AssemblyName.Flags">
          <source>When the assembly is created, the <ph id="ph1">&lt;xref:System.Reflection.AssemblyName.Flags%2A&gt;</ph> property is used to specify that the assembly has a public key.</source>
          <target state="translated">При создании сборки <ph id="ph1">&lt;xref:System.Reflection.AssemblyName.Flags%2A&gt;</ph> свойство используется для указания, что сборка имеет открытый ключ.</target>       </trans-unit>
        <trans-unit id="201" translate="yes" xml:space="preserve" uid="P:System.Reflection.AssemblyName.FullName">
          <source>Gets the full name of the assembly, also known as the display name.</source>
          <target state="translated">Возвращает полное имя сборки, также называемое отображаемым именем.</target>       </trans-unit>
        <trans-unit id="202" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.AssemblyName.FullName">
          <source>A string that is the full name of the assembly, also known as the display name.</source>
          <target state="translated">Строка, являющаяся полным именем сборки, также называемая отображаемым именем.</target>       </trans-unit>
        <trans-unit id="203" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.AssemblyName.FullName">
          <source>The display name typically consists of the simple name, version number, supported culture, and public key.</source>
          <target state="translated">Отображаемое имя обычно состоит из простого имени, номер версии, поддерживаемую культуру и открытый ключ.</target>       </trans-unit>
        <trans-unit id="204" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.AssemblyName.FullName">
          <source>For example:</source>
          <target state="translated">Пример:</target>       </trans-unit>
        <trans-unit id="205" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.AssemblyName.FullName">
          <source>Writing your own code to parse display names is not recommended.</source>
          <target state="translated">Создание собственного кода для разбора отображаемых имен не рекомендуется.</target>       </trans-unit>
        <trans-unit id="206" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.AssemblyName.FullName">
          <source>Instead, pass the display name to the <ph id="ph1">&lt;xref:System.Reflection.AssemblyName.%23ctor%2A&gt;</ph> constructor, which parses it and populates the appropriate fields of the new <ph id="ph2">&lt;xref:System.Reflection.AssemblyName&gt;</ph>.</source>
          <target state="translated">Вместо этого передать отображаемое имя для <ph id="ph1">&lt;xref:System.Reflection.AssemblyName.%23ctor%2A&gt;</ph> конструктор, который выполняет синтаксический анализ его и заполняет соответствующие поля нового <ph id="ph2">&lt;xref:System.Reflection.AssemblyName&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="207" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.AssemblyName.FullName">
          <source>When an assembly is loaded, this value can also be obtained using the <ph id="ph1">&lt;xref:System.Reflection.Assembly.FullName%2A?displayProperty=nameWithType&gt;</ph> property.</source>
          <target state="translated">Если сборка загружается, это значение можно получить с помощью <ph id="ph1">&lt;xref:System.Reflection.Assembly.FullName%2A?displayProperty=nameWithType&gt;</ph> свойство.</target>       </trans-unit>
        <trans-unit id="208" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.AssemblyName.FullName">
          <source>The following example emits a dynamic assembly and saves it to the current directory.</source>
          <target state="translated">В следующем примере создается динамическая сборка и сохраняет его в текущий каталог.</target>       </trans-unit>
        <trans-unit id="209" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.AssemblyName.FullName">
          <source>When the assembly is created, the code example sets the <ph id="ph1">&lt;xref:System.Reflection.AssemblyName.Name%2A&gt;</ph>, <ph id="ph2">&lt;xref:System.Reflection.AssemblyName.Version%2A&gt;</ph>, <ph id="ph3">&lt;xref:System.Reflection.AssemblyName.CultureInfo%2A&gt;</ph>, and <ph id="ph4">&lt;xref:System.Reflection.AssemblyName.KeyPair%2A&gt;</ph> properties, which together comprise an assembly's full name, or display name.</source>
          <target state="translated">При создании сборки в примере кода задается <ph id="ph1">&lt;xref:System.Reflection.AssemblyName.Name%2A&gt;</ph>, <ph id="ph2">&lt;xref:System.Reflection.AssemblyName.Version%2A&gt;</ph>, <ph id="ph3">&lt;xref:System.Reflection.AssemblyName.CultureInfo%2A&gt;</ph>, и <ph id="ph4">&lt;xref:System.Reflection.AssemblyName.KeyPair%2A&gt;</ph> свойства, которые вместе составляют полное имя сборки или отображаемое имя.</target>       </trans-unit>
        <trans-unit id="210" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.AssemblyName.FullName">
          <source>The <ph id="ph1">&lt;xref:System.Reflection.AssemblyName.FullName%2A&gt;</ph> property is then used to retrieve the display name.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Reflection.AssemblyName.FullName%2A&gt;</ph> Свойство затем используется для получения отображаемого имени.</target>       </trans-unit>
        <trans-unit id="211" translate="yes" xml:space="preserve" uid="M:System.Reflection.AssemblyName.GetAssemblyName(System.String)">
          <source>The path for the assembly whose <ph id="ph1">&lt;see cref="T:System.Reflection.AssemblyName" /&gt;</ph> is to be returned.</source>
          <target state="translated">Путь к сборки, свойство <ph id="ph1">&lt;see cref="T:System.Reflection.AssemblyName" /&gt;</ph> которой нужно возвратить.</target>       </trans-unit>
        <trans-unit id="212" translate="yes" xml:space="preserve" uid="M:System.Reflection.AssemblyName.GetAssemblyName(System.String)">
          <source>Gets the <ph id="ph1">&lt;see cref="T:System.Reflection.AssemblyName" /&gt;</ph> for a given file.</source>
          <target state="translated">Возвращает <ph id="ph1">&lt;see cref="T:System.Reflection.AssemblyName" /&gt;</ph> для заданного файла.</target>       </trans-unit>
        <trans-unit id="213" translate="yes" xml:space="preserve" uid="M:System.Reflection.AssemblyName.GetAssemblyName(System.String)">
          <source>An object that represents the given assembly file.</source>
          <target state="translated">Объект , представляющий данный файл сборки.</target>       </trans-unit>
        <trans-unit id="214" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.AssemblyName.GetAssemblyName(System.String)">
          <source>This will only work if the file contains an assembly manifest.</source>
          <target state="translated">Работает, только если файл содержит манифест сборки.</target>       </trans-unit>
        <trans-unit id="215" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.AssemblyName.GetAssemblyName(System.String)">
          <source>This method causes the file to be opened and closed, but the assembly is not added to this domain.</source>
          <target state="translated">Этот метод вызывает открытие или закрытие файла, но сборка не добавляется к этому домену.</target>       </trans-unit>
        <trans-unit id="216" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.AssemblyName.GetAssemblyName(System.String)">
          <source>The following example gets the <ph id="ph1">&lt;xref:System.Reflection.AssemblyName&gt;</ph> for an assembly on disk.</source>
          <target state="translated">В следующем примере извлекается <ph id="ph1">&lt;xref:System.Reflection.AssemblyName&gt;</ph> для сборки на диске.</target>       </trans-unit>
        <trans-unit id="217" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.AssemblyName.GetAssemblyName(System.String)">
          <source>It will not run unless you replace the string "MyAssembly.exe" with the file name of an assembly (including the path, if necessary) on your hard disk.</source>
          <target state="translated">Она не запустится, пока не замените строку «MyAssembly.exe» с именем файла сборки (при необходимости включая путь) на жестком диске.</target>       </trans-unit>
        <trans-unit id="218" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.AssemblyName.GetAssemblyName(System.String)">
          <source>Alternatively, you can compile this example as "MyAssembly.exe".</source>
          <target state="translated">Кроме того можно скомпилировать этот пример под названием «MyAssembly.exe».</target>       </trans-unit>
        <trans-unit id="219" translate="yes" xml:space="preserve" uid="M:System.Reflection.AssemblyName.GetAssemblyName(System.String)">
          <source><ph id="ph1">&lt;paramref name="assemblyFile" /&gt;</ph> is <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated">Свойство <ph id="ph1">&lt;paramref name="assemblyFile" /&gt;</ph> имеет значение <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="220" translate="yes" xml:space="preserve" uid="M:System.Reflection.AssemblyName.GetAssemblyName(System.String)">
          <source><ph id="ph1">&lt;paramref name="assemblyFile" /&gt;</ph> is invalid, such as an assembly with an invalid culture.</source>
          <target state="translated">Параметр <ph id="ph1">&lt;paramref name="assemblyFile" /&gt;</ph> является недопустимым, как сборка с недопустимыми языком и региональными параметрами.</target>       </trans-unit>
        <trans-unit id="221" translate="yes" xml:space="preserve" uid="M:System.Reflection.AssemblyName.GetAssemblyName(System.String)">
          <source><ph id="ph1">&lt;paramref name="assemblyFile" /&gt;</ph> is not found.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="assemblyFile" /&gt;</ph> не найден.</target>       </trans-unit>
        <trans-unit id="222" translate="yes" xml:space="preserve" uid="M:System.Reflection.AssemblyName.GetAssemblyName(System.String)">
          <source>The caller does not have path discovery permission.</source>
          <target state="translated">У вызывающего объекта отсутствует необходимое разрешение на обнаружение пути.</target>       </trans-unit>
        <trans-unit id="223" translate="yes" xml:space="preserve" uid="M:System.Reflection.AssemblyName.GetAssemblyName(System.String)">
          <source><ph id="ph1">&lt;paramref name="assemblyFile" /&gt;</ph> is not a valid assembly.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="assemblyFile" /&gt;</ph> не является допустимой сборкой.</target>       </trans-unit>
        <trans-unit id="224" translate="yes" xml:space="preserve" uid="M:System.Reflection.AssemblyName.GetAssemblyName(System.String)">
          <source>An assembly or module was loaded twice with two different sets of evidence.</source>
          <target state="translated">Сборка или модуль был загружен дважды с двумя разными наборами свидетельств.</target>       </trans-unit>
        <trans-unit id="225" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.AssemblyName.GetAssemblyName(System.String)">
          <source>for access to information in the path.</source>
          <target state="translated">для доступа к сведениям о пути.</target>       </trans-unit>
        <trans-unit id="226" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.AssemblyName.GetAssemblyName(System.String)">
          <source>Associated enumeration: <ph id="ph1">&lt;see cref="F:System.Security.Permissions.FileIOPermissionAccess.PathDiscovery" /&gt;</ph>.</source>
          <target state="translated">Связанное перечисление: <ph id="ph1">&lt;see cref="F:System.Security.Permissions.FileIOPermissionAccess.PathDiscovery" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="227" translate="yes" xml:space="preserve" uid="M:System.Reflection.AssemblyName.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
          <source>The object to be populated with serialization information.</source>
          <target state="translated">Объект, для которого будут заполнены сведения о сериализации.</target>       </trans-unit>
        <trans-unit id="228" translate="yes" xml:space="preserve" uid="M:System.Reflection.AssemblyName.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
          <source>The destination context of the serialization.</source>
          <target state="translated">Контекст назначения сериализации.</target>       </trans-unit>
        <trans-unit id="229" translate="yes" xml:space="preserve" uid="M:System.Reflection.AssemblyName.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
          <source>Gets serialization information with all the data needed to recreate an instance of this <ph id="ph1">&lt;see langword="AssemblyName" /&gt;</ph>.</source>
          <target state="translated">Получает сведения сериализации со всеми данными, необходимыми для повторного создания экземпляра этого <ph id="ph1">&lt;see langword="AssemblyName" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="230" translate="yes" xml:space="preserve" uid="M:System.Reflection.AssemblyName.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
          <source><ph id="ph1">&lt;paramref name="info" /&gt;</ph> is <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated">Свойство <ph id="ph1">&lt;paramref name="info" /&gt;</ph> имеет значение <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="231" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.AssemblyName.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
          <source>Requires full trust for the immediate caller.</source>
          <target state="translated">требуется полное доверие для непосредственно вызывающего метода.</target>       </trans-unit>
        <trans-unit id="232" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.AssemblyName.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
          <source>This member cannot be used by partially trusted or transparent code.</source>
          <target state="translated">Этот член не может использоваться частично доверенным или прозрачным кодом.</target>       </trans-unit>
        <trans-unit id="233" translate="yes" xml:space="preserve" uid="M:System.Reflection.AssemblyName.GetPublicKey">
          <source>Gets the public key of the assembly.</source>
          <target state="translated">Возвращает открытый ключ сборки.</target>       </trans-unit>
        <trans-unit id="234" translate="yes" xml:space="preserve" uid="M:System.Reflection.AssemblyName.GetPublicKey">
          <source>A byte array that contains the public key of the assembly.</source>
          <target state="translated">Массив байтов, содержащий открытый ключ сборки.</target>       </trans-unit>
        <trans-unit id="235" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.AssemblyName.GetPublicKey">
          <source>The following example emits a dynamic assembly and saves it to the current directory.</source>
          <target state="translated">В следующем примере создается динамическая сборка и сохраняет его в текущий каталог.</target>       </trans-unit>
        <trans-unit id="236" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.AssemblyName.GetPublicKey">
          <source>When the assembly is created, the <ph id="ph1">&lt;xref:System.Reflection.AssemblyName.SetPublicKey%2A&gt;</ph> method is used to give the assembly a public key.</source>
          <target state="translated">При создании сборки <ph id="ph1">&lt;xref:System.Reflection.AssemblyName.SetPublicKey%2A&gt;</ph> метод используется для обеспечения открытый ключ сборки.</target>       </trans-unit>
        <trans-unit id="237" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.AssemblyName.GetPublicKey">
          <source>The <ph id="ph1">&lt;xref:System.Reflection.AssemblyName.GetPublicKey%2A&gt;</ph> method is then used to retrieve the public key, which is displayed to the console.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Reflection.AssemblyName.GetPublicKey%2A&gt;</ph> Метод затем используется для получения открытый ключ, который выводится на консоль.</target>       </trans-unit>
        <trans-unit id="238" translate="yes" xml:space="preserve" uid="M:System.Reflection.AssemblyName.GetPublicKey">
          <source>A public key was provided (for example, by using the <ph id="ph1">&lt;see cref="M:System.Reflection.AssemblyName.SetPublicKey(System.Byte[])" /&gt;</ph> method), but no public key token was provided.</source>
          <target state="translated">Был предоставлен открытый ключ (например, с помощью метода <ph id="ph1">&lt;see cref="M:System.Reflection.AssemblyName.SetPublicKey(System.Byte[])" /&gt;</ph>), но не был предоставлен маркер открытого ключа.</target>       </trans-unit>
        <trans-unit id="239" translate="yes" xml:space="preserve" uid="M:System.Reflection.AssemblyName.GetPublicKeyToken">
          <source>Gets the public key token, which is the last 8 bytes of the SHA-1 hash of the public key under which the application or assembly is signed.</source>
          <target state="translated">Возвращает токен открытого ключа, представляющий собой последние 8 байт хэш-значения SHA-1 открытого ключа, которым подписаны приложение или сборка.</target>       </trans-unit>
        <trans-unit id="240" translate="yes" xml:space="preserve" uid="M:System.Reflection.AssemblyName.GetPublicKeyToken">
          <source>A byte array that contains the public key token.</source>
          <target state="translated">Массив байтов, содержащий токен открытого ключа.</target>       </trans-unit>
        <trans-unit id="241" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.AssemblyName.GetPublicKeyToken">
          <source>The following example emits a dynamic assembly and saves it to the current directory.</source>
          <target state="translated">В следующем примере создается динамическая сборка и сохраняет его в текущий каталог.</target>       </trans-unit>
        <trans-unit id="242" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.AssemblyName.GetPublicKeyToken">
          <source>When the assembly is created, the <ph id="ph1">&lt;xref:System.Reflection.AssemblyName.SetPublicKeyToken%2A&gt;</ph> method is used to set the assembly's public key token.</source>
          <target state="translated">При создании сборки <ph id="ph1">&lt;xref:System.Reflection.AssemblyName.SetPublicKeyToken%2A&gt;</ph> метод используется для задания токен открытого ключа сборки.</target>       </trans-unit>
        <trans-unit id="243" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.AssemblyName.GetPublicKeyToken">
          <source>The <ph id="ph1">&lt;xref:System.Reflection.AssemblyName.GetPublicKeyToken%2A&gt;</ph> method is then used to retrieve the public key token, which is displayed to the console.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Reflection.AssemblyName.GetPublicKeyToken%2A&gt;</ph> Метод затем используется для получения токен открытого ключа, который выводится на консоль.</target>       </trans-unit>
        <trans-unit id="244" translate="yes" xml:space="preserve" uid="P:System.Reflection.AssemblyName.HashAlgorithm">
          <source>Gets or sets the hash algorithm used by the assembly manifest.</source>
          <target state="translated">Возвращает или задает алгоритм хэширования, используемый манифестом сборки.</target>       </trans-unit>
        <trans-unit id="245" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.AssemblyName.HashAlgorithm">
          <source>The hash algorithm used by the assembly manifest.</source>
          <target state="translated">Алгоритм хэширования, используемый манифестом сборки.</target>       </trans-unit>
        <trans-unit id="246" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.AssemblyName.HashAlgorithm">
          <source>Starting with the <ph id="ph1">[!INCLUDE[net_v40_long](~/includes/net-v40-long-md.md)]</ph>, the <ph id="ph2">&lt;xref:System.Reflection.AssemblyName.HashAlgorithm%2A&gt;</ph> property of an <ph id="ph3">&lt;xref:System.Reflection.AssemblyName&gt;</ph> object that is returned by the <ph id="ph4">&lt;xref:System.Reflection.Assembly.GetReferencedAssemblies%2A?displayProperty=nameWithType&gt;</ph> method is <ph id="ph5">&lt;xref:System.Configuration.Assemblies.AssemblyHashAlgorithm.None?displayProperty=nameWithType&gt;</ph> if there is no hash algorithm for the referenced assembly, or if the hash algorithm of the referenced assembly is not identified by the <ph id="ph6">&lt;xref:System.Configuration.Assemblies.AssemblyHashAlgorithm?displayProperty=nameWithType&gt;</ph> enumeration.</source>
          <target state="translated">Начиная с <ph id="ph1">[!INCLUDE[net_v40_long](~/includes/net-v40-long-md.md)]</ph>, <ph id="ph2">&lt;xref:System.Reflection.AssemblyName.HashAlgorithm%2A&gt;</ph> свойство <ph id="ph3">&lt;xref:System.Reflection.AssemblyName&gt;</ph> объект, возвращаемый <ph id="ph4">&lt;xref:System.Reflection.Assembly.GetReferencedAssemblies%2A?displayProperty=nameWithType&gt;</ph> метод <ph id="ph5">&lt;xref:System.Configuration.Assemblies.AssemblyHashAlgorithm.None?displayProperty=nameWithType&gt;</ph> при хэш-алгоритм по связанной сборке, или в том случае, если хэш-алгоритм упоминаемого Сборка идентифицируется <ph id="ph6">&lt;xref:System.Configuration.Assemblies.AssemblyHashAlgorithm?displayProperty=nameWithType&gt;</ph> перечисления.</target>       </trans-unit>
        <trans-unit id="247" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.AssemblyName.HashAlgorithm">
          <source>In previous versions of the .NET Framework, the <ph id="ph1">&lt;xref:System.Reflection.AssemblyName.HashAlgorithm%2A&gt;</ph> property returned <ph id="ph2">&lt;xref:System.Configuration.Assemblies.AssemblyHashAlgorithm.SHA1?displayProperty=nameWithType&gt;</ph> in this situation.</source>
          <target state="translated">В предыдущих версиях платформы .NET Framework <ph id="ph1">&lt;xref:System.Reflection.AssemblyName.HashAlgorithm%2A&gt;</ph> свойства, возвращаемое <ph id="ph2">&lt;xref:System.Configuration.Assemblies.AssemblyHashAlgorithm.SHA1?displayProperty=nameWithType&gt;</ph> в этой ситуации.</target>       </trans-unit>
        <trans-unit id="248" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.AssemblyName.HashAlgorithm">
          <source>The following example emits a dynamic assembly and saves it to the current directory.</source>
          <target state="translated">В следующем примере создается динамическая сборка и сохраняет его в текущий каталог.</target>       </trans-unit>
        <trans-unit id="249" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.AssemblyName.HashAlgorithm">
          <source>When the assembly is created, the <ph id="ph1">&lt;xref:System.Reflection.AssemblyName.HashAlgorithm%2A&gt;</ph> property is used to set the hash algorithm for the assembly manifest.</source>
          <target state="translated">При создании сборки <ph id="ph1">&lt;xref:System.Reflection.AssemblyName.HashAlgorithm%2A&gt;</ph> свойство используется для задания хэш-алгоритм для манифеста сборки.</target>       </trans-unit>
        <trans-unit id="250" translate="yes" xml:space="preserve" uid="P:System.Reflection.AssemblyName.KeyPair">
          <source>Gets or sets the public and private cryptographic key pair that is used to create a strong name signature for the assembly.</source>
          <target state="translated">Возвращает или задает пару открытого и закрытого ключей шифрования, которая используется для создания подписи со строгим именем для сборки.</target>       </trans-unit>
        <trans-unit id="251" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.AssemblyName.KeyPair">
          <source>The public and private cryptographic key pair to be used to create a strong name for the assembly.</source>
          <target state="translated">Пара открытого и закрытого ключей шифрования, которая должна использоваться для создания подписи со строгим именем для сборки.</target>       </trans-unit>
        <trans-unit id="252" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.AssemblyName.KeyPair">
          <source>When the runtime loads an assembly, it does not set the <ph id="ph1">&lt;xref:System.Reflection.AssemblyName.KeyPair%2A&gt;</ph> property.</source>
          <target state="translated">При загрузке сборки среда выполнения не устанавливается <ph id="ph1">&lt;xref:System.Reflection.AssemblyName.KeyPair%2A&gt;</ph> свойство.</target>       </trans-unit>
        <trans-unit id="253" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.AssemblyName.KeyPair">
          <source>The getter for the property is only useful if the user set the property before using the <ph id="ph1">&lt;xref:System.Reflection.AssemblyName&gt;</ph> object to create a dynamic assembly, and subsequently wants to retrieve the key pair.</source>
          <target state="translated">Метод считывания свойства применяется только тогда, если пользователь задал свойство перед использованием <ph id="ph1">&lt;xref:System.Reflection.AssemblyName&gt;</ph> объекта для создания динамической сборки, а затем хочет извлечь эту пару ключей.</target>       </trans-unit>
        <trans-unit id="254" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.AssemblyName.KeyPair">
          <source>The following example emits a dynamic assembly and saves it to the current directory.</source>
          <target state="translated">В следующем примере создается динамическая сборка и сохраняет его в текущий каталог.</target>       </trans-unit>
        <trans-unit id="255" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.AssemblyName.KeyPair">
          <source>When the assembly is created, the <ph id="ph1">&lt;xref:System.Reflection.AssemblyName.KeyPair%2A&gt;</ph> property is used to set the assembly's public and private cryptographic keys.</source>
          <target state="translated">При создании сборки <ph id="ph1">&lt;xref:System.Reflection.AssemblyName.KeyPair%2A&gt;</ph> свойство используется для задания сборки открытого и закрытого криптографических ключей.</target>       </trans-unit>
        <trans-unit id="256" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.AssemblyName.KeyPair">
          <source>.</source>
          <target state="translated">.</target>       </trans-unit>
        <trans-unit id="257" translate="yes" xml:space="preserve" uid="P:System.Reflection.AssemblyName.Name">
          <source>Gets or sets the simple name of the assembly.</source>
          <target state="translated">Получает или задает простое имя сборки.</target>       </trans-unit>
        <trans-unit id="258" translate="yes" xml:space="preserve" uid="P:System.Reflection.AssemblyName.Name">
          <source>This is usually, but not necessarily, the file name of the manifest file of the assembly, minus its extension.</source>
          <target state="translated">Это, как правило (но не обязательно), имя файла манифеста сборки без указания его расширения.</target>       </trans-unit>
        <trans-unit id="259" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.AssemblyName.Name">
          <source>The simple name of the assembly.</source>
          <target state="translated">Простое имя сборки.</target>       </trans-unit>
        <trans-unit id="260" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.AssemblyName.Name">
          <source>The manifest file is the file that contains the assembly manifest.</source>
          <target state="translated">Файл манифеста — файл, содержащий манифест сборки.</target>       </trans-unit>
        <trans-unit id="261" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.AssemblyName.Name">
          <source>For example, the simple name of a single-file assembly named "MyAssembly.dll" is "MyAssembly".</source>
          <target state="translated">Например простое имя сборки один файл с именем «MyAssembly.dll» — «MyAssembly».</target>       </trans-unit>
        <trans-unit id="262" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.AssemblyName.Name">
          <source>The following example emits a dynamic assembly and saves it to the current directory.</source>
          <target state="translated">В следующем примере создается динамическая сборка и сохраняет его в текущий каталог.</target>       </trans-unit>
        <trans-unit id="263" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.AssemblyName.Name">
          <source>When the assembly is created, the <ph id="ph1">&lt;xref:System.Reflection.AssemblyName.Name%2A&gt;</ph> property is used to set the simple name of the dynamic assembly.</source>
          <target state="translated">При создании сборки <ph id="ph1">&lt;xref:System.Reflection.AssemblyName.Name%2A&gt;</ph> свойство используется для задания простое имя динамической сборки.</target>       </trans-unit>
        <trans-unit id="264" translate="yes" xml:space="preserve" uid="M:System.Reflection.AssemblyName.OnDeserialization(System.Object)">
          <source>The source of the deserialization event.</source>
          <target state="translated">Источник события десериализации.</target>       </trans-unit>
        <trans-unit id="265" translate="yes" xml:space="preserve" uid="M:System.Reflection.AssemblyName.OnDeserialization(System.Object)">
          <source>Implements the <ph id="ph1">&lt;see cref="T:System.Runtime.Serialization.ISerializable" /&gt;</ph> interface and is called back by the deserialization event when deserialization is complete.</source>
          <target state="translated">Реализует интерфейс <ph id="ph1">&lt;see cref="T:System.Runtime.Serialization.ISerializable" /&gt;</ph> и вызывается событием десериализации после завершения десериализации в ходе обратного вызова.</target>       </trans-unit>
        <trans-unit id="266" translate="yes" xml:space="preserve" uid="P:System.Reflection.AssemblyName.ProcessorArchitecture">
          <source>Gets or sets a value that identifies the processor and bits-per-word of the platform targeted by an executable.</source>
          <target state="translated">Возвращает или задает значение, указывающее процессор и разрядность слова для платформы, являющейся целевой для исполняемого файла.</target>       </trans-unit>
        <trans-unit id="267" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.AssemblyName.ProcessorArchitecture">
          <source>One of the enumeration values that identifies the processor and bits-per-word of the platform targeted by an executable.</source>
          <target state="translated">Одно из значений перечисления, которое определяет процессор и разрядность слова для платформы, являющейся целевой для исполняемого файла.</target>       </trans-unit>
        <trans-unit id="268" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.AssemblyName.ProcessorArchitecture">
          <source>Beginning with the <ph id="ph1">[!INCLUDE[net_v40_long](~/includes/net-v40-long-md.md)]</ph>, this property always returns <ph id="ph2">&lt;xref:System.Reflection.ProcessorArchitecture.None?displayProperty=nameWithType&gt;</ph> for reference assemblies.</source>
          <target state="translated">Начиная с версии <ph id="ph1">[!INCLUDE[net_v40_long](~/includes/net-v40-long-md.md)]</ph>, это свойство всегда возвращает <ph id="ph2">&lt;xref:System.Reflection.ProcessorArchitecture.None?displayProperty=nameWithType&gt;</ph> для ссылочных сборок.</target>       </trans-unit>
        <trans-unit id="269" translate="yes" xml:space="preserve" uid="M:System.Reflection.AssemblyName.ReferenceMatchesDefinition(System.Reflection.AssemblyName,System.Reflection.AssemblyName)">
          <source>The reference assembly name.</source>
          <target state="translated">Имя базовой сборки.</target>       </trans-unit>
        <trans-unit id="270" translate="yes" xml:space="preserve" uid="M:System.Reflection.AssemblyName.ReferenceMatchesDefinition(System.Reflection.AssemblyName,System.Reflection.AssemblyName)">
          <source>The assembly name that is compared to the reference assembly.</source>
          <target state="translated">Имя сборки, которое сравнивается с базовой сборкой.</target>       </trans-unit>
        <trans-unit id="271" translate="yes" xml:space="preserve" uid="M:System.Reflection.AssemblyName.ReferenceMatchesDefinition(System.Reflection.AssemblyName,System.Reflection.AssemblyName)">
          <source>Returns a value indicating whether two assembly names are the same.</source>
          <target state="translated">Возвращает значение, указывающее, идентичны ли имена двух сборок.</target>       </trans-unit>
        <trans-unit id="272" translate="yes" xml:space="preserve" uid="M:System.Reflection.AssemblyName.ReferenceMatchesDefinition(System.Reflection.AssemblyName,System.Reflection.AssemblyName)">
          <source>The comparison is based on the simple assembly names.</source>
          <target state="translated">Сравнение — на основе простых имен сборки.</target>       </trans-unit>
        <trans-unit id="273" translate="yes" xml:space="preserve" uid="M:System.Reflection.AssemblyName.ReferenceMatchesDefinition(System.Reflection.AssemblyName,System.Reflection.AssemblyName)">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph> if the simple assembly names are the same; otherwise, <ph id="ph2">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated">Значение <ph id="ph1">&lt;see langword="true" /&gt;</ph>, если простые имена сборок совпадают; в противном случае — значение <ph id="ph2">&lt;see langword="false" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="274" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.AssemblyName.ReferenceMatchesDefinition(System.Reflection.AssemblyName,System.Reflection.AssemblyName)">
          <source>The comparison depends only on the simple assembly name.</source>
          <target state="translated">Сравнение зависит только от простого имени сборки.</target>       </trans-unit>
        <trans-unit id="275" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.AssemblyName.ReferenceMatchesDefinition(System.Reflection.AssemblyName,System.Reflection.AssemblyName)">
          <source>It ignores version, culture, and public key token.</source>
          <target state="translated">Он не учитывает версию, язык и региональные параметры и маркер открытого ключа.</target>       </trans-unit>
        <trans-unit id="276" translate="yes" xml:space="preserve" uid="M:System.Reflection.AssemblyName.SetPublicKey(System.Byte[])">
          <source>A byte array containing the public key of the assembly.</source>
          <target state="translated">Массив байтов, содержащий открытый ключ сборки.</target>       </trans-unit>
        <trans-unit id="277" translate="yes" xml:space="preserve" uid="M:System.Reflection.AssemblyName.SetPublicKey(System.Byte[])">
          <source>Sets the public key identifying the assembly.</source>
          <target state="translated">Задает открытый ключ, идентифицирующий сборку.</target>       </trans-unit>
        <trans-unit id="278" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.AssemblyName.SetPublicKey(System.Byte[])">
          <source>You must also use the <ph id="ph1">&lt;xref:System.Reflection.AssemblyName.SetPublicKeyToken%2A&gt;</ph> method to provide a public key token.</source>
          <target state="translated">Необходимо также использовать <ph id="ph1">&lt;xref:System.Reflection.AssemblyName.SetPublicKeyToken%2A&gt;</ph> метод, чтобы предоставить токен открытого ключа.</target>       </trans-unit>
        <trans-unit id="279" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.AssemblyName.SetPublicKey(System.Byte[])">
          <source>Otherwise, a <ph id="ph1">&lt;xref:System.Security.SecurityException&gt;</ph> is thrown when the <ph id="ph2">&lt;xref:System.Reflection.AssemblyName.GetPublicKey%2A&gt;</ph> method is called.</source>
          <target state="translated">В противном случае <ph id="ph1">&lt;xref:System.Security.SecurityException&gt;</ph> возникает, когда <ph id="ph2">&lt;xref:System.Reflection.AssemblyName.GetPublicKey%2A&gt;</ph> вызывается метод.</target>       </trans-unit>
        <trans-unit id="280" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.AssemblyName.SetPublicKey(System.Byte[])">
          <source>The following example emits a dynamic assembly and saves it to the current directory.</source>
          <target state="translated">В следующем примере создается динамическая сборка и сохраняет его в текущий каталог.</target>       </trans-unit>
        <trans-unit id="281" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.AssemblyName.SetPublicKey(System.Byte[])">
          <source>When the assembly is created, the <ph id="ph1">&lt;xref:System.Reflection.AssemblyName.SetPublicKey%2A&gt;</ph> method is used to give the assembly a public key.</source>
          <target state="translated">При создании сборки <ph id="ph1">&lt;xref:System.Reflection.AssemblyName.SetPublicKey%2A&gt;</ph> метод используется для обеспечения открытый ключ сборки.</target>       </trans-unit>
        <trans-unit id="282" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.AssemblyName.SetPublicKey(System.Byte[])">
          <source>The <ph id="ph1">&lt;xref:System.Reflection.AssemblyName.GetPublicKey%2A&gt;</ph> method is then used to retrieve the public key, which is displayed to the console.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Reflection.AssemblyName.GetPublicKey%2A&gt;</ph> Метод затем используется для получения открытый ключ, который выводится на консоль.</target>       </trans-unit>
        <trans-unit id="283" translate="yes" xml:space="preserve" uid="M:System.Reflection.AssemblyName.SetPublicKeyToken(System.Byte[])">
          <source>A byte array containing the public key token of the assembly.</source>
          <target state="translated">Массив байтов, содержащий токена открытого ключа сборки.</target>       </trans-unit>
        <trans-unit id="284" translate="yes" xml:space="preserve" uid="M:System.Reflection.AssemblyName.SetPublicKeyToken(System.Byte[])">
          <source>Sets the public key token, which is the last 8 bytes of the SHA-1 hash of the public key under which the application or assembly is signed.</source>
          <target state="translated">Задает токен открытого ключа, представляющий собой последние 8 байт хэш-значения SHA-1 открытого ключа, которым подписаны приложение или сборка.</target>       </trans-unit>
        <trans-unit id="285" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.AssemblyName.SetPublicKeyToken(System.Byte[])">
          <source>When you set the public key by calling the <ph id="ph1">&lt;xref:System.Reflection.AssemblyName.SetPublicKey%2A&gt;</ph> method, you must also use the <ph id="ph2">&lt;xref:System.Reflection.AssemblyName.SetPublicKeyToken%2A&gt;</ph> method to provide a public key token.</source>
          <target state="translated">Если значение открытого ключа, вызвав <ph id="ph1">&lt;xref:System.Reflection.AssemblyName.SetPublicKey%2A&gt;</ph> метод, необходимо также использовать <ph id="ph2">&lt;xref:System.Reflection.AssemblyName.SetPublicKeyToken%2A&gt;</ph> метод, чтобы предоставить токен открытого ключа.</target>       </trans-unit>
        <trans-unit id="286" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.AssemblyName.SetPublicKeyToken(System.Byte[])">
          <source>Otherwise, a <ph id="ph1">&lt;xref:System.Security.SecurityException&gt;</ph> is thrown when the <ph id="ph2">&lt;xref:System.Reflection.AssemblyName.GetPublicKey%2A&gt;</ph> method is called.</source>
          <target state="translated">В противном случае <ph id="ph1">&lt;xref:System.Security.SecurityException&gt;</ph> возникает, когда <ph id="ph2">&lt;xref:System.Reflection.AssemblyName.GetPublicKey%2A&gt;</ph> вызывается метод.</target>       </trans-unit>
        <trans-unit id="287" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.AssemblyName.SetPublicKeyToken(System.Byte[])">
          <source>The following example emits a dynamic assembly and saves it to the current directory.</source>
          <target state="translated">В следующем примере создается динамическая сборка и сохраняет его в текущий каталог.</target>       </trans-unit>
        <trans-unit id="288" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.AssemblyName.SetPublicKeyToken(System.Byte[])">
          <source>When the assembly is created, the <ph id="ph1">&lt;xref:System.Reflection.AssemblyName.SetPublicKeyToken%2A&gt;</ph> method is used to set the assembly's public key token.</source>
          <target state="translated">При создании сборки <ph id="ph1">&lt;xref:System.Reflection.AssemblyName.SetPublicKeyToken%2A&gt;</ph> метод используется для задания токен открытого ключа сборки.</target>       </trans-unit>
        <trans-unit id="289" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.AssemblyName.SetPublicKeyToken(System.Byte[])">
          <source>The <ph id="ph1">&lt;xref:System.Reflection.AssemblyName.GetPublicKeyToken%2A&gt;</ph> method is then used to retrieve the public key token, which is displayed to the console.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Reflection.AssemblyName.GetPublicKeyToken%2A&gt;</ph> Метод затем используется для получения токен открытого ключа, который выводится на консоль.</target>       </trans-unit>
        <trans-unit id="290" translate="yes" xml:space="preserve" uid="M:System.Reflection.AssemblyName.System#Runtime#InteropServices#_AssemblyName#GetIDsOfNames(System.Guid@,System.IntPtr,System.UInt32,System.UInt32,System.IntPtr)">
          <source>Reserved for future use.</source>
          <target state="translated">Зарезервировано для будущего использования.</target>       </trans-unit>
        <trans-unit id="291" translate="yes" xml:space="preserve" uid="M:System.Reflection.AssemblyName.System#Runtime#InteropServices#_AssemblyName#GetIDsOfNames(System.Guid@,System.IntPtr,System.UInt32,System.UInt32,System.IntPtr)">
          <source>Must be IID_NULL.</source>
          <target state="translated">Должно быть равным IID_NULL.</target>       </trans-unit>
        <trans-unit id="292" translate="yes" xml:space="preserve" uid="M:System.Reflection.AssemblyName.System#Runtime#InteropServices#_AssemblyName#GetIDsOfNames(System.Guid@,System.IntPtr,System.UInt32,System.UInt32,System.IntPtr)">
          <source>Passed-in array of names to be mapped.</source>
          <target state="translated">Переданный массив имен, которые необходимо сопоставить.</target>       </trans-unit>
        <trans-unit id="293" translate="yes" xml:space="preserve" uid="M:System.Reflection.AssemblyName.System#Runtime#InteropServices#_AssemblyName#GetIDsOfNames(System.Guid@,System.IntPtr,System.UInt32,System.UInt32,System.IntPtr)">
          <source>Count of the names to be mapped.</source>
          <target state="translated">Количество сопоставляемых имен.</target>       </trans-unit>
        <trans-unit id="294" translate="yes" xml:space="preserve" uid="M:System.Reflection.AssemblyName.System#Runtime#InteropServices#_AssemblyName#GetIDsOfNames(System.Guid@,System.IntPtr,System.UInt32,System.UInt32,System.IntPtr)">
          <source>The locale context in which to interpret the names.</source>
          <target state="translated">Контекст языкового стандарта для интерпретации имен.</target>       </trans-unit>
        <trans-unit id="295" translate="yes" xml:space="preserve" uid="M:System.Reflection.AssemblyName.System#Runtime#InteropServices#_AssemblyName#GetIDsOfNames(System.Guid@,System.IntPtr,System.UInt32,System.UInt32,System.IntPtr)">
          <source>Caller-allocated array that receives the IDs corresponding to the names.</source>
          <target state="translated">Массив, зарезервированный вызывающим объектом, куда помещаются идентификаторы, соответствующие именам.</target>       </trans-unit>
        <trans-unit id="296" translate="yes" xml:space="preserve" uid="M:System.Reflection.AssemblyName.System#Runtime#InteropServices#_AssemblyName#GetIDsOfNames(System.Guid@,System.IntPtr,System.UInt32,System.UInt32,System.IntPtr)">
          <source>Maps a set of names to a corresponding set of dispatch identifiers.</source>
          <target state="translated">Сопоставляет набор имен соответствующему набору идентификаторов диспетчеризации.</target>       </trans-unit>
        <trans-unit id="297" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.AssemblyName.System#Runtime#InteropServices#_AssemblyName#GetIDsOfNames(System.Guid@,System.IntPtr,System.UInt32,System.UInt32,System.IntPtr)">
          <source>This method is for access to managed classes from unmanaged code, and should not be called from managed code.</source>
          <target state="translated">Этот метод предназначен для обеспечения доступа к управляемым классам из неуправляемого кода и не должен вызываться из управляемого кода.</target>       </trans-unit>
        <trans-unit id="298" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.AssemblyName.System#Runtime#InteropServices#_AssemblyName#GetIDsOfNames(System.Guid@,System.IntPtr,System.UInt32,System.UInt32,System.IntPtr)">
          <source>For more information about <ph id="ph1">`IDispatch::GetIDsOfNames`</ph>, see the MSDN Library.</source>
          <target state="translated">Дополнительные сведения о <ph id="ph1">`IDispatch::GetIDsOfNames`</ph>, см. в библиотеке MSDN.</target>       </trans-unit>
        <trans-unit id="299" translate="yes" xml:space="preserve" uid="M:System.Reflection.AssemblyName.System#Runtime#InteropServices#_AssemblyName#GetIDsOfNames(System.Guid@,System.IntPtr,System.UInt32,System.UInt32,System.IntPtr)">
          <source>Late-bound access using the COM <bpt id="p1">&lt;c&gt;</bpt>IDispatch<ept id="p1">&lt;/c&gt;</ept> interface is not supported.</source>
          <target state="translated">Доступ с поздним связыванием с помощью COM-интерфейса <bpt id="p1">&lt;c&gt;</bpt>IDispatch<ept id="p1">&lt;/c&gt;</ept> не поддерживается.</target>       </trans-unit>
        <trans-unit id="300" translate="yes" xml:space="preserve" uid="M:System.Reflection.AssemblyName.System#Runtime#InteropServices#_AssemblyName#GetTypeInfo(System.UInt32,System.UInt32,System.IntPtr)">
          <source>The type information to return.</source>
          <target state="translated">Возвращаемые сведения о типе.</target>       </trans-unit>
        <trans-unit id="301" translate="yes" xml:space="preserve" uid="M:System.Reflection.AssemblyName.System#Runtime#InteropServices#_AssemblyName#GetTypeInfo(System.UInt32,System.UInt32,System.IntPtr)">
          <source>The locale identifier for the type information.</source>
          <target state="translated">Идентификатор языкового стандарта для сведений о типе.</target>       </trans-unit>
        <trans-unit id="302" translate="yes" xml:space="preserve" uid="M:System.Reflection.AssemblyName.System#Runtime#InteropServices#_AssemblyName#GetTypeInfo(System.UInt32,System.UInt32,System.IntPtr)">
          <source>Receives a pointer to the requested type information object.</source>
          <target state="translated">Получает указатель на объект с запрошенными сведениями о типе.</target>       </trans-unit>
        <trans-unit id="303" translate="yes" xml:space="preserve" uid="M:System.Reflection.AssemblyName.System#Runtime#InteropServices#_AssemblyName#GetTypeInfo(System.UInt32,System.UInt32,System.IntPtr)">
          <source>Retrieves the type information for an object, which can then be used to get the type information for an interface.</source>
          <target state="translated">Возвращает сведения о типе объекта, которые затем могут использоваться для получения сведений о типе интерфейса.</target>       </trans-unit>
        <trans-unit id="304" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.AssemblyName.System#Runtime#InteropServices#_AssemblyName#GetTypeInfo(System.UInt32,System.UInt32,System.IntPtr)">
          <source>This method is for access to managed classes from unmanaged code, and should not be called from managed code.</source>
          <target state="translated">Этот метод предназначен для обеспечения доступа к управляемым классам из неуправляемого кода и не должен вызываться из управляемого кода.</target>       </trans-unit>
        <trans-unit id="305" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.AssemblyName.System#Runtime#InteropServices#_AssemblyName#GetTypeInfo(System.UInt32,System.UInt32,System.IntPtr)">
          <source>For more information about <ph id="ph1">`IDispatch::GetTypeInfo`</ph>, see the MSDN Library.</source>
          <target state="translated">Дополнительные сведения о <ph id="ph1">`IDispatch::GetTypeInfo`</ph>, см. в библиотеке MSDN.</target>       </trans-unit>
        <trans-unit id="306" translate="yes" xml:space="preserve" uid="M:System.Reflection.AssemblyName.System#Runtime#InteropServices#_AssemblyName#GetTypeInfo(System.UInt32,System.UInt32,System.IntPtr)">
          <source>Late-bound access using the COM <bpt id="p1">&lt;c&gt;</bpt>IDispatch<ept id="p1">&lt;/c&gt;</ept> interface is not supported.</source>
          <target state="translated">Доступ с поздним связыванием с помощью COM-интерфейса <bpt id="p1">&lt;c&gt;</bpt>IDispatch<ept id="p1">&lt;/c&gt;</ept> не поддерживается.</target>       </trans-unit>
        <trans-unit id="307" translate="yes" xml:space="preserve" uid="M:System.Reflection.AssemblyName.System#Runtime#InteropServices#_AssemblyName#GetTypeInfoCount(System.UInt32@)">
          <source>Points to a location that receives the number of type information interfaces provided by the object.</source>
          <target state="translated">Указатель, по которому записывается число предоставляемых объектом интерфейсов, предназначенных для получения сведений о типе.</target>       </trans-unit>
        <trans-unit id="308" translate="yes" xml:space="preserve" uid="M:System.Reflection.AssemblyName.System#Runtime#InteropServices#_AssemblyName#GetTypeInfoCount(System.UInt32@)">
          <source>Retrieves the number of type information interfaces that an object provides (either 0 or 1).</source>
          <target state="translated">Возвращает количество предоставляемых объектом интерфейсов для доступа к сведениям о типе (0 или 1).</target>       </trans-unit>
        <trans-unit id="309" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.AssemblyName.System#Runtime#InteropServices#_AssemblyName#GetTypeInfoCount(System.UInt32@)">
          <source>This method is for access to managed classes from unmanaged code, and should not be called from managed code.</source>
          <target state="translated">Этот метод предназначен для обеспечения доступа к управляемым классам из неуправляемого кода и не должен вызываться из управляемого кода.</target>       </trans-unit>
        <trans-unit id="310" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.AssemblyName.System#Runtime#InteropServices#_AssemblyName#GetTypeInfoCount(System.UInt32@)">
          <source>For more information about <ph id="ph1">`IDispatch::GetTypeInfoCount`</ph>, see the MSDN Library.</source>
          <target state="translated">Дополнительные сведения о <ph id="ph1">`IDispatch::GetTypeInfoCount`</ph>, см. в библиотеке MSDN.</target>       </trans-unit>
        <trans-unit id="311" translate="yes" xml:space="preserve" uid="M:System.Reflection.AssemblyName.System#Runtime#InteropServices#_AssemblyName#GetTypeInfoCount(System.UInt32@)">
          <source>Late-bound access using the COM <bpt id="p1">&lt;c&gt;</bpt>IDispatch<ept id="p1">&lt;/c&gt;</ept> interface is not supported.</source>
          <target state="translated">Доступ с поздним связыванием с помощью COM-интерфейса <bpt id="p1">&lt;c&gt;</bpt>IDispatch<ept id="p1">&lt;/c&gt;</ept> не поддерживается.</target>       </trans-unit>
        <trans-unit id="312" translate="yes" xml:space="preserve" uid="M:System.Reflection.AssemblyName.System#Runtime#InteropServices#_AssemblyName#Invoke(System.UInt32,System.Guid@,System.UInt32,System.Int16,System.IntPtr,System.IntPtr,System.IntPtr,System.IntPtr)">
          <source>Identifies the member.</source>
          <target state="translated">Идентифицирует член.</target>       </trans-unit>
        <trans-unit id="313" translate="yes" xml:space="preserve" uid="M:System.Reflection.AssemblyName.System#Runtime#InteropServices#_AssemblyName#Invoke(System.UInt32,System.Guid@,System.UInt32,System.Int16,System.IntPtr,System.IntPtr,System.IntPtr,System.IntPtr)">
          <source>Reserved for future use.</source>
          <target state="translated">Зарезервировано для будущего использования.</target>       </trans-unit>
        <trans-unit id="314" translate="yes" xml:space="preserve" uid="M:System.Reflection.AssemblyName.System#Runtime#InteropServices#_AssemblyName#Invoke(System.UInt32,System.Guid@,System.UInt32,System.Int16,System.IntPtr,System.IntPtr,System.IntPtr,System.IntPtr)">
          <source>Must be IID_NULL.</source>
          <target state="translated">Должно быть равным IID_NULL.</target>       </trans-unit>
        <trans-unit id="315" translate="yes" xml:space="preserve" uid="M:System.Reflection.AssemblyName.System#Runtime#InteropServices#_AssemblyName#Invoke(System.UInt32,System.Guid@,System.UInt32,System.Int16,System.IntPtr,System.IntPtr,System.IntPtr,System.IntPtr)">
          <source>The locale context in which to interpret arguments.</source>
          <target state="translated">Контекст языкового стандарта, в котором следует интерпретировать аргументы.</target>       </trans-unit>
        <trans-unit id="316" translate="yes" xml:space="preserve" uid="M:System.Reflection.AssemblyName.System#Runtime#InteropServices#_AssemblyName#Invoke(System.UInt32,System.Guid@,System.UInt32,System.Int16,System.IntPtr,System.IntPtr,System.IntPtr,System.IntPtr)">
          <source>Flags describing the context of the call.</source>
          <target state="translated">Флаги, описывающие контекст вызова.</target>       </trans-unit>
        <trans-unit id="317" translate="yes" xml:space="preserve" uid="M:System.Reflection.AssemblyName.System#Runtime#InteropServices#_AssemblyName#Invoke(System.UInt32,System.Guid@,System.UInt32,System.Int16,System.IntPtr,System.IntPtr,System.IntPtr,System.IntPtr)">
          <source>Pointer to a structure containing an array of arguments, an array of argument DispIDs for named arguments, and counts for the number of elements in the arrays.</source>
          <target state="translated">Указатель на структуру, содержащую массив аргументов, массив DISPID для именованных аргументов, а также счетчики количества элементов в массивах.</target>       </trans-unit>
        <trans-unit id="318" translate="yes" xml:space="preserve" uid="M:System.Reflection.AssemblyName.System#Runtime#InteropServices#_AssemblyName#Invoke(System.UInt32,System.Guid@,System.UInt32,System.Int16,System.IntPtr,System.IntPtr,System.IntPtr,System.IntPtr)">
          <source>Pointer to the location where the result is to be stored.</source>
          <target state="translated">Указатель, по которому будет сохранен результат.</target>       </trans-unit>
        <trans-unit id="319" translate="yes" xml:space="preserve" uid="M:System.Reflection.AssemblyName.System#Runtime#InteropServices#_AssemblyName#Invoke(System.UInt32,System.Guid@,System.UInt32,System.Int16,System.IntPtr,System.IntPtr,System.IntPtr,System.IntPtr)">
          <source>Pointer to a structure that contains exception information.</source>
          <target state="translated">Указатель на структуру, содержащую сведения об исключении.</target>       </trans-unit>
        <trans-unit id="320" translate="yes" xml:space="preserve" uid="M:System.Reflection.AssemblyName.System#Runtime#InteropServices#_AssemblyName#Invoke(System.UInt32,System.Guid@,System.UInt32,System.Int16,System.IntPtr,System.IntPtr,System.IntPtr,System.IntPtr)">
          <source>The index of the first argument that has an error.</source>
          <target state="translated">Индекс первого аргумента, вызвавшего ошибку.</target>       </trans-unit>
        <trans-unit id="321" translate="yes" xml:space="preserve" uid="M:System.Reflection.AssemblyName.System#Runtime#InteropServices#_AssemblyName#Invoke(System.UInt32,System.Guid@,System.UInt32,System.Int16,System.IntPtr,System.IntPtr,System.IntPtr,System.IntPtr)">
          <source>Provides access to properties and methods exposed by an object.</source>
          <target state="translated">Предоставляет доступ к открытым свойствам и методам объекта.</target>       </trans-unit>
        <trans-unit id="322" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.AssemblyName.System#Runtime#InteropServices#_AssemblyName#Invoke(System.UInt32,System.Guid@,System.UInt32,System.Int16,System.IntPtr,System.IntPtr,System.IntPtr,System.IntPtr)">
          <source>This method is for access to managed classes from unmanaged code, and should not be called from managed code.</source>
          <target state="translated">Этот метод предназначен для обеспечения доступа к управляемым классам из неуправляемого кода и не должен вызываться из управляемого кода.</target>       </trans-unit>
        <trans-unit id="323" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.AssemblyName.System#Runtime#InteropServices#_AssemblyName#Invoke(System.UInt32,System.Guid@,System.UInt32,System.Int16,System.IntPtr,System.IntPtr,System.IntPtr,System.IntPtr)">
          <source>For more information about <ph id="ph1">`IDispatch::Invoke`</ph>, see the MSDN Library.</source>
          <target state="translated">Дополнительные сведения о <ph id="ph1">`IDispatch::Invoke`</ph>, см. в библиотеке MSDN.</target>       </trans-unit>
        <trans-unit id="324" translate="yes" xml:space="preserve" uid="M:System.Reflection.AssemblyName.System#Runtime#InteropServices#_AssemblyName#Invoke(System.UInt32,System.Guid@,System.UInt32,System.Int16,System.IntPtr,System.IntPtr,System.IntPtr,System.IntPtr)">
          <source>Late-bound access using the COM <bpt id="p1">&lt;c&gt;</bpt>IDispatch<ept id="p1">&lt;/c&gt;</ept> interface is not supported.</source>
          <target state="translated">Доступ с поздним связыванием с помощью COM-интерфейса <bpt id="p1">&lt;c&gt;</bpt>IDispatch<ept id="p1">&lt;/c&gt;</ept> не поддерживается.</target>       </trans-unit>
        <trans-unit id="325" translate="yes" xml:space="preserve" uid="M:System.Reflection.AssemblyName.ToString">
          <source>Returns the full name of the assembly, also known as the display name.</source>
          <target state="translated">Возвращает полное имя сборки, также называемое отображаемым именем.</target>       </trans-unit>
        <trans-unit id="326" translate="yes" xml:space="preserve" uid="M:System.Reflection.AssemblyName.ToString">
          <source>The full name of the assembly, or the class name if the full name cannot be determined.</source>
          <target state="translated">Полное имя сборки или имя класса, если полное имя не может быть определено.</target>       </trans-unit>
        <trans-unit id="327" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.AssemblyName.ToString">
          <source>See the description of <ph id="ph1">&lt;xref:System.Reflection.AssemblyName&gt;</ph> for the format of the returned string.</source>
          <target state="translated">См. в описании <ph id="ph1">&lt;xref:System.Reflection.AssemblyName&gt;</ph> формат возвращаемой строки.</target>       </trans-unit>
        <trans-unit id="328" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.AssemblyName.ToString">
          <source>The following example gets an <ph id="ph1">&lt;xref:System.Reflection.AssemblyName&gt;</ph> object for a hypothetical <ph id="ph2">`MyAssembly.exe`</ph> assembly, and then uses the <ph id="ph3">&lt;xref:System.Reflection.AssemblyName.ToString%2A&gt;</ph> method to retrieve the full assembly name, or display name.</source>
          <target state="translated">В следующем примере извлекается <ph id="ph1">&lt;xref:System.Reflection.AssemblyName&gt;</ph> объект для гипотетического <ph id="ph2">`MyAssembly.exe`</ph> сборки, а затем используется <ph id="ph3">&lt;xref:System.Reflection.AssemblyName.ToString%2A&gt;</ph> метод для получения полного имени сборки или отображаемое имя.</target>       </trans-unit>
        <trans-unit id="329" translate="yes" xml:space="preserve" uid="P:System.Reflection.AssemblyName.Version">
          <source>Gets or sets the major, minor, build, and revision numbers of the assembly.</source>
          <target state="translated">Возвращает или задает для сборки основной номер версии, промежуточный номер версии, номер построения и номер редакции.</target>       </trans-unit>
        <trans-unit id="330" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.AssemblyName.Version">
          <source>An object that represents the major, minor, build, and revision numbers of the assembly.</source>
          <target state="translated">Объект, предоставляющий для сборки основной номер версии, промежуточный номер версии, номер построения и номер редакции.</target>       </trans-unit>
        <trans-unit id="331" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.AssemblyName.Version">
          <source>All components of the version must be integers greater than or equal to zero.</source>
          <target state="translated">Все компоненты версии должны быть целыми числами больше или равно нулю.</target>       </trans-unit>
        <trans-unit id="332" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.AssemblyName.Version">
          <source>Metadata restricts the major, minor, build, and revision components for an assembly to a maximum value of <ph id="ph1">&lt;xref:System.UInt16.MaxValue?displayProperty=nameWithType&gt;</ph> - 1.</source>
          <target state="translated">Метаданные ограничивают основной и дополнительный номер сборки и номер версии сборки, которую максимальное значение <ph id="ph1">&lt;xref:System.UInt16.MaxValue?displayProperty=nameWithType&gt;</ph> - 1.</target>       </trans-unit>
        <trans-unit id="333" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.AssemblyName.Version">
          <source>If a component exceeds this value, no error is thrown; however, in a dynamic assembly, that component is zero.</source>
          <target state="translated">Если компонент превышает это значение, ошибка не выдается; Однако в динамической сборке, этот компонент должен быть равен нулю.</target>       </trans-unit>
        <trans-unit id="334" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.AssemblyName.Version">
          <source>This section contains two examples.</source>
          <target state="translated">Этот раздел содержит два примера.</target>       </trans-unit>
        <trans-unit id="335" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.AssemblyName.Version">
          <source>The first example shows how to retrieve the version of the currently executing assembly.</source>
          <target state="translated">Первый пример показано, как получить версию выполняющейся сборки.</target>       </trans-unit>
        <trans-unit id="336" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.AssemblyName.Version">
          <source>The second example shows how to use the <ph id="ph1">&lt;xref:System.Reflection.AssemblyName.Version%2A&gt;</ph> property to specify the assembly version when you emit a dynamic assembly.</source>
          <target state="translated">Во втором примере показано, как использовать <ph id="ph1">&lt;xref:System.Reflection.AssemblyName.Version%2A&gt;</ph> свойство, чтобы указать версию сборки, когда создавать динамическую сборку.</target>       </trans-unit>
        <trans-unit id="337" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.AssemblyName.Version">
          <source><bpt id="p1">**</bpt>Example 1<ept id="p1">**</ept></source>
          <target state="translated"><bpt id="p1">**</bpt>Пример 1.<ept id="p1">**</ept></target>       </trans-unit>
        <trans-unit id="338" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.AssemblyName.Version">
          <source>The following example retrieves and displays the version numbers of the currently executing assembly and the assembly that contains the <ph id="ph1">&lt;xref:System.String&gt;</ph> class.</source>
          <target state="translated">Следующий пример получает и отображает номера версии выполняющейся сборки и сборки, содержащей <ph id="ph1">&lt;xref:System.String&gt;</ph> класса.</target>       </trans-unit>
        <trans-unit id="339" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.AssemblyName.Version">
          <source><bpt id="p1">**</bpt>Example 2<ept id="p1">**</ept></source>
          <target state="translated"><bpt id="p1">**</bpt>Пример 2<ept id="p1">**</ept></target>       </trans-unit>
        <trans-unit id="340" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.AssemblyName.Version">
          <source>The following example emits a dynamic assembly and saves it to the current directory.</source>
          <target state="translated">В следующем примере создается динамическая сборка и сохраняет его в текущий каталог.</target>       </trans-unit>
        <trans-unit id="341" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.AssemblyName.Version">
          <source>When the assembly is created, the <ph id="ph1">&lt;xref:System.Reflection.AssemblyName.Version%2A&gt;</ph> property is used to specify version information for the assembly.</source>
          <target state="translated">При создании сборки <ph id="ph1">&lt;xref:System.Reflection.AssemblyName.Version%2A&gt;</ph> свойство используется для указания сведений о версии для сборки.</target>       </trans-unit>
        <trans-unit id="342" translate="yes" xml:space="preserve" uid="P:System.Reflection.AssemblyName.VersionCompatibility">
          <source>Gets or sets the information related to the assembly's compatibility with other assemblies.</source>
          <target state="translated">Возвращает или задает сведения, связанные с совместимостью сборки с другими сборками.</target>       </trans-unit>
        <trans-unit id="343" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.AssemblyName.VersionCompatibility">
          <source>A value that represents information about the assembly's compatibility with other assemblies.</source>
          <target state="translated">Значение, представляющее сведения о совместимости сборки с другими сборками.</target>       </trans-unit>
        <trans-unit id="344" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.AssemblyName.VersionCompatibility">
          <source><ph id="ph1">&lt;xref:System.Reflection.AssemblyName.VersionCompatibility%2A&gt;</ph> information indicates, for example, that the assembly cannot execute side-by-side with other versions due to conflicts over a device driver.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Reflection.AssemblyName.VersionCompatibility%2A&gt;</ph> информация указывает, например, что сборка не может выполняться одновременно с другими версиями из-за конфликтов с драйвером устройства.</target>       </trans-unit>
        <trans-unit id="345" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.AssemblyName.VersionCompatibility">
          <source>Currently, <ph id="ph1">&lt;xref:System.Reflection.AssemblyName.VersionCompatibility%2A&gt;</ph> always returns <ph id="ph2">&lt;xref:System.Configuration.Assemblies.AssemblyVersionCompatibility.SameMachine?displayProperty=nameWithType&gt;</ph>, and is not used by the loader.</source>
          <target state="translated">В настоящее время <ph id="ph1">&lt;xref:System.Reflection.AssemblyName.VersionCompatibility%2A&gt;</ph> всегда возвращает <ph id="ph2">&lt;xref:System.Configuration.Assemblies.AssemblyVersionCompatibility.SameMachine?displayProperty=nameWithType&gt;</ph>и не используется загрузчиком.</target>       </trans-unit>
        <trans-unit id="346" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.AssemblyName.VersionCompatibility">
          <source>This property is reserved for a future feature.</source>
          <target state="translated">Это свойство зарезервировано для дальнейшего использования.</target>       </trans-unit>
      </group>
    </body>
  </file>
</xliff>