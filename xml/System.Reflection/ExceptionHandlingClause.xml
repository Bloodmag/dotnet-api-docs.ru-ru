<Type Name="ExceptionHandlingClause" FullName="System.Reflection.ExceptionHandlingClause">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="87e75d9f200276095e2de612c3a0c40fe8a81432" />
    <Meta Name="ms.sourcegitcommit" Value="434f60616a9793fa8436744549fc856e94f7a648" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="ru-RU" />
    <Meta Name="ms.lasthandoff" Value="08/25/2018" />
    <Meta Name="ms.locfileid" Value="39777310" />
  </Metadata>
  <TypeSignature Language="C#" Value="public class ExceptionHandlingClause" />
  <TypeSignature Language="ILAsm" Value=".class public sequential ansi beforefieldinit ExceptionHandlingClause extends System.Object" />
  <TypeSignature Language="DocId" Value="T:System.Reflection.ExceptionHandlingClause" />
  <TypeSignature Language="VB.NET" Value="Public Class ExceptionHandlingClause" />
  <TypeSignature Language="C++ CLI" Value="public ref class ExceptionHandlingClause" />
  <TypeSignature Language="F#" Value="type ExceptionHandlingClause = class" />
  <AssemblyInfo>
    <AssemblyName>mscorlib</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>System.Runtime</AssemblyName>
    <AssemblyVersion>4.2.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.1.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0">
      <AttributeName>System.Runtime.InteropServices.ComVisible(true)</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>
      <span data-ttu-id="ccf58-101">Представляет предложение в структурированном блоке обработки исключений.</span>
      <span class="sxs-lookup">
        <span data-stu-id="ccf58-101">Represents a clause in a structured exception-handling block.</span>
      </span>
    </summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="ccf58-102"><xref:System.Reflection.ExceptionHandlingClause> Класс предоставляет сведения о предложениях в `try`... `catch`...`finally`</span><span class="sxs-lookup"><span data-stu-id="ccf58-102">The <xref:System.Reflection.ExceptionHandlingClause> class provides information about the clauses in a `try`…`catch`…`finally`</span></span> <span data-ttu-id="ccf58-103">блок (`Try`... `Catch`...`Finally`</span><span class="sxs-lookup"><span data-stu-id="ccf58-103">block (`Try`…`Catch`…`Finally`</span></span> <span data-ttu-id="ccf58-104">в Visual Basic).</span><span class="sxs-lookup"><span data-stu-id="ccf58-104">in Visual Basic).</span></span> <span data-ttu-id="ccf58-105">Чтобы получить список предложений обработки исключений в методе, получить <xref:System.Reflection.MethodInfo> , представляющий метод.</span><span class="sxs-lookup"><span data-stu-id="ccf58-105">To get a list of exception-handling clauses in a method, obtain a <xref:System.Reflection.MethodInfo> that represents the method.</span></span> <span data-ttu-id="ccf58-106">Используйте <xref:System.Reflection.MethodBase.GetMethodBody%2A> метод, чтобы получить <xref:System.Reflection.MethodBody> , а затем использовать <xref:System.Reflection.MethodBody.ExceptionHandlingClauses%2A> свойство, чтобы получить список предложений.</span><span class="sxs-lookup"><span data-stu-id="ccf58-106">Use the <xref:System.Reflection.MethodBase.GetMethodBody%2A> method to obtain a <xref:System.Reflection.MethodBody> object, and then use the <xref:System.Reflection.MethodBody.ExceptionHandlingClauses%2A> property to get the list of clauses.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="ccf58-107">Работа с предложения обработки исключений требуется исчерпывающие сведения о метаданных и форматах инструкций промежуточного языка MSIL Microsoft.</span><span class="sxs-lookup"><span data-stu-id="ccf58-107">Working with exception-handling clauses requires a thorough understanding of metadata and Microsoft intermediate language (MSIL) instruction formats.</span></span> <span data-ttu-id="ccf58-108">Сведения можно найти в документации по Common Language Infrastructure (CLI), особенно «Раздел II: определение метаданных и семантика» и «Раздел III: набор инструкций CIL».</span><span class="sxs-lookup"><span data-stu-id="ccf58-108">Information can be found in the Common Language Infrastructure (CLI) documentation, especially "Partition II: Metadata Definition and Semantics" and "Partition III: CIL Instruction Set".</span></span> <span data-ttu-id="ccf58-109">Документация доступна в Интернете; см. страницы [ECMAC# и стандарты Common Language Infrastructure](http://go.microsoft.com/fwlink/?LinkID=99212) на сайте MSDN и [Стандарт ECMA-335 — общеязыковая инфраструктура (CLI)](http://go.microsoft.com/fwlink/?LinkID=65552) на международном веб-сайте организации ECMA.</span><span class="sxs-lookup"><span data-stu-id="ccf58-109">The documentation is available online; see [ECMA C# and Common Language Infrastructure Standards](http://go.microsoft.com/fwlink/?LinkID=99212) on MSDN and [Standard ECMA-335 - Common Language Infrastructure (CLI)](http://go.microsoft.com/fwlink/?LinkID=65552) on the Ecma International Web site.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="ccf58-110">В следующем примере кода определяется метод теста с именем `MethodBodyExample`и отображает ее локальных переменных и предложений обработки исключений.</span><span class="sxs-lookup"><span data-stu-id="ccf58-110">The following code example defines a test method named `MethodBodyExample`, and displays its local variable information and exception-handling clauses.</span></span> <span data-ttu-id="ccf58-111"><xref:System.Reflection.MethodBase.GetMethodBody%2A?displayProperty=nameWithType> Метод используется для получения <xref:System.Reflection.MethodBody> для метода теста.</span><span class="sxs-lookup"><span data-stu-id="ccf58-111">The <xref:System.Reflection.MethodBase.GetMethodBody%2A?displayProperty=nameWithType> method is used to obtain a <xref:System.Reflection.MethodBody> object for the test method.</span></span> <span data-ttu-id="ccf58-112"><xref:System.Reflection.MethodBody.ExceptionHandlingClauses%2A> Свойство используется для получения списка <xref:System.Reflection.ExceptionHandlingClause> объектов и отобразить их свойства.</span><span class="sxs-lookup"><span data-stu-id="ccf58-112">The <xref:System.Reflection.MethodBody.ExceptionHandlingClauses%2A> property is used to obtain a list of <xref:System.Reflection.ExceptionHandlingClause> objects and display their properties.</span></span>  
  
 <span data-ttu-id="ccf58-113">Ildasm.exe можно использовать для изучения MSIL, например скомпилированный код, чтобы увидеть, как вычисляется смещение и длина.</span><span class="sxs-lookup"><span data-stu-id="ccf58-113">You can use Ildasm.exe to examine the MSIL for the compiled code example, to see how the offsets and lengths are calculated.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="ccf58-114">Можно создать не все языки программирования <xref:System.Reflection.ExceptionHandlingClauseOptions.Filter?displayProperty=nameWithType> предложения.</span><span class="sxs-lookup"><span data-stu-id="ccf58-114">Not all computer languages can generate <xref:System.Reflection.ExceptionHandlingClauseOptions.Filter?displayProperty=nameWithType> clauses.</span></span> <span data-ttu-id="ccf58-115">В примере Visual Basic показано предложение фильтра, с помощью Visual Basic `When` выражения, отсутствующего в примерах для других языков.</span><span class="sxs-lookup"><span data-stu-id="ccf58-115">The Visual Basic example shows a filter clause, using a Visual Basic `When` expression, which is omitted from the examples for other languages.</span></span>  
  
 <span data-ttu-id="ccf58-116">Этот код является частью большего примера, расположенный в <xref:System.Reflection.MethodBody> разделе, посвященном классу.</span><span class="sxs-lookup"><span data-stu-id="ccf58-116">This code is part of a larger example located in the <xref:System.Reflection.MethodBody> class topic.</span></span>  
  
 [!code-cpp[MethodBody#2](~/samples/snippets/cpp/VS_Snippets_CLR/MethodBody/cpp/source.cpp#2)]
 [!code-csharp[MethodBody#2](~/samples/snippets/csharp/VS_Snippets_CLR/MethodBody/CS/source.cs#2)]
 [!code-vb[MethodBody#2](~/samples/snippets/visualbasic/VS_Snippets_CLR/MethodBody/VB/source.vb#2)]  
[!code-cpp[MethodBody#4](~/samples/snippets/cpp/VS_Snippets_CLR/MethodBody/cpp/source.cpp#4)]
[!code-csharp[MethodBody#4](~/samples/snippets/csharp/VS_Snippets_CLR/MethodBody/CS/source.cs#4)]
[!code-vb[MethodBody#4](~/samples/snippets/visualbasic/VS_Snippets_CLR/MethodBody/VB/source.vb#4)]  
[!code-cpp[MethodBody#5](~/samples/snippets/cpp/VS_Snippets_CLR/MethodBody/cpp/source.cpp#5)]
[!code-csharp[MethodBody#5](~/samples/snippets/csharp/VS_Snippets_CLR/MethodBody/CS/source.cs#5)]
[!code-vb[MethodBody#5](~/samples/snippets/visualbasic/VS_Snippets_CLR/MethodBody/VB/source.vb#5)]  
[!code-cpp[MethodBody#7](~/samples/snippets/cpp/VS_Snippets_CLR/MethodBody/cpp/source.cpp#7)]
[!code-csharp[MethodBody#7](~/samples/snippets/csharp/VS_Snippets_CLR/MethodBody/CS/source.cs#7)]
[!code-vb[MethodBody#7](~/samples/snippets/visualbasic/VS_Snippets_CLR/MethodBody/VB/source.vb#7)]  
  
 ]]></format>
    </remarks>
    <altmember cref="T:System.Reflection.MethodBody" />
    <altmember cref="P:System.Reflection.MethodBody.ExceptionHandlingClauses" />
    <altmember cref="T:System.Reflection.ExceptionHandlingClauseOptions" />
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="protected ExceptionHandlingClause ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.ExceptionHandlingClause.#ctor" />
      <MemberSignature Language="VB.NET" Value="Protected Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; ExceptionHandlingClause();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="ccf58-117">Инициализирует новый экземпляр класса <see cref="T:System.Reflection.ExceptionHandlingClause" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ccf58-117">Initializes a new instance of the <see cref="T:System.Reflection.ExceptionHandlingClause" /> class.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="ccf58-118">Этот конструктор вызывается производными классами во время создания <xref:System.Reflection.ExceptionHandlingClause> объектов.</span><span class="sxs-lookup"><span data-stu-id="ccf58-118">This constructor is invoked by derived classes during the construction of <xref:System.Reflection.ExceptionHandlingClause> objects.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="CatchType">
      <MemberSignature Language="C#" Value="public virtual Type CatchType { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Type CatchType" />
      <MemberSignature Language="DocId" Value="P:System.Reflection.ExceptionHandlingClause.CatchType" />
      <MemberSignature Language="VB.NET" Value="Public Overridable ReadOnly Property CatchType As Type" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property Type ^ CatchType { Type ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.CatchType : Type" Usage="System.Reflection.ExceptionHandlingClause.CatchType" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Type</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="ccf58-119">Возвращает тип исключения, обрабатываемого этим предложением.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ccf58-119">Gets the type of exception handled by this clause.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="ccf58-120">Объект <see cref="T:System.Type" />, который представляет тип исключения, обрабатываемого этим предложением, либо значение <see langword="null" />, если свойство <see cref="P:System.Reflection.ExceptionHandlingClause.Flags" /> равно <see cref="F:System.Reflection.ExceptionHandlingClauseOptions.Filter" /> или <see cref="F:System.Reflection.ExceptionHandlingClauseOptions.Finally" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ccf58-120">A <see cref="T:System.Type" /> object that represents that type of exception handled by this clause, or <see langword="null" /> if the <see cref="P:System.Reflection.ExceptionHandlingClause.Flags" /> property is <see cref="F:System.Reflection.ExceptionHandlingClauseOptions.Filter" /> or <see cref="F:System.Reflection.ExceptionHandlingClauseOptions.Finally" />.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
> [!NOTE]
>  <span data-ttu-id="ccf58-121">Работа с предложения обработки исключений требуется исчерпывающие сведения о метаданных и форматах инструкций промежуточного языка MSIL Microsoft.</span><span class="sxs-lookup"><span data-stu-id="ccf58-121">Working with exception-handling clauses requires a thorough understanding of metadata and Microsoft intermediate language (MSIL) instruction formats.</span></span> <span data-ttu-id="ccf58-122">Сведения можно найти в документации по Common Language Infrastructure (CLI), особенно «Раздел II: определение метаданных и семантика» и «Раздел III: набор инструкций CIL».</span><span class="sxs-lookup"><span data-stu-id="ccf58-122">Information can be found in the Common Language Infrastructure (CLI) documentation, especially "Partition II: Metadata Definition and Semantics" and "Partition III: CIL Instruction Set".</span></span> <span data-ttu-id="ccf58-123">Документация доступна в Интернете; см. страницы [ECMAC# и стандарты Common Language Infrastructure](http://go.microsoft.com/fwlink/?LinkID=99212) на сайте MSDN и [Стандарт ECMA-335 — общеязыковая инфраструктура (CLI)](http://go.microsoft.com/fwlink/?LinkID=65552) на международном веб-сайте организации ECMA.</span><span class="sxs-lookup"><span data-stu-id="ccf58-123">The documentation is available online; see [ECMA C# and Common Language Infrastructure Standards](http://go.microsoft.com/fwlink/?LinkID=99212) on MSDN and [Standard ECMA-335 - Common Language Infrastructure (CLI)](http://go.microsoft.com/fwlink/?LinkID=65552) on the Ecma International Web site.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="ccf58-124">В следующем примере кода определяется метод теста с именем `MethodBodyExample`и отображает ее локальных переменных и предложений обработки исключений.</span><span class="sxs-lookup"><span data-stu-id="ccf58-124">The following code example defines a test method named `MethodBodyExample`, and displays its local variable information and exception-handling clauses.</span></span> <span data-ttu-id="ccf58-125"><xref:System.Reflection.MethodBase.GetMethodBody%2A?displayProperty=nameWithType> Метод используется для получения <xref:System.Reflection.MethodBody> для метода теста.</span><span class="sxs-lookup"><span data-stu-id="ccf58-125">The <xref:System.Reflection.MethodBase.GetMethodBody%2A?displayProperty=nameWithType> method is used to obtain a <xref:System.Reflection.MethodBody> object for the test method.</span></span> <span data-ttu-id="ccf58-126"><xref:System.Reflection.MethodBody.ExceptionHandlingClauses%2A> Свойство используется для получения списка <xref:System.Reflection.ExceptionHandlingClause> объектов и отобразить их свойства.</span><span class="sxs-lookup"><span data-stu-id="ccf58-126">The <xref:System.Reflection.MethodBody.ExceptionHandlingClauses%2A> property is used to obtain a list of <xref:System.Reflection.ExceptionHandlingClause> objects and display their properties.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="ccf58-127">Можно создать не все языки программирования <xref:System.Reflection.ExceptionHandlingClauseOptions.Filter?displayProperty=nameWithType> предложения.</span><span class="sxs-lookup"><span data-stu-id="ccf58-127">Not all computer languages can generate <xref:System.Reflection.ExceptionHandlingClauseOptions.Filter?displayProperty=nameWithType> clauses.</span></span> <span data-ttu-id="ccf58-128">В примере Visual Basic показано предложение фильтра, с помощью Visual Basic `When` выражения, отсутствующего в примерах для других языков.</span><span class="sxs-lookup"><span data-stu-id="ccf58-128">The Visual Basic example shows a filter clause, using a Visual Basic `When` expression, which is omitted from the examples for other languages.</span></span>  
  
 <span data-ttu-id="ccf58-129">Этот код является частью большего примера, расположенный в <xref:System.Reflection.MethodBody> разделе, посвященном классу.</span><span class="sxs-lookup"><span data-stu-id="ccf58-129">This code is part of a larger example located in the <xref:System.Reflection.MethodBody> class topic.</span></span>  
  
 [!code-cpp[MethodBody#2](~/samples/snippets/cpp/VS_Snippets_CLR/MethodBody/cpp/source.cpp#2)]
 [!code-csharp[MethodBody#2](~/samples/snippets/csharp/VS_Snippets_CLR/MethodBody/CS/source.cs#2)]
 [!code-vb[MethodBody#2](~/samples/snippets/visualbasic/VS_Snippets_CLR/MethodBody/VB/source.vb#2)]  
[!code-cpp[MethodBody#4](~/samples/snippets/cpp/VS_Snippets_CLR/MethodBody/cpp/source.cpp#4)]
[!code-csharp[MethodBody#4](~/samples/snippets/csharp/VS_Snippets_CLR/MethodBody/CS/source.cs#4)]
[!code-vb[MethodBody#4](~/samples/snippets/visualbasic/VS_Snippets_CLR/MethodBody/VB/source.vb#4)]  
[!code-cpp[MethodBody#5](~/samples/snippets/cpp/VS_Snippets_CLR/MethodBody/cpp/source.cpp#5)]
[!code-csharp[MethodBody#5](~/samples/snippets/csharp/VS_Snippets_CLR/MethodBody/CS/source.cs#5)]
[!code-vb[MethodBody#5](~/samples/snippets/visualbasic/VS_Snippets_CLR/MethodBody/VB/source.vb#5)]  
[!code-cpp[MethodBody#7](~/samples/snippets/cpp/VS_Snippets_CLR/MethodBody/cpp/source.cpp#7)]
[!code-csharp[MethodBody#7](~/samples/snippets/csharp/VS_Snippets_CLR/MethodBody/CS/source.cs#7)]
[!code-vb[MethodBody#7](~/samples/snippets/visualbasic/VS_Snippets_CLR/MethodBody/VB/source.vb#7)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">
          <span data-ttu-id="ccf58-130">Недопустимое использование свойства для текущего состояния объекта.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ccf58-130">Invalid use of property for the object's current state.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="FilterOffset">
      <MemberSignature Language="C#" Value="public virtual int FilterOffset { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 FilterOffset" />
      <MemberSignature Language="DocId" Value="P:System.Reflection.ExceptionHandlingClause.FilterOffset" />
      <MemberSignature Language="VB.NET" Value="Public Overridable ReadOnly Property FilterOffset As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property int FilterOffset { int get(); };" />
      <MemberSignature Language="F#" Value="member this.FilterOffset : int" Usage="System.Reflection.ExceptionHandlingClause.FilterOffset" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="ccf58-131">Возвращает смещение в теле метода в байтах для предоставленного пользователем кода фильтра.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ccf58-131">Gets the offset within the method body, in bytes, of the user-supplied filter code.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="ccf58-132">Смещение в теле метода в байтах для предоставленного пользователем кода фильтра.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ccf58-132">The offset within the method body, in bytes, of the user-supplied filter code.</span>
          </span>
          <span data-ttu-id="ccf58-133">Значение этого свойства не используется, если свойство <see cref="P:System.Reflection.ExceptionHandlingClause.Flags" /> имеет значение, отличное от значения <see cref="F:System.Reflection.ExceptionHandlingClauseOptions.Filter" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ccf58-133">The value of this property has no meaning if the <see cref="P:System.Reflection.ExceptionHandlingClause.Flags" /> property has any value other than <see cref="F:System.Reflection.ExceptionHandlingClauseOptions.Filter" />.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="ccf58-134">Предложение фильтра содержит пользователя suppliedMicrosoft промежуточного языка MSIL, определяющее, обработано ли исключение данным предложением.</span><span class="sxs-lookup"><span data-stu-id="ccf58-134">A filter clause contains user-suppliedMicrosoft intermediate language (MSIL) that determines whether an exception is handled by this clause.</span></span> <span data-ttu-id="ccf58-135">Например, все предложения, содержащий Visual Basic `When` ключевое слово <xref:System.Reflection.ExceptionHandlingClauseOptions.Filter?displayProperty=nameWithType> предложение.</span><span class="sxs-lookup"><span data-stu-id="ccf58-135">For example, any clause containing the Visual Basic `When` keyword is a <xref:System.Reflection.ExceptionHandlingClauseOptions.Filter?displayProperty=nameWithType> clause.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="ccf58-136">Работа с предложения обработки исключений требует глубокого понимания метаданных и форматах инструкций MSIL.</span><span class="sxs-lookup"><span data-stu-id="ccf58-136">Working with exception-handling clauses requires a thorough understanding of metadata and MSIL instruction formats.</span></span> <span data-ttu-id="ccf58-137">Сведения можно найти в документации по Common Language Infrastructure (CLI), особенно «Раздел II: определение метаданных и семантика» и «Раздел III: набор инструкций CIL».</span><span class="sxs-lookup"><span data-stu-id="ccf58-137">Information can be found in the Common Language Infrastructure (CLI) documentation, especially "Partition II: Metadata Definition and Semantics" and "Partition III: CIL Instruction Set".</span></span> <span data-ttu-id="ccf58-138">Документация доступна в Интернете; см. страницы [ECMAC# и стандарты Common Language Infrastructure](http://go.microsoft.com/fwlink/?LinkID=99212) на сайте MSDN и [Стандарт ECMA-335 — общеязыковая инфраструктура (CLI)](http://go.microsoft.com/fwlink/?LinkID=65552) на международном веб-сайте организации ECMA.</span><span class="sxs-lookup"><span data-stu-id="ccf58-138">The documentation is available online; see [ECMA C# and Common Language Infrastructure Standards](http://go.microsoft.com/fwlink/?LinkID=99212) on MSDN and [Standard ECMA-335 - Common Language Infrastructure (CLI)](http://go.microsoft.com/fwlink/?LinkID=65552) on the Ecma International Web site.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">
          <span data-ttu-id="ccf58-139">Невозможно получить смещение, так как предложение обработки исключения не является фильтром.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ccf58-139">Cannot get the offset because the exception handling clause is not a filter.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="Flags">
      <MemberSignature Language="C#" Value="public virtual System.Reflection.ExceptionHandlingClauseOptions Flags { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Reflection.ExceptionHandlingClauseOptions Flags" />
      <MemberSignature Language="DocId" Value="P:System.Reflection.ExceptionHandlingClause.Flags" />
      <MemberSignature Language="VB.NET" Value="Public Overridable ReadOnly Property Flags As ExceptionHandlingClauseOptions" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property System::Reflection::ExceptionHandlingClauseOptions Flags { System::Reflection::ExceptionHandlingClauseOptions get(); };" />
      <MemberSignature Language="F#" Value="member this.Flags : System.Reflection.ExceptionHandlingClauseOptions" Usage="System.Reflection.ExceptionHandlingClause.Flags" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.ExceptionHandlingClauseOptions</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="ccf58-140">Возвращает значение, указывающее, является ли это предложение обработки ошибок предложением "finally", предложением фильтра по типу или предложением фильтра по пользователю.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ccf58-140">Gets a value indicating whether this exception-handling clause is a finally clause, a type-filtered clause, or a user-filtered clause.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="ccf58-141">Значение <see cref="T:System.Reflection.ExceptionHandlingClauseOptions" />, определяющее тип действия, которое выполняет данное предложение.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ccf58-141">An <see cref="T:System.Reflection.ExceptionHandlingClauseOptions" /> value that indicates what kind of action this clause performs.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
> [!NOTE]
>  <span data-ttu-id="ccf58-142">Работа с предложения обработки исключений требуется исчерпывающие сведения о метаданных и форматах инструкций промежуточного языка MSIL Microsoft.</span><span class="sxs-lookup"><span data-stu-id="ccf58-142">Working with exception-handling clauses requires a thorough understanding of metadata and Microsoft intermediate language (MSIL) instruction formats.</span></span> <span data-ttu-id="ccf58-143">Сведения можно найти в документации по Common Language Infrastructure (CLI), особенно «Раздел II: определение метаданных и семантика» и «Раздел III: набор инструкций CIL».</span><span class="sxs-lookup"><span data-stu-id="ccf58-143">Information can be found in the Common Language Infrastructure (CLI) documentation, especially "Partition II: Metadata Definition and Semantics" and "Partition III: CIL Instruction Set".</span></span> <span data-ttu-id="ccf58-144">Документация доступна в Интернете; см. страницы [ECMAC# и стандарты Common Language Infrastructure](http://go.microsoft.com/fwlink/?LinkID=99212) на сайте MSDN и [Стандарт ECMA-335 — общеязыковая инфраструктура (CLI)](http://go.microsoft.com/fwlink/?LinkID=65552) на международном веб-сайте организации ECMA.</span><span class="sxs-lookup"><span data-stu-id="ccf58-144">The documentation is available online; see [ECMA C# and Common Language Infrastructure Standards](http://go.microsoft.com/fwlink/?LinkID=99212) on MSDN and [Standard ECMA-335 - Common Language Infrastructure (CLI)](http://go.microsoft.com/fwlink/?LinkID=65552) on the Ecma International Web site.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="ccf58-145">В следующем примере кода определяется метод теста с именем `MethodBodyExample`и отображает ее локальных переменных и предложений обработки исключений.</span><span class="sxs-lookup"><span data-stu-id="ccf58-145">The following code example defines a test method named `MethodBodyExample`, and displays its local variable information and exception-handling clauses.</span></span> <span data-ttu-id="ccf58-146"><xref:System.Reflection.MethodBase.GetMethodBody%2A?displayProperty=nameWithType> Метод используется для получения <xref:System.Reflection.MethodBody> для метода теста.</span><span class="sxs-lookup"><span data-stu-id="ccf58-146">The <xref:System.Reflection.MethodBase.GetMethodBody%2A?displayProperty=nameWithType> method is used to obtain a <xref:System.Reflection.MethodBody> object for the test method.</span></span> <span data-ttu-id="ccf58-147"><xref:System.Reflection.MethodBody.ExceptionHandlingClauses%2A> Свойство используется для получения списка <xref:System.Reflection.ExceptionHandlingClause> объектов и отобразить их свойства.</span><span class="sxs-lookup"><span data-stu-id="ccf58-147">The <xref:System.Reflection.MethodBody.ExceptionHandlingClauses%2A> property is used to obtain a list of <xref:System.Reflection.ExceptionHandlingClause> objects and display their properties.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="ccf58-148">Можно создать не все языки программирования <xref:System.Reflection.ExceptionHandlingClauseOptions.Filter?displayProperty=nameWithType> предложения.</span><span class="sxs-lookup"><span data-stu-id="ccf58-148">Not all computer languages can generate <xref:System.Reflection.ExceptionHandlingClauseOptions.Filter?displayProperty=nameWithType> clauses.</span></span> <span data-ttu-id="ccf58-149">В примере Visual Basic показано предложение фильтра, с помощью Visual Basic `When` выражения, отсутствующего в примерах для других языков.</span><span class="sxs-lookup"><span data-stu-id="ccf58-149">The Visual Basic example shows a filter clause, using a Visual Basic `When` expression, which is omitted from the examples for other languages.</span></span>  
  
 <span data-ttu-id="ccf58-150">Этот код является частью большего примера, расположенный в <xref:System.Reflection.MethodBody> разделе, посвященном классу.</span><span class="sxs-lookup"><span data-stu-id="ccf58-150">This code is part of a larger example located in the <xref:System.Reflection.MethodBody> class topic.</span></span>  
  
 [!code-cpp[MethodBody#2](~/samples/snippets/cpp/VS_Snippets_CLR/MethodBody/cpp/source.cpp#2)]
 [!code-csharp[MethodBody#2](~/samples/snippets/csharp/VS_Snippets_CLR/MethodBody/CS/source.cs#2)]
 [!code-vb[MethodBody#2](~/samples/snippets/visualbasic/VS_Snippets_CLR/MethodBody/VB/source.vb#2)]  
[!code-cpp[MethodBody#4](~/samples/snippets/cpp/VS_Snippets_CLR/MethodBody/cpp/source.cpp#4)]
[!code-csharp[MethodBody#4](~/samples/snippets/csharp/VS_Snippets_CLR/MethodBody/CS/source.cs#4)]
[!code-vb[MethodBody#4](~/samples/snippets/visualbasic/VS_Snippets_CLR/MethodBody/VB/source.vb#4)]  
[!code-cpp[MethodBody#5](~/samples/snippets/cpp/VS_Snippets_CLR/MethodBody/cpp/source.cpp#5)]
[!code-csharp[MethodBody#5](~/samples/snippets/csharp/VS_Snippets_CLR/MethodBody/CS/source.cs#5)]
[!code-vb[MethodBody#5](~/samples/snippets/visualbasic/VS_Snippets_CLR/MethodBody/VB/source.vb#5)]  
[!code-cpp[MethodBody#7](~/samples/snippets/cpp/VS_Snippets_CLR/MethodBody/cpp/source.cpp#7)]
[!code-csharp[MethodBody#7](~/samples/snippets/csharp/VS_Snippets_CLR/MethodBody/CS/source.cs#7)]
[!code-vb[MethodBody#7](~/samples/snippets/visualbasic/VS_Snippets_CLR/MethodBody/VB/source.vb#7)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Reflection.ExceptionHandlingClauseOptions" />
      </Docs>
    </Member>
    <Member MemberName="HandlerLength">
      <MemberSignature Language="C#" Value="public virtual int HandlerLength { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 HandlerLength" />
      <MemberSignature Language="DocId" Value="P:System.Reflection.ExceptionHandlingClause.HandlerLength" />
      <MemberSignature Language="VB.NET" Value="Public Overridable ReadOnly Property HandlerLength As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property int HandlerLength { int get(); };" />
      <MemberSignature Language="F#" Value="member this.HandlerLength : int" Usage="System.Reflection.ExceptionHandlingClause.HandlerLength" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="ccf58-151">Возвращает длину тела этого предложения обработки исключений в байтах.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ccf58-151">Gets the length, in bytes, of the body of this exception-handling clause.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="ccf58-152">Целое число, представляющее длину в байтах кода MSIL, образующего тело этого предложения обработки исключений.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ccf58-152">An integer that represents the length, in bytes, of the MSIL that forms the body of this exception-handling clause.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
> [!NOTE]
>  <span data-ttu-id="ccf58-153">Работа с предложения обработки исключений требуется исчерпывающие сведения о метаданных и форматах инструкций промежуточного языка MSIL Microsoft.</span><span class="sxs-lookup"><span data-stu-id="ccf58-153">Working with exception-handling clauses requires a thorough understanding of metadata and Microsoft intermediate language (MSIL) instruction formats.</span></span> <span data-ttu-id="ccf58-154">Сведения можно найти в документации по Common Language Infrastructure (CLI), особенно «Раздел II: определение метаданных и семантика» и «Раздел III: набор инструкций CIL».</span><span class="sxs-lookup"><span data-stu-id="ccf58-154">Information can be found in the Common Language Infrastructure (CLI) documentation, especially "Partition II: Metadata Definition and Semantics" and "Partition III: CIL Instruction Set".</span></span> <span data-ttu-id="ccf58-155">Документация доступна в Интернете; см. страницы [ECMAC# и стандарты Common Language Infrastructure](http://go.microsoft.com/fwlink/?LinkID=99212) на сайте MSDN и [Стандарт ECMA-335 — общеязыковая инфраструктура (CLI)](http://go.microsoft.com/fwlink/?LinkID=65552) на международном веб-сайте организации ECMA.</span><span class="sxs-lookup"><span data-stu-id="ccf58-155">The documentation is available online; see [ECMA C# and Common Language Infrastructure Standards](http://go.microsoft.com/fwlink/?LinkID=99212) on MSDN and [Standard ECMA-335 - Common Language Infrastructure (CLI)](http://go.microsoft.com/fwlink/?LinkID=65552) on the Ecma International Web site.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="ccf58-156">В следующем примере кода определяется метод теста с именем `MethodBodyExample`и отображает ее локальных переменных и предложений обработки исключений.</span><span class="sxs-lookup"><span data-stu-id="ccf58-156">The following code example defines a test method named `MethodBodyExample`, and displays its local variable information and exception-handling clauses.</span></span> <span data-ttu-id="ccf58-157"><xref:System.Reflection.MethodBase.GetMethodBody%2A?displayProperty=nameWithType> Метод используется для получения <xref:System.Reflection.MethodBody> для метода теста.</span><span class="sxs-lookup"><span data-stu-id="ccf58-157">The <xref:System.Reflection.MethodBase.GetMethodBody%2A?displayProperty=nameWithType> method is used to obtain a <xref:System.Reflection.MethodBody> object for the test method.</span></span> <span data-ttu-id="ccf58-158"><xref:System.Reflection.MethodBody.ExceptionHandlingClauses%2A> Свойство используется для получения списка <xref:System.Reflection.ExceptionHandlingClause> объектов и отобразить их свойства.</span><span class="sxs-lookup"><span data-stu-id="ccf58-158">The <xref:System.Reflection.MethodBody.ExceptionHandlingClauses%2A> property is used to obtain a list of <xref:System.Reflection.ExceptionHandlingClause> objects and display their properties.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="ccf58-159">Можно создать не все языки программирования <xref:System.Reflection.ExceptionHandlingClauseOptions.Filter?displayProperty=nameWithType> предложения.</span><span class="sxs-lookup"><span data-stu-id="ccf58-159">Not all computer languages can generate <xref:System.Reflection.ExceptionHandlingClauseOptions.Filter?displayProperty=nameWithType> clauses.</span></span> <span data-ttu-id="ccf58-160">В примере Visual Basic показано предложение фильтра, с помощью Visual Basic `When` выражения, отсутствующего в примерах для других языков.</span><span class="sxs-lookup"><span data-stu-id="ccf58-160">The Visual Basic example shows a filter clause, using a Visual Basic `When` expression, which is omitted from the examples for other languages.</span></span>  
  
 <span data-ttu-id="ccf58-161">Этот код является частью большего примера, расположенный в <xref:System.Reflection.MethodBody> разделе, посвященном классу.</span><span class="sxs-lookup"><span data-stu-id="ccf58-161">This code is part of a larger example located in the <xref:System.Reflection.MethodBody> class topic.</span></span>  
  
 [!code-cpp[MethodBody#2](~/samples/snippets/cpp/VS_Snippets_CLR/MethodBody/cpp/source.cpp#2)]
 [!code-csharp[MethodBody#2](~/samples/snippets/csharp/VS_Snippets_CLR/MethodBody/CS/source.cs#2)]
 [!code-vb[MethodBody#2](~/samples/snippets/visualbasic/VS_Snippets_CLR/MethodBody/VB/source.vb#2)]  
[!code-cpp[MethodBody#4](~/samples/snippets/cpp/VS_Snippets_CLR/MethodBody/cpp/source.cpp#4)]
[!code-csharp[MethodBody#4](~/samples/snippets/csharp/VS_Snippets_CLR/MethodBody/CS/source.cs#4)]
[!code-vb[MethodBody#4](~/samples/snippets/visualbasic/VS_Snippets_CLR/MethodBody/VB/source.vb#4)]  
[!code-cpp[MethodBody#5](~/samples/snippets/cpp/VS_Snippets_CLR/MethodBody/cpp/source.cpp#5)]
[!code-csharp[MethodBody#5](~/samples/snippets/csharp/VS_Snippets_CLR/MethodBody/CS/source.cs#5)]
[!code-vb[MethodBody#5](~/samples/snippets/visualbasic/VS_Snippets_CLR/MethodBody/VB/source.vb#5)]  
[!code-cpp[MethodBody#7](~/samples/snippets/cpp/VS_Snippets_CLR/MethodBody/cpp/source.cpp#7)]
[!code-csharp[MethodBody#7](~/samples/snippets/csharp/VS_Snippets_CLR/MethodBody/CS/source.cs#7)]
[!code-vb[MethodBody#7](~/samples/snippets/visualbasic/VS_Snippets_CLR/MethodBody/VB/source.vb#7)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="HandlerOffset">
      <MemberSignature Language="C#" Value="public virtual int HandlerOffset { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 HandlerOffset" />
      <MemberSignature Language="DocId" Value="P:System.Reflection.ExceptionHandlingClause.HandlerOffset" />
      <MemberSignature Language="VB.NET" Value="Public Overridable ReadOnly Property HandlerOffset As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property int HandlerOffset { int get(); };" />
      <MemberSignature Language="F#" Value="member this.HandlerOffset : int" Usage="System.Reflection.ExceptionHandlingClause.HandlerOffset" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="ccf58-162">Возвращает смещение в теле метода этого предложения обработки исключений в байтах.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ccf58-162">Gets the offset within the method body, in bytes, of this exception-handling clause.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="ccf58-163">Целое число, представляющее смещение в теле метода этого предложения обработки исключений.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ccf58-163">An integer that represents the offset within the method body, in bytes, of this exception-handling clause.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
> [!NOTE]
>  <span data-ttu-id="ccf58-164">Работа с предложения обработки исключений требуется исчерпывающие сведения о метаданных и форматах инструкций промежуточного языка MSIL Microsoft.</span><span class="sxs-lookup"><span data-stu-id="ccf58-164">Working with exception-handling clauses requires a thorough understanding of metadata and Microsoft intermediate language (MSIL) instruction formats.</span></span> <span data-ttu-id="ccf58-165">Сведения можно найти в документации по Common Language Infrastructure (CLI), особенно «Раздел II: определение метаданных и семантика» и «Раздел III: набор инструкций CIL».</span><span class="sxs-lookup"><span data-stu-id="ccf58-165">Information can be found in the Common Language Infrastructure (CLI) documentation, especially "Partition II: Metadata Definition and Semantics" and "Partition III: CIL Instruction Set".</span></span> <span data-ttu-id="ccf58-166">Документация доступна в Интернете; см. страницы [ECMAC# и стандарты Common Language Infrastructure](http://go.microsoft.com/fwlink/?LinkID=99212) на сайте MSDN и [Стандарт ECMA-335 — общеязыковая инфраструктура (CLI)](http://go.microsoft.com/fwlink/?LinkID=65552) на международном веб-сайте организации ECMA.</span><span class="sxs-lookup"><span data-stu-id="ccf58-166">The documentation is available online; see [ECMA C# and Common Language Infrastructure Standards](http://go.microsoft.com/fwlink/?LinkID=99212) on MSDN and [Standard ECMA-335 - Common Language Infrastructure (CLI)](http://go.microsoft.com/fwlink/?LinkID=65552) on the Ecma International Web site.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="ccf58-167">В следующем примере кода определяется метод теста с именем `MethodBodyExample`и отображает ее локальных переменных и предложений обработки исключений.</span><span class="sxs-lookup"><span data-stu-id="ccf58-167">The following code example defines a test method named `MethodBodyExample`, and displays its local variable information and exception-handling clauses.</span></span> <span data-ttu-id="ccf58-168"><xref:System.Reflection.MethodBase.GetMethodBody%2A?displayProperty=nameWithType> Метод используется для получения <xref:System.Reflection.MethodBody> для метода теста.</span><span class="sxs-lookup"><span data-stu-id="ccf58-168">The <xref:System.Reflection.MethodBase.GetMethodBody%2A?displayProperty=nameWithType> method is used to obtain a <xref:System.Reflection.MethodBody> object for the test method.</span></span> <span data-ttu-id="ccf58-169"><xref:System.Reflection.MethodBody.ExceptionHandlingClauses%2A> Свойство используется для получения списка <xref:System.Reflection.ExceptionHandlingClause> объектов и отобразить их свойства.</span><span class="sxs-lookup"><span data-stu-id="ccf58-169">The <xref:System.Reflection.MethodBody.ExceptionHandlingClauses%2A> property is used to obtain a list of <xref:System.Reflection.ExceptionHandlingClause> objects and display their properties.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="ccf58-170">Можно создать не все языки программирования <xref:System.Reflection.ExceptionHandlingClauseOptions.Filter?displayProperty=nameWithType> предложения.</span><span class="sxs-lookup"><span data-stu-id="ccf58-170">Not all computer languages can generate <xref:System.Reflection.ExceptionHandlingClauseOptions.Filter?displayProperty=nameWithType> clauses.</span></span> <span data-ttu-id="ccf58-171">В примере Visual Basic показано предложение фильтра, с помощью Visual Basic `When` выражения, отсутствующего в примерах для других языков.</span><span class="sxs-lookup"><span data-stu-id="ccf58-171">The Visual Basic example shows a filter clause, using a Visual Basic `When` expression, which is omitted from the examples for other languages.</span></span>  
  
 <span data-ttu-id="ccf58-172">Этот код является частью большего примера, расположенный в <xref:System.Reflection.MethodBody> разделе, посвященном классу.</span><span class="sxs-lookup"><span data-stu-id="ccf58-172">This code is part of a larger example located in the <xref:System.Reflection.MethodBody> class topic.</span></span>  
  
 [!code-cpp[MethodBody#2](~/samples/snippets/cpp/VS_Snippets_CLR/MethodBody/cpp/source.cpp#2)]
 [!code-csharp[MethodBody#2](~/samples/snippets/csharp/VS_Snippets_CLR/MethodBody/CS/source.cs#2)]
 [!code-vb[MethodBody#2](~/samples/snippets/visualbasic/VS_Snippets_CLR/MethodBody/VB/source.vb#2)]  
[!code-cpp[MethodBody#4](~/samples/snippets/cpp/VS_Snippets_CLR/MethodBody/cpp/source.cpp#4)]
[!code-csharp[MethodBody#4](~/samples/snippets/csharp/VS_Snippets_CLR/MethodBody/CS/source.cs#4)]
[!code-vb[MethodBody#4](~/samples/snippets/visualbasic/VS_Snippets_CLR/MethodBody/VB/source.vb#4)]  
[!code-cpp[MethodBody#5](~/samples/snippets/cpp/VS_Snippets_CLR/MethodBody/cpp/source.cpp#5)]
[!code-csharp[MethodBody#5](~/samples/snippets/csharp/VS_Snippets_CLR/MethodBody/CS/source.cs#5)]
[!code-vb[MethodBody#5](~/samples/snippets/visualbasic/VS_Snippets_CLR/MethodBody/VB/source.vb#5)]  
[!code-cpp[MethodBody#7](~/samples/snippets/cpp/VS_Snippets_CLR/MethodBody/cpp/source.cpp#7)]
[!code-csharp[MethodBody#7](~/samples/snippets/csharp/VS_Snippets_CLR/MethodBody/CS/source.cs#7)]
[!code-vb[MethodBody#7](~/samples/snippets/visualbasic/VS_Snippets_CLR/MethodBody/VB/source.vb#7)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ToString">
      <MemberSignature Language="C#" Value="public override string ToString ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance string ToString() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.ExceptionHandlingClause.ToString" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function ToString () As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override System::String ^ ToString();" />
      <MemberSignature Language="F#" Value="override this.ToString : unit -&gt; string" Usage="exceptionHandlingClause.ToString " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="ccf58-173">Строковое представление предложения обработки исключений.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ccf58-173">A string representation of the exception-handling clause.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="ccf58-174">Строка, в которой перечисляются подходящие значения свойств для типа предложения фильтра.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ccf58-174">A string that lists appropriate property values for the filter clause type.</span>
          </span>
        </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="TryLength">
      <MemberSignature Language="C#" Value="public virtual int TryLength { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 TryLength" />
      <MemberSignature Language="DocId" Value="P:System.Reflection.ExceptionHandlingClause.TryLength" />
      <MemberSignature Language="VB.NET" Value="Public Overridable ReadOnly Property TryLength As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property int TryLength { int get(); };" />
      <MemberSignature Language="F#" Value="member this.TryLength : int" Usage="System.Reflection.ExceptionHandlingClause.TryLength" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="ccf58-175">Общая длина блока "try", содержащего это предложение обработки исключений, в байтах.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ccf58-175">The total length, in bytes, of the try block that includes this exception-handling clause.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="ccf58-176">Общая длина блока "try", содержащего это предложение обработки исключений, в байтах.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ccf58-176">The total length, in bytes, of the try block that includes this exception-handling clause.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="ccf58-177">Целое число, представляющее общую длину, в байтах блока try, содержащего это предложение обработки исключений.</span><span class="sxs-lookup"><span data-stu-id="ccf58-177">An integer that represents the total length, in bytes, of the try block that includes this exception-handling clause.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="ccf58-178">Работа с предложения обработки исключений требуется исчерпывающие сведения о метаданных и форматах инструкций промежуточного языка MSIL Microsoft.</span><span class="sxs-lookup"><span data-stu-id="ccf58-178">Working with exception-handling clauses requires a thorough understanding of metadata and Microsoft intermediate language (MSIL) instruction formats.</span></span> <span data-ttu-id="ccf58-179">Сведения можно найти в документации по Common Language Infrastructure (CLI), особенно «Раздел II: определение метаданных и семантика» и «Раздел III: набор инструкций CIL».</span><span class="sxs-lookup"><span data-stu-id="ccf58-179">Information can be found in the Common Language Infrastructure (CLI) documentation, especially "Partition II: Metadata Definition and Semantics" and "Partition III: CIL Instruction Set".</span></span> <span data-ttu-id="ccf58-180">Документация доступна в Интернете; см. страницы [ECMAC# и стандарты Common Language Infrastructure](http://go.microsoft.com/fwlink/?LinkID=99212) на сайте MSDN и [Стандарт ECMA-335 — общеязыковая инфраструктура (CLI)](http://go.microsoft.com/fwlink/?LinkID=65552) на международном веб-сайте организации ECMA.</span><span class="sxs-lookup"><span data-stu-id="ccf58-180">The documentation is available online; see [ECMA C# and Common Language Infrastructure Standards](http://go.microsoft.com/fwlink/?LinkID=99212) on MSDN and [Standard ECMA-335 - Common Language Infrastructure (CLI)](http://go.microsoft.com/fwlink/?LinkID=65552) on the Ecma International Web site.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="ccf58-181">В следующем примере кода определяется метод теста с именем `MethodBodyExample`и отображает ее локальных переменных и предложений обработки исключений.</span><span class="sxs-lookup"><span data-stu-id="ccf58-181">The following code example defines a test method named `MethodBodyExample`, and displays its local variable information and exception-handling clauses.</span></span> <span data-ttu-id="ccf58-182"><xref:System.Reflection.MethodBase.GetMethodBody%2A?displayProperty=nameWithType> Метод используется для получения <xref:System.Reflection.MethodBody> для метода теста.</span><span class="sxs-lookup"><span data-stu-id="ccf58-182">The <xref:System.Reflection.MethodBase.GetMethodBody%2A?displayProperty=nameWithType> method is used to obtain a <xref:System.Reflection.MethodBody> object for the test method.</span></span> <span data-ttu-id="ccf58-183"><xref:System.Reflection.MethodBody.ExceptionHandlingClauses%2A> Свойство используется для получения списка <xref:System.Reflection.ExceptionHandlingClause> объектов и отобразить их свойства.</span><span class="sxs-lookup"><span data-stu-id="ccf58-183">The <xref:System.Reflection.MethodBody.ExceptionHandlingClauses%2A> property is used to obtain a list of <xref:System.Reflection.ExceptionHandlingClause> objects and display their properties.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="ccf58-184">Можно создать не все языки программирования <xref:System.Reflection.ExceptionHandlingClauseOptions.Filter?displayProperty=nameWithType> предложения.</span><span class="sxs-lookup"><span data-stu-id="ccf58-184">Not all computer languages can generate <xref:System.Reflection.ExceptionHandlingClauseOptions.Filter?displayProperty=nameWithType> clauses.</span></span> <span data-ttu-id="ccf58-185">В примере Visual Basic показано предложение фильтра, с помощью Visual Basic `When` выражения, отсутствующего в примерах для других языков.</span><span class="sxs-lookup"><span data-stu-id="ccf58-185">The Visual Basic example shows a filter clause, using a Visual Basic `When` expression, which is omitted from the examples for other languages.</span></span>  
  
 <span data-ttu-id="ccf58-186">Этот код является частью большего примера, расположенный в <xref:System.Reflection.MethodBody> разделе, посвященном классу.</span><span class="sxs-lookup"><span data-stu-id="ccf58-186">This code is part of a larger example located in the <xref:System.Reflection.MethodBody> class topic.</span></span>  
  
 [!code-cpp[MethodBody#2](~/samples/snippets/cpp/VS_Snippets_CLR/MethodBody/cpp/source.cpp#2)]
 [!code-csharp[MethodBody#2](~/samples/snippets/csharp/VS_Snippets_CLR/MethodBody/CS/source.cs#2)]
 [!code-vb[MethodBody#2](~/samples/snippets/visualbasic/VS_Snippets_CLR/MethodBody/VB/source.vb#2)]  
[!code-cpp[MethodBody#4](~/samples/snippets/cpp/VS_Snippets_CLR/MethodBody/cpp/source.cpp#4)]
[!code-csharp[MethodBody#4](~/samples/snippets/csharp/VS_Snippets_CLR/MethodBody/CS/source.cs#4)]
[!code-vb[MethodBody#4](~/samples/snippets/visualbasic/VS_Snippets_CLR/MethodBody/VB/source.vb#4)]  
[!code-cpp[MethodBody#5](~/samples/snippets/cpp/VS_Snippets_CLR/MethodBody/cpp/source.cpp#5)]
[!code-csharp[MethodBody#5](~/samples/snippets/csharp/VS_Snippets_CLR/MethodBody/CS/source.cs#5)]
[!code-vb[MethodBody#5](~/samples/snippets/visualbasic/VS_Snippets_CLR/MethodBody/VB/source.vb#5)]  
[!code-cpp[MethodBody#7](~/samples/snippets/cpp/VS_Snippets_CLR/MethodBody/cpp/source.cpp#7)]
[!code-csharp[MethodBody#7](~/samples/snippets/csharp/VS_Snippets_CLR/MethodBody/CS/source.cs#7)]
[!code-vb[MethodBody#7](~/samples/snippets/visualbasic/VS_Snippets_CLR/MethodBody/VB/source.vb#7)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="TryOffset">
      <MemberSignature Language="C#" Value="public virtual int TryOffset { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 TryOffset" />
      <MemberSignature Language="DocId" Value="P:System.Reflection.ExceptionHandlingClause.TryOffset" />
      <MemberSignature Language="VB.NET" Value="Public Overridable ReadOnly Property TryOffset As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property int TryOffset { int get(); };" />
      <MemberSignature Language="F#" Value="member this.TryOffset : int" Usage="System.Reflection.ExceptionHandlingClause.TryOffset" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="ccf58-187">Смещение в методе блока "try", содержащего это предложение обработки исключений, в байтах.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ccf58-187">The offset within the method, in bytes, of the try block that includes this exception-handling clause.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="ccf58-188">Целочисленное значение, которое представляет смещение в методе блока "try", содержащего это предложение обработки исключений, в байтах.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ccf58-188">An integer that represents the offset within the method, in bytes, of the try block that includes this exception-handling clause.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
> [!NOTE]
>  <span data-ttu-id="ccf58-189">Работа с предложения обработки исключений требуется исчерпывающие сведения о метаданных и форматах инструкций промежуточного языка MSIL Microsoft.</span><span class="sxs-lookup"><span data-stu-id="ccf58-189">Working with exception-handling clauses requires a thorough understanding of metadata and Microsoft intermediate language (MSIL) instruction formats.</span></span> <span data-ttu-id="ccf58-190">Сведения можно найти в документации по Common Language Infrastructure (CLI), особенно «Раздел II: определение метаданных и семантика» и «Раздел III: набор инструкций CIL».</span><span class="sxs-lookup"><span data-stu-id="ccf58-190">Information can be found in the Common Language Infrastructure (CLI) documentation, especially "Partition II: Metadata Definition and Semantics" and "Partition III: CIL Instruction Set".</span></span> <span data-ttu-id="ccf58-191">Документация доступна в Интернете; см. страницы [ECMAC# и стандарты Common Language Infrastructure](http://go.microsoft.com/fwlink/?LinkID=99212) на сайте MSDN и [Стандарт ECMA-335 — общеязыковая инфраструктура (CLI)](http://go.microsoft.com/fwlink/?LinkID=65552) на международном веб-сайте организации ECMA.</span><span class="sxs-lookup"><span data-stu-id="ccf58-191">The documentation is available online; see [ECMA C# and Common Language Infrastructure Standards](http://go.microsoft.com/fwlink/?LinkID=99212) on MSDN and [Standard ECMA-335 - Common Language Infrastructure (CLI)](http://go.microsoft.com/fwlink/?LinkID=65552) on the Ecma International Web site.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="ccf58-192">В следующем примере кода определяется метод теста с именем `MethodBodyExample`и отображает ее локальных переменных и предложений обработки исключений.</span><span class="sxs-lookup"><span data-stu-id="ccf58-192">The following code example defines a test method named `MethodBodyExample`, and displays its local variable information and exception-handling clauses.</span></span> <span data-ttu-id="ccf58-193"><xref:System.Reflection.MethodBase.GetMethodBody%2A?displayProperty=nameWithType> Метод используется для получения <xref:System.Reflection.MethodBody> для метода теста.</span><span class="sxs-lookup"><span data-stu-id="ccf58-193">The <xref:System.Reflection.MethodBase.GetMethodBody%2A?displayProperty=nameWithType> method is used to obtain a <xref:System.Reflection.MethodBody> object for the test method.</span></span> <span data-ttu-id="ccf58-194"><xref:System.Reflection.MethodBody.ExceptionHandlingClauses%2A> Свойство используется для получения списка <xref:System.Reflection.ExceptionHandlingClause> объектов и отобразить их свойства.</span><span class="sxs-lookup"><span data-stu-id="ccf58-194">The <xref:System.Reflection.MethodBody.ExceptionHandlingClauses%2A> property is used to obtain a list of <xref:System.Reflection.ExceptionHandlingClause> objects and display their properties.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="ccf58-195">Можно создать не все языки программирования <xref:System.Reflection.ExceptionHandlingClauseOptions.Filter?displayProperty=nameWithType> предложения.</span><span class="sxs-lookup"><span data-stu-id="ccf58-195">Not all computer languages can generate <xref:System.Reflection.ExceptionHandlingClauseOptions.Filter?displayProperty=nameWithType> clauses.</span></span> <span data-ttu-id="ccf58-196">В примере Visual Basic показано предложение фильтра, с помощью Visual Basic `When` выражения, отсутствующего в примерах для других языков.</span><span class="sxs-lookup"><span data-stu-id="ccf58-196">The Visual Basic example shows a filter clause, using a Visual Basic `When` expression, which is omitted from the examples for other languages.</span></span>  
  
 <span data-ttu-id="ccf58-197">Этот код является частью большего примера, расположенный в <xref:System.Reflection.MethodBody> разделе, посвященном классу.</span><span class="sxs-lookup"><span data-stu-id="ccf58-197">This code is part of a larger example located in the <xref:System.Reflection.MethodBody> class topic.</span></span>  
  
 [!code-cpp[MethodBody#2](~/samples/snippets/cpp/VS_Snippets_CLR/MethodBody/cpp/source.cpp#2)]
 [!code-csharp[MethodBody#2](~/samples/snippets/csharp/VS_Snippets_CLR/MethodBody/CS/source.cs#2)]
 [!code-vb[MethodBody#2](~/samples/snippets/visualbasic/VS_Snippets_CLR/MethodBody/VB/source.vb#2)]  
[!code-cpp[MethodBody#4](~/samples/snippets/cpp/VS_Snippets_CLR/MethodBody/cpp/source.cpp#4)]
[!code-csharp[MethodBody#4](~/samples/snippets/csharp/VS_Snippets_CLR/MethodBody/CS/source.cs#4)]
[!code-vb[MethodBody#4](~/samples/snippets/visualbasic/VS_Snippets_CLR/MethodBody/VB/source.vb#4)]  
[!code-cpp[MethodBody#5](~/samples/snippets/cpp/VS_Snippets_CLR/MethodBody/cpp/source.cpp#5)]
[!code-csharp[MethodBody#5](~/samples/snippets/csharp/VS_Snippets_CLR/MethodBody/CS/source.cs#5)]
[!code-vb[MethodBody#5](~/samples/snippets/visualbasic/VS_Snippets_CLR/MethodBody/VB/source.vb#5)]  
[!code-cpp[MethodBody#7](~/samples/snippets/cpp/VS_Snippets_CLR/MethodBody/cpp/source.cpp#7)]
[!code-csharp[MethodBody#7](~/samples/snippets/csharp/VS_Snippets_CLR/MethodBody/CS/source.cs#7)]
[!code-vb[MethodBody#7](~/samples/snippets/visualbasic/VS_Snippets_CLR/MethodBody/VB/source.vb#7)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>