<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" version="1.2" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="FieldAttributes.xml" source-language="en-US" target-language="ru-RU">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-15c36f0" tool-company="Microsoft" />
      <xliffext:skl_file_name xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">02cd5861-7ce2-4a82-b358-31f8435a0ac5e8bf52b4f1fa66ade72084eab3513fc567da3417.skl</xliffext:skl_file_name>
      <xliffext:version xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">1.2</xliffext:version>
      <xliffext:ms.openlocfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">e8bf52b4f1fa66ade72084eab3513fc567da3417</xliffext:ms.openlocfilehash>
      <xliffext:ms.sourcegitcommit xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">d31dc2ede16f6f7bc64e90d9f897ff54c4e3869b</xliffext:ms.sourcegitcommit>
      <xliffext:ms.lasthandoff xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">04/03/2018</xliffext:ms.lasthandoff>
      <xliffext:moniker_ids xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">netcore-1.0,netcore-1.1,netcore-2.0,netcore-2.1,netframework-4.5.1,netframework-4.5.2,netframework-4.5,netframework-4.6.1,netframework-4.6.2,netframework-4.6,netframework-4.7.1,netframework-4.7,netstandard-1.0,netstandard-1.1,netstandard-1.2,netstandard-1.3,netstandard-1.4,netstandard-1.6,netstandard-2.0,xamarinandroid-7.1,xamarinios-10.8,xamarinmac-3.0</xliffext:moniker_ids>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve" uid="T:System.Reflection.FieldAttributes">
          <source>Specifies flags that describe the attributes of a field.</source>
          <target state="translated">Задает флаги, описывающие атрибуты поля.</target>       </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Reflection.FieldAttributes">
          <source><ph id="ph1">`FieldAttributes`</ph> uses the value from <ph id="ph2">`FieldAccessMask`</ph> to mask off only the parts of the attribute value that pertain to the accessibility.</source>
          <target state="translated"><ph id="ph1">`FieldAttributes`</ph> использует значение из <ph id="ph2">`FieldAccessMask`</ph> чтобы маскировать только части значения атрибута, относящиеся к специальным возможностям.</target>       </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Reflection.FieldAttributes">
          <source>For example, the following code determines if <ph id="ph1">`Attributes`</ph> has the public bit set.</source>
          <target state="translated">Например, следующий код определяет, если <ph id="ph1">`Attributes`</ph> имеет открытый набор битов.</target>       </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Reflection.FieldAttributes">
          <source>To get the <ph id="ph1">`FieldAttributes`</ph>, first get the class <ph id="ph2">`Type`</ph>.</source>
          <target state="translated">Для получения <ph id="ph1">`FieldAttributes`</ph>, сначала нужно получить класс <ph id="ph2">`Type`</ph>.</target>       </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Reflection.FieldAttributes">
          <source>From the <ph id="ph1">`Type`</ph>, get the <ph id="ph2">`FieldInfo`</ph>.</source>
          <target state="translated">Из <ph id="ph1">`Type`</ph>, получить <ph id="ph2">`FieldInfo`</ph>.</target>       </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Reflection.FieldAttributes">
          <source>From the <ph id="ph1">`FieldInfo`</ph>, get the <ph id="ph2">`Attributes`</ph>.</source>
          <target state="translated">Из <ph id="ph1">`FieldInfo`</ph>, получить <ph id="ph2">`Attributes`</ph>.</target>       </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Reflection.FieldAttributes">
          <source>The enumerated value is a number representing the bitwise OR of the attributes implemented on the field.</source>
          <target state="translated">Перечислимое значение — число, представляющее битовую операцию OR атрибутов, реализованных для поля.</target>       </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Reflection.FieldAttributes">
          <source>In this example, three fields are built and the <ph id="ph1">`FieldAttributes`</ph> values are displayed.</source>
          <target state="translated">В этом примере создаются три поля и <ph id="ph1">`FieldAttributes`</ph> отображаются значения.</target>       </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Reflection.FieldAttributes">
          <source>A <ph id="ph1">`FieldAttributes`</ph> value can contain more than one attribute, for example, both <ph id="ph2">`Public`</ph> and <ph id="ph3">`Literal`</ph>, as shown in the third field.</source>
          <target state="translated">Объект <ph id="ph1">`FieldAttributes`</ph> значение может содержать более одного атрибута, к примеру, <ph id="ph2">`Public`</ph> и <ph id="ph3">`Literal`</ph>, как показано в третьем поле.</target>       </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve" uid="F:System.Reflection.FieldAttributes.Assembly">
          <source>Specifies that the field is accessible throughout the assembly.</source>
          <target state="translated">Определяет, что поле доступно во всей сборке.</target>       </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve" uid="F:System.Reflection.FieldAttributes.FamANDAssem">
          <source>Specifies that the field is accessible only by subtypes in this assembly.</source>
          <target state="translated">Определяет, что поле доступно только для подтипов в данной сборке.</target>       </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve" uid="F:System.Reflection.FieldAttributes.Family">
          <source>Specifies that the field is accessible only by type and subtypes.</source>
          <target state="translated">Определяет, что поле доступно только для типа и подтипов.</target>       </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve" uid="F:System.Reflection.FieldAttributes.FamORAssem">
          <source>Specifies that the field is accessible by subtypes anywhere, as well as throughout this assembly.</source>
          <target state="translated">Определяет, что поле доступно для подтипов, находящихся где угодно, а также во всей сборке.</target>       </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve" uid="F:System.Reflection.FieldAttributes.FieldAccessMask">
          <source>Specifies the access level of a given field.</source>
          <target state="translated">Определяет уровень доступа для заданного поля.</target>       </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve" uid="F:System.Reflection.FieldAttributes.HasDefault">
          <source>Specifies that the field has a default value.</source>
          <target state="translated">Определяет, что для поля задано значение по умолчанию.</target>       </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve" uid="F:System.Reflection.FieldAttributes.HasFieldMarshal">
          <source>Specifies that the field has marshaling information.</source>
          <target state="translated">Определяет, что для поля заданы сведения о маршалинге.</target>       </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve" uid="F:System.Reflection.FieldAttributes.HasFieldRVA">
          <source>Specifies that the field has a relative virtual address (RVA).</source>
          <target state="translated">Определяет, что для поля задан RVA (Relative Virtual Address, относительный виртуальный адрес).</target>       </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve" uid="F:System.Reflection.FieldAttributes.HasFieldRVA">
          <source>The RVA is the location of the method body in the current image, as an address relative to the start of the image file in which it is located.</source>
          <target state="translated">RVA определяет местонахождение текста сообщения метода в текущем образе — адрес относительно начала файла образа, в котором оно находится.</target>       </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve" uid="F:System.Reflection.FieldAttributes.InitOnly">
          <source>Specifies that the field is initialized only, and can be set only in the body of a constructor.</source>
          <target state="translated">Указывает, что поле инициализируется и задается только в теле конструктора.</target>       </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve" uid="F:System.Reflection.FieldAttributes.Literal">
          <source>Specifies that the field's value is a compile-time (static or early bound) constant.</source>
          <target state="translated">Определяет, что значение поля является константой (статической или с ранним связыванием), определяемой во время компиляции.</target>       </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve" uid="F:System.Reflection.FieldAttributes.Literal">
          <source>Any attempt to set it throws a <ph id="ph1">&lt;see cref="T:System.FieldAccessException" /&gt;</ph>.</source>
          <target state="translated">Любая попытка задать создает <ph id="ph1">&lt;see cref="T:System.FieldAccessException" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve" uid="F:System.Reflection.FieldAttributes.NotSerialized">
          <source>Specifies that the field does not have to be serialized when the type is remoted.</source>
          <target state="translated">Определяет, что если тип является удаленным, поле не должно быть сериализовано.</target>       </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve" uid="F:System.Reflection.FieldAttributes.PinvokeImpl">
          <source>Reserved for future use.</source>
          <target state="translated">Зарезервировано для будущего использования.</target>       </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve" uid="F:System.Reflection.FieldAttributes.Private">
          <source>Specifies that the field is accessible only by the parent type.</source>
          <target state="translated">Определяет, что поле доступно только для родительского типа.</target>       </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve" uid="F:System.Reflection.FieldAttributes.PrivateScope">
          <source>Specifies that the field cannot be referenced.</source>
          <target state="translated">Определяет, что на поле нельзя ссылаться.</target>       </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve" uid="F:System.Reflection.FieldAttributes.Public">
          <source>Specifies that the field is accessible by any member for whom this scope is visible.</source>
          <target state="translated">Определяет, что поле доступно любому члену, для которого эта ограниченная область действия является видимой.</target>       </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve" uid="F:System.Reflection.FieldAttributes.ReservedMask">
          <source>Reserved.</source>
          <target state="translated">Зарезервировано.</target>       </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve" uid="F:System.Reflection.FieldAttributes.RTSpecialName">
          <source>Specifies that the common language runtime (metadata internal APIs) should check the name encoding.</source>
          <target state="translated">Определяет, что общеязыковая среда выполнения (внутренние API метаданных) должна проверить кодировку имени.</target>       </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve" uid="F:System.Reflection.FieldAttributes.SpecialName">
          <source>Specifies a special method, with the name describing how the method is special.</source>
          <target state="translated">Определяет специальный метод с именем, которое описывает, насколько этот метод является специальным.</target>       </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve" uid="F:System.Reflection.FieldAttributes.Static">
          <source>Specifies that the field represents the defined type, or else it is per-instance.</source>
          <target state="translated">Определяет, что поле представляет указанный тип или является полем для экземпляра.</target>       </trans-unit>
      </group>
    </body>
  </file>
</xliff>