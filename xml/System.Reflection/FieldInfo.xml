<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" version="1.2" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="FieldInfo.xml" source-language="en-US" target-language="ru-RU">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-15c36f0" tool-company="Microsoft" />
      <xliffext:skl_file_name xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">02cd5861-7ce2-4a82-b358-31f8435a0ac5eaf3da8149c7beea481d56464ce8b739bcbe0488.skl</xliffext:skl_file_name>
      <xliffext:version xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">1.2</xliffext:version>
      <xliffext:ms.openlocfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">eaf3da8149c7beea481d56464ce8b739bcbe0488</xliffext:ms.openlocfilehash>
      <xliffext:ms.sourcegitcommit xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">d31dc2ede16f6f7bc64e90d9f897ff54c4e3869b</xliffext:ms.sourcegitcommit>
      <xliffext:ms.lasthandoff xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">04/03/2018</xliffext:ms.lasthandoff>
      <xliffext:moniker_ids xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">netcore-1.0,netcore-1.1,netcore-2.0,netcore-2.1,netframework-4.5.1,netframework-4.5.2,netframework-4.5,netframework-4.6.1,netframework-4.6.2,netframework-4.6,netframework-4.7.1,netframework-4.7,netstandard-1.0,netstandard-1.1,netstandard-1.2,netstandard-1.3,netstandard-1.4,netstandard-1.5,netstandard-1.6,netstandard-2.0,xamarinandroid-7.1,xamarinios-10.8,xamarinmac-3.0</xliffext:moniker_ids>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve" uid="T:System.Reflection.FieldInfo">
          <source>Discovers the attributes of a field and provides access to field metadata.</source>
          <target state="translated">Обнаруживает атрибуты поля и обеспечивает доступ к его метаданным.</target>       </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Reflection.FieldInfo">
          <source>The field information is obtained from metadata.</source>
          <target state="translated">Сведения о поле извлекаются из метаданных.</target>       </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Reflection.FieldInfo">
          <source>The <ph id="ph1">&lt;xref:System.Reflection.FieldInfo&gt;</ph> class does not have a public constructor.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Reflection.FieldInfo&gt;</ph> Класс не имеет открытого конструктора.</target>       </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Reflection.FieldInfo">
          <source><ph id="ph1">&lt;xref:System.Reflection.FieldInfo&gt;</ph> objects are obtained by calling either the <ph id="ph2">&lt;xref:System.Type.GetFields%2A&gt;</ph> or <ph id="ph3">&lt;xref:System.Type.GetField%2A&gt;</ph> method of a <ph id="ph4">`Type`</ph> object.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Reflection.FieldInfo&gt;</ph> объекты получаются путем вызова либо <ph id="ph2">&lt;xref:System.Type.GetFields%2A&gt;</ph> или <ph id="ph3">&lt;xref:System.Type.GetField%2A&gt;</ph> метод <ph id="ph4">`Type`</ph> объекта.</target>       </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Reflection.FieldInfo">
          <source>Fields are variables defined in the class.</source>
          <target state="translated">Поля — это переменные, определенные в классе.</target>       </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Reflection.FieldInfo">
          <source><ph id="ph1">&lt;xref:System.Reflection.FieldInfo&gt;</ph> provides access to the metadata for a field within a class and provides dynamic set and get functionality for the field.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Reflection.FieldInfo&gt;</ph> предоставляет доступ к метаданным поля в пределах класса и предоставляет динамический набор и получает функциональные возможности поля.</target>       </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Reflection.FieldInfo">
          <source>The class is not loaded into memory until invoke or get is called on the object.</source>
          <target state="translated">Класс не загружен в память до invoke или вызове get для объекта.</target>       </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Reflection.FieldInfo">
          <source>The following example uses the <ph id="ph1">&lt;xref:System.Type.GetFields%2A?displayProperty=nameWithType&gt;</ph> method to get the field-related information from the <ph id="ph2">&lt;xref:System.Reflection.FieldInfo&gt;</ph> class, and then displays field attributes.</source>
          <target state="translated">В следующем примере используется <ph id="ph1">&lt;xref:System.Type.GetFields%2A?displayProperty=nameWithType&gt;</ph> метод, чтобы получить сведения из <ph id="ph2">&lt;xref:System.Reflection.FieldInfo&gt;</ph> класса, а затем отобразить атрибуты полей.</target>       </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Reflection.FieldInfo">
          <source>for full trust for inheritors.</source>
          <target state="translated">для полного доверия для разработчиков производных классов.</target>       </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Reflection.FieldInfo">
          <source>This class cannot be inherited by partially trusted code.</source>
          <target state="translated">Этот класс не наследуется частично доверенным кодом.</target>       </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Reflection.FieldInfo">
          <source>This type is thread safe.</source>
          <target state="translated">Данный тип потокобезопасен.</target>       </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Reflection.FieldInfo">
          <source>When you inherit from <ph id="ph1">&lt;see cref="T:System.Reflection.FieldInfo" /&gt;</ph>, you must override the following members: <ph id="ph2">&lt;see cref="M:System.Reflection.FieldInfo.GetValue(System.Object)" /&gt;</ph> and <ph id="ph3">&lt;see cref="M:System.Reflection.FieldInfo.SetValue(System.Object,System.Object,System.Reflection.BindingFlags,System.Reflection.Binder,System.Globalization.CultureInfo)" /&gt;</ph>.</source>
          <target state="translated">При наследовании от класса <ph id="ph1">&lt;see cref="T:System.Reflection.FieldInfo" /&gt;</ph> необходимо переопределить следующие члены: <ph id="ph2">&lt;see cref="M:System.Reflection.FieldInfo.GetValue(System.Object)" /&gt;</ph> и <ph id="ph3">&lt;see cref="M:System.Reflection.FieldInfo.SetValue(System.Object,System.Object,System.Reflection.BindingFlags,System.Reflection.Binder,System.Globalization.CultureInfo)" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve" uid="M:System.Reflection.FieldInfo.#ctor">
          <source>Initializes a new instance of the <ph id="ph1">&lt;see langword="FieldInfo" /&gt;</ph> class.</source>
          <target state="translated">Инициализирует новый экземпляр класса <ph id="ph1">&lt;see langword="FieldInfo" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.FieldInfo.#ctor">
          <source>when invoked late-bound through mechanisms such as <ph id="ph1">&lt;see cref="M:System.Type.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[])" /&gt;</ph>.</source>
          <target state="translated">При вызове поздней привязкой, такие как <ph id="ph1">&lt;see cref="M:System.Type.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[])" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.FieldInfo.#ctor">
          <source>Associated enumeration: <ph id="ph1">&lt;see cref="F:System.Security.Permissions.ReflectionPermissionFlag.MemberAccess" /&gt;</ph>.</source>
          <target state="translated">Связанное перечисление: <ph id="ph1">&lt;see cref="F:System.Security.Permissions.ReflectionPermissionFlag.MemberAccess" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve" uid="P:System.Reflection.FieldInfo.Attributes">
          <source>Gets the attributes associated with this field.</source>
          <target state="translated">Возвращает атрибуты, связанные с этим полем.</target>       </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.FieldInfo.Attributes">
          <source>The <ph id="ph1">&lt;see langword="FieldAttributes" /&gt;</ph> for this field.</source>
          <target state="translated">Атрибуты <ph id="ph1">&lt;see langword="FieldAttributes" /&gt;</ph> для данного поля.</target>       </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.FieldInfo.Attributes">
          <source>All members have a set of attributes, which are defined in relation to the specific type of member.</source>
          <target state="translated">Все члены имеют набор атрибутов, определенных относительно определенного типа члена.</target>       </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.FieldInfo.Attributes">
          <source><ph id="ph1">`FieldAttributes`</ph> informs the user whether this field is the private field, a static field, and so on.</source>
          <target state="translated"><ph id="ph1">`FieldAttributes`</ph> сообщает пользователю, является ли это поле закрытое поле, статических полей и т. д.</target>       </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.FieldInfo.Attributes">
          <source>To get the <ph id="ph1">`Attributes`</ph> property, first get the class <ph id="ph2">`Type`</ph>.</source>
          <target state="translated">Для получения <ph id="ph1">`Attributes`</ph> свойство, сначала нужно получить класс <ph id="ph2">`Type`</ph>.</target>       </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.FieldInfo.Attributes">
          <source>From the <ph id="ph1">`Type`</ph>, get the <ph id="ph2">`FieldInfo`</ph>.</source>
          <target state="translated">Из <ph id="ph1">`Type`</ph>, получить <ph id="ph2">`FieldInfo`</ph>.</target>       </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.FieldInfo.Attributes">
          <source>From the <ph id="ph1">`FieldInfo`</ph>, get the <ph id="ph2">`Attributes`</ph>.</source>
          <target state="translated">Из <ph id="ph1">`FieldInfo`</ph>, получить <ph id="ph2">`Attributes`</ph>.</target>       </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.FieldInfo.Attributes">
          <source>The following code example builds three fields and displays their field attributes.</source>
          <target state="translated">В следующем примере кода создает три поля и выводятся их атрибуты.</target>       </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.FieldInfo.Attributes">
          <source>A <ph id="ph1">`FieldAttributes`</ph> value can contain more than one attribute, such as both <ph id="ph2">`Public`</ph> and <ph id="ph3">`Literal`</ph>, as shown in the third field.</source>
          <target state="translated">Объект <ph id="ph1">`FieldAttributes`</ph> значение может содержать более одного атрибута, например оба <ph id="ph2">`Public`</ph> и <ph id="ph3">`Literal`</ph>, как показано в третьем поле.</target>       </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve" uid="M:System.Reflection.FieldInfo.Equals(System.Object)">
          <source>An object to compare with this instance, or <ph id="ph1">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated">Объект, сравниваемый с этим экземпляром, или значение <ph id="ph1">&lt;see langword="null" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve" uid="M:System.Reflection.FieldInfo.Equals(System.Object)">
          <source>Returns a value that indicates whether this instance is equal to a specified object.</source>
          <target state="translated">Возвращает значение, показывающее, равен ли экземпляр указанному объекту.</target>       </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve" uid="M:System.Reflection.FieldInfo.Equals(System.Object)">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph> if <ph id="ph2">&lt;paramref name="obj" /&gt;</ph> equals the type and value of this instance; otherwise, <ph id="ph3">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;see langword="true" /&gt;</ph>, если значение параметра <ph id="ph2">&lt;paramref name="obj" /&gt;</ph> равно типу и значению данного экземпляра; в противном случае — <ph id="ph3">&lt;see langword="false" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve" uid="P:System.Reflection.FieldInfo.FieldHandle">
          <source>Gets a <ph id="ph1">&lt;see langword="RuntimeFieldHandle" /&gt;</ph>, which is a handle to the internal metadata representation of a field.</source>
          <target state="translated">Возвращает дескриптор <ph id="ph1">&lt;see langword="RuntimeFieldHandle" /&gt;</ph>, являющийся дескриптором представления внутренних метаданных поля.</target>       </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.FieldInfo.FieldHandle">
          <source>A handle to the internal metadata representation of a field.</source>
          <target state="translated">Дескриптор представления внутренних метаданных поля.</target>       </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.FieldInfo.FieldHandle">
          <source>The handles are valid only in the appdomain in which they were obtained.</source>
          <target state="translated">Дескрипторы доступны только в домене приложения, в котором они были получены.</target>       </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.FieldInfo.FieldHandle">
          <source>The following example retrieves MyClass.MyField field information and displays the field associated with the field handle.</source>
          <target state="translated">В следующем примере извлекается поле MyClass.MyField и отображается поле, связанное с этим дескриптором поля.</target>       </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve" uid="P:System.Reflection.FieldInfo.FieldType">
          <source>Gets the type of this field object.</source>
          <target state="translated">Возвращает тип этого объекта поля.</target>       </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.FieldInfo.FieldType">
          <source>The type of this field object.</source>
          <target state="translated">Тип этого объекта поля.</target>       </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.FieldInfo.FieldType">
          <source>The type is some primitive data type, such as <ph id="ph1">`String`</ph>, <ph id="ph2">`Boolean`</ph>, or <ph id="ph3">`GUID`</ph>.</source>
          <target state="translated">Тип — некоторые примитивный тип данных, таких как <ph id="ph1">`String`</ph>, <ph id="ph2">`Boolean`</ph>, или <ph id="ph3">`GUID`</ph>.</target>       </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.FieldInfo.FieldType">
          <source>To get the <ph id="ph1">`FieldType`</ph> property, first get the class <ph id="ph2">`Type`</ph>.</source>
          <target state="translated">Для получения <ph id="ph1">`FieldType`</ph> свойство, сначала нужно получить класс <ph id="ph2">`Type`</ph>.</target>       </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.FieldInfo.FieldType">
          <source>From the <ph id="ph1">`Type`</ph>, get the <ph id="ph2">`FieldInfo`</ph>.</source>
          <target state="translated">Из <ph id="ph1">`Type`</ph>, получить <ph id="ph2">`FieldInfo`</ph>.</target>       </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.FieldInfo.FieldType">
          <source>From the <ph id="ph1">`FieldInfo`</ph>, get the <ph id="ph2">`FieldType`</ph> value.</source>
          <target state="translated">Из <ph id="ph1">`FieldInfo`</ph>, получить <ph id="ph2">`FieldType`</ph> значение.</target>       </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.FieldInfo.FieldType">
          <source>The following example creates a field, gets its type and <ph id="ph1">&lt;xref:System.Reflection.FieldInfo&gt;</ph>, and displays its <ph id="ph2">&lt;xref:System.Reflection.FieldInfo.FieldType%2A&gt;</ph>.</source>
          <target state="translated">Следующий пример создает поле, получает его тип и <ph id="ph1">&lt;xref:System.Reflection.FieldInfo&gt;</ph>и отображает его <ph id="ph2">&lt;xref:System.Reflection.FieldInfo.FieldType%2A&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve" uid="T:System.Reflection.FieldInfo">
          <source>Gets a <ph id="ph1">&lt;see cref="T:System.Reflection.FieldInfo" /&gt;</ph> for the field represented by a handle.</source>
          <target state="translated">Получает объект <ph id="ph1">&lt;see cref="T:System.Reflection.FieldInfo" /&gt;</ph> для поля, представленного дескриптором.</target>       </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve" uid="M:System.Reflection.FieldInfo.GetFieldFromHandle(System.RuntimeFieldHandle)">
          <source>A <ph id="ph1">&lt;see cref="T:System.RuntimeFieldHandle" /&gt;</ph> structure that contains the handle to the internal metadata representation of a field.</source>
          <target state="translated">Структура дескрипторов <ph id="ph1">&lt;see cref="T:System.RuntimeFieldHandle" /&gt;</ph>, содержащая дескриптор для обработки внутреннего представления поля в метаданных.</target>       </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve" uid="M:System.Reflection.FieldInfo.GetFieldFromHandle(System.RuntimeFieldHandle)">
          <source>Gets a <ph id="ph1">&lt;see cref="T:System.Reflection.FieldInfo" /&gt;</ph> for the field represented by the specified handle.</source>
          <target state="translated">Возвращает значение <ph id="ph1">&lt;see cref="T:System.Reflection.FieldInfo" /&gt;</ph> для поля, представленного указанным дескриптором.</target>       </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve" uid="M:System.Reflection.FieldInfo.GetFieldFromHandle(System.RuntimeFieldHandle)">
          <source>A <ph id="ph1">&lt;see cref="T:System.Reflection.FieldInfo" /&gt;</ph> object representing the field specified by <ph id="ph2">&lt;paramref name="handle" /&gt;</ph>.</source>
          <target state="translated">Объект <ph id="ph1">&lt;see cref="T:System.Reflection.FieldInfo" /&gt;</ph>, представляющий поле, указанное параметром <ph id="ph2">&lt;paramref name="handle" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.FieldInfo.GetFieldFromHandle(System.RuntimeFieldHandle)">
          <source>Handles are valid only in the application domain in which they were obtained.</source>
          <target state="translated">Дескрипторы доступны только в домене приложения, в котором они были получены.</target>       </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.FieldInfo.GetFieldFromHandle(System.RuntimeFieldHandle)">
          <source>The following code example uses the <ph id="ph1">&lt;xref:System.Type.GetFields%2A?displayProperty=nameWithType&gt;</ph> method to get <ph id="ph2">&lt;xref:System.Reflection.FieldInfo&gt;</ph> objects for the fields of a type, gets a <ph id="ph3">&lt;xref:System.RuntimeFieldHandle&gt;</ph> structure for each field, and then retrieves the <ph id="ph4">&lt;xref:System.Reflection.FieldInfo&gt;</ph> objects from the handles using this overload of the <ph id="ph5">&lt;xref:System.Reflection.FieldInfo.GetFieldFromHandle%2A&gt;</ph> method.</source>
          <target state="translated">Следующий пример кода использует <ph id="ph1">&lt;xref:System.Type.GetFields%2A?displayProperty=nameWithType&gt;</ph> метод, чтобы получить <ph id="ph2">&lt;xref:System.Reflection.FieldInfo&gt;</ph> возвращает объекты для полей типа <ph id="ph3">&lt;xref:System.RuntimeFieldHandle&gt;</ph> структуру для каждого поля, а затем извлекает <ph id="ph4">&lt;xref:System.Reflection.FieldInfo&gt;</ph> объекты из дескрипторов, с помощью этой перегрузки <ph id="ph5">&lt;xref:System.Reflection.FieldInfo.GetFieldFromHandle%2A&gt;</ph>метод.</target>       </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve" uid="M:System.Reflection.FieldInfo.GetFieldFromHandle(System.RuntimeFieldHandle)">
          <source><ph id="ph1">&lt;paramref name="handle" /&gt;</ph> is invalid.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="handle" /&gt;</ph> недопустим.</target>       </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.FieldInfo.GetFieldFromHandle(System.RuntimeFieldHandle)">
          <source>when invoked late-bound through mechanisms such as <ph id="ph1">&lt;see cref="M:System.Type.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[])" /&gt;</ph>.</source>
          <target state="translated">При вызове поздней привязкой, такие как <ph id="ph1">&lt;see cref="M:System.Type.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[])" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.FieldInfo.GetFieldFromHandle(System.RuntimeFieldHandle)">
          <source>Associated enumeration: <ph id="ph1">&lt;see cref="F:System.Security.Permissions.ReflectionPermissionFlag.MemberAccess" /&gt;</ph>.</source>
          <target state="translated">Связанное перечисление: <ph id="ph1">&lt;see cref="F:System.Security.Permissions.ReflectionPermissionFlag.MemberAccess" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve" uid="M:System.Reflection.FieldInfo.GetFieldFromHandle(System.RuntimeFieldHandle,System.RuntimeTypeHandle)">
          <source>A <ph id="ph1">&lt;see cref="T:System.RuntimeFieldHandle" /&gt;</ph> structure that contains the handle to the internal metadata representation of a field.</source>
          <target state="translated">Структура дескрипторов <ph id="ph1">&lt;see cref="T:System.RuntimeFieldHandle" /&gt;</ph>, содержащая дескриптор для обработки внутреннего представления поля в метаданных.</target>       </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve" uid="M:System.Reflection.FieldInfo.GetFieldFromHandle(System.RuntimeFieldHandle,System.RuntimeTypeHandle)">
          <source>A <ph id="ph1">&lt;see cref="T:System.RuntimeTypeHandle" /&gt;</ph> structure that contains the handle to the generic type that defines the field.</source>
          <target state="translated">Структура дескрипторов <ph id="ph1">&lt;see cref="T:System.RuntimeTypeHandle" /&gt;</ph>, содержащая дескриптор для обработки универсального типа, который определяет это поле.</target>       </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve" uid="M:System.Reflection.FieldInfo.GetFieldFromHandle(System.RuntimeFieldHandle,System.RuntimeTypeHandle)">
          <source>Gets a <ph id="ph1">&lt;see cref="T:System.Reflection.FieldInfo" /&gt;</ph> for the field represented by the specified handle, for the specified generic type.</source>
          <target state="translated">Получает объект <ph id="ph1">&lt;see cref="T:System.Reflection.FieldInfo" /&gt;</ph> для представленного указанным дескриптором поля заданного универсального типа.</target>       </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve" uid="M:System.Reflection.FieldInfo.GetFieldFromHandle(System.RuntimeFieldHandle,System.RuntimeTypeHandle)">
          <source>A <ph id="ph1">&lt;see cref="T:System.Reflection.FieldInfo" /&gt;</ph> object representing the field specified by <ph id="ph2">&lt;paramref name="handle" /&gt;</ph>, in the generic type specified by <ph id="ph3">&lt;paramref name="declaringType" /&gt;</ph>.</source>
          <target state="translated">Объект <ph id="ph1">&lt;see cref="T:System.Reflection.FieldInfo" /&gt;</ph>, который представляет поле, определенное дескриптором <ph id="ph2">&lt;paramref name="handle" /&gt;</ph>, в универсальном типе, заданном параметром <ph id="ph3">&lt;paramref name="declaringType" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.FieldInfo.GetFieldFromHandle(System.RuntimeFieldHandle,System.RuntimeTypeHandle)">
          <source>Handles are valid only in the application domain in which they were obtained.</source>
          <target state="translated">Дескрипторы доступны только в домене приложения, в котором они были получены.</target>       </trans-unit>
        <trans-unit id="153" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.FieldInfo.GetFieldFromHandle(System.RuntimeFieldHandle,System.RuntimeTypeHandle)">
          <source>The recommended practice is that <ph id="ph1">`declaringType`</ph> should always be the runtime type handle of the constructed type that <ph id="ph2">`handle`</ph> belongs to.</source>
          <target state="translated">Рекомендуется, <ph id="ph1">`declaringType`</ph> всегда должен быть дескриптор типа среды выполнения из сконструированный тип, который <ph id="ph2">`handle`</ph> принадлежит.</target>       </trans-unit>
        <trans-unit id="154" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.FieldInfo.GetFieldFromHandle(System.RuntimeFieldHandle,System.RuntimeTypeHandle)">
          <source>That is, if <ph id="ph1">`handle`</ph> is a runtime field handle for a field that belongs to <ph id="ph2">`MyType&lt;int&gt;`</ph> (<ph id="ph3">`MyType(Of Integer)`</ph> in Visual Basic), <ph id="ph4">`declaringType`</ph> is the runtime type handle for <ph id="ph5">`MyType&lt;int&gt;`</ph>.</source>
          <target state="translated">То есть если <ph id="ph1">`handle`</ph> является дескриптор поля среды выполнения для поля, к которому принадлежит <ph id="ph2">`MyType&lt;int&gt;`</ph> (<ph id="ph3">`MyType(Of Integer)`</ph> в Visual Basic), <ph id="ph4">`declaringType`</ph> дескриптор типа среды выполнения для <ph id="ph5">`MyType&lt;int&gt;`</ph>.</target>       </trans-unit>
        <trans-unit id="155" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.FieldInfo.GetFieldFromHandle(System.RuntimeFieldHandle,System.RuntimeTypeHandle)">
          <source>Do not use the runtime type handle of the generic type definition, unless the runtime field handle represents a field on the generic type definition.</source>
          <target state="translated">Не используйте дескриптор типа среды выполнения определения универсального типа, если дескриптор поля среды выполнения представляет поле в определении универсального типа.</target>       </trans-unit>
        <trans-unit id="156" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.FieldInfo.GetFieldFromHandle(System.RuntimeFieldHandle,System.RuntimeTypeHandle)">
          <source>Implementations are compatible in some cases.</source>
          <target state="translated">В некоторых случаях реализации совместимы.</target>       </trans-unit>
        <trans-unit id="157" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.FieldInfo.GetFieldFromHandle(System.RuntimeFieldHandle,System.RuntimeTypeHandle)">
          <source>For example, a single implementation is shared by all types that are constructed from a particular generic type definition by using reference types for the generic type arguments.</source>
          <target state="translated">Например одной реализации совместно все типы, которые создаются из конкретного определения универсального типа с помощью ссылочных типов для аргументов универсального типа.</target>       </trans-unit>
        <trans-unit id="158" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.FieldInfo.GetFieldFromHandle(System.RuntimeFieldHandle,System.RuntimeTypeHandle)">
          <source>For example, <ph id="ph1">`MyType&lt;string&gt;`</ph>, <ph id="ph2">`MyType&lt;object&gt;`</ph>, and <ph id="ph3">`MyType&lt;ArrayList&gt;`</ph> all share the same implementation.</source>
          <target state="translated">Например <ph id="ph1">`MyType&lt;string&gt;`</ph>, <ph id="ph2">`MyType&lt;object&gt;`</ph>, и <ph id="ph3">`MyType&lt;ArrayList&gt;`</ph> все используют одну реализацию.</target>       </trans-unit>
        <trans-unit id="159" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.FieldInfo.GetFieldFromHandle(System.RuntimeFieldHandle,System.RuntimeTypeHandle)">
          <source>In this situation, the <ph id="ph1">&lt;xref:System.Reflection.FieldInfo&gt;</ph> object that is returned represents a field on the type that <ph id="ph2">`declaringType`</ph> specifies, regardless of the original source of <ph id="ph3">`handle`</ph>.</source>
          <target state="translated">В этом случае <ph id="ph1">&lt;xref:System.Reflection.FieldInfo&gt;</ph> возвращаемый объект представляет поле в типе, <ph id="ph2">`declaringType`</ph> указывает независимо от первоначального источника <ph id="ph3">`handle`</ph>.</target>       </trans-unit>
        <trans-unit id="160" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.FieldInfo.GetFieldFromHandle(System.RuntimeFieldHandle,System.RuntimeTypeHandle)">
          <source>This practice is not recommended, because it works only if the generic type arguments of the constructed type are reference types.</source>
          <target state="translated">Такой подход не рекомендуется, так как она работает только в том случае, если аргументы универсального типа сконструированного типа являются ссылочными типами.</target>       </trans-unit>
        <trans-unit id="161" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.FieldInfo.GetFieldFromHandle(System.RuntimeFieldHandle,System.RuntimeTypeHandle)">
          <source>If a generic argument is a value type, the runtime type handle of the constructed type is not compatible with runtime field handles from constructions that have a reference type in the same generic parameter position, or that have a different value type in that position.</source>
          <target state="translated">Если универсальный аргумент — тип значения, дескриптор типа среды выполнения сконструированного типа не совместим с маркерами поля среды выполнения из конструкций, имеющих ссылочный тип в той же позиции универсальным параметром, или в которых значение другого типа в этой позиции .</target>       </trans-unit>
        <trans-unit id="162" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.FieldInfo.GetFieldFromHandle(System.RuntimeFieldHandle,System.RuntimeTypeHandle)">
          <source>In that case, the only way to use the <ph id="ph1">&lt;xref:System.Reflection.FieldInfo.GetFieldFromHandle%28System.RuntimeFieldHandle%2CSystem.RuntimeTypeHandle%29?displayProperty=nameWithType&gt;</ph> overload is to ensure that <ph id="ph2">`declaringType`</ph> is the runtime type handle for the constructed type that <ph id="ph3">`handle`</ph> belongs to.</source>
          <target state="translated">В этом случае единственный способ использовать <ph id="ph1">&lt;xref:System.Reflection.FieldInfo.GetFieldFromHandle%28System.RuntimeFieldHandle%2CSystem.RuntimeTypeHandle%29?displayProperty=nameWithType&gt;</ph> будет перегрузка, чтобы убедиться, что <ph id="ph2">`declaringType`</ph> является дескриптор типа среды выполнения для сконструированного типа <ph id="ph3">`handle`</ph> принадлежит.</target>       </trans-unit>
        <trans-unit id="163" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.FieldInfo.GetFieldFromHandle(System.RuntimeFieldHandle,System.RuntimeTypeHandle)">
          <source>The following example shows how to retrieve <ph id="ph1">&lt;xref:System.Reflection.FieldInfo&gt;</ph> objects for fields on constructed generic classes.</source>
          <target state="translated">В следующем примере показано, как получить <ph id="ph1">&lt;xref:System.Reflection.FieldInfo&gt;</ph> объектов для полей создаваемых универсальных классов.</target>       </trans-unit>
        <trans-unit id="164" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.FieldInfo.GetFieldFromHandle(System.RuntimeFieldHandle,System.RuntimeTypeHandle)">
          <source>The example defines the generic type <ph id="ph1">`Test&lt;T&gt;`</ph> (<ph id="ph2">`Test(Of T)`</ph> in Visual Basic) with a single field named <ph id="ph3">`TestField`</ph>, of type <ph id="ph4">`T`</ph>.</source>
          <target state="translated">В примере определяется универсальный тип <ph id="ph1">`Test&lt;T&gt;`</ph> (<ph id="ph2">`Test(Of T)`</ph> в Visual Basic) с одним полем с именем <ph id="ph3">`TestField`</ph>, типа <ph id="ph4">`T`</ph>.</target>       </trans-unit>
        <trans-unit id="165" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.FieldInfo.GetFieldFromHandle(System.RuntimeFieldHandle,System.RuntimeTypeHandle)">
          <source>The example gets the <ph id="ph1">&lt;xref:System.RuntimeFieldHandle&gt;</ph> and <ph id="ph2">&lt;xref:System.RuntimeTypeHandle&gt;</ph> for the case where <ph id="ph3">`T`</ph> is <ph id="ph4">&lt;xref:System.String&gt;</ph>, and demonstrates the following:</source>
          <target state="translated">В примере показано получение <ph id="ph1">&lt;xref:System.RuntimeFieldHandle&gt;</ph> и <ph id="ph2">&lt;xref:System.RuntimeTypeHandle&gt;</ph> в случае, где <ph id="ph3">`T`</ph> — <ph id="ph4">&lt;xref:System.String&gt;</ph>и демонстрируется следующее:</target>       </trans-unit>
        <trans-unit id="166" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.FieldInfo.GetFieldFromHandle(System.RuntimeFieldHandle,System.RuntimeTypeHandle)">
          <source>An exception is thrown if the <ph id="ph1">&lt;xref:System.Reflection.FieldInfo.GetFieldFromHandle%28System.RuntimeFieldHandle%29&gt;</ph> method overload is used.</source>
          <target state="translated">Исключение возникает, если <ph id="ph1">&lt;xref:System.Reflection.FieldInfo.GetFieldFromHandle%28System.RuntimeFieldHandle%29&gt;</ph> используется перегрузка метода.</target>       </trans-unit>
        <trans-unit id="167" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.FieldInfo.GetFieldFromHandle(System.RuntimeFieldHandle,System.RuntimeTypeHandle)">
          <source>This is true even if the field is not of type <ph id="ph1">`T`</ph>.</source>
          <target state="translated">Это верно, даже если поля не относится к типу <ph id="ph1">`T`</ph>.</target>       </trans-unit>
        <trans-unit id="168" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.FieldInfo.GetFieldFromHandle(System.RuntimeFieldHandle,System.RuntimeTypeHandle)">
          <source>A <ph id="ph1">&lt;xref:System.Reflection.FieldInfo&gt;</ph> is retrieved successfully if the runtime type handle is from the same construction as the runtime field handle, in this case <ph id="ph2">`Test&lt;string&gt;`</ph>.</source>
          <target state="translated">Объект <ph id="ph1">&lt;xref:System.Reflection.FieldInfo&gt;</ph> извлекается успешно, если дескриптор типа среды выполнения из одной конструкции как дескриптор поля среды выполнения, в этом случае <ph id="ph2">`Test&lt;string&gt;`</ph>.</target>       </trans-unit>
        <trans-unit id="169" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.FieldInfo.GetFieldFromHandle(System.RuntimeFieldHandle,System.RuntimeTypeHandle)">
          <source>If the runtime type handle is from a compatible construction, in this case <ph id="ph1">`Test&lt;object&gt;`</ph>, a <ph id="ph2">&lt;xref:System.Reflection.FieldInfo&gt;</ph> for the field on the compatible construction is retrieved.</source>
          <target state="translated">Если дескриптор типа среды выполнения из совместимой конструкции, в данном случае является <ph id="ph1">`Test&lt;object&gt;`</ph>, <ph id="ph2">&lt;xref:System.Reflection.FieldInfo&gt;</ph> для извлекается поля в совместимой конструкции.</target>       </trans-unit>
        <trans-unit id="170" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.FieldInfo.GetFieldFromHandle(System.RuntimeFieldHandle,System.RuntimeTypeHandle)">
          <source>If the runtime type handle is not from a compatible construction, an exception is thrown.</source>
          <target state="translated">Если дескриптор типа среды выполнения не из совместимой конструкции, создается исключение.</target>       </trans-unit>
        <trans-unit id="171" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.FieldInfo.GetFieldFromHandle(System.RuntimeFieldHandle,System.RuntimeTypeHandle)">
          <source>In this case, a value type is specified for <ph id="ph1">`T`</ph>.</source>
          <target state="translated">В этом случае тип значения указан для <ph id="ph1">`T`</ph>.</target>       </trans-unit>
        <trans-unit id="172" translate="yes" xml:space="preserve" uid="M:System.Reflection.FieldInfo.GetFieldFromHandle(System.RuntimeFieldHandle,System.RuntimeTypeHandle)">
          <source><ph id="ph1">&lt;paramref name="handle" /&gt;</ph> is invalid.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="handle" /&gt;</ph> недопустим.</target>       </trans-unit>
        <trans-unit id="173" translate="yes" xml:space="preserve" uid="M:System.Reflection.FieldInfo.GetFieldFromHandle(System.RuntimeFieldHandle,System.RuntimeTypeHandle)">
          <source>-or-</source>
          <target state="translated">- или -</target>       </trans-unit>
        <trans-unit id="174" translate="yes" xml:space="preserve" uid="M:System.Reflection.FieldInfo.GetFieldFromHandle(System.RuntimeFieldHandle,System.RuntimeTypeHandle)">
          <source><ph id="ph1">&lt;paramref name="declaringType" /&gt;</ph> is not compatible with <ph id="ph2">&lt;paramref name="handle" /&gt;</ph>.</source>
          <target state="translated">Параметр <ph id="ph1">&lt;paramref name="declaringType" /&gt;</ph> несовместим с параметром <ph id="ph2">&lt;paramref name="handle" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="175" translate="yes" xml:space="preserve" uid="M:System.Reflection.FieldInfo.GetFieldFromHandle(System.RuntimeFieldHandle,System.RuntimeTypeHandle)">
          <source>For example, <ph id="ph1">&lt;paramref name="declaringType" /&gt;</ph> is the runtime type handle of the generic type definition, and <ph id="ph2">&lt;paramref name="handle" /&gt;</ph> comes from a constructed type.</source>
          <target state="translated">Например, параметр <ph id="ph1">&lt;paramref name="declaringType" /&gt;</ph> представляет дескриптор типа среды выполнения определения универсального типа, а параметр <ph id="ph2">&lt;paramref name="handle" /&gt;</ph> поступает из конструируемого типа.</target>       </trans-unit>
        <trans-unit id="176" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.FieldInfo.GetFieldFromHandle(System.RuntimeFieldHandle,System.RuntimeTypeHandle)">
          <source>when invoked late-bound through mechanisms such as <ph id="ph1">&lt;see cref="M:System.Type.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[])" /&gt;</ph>.</source>
          <target state="translated">При вызове поздней привязкой, такие как <ph id="ph1">&lt;see cref="M:System.Type.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[])" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="177" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.FieldInfo.GetFieldFromHandle(System.RuntimeFieldHandle,System.RuntimeTypeHandle)">
          <source>Associated enumeration: <ph id="ph1">&lt;see cref="F:System.Security.Permissions.ReflectionPermissionFlag.MemberAccess" /&gt;</ph>.</source>
          <target state="translated">Связанное перечисление: <ph id="ph1">&lt;see cref="F:System.Security.Permissions.ReflectionPermissionFlag.MemberAccess" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="178" translate="yes" xml:space="preserve" uid="M:System.Reflection.FieldInfo.GetHashCode">
          <source>Returns the hash code for this instance.</source>
          <target state="translated">Возвращает хэш-код данного экземпляра.</target>       </trans-unit>
        <trans-unit id="179" translate="yes" xml:space="preserve" uid="M:System.Reflection.FieldInfo.GetHashCode">
          <source>A 32-bit signed integer hash code.</source>
          <target state="translated">Хэш-код в виде 32-разрядного целого числа со знаком.</target>       </trans-unit>
        <trans-unit id="180" translate="yes" xml:space="preserve" uid="M:System.Reflection.FieldInfo.GetOptionalCustomModifiers">
          <source>Gets an array of types that identify the optional custom modifiers of the field.</source>
          <target state="translated">Возвращает массив типов, определяющих необязательные настраиваемые модификаторы для поля.</target>       </trans-unit>
        <trans-unit id="181" translate="yes" xml:space="preserve" uid="M:System.Reflection.FieldInfo.GetOptionalCustomModifiers">
          <source>An array of <ph id="ph1">&lt;see cref="T:System.Type" /&gt;</ph> objects that identify the optional custom modifiers of the current field, such as <ph id="ph2">&lt;see cref="T:System.Runtime.CompilerServices.IsConst" /&gt;</ph>.</source>
          <target state="translated">Массив объектов <ph id="ph1">&lt;see cref="T:System.Type" /&gt;</ph>, которые указывают дополнительные настраиваемые модификаторы для текущего поля, такие как <ph id="ph2">&lt;see cref="T:System.Runtime.CompilerServices.IsConst" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="182" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.FieldInfo.GetOptionalCustomModifiers">
          <source>The <ph id="ph1">&lt;xref:System.Reflection.FieldInfo.GetOptionalCustomModifiers%2A&gt;</ph> and <ph id="ph2">&lt;xref:System.Reflection.FieldInfo.GetRequiredCustomModifiers%2A&gt;</ph> methods are provided for designers of managed compilers.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Reflection.FieldInfo.GetOptionalCustomModifiers%2A&gt;</ph> И <ph id="ph2">&lt;xref:System.Reflection.FieldInfo.GetRequiredCustomModifiers%2A&gt;</ph> методы предоставляются для конструкторов управляемых компиляторов.</target>       </trans-unit>
        <trans-unit id="183" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.FieldInfo.GetOptionalCustomModifiers">
          <source>For more information on custom modifiers, see <ph id="ph1">&lt;xref:System.Runtime.CompilerServices.IsBoxed&gt;</ph> and related classes in the <ph id="ph2">&lt;xref:System.Runtime.CompilerServices&gt;</ph> namespace and the metadata specification in the ECMA Partition II documentation.</source>
          <target state="translated">Дополнительные сведения о настраиваемых модификаторов см. в разделе <ph id="ph1">&lt;xref:System.Runtime.CompilerServices.IsBoxed&gt;</ph> и связанными классами в <ph id="ph2">&lt;xref:System.Runtime.CompilerServices&gt;</ph> пространства имен и спецификацию метаданных в документации ECMA раздел II.</target>       </trans-unit>
        <trans-unit id="184" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.FieldInfo.GetOptionalCustomModifiers">
          <source>The documentation is available online; see <bpt id="p1">[</bpt>ECMA C# and Common Language Infrastructure Standards<ept id="p1">](http://go.microsoft.com/fwlink/?LinkID=99212)</ept> on MSDN and <bpt id="p2">[</bpt>Standard ECMA-335 - Common Language Infrastructure (CLI)<ept id="p2">](http://go.microsoft.com/fwlink/?LinkID=65552)</ept> on the Ecma International Web site.</source>
          <target state="translated">Документация доступна в Интернете; см. страницы <bpt id="p1">[</bpt>ECMAC# и стандарты Common Language Infrastructure<ept id="p1">](http://go.microsoft.com/fwlink/?LinkID=99212)</ept> на сайте MSDN и <bpt id="p2">[</bpt>Стандарт ECMA-335 — общеязыковая инфраструктура (CLI)<ept id="p2">](http://go.microsoft.com/fwlink/?LinkID=65552)</ept> на международном веб-сайте организации ECMA.</target>       </trans-unit>
        <trans-unit id="185" translate="yes" xml:space="preserve" uid="M:System.Reflection.FieldInfo.GetRawConstantValue">
          <source>Returns a literal value associated with the field by a compiler.</source>
          <target state="translated">Метод возвращает литеральное значение, связанное с этим свойством компилятором.</target>       </trans-unit>
        <trans-unit id="186" translate="yes" xml:space="preserve" uid="M:System.Reflection.FieldInfo.GetRawConstantValue">
          <source>An <ph id="ph1">&lt;see cref="T:System.Object" /&gt;</ph> that contains the literal value associated with the field.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Object" /&gt;</ph> — содержит литеральное значение, связанное с этим полем.</target>       </trans-unit>
        <trans-unit id="187" translate="yes" xml:space="preserve" uid="M:System.Reflection.FieldInfo.GetRawConstantValue">
          <source>If the literal value is a class type with an element value of zero, the return value is <ph id="ph1">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated">Если значение литерала является типом класса и при этом значение элемента равно нулю, возвращается значение <ph id="ph1">&lt;see langword="null" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="188" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.FieldInfo.GetRawConstantValue">
          <source>This method is provided for designers of managed compilers and code analyzers.</source>
          <target state="translated">Этот метод предназначен для разработки управляемых компиляторов и анализаторов кода.</target>       </trans-unit>
        <trans-unit id="189" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.FieldInfo.GetRawConstantValue">
          <source>This method can be used in both the execution context and the reflection-only context.</source>
          <target state="translated">Этот метод можно использовать в контексте выполнения и контекст только для отражения.</target>       </trans-unit>
        <trans-unit id="190" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.FieldInfo.GetRawConstantValue">
          <source>In unmanaged metadata, the Constant table is used to store constant values for fields, parameters, and properties.</source>
          <target state="translated">В неуправляемых метаданных Таблица констант используется для хранения константных значений для поля, параметры и свойства.</target>       </trans-unit>
        <trans-unit id="191" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.FieldInfo.GetRawConstantValue">
          <source>Constant information does not directly influence runtime behavior.</source>
          <target state="translated">Сведения о константах не влияет напрямую на поведение во время выполнения.</target>       </trans-unit>
        <trans-unit id="192" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.FieldInfo.GetRawConstantValue">
          <source>Compilers inspect this information, at compile time, when importing metadata.</source>
          <target state="translated">Компиляторы проверяют эти данные во время компиляции, при импорте метаданных.</target>       </trans-unit>
        <trans-unit id="193" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.FieldInfo.GetRawConstantValue">
          <source>If used, the value of a constant is embedded in the Microsoft intermediate language (MSIL) stream the compiler emits.</source>
          <target state="translated">При использовании значения константы внедряется в потоке промежуточного языка MSIL, создаваемый компилятором.</target>       </trans-unit>
        <trans-unit id="194" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.FieldInfo.GetRawConstantValue">
          <source>There are no MSIL instructions that can be used to access the Constant table at run time.</source>
          <target state="translated">Существуют инструкции MSIL, которые могут использоваться для доступа к таблице констант во время выполнения.</target>       </trans-unit>
        <trans-unit id="195" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.FieldInfo.GetRawConstantValue">
          <source>For more information on constant values and the Constant table, see the ECMA Partition II documentation.</source>
          <target state="translated">Дополнительные сведения о константных значениях и таблице констант см. в документации ECMA раздел II.</target>       </trans-unit>
        <trans-unit id="196" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.FieldInfo.GetRawConstantValue">
          <source>The documentation is available online; see <bpt id="p1">[</bpt>ECMA C# and Common Language Infrastructure Standards<ept id="p1">](http://go.microsoft.com/fwlink/?LinkID=99212)</ept> on MSDN and <bpt id="p2">[</bpt>Standard ECMA-335 - Common Language Infrastructure (CLI)<ept id="p2">](http://go.microsoft.com/fwlink/?LinkID=65552)</ept> on the Ecma International Web site.</source>
          <target state="translated">Документация доступна в Интернете; см. страницы <bpt id="p1">[</bpt>ECMAC# и стандарты Common Language Infrastructure<ept id="p1">](http://go.microsoft.com/fwlink/?LinkID=99212)</ept> на сайте MSDN и <bpt id="p2">[</bpt>Стандарт ECMA-335 — общеязыковая инфраструктура (CLI)<ept id="p2">](http://go.microsoft.com/fwlink/?LinkID=65552)</ept> на международном веб-сайте организации ECMA.</target>       </trans-unit>
        <trans-unit id="197" translate="yes" xml:space="preserve" uid="M:System.Reflection.FieldInfo.GetRawConstantValue">
          <source>The Constant table in unmanaged metadata does not contain a constant value for the current field.</source>
          <target state="translated">Таблица констант в неуправляемых метаданных не содержит значение константы для текущего поля.</target>       </trans-unit>
        <trans-unit id="198" translate="yes" xml:space="preserve" uid="M:System.Reflection.FieldInfo.GetRawConstantValue">
          <source>The type of the value is not one of the types permitted by the Common Language Specification (CLS).</source>
          <target state="translated">Тип значения не является одним из типов, разрешенных спецификацией CLS.</target>       </trans-unit>
        <trans-unit id="199" translate="yes" xml:space="preserve" uid="M:System.Reflection.FieldInfo.GetRawConstantValue">
          <source>See the ECMA Partition II specification Metadata Logical Format: Other Structures, Element Types used in Signatures.</source>
          <target state="translated">См. спецификацию ECMA, раздел II, логический формат метаданных (другие структуры и типы элементов, используемые в сигнатурах).</target>       </trans-unit>
        <trans-unit id="200" translate="yes" xml:space="preserve" uid="M:System.Reflection.FieldInfo.GetRawConstantValue">
          <source>The constant value for the field is not set.</source>
          <target state="translated">Значение константы для поля не задано.</target>       </trans-unit>
        <trans-unit id="201" translate="yes" xml:space="preserve" uid="M:System.Reflection.FieldInfo.GetRequiredCustomModifiers">
          <source>Gets an array of types that identify the required custom modifiers of the property.</source>
          <target state="translated">Возвращает массив типов, определяющих обязательные настраиваемые модификаторы для свойства.</target>       </trans-unit>
        <trans-unit id="202" translate="yes" xml:space="preserve" uid="M:System.Reflection.FieldInfo.GetRequiredCustomModifiers">
          <source>An array of <ph id="ph1">&lt;see cref="T:System.Type" /&gt;</ph> objects that identify the required custom modifiers of the current property, such as <ph id="ph2">&lt;see cref="T:System.Runtime.CompilerServices.IsConst" /&gt;</ph> or <ph id="ph3">&lt;see cref="T:System.Runtime.CompilerServices.IsImplicitlyDereferenced" /&gt;</ph>.</source>
          <target state="translated">Массив объектов <ph id="ph1">&lt;see cref="T:System.Type" /&gt;</ph>, которые указывают обязательные настраиваемые модификаторы для текущего свойства, например <ph id="ph2">&lt;see cref="T:System.Runtime.CompilerServices.IsConst" /&gt;</ph> или <ph id="ph3">&lt;see cref="T:System.Runtime.CompilerServices.IsImplicitlyDereferenced" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="203" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.FieldInfo.GetRequiredCustomModifiers">
          <source>The <ph id="ph1">&lt;xref:System.Reflection.FieldInfo.GetOptionalCustomModifiers%2A&gt;</ph> and <ph id="ph2">&lt;xref:System.Reflection.FieldInfo.GetRequiredCustomModifiers%2A&gt;</ph> methods are provided for designers of managed compilers.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Reflection.FieldInfo.GetOptionalCustomModifiers%2A&gt;</ph> И <ph id="ph2">&lt;xref:System.Reflection.FieldInfo.GetRequiredCustomModifiers%2A&gt;</ph> методы предоставляются для конструкторов управляемых компиляторов.</target>       </trans-unit>
        <trans-unit id="204" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.FieldInfo.GetRequiredCustomModifiers">
          <source>For more information on custom modifiers, see <ph id="ph1">&lt;xref:System.Runtime.CompilerServices.IsBoxed&gt;</ph> and related classes in the <ph id="ph2">&lt;xref:System.Runtime.CompilerServices&gt;</ph> namespace and the metadata specification in the ECMA Partition II documentation.</source>
          <target state="translated">Дополнительные сведения о настраиваемых модификаторов см. в разделе <ph id="ph1">&lt;xref:System.Runtime.CompilerServices.IsBoxed&gt;</ph> и связанными классами в <ph id="ph2">&lt;xref:System.Runtime.CompilerServices&gt;</ph> пространства имен и спецификацию метаданных в документации ECMA раздел II.</target>       </trans-unit>
        <trans-unit id="205" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.FieldInfo.GetRequiredCustomModifiers">
          <source>The documentation is available online; see <bpt id="p1">[</bpt>ECMA C# and Common Language Infrastructure Standards<ept id="p1">](http://go.microsoft.com/fwlink/?LinkID=99212)</ept> on MSDN and <bpt id="p2">[</bpt>Standard ECMA-335 - Common Language Infrastructure (CLI)<ept id="p2">](http://go.microsoft.com/fwlink/?LinkID=65552)</ept> on the Ecma International Web site.</source>
          <target state="translated">Документация доступна в Интернете; см. страницы <bpt id="p1">[</bpt>ECMAC# и стандарты Common Language Infrastructure<ept id="p1">](http://go.microsoft.com/fwlink/?LinkID=99212)</ept> на сайте MSDN и <bpt id="p2">[</bpt>Стандарт ECMA-335 — общеязыковая инфраструктура (CLI)<ept id="p2">](http://go.microsoft.com/fwlink/?LinkID=65552)</ept> на международном веб-сайте организации ECMA.</target>       </trans-unit>
        <trans-unit id="206" translate="yes" xml:space="preserve" uid="M:System.Reflection.FieldInfo.GetValue(System.Object)">
          <source>The object whose field value will be returned.</source>
          <target state="translated">Объект, значение поля которого будет возвращено.</target>       </trans-unit>
        <trans-unit id="207" translate="yes" xml:space="preserve" uid="M:System.Reflection.FieldInfo.GetValue(System.Object)">
          <source>When overridden in a derived class, returns the value of a field supported by a given object.</source>
          <target state="translated">При переопределении в производном классе возвращает значение поля, поддерживаемое данным объектом.</target>       </trans-unit>
        <trans-unit id="208" translate="yes" xml:space="preserve" uid="M:System.Reflection.FieldInfo.GetValue(System.Object)">
          <source>An object containing the value of the field reflected by this instance.</source>
          <target state="translated">Объект, содержащий значение поля, отраженное этим экземпляром.</target>       </trans-unit>
        <trans-unit id="209" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.FieldInfo.GetValue(System.Object)">
          <source>If the field is static, <ph id="ph1">`obj`</ph> is ignored.</source>
          <target state="translated">Если поле является статическим, <ph id="ph1">`obj`</ph> учитывается.</target>       </trans-unit>
        <trans-unit id="210" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.FieldInfo.GetValue(System.Object)">
          <source>For non-static fields, <ph id="ph1">`obj`</ph> should be an instance of a class that inherits or declares the field.</source>
          <target state="translated">Для нестатических полей <ph id="ph1">`obj`</ph> должен быть экземпляром класса, который наследует или объявляет поле.</target>       </trans-unit>
        <trans-unit id="211" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.FieldInfo.GetValue(System.Object)">
          <source>Note that the return type of <ph id="ph1">`GetValue`</ph> is <ph id="ph2">`Object`</ph>.</source>
          <target state="translated">Обратите внимание, что возвращаемый тип <ph id="ph1">`GetValue`</ph> — <ph id="ph2">`Object`</ph>.</target>       </trans-unit>
        <trans-unit id="212" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.FieldInfo.GetValue(System.Object)">
          <source>For example, if the field holds a Boolean primitive value, an instance of <ph id="ph1">`Object`</ph> with the appropriate Boolean value is returned.</source>
          <target state="translated">Например, если поле содержится двоичное значение, экземпляр <ph id="ph1">`Object`</ph> с соответствующим двоичным возвращаемое значение.</target>       </trans-unit>
        <trans-unit id="213" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.FieldInfo.GetValue(System.Object)">
          <source>Before returning the value, <ph id="ph1">`GetValue`</ph> checks to see if the user has access permission.</source>
          <target state="translated">Перед возвратом значения, <ph id="ph1">`GetValue`</ph> проверяет, есть ли у пользователя разрешение на доступ.</target>       </trans-unit>
        <trans-unit id="214" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.FieldInfo.GetValue(System.Object)">
          <source>Access restrictions are ignored for fully trusted code.</source>
          <target state="translated">Ограничения доступа игнорируются для полностью доверенный код.</target>       </trans-unit>
        <trans-unit id="215" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.FieldInfo.GetValue(System.Object)">
          <source>That is, private constructors, methods, fields, and properties can be accessed and invoked through reflection whenever the code is fully trusted.</source>
          <target state="translated">То есть закрытые конструкторы, методы, поля и свойства можно получить доступ к и вызываемыми средствами отражения, если полностью доверенный код.</target>       </trans-unit>
        <trans-unit id="216" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.FieldInfo.GetValue(System.Object)">
          <source>Starting with the <ph id="ph1">[!INCLUDE[net_v20sp1_long](~/includes/net-v20sp1-long-md.md)]</ph>, this method can be used to access non-public members if the caller has been granted <ph id="ph2">&lt;xref:System.Security.Permissions.ReflectionPermission&gt;</ph> with the <ph id="ph3">&lt;xref:System.Security.Permissions.ReflectionPermissionFlag.RestrictedMemberAccess?displayProperty=nameWithType&gt;</ph> flag and if the grant set of the non-public members is restricted to the caller’s grant set, or a subset thereof.</source>
          <target state="translated">Начиная с <ph id="ph1">[!INCLUDE[net_v20sp1_long](~/includes/net-v20sp1-long-md.md)]</ph>, этот метод можно использовать для доступа к закрытым членам, если вызывающему объекту предоставлены <ph id="ph2">&lt;xref:System.Security.Permissions.ReflectionPermission&gt;</ph> с <ph id="ph3">&lt;xref:System.Security.Permissions.ReflectionPermissionFlag.RestrictedMemberAccess?displayProperty=nameWithType&gt;</ph> и отметки Если набор прав, не являющиеся открытыми члены ограничена вызывающего набором разрешений или подмножество его.</target>       </trans-unit>
        <trans-unit id="217" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.FieldInfo.GetValue(System.Object)">
          <source>(See <bpt id="p1">[</bpt>Security Considerations for Reflection<ept id="p1">](~/docs/framework/reflection-and-codedom/security-considerations-for-reflection.md)</ept>.)</source>
          <target state="translated">(См. <bpt id="p1">[</bpt>рекомендации по безопасности для отражения<ept id="p1">](~/docs/framework/reflection-and-codedom/security-considerations-for-reflection.md)</ept>.)</target>       </trans-unit>
        <trans-unit id="218" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.FieldInfo.GetValue(System.Object)">
          <source>To use this functionality, your application should target the <ph id="ph1">[!INCLUDE[net_v35_long](~/includes/net-v35-long-md.md)]</ph> or later.</source>
          <target state="translated">Для применения этих функциональных возможностей приложение должно использовать <ph id="ph1">[!INCLUDE[net_v35_long](~/includes/net-v35-long-md.md)]</ph> или более поздние версии.</target>       </trans-unit>
        <trans-unit id="219" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.FieldInfo.GetValue(System.Object)">
          <source>The following example uses the <ph id="ph1">&lt;xref:System.Reflection.FieldInfo.GetValue%2A&gt;</ph> method to retrieve the value of a static field.</source>
          <target state="translated">В следующем примере используется <ph id="ph1">&lt;xref:System.Reflection.FieldInfo.GetValue%2A&gt;</ph> метод, чтобы получить значение статического поля.</target>       </trans-unit>
        <trans-unit id="220" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.FieldInfo.GetValue(System.Object)">
          <source>Note that the value of the <ph id="ph1">`obj`</ph> argument is <ph id="ph2">`null`</ph>.</source>
          <target state="translated">Обратите внимание, что значение <ph id="ph1">`obj`</ph> аргумент <ph id="ph2">`null`</ph>.</target>       </trans-unit>
        <trans-unit id="221" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.FieldInfo.GetValue(System.Object)">
          <source>The following example retrieves an array of <ph id="ph1">&lt;xref:System.Reflection.FieldInfo&gt;</ph> objects that represents the fields of the <ph id="ph2">`FieldsClass`</ph> type, and then calls the <ph id="ph3">&lt;xref:System.Reflection.FieldInfo.GetValue%2A&gt;</ph> to display the value of each field for the <ph id="ph4">`fieldsInst`</ph> object.</source>
          <target state="translated">В следующем примере извлекается массив <ph id="ph1">&lt;xref:System.Reflection.FieldInfo&gt;</ph> объектов, представляющих поля <ph id="ph2">`FieldsClass`</ph> тип, а затем вызывает <ph id="ph3">&lt;xref:System.Reflection.FieldInfo.GetValue%2A&gt;</ph> для отображения значения каждого поля в <ph id="ph4">`fieldsInst`</ph> объекта.</target>       </trans-unit>
        <trans-unit id="222" translate="yes" xml:space="preserve" uid="M:System.Reflection.FieldInfo.GetValue(System.Object)">
          <source>In the <bpt id="p1">[</bpt>.NET for Windows Store apps<ept id="p1">](http://go.microsoft.com/fwlink/?LinkID=247912)</ept> or the Portable Class Library, catch <ph id="ph1">&lt;see cref="T:System.Exception" /&gt;</ph> instead.</source>
          <target state="translated">Вместо этого в <bpt id="p1">[</bpt>.NET для приложений Магазина Windows<ept id="p1">](http://go.microsoft.com/fwlink/?LinkID=247912)</ept> или в переносимой библиотеке классов перехватите исключение <ph id="ph1">&lt;see cref="T:System.Exception" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="223" translate="yes" xml:space="preserve" uid="M:System.Reflection.FieldInfo.GetValue(System.Object)">
          <source>The field is non-static and <ph id="ph1">&lt;paramref name="obj" /&gt;</ph> is <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated">Поле не является статическим, а параметр <ph id="ph1">&lt;paramref name="obj" /&gt;</ph> имеет значение <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="224" translate="yes" xml:space="preserve" uid="M:System.Reflection.FieldInfo.GetValue(System.Object)">
          <source>A field is marked literal, but the field does not have one of the accepted literal types.</source>
          <target state="translated">Поле помечено как литерал, однако для него не задан допустимый тип литерала.</target>       </trans-unit>
        <trans-unit id="225" translate="yes" xml:space="preserve" uid="M:System.Reflection.FieldInfo.GetValue(System.Object)">
          <source>In the <bpt id="p1">[</bpt>.NET for Windows Store apps<ept id="p1">](http://go.microsoft.com/fwlink/?LinkID=247912)</ept> or the Portable Class Library, catch the base class exception, <ph id="ph1">&lt;see cref="T:System.MemberAccessException" /&gt;</ph>, instead.</source>
          <target state="translated">Вместо этого в <bpt id="p1">[</bpt>.NET для приложений Магазина Windows<ept id="p1">](http://go.microsoft.com/fwlink/?LinkID=247912)</ept> или в переносимой библиотеке классов перехватите исключение базового класса <ph id="ph1">&lt;see cref="T:System.MemberAccessException" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="226" translate="yes" xml:space="preserve" uid="M:System.Reflection.FieldInfo.GetValue(System.Object)">
          <source>The caller does not have permission to access this field.</source>
          <target state="translated">Вызывающий объект не имеет разрешения на доступ к этому полю.</target>       </trans-unit>
        <trans-unit id="227" translate="yes" xml:space="preserve" uid="M:System.Reflection.FieldInfo.GetValue(System.Object)">
          <source>The method is neither declared nor inherited by the class of <ph id="ph1">&lt;paramref name="obj" /&gt;</ph>.</source>
          <target state="translated">Этот метод не объявлен в классе <ph id="ph1">&lt;paramref name="obj" /&gt;</ph> и не унаследован таким классом.</target>       </trans-unit>
        <trans-unit id="228" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.FieldInfo.GetValue(System.Object)">
          <source>when invoked late-bound through mechanisms such as <ph id="ph1">&lt;see cref="M:System.Type.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[])" /&gt;</ph>.</source>
          <target state="translated">При вызове поздней привязкой, такие как <ph id="ph1">&lt;see cref="M:System.Type.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[])" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="229" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.FieldInfo.GetValue(System.Object)">
          <source>Associated enumeration: <ph id="ph1">&lt;see cref="F:System.Security.Permissions.ReflectionPermissionFlag.MemberAccess" /&gt;</ph>.</source>
          <target state="translated">Связанное перечисление: <ph id="ph1">&lt;see cref="F:System.Security.Permissions.ReflectionPermissionFlag.MemberAccess" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="230" translate="yes" xml:space="preserve" uid="M:System.Reflection.FieldInfo.GetValueDirect(System.TypedReference)">
          <source>A <ph id="ph1">&lt;see cref="T:System.TypedReference" /&gt;</ph> structure that encapsulates a managed pointer to a location and a runtime representation of the type that might be stored at that location.</source>
          <target state="translated">Структура <ph id="ph1">&lt;see cref="T:System.TypedReference" /&gt;</ph>, инкапсулирующая управляемый указатель на место и представление типа во время выполнения, которое может храниться в этом месте.</target>       </trans-unit>
        <trans-unit id="231" translate="yes" xml:space="preserve" uid="M:System.Reflection.FieldInfo.GetValueDirect(System.TypedReference)">
          <source>Returns the value of a field supported by a given object.</source>
          <target state="translated">Возвращает значение поля, поддерживаемого заданным объектом.</target>       </trans-unit>
        <trans-unit id="232" translate="yes" xml:space="preserve" uid="M:System.Reflection.FieldInfo.GetValueDirect(System.TypedReference)">
          <source>An <ph id="ph1">&lt;see langword="Object" /&gt;</ph> containing a field value.</source>
          <target state="translated">Объект <ph id="ph1">&lt;see langword="Object" /&gt;</ph>, содержащий значение поля.</target>       </trans-unit>
        <trans-unit id="233" translate="yes" xml:space="preserve" uid="M:System.Reflection.FieldInfo.GetValueDirect(System.TypedReference)">
          <source>The caller requires the Common Language Specification (CLS) alternative, but called this method instead.</source>
          <target state="translated">Для вызывающего объекта требуется альтернатива спецификации CLS, но вызван этот метод.</target>       </trans-unit>
        <trans-unit id="234" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.FieldInfo.GetValueDirect(System.TypedReference)">
          <source>when invoked late-bound through mechanisms such as <ph id="ph1">&lt;see cref="M:System.Type.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[])" /&gt;</ph>.</source>
          <target state="translated">При вызове поздней привязкой, такие как <ph id="ph1">&lt;see cref="M:System.Type.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[])" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="235" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.FieldInfo.GetValueDirect(System.TypedReference)">
          <source>Associated enumeration: <ph id="ph1">&lt;see cref="F:System.Security.Permissions.ReflectionPermissionFlag.MemberAccess" /&gt;</ph>.</source>
          <target state="translated">Связанное перечисление: <ph id="ph1">&lt;see cref="F:System.Security.Permissions.ReflectionPermissionFlag.MemberAccess" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="236" translate="yes" xml:space="preserve" uid="P:System.Reflection.FieldInfo.IsAssembly">
          <source>Gets a value indicating whether the potential visibility of this field is described by <ph id="ph1">&lt;see cref="F:System.Reflection.FieldAttributes.Assembly" /&gt;</ph>; that is, the field is visible at most to other types in the same assembly, and is not visible to derived types outside the assembly.</source>
          <target state="translated">Возвращает значение, которое указывает, описана ли доступность данного поля в поле <ph id="ph1">&lt;see cref="F:System.Reflection.FieldAttributes.Assembly" /&gt;</ph>; другими словами, будет ли это поле полностью доступно для других полей той же сборки и недоступно для производных типов, не включенных в сборку.</target>       </trans-unit>
        <trans-unit id="237" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.FieldInfo.IsAssembly">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph> if the visibility of this field is exactly described by <ph id="ph2">&lt;see cref="F:System.Reflection.FieldAttributes.Assembly" /&gt;</ph>; otherwise, <ph id="ph3">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated">Значение <ph id="ph1">&lt;see langword="true" /&gt;</ph>, если видимость этого поля точно описана в поле <ph id="ph2">&lt;see cref="F:System.Reflection.FieldAttributes.Assembly" /&gt;</ph>; в противном случае — значение <ph id="ph3">&lt;see langword="false" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="238" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.FieldInfo.IsAssembly">
          <source>The actual visibility of a field is limited by the visibility of its type.</source>
          <target state="translated">Фактически доступность поля ограничена доступностью его типа.</target>       </trans-unit>
        <trans-unit id="239" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.FieldInfo.IsAssembly">
          <source>The <ph id="ph1">&lt;xref:System.Reflection.FieldInfo.IsAssembly%2A&gt;</ph> property might be <ph id="ph2">`true`</ph> for a field, but if it is a field of a private nested type then the field is not visible outside the containing type.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Reflection.FieldInfo.IsAssembly%2A&gt;</ph> Свойство может быть <ph id="ph2">`true`</ph> для поля, но если он является полем закрытого вложенного типа поле не отображается за пределами содержащего типа.</target>       </trans-unit>
        <trans-unit id="240" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.FieldInfo.IsAssembly">
          <source>The visibility of a field is exactly described by <ph id="ph1">&lt;xref:System.Reflection.FieldAttributes.Assembly?displayProperty=nameWithType&gt;</ph> if the only visibility modifier is <ph id="ph2">`internal`</ph> (<ph id="ph3">`Friend`</ph> in Visual Basic).</source>
          <target state="translated">Доступность поля только описываемого <ph id="ph1">&lt;xref:System.Reflection.FieldAttributes.Assembly?displayProperty=nameWithType&gt;</ph> Если модификатор видимости только <ph id="ph2">`internal`</ph> (<ph id="ph3">`Friend`</ph> в Visual Basic).</target>       </trans-unit>
        <trans-unit id="241" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.FieldInfo.IsAssembly">
          <source>This property is <ph id="ph1">`false`</ph> for fields that are <ph id="ph2">`protected internal`</ph> in C# (<ph id="ph3">`Protected Friend`</ph> in Visual Basic, <ph id="ph4">`protected public`</ph> in C++); use the <ph id="ph5">&lt;xref:System.Reflection.FieldInfo.IsFamilyOrAssembly%2A&gt;</ph> property to identify such fields.</source>
          <target state="translated">Это свойство является <ph id="ph1">`false`</ph> для полей, которые являются <ph id="ph2">`protected internal`</ph> в C# (<ph id="ph3">`Protected Friend`</ph> в Visual Basic <ph id="ph4">`protected public`</ph> в C++); используйте <ph id="ph5">&lt;xref:System.Reflection.FieldInfo.IsFamilyOrAssembly%2A&gt;</ph> свойство для идентификации такие поля.</target>       </trans-unit>
        <trans-unit id="242" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.FieldInfo.IsAssembly">
          <source>The following code example defines fields with varying levels of visibility, and displays the values of their <ph id="ph1">&lt;xref:System.Reflection.FieldInfo.IsAssembly%2A&gt;</ph>, <ph id="ph2">&lt;xref:System.Reflection.FieldInfo.IsFamily%2A&gt;</ph>, <ph id="ph3">&lt;xref:System.Reflection.FieldInfo.IsFamilyOrAssembly%2A&gt;</ph>, and <ph id="ph4">&lt;xref:System.Reflection.FieldInfo.IsFamilyAndAssembly%2A&gt;</ph> properties.</source>
          <target state="translated">В следующем примере кода определяет поля с различными уровнями видимость и отображает значения их <ph id="ph1">&lt;xref:System.Reflection.FieldInfo.IsAssembly%2A&gt;</ph>, <ph id="ph2">&lt;xref:System.Reflection.FieldInfo.IsFamily%2A&gt;</ph>, <ph id="ph3">&lt;xref:System.Reflection.FieldInfo.IsFamilyOrAssembly%2A&gt;</ph>, и <ph id="ph4">&lt;xref:System.Reflection.FieldInfo.IsFamilyAndAssembly%2A&gt;</ph> свойства.</target>       </trans-unit>
        <trans-unit id="243" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.FieldInfo.IsAssembly">
          <source>The Visual Basic and C# languages cannot define fields with <ph id="ph1">&lt;xref:System.Reflection.FieldAttributes.FamANDAssem?displayProperty=nameWithType&gt;</ph> visibility; that access level appears only in the C++ example.</source>
          <target state="translated">Языки Visual Basic и C# нельзя определять поля с <ph id="ph1">&lt;xref:System.Reflection.FieldAttributes.FamANDAssem?displayProperty=nameWithType&gt;</ph> видимости, что уровень доступа отображается только в примере C++.</target>       </trans-unit>
        <trans-unit id="244" translate="yes" xml:space="preserve" uid="P:System.Reflection.FieldInfo.IsFamily">
          <source>Gets a value indicating whether the visibility of this field is described by <ph id="ph1">&lt;see cref="F:System.Reflection.FieldAttributes.Family" /&gt;</ph>; that is, the field is visible only within its class and derived classes.</source>
          <target state="translated">Возвращает значение, которое указывает, описана ли доступность этого поля в поле <ph id="ph1">&lt;see cref="F:System.Reflection.FieldAttributes.Family" /&gt;</ph>; другими словами, будет ли это поле доступно только в своем классе и производных классах.</target>       </trans-unit>
        <trans-unit id="245" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.FieldInfo.IsFamily">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph> if access to this field is exactly described by <ph id="ph2">&lt;see cref="F:System.Reflection.FieldAttributes.Family" /&gt;</ph>; otherwise, <ph id="ph3">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated">Значение <ph id="ph1">&lt;see langword="true" /&gt;</ph>, если доступ к этому полю точно описан в поле <ph id="ph2">&lt;see cref="F:System.Reflection.FieldAttributes.Family" /&gt;</ph>; в противном случае — значение <ph id="ph3">&lt;see langword="false" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="246" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.FieldInfo.IsFamily">
          <source>The visibility of a field is exactly described by <ph id="ph1">&lt;xref:System.Reflection.FieldAttributes.Family?displayProperty=nameWithType&gt;</ph> if the only visibility modifier is <ph id="ph2">`protected`</ph>.</source>
          <target state="translated">Доступность поля только описываемого <ph id="ph1">&lt;xref:System.Reflection.FieldAttributes.Family?displayProperty=nameWithType&gt;</ph> Если модификатор видимости только <ph id="ph2">`protected`</ph>.</target>       </trans-unit>
        <trans-unit id="247" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.FieldInfo.IsFamily">
          <source>This property is <ph id="ph1">`false`</ph> for fields that are <ph id="ph2">`protected internal`</ph> in C# (<ph id="ph3">`Protected Friend`</ph> in Visual Basic, <ph id="ph4">`protected public`</ph> in C++); use the <ph id="ph5">&lt;xref:System.Reflection.FieldInfo.IsFamilyOrAssembly%2A&gt;</ph> property to identify such fields.</source>
          <target state="translated">Это свойство является <ph id="ph1">`false`</ph> для полей, которые являются <ph id="ph2">`protected internal`</ph> в C# (<ph id="ph3">`Protected Friend`</ph> в Visual Basic <ph id="ph4">`protected public`</ph> в C++); используйте <ph id="ph5">&lt;xref:System.Reflection.FieldInfo.IsFamilyOrAssembly%2A&gt;</ph> свойство для идентификации такие поля.</target>       </trans-unit>
        <trans-unit id="248" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.FieldInfo.IsFamily">
          <source>The following code example defines fields with varying levels of visibility, and displays the values of their <ph id="ph1">&lt;xref:System.Reflection.FieldInfo.IsAssembly%2A&gt;</ph>, <ph id="ph2">&lt;xref:System.Reflection.FieldInfo.IsFamily%2A&gt;</ph>, <ph id="ph3">&lt;xref:System.Reflection.FieldInfo.IsFamilyOrAssembly%2A&gt;</ph>, and <ph id="ph4">&lt;xref:System.Reflection.FieldInfo.IsFamilyAndAssembly%2A&gt;</ph> properties.</source>
          <target state="translated">В следующем примере кода определяет поля с различными уровнями видимость и отображает значения их <ph id="ph1">&lt;xref:System.Reflection.FieldInfo.IsAssembly%2A&gt;</ph>, <ph id="ph2">&lt;xref:System.Reflection.FieldInfo.IsFamily%2A&gt;</ph>, <ph id="ph3">&lt;xref:System.Reflection.FieldInfo.IsFamilyOrAssembly%2A&gt;</ph>, и <ph id="ph4">&lt;xref:System.Reflection.FieldInfo.IsFamilyAndAssembly%2A&gt;</ph> свойства.</target>       </trans-unit>
        <trans-unit id="249" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.FieldInfo.IsFamily">
          <source>The Visual Basic and C# languages cannot define fields with <ph id="ph1">&lt;xref:System.Reflection.FieldAttributes.FamANDAssem?displayProperty=nameWithType&gt;</ph> visibility; that access level appears only in the C++ example.</source>
          <target state="translated">Языки Visual Basic и C# нельзя определять поля с <ph id="ph1">&lt;xref:System.Reflection.FieldAttributes.FamANDAssem?displayProperty=nameWithType&gt;</ph> видимости, что уровень доступа отображается только в примере C++.</target>       </trans-unit>
        <trans-unit id="250" translate="yes" xml:space="preserve" uid="P:System.Reflection.FieldInfo.IsFamilyAndAssembly">
          <source>Gets a value indicating whether the visibility of this field is described by <ph id="ph1">&lt;see cref="F:System.Reflection.FieldAttributes.FamANDAssem" /&gt;</ph>; that is, the field can be accessed from derived classes, but only if they are in the same assembly.</source>
          <target state="translated">Возвращает значение, которое указывает, описана ли доступность этого поля в поле <ph id="ph1">&lt;see cref="F:System.Reflection.FieldAttributes.FamANDAssem" /&gt;</ph>; другими словами, будет ли это поле доступно только в производных классах, которые включены в ту же сборку.</target>       </trans-unit>
        <trans-unit id="251" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.FieldInfo.IsFamilyAndAssembly">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph> if access to this field is exactly described by <ph id="ph2">&lt;see cref="F:System.Reflection.FieldAttributes.FamANDAssem" /&gt;</ph>; otherwise, <ph id="ph3">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated">Значение <ph id="ph1">&lt;see langword="true" /&gt;</ph>, если доступ к этому полю точно описан в поле <ph id="ph2">&lt;see cref="F:System.Reflection.FieldAttributes.FamANDAssem" /&gt;</ph>; в противном случае — значение <ph id="ph3">&lt;see langword="false" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="252" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.FieldInfo.IsFamilyAndAssembly">
          <source>If a field has <ph id="ph1">&lt;xref:System.Reflection.FieldAttributes.FamANDAssem&gt;</ph> level visibility, it can be called from any member in a derived class that is also in the same assembly, but not from any other type.</source>
          <target state="translated">Если поле содержит <ph id="ph1">&lt;xref:System.Reflection.FieldAttributes.FamANDAssem&gt;</ph> видимость на уровне, может вызываться из любого члена производного класса, который также находится в той же сборке, но не из любого другого типа.</target>       </trans-unit>
        <trans-unit id="253" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.FieldInfo.IsFamilyAndAssembly">
          <source>The visibility of a field is exactly described by <ph id="ph1">&lt;xref:System.Reflection.FieldAttributes.FamANDAssem?displayProperty=nameWithType&gt;</ph> if the visibility modifier is <ph id="ph2">`protected private`</ph> in C++.</source>
          <target state="translated">Доступность поля только описываемого <ph id="ph1">&lt;xref:System.Reflection.FieldAttributes.FamANDAssem?displayProperty=nameWithType&gt;</ph> Если модификатор видимости <ph id="ph2">`protected private`</ph> в C++.</target>       </trans-unit>
        <trans-unit id="254" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.FieldInfo.IsFamilyAndAssembly">
          <source>Fields with this visibility cannot be defined in Visual Basic or C#.</source>
          <target state="translated">Поля с этим уровнем доступности не может определяться в Visual Basic или C#.</target>       </trans-unit>
        <trans-unit id="255" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.FieldInfo.IsFamilyAndAssembly">
          <source>The following code example defines fields with varying levels of visibility, and displays the values of their <ph id="ph1">&lt;xref:System.Reflection.FieldInfo.IsAssembly%2A&gt;</ph>, <ph id="ph2">&lt;xref:System.Reflection.FieldInfo.IsFamily%2A&gt;</ph>, <ph id="ph3">&lt;xref:System.Reflection.FieldInfo.IsFamilyOrAssembly%2A&gt;</ph>, and <ph id="ph4">&lt;xref:System.Reflection.FieldInfo.IsFamilyAndAssembly%2A&gt;</ph> properties.</source>
          <target state="translated">В следующем примере кода определяет поля с различными уровнями видимость и отображает значения их <ph id="ph1">&lt;xref:System.Reflection.FieldInfo.IsAssembly%2A&gt;</ph>, <ph id="ph2">&lt;xref:System.Reflection.FieldInfo.IsFamily%2A&gt;</ph>, <ph id="ph3">&lt;xref:System.Reflection.FieldInfo.IsFamilyOrAssembly%2A&gt;</ph>, и <ph id="ph4">&lt;xref:System.Reflection.FieldInfo.IsFamilyAndAssembly%2A&gt;</ph> свойства.</target>       </trans-unit>
        <trans-unit id="256" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.FieldInfo.IsFamilyAndAssembly">
          <source>The Visual Basic and C# languages cannot define fields with <ph id="ph1">&lt;xref:System.Reflection.FieldAttributes.FamANDAssem?displayProperty=nameWithType&gt;</ph> visibility; that access level appears only in the C++ example.</source>
          <target state="translated">Языки Visual Basic и C# нельзя определять поля с <ph id="ph1">&lt;xref:System.Reflection.FieldAttributes.FamANDAssem?displayProperty=nameWithType&gt;</ph> видимости, что уровень доступа отображается только в примере C++.</target>       </trans-unit>
        <trans-unit id="257" translate="yes" xml:space="preserve" uid="P:System.Reflection.FieldInfo.IsFamilyOrAssembly">
          <source>Gets a value indicating whether the potential visibility of this field is described by <ph id="ph1">&lt;see cref="F:System.Reflection.FieldAttributes.FamORAssem" /&gt;</ph>; that is, the field can be accessed by derived classes wherever they are, and by classes in the same assembly.</source>
          <target state="translated">Возвращает значение, которое указывает, описана ли потенциальная доступность этого поля в поле <ph id="ph1">&lt;see cref="F:System.Reflection.FieldAttributes.FamORAssem" /&gt;</ph>; другими словами, будет ли это поле доступно в производных классах независимо от их местонахождения, а также в классах, которые включены в ту же сборку.</target>       </trans-unit>
        <trans-unit id="258" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.FieldInfo.IsFamilyOrAssembly">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph> if access to this field is exactly described by <ph id="ph2">&lt;see cref="F:System.Reflection.FieldAttributes.FamORAssem" /&gt;</ph>; otherwise, <ph id="ph3">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated">Значение <ph id="ph1">&lt;see langword="true" /&gt;</ph>, если доступ к этому полю точно описан в поле <ph id="ph2">&lt;see cref="F:System.Reflection.FieldAttributes.FamORAssem" /&gt;</ph>; в противном случае — значение <ph id="ph3">&lt;see langword="false" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="259" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.FieldInfo.IsFamilyOrAssembly">
          <source>If a field has <ph id="ph1">&lt;xref:System.Reflection.FieldAttributes.FamORAssem&gt;</ph> level visibility, it can be called from any member in a derived class or any member in the same assembly, but not from any other type.</source>
          <target state="translated">Если поле содержит <ph id="ph1">&lt;xref:System.Reflection.FieldAttributes.FamORAssem&gt;</ph> видимость на уровне, может вызываться из любого члена производного класса или любого члена в той же сборке, но не из любого другого типа.</target>       </trans-unit>
        <trans-unit id="260" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.FieldInfo.IsFamilyOrAssembly">
          <source>The actual visibility of a field is limited by the visibility of its type.</source>
          <target state="translated">Фактически доступность поля ограничена доступностью его типа.</target>       </trans-unit>
        <trans-unit id="261" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.FieldInfo.IsFamilyOrAssembly">
          <source>The <ph id="ph1">&lt;xref:System.Reflection.FieldInfo.IsFamilyOrAssembly%2A&gt;</ph> property might be <ph id="ph2">`true`</ph> for a field, but if it is a field of a private nested type then the field is not visible outside the containing type.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Reflection.FieldInfo.IsFamilyOrAssembly%2A&gt;</ph> Свойство может быть <ph id="ph2">`true`</ph> для поля, но если он является полем закрытого вложенного типа поле не отображается за пределами содержащего типа.</target>       </trans-unit>
        <trans-unit id="262" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.FieldInfo.IsFamilyOrAssembly">
          <source>The visibility of a field is exactly described by <ph id="ph1">&lt;xref:System.Reflection.FieldAttributes.FamORAssem?displayProperty=nameWithType&gt;</ph> if the visibility modifier is <ph id="ph2">`protected internal`</ph> in C# (<ph id="ph3">`Protected Friend`</ph> in Visual Basic, <ph id="ph4">`protected public`</ph> in C++).</source>
          <target state="translated">Доступность поля только описываемого <ph id="ph1">&lt;xref:System.Reflection.FieldAttributes.FamORAssem?displayProperty=nameWithType&gt;</ph> Если модификатор видимости <ph id="ph2">`protected internal`</ph> в C# (<ph id="ph3">`Protected Friend`</ph> в Visual Basic <ph id="ph4">`protected public`</ph> в C++).</target>       </trans-unit>
        <trans-unit id="263" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.FieldInfo.IsFamilyOrAssembly">
          <source>The following code example defines fields with varying levels of visibility, and displays the values of their <ph id="ph1">&lt;xref:System.Reflection.FieldInfo.IsAssembly%2A&gt;</ph>, <ph id="ph2">&lt;xref:System.Reflection.FieldInfo.IsFamily%2A&gt;</ph>, <ph id="ph3">&lt;xref:System.Reflection.FieldInfo.IsFamilyOrAssembly%2A&gt;</ph>, and <ph id="ph4">&lt;xref:System.Reflection.FieldInfo.IsFamilyAndAssembly%2A&gt;</ph> properties.</source>
          <target state="translated">В следующем примере кода определяет поля с различными уровнями видимость и отображает значения их <ph id="ph1">&lt;xref:System.Reflection.FieldInfo.IsAssembly%2A&gt;</ph>, <ph id="ph2">&lt;xref:System.Reflection.FieldInfo.IsFamily%2A&gt;</ph>, <ph id="ph3">&lt;xref:System.Reflection.FieldInfo.IsFamilyOrAssembly%2A&gt;</ph>, и <ph id="ph4">&lt;xref:System.Reflection.FieldInfo.IsFamilyAndAssembly%2A&gt;</ph> свойства.</target>       </trans-unit>
        <trans-unit id="264" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.FieldInfo.IsFamilyOrAssembly">
          <source>The Visual Basic and C# languages cannot define fields with <ph id="ph1">&lt;xref:System.Reflection.FieldAttributes.FamANDAssem?displayProperty=nameWithType&gt;</ph> visibility; that access level appears only in the C++ example.</source>
          <target state="translated">Языки Visual Basic и C# нельзя определять поля с <ph id="ph1">&lt;xref:System.Reflection.FieldAttributes.FamANDAssem?displayProperty=nameWithType&gt;</ph> видимости, что уровень доступа отображается только в примере C++.</target>       </trans-unit>
        <trans-unit id="265" translate="yes" xml:space="preserve" uid="P:System.Reflection.FieldInfo.IsInitOnly">
          <source>Gets a value indicating whether the field can only be set in the body of the constructor.</source>
          <target state="translated">Возвращает значение, которое определяет, устанавливается ли поле только в тексте сообщения конструктора.</target>       </trans-unit>
        <trans-unit id="266" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.FieldInfo.IsInitOnly">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph> if the field has the <ph id="ph2">&lt;see langword="InitOnly" /&gt;</ph> attribute set; otherwise, <ph id="ph3">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated">Значение <ph id="ph1">&lt;see langword="true" /&gt;</ph>, если для поля задан атрибут <ph id="ph2">&lt;see langword="InitOnly" /&gt;</ph>, в противном случае — значение <ph id="ph3">&lt;see langword="false" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="267" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.FieldInfo.IsInitOnly">
          <source>If the returned value is <ph id="ph1">`true`</ph>, the field can only be initialized, and is read-only thereafter.</source>
          <target state="translated">Если возвращается значение <ph id="ph1">`true`</ph>, можно инициализировать только поля и впоследствии доступно только для чтения.</target>       </trans-unit>
        <trans-unit id="268" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.FieldInfo.IsInitOnly">
          <source>To get the <ph id="ph1">`IsInitOnly`</ph> property, first get the class <ph id="ph2">`Type`</ph>.</source>
          <target state="translated">Для получения <ph id="ph1">`IsInitOnly`</ph> свойство, сначала нужно получить класс <ph id="ph2">`Type`</ph>.</target>       </trans-unit>
        <trans-unit id="269" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.FieldInfo.IsInitOnly">
          <source>From the <ph id="ph1">`Type`</ph>, get the <ph id="ph2">`FieldInfo`</ph>.</source>
          <target state="translated">Из <ph id="ph1">`Type`</ph>, получить <ph id="ph2">`FieldInfo`</ph>.</target>       </trans-unit>
        <trans-unit id="270" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.FieldInfo.IsInitOnly">
          <source>From the <ph id="ph1">`FieldInfo`</ph>, get the <ph id="ph2">`IsInitOnly`</ph> property.</source>
          <target state="translated">Из <ph id="ph1">`FieldInfo`</ph>, получить <ph id="ph2">`IsInitOnly`</ph> свойство.</target>       </trans-unit>
        <trans-unit id="271" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.FieldInfo.IsInitOnly">
          <source>To access a non-public field, combine <ph id="ph1">&lt;xref:System.Reflection.BindingFlags.NonPublic?displayProperty=nameWithType&gt;</ph> with either or both of <ph id="ph2">&lt;xref:System.Reflection.BindingFlags.Static?displayProperty=nameWithType&gt;</ph> and <ph id="ph3">&lt;xref:System.Reflection.BindingFlags.Instance?displayProperty=nameWithType&gt;</ph> in the <ph id="ph4">`GetField`</ph> method.</source>
          <target state="translated">Для доступа к закрытым полям, объединить <ph id="ph1">&lt;xref:System.Reflection.BindingFlags.NonPublic?displayProperty=nameWithType&gt;</ph> с одной или обеих <ph id="ph2">&lt;xref:System.Reflection.BindingFlags.Static?displayProperty=nameWithType&gt;</ph> и <ph id="ph3">&lt;xref:System.Reflection.BindingFlags.Instance?displayProperty=nameWithType&gt;</ph> в <ph id="ph4">`GetField`</ph> метод.</target>       </trans-unit>
        <trans-unit id="272" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.FieldInfo.IsInitOnly">
          <source>The <ph id="ph1">`IsInitOnly`</ph> property is set when the <ph id="ph2">&lt;xref:System.Reflection.FieldAttributes.InitOnly?displayProperty=nameWithType&gt;</ph> attribute is set.</source>
          <target state="translated"><ph id="ph1">`IsInitOnly`</ph> Свойство устанавливается, когда <ph id="ph2">&lt;xref:System.Reflection.FieldAttributes.InitOnly?displayProperty=nameWithType&gt;</ph> атрибут имеет значение.</target>       </trans-unit>
        <trans-unit id="273" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.FieldInfo.IsInitOnly">
          <source>In the following example, two fields are created.</source>
          <target state="translated">В следующем примере создаются два поля.</target>       </trans-unit>
        <trans-unit id="274" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.FieldInfo.IsInitOnly">
          <source>The second field is read-only, having no set accessor, and <ph id="ph1">`IsInitOnly`</ph> is set to <ph id="ph2">`true`</ph>.</source>
          <target state="translated">Второе поле только для чтения, для него нет метод доступа set, и <ph id="ph1">`IsInitOnly`</ph> равно <ph id="ph2">`true`</ph>.</target>       </trans-unit>
        <trans-unit id="275" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.FieldInfo.IsInitOnly">
          <source>This code produces the following output:</source>
          <target state="translated">Этот код выводит следующие результаты:</target>       </trans-unit>
        <trans-unit id="276" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.FieldInfo.IsInitOnly">
          <source>Reflection.FieldInfo</source>
          <target state="translated">Reflection.FieldInfo</target>       </trans-unit>
        <trans-unit id="277" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.FieldInfo.IsInitOnly">
          <source>Myfielda - A- modified, IsInitOnly = False</source>
          <target state="translated">Изменить Myfielda - A - IsInitOnly = False</target>       </trans-unit>
        <trans-unit id="278" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.FieldInfo.IsInitOnly">
          <source>Myfieldb - B readonly field, IsInitOnly = True</source>
          <target state="translated">Myfieldb - B только для чтения поле, IsInitOnly = True</target>       </trans-unit>
        <trans-unit id="279" translate="yes" xml:space="preserve" uid="P:System.Reflection.FieldInfo.IsLiteral">
          <source>Gets a value indicating whether the value is written at compile time and cannot be changed.</source>
          <target state="translated">Возвращает значение, показывающее, что значение записывается во время компиляции и не может быть изменено.</target>       </trans-unit>
        <trans-unit id="280" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.FieldInfo.IsLiteral">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph> if the field has the <ph id="ph2">&lt;see langword="Literal" /&gt;</ph> attribute set; otherwise, <ph id="ph3">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated">Значение <ph id="ph1">&lt;see langword="true" /&gt;</ph>, если для поля задан атрибут <ph id="ph2">&lt;see langword="Literal" /&gt;</ph>, в противном случае — значение <ph id="ph3">&lt;see langword="false" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="281" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.FieldInfo.IsLiteral">
          <source>The <ph id="ph1">`IsLiteral`</ph> property is set when the <ph id="ph2">`FieldAttributes.Literal`</ph> attribute is set.</source>
          <target state="translated"><ph id="ph1">`IsLiteral`</ph> Свойство устанавливается, когда <ph id="ph2">`FieldAttributes.Literal`</ph> атрибут имеет значение.</target>       </trans-unit>
        <trans-unit id="282" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.FieldInfo.IsLiteral">
          <source>If this attribute is set, the field cannot be changed and is constant.</source>
          <target state="translated">Если этот атрибут задан, поле не может быть изменено и является константой.</target>       </trans-unit>
        <trans-unit id="283" translate="yes" xml:space="preserve" uid="P:System.Reflection.FieldInfo.IsNotSerialized">
          <source>Gets a value indicating whether this field has the <ph id="ph1">&lt;see langword="NotSerialized" /&gt;</ph> attribute.</source>
          <target state="translated">Возвращает значение, указывающее, установлен ли для этого поля атрибут <ph id="ph1">&lt;see langword="NotSerialized" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="284" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.FieldInfo.IsNotSerialized">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph> if the field has the <ph id="ph2">&lt;see langword="NotSerialized" /&gt;</ph> attribute set; otherwise, <ph id="ph3">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated">Значение <ph id="ph1">&lt;see langword="true" /&gt;</ph>, если для поля задан атрибут <ph id="ph2">&lt;see langword="NotSerialized" /&gt;</ph>, в противном случае — значение <ph id="ph3">&lt;see langword="false" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="285" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.FieldInfo.IsNotSerialized">
          <source>The <ph id="ph1">`IsNotSerialized`</ph> property returns <ph id="ph2">`true`</ph> when the field is marked with the <ph id="ph3">`FieldAttributes.NotSerialized`</ph> flag.</source>
          <target state="translated"><ph id="ph1">`IsNotSerialized`</ph> Возвращает <ph id="ph2">`true`</ph> при поле помечено атрибутом <ph id="ph3">`FieldAttributes.NotSerialized`</ph> флаг.</target>       </trans-unit>
        <trans-unit id="286" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.FieldInfo.IsNotSerialized">
          <source>When this flag is set on a field, it indicates that the field does not have to be serialized when the type is remoted.</source>
          <target state="translated">Этот флаг установлен для поля, указывает, что поле не имеет сериализовать, если тип является удаленным.</target>       </trans-unit>
        <trans-unit id="287" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.FieldInfo.IsNotSerialized">
          <source>The following example gets the field information of the fields of MyClass, determines if the fields can be serialized, and displays the results.</source>
          <target state="translated">Следующий пример возвращает сведения о полях MyClass, определяется ли поля могут быть сериализованы и отображаются результаты.</target>       </trans-unit>
        <trans-unit id="288" translate="yes" xml:space="preserve" uid="P:System.Reflection.FieldInfo.IsPinvokeImpl">
          <source>Gets a value indicating whether the corresponding <ph id="ph1">&lt;see langword="PinvokeImpl" /&gt;</ph> attribute is set in <ph id="ph2">&lt;see cref="T:System.Reflection.FieldAttributes" /&gt;</ph>.</source>
          <target state="translated">Возвращает значение, указывающее, установлен ли в <ph id="ph2">&lt;see cref="T:System.Reflection.FieldAttributes" /&gt;</ph> соответствующий атрибут <ph id="ph1">&lt;see langword="PinvokeImpl" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="289" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.FieldInfo.IsPinvokeImpl">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph> if the <ph id="ph2">&lt;see langword="PinvokeImpl" /&gt;</ph> attribute is set in <ph id="ph3">&lt;see cref="T:System.Reflection.FieldAttributes" /&gt;</ph>; otherwise, <ph id="ph4">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated">Значение <ph id="ph1">&lt;see langword="true" /&gt;</ph>, если атрибут <ph id="ph2">&lt;see langword="PinvokeImpl" /&gt;</ph> установлен в классе <ph id="ph3">&lt;see cref="T:System.Reflection.FieldAttributes" /&gt;</ph>, в противном случае — значение <ph id="ph4">&lt;see langword="false" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="290" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.FieldInfo.IsPinvokeImpl">
          <source>The following example creates a class and displays the name, field and <ph id="ph1">&lt;xref:System.Reflection.FieldInfo.IsPinvokeImpl%2A&gt;</ph> property value of the field.</source>
          <target state="translated">В следующем примере создается класс и отображает имя, поля и <ph id="ph1">&lt;xref:System.Reflection.FieldInfo.IsPinvokeImpl%2A&gt;</ph> значение свойства поля.</target>       </trans-unit>
        <trans-unit id="291" translate="yes" xml:space="preserve" uid="P:System.Reflection.FieldInfo.IsPrivate">
          <source>Gets a value indicating whether the field is private.</source>
          <target state="translated">Возвращает значение, указывающее, является ли поле закрытым.</target>       </trans-unit>
        <trans-unit id="292" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.FieldInfo.IsPrivate">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph> if the field is private; otherwise; <ph id="ph2">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated">Значение <ph id="ph1">&lt;see langword="true" /&gt;</ph>, если поле является закрытым; в противном случае — значение <ph id="ph2">&lt;see langword="false" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="293" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.FieldInfo.IsPrivate">
          <source>Private fields are accessible only from member functions.</source>
          <target state="translated">Закрытые поля доступны только из функций-членов.</target>       </trans-unit>
        <trans-unit id="294" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.FieldInfo.IsPrivate">
          <source>The <ph id="ph1">`IsPrivate`</ph> property is set when the <ph id="ph2">`FieldAttributes.Private`</ph> attribute is set.</source>
          <target state="translated"><ph id="ph1">`IsPrivate`</ph> Свойство устанавливается, когда <ph id="ph2">`FieldAttributes.Private`</ph> атрибут имеет значение.</target>       </trans-unit>
        <trans-unit id="295" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.FieldInfo.IsPrivate">
          <source>To get the <ph id="ph1">`IsPrivate`</ph> property, first get the class <ph id="ph2">`Type`</ph>.</source>
          <target state="translated">Для получения <ph id="ph1">`IsPrivate`</ph> свойство, сначала нужно получить класс <ph id="ph2">`Type`</ph>.</target>       </trans-unit>
        <trans-unit id="296" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.FieldInfo.IsPrivate">
          <source>From the <ph id="ph1">`Type`</ph>, get the <ph id="ph2">`FieldInfo`</ph>.</source>
          <target state="translated">Из <ph id="ph1">`Type`</ph>, получить <ph id="ph2">`FieldInfo`</ph>.</target>       </trans-unit>
        <trans-unit id="297" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.FieldInfo.IsPrivate">
          <source>From the <ph id="ph1">`FieldInfo`</ph>, get the <ph id="ph2">`IsPrivate`</ph> property.</source>
          <target state="translated">Из <ph id="ph1">`FieldInfo`</ph>, получить <ph id="ph2">`IsPrivate`</ph> свойство.</target>       </trans-unit>
        <trans-unit id="298" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.FieldInfo.IsPrivate">
          <source>To access a non-public field, set the <ph id="ph1">`BindingFlags`</ph> to <ph id="ph2">`NonPublic`</ph>, and either <ph id="ph3">`Static`</ph> or <ph id="ph4">`Instance`</ph> in the <ph id="ph5">`GetField`</ph> method.</source>
          <target state="translated">Для доступа к закрытым полям, установите <ph id="ph1">`BindingFlags`</ph> для <ph id="ph2">`NonPublic`</ph>и либо <ph id="ph3">`Static`</ph> или <ph id="ph4">`Instance`</ph> в <ph id="ph5">`GetField`</ph> метод.</target>       </trans-unit>
        <trans-unit id="299" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.FieldInfo.IsPrivate">
          <source>The following example returns a value indicating whether or not the field of the class is private.</source>
          <target state="translated">В следующем примере возвращается значение, указывающее, является ли поле класса является закрытым.</target>       </trans-unit>
        <trans-unit id="300" translate="yes" xml:space="preserve" uid="P:System.Reflection.FieldInfo.IsPublic">
          <source>Gets a value indicating whether the field is public.</source>
          <target state="translated">Возвращает значение, указывающее, является ли поле открытым.</target>       </trans-unit>
        <trans-unit id="301" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.FieldInfo.IsPublic">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph> if this field is public; otherwise, <ph id="ph2">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated">Значение <ph id="ph1">&lt;see langword="true" /&gt;</ph>, если поле является открытым; в противном случае — значение <ph id="ph2">&lt;see langword="false" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="302" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.FieldInfo.IsPublic">
          <source>Public fields are accessible everywhere their corresponding classes are visible.</source>
          <target state="translated">Открытые поля доступны везде их соответствующих классов.</target>       </trans-unit>
        <trans-unit id="303" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.FieldInfo.IsPublic">
          <source>The <ph id="ph1">`IsPublic`</ph> property is set when the <ph id="ph2">`FieldAttributes.Public`</ph> attribute is set.</source>
          <target state="translated"><ph id="ph1">`IsPublic`</ph> Свойство устанавливается, когда <ph id="ph2">`FieldAttributes.Public`</ph> атрибут имеет значение.</target>       </trans-unit>
        <trans-unit id="304" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.FieldInfo.IsPublic">
          <source>To get the <ph id="ph1">`IsPublic`</ph> property, first get the class <ph id="ph2">`Type`</ph>.</source>
          <target state="translated">Для получения <ph id="ph1">`IsPublic`</ph> свойство, сначала нужно получить класс <ph id="ph2">`Type`</ph>.</target>       </trans-unit>
        <trans-unit id="305" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.FieldInfo.IsPublic">
          <source>From the <ph id="ph1">`Type`</ph>, get the <ph id="ph2">`FieldInfo`</ph>.</source>
          <target state="translated">Из <ph id="ph1">`Type`</ph>, получить <ph id="ph2">`FieldInfo`</ph>.</target>       </trans-unit>
        <trans-unit id="306" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.FieldInfo.IsPublic">
          <source>From the <ph id="ph1">`FieldInfo`</ph>, get the <ph id="ph2">`IsPublic`</ph> property.</source>
          <target state="translated">Из <ph id="ph1">`FieldInfo`</ph>, получить <ph id="ph2">`IsPublic`</ph> свойство.</target>       </trans-unit>
        <trans-unit id="307" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.FieldInfo.IsPublic">
          <source>If the field is other than public, it is protected and cannot be readily accessed.</source>
          <target state="translated">Если поле не являются открытыми, защищен и не может быть непосредственно доступны.</target>       </trans-unit>
        <trans-unit id="308" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.FieldInfo.IsPublic">
          <source>To access a nonpublic field, set the <ph id="ph1">`BindingFlags`</ph> to <ph id="ph2">`NonPublic`</ph>, specify either <ph id="ph3">`BindingFlags.Instance`</ph> or <ph id="ph4">`BindingFlags.Static`</ph>, and use this for the <ph id="ph5">`GetField`</ph> method.</source>
          <target state="translated">Для доступа к закрытым полям, установите <ph id="ph1">`BindingFlags`</ph> для <ph id="ph2">`NonPublic`</ph>, укажите либо <ph id="ph3">`BindingFlags.Instance`</ph> или <ph id="ph4">`BindingFlags.Static`</ph>и используйте его для <ph id="ph5">`GetField`</ph> метод.</target>       </trans-unit>
        <trans-unit id="309" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.FieldInfo.IsPublic">
          <source>The following example returns a value indicating whether or not the field of the class is public or private.</source>
          <target state="translated">В следующем примере возвращается значение, указывающее, является ли поле класса открытым или закрытым.</target>       </trans-unit>
        <trans-unit id="310" translate="yes" xml:space="preserve" uid="P:System.Reflection.FieldInfo.IsSecurityCritical">
          <source>Gets a value that indicates whether the current field is security-critical or security-safe-critical at the current trust level.</source>
          <target state="translated">Получает значение, которое указывает, является ли текущее поле критически важным для безопасности или защищенным критически важным для безопасности на данном уровне доверия.</target>       </trans-unit>
        <trans-unit id="311" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.FieldInfo.IsSecurityCritical">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph> if the current field is security-critical or security-safe-critical at the current trust level; <ph id="ph2">&lt;see langword="false" /&gt;</ph> if it is transparent.</source>
          <target state="translated">Значение <ph id="ph1">&lt;see langword="true" /&gt;</ph>, если текущее поле является критически важным для безопасности или защищенным критически важным для безопасности на текущем уровне доверия; значение <ph id="ph2">&lt;see langword="false" /&gt;</ph>, если оно является прозрачным.</target>       </trans-unit>
        <trans-unit id="312" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.FieldInfo.IsSecurityCritical">
          <source>The <ph id="ph1">&lt;xref:System.Reflection.FieldInfo.IsSecurityCritical%2A&gt;</ph>, <ph id="ph2">&lt;xref:System.Reflection.FieldInfo.IsSecuritySafeCritical%2A&gt;</ph>, and <ph id="ph3">&lt;xref:System.Reflection.FieldInfo.IsSecurityTransparent%2A&gt;</ph> properties report the transparency level of the field at its current trust level, as determined by the common language runtime (CLR).</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Reflection.FieldInfo.IsSecurityCritical%2A&gt;</ph>, <ph id="ph2">&lt;xref:System.Reflection.FieldInfo.IsSecuritySafeCritical%2A&gt;</ph>, И <ph id="ph3">&lt;xref:System.Reflection.FieldInfo.IsSecurityTransparent%2A&gt;</ph> свойства отчетов уровень прозрачности поля в его текущем уровне доверия, что определяется общеязыковой среды выполнения (CLR).</target>       </trans-unit>
        <trans-unit id="313" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.FieldInfo.IsSecurityCritical">
          <source>The combinations of these properties are shown in the following table:</source>
          <target state="translated">В следующей таблице показаны сочетания этих свойств.</target>       </trans-unit>
        <trans-unit id="314" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.FieldInfo.IsSecurityCritical">
          <source>Security level</source>
          <target state="translated">Уровень безопасности</target>       </trans-unit>
        <trans-unit id="315" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.FieldInfo.IsSecurityCritical">
          <source>IsSecurityCritical</source>
          <target state="translated">IsSecurityCritical</target>       </trans-unit>
        <trans-unit id="316" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.FieldInfo.IsSecurityCritical">
          <source>IsSecuritySafeCritical</source>
          <target state="translated">IsSecuritySafeCritical</target>       </trans-unit>
        <trans-unit id="317" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.FieldInfo.IsSecurityCritical">
          <source>IsSecurityTransparent</source>
          <target state="translated">IsSecurityTransparent</target>       </trans-unit>
        <trans-unit id="318" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.FieldInfo.IsSecurityCritical">
          <source>Critical</source>
          <target state="translated">Critical</target>       </trans-unit>
        <trans-unit id="319" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.FieldInfo.IsSecurityCritical">
          <source>Safe critical</source>
          <target state="translated">Надежным с точки зрения</target>       </trans-unit>
        <trans-unit id="320" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.FieldInfo.IsSecurityCritical">
          <source>Transparent</source>
          <target state="translated">Прозрачный</target>       </trans-unit>
        <trans-unit id="321" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.FieldInfo.IsSecurityCritical">
          <source>Using these properties is much simpler than examining the security annotations of an assembly and its types and members, checking the current trust level, and attempting to duplicate the runtime's rules.</source>
          <target state="translated">Использовать эти свойства гораздо проще, чем просматривать заметки безопасности сборки и ее типов и членов, проверять текущий уровень доверия и пытаться Дублировать правила среды выполнения.</target>       </trans-unit>
        <trans-unit id="322" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.FieldInfo.IsSecurityCritical">
          <source>For partial-trust assemblies, the value of this property depends on the current trust level of the assembly.</source>
          <target state="translated">Для сборок с частичным доверием значение этого свойства зависит от текущего уровня доверия сборки.</target>       </trans-unit>
        <trans-unit id="323" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.FieldInfo.IsSecurityCritical">
          <source>If the assembly is loaded into a partially trusted application domain (for example, into a sandboxed application domain), then the runtime ignores the security annotations of the assembly.</source>
          <target state="translated">Если сборка загружается в домен приложения с частичным доверием (например, в изолированном домене приложения), среда выполнения игнорирует примечания безопасности сборки.</target>       </trans-unit>
        <trans-unit id="324" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.FieldInfo.IsSecurityCritical">
          <source>The assembly and all its types are treated as transparent.</source>
          <target state="translated">Сборка и все типы считаются прозрачными.</target>       </trans-unit>
        <trans-unit id="325" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.FieldInfo.IsSecurityCritical">
          <source>The runtime pays attention to the security annotations of a partial-trust assembly only when that assembly is loaded into a fully trusted application domain (for example, into the default application domain of a desktop application).</source>
          <target state="translated">Среда выполнения уделяет внимание заметки безопасности сборки с частичным доверием, только в том случае, если эта сборка загружается в домен приложения с полным доверием (например, в домене приложения по умолчанию для настольного приложения).</target>       </trans-unit>
        <trans-unit id="326" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.FieldInfo.IsSecurityCritical">
          <source>By contrast, a trusted assembly (that is, a strong-named assembly that is installed in the global assembly cache) is always loaded with full trust regardless of the trust level of the application domain, so its current trust level is always fully trusted.</source>
          <target state="translated">В отличие от этого доверенной сборке (то есть сборки строгим именем, установленной в глобальном кэше сборок) всегда является загружена с полным доверием независимо от уровня доверия домена приложения, поэтому ее текущий уровень доверия всегда является полностью доверенным.</target>       </trans-unit>
        <trans-unit id="327" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.FieldInfo.IsSecurityCritical">
          <source>You can determine the current trust levels of assemblies and application domains by using the <ph id="ph1">&lt;xref:System.Reflection.Assembly.IsFullyTrusted%2A?displayProperty=nameWithType&gt;</ph> and <ph id="ph2">&lt;xref:System.AppDomain.IsFullyTrusted%2A?displayProperty=nameWithType&gt;</ph> properties.</source>
          <target state="translated">Можно определить текущие уровни доверия сборок и доменов приложений с помощью <ph id="ph1">&lt;xref:System.Reflection.Assembly.IsFullyTrusted%2A?displayProperty=nameWithType&gt;</ph> и <ph id="ph2">&lt;xref:System.AppDomain.IsFullyTrusted%2A?displayProperty=nameWithType&gt;</ph> свойства.</target>       </trans-unit>
        <trans-unit id="328" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.FieldInfo.IsSecurityCritical">
          <source>For more information about reflection and transparency, see <bpt id="p1">[</bpt>Security Considerations for Reflection<ept id="p1">](~/docs/framework/reflection-and-codedom/security-considerations-for-reflection.md)</ept>.</source>
          <target state="translated">Дополнительные сведения о отражение и прозрачность см. в разделе <bpt id="p1">[</bpt>рекомендации по безопасности для отражения<ept id="p1">](~/docs/framework/reflection-and-codedom/security-considerations-for-reflection.md)</ept>.</target>       </trans-unit>
        <trans-unit id="329" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.FieldInfo.IsSecurityCritical">
          <source>For information about transparency, see <bpt id="p1">[</bpt>Security Changes<ept id="p1">](~/docs/framework/security/security-changes.md)</ept>.</source>
          <target state="translated">Сведения о прозрачности см. в разделе <bpt id="p1">[</bpt>изменения системы безопасности<ept id="p1">](~/docs/framework/security/security-changes.md)</ept>.</target>       </trans-unit>
        <trans-unit id="330" translate="yes" xml:space="preserve" uid="P:System.Reflection.FieldInfo.IsSecuritySafeCritical">
          <source>Gets a value that indicates whether the current field is security-safe-critical at the current trust level.</source>
          <target state="translated">Получает значение, которое указывает, является ли текущее поле защищенным критически важным для безопасности на данном уровне доверия.</target>       </trans-unit>
        <trans-unit id="331" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.FieldInfo.IsSecuritySafeCritical">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph> if the current field is security-safe-critical at the current trust level; <ph id="ph2">&lt;see langword="false" /&gt;</ph> if it is security-critical or transparent.</source>
          <target state="translated">Значение <ph id="ph1">&lt;see langword="true" /&gt;</ph>, если текущее поле является защищенным критически важным для безопасности на текущем уровне доверия; значение <ph id="ph2">&lt;see langword="false" /&gt;</ph>, если оно является критически важным для безопасности прозрачным.</target>       </trans-unit>
        <trans-unit id="332" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.FieldInfo.IsSecuritySafeCritical">
          <source>The <ph id="ph1">&lt;xref:System.Reflection.FieldInfo.IsSecurityCritical%2A&gt;</ph>, <ph id="ph2">&lt;xref:System.Reflection.FieldInfo.IsSecuritySafeCritical%2A&gt;</ph>, and <ph id="ph3">&lt;xref:System.Reflection.FieldInfo.IsSecurityTransparent%2A&gt;</ph> properties report the transparency level of the field at its current trust level, as determined by the common language runtime (CLR).</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Reflection.FieldInfo.IsSecurityCritical%2A&gt;</ph>, <ph id="ph2">&lt;xref:System.Reflection.FieldInfo.IsSecuritySafeCritical%2A&gt;</ph>, И <ph id="ph3">&lt;xref:System.Reflection.FieldInfo.IsSecurityTransparent%2A&gt;</ph> свойства отчетов уровень прозрачности поля в его текущем уровне доверия, что определяется общеязыковой среды выполнения (CLR).</target>       </trans-unit>
        <trans-unit id="333" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.FieldInfo.IsSecuritySafeCritical">
          <source>The combinations of these properties are shown in the following table:</source>
          <target state="translated">В следующей таблице показаны сочетания этих свойств.</target>       </trans-unit>
        <trans-unit id="334" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.FieldInfo.IsSecuritySafeCritical">
          <source>Security level</source>
          <target state="translated">Уровень безопасности</target>       </trans-unit>
        <trans-unit id="335" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.FieldInfo.IsSecuritySafeCritical">
          <source>IsSecurityCritical</source>
          <target state="translated">IsSecurityCritical</target>       </trans-unit>
        <trans-unit id="336" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.FieldInfo.IsSecuritySafeCritical">
          <source>IsSecuritySafeCritical</source>
          <target state="translated">IsSecuritySafeCritical</target>       </trans-unit>
        <trans-unit id="337" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.FieldInfo.IsSecuritySafeCritical">
          <source>IsSecurityTransparent</source>
          <target state="translated">IsSecurityTransparent</target>       </trans-unit>
        <trans-unit id="338" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.FieldInfo.IsSecuritySafeCritical">
          <source>Critical</source>
          <target state="translated">Critical</target>       </trans-unit>
        <trans-unit id="339" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.FieldInfo.IsSecuritySafeCritical">
          <source>Safe critical</source>
          <target state="translated">Надежным с точки зрения</target>       </trans-unit>
        <trans-unit id="340" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.FieldInfo.IsSecuritySafeCritical">
          <source>Transparent</source>
          <target state="translated">Прозрачный</target>       </trans-unit>
        <trans-unit id="341" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.FieldInfo.IsSecuritySafeCritical">
          <source>Using these properties is much simpler than examining the security annotations of an assembly and its types and members, checking the current trust level, and attempting to duplicate the runtime's rules.</source>
          <target state="translated">Использовать эти свойства гораздо проще, чем просматривать заметки безопасности сборки и ее типов и членов, проверять текущий уровень доверия и пытаться Дублировать правила среды выполнения.</target>       </trans-unit>
        <trans-unit id="342" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.FieldInfo.IsSecuritySafeCritical">
          <source>For partial-trust assemblies, the value of this property depends on the current trust level of the assembly.</source>
          <target state="translated">Для сборок с частичным доверием значение этого свойства зависит от текущего уровня доверия сборки.</target>       </trans-unit>
        <trans-unit id="343" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.FieldInfo.IsSecuritySafeCritical">
          <source>If the assembly is loaded into a partially trusted application domain (for example, into a sandboxed application domain), then the runtime ignores the security annotations of the assembly.</source>
          <target state="translated">Если сборка загружается в домен приложения с частичным доверием (например, в изолированном домене приложения), среда выполнения игнорирует примечания безопасности сборки.</target>       </trans-unit>
        <trans-unit id="344" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.FieldInfo.IsSecuritySafeCritical">
          <source>The assembly and all its types are treated as transparent.</source>
          <target state="translated">Сборка и все типы считаются прозрачными.</target>       </trans-unit>
        <trans-unit id="345" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.FieldInfo.IsSecuritySafeCritical">
          <source>The runtime pays attention to the security annotations of a partial-trust assembly only when that assembly is loaded into a fully trusted application domain (for example, into the default application domain of a desktop application).</source>
          <target state="translated">Среда выполнения уделяет внимание заметки безопасности сборки с частичным доверием, только в том случае, если эта сборка загружается в домен приложения с полным доверием (например, в домене приложения по умолчанию для настольного приложения).</target>       </trans-unit>
        <trans-unit id="346" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.FieldInfo.IsSecuritySafeCritical">
          <source>By contrast, a trusted assembly (that is, a strong-named assembly that is installed in the global assembly cache) is always loaded with full trust regardless of the trust level of the application domain, so its current trust level is always fully trusted.</source>
          <target state="translated">В отличие от этого доверенной сборке (то есть сборки строгим именем, установленной в глобальном кэше сборок) всегда является загружена с полным доверием независимо от уровня доверия домена приложения, поэтому ее текущий уровень доверия всегда является полностью доверенным.</target>       </trans-unit>
        <trans-unit id="347" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.FieldInfo.IsSecuritySafeCritical">
          <source>You can determine the current trust levels of assemblies and application domains by using the <ph id="ph1">&lt;xref:System.Reflection.Assembly.IsFullyTrusted%2A?displayProperty=nameWithType&gt;</ph> and <ph id="ph2">&lt;xref:System.AppDomain.IsFullyTrusted%2A?displayProperty=nameWithType&gt;</ph> properties.</source>
          <target state="translated">Можно определить текущие уровни доверия сборок и доменов приложений с помощью <ph id="ph1">&lt;xref:System.Reflection.Assembly.IsFullyTrusted%2A?displayProperty=nameWithType&gt;</ph> и <ph id="ph2">&lt;xref:System.AppDomain.IsFullyTrusted%2A?displayProperty=nameWithType&gt;</ph> свойства.</target>       </trans-unit>
        <trans-unit id="348" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.FieldInfo.IsSecuritySafeCritical">
          <source>For more information about reflection and transparency, see <bpt id="p1">[</bpt>Security Considerations for Reflection<ept id="p1">](~/docs/framework/reflection-and-codedom/security-considerations-for-reflection.md)</ept>.</source>
          <target state="translated">Дополнительные сведения о отражение и прозрачность см. в разделе <bpt id="p1">[</bpt>рекомендации по безопасности для отражения<ept id="p1">](~/docs/framework/reflection-and-codedom/security-considerations-for-reflection.md)</ept>.</target>       </trans-unit>
        <trans-unit id="349" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.FieldInfo.IsSecuritySafeCritical">
          <source>For information about transparency, see <bpt id="p1">[</bpt>Security Changes<ept id="p1">](~/docs/framework/security/security-changes.md)</ept>.</source>
          <target state="translated">Сведения о прозрачности см. в разделе <bpt id="p1">[</bpt>изменения системы безопасности<ept id="p1">](~/docs/framework/security/security-changes.md)</ept>.</target>       </trans-unit>
        <trans-unit id="350" translate="yes" xml:space="preserve" uid="P:System.Reflection.FieldInfo.IsSecurityTransparent">
          <source>Gets a value that indicates whether the current field is transparent at the current trust level.</source>
          <target state="translated">Получает значение, которое указывает, является ли текущее поле прозрачным на данном уровне доверия.</target>       </trans-unit>
        <trans-unit id="351" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.FieldInfo.IsSecurityTransparent">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph> if the field is security-transparent at the current trust level; otherwise, <ph id="ph2">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated">Значение <ph id="ph1">&lt;see langword="true" /&gt;</ph>, если текущее поле является прозрачным на текущем уровне доверия; в противном случае — значение <ph id="ph2">&lt;see langword="false" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="352" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.FieldInfo.IsSecurityTransparent">
          <source>The <ph id="ph1">&lt;xref:System.Reflection.FieldInfo.IsSecurityCritical%2A&gt;</ph>, <ph id="ph2">&lt;xref:System.Reflection.FieldInfo.IsSecuritySafeCritical%2A&gt;</ph>, and <ph id="ph3">&lt;xref:System.Reflection.FieldInfo.IsSecurityTransparent%2A&gt;</ph> properties report the transparency level of the field at its current trust level, as determined by the common language runtime (CLR).</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Reflection.FieldInfo.IsSecurityCritical%2A&gt;</ph>, <ph id="ph2">&lt;xref:System.Reflection.FieldInfo.IsSecuritySafeCritical%2A&gt;</ph>, И <ph id="ph3">&lt;xref:System.Reflection.FieldInfo.IsSecurityTransparent%2A&gt;</ph> свойства отчетов уровень прозрачности поля в его текущем уровне доверия, что определяется общеязыковой среды выполнения (CLR).</target>       </trans-unit>
        <trans-unit id="353" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.FieldInfo.IsSecurityTransparent">
          <source>The combinations of these properties are shown in the following table:</source>
          <target state="translated">В следующей таблице показаны сочетания этих свойств.</target>       </trans-unit>
        <trans-unit id="354" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.FieldInfo.IsSecurityTransparent">
          <source>Security level</source>
          <target state="translated">Уровень безопасности</target>       </trans-unit>
        <trans-unit id="355" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.FieldInfo.IsSecurityTransparent">
          <source>IsSecurityCritical</source>
          <target state="translated">IsSecurityCritical</target>       </trans-unit>
        <trans-unit id="356" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.FieldInfo.IsSecurityTransparent">
          <source>IsSecuritySafeCritical</source>
          <target state="translated">IsSecuritySafeCritical</target>       </trans-unit>
        <trans-unit id="357" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.FieldInfo.IsSecurityTransparent">
          <source>IsSecurityTransparent</source>
          <target state="translated">IsSecurityTransparent</target>       </trans-unit>
        <trans-unit id="358" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.FieldInfo.IsSecurityTransparent">
          <source>Critical</source>
          <target state="translated">Critical</target>       </trans-unit>
        <trans-unit id="359" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.FieldInfo.IsSecurityTransparent">
          <source>Safe critical</source>
          <target state="translated">Надежным с точки зрения</target>       </trans-unit>
        <trans-unit id="360" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.FieldInfo.IsSecurityTransparent">
          <source>Transparent</source>
          <target state="translated">Прозрачный</target>       </trans-unit>
        <trans-unit id="361" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.FieldInfo.IsSecurityTransparent">
          <source>Using these properties is much simpler than examining the security annotations of an assembly and its types and members, checking the current trust level, and attempting to duplicate the runtime's rules.</source>
          <target state="translated">Использовать эти свойства гораздо проще, чем просматривать заметки безопасности сборки и ее типов и членов, проверять текущий уровень доверия и пытаться Дублировать правила среды выполнения.</target>       </trans-unit>
        <trans-unit id="362" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.FieldInfo.IsSecurityTransparent">
          <source>For partial-trust assemblies, the value of this property depends on the current trust level of the assembly.</source>
          <target state="translated">Для сборок с частичным доверием значение этого свойства зависит от текущего уровня доверия сборки.</target>       </trans-unit>
        <trans-unit id="363" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.FieldInfo.IsSecurityTransparent">
          <source>If the assembly is loaded into a partially trusted application domain (for example, into a sandboxed application domain), then the runtime ignores the security annotations of the assembly.</source>
          <target state="translated">Если сборка загружается в домен приложения с частичным доверием (например, в изолированном домене приложения), среда выполнения игнорирует примечания безопасности сборки.</target>       </trans-unit>
        <trans-unit id="364" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.FieldInfo.IsSecurityTransparent">
          <source>The assembly and all its types are treated as transparent.</source>
          <target state="translated">Сборка и все типы считаются прозрачными.</target>       </trans-unit>
        <trans-unit id="365" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.FieldInfo.IsSecurityTransparent">
          <source>The runtime pays attention to the security annotations of a partial-trust assembly only when that assembly is loaded into a fully trusted application domain (for example, into the default application domain of a desktop application).</source>
          <target state="translated">Среда выполнения уделяет внимание заметки безопасности сборки с частичным доверием, только в том случае, если эта сборка загружается в домен приложения с полным доверием (например, в домене приложения по умолчанию для настольного приложения).</target>       </trans-unit>
        <trans-unit id="366" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.FieldInfo.IsSecurityTransparent">
          <source>By contrast, a trusted assembly (that is, a strong-named assembly that is installed in the global assembly cache) is always loaded with full trust regardless of the trust level of the application domain, so its current trust level is always fully trusted.</source>
          <target state="translated">В отличие от этого доверенной сборке (то есть сборки строгим именем, установленной в глобальном кэше сборок) всегда является загружена с полным доверием независимо от уровня доверия домена приложения, поэтому ее текущий уровень доверия всегда является полностью доверенным.</target>       </trans-unit>
        <trans-unit id="367" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.FieldInfo.IsSecurityTransparent">
          <source>You can determine the current trust levels of assemblies and application domains by using the <ph id="ph1">&lt;xref:System.Reflection.Assembly.IsFullyTrusted%2A?displayProperty=nameWithType&gt;</ph> and <ph id="ph2">&lt;xref:System.AppDomain.IsFullyTrusted%2A?displayProperty=nameWithType&gt;</ph> properties.</source>
          <target state="translated">Можно определить текущие уровни доверия сборок и доменов приложений с помощью <ph id="ph1">&lt;xref:System.Reflection.Assembly.IsFullyTrusted%2A?displayProperty=nameWithType&gt;</ph> и <ph id="ph2">&lt;xref:System.AppDomain.IsFullyTrusted%2A?displayProperty=nameWithType&gt;</ph> свойства.</target>       </trans-unit>
        <trans-unit id="368" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.FieldInfo.IsSecurityTransparent">
          <source>For more information about reflection and transparency, see <bpt id="p1">[</bpt>Security Considerations for Reflection<ept id="p1">](~/docs/framework/reflection-and-codedom/security-considerations-for-reflection.md)</ept>.</source>
          <target state="translated">Дополнительные сведения о отражение и прозрачность см. в разделе <bpt id="p1">[</bpt>рекомендации по безопасности для отражения<ept id="p1">](~/docs/framework/reflection-and-codedom/security-considerations-for-reflection.md)</ept>.</target>       </trans-unit>
        <trans-unit id="369" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.FieldInfo.IsSecurityTransparent">
          <source>For information about transparency, see <bpt id="p1">[</bpt>Security Changes<ept id="p1">](~/docs/framework/security/security-changes.md)</ept>.</source>
          <target state="translated">Сведения о прозрачности см. в разделе <bpt id="p1">[</bpt>изменения системы безопасности<ept id="p1">](~/docs/framework/security/security-changes.md)</ept>.</target>       </trans-unit>
        <trans-unit id="370" translate="yes" xml:space="preserve" uid="P:System.Reflection.FieldInfo.IsSpecialName">
          <source>Gets a value indicating whether the corresponding <ph id="ph1">&lt;see langword="SpecialName" /&gt;</ph> attribute is set in the <ph id="ph2">&lt;see cref="T:System.Reflection.FieldAttributes" /&gt;</ph> enumerator.</source>
          <target state="translated">Возвращает значение, указывающее, установлен ли в перечислителе <ph id="ph2">&lt;see cref="T:System.Reflection.FieldAttributes" /&gt;</ph> соответствующий атрибут <ph id="ph1">&lt;see langword="SpecialName" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="371" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.FieldInfo.IsSpecialName">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph> if the <ph id="ph2">&lt;see langword="SpecialName" /&gt;</ph> attribute is set in <ph id="ph3">&lt;see cref="T:System.Reflection.FieldAttributes" /&gt;</ph>; otherwise, <ph id="ph4">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated">Значение <ph id="ph1">&lt;see langword="true" /&gt;</ph>, если атрибут <ph id="ph2">&lt;see langword="SpecialName" /&gt;</ph> установлен в классе <ph id="ph3">&lt;see cref="T:System.Reflection.FieldAttributes" /&gt;</ph>, в противном случае — значение <ph id="ph4">&lt;see langword="false" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="372" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.FieldInfo.IsSpecialName">
          <source>Names that begin with or contain an underscore character (_), property accessors, and operator overloading methods are examples of names that might require special treatment by some compilers.</source>
          <target state="translated">Имена, которые начинаются с или содержать знак подчеркивания (_), к свойствам и методы перегрузки операторов приведены примеры имен, которые могут потребовать специальной обработки в некоторых компиляторах.</target>       </trans-unit>
        <trans-unit id="373" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.FieldInfo.IsSpecialName">
          <source>The following example returns a value indicating whether or not the fields in the class contain a SpecialName attribute.</source>
          <target state="translated">В следующем примере возвращается значение, указывающее, независимо от того, имеется ли атрибут SpecialName содержат поля в классе.</target>       </trans-unit>
        <trans-unit id="374" translate="yes" xml:space="preserve" uid="P:System.Reflection.FieldInfo.IsStatic">
          <source>Gets a value indicating whether the field is static.</source>
          <target state="translated">Возвращает значение, указывающее, является ли поле статическим.</target>       </trans-unit>
        <trans-unit id="375" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.FieldInfo.IsStatic">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph> if this field is static; otherwise, <ph id="ph2">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated">Значение <ph id="ph1">&lt;see langword="true" /&gt;</ph>, если поле является статическим; в противном случае — значение <ph id="ph2">&lt;see langword="false" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="376" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.FieldInfo.IsStatic">
          <source>When a field is static, one copy of the field is shared by all instances of the type.</source>
          <target state="translated">Если поле является статическим, одна копия поля является общей для всех экземпляров типа.</target>       </trans-unit>
        <trans-unit id="377" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.FieldInfo.IsStatic">
          <source>The <ph id="ph1">`IsStatic`</ph> property is set when the <ph id="ph2">`FieldAttributes.Static`</ph> attribute is set.</source>
          <target state="translated"><ph id="ph1">`IsStatic`</ph> Свойство устанавливается, когда <ph id="ph2">`FieldAttributes.Static`</ph> атрибут имеет значение.</target>       </trans-unit>
        <trans-unit id="378" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.FieldInfo.IsStatic">
          <source>To get the <ph id="ph1">`IsStatic`</ph> property, first get the class <ph id="ph2">`Type`</ph>.</source>
          <target state="translated">Для получения <ph id="ph1">`IsStatic`</ph> свойство, сначала нужно получить класс <ph id="ph2">`Type`</ph>.</target>       </trans-unit>
        <trans-unit id="379" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.FieldInfo.IsStatic">
          <source>From the <ph id="ph1">`Type`</ph>, get the <ph id="ph2">`FieldInfo`</ph>.</source>
          <target state="translated">Из <ph id="ph1">`Type`</ph>, получить <ph id="ph2">`FieldInfo`</ph>.</target>       </trans-unit>
        <trans-unit id="380" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.FieldInfo.IsStatic">
          <source>From the <ph id="ph1">`FieldInfo`</ph>, get the <ph id="ph2">`IsStatic`</ph> property.</source>
          <target state="translated">Из <ph id="ph1">`FieldInfo`</ph>, получить <ph id="ph2">`IsStatic`</ph> свойство.</target>       </trans-unit>
        <trans-unit id="381" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.FieldInfo.IsStatic">
          <source>To access a non-public field, set the <ph id="ph1">`BindingFlags`</ph> to <ph id="ph2">`NonPublic`</ph> in the <ph id="ph3">`GetField`</ph> method and set the accessibility to <ph id="ph4">`Instance`</ph> or <ph id="ph5">`Static`</ph>.</source>
          <target state="translated">Для доступа к закрытым полям, установите <ph id="ph1">`BindingFlags`</ph> для <ph id="ph2">`NonPublic`</ph> в <ph id="ph3">`GetField`</ph> метод и значение доступность <ph id="ph4">`Instance`</ph> или <ph id="ph5">`Static`</ph>.</target>       </trans-unit>
        <trans-unit id="382" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.FieldInfo.IsStatic">
          <source>The following example determines whether the specified field is static and displays the result.</source>
          <target state="translated">В следующем примере определяется, является ли указанное поле статическим и отображает результат.</target>       </trans-unit>
        <trans-unit id="383" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.FieldInfo.IsStatic">
          <source>This code produces the following output:</source>
          <target state="translated">Этот код выводит следующие результаты:</target>       </trans-unit>
        <trans-unit id="384" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.FieldInfo.IsStatic">
          <source>Reflection.FieldInfo</source>
          <target state="translated">Reflection.FieldInfo</target>       </trans-unit>
        <trans-unit id="385" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.FieldInfo.IsStatic">
          <source>Myfielda - A private field; IsStatic - False</source>
          <target state="translated">Myfielda - закрытое поле; IsStatic - False</target>       </trans-unit>
        <trans-unit id="386" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.FieldInfo.IsStatic">
          <source>Myfieldb - B static field; IsStatic - True</source>
          <target state="translated">Myfieldb - B статического поля; IsStatic - True</target>       </trans-unit>
        <trans-unit id="387" translate="yes" xml:space="preserve" uid="P:System.Reflection.FieldInfo.MemberType">
          <source>Gets a <ph id="ph1">&lt;see cref="T:System.Reflection.MemberTypes" /&gt;</ph> value indicating that this member is a field.</source>
          <target state="translated">Возвращает значение <ph id="ph1">&lt;see cref="T:System.Reflection.MemberTypes" /&gt;</ph>, указывающее, что этот элемент является полем.</target>       </trans-unit>
        <trans-unit id="388" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.FieldInfo.MemberType">
          <source>A <ph id="ph1">&lt;see cref="T:System.Reflection.MemberTypes" /&gt;</ph> value indicating that this member is a field.</source>
          <target state="translated">Значение <ph id="ph1">&lt;see cref="T:System.Reflection.MemberTypes" /&gt;</ph>, указывающее, что этот элемент является полем.</target>       </trans-unit>
        <trans-unit id="389" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.FieldInfo.MemberType">
          <source>This property overrides <ph id="ph1">&lt;xref:System.Reflection.MemberInfo.MemberType%2A&gt;</ph>.</source>
          <target state="translated">Это свойство переопределяет <ph id="ph1">&lt;xref:System.Reflection.MemberInfo.MemberType%2A&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="390" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.FieldInfo.MemberType">
          <source>Therefore, when you examine a set of <ph id="ph1">&lt;xref:System.Reflection.MemberInfo&gt;</ph> objects — for example, the array returned by <ph id="ph2">&lt;xref:System.Type.GetMembers%2A&gt;</ph> — the <ph id="ph3">&lt;xref:System.Reflection.MemberInfo.MemberType%2A&gt;</ph> property returns <ph id="ph4">&lt;xref:System.Reflection.MemberTypes.Field?displayProperty=nameWithType&gt;</ph> only when a given member is a field.</source>
          <target state="translated">Таким образом, при рассмотрении набор <ph id="ph1">&lt;xref:System.Reflection.MemberInfo&gt;</ph> объектов — например, массив, возвращаемый методом <ph id="ph2">&lt;xref:System.Type.GetMembers%2A&gt;</ph> — <ph id="ph3">&lt;xref:System.Reflection.MemberInfo.MemberType%2A&gt;</ph> возвращает <ph id="ph4">&lt;xref:System.Reflection.MemberTypes.Field?displayProperty=nameWithType&gt;</ph> только в том случае, когда данный элемент является полем.</target>       </trans-unit>
        <trans-unit id="391" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.FieldInfo.MemberType">
          <source>The following example determines whether the specified member is a field and displays the result.</source>
          <target state="translated">В следующем примере определяется, является ли указанный член поля и отображается результат.</target>       </trans-unit>
        <trans-unit id="392" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.FieldInfo.MemberType">
          <source>This code produces the following output:</source>
          <target state="translated">Этот код выводит следующие результаты:</target>       </trans-unit>
        <trans-unit id="393" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.FieldInfo.MemberType">
          <source>Reflection.FieldInfo</source>
          <target state="translated">Reflection.FieldInfo</target>       </trans-unit>
        <trans-unit id="394" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.FieldInfo.MemberType">
          <source>Myfield.field - a private field; MemberType is a Field</source>
          <target state="translated">MyField.Field - закрытое поле; Тип элемента — это поле</target>       </trans-unit>
        <trans-unit id="395" translate="yes" xml:space="preserve" uid="M:System.Reflection.FieldInfo.op_Equality(System.Reflection.FieldInfo,System.Reflection.FieldInfo)">
          <source>The first object to compare.</source>
          <target state="translated">Первый из сравниваемых объектов.</target>       </trans-unit>
        <trans-unit id="396" translate="yes" xml:space="preserve" uid="M:System.Reflection.FieldInfo.op_Equality(System.Reflection.FieldInfo,System.Reflection.FieldInfo)">
          <source>The second object to compare.</source>
          <target state="translated">Второй из сравниваемых объектов.</target>       </trans-unit>
        <trans-unit id="397" translate="yes" xml:space="preserve" uid="M:System.Reflection.FieldInfo.op_Equality(System.Reflection.FieldInfo,System.Reflection.FieldInfo)">
          <source>Indicates whether two <ph id="ph1">&lt;see cref="T:System.Reflection.FieldInfo" /&gt;</ph> objects are equal.</source>
          <target state="translated">Определение равенства двух объектов <ph id="ph1">&lt;see cref="T:System.Reflection.FieldInfo" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="398" translate="yes" xml:space="preserve" uid="M:System.Reflection.FieldInfo.op_Equality(System.Reflection.FieldInfo,System.Reflection.FieldInfo)">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph> if <ph id="ph2">&lt;paramref name="left" /&gt;</ph> is equal to <ph id="ph3">&lt;paramref name="right" /&gt;</ph>; otherwise, <ph id="ph4">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;see langword="true" /&gt;</ph>, если значения параметров <ph id="ph2">&lt;paramref name="left" /&gt;</ph> и <ph id="ph3">&lt;paramref name="right" /&gt;</ph> равны; в противном случае — <ph id="ph4">&lt;see langword="false" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="399" translate="yes" xml:space="preserve" uid="M:System.Reflection.FieldInfo.op_Inequality(System.Reflection.FieldInfo,System.Reflection.FieldInfo)">
          <source>The first object to compare.</source>
          <target state="translated">Первый из сравниваемых объектов.</target>       </trans-unit>
        <trans-unit id="400" translate="yes" xml:space="preserve" uid="M:System.Reflection.FieldInfo.op_Inequality(System.Reflection.FieldInfo,System.Reflection.FieldInfo)">
          <source>The second object to compare.</source>
          <target state="translated">Второй из сравниваемых объектов.</target>       </trans-unit>
        <trans-unit id="401" translate="yes" xml:space="preserve" uid="M:System.Reflection.FieldInfo.op_Inequality(System.Reflection.FieldInfo,System.Reflection.FieldInfo)">
          <source>Indicates whether two <ph id="ph1">&lt;see cref="T:System.Reflection.FieldInfo" /&gt;</ph> objects are not equal.</source>
          <target state="translated">Определяет неравенство двух объектов <ph id="ph1">&lt;see cref="T:System.Reflection.FieldInfo" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="402" translate="yes" xml:space="preserve" uid="M:System.Reflection.FieldInfo.op_Inequality(System.Reflection.FieldInfo,System.Reflection.FieldInfo)">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph> if <ph id="ph2">&lt;paramref name="left" /&gt;</ph> is not equal to <ph id="ph3">&lt;paramref name="right" /&gt;</ph>; otherwise, <ph id="ph4">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;see langword="true" /&gt;</ph>, если значения <ph id="ph2">&lt;paramref name="left" /&gt;</ph> и <ph id="ph3">&lt;paramref name="right" /&gt;</ph> не равны; в противном случае — <ph id="ph4">&lt;see langword="false" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="403" translate="yes" xml:space="preserve" uid="T:System.Reflection.FieldInfo">
          <source>Sets the value of the field for the given object to the given value.</source>
          <target state="translated">Устанавливает для поля заданного объекта указанное значение.</target>       </trans-unit>
        <trans-unit id="404" translate="yes" xml:space="preserve" uid="M:System.Reflection.FieldInfo.SetValue(System.Object,System.Object)">
          <source>The object whose field value will be set.</source>
          <target state="translated">Объект, значение поля которого будет указано.</target>       </trans-unit>
        <trans-unit id="405" translate="yes" xml:space="preserve" uid="M:System.Reflection.FieldInfo.SetValue(System.Object,System.Object)">
          <source>The value to assign to the field.</source>
          <target state="translated">Значение, присваиваемое этому полю.</target>       </trans-unit>
        <trans-unit id="406" translate="yes" xml:space="preserve" uid="M:System.Reflection.FieldInfo.SetValue(System.Object,System.Object)">
          <source>Sets the value of the field supported by the given object.</source>
          <target state="translated">Задает значение поля, которое поддерживается указанным объектом.</target>       </trans-unit>
        <trans-unit id="407" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.FieldInfo.SetValue(System.Object,System.Object)">
          <source>This method will assign <ph id="ph1">`value`</ph> to the field reflected by this instance on object <ph id="ph2">`obj`</ph>.</source>
          <target state="translated">Этот метод присвоит <ph id="ph1">`value`</ph> к полю, отраженный этим экземпляром объекта <ph id="ph2">`obj`</ph>.</target>       </trans-unit>
        <trans-unit id="408" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.FieldInfo.SetValue(System.Object,System.Object)">
          <source>If the field is static, <ph id="ph1">`obj`</ph> will be ignored.</source>
          <target state="translated">Если поле является статическим, <ph id="ph1">`obj`</ph> будет игнорироваться.</target>       </trans-unit>
        <trans-unit id="409" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.FieldInfo.SetValue(System.Object,System.Object)">
          <source>For non-static fields, <ph id="ph1">`obj`</ph> should be an instance of a class that inherits or declares the field.</source>
          <target state="translated">Для нестатических полей <ph id="ph1">`obj`</ph> должен быть экземпляром класса, который наследует или объявляет поле.</target>       </trans-unit>
        <trans-unit id="410" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.FieldInfo.SetValue(System.Object,System.Object)">
          <source>The new value is passed as an <ph id="ph1">`Object`</ph>.</source>
          <target state="translated">Новое значение передается в качестве <ph id="ph1">`Object`</ph>.</target>       </trans-unit>
        <trans-unit id="411" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.FieldInfo.SetValue(System.Object,System.Object)">
          <source>For example, if the field's type is Boolean, an instance of <ph id="ph1">`Object`</ph> with the appropriate Boolean value is passed.</source>
          <target state="translated">Например, если поле имеет тип: логическое значение, экземпляр <ph id="ph1">`Object`</ph> с соответствующим двоичным передается значение.</target>       </trans-unit>
        <trans-unit id="412" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.FieldInfo.SetValue(System.Object,System.Object)">
          <source>Before setting the value, <ph id="ph1">`SetValue`</ph> checks to see if the user has access permission.</source>
          <target state="translated">Перед установкой значения, <ph id="ph1">`SetValue`</ph> проверяет, есть ли у пользователя разрешение на доступ.</target>       </trans-unit>
        <trans-unit id="413" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.FieldInfo.SetValue(System.Object,System.Object)">
          <source>This final method is a convenience method for calling the following <ph id="ph1">`SetValue`</ph> method.</source>
          <target state="translated">Этот последний метод является самым удобным для вызова следующих <ph id="ph1">`SetValue`</ph> метод.</target>       </trans-unit>
        <trans-unit id="414" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.FieldInfo.SetValue(System.Object,System.Object)">
          <source>Fully trusted code has the permissions that are needed to access and invoke private constructors, methods, fields, and properties using reflection.</source>
          <target state="translated">Полностью доверенный код имеет разрешения, необходимые для доступа и вызывать закрытые конструкторы, методы, поля и свойства, с помощью отражения.</target>       </trans-unit>
        <trans-unit id="415" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.FieldInfo.SetValue(System.Object,System.Object)">
          <source>Starting with the <ph id="ph1">[!INCLUDE[net_v20sp1_long](~/includes/net-v20sp1-long-md.md)]</ph>, this method can be used to access non-public members if the caller has been granted <ph id="ph2">&lt;xref:System.Security.Permissions.ReflectionPermission&gt;</ph> with the <ph id="ph3">&lt;xref:System.Security.Permissions.ReflectionPermissionFlag.RestrictedMemberAccess?displayProperty=nameWithType&gt;</ph> flag and if the grant set of the non-public members is restricted to the caller’s grant set, or a subset thereof.</source>
          <target state="translated">Начиная с <ph id="ph1">[!INCLUDE[net_v20sp1_long](~/includes/net-v20sp1-long-md.md)]</ph>, этот метод можно использовать для доступа к закрытым членам, если вызывающему объекту предоставлены <ph id="ph2">&lt;xref:System.Security.Permissions.ReflectionPermission&gt;</ph> с <ph id="ph3">&lt;xref:System.Security.Permissions.ReflectionPermissionFlag.RestrictedMemberAccess?displayProperty=nameWithType&gt;</ph> и отметки Если набор прав, не являющиеся открытыми члены ограничена вызывающего набором разрешений или подмножество его.</target>       </trans-unit>
        <trans-unit id="416" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.FieldInfo.SetValue(System.Object,System.Object)">
          <source>(See <bpt id="p1">[</bpt>Security Considerations for Reflection<ept id="p1">](~/docs/framework/reflection-and-codedom/security-considerations-for-reflection.md)</ept>.)</source>
          <target state="translated">(См. <bpt id="p1">[</bpt>рекомендации по безопасности для отражения<ept id="p1">](~/docs/framework/reflection-and-codedom/security-considerations-for-reflection.md)</ept>.)</target>       </trans-unit>
        <trans-unit id="417" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.FieldInfo.SetValue(System.Object,System.Object)">
          <source>To use this functionality, your application should target the <ph id="ph1">[!INCLUDE[net_v35_long](~/includes/net-v35-long-md.md)]</ph> or later.</source>
          <target state="translated">Для применения этих функциональных возможностей приложение должно использовать <ph id="ph1">[!INCLUDE[net_v35_long](~/includes/net-v35-long-md.md)]</ph> или более поздние версии.</target>       </trans-unit>
        <trans-unit id="418" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.FieldInfo.SetValue(System.Object,System.Object)">
          <source>The following example sets the value of a field, gets and displays the value, modifies the field, and displays the result.</source>
          <target state="translated">Следующий пример задает значение поля, получает и отображает значение, поле изменяется и отображает результат.</target>       </trans-unit>
        <trans-unit id="419" translate="yes" xml:space="preserve" uid="M:System.Reflection.FieldInfo.SetValue(System.Object,System.Object)">
          <source>In the <bpt id="p1">[</bpt>.NET for Windows Store apps<ept id="p1">](http://go.microsoft.com/fwlink/?LinkID=247912)</ept> or the <bpt id="p2">[</bpt>Portable Class Library<ept id="p2">](~/docs/standard/cross-platform/cross-platform-development-with-the-portable-class-library.md)</ept>, catch the base class exception, <ph id="ph1">&lt;see cref="T:System.MemberAccessException" /&gt;</ph>, instead.</source>
          <target state="translated">Вместо этого в <bpt id="p1">[</bpt>.NET для приложений Магазина Windows<ept id="p1">](http://go.microsoft.com/fwlink/?LinkID=247912)</ept> или в <bpt id="p2">[</bpt>переносимой библиотеке классов<ept id="p2">](~/docs/standard/cross-platform/cross-platform-development-with-the-portable-class-library.md)</ept> перехватите исключение базового класса <ph id="ph1">&lt;see cref="T:System.MemberAccessException" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="420" translate="yes" xml:space="preserve" uid="M:System.Reflection.FieldInfo.SetValue(System.Object,System.Object)">
          <source>The caller does not have permission to access this field.</source>
          <target state="translated">Вызывающий объект не имеет разрешения на доступ к этому полю.</target>       </trans-unit>
        <trans-unit id="421" translate="yes" xml:space="preserve" uid="M:System.Reflection.FieldInfo.SetValue(System.Object,System.Object)">
          <source>In the <bpt id="p1">[</bpt>.NET for Windows Store apps<ept id="p1">](http://go.microsoft.com/fwlink/?LinkID=247912)</ept> or the <bpt id="p2">[</bpt>Portable Class Library<ept id="p2">](~/docs/standard/cross-platform/cross-platform-development-with-the-portable-class-library.md)</ept>, catch <ph id="ph1">&lt;see cref="T:System.Exception" /&gt;</ph> instead.</source>
          <target state="translated">Вместо этого в <bpt id="p1">[</bpt>.NET для приложений Магазина Windows<ept id="p1">](http://go.microsoft.com/fwlink/?LinkID=247912)</ept> или в <bpt id="p2">[</bpt>переносимой библиотеке классов<ept id="p2">](~/docs/standard/cross-platform/cross-platform-development-with-the-portable-class-library.md)</ept> перехватите исключение <ph id="ph1">&lt;see cref="T:System.Exception" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="422" translate="yes" xml:space="preserve" uid="M:System.Reflection.FieldInfo.SetValue(System.Object,System.Object)">
          <source>The <ph id="ph1">&lt;paramref name="obj" /&gt;</ph> parameter is <ph id="ph2">&lt;see langword="null" /&gt;</ph> and the field is an instance field.</source>
          <target state="translated">Параметр<ph id="ph1">&lt;paramref name="obj" /&gt;</ph> имеет значение <ph id="ph2">&lt;see langword="null" /&gt;</ph>, а поле является полем экземпляра.</target>       </trans-unit>
        <trans-unit id="423" translate="yes" xml:space="preserve" uid="M:System.Reflection.FieldInfo.SetValue(System.Object,System.Object)">
          <source>The field does not exist on the object.</source>
          <target state="translated">Это поле не существует в объекте.</target>       </trans-unit>
        <trans-unit id="424" translate="yes" xml:space="preserve" uid="M:System.Reflection.FieldInfo.SetValue(System.Object,System.Object)">
          <source>-or-</source>
          <target state="translated">- или -</target>       </trans-unit>
        <trans-unit id="425" translate="yes" xml:space="preserve" uid="M:System.Reflection.FieldInfo.SetValue(System.Object,System.Object)">
          <source>The <ph id="ph1">&lt;paramref name="value" /&gt;</ph> parameter cannot be converted and stored in the field.</source>
          <target state="translated">Параметр <ph id="ph1">&lt;paramref name="value" /&gt;</ph> невозможно преобразовать и сохранить в поле.</target>       </trans-unit>
        <trans-unit id="426" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.FieldInfo.SetValue(System.Object,System.Object)">
          <source>when invoked late-bound through mechanisms such as <ph id="ph1">&lt;see cref="M:System.Type.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[])" /&gt;</ph>.</source>
          <target state="translated">При вызове поздней привязкой, такие как <ph id="ph1">&lt;see cref="M:System.Type.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[])" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="427" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.FieldInfo.SetValue(System.Object,System.Object)">
          <source>Associated enumeration: <ph id="ph1">&lt;see cref="F:System.Security.Permissions.ReflectionPermissionFlag.MemberAccess" /&gt;</ph>.</source>
          <target state="translated">Связанное перечисление: <ph id="ph1">&lt;see cref="F:System.Security.Permissions.ReflectionPermissionFlag.MemberAccess" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="428" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.FieldInfo.SetValue(System.Object,System.Object)">
          <source>for updating init-only fields.</source>
          <target state="translated">для обновления только для инициализации поля.</target>       </trans-unit>
        <trans-unit id="429" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.FieldInfo.SetValue(System.Object,System.Object)">
          <source>Associated enumeration: <ph id="ph1">&lt;see cref="F:System.Security.Permissions.SecurityPermissionFlag.SerializationFormatter" /&gt;</ph>.</source>
          <target state="translated">Связанное перечисление: <ph id="ph1">&lt;see cref="F:System.Security.Permissions.SecurityPermissionFlag.SerializationFormatter" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="430" translate="yes" xml:space="preserve" uid="M:System.Reflection.FieldInfo.SetValue(System.Object,System.Object,System.Reflection.BindingFlags,System.Reflection.Binder,System.Globalization.CultureInfo)">
          <source>The object whose field value will be set.</source>
          <target state="translated">Объект, значение поля которого будет указано.</target>       </trans-unit>
        <trans-unit id="431" translate="yes" xml:space="preserve" uid="M:System.Reflection.FieldInfo.SetValue(System.Object,System.Object,System.Reflection.BindingFlags,System.Reflection.Binder,System.Globalization.CultureInfo)">
          <source>The value to assign to the field.</source>
          <target state="translated">Значение, присваиваемое этому полю.</target>       </trans-unit>
        <trans-unit id="432" translate="yes" xml:space="preserve" uid="M:System.Reflection.FieldInfo.SetValue(System.Object,System.Object,System.Reflection.BindingFlags,System.Reflection.Binder,System.Globalization.CultureInfo)">
          <source>A field of <ph id="ph1">&lt;see langword="Binder" /&gt;</ph> that specifies the type of binding that is desired (for example, <ph id="ph2">&lt;see langword="Binder.CreateInstance" /&gt;</ph> or <ph id="ph3">&lt;see langword="Binder.ExactBinding" /&gt;</ph>).</source>
          <target state="translated">Поле <ph id="ph1">&lt;see langword="Binder" /&gt;</ph>, определяющее требуемый тип привязки (например, <ph id="ph2">&lt;see langword="Binder.CreateInstance" /&gt;</ph> или <ph id="ph3">&lt;see langword="Binder.ExactBinding" /&gt;</ph>).</target>       </trans-unit>
        <trans-unit id="433" translate="yes" xml:space="preserve" uid="M:System.Reflection.FieldInfo.SetValue(System.Object,System.Object,System.Reflection.BindingFlags,System.Reflection.Binder,System.Globalization.CultureInfo)">
          <source>A set of properties that enables the binding, coercion of argument types, and invocation of members through reflection.</source>
          <target state="translated">Набор свойств, который позволяет осуществлять связывание, приведение типов аргументов и вызов элементов с помощью отражения.</target>       </trans-unit>
        <trans-unit id="434" translate="yes" xml:space="preserve" uid="M:System.Reflection.FieldInfo.SetValue(System.Object,System.Object,System.Reflection.BindingFlags,System.Reflection.Binder,System.Globalization.CultureInfo)">
          <source>If <bpt id="p1">&lt;c&gt;</bpt>binder<ept id="p1">&lt;/c&gt;</ept> is <ph id="ph1">&lt;see langword="null" /&gt;</ph>, then <ph id="ph2">&lt;see langword="Binder.DefaultBinding" /&gt;</ph> is used.</source>
          <target state="translated">Если параметр <bpt id="p1">&lt;c&gt;</bpt>binder<ept id="p1">&lt;/c&gt;</ept> имеет значение <ph id="ph1">&lt;see langword="null" /&gt;</ph>, используется свойство <ph id="ph2">&lt;see langword="Binder.DefaultBinding" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="435" translate="yes" xml:space="preserve" uid="M:System.Reflection.FieldInfo.SetValue(System.Object,System.Object,System.Reflection.BindingFlags,System.Reflection.Binder,System.Globalization.CultureInfo)">
          <source>The software preferences of a particular culture.</source>
          <target state="translated">Программные настройки конкретного языка и региональных параметров.</target>       </trans-unit>
        <trans-unit id="436" translate="yes" xml:space="preserve" uid="M:System.Reflection.FieldInfo.SetValue(System.Object,System.Object,System.Reflection.BindingFlags,System.Reflection.Binder,System.Globalization.CultureInfo)">
          <source>When overridden in a derived class, sets the value of the field supported by the given object.</source>
          <target state="translated">Если переопределен производным классом, устанавливает значение поля, поддерживаемое данным объектом.</target>       </trans-unit>
        <trans-unit id="437" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.FieldInfo.SetValue(System.Object,System.Object,System.Reflection.BindingFlags,System.Reflection.Binder,System.Globalization.CultureInfo)">
          <source>This method will assign <ph id="ph1">`value`</ph> to the field reflected by this instance on <ph id="ph2">`obj`</ph>.</source>
          <target state="translated">Этот метод присвоит <ph id="ph1">`value`</ph> к полю, отраженный этим экземпляром <ph id="ph2">`obj`</ph>.</target>       </trans-unit>
        <trans-unit id="438" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.FieldInfo.SetValue(System.Object,System.Object,System.Reflection.BindingFlags,System.Reflection.Binder,System.Globalization.CultureInfo)">
          <source>If the field is static, <ph id="ph1">`obj`</ph> will be ignored.</source>
          <target state="translated">Если поле является статическим, <ph id="ph1">`obj`</ph> будет игнорироваться.</target>       </trans-unit>
        <trans-unit id="439" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.FieldInfo.SetValue(System.Object,System.Object,System.Reflection.BindingFlags,System.Reflection.Binder,System.Globalization.CultureInfo)">
          <source>For non-static fields, <ph id="ph1">`obj`</ph> should be an instance of a class that inherits or declares the field.</source>
          <target state="translated">Для нестатических полей <ph id="ph1">`obj`</ph> должен быть экземпляром класса, который наследует или объявляет поле.</target>       </trans-unit>
        <trans-unit id="440" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.FieldInfo.SetValue(System.Object,System.Object,System.Reflection.BindingFlags,System.Reflection.Binder,System.Globalization.CultureInfo)">
          <source>The new value is passed as an <ph id="ph1">`Object`</ph>.</source>
          <target state="translated">Новое значение передается в качестве <ph id="ph1">`Object`</ph>.</target>       </trans-unit>
        <trans-unit id="441" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.FieldInfo.SetValue(System.Object,System.Object,System.Reflection.BindingFlags,System.Reflection.Binder,System.Globalization.CultureInfo)">
          <source>For example, if the field's type is <ph id="ph1">`Boolean`</ph>, an instance of <ph id="ph2">`Object`</ph> with the appropriate Boolean value is passed.</source>
          <target state="translated">Например, если поле имеет тип <ph id="ph1">`Boolean`</ph>, экземпляр <ph id="ph2">`Object`</ph> с соответствующим двоичным передается значение.</target>       </trans-unit>
        <trans-unit id="442" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.FieldInfo.SetValue(System.Object,System.Object,System.Reflection.BindingFlags,System.Reflection.Binder,System.Globalization.CultureInfo)">
          <source>Before setting the value, <ph id="ph1">`SetValue`</ph> checks to see if the user has access permission.</source>
          <target state="translated">Перед установкой значения, <ph id="ph1">`SetValue`</ph> проверяет, есть ли у пользователя разрешение на доступ.</target>       </trans-unit>
        <trans-unit id="443" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.FieldInfo.SetValue(System.Object,System.Object,System.Reflection.BindingFlags,System.Reflection.Binder,System.Globalization.CultureInfo)">
          <source>Fully trusted code has the permissions that are needed to access and invoke private constructors, methods, fields, and properties using reflection.</source>
          <target state="translated">Полностью доверенный код имеет разрешения, необходимые для доступа и вызывать закрытые конструкторы, методы, поля и свойства, с помощью отражения.</target>       </trans-unit>
        <trans-unit id="444" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.FieldInfo.SetValue(System.Object,System.Object,System.Reflection.BindingFlags,System.Reflection.Binder,System.Globalization.CultureInfo)">
          <source>Starting with the <ph id="ph1">[!INCLUDE[net_v20sp1_long](~/includes/net-v20sp1-long-md.md)]</ph>, this method can be used to access non-public members if the caller has been granted <ph id="ph2">&lt;xref:System.Security.Permissions.ReflectionPermission&gt;</ph> with the <ph id="ph3">&lt;xref:System.Security.Permissions.ReflectionPermissionFlag.RestrictedMemberAccess?displayProperty=nameWithType&gt;</ph> flag and if the grant set of the non-public members is restricted to the caller’s grant set, or a subset thereof.</source>
          <target state="translated">Начиная с <ph id="ph1">[!INCLUDE[net_v20sp1_long](~/includes/net-v20sp1-long-md.md)]</ph>, этот метод можно использовать для доступа к закрытым членам, если вызывающему объекту предоставлены <ph id="ph2">&lt;xref:System.Security.Permissions.ReflectionPermission&gt;</ph> с <ph id="ph3">&lt;xref:System.Security.Permissions.ReflectionPermissionFlag.RestrictedMemberAccess?displayProperty=nameWithType&gt;</ph> и отметки Если набор прав, не являющиеся открытыми члены ограничена вызывающего набором разрешений или подмножество его.</target>       </trans-unit>
        <trans-unit id="445" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.FieldInfo.SetValue(System.Object,System.Object,System.Reflection.BindingFlags,System.Reflection.Binder,System.Globalization.CultureInfo)">
          <source>(See <bpt id="p1">[</bpt>Security Considerations for Reflection<ept id="p1">](~/docs/framework/reflection-and-codedom/security-considerations-for-reflection.md)</ept>.)</source>
          <target state="translated">(См. <bpt id="p1">[</bpt>рекомендации по безопасности для отражения<ept id="p1">](~/docs/framework/reflection-and-codedom/security-considerations-for-reflection.md)</ept>.)</target>       </trans-unit>
        <trans-unit id="446" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.FieldInfo.SetValue(System.Object,System.Object,System.Reflection.BindingFlags,System.Reflection.Binder,System.Globalization.CultureInfo)">
          <source>To use this functionality, your application should target the <ph id="ph1">[!INCLUDE[net_v35_long](~/includes/net-v35-long-md.md)]</ph> or later.</source>
          <target state="translated">Для применения этих функциональных возможностей приложение должно использовать <ph id="ph1">[!INCLUDE[net_v35_long](~/includes/net-v35-long-md.md)]</ph> или более поздние версии.</target>       </trans-unit>
        <trans-unit id="447" translate="yes" xml:space="preserve" uid="M:System.Reflection.FieldInfo.SetValue(System.Object,System.Object,System.Reflection.BindingFlags,System.Reflection.Binder,System.Globalization.CultureInfo)">
          <source>The caller does not have permission to access this field.</source>
          <target state="translated">Вызывающий объект не имеет разрешения на доступ к этому полю.</target>       </trans-unit>
        <trans-unit id="448" translate="yes" xml:space="preserve" uid="M:System.Reflection.FieldInfo.SetValue(System.Object,System.Object,System.Reflection.BindingFlags,System.Reflection.Binder,System.Globalization.CultureInfo)">
          <source>The <ph id="ph1">&lt;paramref name="obj" /&gt;</ph> parameter is <ph id="ph2">&lt;see langword="null" /&gt;</ph> and the field is an instance field.</source>
          <target state="translated">Параметр<ph id="ph1">&lt;paramref name="obj" /&gt;</ph> имеет значение <ph id="ph2">&lt;see langword="null" /&gt;</ph>, а поле является полем экземпляра.</target>       </trans-unit>
        <trans-unit id="449" translate="yes" xml:space="preserve" uid="M:System.Reflection.FieldInfo.SetValue(System.Object,System.Object,System.Reflection.BindingFlags,System.Reflection.Binder,System.Globalization.CultureInfo)">
          <source>The field does not exist on the object.</source>
          <target state="translated">Это поле не существует в объекте.</target>       </trans-unit>
        <trans-unit id="450" translate="yes" xml:space="preserve" uid="M:System.Reflection.FieldInfo.SetValue(System.Object,System.Object,System.Reflection.BindingFlags,System.Reflection.Binder,System.Globalization.CultureInfo)">
          <source>-or-</source>
          <target state="translated">- или -</target>       </trans-unit>
        <trans-unit id="451" translate="yes" xml:space="preserve" uid="M:System.Reflection.FieldInfo.SetValue(System.Object,System.Object,System.Reflection.BindingFlags,System.Reflection.Binder,System.Globalization.CultureInfo)">
          <source>The <ph id="ph1">&lt;paramref name="value" /&gt;</ph> parameter cannot be converted and stored in the field.</source>
          <target state="translated">Параметр <ph id="ph1">&lt;paramref name="value" /&gt;</ph> невозможно преобразовать и сохранить в поле.</target>       </trans-unit>
        <trans-unit id="452" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.FieldInfo.SetValue(System.Object,System.Object,System.Reflection.BindingFlags,System.Reflection.Binder,System.Globalization.CultureInfo)">
          <source>when invoked late-bound through mechanisms such as <ph id="ph1">&lt;see cref="M:System.Type.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[])" /&gt;</ph>.</source>
          <target state="translated">При вызове поздней привязкой, такие как <ph id="ph1">&lt;see cref="M:System.Type.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[])" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="453" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.FieldInfo.SetValue(System.Object,System.Object,System.Reflection.BindingFlags,System.Reflection.Binder,System.Globalization.CultureInfo)">
          <source>Associated enumeration: <ph id="ph1">&lt;see cref="F:System.Security.Permissions.ReflectionPermissionFlag.MemberAccess" /&gt;</ph>.</source>
          <target state="translated">Связанное перечисление: <ph id="ph1">&lt;see cref="F:System.Security.Permissions.ReflectionPermissionFlag.MemberAccess" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="454" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.FieldInfo.SetValue(System.Object,System.Object,System.Reflection.BindingFlags,System.Reflection.Binder,System.Globalization.CultureInfo)">
          <source>for updating init-only fields.</source>
          <target state="translated">для обновления только для инициализации поля.</target>       </trans-unit>
        <trans-unit id="455" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.FieldInfo.SetValue(System.Object,System.Object,System.Reflection.BindingFlags,System.Reflection.Binder,System.Globalization.CultureInfo)">
          <source>Associated enumeration: <ph id="ph1">&lt;see cref="F:System.Security.Permissions.SecurityPermissionFlag.SerializationFormatter" /&gt;</ph>.</source>
          <target state="translated">Связанное перечисление: <ph id="ph1">&lt;see cref="F:System.Security.Permissions.SecurityPermissionFlag.SerializationFormatter" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="456" translate="yes" xml:space="preserve" uid="M:System.Reflection.FieldInfo.SetValueDirect(System.TypedReference,System.Object)">
          <source>A <ph id="ph1">&lt;see cref="T:System.TypedReference" /&gt;</ph> structure that encapsulates a managed pointer to a location and a runtime representation of the type that can be stored at that location.</source>
          <target state="translated">Структура <ph id="ph1">&lt;see cref="T:System.TypedReference" /&gt;</ph>, которая инкапсулирует управляемый указатель на местоположение и представление типа среды выполнения (может храниться в этом расположении).</target>       </trans-unit>
        <trans-unit id="457" translate="yes" xml:space="preserve" uid="M:System.Reflection.FieldInfo.SetValueDirect(System.TypedReference,System.Object)">
          <source>The value to assign to the field.</source>
          <target state="translated">Значение, присваиваемое этому полю.</target>       </trans-unit>
        <trans-unit id="458" translate="yes" xml:space="preserve" uid="M:System.Reflection.FieldInfo.SetValueDirect(System.TypedReference,System.Object)">
          <source>Sets the value of the field supported by the given object.</source>
          <target state="translated">Задает значение поля, которое поддерживается указанным объектом.</target>       </trans-unit>
        <trans-unit id="459" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.FieldInfo.SetValueDirect(System.TypedReference,System.Object)">
          <source>Starting with the <ph id="ph1">[!INCLUDE[net_v20sp1_long](~/includes/net-v20sp1-long-md.md)]</ph>, this method can be used to access non-public members if the caller has been granted <ph id="ph2">&lt;xref:System.Security.Permissions.ReflectionPermission&gt;</ph> with the <ph id="ph3">&lt;xref:System.Security.Permissions.ReflectionPermissionFlag.RestrictedMemberAccess?displayProperty=nameWithType&gt;</ph> flag and if the grant set of the non-public members is restricted to the caller’s grant set, or a subset thereof.</source>
          <target state="translated">Начиная с <ph id="ph1">[!INCLUDE[net_v20sp1_long](~/includes/net-v20sp1-long-md.md)]</ph>, этот метод можно использовать для доступа к закрытым членам, если вызывающему объекту предоставлены <ph id="ph2">&lt;xref:System.Security.Permissions.ReflectionPermission&gt;</ph> с <ph id="ph3">&lt;xref:System.Security.Permissions.ReflectionPermissionFlag.RestrictedMemberAccess?displayProperty=nameWithType&gt;</ph> и отметки Если набор прав, не являющиеся открытыми члены ограничена вызывающего набором разрешений или подмножество его.</target>       </trans-unit>
        <trans-unit id="460" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.FieldInfo.SetValueDirect(System.TypedReference,System.Object)">
          <source>(See <bpt id="p1">[</bpt>Security Considerations for Reflection<ept id="p1">](~/docs/framework/reflection-and-codedom/security-considerations-for-reflection.md)</ept>.)</source>
          <target state="translated">(См. <bpt id="p1">[</bpt>рекомендации по безопасности для отражения<ept id="p1">](~/docs/framework/reflection-and-codedom/security-considerations-for-reflection.md)</ept>.)</target>       </trans-unit>
        <trans-unit id="461" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.FieldInfo.SetValueDirect(System.TypedReference,System.Object)">
          <source>To use this functionality, your application should target the <ph id="ph1">[!INCLUDE[net_v35_long](~/includes/net-v35-long-md.md)]</ph> or later.</source>
          <target state="translated">Для применения этих функциональных возможностей приложение должно использовать <ph id="ph1">[!INCLUDE[net_v35_long](~/includes/net-v35-long-md.md)]</ph> или более поздние версии.</target>       </trans-unit>
        <trans-unit id="462" translate="yes" xml:space="preserve" uid="M:System.Reflection.FieldInfo.SetValueDirect(System.TypedReference,System.Object)">
          <source>The caller requires the Common Language Specification (CLS) alternative, but called this method instead.</source>
          <target state="translated">Для вызывающего объекта требуется альтернатива спецификации CLS, но вызван этот метод.</target>       </trans-unit>
        <trans-unit id="463" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.FieldInfo.SetValueDirect(System.TypedReference,System.Object)">
          <source>when invoked late-bound through mechanisms such as <ph id="ph1">&lt;see cref="M:System.Type.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[])" /&gt;</ph>.</source>
          <target state="translated">При вызове поздней привязкой, такие как <ph id="ph1">&lt;see cref="M:System.Type.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[])" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="464" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.FieldInfo.SetValueDirect(System.TypedReference,System.Object)">
          <source>Associated enumeration: <ph id="ph1">&lt;see cref="F:System.Security.Permissions.ReflectionPermissionFlag.MemberAccess" /&gt;</ph>.</source>
          <target state="translated">Связанное перечисление: <ph id="ph1">&lt;see cref="F:System.Security.Permissions.ReflectionPermissionFlag.MemberAccess" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="465" translate="yes" xml:space="preserve" uid="M:System.Reflection.FieldInfo.System#Runtime#InteropServices#_FieldInfo#GetIDsOfNames(System.Guid@,System.IntPtr,System.UInt32,System.UInt32,System.IntPtr)">
          <source>Reserved for future use.</source>
          <target state="translated">Зарезервировано для будущего использования.</target>       </trans-unit>
        <trans-unit id="466" translate="yes" xml:space="preserve" uid="M:System.Reflection.FieldInfo.System#Runtime#InteropServices#_FieldInfo#GetIDsOfNames(System.Guid@,System.IntPtr,System.UInt32,System.UInt32,System.IntPtr)">
          <source>Must be IID_NULL.</source>
          <target state="translated">Должно быть равным IID_NULL.</target>       </trans-unit>
        <trans-unit id="467" translate="yes" xml:space="preserve" uid="M:System.Reflection.FieldInfo.System#Runtime#InteropServices#_FieldInfo#GetIDsOfNames(System.Guid@,System.IntPtr,System.UInt32,System.UInt32,System.IntPtr)">
          <source>Passed-in array of names to be mapped.</source>
          <target state="translated">Переданный массив имен, которые необходимо сопоставить.</target>       </trans-unit>
        <trans-unit id="468" translate="yes" xml:space="preserve" uid="M:System.Reflection.FieldInfo.System#Runtime#InteropServices#_FieldInfo#GetIDsOfNames(System.Guid@,System.IntPtr,System.UInt32,System.UInt32,System.IntPtr)">
          <source>Count of the names to be mapped.</source>
          <target state="translated">Количество сопоставляемых имен.</target>       </trans-unit>
        <trans-unit id="469" translate="yes" xml:space="preserve" uid="M:System.Reflection.FieldInfo.System#Runtime#InteropServices#_FieldInfo#GetIDsOfNames(System.Guid@,System.IntPtr,System.UInt32,System.UInt32,System.IntPtr)">
          <source>The locale context in which to interpret the names.</source>
          <target state="translated">Контекст языкового стандарта для интерпретации имен.</target>       </trans-unit>
        <trans-unit id="470" translate="yes" xml:space="preserve" uid="M:System.Reflection.FieldInfo.System#Runtime#InteropServices#_FieldInfo#GetIDsOfNames(System.Guid@,System.IntPtr,System.UInt32,System.UInt32,System.IntPtr)">
          <source>Caller-allocated array which receives the IDs corresponding to the names.</source>
          <target state="translated">Массив, зарезервированный вызывающим объектом, куда помещаются идентификаторы, соответствующие именам.</target>       </trans-unit>
        <trans-unit id="471" translate="yes" xml:space="preserve" uid="M:System.Reflection.FieldInfo.System#Runtime#InteropServices#_FieldInfo#GetIDsOfNames(System.Guid@,System.IntPtr,System.UInt32,System.UInt32,System.IntPtr)">
          <source>Maps a set of names to a corresponding set of dispatch identifiers.</source>
          <target state="translated">Сопоставляет набор имен соответствующему набору идентификаторов диспетчеризации.</target>       </trans-unit>
        <trans-unit id="472" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.FieldInfo.System#Runtime#InteropServices#_FieldInfo#GetIDsOfNames(System.Guid@,System.IntPtr,System.UInt32,System.UInt32,System.IntPtr)">
          <source>This method is for access to managed classes from unmanaged code, and should not be called from managed code.</source>
          <target state="translated">Этот метод предназначен для обеспечения доступа к управляемым классам из неуправляемого кода и не должен вызываться из управляемого кода.</target>       </trans-unit>
        <trans-unit id="473" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.FieldInfo.System#Runtime#InteropServices#_FieldInfo#GetIDsOfNames(System.Guid@,System.IntPtr,System.UInt32,System.UInt32,System.IntPtr)">
          <source>For more information about <ph id="ph1">`IDispatch::GetIDsOfNames`</ph>, see the MSDN Library.</source>
          <target state="translated">Дополнительные сведения о <ph id="ph1">`IDispatch::GetIDsOfNames`</ph>, см. в библиотеке MSDN.</target>       </trans-unit>
        <trans-unit id="474" translate="yes" xml:space="preserve" uid="M:System.Reflection.FieldInfo.System#Runtime#InteropServices#_FieldInfo#GetIDsOfNames(System.Guid@,System.IntPtr,System.UInt32,System.UInt32,System.IntPtr)">
          <source>Late-bound access using the COM <bpt id="p1">&lt;c&gt;</bpt>IDispatch<ept id="p1">&lt;/c&gt;</ept> interface is not supported.</source>
          <target state="translated">Доступ с поздним связыванием с помощью COM-интерфейса <bpt id="p1">&lt;c&gt;</bpt>IDispatch<ept id="p1">&lt;/c&gt;</ept> не поддерживается.</target>       </trans-unit>
        <trans-unit id="475" translate="yes" xml:space="preserve" uid="M:System.Reflection.FieldInfo.System#Runtime#InteropServices#_FieldInfo#GetType">
          <source>Gets a <ph id="ph1">&lt;see cref="T:System.Type" /&gt;</ph> object representing the <ph id="ph2">&lt;see cref="T:System.Reflection.FieldInfo" /&gt;</ph> type.</source>
          <target state="translated">Возвращает объект <ph id="ph1">&lt;see cref="T:System.Type" /&gt;</ph>, представляющий тип <ph id="ph2">&lt;see cref="T:System.Reflection.FieldInfo" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="476" translate="yes" xml:space="preserve" uid="M:System.Reflection.FieldInfo.System#Runtime#InteropServices#_FieldInfo#GetType">
          <source>A <ph id="ph1">&lt;see cref="T:System.Type" /&gt;</ph> object representing the <ph id="ph2">&lt;see cref="T:System.Reflection.FieldInfo" /&gt;</ph> type.</source>
          <target state="translated">Объект <ph id="ph1">&lt;see cref="T:System.Type" /&gt;</ph>, представляющий тип <ph id="ph2">&lt;see cref="T:System.Reflection.FieldInfo" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="477" translate="yes" xml:space="preserve" uid="M:System.Reflection.FieldInfo.System#Runtime#InteropServices#_FieldInfo#GetTypeInfo(System.UInt32,System.UInt32,System.IntPtr)">
          <source>The type information to return.</source>
          <target state="translated">Возвращаемые сведения о типе.</target>       </trans-unit>
        <trans-unit id="478" translate="yes" xml:space="preserve" uid="M:System.Reflection.FieldInfo.System#Runtime#InteropServices#_FieldInfo#GetTypeInfo(System.UInt32,System.UInt32,System.IntPtr)">
          <source>The locale identifier for the type information.</source>
          <target state="translated">Идентификатор языкового стандарта для сведений о типе.</target>       </trans-unit>
        <trans-unit id="479" translate="yes" xml:space="preserve" uid="M:System.Reflection.FieldInfo.System#Runtime#InteropServices#_FieldInfo#GetTypeInfo(System.UInt32,System.UInt32,System.IntPtr)">
          <source>Receives a pointer to the requested type information object.</source>
          <target state="translated">Получает указатель на объект с запрошенными сведениями о типе.</target>       </trans-unit>
        <trans-unit id="480" translate="yes" xml:space="preserve" uid="M:System.Reflection.FieldInfo.System#Runtime#InteropServices#_FieldInfo#GetTypeInfo(System.UInt32,System.UInt32,System.IntPtr)">
          <source>Retrieves the type information for an object, which can then be used to get the type information for an interface.</source>
          <target state="translated">Возвращает сведения о типе объекта, которые затем могут использоваться для получения сведений о типе интерфейса.</target>       </trans-unit>
        <trans-unit id="481" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.FieldInfo.System#Runtime#InteropServices#_FieldInfo#GetTypeInfo(System.UInt32,System.UInt32,System.IntPtr)">
          <source>This method is for access to managed classes from unmanaged code, and should not be called from managed code.</source>
          <target state="translated">Этот метод предназначен для обеспечения доступа к управляемым классам из неуправляемого кода и не должен вызываться из управляемого кода.</target>       </trans-unit>
        <trans-unit id="482" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.FieldInfo.System#Runtime#InteropServices#_FieldInfo#GetTypeInfo(System.UInt32,System.UInt32,System.IntPtr)">
          <source>For more information about <ph id="ph1">`IDispatch::GetTypeInfo`</ph>, see the MSDN Library.</source>
          <target state="translated">Дополнительные сведения о <ph id="ph1">`IDispatch::GetTypeInfo`</ph>, см. в библиотеке MSDN.</target>       </trans-unit>
        <trans-unit id="483" translate="yes" xml:space="preserve" uid="M:System.Reflection.FieldInfo.System#Runtime#InteropServices#_FieldInfo#GetTypeInfo(System.UInt32,System.UInt32,System.IntPtr)">
          <source>Late-bound access using the COM <bpt id="p1">&lt;c&gt;</bpt>IDispatch<ept id="p1">&lt;/c&gt;</ept> interface is not supported.</source>
          <target state="translated">Доступ с поздним связыванием с помощью COM-интерфейса <bpt id="p1">&lt;c&gt;</bpt>IDispatch<ept id="p1">&lt;/c&gt;</ept> не поддерживается.</target>       </trans-unit>
        <trans-unit id="484" translate="yes" xml:space="preserve" uid="M:System.Reflection.FieldInfo.System#Runtime#InteropServices#_FieldInfo#GetTypeInfoCount(System.UInt32@)">
          <source>Points to a location that receives the number of type information interfaces provided by the object.</source>
          <target state="translated">Указатель, по которому записывается число предоставляемых объектом интерфейсов, предназначенных для получения сведений о типе.</target>       </trans-unit>
        <trans-unit id="485" translate="yes" xml:space="preserve" uid="M:System.Reflection.FieldInfo.System#Runtime#InteropServices#_FieldInfo#GetTypeInfoCount(System.UInt32@)">
          <source>Retrieves the number of type information interfaces that an object provides (either 0 or 1).</source>
          <target state="translated">Возвращает количество предоставляемых объектом интерфейсов для доступа к сведениям о типе (0 или 1).</target>       </trans-unit>
        <trans-unit id="486" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.FieldInfo.System#Runtime#InteropServices#_FieldInfo#GetTypeInfoCount(System.UInt32@)">
          <source>This method is for access to managed classes from unmanaged code, and should not be called from managed code.</source>
          <target state="translated">Этот метод предназначен для обеспечения доступа к управляемым классам из неуправляемого кода и не должен вызываться из управляемого кода.</target>       </trans-unit>
        <trans-unit id="487" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.FieldInfo.System#Runtime#InteropServices#_FieldInfo#GetTypeInfoCount(System.UInt32@)">
          <source>For more information about <ph id="ph1">`IDispatch::GetTypeInfoCount`</ph>, see the MSDN Library.</source>
          <target state="translated">Дополнительные сведения о <ph id="ph1">`IDispatch::GetTypeInfoCount`</ph>, см. в библиотеке MSDN.</target>       </trans-unit>
        <trans-unit id="488" translate="yes" xml:space="preserve" uid="M:System.Reflection.FieldInfo.System#Runtime#InteropServices#_FieldInfo#GetTypeInfoCount(System.UInt32@)">
          <source>Late-bound access using the COM <bpt id="p1">&lt;c&gt;</bpt>IDispatch<ept id="p1">&lt;/c&gt;</ept> interface is not supported.</source>
          <target state="translated">Доступ с поздним связыванием с помощью COM-интерфейса <bpt id="p1">&lt;c&gt;</bpt>IDispatch<ept id="p1">&lt;/c&gt;</ept> не поддерживается.</target>       </trans-unit>
        <trans-unit id="489" translate="yes" xml:space="preserve" uid="M:System.Reflection.FieldInfo.System#Runtime#InteropServices#_FieldInfo#Invoke(System.UInt32,System.Guid@,System.UInt32,System.Int16,System.IntPtr,System.IntPtr,System.IntPtr,System.IntPtr)">
          <source>Identifies the member.</source>
          <target state="translated">Идентифицирует член.</target>       </trans-unit>
        <trans-unit id="490" translate="yes" xml:space="preserve" uid="M:System.Reflection.FieldInfo.System#Runtime#InteropServices#_FieldInfo#Invoke(System.UInt32,System.Guid@,System.UInt32,System.Int16,System.IntPtr,System.IntPtr,System.IntPtr,System.IntPtr)">
          <source>Reserved for future use.</source>
          <target state="translated">Зарезервировано для будущего использования.</target>       </trans-unit>
        <trans-unit id="491" translate="yes" xml:space="preserve" uid="M:System.Reflection.FieldInfo.System#Runtime#InteropServices#_FieldInfo#Invoke(System.UInt32,System.Guid@,System.UInt32,System.Int16,System.IntPtr,System.IntPtr,System.IntPtr,System.IntPtr)">
          <source>Must be IID_NULL.</source>
          <target state="translated">Должно быть равным IID_NULL.</target>       </trans-unit>
        <trans-unit id="492" translate="yes" xml:space="preserve" uid="M:System.Reflection.FieldInfo.System#Runtime#InteropServices#_FieldInfo#Invoke(System.UInt32,System.Guid@,System.UInt32,System.Int16,System.IntPtr,System.IntPtr,System.IntPtr,System.IntPtr)">
          <source>The locale context in which to interpret arguments.</source>
          <target state="translated">Контекст языкового стандарта, в котором следует интерпретировать аргументы.</target>       </trans-unit>
        <trans-unit id="493" translate="yes" xml:space="preserve" uid="M:System.Reflection.FieldInfo.System#Runtime#InteropServices#_FieldInfo#Invoke(System.UInt32,System.Guid@,System.UInt32,System.Int16,System.IntPtr,System.IntPtr,System.IntPtr,System.IntPtr)">
          <source>Flags describing the context of the call.</source>
          <target state="translated">Флаги, описывающие контекст вызова.</target>       </trans-unit>
        <trans-unit id="494" translate="yes" xml:space="preserve" uid="M:System.Reflection.FieldInfo.System#Runtime#InteropServices#_FieldInfo#Invoke(System.UInt32,System.Guid@,System.UInt32,System.Int16,System.IntPtr,System.IntPtr,System.IntPtr,System.IntPtr)">
          <source>Pointer to a structure containing an array of arguments, an array of argument DISPIDs for named arguments, and counts for the number of elements in the arrays.</source>
          <target state="translated">Указатель на структуру, содержащую массив аргументов, массив DISPID для именованных аргументов, а также счетчики количества элементов в массивах.</target>       </trans-unit>
        <trans-unit id="495" translate="yes" xml:space="preserve" uid="M:System.Reflection.FieldInfo.System#Runtime#InteropServices#_FieldInfo#Invoke(System.UInt32,System.Guid@,System.UInt32,System.Int16,System.IntPtr,System.IntPtr,System.IntPtr,System.IntPtr)">
          <source>Pointer to the location where the result is to be stored.</source>
          <target state="translated">Указатель, по которому будет сохранен результат.</target>       </trans-unit>
        <trans-unit id="496" translate="yes" xml:space="preserve" uid="M:System.Reflection.FieldInfo.System#Runtime#InteropServices#_FieldInfo#Invoke(System.UInt32,System.Guid@,System.UInt32,System.Int16,System.IntPtr,System.IntPtr,System.IntPtr,System.IntPtr)">
          <source>Pointer to a structure that contains exception information.</source>
          <target state="translated">Указатель на структуру, содержащую сведения об исключении.</target>       </trans-unit>
        <trans-unit id="497" translate="yes" xml:space="preserve" uid="M:System.Reflection.FieldInfo.System#Runtime#InteropServices#_FieldInfo#Invoke(System.UInt32,System.Guid@,System.UInt32,System.Int16,System.IntPtr,System.IntPtr,System.IntPtr,System.IntPtr)">
          <source>The index of the first argument that has an error.</source>
          <target state="translated">Индекс первого аргумента, вызвавшего ошибку.</target>       </trans-unit>
        <trans-unit id="498" translate="yes" xml:space="preserve" uid="M:System.Reflection.FieldInfo.System#Runtime#InteropServices#_FieldInfo#Invoke(System.UInt32,System.Guid@,System.UInt32,System.Int16,System.IntPtr,System.IntPtr,System.IntPtr,System.IntPtr)">
          <source>Provides access to properties and methods exposed by an object.</source>
          <target state="translated">Предоставляет доступ к открытым свойствам и методам объекта.</target>       </trans-unit>
        <trans-unit id="499" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.FieldInfo.System#Runtime#InteropServices#_FieldInfo#Invoke(System.UInt32,System.Guid@,System.UInt32,System.Int16,System.IntPtr,System.IntPtr,System.IntPtr,System.IntPtr)">
          <source>This method is for access to managed classes from unmanaged code, and should not be called from managed code.</source>
          <target state="translated">Этот метод предназначен для обеспечения доступа к управляемым классам из неуправляемого кода и не должен вызываться из управляемого кода.</target>       </trans-unit>
        <trans-unit id="500" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.FieldInfo.System#Runtime#InteropServices#_FieldInfo#Invoke(System.UInt32,System.Guid@,System.UInt32,System.Int16,System.IntPtr,System.IntPtr,System.IntPtr,System.IntPtr)">
          <source>For more information about <ph id="ph1">`IDispatch::Invoke`</ph>, see the MSDN Library.</source>
          <target state="translated">Дополнительные сведения о <ph id="ph1">`IDispatch::Invoke`</ph>, см. в библиотеке MSDN.</target>       </trans-unit>
        <trans-unit id="501" translate="yes" xml:space="preserve" uid="M:System.Reflection.FieldInfo.System#Runtime#InteropServices#_FieldInfo#Invoke(System.UInt32,System.Guid@,System.UInt32,System.Int16,System.IntPtr,System.IntPtr,System.IntPtr,System.IntPtr)">
          <source>Late-bound access using the COM <bpt id="p1">&lt;c&gt;</bpt>IDispatch<ept id="p1">&lt;/c&gt;</ept> interface is not supported.</source>
          <target state="translated">Доступ с поздним связыванием с помощью COM-интерфейса <bpt id="p1">&lt;c&gt;</bpt>IDispatch<ept id="p1">&lt;/c&gt;</ept> не поддерживается.</target>       </trans-unit>
      </group>
    </body>
  </file>
</xliff>