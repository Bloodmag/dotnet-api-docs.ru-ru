<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" version="1.2" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="ParameterInfo.xml" source-language="en-US" target-language="ru-RU">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-15c36f0" tool-company="Microsoft" />
      <xliffext:skl_file_name xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">02cd5861-7ce2-4a82-b358-31f8435a0ac586ca3b754399c792282cbf762bf32b6bca401225.skl</xliffext:skl_file_name>
      <xliffext:version xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">1.2</xliffext:version>
      <xliffext:ms.openlocfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">86ca3b754399c792282cbf762bf32b6bca401225</xliffext:ms.openlocfilehash>
      <xliffext:ms.sourcegitcommit xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">d31dc2ede16f6f7bc64e90d9f897ff54c4e3869b</xliffext:ms.sourcegitcommit>
      <xliffext:ms.lasthandoff xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">04/03/2018</xliffext:ms.lasthandoff>
      <xliffext:moniker_ids xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">netcore-1.0,netcore-1.1,netcore-2.0,netcore-2.1,netframework-4.5.1,netframework-4.5.2,netframework-4.5,netframework-4.6.1,netframework-4.6.2,netframework-4.6,netframework-4.7.1,netframework-4.7,netstandard-1.0,netstandard-1.1,netstandard-1.2,netstandard-1.3,netstandard-1.4,netstandard-1.5,netstandard-1.6,netstandard-2.0,xamarinandroid-7.1,xamarinios-10.8,xamarinmac-3.0</xliffext:moniker_ids>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve" uid="T:System.Reflection.ParameterInfo">
          <source>Discovers the attributes of a parameter and provides access to parameter metadata.</source>
          <target state="translated">Обнаруживает атрибуты параметра и обеспечивает доступ к его метаданным.</target>       </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Reflection.ParameterInfo">
          <source>Use an instance of <ph id="ph1">`ParameterInfo`</ph> to obtain information about the parameter's data type, default value, and so on.</source>
          <target state="translated">Использовать экземпляр <ph id="ph1">`ParameterInfo`</ph> для получения сведений о типе данных параметров, значение по умолчанию и т. д.</target>       </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Reflection.ParameterInfo">
          <source><ph id="ph1">&lt;xref:System.Reflection.MethodBase.GetParameters%2A&gt;</ph> returns an array of <ph id="ph2">`ParameterInfo`</ph> objects representing the parameters of a method, in order.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Reflection.MethodBase.GetParameters%2A&gt;</ph> Возвращает массив <ph id="ph2">`ParameterInfo`</ph> объекты, представляющие параметры метода, в порядке.</target>       </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Reflection.ParameterInfo">
          <source>This example shows how to use various reflection classes to analyze the metadata contained in an assembly.</source>
          <target state="translated">В этом примере показано, как использовать различные классы отражения для анализа метаданных, содержащихся в сборке.</target>       </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Reflection.ParameterInfo">
          <source>This type is thread safe.</source>
          <target state="translated">Данный тип потокобезопасен.</target>       </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve" uid="M:System.Reflection.ParameterInfo.#ctor">
          <source>Initializes a new instance of the <ph id="ph1">&lt;see langword="ParameterInfo" /&gt;</ph> class.</source>
          <target state="translated">Инициализирует новый экземпляр класса <ph id="ph1">&lt;see langword="ParameterInfo" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve" uid="P:System.Reflection.ParameterInfo.Attributes">
          <source>Gets the attributes for this parameter.</source>
          <target state="translated">Получает атрибуты этого параметра.</target>       </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.ParameterInfo.Attributes">
          <source>A <ph id="ph1">&lt;see langword="ParameterAttributes" /&gt;</ph> object representing the attributes for this parameter.</source>
          <target state="translated">Объект <ph id="ph1">&lt;see langword="ParameterAttributes" /&gt;</ph>, который представляет атрибуты этого параметра.</target>       </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.ParameterInfo.Attributes">
          <source>This method utilizes the <ph id="ph1">&lt;xref:System.Reflection.ParameterInfo.AttrsImpl&gt;</ph> method.</source>
          <target state="translated">Этот метод использует <ph id="ph1">&lt;xref:System.Reflection.ParameterInfo.AttrsImpl&gt;</ph> метод.</target>       </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.ParameterInfo.Attributes">
          <source>To get the <ph id="ph1">&lt;xref:System.Reflection.ParameterInfo&gt;</ph> array, first get the method or the constructor and then call <ph id="ph2">&lt;xref:System.Reflection.MethodBase.GetParameters%2A?displayProperty=nameWithType&gt;</ph>.</source>
          <target state="translated">Для получения <ph id="ph1">&lt;xref:System.Reflection.ParameterInfo&gt;</ph> массива, сначала нужно получить метод или конструктор и затем вызвать метод <ph id="ph2">&lt;xref:System.Reflection.MethodBase.GetParameters%2A?displayProperty=nameWithType&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.ParameterInfo.Attributes">
          <source>The following example defines a method with three parameters.</source>
          <target state="translated">В следующем примере определяется метод с тремя параметрами.</target>       </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.ParameterInfo.Attributes">
          <source>It uses the <ph id="ph1">&lt;xref:System.Reflection.ParameterInfo.Attributes%2A&gt;</ph> property to get the attributes of the second parameter and display them at the console.</source>
          <target state="translated">Она использует <ph id="ph1">&lt;xref:System.Reflection.ParameterInfo.Attributes%2A&gt;</ph> свойство, чтобы получить атрибуты второго параметра и отображать их в консоли.</target>       </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve" uid="F:System.Reflection.ParameterInfo.AttrsImpl">
          <source>The attributes of the parameter.</source>
          <target state="translated">Атрибуты параметра.</target>       </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve" extradata="MT" uid="F:System.Reflection.ParameterInfo.AttrsImpl">
          <source>This field is intended only for users who are deriving classes from <ph id="ph1">`ParameterInfo`</ph>.</source>
          <target state="translated">Это поле предназначено только для пользователей, которые наследование классов из <ph id="ph1">`ParameterInfo`</ph>.</target>       </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve" extradata="MT" uid="F:System.Reflection.ParameterInfo.AttrsImpl">
          <source>Typical access to parameter attributes is through <ph id="ph1">&lt;xref:System.Reflection.ParameterInfo.Attributes%2A&gt;</ph>.</source>
          <target state="translated">Обычно доступ к атрибутам параметра осуществляется через <ph id="ph1">&lt;xref:System.Reflection.ParameterInfo.Attributes%2A&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve" uid="F:System.Reflection.ParameterInfo.ClassImpl">
          <source>The <ph id="ph1">&lt;see langword="Type" /&gt;</ph> of the parameter.</source>
          <target state="translated">Тип <ph id="ph1">&lt;see langword="Type" /&gt;</ph> параметра.</target>       </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve" extradata="MT" uid="F:System.Reflection.ParameterInfo.ClassImpl">
          <source>This field is intended only for users who are deriving classes from <ph id="ph1">`ParameterInfo`</ph>.</source>
          <target state="translated">Это поле предназначено только для пользователей, которые наследование классов из <ph id="ph1">`ParameterInfo`</ph>.</target>       </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve" extradata="MT" uid="F:System.Reflection.ParameterInfo.ClassImpl">
          <source>Typical access to parameter types is through <ph id="ph1">&lt;xref:System.Reflection.ParameterInfo.ParameterType%2A&gt;</ph>.</source>
          <target state="translated">Обычно доступ к типам параметров осуществляется через <ph id="ph1">&lt;xref:System.Reflection.ParameterInfo.ParameterType%2A&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve" uid="P:System.Reflection.ParameterInfo.CustomAttributes">
          <source>Gets a collection that contains this parameter's custom attributes.</source>
          <target state="translated">Получает коллекцию, содержащую пользовательские атрибуты этого параметра.</target>       </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.ParameterInfo.CustomAttributes">
          <source>A collection that contains this parameter's custom attributes.</source>
          <target state="translated">Коллекция, содержащая пользовательские атрибуты этого параметра.</target>       </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve" uid="P:System.Reflection.ParameterInfo.DefaultValue">
          <source>Gets a value indicating the default value if the parameter has a default value.</source>
          <target state="translated">Возвращает значение по умолчанию, если оно задано для параметра.</target>       </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.ParameterInfo.DefaultValue">
          <source>The default value of the parameter, or <ph id="ph1">&lt;see cref="F:System.DBNull.Value" /&gt;</ph> if the parameter has no default value.</source>
          <target state="translated">Значение параметра по умолчанию или значение <ph id="ph1">&lt;see cref="F:System.DBNull.Value" /&gt;</ph>, если параметр не имеет значения по умолчанию.</target>       </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.ParameterInfo.DefaultValue">
          <source>This property is used only in the execution context.</source>
          <target state="translated">Это свойство используется только в контексте выполнения.</target>       </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.ParameterInfo.DefaultValue">
          <source>In the reflection-only context, use the <ph id="ph1">&lt;xref:System.Reflection.ParameterInfo.RawDefaultValue%2A&gt;</ph> property instead.</source>
          <target state="translated">В контексте только для отражения, используйте <ph id="ph1">&lt;xref:System.Reflection.ParameterInfo.RawDefaultValue%2A&gt;</ph> свойство вместо него.</target>       </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.ParameterInfo.DefaultValue">
          <source>The default value is used when an actual value is not specified in the method call.</source>
          <target state="translated">Значение по умолчанию используется, если фактическое значение не указано в вызове метода.</target>       </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.ParameterInfo.DefaultValue">
          <source>A parameter can have a default value that is <ph id="ph1">`null`</ph>.</source>
          <target state="translated">Параметр может иметь значение по умолчанию, которое является <ph id="ph1">`null`</ph>.</target>       </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.ParameterInfo.DefaultValue">
          <source>This is distinct from the case where a default value is not defined.</source>
          <target state="translated">Это отличается от случая, когда не определено значение по умолчанию.</target>       </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.ParameterInfo.DefaultValue">
          <source>This method utilizes the <ph id="ph1">&lt;xref:System.Reflection.ParameterInfo.DefaultValueImpl&gt;</ph> method.</source>
          <target state="translated">Этот метод использует <ph id="ph1">&lt;xref:System.Reflection.ParameterInfo.DefaultValueImpl&gt;</ph> метод.</target>       </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.ParameterInfo.DefaultValue">
          <source>To get the <ph id="ph1">&lt;xref:System.Reflection.ParameterInfo&gt;</ph> array, first get the method or the constructor and then call <ph id="ph2">&lt;xref:System.Reflection.MethodBase.GetParameters%2A?displayProperty=nameWithType&gt;</ph>.</source>
          <target state="translated">Для получения <ph id="ph1">&lt;xref:System.Reflection.ParameterInfo&gt;</ph> массива, сначала нужно получить метод или конструктор и затем вызвать метод <ph id="ph2">&lt;xref:System.Reflection.MethodBase.GetParameters%2A?displayProperty=nameWithType&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve" uid="F:System.Reflection.ParameterInfo.DefaultValueImpl">
          <source>The default value of the parameter.</source>
          <target state="translated">Значение параметра по умолчанию.</target>       </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve" extradata="MT" uid="F:System.Reflection.ParameterInfo.DefaultValueImpl">
          <source>This field is intended only for users who are deriving classes from <ph id="ph1">`ParameterInfo`</ph>.</source>
          <target state="translated">Это поле предназначено только для пользователей, которые наследование классов из <ph id="ph1">`ParameterInfo`</ph>.</target>       </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve" extradata="MT" uid="F:System.Reflection.ParameterInfo.DefaultValueImpl">
          <source>Typical access to the default value of the parameter is through <ph id="ph1">&lt;xref:System.Reflection.ParameterInfo.DefaultValue%2A&gt;</ph>.</source>
          <target state="translated">Обычно доступ к значению по умолчанию параметра осуществляется через <ph id="ph1">&lt;xref:System.Reflection.ParameterInfo.DefaultValue%2A&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve" uid="T:System.Reflection.ParameterInfo">
          <source>Gets the custom attributes applied to this parameter.</source>
          <target state="translated">Получает все настраиваемые атрибуты, примененные к данному параметру.</target>       </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve" uid="M:System.Reflection.ParameterInfo.GetCustomAttributes(System.Boolean)">
          <source>This argument is ignored for objects of this type.</source>
          <target state="translated">Данный аргумент не учитывается для объектов этого типа.</target>       </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve" uid="M:System.Reflection.ParameterInfo.GetCustomAttributes(System.Boolean)">
          <source>Gets all the custom attributes defined on this parameter.</source>
          <target state="translated">Возвращает все пользовательские атрибуты, определенные для этого параметра.</target>       </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve" uid="M:System.Reflection.ParameterInfo.GetCustomAttributes(System.Boolean)">
          <source>An array that contains all the custom attributes applied to this parameter.</source>
          <target state="translated">Массив, содержащий все настраиваемые атрибуты, примененные к данному параметру.</target>       </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.ParameterInfo.GetCustomAttributes(System.Boolean)">
          <source>This method ignores the <ph id="ph1">`inherit`</ph> parameter.</source>
          <target state="translated">Этот метод игнорирует <ph id="ph1">`inherit`</ph> параметра.</target>       </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.ParameterInfo.GetCustomAttributes(System.Boolean)">
          <source>To search the inheritance chain for attributes on parameters, use the appropriate overloads of the <ph id="ph1">&lt;xref:System.Attribute.GetCustomAttributes%2A?displayProperty=nameWithType&gt;</ph> method.</source>
          <target state="translated">Для поиска цепочки наследования атрибутов для параметров, используйте соответствующие перегрузки <ph id="ph1">&lt;xref:System.Attribute.GetCustomAttributes%2A?displayProperty=nameWithType&gt;</ph> метод.</target>       </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.ParameterInfo.GetCustomAttributes(System.Boolean)">
          <source>The following example shows how custom attributes that have been applied to the parameters of methods can be retrieved at run time.</source>
          <target state="translated">В следующем примере показано, каким образом пользовательские атрибуты, которые были применены к параметрам методов могут быть получены во время выполнения.</target>       </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.ParameterInfo.GetCustomAttributes(System.Boolean)">
          <source>The example defines a custom attribute named <ph id="ph1">`MyAttribute`</ph> that can be applied to parameters.</source>
          <target state="translated">В примере определяется настраиваемый атрибут с именем <ph id="ph1">`MyAttribute`</ph> , могут применяться к параметрам.</target>       </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.ParameterInfo.GetCustomAttributes(System.Boolean)">
          <source>The example then defines a class named <ph id="ph1">`MyClass`</ph> with a method named <ph id="ph2">`MyMethod`</ph>, and applies <ph id="ph3">`MyAttribute`</ph> to a parameter of the method.</source>
          <target state="translated">Затем, в примере определяется класс с именем <ph id="ph1">`MyClass`</ph> с методом <ph id="ph2">`MyMethod`</ph>и применяет <ph id="ph3">`MyAttribute`</ph> к параметру метода.</target>       </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.ParameterInfo.GetCustomAttributes(System.Boolean)">
          <source>When the example is run, it uses the <ph id="ph1">&lt;xref:System.Reflection.ParameterInfo.GetCustomAttributes%28System.Boolean%29&gt;</ph> method to retrieve the custom attributes that have been applied to all parameters of all methods in <ph id="ph2">`MyClass`</ph>, and displays them at the console.</source>
          <target state="translated">При запуске данного примера используется <ph id="ph1">&lt;xref:System.Reflection.ParameterInfo.GetCustomAttributes%28System.Boolean%29&gt;</ph> метод для извлечения настраиваемых атрибутов, которые были применены все параметры всех методов в <ph id="ph2">`MyClass`</ph>и выводит их на консоль.</target>       </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve" uid="M:System.Reflection.ParameterInfo.GetCustomAttributes(System.Boolean)">
          <source>A custom attribute type could not be loaded.</source>
          <target state="translated">Не удалось загрузить тип настраиваемого атрибута.</target>       </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve" uid="M:System.Reflection.ParameterInfo.GetCustomAttributes(System.Type,System.Boolean)">
          <source>The custom attributes identified by type.</source>
          <target state="translated">Пользовательские атрибуты, идентифицируемые по типу.</target>       </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve" uid="M:System.Reflection.ParameterInfo.GetCustomAttributes(System.Type,System.Boolean)">
          <source>This argument is ignored for objects of this type.</source>
          <target state="translated">Данный аргумент не учитывается для объектов этого типа.</target>       </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve" uid="M:System.Reflection.ParameterInfo.GetCustomAttributes(System.Type,System.Boolean)">
          <source>Gets the custom attributes of the specified type or its derived types that are applied to this parameter.</source>
          <target state="translated">Получает настраиваемые атрибуты заданного типа или его производных типов, примененные к данному параметру.</target>       </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve" uid="M:System.Reflection.ParameterInfo.GetCustomAttributes(System.Type,System.Boolean)">
          <source>An array that contains the custom attributes of the specified type or its derived types.</source>
          <target state="translated">Массив, содержащий настраиваемые атрибуты указанного типа или его производных типов.</target>       </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.ParameterInfo.GetCustomAttributes(System.Type,System.Boolean)">
          <source>This method ignores the <ph id="ph1">`inherit`</ph> parameter.</source>
          <target state="translated">Этот метод игнорирует <ph id="ph1">`inherit`</ph> параметра.</target>       </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.ParameterInfo.GetCustomAttributes(System.Type,System.Boolean)">
          <source>To search the inheritance chain for attributes on parameters, use the appropriate overloads of the <ph id="ph1">&lt;xref:System.Attribute.GetCustomAttributes%2A?displayProperty=nameWithType&gt;</ph> method.</source>
          <target state="translated">Для поиска цепочки наследования атрибутов для параметров, используйте соответствующие перегрузки <ph id="ph1">&lt;xref:System.Attribute.GetCustomAttributes%2A?displayProperty=nameWithType&gt;</ph> метод.</target>       </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve" uid="M:System.Reflection.ParameterInfo.GetCustomAttributes(System.Type,System.Boolean)">
          <source>The type must be a type provided by the underlying runtime system.</source>
          <target state="translated">Тип должен быть типом, предоставленным базовой системой среды выполнения.</target>       </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve" uid="M:System.Reflection.ParameterInfo.GetCustomAttributes(System.Type,System.Boolean)">
          <source><ph id="ph1">&lt;paramref name="attributeType" /&gt;</ph> is <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated">Свойство <ph id="ph1">&lt;paramref name="attributeType" /&gt;</ph> имеет значение <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve" uid="M:System.Reflection.ParameterInfo.GetCustomAttributes(System.Type,System.Boolean)">
          <source>A custom attribute type could not be loaded.</source>
          <target state="translated">Не удалось загрузить тип настраиваемого атрибута.</target>       </trans-unit>
        <trans-unit id="153" translate="yes" xml:space="preserve" uid="M:System.Reflection.ParameterInfo.GetCustomAttributesData">
          <source>Returns a list of <ph id="ph1">&lt;see cref="T:System.Reflection.CustomAttributeData" /&gt;</ph> objects for the current parameter, which can be used in the reflection-only context.</source>
          <target state="translated">Возвращает список объектов <ph id="ph1">&lt;see cref="T:System.Reflection.CustomAttributeData" /&gt;</ph> для текущего параметра, который можно использовать в контексте, предназначенном только для отражения.</target>       </trans-unit>
        <trans-unit id="154" translate="yes" xml:space="preserve" uid="M:System.Reflection.ParameterInfo.GetCustomAttributesData">
          <source>A generic list of <ph id="ph1">&lt;see cref="T:System.Reflection.CustomAttributeData" /&gt;</ph> objects representing data about the attributes that have been applied to the current parameter.</source>
          <target state="translated">Универсальный список объектов <ph id="ph1">&lt;see cref="T:System.Reflection.CustomAttributeData" /&gt;</ph>, представляющих данные об атрибутах, которые были применены к текущему параметру.</target>       </trans-unit>
        <trans-unit id="155" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.ParameterInfo.GetCustomAttributesData">
          <source>Use this method to examine the custom attributes of code in the reflection-only context, in cases where the custom attributes themselves are defined in code that is loaded into the reflection-only context.</source>
          <target state="translated">Этот метод можно используйте для исследования настраиваемых атрибутов кода в контексте только для отражения в случаях, где сами настраиваемые атрибуты определены в коде, который загружается в контекст только для отражения.</target>       </trans-unit>
        <trans-unit id="156" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.ParameterInfo.GetCustomAttributesData">
          <source>Methods such as <ph id="ph1">&lt;xref:System.Attribute.GetCustomAttributes%2A?displayProperty=nameWithType&gt;</ph> and <ph id="ph2">&lt;xref:System.Reflection.ParameterInfo.GetCustomAttributes%2A?displayProperty=nameWithType&gt;</ph> cannot be used in such cases, because they create instances of the attributes.</source>
          <target state="translated">Такие методы, как <ph id="ph1">&lt;xref:System.Attribute.GetCustomAttributes%2A?displayProperty=nameWithType&gt;</ph> и <ph id="ph2">&lt;xref:System.Reflection.ParameterInfo.GetCustomAttributes%2A?displayProperty=nameWithType&gt;</ph> не может использоваться в таких случаях, поскольку они создают экземпляры атрибутов.</target>       </trans-unit>
        <trans-unit id="157" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.ParameterInfo.GetCustomAttributesData">
          <source>Code in the reflection-only context cannot be executed.</source>
          <target state="translated">Не удается выполнить код в контексте только для отражения.</target>       </trans-unit>
        <trans-unit id="158" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.ParameterInfo.GetCustomAttributesData">
          <source>For more information and example code, see the <ph id="ph1">&lt;xref:System.Reflection.CustomAttributeData&gt;</ph> class.</source>
          <target state="translated">Дополнительные сведения и пример кода см. в разделе <ph id="ph1">&lt;xref:System.Reflection.CustomAttributeData&gt;</ph> класса.</target>       </trans-unit>
        <trans-unit id="159" translate="yes" xml:space="preserve" uid="M:System.Reflection.ParameterInfo.GetOptionalCustomModifiers">
          <source>Gets the optional custom modifiers of the parameter.</source>
          <target state="translated">Возвращает необязательные настраиваемые модификаторы параметра.</target>       </trans-unit>
        <trans-unit id="160" translate="yes" xml:space="preserve" uid="M:System.Reflection.ParameterInfo.GetOptionalCustomModifiers">
          <source>An array of <ph id="ph1">&lt;see cref="T:System.Type" /&gt;</ph> objects that identify the optional custom modifiers of the current parameter, such as <ph id="ph2">&lt;see cref="T:System.Runtime.CompilerServices.IsConst" /&gt;</ph> or <ph id="ph3">&lt;see cref="T:System.Runtime.CompilerServices.IsImplicitlyDereferenced" /&gt;</ph>.</source>
          <target state="translated">Массив объектов <ph id="ph1">&lt;see cref="T:System.Type" /&gt;</ph>, указывающих дополнительные настраиваемые модификаторы для текущего параметра, такие как <ph id="ph2">&lt;see cref="T:System.Runtime.CompilerServices.IsConst" /&gt;</ph> или <ph id="ph3">&lt;see cref="T:System.Runtime.CompilerServices.IsImplicitlyDereferenced" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="161" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.ParameterInfo.GetOptionalCustomModifiers">
          <source>The <ph id="ph1">&lt;xref:System.Reflection.ParameterInfo.GetOptionalCustomModifiers%2A&gt;</ph> and <ph id="ph2">&lt;xref:System.Reflection.ParameterInfo.GetRequiredCustomModifiers%2A&gt;</ph> methods are provided for designers of managed compilers.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Reflection.ParameterInfo.GetOptionalCustomModifiers%2A&gt;</ph> И <ph id="ph2">&lt;xref:System.Reflection.ParameterInfo.GetRequiredCustomModifiers%2A&gt;</ph> методы предоставляются для конструкторов управляемых компиляторов.</target>       </trans-unit>
        <trans-unit id="162" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.ParameterInfo.GetOptionalCustomModifiers">
          <source>For more information on custom modifiers, see <ph id="ph1">&lt;xref:System.Runtime.CompilerServices.IsBoxed&gt;</ph> and related classes in the <ph id="ph2">&lt;xref:System.Runtime.CompilerServices&gt;</ph> namespace, and the metadata specification in the ECMA Partition II documentation.</source>
          <target state="translated">Дополнительные сведения о настраиваемых модификаторов см. в разделе <ph id="ph1">&lt;xref:System.Runtime.CompilerServices.IsBoxed&gt;</ph> и связанными классами в <ph id="ph2">&lt;xref:System.Runtime.CompilerServices&gt;</ph> пространства имен и спецификацию метаданных в документации ECMA раздел II.</target>       </trans-unit>
        <trans-unit id="163" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.ParameterInfo.GetOptionalCustomModifiers">
          <source>The documentation is available online; see <bpt id="p1">[</bpt>ECMA C# and Common Language Infrastructure Standards<ept id="p1">](http://go.microsoft.com/fwlink/?LinkID=99212)</ept> on MSDN and <bpt id="p2">[</bpt>Standard ECMA-335 - Common Language Infrastructure (CLI)<ept id="p2">](http://go.microsoft.com/fwlink/?LinkID=65552)</ept> on the Ecma International Web site.</source>
          <target state="translated">Документация доступна в Интернете; см. страницы <bpt id="p1">[</bpt>ECMAC# и стандарты Common Language Infrastructure<ept id="p1">](http://go.microsoft.com/fwlink/?LinkID=99212)</ept> на сайте MSDN и <bpt id="p2">[</bpt>Стандарт ECMA-335 — общеязыковая инфраструктура (CLI)<ept id="p2">](http://go.microsoft.com/fwlink/?LinkID=65552)</ept> на международном веб-сайте организации ECMA.</target>       </trans-unit>
        <trans-unit id="164" translate="yes" xml:space="preserve" uid="M:System.Reflection.ParameterInfo.GetRealObject(System.Runtime.Serialization.StreamingContext)">
          <source>The serialized stream from which the current object is deserialized.</source>
          <target state="translated">Сериализованный поток, из которого десериализуется текущий объект.</target>       </trans-unit>
        <trans-unit id="165" translate="yes" xml:space="preserve" uid="M:System.Reflection.ParameterInfo.GetRealObject(System.Runtime.Serialization.StreamingContext)">
          <source>Returns the real object that should be deserialized instead of the object that the serialized stream specifies.</source>
          <target state="translated">Возвращает реальный объект, который необходимо десериализовать, вместо объекта, задаваемого сериализованным потоком.</target>       </trans-unit>
        <trans-unit id="166" translate="yes" xml:space="preserve" uid="M:System.Reflection.ParameterInfo.GetRealObject(System.Runtime.Serialization.StreamingContext)">
          <source>The actual object that is put into the graph.</source>
          <target state="translated">Реальный объект, который помещается в граф.</target>       </trans-unit>
        <trans-unit id="167" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.ParameterInfo.GetRealObject(System.Runtime.Serialization.StreamingContext)">
          <source>This method implements the <ph id="ph1">&lt;xref:System.Runtime.Serialization.IObjectReference.GetRealObject%2A?displayProperty=nameWithType&gt;</ph> method.</source>
          <target state="translated">Этот метод реализует метод <ph id="ph1">&lt;xref:System.Runtime.Serialization.IObjectReference.GetRealObject%2A?displayProperty=nameWithType&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="168" translate="yes" xml:space="preserve" uid="M:System.Reflection.ParameterInfo.GetRealObject(System.Runtime.Serialization.StreamingContext)">
          <source>The parameter's position in the parameter list of its associated member is not valid for that member's type.</source>
          <target state="translated">Позиция параметра в списке параметров связанного с ним члена недопустима для типа этого члена.</target>       </trans-unit>
        <trans-unit id="169" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.ParameterInfo.GetRealObject(System.Runtime.Serialization.StreamingContext)">
          <source>Requires full trust for the immediate caller.</source>
          <target state="translated">требуется полное доверие для непосредственно вызывающего метода.</target>       </trans-unit>
        <trans-unit id="170" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.ParameterInfo.GetRealObject(System.Runtime.Serialization.StreamingContext)">
          <source>This member cannot be used by partially trusted or transparent code.</source>
          <target state="translated">Этот член не может использоваться частично доверенным или прозрачным кодом.</target>       </trans-unit>
        <trans-unit id="171" translate="yes" xml:space="preserve" uid="M:System.Reflection.ParameterInfo.GetRequiredCustomModifiers">
          <source>Gets the required custom modifiers of the parameter.</source>
          <target state="translated">Возвращает обязательные настраиваемые модификаторы параметра.</target>       </trans-unit>
        <trans-unit id="172" translate="yes" xml:space="preserve" uid="M:System.Reflection.ParameterInfo.GetRequiredCustomModifiers">
          <source>An array of <ph id="ph1">&lt;see cref="T:System.Type" /&gt;</ph> objects that identify the required custom modifiers of the current parameter, such as <ph id="ph2">&lt;see cref="T:System.Runtime.CompilerServices.IsConst" /&gt;</ph> or <ph id="ph3">&lt;see cref="T:System.Runtime.CompilerServices.IsImplicitlyDereferenced" /&gt;</ph>.</source>
          <target state="translated">Массив объектов <ph id="ph1">&lt;see cref="T:System.Type" /&gt;</ph>, которые указывают обязательные настраиваемые модификаторы для текущего параметра, например <ph id="ph2">&lt;see cref="T:System.Runtime.CompilerServices.IsConst" /&gt;</ph> или <ph id="ph3">&lt;see cref="T:System.Runtime.CompilerServices.IsImplicitlyDereferenced" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="173" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.ParameterInfo.GetRequiredCustomModifiers">
          <source>The <ph id="ph1">&lt;xref:System.Reflection.ParameterInfo.GetOptionalCustomModifiers%2A&gt;</ph> and <ph id="ph2">&lt;xref:System.Reflection.ParameterInfo.GetRequiredCustomModifiers%2A&gt;</ph> methods are provided for designers of managed compilers.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Reflection.ParameterInfo.GetOptionalCustomModifiers%2A&gt;</ph> И <ph id="ph2">&lt;xref:System.Reflection.ParameterInfo.GetRequiredCustomModifiers%2A&gt;</ph> методы предоставляются для конструкторов управляемых компиляторов.</target>       </trans-unit>
        <trans-unit id="174" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.ParameterInfo.GetRequiredCustomModifiers">
          <source>For more information on custom modifiers, see <ph id="ph1">&lt;xref:System.Runtime.CompilerServices.IsBoxed&gt;</ph> and related classes in the <ph id="ph2">&lt;xref:System.Runtime.CompilerServices&gt;</ph> namespace, and the metadata specification in the ECMA Partition II documentation.</source>
          <target state="translated">Дополнительные сведения о настраиваемых модификаторов см. в разделе <ph id="ph1">&lt;xref:System.Runtime.CompilerServices.IsBoxed&gt;</ph> и связанными классами в <ph id="ph2">&lt;xref:System.Runtime.CompilerServices&gt;</ph> пространства имен и спецификацию метаданных в документации ECMA раздел II.</target>       </trans-unit>
        <trans-unit id="175" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.ParameterInfo.GetRequiredCustomModifiers">
          <source>The documentation is available online; see <bpt id="p1">[</bpt>ECMA C# and Common Language Infrastructure Standards<ept id="p1">](http://go.microsoft.com/fwlink/?LinkID=99212)</ept> on MSDN and <bpt id="p2">[</bpt>Standard ECMA-335 - Common Language Infrastructure (CLI)<ept id="p2">](http://go.microsoft.com/fwlink/?LinkID=65552)</ept> on the Ecma International Web site.</source>
          <target state="translated">Документация доступна в Интернете; см. страницы <bpt id="p1">[</bpt>ECMAC# и стандарты Common Language Infrastructure<ept id="p1">](http://go.microsoft.com/fwlink/?LinkID=99212)</ept> на сайте MSDN и <bpt id="p2">[</bpt>Стандарт ECMA-335 — общеязыковая инфраструктура (CLI)<ept id="p2">](http://go.microsoft.com/fwlink/?LinkID=65552)</ept> на международном веб-сайте организации ECMA.</target>       </trans-unit>
        <trans-unit id="176" translate="yes" xml:space="preserve" uid="P:System.Reflection.ParameterInfo.HasDefaultValue">
          <source>Gets a value that indicates whether this parameter has a default value.</source>
          <target state="translated">Получает значение, указывающее, имеет ли данный параметр значение по умолчанию.</target>       </trans-unit>
        <trans-unit id="177" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.ParameterInfo.HasDefaultValue">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph> if this parameter has a default value; otherwise, <ph id="ph2">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated">Значение <ph id="ph1">&lt;see langword="true" /&gt;</ph>, если этот параметр имеет значение по умолчанию; в противном случае — значение <ph id="ph2">&lt;see langword="false" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="178" translate="yes" xml:space="preserve" uid="M:System.Reflection.ParameterInfo.IsDefined(System.Type,System.Boolean)">
          <source>The <ph id="ph1">&lt;see langword="Type" /&gt;</ph> object to search for.</source>
          <target state="translated">Объект <ph id="ph1">&lt;see langword="Type" /&gt;</ph>, который требуется найти.</target>       </trans-unit>
        <trans-unit id="179" translate="yes" xml:space="preserve" uid="M:System.Reflection.ParameterInfo.IsDefined(System.Type,System.Boolean)">
          <source>This argument is ignored for objects of this type.</source>
          <target state="translated">Данный аргумент не учитывается для объектов этого типа.</target>       </trans-unit>
        <trans-unit id="180" translate="yes" xml:space="preserve" uid="M:System.Reflection.ParameterInfo.IsDefined(System.Type,System.Boolean)">
          <source>Determines whether the custom attribute of the specified type or its derived types is applied to this parameter.</source>
          <target state="translated">Определяет, применяется ли настраиваемый атрибут заданного типа или его производных типов к данному параметру.</target>       </trans-unit>
        <trans-unit id="181" translate="yes" xml:space="preserve" uid="M:System.Reflection.ParameterInfo.IsDefined(System.Type,System.Boolean)">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph> if one or more instances of <ph id="ph2">&lt;paramref name="attributeType" /&gt;</ph> or its derived types are applied to this parameter; otherwise, <ph id="ph3">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated">Значение <ph id="ph1">&lt;see langword="true" /&gt;</ph>, если к этому параметру применяется один или несколько экземпляров типа <ph id="ph2">&lt;paramref name="attributeType" /&gt;</ph> или его производных типов; в противном случае — значение <ph id="ph3">&lt;see langword="false" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="182" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.ParameterInfo.IsDefined(System.Type,System.Boolean)">
          <source>This method ignores the <ph id="ph1">`inherit`</ph> parameter.</source>
          <target state="translated">Этот метод игнорирует <ph id="ph1">`inherit`</ph> параметра.</target>       </trans-unit>
        <trans-unit id="183" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.ParameterInfo.IsDefined(System.Type,System.Boolean)">
          <source>To search the inheritance chain for attributes on parameters, use the appropriate overloads of the <ph id="ph1">&lt;xref:System.Attribute.IsDefined%2A?displayProperty=nameWithType&gt;</ph> method.</source>
          <target state="translated">Для поиска цепочки наследования атрибутов для параметров, используйте соответствующие перегрузки <ph id="ph1">&lt;xref:System.Attribute.IsDefined%2A?displayProperty=nameWithType&gt;</ph> метод.</target>       </trans-unit>
        <trans-unit id="184" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.ParameterInfo.IsDefined(System.Type,System.Boolean)">
          <source>The following example defines two custom attributes, <ph id="ph1">`MyAttribute`</ph> and <ph id="ph2">`MyDerivedAttribute`</ph>.</source>
          <target state="translated">В следующем примере определяется двумя пользовательскими атрибутами <ph id="ph1">`MyAttribute`</ph> и <ph id="ph2">`MyDerivedAttribute`</ph>.</target>       </trans-unit>
        <trans-unit id="185" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.ParameterInfo.IsDefined(System.Type,System.Boolean)">
          <source><ph id="ph1">`MyDerivedAttribute`</ph> is derived from <ph id="ph2">`MyAttribute`</ph>.</source>
          <target state="translated">Класс <ph id="ph1">`MyDerivedAttribute`</ph> является производным от <ph id="ph2">`MyAttribute`</ph>.</target>       </trans-unit>
        <trans-unit id="186" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.ParameterInfo.IsDefined(System.Type,System.Boolean)">
          <source>The example then applies these attributes to the parameters of a method of an example class.</source>
          <target state="translated">Эти атрибуты затем применяется к параметрам метода класса примера.</target>       </trans-unit>
        <trans-unit id="187" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.ParameterInfo.IsDefined(System.Type,System.Boolean)">
          <source>When the example is run, it uses the <ph id="ph1">&lt;xref:System.Reflection.ParameterInfo.IsDefined%2A&gt;</ph> method to test all parameters of all methods in the example class.</source>
          <target state="translated">При запуске данного примера используется <ph id="ph1">&lt;xref:System.Reflection.ParameterInfo.IsDefined%2A&gt;</ph> метод для проверки всех параметров всех методов в классе пример.</target>       </trans-unit>
        <trans-unit id="188" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.ParameterInfo.IsDefined(System.Type,System.Boolean)">
          <source>It then displays the parameters that have <ph id="ph1">`MyAttribute`</ph> or <ph id="ph2">`MyDerivedAttribute`</ph>.</source>
          <target state="translated">Затем отображается параметры, которые имеют <ph id="ph1">`MyAttribute`</ph> или <ph id="ph2">`MyDerivedAttribute`</ph>.</target>       </trans-unit>
        <trans-unit id="189" translate="yes" xml:space="preserve" uid="M:System.Reflection.ParameterInfo.IsDefined(System.Type,System.Boolean)">
          <source><ph id="ph1">&lt;paramref name="attributeType" /&gt;</ph> is <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated">Свойство <ph id="ph1">&lt;paramref name="attributeType" /&gt;</ph> имеет значение <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="190" translate="yes" xml:space="preserve" uid="M:System.Reflection.ParameterInfo.IsDefined(System.Type,System.Boolean)">
          <source><ph id="ph1">&lt;paramref name="attributeType" /&gt;</ph> is not a <ph id="ph2">&lt;see cref="T:System.Type" /&gt;</ph> object supplied by the common language runtime.</source>
          <target state="translated">Параметр <ph id="ph1">&lt;paramref name="attributeType" /&gt;</ph> не является объектом типа <ph id="ph2">&lt;see cref="T:System.Type" /&gt;</ph>, предоставленным средой CLR.</target>       </trans-unit>
        <trans-unit id="191" translate="yes" xml:space="preserve" uid="P:System.Reflection.ParameterInfo.IsIn">
          <source>Gets a value indicating whether this is an input parameter.</source>
          <target state="translated">Получает значение, указывающее, является ли этот параметр входным.</target>       </trans-unit>
        <trans-unit id="192" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.ParameterInfo.IsIn">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph> if the parameter is an input parameter; otherwise, <ph id="ph2">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated">Значение <ph id="ph1">&lt;see langword="true" /&gt;</ph>, если параметр является входным; в противном случае — значение <ph id="ph2">&lt;see langword="false" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="193" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.ParameterInfo.IsIn">
          <source>This method depends on an optional metadata flag.</source>
          <target state="translated">Этот метод зависит от дополнительного флага метаданных.</target>       </trans-unit>
        <trans-unit id="194" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.ParameterInfo.IsIn">
          <source>This flag can be inserted by compilers, but the compilers are not obligated to do so.</source>
          <target state="translated">Этот флаг может быть вставлен компиляторами, но они не предназначены для этого.</target>       </trans-unit>
        <trans-unit id="195" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.ParameterInfo.IsIn">
          <source>This method utilizes the <ph id="ph1">`In`</ph> flag of the <ph id="ph2">`ParameterAttributes`</ph> enumerator.</source>
          <target state="translated">Этот метод использует <ph id="ph1">`In`</ph> флаг <ph id="ph2">`ParameterAttributes`</ph> перечислителя.</target>       </trans-unit>
        <trans-unit id="196" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.ParameterInfo.IsIn">
          <source>To get the <ph id="ph1">&lt;xref:System.Reflection.ParameterInfo&gt;</ph> array, first get the method or the constructor and then call <ph id="ph2">&lt;xref:System.Reflection.MethodBase.GetParameters%2A?displayProperty=nameWithType&gt;</ph>.</source>
          <target state="translated">Для получения <ph id="ph1">&lt;xref:System.Reflection.ParameterInfo&gt;</ph> массива, сначала нужно получить метод или конструктор и затем вызвать метод <ph id="ph2">&lt;xref:System.Reflection.MethodBase.GetParameters%2A?displayProperty=nameWithType&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="197" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.ParameterInfo.IsIn">
          <source>The following example shows how to test method parameters for the <ph id="ph1">&lt;xref:System.Reflection.ParameterAttributes.In?displayProperty=nameWithType&gt;</ph>, <ph id="ph2">&lt;xref:System.Reflection.ParameterAttributes.Out?displayProperty=nameWithType&gt;</ph>, and <ph id="ph3">&lt;xref:System.Reflection.ParameterAttributes.Optional?displayProperty=nameWithType&gt;</ph> attributes.</source>
          <target state="translated">Приведенный ниже показано, как проверить параметры метода для <ph id="ph1">&lt;xref:System.Reflection.ParameterAttributes.In?displayProperty=nameWithType&gt;</ph>, <ph id="ph2">&lt;xref:System.Reflection.ParameterAttributes.Out?displayProperty=nameWithType&gt;</ph>, и <ph id="ph3">&lt;xref:System.Reflection.ParameterAttributes.Optional?displayProperty=nameWithType&gt;</ph> атрибуты.</target>       </trans-unit>
        <trans-unit id="198" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.ParameterInfo.IsIn">
          <source>The example contains a <ph id="ph1">`DefineMethod`</ph> method that does the following:</source>
          <target state="translated">В примере содержится <ph id="ph1">`DefineMethod`</ph> метод, который делает следующее:</target>       </trans-unit>
        <trans-unit id="199" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.ParameterInfo.IsIn">
          <source>Creates a dynamic assembly containing a <ph id="ph1">`MyType`</ph> type.</source>
          <target state="translated">Создает динамическую сборку, содержащую <ph id="ph1">`MyType`</ph> типа.</target>       </trans-unit>
        <trans-unit id="200" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.ParameterInfo.IsIn">
          <source>Adds a <ph id="ph1">`MyMethod`</ph> method to <ph id="ph2">`MyType`</ph>.</source>
          <target state="translated">Добавляет <ph id="ph1">`MyMethod`</ph> метод <ph id="ph2">`MyType`</ph>.</target>       </trans-unit>
        <trans-unit id="201" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.ParameterInfo.IsIn">
          <source><ph id="ph1">`MyMethod`</ph> has three parameters.</source>
          <target state="translated"><ph id="ph1">`MyMethod`</ph> имеет три параметра.</target>       </trans-unit>
        <trans-unit id="202" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.ParameterInfo.IsIn">
          <source>The first parameter is defined with <ph id="ph1">&lt;xref:System.Reflection.ParameterAttributes.In?displayProperty=nameWithType&gt;</ph>, the second with <ph id="ph2">&lt;xref:System.Reflection.ParameterAttributes.Out?displayProperty=nameWithType&gt;</ph>, and the third with <ph id="ph3">&lt;xref:System.Reflection.ParameterAttributes.Optional?displayProperty=nameWithType&gt;</ph>.</source>
          <target state="translated">Первый параметр определен с <ph id="ph1">&lt;xref:System.Reflection.ParameterAttributes.In?displayProperty=nameWithType&gt;</ph>, другой — с <ph id="ph2">&lt;xref:System.Reflection.ParameterAttributes.Out?displayProperty=nameWithType&gt;</ph>, а в третьем с <ph id="ph3">&lt;xref:System.Reflection.ParameterAttributes.Optional?displayProperty=nameWithType&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="203" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.ParameterInfo.IsIn">
          <source>Calls <ph id="ph1">&lt;xref:System.Reflection.Emit.TypeBuilder.CreateType%2A?displayProperty=nameWithType&gt;</ph> to complete the type.</source>
          <target state="translated">Вызовы <ph id="ph1">&lt;xref:System.Reflection.Emit.TypeBuilder.CreateType%2A?displayProperty=nameWithType&gt;</ph> для выполнения тип.</target>       </trans-unit>
        <trans-unit id="204" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.ParameterInfo.IsIn">
          <source>After executing <ph id="ph1">`DefineMethod`</ph>, the example searches the assemblies that are currently loaded until it finds the dynamic assembly.</source>
          <target state="translated">После выполнения <ph id="ph1">`DefineMethod`</ph>, в примере выполняется поиск сборок, загруженных в настоящее время, пока не найдет динамической сборки.</target>       </trans-unit>
        <trans-unit id="205" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.ParameterInfo.IsIn">
          <source>It loads <ph id="ph1">`MyType`</ph> from the assembly, gets a <ph id="ph2">&lt;xref:System.Reflection.MethodInfo&gt;</ph> object for the <ph id="ph3">`MyMethod`</ph> method, and examines the parameters.</source>
          <target state="translated">Он загружает <ph id="ph1">`MyType`</ph> из сборки, получает <ph id="ph2">&lt;xref:System.Reflection.MethodInfo&gt;</ph> для объекта <ph id="ph3">`MyMethod`</ph> метода и проверяет параметры.</target>       </trans-unit>
        <trans-unit id="206" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.ParameterInfo.IsIn">
          <source>The example uses the <ph id="ph1">&lt;xref:System.Reflection.ParameterInfo.IsIn%2A&gt;</ph>, <ph id="ph2">&lt;xref:System.Reflection.ParameterInfo.IsOut%2A&gt;</ph>, and <ph id="ph3">&lt;xref:System.Reflection.ParameterInfo.IsOptional%2A&gt;</ph> properties to display information about the parameters.</source>
          <target state="translated">В этом примере <ph id="ph1">&lt;xref:System.Reflection.ParameterInfo.IsIn%2A&gt;</ph>, <ph id="ph2">&lt;xref:System.Reflection.ParameterInfo.IsOut%2A&gt;</ph>, и <ph id="ph3">&lt;xref:System.Reflection.ParameterInfo.IsOptional%2A&gt;</ph> свойства для отображения сведений о параметрах.</target>       </trans-unit>
        <trans-unit id="207" translate="yes" xml:space="preserve" uid="P:System.Reflection.ParameterInfo.IsLcid">
          <source>Gets a value indicating whether this parameter is a locale identifier (lcid).</source>
          <target state="translated">Возвращает значение, указывающее, является ли этот параметр идентификатором языка локализации (lcid).</target>       </trans-unit>
        <trans-unit id="208" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.ParameterInfo.IsLcid">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph> if the parameter is a locale identifier; otherwise, <ph id="ph2">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated">Значение <ph id="ph1">&lt;see langword="true" /&gt;</ph>, если параметр является идентификатором региональных стандартов; в обратном случае — значение <ph id="ph2">&lt;see langword="false" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="209" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.ParameterInfo.IsLcid">
          <source>This method depends on an optional metadata flag.</source>
          <target state="translated">Этот метод зависит от дополнительного флага метаданных.</target>       </trans-unit>
        <trans-unit id="210" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.ParameterInfo.IsLcid">
          <source>This flag can be inserted by compilers, but the compilers are not obligated to do so.</source>
          <target state="translated">Этот флаг может быть вставлен компиляторами, но они не предназначены для этого.</target>       </trans-unit>
        <trans-unit id="211" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.ParameterInfo.IsLcid">
          <source>This method utilizes the <ph id="ph1">`Lcid`</ph> flag of the <ph id="ph2">`ParameterAttributes`</ph> enumerator.</source>
          <target state="translated">Этот метод использует <ph id="ph1">`Lcid`</ph> флаг <ph id="ph2">`ParameterAttributes`</ph> перечислителя.</target>       </trans-unit>
        <trans-unit id="212" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.ParameterInfo.IsLcid">
          <source>To get the <ph id="ph1">&lt;xref:System.Reflection.ParameterInfo&gt;</ph> array, first get the method or the constructor and then call <ph id="ph2">&lt;xref:System.Reflection.MethodBase.GetParameters%2A?displayProperty=nameWithType&gt;</ph>.</source>
          <target state="translated">Для получения <ph id="ph1">&lt;xref:System.Reflection.ParameterInfo&gt;</ph> массива, сначала нужно получить метод или конструктор и затем вызвать метод <ph id="ph2">&lt;xref:System.Reflection.MethodBase.GetParameters%2A?displayProperty=nameWithType&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="213" translate="yes" xml:space="preserve" uid="P:System.Reflection.ParameterInfo.IsOptional">
          <source>Gets a value indicating whether this parameter is optional.</source>
          <target state="translated">Возвращает значение, указывающее, является ли этот параметр необязательным.</target>       </trans-unit>
        <trans-unit id="214" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.ParameterInfo.IsOptional">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph> if the parameter is optional; otherwise, <ph id="ph2">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated">Значение <ph id="ph1">&lt;see langword="true" /&gt;</ph>, если параметр является необязательным; в противном случае — значение <ph id="ph2">&lt;see langword="false" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="215" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.ParameterInfo.IsOptional">
          <source>This method depends on an optional metadata flag.</source>
          <target state="translated">Этот метод зависит от дополнительного флага метаданных.</target>       </trans-unit>
        <trans-unit id="216" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.ParameterInfo.IsOptional">
          <source>This flag can be inserted by compilers, but the compilers are not obligated to do so.</source>
          <target state="translated">Этот флаг может быть вставлен компиляторами, но они не предназначены для этого.</target>       </trans-unit>
        <trans-unit id="217" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.ParameterInfo.IsOptional">
          <source>This method utilizes the <ph id="ph1">`Optional`</ph> flag of the <ph id="ph2">`ParameterAttributes`</ph> enumerator.</source>
          <target state="translated">Этот метод использует <ph id="ph1">`Optional`</ph> флаг <ph id="ph2">`ParameterAttributes`</ph> перечислителя.</target>       </trans-unit>
        <trans-unit id="218" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.ParameterInfo.IsOptional">
          <source>To get the <ph id="ph1">&lt;xref:System.Reflection.ParameterInfo&gt;</ph> array, first get the method and then call <ph id="ph2">&lt;xref:System.Reflection.MethodBase.GetParameters%2A?displayProperty=nameWithType&gt;</ph>.</source>
          <target state="translated">Для получения <ph id="ph1">&lt;xref:System.Reflection.ParameterInfo&gt;</ph> массива, сначала нужно получить метод и затем вызвать метод <ph id="ph2">&lt;xref:System.Reflection.MethodBase.GetParameters%2A?displayProperty=nameWithType&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="219" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.ParameterInfo.IsOptional">
          <source>The following example shows how to test method parameters for the <ph id="ph1">&lt;xref:System.Reflection.ParameterAttributes.In?displayProperty=nameWithType&gt;</ph>, <ph id="ph2">&lt;xref:System.Reflection.ParameterAttributes.Out?displayProperty=nameWithType&gt;</ph>, and <ph id="ph3">&lt;xref:System.Reflection.ParameterAttributes.Optional?displayProperty=nameWithType&gt;</ph> attributes.</source>
          <target state="translated">Приведенный ниже показано, как проверить параметры метода для <ph id="ph1">&lt;xref:System.Reflection.ParameterAttributes.In?displayProperty=nameWithType&gt;</ph>, <ph id="ph2">&lt;xref:System.Reflection.ParameterAttributes.Out?displayProperty=nameWithType&gt;</ph>, и <ph id="ph3">&lt;xref:System.Reflection.ParameterAttributes.Optional?displayProperty=nameWithType&gt;</ph> атрибуты.</target>       </trans-unit>
        <trans-unit id="220" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.ParameterInfo.IsOptional">
          <source>The example contains a <ph id="ph1">`DefineMethod`</ph> method that does the following:</source>
          <target state="translated">В примере содержится <ph id="ph1">`DefineMethod`</ph> метод, который делает следующее:</target>       </trans-unit>
        <trans-unit id="221" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.ParameterInfo.IsOptional">
          <source>Creates a dynamic assembly containing a <ph id="ph1">`MyType`</ph> type.</source>
          <target state="translated">Создает динамическую сборку, содержащую <ph id="ph1">`MyType`</ph> типа.</target>       </trans-unit>
        <trans-unit id="222" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.ParameterInfo.IsOptional">
          <source>Adds a <ph id="ph1">`MyMethod`</ph> method to <ph id="ph2">`MyType`</ph>.</source>
          <target state="translated">Добавляет <ph id="ph1">`MyMethod`</ph> метод <ph id="ph2">`MyType`</ph>.</target>       </trans-unit>
        <trans-unit id="223" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.ParameterInfo.IsOptional">
          <source><ph id="ph1">`MyMethod`</ph> has three parameters.</source>
          <target state="translated"><ph id="ph1">`MyMethod`</ph> имеет три параметра.</target>       </trans-unit>
        <trans-unit id="224" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.ParameterInfo.IsOptional">
          <source>The first parameter is defined with <ph id="ph1">&lt;xref:System.Reflection.ParameterAttributes.In?displayProperty=nameWithType&gt;</ph>, the second with <ph id="ph2">&lt;xref:System.Reflection.ParameterAttributes.Out?displayProperty=nameWithType&gt;</ph>, and the third with <ph id="ph3">&lt;xref:System.Reflection.ParameterAttributes.Optional?displayProperty=nameWithType&gt;</ph>.</source>
          <target state="translated">Первый параметр определен с <ph id="ph1">&lt;xref:System.Reflection.ParameterAttributes.In?displayProperty=nameWithType&gt;</ph>, другой — с <ph id="ph2">&lt;xref:System.Reflection.ParameterAttributes.Out?displayProperty=nameWithType&gt;</ph>, а в третьем с <ph id="ph3">&lt;xref:System.Reflection.ParameterAttributes.Optional?displayProperty=nameWithType&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="225" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.ParameterInfo.IsOptional">
          <source>Calls <ph id="ph1">&lt;xref:System.Reflection.Emit.TypeBuilder.CreateType%2A?displayProperty=nameWithType&gt;</ph> to complete the type.</source>
          <target state="translated">Вызовы <ph id="ph1">&lt;xref:System.Reflection.Emit.TypeBuilder.CreateType%2A?displayProperty=nameWithType&gt;</ph> для выполнения тип.</target>       </trans-unit>
        <trans-unit id="226" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.ParameterInfo.IsOptional">
          <source>After executing <ph id="ph1">`DefineMethod`</ph>, the example searches the assemblies that are currently loaded until it finds the dynamic assembly.</source>
          <target state="translated">После выполнения <ph id="ph1">`DefineMethod`</ph>, в примере выполняется поиск сборок, загруженных в настоящее время, пока не найдет динамической сборки.</target>       </trans-unit>
        <trans-unit id="227" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.ParameterInfo.IsOptional">
          <source>It loads <ph id="ph1">`MyType`</ph> from the assembly, gets a <ph id="ph2">&lt;xref:System.Reflection.MethodInfo&gt;</ph> object for the <ph id="ph3">`MyMethod`</ph> method, and examines the parameters.</source>
          <target state="translated">Он загружает <ph id="ph1">`MyType`</ph> из сборки, получает <ph id="ph2">&lt;xref:System.Reflection.MethodInfo&gt;</ph> для объекта <ph id="ph3">`MyMethod`</ph> метода и проверяет параметры.</target>       </trans-unit>
        <trans-unit id="228" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.ParameterInfo.IsOptional">
          <source>The example uses the <ph id="ph1">&lt;xref:System.Reflection.ParameterInfo.IsIn%2A&gt;</ph>, <ph id="ph2">&lt;xref:System.Reflection.ParameterInfo.IsOut%2A&gt;</ph>, and <ph id="ph3">&lt;xref:System.Reflection.ParameterInfo.IsOptional%2A&gt;</ph> properties to display information about the parameters.</source>
          <target state="translated">В этом примере <ph id="ph1">&lt;xref:System.Reflection.ParameterInfo.IsIn%2A&gt;</ph>, <ph id="ph2">&lt;xref:System.Reflection.ParameterInfo.IsOut%2A&gt;</ph>, и <ph id="ph3">&lt;xref:System.Reflection.ParameterInfo.IsOptional%2A&gt;</ph> свойства для отображения сведений о параметрах.</target>       </trans-unit>
        <trans-unit id="229" translate="yes" xml:space="preserve" uid="P:System.Reflection.ParameterInfo.IsOut">
          <source>Gets a value indicating whether this is an output parameter.</source>
          <target state="translated">Возвращает значение, указывающее, является ли этот параметр выходным.</target>       </trans-unit>
        <trans-unit id="230" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.ParameterInfo.IsOut">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph> if the parameter is an output parameter; otherwise, <ph id="ph2">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated">Значение <ph id="ph1">&lt;see langword="true" /&gt;</ph>, если параметр является выходным; в обратном случае — значение <ph id="ph2">&lt;see langword="false" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="231" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.ParameterInfo.IsOut">
          <source>This method depends on an optional metadata flag.</source>
          <target state="translated">Этот метод зависит от дополнительного флага метаданных.</target>       </trans-unit>
        <trans-unit id="232" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.ParameterInfo.IsOut">
          <source>This flag can be inserted by compilers, but the compilers are not obligated to do so.</source>
          <target state="translated">Этот флаг может быть вставлен компиляторами, но они не предназначены для этого.</target>       </trans-unit>
        <trans-unit id="233" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.ParameterInfo.IsOut">
          <source>This method utilizes the <ph id="ph1">`Out`</ph> flag of the <ph id="ph2">`ParameterAttributes`</ph> enumerator.</source>
          <target state="translated">Этот метод использует <ph id="ph1">`Out`</ph> флаг <ph id="ph2">`ParameterAttributes`</ph> перечислителя.</target>       </trans-unit>
        <trans-unit id="234" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.ParameterInfo.IsOut">
          <source>To get the <ph id="ph1">&lt;xref:System.Reflection.ParameterInfo&gt;</ph> array, first get the method or the constructor and then call <ph id="ph2">&lt;xref:System.Reflection.MethodBase.GetParameters%2A?displayProperty=nameWithType&gt;</ph>.</source>
          <target state="translated">Для получения <ph id="ph1">&lt;xref:System.Reflection.ParameterInfo&gt;</ph> массива, сначала нужно получить метод или конструктор и затем вызвать метод <ph id="ph2">&lt;xref:System.Reflection.MethodBase.GetParameters%2A?displayProperty=nameWithType&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="235" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.ParameterInfo.IsOut">
          <source>The following example shows how to test method parameters for the <ph id="ph1">&lt;xref:System.Reflection.ParameterAttributes.In?displayProperty=nameWithType&gt;</ph>, <ph id="ph2">&lt;xref:System.Reflection.ParameterAttributes.Out?displayProperty=nameWithType&gt;</ph>, and <ph id="ph3">&lt;xref:System.Reflection.ParameterAttributes.Optional?displayProperty=nameWithType&gt;</ph> attributes.</source>
          <target state="translated">Приведенный ниже показано, как проверить параметры метода для <ph id="ph1">&lt;xref:System.Reflection.ParameterAttributes.In?displayProperty=nameWithType&gt;</ph>, <ph id="ph2">&lt;xref:System.Reflection.ParameterAttributes.Out?displayProperty=nameWithType&gt;</ph>, и <ph id="ph3">&lt;xref:System.Reflection.ParameterAttributes.Optional?displayProperty=nameWithType&gt;</ph> атрибуты.</target>       </trans-unit>
        <trans-unit id="236" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.ParameterInfo.IsOut">
          <source>The example contains a <ph id="ph1">`DefineMethod`</ph> method that does the following:</source>
          <target state="translated">В примере содержится <ph id="ph1">`DefineMethod`</ph> метод, который делает следующее:</target>       </trans-unit>
        <trans-unit id="237" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.ParameterInfo.IsOut">
          <source>Creates a dynamic assembly containing a <ph id="ph1">`MyType`</ph> type.</source>
          <target state="translated">Создает динамическую сборку, содержащую <ph id="ph1">`MyType`</ph> типа.</target>       </trans-unit>
        <trans-unit id="238" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.ParameterInfo.IsOut">
          <source>Adds a <ph id="ph1">`MyMethod`</ph> method to <ph id="ph2">`MyType`</ph>.</source>
          <target state="translated">Добавляет <ph id="ph1">`MyMethod`</ph> метод <ph id="ph2">`MyType`</ph>.</target>       </trans-unit>
        <trans-unit id="239" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.ParameterInfo.IsOut">
          <source><ph id="ph1">`MyMethod`</ph> has three parameters.</source>
          <target state="translated"><ph id="ph1">`MyMethod`</ph> имеет три параметра.</target>       </trans-unit>
        <trans-unit id="240" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.ParameterInfo.IsOut">
          <source>The first parameter is defined with <ph id="ph1">&lt;xref:System.Reflection.ParameterAttributes.In?displayProperty=nameWithType&gt;</ph>, the second with <ph id="ph2">&lt;xref:System.Reflection.ParameterAttributes.Out?displayProperty=nameWithType&gt;</ph>, and the third with <ph id="ph3">&lt;xref:System.Reflection.ParameterAttributes.Optional?displayProperty=nameWithType&gt;</ph>.</source>
          <target state="translated">Первый параметр определен с <ph id="ph1">&lt;xref:System.Reflection.ParameterAttributes.In?displayProperty=nameWithType&gt;</ph>, другой — с <ph id="ph2">&lt;xref:System.Reflection.ParameterAttributes.Out?displayProperty=nameWithType&gt;</ph>, а в третьем с <ph id="ph3">&lt;xref:System.Reflection.ParameterAttributes.Optional?displayProperty=nameWithType&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="241" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.ParameterInfo.IsOut">
          <source>Calls <ph id="ph1">&lt;xref:System.Reflection.Emit.TypeBuilder.CreateType%2A?displayProperty=nameWithType&gt;</ph> to complete the type.</source>
          <target state="translated">Вызовы <ph id="ph1">&lt;xref:System.Reflection.Emit.TypeBuilder.CreateType%2A?displayProperty=nameWithType&gt;</ph> для выполнения тип.</target>       </trans-unit>
        <trans-unit id="242" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.ParameterInfo.IsOut">
          <source>After executing <ph id="ph1">`DefineMethod`</ph>, the example searches the assemblies that are currently loaded until it finds the dynamic assembly.</source>
          <target state="translated">После выполнения <ph id="ph1">`DefineMethod`</ph>, в примере выполняется поиск сборок, загруженных в настоящее время, пока не найдет динамической сборки.</target>       </trans-unit>
        <trans-unit id="243" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.ParameterInfo.IsOut">
          <source>It loads <ph id="ph1">`MyType`</ph> from the assembly, gets a <ph id="ph2">&lt;xref:System.Reflection.MethodInfo&gt;</ph> object for the <ph id="ph3">`MyMethod`</ph> method, and examines the parameters.</source>
          <target state="translated">Он загружает <ph id="ph1">`MyType`</ph> из сборки, получает <ph id="ph2">&lt;xref:System.Reflection.MethodInfo&gt;</ph> для объекта <ph id="ph3">`MyMethod`</ph> метода и проверяет параметры.</target>       </trans-unit>
        <trans-unit id="244" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.ParameterInfo.IsOut">
          <source>The example uses the <ph id="ph1">&lt;xref:System.Reflection.ParameterInfo.IsIn%2A&gt;</ph>, <ph id="ph2">&lt;xref:System.Reflection.ParameterInfo.IsOut%2A&gt;</ph>, and <ph id="ph3">&lt;xref:System.Reflection.ParameterInfo.IsOptional%2A&gt;</ph> properties to display information about the parameters.</source>
          <target state="translated">В этом примере <ph id="ph1">&lt;xref:System.Reflection.ParameterInfo.IsIn%2A&gt;</ph>, <ph id="ph2">&lt;xref:System.Reflection.ParameterInfo.IsOut%2A&gt;</ph>, и <ph id="ph3">&lt;xref:System.Reflection.ParameterInfo.IsOptional%2A&gt;</ph> свойства для отображения сведений о параметрах.</target>       </trans-unit>
        <trans-unit id="245" translate="yes" xml:space="preserve" uid="P:System.Reflection.ParameterInfo.IsRetval">
          <source>Gets a value indicating whether this is a <ph id="ph1">&lt;see langword="Retval" /&gt;</ph> parameter.</source>
          <target state="translated">Получает значение, показывающее, является ли этот параметр параметром <ph id="ph1">&lt;see langword="Retval" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="246" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.ParameterInfo.IsRetval">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph> if the parameter is a <ph id="ph2">&lt;see langword="Retval" /&gt;</ph>; otherwise, <ph id="ph3">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated">Значение <ph id="ph1">&lt;see langword="true" /&gt;</ph>, если параметр является значением <ph id="ph2">&lt;see langword="Retval" /&gt;</ph>; в обратном случае — значение <ph id="ph3">&lt;see langword="false" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="247" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.ParameterInfo.IsRetval">
          <source>This method depends on an optional metadata flag.</source>
          <target state="translated">Этот метод зависит от дополнительного флага метаданных.</target>       </trans-unit>
        <trans-unit id="248" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.ParameterInfo.IsRetval">
          <source>This flag can be inserted by compilers, but the compilers are not obligated to do so.</source>
          <target state="translated">Этот флаг может быть вставлен компиляторами, но они не предназначены для этого.</target>       </trans-unit>
        <trans-unit id="249" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.ParameterInfo.IsRetval">
          <source>This method utilizes the <ph id="ph1">`Retval`</ph> flag of the <ph id="ph2">`ParameterAttributes`</ph> enumerator.</source>
          <target state="translated">Этот метод использует <ph id="ph1">`Retval`</ph> флаг <ph id="ph2">`ParameterAttributes`</ph> перечислителя.</target>       </trans-unit>
        <trans-unit id="250" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.ParameterInfo.IsRetval">
          <source>To get the <ph id="ph1">&lt;xref:System.Reflection.ParameterInfo&gt;</ph> array, first get the method or the constructor and then call <ph id="ph2">&lt;xref:System.Reflection.MethodBase.GetParameters%2A?displayProperty=nameWithType&gt;</ph>.</source>
          <target state="translated">Для получения <ph id="ph1">&lt;xref:System.Reflection.ParameterInfo&gt;</ph> массива, сначала нужно получить метод или конструктор и затем вызвать метод <ph id="ph2">&lt;xref:System.Reflection.MethodBase.GetParameters%2A?displayProperty=nameWithType&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="251" translate="yes" xml:space="preserve" uid="P:System.Reflection.ParameterInfo.Member">
          <source>Gets a value indicating the member in which the parameter is implemented.</source>
          <target state="translated">Возвращает значение, указывающее член, в котором реализован данный параметр.</target>       </trans-unit>
        <trans-unit id="252" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.ParameterInfo.Member">
          <source>The member which implanted the parameter represented by this <ph id="ph1">&lt;see cref="T:System.Reflection.ParameterInfo" /&gt;</ph>.</source>
          <target state="translated">Элемент, вставивший параметр, который представлен этим объектом <ph id="ph1">&lt;see cref="T:System.Reflection.ParameterInfo" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="253" translate="yes" xml:space="preserve" uid="F:System.Reflection.ParameterInfo.MemberImpl">
          <source>The member in which the field is implemented.</source>
          <target state="translated">Член, в котором реализовано данное поле.</target>       </trans-unit>
        <trans-unit id="254" translate="yes" xml:space="preserve" extradata="MT" uid="F:System.Reflection.ParameterInfo.MemberImpl">
          <source>This field is intended only for users who are deriving classes from <ph id="ph1">`ParameterInfo`</ph>.</source>
          <target state="translated">Это поле предназначено только для пользователей, которые наследование классов из <ph id="ph1">`ParameterInfo`</ph>.</target>       </trans-unit>
        <trans-unit id="255" translate="yes" xml:space="preserve" extradata="MT" uid="F:System.Reflection.ParameterInfo.MemberImpl">
          <source>Typical access to the parameter name is through the <ph id="ph1">&lt;xref:System.Reflection.ParameterInfo.Member%2A&gt;</ph>.</source>
          <target state="translated">Обычно доступ к имени параметра осуществляется через <ph id="ph1">&lt;xref:System.Reflection.ParameterInfo.Member%2A&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="256" translate="yes" xml:space="preserve" uid="P:System.Reflection.ParameterInfo.MetadataToken">
          <source>Gets a value that identifies this parameter in metadata.</source>
          <target state="translated">Возвращает значение, определяющее этот параметр в метаданных.</target>       </trans-unit>
        <trans-unit id="257" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.ParameterInfo.MetadataToken">
          <source>A value which, in combination with the module, uniquely identifies this parameter in metadata.</source>
          <target state="translated">Свойство, которое в сочетании с модулем уникально идентифицирует этот параметр в метаданных.</target>       </trans-unit>
        <trans-unit id="258" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.ParameterInfo.MetadataToken">
          <source>To get the module, use the <ph id="ph1">&lt;xref:System.Reflection.MemberInfo.Module%2A&gt;</ph> property of the member that defines this parameter.</source>
          <target state="translated">Для получения модуля, используйте <ph id="ph1">&lt;xref:System.Reflection.MemberInfo.Module%2A&gt;</ph> свойство элемента, который определяет этот параметр.</target>       </trans-unit>
        <trans-unit id="259" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.ParameterInfo.MetadataToken">
          <source>The tokens obtained using this property can be passed to the unmanaged Reflection API.</source>
          <target state="translated">Маркеры, полученные с помощью этого свойства может быть передан на неуправляемый интерфейс API отражения.</target>       </trans-unit>
        <trans-unit id="260" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.ParameterInfo.MetadataToken">
          <source>For more information, please see <bpt id="p1">[</bpt>Unmanaged Reflection API<ept id="p1">](http://msdn.microsoft.com/library/0c5bb9de-0cf6-438d-ba47-134e6c775fb8)</ept>.</source>
          <target state="translated">Дополнительные сведения см. в разделе <bpt id="p1">[</bpt>неуправляемый интерфейс API отражения<ept id="p1">](http://msdn.microsoft.com/library/0c5bb9de-0cf6-438d-ba47-134e6c775fb8)</ept>.</target>       </trans-unit>
        <trans-unit id="261" translate="yes" xml:space="preserve" uid="P:System.Reflection.ParameterInfo.Name">
          <source>Gets the name of the parameter.</source>
          <target state="translated">Возвращает имя параметра.</target>       </trans-unit>
        <trans-unit id="262" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.ParameterInfo.Name">
          <source>The simple name of this parameter.</source>
          <target state="translated">Простое имя параметра.</target>       </trans-unit>
        <trans-unit id="263" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.ParameterInfo.Name">
          <source>This property utilizes the protected <ph id="ph1">&lt;xref:System.Reflection.ParameterInfo.NameImpl&gt;</ph> field, and depends on an optional metadata flag that might not be available in all compilers.</source>
          <target state="translated">Это свойство используется защищенный <ph id="ph1">&lt;xref:System.Reflection.ParameterInfo.NameImpl&gt;</ph> поля и зависит от дополнительного флага метаданных, могут быть недоступны во всех компиляторах.</target>       </trans-unit>
        <trans-unit id="264" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.ParameterInfo.Name">
          <source>To get the <ph id="ph1">&lt;xref:System.Reflection.ParameterInfo&gt;</ph> array, first get the method or the constructor and then call the <ph id="ph2">&lt;xref:System.Reflection.MethodBase.GetParameters%2A?displayProperty=nameWithType&gt;</ph> method.</source>
          <target state="translated">Для получения <ph id="ph1">&lt;xref:System.Reflection.ParameterInfo&gt;</ph> массива, сначала нужно получить метод или конструктор и затем вызвать <ph id="ph2">&lt;xref:System.Reflection.MethodBase.GetParameters%2A?displayProperty=nameWithType&gt;</ph> метод.</target>       </trans-unit>
        <trans-unit id="265" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.ParameterInfo.Name">
          <source>If this <ph id="ph1">&lt;xref:System.Reflection.ParameterInfo&gt;</ph> represents a return value (that is, if it was obtained by using the <ph id="ph2">&lt;xref:System.Reflection.MethodInfo.ReturnParameter%2A?displayProperty=nameWithType&gt;</ph> property), this property will be <ph id="ph3">`null`</ph>.</source>
          <target state="translated">Если этот <ph id="ph1">&lt;xref:System.Reflection.ParameterInfo&gt;</ph> представляет возвращаемое значение (то есть, в том случае, если они были получены с помощью <ph id="ph2">&lt;xref:System.Reflection.MethodInfo.ReturnParameter%2A?displayProperty=nameWithType&gt;</ph> свойства), значение этого свойства будет <ph id="ph3">`null`</ph>.</target>       </trans-unit>
        <trans-unit id="266" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.ParameterInfo.Name">
          <source>The following example shows how to get <ph id="ph1">&lt;xref:System.Reflection.ParameterInfo&gt;</ph> objects for the parameters of a method, and then use the <ph id="ph2">&lt;xref:System.Reflection.ParameterInfo.Name%2A&gt;</ph> property to obtain the parameter names.</source>
          <target state="translated">Следующий пример показывает способ получения <ph id="ph1">&lt;xref:System.Reflection.ParameterInfo&gt;</ph> объектов для параметров метода, а затем использовать <ph id="ph2">&lt;xref:System.Reflection.ParameterInfo.Name%2A&gt;</ph> , чтобы получить имена параметров.</target>       </trans-unit>
        <trans-unit id="267" translate="yes" xml:space="preserve" uid="F:System.Reflection.ParameterInfo.NameImpl">
          <source>The name of the parameter.</source>
          <target state="translated">Имя параметра.</target>       </trans-unit>
        <trans-unit id="268" translate="yes" xml:space="preserve" extradata="MT" uid="F:System.Reflection.ParameterInfo.NameImpl">
          <source>This field is intended only for users who are deriving classes from <ph id="ph1">`ParameterInfo`</ph>.</source>
          <target state="translated">Это поле предназначено только для пользователей, которые наследование классов из <ph id="ph1">`ParameterInfo`</ph>.</target>       </trans-unit>
        <trans-unit id="269" translate="yes" xml:space="preserve" extradata="MT" uid="F:System.Reflection.ParameterInfo.NameImpl">
          <source>Typical access to the parameter name is through the <ph id="ph1">&lt;xref:System.Reflection.ParameterInfo.Name%2A&gt;</ph>.</source>
          <target state="translated">Обычно доступ к имени параметра осуществляется через <ph id="ph1">&lt;xref:System.Reflection.ParameterInfo.Name%2A&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="270" translate="yes" xml:space="preserve" uid="P:System.Reflection.ParameterInfo.ParameterType">
          <source>Gets the <ph id="ph1">&lt;see langword="Type" /&gt;</ph> of this parameter.</source>
          <target state="translated">Получает тип <ph id="ph1">&lt;see langword="Type" /&gt;</ph> данного параметра.</target>       </trans-unit>
        <trans-unit id="271" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.ParameterInfo.ParameterType">
          <source>The <ph id="ph1">&lt;see langword="Type" /&gt;</ph> object that represents the <ph id="ph2">&lt;see langword="Type" /&gt;</ph> of this parameter.</source>
          <target state="translated">Объект <ph id="ph1">&lt;see langword="Type" /&gt;</ph>, который представляет тип <ph id="ph2">&lt;see langword="Type" /&gt;</ph> данного параметра.</target>       </trans-unit>
        <trans-unit id="272" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.ParameterInfo.ParameterType">
          <source>This method depends on an optional metadata and might not be available in all compilers.</source>
          <target state="translated">Этот метод зависит от дополнительных метаданных и не могут быть доступны во всех компиляторах.</target>       </trans-unit>
        <trans-unit id="273" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.ParameterInfo.ParameterType">
          <source>To get the <ph id="ph1">&lt;xref:System.Reflection.ParameterInfo&gt;</ph> array, first get the method or the constructor and then call <ph id="ph2">&lt;xref:System.Reflection.MethodBase.GetParameters%2A?displayProperty=nameWithType&gt;</ph>.</source>
          <target state="translated">Для получения <ph id="ph1">&lt;xref:System.Reflection.ParameterInfo&gt;</ph> массива, сначала нужно получить метод или конструктор и затем вызвать метод <ph id="ph2">&lt;xref:System.Reflection.MethodBase.GetParameters%2A?displayProperty=nameWithType&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="274" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.ParameterInfo.ParameterType">
          <source>The following example shows how to get <ph id="ph1">&lt;xref:System.Reflection.ParameterInfo&gt;</ph> objects for the parameters of a method, and then use the <ph id="ph2">&lt;xref:System.Reflection.ParameterInfo.ParameterType%2A&gt;</ph> property to display the type of each parameter.</source>
          <target state="translated">Следующий пример показывает способ получения <ph id="ph1">&lt;xref:System.Reflection.ParameterInfo&gt;</ph> объектов для параметров метода, а затем использовать <ph id="ph2">&lt;xref:System.Reflection.ParameterInfo.ParameterType%2A&gt;</ph> свойство для отображения тип каждого параметра.</target>       </trans-unit>
        <trans-unit id="275" translate="yes" xml:space="preserve" uid="P:System.Reflection.ParameterInfo.Position">
          <source>Gets the zero-based position of the parameter in the formal parameter list.</source>
          <target state="translated">Получает отсчитываемую от нуля позицию параметра в списке формальных параметров.</target>       </trans-unit>
        <trans-unit id="276" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.ParameterInfo.Position">
          <source>An integer representing the position this parameter occupies in the parameter list.</source>
          <target state="translated">Целое число, представляющее позицию, которую этот параметр занимает в списке параметров.</target>       </trans-unit>
        <trans-unit id="277" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.ParameterInfo.Position">
          <source>Only parameters in the method signature (that is, in the formal parameter list) are considered when calculating the position.</source>
          <target state="translated">Только параметры в сигнатуре метода (то есть в списке формальных параметров) учитываются при вычислении позиции.</target>       </trans-unit>
        <trans-unit id="278" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.ParameterInfo.Position">
          <source>For instance methods, the hidden parameter that represents <ph id="ph1">`this`</ph> (<ph id="ph2">`Me`</ph> in Visual Basic) is not counted.</source>
          <target state="translated">Например, методы, скрытый параметр, который представляет <ph id="ph1">`this`</ph> (<ph id="ph2">`Me`</ph> в Visual Basic), не учитывается.</target>       </trans-unit>
        <trans-unit id="279" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.ParameterInfo.Position">
          <source>This method utilizes the <ph id="ph1">&lt;xref:System.Reflection.ParameterInfo.PositionImpl&gt;</ph> method.</source>
          <target state="translated">Этот метод использует <ph id="ph1">&lt;xref:System.Reflection.ParameterInfo.PositionImpl&gt;</ph> метод.</target>       </trans-unit>
        <trans-unit id="280" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.ParameterInfo.Position">
          <source>To get the <ph id="ph1">&lt;xref:System.Reflection.ParameterInfo&gt;</ph> array, first get the method or the constructor and then call <ph id="ph2">&lt;xref:System.Reflection.MethodBase.GetParameters%2A?displayProperty=nameWithType&gt;</ph>.</source>
          <target state="translated">Для получения <ph id="ph1">&lt;xref:System.Reflection.ParameterInfo&gt;</ph> массива, сначала нужно получить метод или конструктор и затем вызвать метод <ph id="ph2">&lt;xref:System.Reflection.MethodBase.GetParameters%2A?displayProperty=nameWithType&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="281" translate="yes" xml:space="preserve" uid="F:System.Reflection.ParameterInfo.PositionImpl">
          <source>The zero-based position of the parameter in the parameter list.</source>
          <target state="translated">Отсчитываемая от нуля позиция параметра в списке параметров.</target>       </trans-unit>
        <trans-unit id="282" translate="yes" xml:space="preserve" extradata="MT" uid="F:System.Reflection.ParameterInfo.PositionImpl">
          <source>This field is intended only for users who are deriving classes from <ph id="ph1">`ParameterInfo`</ph>.</source>
          <target state="translated">Это поле предназначено только для пользователей, которые наследование классов из <ph id="ph1">`ParameterInfo`</ph>.</target>       </trans-unit>
        <trans-unit id="283" translate="yes" xml:space="preserve" extradata="MT" uid="F:System.Reflection.ParameterInfo.PositionImpl">
          <source>Typical access to the name of the parameter is through <ph id="ph1">&lt;xref:System.Reflection.ParameterInfo.Position%2A&gt;</ph>.</source>
          <target state="translated">Обычно доступ к имени параметра осуществляется через <ph id="ph1">&lt;xref:System.Reflection.ParameterInfo.Position%2A&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="284" translate="yes" xml:space="preserve" uid="P:System.Reflection.ParameterInfo.RawDefaultValue">
          <source>Gets a value indicating the default value if the parameter has a default value.</source>
          <target state="translated">Возвращает значение по умолчанию, если оно задано для параметра.</target>       </trans-unit>
        <trans-unit id="285" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.ParameterInfo.RawDefaultValue">
          <source>The default value of the parameter, or <ph id="ph1">&lt;see cref="F:System.DBNull.Value" /&gt;</ph> if the parameter has no default value.</source>
          <target state="translated">Значение параметра по умолчанию или значение <ph id="ph1">&lt;see cref="F:System.DBNull.Value" /&gt;</ph>, если параметр не имеет значения по умолчанию.</target>       </trans-unit>
        <trans-unit id="286" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.ParameterInfo.RawDefaultValue">
          <source>This property can be used in both the execution context and the reflection-only context.</source>
          <target state="translated">Это свойство может использоваться в контекст выполнения и контекст только для отражения.</target>       </trans-unit>
        <trans-unit id="287" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.ParameterInfo.RawDefaultValue">
          <source>The default value is used when an actual value is not specified in the method call.</source>
          <target state="translated">Значение по умолчанию используется, если фактическое значение не указано в вызове метода.</target>       </trans-unit>
        <trans-unit id="288" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.ParameterInfo.RawDefaultValue">
          <source>A parameter can have a default value that is <ph id="ph1">`null`</ph>.</source>
          <target state="translated">Параметр может иметь значение по умолчанию, которое является <ph id="ph1">`null`</ph>.</target>       </trans-unit>
        <trans-unit id="289" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.ParameterInfo.RawDefaultValue">
          <source>This is distinct from the case where a default value is not defined.</source>
          <target state="translated">Это отличается от случая, когда не определено значение по умолчанию.</target>       </trans-unit>
        <trans-unit id="290" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.ParameterInfo.RawDefaultValue">
          <source>To get the <ph id="ph1">&lt;xref:System.Reflection.ParameterInfo&gt;</ph> array, first get the method or the constructor and then call the <ph id="ph2">&lt;xref:System.Reflection.MethodBase.GetParameters%2A?displayProperty=nameWithType&gt;</ph> method.</source>
          <target state="translated">Для получения <ph id="ph1">&lt;xref:System.Reflection.ParameterInfo&gt;</ph> массива, сначала нужно получить метод или конструктор и затем вызвать <ph id="ph2">&lt;xref:System.Reflection.MethodBase.GetParameters%2A?displayProperty=nameWithType&gt;</ph> метод.</target>       </trans-unit>
        <trans-unit id="291" translate="yes" xml:space="preserve" uid="M:System.Reflection.ParameterInfo.System#Runtime#InteropServices#_ParameterInfo#GetIDsOfNames(System.Guid@,System.IntPtr,System.UInt32,System.UInt32,System.IntPtr)">
          <source>Reserved for future use.</source>
          <target state="translated">Зарезервировано для будущего использования.</target>       </trans-unit>
        <trans-unit id="292" translate="yes" xml:space="preserve" uid="M:System.Reflection.ParameterInfo.System#Runtime#InteropServices#_ParameterInfo#GetIDsOfNames(System.Guid@,System.IntPtr,System.UInt32,System.UInt32,System.IntPtr)">
          <source>Must be IID_NULL.</source>
          <target state="translated">Должно быть равным IID_NULL.</target>       </trans-unit>
        <trans-unit id="293" translate="yes" xml:space="preserve" uid="M:System.Reflection.ParameterInfo.System#Runtime#InteropServices#_ParameterInfo#GetIDsOfNames(System.Guid@,System.IntPtr,System.UInt32,System.UInt32,System.IntPtr)">
          <source>Passed-in array of names to be mapped.</source>
          <target state="translated">Переданный массив имен, которые необходимо сопоставить.</target>       </trans-unit>
        <trans-unit id="294" translate="yes" xml:space="preserve" uid="M:System.Reflection.ParameterInfo.System#Runtime#InteropServices#_ParameterInfo#GetIDsOfNames(System.Guid@,System.IntPtr,System.UInt32,System.UInt32,System.IntPtr)">
          <source>Count of the names to be mapped.</source>
          <target state="translated">Количество сопоставляемых имен.</target>       </trans-unit>
        <trans-unit id="295" translate="yes" xml:space="preserve" uid="M:System.Reflection.ParameterInfo.System#Runtime#InteropServices#_ParameterInfo#GetIDsOfNames(System.Guid@,System.IntPtr,System.UInt32,System.UInt32,System.IntPtr)">
          <source>The locale context in which to interpret the names.</source>
          <target state="translated">Контекст языкового стандарта для интерпретации имен.</target>       </trans-unit>
        <trans-unit id="296" translate="yes" xml:space="preserve" uid="M:System.Reflection.ParameterInfo.System#Runtime#InteropServices#_ParameterInfo#GetIDsOfNames(System.Guid@,System.IntPtr,System.UInt32,System.UInt32,System.IntPtr)">
          <source>Caller-allocated array which receives the IDs corresponding to the names.</source>
          <target state="translated">Массив, зарезервированный вызывающим объектом, куда помещаются идентификаторы, соответствующие именам.</target>       </trans-unit>
        <trans-unit id="297" translate="yes" xml:space="preserve" uid="M:System.Reflection.ParameterInfo.System#Runtime#InteropServices#_ParameterInfo#GetIDsOfNames(System.Guid@,System.IntPtr,System.UInt32,System.UInt32,System.IntPtr)">
          <source>Maps a set of names to a corresponding set of dispatch identifiers.</source>
          <target state="translated">Сопоставляет набор имен соответствующему набору идентификаторов диспетчеризации.</target>       </trans-unit>
        <trans-unit id="298" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.ParameterInfo.System#Runtime#InteropServices#_ParameterInfo#GetIDsOfNames(System.Guid@,System.IntPtr,System.UInt32,System.UInt32,System.IntPtr)">
          <source>This method is for access to managed classes from unmanaged code, and should not be called from managed code.</source>
          <target state="translated">Этот метод предназначен для обеспечения доступа к управляемым классам из неуправляемого кода и не должен вызываться из управляемого кода.</target>       </trans-unit>
        <trans-unit id="299" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.ParameterInfo.System#Runtime#InteropServices#_ParameterInfo#GetIDsOfNames(System.Guid@,System.IntPtr,System.UInt32,System.UInt32,System.IntPtr)">
          <source>For more information about <ph id="ph1">`IDispatch::GetIDsOfNames`</ph>, see the MSDN Library.</source>
          <target state="translated">Дополнительные сведения о <ph id="ph1">`IDispatch::GetIDsOfNames`</ph>, см. в библиотеке MSDN.</target>       </trans-unit>
        <trans-unit id="300" translate="yes" xml:space="preserve" uid="M:System.Reflection.ParameterInfo.System#Runtime#InteropServices#_ParameterInfo#GetIDsOfNames(System.Guid@,System.IntPtr,System.UInt32,System.UInt32,System.IntPtr)">
          <source>Late-bound access using the COM <bpt id="p1">&lt;c&gt;</bpt>IDispatch<ept id="p1">&lt;/c&gt;</ept> interface is not supported.</source>
          <target state="translated">Доступ с поздним связыванием с помощью COM-интерфейса <bpt id="p1">&lt;c&gt;</bpt>IDispatch<ept id="p1">&lt;/c&gt;</ept> не поддерживается.</target>       </trans-unit>
        <trans-unit id="301" translate="yes" xml:space="preserve" uid="M:System.Reflection.ParameterInfo.System#Runtime#InteropServices#_ParameterInfo#GetTypeInfo(System.UInt32,System.UInt32,System.IntPtr)">
          <source>The type information to return.</source>
          <target state="translated">Возвращаемые сведения о типе.</target>       </trans-unit>
        <trans-unit id="302" translate="yes" xml:space="preserve" uid="M:System.Reflection.ParameterInfo.System#Runtime#InteropServices#_ParameterInfo#GetTypeInfo(System.UInt32,System.UInt32,System.IntPtr)">
          <source>The locale identifier for the type information.</source>
          <target state="translated">Идентификатор языкового стандарта для сведений о типе.</target>       </trans-unit>
        <trans-unit id="303" translate="yes" xml:space="preserve" uid="M:System.Reflection.ParameterInfo.System#Runtime#InteropServices#_ParameterInfo#GetTypeInfo(System.UInt32,System.UInt32,System.IntPtr)">
          <source>Receives a pointer to the requested type information object.</source>
          <target state="translated">Получает указатель на объект с запрошенными сведениями о типе.</target>       </trans-unit>
        <trans-unit id="304" translate="yes" xml:space="preserve" uid="M:System.Reflection.ParameterInfo.System#Runtime#InteropServices#_ParameterInfo#GetTypeInfo(System.UInt32,System.UInt32,System.IntPtr)">
          <source>Retrieves the type information for an object, which can then be used to get the type information for an interface.</source>
          <target state="translated">Возвращает сведения о типе объекта, которые затем могут использоваться для получения сведений о типе интерфейса.</target>       </trans-unit>
        <trans-unit id="305" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.ParameterInfo.System#Runtime#InteropServices#_ParameterInfo#GetTypeInfo(System.UInt32,System.UInt32,System.IntPtr)">
          <source>This method is for access to managed classes from unmanaged code, and should not be called from managed code.</source>
          <target state="translated">Этот метод предназначен для обеспечения доступа к управляемым классам из неуправляемого кода и не должен вызываться из управляемого кода.</target>       </trans-unit>
        <trans-unit id="306" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.ParameterInfo.System#Runtime#InteropServices#_ParameterInfo#GetTypeInfo(System.UInt32,System.UInt32,System.IntPtr)">
          <source>For more information about <ph id="ph1">`IDispatch::GetTypeInfo`</ph>, see the MSDN Library.</source>
          <target state="translated">Дополнительные сведения о <ph id="ph1">`IDispatch::GetTypeInfo`</ph>, см. в библиотеке MSDN.</target>       </trans-unit>
        <trans-unit id="307" translate="yes" xml:space="preserve" uid="M:System.Reflection.ParameterInfo.System#Runtime#InteropServices#_ParameterInfo#GetTypeInfo(System.UInt32,System.UInt32,System.IntPtr)">
          <source>Late-bound access using the COM <bpt id="p1">&lt;c&gt;</bpt>IDispatch<ept id="p1">&lt;/c&gt;</ept> interface is not supported.</source>
          <target state="translated">Доступ с поздним связыванием с помощью COM-интерфейса <bpt id="p1">&lt;c&gt;</bpt>IDispatch<ept id="p1">&lt;/c&gt;</ept> не поддерживается.</target>       </trans-unit>
        <trans-unit id="308" translate="yes" xml:space="preserve" uid="M:System.Reflection.ParameterInfo.System#Runtime#InteropServices#_ParameterInfo#GetTypeInfoCount(System.UInt32@)">
          <source>Points to a location that receives the number of type information interfaces provided by the object.</source>
          <target state="translated">Указатель, по которому записывается число предоставляемых объектом интерфейсов, предназначенных для получения сведений о типе.</target>       </trans-unit>
        <trans-unit id="309" translate="yes" xml:space="preserve" uid="M:System.Reflection.ParameterInfo.System#Runtime#InteropServices#_ParameterInfo#GetTypeInfoCount(System.UInt32@)">
          <source>Retrieves the number of type information interfaces that an object provides (either 0 or 1).</source>
          <target state="translated">Возвращает количество предоставляемых объектом интерфейсов для доступа к сведениям о типе (0 или 1).</target>       </trans-unit>
        <trans-unit id="310" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.ParameterInfo.System#Runtime#InteropServices#_ParameterInfo#GetTypeInfoCount(System.UInt32@)">
          <source>This method is for access to managed classes from unmanaged code, and should not be called from managed code.</source>
          <target state="translated">Этот метод предназначен для обеспечения доступа к управляемым классам из неуправляемого кода и не должен вызываться из управляемого кода.</target>       </trans-unit>
        <trans-unit id="311" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.ParameterInfo.System#Runtime#InteropServices#_ParameterInfo#GetTypeInfoCount(System.UInt32@)">
          <source>For more information about <ph id="ph1">`IDispatch::GetTypeInfoCount`</ph>, see the MSDN Library.</source>
          <target state="translated">Дополнительные сведения о <ph id="ph1">`IDispatch::GetTypeInfoCount`</ph>, см. в библиотеке MSDN.</target>       </trans-unit>
        <trans-unit id="312" translate="yes" xml:space="preserve" uid="M:System.Reflection.ParameterInfo.System#Runtime#InteropServices#_ParameterInfo#GetTypeInfoCount(System.UInt32@)">
          <source>Late-bound access using the COM <bpt id="p1">&lt;c&gt;</bpt>IDispatch<ept id="p1">&lt;/c&gt;</ept> interface is not supported.</source>
          <target state="translated">Доступ с поздним связыванием с помощью COM-интерфейса <bpt id="p1">&lt;c&gt;</bpt>IDispatch<ept id="p1">&lt;/c&gt;</ept> не поддерживается.</target>       </trans-unit>
        <trans-unit id="313" translate="yes" xml:space="preserve" uid="M:System.Reflection.ParameterInfo.System#Runtime#InteropServices#_ParameterInfo#Invoke(System.UInt32,System.Guid@,System.UInt32,System.Int16,System.IntPtr,System.IntPtr,System.IntPtr,System.IntPtr)">
          <source>Identifies the member.</source>
          <target state="translated">Идентифицирует член.</target>       </trans-unit>
        <trans-unit id="314" translate="yes" xml:space="preserve" uid="M:System.Reflection.ParameterInfo.System#Runtime#InteropServices#_ParameterInfo#Invoke(System.UInt32,System.Guid@,System.UInt32,System.Int16,System.IntPtr,System.IntPtr,System.IntPtr,System.IntPtr)">
          <source>Reserved for future use.</source>
          <target state="translated">Зарезервировано для будущего использования.</target>       </trans-unit>
        <trans-unit id="315" translate="yes" xml:space="preserve" uid="M:System.Reflection.ParameterInfo.System#Runtime#InteropServices#_ParameterInfo#Invoke(System.UInt32,System.Guid@,System.UInt32,System.Int16,System.IntPtr,System.IntPtr,System.IntPtr,System.IntPtr)">
          <source>Must be IID_NULL.</source>
          <target state="translated">Должно быть равным IID_NULL.</target>       </trans-unit>
        <trans-unit id="316" translate="yes" xml:space="preserve" uid="M:System.Reflection.ParameterInfo.System#Runtime#InteropServices#_ParameterInfo#Invoke(System.UInt32,System.Guid@,System.UInt32,System.Int16,System.IntPtr,System.IntPtr,System.IntPtr,System.IntPtr)">
          <source>The locale context in which to interpret arguments.</source>
          <target state="translated">Контекст языкового стандарта, в котором следует интерпретировать аргументы.</target>       </trans-unit>
        <trans-unit id="317" translate="yes" xml:space="preserve" uid="M:System.Reflection.ParameterInfo.System#Runtime#InteropServices#_ParameterInfo#Invoke(System.UInt32,System.Guid@,System.UInt32,System.Int16,System.IntPtr,System.IntPtr,System.IntPtr,System.IntPtr)">
          <source>Flags describing the context of the call.</source>
          <target state="translated">Флаги, описывающие контекст вызова.</target>       </trans-unit>
        <trans-unit id="318" translate="yes" xml:space="preserve" uid="M:System.Reflection.ParameterInfo.System#Runtime#InteropServices#_ParameterInfo#Invoke(System.UInt32,System.Guid@,System.UInt32,System.Int16,System.IntPtr,System.IntPtr,System.IntPtr,System.IntPtr)">
          <source>Pointer to a structure containing an array of arguments, an array of argument DISPIDs for named arguments, and counts for the number of elements in the arrays.</source>
          <target state="translated">Указатель на структуру, содержащую массив аргументов, массив DISPID для именованных аргументов, а также счетчики количества элементов в массивах.</target>       </trans-unit>
        <trans-unit id="319" translate="yes" xml:space="preserve" uid="M:System.Reflection.ParameterInfo.System#Runtime#InteropServices#_ParameterInfo#Invoke(System.UInt32,System.Guid@,System.UInt32,System.Int16,System.IntPtr,System.IntPtr,System.IntPtr,System.IntPtr)">
          <source>Pointer to the location where the result is to be stored.</source>
          <target state="translated">Указатель, по которому будет сохранен результат.</target>       </trans-unit>
        <trans-unit id="320" translate="yes" xml:space="preserve" uid="M:System.Reflection.ParameterInfo.System#Runtime#InteropServices#_ParameterInfo#Invoke(System.UInt32,System.Guid@,System.UInt32,System.Int16,System.IntPtr,System.IntPtr,System.IntPtr,System.IntPtr)">
          <source>Pointer to a structure that contains exception information.</source>
          <target state="translated">Указатель на структуру, содержащую сведения об исключении.</target>       </trans-unit>
        <trans-unit id="321" translate="yes" xml:space="preserve" uid="M:System.Reflection.ParameterInfo.System#Runtime#InteropServices#_ParameterInfo#Invoke(System.UInt32,System.Guid@,System.UInt32,System.Int16,System.IntPtr,System.IntPtr,System.IntPtr,System.IntPtr)">
          <source>The index of the first argument that has an error.</source>
          <target state="translated">Индекс первого аргумента, вызвавшего ошибку.</target>       </trans-unit>
        <trans-unit id="322" translate="yes" xml:space="preserve" uid="M:System.Reflection.ParameterInfo.System#Runtime#InteropServices#_ParameterInfo#Invoke(System.UInt32,System.Guid@,System.UInt32,System.Int16,System.IntPtr,System.IntPtr,System.IntPtr,System.IntPtr)">
          <source>Provides access to properties and methods exposed by an object.</source>
          <target state="translated">Предоставляет доступ к открытым свойствам и методам объекта.</target>       </trans-unit>
        <trans-unit id="323" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.ParameterInfo.System#Runtime#InteropServices#_ParameterInfo#Invoke(System.UInt32,System.Guid@,System.UInt32,System.Int16,System.IntPtr,System.IntPtr,System.IntPtr,System.IntPtr)">
          <source>This method is for access to managed classes from unmanaged code, and should not be called from managed code.</source>
          <target state="translated">Этот метод предназначен для обеспечения доступа к управляемым классам из неуправляемого кода и не должен вызываться из управляемого кода.</target>       </trans-unit>
        <trans-unit id="324" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.ParameterInfo.System#Runtime#InteropServices#_ParameterInfo#Invoke(System.UInt32,System.Guid@,System.UInt32,System.Int16,System.IntPtr,System.IntPtr,System.IntPtr,System.IntPtr)">
          <source>For more information about <ph id="ph1">`IDispatch::Invoke`</ph>, see the MSDN Library.</source>
          <target state="translated">Дополнительные сведения о <ph id="ph1">`IDispatch::Invoke`</ph>, см. в библиотеке MSDN.</target>       </trans-unit>
        <trans-unit id="325" translate="yes" xml:space="preserve" uid="M:System.Reflection.ParameterInfo.System#Runtime#InteropServices#_ParameterInfo#Invoke(System.UInt32,System.Guid@,System.UInt32,System.Int16,System.IntPtr,System.IntPtr,System.IntPtr,System.IntPtr)">
          <source>Late-bound access using the COM <bpt id="p1">&lt;c&gt;</bpt>IDispatch<ept id="p1">&lt;/c&gt;</ept> interface is not supported.</source>
          <target state="translated">Доступ с поздним связыванием с помощью COM-интерфейса <bpt id="p1">&lt;c&gt;</bpt>IDispatch<ept id="p1">&lt;/c&gt;</ept> не поддерживается.</target>       </trans-unit>
        <trans-unit id="326" translate="yes" xml:space="preserve" uid="M:System.Reflection.ParameterInfo.ToString">
          <source>Gets the parameter type and name represented as a string.</source>
          <target state="translated">Возвращает тип и имя параметра, представленные в виде строки.</target>       </trans-unit>
        <trans-unit id="327" translate="yes" xml:space="preserve" uid="M:System.Reflection.ParameterInfo.ToString">
          <source>A string containing the type and the name of the parameter.</source>
          <target state="translated">Строка, содержащая имя типа и имя параметра.</target>       </trans-unit>
      </group>
    </body>
  </file>
</xliff>