<Type Name="PropertyInfo" FullName="System.Reflection.PropertyInfo">
  <TypeSignature Language="C#" Value="public abstract class PropertyInfo : System.Reflection.MemberInfo, System.Runtime.InteropServices._PropertyInfo" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi abstract serializable beforefieldinit PropertyInfo extends System.Reflection.MemberInfo implements class System.Runtime.InteropServices._PropertyInfo" />
  <TypeSignature Language="DocId" Value="T:System.Reflection.PropertyInfo" />
  <TypeSignature Language="VB.NET" Value="Public MustInherit Class PropertyInfo&#xA;Inherits MemberInfo&#xA;Implements _PropertyInfo" />
  <TypeSignature Language="C++ CLI" Value="public ref class PropertyInfo abstract : System::Reflection::MemberInfo, System::Runtime::InteropServices::_PropertyInfo" />
  <AssemblyInfo>
    <AssemblyName>System.Reflection</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.10.0</AssemblyVersion>
    <AssemblyVersion>4.1.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>mscorlib</AssemblyName>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>System.Runtime</AssemblyName>
    <AssemblyVersion>4.2.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.1.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Reflection.MemberInfo</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>System.Runtime.InteropServices._PropertyInfo</InterfaceName>
    </Interface>
  </Interfaces>
  <Attributes>
    <Attribute>
      <AttributeName>System.Runtime.InteropServices.ClassInterface(System.Runtime.InteropServices.ClassInterfaceType.None)</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName>System.Runtime.InteropServices.ComDefaultInterface(typeof(System.Runtime.InteropServices._PropertyInfo))</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName>System.Runtime.InteropServices.ComVisible(true)</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary><span data-ttu-id="125f0-101">Выявляет атрибуты свойства и обеспечивает доступ к его метаданным.</span><span class="sxs-lookup"><span data-stu-id="125f0-101">Discovers the attributes of a property and provides access to property metadata.</span></span></summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="125f0-102">Логически свойства являются полями.</span><span class="sxs-lookup"><span data-stu-id="125f0-102">Properties are logically the same as fields.</span></span> <span data-ttu-id="125f0-103">Свойство представляет собой именованный аспект состояния объекта, значение которого обычно доступен через `get` и `set` методы доступа.</span><span class="sxs-lookup"><span data-stu-id="125f0-103">A property is a named aspect of an object's state whose value is typically accessible through `get` and `set` accessors.</span></span> <span data-ttu-id="125f0-104">Свойства могут быть только для чтения, в этом случае процедура set не поддерживается.</span><span class="sxs-lookup"><span data-stu-id="125f0-104">Properties may be read-only, in which case a set routine is not supported.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="125f0-105">Чтобы определить, является ли свойство `static`, необходимо получить <xref:System.Reflection.MethodInfo> для `get` или `set` доступа путем вызова <xref:System.Reflection.PropertyInfo.GetGetMethod%2A> или <xref:System.Reflection.PropertyInfo.GetSetMethod%2A> метода и изучите его <xref:System.Reflection.MethodBase.IsStatic%2A> свойство.</span><span class="sxs-lookup"><span data-stu-id="125f0-105">To determine whether a property is `static`, you must obtain the <xref:System.Reflection.MethodInfo> for the `get` or `set` accessor, by calling the <xref:System.Reflection.PropertyInfo.GetGetMethod%2A> or the <xref:System.Reflection.PropertyInfo.GetSetMethod%2A> method, and examine its <xref:System.Reflection.MethodBase.IsStatic%2A> property.</span></span>  
  
 <span data-ttu-id="125f0-106">Предполагается, что несколько методов в этом классе `get` доступа и `set` методов доступа свойства имеют определенные форматы.</span><span class="sxs-lookup"><span data-stu-id="125f0-106">Several methods in this class assume that the `get` accessor and `set` accessor methods of a property have certain formats.</span></span> <span data-ttu-id="125f0-107">Подписи `get` и `set` методы должно соответствовать следующим правилам:</span><span class="sxs-lookup"><span data-stu-id="125f0-107">The signatures of the `get` and `set` methods must match the following convention:</span></span>  
  
-   <span data-ttu-id="125f0-108">Тип возвращаемого значения `get` метод и тип последнего аргумента `set` метода должны быть одинаковыми.</span><span class="sxs-lookup"><span data-stu-id="125f0-108">The return type of the `get` method and the last argument of the `set` method must be identical.</span></span> <span data-ttu-id="125f0-109">Это тип свойства.</span><span class="sxs-lookup"><span data-stu-id="125f0-109">This is the type of the property.</span></span>  
  
-   <span data-ttu-id="125f0-110">`get` И `set` методы должны иметь количество, тип и порядок индексов.</span><span class="sxs-lookup"><span data-stu-id="125f0-110">The `get` and `set` methods must have the same number, type, and order of indices.</span></span>  
  
 <span data-ttu-id="125f0-111">Если этот формат не соблюдаются, поведение `GetValue` и `SetValue` методы не определено.</span><span class="sxs-lookup"><span data-stu-id="125f0-111">If this format is not followed, the behavior of the `GetValue` and `SetValue` methods is undefined.</span></span>  
  
 <span data-ttu-id="125f0-112">Вызов <xref:System.Reflection.ICustomAttributeProvider.GetCustomAttributes%2A?displayProperty=nameWithType> на `PropertyInfo` при `inherit` параметр `GetCustomAttributes` — `true` не обрабатывает иерархию типов.</span><span class="sxs-lookup"><span data-stu-id="125f0-112">Calling <xref:System.Reflection.ICustomAttributeProvider.GetCustomAttributes%2A?displayProperty=nameWithType> on `PropertyInfo` when the `inherit` parameter of `GetCustomAttributes` is `true` does not walk the type hierarchy.</span></span> <span data-ttu-id="125f0-113">Используйте <xref:System.Attribute?displayProperty=nameWithType> для наследования пользовательских атрибутов.</span><span class="sxs-lookup"><span data-stu-id="125f0-113">Use <xref:System.Attribute?displayProperty=nameWithType> to inherit custom attributes.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="125f0-114">В этом примере показано, как использовать различные классы отражения для анализа метаданных, содержащихся в сборке.</span><span class="sxs-lookup"><span data-stu-id="125f0-114">This example shows how to use various reflection classes to analyze the metadata contained in an assembly.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="125f0-115">В этом примере создается порядка 55 000 строк с данными, которые можно перенаправить в текстовый файл в командной строке следующим образом: **example.exe > propertyinfo.txt**</span><span class="sxs-lookup"><span data-stu-id="125f0-115">This example generates about 55,000 lines of data, which you can redirect to a text file at the command prompt, as follows: **example.exe > propertyinfo.txt**</span></span>  
  
 [!code-cpp[Reflection#1](~/samples/snippets/cpp/VS_Snippets_CLR/Reflection/CPP/reflection.cpp#1)]
 [!code-csharp[Reflection#1](~/samples/snippets/csharp/VS_Snippets_CLR/Reflection/CS/Reflection.cs#1)]
 [!code-vb[Reflection#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/Reflection/VB/Reflection.vb#1)]  
  
 ]]></format>
    </remarks>
    <permission cref="F:System.Security.Permissions.SecurityAction.InheritanceDemand"><span data-ttu-id="125f0-116">для полного доверия для разработчиков производных классов.</span><span class="sxs-lookup"><span data-stu-id="125f0-116">for full trust for inheritors.</span></span> <span data-ttu-id="125f0-117">Этот класс не наследуется частично доверенным кодом.</span><span class="sxs-lookup"><span data-stu-id="125f0-117">This class cannot be inherited by partially trusted code.</span></span></permission>
    <threadsafe><span data-ttu-id="125f0-118">Данный тип потокобезопасен.</span><span class="sxs-lookup"><span data-stu-id="125f0-118">This type is thread safe.</span></span></threadsafe>
    <block subset="none" type="overrides">
      <para><span data-ttu-id="125f0-119">При наследовании от <see cref="T:System.Reflection.PropertyInfo" />, необходимо переопределить следующие члены: <see cref="M:System.Reflection.PropertyInfo.GetValue(System.Object,System.Object[])" />, <see cref="M:System.Reflection.PropertyInfo.SetValue(System.Object,System.Object,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object[],System.Globalization.CultureInfo)" />, <see cref="M:System.Reflection.PropertyInfo.GetAccessors(System.Boolean)" />, <see cref="M:System.Reflection.PropertyInfo.GetGetMethod(System.Boolean)" />, <see cref="M:System.Reflection.PropertyInfo.GetSetMethod(System.Boolean)" />, и <see cref="M:System.Reflection.PropertyInfo.GetIndexParameters" />.</span><span class="sxs-lookup"><span data-stu-id="125f0-119">When you inherit from <see cref="T:System.Reflection.PropertyInfo" />, you must override the following members: <see cref="M:System.Reflection.PropertyInfo.GetValue(System.Object,System.Object[])" />, <see cref="M:System.Reflection.PropertyInfo.SetValue(System.Object,System.Object,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object[],System.Globalization.CultureInfo)" />, <see cref="M:System.Reflection.PropertyInfo.GetAccessors(System.Boolean)" />, <see cref="M:System.Reflection.PropertyInfo.GetGetMethod(System.Boolean)" />, <see cref="M:System.Reflection.PropertyInfo.GetSetMethod(System.Boolean)" />, and <see cref="M:System.Reflection.PropertyInfo.GetIndexParameters" />.</span></span></para>
    </block>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="protected PropertyInfo ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.PropertyInfo.#ctor" />
      <MemberSignature Language="VB.NET" Value="Protected Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; PropertyInfo();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="125f0-120">Инициализирует новый экземпляр класса <see cref="T:System.Reflection.PropertyInfo" />.</span><span class="sxs-lookup"><span data-stu-id="125f0-120">Initializes a new instance of the <see cref="T:System.Reflection.PropertyInfo" /> class.</span></span></summary>
        <remarks>To be added.</remarks>
        <permission cref="T:System.Security.Permissions.ReflectionPermission"><span data-ttu-id="125f0-121">При вызове поздней привязкой, такие как <see cref="M:System.Type.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[])" />.</span><span class="sxs-lookup"><span data-stu-id="125f0-121">when invoked late-bound through mechanisms such as <see cref="M:System.Type.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[])" />.</span></span> <span data-ttu-id="125f0-122">Связанное перечисление: <see cref="F:System.Security.Permissions.ReflectionPermissionFlag.MemberAccess" />.</span><span class="sxs-lookup"><span data-stu-id="125f0-122">Associated enumeration: <see cref="F:System.Security.Permissions.ReflectionPermissionFlag.MemberAccess" />.</span></span></permission>
      </Docs>
    </Member>
    <Member MemberName="Attributes">
      <MemberSignature Language="C#" Value="public abstract System.Reflection.PropertyAttributes Attributes { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Reflection.PropertyAttributes Attributes" />
      <MemberSignature Language="DocId" Value="P:System.Reflection.PropertyInfo.Attributes" />
      <MemberSignature Language="VB.NET" Value="Public MustOverride ReadOnly Property Attributes As PropertyAttributes" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; abstract property System::Reflection::PropertyAttributes Attributes { System::Reflection::PropertyAttributes get(); };" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Runtime.InteropServices._PropertyInfo.Attributes</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Reflection</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.PropertyAttributes</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="125f0-123">Получает атрибуты данного свойства.</span><span class="sxs-lookup"><span data-stu-id="125f0-123">Gets the attributes for this property.</span></span></summary>
        <value><span data-ttu-id="125f0-124">Атрибуты данного свойства.</span><span class="sxs-lookup"><span data-stu-id="125f0-124">The attributes of this property.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="125f0-125"><xref:System.Reflection.PropertyInfo.Attributes%2A> Свойство возвращает атрибуты, связанные со свойством, представленным этим <xref:System.Reflection.PropertyInfo> объекта.</span><span class="sxs-lookup"><span data-stu-id="125f0-125">The <xref:System.Reflection.PropertyInfo.Attributes%2A> property returns the attributes associated with the property represented by this <xref:System.Reflection.PropertyInfo> object.</span></span>  <span data-ttu-id="125f0-126">Атрибуты являются главным образом модификаторы, применяемых компилятором при создании свойства; они указывают, является ли свойство свойством по умолчанию `SpecialName` свойства и т. д.</span><span class="sxs-lookup"><span data-stu-id="125f0-126">The attributes are primarily modifiers applied by a compiler when creating a property; they indicate whether a property is the default property, a `SpecialName` property, and so on.</span></span> <span data-ttu-id="125f0-127">Обратите внимание, что для почти все свойства, найденные в типы в библиотеке классов .NET Framework, значение <xref:System.Reflection.PropertyInfo.Attributes%2A> свойство <xref:System.Reflection.PropertyAttributes.None?displayProperty=nameWithType>.</span><span class="sxs-lookup"><span data-stu-id="125f0-127">Note that, for almost all properties found in types in the .NET Framework class library, the value of the <xref:System.Reflection.PropertyInfo.Attributes%2A> property is <xref:System.Reflection.PropertyAttributes.None?displayProperty=nameWithType>.</span></span>  
  
> [!TIP]
>  <span data-ttu-id="125f0-128">В большинстве случаев, возможно, нужно получить настраиваемые атрибуты, связанные со свойством.</span><span class="sxs-lookup"><span data-stu-id="125f0-128">In most cases, you probably want to retrieve the custom attributes associated with a property.</span></span> <span data-ttu-id="125f0-129">Чтобы сделать это, необходимо извлечь значение <xref:System.Reflection.MemberInfo.CustomAttributes%2A> свойства или вызов одной из перегрузок <xref:System.Reflection.MemberInfo.GetCustomAttributes%2A> метод.</span><span class="sxs-lookup"><span data-stu-id="125f0-129">To do this, retrieve the value of the <xref:System.Reflection.MemberInfo.CustomAttributes%2A> property, or call one of the overloads of the <xref:System.Reflection.MemberInfo.GetCustomAttributes%2A> method.</span></span>  
  
 <span data-ttu-id="125f0-130">Для получения <xref:System.Reflection.PropertyInfo.Attributes%2A> свойство:</span><span class="sxs-lookup"><span data-stu-id="125f0-130">To get the <xref:System.Reflection.PropertyInfo.Attributes%2A> property:</span></span>  
  
1.  <span data-ttu-id="125f0-131">Получить <xref:System.Type> , представляющий тип, к которому принадлежит свойство.</span><span class="sxs-lookup"><span data-stu-id="125f0-131">Get a <xref:System.Type> object that represents the type to which the property belongs.</span></span>  
  
2.  <span data-ttu-id="125f0-132">Получить <xref:System.Reflection.PropertyInfo> объекта путем вызова перегрузки <xref:System.Type.GetProperty%2A?displayProperty=nameWithType> метод.</span><span class="sxs-lookup"><span data-stu-id="125f0-132">Get the <xref:System.Reflection.PropertyInfo> object by calling an overload of the <xref:System.Type.GetProperty%2A?displayProperty=nameWithType> method.</span></span>  
  
3.  <span data-ttu-id="125f0-133">Получить атрибуты свойства из <xref:System.Reflection.PropertyInfo.Attributes%2A> свойство.</span><span class="sxs-lookup"><span data-stu-id="125f0-133">Retrieve the property's attributes from the <xref:System.Reflection.PropertyInfo.Attributes%2A> property.</span></span>  
  
 <span data-ttu-id="125f0-134">Можно определить атрибуты свойства для типа, созданного динамически с помощью отражения выдача путем вызова перегрузки <xref:System.Reflection.Emit.TypeBuilder.DefineProperty%2A> метод и указав новое значение для `attributes` аргумент.</span><span class="sxs-lookup"><span data-stu-id="125f0-134">You can define the attributes of a property for a type created dynamically using reflection emit by calling an overload of the <xref:System.Reflection.Emit.TypeBuilder.DefineProperty%2A> method and supplying a value for the `attributes` argument.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Reflection.MemberInfo.CustomAttributes" />
        <altmember cref="M:System.Reflection.MemberInfo.GetCustomAttributes(System.Boolean)" />
      </Docs>
    </Member>
    <Member MemberName="CanRead">
      <MemberSignature Language="C#" Value="public abstract bool CanRead { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool CanRead" />
      <MemberSignature Language="DocId" Value="P:System.Reflection.PropertyInfo.CanRead" />
      <MemberSignature Language="VB.NET" Value="Public MustOverride ReadOnly Property CanRead As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; abstract property bool CanRead { bool get(); };" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Runtime.InteropServices._PropertyInfo.CanRead</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Reflection</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="125f0-135">Получает значение, указывающее, можно ли выполнить считывание данного свойства.</span><span class="sxs-lookup"><span data-stu-id="125f0-135">Gets a value indicating whether the property can be read.</span></span></summary>
        <value>
          <span data-ttu-id="125f0-136">Значение <see langword="true" />, если свойство доступно для чтения; в противном случае — значение <see langword="false" />.</span><span class="sxs-lookup"><span data-stu-id="125f0-136"><see langword="true" /> if this property can be read; otherwise, <see langword="false" />.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="125f0-137">Если свойство не имеет `get` метод доступа, не может быть прочитан.</span><span class="sxs-lookup"><span data-stu-id="125f0-137">If the property does not have a `get` accessor, it cannot be read.</span></span>  
  
 <span data-ttu-id="125f0-138">Для получения `CanRead` свойство, сначала нужно получить класс `Type`.</span><span class="sxs-lookup"><span data-stu-id="125f0-138">To get the `CanRead` property, first get the class `Type`.</span></span> <span data-ttu-id="125f0-139">Из `Type`, получить `PropertyInfo`.</span><span class="sxs-lookup"><span data-stu-id="125f0-139">From the `Type`, get the `PropertyInfo`.</span></span> <span data-ttu-id="125f0-140">Из `PropertyInfo`, получить `CanRead` значение.</span><span class="sxs-lookup"><span data-stu-id="125f0-140">From the `PropertyInfo`, get the `CanRead` value.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="125f0-141">В следующем примере определяется двумя свойствами.</span><span class="sxs-lookup"><span data-stu-id="125f0-141">The following example defines two properties.</span></span> <span data-ttu-id="125f0-142">Первое свойство для чтения и `CanRead` свойство `true`.</span><span class="sxs-lookup"><span data-stu-id="125f0-142">The first property is readable and the `CanRead` property is `true`.</span></span> <span data-ttu-id="125f0-143">Второе свойство недоступна для чтения (нет метода get) и `CanRead` свойство `false`.</span><span class="sxs-lookup"><span data-stu-id="125f0-143">The second property is not readable (there is no get accessor), and the `CanRead` property is `false`.</span></span>  
  
 [!code-cpp[Classic PropertyInfo.CanRead Example#1](~/samples/snippets/cpp/VS_Snippets_CLR_Classic/classic PropertyInfo.CanRead Example/CPP/source.cpp#1)]
 [!code-csharp[Classic PropertyInfo.CanRead Example#1](~/samples/snippets/csharp/VS_Snippets_CLR_Classic/classic PropertyInfo.CanRead Example/CS/source.cs#1)]
 [!code-vb[Classic PropertyInfo.CanRead Example#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_Classic/classic PropertyInfo.CanRead Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="CanWrite">
      <MemberSignature Language="C#" Value="public abstract bool CanWrite { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool CanWrite" />
      <MemberSignature Language="DocId" Value="P:System.Reflection.PropertyInfo.CanWrite" />
      <MemberSignature Language="VB.NET" Value="Public MustOverride ReadOnly Property CanWrite As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; abstract property bool CanWrite { bool get(); };" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Runtime.InteropServices._PropertyInfo.CanWrite</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Reflection</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="125f0-144">Получает значение, указывающее, можно ли производить запись в данное свойство.</span><span class="sxs-lookup"><span data-stu-id="125f0-144">Gets a value indicating whether the property can be written to.</span></span></summary>
        <value>
          <span data-ttu-id="125f0-145">Значение <see langword="true" />, если свойство доступно для записи; в обратном случае — значение <see langword="false" />.</span><span class="sxs-lookup"><span data-stu-id="125f0-145"><see langword="true" /> if this property can be written to; otherwise, <see langword="false" />.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="125f0-146"><xref:System.Reflection.PropertyInfo.CanWrite%2A> Возвращает `true` Если свойство имеет `set` метод доступа, даже в том случае, если метод доступа `private`, `internal` (или `Friend` в Visual Basic), или `protected`.</span><span class="sxs-lookup"><span data-stu-id="125f0-146"><xref:System.Reflection.PropertyInfo.CanWrite%2A> returns `true` if the property has a `set` accessor, even if the accessor is `private`, `internal` (or `Friend` in Visual Basic), or `protected`.</span></span>   <span data-ttu-id="125f0-147">Если свойство не имеет `set` метод доступа, метод возвращает `false`.</span><span class="sxs-lookup"><span data-stu-id="125f0-147">If the property does not have a `set` accessor, the method returns `false`.</span></span>  
  
 <span data-ttu-id="125f0-148">Чтобы получить значение <xref:System.Reflection.PropertyInfo.CanWrite%2A> свойства:</span><span class="sxs-lookup"><span data-stu-id="125f0-148">To get the value of the <xref:System.Reflection.PropertyInfo.CanWrite%2A> property:</span></span>  
  
1.  <span data-ttu-id="125f0-149">Получить <xref:System.Type> объект типа, который содержит свойство.</span><span class="sxs-lookup"><span data-stu-id="125f0-149">Get the <xref:System.Type> object of the type that includes the property.</span></span>  
  
2.  <span data-ttu-id="125f0-150">Вызовите <xref:System.Type.GetProperty%2A?displayProperty=nameWithType> для получения <xref:System.Reflection.PropertyInfo> объект, представляющий свойство.</span><span class="sxs-lookup"><span data-stu-id="125f0-150">Call the <xref:System.Type.GetProperty%2A?displayProperty=nameWithType> to get the <xref:System.Reflection.PropertyInfo> object that represents the property.</span></span>  
  
3.  <span data-ttu-id="125f0-151">Извлечь значение <xref:System.Reflection.PropertyInfo.CanWrite%2A> свойства.</span><span class="sxs-lookup"><span data-stu-id="125f0-151">Retrieve the value of the <xref:System.Reflection.PropertyInfo.CanWrite%2A> property.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="125f0-152">В следующем примере определяется двумя свойствами.</span><span class="sxs-lookup"><span data-stu-id="125f0-152">The following example defines two properties.</span></span> <span data-ttu-id="125f0-153">Первое свойство доступен для записи и `CanWrite` свойство `true`.</span><span class="sxs-lookup"><span data-stu-id="125f0-153">The first property is writable and the `CanWrite` property is `true`.</span></span> <span data-ttu-id="125f0-154">Второе свойство недоступен для записи (имеется не `set` доступа) и `CanWrite` свойство `false`.</span><span class="sxs-lookup"><span data-stu-id="125f0-154">The second property is not writable (there is no `set` accessor), and the `CanWrite` property is `false`.</span></span>  
  
 [!code-cpp[Classic PropertyInfo.CanWrite Example#1](~/samples/snippets/cpp/VS_Snippets_CLR_Classic/classic PropertyInfo.CanWrite Example/CPP/source.cpp#1)]
 [!code-csharp[Classic PropertyInfo.CanWrite Example#1](~/samples/snippets/csharp/VS_Snippets_CLR_Classic/classic PropertyInfo.CanWrite Example/CS/source.cs#1)]
 [!code-vb[Classic PropertyInfo.CanWrite Example#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_Classic/classic PropertyInfo.CanWrite Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Equals">
      <MemberSignature Language="C#" Value="public override bool Equals (object obj);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance bool Equals(object obj) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.PropertyInfo.Equals(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function Equals (obj As Object) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override bool Equals(System::Object ^ obj);" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Runtime.InteropServices._PropertyInfo.Equals(System.Object)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Reflection</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="obj" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="obj"><span data-ttu-id="125f0-155">Объект, сравниваемый с этим экземпляром, или значение <see langword="null" />.</span><span class="sxs-lookup"><span data-stu-id="125f0-155">An object to compare with this instance, or <see langword="null" />.</span></span></param>
        <summary><span data-ttu-id="125f0-156">Возвращает значение, показывающее, равен ли экземпляр указанному объекту.</span><span class="sxs-lookup"><span data-stu-id="125f0-156">Returns a value that indicates whether this instance is equal to a specified object.</span></span></summary>
        <returns>
          <span data-ttu-id="125f0-157"><see langword="true" />, если значение параметра <paramref name="obj" /> равно типу и значению данного экземпляра; в противном случае — <see langword="false" />.</span><span class="sxs-lookup"><span data-stu-id="125f0-157"><see langword="true" /> if <paramref name="obj" /> equals the type and value of this instance; otherwise, <see langword="false" />.</span></span></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="GetAccessors">
      <AssemblyInfo>
        <AssemblyName>System.Reflection</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="125f0-158">Возвращает массив методов доступа <see langword="get" /> и <see langword="set" /> этого свойства.</span><span class="sxs-lookup"><span data-stu-id="125f0-158">Returns an array of the <see langword="get" /> and <see langword="set" /> accessors on this property.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="GetAccessors">
      <MemberSignature Language="C#" Value="public System.Reflection.MethodInfo[] GetAccessors ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Reflection.MethodInfo[] GetAccessors() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.PropertyInfo.GetAccessors" />
      <MemberSignature Language="VB.NET" Value="Public Function GetAccessors () As MethodInfo()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual cli::array &lt;System::Reflection::MethodInfo ^&gt; ^ GetAccessors();" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Runtime.InteropServices._PropertyInfo.GetAccessors</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Reflection</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.MethodInfo[]</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="125f0-159">Возвращает массив, элементы которого отражают открытые методы <see langword="get" /> и <see langword="set" /> доступа к свойству, отражаемому текущим экземпляром.</span><span class="sxs-lookup"><span data-stu-id="125f0-159">Returns an array whose elements reflect the public <see langword="get" /> and <see langword="set" /> accessors of the property reflected by the current instance.</span></span></summary>
        <returns><span data-ttu-id="125f0-160">Массив объектов <see cref="T:System.Reflection.MethodInfo" />, которые отражают открытые методы <see langword="get" /> и <see langword="set" /> доступа к свойству, отображаемому текущим экземпляром, если эти методы существуют. В противном случае этот метод возвращает массив с нулевым (0) числом элементов.</span><span class="sxs-lookup"><span data-stu-id="125f0-160">An array of <see cref="T:System.Reflection.MethodInfo" /> objects that reflect the public <see langword="get" /> and <see langword="set" /> accessors of the property reflected by the current instance, if found; otherwise, this method returns an array with zero (0) elements.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="125f0-161">Для вызова <xref:System.Reflection.PropertyInfo.GetAccessors%2A> метод:</span><span class="sxs-lookup"><span data-stu-id="125f0-161">To call the <xref:System.Reflection.PropertyInfo.GetAccessors%2A> method:</span></span>  
  
1.  <span data-ttu-id="125f0-162">Получить <xref:System.Type> объект, представляющий класс.</span><span class="sxs-lookup"><span data-stu-id="125f0-162">Get a <xref:System.Type> object that represents the class.</span></span>  
  
2.  <span data-ttu-id="125f0-163">Из <xref:System.Type> объекта, получение <xref:System.Reflection.PropertyInfo> объекта.</span><span class="sxs-lookup"><span data-stu-id="125f0-163">From the <xref:System.Type> object, get the <xref:System.Reflection.PropertyInfo> object.</span></span>  
  
3.  <span data-ttu-id="125f0-164">Из <xref:System.Reflection.PropertyInfo> , вызовите <xref:System.Reflection.PropertyInfo.GetAccessors%2A> метод.</span><span class="sxs-lookup"><span data-stu-id="125f0-164">From the <xref:System.Reflection.PropertyInfo> object, call the <xref:System.Reflection.PropertyInfo.GetAccessors%2A> method.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="125f0-165">В следующем примере извлекается открытых методов доступа `ClassWithProperty.Caption` свойства и отображает сведения о них.</span><span class="sxs-lookup"><span data-stu-id="125f0-165">The following example retrieves the public accessors of the `ClassWithProperty.Caption` property and displays information about them.</span></span> <span data-ttu-id="125f0-166">Он также вызывает метод <xref:System.Reflection.MethodBase.Invoke%2A> способ задания, чтобы задать значение свойства и метода получения извлечь значение свойства.</span><span class="sxs-lookup"><span data-stu-id="125f0-166">It also calls the <xref:System.Reflection.MethodBase.Invoke%2A> method of the setter to set the property value and of the getter to retrieve the property value.</span></span>  
  
 [!code-csharp[System.Reflection.PropertyInfo.GetAccessors#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.reflection.propertyinfo.getaccessors/cs/source.cs#1)]
 [!code-vb[System.Reflection.PropertyInfo.GetAccessors#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.reflection.propertyinfo.getaccessors/vb/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <permission cref="T:System.Security.Permissions.ReflectionPermission"><span data-ttu-id="125f0-167">При вызове поздней привязкой, такие как <see cref="M:System.Type.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[])" />.</span><span class="sxs-lookup"><span data-stu-id="125f0-167">when invoked late-bound through mechanisms such as <see cref="M:System.Type.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[])" />.</span></span> <span data-ttu-id="125f0-168">Связанное перечисление: <see cref="F:System.Security.Permissions.ReflectionPermissionFlag.MemberAccess" />.</span><span class="sxs-lookup"><span data-stu-id="125f0-168">Associated enumeration: <see cref="F:System.Security.Permissions.ReflectionPermissionFlag.MemberAccess" />.</span></span></permission>
      </Docs>
    </Member>
    <Member MemberName="GetAccessors">
      <MemberSignature Language="C#" Value="public abstract System.Reflection.MethodInfo[] GetAccessors (bool nonPublic);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Reflection.MethodInfo[] GetAccessors(bool nonPublic) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.PropertyInfo.GetAccessors(System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public MustOverride Function GetAccessors (nonPublic As Boolean) As MethodInfo()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; abstract cli::array &lt;System::Reflection::MethodInfo ^&gt; ^ GetAccessors(bool nonPublic);" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Runtime.InteropServices._PropertyInfo.GetAccessors(System.Boolean)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Reflection</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.MethodInfo[]</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="nonPublic" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="nonPublic"><span data-ttu-id="125f0-169">Указывает, должны ли возвращаться неоткрытые методы в возвращаемый массив.</span><span class="sxs-lookup"><span data-stu-id="125f0-169">Indicates whether non-public methods should be returned in the returned array.</span></span> <span data-ttu-id="125f0-170"><see langword="true" />, если неоткрытые методы должны быть включены; в противном случае — <see langword="false" />.</span><span class="sxs-lookup"><span data-stu-id="125f0-170"><see langword="true" /> if non-public methods are to be included; otherwise, <see langword="false" />.</span></span></param>
        <summary><span data-ttu-id="125f0-171">Возвращает массив, элементы которого отражают открытые и, если задано, неоткрытые методы доступа <see langword="get" /> и <see langword="set" /> к свойству, отражаемому текущим экземпляром.</span><span class="sxs-lookup"><span data-stu-id="125f0-171">Returns an array whose elements reflect the public and, if specified, non-public <see langword="get" /> and <see langword="set" /> accessors of the property reflected by the current instance.</span></span></summary>
        <returns><span data-ttu-id="125f0-172">Массив, элементы которого отражают методы доступа <see langword="get" /> и <see langword="set" /> к свойству, отражаемому текущим экземпляром.</span><span class="sxs-lookup"><span data-stu-id="125f0-172">An array whose elements reflect the <see langword="get" /> and <see langword="set" /> accessors of the property reflected by the current instance.</span></span> <span data-ttu-id="125f0-173">Если свойство <paramref name="nonPublic" /> имеет значение <see langword="true" />, этот массив содержит открытые и неоткрытые методы доступа <see langword="get" /> и <see langword="set" />.</span><span class="sxs-lookup"><span data-stu-id="125f0-173">If <paramref name="nonPublic" /> is <see langword="true" />, this array contains public and non-public <see langword="get" /> and <see langword="set" /> accessors.</span></span> <span data-ttu-id="125f0-174">Если свойство <paramref name="nonPublic" /> имеет значение <see langword="false" />, этот массив содержит только открытые методы доступа <see langword="get" /> и <see langword="set" />.</span><span class="sxs-lookup"><span data-stu-id="125f0-174">If <paramref name="nonPublic" /> is <see langword="false" />, this array contains only public <see langword="get" /> and <see langword="set" /> accessors.</span></span> <span data-ttu-id="125f0-175">Если методы доступа с указанным статусом видимости не найдены, этот метод возвращает массив с нулевым (0) числом элементов.</span><span class="sxs-lookup"><span data-stu-id="125f0-175">If no accessors with the specified visibility are found, this method returns an array with zero (0) elements.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="125f0-176">Для вызова <xref:System.Reflection.PropertyInfo.GetAccessors%2A> метод:</span><span class="sxs-lookup"><span data-stu-id="125f0-176">To call the <xref:System.Reflection.PropertyInfo.GetAccessors%2A> method:</span></span>  
  
1.  <span data-ttu-id="125f0-177">Получить <xref:System.Type> объект, представляющий класс.</span><span class="sxs-lookup"><span data-stu-id="125f0-177">Get a <xref:System.Type> object that represents the class.</span></span>  
  
2.  <span data-ttu-id="125f0-178">Из <xref:System.Type> объекта, получение <xref:System.Reflection.PropertyInfo> объекта.</span><span class="sxs-lookup"><span data-stu-id="125f0-178">From the <xref:System.Type> object, get the <xref:System.Reflection.PropertyInfo> object.</span></span>  
  
3.  <span data-ttu-id="125f0-179">Из <xref:System.Reflection.PropertyInfo> , вызовите <xref:System.Reflection.PropertyInfo.GetAccessors%2A> метод.</span><span class="sxs-lookup"><span data-stu-id="125f0-179">From the <xref:System.Reflection.PropertyInfo> object, call the <xref:System.Reflection.PropertyInfo.GetAccessors%2A> method.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="125f0-180">В следующем примере извлекается методов доступа `ClassWithProperty.Caption` свойства и отображает сведения о них.</span><span class="sxs-lookup"><span data-stu-id="125f0-180">The following example retrieves the accessors of the `ClassWithProperty.Caption` property and displays information about them.</span></span> <span data-ttu-id="125f0-181">Он также вызывает метод <xref:System.Reflection.MethodBase.Invoke%2A> способ задания, чтобы задать значение свойства и метода получения извлечь значение свойства.</span><span class="sxs-lookup"><span data-stu-id="125f0-181">It also calls the <xref:System.Reflection.MethodBase.Invoke%2A> method of the setter to set the property value and of the getter to retrieve the property value.</span></span>  
  
 [!code-csharp[Classic PropertyInfo.GetAccessors1 Example#1](~/samples/snippets/csharp/VS_Snippets_CLR_Classic/classic PropertyInfo.GetAccessors1 Example/CS/source.cs#1)]
 [!code-vb[Classic PropertyInfo.GetAccessors1 Example#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_Classic/classic PropertyInfo.GetAccessors1 Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <permission cref="T:System.Security.Permissions.ReflectionPermission"><span data-ttu-id="125f0-182">При вызове поздней привязкой, такие как <see cref="M:System.Type.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[])" />.</span><span class="sxs-lookup"><span data-stu-id="125f0-182">when invoked late-bound through mechanisms such as <see cref="M:System.Type.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[])" />.</span></span> <span data-ttu-id="125f0-183">Связанное перечисление: <see cref="F:System.Security.Permissions.ReflectionPermissionFlag.MemberAccess" />.</span><span class="sxs-lookup"><span data-stu-id="125f0-183">Associated enumeration: <see cref="F:System.Security.Permissions.ReflectionPermissionFlag.MemberAccess" />.</span></span></permission>
      </Docs>
    </Member>
    <Member MemberName="GetConstantValue">
      <MemberSignature Language="C#" Value="public virtual object GetConstantValue ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance object GetConstantValue() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.PropertyInfo.GetConstantValue" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetConstantValue () As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::Object ^ GetConstantValue();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="125f0-184">Метод возвращает значение-литерал, связанное с этим свойством компилятором.</span><span class="sxs-lookup"><span data-stu-id="125f0-184">Returns a literal value associated with the property by a compiler.</span></span></summary>
        <returns><span data-ttu-id="125f0-185">Объект <see cref="T:System.Object" />, содержащий значение-литерал, сопоставленное данному свойству.</span><span class="sxs-lookup"><span data-stu-id="125f0-185">An <see cref="T:System.Object" /> that contains the literal value associated with the property.</span></span> <span data-ttu-id="125f0-186">Если значение литерала является типом класса и при этом значение элемента равно нулю, возвращается значение <see langword="null" />.</span><span class="sxs-lookup"><span data-stu-id="125f0-186">If the literal value is a class type with an element value of zero, the return value is <see langword="null" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="125f0-187">Этот метод предназначен для разработки управляемых компиляторов и анализаторов кода.</span><span class="sxs-lookup"><span data-stu-id="125f0-187">This method is provided for designers of managed compilers and code analyzers.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="125f0-188">Не используйте этот метод в контексте только для отражения, так как он может привести к выполнению кода.</span><span class="sxs-lookup"><span data-stu-id="125f0-188">Do not use this method in the reflection-only context, because it might cause code to execute.</span></span> <span data-ttu-id="125f0-189">Вместо этого рекомендуется использовать метод <xref:System.Reflection.PropertyInfo.GetRawConstantValue%2A>.</span><span class="sxs-lookup"><span data-stu-id="125f0-189">Use the <xref:System.Reflection.PropertyInfo.GetRawConstantValue%2A> method instead.</span></span>  
  
 <span data-ttu-id="125f0-190">В неуправляемых метаданных Таблица констант используется для хранения константных значений для поля, параметры и свойства.</span><span class="sxs-lookup"><span data-stu-id="125f0-190">In unmanaged metadata, the Constant table is used to store constant values for fields, parameters, and properties.</span></span> <span data-ttu-id="125f0-191">Сведения о константах не влияет напрямую на поведение во время выполнения.</span><span class="sxs-lookup"><span data-stu-id="125f0-191">Constant information does not directly influence runtime behavior.</span></span> <span data-ttu-id="125f0-192">Компиляторы проверяют эти данные во время компиляции, при импорте метаданных.</span><span class="sxs-lookup"><span data-stu-id="125f0-192">Compilers inspect this information, at compile time, when importing metadata.</span></span> <span data-ttu-id="125f0-193">При использовании значения константы внедряется в потоке промежуточного языка MSIL, создаваемый компилятором.</span><span class="sxs-lookup"><span data-stu-id="125f0-193">If used, the value of a constant is embedded in the Microsoft intermediate language (MSIL) stream the compiler emits.</span></span> <span data-ttu-id="125f0-194">Существуют инструкции MSIL, которые могут использоваться для доступа к таблице констант во время выполнения.</span><span class="sxs-lookup"><span data-stu-id="125f0-194">There are no MSIL instructions that can be used to access the Constant table at run time.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="125f0-195">Дополнительные сведения о константных значениях и таблице констант см. в документации ECMA раздел II.</span><span class="sxs-lookup"><span data-stu-id="125f0-195">For more information on constant values and the Constant table, see the ECMA Partition II documentation.</span></span> <span data-ttu-id="125f0-196">Документация доступна в Интернете; см. страницы [ECMAC# и стандарты Common Language Infrastructure](http://go.microsoft.com/fwlink/?LinkID=99212) на сайте MSDN и [Стандарт ECMA-335 — общеязыковая инфраструктура (CLI)](http://go.microsoft.com/fwlink/?LinkID=65552) на международном веб-сайте организации ECMA.</span><span class="sxs-lookup"><span data-stu-id="125f0-196">The documentation is available online; see [ECMA C# and Common Language Infrastructure Standards](http://go.microsoft.com/fwlink/?LinkID=99212) on MSDN and [Standard ECMA-335 - Common Language Infrastructure (CLI)](http://go.microsoft.com/fwlink/?LinkID=65552) on the Ecma International Web site.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="125f0-197">Таблица констант в неуправляемых метаданных не содержит значение константы для текущего свойства.</span><span class="sxs-lookup"><span data-stu-id="125f0-197">The Constant table in unmanaged metadata does not contain a constant value for the current property.</span></span></exception>
        <exception cref="T:System.FormatException"><span data-ttu-id="125f0-198">Тип значения не является одним из типов, разрешенных спецификацией CLS.</span><span class="sxs-lookup"><span data-stu-id="125f0-198">The type of the value is not one of the types permitted by the Common Language Specification (CLS).</span></span> <span data-ttu-id="125f0-199">См. спецификацию ECMA раздел II, "Метаданные".</span><span class="sxs-lookup"><span data-stu-id="125f0-199">See the ECMA Partition II specification, Metadata.</span></span></exception>
      </Docs>
    </Member>
    <MemberGroup MemberName="GetGetMethod">
      <AssemblyInfo>
        <AssemblyName>System.Reflection</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="125f0-200">Возвращает элемент <see langword="MethodInfo" />, предоставляющий метод доступа <see langword="get" /> для этого свойства.</span><span class="sxs-lookup"><span data-stu-id="125f0-200">Returns a <see langword="MethodInfo" /> representing the <see langword="get" /> accessor for this property.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="GetGetMethod">
      <MemberSignature Language="C#" Value="public System.Reflection.MethodInfo GetGetMethod ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Reflection.MethodInfo GetGetMethod() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.PropertyInfo.GetGetMethod" />
      <MemberSignature Language="VB.NET" Value="Public Function GetGetMethod () As MethodInfo" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::Reflection::MethodInfo ^ GetGetMethod();" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Runtime.InteropServices._PropertyInfo.GetGetMethod</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Reflection</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.MethodInfo</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="125f0-201">Возвращает открытый метод доступа <see langword="get" /> для данного свойства.</span><span class="sxs-lookup"><span data-stu-id="125f0-201">Returns the public <see langword="get" /> accessor for this property.</span></span></summary>
        <returns><span data-ttu-id="125f0-202">Объект <see langword="MethodInfo" />, предоставляющий открытый метод доступа <see langword="get" /> для этого свойства, или значение <see langword="null" />, если метод доступа <see langword="get" /> не является открытым либо не существует.</span><span class="sxs-lookup"><span data-stu-id="125f0-202">A <see langword="MethodInfo" /> object representing the public <see langword="get" /> accessor for this property, or <see langword="null" /> if the <see langword="get" /> accessor is non-public or does not exist.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="125f0-203">Это удобный метод, который обеспечивает реализацию для абстрактного `GetGetMethod` метод с `nonPublic` равным `false`.</span><span class="sxs-lookup"><span data-stu-id="125f0-203">This is a convenience method that provides an implementation for the abstract `GetGetMethod` method with the `nonPublic` parameter set to `false`.</span></span>  
  
 <span data-ttu-id="125f0-204">Для использования `GetGetMethod` метод, сначала нужно получить класс `Type`.</span><span class="sxs-lookup"><span data-stu-id="125f0-204">To use the `GetGetMethod` method, first get the class `Type`.</span></span> <span data-ttu-id="125f0-205">Из `Type`, получить <xref:System.Reflection.PropertyInfo>.</span><span class="sxs-lookup"><span data-stu-id="125f0-205">From the `Type`, get the <xref:System.Reflection.PropertyInfo>.</span></span> <span data-ttu-id="125f0-206">Из <xref:System.Reflection.PropertyInfo>, используйте `GetGetMethod` метод.</span><span class="sxs-lookup"><span data-stu-id="125f0-206">From the <xref:System.Reflection.PropertyInfo>, use the `GetGetMethod` method.</span></span>  
  
 ]]></format>
        </remarks>
        <permission cref="T:System.Security.Permissions.ReflectionPermission"><span data-ttu-id="125f0-207">При вызове поздней привязкой, такие как <see cref="M:System.Type.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[])" />.</span><span class="sxs-lookup"><span data-stu-id="125f0-207">when invoked late-bound through mechanisms such as <see cref="M:System.Type.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[])" />.</span></span> <span data-ttu-id="125f0-208">Связанное перечисление: <see cref="F:System.Security.Permissions.ReflectionPermissionFlag.MemberAccess" />.</span><span class="sxs-lookup"><span data-stu-id="125f0-208">Associated enumeration: <see cref="F:System.Security.Permissions.ReflectionPermissionFlag.MemberAccess" />.</span></span></permission>
      </Docs>
    </Member>
    <Member MemberName="GetGetMethod">
      <MemberSignature Language="C#" Value="public abstract System.Reflection.MethodInfo GetGetMethod (bool nonPublic);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Reflection.MethodInfo GetGetMethod(bool nonPublic) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.PropertyInfo.GetGetMethod(System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public MustOverride Function GetGetMethod (nonPublic As Boolean) As MethodInfo" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; abstract System::Reflection::MethodInfo ^ GetGetMethod(bool nonPublic);" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Runtime.InteropServices._PropertyInfo.GetGetMethod(System.Boolean)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Reflection</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.MethodInfo</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="nonPublic" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="nonPublic"><span data-ttu-id="125f0-209">Указывает, должен ли возвращаться неоткрытый метод доступа <see langword="get" />.</span><span class="sxs-lookup"><span data-stu-id="125f0-209">Indicates whether a non-public <see langword="get" /> accessor should be returned.</span></span> <span data-ttu-id="125f0-210">Значение <see langword="true" />, если метод должен быть возвращен; в противном случае — значение <see langword="false" />.</span><span class="sxs-lookup"><span data-stu-id="125f0-210"><see langword="true" /> if a non-public accessor is to be returned; otherwise, <see langword="false" />.</span></span></param>
        <summary><span data-ttu-id="125f0-211">При переопределении в производном классе возвращает для этого свойства открытый или неоткрытый метод доступа <see langword="get" />.</span><span class="sxs-lookup"><span data-stu-id="125f0-211">When overridden in a derived class, returns the public or non-public <see langword="get" /> accessor for this property.</span></span></summary>
        <returns><span data-ttu-id="125f0-212">Объект <see langword="MethodInfo" />, предоставляющий метод доступа <see langword="get" /> для этого свойства, если значение <paramref name="nonPublic" /> равно <see langword="true" />.</span><span class="sxs-lookup"><span data-stu-id="125f0-212">A <see langword="MethodInfo" /> object representing the <see langword="get" /> accessor for this property, if <paramref name="nonPublic" /> is <see langword="true" />.</span></span> <span data-ttu-id="125f0-213">Возвращает значение <see langword="null" />, если <paramref name="nonPublic" /> равен <see langword="false" /> и метод <see langword="get" /> не является открытым, либо если свойство <paramref name="nonPublic" /> равно <see langword="true" /> и методы <see langword="get" /> отсутствуют.</span><span class="sxs-lookup"><span data-stu-id="125f0-213">Returns <see langword="null" /> if <paramref name="nonPublic" /> is <see langword="false" /> and the <see langword="get" /> accessor is non-public, or if <paramref name="nonPublic" /> is <see langword="true" /> but no <see langword="get" /> accessors exist.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="125f0-214">Это свойство является <xref:System.Reflection.MethodInfo> представляющий метод доступа get.</span><span class="sxs-lookup"><span data-stu-id="125f0-214">This property is the <xref:System.Reflection.MethodInfo> representing the get accessor.</span></span>  
  
 <span data-ttu-id="125f0-215">Для использования `GetGetMethod` метод, сначала нужно получить класс `Type`.</span><span class="sxs-lookup"><span data-stu-id="125f0-215">To use the `GetGetMethod` method, first get the class `Type`.</span></span> <span data-ttu-id="125f0-216">Из `Type`, получить <xref:System.Reflection.PropertyInfo>.</span><span class="sxs-lookup"><span data-stu-id="125f0-216">From the `Type`, get the <xref:System.Reflection.PropertyInfo>.</span></span> <span data-ttu-id="125f0-217">Из <xref:System.Reflection.PropertyInfo>, используйте `GetGetMethod` метод.</span><span class="sxs-lookup"><span data-stu-id="125f0-217">From the <xref:System.Reflection.PropertyInfo>, use the `GetGetMethod` method.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="125f0-218">В следующем примере отображается открытый или неоткрытый `get` метод доступа для указанного свойства.</span><span class="sxs-lookup"><span data-stu-id="125f0-218">The following example displays the public or non-public `get` accessor for the specified property.</span></span>  
  
 [!code-cpp[Classic PropertyInfo.GetGetMethod1 Example#1](~/samples/snippets/cpp/VS_Snippets_CLR_Classic/classic PropertyInfo.GetGetMethod1 Example/CPP/source.cpp#1)]
 [!code-csharp[Classic PropertyInfo.GetGetMethod1 Example#1](~/samples/snippets/csharp/VS_Snippets_CLR_Classic/classic PropertyInfo.GetGetMethod1 Example/CS/source.cs#1)]
 [!code-vb[Classic PropertyInfo.GetGetMethod1 Example#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_Classic/classic PropertyInfo.GetGetMethod1 Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Security.SecurityException"><span data-ttu-id="125f0-219">Запрошенный метод не является открытым, и вызывающая сторона не имеет <see cref="T:System.Security.Permissions.ReflectionPermission" /> для отражения в этом методе.</span><span class="sxs-lookup"><span data-stu-id="125f0-219">The requested method is non-public and the caller does not have <see cref="T:System.Security.Permissions.ReflectionPermission" /> to reflect on this non-public method.</span></span></exception>
        <permission cref="T:System.Security.Permissions.ReflectionPermission"><span data-ttu-id="125f0-220">При вызове поздней привязкой, такие как <see cref="M:System.Type.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[])" />.</span><span class="sxs-lookup"><span data-stu-id="125f0-220">when invoked late-bound through mechanisms such as <see cref="M:System.Type.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[])" />.</span></span> <span data-ttu-id="125f0-221">Связанное перечисление: <see cref="F:System.Security.Permissions.ReflectionPermissionFlag.MemberAccess" />.</span><span class="sxs-lookup"><span data-stu-id="125f0-221">Associated enumeration: <see cref="F:System.Security.Permissions.ReflectionPermissionFlag.MemberAccess" />.</span></span></permission>
      </Docs>
    </Member>
    <Member MemberName="GetHashCode">
      <MemberSignature Language="C#" Value="public override int GetHashCode ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance int32 GetHashCode() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.PropertyInfo.GetHashCode" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function GetHashCode () As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override int GetHashCode();" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Runtime.InteropServices._PropertyInfo.GetHashCode</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Reflection</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="125f0-222">Возвращает хэш-код данного экземпляра.</span><span class="sxs-lookup"><span data-stu-id="125f0-222">Returns the hash code for this instance.</span></span></summary>
        <returns><span data-ttu-id="125f0-223">Хэш-код в виде 32-разрядного целого числа со знаком.</span><span class="sxs-lookup"><span data-stu-id="125f0-223">A 32-bit signed integer hash code.</span></span></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetIndexParameters">
      <MemberSignature Language="C#" Value="public abstract System.Reflection.ParameterInfo[] GetIndexParameters ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Reflection.ParameterInfo[] GetIndexParameters() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.PropertyInfo.GetIndexParameters" />
      <MemberSignature Language="VB.NET" Value="Public MustOverride Function GetIndexParameters () As ParameterInfo()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; abstract cli::array &lt;System::Reflection::ParameterInfo ^&gt; ^ GetIndexParameters();" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Runtime.InteropServices._PropertyInfo.GetIndexParameters</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Reflection</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.ParameterInfo[]</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="125f0-224">При переопределении в производном классе возвращает для этого свойства массив всех параметров индекса.</span><span class="sxs-lookup"><span data-stu-id="125f0-224">When overridden in a derived class, returns an array of all the index parameters for the property.</span></span></summary>
        <returns><span data-ttu-id="125f0-225">Массив элементов типа <see langword="ParameterInfo" />, содержащий параметры для индексов.</span><span class="sxs-lookup"><span data-stu-id="125f0-225">An array of type <see langword="ParameterInfo" /> containing the parameters for the indexes.</span></span> <span data-ttu-id="125f0-226">Если свойство не индексировано, массив содержит 0 (нуль) элементов.</span><span class="sxs-lookup"><span data-stu-id="125f0-226">If the property is not indexed, the array has 0 (zero) elements.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="125f0-227">Извлечь требуемые параметры из возвращаемого массива.</span><span class="sxs-lookup"><span data-stu-id="125f0-227">Extract any required parameter information from the returned array.</span></span>  
  
 <span data-ttu-id="125f0-228">Для использования `GetIndexParameters` метод, сначала нужно получить класс `Type`.</span><span class="sxs-lookup"><span data-stu-id="125f0-228">To use the `GetIndexParameters` method, first get the class `Type`.</span></span> <span data-ttu-id="125f0-229">Из `Type`, получить `PropertyInfo`.</span><span class="sxs-lookup"><span data-stu-id="125f0-229">From the `Type`, get the `PropertyInfo`.</span></span> <span data-ttu-id="125f0-230">Из `PropertyInfo`, используйте `GetIndexParameters` метод.</span><span class="sxs-lookup"><span data-stu-id="125f0-230">From the `PropertyInfo`, use the `GetIndexParameters` method.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="125f0-231">Следующий пример отображает параметры индекса, заданного свойства.</span><span class="sxs-lookup"><span data-stu-id="125f0-231">The following example displays the index parameters of the specified property.</span></span>  
  
 [!code-cpp[Classic PropertyInfo.GetIndexParameters Example#1](~/samples/snippets/cpp/VS_Snippets_CLR_Classic/classic PropertyInfo.GetIndexParameters Example/CPP/source.cpp#1)]
 [!code-csharp[Classic PropertyInfo.GetIndexParameters Example#1](~/samples/snippets/csharp/VS_Snippets_CLR_Classic/classic PropertyInfo.GetIndexParameters Example/CS/source.cs#1)]
 [!code-vb[Classic PropertyInfo.GetIndexParameters Example#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_Classic/classic PropertyInfo.GetIndexParameters Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <permission cref="T:System.Security.Permissions.ReflectionPermission"><span data-ttu-id="125f0-232">При вызове поздней привязкой, такие как <see cref="M:System.Type.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[])" />.</span><span class="sxs-lookup"><span data-stu-id="125f0-232">when invoked late-bound through mechanisms such as <see cref="M:System.Type.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[])" />.</span></span> <span data-ttu-id="125f0-233">Связанное перечисление: <see cref="F:System.Security.Permissions.ReflectionPermissionFlag.MemberAccess" />.</span><span class="sxs-lookup"><span data-stu-id="125f0-233">Associated enumeration: <see cref="F:System.Security.Permissions.ReflectionPermissionFlag.MemberAccess" />.</span></span></permission>
      </Docs>
    </Member>
    <Member MemberName="GetMethod">
      <MemberSignature Language="C#" Value="public virtual System.Reflection.MethodInfo GetMethod { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Reflection.MethodInfo GetMethod" />
      <MemberSignature Language="DocId" Value="P:System.Reflection.PropertyInfo.GetMethod" />
      <MemberSignature Language="VB.NET" Value="Public Overridable ReadOnly Property GetMethod As MethodInfo" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property System::Reflection::MethodInfo ^ GetMethod { System::Reflection::MethodInfo ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.MethodInfo</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="125f0-234">Получает метод доступа <see langword="get" /> для этого свойства.</span><span class="sxs-lookup"><span data-stu-id="125f0-234">Gets the <see langword="get" /> accessor for this property.</span></span></summary>
        <value><span data-ttu-id="125f0-235">Метод доступа <see langword="get" /> для этого свойства.</span><span class="sxs-lookup"><span data-stu-id="125f0-235">The <see langword="get" /> accessor for this property.</span></span></value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetOptionalCustomModifiers">
      <MemberSignature Language="C#" Value="public virtual Type[] GetOptionalCustomModifiers ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Type[] GetOptionalCustomModifiers() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.PropertyInfo.GetOptionalCustomModifiers" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetOptionalCustomModifiers () As Type()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual cli::array &lt;Type ^&gt; ^ GetOptionalCustomModifiers();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Type[]</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="125f0-236">Возвращает массив типов, представляющих необязательные настраиваемые модификаторы для свойства.</span><span class="sxs-lookup"><span data-stu-id="125f0-236">Returns an array of types representing the optional custom modifiers of the property.</span></span></summary>
        <returns><span data-ttu-id="125f0-237">Массив объектов <see cref="T:System.Type" />, которые указывают дополнительные настраиваемые модификаторы для текущего свойства, такие как <see cref="T:System.Runtime.CompilerServices.IsConst" /> или <see cref="T:System.Runtime.CompilerServices.IsImplicitlyDereferenced" />.</span><span class="sxs-lookup"><span data-stu-id="125f0-237">An array of <see cref="T:System.Type" /> objects that identify the optional custom modifiers of the current property, such as <see cref="T:System.Runtime.CompilerServices.IsConst" /> or <see cref="T:System.Runtime.CompilerServices.IsImplicitlyDereferenced" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="125f0-238"><xref:System.Reflection.PropertyInfo.GetOptionalCustomModifiers%2A> И <xref:System.Reflection.PropertyInfo.GetRequiredCustomModifiers%2A> методы предоставляются для конструкторов управляемых компиляторов.</span><span class="sxs-lookup"><span data-stu-id="125f0-238">The <xref:System.Reflection.PropertyInfo.GetOptionalCustomModifiers%2A> and <xref:System.Reflection.PropertyInfo.GetRequiredCustomModifiers%2A> methods are provided for designers of managed compilers.</span></span> <span data-ttu-id="125f0-239">Дополнительные сведения о настраиваемых модификаторов см. в разделе <xref:System.Runtime.CompilerServices.IsBoxed> и связанными классами в <xref:System.Runtime.CompilerServices> пространства имен и спецификацию метаданных в документации ECMA раздел II.</span><span class="sxs-lookup"><span data-stu-id="125f0-239">For more information on custom modifiers, see <xref:System.Runtime.CompilerServices.IsBoxed> and related classes in the <xref:System.Runtime.CompilerServices> namespace and the metadata specification in the ECMA Partition II documentation.</span></span> <span data-ttu-id="125f0-240">Документация доступна в Интернете; см. страницы [ECMAC# и стандарты Common Language Infrastructure](http://go.microsoft.com/fwlink/?LinkID=99212) на сайте MSDN и [Стандарт ECMA-335 — общеязыковая инфраструктура (CLI)](http://go.microsoft.com/fwlink/?LinkID=65552) на международном веб-сайте организации ECMA.</span><span class="sxs-lookup"><span data-stu-id="125f0-240">The documentation is available online; see [ECMA C# and Common Language Infrastructure Standards](http://go.microsoft.com/fwlink/?LinkID=99212) on MSDN and [Standard ECMA-335 - Common Language Infrastructure (CLI)](http://go.microsoft.com/fwlink/?LinkID=65552) on the Ecma International Web site.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetRawConstantValue">
      <MemberSignature Language="C#" Value="public virtual object GetRawConstantValue ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance object GetRawConstantValue() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.PropertyInfo.GetRawConstantValue" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetRawConstantValue () As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::Object ^ GetRawConstantValue();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="125f0-241">Метод возвращает значение-литерал, связанное с этим свойством компилятором.</span><span class="sxs-lookup"><span data-stu-id="125f0-241">Returns a literal value associated with the property by a compiler.</span></span></summary>
        <returns><span data-ttu-id="125f0-242">Объект <see cref="T:System.Object" />, содержащий значение-литерал, сопоставленное данному свойству.</span><span class="sxs-lookup"><span data-stu-id="125f0-242">An <see cref="T:System.Object" /> that contains the literal value associated with the property.</span></span> <span data-ttu-id="125f0-243">Если значение литерала является типом класса и при этом значение элемента равно нулю, возвращается значение <see langword="null" />.</span><span class="sxs-lookup"><span data-stu-id="125f0-243">If the literal value is a class type with an element value of zero, the return value is <see langword="null" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="125f0-244">Этот метод предназначен для разработки управляемых компиляторов и анализаторов кода.</span><span class="sxs-lookup"><span data-stu-id="125f0-244">This method is provided for designers of managed compilers and code analyzers.</span></span>  
  
 <span data-ttu-id="125f0-245">Этот метод можно использовать в контексте выполнения и контекст только для отражения.</span><span class="sxs-lookup"><span data-stu-id="125f0-245">This method can be used in both the execution context and the reflection-only context.</span></span>  
  
 <span data-ttu-id="125f0-246">В неуправляемых метаданных Таблица констант используется для хранения константных значений для поля, параметры и свойства.</span><span class="sxs-lookup"><span data-stu-id="125f0-246">In unmanaged metadata, the Constant table is used to store constant values for fields, parameters, and properties.</span></span> <span data-ttu-id="125f0-247">Сведения о константах не влияет напрямую на поведение во время выполнения.</span><span class="sxs-lookup"><span data-stu-id="125f0-247">Constant information does not directly influence runtime behavior.</span></span> <span data-ttu-id="125f0-248">Компиляторы проверяют эти данные во время компиляции, при импорте метаданных.</span><span class="sxs-lookup"><span data-stu-id="125f0-248">Compilers inspect this information, at compile time, when importing metadata.</span></span> <span data-ttu-id="125f0-249">При использовании значения константы внедряется в потоке промежуточного языка MSIL, создаваемый компилятором.</span><span class="sxs-lookup"><span data-stu-id="125f0-249">If used, the value of a constant is embedded in the Microsoft intermediate language (MSIL) stream the compiler emits.</span></span> <span data-ttu-id="125f0-250">Существуют инструкции MSIL, которые могут использоваться для доступа к таблице констант во время выполнения.</span><span class="sxs-lookup"><span data-stu-id="125f0-250">There are no MSIL instructions that can be used to access the Constant table at run time.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="125f0-251">Дополнительные сведения о константных значениях и таблице констант см. в документации ECMA раздел II.</span><span class="sxs-lookup"><span data-stu-id="125f0-251">For more information on constant values and the Constant table, see the ECMA Partition II documentation.</span></span> <span data-ttu-id="125f0-252">Документация доступна в Интернете; см. страницы [ECMAC# и стандарты Common Language Infrastructure](http://go.microsoft.com/fwlink/?LinkID=99212) на сайте MSDN и [Стандарт ECMA-335 — общеязыковая инфраструктура (CLI)](http://go.microsoft.com/fwlink/?LinkID=65552) на международном веб-сайте организации ECMA.</span><span class="sxs-lookup"><span data-stu-id="125f0-252">The documentation is available online; see [ECMA C# and Common Language Infrastructure Standards](http://go.microsoft.com/fwlink/?LinkID=99212) on MSDN and [Standard ECMA-335 - Common Language Infrastructure (CLI)](http://go.microsoft.com/fwlink/?LinkID=65552) on the Ecma International Web site.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="125f0-253">Таблица констант в неуправляемых метаданных не содержит значение константы для текущего свойства.</span><span class="sxs-lookup"><span data-stu-id="125f0-253">The Constant table in unmanaged metadata does not contain a constant value for the current property.</span></span></exception>
        <exception cref="T:System.FormatException"><span data-ttu-id="125f0-254">Тип значения не является одним из типов, разрешенных спецификацией CLS.</span><span class="sxs-lookup"><span data-stu-id="125f0-254">The type of the value is not one of the types permitted by the Common Language Specification (CLS).</span></span> <span data-ttu-id="125f0-255">См. спецификацию ECMA, раздел II, логический формат метаданных (другие структуры, типы элементов, используемые в сигнатурах).</span><span class="sxs-lookup"><span data-stu-id="125f0-255">See the ECMA Partition II specification, Metadata Logical Format: Other Structures, Element Types used in Signatures.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="GetRequiredCustomModifiers">
      <MemberSignature Language="C#" Value="public virtual Type[] GetRequiredCustomModifiers ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Type[] GetRequiredCustomModifiers() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.PropertyInfo.GetRequiredCustomModifiers" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetRequiredCustomModifiers () As Type()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual cli::array &lt;Type ^&gt; ^ GetRequiredCustomModifiers();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Type[]</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="125f0-256">Возвращает массив типов, представляющих обязательные настраиваемые модификаторы для свойства.</span><span class="sxs-lookup"><span data-stu-id="125f0-256">Returns an array of types representing the required custom modifiers of the property.</span></span></summary>
        <returns><span data-ttu-id="125f0-257">Массив объектов <see cref="T:System.Type" />, которые указывают обязательные настраиваемые модификаторы для текущего свойства, например <see cref="T:System.Runtime.CompilerServices.IsConst" /> или <see cref="T:System.Runtime.CompilerServices.IsImplicitlyDereferenced" />.</span><span class="sxs-lookup"><span data-stu-id="125f0-257">An array of <see cref="T:System.Type" /> objects that identify the required custom modifiers of the current property, such as <see cref="T:System.Runtime.CompilerServices.IsConst" /> or <see cref="T:System.Runtime.CompilerServices.IsImplicitlyDereferenced" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="125f0-258"><xref:System.Reflection.PropertyInfo.GetOptionalCustomModifiers%2A> И <xref:System.Reflection.PropertyInfo.GetRequiredCustomModifiers%2A> методы предоставляются для конструкторов управляемых компиляторов.</span><span class="sxs-lookup"><span data-stu-id="125f0-258">The <xref:System.Reflection.PropertyInfo.GetOptionalCustomModifiers%2A> and <xref:System.Reflection.PropertyInfo.GetRequiredCustomModifiers%2A> methods are provided for designers of managed compilers.</span></span> <span data-ttu-id="125f0-259">Дополнительные сведения о настраиваемых модификаторов см. в разделе <xref:System.Runtime.CompilerServices.IsBoxed> и связанными классами в <xref:System.Runtime.CompilerServices> пространства имен и спецификацию метаданных в документации ECMA раздел II.</span><span class="sxs-lookup"><span data-stu-id="125f0-259">For more information on custom modifiers, see <xref:System.Runtime.CompilerServices.IsBoxed> and related classes in the <xref:System.Runtime.CompilerServices> namespace and the metadata specification in the ECMA Partition II documentation.</span></span> <span data-ttu-id="125f0-260">Документация доступна в Интернете; см. страницы [ECMAC# и стандарты Common Language Infrastructure](http://go.microsoft.com/fwlink/?LinkID=99212) на сайте MSDN и [Стандарт ECMA-335 — общеязыковая инфраструктура (CLI)](http://go.microsoft.com/fwlink/?LinkID=65552) на международном веб-сайте организации ECMA.</span><span class="sxs-lookup"><span data-stu-id="125f0-260">The documentation is available online; see [ECMA C# and Common Language Infrastructure Standards](http://go.microsoft.com/fwlink/?LinkID=99212) on MSDN and [Standard ECMA-335 - Common Language Infrastructure (CLI)](http://go.microsoft.com/fwlink/?LinkID=65552) on the Ecma International Web site.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="GetSetMethod">
      <AssemblyInfo>
        <AssemblyName>System.Reflection</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="125f0-261">Возвращает элемент <see cref="T:System.Reflection.MethodInfo" />, предоставляющий метод доступа <see langword="set" /> для этого свойства.</span><span class="sxs-lookup"><span data-stu-id="125f0-261">Returns a <see cref="T:System.Reflection.MethodInfo" /> representing the <see langword="set" /> accessor for this property.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="GetSetMethod">
      <MemberSignature Language="C#" Value="public System.Reflection.MethodInfo GetSetMethod ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Reflection.MethodInfo GetSetMethod() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.PropertyInfo.GetSetMethod" />
      <MemberSignature Language="VB.NET" Value="Public Function GetSetMethod () As MethodInfo" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::Reflection::MethodInfo ^ GetSetMethod();" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Runtime.InteropServices._PropertyInfo.GetSetMethod</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Reflection</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.MethodInfo</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="125f0-262">Возвращает открытый метод доступа <see langword="set" /> для данного свойства.</span><span class="sxs-lookup"><span data-stu-id="125f0-262">Returns the public <see langword="set" /> accessor for this property.</span></span></summary>
        <returns><span data-ttu-id="125f0-263">Объект <see langword="MethodInfo" />, представляющий метод <see langword="Set" /> для этого свойства, если метод доступа <see langword="set" /> является открытым, или значение <see langword="null" />, если метод <see langword="set" /> не является открытым.</span><span class="sxs-lookup"><span data-stu-id="125f0-263">The <see langword="MethodInfo" /> object representing the <see langword="Set" /> method for this property if the <see langword="set" /> accessor is public, or <see langword="null" /> if the <see langword="set" /> accessor is not public.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="125f0-264">Это удобный метод, который обеспечивает реализацию для абстрактного `GetSetMethod` метод с `nonPublic` равным `false`.</span><span class="sxs-lookup"><span data-stu-id="125f0-264">This is a convenience method that provides an implementation for the abstract `GetSetMethod` method with the `nonPublic` parameter set to `false`.</span></span>  
  
 <span data-ttu-id="125f0-265">Для использования `GetSetMethod` метод, сначала нужно получить класс `Type`.</span><span class="sxs-lookup"><span data-stu-id="125f0-265">To use the `GetSetMethod` method, first get the class `Type`.</span></span> <span data-ttu-id="125f0-266">Из `Type`, получить <xref:System.Reflection.PropertyInfo>.</span><span class="sxs-lookup"><span data-stu-id="125f0-266">From the `Type`, get the <xref:System.Reflection.PropertyInfo>.</span></span> <span data-ttu-id="125f0-267">Из `PropertyInfo`, используйте `GetSetMethod` метод.</span><span class="sxs-lookup"><span data-stu-id="125f0-267">From the `PropertyInfo`, use the `GetSetMethod` method.</span></span>  
  
 ]]></format>
        </remarks>
        <permission cref="T:System.Security.Permissions.ReflectionPermission"><span data-ttu-id="125f0-268">При вызове поздней привязкой, такие как <see cref="M:System.Type.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[])" />.</span><span class="sxs-lookup"><span data-stu-id="125f0-268">when invoked late-bound through mechanisms such as <see cref="M:System.Type.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[])" />.</span></span> <span data-ttu-id="125f0-269">Связанное перечисление: <see cref="F:System.Security.Permissions.ReflectionPermissionFlag.MemberAccess" />.</span><span class="sxs-lookup"><span data-stu-id="125f0-269">Associated enumeration: <see cref="F:System.Security.Permissions.ReflectionPermissionFlag.MemberAccess" />.</span></span></permission>
      </Docs>
    </Member>
    <Member MemberName="GetSetMethod">
      <MemberSignature Language="C#" Value="public abstract System.Reflection.MethodInfo GetSetMethod (bool nonPublic);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Reflection.MethodInfo GetSetMethod(bool nonPublic) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.PropertyInfo.GetSetMethod(System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public MustOverride Function GetSetMethod (nonPublic As Boolean) As MethodInfo" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; abstract System::Reflection::MethodInfo ^ GetSetMethod(bool nonPublic);" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Runtime.InteropServices._PropertyInfo.GetSetMethod(System.Boolean)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Reflection</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.MethodInfo</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="nonPublic" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="nonPublic"><span data-ttu-id="125f0-270">Указывает, должен ли возвращаться метод доступа, если он не является открытым.</span><span class="sxs-lookup"><span data-stu-id="125f0-270">Indicates whether the accessor should be returned if it is non-public.</span></span> <span data-ttu-id="125f0-271">Значение <see langword="true" />, если метод должен быть возвращен; в противном случае — значение <see langword="false" />.</span><span class="sxs-lookup"><span data-stu-id="125f0-271"><see langword="true" /> if a non-public accessor is to be returned; otherwise, <see langword="false" />.</span></span></param>
        <summary><span data-ttu-id="125f0-272">При переопределении в производном классе возвращает для этого свойства метод доступа <see langword="set" />.</span><span class="sxs-lookup"><span data-stu-id="125f0-272">When overridden in a derived class, returns the <see langword="set" /> accessor for this property.</span></span></summary>
        <returns><span data-ttu-id="125f0-273">Метод свойства <see langword="Set" /> или <see langword="null" />, как показано в следующей таблице.</span><span class="sxs-lookup"><span data-stu-id="125f0-273">This property's <see langword="Set" /> method, or <see langword="null" />, as shown in the following table.</span></span>  
  
 <span data-ttu-id="125f0-274"><list type="table"><listheader><term> Значение</span><span class="sxs-lookup"><span data-stu-id="125f0-274"><list type="table"><listheader><term> Value</span></span>  
  
 <span data-ttu-id="125f0-275"></term><description> Условие</span><span class="sxs-lookup"><span data-stu-id="125f0-275"></term><description> Condition</span></span>  
  
 <span data-ttu-id="125f0-276"></description></listheader><item><term> Метод <see langword="Set" /> для этого свойства.</span><span class="sxs-lookup"><span data-stu-id="125f0-276"></description></listheader><item><term> The <see langword="Set" /> method for this property.</span></span>  
  
 <span data-ttu-id="125f0-277"></term><description> Метод доступа <see langword="set" /> является открытым.</span><span class="sxs-lookup"><span data-stu-id="125f0-277"></term><description> The <see langword="set" /> accessor is public.</span></span>  
  
 <span data-ttu-id="125f0-278">- или -</span><span class="sxs-lookup"><span data-stu-id="125f0-278">-or-</span></span>  
  
 <span data-ttu-id="125f0-279">Параметр <paramref name="nonPublic" /> имеет значение <see langword="true" />, и метод доступа <see langword="set" /> не является открытым.</span><span class="sxs-lookup"><span data-stu-id="125f0-279"><paramref name="nonPublic" /> is <see langword="true" /> and the <see langword="set" /> accessor is non-public.</span></span>  
  
 <span data-ttu-id="125f0-280">Параметр </description></item><item><term><see langword="null" /></term><description><paramref name="nonPublic" /> имеет значение <see langword="true" />, но свойство доступно только для чтения.</span><span class="sxs-lookup"><span data-stu-id="125f0-280"></description></item><item><term><see langword="null" /></term><description><paramref name="nonPublic" /> is <see langword="true" />, but the property is read-only.</span></span>  
  
 <span data-ttu-id="125f0-281">- или -</span><span class="sxs-lookup"><span data-stu-id="125f0-281">-or-</span></span>  
  
 <span data-ttu-id="125f0-282">Параметр <paramref name="nonPublic" /> имеет значение <see langword="false" />, и метод доступа <see langword="set" /> не является открытым.</span><span class="sxs-lookup"><span data-stu-id="125f0-282"><paramref name="nonPublic" /> is <see langword="false" /> and the <see langword="set" /> accessor is non-public.</span></span>  
  
 <span data-ttu-id="125f0-283">- или -</span><span class="sxs-lookup"><span data-stu-id="125f0-283">-or-</span></span>  
  
 <span data-ttu-id="125f0-284">Метод доступа <see langword="set" /> не существует.</span><span class="sxs-lookup"><span data-stu-id="125f0-284">There is no <see langword="set" /> accessor.</span></span>  
  
 </description></item></list></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="125f0-285">Для использования `GetSetMethod` метод, сначала нужно получить класс `Type`.</span><span class="sxs-lookup"><span data-stu-id="125f0-285">To use the `GetSetMethod` method, first get the class `Type`.</span></span> <span data-ttu-id="125f0-286">Из `Type`, получить <xref:System.Reflection.PropertyInfo>.</span><span class="sxs-lookup"><span data-stu-id="125f0-286">From the `Type`, get the <xref:System.Reflection.PropertyInfo>.</span></span> <span data-ttu-id="125f0-287">Из `PropertyInfo`, используйте `GetSetMethod` метод.</span><span class="sxs-lookup"><span data-stu-id="125f0-287">From the `PropertyInfo`, use the `GetSetMethod` method.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="125f0-288">В следующем примере отображается `set` метод доступа для указанного свойства.</span><span class="sxs-lookup"><span data-stu-id="125f0-288">The following example displays the `set` accessor for the specified property.</span></span>  
  
 [!code-cpp[Classic PropertyInfo.GetSetMethod1 Example#1](~/samples/snippets/cpp/VS_Snippets_CLR_Classic/classic PropertyInfo.GetSetMethod1 Example/CPP/source.cpp#1)]
 [!code-csharp[Classic PropertyInfo.GetSetMethod1 Example#1](~/samples/snippets/csharp/VS_Snippets_CLR_Classic/classic PropertyInfo.GetSetMethod1 Example/CS/source.cs#1)]
 [!code-vb[Classic PropertyInfo.GetSetMethod1 Example#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_Classic/classic PropertyInfo.GetSetMethod1 Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Security.SecurityException"><span data-ttu-id="125f0-289">Запрошенный метод не является открытым, и вызывающая сторона не имеет <see cref="T:System.Security.Permissions.ReflectionPermission" /> для отражения в этом методе.</span><span class="sxs-lookup"><span data-stu-id="125f0-289">The requested method is non-public and the caller does not have <see cref="T:System.Security.Permissions.ReflectionPermission" /> to reflect on this non-public method.</span></span></exception>
        <permission cref="T:System.Security.Permissions.ReflectionPermission"><span data-ttu-id="125f0-290">При вызове поздней привязкой, такие как <see cref="M:System.Type.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[])" />.</span><span class="sxs-lookup"><span data-stu-id="125f0-290">when invoked late-bound through mechanisms such as <see cref="M:System.Type.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[])" />.</span></span> <span data-ttu-id="125f0-291">Связанное перечисление: <see cref="F:System.Security.Permissions.ReflectionPermissionFlag.MemberAccess" />.</span><span class="sxs-lookup"><span data-stu-id="125f0-291">Associated enumeration: <see cref="F:System.Security.Permissions.ReflectionPermissionFlag.MemberAccess" />.</span></span></permission>
      </Docs>
    </Member>
    <MemberGroup MemberName="GetValue">
      <AssemblyInfo>
        <AssemblyName>System.Reflection</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="125f0-292">Возвращает значение свойства указанного объекта.</span><span class="sxs-lookup"><span data-stu-id="125f0-292">Returns the property value of a specified object.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="GetValue">
      <MemberSignature Language="C#" Value="public object GetValue (object obj);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance object GetValue(object obj) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.PropertyInfo.GetValue(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function GetValue (obj As Object) As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Object ^ GetValue(System::Object ^ obj);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Diagnostics.DebuggerStepThrough</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="obj" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="obj"><span data-ttu-id="125f0-293">Объект, свойство которого будет возвращено.</span><span class="sxs-lookup"><span data-stu-id="125f0-293">The object whose property value will be returned.</span></span></param>
        <summary><span data-ttu-id="125f0-294">Возвращает значение свойства указанного объекта.</span><span class="sxs-lookup"><span data-stu-id="125f0-294">Returns the property value of a specified object.</span></span></summary>
        <returns><span data-ttu-id="125f0-295">Значение свойства указанного объекта.</span><span class="sxs-lookup"><span data-stu-id="125f0-295">The property value of the specified object.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="125f0-296">Можно вызвать <xref:System.Reflection.PropertyInfo.GetValue%28System.Object%29> перегрузки для извлечения значения свойства неиндексированных; при попытке получить значение индексированного свойства метод создает <xref:System.Reflection.TargetParameterCountException> исключение.</span><span class="sxs-lookup"><span data-stu-id="125f0-296">You call the <xref:System.Reflection.PropertyInfo.GetValue%28System.Object%29> overload to retrieve the value of a non-indexed property; if you try to retrieve the value of an indexed property, the method throws a <xref:System.Reflection.TargetParameterCountException> exception.</span></span> <span data-ttu-id="125f0-297">Можно определить свойство индексируется или не вызвав <xref:System.Reflection.PropertyInfo.GetIndexParameters%2A> метод.</span><span class="sxs-lookup"><span data-stu-id="125f0-297">You can determine whether a property is indexed or not by calling the <xref:System.Reflection.PropertyInfo.GetIndexParameters%2A> method.</span></span> <span data-ttu-id="125f0-298">Если длина возвращаемого <xref:System.Reflection.ParameterInfo> массива равно нулю, свойство не проиндексированы.</span><span class="sxs-lookup"><span data-stu-id="125f0-298">If the length of the returned <xref:System.Reflection.ParameterInfo> array is zero, the property is not indexed.</span></span>  
  
 <span data-ttu-id="125f0-299">Это удобный метод, который обеспечивает реализацию для абстрактного <xref:System.Reflection.PropertyInfo.GetValue%28System.Object%2CSystem.Reflection.BindingFlags%2CSystem.Reflection.Binder%2CSystem.Object%5B%5D%2CSystem.Globalization.CultureInfo%29> метод с <xref:System.Reflection.BindingFlags> равным <xref:System.Reflection.BindingFlags.Default?displayProperty=nameWithType>, <xref:System.Reflection.Binder> значение `null`, массив объектов значений индекса равно `null`, и <xref:System.Globalization.CultureInfo> значение `null`.</span><span class="sxs-lookup"><span data-stu-id="125f0-299">This is a convenience method that provides an implementation for the abstract <xref:System.Reflection.PropertyInfo.GetValue%28System.Object%2CSystem.Reflection.BindingFlags%2CSystem.Reflection.Binder%2CSystem.Object%5B%5D%2CSystem.Globalization.CultureInfo%29> method with the <xref:System.Reflection.BindingFlags> parameter set to <xref:System.Reflection.BindingFlags.Default?displayProperty=nameWithType>, the <xref:System.Reflection.Binder> set to `null`, the object array of index values set to `null`, and the <xref:System.Globalization.CultureInfo> set to `null`.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="125f0-300">В следующем примере определяется `Planet` класс, который имеет два свойства: `Name`, имя планеты; и `Distance`, планеты расстояние от Земли.</span><span class="sxs-lookup"><span data-stu-id="125f0-300">The following example defines a `Planet` class that has two properties: `Name`, the name of the planet; and `Distance`, the planet's distance from Earth.</span></span> <span data-ttu-id="125f0-301">В примере создается экземпляр `Planet` объект, который представляет планеты Юпитер и передает его `GetPropertyValues` метод, отображающий сведения о свойствах и использует <xref:System.Reflection.PropertyInfo.GetValue%2A> метод для получения значения каждого `Planet` свойство.</span><span class="sxs-lookup"><span data-stu-id="125f0-301">The example instantiates a `Planet` object that represents the planet Jupiter and passes it to a `GetPropertyValues` method that displays information about the properties and uses the <xref:System.Reflection.PropertyInfo.GetValue%2A> method to get the value of each `Planet` property.</span></span>  
  
 [!code-csharp[System.Reflection.PropertyInfo.GetValue#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.reflection.propertyinfo.getvalue/cs/getvalue1.cs#1)]
 [!code-vb[System.Reflection.PropertyInfo.GetValue#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.reflection.propertyinfo.getvalue/vb/getvalue1.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetValue">
      <MemberSignature Language="C#" Value="public virtual object GetValue (object obj, object[] index);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance object GetValue(object obj, object[] index) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.PropertyInfo.GetValue(System.Object,System.Object[])" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetValue (obj As Object, index As Object()) As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::Object ^ GetValue(System::Object ^ obj, cli::array &lt;System::Object ^&gt; ^ index);" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Runtime.InteropServices._PropertyInfo.GetValue(System.Object,System.Object[])</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Reflection</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Diagnostics.DebuggerStepThrough</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="obj" Type="System.Object" />
        <Parameter Name="index" Type="System.Object[]" />
      </Parameters>
      <Docs>
        <param name="obj"><span data-ttu-id="125f0-302">Объект, свойство которого будет возвращено.</span><span class="sxs-lookup"><span data-stu-id="125f0-302">The object whose property value will be returned.</span></span></param>
        <param name="index"><span data-ttu-id="125f0-303">Необязательные значения индекса для индексированных свойств.</span><span class="sxs-lookup"><span data-stu-id="125f0-303">Optional index values for indexed properties.</span></span> <span data-ttu-id="125f0-304">Индексы индексированных свойств отсчитываются от нуля.</span><span class="sxs-lookup"><span data-stu-id="125f0-304">The indexes of indexed properties are zero-based.</span></span> <span data-ttu-id="125f0-305">Для неиндексированных свойств это значение должно быть равно <see langword="null" />.</span><span class="sxs-lookup"><span data-stu-id="125f0-305">This value should be <see langword="null" /> for non-indexed properties.</span></span></param>
        <summary><span data-ttu-id="125f0-306">Возвращает значение свойства заданного объекта с дополнительными значениями индекса для индексированных свойств.</span><span class="sxs-lookup"><span data-stu-id="125f0-306">Returns the property value of a specified object with optional index values for indexed properties.</span></span></summary>
        <returns><span data-ttu-id="125f0-307">Значение свойства указанного объекта.</span><span class="sxs-lookup"><span data-stu-id="125f0-307">The property value of the specified object.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="125f0-308">Чтобы определить, проиндексировано ли свойство, используйте <xref:System.Reflection.PropertyInfo.GetIndexParameters%2A> метод.</span><span class="sxs-lookup"><span data-stu-id="125f0-308">To determine whether a property is indexed, use the <xref:System.Reflection.PropertyInfo.GetIndexParameters%2A> method.</span></span> <span data-ttu-id="125f0-309">Если результирующий массив содержит 0 (нуль) элементов, свойство не индексируются.</span><span class="sxs-lookup"><span data-stu-id="125f0-309">If the resulting array has 0 (zero) elements, the property is not indexed.</span></span>  
  
 <span data-ttu-id="125f0-310">Это удобный метод, который обеспечивает реализацию для абстрактного `GetValue` метод с `BindingFlags` параметр `Default`, `Binder` значение `null`и `CultureInfo` значение `null`.</span><span class="sxs-lookup"><span data-stu-id="125f0-310">This is a convenience method that provides an implementation for the abstract `GetValue` method with a `BindingFlags` parameter of `Default`, the `Binder` set to `null`, and the `CultureInfo` set to `null`.</span></span>  
  
 <span data-ttu-id="125f0-311">Так как статические свойства принадлежит к типу, а не отдельные объекты, получения статических свойств, передав `null` в качестве аргумента объекта.</span><span class="sxs-lookup"><span data-stu-id="125f0-311">Because static properties belong to the type, not individual objects, get static properties by passing `null` as the object argument.</span></span> <span data-ttu-id="125f0-312">Например, используйте следующий код, чтобы получить статический `CurrentCulture` свойства `CultureInfo` :</span><span class="sxs-lookup"><span data-stu-id="125f0-312">For example, use the following code to get the static `CurrentCulture` property of `CultureInfo` :</span></span>  
  
```csharp  
PropertyInfo CurCultProp =   
    (typeof(CultureInfo)).GetProperty("CurrentCulture");   
Console.WriteLine("CurrCult: " +  
    CurCultProp.GetValue(null,null));  
```  
  
 <span data-ttu-id="125f0-313">Для использования `GetValue` метод, сначала нужно получить класс `Type`.</span><span class="sxs-lookup"><span data-stu-id="125f0-313">To use the `GetValue` method, first get the class `Type`.</span></span> <span data-ttu-id="125f0-314">Из `Type`, получить `PropertyInfo`.</span><span class="sxs-lookup"><span data-stu-id="125f0-314">From the `Type`, get the `PropertyInfo`.</span></span> <span data-ttu-id="125f0-315">Из `PropertyInfo`, используйте `GetValue` метод.</span><span class="sxs-lookup"><span data-stu-id="125f0-315">From the `PropertyInfo`, use the `GetValue` method.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="125f0-316">Начиная с [!INCLUDE[net_v20sp1_long](~/includes/net-v20sp1-long-md.md)], этот метод можно использовать для доступа к закрытым членам, если вызывающему объекту предоставлены <xref:System.Security.Permissions.ReflectionPermission> с <xref:System.Security.Permissions.ReflectionPermissionFlag.RestrictedMemberAccess?displayProperty=nameWithType> и отметки Если набор прав, не являющиеся открытыми члены ограничена вызывающего набором разрешений или подмножество его.</span><span class="sxs-lookup"><span data-stu-id="125f0-316">Starting with the [!INCLUDE[net_v20sp1_long](~/includes/net-v20sp1-long-md.md)], this method can be used to access non-public members if the caller has been granted <xref:System.Security.Permissions.ReflectionPermission> with the <xref:System.Security.Permissions.ReflectionPermissionFlag.RestrictedMemberAccess?displayProperty=nameWithType> flag and if the grant set of the non-public members is restricted to the caller’s grant set, or a subset thereof.</span></span> <span data-ttu-id="125f0-317">(См. [рекомендации по безопасности для отражения](~/docs/framework/reflection-and-codedom/security-considerations-for-reflection.md).)</span><span class="sxs-lookup"><span data-stu-id="125f0-317">(See [Security Considerations for Reflection](~/docs/framework/reflection-and-codedom/security-considerations-for-reflection.md).)</span></span>  
>   
>  <span data-ttu-id="125f0-318">Для применения этих функциональных возможностей приложение должно использовать [!INCLUDE[net_v35_long](~/includes/net-v35-long-md.md)] или более поздние версии.</span><span class="sxs-lookup"><span data-stu-id="125f0-318">To use this functionality, your application should target the [!INCLUDE[net_v35_long](~/includes/net-v35-long-md.md)] or later.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="125f0-319">Следующий пример показывает, как получить значение индексированного свойства.</span><span class="sxs-lookup"><span data-stu-id="125f0-319">The following example shows how to get the value of an indexed property.</span></span> <span data-ttu-id="125f0-320"><xref:System.String.Chars%2A?displayProperty=nameWithType> Свойство является свойством по умолчанию (индексатор в C#) из <xref:System.String> класса.</span><span class="sxs-lookup"><span data-stu-id="125f0-320">The <xref:System.String.Chars%2A?displayProperty=nameWithType> property is the default property (the indexer in C#) of the <xref:System.String> class.</span></span>  
  
 [!code-csharp[System.Reflection.PropertyInfo.GetValue Example#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.reflection.PropertyInfo.GetValue Example/CS/source.cs#1)]
 [!code-vb[System.Reflection.PropertyInfo.GetValue Example#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.reflection.PropertyInfo.GetValue Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="125f0-321">Массив <paramref name="index" /> не содержит необходимого типа аргументов.</span><span class="sxs-lookup"><span data-stu-id="125f0-321">The <paramref name="index" /> array does not contain the type of arguments needed.</span></span>  
  
 <span data-ttu-id="125f0-322">- или -</span><span class="sxs-lookup"><span data-stu-id="125f0-322">-or-</span></span>  
  
 <span data-ttu-id="125f0-323">Не найден метод доступа <see langword="get" /> свойства.</span><span class="sxs-lookup"><span data-stu-id="125f0-323">The property's <see langword="get" /> accessor is not found.</span></span></exception>
        <exception cref="T:System.Reflection.TargetException">
          <block subset="none" type="note">
            <para>  
 <span data-ttu-id="125f0-324">Вместо этого в <see href="https://msdn.microsoft.com/library/windows/apps/br230232(v=vs.110).aspx">.NET для приложений Магазина Windows</see> или в <see href="~/docs/standard/cross-platform/cross-platform-development-with-the-portable-class-library.md">переносимой библиотеке классов</see> перехватите исключение <see cref="T:System.Exception" />.</span><span class="sxs-lookup"><span data-stu-id="125f0-324">In the <see href="https://msdn.microsoft.com/library/windows/apps/br230232(v=vs.110).aspx">.NET for Windows Store apps</see> or the <see href="~/docs/standard/cross-platform/cross-platform-development-with-the-portable-class-library.md">Portable Class Library</see>, catch <see cref="T:System.Exception" /> instead.</span></span>  
  
</para>
          </block>  
  
 <span data-ttu-id="125f0-325">Объект не соответствует целевому типу, или свойство является свойством экземпляра, но <paramref name="obj" /> имеет значение <see langword="null" />.</span><span class="sxs-lookup"><span data-stu-id="125f0-325">The object does not match the target type, or a property is an instance property but <paramref name="obj" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.Reflection.TargetParameterCountException"><span data-ttu-id="125f0-326">Число параметров в <paramref name="index" /> не соответствует числу параметров, принимаемых индексированным свойством.</span><span class="sxs-lookup"><span data-stu-id="125f0-326">The number of parameters in <paramref name="index" /> does not match the number of parameters the indexed property takes.</span></span></exception>
        <exception cref="T:System.MethodAccessException">
          <block subset="none" type="note">
            <para>  
 <span data-ttu-id="125f0-327">Вместо этого в <see href="https://msdn.microsoft.com/library/windows/apps/br230232(v=vs.110).aspx">.NET для приложений Магазина Windows</see> или в <see href="~/docs/standard/cross-platform/cross-platform-development-with-the-portable-class-library.md">переносимой библиотеке классов</see> перехватите исключение базового класса <see cref="T:System.MemberAccessException" />.</span><span class="sxs-lookup"><span data-stu-id="125f0-327">In the <see href="https://msdn.microsoft.com/library/windows/apps/br230232(v=vs.110).aspx">.NET for Windows Store apps</see> or the <see href="~/docs/standard/cross-platform/cross-platform-development-with-the-portable-class-library.md">Portable Class Library</see>, catch the base class exception, <see cref="T:System.MemberAccessException" />, instead.</span></span>  
  
</para>
          </block>  
  
 <span data-ttu-id="125f0-328">Возникла недопустимая попытка доступа к частному или защищенному методу внутри класса.</span><span class="sxs-lookup"><span data-stu-id="125f0-328">There was an illegal attempt to access a private or protected method inside a class.</span></span></exception>
        <exception cref="T:System.Reflection.TargetInvocationException"><span data-ttu-id="125f0-329">Ошибка при получении значения свойства.</span><span class="sxs-lookup"><span data-stu-id="125f0-329">An error occurred while retrieving the property value.</span></span> <span data-ttu-id="125f0-330">Например, значение индекса, указанное для индексированного свойства, находится вне диапазона.</span><span class="sxs-lookup"><span data-stu-id="125f0-330">For example, an index value specified for an indexed property is out of range.</span></span> <span data-ttu-id="125f0-331">Свойство <see cref="P:System.Exception.InnerException" /> содержит причину данной ошибки.</span><span class="sxs-lookup"><span data-stu-id="125f0-331">The <see cref="P:System.Exception.InnerException" /> property indicates the reason for the error.</span></span></exception>
        <permission cref="T:System.Security.Permissions.ReflectionPermission"><span data-ttu-id="125f0-332">При вызове поздней привязкой, такие как <see cref="M:System.Type.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[])" />.</span><span class="sxs-lookup"><span data-stu-id="125f0-332">when invoked late-bound through mechanisms such as <see cref="M:System.Type.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[])" />.</span></span> <span data-ttu-id="125f0-333">Связанное перечисление: <see cref="F:System.Security.Permissions.ReflectionPermissionFlag.MemberAccess" />.</span><span class="sxs-lookup"><span data-stu-id="125f0-333">Associated enumeration: <see cref="F:System.Security.Permissions.ReflectionPermissionFlag.MemberAccess" />.</span></span></permission>
      </Docs>
    </Member>
    <Member MemberName="GetValue">
      <MemberSignature Language="C#" Value="public abstract object GetValue (object obj, System.Reflection.BindingFlags invokeAttr, System.Reflection.Binder binder, object[] index, System.Globalization.CultureInfo culture);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance object GetValue(object obj, valuetype System.Reflection.BindingFlags invokeAttr, class System.Reflection.Binder binder, object[] index, class System.Globalization.CultureInfo culture) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.PropertyInfo.GetValue(System.Object,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object[],System.Globalization.CultureInfo)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; abstract System::Object ^ GetValue(System::Object ^ obj, System::Reflection::BindingFlags invokeAttr, System::Reflection::Binder ^ binder, cli::array &lt;System::Object ^&gt; ^ index, System::Globalization::CultureInfo ^ culture);" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Runtime.InteropServices._PropertyInfo.GetValue(System.Object,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object[],System.Globalization.CultureInfo)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="obj" Type="System.Object" />
        <Parameter Name="invokeAttr" Type="System.Reflection.BindingFlags" />
        <Parameter Name="binder" Type="System.Reflection.Binder" />
        <Parameter Name="index" Type="System.Object[]" />
        <Parameter Name="culture" Type="System.Globalization.CultureInfo" />
      </Parameters>
      <Docs>
        <param name="obj"><span data-ttu-id="125f0-334">Объект, свойство которого будет возвращено.</span><span class="sxs-lookup"><span data-stu-id="125f0-334">The object whose property value will be returned.</span></span></param>
        <param name="invokeAttr"><span data-ttu-id="125f0-335">Битовая комбинация следующих членов перечисления, определяющих атрибут вызова: <see langword="InvokeMethod" />, <see langword="CreateInstance" />, <see langword="Static" />, <see langword="GetField" />, <see langword="SetField" />, <see langword="GetProperty" /> и <see langword="SetProperty" />.</span><span class="sxs-lookup"><span data-stu-id="125f0-335">A bitwise combination of the following enumeration members that specify the invocation attribute: <see langword="InvokeMethod" />, <see langword="CreateInstance" />, <see langword="Static" />, <see langword="GetField" />, <see langword="SetField" />, <see langword="GetProperty" />, and <see langword="SetProperty" />.</span></span> <span data-ttu-id="125f0-336">Необходимо указать подходящий атрибут вызова.</span><span class="sxs-lookup"><span data-stu-id="125f0-336">You must specify a suitable invocation attribute.</span></span> <span data-ttu-id="125f0-337">Например, чтобы вызвать статический член, установите флаг <see langword="Static" />.</span><span class="sxs-lookup"><span data-stu-id="125f0-337">For example, to invoke a static member, set the <see langword="Static" /> flag.</span></span></param>
        <param name="binder"><span data-ttu-id="125f0-338">Объект, который допускает привязку, приведение типов аргументов, вызов элементов и извлечение объектов <see cref="T:System.Reflection.MemberInfo" /> путем отражения.</span><span class="sxs-lookup"><span data-stu-id="125f0-338">An object that enables the binding, coercion of argument types, invocation of members, and retrieval of <see cref="T:System.Reflection.MemberInfo" /> objects through reflection.</span></span> <span data-ttu-id="125f0-339">Если указан <c>модуль привязки</c> <see langword="null" />, используется модуль привязки по умолчанию.</span><span class="sxs-lookup"><span data-stu-id="125f0-339">If <c>binder</c> is <see langword="null" />, the default binder is used.</span></span></param>
        <param name="index"><span data-ttu-id="125f0-340">Необязательные значения индекса для индексированных свойств.</span><span class="sxs-lookup"><span data-stu-id="125f0-340">Optional index values for indexed properties.</span></span> <span data-ttu-id="125f0-341">Для неиндексированных свойств это значение должно быть равно <see langword="null" />.</span><span class="sxs-lookup"><span data-stu-id="125f0-341">This value should be <see langword="null" /> for non-indexed properties.</span></span></param>
        <param name="culture"><span data-ttu-id="125f0-342">Язык и региональные параметры, для которых должен быть локализован данный ресурс.</span><span class="sxs-lookup"><span data-stu-id="125f0-342">The culture for which the resource is to be localized.</span></span> <span data-ttu-id="125f0-343">Если ресурс не локализован для данного языка и региональных параметров, при поиске соответствия будет последовательно вызываться свойство <see cref="P:System.Globalization.CultureInfo.Parent" />.</span><span class="sxs-lookup"><span data-stu-id="125f0-343">If the resource is not localized for this culture, the <see cref="P:System.Globalization.CultureInfo.Parent" /> property will be called successively in search of a match.</span></span> <span data-ttu-id="125f0-344">Если это значение равно <see langword="null" />, из свойства <see cref="P:System.Globalization.CultureInfo.CurrentUICulture" /> получаются сведения, относящиеся к конкретному языку и региональным параметрам.</span><span class="sxs-lookup"><span data-stu-id="125f0-344">If this value is <see langword="null" />, the culture-specific information is obtained from the <see cref="P:System.Globalization.CultureInfo.CurrentUICulture" /> property.</span></span></param>
        <summary><span data-ttu-id="125f0-345">При переопределении в производном классе возвращает значение свойства заданного объекта, имеющего указанные сведения о привязке, индексе и языке и региональных параметрах.</span><span class="sxs-lookup"><span data-stu-id="125f0-345">When overridden in a derived class, returns the property value of a specified object that has the specified binding, index, and culture-specific information.</span></span></summary>
        <returns><span data-ttu-id="125f0-346">Значение свойства указанного объекта.</span><span class="sxs-lookup"><span data-stu-id="125f0-346">The property value of the specified object.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="125f0-347">Чтобы определить, проиндексировано ли свойство, используйте <xref:System.Reflection.PropertyInfo.GetIndexParameters%2A> метод.</span><span class="sxs-lookup"><span data-stu-id="125f0-347">To determine whether a property is indexed, use the <xref:System.Reflection.PropertyInfo.GetIndexParameters%2A> method.</span></span> <span data-ttu-id="125f0-348">Если результирующий массив содержит 0 (нуль) элементов, свойство не индексируются.</span><span class="sxs-lookup"><span data-stu-id="125f0-348">If the resulting array has 0 (zero) elements, the property is not indexed.</span></span>  
  
 <span data-ttu-id="125f0-349">Так как статические свойства принадлежит к типу, а не отдельные объекты, получения статических свойств, передав `null` в качестве аргумента объекта.</span><span class="sxs-lookup"><span data-stu-id="125f0-349">Because static properties belong to the type, not individual objects, get static properties by passing `null` as the object argument.</span></span> <span data-ttu-id="125f0-350">Например, используйте следующий код, чтобы получить статический `CurrentCulture` свойства `CultureInfo` :</span><span class="sxs-lookup"><span data-stu-id="125f0-350">For example, use the following code to get the static `CurrentCulture` property of `CultureInfo` :</span></span>  
  
```csharp  
PropertyInfo CurCultProp =   
       (typeof(CultureInfo)).GetProperty("CurrentCulture");   
Console.WriteLine("CurrCult: " +  
       CurCultProp.GetValue(null,null));  
```  
  
 <span data-ttu-id="125f0-351">Для использования `GetValue` метод, сначала нужно получить класс `Type`.</span><span class="sxs-lookup"><span data-stu-id="125f0-351">To use the `GetValue` method, first get the class `Type`.</span></span> <span data-ttu-id="125f0-352">Из `Type`, получить `PropertyInfo`.</span><span class="sxs-lookup"><span data-stu-id="125f0-352">From the `Type`, get the `PropertyInfo`.</span></span> <span data-ttu-id="125f0-353">Из `PropertyInfo`, используйте `GetValue` метод.</span><span class="sxs-lookup"><span data-stu-id="125f0-353">From the `PropertyInfo`, use the `GetValue` method.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="125f0-354">Начиная с [!INCLUDE[net_v20sp1_long](~/includes/net-v20sp1-long-md.md)], этот метод можно использовать для доступа к закрытым членам, если вызывающему объекту предоставлены <xref:System.Security.Permissions.ReflectionPermission> с <xref:System.Security.Permissions.ReflectionPermissionFlag.RestrictedMemberAccess?displayProperty=nameWithType> и отметки Если набор прав, не являющиеся открытыми члены ограничена вызывающего набором разрешений или подмножество его.</span><span class="sxs-lookup"><span data-stu-id="125f0-354">Starting with the [!INCLUDE[net_v20sp1_long](~/includes/net-v20sp1-long-md.md)], this method can be used to access non-public members if the caller has been granted <xref:System.Security.Permissions.ReflectionPermission> with the <xref:System.Security.Permissions.ReflectionPermissionFlag.RestrictedMemberAccess?displayProperty=nameWithType> flag and if the grant set of the non-public members is restricted to the caller’s grant set, or a subset thereof.</span></span> <span data-ttu-id="125f0-355">(См. [рекомендации по безопасности для отражения](~/docs/framework/reflection-and-codedom/security-considerations-for-reflection.md).)</span><span class="sxs-lookup"><span data-stu-id="125f0-355">(See [Security Considerations for Reflection](~/docs/framework/reflection-and-codedom/security-considerations-for-reflection.md).)</span></span>  
>   
>  <span data-ttu-id="125f0-356">Для применения этих функциональных возможностей приложение должно использовать [!INCLUDE[net_v35_long](~/includes/net-v35-long-md.md)] или более поздние версии.</span><span class="sxs-lookup"><span data-stu-id="125f0-356">To use this functionality, your application should target the [!INCLUDE[net_v35_long](~/includes/net-v35-long-md.md)] or later.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="125f0-357">Массив <paramref name="index" /> не содержит необходимого типа аргументов.</span><span class="sxs-lookup"><span data-stu-id="125f0-357">The <paramref name="index" /> array does not contain the type of arguments needed.</span></span>  
  
 <span data-ttu-id="125f0-358">- или -</span><span class="sxs-lookup"><span data-stu-id="125f0-358">-or-</span></span>  
  
 <span data-ttu-id="125f0-359">Не найден метод доступа <see langword="get" /> свойства.</span><span class="sxs-lookup"><span data-stu-id="125f0-359">The property's <see langword="get" /> accessor is not found.</span></span></exception>
        <exception cref="T:System.Reflection.TargetException"><span data-ttu-id="125f0-360">Объект не соответствует целевому типу, или свойство является свойством экземпляра, но <paramref name="obj" /> имеет значение <see langword="null" />.</span><span class="sxs-lookup"><span data-stu-id="125f0-360">The object does not match the target type, or a property is an instance property but <paramref name="obj" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.Reflection.TargetParameterCountException"><span data-ttu-id="125f0-361">Число параметров в <paramref name="index" /> не соответствует числу параметров, принимаемых индексированным свойством.</span><span class="sxs-lookup"><span data-stu-id="125f0-361">The number of parameters in <paramref name="index" /> does not match the number of parameters the indexed property takes.</span></span></exception>
        <exception cref="T:System.MethodAccessException"><span data-ttu-id="125f0-362">Возникла недопустимая попытка доступа к частному или защищенному методу внутри класса.</span><span class="sxs-lookup"><span data-stu-id="125f0-362">There was an illegal attempt to access a private or protected method inside a class.</span></span></exception>
        <exception cref="T:System.Reflection.TargetInvocationException"><span data-ttu-id="125f0-363">Ошибка при получении значения свойства.</span><span class="sxs-lookup"><span data-stu-id="125f0-363">An error occurred while retrieving the property value.</span></span> <span data-ttu-id="125f0-364">Например, значение индекса, указанное для индексированного свойства, находится вне диапазона.</span><span class="sxs-lookup"><span data-stu-id="125f0-364">For example, an index value specified for an indexed property is out of range.</span></span> <span data-ttu-id="125f0-365">Свойство <see cref="P:System.Exception.InnerException" /> содержит причину данной ошибки.</span><span class="sxs-lookup"><span data-stu-id="125f0-365">The <see cref="P:System.Exception.InnerException" /> property indicates the reason for the error.</span></span></exception>
        <permission cref="T:System.Security.Permissions.ReflectionPermission"><span data-ttu-id="125f0-366">При вызове поздней привязкой, такие как <see cref="M:System.Type.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[])" />.</span><span class="sxs-lookup"><span data-stu-id="125f0-366">when invoked late-bound through mechanisms such as <see cref="M:System.Type.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[])" />.</span></span> <span data-ttu-id="125f0-367">Связанное перечисление: <see cref="F:System.Security.Permissions.ReflectionPermissionFlag.MemberAccess" />.</span><span class="sxs-lookup"><span data-stu-id="125f0-367">Associated enumeration: <see cref="F:System.Security.Permissions.ReflectionPermissionFlag.MemberAccess" />.</span></span></permission>
        <altmember cref="T:System.Reflection.Binder" />
        <altmember cref="T:System.Reflection.BindingFlags" />
        <altmember cref="T:System.Globalization.CultureInfo" />
      </Docs>
    </Member>
    <Member MemberName="IsSpecialName">
      <MemberSignature Language="C#" Value="public bool IsSpecialName { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsSpecialName" />
      <MemberSignature Language="DocId" Value="P:System.Reflection.PropertyInfo.IsSpecialName" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsSpecialName As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsSpecialName { bool get(); };" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Runtime.InteropServices._PropertyInfo.IsSpecialName</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Reflection</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="125f0-368">Возвращает значение, указывающее, является ли свойство специальным именем.</span><span class="sxs-lookup"><span data-stu-id="125f0-368">Gets a value indicating whether the property is the special name.</span></span></summary>
        <value>
          <span data-ttu-id="125f0-369">Значение <see langword="true" />, если свойство является особым именем; в противном случае — значение <see langword="false" />.</span><span class="sxs-lookup"><span data-stu-id="125f0-369"><see langword="true" /> if this property is the special name; otherwise, <see langword="false" />.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="125f0-370">`SpecialName` Бит равен отметить члены, которые обрабатываются особым образом, в некоторых компиляторах (например, к свойствам и методы перегрузки операторов).</span><span class="sxs-lookup"><span data-stu-id="125f0-370">The `SpecialName` bit is set to flag members that are treated in a special way by some compilers (such as property accessors and operator overloading methods).</span></span>  
  
 <span data-ttu-id="125f0-371">Для получения `IsSpecialName` свойство, сначала нужно получить класс `Type`.</span><span class="sxs-lookup"><span data-stu-id="125f0-371">To get the `IsSpecialName` property, first get the class `Type`.</span></span> <span data-ttu-id="125f0-372">Из `Type`, получить `PropertyInfo`.</span><span class="sxs-lookup"><span data-stu-id="125f0-372">From the `Type`, get the `PropertyInfo`.</span></span> <span data-ttu-id="125f0-373">Из `PropertyInfo`, получить `IsSpecialName` значение.</span><span class="sxs-lookup"><span data-stu-id="125f0-373">From the `PropertyInfo`, get the `IsSpecialName` value.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="MemberType">
      <MemberSignature Language="C#" Value="public override System.Reflection.MemberTypes MemberType { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Reflection.MemberTypes MemberType" />
      <MemberSignature Language="DocId" Value="P:System.Reflection.PropertyInfo.MemberType" />
      <MemberSignature Language="VB.NET" Value="Public Overrides ReadOnly Property MemberType As MemberTypes" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property System::Reflection::MemberTypes MemberType { System::Reflection::MemberTypes get(); };" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Runtime.InteropServices._PropertyInfo.MemberType</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Reflection</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.MemberTypes</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="125f0-374">Возвращает значение <see cref="T:System.Reflection.MemberTypes" />, указывающее, что этот член является свойством.</span><span class="sxs-lookup"><span data-stu-id="125f0-374">Gets a <see cref="T:System.Reflection.MemberTypes" /> value indicating that this member is a property.</span></span></summary>
        <value><span data-ttu-id="125f0-375">Значение <see cref="T:System.Reflection.MemberTypes" />, указывающее, что этот член является свойством.</span><span class="sxs-lookup"><span data-stu-id="125f0-375">A <see cref="T:System.Reflection.MemberTypes" /> value indicating that this member is a property.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="125f0-376">Это свойство переопределяет <xref:System.Reflection.MemberInfo.MemberType%2A>.</span><span class="sxs-lookup"><span data-stu-id="125f0-376">This property overrides <xref:System.Reflection.MemberInfo.MemberType%2A>.</span></span> <span data-ttu-id="125f0-377">Таким образом, при рассмотрении набор <xref:System.Reflection.MemberInfo> объектов — например, массив, возвращаемый методом <xref:System.Type.GetMembers%2A> — <xref:System.Reflection.MemberInfo.MemberType%2A> возвращает <xref:System.Reflection.MemberTypes.Property> только в том случае, когда данный элемент является свойством.</span><span class="sxs-lookup"><span data-stu-id="125f0-377">Therefore, when you examine a set of <xref:System.Reflection.MemberInfo> objects — for example, the array returned by <xref:System.Type.GetMembers%2A> — the <xref:System.Reflection.MemberInfo.MemberType%2A> property returns <xref:System.Reflection.MemberTypes.Property> only when a given member is a property.</span></span>  
  
 <span data-ttu-id="125f0-378">`MemberType` является производным классом класса `MemberInfo` и задает тип данного члена.</span><span class="sxs-lookup"><span data-stu-id="125f0-378">`MemberType` is a derived class of `MemberInfo` and specifies the type of member this is.</span></span> <span data-ttu-id="125f0-379">Типы элементов, конструкторы, свойства, поля и методы.</span><span class="sxs-lookup"><span data-stu-id="125f0-379">Member types are constructors, properties, fields, and methods.</span></span> <span data-ttu-id="125f0-380">Так как это `PropertyInfo` , возвращаемый тип является свойством.</span><span class="sxs-lookup"><span data-stu-id="125f0-380">Since this is a `PropertyInfo` property, the returned type is a property.</span></span>  
  
 <span data-ttu-id="125f0-381">Для получения `MemberType` свойство, сначала нужно получить класс `Type`.</span><span class="sxs-lookup"><span data-stu-id="125f0-381">To get the `MemberType` property, first get the class `Type`.</span></span> <span data-ttu-id="125f0-382">Из `Type`, получить `PropertyInfo`.</span><span class="sxs-lookup"><span data-stu-id="125f0-382">From the `Type`, get the `PropertyInfo`.</span></span> <span data-ttu-id="125f0-383">Из `PropertyInfo`, получить `MemberType` значение.</span><span class="sxs-lookup"><span data-stu-id="125f0-383">From the `PropertyInfo`, get the `MemberType` value.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="125f0-384">Следующий пример отображает тип указанного элемента.</span><span class="sxs-lookup"><span data-stu-id="125f0-384">The following example displays the type of the specified member.</span></span>  
  
 [!code-cpp[Classic PropertyInfo.MemberType Example#1](~/samples/snippets/cpp/VS_Snippets_CLR_Classic/classic PropertyInfo.MemberType Example/CPP/source.cpp#1)]
 [!code-csharp[Classic PropertyInfo.MemberType Example#1](~/samples/snippets/csharp/VS_Snippets_CLR_Classic/classic PropertyInfo.MemberType Example/CS/source.cs#1)]
 [!code-vb[Classic PropertyInfo.MemberType Example#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_Classic/classic PropertyInfo.MemberType Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="op_Equality">
      <MemberSignature Language="C#" Value="public static bool operator == (System.Reflection.PropertyInfo left, System.Reflection.PropertyInfo right);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig specialname bool op_Equality(class System.Reflection.PropertyInfo left, class System.Reflection.PropertyInfo right) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.PropertyInfo.op_Equality(System.Reflection.PropertyInfo,System.Reflection.PropertyInfo)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Operator == (left As PropertyInfo, right As PropertyInfo) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool operator ==(System::Reflection::PropertyInfo ^ left, System::Reflection::PropertyInfo ^ right);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="left" Type="System.Reflection.PropertyInfo" />
        <Parameter Name="right" Type="System.Reflection.PropertyInfo" />
      </Parameters>
      <Docs>
        <param name="left"><span data-ttu-id="125f0-385">Первый из сравниваемых объектов.</span><span class="sxs-lookup"><span data-stu-id="125f0-385">The first object to compare.</span></span></param>
        <param name="right"><span data-ttu-id="125f0-386">Второй из сравниваемых объектов.</span><span class="sxs-lookup"><span data-stu-id="125f0-386">The second object to compare.</span></span></param>
        <summary><span data-ttu-id="125f0-387">Определение равенства двух объектов <see cref="T:System.Reflection.PropertyInfo" />.</span><span class="sxs-lookup"><span data-stu-id="125f0-387">Indicates whether two <see cref="T:System.Reflection.PropertyInfo" /> objects are equal.</span></span></summary>
        <returns>
          <span data-ttu-id="125f0-388"><see langword="true" />, если значения параметров <paramref name="left" /> и <paramref name="right" /> равны; в противном случае — <see langword="false" />.</span><span class="sxs-lookup"><span data-stu-id="125f0-388"><see langword="true" /> if <paramref name="left" /> is equal to <paramref name="right" />; otherwise, <see langword="false" />.</span></span></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="op_Inequality">
      <MemberSignature Language="C#" Value="public static bool operator != (System.Reflection.PropertyInfo left, System.Reflection.PropertyInfo right);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig specialname bool op_Inequality(class System.Reflection.PropertyInfo left, class System.Reflection.PropertyInfo right) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.PropertyInfo.op_Inequality(System.Reflection.PropertyInfo,System.Reflection.PropertyInfo)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Operator != (left As PropertyInfo, right As PropertyInfo) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool operator !=(System::Reflection::PropertyInfo ^ left, System::Reflection::PropertyInfo ^ right);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="left" Type="System.Reflection.PropertyInfo" />
        <Parameter Name="right" Type="System.Reflection.PropertyInfo" />
      </Parameters>
      <Docs>
        <param name="left"><span data-ttu-id="125f0-389">Первый из сравниваемых объектов.</span><span class="sxs-lookup"><span data-stu-id="125f0-389">The first object to compare.</span></span></param>
        <param name="right"><span data-ttu-id="125f0-390">Второй из сравниваемых объектов.</span><span class="sxs-lookup"><span data-stu-id="125f0-390">The second object to compare.</span></span></param>
        <summary><span data-ttu-id="125f0-391">Определяет неравенство двух объектов <see cref="T:System.Reflection.PropertyInfo" />.</span><span class="sxs-lookup"><span data-stu-id="125f0-391">Indicates whether two <see cref="T:System.Reflection.PropertyInfo" /> objects are not equal.</span></span></summary>
        <returns>
          <span data-ttu-id="125f0-392"><see langword="true" />, если значения <paramref name="left" /> и <paramref name="right" /> не равны; в противном случае — <see langword="false" />.</span><span class="sxs-lookup"><span data-stu-id="125f0-392"><see langword="true" /> if <paramref name="left" /> is not equal to <paramref name="right" />; otherwise, <see langword="false" />.</span></span></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="PropertyType">
      <MemberSignature Language="C#" Value="public abstract Type PropertyType { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Type PropertyType" />
      <MemberSignature Language="DocId" Value="P:System.Reflection.PropertyInfo.PropertyType" />
      <MemberSignature Language="VB.NET" Value="Public MustOverride ReadOnly Property PropertyType As Type" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; abstract property Type ^ PropertyType { Type ^ get(); };" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Runtime.InteropServices._PropertyInfo.PropertyType</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Reflection</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Type</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="125f0-393">Возвращает тип этого свойства.</span><span class="sxs-lookup"><span data-stu-id="125f0-393">Gets the type of this property.</span></span></summary>
        <value><span data-ttu-id="125f0-394">Тип этого свойства.</span><span class="sxs-lookup"><span data-stu-id="125f0-394">The type of this property.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="125f0-395">Чтобы определить тип определенное свойство, выполните следующие действия:</span><span class="sxs-lookup"><span data-stu-id="125f0-395">To determine the type of a particular property, do the following:</span></span>  
  
1.  <span data-ttu-id="125f0-396">Получить <xref:System.Type> , представляющий тип (класс или структура), содержащий свойство.</span><span class="sxs-lookup"><span data-stu-id="125f0-396">Get a <xref:System.Type> object that represents the type (the class or structure) that contains the property.</span></span> <span data-ttu-id="125f0-397">Если вы работаете с объектом (экземпляр типа), можно вызвать его <xref:System.Object.GetType%2A> метод.</span><span class="sxs-lookup"><span data-stu-id="125f0-397">If you are working with an object (an instance of a type), you can call its <xref:System.Object.GetType%2A> method.</span></span> <span data-ttu-id="125f0-398">В противном случае можно использовать оператор C# или Visual Basic оператор, как показано в примере.</span><span class="sxs-lookup"><span data-stu-id="125f0-398">Otherwise, you can use the C#  operator or the Visual Basic  operator, as the example illustrates.</span></span>  
  
2.  <span data-ttu-id="125f0-399">Получить <xref:System.Reflection.PropertyInfo> , представляющий свойство, в котором вы заинтересованы.</span><span class="sxs-lookup"><span data-stu-id="125f0-399">Get a <xref:System.Reflection.PropertyInfo> object that represents the property in which you're interested.</span></span> <span data-ttu-id="125f0-400">Это можно сделать путем получения массив все свойства из <xref:System.Type.GetProperties%2A?displayProperty=nameWithType> метода и затем итерация элементов в массиве, или можно извлечь <xref:System.Reflection.PropertyInfo> объект, представляющий свойство непосредственно, путем вызова <xref:System.Type.GetProperty%2A?displayProperty=nameWithType> метод и указывая Имя свойства.</span><span class="sxs-lookup"><span data-stu-id="125f0-400">You can do this by getting an array of all properties from the <xref:System.Type.GetProperties%2A?displayProperty=nameWithType> method and then iterating the elements in the array, or you can retrieve the <xref:System.Reflection.PropertyInfo> object that represents the property directly by calling the <xref:System.Type.GetProperty%2A?displayProperty=nameWithType> method and specifying the property name.</span></span>  
  
3.  <span data-ttu-id="125f0-401">Извлечь значение <xref:System.Reflection.PropertyInfo.PropertyType%2A> свойство из <xref:System.Reflection.PropertyInfo> объекта.</span><span class="sxs-lookup"><span data-stu-id="125f0-401">Retrieve the value of the <xref:System.Reflection.PropertyInfo.PropertyType%2A> property from the <xref:System.Reflection.PropertyInfo> object.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="125f0-402">В следующем примере определяется `Employee` класс, который имеет пять свойств.</span><span class="sxs-lookup"><span data-stu-id="125f0-402">The following example defines an `Employee` class that has five properties.</span></span> <span data-ttu-id="125f0-403">Оно затем использует извлекает массив <xref:System.Reflection.PropertyInfo> объекты, представляющие эти свойства и отображает имя и тип каждого.</span><span class="sxs-lookup"><span data-stu-id="125f0-403">It then uses retrieves an array of <xref:System.Reflection.PropertyInfo> objects that represent those properties and displays the name and type of each.</span></span>  
  
 [!code-csharp[System.Reflection.PropertyInfo.PropertyType#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.reflection.propertyinfo.propertytype/cs/propertytype1.cs#1)]
 [!code-vb[System.Reflection.PropertyInfo.PropertyType#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.reflection.propertyinfo.propertytype/vb/propertytype1.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="SetMethod">
      <MemberSignature Language="C#" Value="public virtual System.Reflection.MethodInfo SetMethod { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Reflection.MethodInfo SetMethod" />
      <MemberSignature Language="DocId" Value="P:System.Reflection.PropertyInfo.SetMethod" />
      <MemberSignature Language="VB.NET" Value="Public Overridable ReadOnly Property SetMethod As MethodInfo" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property System::Reflection::MethodInfo ^ SetMethod { System::Reflection::MethodInfo ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.MethodInfo</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="125f0-404">Получает метод доступа <see langword="set" /> для этого свойства.</span><span class="sxs-lookup"><span data-stu-id="125f0-404">Gets the <see langword="set" /> accessor for this property.</span></span></summary>
        <value><span data-ttu-id="125f0-405"><see langword="set" /> Для этого свойства или <see langword="null" /> Если свойство доступно только для чтения.</span><span class="sxs-lookup"><span data-stu-id="125f0-405">The <see langword="set" /> accessor for this property, or <see langword="null" /> if the property is read-only.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="125f0-406">Получение значения <xref:System.Reflection.PropertyInfo.SetMethod%2A> свойство эквивалентно вызову <xref:System.Reflection.PropertyInfo.GetSetMethod%28System.Boolean%29> метода со значением `true` для `nonPublic` аргумент.</span><span class="sxs-lookup"><span data-stu-id="125f0-406">Retrieving the value of the <xref:System.Reflection.PropertyInfo.SetMethod%2A> property is equivalent to calling the <xref:System.Reflection.PropertyInfo.GetSetMethod%28System.Boolean%29> method with a value of `true` for the `nonPublic` argument.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Reflection.PropertyInfo.GetMethod" />
        <altmember cref="P:System.Reflection.PropertyInfo.CanWrite" />
      </Docs>
    </Member>
    <MemberGroup MemberName="SetValue">
      <AssemblyInfo>
        <AssemblyName>System.Reflection</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="125f0-407">Задает значение свойства для указанного объекта.</span><span class="sxs-lookup"><span data-stu-id="125f0-407">Sets the property value for a specified object.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="SetValue">
      <MemberSignature Language="C#" Value="public void SetValue (object obj, object value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void SetValue(object obj, object value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.PropertyInfo.SetValue(System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Sub SetValue (obj As Object, value As Object)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void SetValue(System::Object ^ obj, System::Object ^ value);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Diagnostics.DebuggerStepThrough</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="obj" Type="System.Object" />
        <Parameter Name="value" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="obj"><span data-ttu-id="125f0-408">Объект, значение свойства которого будет установлено.</span><span class="sxs-lookup"><span data-stu-id="125f0-408">The object whose property value will be set.</span></span></param>
        <param name="value"><span data-ttu-id="125f0-409">Новое значение свойства.</span><span class="sxs-lookup"><span data-stu-id="125f0-409">The new property value.</span></span></param>
        <summary><span data-ttu-id="125f0-410">Задает значение свойства для указанного объекта.</span><span class="sxs-lookup"><span data-stu-id="125f0-410">Sets the property value of a specified object.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="125f0-411"><xref:System.Reflection.PropertyInfo.SetValue%28System.Object%2CSystem.Object%29> Перегрузка задает значение свойства не проиндексированы.</span><span class="sxs-lookup"><span data-stu-id="125f0-411">The <xref:System.Reflection.PropertyInfo.SetValue%28System.Object%2CSystem.Object%29> overload sets the value of a non-indexed property.</span></span> <span data-ttu-id="125f0-412">Чтобы определить, проиндексировано ли свойство, вызовите <xref:System.Reflection.PropertyInfo.GetIndexParameters%2A> метод.</span><span class="sxs-lookup"><span data-stu-id="125f0-412">To determine whether a property is indexed, call the <xref:System.Reflection.PropertyInfo.GetIndexParameters%2A> method.</span></span> <span data-ttu-id="125f0-413">Если результирующий массив содержит 0 (нуль) элементов, свойство не индексируются.</span><span class="sxs-lookup"><span data-stu-id="125f0-413">If the resulting array has 0 (zero) elements, the property is not indexed.</span></span> <span data-ttu-id="125f0-414">Чтобы задать значение индексированного свойства, вызовите <xref:System.Reflection.PropertyInfo.SetValue%28System.Object%2CSystem.Object%2CSystem.Object%5B%5D%29> перегрузки.</span><span class="sxs-lookup"><span data-stu-id="125f0-414">To set the value of an indexed property, call the <xref:System.Reflection.PropertyInfo.SetValue%28System.Object%2CSystem.Object%2CSystem.Object%5B%5D%29> overload.</span></span>  
  
 <span data-ttu-id="125f0-415">Если тип свойства этого <xref:System.Reflection.PropertyInfo> объект является типом значения и `value` является `null`, свойство будет присвоено значение по умолчанию для этого типа.</span><span class="sxs-lookup"><span data-stu-id="125f0-415">If the property type of this <xref:System.Reflection.PropertyInfo> object is a value type and `value` is `null`, the property will be set to the default value for that type.</span></span>  
  
 <span data-ttu-id="125f0-416">Это удобный метод, который вызывает реализацию среды абстрактного <xref:System.Reflection.PropertyInfo.SetValue%28System.Object%2CSystem.Object%2CSystem.Reflection.BindingFlags%2CSystem.Reflection.Binder%2CSystem.Object%5B%5D%2CSystem.Globalization.CultureInfo%29> метод, указав <xref:System.Reflection.BindingFlags.Default?displayProperty=nameWithType> для `BindingFlags` параметр `null` для `Binder`, `null` для `Object[]`и `null` для `CultureInfo`.</span><span class="sxs-lookup"><span data-stu-id="125f0-416">This is a convenience method that calls the runtime implementation of the abstract <xref:System.Reflection.PropertyInfo.SetValue%28System.Object%2CSystem.Object%2CSystem.Reflection.BindingFlags%2CSystem.Reflection.Binder%2CSystem.Object%5B%5D%2CSystem.Globalization.CultureInfo%29> method, specifying <xref:System.Reflection.BindingFlags.Default?displayProperty=nameWithType> for the `BindingFlags` parameter, `null` for `Binder`, `null` for `Object[]`, and `null` for `CultureInfo`.</span></span>  
  
 <span data-ttu-id="125f0-417">Для использования <xref:System.Reflection.PropertyInfo.SetValue%2A> метод, первый get <xref:System.Type> объект, представляющий класс.</span><span class="sxs-lookup"><span data-stu-id="125f0-417">To use the <xref:System.Reflection.PropertyInfo.SetValue%2A> method, first get a <xref:System.Type> object that represents the class.</span></span> <span data-ttu-id="125f0-418">Из <xref:System.Type>, получить <xref:System.Reflection.PropertyInfo> объекта.</span><span class="sxs-lookup"><span data-stu-id="125f0-418">From the <xref:System.Type>, get the <xref:System.Reflection.PropertyInfo> object.</span></span> <span data-ttu-id="125f0-419">Из <xref:System.Reflection.PropertyInfo> , вызовите <xref:System.Reflection.PropertyInfo.SetValue%2A> метод.</span><span class="sxs-lookup"><span data-stu-id="125f0-419">From the <xref:System.Reflection.PropertyInfo> object, call the <xref:System.Reflection.PropertyInfo.SetValue%2A> method.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="125f0-420">Начиная с [!INCLUDE[net_v20sp1_long](~/includes/net-v20sp1-long-md.md)], этот метод можно использовать для доступа к закрытым членам, если вызывающему объекту предоставлены <xref:System.Security.Permissions.ReflectionPermission> с <xref:System.Security.Permissions.ReflectionPermissionFlag.RestrictedMemberAccess?displayProperty=nameWithType> и отметки Если набор прав, не являющиеся открытыми члены ограничена вызывающего набором разрешений или подмножество его.</span><span class="sxs-lookup"><span data-stu-id="125f0-420">Starting with the [!INCLUDE[net_v20sp1_long](~/includes/net-v20sp1-long-md.md)], this method can be used to access non-public members if the caller has been granted <xref:System.Security.Permissions.ReflectionPermission> with the <xref:System.Security.Permissions.ReflectionPermissionFlag.RestrictedMemberAccess?displayProperty=nameWithType> flag and if the grant set of the non-public members is restricted to the caller’s grant set, or a subset thereof.</span></span> <span data-ttu-id="125f0-421">(См. [рекомендации по безопасности для отражения](~/docs/framework/reflection-and-codedom/security-considerations-for-reflection.md).)</span><span class="sxs-lookup"><span data-stu-id="125f0-421">(See [Security Considerations for Reflection](~/docs/framework/reflection-and-codedom/security-considerations-for-reflection.md).)</span></span>  
>   
>  <span data-ttu-id="125f0-422">Для применения этих функциональных возможностей приложение должно использовать [!INCLUDE[net_v35_long](~/includes/net-v35-long-md.md)] или более поздние версии.</span><span class="sxs-lookup"><span data-stu-id="125f0-422">To use this functionality, your application should target the [!INCLUDE[net_v35_long](~/includes/net-v35-long-md.md)] or later.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="125f0-423">В следующем примере объявляется класс с именем `Example` с одним `static` (`Shared` в Visual Basic) и один экземпляр свойства.</span><span class="sxs-lookup"><span data-stu-id="125f0-423">The following example declares a class named `Example` with one `static` (`Shared` in Visual Basic) and one instance property.</span></span> <span data-ttu-id="125f0-424">В этом примере <xref:System.Reflection.PropertyInfo.SetValue%28System.Object%2CSystem.Object%29> метод, чтобы изменить исходное свойство значениям и отображающее исходных и конечных значений.</span><span class="sxs-lookup"><span data-stu-id="125f0-424">The example uses the <xref:System.Reflection.PropertyInfo.SetValue%28System.Object%2CSystem.Object%29> method to change the original property values and displays the original and final values.</span></span>  
  
 [!code-cpp[PropertyInfo.SetValue#2](~/samples/snippets/cpp/VS_Snippets_CLR/PropertyInfo.SetValue/cpp/example2.cpp#2)]
 [!code-csharp[PropertyInfo.SetValue#2](~/samples/snippets/csharp/VS_Snippets_CLR/PropertyInfo.SetValue/cs/example2.cs#2)]
 [!code-vb[PropertyInfo.SetValue#2](~/samples/snippets/visualbasic/VS_Snippets_CLR/PropertyInfo.SetValue/vb/example2.vb#2)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="125f0-425">Не найден метод доступа <see langword="set" /> свойства.</span><span class="sxs-lookup"><span data-stu-id="125f0-425">The property's <see langword="set" /> accessor is not found.</span></span>  
  
 <span data-ttu-id="125f0-426">- или -</span><span class="sxs-lookup"><span data-stu-id="125f0-426">-or-</span></span>  
  
 <span data-ttu-id="125f0-427"><paramref name="value" /> невозможно преобразовать в тип <see cref="P:System.Reflection.PropertyInfo.PropertyType" />.</span><span class="sxs-lookup"><span data-stu-id="125f0-427"><paramref name="value" /> cannot be converted to the type of <see cref="P:System.Reflection.PropertyInfo.PropertyType" />.</span></span></exception>
        <exception cref="T:System.Reflection.TargetException">
          <block subset="none" type="note">
            <para>  
 <span data-ttu-id="125f0-428">Вместо этого в <see href="https://msdn.microsoft.com/library/windows/apps/br230232(v=vs.110).aspx">.NET для приложений Магазина Windows</see> или в <see href="~/docs/standard/cross-platform/cross-platform-development-with-the-portable-class-library.md">переносимой библиотеке классов</see> перехватите исключение <see cref="T:System.Exception" />.</span><span class="sxs-lookup"><span data-stu-id="125f0-428">In the <see href="https://msdn.microsoft.com/library/windows/apps/br230232(v=vs.110).aspx">.NET for Windows Store apps</see> or the <see href="~/docs/standard/cross-platform/cross-platform-development-with-the-portable-class-library.md">Portable Class Library</see>, catch <see cref="T:System.Exception" /> instead.</span></span>  
  
</para>
          </block>  
  
 <span data-ttu-id="125f0-429">Тип <paramref name="obj" /> не соответствует целевому типу, или свойство является свойством экземпляра, но <paramref name="obj" /> равен <see langword="null" />.</span><span class="sxs-lookup"><span data-stu-id="125f0-429">The type of <paramref name="obj" /> does not match the target type, or a property is an instance property but <paramref name="obj" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.MethodAccessException">
          <block subset="none" type="note">
            <para>  
 <span data-ttu-id="125f0-430">Вместо этого в <see href="https://msdn.microsoft.com/library/windows/apps/br230232(v=vs.110).aspx">.NET для приложений Магазина Windows</see> или в <see href="~/docs/standard/cross-platform/cross-platform-development-with-the-portable-class-library.md">переносимой библиотеке классов</see> перехватите исключение базового класса <see cref="T:System.MemberAccessException" />.</span><span class="sxs-lookup"><span data-stu-id="125f0-430">In the <see href="https://msdn.microsoft.com/library/windows/apps/br230232(v=vs.110).aspx">.NET for Windows Store apps</see> or the <see href="~/docs/standard/cross-platform/cross-platform-development-with-the-portable-class-library.md">Portable Class Library</see>, catch the base class exception, <see cref="T:System.MemberAccessException" />, instead.</span></span>  
  
</para>
          </block>  
  
 <span data-ttu-id="125f0-431">Возникла недопустимая попытка доступа к частному или защищенному методу внутри класса.</span><span class="sxs-lookup"><span data-stu-id="125f0-431">There was an illegal attempt to access a private or protected method inside a class.</span></span></exception>
        <exception cref="T:System.Reflection.TargetInvocationException"><span data-ttu-id="125f0-432">Ошибка при установке значения свойства.</span><span class="sxs-lookup"><span data-stu-id="125f0-432">An error occurred while setting the property value.</span></span> <span data-ttu-id="125f0-433">Свойство <see cref="P:System.Exception.InnerException" /> содержит причину данной ошибки.</span><span class="sxs-lookup"><span data-stu-id="125f0-433">The <see cref="P:System.Exception.InnerException" /> property indicates the reason for the error.</span></span></exception>
        <permission cref="T:System.Security.Permissions.ReflectionPermission"><span data-ttu-id="125f0-434">При вызове поздней привязкой, такие как <see cref="M:System.Type.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[])" />.</span><span class="sxs-lookup"><span data-stu-id="125f0-434">when invoked late-bound through mechanisms such as <see cref="M:System.Type.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[])" />.</span></span> <span data-ttu-id="125f0-435">Связанное перечисление: <see cref="F:System.Security.Permissions.ReflectionPermissionFlag.MemberAccess" />.</span><span class="sxs-lookup"><span data-stu-id="125f0-435">Associated enumeration: <see cref="F:System.Security.Permissions.ReflectionPermissionFlag.MemberAccess" />.</span></span></permission>
      </Docs>
    </Member>
    <Member MemberName="SetValue">
      <MemberSignature Language="C#" Value="public virtual void SetValue (object obj, object value, object[] index);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void SetValue(object obj, object value, object[] index) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.PropertyInfo.SetValue(System.Object,System.Object,System.Object[])" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub SetValue (obj As Object, value As Object, index As Object())" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void SetValue(System::Object ^ obj, System::Object ^ value, cli::array &lt;System::Object ^&gt; ^ index);" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Runtime.InteropServices._PropertyInfo.SetValue(System.Object,System.Object,System.Object[])</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Reflection</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Diagnostics.DebuggerStepThrough</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="obj" Type="System.Object" />
        <Parameter Name="value" Type="System.Object" />
        <Parameter Name="index" Type="System.Object[]" />
      </Parameters>
      <Docs>
        <param name="obj"><span data-ttu-id="125f0-436">Объект, значение свойства которого будет установлено.</span><span class="sxs-lookup"><span data-stu-id="125f0-436">The object whose property value will be set.</span></span></param>
        <param name="value"><span data-ttu-id="125f0-437">Новое значение свойства.</span><span class="sxs-lookup"><span data-stu-id="125f0-437">The new property value.</span></span></param>
        <param name="index"><span data-ttu-id="125f0-438">Необязательные значения индекса для индексированных свойств.</span><span class="sxs-lookup"><span data-stu-id="125f0-438">Optional index values for indexed properties.</span></span> <span data-ttu-id="125f0-439">Для неиндексированных свойств это значение должно быть равно <see langword="null" />.</span><span class="sxs-lookup"><span data-stu-id="125f0-439">This value should be <see langword="null" /> for non-indexed properties.</span></span></param>
        <summary><span data-ttu-id="125f0-440">Задает значение свойства заданного объекта с дополнительными значениями индекса для индексированных свойств.</span><span class="sxs-lookup"><span data-stu-id="125f0-440">Sets the property value of a specified object with optional index values for index properties.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="125f0-441">Если этот <xref:System.Reflection.PropertyInfo> объект является типом значения и `value` — `null`, то свойство будет присвоено значение по умолчанию для этого типа.</span><span class="sxs-lookup"><span data-stu-id="125f0-441">If this <xref:System.Reflection.PropertyInfo> object is a value type and `value` is `null`, then the property will be set to the default value for that type.</span></span>  
  
 <span data-ttu-id="125f0-442">Чтобы определить, проиндексировано ли свойство, используйте <xref:System.Reflection.PropertyInfo.GetIndexParameters%2A> метод.</span><span class="sxs-lookup"><span data-stu-id="125f0-442">To determine whether a property is indexed, use the <xref:System.Reflection.PropertyInfo.GetIndexParameters%2A> method.</span></span> <span data-ttu-id="125f0-443">Если результирующий массив содержит 0 (нуль) элементов, свойство не индексируются.</span><span class="sxs-lookup"><span data-stu-id="125f0-443">If the resulting array has 0 (zero) elements, the property is not indexed.</span></span>  
  
 <span data-ttu-id="125f0-444">Это удобный метод, который вызывает реализацию среды абстрактного <xref:System.Reflection.PropertyInfo.SetValue%28System.Object%2CSystem.Object%2CSystem.Reflection.BindingFlags%2CSystem.Reflection.Binder%2CSystem.Object%5B%5D%2CSystem.Globalization.CultureInfo%29> метод, указав <xref:System.Reflection.BindingFlags.Default?displayProperty=nameWithType> для `BindingFlags` параметр `null` для `Binder`, и `null` для `CultureInfo`.</span><span class="sxs-lookup"><span data-stu-id="125f0-444">This is a convenience method that calls the runtime implementation of the abstract <xref:System.Reflection.PropertyInfo.SetValue%28System.Object%2CSystem.Object%2CSystem.Reflection.BindingFlags%2CSystem.Reflection.Binder%2CSystem.Object%5B%5D%2CSystem.Globalization.CultureInfo%29> method, specifying <xref:System.Reflection.BindingFlags.Default?displayProperty=nameWithType> for the `BindingFlags` parameter, `null` for `Binder`, and `null` for `CultureInfo`.</span></span>  
  
 <span data-ttu-id="125f0-445">Для использования <xref:System.Reflection.PropertyInfo.SetValue%2A> метод, первый get <xref:System.Type> объект, представляющий класс.</span><span class="sxs-lookup"><span data-stu-id="125f0-445">To use the <xref:System.Reflection.PropertyInfo.SetValue%2A> method, first get a <xref:System.Type> object that represents the class.</span></span> <span data-ttu-id="125f0-446">Из <xref:System.Type>, получить <xref:System.Reflection.PropertyInfo>.</span><span class="sxs-lookup"><span data-stu-id="125f0-446">From the <xref:System.Type>, get the <xref:System.Reflection.PropertyInfo>.</span></span> <span data-ttu-id="125f0-447">Из <xref:System.Reflection.PropertyInfo>, используйте <xref:System.Reflection.PropertyInfo.SetValue%2A> метод.</span><span class="sxs-lookup"><span data-stu-id="125f0-447">From the <xref:System.Reflection.PropertyInfo>, use the <xref:System.Reflection.PropertyInfo.SetValue%2A> method.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="125f0-448">Начиная с [!INCLUDE[net_v20sp1_long](~/includes/net-v20sp1-long-md.md)], этот метод можно использовать для доступа к закрытым членам, если вызывающему объекту предоставлены <xref:System.Security.Permissions.ReflectionPermission> с <xref:System.Security.Permissions.ReflectionPermissionFlag.RestrictedMemberAccess?displayProperty=nameWithType> и отметки Если набор прав, не являющиеся открытыми члены ограничена вызывающего набором разрешений или подмножество его.</span><span class="sxs-lookup"><span data-stu-id="125f0-448">Starting with the [!INCLUDE[net_v20sp1_long](~/includes/net-v20sp1-long-md.md)], this method can be used to access non-public members if the caller has been granted <xref:System.Security.Permissions.ReflectionPermission> with the <xref:System.Security.Permissions.ReflectionPermissionFlag.RestrictedMemberAccess?displayProperty=nameWithType> flag and if the grant set of the non-public members is restricted to the caller’s grant set, or a subset thereof.</span></span> <span data-ttu-id="125f0-449">(См. [рекомендации по безопасности для отражения](~/docs/framework/reflection-and-codedom/security-considerations-for-reflection.md).)</span><span class="sxs-lookup"><span data-stu-id="125f0-449">(See [Security Considerations for Reflection](~/docs/framework/reflection-and-codedom/security-considerations-for-reflection.md).)</span></span>  
>   
>  <span data-ttu-id="125f0-450">Для применения этих функциональных возможностей приложение должно использовать [!INCLUDE[net_v35_long](~/includes/net-v35-long-md.md)] или более поздние версии.</span><span class="sxs-lookup"><span data-stu-id="125f0-450">To use this functionality, your application should target the [!INCLUDE[net_v35_long](~/includes/net-v35-long-md.md)] or later.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="125f0-451">В следующем примере определяется класс с именем `TestClass` со свойством чтения и записи с именем `Caption`.</span><span class="sxs-lookup"><span data-stu-id="125f0-451">The following example defines a class named `TestClass` that has a read-write property named `Caption`.</span></span> <span data-ttu-id="125f0-452">Он отображает значение по умолчанию `Caption` свойство, вызовы <xref:System.Reflection.PropertyInfo.SetValue%2A> метод, чтобы изменить значение свойства и отображается результат.</span><span class="sxs-lookup"><span data-stu-id="125f0-452">It  displays the default value of the `Caption` property, calls the <xref:System.Reflection.PropertyInfo.SetValue%2A> method to change the property value, and displays the result.</span></span>  
  
 [!code-cpp[Classic PropertyInfo.SetValue1 Example#1](~/samples/snippets/cpp/VS_Snippets_CLR_Classic/classic PropertyInfo.SetValue1 Example/CPP/source.cpp#1)]
 [!code-csharp[Classic PropertyInfo.SetValue1 Example#1](~/samples/snippets/csharp/VS_Snippets_CLR_Classic/classic PropertyInfo.SetValue1 Example/CS/source.cs#1)]
 [!code-vb[Classic PropertyInfo.SetValue1 Example#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_Classic/classic PropertyInfo.SetValue1 Example/VB/source.vb#1)]  
  
 <span data-ttu-id="125f0-453">Обратите внимание, что, поскольку `Caption` свойство не является массивом параметров `index` аргумент `null`.</span><span class="sxs-lookup"><span data-stu-id="125f0-453">Note that, because the `Caption` property is not a parameter array, the `index` argument is `null`.</span></span>  
  
 <span data-ttu-id="125f0-454">В следующем примере объявляется класс с именем `Example` с тремя свойствами: `static` свойство (`Shared` в Visual Basic), свойством экземпляра и индексируемым свойством экземпляра.</span><span class="sxs-lookup"><span data-stu-id="125f0-454">The following example declares a class named `Example` with three properties: a `static` property (`Shared` in Visual Basic), an instance property, and an indexed instance property.</span></span> <span data-ttu-id="125f0-455">В этом примере <xref:System.Reflection.PropertyInfo.SetValue%2A> метод, чтобы изменить значения по умолчанию для свойства и отображает исходных и конечных значений.</span><span class="sxs-lookup"><span data-stu-id="125f0-455">The example uses the <xref:System.Reflection.PropertyInfo.SetValue%2A> method to change the default values of the properties and displays the original and final values.</span></span>  
  
 <span data-ttu-id="125f0-456">Имя, которое будет использоваться для поиска индексируемого свойства экземпляра с отражением отличается в зависимости от языка и атрибуты, применяемые к свойству.</span><span class="sxs-lookup"><span data-stu-id="125f0-456">The name that is used to search for an indexed instance property with reflection is different depending on the language and on attributes applied to the property.</span></span>  
  
-   <span data-ttu-id="125f0-457">В Visual Basic имя свойства всегда используется для поиска свойства с отражением.</span><span class="sxs-lookup"><span data-stu-id="125f0-457">In Visual Basic, the property name is always used to search for the property with reflection.</span></span> <span data-ttu-id="125f0-458">Можно использовать `Default` ключевое слово, чтобы сделать свойство по умолчанию индексированное свойство, в этом случае можно опустить имя при доступе к свойству, как показано в примере.</span><span class="sxs-lookup"><span data-stu-id="125f0-458">You can use the `Default` keyword to make the property a default indexed property, in which case you can omit the name when accessing the property, as in this example.</span></span> <span data-ttu-id="125f0-459">Можно также использовать имя свойства.</span><span class="sxs-lookup"><span data-stu-id="125f0-459">You can also use the property name.</span></span>  
  
-   <span data-ttu-id="125f0-460">В C# индексируемое свойство экземпляра является свойством по умолчанию, называемым индексатором, и имя никогда не используется при обращении к свойству в коде.</span><span class="sxs-lookup"><span data-stu-id="125f0-460">In C#, the indexed instance property is a default property called an indexer, and the name is never used when accessing the property in code.</span></span> <span data-ttu-id="125f0-461">По умолчанию является имя свойства `Item`, и это имя необходимо использовать при поиске свойства с отражением.</span><span class="sxs-lookup"><span data-stu-id="125f0-461">By default, the name of the property is `Item`, and you must use that name when you search for the property with reflection.</span></span> <span data-ttu-id="125f0-462">Можно использовать <xref:System.Runtime.CompilerServices.IndexerNameAttribute> атрибут, чтобы назначить другое имя индексатора.</span><span class="sxs-lookup"><span data-stu-id="125f0-462">You can use the <xref:System.Runtime.CompilerServices.IndexerNameAttribute> attribute to give the indexer a different name.</span></span> <span data-ttu-id="125f0-463">В данном примере это имя `IndexedInstanceProperty`.</span><span class="sxs-lookup"><span data-stu-id="125f0-463">In this example, the name is `IndexedInstanceProperty`.</span></span>  
  
-   <span data-ttu-id="125f0-464">В C++ `default` можно использовать описатель вносить индексированное свойство по умолчанию индексированное свойство (индексатора класса).</span><span class="sxs-lookup"><span data-stu-id="125f0-464">In C++, the `default` specifier can be used to make an indexed property a default indexed property (class indexer).</span></span> <span data-ttu-id="125f0-465">В этом случае имя свойства по умолчанию является `Item`, и это имя необходимо использовать при поиске свойства с отражением, как показано в примере.</span><span class="sxs-lookup"><span data-stu-id="125f0-465">In that case, the name of the property by default is `Item`, and you must use that name when you search for the property with reflection, as in this example.</span></span> <span data-ttu-id="125f0-466">Можно использовать <xref:System.Runtime.CompilerServices.IndexerNameAttribute> атрибут дать другое имя индексатора класса отражения, однако это имя нельзя использовать для доступа к свойству в коде.</span><span class="sxs-lookup"><span data-stu-id="125f0-466">You can use the <xref:System.Runtime.CompilerServices.IndexerNameAttribute> attribute to give the class indexer a different name in reflection, but you cannot use that name to access the property in code.</span></span> <span data-ttu-id="125f0-467">Индексированное свойство, которое не является индексатором класса осуществляется с использованием его имени, как в коде, так и в отражении.</span><span class="sxs-lookup"><span data-stu-id="125f0-467">An indexed property that is not a class indexer is accessed using its name, both in code and in reflection.</span></span>  
  
 [!code-cpp[PropertyInfo.SetValue#1](~/samples/snippets/cpp/VS_Snippets_CLR/PropertyInfo.SetValue/cpp/Example.cpp#1)]
 [!code-csharp[PropertyInfo.SetValue#1](~/samples/snippets/csharp/VS_Snippets_CLR/PropertyInfo.SetValue/cs/Example.cs#1)]
 [!code-vb[PropertyInfo.SetValue#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/PropertyInfo.SetValue/vb/Example.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="125f0-468">Массив <paramref name="index" /> не содержит необходимого типа аргументов.</span><span class="sxs-lookup"><span data-stu-id="125f0-468">The <paramref name="index" /> array does not contain the type of arguments needed.</span></span>  
  
 <span data-ttu-id="125f0-469">- или -</span><span class="sxs-lookup"><span data-stu-id="125f0-469">-or-</span></span>  
  
 <span data-ttu-id="125f0-470">Не найден метод доступа <see langword="set" /> свойства.</span><span class="sxs-lookup"><span data-stu-id="125f0-470">The property's <see langword="set" /> accessor is not found.</span></span>  
  
 <span data-ttu-id="125f0-471">- или -</span><span class="sxs-lookup"><span data-stu-id="125f0-471">-or-</span></span>  
  
 <span data-ttu-id="125f0-472"><paramref name="value" /> невозможно преобразовать в тип <see cref="P:System.Reflection.PropertyInfo.PropertyType" />.</span><span class="sxs-lookup"><span data-stu-id="125f0-472"><paramref name="value" /> cannot be converted to the type of <see cref="P:System.Reflection.PropertyInfo.PropertyType" />.</span></span></exception>
        <exception cref="T:System.Reflection.TargetException">
          <block subset="none" type="note">
            <para>  
 <span data-ttu-id="125f0-473">Вместо этого в <see href="https://msdn.microsoft.com/library/windows/apps/br230232(v=vs.110).aspx">.NET для приложений Магазина Windows</see> или в <see href="~/docs/standard/cross-platform/cross-platform-development-with-the-portable-class-library.md">переносимой библиотеке классов</see> перехватите исключение <see cref="T:System.Exception" />.</span><span class="sxs-lookup"><span data-stu-id="125f0-473">In the <see href="https://msdn.microsoft.com/library/windows/apps/br230232(v=vs.110).aspx">.NET for Windows Store apps</see> or the <see href="~/docs/standard/cross-platform/cross-platform-development-with-the-portable-class-library.md">Portable Class Library</see>, catch <see cref="T:System.Exception" /> instead.</span></span>  
  
</para>
          </block>  
  
 <span data-ttu-id="125f0-474">Объект не соответствует целевому типу, или свойство является свойством экземпляра, но <paramref name="obj" /> имеет значение <see langword="null" />.</span><span class="sxs-lookup"><span data-stu-id="125f0-474">The object does not match the target type, or a property is an instance property but <paramref name="obj" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.Reflection.TargetParameterCountException"><span data-ttu-id="125f0-475">Число параметров в <paramref name="index" /> не соответствует числу параметров, принимаемых индексированным свойством.</span><span class="sxs-lookup"><span data-stu-id="125f0-475">The number of parameters in <paramref name="index" /> does not match the number of parameters the indexed property takes.</span></span></exception>
        <exception cref="T:System.MethodAccessException">
          <block subset="none" type="note">
            <para>  
 <span data-ttu-id="125f0-476">Вместо этого в <see href="https://msdn.microsoft.com/library/windows/apps/br230232(v=vs.110).aspx">.NET для приложений Магазина Windows</see> или в <see href="~/docs/standard/cross-platform/cross-platform-development-with-the-portable-class-library.md">переносимой библиотеке классов</see> перехватите исключение базового класса <see cref="T:System.MemberAccessException" />.</span><span class="sxs-lookup"><span data-stu-id="125f0-476">In the <see href="https://msdn.microsoft.com/library/windows/apps/br230232(v=vs.110).aspx">.NET for Windows Store apps</see> or the <see href="~/docs/standard/cross-platform/cross-platform-development-with-the-portable-class-library.md">Portable Class Library</see>, catch the base class exception, <see cref="T:System.MemberAccessException" />, instead.</span></span>  
  
</para>
          </block>  
  
 <span data-ttu-id="125f0-477">Возникла недопустимая попытка доступа к частному или защищенному методу внутри класса.</span><span class="sxs-lookup"><span data-stu-id="125f0-477">There was an illegal attempt to access a private or protected method inside a class.</span></span></exception>
        <exception cref="T:System.Reflection.TargetInvocationException"><span data-ttu-id="125f0-478">Произошла ошибка при установке значения свойства.</span><span class="sxs-lookup"><span data-stu-id="125f0-478">An error occurred while setting the property value.</span></span> <span data-ttu-id="125f0-479">Например, значение индекса, указанное для индексированного свойства, находится вне диапазона.</span><span class="sxs-lookup"><span data-stu-id="125f0-479">For example, an index value specified for an indexed property is out of range.</span></span> <span data-ttu-id="125f0-480">Свойство <see cref="P:System.Exception.InnerException" /> содержит причину данной ошибки.</span><span class="sxs-lookup"><span data-stu-id="125f0-480">The <see cref="P:System.Exception.InnerException" /> property indicates the reason for the error.</span></span></exception>
        <permission cref="T:System.Security.Permissions.ReflectionPermission"><span data-ttu-id="125f0-481">При вызове поздней привязкой, такие как <see cref="M:System.Type.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[])" />.</span><span class="sxs-lookup"><span data-stu-id="125f0-481">when invoked late-bound through mechanisms such as <see cref="M:System.Type.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[])" />.</span></span> <span data-ttu-id="125f0-482">Связанное перечисление: <see cref="F:System.Security.Permissions.ReflectionPermissionFlag.MemberAccess" />.</span><span class="sxs-lookup"><span data-stu-id="125f0-482">Associated enumeration: <see cref="F:System.Security.Permissions.ReflectionPermissionFlag.MemberAccess" />.</span></span></permission>
      </Docs>
    </Member>
    <Member MemberName="SetValue">
      <MemberSignature Language="C#" Value="public abstract void SetValue (object obj, object value, System.Reflection.BindingFlags invokeAttr, System.Reflection.Binder binder, object[] index, System.Globalization.CultureInfo culture);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void SetValue(object obj, object value, valuetype System.Reflection.BindingFlags invokeAttr, class System.Reflection.Binder binder, object[] index, class System.Globalization.CultureInfo culture) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.PropertyInfo.SetValue(System.Object,System.Object,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object[],System.Globalization.CultureInfo)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; abstract void SetValue(System::Object ^ obj, System::Object ^ value, System::Reflection::BindingFlags invokeAttr, System::Reflection::Binder ^ binder, cli::array &lt;System::Object ^&gt; ^ index, System::Globalization::CultureInfo ^ culture);" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Runtime.InteropServices._PropertyInfo.SetValue(System.Object,System.Object,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object[],System.Globalization.CultureInfo)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="obj" Type="System.Object" />
        <Parameter Name="value" Type="System.Object" />
        <Parameter Name="invokeAttr" Type="System.Reflection.BindingFlags" />
        <Parameter Name="binder" Type="System.Reflection.Binder" />
        <Parameter Name="index" Type="System.Object[]" />
        <Parameter Name="culture" Type="System.Globalization.CultureInfo" />
      </Parameters>
      <Docs>
        <param name="obj"><span data-ttu-id="125f0-483">Объект, значение свойства которого будет установлено.</span><span class="sxs-lookup"><span data-stu-id="125f0-483">The object whose property value will be set.</span></span></param>
        <param name="value"><span data-ttu-id="125f0-484">Новое значение свойства.</span><span class="sxs-lookup"><span data-stu-id="125f0-484">The new property value.</span></span></param>
        <param name="invokeAttr"><span data-ttu-id="125f0-485">Битовая комбинация следующих членов перечисления, определяющих атрибут вызова: <see langword="InvokeMethod" />, <see langword="CreateInstance" />, <see langword="Static" />, <see langword="GetField" />, <see langword="SetField" />, <see langword="GetProperty" /> или <see langword="SetProperty" />.</span><span class="sxs-lookup"><span data-stu-id="125f0-485">A bitwise combination of the following enumeration members that specify the invocation attribute: <see langword="InvokeMethod" />, <see langword="CreateInstance" />, <see langword="Static" />, <see langword="GetField" />, <see langword="SetField" />, <see langword="GetProperty" />, or <see langword="SetProperty" />.</span></span> <span data-ttu-id="125f0-486">Необходимо указать подходящий атрибут вызова.</span><span class="sxs-lookup"><span data-stu-id="125f0-486">You must specify a suitable invocation attribute.</span></span> <span data-ttu-id="125f0-487">Например, чтобы вызвать статический член, установите флаг <see langword="Static" />.</span><span class="sxs-lookup"><span data-stu-id="125f0-487">For example, to invoke a static member, set the <see langword="Static" /> flag.</span></span></param>
        <param name="binder"><span data-ttu-id="125f0-488">Объект, который допускает привязку, приведение типов аргументов, вызов элементов и извлечение объектов <see cref="T:System.Reflection.MemberInfo" /> путем отражения.</span><span class="sxs-lookup"><span data-stu-id="125f0-488">An object that enables the binding, coercion of argument types, invocation of members, and retrieval of <see cref="T:System.Reflection.MemberInfo" /> objects through reflection.</span></span> <span data-ttu-id="125f0-489">Если указан <c>модуль привязки</c> <see langword="null" />, используется модуль привязки по умолчанию.</span><span class="sxs-lookup"><span data-stu-id="125f0-489">If <c>binder</c> is <see langword="null" />, the default binder is used.</span></span></param>
        <param name="index"><span data-ttu-id="125f0-490">Необязательные значения индекса для индексированных свойств.</span><span class="sxs-lookup"><span data-stu-id="125f0-490">Optional index values for indexed properties.</span></span> <span data-ttu-id="125f0-491">Для неиндексированных свойств это значение должно быть равно <see langword="null" />.</span><span class="sxs-lookup"><span data-stu-id="125f0-491">This value should be <see langword="null" /> for non-indexed properties.</span></span></param>
        <param name="culture"><span data-ttu-id="125f0-492">Язык и региональные параметры, для которых должен быть локализован данный ресурс.</span><span class="sxs-lookup"><span data-stu-id="125f0-492">The culture for which the resource is to be localized.</span></span> <span data-ttu-id="125f0-493">Если ресурс не локализован для данного языка и региональных параметров, при поиске соответствия будет последовательно вызываться свойство <see cref="P:System.Globalization.CultureInfo.Parent" />.</span><span class="sxs-lookup"><span data-stu-id="125f0-493">If the resource is not localized for this culture, the <see cref="P:System.Globalization.CultureInfo.Parent" /> property will be called successively in search of a match.</span></span> <span data-ttu-id="125f0-494">Если это значение равно <see langword="null" />, из свойства <see cref="P:System.Globalization.CultureInfo.CurrentUICulture" /> получаются сведения, относящиеся к конкретному языку и региональным параметрам.</span><span class="sxs-lookup"><span data-stu-id="125f0-494">If this value is <see langword="null" />, the culture-specific information is obtained from the <see cref="P:System.Globalization.CultureInfo.CurrentUICulture" /> property.</span></span></param>
        <summary><span data-ttu-id="125f0-495">При переопределении в производном классе задает значение свойства для заданного объекта, имеющего указанные сведения о привязке, индексе и языке и региональных параметрах.</span><span class="sxs-lookup"><span data-stu-id="125f0-495">When overridden in a derived class, sets the property value for a specified object that has the specified binding, index, and culture-specific information.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="125f0-496">Если этот <xref:System.Reflection.PropertyInfo> объект является типом значения и `value` — `null`, то свойство будет присвоено значение по умолчанию для этого типа.</span><span class="sxs-lookup"><span data-stu-id="125f0-496">If this <xref:System.Reflection.PropertyInfo> object is a value type and `value` is `null`, then the property will be set to the default value for that type.</span></span>  
  
 <span data-ttu-id="125f0-497">Чтобы определить, проиндексировано ли свойство, используйте <xref:System.Reflection.PropertyInfo.GetIndexParameters%2A> метод.</span><span class="sxs-lookup"><span data-stu-id="125f0-497">To determine whether a property is indexed, use the <xref:System.Reflection.PropertyInfo.GetIndexParameters%2A> method.</span></span> <span data-ttu-id="125f0-498">Если результирующий массив содержит 0 (нуль) элементов, свойство не индексируются.</span><span class="sxs-lookup"><span data-stu-id="125f0-498">If the resulting array has 0 (zero) elements, the property is not indexed.</span></span>  
  
 <span data-ttu-id="125f0-499">Ограничения доступа игнорируются для полностью доверенный код.</span><span class="sxs-lookup"><span data-stu-id="125f0-499">Access restrictions are ignored for fully trusted code.</span></span> <span data-ttu-id="125f0-500">То есть закрытые конструкторы, методы, поля и свойства можно получить доступ к и вызывается через отражение, если код имеет полное доверие.</span><span class="sxs-lookup"><span data-stu-id="125f0-500">That is, private constructors, methods, fields, and properties can be accessed and invoked via Reflection whenever the code is fully trusted.</span></span>  
  
 <span data-ttu-id="125f0-501">Для использования `SetValue` метод, сначала нужно получить класс `Type`.</span><span class="sxs-lookup"><span data-stu-id="125f0-501">To use the `SetValue` method, first get the class `Type`.</span></span> <span data-ttu-id="125f0-502">Из `Type`, получить `PropertyInfo`.</span><span class="sxs-lookup"><span data-stu-id="125f0-502">From the `Type`, get the `PropertyInfo`.</span></span> <span data-ttu-id="125f0-503">Из `PropertyInfo`, используйте `SetValue` метод.</span><span class="sxs-lookup"><span data-stu-id="125f0-503">From the `PropertyInfo`, use the `SetValue` method.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="125f0-504">Начиная с [!INCLUDE[net_v20sp1_long](~/includes/net-v20sp1-long-md.md)], этот метод можно использовать для доступа к закрытым членам, если вызывающему объекту предоставлены <xref:System.Security.Permissions.ReflectionPermission> с <xref:System.Security.Permissions.ReflectionPermissionFlag.RestrictedMemberAccess?displayProperty=nameWithType> и отметки Если набор прав, не являющиеся открытыми члены ограничена вызывающего набором разрешений или подмножество его.</span><span class="sxs-lookup"><span data-stu-id="125f0-504">Starting with the [!INCLUDE[net_v20sp1_long](~/includes/net-v20sp1-long-md.md)], this method can be used to access non-public members if the caller has been granted <xref:System.Security.Permissions.ReflectionPermission> with the <xref:System.Security.Permissions.ReflectionPermissionFlag.RestrictedMemberAccess?displayProperty=nameWithType> flag and if the grant set of the non-public members is restricted to the caller’s grant set, or a subset thereof.</span></span> <span data-ttu-id="125f0-505">(См. [рекомендации по безопасности для отражения](~/docs/framework/reflection-and-codedom/security-considerations-for-reflection.md).)</span><span class="sxs-lookup"><span data-stu-id="125f0-505">(See [Security Considerations for Reflection](~/docs/framework/reflection-and-codedom/security-considerations-for-reflection.md).)</span></span>  
>   
>  <span data-ttu-id="125f0-506">Для применения этих функциональных возможностей приложение должно использовать [!INCLUDE[net_v35_long](~/includes/net-v35-long-md.md)] или более поздние версии.</span><span class="sxs-lookup"><span data-stu-id="125f0-506">To use this functionality, your application should target the [!INCLUDE[net_v35_long](~/includes/net-v35-long-md.md)] or later.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="125f0-507">Массив <paramref name="index" /> не содержит необходимого типа аргументов.</span><span class="sxs-lookup"><span data-stu-id="125f0-507">The <paramref name="index" /> array does not contain the type of arguments needed.</span></span>  
  
 <span data-ttu-id="125f0-508">- или -</span><span class="sxs-lookup"><span data-stu-id="125f0-508">-or-</span></span>  
  
 <span data-ttu-id="125f0-509">Не найден метод доступа <see langword="set" /> свойства.</span><span class="sxs-lookup"><span data-stu-id="125f0-509">The property's <see langword="set" /> accessor is not found.</span></span>  
  
 <span data-ttu-id="125f0-510">- или -</span><span class="sxs-lookup"><span data-stu-id="125f0-510">-or-</span></span>  
  
 <span data-ttu-id="125f0-511"><paramref name="value" /> невозможно преобразовать в тип <see cref="P:System.Reflection.PropertyInfo.PropertyType" />.</span><span class="sxs-lookup"><span data-stu-id="125f0-511"><paramref name="value" /> cannot be converted to the type of <see cref="P:System.Reflection.PropertyInfo.PropertyType" />.</span></span></exception>
        <exception cref="T:System.Reflection.TargetException"><span data-ttu-id="125f0-512">Объект не соответствует целевому типу, или свойство является свойством экземпляра, но <paramref name="obj" /> равен <see langword="null" />.</span><span class="sxs-lookup"><span data-stu-id="125f0-512">The object does not match the target type, or a property is an instance property but <paramref name="obj" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.Reflection.TargetParameterCountException"><span data-ttu-id="125f0-513">Число параметров в <paramref name="index" /> не соответствует числу параметров, принимаемых индексированным свойством.</span><span class="sxs-lookup"><span data-stu-id="125f0-513">The number of parameters in <paramref name="index" /> does not match the number of parameters the indexed property takes.</span></span></exception>
        <exception cref="T:System.MethodAccessException"><span data-ttu-id="125f0-514">Недопустимая попытка доступа к частному или защищенному методу внутри класса.</span><span class="sxs-lookup"><span data-stu-id="125f0-514">There was an illegal attempt to access a private or protected method inside a class.</span></span></exception>
        <exception cref="T:System.Reflection.TargetInvocationException"><span data-ttu-id="125f0-515">Произошла ошибка при установке значения свойства.</span><span class="sxs-lookup"><span data-stu-id="125f0-515">An error occurred while setting the property value.</span></span> <span data-ttu-id="125f0-516">Например, значение индекса, указанное для индексированного свойства, находится вне диапазона.</span><span class="sxs-lookup"><span data-stu-id="125f0-516">For example, an index value specified for an indexed property is out of range.</span></span> <span data-ttu-id="125f0-517">Свойство <see cref="P:System.Exception.InnerException" /> содержит причину данной ошибки.</span><span class="sxs-lookup"><span data-stu-id="125f0-517">The <see cref="P:System.Exception.InnerException" /> property indicates the reason for the error.</span></span></exception>
        <permission cref="T:System.Security.Permissions.ReflectionPermission"><span data-ttu-id="125f0-518">При вызове поздней привязкой, такие как <see cref="M:System.Type.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[])" />.</span><span class="sxs-lookup"><span data-stu-id="125f0-518">when invoked late-bound through mechanisms such as <see cref="M:System.Type.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[])" />.</span></span> <span data-ttu-id="125f0-519">Связанное перечисление: <see cref="F:System.Security.Permissions.ReflectionPermissionFlag.MemberAccess" />.</span><span class="sxs-lookup"><span data-stu-id="125f0-519">Associated enumeration: <see cref="F:System.Security.Permissions.ReflectionPermissionFlag.MemberAccess" />.</span></span></permission>
      </Docs>
    </Member>
    <Member MemberName="System.Runtime.InteropServices._PropertyInfo.GetIDsOfNames">
      <MemberSignature Language="C#" Value="void _PropertyInfo.GetIDsOfNames (ref Guid riid, IntPtr rgszNames, uint cNames, uint lcid, IntPtr rgDispId);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance void System.Runtime.InteropServices._PropertyInfo.GetIDsOfNames([in]valuetype System.Guid&amp; riid, native int rgszNames, unsigned int32 cNames, unsigned int32 lcid, native int rgDispId) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.PropertyInfo.System#Runtime#InteropServices#_PropertyInfo#GetIDsOfNames(System.Guid@,System.IntPtr,System.UInt32,System.UInt32,System.IntPtr)" />
      <MemberSignature Language="VB.NET" Value="Sub GetIDsOfNames (ByRef riid As Guid, rgszNames As IntPtr, cNames As UInteger, lcid As UInteger, rgDispId As IntPtr) Implements _PropertyInfo.GetIDsOfNames" />
      <MemberSignature Language="C++ CLI" Value=" virtual void System.Runtime.InteropServices._PropertyInfo.GetIDsOfNames(Guid % riid, IntPtr rgszNames, System::UInt32 cNames, System::UInt32 lcid, IntPtr rgDispId) = System::Runtime::InteropServices::_PropertyInfo::GetIDsOfNames;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Runtime.InteropServices._PropertyInfo.GetIDsOfNames(System.Guid@,System.IntPtr,System.UInt32,System.UInt32,System.IntPtr)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="riid" Type="System.Guid&amp;" RefType="ref" />
        <Parameter Name="rgszNames" Type="System.IntPtr" />
        <Parameter Name="cNames" Type="System.UInt32" />
        <Parameter Name="lcid" Type="System.UInt32" />
        <Parameter Name="rgDispId" Type="System.IntPtr" />
      </Parameters>
      <Docs>
        <param name="riid"><span data-ttu-id="125f0-520">Зарезервировано для будущего использования.</span><span class="sxs-lookup"><span data-stu-id="125f0-520">Reserved for future use.</span></span> <span data-ttu-id="125f0-521">Должно быть равным IID_NULL.</span><span class="sxs-lookup"><span data-stu-id="125f0-521">Must be IID_NULL.</span></span></param>
        <param name="rgszNames"><span data-ttu-id="125f0-522">Переданный массив имен, которые необходимо сопоставить.</span><span class="sxs-lookup"><span data-stu-id="125f0-522">Passed-in array of names to be mapped.</span></span></param>
        <param name="cNames"><span data-ttu-id="125f0-523">Количество сопоставляемых имен.</span><span class="sxs-lookup"><span data-stu-id="125f0-523">Count of the names to be mapped.</span></span></param>
        <param name="lcid"><span data-ttu-id="125f0-524">Контекст языкового стандарта для интерпретации имен.</span><span class="sxs-lookup"><span data-stu-id="125f0-524">The locale context in which to interpret the names.</span></span></param>
        <param name="rgDispId"><span data-ttu-id="125f0-525">Массив, зарезервированный вызывающим объектом, куда помещаются идентификаторы, соответствующие именам.</span><span class="sxs-lookup"><span data-stu-id="125f0-525">Caller-allocated array which receives the IDs corresponding to the names.</span></span></param>
        <summary><span data-ttu-id="125f0-526">Сопоставляет набор имен соответствующему набору идентификаторов диспетчеризации.</span><span class="sxs-lookup"><span data-stu-id="125f0-526">Maps a set of names to a corresponding set of dispatch identifiers.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="125f0-527">Этот метод предназначен для обеспечения доступа к управляемым классам из неуправляемого кода и не должен вызываться из управляемого кода.</span><span class="sxs-lookup"><span data-stu-id="125f0-527">This method is for access to managed classes from unmanaged code, and should not be called from managed code.</span></span> <span data-ttu-id="125f0-528">Дополнительные сведения о `IDispatch::GetIDsOfNames`, см. в библиотеке MSDN.</span><span class="sxs-lookup"><span data-stu-id="125f0-528">For more information about `IDispatch::GetIDsOfNames`, see the MSDN Library.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.NotImplementedException"><span data-ttu-id="125f0-529">Доступ с поздним связыванием с помощью COM-интерфейса <c>IDispatch</c> не поддерживается.</span><span class="sxs-lookup"><span data-stu-id="125f0-529">Late-bound access using the COM <c>IDispatch</c> interface is not supported.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="System.Runtime.InteropServices._PropertyInfo.GetType">
      <MemberSignature Language="C#" Value="Type _PropertyInfo.GetType ();" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance class System.Type System.Runtime.InteropServices._PropertyInfo.GetType() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.PropertyInfo.System#Runtime#InteropServices#_PropertyInfo#GetType" />
      <MemberSignature Language="VB.NET" Value="Function GetType () As Type Implements _PropertyInfo.GetType" />
      <MemberSignature Language="C++ CLI" Value=" virtual Type ^ System.Runtime.InteropServices._PropertyInfo.GetType() = System::Runtime::InteropServices::_PropertyInfo::GetType;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Runtime.InteropServices._PropertyInfo.GetType</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Type</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="125f0-530">Возвращает объект <see cref="T:System.Type" />, представляющий тип <see cref="T:System.Reflection.PropertyInfo" />.</span><span class="sxs-lookup"><span data-stu-id="125f0-530">Gets a <see cref="T:System.Type" /> object representing the <see cref="T:System.Reflection.PropertyInfo" /> type.</span></span></summary>
        <returns><span data-ttu-id="125f0-531">Объект <see cref="T:System.Type" />, представляющий тип <see cref="T:System.Reflection.PropertyInfo" />.</span><span class="sxs-lookup"><span data-stu-id="125f0-531">A <see cref="T:System.Type" /> object representing the <see cref="T:System.Reflection.PropertyInfo" /> type.</span></span></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="System.Runtime.InteropServices._PropertyInfo.GetTypeInfo">
      <MemberSignature Language="C#" Value="void _PropertyInfo.GetTypeInfo (uint iTInfo, uint lcid, IntPtr ppTInfo);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance void System.Runtime.InteropServices._PropertyInfo.GetTypeInfo(unsigned int32 iTInfo, unsigned int32 lcid, native int ppTInfo) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.PropertyInfo.System#Runtime#InteropServices#_PropertyInfo#GetTypeInfo(System.UInt32,System.UInt32,System.IntPtr)" />
      <MemberSignature Language="VB.NET" Value="Sub GetTypeInfo (iTInfo As UInteger, lcid As UInteger, ppTInfo As IntPtr) Implements _PropertyInfo.GetTypeInfo" />
      <MemberSignature Language="C++ CLI" Value=" virtual void System.Runtime.InteropServices._PropertyInfo.GetTypeInfo(System::UInt32 iTInfo, System::UInt32 lcid, IntPtr ppTInfo) = System::Runtime::InteropServices::_PropertyInfo::GetTypeInfo;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Runtime.InteropServices._PropertyInfo.GetTypeInfo(System.UInt32,System.UInt32,System.IntPtr)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="iTInfo" Type="System.UInt32" />
        <Parameter Name="lcid" Type="System.UInt32" />
        <Parameter Name="ppTInfo" Type="System.IntPtr" />
      </Parameters>
      <Docs>
        <param name="iTInfo"><span data-ttu-id="125f0-532">Возвращаемые сведения о типе.</span><span class="sxs-lookup"><span data-stu-id="125f0-532">The type information to return.</span></span></param>
        <param name="lcid"><span data-ttu-id="125f0-533">Идентификатор языкового стандарта для сведений о типе.</span><span class="sxs-lookup"><span data-stu-id="125f0-533">The locale identifier for the type information.</span></span></param>
        <param name="ppTInfo"><span data-ttu-id="125f0-534">Получает указатель на объект с запрошенными сведениями о типе.</span><span class="sxs-lookup"><span data-stu-id="125f0-534">Receives a pointer to the requested type information object.</span></span></param>
        <summary><span data-ttu-id="125f0-535">Возвращает сведения о типе объекта, которые затем могут использоваться для получения сведений о типе интерфейса.</span><span class="sxs-lookup"><span data-stu-id="125f0-535">Retrieves the type information for an object, which can then be used to get the type information for an interface.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="125f0-536">Этот метод предназначен для обеспечения доступа к управляемым классам из неуправляемого кода и не должен вызываться из управляемого кода.</span><span class="sxs-lookup"><span data-stu-id="125f0-536">This method is for access to managed classes from unmanaged code, and should not be called from managed code.</span></span> <span data-ttu-id="125f0-537">Дополнительные сведения о `IDispatch::GetTypeInfo`, см. в библиотеке MSDN.</span><span class="sxs-lookup"><span data-stu-id="125f0-537">For more information about `IDispatch::GetTypeInfo`, see the MSDN Library.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.NotImplementedException"><span data-ttu-id="125f0-538">Доступ с поздним связыванием с помощью COM-интерфейса <c>IDispatch</c> не поддерживается.</span><span class="sxs-lookup"><span data-stu-id="125f0-538">Late-bound access using the COM <c>IDispatch</c> interface is not supported.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="System.Runtime.InteropServices._PropertyInfo.GetTypeInfoCount">
      <MemberSignature Language="C#" Value="void _PropertyInfo.GetTypeInfoCount (out uint pcTInfo);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance void System.Runtime.InteropServices._PropertyInfo.GetTypeInfoCount([out] unsigned int32&amp; pcTInfo) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.PropertyInfo.System#Runtime#InteropServices#_PropertyInfo#GetTypeInfoCount(System.UInt32@)" />
      <MemberSignature Language="VB.NET" Value="Sub GetTypeInfoCount (ByRef pcTInfo As UInteger) Implements _PropertyInfo.GetTypeInfoCount" />
      <MemberSignature Language="C++ CLI" Value=" virtual void System.Runtime.InteropServices._PropertyInfo.GetTypeInfoCount([Runtime::InteropServices::Out] System::UInt32 % pcTInfo) = System::Runtime::InteropServices::_PropertyInfo::GetTypeInfoCount;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Runtime.InteropServices._PropertyInfo.GetTypeInfoCount(System.UInt32@)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="pcTInfo" Type="System.UInt32&amp;" RefType="out" />
      </Parameters>
      <Docs>
        <param name="pcTInfo"><span data-ttu-id="125f0-539">Указатель, по которому записывается число предоставляемых объектом интерфейсов, предназначенных для получения сведений о типе.</span><span class="sxs-lookup"><span data-stu-id="125f0-539">Points to a location that receives the number of type information interfaces provided by the object.</span></span></param>
        <summary><span data-ttu-id="125f0-540">Возвращает количество предоставляемых объектом интерфейсов для доступа к сведениям о типе (0 или 1).</span><span class="sxs-lookup"><span data-stu-id="125f0-540">Retrieves the number of type information interfaces that an object provides (either 0 or 1).</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="125f0-541">Этот метод предназначен для обеспечения доступа к управляемым классам из неуправляемого кода и не должен вызываться из управляемого кода.</span><span class="sxs-lookup"><span data-stu-id="125f0-541">This method is for access to managed classes from unmanaged code, and should not be called from managed code.</span></span> <span data-ttu-id="125f0-542">Дополнительные сведения о `IDispatch::GetTypeInfoCount`, см. в библиотеке MSDN.</span><span class="sxs-lookup"><span data-stu-id="125f0-542">For more information about `IDispatch::GetTypeInfoCount`, see the MSDN Library.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.NotImplementedException"><span data-ttu-id="125f0-543">Доступ с поздним связыванием с помощью COM-интерфейса <c>IDispatch</c> не поддерживается.</span><span class="sxs-lookup"><span data-stu-id="125f0-543">Late-bound access using the COM <c>IDispatch</c> interface is not supported.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="System.Runtime.InteropServices._PropertyInfo.Invoke">
      <MemberSignature Language="C#" Value="void _PropertyInfo.Invoke (uint dispIdMember, ref Guid riid, uint lcid, short wFlags, IntPtr pDispParams, IntPtr pVarResult, IntPtr pExcepInfo, IntPtr puArgErr);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance void System.Runtime.InteropServices._PropertyInfo.Invoke(unsigned int32 dispIdMember, [in]valuetype System.Guid&amp; riid, unsigned int32 lcid, int16 wFlags, native int pDispParams, native int pVarResult, native int pExcepInfo, native int puArgErr) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.PropertyInfo.System#Runtime#InteropServices#_PropertyInfo#Invoke(System.UInt32,System.Guid@,System.UInt32,System.Int16,System.IntPtr,System.IntPtr,System.IntPtr,System.IntPtr)" />
      <MemberSignature Language="VB.NET" Value="Sub Invoke (dispIdMember As UInteger, ByRef riid As Guid, lcid As UInteger, wFlags As Short, pDispParams As IntPtr, pVarResult As IntPtr, pExcepInfo As IntPtr, puArgErr As IntPtr) Implements _PropertyInfo.Invoke" />
      <MemberSignature Language="C++ CLI" Value=" virtual void System.Runtime.InteropServices._PropertyInfo.Invoke(System::UInt32 dispIdMember, Guid % riid, System::UInt32 lcid, short wFlags, IntPtr pDispParams, IntPtr pVarResult, IntPtr pExcepInfo, IntPtr puArgErr) = System::Runtime::InteropServices::_PropertyInfo::Invoke;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Runtime.InteropServices._PropertyInfo.Invoke(System.UInt32,System.Guid@,System.UInt32,System.Int16,System.IntPtr,System.IntPtr,System.IntPtr,System.IntPtr)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="dispIdMember" Type="System.UInt32" />
        <Parameter Name="riid" Type="System.Guid&amp;" RefType="ref" />
        <Parameter Name="lcid" Type="System.UInt32" />
        <Parameter Name="wFlags" Type="System.Int16" />
        <Parameter Name="pDispParams" Type="System.IntPtr" />
        <Parameter Name="pVarResult" Type="System.IntPtr" />
        <Parameter Name="pExcepInfo" Type="System.IntPtr" />
        <Parameter Name="puArgErr" Type="System.IntPtr" />
      </Parameters>
      <Docs>
        <param name="dispIdMember"><span data-ttu-id="125f0-544">Идентифицирует член.</span><span class="sxs-lookup"><span data-stu-id="125f0-544">Identifies the member.</span></span></param>
        <param name="riid"><span data-ttu-id="125f0-545">Зарезервировано для будущего использования.</span><span class="sxs-lookup"><span data-stu-id="125f0-545">Reserved for future use.</span></span> <span data-ttu-id="125f0-546">Должно быть равным IID_NULL.</span><span class="sxs-lookup"><span data-stu-id="125f0-546">Must be IID_NULL.</span></span></param>
        <param name="lcid"><span data-ttu-id="125f0-547">Контекст языкового стандарта, в котором следует интерпретировать аргументы.</span><span class="sxs-lookup"><span data-stu-id="125f0-547">The locale context in which to interpret arguments.</span></span></param>
        <param name="wFlags"><span data-ttu-id="125f0-548">Флаги, описывающие контекст вызова.</span><span class="sxs-lookup"><span data-stu-id="125f0-548">Flags describing the context of the call.</span></span></param>
        <param name="pDispParams"><span data-ttu-id="125f0-549">Указатель на структуру, содержащую массив аргументов, массив DISPID для именованных аргументов, а также счетчики количества элементов в массивах.</span><span class="sxs-lookup"><span data-stu-id="125f0-549">Pointer to a structure containing an array of arguments, an array of argument DISPIDs for named arguments, and counts for the number of elements in the arrays.</span></span></param>
        <param name="pVarResult"><span data-ttu-id="125f0-550">Указатель, по которому будет сохранен результат.</span><span class="sxs-lookup"><span data-stu-id="125f0-550">Pointer to the location where the result is to be stored.</span></span></param>
        <param name="pExcepInfo"><span data-ttu-id="125f0-551">Указатель на структуру, содержащую сведения об исключении.</span><span class="sxs-lookup"><span data-stu-id="125f0-551">Pointer to a structure that contains exception information.</span></span></param>
        <param name="puArgErr"><span data-ttu-id="125f0-552">Индекс первого аргумента, вызвавшего ошибку.</span><span class="sxs-lookup"><span data-stu-id="125f0-552">The index of the first argument that has an error.</span></span></param>
        <summary><span data-ttu-id="125f0-553">Предоставляет доступ к открытым свойствам и методам объекта.</span><span class="sxs-lookup"><span data-stu-id="125f0-553">Provides access to properties and methods exposed by an object.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="125f0-554">Этот метод предназначен для обеспечения доступа к управляемым классам из неуправляемого кода и не должен вызываться из управляемого кода.</span><span class="sxs-lookup"><span data-stu-id="125f0-554">This method is for access to managed classes from unmanaged code, and should not be called from managed code.</span></span> <span data-ttu-id="125f0-555">Дополнительные сведения о `IDispatch::Invoke`, см. в библиотеке MSDN.</span><span class="sxs-lookup"><span data-stu-id="125f0-555">For more information about `IDispatch::Invoke`, see the MSDN Library.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.NotImplementedException"><span data-ttu-id="125f0-556">Доступ с поздним связыванием с помощью COM-интерфейса <c>IDispatch</c> не поддерживается.</span><span class="sxs-lookup"><span data-stu-id="125f0-556">Late-bound access using the COM <c>IDispatch</c> interface is not supported.</span></span></exception>
      </Docs>
    </Member>
  </Members>
</Type>