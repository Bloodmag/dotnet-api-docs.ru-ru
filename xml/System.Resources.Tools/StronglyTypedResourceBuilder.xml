<Type Name="StronglyTypedResourceBuilder" FullName="System.Resources.Tools.StronglyTypedResourceBuilder">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="7be7f3118763d30ffd080582491bdf7c07503c21" />
    <Meta Name="ms.sourcegitcommit" Value="d31dc2ede16f6f7bc64e90d9f897ff54c4e3869b" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="ru-RU" />
    <Meta Name="ms.lasthandoff" Value="04/03/2018" />
    <Meta Name="ms.locfileid" Value="30479858" />
  </Metadata>
  <TypeSignature Language="C#" Value="public static class StronglyTypedResourceBuilder" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi abstract sealed beforefieldinit StronglyTypedResourceBuilder extends System.Object" />
  <TypeSignature Language="DocId" Value="T:System.Resources.Tools.StronglyTypedResourceBuilder" />
  <TypeSignature Language="VB.NET" Value="Public Class StronglyTypedResourceBuilder" />
  <TypeSignature Language="C++ CLI" Value="public ref class StronglyTypedResourceBuilder abstract sealed" />
  <AssemblyInfo>
    <AssemblyName>System.Design</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>Обеспечивает поддержку строго типизированных ресурсов. Этот класс не наследуется.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Как правило ресурсы отделяют код из содержимого в приложении. Создание и использование этих ресурсов упрощает разработку локализуемых приложений. В .NET Framework, обычно потребляются ресурсы с помощью <xref:System.Resources.ResourceManager> класс, который содержит методы, обеспечивающие доступ к зависящим от культуры ресурсам во время выполнения. Дополнительные сведения о создании и использовании ресурсов см. в разделе [ресурсы в классических приложениях](http://msdn.microsoft.com/library/8ad495d4-2941-40cf-bf64-e82e85825890).  
  
 Поддержка строго типизированных ресурсов является функцией во время компиляции, которая инкапсулирует доступ к ресурсам путем создания классов, содержащих набор статических, только для чтения (`get`) свойства. Это обеспечивает альтернативный способ потребления ресурсов, вместо вызова метода <xref:System.Resources.ResourceManager.GetString%2A?displayProperty=nameWithType> и <xref:System.Resources.ResourceManager.GetObject%2A?displayProperty=nameWithType> методы.  
  
 Базовые функциональные возможности для поддержки ресурсов со строгой типизацией обеспечивается <xref:System.Resources.Tools.StronglyTypedResourceBuilder> класса (а также `/str` с параметром [Resgen.exe (генератор файлов ресурсов)](~/docs/framework/tools/resgen-exe-resource-file-generator.md)). Выходные данные <xref:System.Resources.Tools.StronglyTypedResourceBuilder.Create%2A> метод является классом, который содержит строго типизированные свойства, соответствующие ресурсам, на которые имеются ссылки во входном параметре. Этот класс предоставляет доступ только для чтения к ресурсам, доступным в отрабатываемом файле.  
  
   
  
## Examples  
 В следующем примере создается класс с именем `DemoResources` , написанного на C# или Visual Basic (в зависимости от того, пример исходного кода). Этот класс является в `DemoApp` пространства имен и содержит свойства, которые возвращают растрового изображения логотипа и имени приложения. В примере вызывается `CreateResourceFile` метод для создания необходимых resw-файл и требует обнаружения файл точечного рисунка, с именем Logo.bmp в примере текущий каталог. В примере кода используется следующий файл ресурсов с именем demo.resx:  
  
 [!code-csharp[System.Resources.Tools.StronglyTypedResourceBuilder.Class#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.resources.tools.stronglytypedresourcebuilder.class/cs/example1.cs#1)]
 [!code-vb[System.Resources.Tools.StronglyTypedResourceBuilder.Class#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.resources.tools.stronglytypedresourcebuilder.class/vb/example1.vb#1)]  
  
 Код приложения затем можно использовать класс следующим образом:  
  
 [!code-csharp[System.Resources.Tools.StronglyTypedResourceBuilder.Class#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.resources.tools.stronglytypedresourcebuilder.class/cs/demoresources.cs#2)]
 [!code-vb[System.Resources.Tools.StronglyTypedResourceBuilder.Class#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.resources.tools.stronglytypedresourcebuilder.class/vb/demoresources.vb#2)]  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <MemberGroup MemberName="Create">
      <AssemblyInfo>
        <AssemblyName>System.Design</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Создает файл класса, который содержит строго типизированные свойства, соответствующие ресурсам, заданным во входном параметре.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Create">
      <MemberSignature Language="C#" Value="public static System.CodeDom.CodeCompileUnit Create (System.Collections.IDictionary resourceList, string baseName, string generatedCodeNamespace, System.CodeDom.Compiler.CodeDomProvider codeProvider, bool internalClass, out string[] unmatchable);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.CodeDom.CodeCompileUnit Create(class System.Collections.IDictionary resourceList, string baseName, string generatedCodeNamespace, class System.CodeDom.Compiler.CodeDomProvider codeProvider, bool internalClass, [out] string[]&amp; unmatchable) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Resources.Tools.StronglyTypedResourceBuilder.Create(System.Collections.IDictionary,System.String,System.String,System.CodeDom.Compiler.CodeDomProvider,System.Boolean,System.String[]@)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Create (resourceList As IDictionary, baseName As String, generatedCodeNamespace As String, codeProvider As CodeDomProvider, internalClass As Boolean, ByRef unmatchable As String()) As CodeCompileUnit" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::CodeDom::CodeCompileUnit ^ Create(System::Collections::IDictionary ^ resourceList, System::String ^ baseName, System::String ^ generatedCodeNamespace, System::CodeDom::Compiler::CodeDomProvider ^ codeProvider, bool internalClass, [Runtime::InteropServices::Out] cli::array &lt;System::String ^&gt; ^ % unmatchable);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Design</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.CodeDom.CodeCompileUnit</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="resourceList" Type="System.Collections.IDictionary" />
        <Parameter Name="baseName" Type="System.String" />
        <Parameter Name="generatedCodeNamespace" Type="System.String" />
        <Parameter Name="codeProvider" Type="System.CodeDom.Compiler.CodeDomProvider" />
        <Parameter Name="internalClass" Type="System.Boolean" />
        <Parameter Name="unmatchable" Type="System.String[]&amp;" RefType="out" />
      </Parameters>
      <Docs>
        <param name="resourceList">Коллекция <see cref="T:System.Collections.IDictionary" />, в которой каждая пара "ключ — значение" записи словаря является именем ресурса и значением ресурса.</param>
        <param name="baseName">Имя создаваемого класса.</param>
        <param name="generatedCodeNamespace">Пространство имен создаваемого класса.</param>
        <param name="codeProvider">Класс <see cref="T:System.CodeDom.Compiler.CodeDomProvider" />, предоставляющий язык, на котором будет создан класс.</param>
        <param name="internalClass">
          Значение <see langword="true" /> для создания внутреннего класса, значение <see langword="false" /> для создания общего класса.</param>
        <param name="unmatchable">Массив, который содержит имена всех ресурсов, для которых нельзя создать свойства. Как правило, свойство нельзя создать, поскольку имя ресурса является недопустимым идентификатором.</param>
        <summary>Создает файл класса, который содержит строго типизированные свойства, соответствующие ресурсам, на которые существует ссылка в указанной коллекции.</summary>
        <returns>Контейнер <see cref="T:System.CodeDom.CodeCompileUnit" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Используйте <xref:System.Resources.Tools.StronglyTypedResourceBuilder.Create%2A> методе, чтобы создать класс, предоставляющий оболочку строго типизировать, только для чтения для доступа к ресурсам, которые содержатся в `resourceList` параметра.  
  
 <xref:System.Resources.Tools.StronglyTypedResourceBuilder> Класс игнорирует любые имя ресурса, которое начинается с символов «$» или «>>». Имена ресурсов «Culture» и «Диспетчер ресурсов» являются недопустимыми идентификаторами.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          Значение параметра <paramref name="resourceList" />, <paramref name="basename" /> или <paramref name="codeProvider" /> равно <see langword="null" />.</exception>
        <exception cref="T:System.ArgumentException">Имя узла ресурса не соответствует его ключу в <paramref name="resourceList" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="Create">
      <MemberSignature Language="C#" Value="public static System.CodeDom.CodeCompileUnit Create (string resxFile, string baseName, string generatedCodeNamespace, System.CodeDom.Compiler.CodeDomProvider codeProvider, bool internalClass, out string[] unmatchable);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.CodeDom.CodeCompileUnit Create(string resxFile, string baseName, string generatedCodeNamespace, class System.CodeDom.Compiler.CodeDomProvider codeProvider, bool internalClass, [out] string[]&amp; unmatchable) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Resources.Tools.StronglyTypedResourceBuilder.Create(System.String,System.String,System.String,System.CodeDom.Compiler.CodeDomProvider,System.Boolean,System.String[]@)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Create (resxFile As String, baseName As String, generatedCodeNamespace As String, codeProvider As CodeDomProvider, internalClass As Boolean, ByRef unmatchable As String()) As CodeCompileUnit" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::CodeDom::CodeCompileUnit ^ Create(System::String ^ resxFile, System::String ^ baseName, System::String ^ generatedCodeNamespace, System::CodeDom::Compiler::CodeDomProvider ^ codeProvider, bool internalClass, [Runtime::InteropServices::Out] cli::array &lt;System::String ^&gt; ^ % unmatchable);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Design</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.CodeDom.CodeCompileUnit</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="resxFile" Type="System.String" />
        <Parameter Name="baseName" Type="System.String" />
        <Parameter Name="generatedCodeNamespace" Type="System.String" />
        <Parameter Name="codeProvider" Type="System.CodeDom.Compiler.CodeDomProvider" />
        <Parameter Name="internalClass" Type="System.Boolean" />
        <Parameter Name="unmatchable" Type="System.String[]&amp;" RefType="out" />
      </Parameters>
      <Docs>
        <param name="resxFile">Имя RESX-файла, используемого в качестве входных данных.</param>
        <param name="baseName">Имя создаваемого класса.</param>
        <param name="generatedCodeNamespace">Пространство имен создаваемого класса.</param>
        <param name="codeProvider">Класс <see cref="T:System.CodeDom.Compiler.CodeDomProvider" />, предоставляющий язык, на котором будет создан класс.</param>
        <param name="internalClass">
          Значение <see langword="true" /> для создания внутреннего класса, значение <see langword="false" /> для создания общего класса.</param>
        <param name="unmatchable">Массив <see cref="T:System.String" />, содержащий имена всех ресурсов, для которых нельзя создать свойства. Как правило, свойство нельзя создать, поскольку имя ресурса является недопустимым идентификатором.</param>
        <summary>Создает файл класса, который содержит строго типизированные свойства, соответствующие ресурсам в заданном RESX-файле.</summary>
        <returns>Контейнер <see cref="T:System.CodeDom.CodeCompileUnit" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Используйте <xref:System.Resources.Tools.StronglyTypedResourceBuilder.Create%2A> метод, чтобы создать класс, который обеспечивает строго типизированные только для чтения доступ к ресурсам, которые содержатся в `resxFile` параметра.  
  
 <xref:System.Resources.Tools.StronglyTypedResourceBuilder> Класс игнорирует любые имя ресурса, которое начинается с символов «$» или «>>». Имена ресурсов «Culture» и «Диспетчер ресурсов» являются недопустимыми идентификаторами.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          Параметр <paramref name="basename" /> или <paramref name="codeProvider" /> имеет значение <see langword="null" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="Create">
      <MemberSignature Language="C#" Value="public static System.CodeDom.CodeCompileUnit Create (System.Collections.IDictionary resourceList, string baseName, string generatedCodeNamespace, string resourcesNamespace, System.CodeDom.Compiler.CodeDomProvider codeProvider, bool internalClass, out string[] unmatchable);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.CodeDom.CodeCompileUnit Create(class System.Collections.IDictionary resourceList, string baseName, string generatedCodeNamespace, string resourcesNamespace, class System.CodeDom.Compiler.CodeDomProvider codeProvider, bool internalClass, [out] string[]&amp; unmatchable) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Resources.Tools.StronglyTypedResourceBuilder.Create(System.Collections.IDictionary,System.String,System.String,System.String,System.CodeDom.Compiler.CodeDomProvider,System.Boolean,System.String[]@)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Create (resourceList As IDictionary, baseName As String, generatedCodeNamespace As String, resourcesNamespace As String, codeProvider As CodeDomProvider, internalClass As Boolean, ByRef unmatchable As String()) As CodeCompileUnit" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::CodeDom::CodeCompileUnit ^ Create(System::Collections::IDictionary ^ resourceList, System::String ^ baseName, System::String ^ generatedCodeNamespace, System::String ^ resourcesNamespace, System::CodeDom::Compiler::CodeDomProvider ^ codeProvider, bool internalClass, [Runtime::InteropServices::Out] cli::array &lt;System::String ^&gt; ^ % unmatchable);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Design</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.CodeDom.CodeCompileUnit</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="resourceList" Type="System.Collections.IDictionary" />
        <Parameter Name="baseName" Type="System.String" />
        <Parameter Name="generatedCodeNamespace" Type="System.String" />
        <Parameter Name="resourcesNamespace" Type="System.String" />
        <Parameter Name="codeProvider" Type="System.CodeDom.Compiler.CodeDomProvider" />
        <Parameter Name="internalClass" Type="System.Boolean" />
        <Parameter Name="unmatchable" Type="System.String[]&amp;" RefType="out" />
      </Parameters>
      <Docs>
        <param name="resourceList">Коллекция <see cref="T:System.Collections.IDictionary" />, в которой каждая пара "ключ — значение" записи словаря является именем ресурса и значением ресурса.</param>
        <param name="baseName">Имя создаваемого класса.</param>
        <param name="generatedCodeNamespace">Пространство имен создаваемого класса.</param>
        <param name="resourcesNamespace">Пространство имен создаваемого ресурса.</param>
        <param name="codeProvider">Объект <see cref="T:System.CodeDom.Compiler.CodeDomProvider" />, предоставляющий язык, на котором будет создан класс.</param>
        <param name="internalClass">
          Значение <see langword="true" /> для создания внутреннего класса, значение <see langword="false" /> для создания общего класса.</param>
        <param name="unmatchable">Массив <see cref="T:System.String" />, содержащий имена всех ресурсов, для которых нельзя создать свойства. Как правило, свойство нельзя создать, поскольку имя ресурса является недопустимым идентификатором.</param>
        <summary>Создает файл класса, который содержит строго типизированные свойства, соответствующие ресурсам, на которые существует ссылка в указанной коллекции.</summary>
        <returns>Контейнер <see cref="T:System.CodeDom.CodeCompileUnit" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Эта перегрузка позволяет использовать `resourcesNamespace` для указания пространства имен для созданных ресурсов. В этом случае созданный код выглядит следующим образом:  
  
```  
System.Resources.ResourceManager rm = new System.Resources.ResourceManager("<resourceNamespace>.<baseName>",typeof(baseName).Assembly);  
```  
  
 В большинстве случаев не требуется для вызова этого метода из кода приложения.  
  
 <xref:System.Resources.Tools.StronglyTypedResourceBuilder> Класс игнорирует любые имя ресурса, которое начинается с символов «$» или «>>». Имена ресурсов «Culture» и «Диспетчер ресурсов» являются недопустимыми идентификаторами.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          Значение параметра <paramref name="resourceList" />, <paramref name="basename" /> или <paramref name="codeProvider" /> равно <see langword="null" />.</exception>
        <exception cref="T:System.ArgumentException">Имя узла ресурса не соответствует его ключу в <paramref name="resourceList" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="Create">
      <MemberSignature Language="C#" Value="public static System.CodeDom.CodeCompileUnit Create (string resxFile, string baseName, string generatedCodeNamespace, string resourcesNamespace, System.CodeDom.Compiler.CodeDomProvider codeProvider, bool internalClass, out string[] unmatchable);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.CodeDom.CodeCompileUnit Create(string resxFile, string baseName, string generatedCodeNamespace, string resourcesNamespace, class System.CodeDom.Compiler.CodeDomProvider codeProvider, bool internalClass, [out] string[]&amp; unmatchable) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Resources.Tools.StronglyTypedResourceBuilder.Create(System.String,System.String,System.String,System.String,System.CodeDom.Compiler.CodeDomProvider,System.Boolean,System.String[]@)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Create (resxFile As String, baseName As String, generatedCodeNamespace As String, resourcesNamespace As String, codeProvider As CodeDomProvider, internalClass As Boolean, ByRef unmatchable As String()) As CodeCompileUnit" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::CodeDom::CodeCompileUnit ^ Create(System::String ^ resxFile, System::String ^ baseName, System::String ^ generatedCodeNamespace, System::String ^ resourcesNamespace, System::CodeDom::Compiler::CodeDomProvider ^ codeProvider, bool internalClass, [Runtime::InteropServices::Out] cli::array &lt;System::String ^&gt; ^ % unmatchable);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Design</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.CodeDom.CodeCompileUnit</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="resxFile" Type="System.String" />
        <Parameter Name="baseName" Type="System.String" />
        <Parameter Name="generatedCodeNamespace" Type="System.String" />
        <Parameter Name="resourcesNamespace" Type="System.String" />
        <Parameter Name="codeProvider" Type="System.CodeDom.Compiler.CodeDomProvider" />
        <Parameter Name="internalClass" Type="System.Boolean" />
        <Parameter Name="unmatchable" Type="System.String[]&amp;" RefType="out" />
      </Parameters>
      <Docs>
        <param name="resxFile">Имя RESX-файла, используемого в качестве входных данных.</param>
        <param name="baseName">Имя создаваемого класса.</param>
        <param name="generatedCodeNamespace">Пространство имен создаваемого класса.</param>
        <param name="resourcesNamespace">Пространство имен создаваемого ресурса.</param>
        <param name="codeProvider">Класс <see cref="T:System.CodeDom.Compiler.CodeDomProvider" />, предоставляющий язык, на котором будет создан класс.</param>
        <param name="internalClass">
          Значение <see langword="true" /> для создания внутреннего класса, значение <see langword="false" /> для создания общего класса.</param>
        <param name="unmatchable">Массив <see cref="T:System.String" />, содержащий имена всех ресурсов, для которых нельзя создать свойства. Как правило, свойство нельзя создать, поскольку имя ресурса является недопустимым идентификатором.</param>
        <summary>Создает файл класса, который содержит строго типизированные свойства, соответствующие ресурсам в заданном RESX-файле.</summary>
        <returns>Контейнер <see cref="T:System.CodeDom.CodeCompileUnit" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Используйте <xref:System.Resources.Tools.StronglyTypedResourceBuilder.Create%2A> метод, чтобы создать класс, который обеспечивает строго типизированные только для чтения доступ к ресурсам, которые содержатся в `resxFile` параметра.  
  
 <xref:System.Resources.Tools.StronglyTypedResourceBuilder> Класс игнорирует любые имя ресурса, которое начинается с символов «$» или «>>». Имена ресурсов «Culture» и «Диспетчер ресурсов» являются недопустимыми идентификаторами.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          Параметр <paramref name="basename" /> или <paramref name="codeProvider" /> имеет значение <see langword="null" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="VerifyResourceName">
      <MemberSignature Language="C#" Value="public static string VerifyResourceName (string key, System.CodeDom.Compiler.CodeDomProvider provider);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig string VerifyResourceName(string key, class System.CodeDom.Compiler.CodeDomProvider provider) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Resources.Tools.StronglyTypedResourceBuilder.VerifyResourceName(System.String,System.CodeDom.Compiler.CodeDomProvider)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function VerifyResourceName (key As String, provider As CodeDomProvider) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ VerifyResourceName(System::String ^ key, System::CodeDom::Compiler::CodeDomProvider ^ provider);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Design</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="key" Type="System.String" />
        <Parameter Name="provider" Type="System.CodeDom.Compiler.CodeDomProvider" />
      </Parameters>
      <Docs>
        <param name="key">Строка для проверки и, если это необходимо, преобразования в допустимое имя ресурса.</param>
        <param name="provider">Объект <see cref="T:System.CodeDom.Compiler.CodeDomProvider" />, указывающий используемый целевой язык.</param>
        <summary>Создает допустимую строку ресурса на основе указанной входной строки и поставщика кода.</summary>
        <returns>Допустимое имя ресурса, производное от параметра <paramref name="key" />. Любые недопустимые токены заменяются на символ подчеркивания (_) или <see langword="null" />, если в полученной строке остаются недопустимые символы согласно языку, заданному в параметре <paramref name="provider" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Если `key` параметр имеет допустимую строку символов, возвращаемых этой строки. Если `key` параметр имеет недопустимую строку или строку, содержащую недопустимые символы <xref:System.Resources.Tools.StronglyTypedResourceBuilder.VerifyResourceName%2A> метод пытается создать допустимую строку на основе `key` и `provider` параметров. Если допустимое строковое выражение может быть создано, что возвращается строка; в противном случае `null` возвращается.  
  
 Если `key` параметра является пустая строка ("»), возвращается строка, состоящая из одного символа подчеркивания (_). Если `key` параметр не является пустой строкой, <xref:System.Resources.Tools.StronglyTypedResourceBuilder.VerifyResourceName%2A> метод сравнивает каждый символ в строке, чтобы набор недопустимые токены, используя язык, заданный параметром `provider` параметр. Любой недопустимый символ в строке заменяется на символ подчеркивания. Символы, которые будут заменены знаком подчеркивания выглядят следующим образом:  
  
 ' ' (пробел), U + 00A0 (неразрывный пробел), "." (точка) «,» (запятая), «;» (точку с запятой), "&#124;", "~", "@", «#», «%», "^", «&», "*", «+», "-", '/', '\\«,»\<"," > «,»? "," [","] ","(",")», "{", "}", "" "(кавычка), '' '(апостроф),»:", и "!".  
  
> [!NOTE]
>  Ресурсы со строгой типизацией не разрешать использование ключевых слов языка (например, `if`, `for`и так далее) как имена ключей ресурсов. Тем не менее <xref:System.CodeDom> шаблон разработки позволяет использовать ключевые слова языка с помощью префикса ключевое слово со знака подчеркивания. <xref:System.Resources.Tools.StronglyTypedResourceBuilder.VerifyResourceName%2A> Вызовы метода <xref:System.CodeDom.Compiler.ICodeGenerator.CreateValidIdentifier%2A> метод для применения этого конструктора. Например, при использовании имени ресурса, не совпадает с ключевым словом языка, такие как `for`, имя отображается в виде `_for` в классе созданного ресурса со строгой типизацией.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          Параметр <paramref name="key" /> или <paramref name="provider" /> имеет значение <see langword="null" />.</exception>
      </Docs>
    </Member>
  </Members>
</Type>