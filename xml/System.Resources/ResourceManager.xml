<Type Name="ResourceManager" FullName="System.Resources.ResourceManager">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="d18e0d0b21e593733c17a8ad1b69a3fc64a6cfda" />
    <Meta Name="ms.sourcegitcommit" Value="d31dc2ede16f6f7bc64e90d9f897ff54c4e3869b" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="ru-RU" />
    <Meta Name="ms.lasthandoff" Value="04/03/2018" />
    <Meta Name="ms.locfileid" Value="30481398" />
  </Metadata>
  <TypeSignature Language="C#" Value="public class ResourceManager" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi serializable beforefieldinit ResourceManager extends System.Object" />
  <TypeSignature Language="DocId" Value="T:System.Resources.ResourceManager" />
  <TypeSignature Language="VB.NET" Value="Public Class ResourceManager" />
  <TypeSignature Language="C++ CLI" Value="public ref class ResourceManager" />
  <AssemblyInfo>
    <AssemblyName>System.Resources.ResourceManager</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.1.0.0</AssemblyVersion>
    <AssemblyVersion>4.1.1.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>mscorlib</AssemblyName>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute>
      <AttributeName>System.Runtime.InteropServices.ComVisible(true)</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>Представляет диспетчер ресурсов, обеспечивающий удобный доступ к ресурсам, связанным с языком и региональными параметрами, во время выполнения.  
  
 **Примечание по безопасности**. Вызов методов в этом классе с ненадежными данными представляет угрозу безопасности. Вызывайте методы в классе только с надежными данными. Дополнительные сведения см. в разделе [Угрозы безопасности при работе с ненадежными данными](https://docs.com/rick-anderson-1/8710/untrusted-data-security-risks).</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Resources.ResourceManager> Класс извлекает ресурсы из внедренного в сборку двоичный RESOURCES-файл или отдельный файл .resources. Если локализованные приложения и локализованные ресурсы были развернуты в [вспомогательные сборки](~/docs/framework/resources/creating-satellite-assemblies-for-desktop-apps.md), он ищет ресурсы для конкретного языка и региональных параметров, предоставляет перехода к другим ресурсам, если локализованный ресурс не существует и поддерживает ресурсов сериализация.  
  
 Дополнительные сведения о создании и управлении ресурсами в приложениях для настольных систем и [!INCLUDE[win8_appname_long](~/includes/win8-appname-long-md.md)] приложений, в следующих разделах:  
  
-   [Классические приложения](#desktop)  
  
    -   [Создание ресурсов](#creating_resources)  
  
    -   [Создание экземпляра объекта ResourceManager](#instantiating)  
  
    -   [Диспетчер ресурсов и ресурсы для конкретного языка и региональных параметров](#CultureSpecific)  
  
    -   [Извлечение ресурсов](#retrieving)  
  
    -   [Обработка MissingManifestResourceException и MissingSatelliteAssemblyException исключений](#exception)  
  
    -   [Управление версиями ресурсов](#versioning)  
  
    -   [\<satelliteassemblies > узла файла конфигурации](#config)  
  
-   [Приложения для магазина Windows](#ws)  
  
<a name="desktop"></a>   
## <a name="desktop-apps"></a>Классические приложения  
 Для классических приложений <xref:System.Resources.ResourceManager> класс извлекает ресурсы из файлов в двоичный файл ресурсов (RESOURCES). Как правило, компиляторов языка или [компоновщик сборок (AL.exe)](~/docs/framework/tools/al-exe-assembly-linker.md) внедряет эти файлы ресурсов в сборку. Можно также использовать <xref:System.Resources.ResourceManager> объекта для извлечения ресурсов непосредственно из RESOURCES-файл, который не внедрен в сборку, путем вызова <xref:System.Resources.ResourceManager.CreateFileBasedResourceManager%2A> метод.  
  
> [!CAUTION]
>  Использование изолированных файлов ресурсов в приложении ASP.NET приведет к потере развертывание XCOPY, так как ресурсы останется заблокирован, пока не будет явно выпускаются корпорацией <xref:System.Resources.ResourceManager.ReleaseAllResources%2A> метод. Если требуется развертывание ресурсов в приложениях ASP.NET, следует компилировать RESOURCES-файлов во вспомогательные сборки.  
  
 В приложении на основе ресурсов по одному файлу .resources содержит ресурсы по умолчанию язык и региональные параметры, ресурсы которого используются в том случае, если можно найти нет ресурсов, связанных с языком и региональными параметрами. Например если язык и региональные параметры приложения по умолчанию является английский (en), каждый раз, когда не удается найти локализованные ресурсы для конкретного языка и региональных параметров, таких как английский (США) (en US) или французский (Франция) (fr-FR) используются ресурсы английского языка. Как правило ресурсы для культуры по умолчанию встраиваются в основную сборку приложения и ресурсы для других локализованных языков и региональных параметров, встраиваются в вспомогательных сборок. Вспомогательные сборки содержат только ресурсы. Они имеют то же корневое имя файла главной сборки и расширением. resources.dll. Для приложений, сборок которых не зарегистрированы в глобальном кэше сборок вспомогательные сборки хранятся в подкаталоге приложения, имя которого соответствует языка и региональных параметров сборки.  
  
<a name="creating_resources"></a>   
### <a name="creating-resources"></a>Создание ресурсов  
 При разработке приложений на основе ресурсов хранятся сведения о ресурсах в текстовые файлы (файлы с расширением .txt или .restext) или XML-файлы (файлы с расширением RESX). Затем скомпилируйте текста или XML-файлы с [генератор файлов ресурсов (Resgen.exe)](~/docs/framework/tools/resgen-exe-resource-file-generator.md) Создание двоичный RESOURCES-файл. Затем, можно внедрить в исполняемый файл или библиотека полученный RESOURCES-файл с помощью параметра компилятора, например `/resources` для компиляторов C# и Visual Basic, или можно внедрить ее во вспомогательную сборку с помощью. При включении RESX-файл в проект Visual Studio, Visual Studio выполняет компиляцию и внедрение по умолчанию и локализованные ресурсы автоматически в рамках процесса построения.  
  
 В идеале следует создавать ресурсы для каждого языка приложения поддерживает, или по крайней мере для определенного подмножества каждого языка. Имена файлов двоичный Resources соглашению об именовании *базовым именем*.* cultureName*.resources, где *базовым именем* имя приложения или имя класса, в зависимости от уровня детализации. <xref:System.Globalization.CultureInfo.Name%2A?displayProperty=nameWithType> Свойство используется для определения *cultureName*. Ресурсы для языка и региональных параметров приложения по умолчанию должен быть назван *базовым именем*.resources.  
  
 Например предположим, что сборка содержит несколько ресурсов в файле ресурсов с базовым именем MyResources. Эти файлы ресурсов должны иметь имена, например MyResources.ja JP.resources, языком и региональными параметрами японский (Япония), MyResources.de.resources для немецкого языка и региональных параметров, MyResources.zh-CHS.resources для упрощенного китайского языка и MyResources.fr BE.resources для культуры французский (Бельгия). Файл ресурсов по умолчанию должен иметь имя MyResources.resources. Ресурсы, специфичные для языка и региональных параметров, обычно упаковываются во вспомогательные сборки для каждого языка и региональных параметров. Необходимо внедрить файл ресурсов по умолчанию в основную сборку приложения.  
  
 Обратите внимание, что, позволяющий ресурсов, которые были помечены как личные, но необходимо всегда пометить их как открытые, они могут быть доступны для других сборок. (Поскольку вспомогательная сборка не содержит кода, ресурсы, которые помечены как private недоступны для приложения с помощью любого механизма.)  
  
 Дополнительные сведения о создании упаковки и развертывания ресурсов, см. в статьях [Создание файлов ресурсов](~/docs/framework/resources/creating-resource-files-for-desktop-apps.md), [Создание вспомогательных сборок](~/docs/framework/resources/creating-satellite-assemblies-for-desktop-apps.md), и [упаковка и развертывание Ресурсы](~/docs/framework/resources/packaging-and-deploying-resources-in-desktop-apps.md).  
  
<a name="instantiating"></a>   
### <a name="instantiating-a-resourcemanager-object"></a>Создание экземпляра объекта ResourceManager  
 Можно создать <xref:System.Resources.ResourceManager> объекта, который извлекает ресурсы из внедренные RESOURCES-файл, вызвав одну из его перегрузок конструктора класса. Это обеспечивается тесная связь между <xref:System.Resources.ResourceManager> объектов с определенной RESOURCES-файла и любые связанные с ним локализованные файлы .resources во вспомогательные сборки.  
  
 Ниже приведены два наиболее часто вызываемые конструкторы.  
  
-   <xref:System.Resources.ResourceManager.%23ctor%28System.String%2CSystem.Reflection.Assembly%29> выполняет поиск ресурсов, основанных на два блока данных, указываемое: базовое имя RESOURCES-файл и сборка, в которой находится RESOURCES-файл по умолчанию. Базовое имя включает имя пространства имен и корневой RESOURCES-файла, без его языка и региональных параметров или расширения. Обратите внимание, что RESOURCES-файлы, скомпилированные с помощью командной строки, обычно не содержат имя пространства имен, в то время как сделать RESOURCES-файлы, созданные в среде Visual Studio. Например, если файл ресурсов называется MyCompany.StringResources.resources и <xref:System.Resources.ResourceManager> конструктор вызывается из статический метод с именем `Example.Main`, следующий код создает экземпляр <xref:System.Resources.ResourceManager> объект, который может извлекать ресурсы из. файл ресурсов:  
  
     [!code-csharp[Conceptual.Resources.Retrieving#1](~/samples/snippets/csharp/VS_Snippets_CLR/conceptual.resources.retrieving/cs/ctor1.cs#1)]
     [!code-vb[Conceptual.Resources.Retrieving#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/conceptual.resources.retrieving/vb/ctor1.vb#1)]  
  
-   <xref:System.Resources.ResourceManager.%23ctor%28System.Type%29> ищет ресурсы в сопутствующих сборках, на основе сведений из тип объекта. Полное имя типа соответствует имени базового RESOURCES-файла без расширения имени файла. В настольных приложениях, которые создаются с помощью конструктора ресурсов Visual Studio Visual Studio создает класс-оболочку, полное имя которого совпадает имя корневой папки RESOURCES-файл. Например, если файл ресурсов называется MyCompany.StringResources.resources и класс-оболочку с именем `MyCompany.StringResources`, следующий код создает экземпляр <xref:System.Resources.ResourceManager> объект, который может извлекать ресурсы из RESOURCES-файла:  
  
     [!code-csharp[Conceptual.Resources.Retrieving#2](~/samples/snippets/csharp/VS_Snippets_CLR/conceptual.resources.retrieving/cs/ctor1.cs#2)]
     [!code-vb[Conceptual.Resources.Retrieving#2](~/samples/snippets/visualbasic/VS_Snippets_CLR/conceptual.resources.retrieving/vb/ctor1.vb#2)]  
  
 Если не удается найти нужные ресурсы, вызов конструктора создается действительный <xref:System.Resources.ResourceManager> объекта. Тем не менее, попытка получить ресурс вызывает <xref:System.Resources.MissingManifestResourceException> исключение. Сведения об обработке исключений см. в разделе [MissingManifestResourceException обработки и исключения MissingSatelliteAssembly](#exception) далее в этой статье.  
  
 В следующем примере показано создание экземпляра <xref:System.Resources.ResourceManager> объекта. Он содержит исходный код для исполняемый файл с именем ShowTime.exe. Он также включает следующий текстовый файл с именем Strings.txt, содержащий один строковый ресурс, `TimeHeader`:  
  
```  
TimeHeader=The current time is  
```  
  
 Пакетный файл можно использовать для создания файла ресурсов и внедрить в исполняемый файл. Вот пакетный файл для создания исполняемого файла с помощью компилятора C#.  
  
```  
  
resgen strings.txt  
csc ShowTime.cs /resource:strings.resources  
  
```  
  
 Компилятор Visual Basic можно использовать следующий файл пакета:  
  
```  
  
resgen strings.txt  
vbc ShowTime.vb /resource:strings.resources  
  
```  
  
 [!code-csharp[System.Resources.ResourceManager.Class#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.resources.resourcemanager.class/cs/showtime.cs#1)]
 [!code-vb[System.Resources.ResourceManager.Class#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.resources.resourcemanager.class/vb/showtime.vb#1)]  
  
<a name="CultureSpecific"></a>   
### <a name="resourcemanager-and-culture-specific-resources"></a>Диспетчер ресурсов и ресурсы для конкретного языка и региональных параметров  
 Локализованные приложения требуется ресурсов для развертывания, как описано в статье [упаковка и развертывание ресурсов](~/docs/framework/resources/packaging-and-deploying-resources-in-desktop-apps.md). При правильной настройке сборки диспетчера ресурсов определяет ресурсы, которые необходимо извлечь на основании текущего потока <xref:System.Threading.Thread.CurrentUICulture%2A?displayProperty=nameWithType> свойство. (Это свойство также возвращает язык и региональные параметры текущего потока пользовательского интерфейса). Например, если приложение компилировано с параметром по умолчанию ресурсами на английском языке в основной сборке и с ресурсами французский "и" русский язык в двух вспомогательных сборок и <xref:System.Threading.Thread.CurrentUICulture%2A?displayProperty=nameWithType> имеет значение fr-FR, диспетчер ресурсов получает французский ресурсы.  
  
 Можно задать <xref:System.Globalization.CultureInfo.CurrentUICulture%2A> свойство явно или неявно. Определяет способ задать как <xref:System.Resources.ResourceManager> объект извлекает ресурсы, зависящие от языка и региональных параметров:  
  
-   Если явно задать <xref:System.Threading.Thread.CurrentUICulture%2A?displayProperty=nameWithType> свойство для определенной культуры, диспетчер ресурсов всегда получает ресурсы для этого языка и региональных параметров, независимо от языка браузера или операционной системы пользователя. Рассмотрим приложение, которое скомпилировано с ресурсами на английском языке по умолчанию и три вспомогательных сборок, содержащих ресурсы для английского языка (США), французский (Франция) и русского языка (Россия). Если <xref:System.Globalization.CultureInfo.CurrentUICulture%2A> задано значение fr-FR, <xref:System.Resources.ResourceManager> всегда извлекать ресурсы французского (Франция), даже если пользователь операционной системы языка не французский. Убедитесь, что это приемлемо, перед явным образом задать свойство.  
  
     В приложениях ASP.NET, необходимо задать <xref:System.Threading.Thread.CurrentUICulture%2A?displayProperty=nameWithType> свойство явно, поскольку маловероятно, что параметр на сервере будет соответствовать входящие клиентские запросы. Приложение ASP.NET можно задать <xref:System.Threading.Thread.CurrentUICulture%2A?displayProperty=nameWithType> свойства явным образом для браузера пользователя допустимый язык.  
  
     После явного задания <xref:System.Threading.Thread.CurrentUICulture%2A?displayProperty=nameWithType> свойство определяет текущий язык и региональные параметры пользовательского интерфейса для этого потока. Он не влияет на текущий язык и региональные параметры пользовательского интерфейса других потоков в приложении.  
  
-   Можно задать язык и региональные параметры пользовательского интерфейса всех потоков в домене приложения, назначив <xref:System.Globalization.CultureInfo> объект, представляющий этот язык статического <xref:System.Globalization.CultureInfo.DefaultThreadCurrentUICulture%2A?displayProperty=nameWithType> свойство.  
  
-   Если явно не задано текущего языка и региональных параметров пользовательского интерфейса, и вы не задаете язык и региональные параметры по умолчанию для текущего домена приложения, <xref:System.Globalization.CultureInfo.CurrentUICulture%2A?displayProperty=nameWithType> свойство задается неявно Windows `GetUserDefaultUILanguage` функции. Эта функция обеспечивает по многоязычного пользовательского интерфейса (MUI), который позволяет пользователю задать язык по умолчанию. Если пользователь не задал язык пользовательского интерфейса, то по умолчанию язык установленной системы, то есть язык ресурсов операционной системы.  
  
 В следующем примере простое «Hello world» явно задает текущий язык и региональные параметры пользовательского интерфейса. Он содержит ресурсы для трех языков: английский (США) или en US, французский (Франция) или fr-FR и русский (Россия) или ru-RU. Ресурсы en US, входящие в текстовый файл с именем Greetings.txt:  
  
```  
HelloString=Hello world!  
```  
  
 Fr-FR ресурсы, входящие в текстовый файл с именем Greetings.fr-FR.txt:  
  
```  
HelloString=Salut tout le monde!  
```  
  
 Ru-RU ресурсы, входящие в текстовый файл с именем Greetings.ru-RU.txt:  
  
```  
HelloString=Всем привет!  
```  
  
 Ниже приведен исходный код для примера (Example.vb для версии Visual Basic) или Example.cs для версии C#:  
  
 [!code-csharp[Conceptual.Resources.CurrentCulture#1](~/samples/snippets/csharp/VS_Snippets_CLR/conceptual.resources.currentculture/cs/example.cs#1)]
 [!code-vb[Conceptual.Resources.CurrentCulture#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/conceptual.resources.currentculture/vb/example.vb#1)]  
  
 Чтобы скомпилировать этот пример, создайте файл пакетный (BAT), который содержит следующие команды и запустите его из командной строки. Если вы используете C#, укажите `csc` вместо `vbc` и `Example.cs` вместо `Example.vb`.  
  
```  
resgen Greetings.txt   
vbc Example.vb /resource:Greetings.resources  
  
resgen Greetings.fr-FR.txt  
Md fr-FR  
al /embed:Greetings.fr-FR.resources /culture:fr-FR /out:fr-FR\Example.resources.dll  
  
resgen Greetings.ru-RU.txt  
Md ru-RU  
al /embed:Greetings.ru-RU.resources /culture:ru-RU /out:ru-RU\Example.resources.dll  
```  
  
<a name="retrieving"></a>   
### <a name="retrieving-resources"></a>Извлечение ресурсов  
 Можно вызвать <xref:System.Resources.ResourceManager.GetObject%28System.String%29> и <xref:System.Resources.ResourceManager.GetString%28System.String%29> методы для доступа к определенному ресурсу. Можно также вызвать <xref:System.Resources.ResourceManager.GetStream%28System.String%29> метод для извлечения нестроковые ресурсы в виде массива байтов. По умолчанию в приложении, которое локализованные ресурсы, эти методы возвращают ресурсов для языка и региональных параметров, определяется текущего языка и региональных параметров пользовательского интерфейса вызывающего потока. См. предыдущий раздел [ResourceManager и ресурсы для конкретного языка и региональных параметров](#CultureSpecific), Дополнительные сведения об определении текущего языка и региональных параметров пользовательского интерфейса потока. Если диспетчер ресурсов не удается найти ресурс для языка и региональных параметров текущего потока пользовательского интерфейса, он использует процесс отката для получить указанный ресурс. Если диспетчер ресурсов не удается найти все локализованные ресурсы, он использует ресурсы культуры по умолчанию. Дополнительные сведения о правила резервного переключения ресурсов см. в разделе «Процесс использования резервных ресурсов» статьи [упаковка и развертывание ресурсов](~/docs/framework/resources/packaging-and-deploying-resources-in-desktop-apps.md).  
  
> [!NOTE]
>  Если в RESOURCES-файл <xref:System.Resources.ResourceManager> конструктор класса не найдено, попытка получить ресурс вызывает <xref:System.Resources.MissingManifestResourceException> или <xref:System.Resources.MissingSatelliteAssemblyException> исключение. Сведения об обработке исключений см. в разделе [MissingManifestResourceException обработки и исключения MissingSatelliteAssemblyException](#exception) далее в этом разделе.  
  
 В следующем примере используется <xref:System.Resources.ResourceManager.GetString%2A> метод для извлечения ресурсов, связанных с языком и региональными параметрами. Он состоит из ресурсов, скомпилированные из TXT-файлы для английского языка (en), французский (Франция) (fr-FR) и русский (Россия) (ru-RU) языков и региональных параметров. В примере изменяется текущий язык и региональные параметры текущего пользовательского интерфейса для английского языка (США), французский (Франция), русский (Россия) и шведский (Швеция). Затем он вызывает <xref:System.Resources.ResourceManager.GetString%2A> метод для извлечения локализованную строку, отображающую вместе с текущего дня и месяца. Обратите внимание, что выходные данные будут содержать соответствующие Локализованная строка, кроме случаев, когда текущий язык и региональные параметры пользовательского интерфейса шведский (Швеция). Так как шведский язык ресурсы недоступны, приложение использует вместо ресурсов для культуры по умолчанию, которая является английский язык.  
  
 В примере требуется файлы ресурсов на основе текста, перечислены в следующей таблице. Каждая имеет один строковый ресурс с именем `DateStart`.  
  
|culture|Имя файла|Имя ресурса|Значение ресурса|  
|-------------|---------------|-------------------|--------------------|  
|ru-RU|DateStrings.txt|`DateStart`|Сегодня|  
|fr-FR|DateStrings.fr-FR.txt|`DateStart`|Aujourd'hui c'est le|  
|ru-RU|DateStrings.ru RU.txt|`DateStart`|Сегодня|  
  
 Ниже приведен исходный код для примера (ShowDate.vb для версии Visual Basic) или ShowDate.cs для версии кода C#.  
  
 [!code-csharp[System.Resources.ResourceManager.Class#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.resources.resourcemanager.class/cs/showdate.cs#2)]
 [!code-vb[System.Resources.ResourceManager.Class#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.resources.resourcemanager.class/vb/showdate.vb#2)]  
  
 Чтобы скомпилировать этот пример, создайте пакетный файл, который содержит следующие команды и запустите его из командной строки. Если вы используете C#, укажите `csc` вместо `vbc` и `showdate.cs` вместо `showdate.vb`.  
  
```  
  
resgen DateStrings.txt  
vbc showdate.vb /resource:DateStrings.resources  
  
md fr-FR  
resgen DateStrings.fr-FR.txt  
al /out:fr-FR\Showdate.resources.dll /culture:fr-FR /embed:DateStrings.fr-FR.resources   
  
md ru-RU  
resgen DateStrings.ru-RU.txt  
al /out:ru-RU\Showdate.resources.dll /culture:ru-RU /embed:DateStrings.ru-RU.resources  
  
```  
  
 Существует два способа для извлечения ресурсов определенного языка и региональных параметров, отличных от текущего языка и региональных параметров пользовательского интерфейса:  
  
-   Можно вызвать <xref:System.Resources.ResourceManager.GetString%28System.String%2CSystem.Globalization.CultureInfo%29>, <xref:System.Resources.ResourceManager.GetObject%28System.String%2CSystem.Globalization.CultureInfo%29>, или <xref:System.Resources.ResourceManager.GetStream%28System.String%2CSystem.Globalization.CultureInfo%29> метод для извлечения ресурсов для конкретного языка и региональных параметров. Если не удается найти локализованный ресурс, диспетчер ресурсов использует процесс использования резервных ресурсов для поиска подходящего ресурса.  
  
-   Можно вызвать <xref:System.Resources.ResourceManager.GetResourceSet%2A> метод, чтобы получить <xref:System.Resources.ResourceSet> , представляющий ресурсы для конкретного языка и региональных параметров. В вызове метода можно определить ли диспетчер ресурсов проверяет наличие родительского языков и региональных параметров, если это не удается найти локализованные ресурсы или ли он просто возвращается к ресурсам культуры по умолчанию. Затем можно использовать <xref:System.Resources.ResourceSet> методы доступ к ресурсам (локализован для этого языка и региональных параметров) по имени, или перечислить ресурсы в наборе.  
  
<a name="exception"></a>   
### <a name="handling-missingmanifestresourceexception-and-missingsatelliteassemblyexception-exceptions"></a>Обработка MissingManifestResourceException и MissingSatelliteAssemblyException исключений  
 Если при попытке извлечь конкретный ресурс, но не удается найти диспетчер ресурсов, ресурсов и либо не региональные параметры по умолчанию определен или ресурсов культуры по умолчанию не удается найти, диспетчер ресурсов вызывает <xref:System.Resources.MissingManifestResourceException> исключение при его ожидает найти ресурсы в основной сборке или <xref:System.Resources.MissingSatelliteAssemblyException> , если он ожидает найти ресурсы во вспомогательной сборке. Обратите внимание, что исключение вызывается при вызове метода извлечения ресурсов <xref:System.Resources.ResourceManager.GetString%2A> или <xref:System.Resources.ResourceManager.GetObject%2A>, а не при создании экземпляра <xref:System.Resources.ResourceManager> объекта.  
  
 Исключение обычно вызывается при следующих условиях:  
  
-   Файл или вспомогательные сборки соответствующий ресурс не существует. Если диспетчер ресурсов ожидает, что приложение по умолчанию ресурсы для внедрения в основную сборку приложения, они отсутствуют. Если <xref:System.Resources.NeutralResourcesLanguageAttribute> атрибут указывает, что ресурсы приложения по умолчанию располагаются во вспомогательной сборке, не удается найти сборку. При компиляции приложения, убедитесь, что ресурсы, встраиваются в основную сборку или необходимости вспомогательная сборка создается и соответствующее имя. Его имя должно задаваться в виде *appName*. resources.dll и он должен находиться в каталоге с именем языка и региональных параметров, он содержит ресурсы.  
  
-   Приложение не имеет значение по умолчанию или определенные нейтрального языка и региональных параметров. Добавить <xref:System.Resources.NeutralResourcesLanguageAttribute> атрибут для файла исходного кода или в файл проекта сведения файла (AssemblyInfo.vb для приложения, написанного на Visual Basic) или AssemblyInfo.cs для приложения C#.  
  
-   `baseName` Параметр в <xref:System.Resources.ResourceManager.%23ctor%28System.String%2CSystem.Reflection.Assembly%29> конструктор, не указывайте имя в RESOURCES-файл. Имя должно содержать полное имя пространства имен файла ресурсов, но не его расширение имени файла. Как правило файлы ресурсов, созданные в Visual Studio включают в себя имена пространств имен, но не файлы ресурсов, которые создаются и компилируются в командной строке. Можно скомпилировать и выполнить следующую программу, можно определить имена внедренные RESOURCES-файлы. Это консольное приложение, которое принимает имя основной сборки или вспомогательную сборку как параметр командной строки. Он отображает строки, которые должны быть предоставлены как `baseName` параметр, чтобы диспетчер ресурсов можно правильно определить ресурс.  
  
     [!code-csharp[System.Resources.ResourceManager.Class#4](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.resources.resourcemanager.class/cs/resourcenames.cs#4)]
     [!code-vb[System.Resources.ResourceManager.Class#4](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.resources.resourcemanager.class/vb/resourcenames.vb#4)]  
  
 Необходимо явно изменить текущий язык и региональные параметры приложения, следует также учитывать, диспетчер ресурсов получает набор ресурсов на основе значения <xref:System.Globalization.CultureInfo.CurrentUICulture%2A?displayProperty=nameWithType> свойства, а не <xref:System.Globalization.CultureInfo.CurrentCulture%2A?displayProperty=nameWithType> свойство. Как правило при изменении одного значения, необходимо также изменить другой.  
  
<a name="versioning"></a>   
### <a name="resource-versioning"></a>Управление версиями ресурсов  
 Поскольку главная сборка, содержащая ресурсы приложения по умолчанию отдельно от сопутствующих сборок приложения, можно выпускает новую версию основной сборки без повторного развертывания вспомогательных сборок. Вы используете <xref:System.Resources.SatelliteContractVersionAttribute> атрибут для использования существующего вспомогательные сборки и настроить диспетчер ресурсов не, чтобы повторно развернуть их до новой версии к главной сборке,  
  
 Дополнительные сведения о поддержке контроля версий вспомогательных сборок см. в статье [получение ресурсов](~/docs/framework/resources/retrieving-resources-in-desktop-apps.md).  
  
<a name="config"></a>   
### <a name="satelliteassemblies-configuration-file-node"></a>\<satelliteassemblies > узла файла конфигурации  
 Для исполняемых файлов, развернутые и работающие с веб-сайта (файлы .exe HREF) <xref:System.Resources.ResourceManager> объекта может производить поиск вспомогательных сборок в Интернете, которые могут снижать производительность приложения. Чтобы устранить проблемы с производительностью, можно ограничить это исследование вспомогательные сборки, которые были развернуты вместе с приложением. Чтобы сделать это, создайте `<satelliteassemblies>` узла в файле конфигурации приложения чтобы указать, что развернут определенный набор языков и региональных параметров для приложения и что <xref:System.Resources.ResourceManager> объекта не следует пытаться проверки для любого языка и региональных параметров, отсутствующих в этом узле.  
  
> [!NOTE]
>  Предпочтительный альтернатива созданию `<satelliteassemblies>` узел является использование [манифест развертывания ClickOnce](http://msdn.microsoft.com/library/8457e615-e3b6-4990-8dcf-11bc590e4e9b) компонентов.  
  
 В файле конфигурации приложения создайте раздел следующего вида:  
  
```  
<?xml version ="1.0"?>  
<configuration>  
    <satelliteassemblies>  
        <assembly name="MainAssemblyName, Version=versionNumber, Culture=neutral, PublicKeyToken=null|yourPublicKeyToken">  
            <culture>cultureName1</culture>  
            <culture>cultureName2</culture>  
            <culture>cultureName3</culture>  
        </assembly>  
    </satelliteassemblies>  
</configuration>  
```  
  
 Изменение сведений о конфигурации следующим образом:  
  
-   Укажите один или несколько `<assembly>` узлов для каждой развертываемой сборки, развертывании, где каждый узел указывает полное имя сборки. Укажите имя основной сборки вместо *MainAssemblyName*и укажите `Version`, `PublicKeyToken`, и `Culture` значения атрибутов, соответствующих к главной сборке.  
  
     Для `Version` атрибута, укажите номер версии сборки. Например первый выпуск сборки может быть номер версии 1.0.0.0.  
  
     Для `PublicKeyToken` атрибута, укажите ключевое слово `null` Если сборка со строгим именем не подписана, или укажите маркер открытого ключа, если сборка подписана.  
  
     Для `Culture` атрибута, укажите ключевое слово `neutral` обозначить главной сборки и привести к <xref:System.Resources.ResourceManager> класс поиск языков и региональных параметров, перечисленных в `<culture>` узлов.  
  
     Дополнительные сведения о полные имена сборок см. в статье [имена сборок](~/docs/framework/app-domains/assembly-names.md). Дополнительные сведения о сборках со строгими именами см. в статье [Создание и использование сборок](~/docs/framework/app-domains/create-and-use-strong-named-assemblies.md).  
  
-   Укажите один или несколько `<culture>` узлов с имя определенного языка и региональных параметров, например «fr-FR», или имя нейтрального языка и региональных параметров, например «fr».  
  
 Если ресурсы необходимы для какой-либо сборки, не указан в списке `<satelliteassemblies>` узел, <xref:System.Resources.ResourceManager> класса зонды для языков и региональных параметров с помощью стандартных правил проверки.  
  
<a name="ws"></a>   
## <a name="includewin8appnamelongincludeswin8-appname-long-mdmd-apps"></a>Приложения [!INCLUDE[win8_appname_long](~/includes/win8-appname-long-md.md)]  
  
> [!IMPORTANT]
>  Несмотря на то что <xref:System.Resources.ResourceManager> поддерживается в [!INCLUDE[win8_appname_long](~/includes/win8-appname-long-md.md)] приложений, не рекомендуется использовать его. Этот класс используется только при разработке [!INCLUDE[net_portable](~/includes/net-portable-md.md)] проекты, которые могут использоваться с [!INCLUDE[win8_appname_long](~/includes/win8-appname-long-md.md)] приложений. Для извлечения ресурсов из [!INCLUDE[win8_appname_long](~/includes/win8-appname-long-md.md)] приложения, используют [Windows.ApplicationModel.Resources.ResourceLoader](http://go.microsoft.com/fwlink/p/?LinkId=238182) вместо этого класс.  
  
 Для [!INCLUDE[win8_appname_long](~/includes/win8-appname-long-md.md)] приложений, <xref:System.Resources.ResourceManager> класс извлекает ресурсы из файлов индекса (PRI) пакета ресурсов. Один PRI-файл (приложение пакета PRI-файл) содержит ресурсы для культуры по умолчанию и любых локализованных языков и региональных параметров. Использование программы MakePRI для создания файла PRI, из одного или нескольких файлов ресурсов в формате XML ресурсов (.resw). Для ресурсов, включенных в проект Visual Studio Visual Studio обрабатывает процесс создания и упаковки в PRI-файл автоматически. Затем можно использовать .NET Framework <xref:System.Resources.ResourceManager> класса для доступа к ресурсам библиотеки или приложения.  
  
 Можно создать экземпляр <xref:System.Resources.ResourceManager> объекта для [!INCLUDE[win8_appname_long](~/includes/win8-appname-long-md.md)] приложений в так же, как и для классического приложения.  
  
 Теперь можно получить доступ к ресурсы для конкретного языка и региональных параметров, передав имя ресурса, который требуется извлечь для <xref:System.Resources.ResourceManager.GetString%28System.String%29> метод. По умолчанию этот метод возвращает ресурс для языка и региональных параметров, определяется текущий язык и региональные параметры пользовательского интерфейса потока, в которой был сделан вызов. Ресурсы для конкретного языка и региональных параметров также можно получить, передав имя ресурса и <xref:System.Globalization.CultureInfo> , представляющий язык и региональные параметры, ресурсом которого требуется извлечь для <xref:System.Resources.ResourceManager.GetString%28System.String%2CSystem.Globalization.CultureInfo%29> метод. Если не удается найти ресурс для текущего языка и региональных параметров пользовательского интерфейса или указанного языка и региональных параметров, диспетчер ресурсов использует список возврата языка пользовательского интерфейса для поиска подходящего ресурса.  
  
   
  
## Examples  
 Ниже приведен пример способы использования явное языка и региональных параметров и неявные текущих региональных параметров пользовательского интерфейса для получения строковых ресурсов главной сборки и вспомогательной сборки. Дополнительные сведения см. раздел «Каталог расположения для вспомогательных сборок не установлен в в глобальном кэше сборок» [Создание вспомогательных сборок](~/docs/framework/resources/creating-satellite-assemblies-for-desktop-apps.md) раздела.  
  
 Для выполнения этого примера:  
  
1.  В каталоге приложения создайте файл с именем rmc.txt, содержащий следующие строки ресурсов:  
  
    ```  
  
    day=Friday  
    year=2006  
    holiday="Cinco de Mayo"  
  
    ```  
  
2.  Используйте [генератор файлов ресурсов](~/docs/framework/tools/resgen-exe-resource-file-generator.md) для создания файла ресурсов rmc.resources из входного файла rmc.txt следующим образом:  
  
    ```  
    resgen rmc.txt  
    ```  
  
3.  Создайте подкаталог каталога приложения и назовите его «es-MX». Это имя языка и региональных параметров, будет создан в следующих трех шагах вспомогательной сборки.  
  
4.  Создайте файл с именем rmc.es MX.txt в каталоге es-MX, содержащий следующие строки ресурсов:  
  
    ```  
  
    day=Viernes  
    year=2006  
    holiday="Cinco de Mayo"  
  
    ```  
  
5.  Используйте [генератор файлов ресурсов](~/docs/framework/tools/resgen-exe-resource-file-generator.md) для создания файла ресурсов rmc.es MX.resources из входного файла rmc.es MX.txt следующим образом:  
  
    ```  
    resgen rmc.es-MX.txt  
    ```  
  
6.  Предположим, что имя файла для этого примера rmc.vb или rmc.cs. Скопируйте следующий исходный код в файл. Затем скомпилировать его и внедрить файл ресурсов главной сборки rmc.resources, исполняемая сборка. Если вы используете компилятор Visual Basic, используется синтаксис:  
  
    ```  
    vbc rmc.vb /resource:rmc.resources  
    ```  
  
     Ниже приведен соответствующий синтаксис для компилятора C#.  
  
    ```  
    csc /resource:rmc.resources rmc.cs  
    ```  
  
7.  Используйте [компоновщик сборок](~/docs/framework/tools/al-exe-assembly-linker.md) для создания вспомогательной сборки. Если rmc базовое имя приложения, имя вспомогательной сборки должны быть rmc.resources.dll. Вспомогательные сборки должны быть созданы в каталоге es-MX. Если текущий каталог es-MX, используйте следующую команду:  
  
    ```  
    al /embed:rmc.es-MX.resources /c:es-MX /out:rmc.resources.dll   
    ```  
  
8.  Запустите rmc.exe для получения и отображения строк внедренный ресурс.  
  
 [!code-csharp[ResourceManager_Class#1](~/samples/snippets/csharp/VS_Snippets_CLR/ResourceManager_Class/cs/rmc.cs#1)]
 [!code-vb[ResourceManager_Class#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/ResourceManager_Class/vb/rmc.vb#1)]  
  
 ]]></format>
    </remarks>
    <threadsafe>Данный тип потокобезопасен.</threadsafe>
    <altmember cref="T:System.Globalization.CultureInfo" />
    <altmember cref="P:System.Globalization.CultureInfo.CurrentUICulture" />
    <altmember cref="T:System.Resources.SatelliteContractVersionAttribute" />
  </Docs>
  <Members>
    <MemberGroup MemberName=".ctor">
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Инициализирует новый экземпляр класса <see cref="T:System.Resources.ResourceManager" />.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="protected ResourceManager ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Resources.ResourceManager.#ctor" />
      <MemberSignature Language="VB.NET" Value="Protected Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; ResourceManager();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Resources.ResourceManager</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary>Инициализирует новый экземпляр класса <see cref="T:System.Resources.ResourceManager" /> со значениями по умолчанию.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Этот конструктор используется только в том случае, если вы пишете собственный класс, производный от <xref:System.Resources.ResourceManager> класса.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public ResourceManager (Type resourceSource);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.Type resourceSource) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Resources.ResourceManager.#ctor(System.Type)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (resourceSource As Type)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; ResourceManager(Type ^ resourceSource);" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Resources.ResourceManager</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="resourceSource" Type="System.Type" />
      </Parameters>
      <Docs>
        <param name="resourceSource">Тип, из которого диспетчер ресурсов получает все сведения, необходимые для поиска RESOURCES-файлов.</param>
        <summary>Инициализирует новый экземпляр класса <see cref="T:System.Resources.ResourceManager" />, который ищет ресурсы в сопутствующих сборках, используя сведения из указанного объекта типа.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
## <a name="desktop-apps"></a>Классические приложения  
 В настольных приложениях диспетчер ресурсов использует `resourceSource` параметр, чтобы загрузить файл ресурсов следующим образом:  
  
-   Если <xref:System.Resources.NeutralResourcesLanguageAttribute> атрибут не используется, чтобы указать, что во вспомогательной сборке находятся ресурсы языка и региональных параметров по умолчанию, диспетчер ресурсов предполагается том, что файл ресурсов для культуры по умолчанию присутствует в одной сборке с типом, указанным `resourceSource` параметра.  
  
-   Диспетчер ресурсов предполагается, что файл ресурсов по умолчанию имеет такое же базовое имя типа, заданного параметром `resourceSource` параметр.  
  
-   Диспетчер ресурсов использует значение по умолчанию <xref:System.Resources.ResourceSet> класса для обработки файла ресурсов.  
  
 Например диспетчер ресурсов данного типа, с именем MyCompany.MyProduct.MyType, ищет RESOURCES-файл с именем MyCompany.MyProduct.MyType.resources в сборку, определяющую MyType.  
  
 В Visual Studio автоматически создает код, который определяет конструктор ресурсов `internal` (в C#) или `Friend` (в Visual Basic) класса, имя которого совпадает с базовое имя файла ресурсов для культуры по умолчанию. Это позволяет создать экземпляр <xref:System.Resources.ResourceManager> объекта и привязать ее с определенным набором ресурсов путем получения типа объекта, имя которого соответствует имени ресурса, так как при условии, что класс является видимым для компилятора, ресурсы, должны иметь как хорошо. Например, если RESOURCES-файл имеет имя Resource1, следующая инструкция создает <xref:System.Resources.ResourceManager> объекту управлять RESOURCES-файл с именем Resource1:  
  
 [!code-csharp[System.Resources.ResourceManager.ctor#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.resources.resourcemanager.ctor/cs/ctor1.cs#2)]  
  
 Если вы не используете Visual Studio, можно создать класс, не имеющем элементов, имя и пространство имен совпадают, по умолчанию RESOURCES-файла. Иллюстрация приведена в примере.  
  
## <a name="includewin8appnamelongincludeswin8-appname-long-mdmd-apps"></a>Приложения [!INCLUDE[win8_appname_long](~/includes/win8-appname-long-md.md)]  
  
> [!IMPORTANT]
>  Несмотря на то что <xref:System.Resources.ResourceManager> поддерживается в [!INCLUDE[win8_appname_long](~/includes/win8-appname-long-md.md)] приложений, не рекомендуется использовать его. Этот класс используется только при разработке [!INCLUDE[net_portable](~/includes/net-portable-md.md)] проекты, которые могут использоваться с [!INCLUDE[win8_appname_long](~/includes/win8-appname-long-md.md)] приложений. Для извлечения ресурсов из [!INCLUDE[win8_appname_long](~/includes/win8-appname-long-md.md)] приложения, используют [Windows.ApplicationModel.Resources.ResourceLoader](http://go.microsoft.com/fwlink/p/?LinkId=238182) вместо этого класс.  
  
 В [!INCLUDE[win8_appname_long](~/includes/win8-appname-long-md.md)] приложений, <xref:System.Resources.ResourceManager> использует `resourceSource` параметра для определения сборки, базовое имя и пространство имен, где элементы ресурса может быть расположен в приложения пакета файл индекса ресурсов (PRI). Например, если тип с именем MyCompany.MyProduct.MyType, которая определена в `MyAssembly`, диспетчер ресурсов ищет идентификатор с именем MyAssembly набор ресурсов и ищет области MyCompany.MyProduct.MyType внутри этого набора ресурсов. Диспетчер ресурсов выполняет поиск элементов ресурса в контексте по умолчанию (текущего языка и региональных параметров, текущий параметр режима высокой контрастности и т. д.) в рамках данной области.  
  
   
  
## Examples  
 В следующем примере используется <xref:System.Resources.ResourceManager.%23ctor%28System.Type%29> конструктора для создания <xref:System.Resources.ResourceManager> объекта. Он состоит из ресурсов, скомпилированные из TXT-файлы для английского языка (en), французский (Франция) (fr-FR) и русский (Россия) (ru-RU) языков и региональных параметров. В примере изменяется текущий язык и региональные параметры текущего пользовательского интерфейса для английского языка (США), французский (Франция), русский (Россия) и шведский (Швеция). Затем он вызывает <xref:System.Resources.ResourceManager.GetString%28System.String%29> метод для извлечения локализованную строку, которая появится приветствие, зависит от времени суток.  
  
 В примере требуется три файла ресурсов на основе текста, перечисленные в следующей таблице. Каждый файл содержит строку ресурсов с именем `Morning`, `Afternoon`, и `Evening`.  
  
|culture|Имя файла|Имя ресурса|Значение ресурса|  
|-------------|---------------|-------------------|--------------------|  
|ru-RU|GreetingResources.txt|`Morning`|Доброе утро|  
|ru-RU|GreetingResources.txt|`Afternoon`|Добрый день|  
|ru-RU|GreetingResources.txt|`Evening`|Добрый вечер|  
|fr-FR|GreetingResources.fr-FR.txt|`Morning`|Bonjour|  
|fr-FR|GreetingResources.fr-FR.txt|`Afternoon`|Bonjour|  
|fr-FR|GreetingResources.fr-FR.txt|`Evening`|Bonsoir|  
|ru-RU|GreetingResources.ru RU.txt|`Morning`|Доброе утро|  
|ru-RU|GreetingResources.ru RU.txt|`Afternoon`|Добрый день|  
|ru-RU|GreetingResources.ru RU.txt|`Evening`|Добрый вечер|  
  
 Чтобы скомпилировать этот пример Visual Basic и создать исполняемый файл с именем Greet.exe можно использовать следующий файл пакета. Чтобы скомпилировать C#, измените имя компилятора из `vbc` для `csc` и расширение файла с `.vb` для `.cs`.  
  
```  
  
resgen GreetingResources.txt  
vbc Greet.vb /resource: GreetingResources.resources  
  
md fr-FR  
resgen GreetingResources.fr-FR.txt  
al /out:fr-FR\Greet.resources.dll /culture:fr-FR /embed: GreetingResources.fr-FR.resources   
  
md ru-RU  
resgen GreetingResources.ru-RU.txt  
al /out:ru-RU\Greet.resources.dll /culture:ru-RU /embed: GreetingResources.ru-RU.resources  
  
```  
  
 Ниже приведен исходный код для примера (ShowDate.vb для версии Visual Basic) или ShowDate.cs для версии кода C#.  
  
 [!code-csharp[System.Resources.ResourceManager.Ctor#3](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.resources.resourcemanager.ctor/cs/greet.cs#3)]
 [!code-vb[System.Resources.ResourceManager.Ctor#3](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.resources.resourcemanager.ctor/vb/greet.vb#3)]  
  
 Кроме определения класса приложения с именем `Example`, исходный код определяет внутренний класс, имя которого `GreetingResources`, совпадает со значением базовое имя файла ресурсов. Это позволяет успешно создать экземпляр <xref:System.Resources.ResourceManager> путем вызова метода <xref:System.Resources.ResourceManager.%23ctor%28System.Type%29> конструктор.  
  
 Обратите внимание, что отображает выходные данные, который соответствующие локализованные строки кроме случаев, когда текущий язык и региональные параметры пользовательского интерфейса шведский (Швеция), в этом случае он использует ресурсы английского языка. Так как шведский язык ресурсы недоступны, приложение использует ресурсы для культуры по умолчанию, в соответствии с определением <xref:System.Resources.NeutralResourcesLanguageAttribute> вместо атрибута.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">Параметр <paramref name="resourceSource" /> имеет значение <see langword="null" />.</exception>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public ResourceManager (string baseName, System.Reflection.Assembly assembly);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(string baseName, class System.Reflection.Assembly assembly) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Resources.ResourceManager.#ctor(System.String,System.Reflection.Assembly)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; ResourceManager(System::String ^ baseName, System::Reflection::Assembly ^ assembly);" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Resources.ResourceManager</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="baseName" Type="System.String" />
        <Parameter Name="assembly" Type="System.Reflection.Assembly" />
      </Parameters>
      <Docs>
        <param name="baseName">Корневое имя файла ресурсов без расширения, но включающее какое-либо полное имя пространства имен. Например, имя корневой папки для файла ресурсов MyApplication.MyResource.en-US.resources будет MyApplication.MyResource.</param>
        <param name="assembly">Главная сборка для ресурсов.</param>
        <summary>Инициализирует новый экземпляр класса <see cref="T:System.Resources.ResourceManager" />, который ищет ресурсы, содержащиеся в файлах с указанным корневым именем, в данной сборке.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
## <a name="desktop-apps"></a>Классические приложения  
 В настольных приложениях отдельные региональных файлы ресурсов, которые должны содержаться в вспомогательные сборки и файла ресурсов культуры по умолчанию должен находиться в основной сборке. Вспомогательная сборка должна содержать ресурсы для одной культуры, указанной в манифесте сборки и загружается при необходимости.  
  
> [!NOTE]
>  Для извлечения ресурсов из RESOURCES-файлов напрямую, а не их извлечение из сборок, необходимо вызвать <xref:System.Resources.ResourceManager.CreateFileBasedResourceManager%2A> метод вместо этого для создания экземпляра <xref:System.Resources.ResourceManager> объекта.  
  
 Если файл ресурсов идентифицировано `baseName` не удается найти в `assembly`, метод создает <xref:System.Resources.ResourceManager> объект, но попытка извлечь конкретный ресурс вызывает исключение, обычно <xref:System.Resources.MissingManifestResourceException>. Сведения о поиске причины исключения, см. раздел «Обработка исключение MissingManifestResourceException» <xref:System.Resources.ResourceManager> разделе, посвященном классу.  
  
## <a name="includewin8appnamelongincludeswin8-appname-long-mdmd-apps"></a>Приложения [!INCLUDE[win8_appname_long](~/includes/win8-appname-long-md.md)]  
  
> [!IMPORTANT]
>  Несмотря на то что <xref:System.Resources.ResourceManager> поддерживается в [!INCLUDE[win8_appname_long](~/includes/win8-appname-long-md.md)] приложений, не рекомендуется использовать его. Этот класс используется только при разработке [!INCLUDE[net_portable](~/includes/net-portable-md.md)] проекты, которые могут использоваться с [!INCLUDE[win8_appname_long](~/includes/win8-appname-long-md.md)] приложений. Для извлечения ресурсов из [!INCLUDE[win8_appname_long](~/includes/win8-appname-long-md.md)] приложения, используют [Windows.ApplicationModel.Resources.ResourceLoader](http://go.microsoft.com/fwlink/p/?LinkId=238182) вместо этого класс.  
  
 В [!INCLUDE[win8_appname_long](~/includes/win8-appname-long-md.md)] приложений, диспетчер ресурсов использует простое имя `assembly` задать параметр для поиска соответствующего ресурса в приложения пакета файл индекса ресурсов (PRI). `baseName` Параметр используется для поиска элемента ресурса в наборе ресурсов. Например имя корневого элемента в PortableLibrary1.Resource1.de DE.resources — PortableLibrary1.Resource1.  
  
   
  
## Examples  
 В следующем примере используется простое приложение «Hello World» нелокализованное для иллюстрации <xref:System.Resources.ResourceManager.%23ctor%28System.String%2CSystem.Reflection.Assembly%29> конструктор. Ниже показано содержимое текстового файла с именем ExampleResources.txt. Когда приложение компилируется, ресурс внедряется в основную сборку приложения.  
  
```  
Greeting=Hello  
```  
  
 Текстовый файл можно преобразовать в двоичный файл ресурсов с помощью в командной строке следующим образом:  
  
```  
resgen ExampleResources.txt  
```  
  
 Ниже приведен исполняемый код, создающий <xref:System.Resources.ResourceManager> предлагает пользователю ввести имя объекта и появится приветствие.  
  
 [!code-csharp[System.Resources.ResourceManager.ctor#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.resources.resourcemanager.ctor/cs/example.cs#1)]
 [!code-vb[System.Resources.ResourceManager.ctor#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.resources.resourcemanager.ctor/vb/example.vb#1)]  
  
 Он может компилироваться с помощью следующей команды в Visual Basic:  
  
```  
vbc Example.vb /resource:ExampleResources.resources  
```  
  
 или с помощью следующих команд в C#:  
  
```  
csc Example.cs /resource:ExampleResources.resources  
```  
  
 Обратите внимание, что пример извлекает ссылку на сборку, которая содержит файл ресурсов, передав тип, определенный в сборке `typeof` функция (в C#) или `GetType` функцией (в Visual Basic) и получение значения его <xref:System.Type.Assembly%2A?displayProperty=nameWithType>свойство.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">Значение параметра <paramref name="baseName" /> или параметра <paramref name="assembly" /> — <see langword="null" />.</exception>
        <block subset="none" type="overrides">
          <para>Этот конструктор использует предоставляемые системой <see cref="T:System.Resources.ResourceSet" /> реализации. Чтобы использовать формат файла настраиваемого ресурса, должен быть производным от <see cref="T:System.Resources.ResourceSet" /> класса и переопределить методы <see cref="M:System.Resources.ResourceSet.GetDefaultReader" /> и <see cref="M:System.Resources.ResourceSet.GetDefaultWriter" /> методы и pass, введите для <see cref="M:System.Resources.ResourceManager.#ctor(System.String,System.Reflection.Assembly,System.Type)" /> конструктор. С помощью настраиваемого <see cref="T:System.Resources.ResourceSet" /> можно использовать для управления политикой кэширования ресурсов или поддержка собственного формата файлов ресурсов, но обычно это не обязательно.</para>
        </block>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public ResourceManager (string baseName, System.Reflection.Assembly assembly, Type usingResourceSet);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(string baseName, class System.Reflection.Assembly assembly, class System.Type usingResourceSet) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Resources.ResourceManager.#ctor(System.String,System.Reflection.Assembly,System.Type)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; ResourceManager(System::String ^ baseName, System::Reflection::Assembly ^ assembly, Type ^ usingResourceSet);" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Resources.ResourceManager</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="baseName" Type="System.String" />
        <Parameter Name="assembly" Type="System.Reflection.Assembly" />
        <Parameter Name="usingResourceSet" Type="System.Type" />
      </Parameters>
      <Docs>
        <param name="baseName">Корневое имя файла ресурсов без расширения, но включающее какое-либо полное имя пространства имен. Например, имя корневой папки для файла ресурсов MyApplication.MyResource.en-US.resources будет MyApplication.MyResource.</param>
        <param name="assembly">Главная сборка для ресурсов.</param>
        <param name="usingResourceSet">Тип пользовательского объекта <see cref="T:System.Resources.ResourceSet" /> для использования. При значении <see langword="null" /> используется объект времени выполнения по умолчанию <see cref="T:System.Resources.ResourceSet" />.</param>
        <summary>Инициализирует новый экземпляр класса <see cref="T:System.Resources.ResourceManager" />, который использует указанный класс <see cref="T:System.Resources.ResourceSet" /> для поиска ресурсов, содержащихся в файлах с указанным корневым именем, в данной сборке.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Отдельные региональных файлы ресурсов, которые должны содержаться в вспомогательные сборки и файла ресурсов культуры по умолчанию должен находиться в основной сборке. Вспомогательная сборка должна содержать ресурсы для одной культуры, указанной в манифесте сборки и загружается при необходимости.  
  
> [!NOTE]
>  Для извлечения ресурсов из RESOURCES-файлов напрямую, а не их извлечение из сборок, необходимо вызвать <xref:System.Resources.ResourceManager.CreateFileBasedResourceManager%2A> метод вместо этого для создания экземпляра <xref:System.Resources.ResourceManager> объекта.  
  
 Если файл ресурсов идентифицировано `baseName` не удается найти в `assembly`, метод создает <xref:System.Resources.ResourceManager> объект, но попытка извлечь конкретный ресурс вызывает исключение, обычно <xref:System.Resources.MissingManifestResourceException>. Сведения о поиске причины исключения, см. раздел «Обработка исключение MissingManifestResourceException» <xref:System.Resources.ResourceManager> разделе, посвященном классу.  
  
> [!NOTE]
>  `usingResourceSet` Параметр используется для поддержки собственного формата ресурсов и обычно `null`. Это поведение отличается от конструктора, принимающего <xref:System.Type> только.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          Объект <paramref name="usingResourceset" /> не является производным от класса <see cref="T:System.Resources.ResourceSet" />.</exception>
        <exception cref="T:System.ArgumentNullException">Значение параметра <paramref name="baseName" /> или параметра <paramref name="assembly" /> — <see langword="null" />.</exception>
        <block subset="none" type="usage">
          <para>Этот конструктор позволяет указать <see cref="T:System.Resources.ResourceSet" /> реализации. Если вам необходимо специальное <see cref="T:System.Resources.ResourceSet" /> реализации, но нужно будет использовать формат файла настраиваемого ресурса, должен быть производным от <see cref="T:System.Resources.ResourceSet" /> класса и переопределить методы <see cref="M:System.Resources.ResourceSet.GetDefaultReader" /> и <see cref="M:System.Resources.ResourceSet.GetDefaultWriter" /> методы и pass, введите для этого конструктора.</para>
        </block>
      </Docs>
    </Member>
    <Member MemberName="BaseName">
      <MemberSignature Language="C#" Value="public virtual string BaseName { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string BaseName" />
      <MemberSignature Language="DocId" Value="P:System.Resources.ResourceManager.BaseName" />
      <MemberSignature Language="VB.NET" Value="Public Overridable ReadOnly Property BaseName As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property System::String ^ BaseName { System::String ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Resources.ResourceManager</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Возвращает имя корневой папки файлов ресурсов, в которой класс <see cref="T:System.Resources.ResourceManager" /> ищет ресурсы.</summary>
        <value>Имя корневой папки файлов ресурсов, в которой класс <see cref="T:System.Resources.ResourceManager" /> ищет ресурсы.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Resources.ResourceManager.BaseName%2A> Свойство отражает полным именем пространства имен и имя корневой папки ресурсов файл ресурсов без расширения имени языка и региональных параметров или файл. Например, если имя файла ресурсов по умолчанию приложения `SampleApps.StringResources.resources`, значение <xref:System.Resources.ResourceManager.BaseName%2A> свойство является «SampleApps.StringResources». Если имя файла ресурсов по умолчанию приложения `SampleApps.StringResources.en-US.resources` и внедрен во вспомогательную сборку, значение <xref:System.Resources.ResourceManager.BaseName%2A> свойство по-прежнему является «SampleApps.StringResources».  
  
> [!IMPORTANT]
>  <xref:System.Resources.ResourceManager.BaseName%2A> Значение свойства файла ресурсов, который компилируется и внедренных из командной строки не подразумевает имя пространства имен, если явно указано одно при компиляции файла. С другой стороны <xref:System.Resources.ResourceManager.BaseName%2A> значение свойства файла ресурсов, который компилируется и внедрен в среде Visual Studio обычно включает пространство имен по умолчанию.  
  
 <xref:System.Resources.ResourceManager.BaseName%2A> Значение свойства рассматривается как строка, передаваемая <xref:System.Resources.ResourceManager.%23ctor%28System.String%2CSystem.Reflection.Assembly%29> или <xref:System.Resources.ResourceManager.%23ctor%28System.String%2CSystem.Reflection.Assembly%2CSystem.Type%29> конструктор при создании экземпляра <xref:System.Resources.ResourceManager> экземпляра.  
  
   
  
## Examples  
 Можно скомпилировать и выполнить следующую программу, можно определить имена внедренные RESOURCES-файлы. Это консольное приложение, которое принимает имя основной сборки или вспомогательную сборку как параметр командной строки. Он отображает строки, которые должны быть предоставлены как `baseName` параметр <xref:System.Resources.ResourceManager.%23ctor%28System.String%2CSystem.Reflection.Assembly%29> или <xref:System.Resources.ResourceManager.%23ctor%28System.String%2CSystem.Reflection.Assembly%2CSystem.Type%29> конструктор, чтобы диспетчер ресурсов можно правильно определить ресурс.  
  
 [!code-csharp[System.Resources.ResourceManager.Class#4](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.resources.resourcemanager.class/cs/resourcenames.cs#4)]
 [!code-vb[System.Resources.ResourceManager.Class#4](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.resources.resourcemanager.class/vb/resourcenames.vb#4)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="BaseNameField">
      <MemberSignature Language="C#" Value="protected string BaseNameField;" />
      <MemberSignature Language="ILAsm" Value=".field family string BaseNameField" />
      <MemberSignature Language="DocId" Value="F:System.Resources.ResourceManager.BaseNameField" />
      <MemberSignature Language="VB.NET" Value="Protected BaseNameField As String " />
      <MemberSignature Language="C++ CLI" Value="protected: System::String ^ BaseNameField;" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Указывает имя корневой папки файлов ресурсов, в которой класс <see cref="T:System.Resources.ResourceManager" /> ищет ресурсы.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Resources.ResourceManager.BaseNameField> Поле используется только в том случае, если вы пишете собственный класс, производный от <xref:System.Resources.ResourceManager> класса.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="CreateFileBasedResourceManager">
      <MemberSignature Language="C#" Value="public static System.Resources.ResourceManager CreateFileBasedResourceManager (string baseName, string resourceDir, Type usingResourceSet);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Resources.ResourceManager CreateFileBasedResourceManager(string baseName, string resourceDir, class System.Type usingResourceSet) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Resources.ResourceManager.CreateFileBasedResourceManager(System.String,System.String,System.Type)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function CreateFileBasedResourceManager (baseName As String, resourceDir As String, usingResourceSet As Type) As ResourceManager" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Resources::ResourceManager ^ CreateFileBasedResourceManager(System::String ^ baseName, System::String ^ resourceDir, Type ^ usingResourceSet);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Resources.ResourceManager</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Resources.ResourceManager</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="baseName" Type="System.String" />
        <Parameter Name="resourceDir" Type="System.String" />
        <Parameter Name="usingResourceSet" Type="System.Type" />
      </Parameters>
      <Docs>
        <param name="baseName">Имя корневой папки ресурсов. Например, имя корневой папки для файла ресурсов "MyResource.en-US.resources" будет "MyResource".</param>
        <param name="resourceDir">Имя папки, в которой производится поиск ресурсов. <c>resourceDir</c> может быть абсолютным или относительным путем из каталога приложения.</param>
        <param name="usingResourceSet">Тип пользовательского объекта <see cref="T:System.Resources.ResourceSet" /> для использования. При значении <see langword="null" /> используется объект времени выполнения по умолчанию <see cref="T:System.Resources.ResourceSet" />.</param>
        <summary>Возвращает объект <see cref="T:System.Resources.ResourceManager" />, который ищет ресурсы в конкретном каталоге вместо манифеста сборки.</summary>
        <returns>Новый экземпляр диспетчера ресурсов, который выполняет поиск ресурсов в указанном каталоге вместо манифеста сборки.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Этот метод возвращает диспетчер ресурсов, извлекает ресурсы из RESOURCES-файл, не внедряются в сборку. Эту функцию можно использовать <xref:System.Resources.ResourceManager> объект для загрузки ресурсов для страницы ASP.NET или для проверки <xref:System.Resources.ResourceSet> реализации.  Пример извлекает ресурсы из автономного RESOURCES-файла см. в разделе [получение ресурсов](~/docs/framework/resources/retrieving-resources-in-desktop-apps.md) статьи.  
  
 Этот метод позволяет указать <xref:System.Resources.ResourceSet> реализации. Если вам необходимо специальное <xref:System.Resources.ResourceSet> реализации, но хотите использовать формат файла настраиваемого ресурса, должен быть производным от <xref:System.Resources.ResourceSet> класса и переопределить методы <xref:System.Resources.ResourceSet.GetDefaultReader%2A> и <xref:System.Resources.ResourceSet.GetDefaultWriter%2A> методов и передать, введите в этот конструктор.  
  
> [!CAUTION]
>  Использование изолированных файлов ресурсов в приложении ASP.NET приведет к потере развертывание XCOPY, так как ресурсы останется заблокирован, пока не будет явно выпускаются корпорацией <xref:System.Resources.ResourceManager.ReleaseAllResources%2A> метод. Если требуется развертывание ресурсов в приложениях ASP.NET, скомпилируйте RESOURCES-файлов во вспомогательные сборки.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">Значение параметра <paramref name="baseName" /> или параметра <paramref name="resourceDir" /> — <see langword="null" />.</exception>
        <permission cref="T:System.Security.Permissions.ReflectionPermission">При вызове поздней привязкой, такие как <see cref="M:System.Type.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[])" />. Связанное перечисление: <see cref="F:System.Security.Permissions.ReflectionPermissionFlag.MemberAccess" />.</permission>
      </Docs>
    </Member>
    <Member MemberName="FallbackLocation">
      <MemberSignature Language="C#" Value="protected System.Resources.UltimateResourceFallbackLocation FallbackLocation { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Resources.UltimateResourceFallbackLocation FallbackLocation" />
      <MemberSignature Language="DocId" Value="P:System.Resources.ResourceManager.FallbackLocation" />
      <MemberSignature Language="VB.NET" Value="Protected Property FallbackLocation As UltimateResourceFallbackLocation" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; property System::Resources::UltimateResourceFallbackLocation FallbackLocation { System::Resources::UltimateResourceFallbackLocation get(); void set(System::Resources::UltimateResourceFallbackLocation value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Resources.ResourceManager</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Resources.UltimateResourceFallbackLocation</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Возвращает или задает расположение, из которого извлекаются резервные ресурсы по умолчанию.</summary>
        <value>Одно из значений перечисления, которое указывает, где диспетчер ресурсов может выполнять поиск резервных ресурсов.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Resources.ResourceManager.FallbackLocation%2A> Свойство полезно, только в том случае, если вы пишете собственный класс, производный от <xref:System.Resources.ResourceManager> класса.  
  
 Можно использовать <xref:System.Resources.NeutralResourcesLanguageAttribute> атрибут для информирования диспетчера ресурсов, где найти культуру по умолчанию для приложения: в основную сборку (по умолчанию) или во вспомогательную сборку.  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Resources.UltimateResourceFallbackLocation" />
        <altmember cref="T:System.Resources.NeutralResourcesLanguageAttribute" />
      </Docs>
    </Member>
    <Member MemberName="GetNeutralResourcesLanguage">
      <MemberSignature Language="C#" Value="protected static System.Globalization.CultureInfo GetNeutralResourcesLanguage (System.Reflection.Assembly a);" />
      <MemberSignature Language="ILAsm" Value=".method familystatic hidebysig class System.Globalization.CultureInfo GetNeutralResourcesLanguage(class System.Reflection.Assembly a) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Resources.ResourceManager.GetNeutralResourcesLanguage(System.Reflection.Assembly)" />
      <MemberSignature Language="VB.NET" Value="Protected Shared Function GetNeutralResourcesLanguage (a As Assembly) As CultureInfo" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; static System::Globalization::CultureInfo ^ GetNeutralResourcesLanguage(System::Reflection::Assembly ^ a);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Resources.ResourceManager</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Globalization.CultureInfo</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="a" Type="System.Reflection.Assembly" />
      </Parameters>
      <Docs>
        <param name="a">Сборка, для которой требуется получить сведения, относящиеся к конкретному языку и региональным параметрам.</param>
        <summary>Возвращает сведения, относящиеся к конкретному языку и региональным параметрам, для ресурсов главной сборки по умолчанию путем получения значения атрибута <see cref="T:System.Resources.NeutralResourcesLanguageAttribute" /> в указанной сборке.</summary>
        <returns>Язык и региональные параметры из атрибута <see cref="T:System.Resources.NeutralResourcesLanguageAttribute" />, если они найдены; в противном случае — инвариантный язык и региональные параметры.</returns>
        <remarks>To be added.</remarks>
        <permission cref="T:System.Security.Permissions.ReflectionPermission">При вызове поздней привязкой, такие как <see cref="M:System.Type.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[])" />. Связанное перечисление: <see cref="F:System.Security.Permissions.ReflectionPermissionFlag.MemberAccess" />.</permission>
      </Docs>
    </Member>
    <MemberGroup MemberName="GetObject">
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Возвращает значение указанного нестрокового ресурса для текущего языка и региональных параметров.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="GetObject">
      <MemberSignature Language="C#" Value="public virtual object GetObject (string name);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance object GetObject(string name) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Resources.ResourceManager.GetObject(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetObject (name As String) As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::Object ^ GetObject(System::String ^ name);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Resources.ResourceManager</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="name">Имя получаемого ресурса.</param>
        <summary>Возвращает значение указанного нестрокового ресурса.</summary>
        <returns>Значение ресурса, локализованного для текущих настроек языка и региональных параметров вызывающего объекта. Если соответствующий набор ресурсов существует, но параметр <paramref name="name" /> не найден, то метод возвращает значение <see langword="null" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Resources.ResourceManager.GetObject%2A> Метод используется для извлечения ресурсов, не являющегося строкой. К ним относятся значения, которые принадлежат типы-примитивы, такие как <xref:System.Int32> или <xref:System.Double>, растровые изображения (например, <xref:System.Drawing.Bitmap?displayProperty=nameWithType> объекта), или настраиваемый сериализованных объектов. Обычно возвращаемый объект должен приведите (в C#) или преобразован (в Visual Basic) в объект нужного типа.  
  
 Возвращаемый ресурс локализован для языка и региональных параметров пользовательского интерфейса текущего потока, определяемый по <xref:System.Globalization.CultureInfo.CurrentUICulture%2A?displayProperty=nameWithType> свойство. Если ресурс не локализован для этого языка и региональных параметров, диспетчер ресурсов использует правила отката для загрузки подходящего ресурса. Если обнаруживается нет подходящего набора локализованные ресурсы, <xref:System.Resources.ResourceManager> возвращается ресурсов культуры по умолчанию. Если набор ресурсов для культуры по умолчанию не найден, метод вызывает <xref:System.Resources.MissingManifestResourceException> исключение или, если набор ресурсов должна размещаться во вспомогательной сборке <xref:System.Resources.MissingSatelliteAssemblyException> исключение. Если диспетчер ресурсов можно загрузить набор подходящего ресурса, но не удается найти ресурс с именем `name`, метод возвращает `null`.  
  
 <xref:System.Resources.ResourceManager.IgnoreCase%2A> Свойство определяет ли сравнение `name` с именами ресурсов не учитывается регистр (по умолчанию) или с учетом регистра.  
  
> [!CAUTION]
>  Этот метод может выдать больше исключений, чем указано в списке. Одна из причин, возможно, это является, если метод, который вызывает этот метод создает исключение.  Например <xref:System.IO.FileLoadException> исключение может возникать, если ошибка была осуществлена развертывание и установку вспомогательную сборку, или <xref:System.Runtime.Serialization.SerializationException> исключение может вызываться, если определяемый пользователем тип создает исключение определяемых пользователем при десериализации типа.  
  
## <a name="performance-considerations"></a>Особенности производительности  
 При вызове метода <xref:System.Resources.ResourceManager.GetObject%2A> метода несколько раз с одинаковым `name` параметра, не зависят от возвращение ссылки на один и тот же объект при каждом вызове метода. Это вызвано <xref:System.Resources.ResourceManager.GetObject%2A> метод может вернуть ссылку на существующий объект ресурса в кэше, или он перегружает ресурс и получите ссылку на объект нового ресурса.  
  
   
  
## Examples  
 В следующем примере для десериализации настраиваемого объекта используется метод <xref:System.Resources.ResourceManager.GetObject%28System.String%29> . В пример включен файл исходного кода с именем UIElements.cs (UIElements.vb, если вы используете Visual Basic), определяющий следующая структура с именем `PersonTable`. Эта структура предназначена для использования подпрограммой общего отображения таблиц, которая отображает локализованные имена для столбцов таблиц. Обратите внимание, что структура `PersonTable` помечена атрибутом <xref:System.SerializableAttribute> .  
  
 [!code-csharp[Conceptual.Resources.Retrieving#6](~/samples/snippets/csharp/VS_Snippets_CLR/conceptual.resources.retrieving/cs/example.cs#6)]
 [!code-vb[Conceptual.Resources.Retrieving#6](~/samples/snippets/visualbasic/VS_Snippets_CLR/conceptual.resources.retrieving/vb/example.vb#6)]  
  
 Следующий код из файла CreateResources.cs (CreateResources.vb для Visual Basic) создает файл ресурсов XML с именем UIResources.resx, где хранится заголовок таблицы, и объект `PersonTable` , содержащий сведения о приложении, локализуемые для английского языка.  
  
 [!code-csharp[Conceptual.Resources.Retrieving#7](~/samples/snippets/csharp/VS_Snippets_CLR/conceptual.resources.retrieving/cs/example1.cs#7)]
 [!code-vb[Conceptual.Resources.Retrieving#7](~/samples/snippets/visualbasic/VS_Snippets_CLR/conceptual.resources.retrieving/vb/example.vb#7)]  
  
 После этого приведенный ниже код из файла GetObject.cs (GetObject.vb) извлекает ресурсы и выводит их на консоль.  
  
 [!code-csharp[Conceptual.Resources.Retrieving#8](~/samples/snippets/csharp/VS_Snippets_CLR/conceptual.resources.retrieving/cs/example2.cs#8)]
 [!code-vb[Conceptual.Resources.Retrieving#8](~/samples/snippets/visualbasic/VS_Snippets_CLR/conceptual.resources.retrieving/vb/example2.vb#8)]  
  
 Создать нужный файл ресурсов, сборки и запустить приложение можно, запустив следующий пакетный файл. Необходимо использовать параметр `/r` , чтобы предоставить Resgen.exe ссылку на UIElements.dll для доступа к информации о структуре `PersonTable` . Если используется C#, замените имя компилятора `vbc` на `csc`и расширение `.vb` на `.cs`.  
  
```  
  
vbc /t:library UIElements.vb  
vbc CreateResources.vb /r:UIElements.dll  
CreateResources  
  
resgen UIResources.resx  /r:UIElements.dll  
vbc GetObject.vb /r:UIElements.dll /resource:UIResources.resources  
  
GetObject.exe  
  
```  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">Параметр <paramref name="name" /> имеет значение <see langword="null" />.</exception>
        <exception cref="T:System.Resources.MissingManifestResourceException">Не найден подходящий набор локализованных ресурсов и отсутствуют ресурсы языка и региональных параметров по умолчанию. Сведения об обработке этого исключения см. в подразделе "Обработка исключений MissingManifestResourceException и MissingSatelliteAssemblyException" раздела, посвященного классу <see cref="T:System.Resources.ResourceManager" />.</exception>
        <exception cref="T:System.Resources.MissingSatelliteAssemblyException">Ресурсы языка и региональных параметров по умолчанию находятся во вспомогательной сборке, которую не удалось найти. Сведения об обработке этого исключения см. в подразделе "Обработка исключений MissingManifestResourceException и MissingSatelliteAssemblyException" раздела, посвященного классу <see cref="T:System.Resources.ResourceManager" />.</exception>
        <permission cref="T:System.Security.Permissions.ReflectionPermission">При вызове поздней привязкой, такие как <see cref="M:System.Type.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[])" />. Связанное перечисление: <see cref="F:System.Security.Permissions.ReflectionPermissionFlag.MemberAccess" />.</permission>
        <altmember cref="M:System.Resources.ResourceManager.GetStream(System.String)" />
      </Docs>
    </Member>
    <Member MemberName="GetObject">
      <MemberSignature Language="C#" Value="public virtual object GetObject (string name, System.Globalization.CultureInfo culture);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance object GetObject(string name, class System.Globalization.CultureInfo culture) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Resources.ResourceManager.GetObject(System.String,System.Globalization.CultureInfo)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetObject (name As String, culture As CultureInfo) As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::Object ^ GetObject(System::String ^ name, System::Globalization::CultureInfo ^ culture);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Resources.ResourceManager</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
        <Parameter Name="culture" Type="System.Globalization.CultureInfo" />
      </Parameters>
      <Docs>
        <param name="name">Имя получаемого ресурса.</param>
        <param name="culture">Язык и региональные параметры, для которых локализуется этот ресурс. Если ресурс для языка и региональных параметров не локализован, диспетчер ресурсов использует резервные правила для поиска подходящего ресурса.  
  
 Если это значение равно <see langword="null" />, объект <see cref="T:System.Globalization.CultureInfo" /> получается с помощью свойства <see cref="P:System.Globalization.CultureInfo.CurrentUICulture" />.</param>
        <summary>Возвращает значение указанного нестрокового ресурса, локализованного для указанного языка и региональных параметров.</summary>
        <returns>Значение ресурса, локализованного для указанного языка и региональных параметров. Если соответствующий набор ресурсов существует, но параметр <paramref name="name" /> не найден, то метод возвращает значение <see langword="null" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Resources.ResourceManager.GetObject%28System.String%2CSystem.Globalization.CultureInfo%29> Метод используется для извлечения ресурсов, не являющегося строкой. К ним относятся значения, которые принадлежат типы-примитивы, такие как <xref:System.Int32> или <xref:System.Double>, растровые изображения (например, <xref:System.Drawing.Bitmap?displayProperty=nameWithType> объекта), или настраиваемый сериализованных объектов. Обычно возвращаемый объект должен приведите (в C#) или преобразован (в Visual Basic) в объект нужного типа.  
  
 Возвращаемый ресурс локализован для языка и региональных параметров, который задается параметром `culture`, или для языка и региональных параметров, который задается параметром <xref:System.Globalization.CultureInfo.CurrentUICulture%2A?displayProperty=nameWithType> свойство Если `culture` — `null`. Если ресурс не локализован для этого языка и региональных параметров, диспетчер ресурсов использует правила отката для загрузки подходящего ресурса. Если найден нет подходящего набора локализованные ресурсы, диспетчер ресурсов возвращается ресурсов культуры по умолчанию. Если набор ресурсов для культуры по умолчанию не найден, метод вызывает <xref:System.Resources.MissingManifestResourceException> исключение или, если набор ресурсов должна размещаться во вспомогательной сборке <xref:System.Resources.MissingSatelliteAssemblyException> исключение. Если диспетчер ресурсов можно загрузить набор подходящего ресурса, но не удается найти ресурс с именем `name`, метод возвращает `null`.  
  
 <xref:System.Resources.ResourceManager.IgnoreCase%2A> Свойство определяет ли сравнение `name` с именами ресурсов не учитывается регистр (по умолчанию) или с учетом регистра.  
  
> [!CAUTION]
>  Этот метод может выдать больше исключений, чем указано в списке. Одна из причин, возможно, это является, если метод, который вызывает этот метод создает исключение.  Например <xref:System.IO.FileLoadException> исключение может возникать, если ошибка была осуществлена развертывание и установку вспомогательную сборку, или <xref:System.Runtime.Serialization.SerializationException> исключение может вызываться, если определяемый пользователем тип создает исключение определяемых пользователем при десериализации типа.  
  
## <a name="performance-considerations"></a>Особенности производительности  
 При вызове метода <xref:System.Resources.ResourceManager.GetObject%2A> метода несколько раз с одинаковым `name` параметра, не зависят от возвращение ссылки на один и тот же объект при каждом вызове метода. Это вызвано <xref:System.Resources.ResourceManager.GetObject%2A> метод может вернуть ссылку на существующий объект ресурса в кэше, или он перегружает ресурс и получите ссылку на объект нового ресурса.  
  
   
  
## Examples  
 В следующем примере для десериализации настраиваемого объекта используется метод <xref:System.Resources.ResourceManager.GetObject%28System.String%2CSystem.Globalization.CultureInfo%29> . В пример включен файл исходного кода с именем NumberInfo.cs (NumberInfo.vb, если вы используете Visual Basic), определяющий следующая структура с именем `Numbers`. Эта структура предназначена для использования простого образовательные приложения, которое обучает локализованной озвучивания для подсчета до 10 на английском языке. Обратите внимание, что `Numbers` класс, помеченный с <xref:System.SerializableAttribute> атрибута.  
  
 [!code-csharp[System.Resources.ResourceManager.GetObject#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.resources.resourcemanager.getobject/cs/numberinfo.cs#1)]
 [!code-vb[System.Resources.ResourceManager.GetObject#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.resources.resourcemanager.getobject/vb/numberinfo.vb#1)]  
  
 Следующий исходный код из файла именованного CreateResources.cs (CreateResources.vb для Visual Basic) создает XML-файлы ресурсов для английского языка по умолчанию, а также для языков, французский, португальский и русский.  
  
 [!code-csharp[System.Resources.ResourceManager.GetObject#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.resources.resourcemanager.getobject/cs/createresources.cs#2)]
 [!code-vb[System.Resources.ResourceManager.GetObject#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.resources.resourcemanager.getobject/vb/createresources.vb#2)]  
  
 Ресурсы используются следующие приложение, которое задает текущий язык и региональные параметры пользовательского интерфейса на французский (Франция), португальский (Бразилия) или русский (Россия). Он вызывает <xref:System.Resources.ResourceManager.GetObject%28System.String%29> метод, чтобы получить `Numbers` объект, который содержит локализованные числа и <xref:System.Resources.ResourceManager.GetObject%28System.String%2CSystem.Globalization.CultureInfo%29> метод, чтобы получить `Numbers` объект, содержащий числа для английского языка. Затем отображается нечетного числа, с помощью текущего языка и региональных параметров пользовательского интерфейса и английского языка. Файл исходного кода, называется ShowNumbers.cs (ShowNumbers.vb).  
  
 [!code-csharp[System.Resources.ResourceManager.GetObject#3](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.resources.resourcemanager.getobject/cs/shownumbers.cs#3)]
 [!code-vb[System.Resources.ResourceManager.GetObject#3](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.resources.resourcemanager.getobject/vb/shownumbers.vb#3)]  
  
 В следующем пакетном файле можно использовать для построения и выполнения примера Visual Basic-версии. Если вы используете C#, замените `vbc` с `csc`и замените `.vb` расширение с `.cs`.  
  
```  
  
vbc /t:library NumberInfo.vb  
  
vbc CreateResources.vb /r:NumberInfo.dll  
CreateResources  
  
resgen NumberResources.resx /r:NumberInfo.dll  
  
resgen NumberResources.fr.resx /r:Numberinfo.dll  
Md fr  
al /embed:NumberResources.fr.resources /culture:fr /t:lib /out:fr\ShowNumbers.resources.dll  
  
resgen NumberResources.pt.resx  /r:Numberinfo.dll  
Md pt  
al /embed:NumberResources.pt.resources /culture:pt /t:lib /out:pt\ShowNumbers.resources.dll  
  
resgen NumberResources.ru.resx /r:Numberinfo.dll  
Md ru  
al /embed:NumberResources.ru.resources /culture:ru /t:lib /out:ru\ShowNumbers.resources.dll  
  
vbc ShowNumbers.vb /r:NumberInfo.dll /resource:NumberResources.resources  
ShowNumbers.exe  
```  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">Параметр <paramref name="name" /> имеет значение <see langword="null" />.</exception>
        <exception cref="T:System.Resources.MissingManifestResourceException">Не было найдено никаких возможных наборов ресурсов и отсутствуют ресурсы языка и региональных параметров по умолчанию. Сведения об обработке этого исключения см. в подразделе "Обработка исключений MissingManifestResourceException и MissingSatelliteAssemblyException" раздела, посвященного классу <see cref="T:System.Resources.ResourceManager" />.</exception>
        <exception cref="T:System.Resources.MissingSatelliteAssemblyException">Ресурсы языка и региональных параметров по умолчанию находятся во вспомогательной сборке, которую не удалось найти. Сведения об обработке этого исключения см. в подразделе "Обработка исключений MissingManifestResourceException и MissingSatelliteAssemblyException" раздела, посвященного классу <see cref="T:System.Resources.ResourceManager" />.</exception>
        <permission cref="T:System.Security.Permissions.ReflectionPermission">При вызове поздней привязкой, такие как <see cref="M:System.Type.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[])" />. Связанное перечисление: <see cref="F:System.Security.Permissions.ReflectionPermissionFlag.MemberAccess" />.</permission>
        <threadsafe>
          <see cref="M:System.Resources.ResourceManager.GetObject(System.String,System.Globalization.CultureInfo)" /> Метод является потокобезопасным.</threadsafe>
        <altmember cref="M:System.Resources.ResourceManager.GetStream(System.String,System.Globalization.CultureInfo)" />
        <altmember cref="T:System.Globalization.CultureInfo" />
      </Docs>
    </Member>
    <Member MemberName="GetResourceFileName">
      <MemberSignature Language="C#" Value="protected virtual string GetResourceFileName (System.Globalization.CultureInfo culture);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance string GetResourceFileName(class System.Globalization.CultureInfo culture) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Resources.ResourceManager.GetResourceFileName(System.Globalization.CultureInfo)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Function GetResourceFileName (culture As CultureInfo) As String" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual System::String ^ GetResourceFileName(System::Globalization::CultureInfo ^ culture);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Resources.ResourceManager</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="culture" Type="System.Globalization.CultureInfo" />
      </Parameters>
      <Docs>
        <param name="culture">Объект языка и региональных параметров, для которого создается имя файла ресурсов.</param>
        <summary>Создает имя файла ресурсов для заданного объекта <see cref="T:System.Globalization.CultureInfo" />.</summary>
        <returns>Имя, которое может быть использовано для файла ресурсов для заданного объекта <see cref="T:System.Globalization.CultureInfo" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Resources.ResourceManager.GetResourceFileName%2A> Метод полезен только в том случае, если вы пишете собственный класс, производный от <xref:System.Resources.ResourceManager> класса.  
  
 Этот метод использует <xref:System.Globalization.CultureInfo.Name%2A?displayProperty=nameWithType> свойство как часть имени файла для всех языков, отличных от инвариантного языка и региональных параметров. Этот метод не просматривает манифест сборки и не касается диска и используется только для создания имени файла ресурса (подходящего для передачи в <xref:System.Resources.ResourceReader> конструктор) или имя ресурса манифеста BLOB-объектов.  
  
 Производный класс может переопределять этот метод для поиска другого расширения, такие как «. ResX», или совершенно другой схемы именования файлов ресурсов. Обратите внимание, что метод может использоваться для пользовательского имени файла ресурсов в пределах вспомогательной сборки и не настраивать имя самой вспомогательной сборки.  
  
 ]]></format>
        </remarks>
        <permission cref="T:System.Security.Permissions.ReflectionPermission">При вызове поздней привязкой, такие как <see cref="M:System.Type.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[])" />. Связанное перечисление: <see cref="F:System.Security.Permissions.ReflectionPermissionFlag.MemberAccess" />.</permission>
        <altmember cref="T:System.Globalization.CultureInfo" />
      </Docs>
    </Member>
    <Member MemberName="GetResourceSet">
      <MemberSignature Language="C#" Value="public virtual System.Resources.ResourceSet GetResourceSet (System.Globalization.CultureInfo culture, bool createIfNotExists, bool tryParents);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Resources.ResourceSet GetResourceSet(class System.Globalization.CultureInfo culture, bool createIfNotExists, bool tryParents) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Resources.ResourceManager.GetResourceSet(System.Globalization.CultureInfo,System.Boolean,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetResourceSet (culture As CultureInfo, createIfNotExists As Boolean, tryParents As Boolean) As ResourceSet" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::Resources::ResourceSet ^ GetResourceSet(System::Globalization::CultureInfo ^ culture, bool createIfNotExists, bool tryParents);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Resources.ResourceManager</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Resources.ResourceSet</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="culture" Type="System.Globalization.CultureInfo" />
        <Parameter Name="createIfNotExists" Type="System.Boolean" />
        <Parameter Name="tryParents" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="culture">Язык и региональные параметры, ресурсы для которых необходимо получить.</param>
        <param name="createIfNotExists">
          Значение <see langword="true" /> для загрузки набора ресурсов, если он еще не загружен; в противном случае — значение <see langword="false" />.</param>
        <param name="tryParents">
          Значение <see langword="true" />, чтобы соответствующий ресурс загружался с использованием резервных ресурсов, если набор ресурсов не удается найти. Значение <see langword="false" /> для обхода процесса использования резервных ресурсов.</param>
        <summary>Извлекает набор ресурсов для определенного языка и региональных параметров.</summary>
        <returns>Набор ресурсов для указанного языка и региональных параметров.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Набор ресурсов, который возвращается представляет ресурсы, локализованного для указанного языка и региональных параметров. Если ресурсы не были локализованы для этого языка и региональных параметров и `tryParents` — `true`, <xref:System.Resources.ResourceManager.GetResourceSet%2A> использует правила резервного переключения ресурсов для загрузки подходящего ресурса. Если `tryParents` — `false` и набор ресурсов для конкретного языка и региональных параметров не найден, метод возвращает `null`. Дополнительные сведения о возврата ресурсов см. в разделе «Процесс использования резервных ресурсов» [упаковка и развертывание ресурсов](~/docs/framework/resources/packaging-and-deploying-resources-in-desktop-apps.md) статьи.  
  
   
  
## Examples  
 В следующем примере вызывается <xref:System.Resources.ResourceManager.GetResourceSet%2A> метод для извлечения ресурсов, связанных с языком и региональными параметрами для французского (Франция) языка и региональных параметров. Затем выполняется перечисление всех ресурсов в наборе ресурсов. Он содержит исходный код для исполняемый файл с именем ShowNumbers.exe. Он также включает два текстовый файл, содержащий имена чисел. Первый NumberResources.txt, содержащий имена чисел от 1 до 10 на английском языке:  
  
```  
  
one=one  
two=two  
three=three  
four=four  
five=five  
six=six  
seven=seven  
eight=eight  
nine=nine  
ten=ten  
  
```  
  
 Второй NumberResources.fr-FR.txt с именами чисел от одного до четырех на французском языке:  
  
```  
  
one=un  
two=deux  
three=trois  
four=quatre  
  
```  
  
 Пакетный файл можно использовать для создания файлов ресурсов, внедрить файл ресурсов английского языка в исполняемый файл и создания вспомогательной сборки для ресурсов для французского языка. Вот пакетный файл для создания исполняемого файла с помощью компилятора Visual Baisc:  
  
```  
  
resgen NumberResources.txt  
vbc shownumbers.vb /resource:NumberResources.resources  
  
md fr-FR  
resgen NumberResources.fr-FR.txt  
al /out:fr-FR\ShowNumbers.resources.dll /culture:fr-FR /embed:NumberResources.fr-FR.resources  
```  
  
 Для компилятора C# можно использовать следующий файл пакета:  
  
```  
  
resgen NumberResources.txt  
csc shownumbers.cs /resource:NumberResources.resources  
  
md fr-FR  
resgen NumberResources.fr-FR.txt  
al /out:fr-FR\ShowNumbers.resources.dll /culture:fr-FR /embed:NumberResources.fr-FR.resources  
  
```  
  
 [!code-csharp[System.Resources.ResourceManager.GetResourceSet#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.resources.resourcemanager.getresourceset/cs/shownumbers.cs#1)]
 [!code-vb[System.Resources.ResourceManager.GetResourceSet#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.resources.resourcemanager.getresourceset/vb/shownumbers.vb#1)]  
  
 Обратите внимание, что если изменить значение `createIfNotExists` аргумент `false`, вызов метода возвращает `null`, так как диспетчер ресурсов еще не загружено ресурсы французского языка.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">Параметр <paramref name="culture" /> имеет значение <see langword="null" />.</exception>
        <exception cref="T:System.Resources.MissingManifestResourceException">
          Параметр <paramref name="tryParents" /> имеет значение <see langword="true" />, не найден подходящий набор ресурсов, и отсутствуют ресурсы языка и региональных параметров по умолчанию.</exception>
        <permission cref="T:System.Security.Permissions.ReflectionPermission">При вызове поздней привязкой, такие как <see cref="M:System.Type.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[])" />. Связанное перечисление: <see cref="F:System.Security.Permissions.ReflectionPermissionFlag.MemberAccess" />.</permission>
        <altmember cref="T:System.Globalization.CultureInfo" />
      </Docs>
    </Member>
    <Member MemberName="GetSatelliteContractVersion">
      <MemberSignature Language="C#" Value="protected static Version GetSatelliteContractVersion (System.Reflection.Assembly a);" />
      <MemberSignature Language="ILAsm" Value=".method familystatic hidebysig class System.Version GetSatelliteContractVersion(class System.Reflection.Assembly a) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Resources.ResourceManager.GetSatelliteContractVersion(System.Reflection.Assembly)" />
      <MemberSignature Language="VB.NET" Value="Protected Shared Function GetSatelliteContractVersion (a As Assembly) As Version" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; static Version ^ GetSatelliteContractVersion(System::Reflection::Assembly ^ a);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Resources.ResourceManager</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Version</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="a" Type="System.Reflection.Assembly" />
      </Parameters>
      <Docs>
        <param name="a">Сборка для проверки атрибута <see cref="T:System.Resources.SatelliteContractVersionAttribute" />.</param>
        <summary>Возвращает версию, указанную атрибутом <see cref="T:System.Resources.SatelliteContractVersionAttribute" /> в заданной сборке.</summary>
        <returns>Версия сопутствующего контракта данной сборки либо значение <see langword="null" />, если версия не была найдена.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Дополнительные сведения об управлении версиями вспомогательные сборки см. в разделе <xref:System.Resources.SatelliteContractVersionAttribute> справочном разделе.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">Объект <see cref="T:System.Version" />, найденный в сборке <paramref name="a" />, неверен.</exception>
        <exception cref="T:System.ArgumentNullException">
          Свойство <paramref name="a" /> имеет значение <see langword="null" />.</exception>
        <permission cref="T:System.Security.Permissions.ReflectionPermission">При вызове поздней привязкой, такие как <see cref="M:System.Type.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[])" />. Связанное перечисление: <see cref="F:System.Security.Permissions.ReflectionPermissionFlag.MemberAccess" />.</permission>
        <altmember cref="T:System.Resources.SatelliteContractVersionAttribute" />
      </Docs>
    </Member>
    <MemberGroup MemberName="GetStream">
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Возвращает объект потока неуправляемой памяти из заданного ресурса.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="GetStream">
      <MemberSignature Language="C#" Value="public System.IO.UnmanagedMemoryStream GetStream (string name);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.IO.UnmanagedMemoryStream GetStream(string name) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Resources.ResourceManager.GetStream(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function GetStream (name As String) As UnmanagedMemoryStream" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::IO::UnmanagedMemoryStream ^ GetStream(System::String ^ name);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Resources.ResourceManager</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.ComVisible(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.IO.UnmanagedMemoryStream</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="name">Имя ресурса.</param>
        <summary>Возвращает объект потока неуправляемой памяти из заданного ресурса.</summary>
        <returns>Объект потока неуправляемой памяти, представляющий ресурс.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Resources.ResourceManager.GetStream%2A> Метод принимает имя ресурса, который хранится в виде <xref:System.IO.MemoryStream> объектов, возвращает значение <xref:System.Object> ресурсов и возвращает <xref:System.IO.UnmanagedMemoryStream> объекта. Требуется работать непосредственно с потоком байтов, который затем преобразование в объект. Этот метод используется в основном для повышения производительности: извлечение ресурса в качестве потока данных вместо явного объекта может улучшить производительность.  
  
 Возвращаемый ресурс локализован для языка и региональных параметров пользовательского интерфейса текущего потока, определяемый по <xref:System.Globalization.CultureInfo.CurrentUICulture%2A?displayProperty=nameWithType> свойство. Если ресурс не локализован для этого языка и региональных параметров, диспетчер ресурсов использует правила отката для загрузки подходящего ресурса. Если обнаруживается нет подходящего набора локализованные ресурсы, <xref:System.Resources.ResourceManager> возвращается ресурсов культуры по умолчанию. Если набор ресурсов для культуры по умолчанию не найден, метод вызывает <xref:System.Resources.MissingManifestResourceException> исключение или, если набор ресурсов должна размещаться во вспомогательной сборке <xref:System.Resources.MissingSatelliteAssemblyException> исключение. Если диспетчер ресурсов можно загрузить набор подходящего ресурса, но не удается найти ресурс с именем `name`, метод возвращает `null`.  
  
 <xref:System.Resources.ResourceManager.IgnoreCase%2A> Свойство определяет ли сравнение `name` с именами ресурсов не учитывается регистр (по умолчанию) или с учетом регистра.  
  
   
  
## Examples  
 В следующем примере метод <xref:System.Resources.ResourceManager.GetStream%28System.String%29> используется для извлечения точечного рисунка, который используется на экране-заставке приложения. Следующие исходный код из файла с именем CreateResources.cs (для C#) или CreateResources.vb (для Visual Basic) приводит к возникновению ошибки RESX-файл с именем AppResources.resx, содержащий сериализованный образ. В этом случае изображение загружается из файла SplashScreen.jpg; имя файла можно изменить, чтобы использовать собственное изображение.  
  
 [!code-csharp[Conceptual.Resources.Retrieving#4](~/samples/snippets/csharp/VS_Snippets_CLR/conceptual.resources.retrieving/cs/createresources.cs#4)]
 [!code-vb[Conceptual.Resources.Retrieving#4](~/samples/snippets/visualbasic/VS_Snippets_CLR/conceptual.resources.retrieving/vb/createresources.vb#4)]  
  
 В следующем примере кода из файла с именем GetStream.cs (для C#) или GetStream.vb (для Visual Basic), затем извлекает ресурс и отображает изображение в <xref:System.Windows.Forms.PictureBox?displayProperty=nameWithType> элемента управления.  
  
 [!code-csharp[Conceptual.Resources.Retrieving#5](~/samples/snippets/csharp/VS_Snippets_CLR/conceptual.resources.retrieving/cs/getstream.cs#5)]
 [!code-vb[Conceptual.Resources.Retrieving#5](~/samples/snippets/visualbasic/VS_Snippets_CLR/conceptual.resources.retrieving/vb/getstream.vb#5)]  
  
 Для сборки примера на C# можно использовать приведенный ниже пакетный файл. Visual Basic измените `csc` для `vbc`и измените расширение файла исходного кода из `.cs` для `.vb`...  
  
```  
  
csc CreateResources.cs  
CreateResources  
  
resgen AppResources.resx  
  
csc GetStream.cs /resource:AppResources.resources  
  
```  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">Значение указанного ресурса не является объектом <see cref="T:System.IO.MemoryStream" />.</exception>
        <exception cref="T:System.ArgumentNullException">
          Свойство <paramref name="name" /> имеет значение <see langword="null" />.</exception>
        <exception cref="T:System.Resources.MissingManifestResourceException">Не было найдено никаких возможных наборов ресурсов и отсутствуют ресурсы по умолчанию. Сведения об обработке этого исключения см. в подразделе "Обработка исключений MissingManifestResourceException и MissingSatelliteAssemblyException" раздела, посвященного классу <see cref="T:System.Resources.ResourceManager" />.</exception>
        <exception cref="T:System.Resources.MissingSatelliteAssemblyException">Ресурсы языка и региональных параметров по умолчанию находятся во вспомогательной сборке, которую не удалось найти. Сведения об обработке этого исключения см. в подразделе "Обработка исключений MissingManifestResourceException и MissingSatelliteAssemblyException" раздела, посвященного классу <see cref="T:System.Resources.ResourceManager" />.</exception>
        <permission cref="T:System.Security.Permissions.ReflectionPermission">При вызове поздней привязкой, такие как <see cref="M:System.Type.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[])" />. Связанное перечисление: <see cref="F:System.Security.Permissions.ReflectionPermissionFlag.MemberAccess" />.</permission>
      </Docs>
    </Member>
    <Member MemberName="GetStream">
      <MemberSignature Language="C#" Value="public System.IO.UnmanagedMemoryStream GetStream (string name, System.Globalization.CultureInfo culture);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.IO.UnmanagedMemoryStream GetStream(string name, class System.Globalization.CultureInfo culture) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Resources.ResourceManager.GetStream(System.String,System.Globalization.CultureInfo)" />
      <MemberSignature Language="VB.NET" Value="Public Function GetStream (name As String, culture As CultureInfo) As UnmanagedMemoryStream" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::IO::UnmanagedMemoryStream ^ GetStream(System::String ^ name, System::Globalization::CultureInfo ^ culture);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Resources.ResourceManager</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.ComVisible(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.IO.UnmanagedMemoryStream</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
        <Parameter Name="culture" Type="System.Globalization.CultureInfo" />
      </Parameters>
      <Docs>
        <param name="name">Имя ресурса.</param>
        <param name="culture">Объект, задающий язык и региональные параметры для использования при поиске ресурса. Если параметр <c>culture</c> имеет значение <see langword="null" />, используются язык и региональные параметры для текущего потока.</param>
        <summary>Возвращает объект потока неуправляемой памяти из заданного ресурса, используя заданный язык и региональные параметры.</summary>
        <returns>Объект потока неуправляемой памяти, представляющий ресурс.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Resources.ResourceManager.GetStream%2A> Метод принимает имя ресурса, который хранится в виде <xref:System.IO.MemoryStream> объектов, возвращает значение <xref:System.Object> ресурсов и возвращает <xref:System.IO.UnmanagedMemoryStream> объекта. Требуется работать непосредственно с потоком байтов, который затем преобразование в объект. Этот метод используется в основном для повышения производительности: извлечение ресурса в качестве потока данных вместо явного объекта может улучшить производительность.  
  
 Возвращаемый ресурс локализован для языка и региональных параметров, который задается параметром `culture`, или для языка и региональных параметров, который задается параметром <xref:System.Globalization.CultureInfo.CurrentUICulture%2A?displayProperty=nameWithType> свойство Если `culture` — `null`. Если ресурс не локализован для этого языка и региональных параметров, диспетчер ресурсов использует правила отката для загрузки подходящего ресурса. Если обнаруживается нет подходящего набора локализованные ресурсы, <xref:System.Resources.ResourceManager> возвращается ресурсов культуры по умолчанию. Если набор ресурсов для культуры по умолчанию не найден, метод вызывает <xref:System.Resources.MissingManifestResourceException> исключение или, если набор ресурсов должна размещаться во вспомогательной сборке <xref:System.Resources.MissingSatelliteAssemblyException> исключение. Если диспетчер ресурсов можно загрузить набор подходящего ресурса, но не удается найти ресурс с именем `name`, метод возвращает `null`.  
  
 <xref:System.Resources.ResourceManager.IgnoreCase%2A> Свойство определяет ли сравнение `name` с именами ресурсов не учитывается регистр (по умолчанию) или с учетом регистра.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">Значение указанного ресурса не является объектом <see cref="T:System.IO.MemoryStream" />.</exception>
        <exception cref="T:System.ArgumentNullException">
          Свойство <paramref name="name" /> имеет значение <see langword="null" />.</exception>
        <exception cref="T:System.Resources.MissingManifestResourceException">Не было найдено никаких возможных наборов ресурсов и отсутствуют ресурсы по умолчанию. Сведения об обработке этого исключения см. в подразделе "Обработка исключений MissingManifestResourceException и MissingSatelliteAssemblyException" раздела, посвященного классу <see cref="T:System.Resources.ResourceManager" />.</exception>
        <exception cref="T:System.Resources.MissingSatelliteAssemblyException">Ресурсы языка и региональных параметров по умолчанию находятся во вспомогательной сборке, которую не удалось найти. Сведения об обработке этого исключения см. в подразделе "Обработка исключений MissingManifestResourceException и MissingSatelliteAssemblyException" раздела, посвященного классу <see cref="T:System.Resources.ResourceManager" />.</exception>
        <permission cref="T:System.Security.Permissions.ReflectionPermission">При вызове поздней привязкой, такие как <see cref="M:System.Type.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[])" />. Связанное перечисление: <see cref="F:System.Security.Permissions.ReflectionPermissionFlag.MemberAccess" />.</permission>
      </Docs>
    </Member>
    <MemberGroup MemberName="GetString">
      <AssemblyInfo>
        <AssemblyName>System.Resources.ResourceManager</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Возвращает указанный ресурс строки для заданного языка и региональных параметров или текущего языка и региональных параметров пользовательского интерфейса.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="GetString">
      <MemberSignature Language="C#" Value="public virtual string GetString (string name);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance string GetString(string name) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Resources.ResourceManager.GetString(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetString (name As String) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::String ^ GetString(System::String ^ name);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Resources.ResourceManager</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="name">Имя извлекаемого ресурса.</param>
        <summary>Возвращает значение указанного строкового ресурса.</summary>
        <returns>Значение ресурса, локализованное для языка и региональных параметров текущего пользовательского интерфейса вызывающего объекта, или значение <see langword="null" />, если не удается найти <paramref name="name" /> в наборе ресурсов.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
## <a name="desktop-apps"></a>Классические приложения  
 В настольных приложениях, возвращается ресурс локализован для языка и региональных параметров пользовательского интерфейса текущего потока, в соответствии с определением <xref:System.Globalization.CultureInfo.CurrentUICulture%2A?displayProperty=nameWithType> свойство. Если ресурс не локализован для этого языка и региональных параметров, диспетчер ресурсов зонды для ресурса, выполнив действия, описанные в разделе «Процесса использования резервных ресурсов» [упаковка и развертывание ресурсов](~/docs/framework/resources/packaging-and-deploying-resources-in-desktop-apps.md) статьи. Если найден нет подходящего набора локализованные ресурсы, диспетчер ресурсов возвращается ресурсов культуры по умолчанию. Если диспетчер ресурсов не удается загрузить набор ресурсов для культуры по умолчанию, метод вызывает <xref:System.Resources.MissingManifestResourceException> исключение или, если набор ресурсов должна размещаться во вспомогательной сборке <xref:System.Resources.MissingSatelliteAssemblyException> исключение. Если диспетчер ресурсов можно загрузить набор подходящего ресурса, но не удается найти ресурс с именем `name`, метод возвращает `null`.  
  
 <xref:System.Resources.ResourceManager.IgnoreCase%2A> Свойство определяет ли сравнение `name` с именами ресурсов не учитывается регистр (по умолчанию) или с учетом регистра.  
  
> [!CAUTION]
>  Этот метод может выдать больше исключений, чем указано в списке. Одна из причин, возможно, это является, если метод, который вызывает этот метод создает исключение.  Например <xref:System.IO.FileLoadException> исключение может возникать, если ошибка была осуществлена развертывание и установку вспомогательную сборку, или <xref:System.Runtime.Serialization.SerializationException> исключение может вызываться, если определяемый пользователем тип создает исключение определяемых пользователем при десериализации типа.  
  
## <a name="includewin8appnamelongincludeswin8-appname-long-mdmd-apps"></a>Приложения [!INCLUDE[win8_appname_long](~/includes/win8-appname-long-md.md)]  
  
> [!IMPORTANT]
>  Несмотря на то что <xref:System.Resources.ResourceManager> поддерживается в [!INCLUDE[win8_appname_long](~/includes/win8-appname-long-md.md)] приложений, не рекомендуется использовать его. Этот класс используется только при разработке [!INCLUDE[net_portable](~/includes/net-portable-md.md)] проекты, которые могут использоваться с [!INCLUDE[win8_appname_long](~/includes/win8-appname-long-md.md)] приложений. Для извлечения ресурсов из [!INCLUDE[win8_appname_long](~/includes/win8-appname-long-md.md)] приложения, используют [Windows.ApplicationModel.Resources.ResourceLoader](http://go.microsoft.com/fwlink/p/?LinkId=238182) вместо этого класс.  
  
 В [!INCLUDE[win8_appname_long](~/includes/win8-appname-long-md.md)] приложений, <xref:System.Resources.ResourceManager.GetString%28System.String%29> метод возвращает значение `name` строки ресурса, локализованного для текущих параметров культуры пользовательского интерфейса вызывающего. Список языков и региональных параметров является производным от списка язык пользовательского интерфейса основной операционной системы. Если диспетчер ресурсов не может соответствовать `name`, метод возвращает `null`.  
  
   
  
## Examples  
 В следующем примере используется <xref:System.Resources.ResourceManager.GetString%2A> метод для извлечения ресурсов, связанных с языком и региональными параметрами. Он состоит из ресурсов, скомпилированные из TXT-файлы для английского языка (en), французский (Франция) (fr-FR) и русский (Россия) (ru-RU) языков и региональных параметров. В примере изменяется текущий язык и региональные параметры текущего пользовательского интерфейса для английского языка (США), французский (Франция), русский (Россия) и шведский (Швеция). Затем он вызывает <xref:System.Resources.ResourceManager.GetString%2A> метод для извлечения локализованную строку, отображающую вместе с текущего дня и месяца. Обратите внимание, что выходные данные будут содержать соответствующие Локализованная строка, кроме случаев, когда текущий язык и региональные параметры пользовательского интерфейса шведский (Швеция). Так как шведский язык ресурсы недоступны, приложение использует вместо ресурсов для культуры по умолчанию, которая является английский язык. В примере требуется файлы ресурсов на основе текста, перечислены в следующей таблице. Каждая имеет один строковый ресурс с именем `DateStart`.  
  
|culture|Имя файла|Имя ресурса|Значение ресурса|  
|-------------|---------------|-------------------|--------------------|  
|ru-RU|DateStrings.txt|`DateStart`|Сегодня|  
|fr-FR|DateStrings.fr-FR.txt|`DateStart`|Aujourd'hui c'est le|  
|ru-RU|DateStrings.ru RU.txt|`DateStart`|Сегодня|  
  
 Чтобы скомпилировать этот пример на C# можно использовать следующий файл пакета. Для Visual Basic замените `csc` на `vbc`, а также расширение файла исходного кода `.cs` на `.vb`.  
  
```  
resgen DateStrings.txt  
csc showdate.cs /resource:DateStrings.resources  
  
md fr-FR  
resgen DateStrings.fr-FR.txt  
al /out:fr-FR\Showdate.resources.dll /culture:fr-FR /embed:DateStrings.fr-FR.resources   
  
md ru-RU  
resgen DateStrings.ru-RU.txt  
al /out:ru-RU\Showdate.resources.dll /culture:ru-RU /embed:DateStrings.ru-RU.resources  
```  
  
 Ниже приведен исходный код для примера (ShowDate.vb для версии Visual Basic) или ShowDate.cs для версии C#.  
  
 [!code-csharp[System.Resources.ResourceManager.Class#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.resources.resourcemanager.class/cs/showdate.cs#2)]
 [!code-vb[System.Resources.ResourceManager.Class#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.resources.resourcemanager.class/vb/showdate.vb#2)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">Параметр <paramref name="name" /> имеет значение <see langword="null" />.</exception>
        <exception cref="T:System.InvalidOperationException">Значение указанного ресурса не является строковым.</exception>
        <exception cref="T:System.Resources.MissingManifestResourceException">Не найден подходящий набор ресурсов и отсутствуют ресурсы языка и региональных параметров по умолчанию. Сведения об обработке этого исключения см. в подразделе "Обработка исключений MissingManifestResourceException и MissingSatelliteAssemblyException" раздела, посвященного классу <see cref="T:System.Resources.ResourceManager" />.</exception>
        <exception cref="T:System.Resources.MissingSatelliteAssemblyException">Ресурсы языка и региональных параметров по умолчанию находятся во вспомогательной сборке, которую не удалось найти. Сведения об обработке этого исключения см. в подразделе "Обработка исключений MissingManifestResourceException и MissingSatelliteAssemblyException" раздела, посвященного классу <see cref="T:System.Resources.ResourceManager" />.</exception>
        <permission cref="T:System.Security.Permissions.ReflectionPermission">При вызове поздней привязкой, такие как <see cref="M:System.Type.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[])" />. Связанное перечисление: <see cref="F:System.Security.Permissions.ReflectionPermissionFlag.MemberAccess" />.</permission>
        <threadsafe>
          <see cref="M:System.Resources.ResourceManager.GetString(System.String)" /> Метод является потокобезопасным.</threadsafe>
        <altmember cref="T:System.Globalization.CultureInfo" />
      </Docs>
    </Member>
    <Member MemberName="GetString">
      <MemberSignature Language="C#" Value="public virtual string GetString (string name, System.Globalization.CultureInfo culture);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance string GetString(string name, class System.Globalization.CultureInfo culture) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Resources.ResourceManager.GetString(System.String,System.Globalization.CultureInfo)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetString (name As String, culture As CultureInfo) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::String ^ GetString(System::String ^ name, System::Globalization::CultureInfo ^ culture);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Resources.ResourceManager</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
        <Parameter Name="culture" Type="System.Globalization.CultureInfo" />
      </Parameters>
      <Docs>
        <param name="name">Имя извлекаемого ресурса.</param>
        <param name="culture">Объект, предоставляющий язык и региональные параметры, для которых локализуется ресурс.</param>
        <summary>Возвращает значение строкового ресурса, локализованного для указанного языка и региональных параметров.</summary>
        <returns>Значение ресурса, локализованное для указанного языка и региональных параметров, или значение <see langword="null" />, если не удается найти <paramref name="name" /> в наборе ресурсов.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
## <a name="desktop-apps"></a>Классические приложения  
 В настольных приложениях Если `culture` — `null`, <xref:System.Resources.ResourceManager.GetString%28System.String%2CSystem.Globalization.CultureInfo%29> метод использует текущий язык и региональные параметры пользовательского интерфейса, полученный от <xref:System.Globalization.CultureInfo.CurrentUICulture%2A?displayProperty=nameWithType> свойство.  
  
 Возвращаемый ресурс локализован для языка и региональных параметров, заданные `culture` параметра. Если ресурс не локализован для `culture`, диспетчер ресурсов зонды для ресурса, выполнив действия, описанные в разделе «Процесса использования резервных ресурсов» [упаковка и развертывание ресурсов](~/docs/framework/resources/packaging-and-deploying-resources-in-desktop-apps.md) раздела. Если обнаруживается нет подходящего набора ресурсов, диспетчер ресурсов возвращается ресурсов культуры по умолчанию. Если диспетчер ресурсов не удается загрузить набор ресурсов для культуры по умолчанию, метод вызывает <xref:System.Resources.MissingManifestResourceException> исключение или, если набор ресурсов должна размещаться во вспомогательной сборке <xref:System.Resources.MissingSatelliteAssemblyException> исключение. Если диспетчер ресурсов можно загрузить набор подходящего ресурса, но не удается найти ресурс с именем `name`, метод возвращает `null`.  
  
 <xref:System.Resources.ResourceManager.IgnoreCase%2A> Свойство определяет ли сравнение `name` с именами ресурсов не учитывается регистр (по умолчанию) или с учетом регистра.  
  
> [!CAUTION]
>  Этот метод может выдать больше исключений, чем указано в списке. Одна из причин, возможно, это является, если метод, который вызывает этот метод создает исключение.  Например <xref:System.IO.FileLoadException> исключение может возникать, если ошибка была осуществлена развертывание и установку вспомогательную сборку, или <xref:System.Runtime.Serialization.SerializationException> исключение может вызываться, если определяемый пользователем тип создает исключение определяемых пользователем при десериализации типа.  
  
## <a name="includewin8appnamelongincludeswin8-appname-long-mdmd-apps"></a>Приложения [!INCLUDE[win8_appname_long](~/includes/win8-appname-long-md.md)]  
  
> [!IMPORTANT]
>  Несмотря на то что <xref:System.Resources.ResourceManager> поддерживается в [!INCLUDE[win8_appname_long](~/includes/win8-appname-long-md.md)] приложений, не рекомендуется использовать его. Этот класс используется только при разработке [!INCLUDE[net_portable](~/includes/net-portable-md.md)] проекты, которые могут использоваться с [!INCLUDE[win8_appname_long](~/includes/win8-appname-long-md.md)] приложений. Для извлечения ресурсов из [!INCLUDE[win8_appname_long](~/includes/win8-appname-long-md.md)] приложения, используют [Windows.ApplicationModel.Resources.ResourceLoader](http://go.microsoft.com/fwlink/p/?LinkId=238182) вместо этого класс.  
  
 В [!INCLUDE[win8_appname_long](~/includes/win8-appname-long-md.md)] приложений, <xref:System.Resources.ResourceManager.GetString%28System.String%2CSystem.Globalization.CultureInfo%29> метод возвращает значение `name` строки ресурса, локализованного для языка и региональных параметров, заданные `culture` параметра. Если ресурс не локализован для `culture` языка и региональных параметров, уточняющего запроса использует весь [!INCLUDE[win8](~/includes/win8-md.md)] резервный список языков и останавливается после просмотра культуры по умолчанию. Если диспетчер ресурсов не может соответствовать `name`, метод возвращает `null`.  
  
   
  
## Examples  
 В следующем примере используется <xref:System.Resources.ResourceManager.GetString%28System.String%2CSystem.Globalization.CultureInfo%29> метод для извлечения ресурсов, связанных с языком и региональными параметрами. Пример по умолчанию язык и региональные параметры — английский (en), а также вспомогательные сборки для русского языка (Россия) (ru-RU) и французского (Франция) (fr-FR) языков и региональных параметров. В примере изменяется текущий язык и региональные параметры текущего пользовательского интерфейса для русского языка (Россия) до вызова метода <xref:System.Resources.ResourceManager.GetString%28System.String%2CSystem.Globalization.CultureInfo%29>. Затем он вызывает <xref:System.Resources.ResourceManager.GetString%2A> метод и <xref:System.DateTime.ToString%28System.String%2CSystem.IFormatProvider%29?displayProperty=nameWithType> метод и передает <xref:System.Globalization.CultureInfo> объекты, представляющие французский (Франция) и шведский (Швеция) языков и региональных параметров для каждого метода. В выходных данных, месяц и день месяца, а также строка, вставляемая перед их отображаются на французском языке, поскольку <xref:System.Resources.ResourceManager.GetString%2A> метод способен получить французский языковой ресурс. Однако при использовании культуры шведский (Швеция) месяц и день месяца в отображается шведский, несмотря на то, что строка, вставляемая перед их является английский. Это так, как диспетчер ресурсов не удается найти шведский локализованные ресурсы, чтобы он возвращал ресурсов для английского языка и региональных параметров по умолчанию.  
  
 В примере требуется файлы ресурсов на основе текста, перечислены в следующей таблице. Каждая имеет один строковый ресурс с именем `DateStart`.  
  
|culture|Имя файла|Имя ресурса|Значение ресурса|  
|-------------|---------------|-------------------|--------------------|  
|ru-RU|DateStrings.txt|`DateStart`|Сегодня|  
|fr-FR|DateStrings.fr-FR.txt|`DateStart`|Aujourd'hui c'est le|  
|ru-RU|DateStrings.ru RU.txt|`DateStart`|Сегодня|  
  
 Чтобы скомпилировать этот пример Visual Basic можно использовать следующий файл пакета. Чтобы скомпилировать в C#, измените `vbc` для `csc`и измените расширение файла исходного кода из `.vb` для `.cs`.  
  
```  
resgen DateStrings.txt  
vbc showdate.vb /resource:DateStrings.resources  
  
md fr-FR  
resgen DateStrings.fr-FR.txt  
al /out:fr-FR\Showdate.resources.dll /culture:fr-FR /embed:DateStrings.fr-FR.resources   
  
md ru-RU  
resgen DateStrings.ru-RU.txt  
al /out:ru-RU\Showdate.resources.dll /culture:ru-RU /embed:DateStrings.ru-RU.resources  
```  
  
 Ниже приведен исходный код для примера (ShowDate.vb для версии Visual Basic) или ShowDate.cs для версии C#.  
  
 [!code-csharp[System.Resources.ResourceManager.Class#3](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.resources.resourcemanager.class/cs/showdate2.cs#3)]
 [!code-vb[System.Resources.ResourceManager.Class#3](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.resources.resourcemanager.class/vb/showdate2.vb#3)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">Параметр <paramref name="name" /> имеет значение <see langword="null" />.</exception>
        <exception cref="T:System.InvalidOperationException">Значение указанного ресурса не является строковым.</exception>
        <exception cref="T:System.Resources.MissingManifestResourceException">Не найден подходящий набор ресурсов и отсутствуют ресурсы языка и региональных параметров по умолчанию. Сведения об обработке этого исключения см. в подразделе "Обработка исключений MissingManifestResourceException и MissingSatelliteAssemblyException" раздела, посвященного классу <see cref="T:System.Resources.ResourceManager" />.</exception>
        <exception cref="T:System.Resources.MissingSatelliteAssemblyException">Ресурсы языка и региональных параметров по умолчанию находятся во вспомогательной сборке, которую не удалось найти. Сведения об обработке этого исключения см. в подразделе "Обработка исключений MissingManifestResourceException и MissingSatelliteAssemblyException" раздела, посвященного классу <see cref="T:System.Resources.ResourceManager" />.</exception>
        <permission cref="T:System.Security.Permissions.ReflectionPermission">При вызове поздней привязкой, такие как <see cref="M:System.Type.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[])" />. Связанное перечисление: <see cref="F:System.Security.Permissions.ReflectionPermissionFlag.MemberAccess" />.</permission>
        <threadsafe>
          <see cref="M:System.Resources.ResourceManager.GetString(System.String,System.Globalization.CultureInfo)" /> Метод является потокобезопасным.</threadsafe>
        <altmember cref="T:System.Globalization.CultureInfo" />
      </Docs>
    </Member>
    <Member MemberName="HeaderVersionNumber">
      <MemberSignature Language="C#" Value="public static readonly int HeaderVersionNumber;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly int32 HeaderVersionNumber" />
      <MemberSignature Language="DocId" Value="F:System.Resources.ResourceManager.HeaderVersionNumber" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly HeaderVersionNumber As Integer " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly int HeaderVersionNumber;" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Resources.ResourceManager</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Указывает версию заголовков файлов ресурсов, которую текущая реализация <see cref="T:System.Resources.ResourceManager" /> может интерпретировать и создавать.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="IgnoreCase">
      <MemberSignature Language="C#" Value="public virtual bool IgnoreCase { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IgnoreCase" />
      <MemberSignature Language="DocId" Value="P:System.Resources.ResourceManager.IgnoreCase" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Property IgnoreCase As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property bool IgnoreCase { bool get(); void set(bool value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Resources.ResourceManager</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Возвращает или задает значение, которое указывает, позволяет ли диспетчер ресурсов выполнять поиск ресурсов с учетом регистра в методах <see cref="M:System.Resources.ResourceManager.GetString(System.String)" /> и <see cref="M:System.Resources.ResourceManager.GetObject(System.String)" />.</summary>
        <value>
          Значение <see langword="true" />, чтобы не учитывать регистр при поиске ресурсов, в противном случае — значение <see langword="false" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Если значение <xref:System.Resources.ResourceManager.IgnoreCase%2A> свойство `false`, ресурс с именем «Resource» не соответствует ресурсу с именем «resource». Если <xref:System.Resources.ResourceManager.IgnoreCase%2A> — `true`, ресурс с именем «Resource» эквивалентен ресурс с именем «resource». Обратите внимание, что при <xref:System.Resources.ResourceManager.IgnoreCase%2A> — `true`, <xref:System.Resources.ResourceManager.GetString%2A?displayProperty=nameWithType> и <xref:System.Resources.ResourceManager.GetObject%2A?displayProperty=nameWithType> методы сравнения строк без учета регистра с помощью инвариантного языка и региональных параметров. Преимущество заключается в том, что результаты сравнения строк без учета регистра, выполняемые этими методами одинаковы на всех компьютерах, независимо от языка и региональных параметров. Недостаток заключается в том, что результаты не соответствуют правила определения регистра для всех языков и региональных параметров.  
  
 Например в турецком алфавите имеет два варианта знака I: один с точкой и один без точки. В турецком алфавите символ I (Unicode 0049) считается версия другой символ ı (Unicode 0131) в верхнем регистре. Символ i (Unicode 0069) считается вариант нижнем регистре еще одного символа (Unicode 0130). В соответствии с правилами сравнения строк без учета регистра знаков i (Unicode 0069) и I (Unicode 0049) приведет к ошибке для языка и региональных параметров «tr-TR» (турецкий Турция). Тем не менее поскольку сравнение выполняется с помощью правила учета регистра инвариантного языка и региональных параметров, если <xref:System.Resources.ResourceManager.IgnoreCase%2A> — `true`, данное сравнение успешно.  
  
> [!NOTE]
>  Из соображений производительности рекомендуется всегда указывать имена ресурсов правильный регистр. Установка <xref:System.Resources.ResourceManager.IgnoreCase%2A> для `true` может привести к существенное увеличение количества в рабочем множестве и значительные снижением производительности.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="InternalGetResourceSet">
      <MemberSignature Language="C#" Value="protected virtual System.Resources.ResourceSet InternalGetResourceSet (System.Globalization.CultureInfo culture, bool createIfNotExists, bool tryParents);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance class System.Resources.ResourceSet InternalGetResourceSet(class System.Globalization.CultureInfo culture, bool createIfNotExists, bool tryParents) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Resources.ResourceManager.InternalGetResourceSet(System.Globalization.CultureInfo,System.Boolean,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Function InternalGetResourceSet (culture As CultureInfo, createIfNotExists As Boolean, tryParents As Boolean) As ResourceSet" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual System::Resources::ResourceSet ^ InternalGetResourceSet(System::Globalization::CultureInfo ^ culture, bool createIfNotExists, bool tryParents);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Resources.ResourceManager</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Resources.ResourceSet</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="culture" Type="System.Globalization.CultureInfo" />
        <Parameter Name="createIfNotExists" Type="System.Boolean" />
        <Parameter Name="tryParents" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="culture">Искомый объект языка и региональных параметров.</param>
        <param name="createIfNotExists">
          Значение <see langword="true" /> для загрузки набора ресурсов, если он еще не загружен; в противном случае — значение <see langword="false" />.</param>
        <param name="tryParents">
          Значение <see langword="true" /> для проверки родительских объектов <see cref="T:System.Globalization.CultureInfo" />, если невозможно загрузить набор ресурсов; в противном случае — значение <see langword="false" />.</param>
        <summary>Предоставляет реализацию для обнаружения набора ресурсов.</summary>
        <returns>Указанный набор ресурсов.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.Resources.MissingManifestResourceException">Главная сборка не содержит RESOURCES-файл, требуемый для обнаружения ресурса.</exception>
        <exception cref="T:System.ExecutionEngineException">Произошла внутренняя ошибка среды выполнения.</exception>
        <exception cref="T:System.Resources.MissingSatelliteAssemblyException">Не удается найти местоположение вспомогательной сборки, связанной с объектом <paramref name="culture" />.</exception>
        <permission cref="T:System.Security.Permissions.ReflectionPermission">При вызове поздней привязкой, такие как <see cref="M:System.Type.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[])" />. Связанное перечисление: <see cref="F:System.Security.Permissions.ReflectionPermissionFlag.MemberAccess" />.</permission>
        <block subset="none" type="overrides">
          <para>Этот метод выполняет все действия, необходимые для поиска ресурса значение и может быть рекурсивным и повторно используемым. Другими словами, этот метод может загружать сборки и триггер <see cref="E:System.AppDomain.AssemblyLoad" /> события, который затем выполняет обратный вызов <see cref="T:System.Resources.ResourceManager" /> объекта, который не был инициализирован полностью. Чтобы избежать излишних блокировок, этот метод не является потокобезопасным. <see cref="M:System.Resources.ResourceManager.GetResourceSet(System.Globalization.CultureInfo,System.Boolean,System.Boolean)" />, <see cref="M:System.Resources.ResourceManager.GetString(System.String)" />, И <see cref="M:System.Resources.ResourceManager.GetObject(System.String)" /> методы выполняют всю необходимую синхронизацию.</para>
        </block>
        <altmember cref="T:System.Globalization.CultureInfo" />
      </Docs>
    </Member>
    <Member MemberName="MagicNumber">
      <MemberSignature Language="C#" Value="public static readonly int MagicNumber;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly int32 MagicNumber" />
      <MemberSignature Language="DocId" Value="F:System.Resources.ResourceManager.MagicNumber" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly MagicNumber As Integer " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly int MagicNumber;" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Resources.ResourceManager</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Содержит номер, используемый для идентификации файлов ресурсов.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Значение равно 0xBEEFCACE. Первые четыре байта системного файлового формата по умолчанию содержат 32-разрядное целое число со знаком в формате с прямым порядком байтов (см. <xref:System.Text.Encoding>).  
  
 Если <xref:System.Resources.ResourceManager.MagicNumber> найден, следующий за ним байты будет иметь номер версии <xref:System.Resources.ResourceManager> заголовок и число, указывающее количество байтов, которые следует пропустить обходят этот заголовок. Следующий номер указывает версию <xref:System.Resources.ResourceManager> , создавшего заголовок, следуют определенные сведения о версии.  
  
 Номер версии для текущей реализации равен единице. Следующий байт — это префикс длины строки, содержащие имя <xref:System.Resources.IResourceReader>, который может читать этот файл.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="MainAssembly">
      <MemberSignature Language="C#" Value="protected System.Reflection.Assembly MainAssembly;" />
      <MemberSignature Language="ILAsm" Value=".field family class System.Reflection.Assembly MainAssembly" />
      <MemberSignature Language="DocId" Value="F:System.Resources.ResourceManager.MainAssembly" />
      <MemberSignature Language="VB.NET" Value="Protected MainAssembly As Assembly " />
      <MemberSignature Language="C++ CLI" Value="protected: System::Reflection::Assembly ^ MainAssembly;" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Resources.ResourceManager</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Assembly</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Задает главную сборку, содержащую ресурсы.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Resources.ResourceManager.MainAssembly> Поле используется только в том случае, если вы пишете собственный класс, производный от <xref:System.Resources.ResourceManager> класса.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ReleaseAllResources">
      <MemberSignature Language="C#" Value="public virtual void ReleaseAllResources ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void ReleaseAllResources() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Resources.ResourceManager.ReleaseAllResources" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub ReleaseAllResources ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void ReleaseAllResources();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Resources.ResourceManager</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Сообщает диспетчеру ресурсов, что следует вызвать метод <see cref="M:System.Resources.ResourceSet.Close" /> на всех объектах <see cref="T:System.Resources.ResourceSet" /> и освободить все ресурсы.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Данный метод урезает рабочее множество в запущенном приложении. Дальнейший поиск в данном <xref:System.Resources.ResourceManager> объект становится более дорогостоящим, чем первый поиск, так как диспетчер ресурсов приходится искать и повторно загрузить ресурсы. Это может быть полезно в некоторых сложных многопоточных сценариях, где создается <xref:System.Resources.ResourceManager> объект — это стандартное поведение.  
  
> [!NOTE]
>  Начиная с .NET Framework версии 2.0, <xref:System.Resources.ResourceManager.ReleaseAllResources%2A> метод не является поточно-ориентированным по отношению к <xref:System.Resources.ResourceManager.GetObject%2A>, <xref:System.Resources.ResourceManager.GetString%2A>, и <xref:System.Resources.ResourceManager.GetStream%2A> операций. Преимущество этого изменения заключается в более высокую производительность для нескольких потоков, которые обращаются к ресурсам. Тем не менее при вызове метода <xref:System.Resources.ResourceManager.ReleaseAllResources%2A> метода в один поток при одновременно Получение ресурса в другой поток может вызывать операции get <xref:System.ObjectDisposedException> исключение.  
  
 Этот метод также можно использовать в ситуациях, где управляемые экземпляры для ресурсов, созданных диспетчером ресурсов должны быть освобождены без ожидания для диспетчера ресурсов на полностью выходят за пределы области действия и уничтожились сборщиком мусора.  
  
> [!NOTE]
>  Вызов этого метода не выгружает вспомогательные сборки. Чтобы выгрузить вспомогательные сборки, используйте <xref:System.AppDomain.Unload%2A> метод.  
  
 ]]></format>
        </remarks>
        <permission cref="T:System.Security.Permissions.ReflectionPermission">При вызове поздней привязкой, такие как <see cref="M:System.Type.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[])" />. Связанное перечисление: <see cref="F:System.Security.Permissions.ReflectionPermissionFlag.MemberAccess" />.</permission>
      </Docs>
    </Member>
    <Member MemberName="ResourceSets">
      <MemberSignature Language="C#" Value="protected System.Collections.Hashtable ResourceSets;" />
      <MemberSignature Language="ILAsm" Value=".field family class System.Collections.Hashtable ResourceSets" />
      <MemberSignature Language="DocId" Value="F:System.Resources.ResourceManager.ResourceSets" />
      <MemberSignature Language="VB.NET" Value="Protected ResourceSets As Hashtable " />
      <MemberSignature Language="C++ CLI" Value="protected: System::Collections::Hashtable ^ ResourceSets;" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Obsolete("call InternalGetResourceSet instead")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Collections.Hashtable</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Содержит объект <see cref="T:System.Collections.Hashtable" />, который возвращает сопоставление языков и региональных параметров с объектами <see cref="T:System.Resources.ResourceSet" />.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ResourceSetType">
      <MemberSignature Language="C#" Value="public virtual Type ResourceSetType { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Type ResourceSetType" />
      <MemberSignature Language="DocId" Value="P:System.Resources.ResourceManager.ResourceSetType" />
      <MemberSignature Language="VB.NET" Value="Public Overridable ReadOnly Property ResourceSetType As Type" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property Type ^ ResourceSetType { Type ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Resources.ResourceManager</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Type</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Возвращает тип объекта набора ресурсов, используемый диспетчером ресурсов для построения объекта <see cref="T:System.Resources.ResourceSet" />.</summary>
        <value>Тип объекта набора ресурсов, используемый диспетчером ресурсов для построения объекта <see cref="T:System.Resources.ResourceSet" />.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
  </Members>
</Type>