<Type Name="ChangeMonitor" FullName="System.Runtime.Caching.ChangeMonitor">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="ef439688d7b98a238cf8640eb07e63804432a3ba" />
    <Meta Name="ms.sourcegitcommit" Value="d31dc2ede16f6f7bc64e90d9f897ff54c4e3869b" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="ru-RU" />
    <Meta Name="ms.lasthandoff" Value="04/03/2018" />
  </Metadata>
  <TypeSignature Language="C#" Value="public abstract class ChangeMonitor : IDisposable" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi abstract beforefieldinit ChangeMonitor extends System.Object implements class System.IDisposable" />
  <TypeSignature Language="DocId" Value="T:System.Runtime.Caching.ChangeMonitor" />
  <TypeSignature Language="VB.NET" Value="Public MustInherit Class ChangeMonitor&#xA;Implements IDisposable" />
  <TypeSignature Language="C++ CLI" Value="public ref class ChangeMonitor abstract : IDisposable" />
  <AssemblyInfo>
    <AssemblyName>System.Runtime.Caching</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>System.IDisposable</InterfaceName>
    </Interface>
  </Interfaces>
  <Docs>
    <summary>
      <span data-ttu-id="25e1c-101">Предоставляет базовый класс производного пользовательского типа, отслеживающего изменения в состоянии данных, от которых зависит элемент кэша.</span>
      <span class="sxs-lookup">
        <span data-stu-id="25e1c-101">Provides a base class for a derived custom type that monitors changes in the state of the data which a cache item depends on.</span>
      </span>
    </summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="25e1c-102"><xref:System.Runtime.Caching.ChangeMonitor> Класс используется как базовый класс для классов производного монитора, предназначенного для реализации конкретного кэша.</span><span class="sxs-lookup"><span data-stu-id="25e1c-102">The <xref:System.Runtime.Caching.ChangeMonitor> class is used as the base class for derived monitor classes that are specialized for particular cache implementations.</span></span> <span data-ttu-id="25e1c-103">Объект <xref:System.Runtime.Caching.ChangeMonitor> экземпляр отслеживает изменения в состоянии данных, который зависит от элемента кэша.</span><span class="sxs-lookup"><span data-stu-id="25e1c-103">A <xref:System.Runtime.Caching.ChangeMonitor> instance monitors changes in the state of data which a cache item depends on.</span></span> <span data-ttu-id="25e1c-104">Например элемент может быть файлом или сущностью данных, содержимое которой кэшируется.</span><span class="sxs-lookup"><span data-stu-id="25e1c-104">For example, the item can be a file or data entity whose contents are cached.</span></span> <span data-ttu-id="25e1c-105">При обновлении данных или файлов сущности необходимо также изменить связанная запись кэша.</span><span class="sxs-lookup"><span data-stu-id="25e1c-105">If the file or data entity is updated, the associated cache entry must be changed also.</span></span> <span data-ttu-id="25e1c-106">Общие элементы, которые могут быть проверены включают сущностей данных (например, поля базы данных, значения, строки или таблицы), другая запись кэша и файлы и атрибуты файлов.</span><span class="sxs-lookup"><span data-stu-id="25e1c-106">Common items that can be monitored include data entities (such as database fields, values, rows, or tables), another cache entry, and files and file attributes.</span></span>  
  
 <span data-ttu-id="25e1c-107">Изменение зависимости — изменение в состоянии зависимости.</span><span class="sxs-lookup"><span data-stu-id="25e1c-107">A dependency change is a change in the state of a dependency.</span></span> <span data-ttu-id="25e1c-108">В обычной реализации кэша после <xref:System.Runtime.Caching.ChangeMonitor> экземпляр уведомляет измененного зависимость кэша, кэш выполняет необходимое действие, например аннулирование вставленной записи кэша.</span><span class="sxs-lookup"><span data-stu-id="25e1c-108">In a typical cache implementation, after a <xref:System.Runtime.Caching.ChangeMonitor> instance notifies the cache that a dependency has changed, the cache performs the required action, such as invalidating the inserted cache entry.</span></span>  
  
 <span data-ttu-id="25e1c-109">Производный <xref:System.Runtime.Caching.ChangeMonitor> классы могут быть настроены для наблюдения за изменениями зависимостей для определенных различных хранилищ данных.</span><span class="sxs-lookup"><span data-stu-id="25e1c-109">Derived <xref:System.Runtime.Caching.ChangeMonitor> classes can be customized to monitor dependency changes for specific different data stores.</span></span> <span data-ttu-id="25e1c-110">Например существуют реализации кэша для файловой системы, физической памяти или базы данных.</span><span class="sxs-lookup"><span data-stu-id="25e1c-110">For example, there are cache implementations for a file system, physical memory, or a database.</span></span> <span data-ttu-id="25e1c-111"><xref:System.Runtime.Caching.ChangeMonitor> Класс проверяет изменения, происходящие вне кэша и оповещает кэша, произошли изменения.</span><span class="sxs-lookup"><span data-stu-id="25e1c-111">The <xref:System.Runtime.Caching.ChangeMonitor> class examines changes that occur outside the cache, and then alerts the cache that changes have occurred.</span></span>  
  
 <span data-ttu-id="25e1c-112">[!INCLUDE[dnprdnshort](~/includes/dnprdnshort-md.md)] Содержит следующие классы, производные от <xref:System.Runtime.Caching.ChangeMonitor> класса:</span><span class="sxs-lookup"><span data-stu-id="25e1c-112">The [!INCLUDE[dnprdnshort](~/includes/dnprdnshort-md.md)] includes the following classes that derive from <xref:System.Runtime.Caching.ChangeMonitor> class:</span></span>  
  
-   <xref:System.Runtime.Caching.CacheEntryChangeMonitor>  
  
-   <xref:System.Runtime.Caching.FileChangeMonitor>  
  
-   <xref:System.Runtime.Caching.HostFileChangeMonitor>  
  
-   <xref:System.Runtime.Caching.SqlChangeMonitor>  
  
 <span data-ttu-id="25e1c-113">Каждый из этих классов работает с различными типами зависимостей.</span><span class="sxs-lookup"><span data-stu-id="25e1c-113">Each of these classes works with different types of dependencies.</span></span> <span data-ttu-id="25e1c-114">Например, производном <xref:System.Runtime.Caching.FileChangeMonitor> класс отслеживает изменения в кэш для данных файловой системы (файлы и папки), который зависит от элемента кэша.</span><span class="sxs-lookup"><span data-stu-id="25e1c-114">For example, the derived <xref:System.Runtime.Caching.FileChangeMonitor> class monitors changes to a cache for file system data (files and folders) that the cache item depends on.</span></span>  
  
 ]]></format>
    </remarks>
    <threadsafe>
      <span data-ttu-id="25e1c-115">Данный тип потокобезопасен.</span>
      <span class="sxs-lookup">
        <span data-stu-id="25e1c-115">This type is thread safe.</span>
      </span>
    </threadsafe>
    <block subset="none" type="overrides">
      <para>
        <span data-ttu-id="25e1c-116">При создании пользовательской реализации кэша или производного типа монитора изменений необходимо следовать определенным правилам.</span>
        <span class="sxs-lookup">
          <span data-stu-id="25e1c-116">If you create a custom cache implementation or a derived change monitor type, you must follow certain guidelines.</span>
        </span>
        <span data-ttu-id="25e1c-117">В следующем списке перечислены следующие рекомендации.</span>
        <span class="sxs-lookup">
          <span data-stu-id="25e1c-117">The following list summarizes these guidelines.</span>
        </span>
        <span data-ttu-id="25e1c-118">Дополнительные сведения см. в документации для отдельных методов или свойств.</span>
        <span class="sxs-lookup">
          <span data-stu-id="25e1c-118">For more information, see the documentation for individual methods or properties.</span>
        </span>  
  
-   <span data-ttu-id="25e1c-119">Конструктор производного класса необходимо задать <see cref="P:System.Runtime.Caching.ChangeMonitor.UniqueId" /> , начать мониторинг и вызвать <see cref="M:System.Runtime.Caching.ChangeMonitor.InitializationComplete" /> метод перед возвратом метода.</span><span class="sxs-lookup"><span data-stu-id="25e1c-119">The constructor of a derived class must set the <see cref="P:System.Runtime.Caching.ChangeMonitor.UniqueId" /> property, begin monitoring, and call <see cref="M:System.Runtime.Caching.ChangeMonitor.InitializationComplete" /> method before the method returns.</span></span><span data-ttu-id="25e1c-120">Если конструктор возникнет ошибка во время конструкции и должен иметь для освобождения ресурсов, конструктор можно вызвать только <see cref="Overload:System.Runtime.Caching.ChangeMonitor.Dispose" /> перегрузки после <see cref="M:System.Runtime.Caching.ChangeMonitor.InitializationComplete" /> метод вызывается, потому что <see cref="Overload:System.Runtime.Caching.ChangeMonitor.Dispose" /> вызовет перегрузку <see cref="T:System.InvalidOperationException" /> исключение, если инициализация не завершена.</span><span class="sxs-lookup"><span data-stu-id="25e1c-120">If a constructor encounters an error during constructions and must have to dispose of resources, the constructor can only call the <see cref="Overload:System.Runtime.Caching.ChangeMonitor.Dispose" /> overload after the <see cref="M:System.Runtime.Caching.ChangeMonitor.InitializationComplete" /> method is called because the <see cref="Overload:System.Runtime.Caching.ChangeMonitor.Dispose" /> overload will throw an <see cref="T:System.InvalidOperationException" /> exception if initialization is not completed.</span></span>  
  
-   <span data-ttu-id="25e1c-121">При внесении изменений в данных, которые отслеживается до инициализации завершен, необходимо вызвать конструктор <see cref="M:System.Runtime.Caching.ChangeMonitor.OnChanged(System.Object)" /> метод перед вызовом метода <see cref="M:System.Runtime.Caching.ChangeMonitor.InitializationComplete" /> метод.</span><span class="sxs-lookup"><span data-stu-id="25e1c-121">If changes occur in the data that is being monitored before initialization is complete, the constructor must call the <see cref="M:System.Runtime.Caching.ChangeMonitor.OnChanged(System.Object)" /> method before calling the <see cref="M:System.Runtime.Caching.ChangeMonitor.InitializationComplete" /> method.</span></span>  
  
-   <span data-ttu-id="25e1c-122">После производный <see cref="T:System.Runtime.Caching.ChangeMonitor" /> создается экземпляр типа, нужно вставить в настраиваемый монитор <see cref="T:System.Runtime.Caching.ObjectCache" /> реализации.</span><span class="sxs-lookup"><span data-stu-id="25e1c-122">After a derived <see cref="T:System.Runtime.Caching.ChangeMonitor" /> type is instantiated, you must insert the monitor into a custom <see cref="T:System.Runtime.Caching.ObjectCache" /> implementation.</span></span><span data-ttu-id="25e1c-123">Или если с помощью монитор изменений, вызовите <see cref="Overload:System.Runtime.Caching.ChangeMonitor.Dispose" /> метод.</span><span class="sxs-lookup"><span data-stu-id="25e1c-123">Or if you are finished using the change monitor, call the <see cref="Overload:System.Runtime.Caching.ChangeMonitor.Dispose" /> method.</span></span>  
  
-   <span data-ttu-id="25e1c-124">После <see cref="T:System.Runtime.Caching.ChangeMonitor" /> экземпляр вставляется в <see cref="T:System.Runtime.Caching.ObjectCache" /> реализации <see cref="T:System.Runtime.Caching.ObjectCache" /> требуется экземпляр, что монитор изменений будет удален.</span><span class="sxs-lookup"><span data-stu-id="25e1c-124">After a <see cref="T:System.Runtime.Caching.ChangeMonitor" /> instance is inserted into a <see cref="T:System.Runtime.Caching.ObjectCache" /> implementation, the <see cref="T:System.Runtime.Caching.ObjectCache" /> instance require that the change monitor is disposed.</span></span><span data-ttu-id="25e1c-125">Даже в том случае, если курсор является недопустимым и вызывает исключение, <see cref="T:System.Runtime.Caching.ObjectCache" /> реализация должна вызывать <see cref="Overload:System.Runtime.Caching.ChangeMonitor.Dispose" /> перегрузки.</span><span class="sxs-lookup"><span data-stu-id="25e1c-125">Even if the insertion is invalid and causes an exception, the <see cref="T:System.Runtime.Caching.ObjectCache" /> implementation must call the <see cref="Overload:System.Runtime.Caching.ChangeMonitor.Dispose" /> overload.</span></span>  
  
-   <span data-ttu-id="25e1c-126">После вставки в кэш, монитор производном изменений <see cref="T:System.Runtime.Caching.ObjectCache" /> реализация должна вызывать <see cref="M:System.Runtime.Caching.ChangeMonitor.NotifyOnChanged(System.Runtime.Caching.OnChangedCallback)" />, передав <see cref="T:System.Runtime.Caching.OnChangedCallback" /> объекта.</span><span class="sxs-lookup"><span data-stu-id="25e1c-126">After a derived change monitor is inserted into a cache, the <see cref="T:System.Runtime.Caching.ObjectCache" /> implementation must call <see cref="M:System.Runtime.Caching.ChangeMonitor.NotifyOnChanged(System.Runtime.Caching.OnChangedCallback)" />, by passing a <see cref="T:System.Runtime.Caching.OnChangedCallback" /> object.</span></span><span data-ttu-id="25e1c-127"><see cref="M:System.Runtime.Caching.ChangeMonitor.NotifyOnChanged(System.Runtime.Caching.OnChangedCallback)" /> Метод может вызываться только один раз.</span><span class="sxs-lookup"><span data-stu-id="25e1c-127">The <see cref="M:System.Runtime.Caching.ChangeMonitor.NotifyOnChanged(System.Runtime.Caching.OnChangedCallback)" /> method can be called only one time.</span></span><span data-ttu-id="25e1c-128">Если уже произошло изменение зависимостей, <see cref="T:System.Runtime.Caching.OnChangedCallback" /> экземпляр будет немедленно вызывается при <see cref="M:System.Runtime.Caching.ChangeMonitor.NotifyOnChanged(System.Runtime.Caching.OnChangedCallback)" /> вызывается.</span><span class="sxs-lookup"><span data-stu-id="25e1c-128">If a dependency change has already occurred, the <see cref="T:System.Runtime.Caching.OnChangedCallback" /> instance will be called immediately when <see cref="M:System.Runtime.Caching.ChangeMonitor.NotifyOnChanged(System.Runtime.Caching.OnChangedCallback)" /> is called.</span></span><span data-ttu-id="25e1c-129">В противном случае <see cref="T:System.Runtime.Caching.OnChangedCallback" /> экземпляр будет вызываться только один раз.</span><span class="sxs-lookup"><span data-stu-id="25e1c-129">Otherwise, the <see cref="T:System.Runtime.Caching.OnChangedCallback" /> instance will be called only one time.</span></span><span data-ttu-id="25e1c-130">Происходит вызов один раз, либо при <see cref="M:System.Runtime.Caching.ChangeMonitor.OnChanged(System.Object)" /> метод вызывается, поскольку <see cref="T:System.Runtime.Caching.ChangeMonitor" /> экземпляр обнаружено изменение, или когда <see cref="M:System.Runtime.Caching.ChangeMonitor.Dispose" /> метод будет вызван на <see cref="T:System.Runtime.Caching.ChangeMonitor" />, какое событие происходит раньше.</span><span class="sxs-lookup"><span data-stu-id="25e1c-130">This one time call occurs either when the <see cref="M:System.Runtime.Caching.ChangeMonitor.OnChanged(System.Object)" /> method is called because the <see cref="T:System.Runtime.Caching.ChangeMonitor" /> instance detected a change, or when the <see cref="M:System.Runtime.Caching.ChangeMonitor.Dispose" /> method is called on the <see cref="T:System.Runtime.Caching.ChangeMonitor" />, whichever occurs first.</span></span>  
  
-   <span data-ttu-id="25e1c-131"><see cref="T:System.Runtime.Caching.OnChangedCallback" /> Экземпляра, предоставляемая <see cref="T:System.Runtime.Caching.ObjectCache" /> следует удалить связанную запись кэша и указать причину, с помощью реализации <see cref="F:System.Web.Caching.CacheItemRemovedReason.DependencyChanged" /> перечисления.</span><span class="sxs-lookup"><span data-stu-id="25e1c-131">The <see cref="T:System.Runtime.Caching.OnChangedCallback" /> instance that is provided by an <see cref="T:System.Runtime.Caching.ObjectCache" /> implementation should remove the associated cache entry and specify a reason by using the <see cref="F:System.Web.Caching.CacheItemRemovedReason.DependencyChanged" /> enumeration.</span></span>  
  
-   <span data-ttu-id="25e1c-132">Объект <see cref="T:System.Runtime.Caching.ChangeMonitor" /> экземпляра можно вызвать <see cref="M:System.Runtime.Caching.ChangeMonitor.OnChanged(System.Object)" /> метод либо перед реализацией кэша вызвал <see cref="M:System.Runtime.Caching.ChangeMonitor.NotifyOnChanged(System.Runtime.Caching.OnChangedCallback)" /> метода или после.</span><span class="sxs-lookup"><span data-stu-id="25e1c-132">A <see cref="T:System.Runtime.Caching.ChangeMonitor" /> instance can call the <see cref="M:System.Runtime.Caching.ChangeMonitor.OnChanged(System.Object)" /> method either before a cache implementation has called <see cref="M:System.Runtime.Caching.ChangeMonitor.NotifyOnChanged(System.Runtime.Caching.OnChangedCallback)" /> method or after.</span></span><span data-ttu-id="25e1c-133">Если <see cref="M:System.Runtime.Caching.ChangeMonitor.OnChanged(System.Object)" /> метод вызывается перед <see cref="M:System.Runtime.Caching.ChangeMonitor.NotifyOnChanged(System.Runtime.Caching.OnChangedCallback)" /> называется базой <see cref="T:System.Runtime.Caching.ChangeMonitor" /> реализацию уведомит кэша, это произошло и запускается обратного вызова должен быть передан <see cref="M:System.Runtime.Caching.ChangeMonitor.NotifyOnChanged(System.Runtime.Caching.OnChangedCallback)" /> сразу же после <see cref="M:System.Runtime.Caching.ChangeMonitor.NotifyOnChanged(System.Runtime.Caching.OnChangedCallback)" /> вызывается.</span><span class="sxs-lookup"><span data-stu-id="25e1c-133">If the <see cref="M:System.Runtime.Caching.ChangeMonitor.OnChanged(System.Object)" /> method is called before <see cref="M:System.Runtime.Caching.ChangeMonitor.NotifyOnChanged(System.Runtime.Caching.OnChangedCallback)" /> is called, the base <see cref="T:System.Runtime.Caching.ChangeMonitor" /> implementation will notify the cache that this has occurred and will trigger the callback to be passed to <see cref="M:System.Runtime.Caching.ChangeMonitor.NotifyOnChanged(System.Runtime.Caching.OnChangedCallback)" /> immediately when <see cref="M:System.Runtime.Caching.ChangeMonitor.NotifyOnChanged(System.Runtime.Caching.OnChangedCallback)" /> is invoked.</span></span><span data-ttu-id="25e1c-134">Данные, передаваемые в любом состоянии <see cref="M:System.Runtime.Caching.ChangeMonitor.OnChanged(System.Object)" /> метод сохраняется монитор изменений, а впоследствии передается <see cref="M:System.Runtime.Caching.ChangeMonitor.NotifyOnChanged(System.Runtime.Caching.OnChangedCallback)" /> метод при <see cref="M:System.Runtime.Caching.ChangeMonitor.NotifyOnChanged(System.Runtime.Caching.OnChangedCallback)" /> вызывается метод.</span><span class="sxs-lookup"><span data-stu-id="25e1c-134">Any state data that is passed to the <see cref="M:System.Runtime.Caching.ChangeMonitor.OnChanged(System.Object)" /> method is saved by the change monitor and subsequently passed to the <see cref="M:System.Runtime.Caching.ChangeMonitor.NotifyOnChanged(System.Runtime.Caching.OnChangedCallback)" /> method when the <see cref="M:System.Runtime.Caching.ChangeMonitor.NotifyOnChanged(System.Runtime.Caching.OnChangedCallback)" /> method is invoked.</span></span>  
  
-   <span data-ttu-id="25e1c-135">Монитор изменений необходимо реализовать <see cref="M:System.Runtime.Caching.ChangeMonitor.Dispose(System.Boolean)" /> метод.</span><span class="sxs-lookup"><span data-stu-id="25e1c-135">A change monitor must implement the <see cref="M:System.Runtime.Caching.ChangeMonitor.Dispose(System.Boolean)" /> method.</span></span><span data-ttu-id="25e1c-136">Дополнительные сведения см. в документации метода <see cref="M:System.Runtime.Caching.ChangeMonitor.Dispose(System.Boolean)" />.</span><span class="sxs-lookup"><span data-stu-id="25e1c-136">For more information, see the <see cref="M:System.Runtime.Caching.ChangeMonitor.Dispose(System.Boolean)" /> method documentation.</span></span>  
  
-   <span data-ttu-id="25e1c-137"><see cref="M:System.Runtime.Caching.ChangeMonitor.Dispose" /> Перегруженный метод должен вызываться для удаления <see cref="T:System.Runtime.Caching.ChangeMonitor" /> экземпляра.</span><span class="sxs-lookup"><span data-stu-id="25e1c-137">The <see cref="M:System.Runtime.Caching.ChangeMonitor.Dispose" /> method overload must be called to dispose of the <see cref="T:System.Runtime.Caching.ChangeMonitor" /> instance.</span></span><span data-ttu-id="25e1c-138">Ниже приведены правила для вызова Dispose.</span><span class="sxs-lookup"><span data-stu-id="25e1c-138">The rules for calling Dispose are as follows:</span></span>  
  
    -   <span data-ttu-id="25e1c-139">Перед вставкой элемента в кэше, он отвечает вызывающий объект для удаления <see cref="T:System.Runtime.Caching.ChangeMonitor" /> экземпляра.</span><span class="sxs-lookup"><span data-stu-id="25e1c-139">Before an item is inserted into the cache, it is the responsibility of caller to dispose of a <see cref="T:System.Runtime.Caching.ChangeMonitor" /> instance.</span></span>  
  
    -   <span data-ttu-id="25e1c-140">Один раз для элемента кэша и <see cref="T:System.Runtime.Caching.ChangeMonitor" /> экземпляров, связанных с ним, передаются в кэш, Реализатор кэша убедиться, что, <see cref="Overload:System.Runtime.Caching.ChangeMonitor.Dispose" /> вызывается метод, даже если завершается неудачей.</span><span class="sxs-lookup"><span data-stu-id="25e1c-140">Once cache item and the <see cref="T:System.Runtime.Caching.ChangeMonitor" /> instances that are associated with it are passed to a cache, the cache implementer must make sure that that the <see cref="Overload:System.Runtime.Caching.ChangeMonitor.Dispose" /> method is called, even if the insert fails.</span></span>  
  
    -   <span data-ttu-id="25e1c-141">После элемента и связанный с ним <see cref="T:System.Runtime.Caching.ChangeMonitor" /> экземпляры передаются в кэш, так как вызывающий объект не должен располагать зависимость при <see cref="Overload:System.Runtime.Caching.ChangeMonitor.Dispose" /> вызывается метод, вызов обрабатывается, как если бы зависимость изменилась.</span><span class="sxs-lookup"><span data-stu-id="25e1c-141">After an item and its associated <see cref="T:System.Runtime.Caching.ChangeMonitor" /> instances are passed to a cache, the caller must not dispose the dependency because when the <see cref="Overload:System.Runtime.Caching.ChangeMonitor.Dispose" /> method is called, the call is treated as if the dependency has changed.</span></span><span data-ttu-id="25e1c-142">В результате <see cref="M:System.Runtime.Caching.ChangeMonitor.OnChanged(System.Object)" /> автоматически вызывается метод.</span><span class="sxs-lookup"><span data-stu-id="25e1c-142">As a result, the <see cref="M:System.Runtime.Caching.ChangeMonitor.OnChanged(System.Object)" /> method is automatically invoked.</span></span>  
  
-   <span data-ttu-id="25e1c-143">Учитывая эти правила, <see cref="Overload:System.Runtime.Caching.ChangeMonitor.Dispose" /> метод должен вызываться в одном из следующих способов:</span><span class="sxs-lookup"><span data-stu-id="25e1c-143">Taking these rules into consideration, the <see cref="Overload:System.Runtime.Caching.ChangeMonitor.Dispose" /> method must be called in one of the following ways:</span></span>  
  
    -   <span data-ttu-id="25e1c-144">Пользователи должны вызвать <see cref="M:System.Runtime.Caching.ChangeMonitor.Dispose" /> перегруженный метод, если они не вставлять экземпляр производного монитора изменения в кэш.</span><span class="sxs-lookup"><span data-stu-id="25e1c-144">Users must call the <see cref="M:System.Runtime.Caching.ChangeMonitor.Dispose" /> method overload if they decide not to insert the derived change-monitor instance into a cache.</span></span>  
  
    -   <span data-ttu-id="25e1c-145">Если реализация пытается вставить экземпляр монитора изменений в кэш объекта Вставка не выполняется, реализация кэша отвечает за вызов метода <see cref="M:System.Runtime.Caching.ChangeMonitor.Dispose" /> перегрузки.</span><span class="sxs-lookup"><span data-stu-id="25e1c-145">If the implementation tries to insert the change-monitor instance into an object cache but the insertion fails, the cache implementation is responsible for calling the <see cref="M:System.Runtime.Caching.ChangeMonitor.Dispose" /> overload.</span></span><span data-ttu-id="25e1c-146">При попытке вставки приводит к исключению, реализация кэша должна освободить все связанные зависимости.</span><span class="sxs-lookup"><span data-stu-id="25e1c-146">When the insertion attempt causes an exception, the cache implementation must dispose of any associated dependencies.</span></span>  
  
    -   <span data-ttu-id="25e1c-147">Если запись кэша удаляется, реализация кэша должна также удалить зависимости.</span><span class="sxs-lookup"><span data-stu-id="25e1c-147">If the cache entry is removed, the cache implementation must also dispose of the dependency.</span></span>  
  
    -   <span data-ttu-id="25e1c-148">Внутренняя реализация <see cref="M:System.Runtime.Caching.ChangeMonitor.OnChanged(System.Object)" /> автоматически вызывает метод <see cref="Overload:System.Runtime.Caching.ChangeMonitor.Dispose" /> метод после вызова обратный вызов, регистрируется через <see cref="M:System.Runtime.Caching.ChangeMonitor.NotifyOnChanged(System.Runtime.Caching.OnChangedCallback)" />.</span><span class="sxs-lookup"><span data-stu-id="25e1c-148">The internal implementation of the <see cref="M:System.Runtime.Caching.ChangeMonitor.OnChanged(System.Object)" /> method automatically calls the <see cref="Overload:System.Runtime.Caching.ChangeMonitor.Dispose" /> method after it calls a callback that is registered through <see cref="M:System.Runtime.Caching.ChangeMonitor.NotifyOnChanged(System.Runtime.Caching.OnChangedCallback)" />.</span></span><block subset="none" type="note"><para><span data-ttu-id="25e1c-149">Это автоматический вызов метода dispose во время срабатывания события происходят, если инициализация <see cref="T:System.Runtime.Caching.ChangeMonitor" /> экземпляр ранее был завершен.</span><span class="sxs-lookup"><span data-stu-id="25e1c-149">This automatic call to the dispose method during the event firing only occurs if the initialization of the <see cref="T:System.Runtime.Caching.ChangeMonitor" /> instance was previously completed.</span></span></para></block><span data-ttu-id="25e1c-150">При вызове конструктора монитор производном изменений <see cref="M:System.Runtime.Caching.ChangeMonitor.InitializationComplete" /> метод, если состояние монитора изменений уже была изменена (состояние отслеживаемого уже измененные при конструктор был по-прежнему активен) то <see cref="M:System.Runtime.Caching.ChangeMonitor.InitializationComplete" /> будет метод автоматически удалите монитор изменений.</span><span class="sxs-lookup"><span data-stu-id="25e1c-150">When a derived change monitor's constructor calls the <see cref="M:System.Runtime.Caching.ChangeMonitor.InitializationComplete" /> method, if the state of the change monitor has already changed (that is, the state that is monitored already changed when the constructor was still active) then the <see cref="M:System.Runtime.Caching.ChangeMonitor.InitializationComplete" /> method will automatically dispose of the change monitor.</span></span>  
  
-   <span data-ttu-id="25e1c-151"><see cref="P:System.Runtime.Caching.ChangeMonitor.HasChanged" /> Свойству <see langword="true" /> после <see cref="M:System.Runtime.Caching.ChangeMonitor.OnChanged(System.Object)" /> метод вызывается методом экземпляра производного монитора изменения, независимо от того, следует ли <see cref="T:System.Runtime.Caching.OnChangedCallback" /> задан объект при вызове <see cref="M:System.Runtime.Caching.ChangeMonitor.NotifyOnChanged(System.Runtime.Caching.OnChangedCallback)" /> метода или нет.</span><span class="sxs-lookup"><span data-stu-id="25e1c-151">The <see cref="P:System.Runtime.Caching.ChangeMonitor.HasChanged" /> property is set to <see langword="true" /> after the <see cref="M:System.Runtime.Caching.ChangeMonitor.OnChanged(System.Object)" /> method is called by the derived change-monitor instance, regardless of whether a <see cref="T:System.Runtime.Caching.OnChangedCallback" /> object has been set by a call to the <see cref="M:System.Runtime.Caching.ChangeMonitor.NotifyOnChanged(System.Runtime.Caching.OnChangedCallback)" /> method or not.</span></span></para>
    </block>
    <altmember cref="N:System.Web.Caching" />
    <altmember cref="T:System.Runtime.Caching.ObjectCache" />
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="protected ChangeMonitor ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.Caching.ChangeMonitor.#ctor" />
      <MemberSignature Language="VB.NET" Value="Protected Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; ChangeMonitor();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Caching</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="25e1c-152">Инициализирует новый экземпляр класса <see cref="T:System.Runtime.Caching.ChangeMonitor" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="25e1c-152">Initializes a new instance of the <see cref="T:System.Runtime.Caching.ChangeMonitor" /> class.</span>
          </span>
          <span data-ttu-id="25e1c-153">Этот конструктор вызывается конструкторами в производных классах для инициализации базового класса.</span>
          <span class="sxs-lookup">
            <span data-stu-id="25e1c-153">This constructor is called from constructors in derived classes to initialize the base class.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="25e1c-154"><xref:System.Runtime.Caching.ChangeMonitor> Класс имеет конструктор по умолчанию.</span><span class="sxs-lookup"><span data-stu-id="25e1c-154">The <xref:System.Runtime.Caching.ChangeMonitor> class has a default constructor.</span></span> <span data-ttu-id="25e1c-155">Тем не менее, классов, наследующих от базового <xref:System.Runtime.Caching.ChangeMonitor> класса и определение пользовательского наблюдения за изменениями поведение должны выполнять инициализацию в конструкторе.</span><span class="sxs-lookup"><span data-stu-id="25e1c-155">However, classes that inherit from the base <xref:System.Runtime.Caching.ChangeMonitor> class and define custom change-monitoring behavior must perform initialization in the constructor.</span></span> <span data-ttu-id="25e1c-156">Дополнительные сведения см. примечания для наследующих объектов раздела.</span><span class="sxs-lookup"><span data-stu-id="25e1c-156">For more information, see the Notes for Inheritors section.</span></span>  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides">
          <para>
            <span data-ttu-id="25e1c-157">Конструктор производного класса необходимо задать <see cref="P:System.Runtime.Caching.ChangeMonitor.UniqueId" /> , начать мониторинг и вызвать <see cref="M:System.Runtime.Caching.ChangeMonitor.InitializationComplete" /> класса перед возвратом.</span>
            <span class="sxs-lookup">
              <span data-stu-id="25e1c-157">The constructor of a derived class must set the <see cref="P:System.Runtime.Caching.ChangeMonitor.UniqueId" /> property, begin monitoring, and call the <see cref="M:System.Runtime.Caching.ChangeMonitor.InitializationComplete" /> class before it returns.</span>
            </span>
            <span data-ttu-id="25e1c-158">При изменении зависимости перед инициализацией завершена (например, если ключ зависимых кэша не найден в кэше), необходимо вызвать конструктор <see cref="M:System.Runtime.Caching.ChangeMonitor.OnChanged(System.Object)" /> метод перед вызовом <see cref="M:System.Runtime.Caching.ChangeMonitor.InitializationComplete" /> метод.</span>
            <span class="sxs-lookup">
              <span data-stu-id="25e1c-158">If a dependency changes before initialization is complete (for example, if a dependent cache key is not found in the cache), the constructor must call the <see cref="M:System.Runtime.Caching.ChangeMonitor.OnChanged(System.Object)" /> method before it calls the <see cref="M:System.Runtime.Caching.ChangeMonitor.InitializationComplete" /> method.</span>
            </span>
            <span data-ttu-id="25e1c-159">В этом случае конструктор может вызвать <see cref="M:System.Runtime.Caching.ChangeMonitor.Dispose" /> метод только после <see cref="M:System.Runtime.Caching.ChangeMonitor.InitializationComplete" /> вызывается метод, так как <see cref="M:System.Runtime.Caching.ChangeMonitor.Dispose" /> метод вызывает исключение, если инициализация не завершена.</span>
            <span class="sxs-lookup">
              <span data-stu-id="25e1c-159">In this case, constructor can call the <see cref="M:System.Runtime.Caching.ChangeMonitor.Dispose" /> method only after the <see cref="M:System.Runtime.Caching.ChangeMonitor.InitializationComplete" /> method is called, because the <see cref="M:System.Runtime.Caching.ChangeMonitor.Dispose" /> method throws an exception if initialization is not completed.</span>
            </span>
          </para>
        </block>
      </Docs>
    </Member>
    <MemberGroup MemberName="Dispose">
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Caching</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="25e1c-160">Освобождает все ресурсы, используемые текущим экземпляром класса <see cref="T:System.Runtime.Caching.ChangeMonitor" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="25e1c-160">Releases all resources used by the current instance of the <see cref="T:System.Runtime.Caching.ChangeMonitor" /> class.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="25e1c-161"><xref:System.Runtime.Caching.ChangeMonitor.Dispose%2A> Метод используется для освобождения <xref:System.Runtime.Caching.ChangeMonitor> экземпляра и связанные ресурсы.</span><span class="sxs-lookup"><span data-stu-id="25e1c-161">The <xref:System.Runtime.Caching.ChangeMonitor.Dispose%2A> method is used to release the <xref:System.Runtime.Caching.ChangeMonitor> instance and related resources.</span></span> <span data-ttu-id="25e1c-162">Открытые <xref:System.Runtime.Caching.ChangeMonitor.Dispose%2A> метод вызывается для координации процесс реализации с помощью события жизненного цикла ключа классов производного монитора изменения (например, инициализация), а также для освобождения <xref:System.Runtime.Caching.ChangeMonitor> экземпляра, чтобы экземпляр мог быть собраны как мусор.</span><span class="sxs-lookup"><span data-stu-id="25e1c-162">The public <xref:System.Runtime.Caching.ChangeMonitor.Dispose%2A> method is invoked to coordinate the disposal process with key life-cycle events of derived change-monitor classes (such as initialization), and to release the <xref:System.Runtime.Caching.ChangeMonitor> instance so that the instance can be garbage collected.</span></span> <span data-ttu-id="25e1c-163"><xref:System.Runtime.Caching.ChangeMonitor.Dispose%2A> Метод реализуется классами производного монитора изменения для удаления их управляемых и неуправляемых ресурсов.</span><span class="sxs-lookup"><span data-stu-id="25e1c-163">The <xref:System.Runtime.Caching.ChangeMonitor.Dispose%2A> method is implemented by derived change-monitor classes to dispose of their managed and unmanaged resources.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </MemberGroup>
    <Member MemberName="Dispose">
      <MemberSignature Language="C#" Value="public void Dispose ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Dispose() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.Caching.ChangeMonitor.Dispose" />
      <MemberSignature Language="VB.NET" Value="Public Sub Dispose ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void Dispose();" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.IDisposable.Dispose</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Caching</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="25e1c-164">Освобождает все ресурсы, используемые текущим экземпляром класса <see cref="T:System.Runtime.Caching.ChangeMonitor" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="25e1c-164">Releases all resources that are used by the current instance of the <see cref="T:System.Runtime.Caching.ChangeMonitor" /> class.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="25e1c-165"><xref:System.Runtime.Caching.ChangeMonitor.Dispose%2A> Вызывает метод <xref:System.Runtime.Caching.ChangeMonitor.Dispose%2A> метода производного класса только один раз, при первом вызове.</span><span class="sxs-lookup"><span data-stu-id="25e1c-165">The <xref:System.Runtime.Caching.ChangeMonitor.Dispose%2A> method invokes the <xref:System.Runtime.Caching.ChangeMonitor.Dispose%2A> method of derived classes only one time, the first time it is called.</span></span> <span data-ttu-id="25e1c-166">Последующие вызовы <xref:System.Runtime.Caching.ChangeMonitor.Dispose%2A> метод не действуют.</span><span class="sxs-lookup"><span data-stu-id="25e1c-166">Subsequent calls to the <xref:System.Runtime.Caching.ChangeMonitor.Dispose%2A> method have no effect.</span></span> <span data-ttu-id="25e1c-167">После вызова метода <xref:System.Runtime.Caching.ChangeMonitor.IsDisposed%2A> свойству `true`.</span><span class="sxs-lookup"><span data-stu-id="25e1c-167">After the method has been called, the <xref:System.Runtime.Caching.ChangeMonitor.IsDisposed%2A> property is set to `true`.</span></span>  
  
 <span data-ttu-id="25e1c-168"><xref:System.Runtime.Caching.ChangeMonitor.Dispose%2A> Для удаления необходимо вызвать перегрузку <xref:System.Runtime.Caching.ChangeMonitor> экземпляра.</span><span class="sxs-lookup"><span data-stu-id="25e1c-168">The <xref:System.Runtime.Caching.ChangeMonitor.Dispose%2A> overload must be called to dispose of a <xref:System.Runtime.Caching.ChangeMonitor> instance.</span></span> <span data-ttu-id="25e1c-169">Ниже приведены правила для вызова метода dispose.</span><span class="sxs-lookup"><span data-stu-id="25e1c-169">The following are the rules for calling the dispose method:</span></span>  
  
-   <span data-ttu-id="25e1c-170">Перед вставкой элемента в кэше, это вызывающим для удаления <xref:System.Runtime.Caching.ChangeMonitor> экземпляра.</span><span class="sxs-lookup"><span data-stu-id="25e1c-170">Before an item is inserted into the cache, it is the caller's responsibility to dispose of a <xref:System.Runtime.Caching.ChangeMonitor> instance.</span></span>  
  
-   <span data-ttu-id="25e1c-171">Один раз для элемента кэша и <xref:System.Runtime.Caching.ChangeMonitor> экземпляров, связанных с ним передаются в кэш, Реализатор кэша, убедиться, что <xref:System.Runtime.Caching.ChangeMonitor.Dispose%2A> вызывается, даже если завершается неудачей.</span><span class="sxs-lookup"><span data-stu-id="25e1c-171">Once cache item and the <xref:System.Runtime.Caching.ChangeMonitor> instances that are associated with it are passed to a cache, the cache implementer that must make sure that <xref:System.Runtime.Caching.ChangeMonitor.Dispose%2A> is called, even if the insert fails.</span></span>  
  
-   <span data-ttu-id="25e1c-172">После элемента и связанный с ним <xref:System.Runtime.Caching.ChangeMonitor> экземпляры передаются в кэш, так как вызывающий объект не должен располагать зависимость при <xref:System.Runtime.Caching.ChangeMonitor.Dispose%2A> вызывается метод, вызов обрабатывается, как если бы зависимость изменилась.</span><span class="sxs-lookup"><span data-stu-id="25e1c-172">After an item and its associated <xref:System.Runtime.Caching.ChangeMonitor> instances are passed to a cache, the caller must not dispose the dependency because when the <xref:System.Runtime.Caching.ChangeMonitor.Dispose%2A> method is called, the call is treated as if the dependency has changed.</span></span> <span data-ttu-id="25e1c-173">В результате <xref:System.Runtime.Caching.ChangeMonitor.OnChanged%2A> автоматически вызывается метод.</span><span class="sxs-lookup"><span data-stu-id="25e1c-173">As a result, the <xref:System.Runtime.Caching.ChangeMonitor.OnChanged%2A> method is automatically invoked.</span></span>  
  
-   <span data-ttu-id="25e1c-174">Учитывая эти правила, <xref:System.Runtime.Caching.ChangeMonitor.Dispose%2A> метод должен вызываться в одном из следующих способов:</span><span class="sxs-lookup"><span data-stu-id="25e1c-174">Taking these rules into consideration, the <xref:System.Runtime.Caching.ChangeMonitor.Dispose%2A> method must be called in one of the following ways:</span></span>  
  
    -   <span data-ttu-id="25e1c-175">Пользователи должны вызвать <xref:System.Runtime.Caching.ChangeMonitor.Dispose%2A> перегруженный метод, если они не вставлять экземпляр производного монитора изменения в кэш.</span><span class="sxs-lookup"><span data-stu-id="25e1c-175">Users must call the <xref:System.Runtime.Caching.ChangeMonitor.Dispose%2A> method overload if they decide not to insert the derived change-monitor instance into a cache.</span></span>  
  
    -   <span data-ttu-id="25e1c-176">Реализация кэша отвечает за вызов метода <xref:System.Runtime.Caching.ChangeMonitor.Dispose%2A> перегрузки, если реализация пытается вставить экземпляр монитора изменений в кэш объекта Вставка не выполняется.</span><span class="sxs-lookup"><span data-stu-id="25e1c-176">The cache implementation is responsible for calling the <xref:System.Runtime.Caching.ChangeMonitor.Dispose%2A> overload if the implementation tries to insert the change-monitor instance into an object cache but the insertion fails.</span></span> <span data-ttu-id="25e1c-177">При попытке вставки приводит к исключению, реализация кэша должна освободить все связанные зависимости.</span><span class="sxs-lookup"><span data-stu-id="25e1c-177">When the insertion attempt causes an exception, the cache implementation must dispose any associated dependencies.</span></span>  
  
    -   <span data-ttu-id="25e1c-178">Если запись кэша удаляется, реализация кэша должна также удалить зависимость.</span><span class="sxs-lookup"><span data-stu-id="25e1c-178">If the cache entry is removed, the cache implementation must also dispose the dependency.</span></span>  
  
 <span data-ttu-id="25e1c-179">Внутренняя реализация <xref:System.Runtime.Caching.ChangeMonitor.OnChanged%2A> автоматически вызывает метод <xref:System.Runtime.Caching.ChangeMonitor.Dispose%2A> метод после вызова обратный вызов, регистрируется через <xref:System.Runtime.Caching.ChangeMonitor.NotifyOnChanged%2A> метод.</span><span class="sxs-lookup"><span data-stu-id="25e1c-179">The internal implementation of the <xref:System.Runtime.Caching.ChangeMonitor.OnChanged%2A> method automatically calls the <xref:System.Runtime.Caching.ChangeMonitor.Dispose%2A> method after it calls a callback that is registered through the <xref:System.Runtime.Caching.ChangeMonitor.NotifyOnChanged%2A> method.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="25e1c-180">Это автоматического удаления во время срабатывания события происходят, если инициализация <xref:System.Runtime.Caching.ChangeMonitor> ранее выполненные экземпляра.</span><span class="sxs-lookup"><span data-stu-id="25e1c-180">This automatic dispose during the event firing only occurs if the initialization of the <xref:System.Runtime.Caching.ChangeMonitor> instance previously completed.</span></span>  
  
 <span data-ttu-id="25e1c-181">При вызове конструктора монитор производном изменений <xref:System.Runtime.Caching.ChangeMonitor.InitializationComplete%2A> метод, если состояние монитора изменений уже была изменена (то есть, состояние, которое отслеживается уже изменен при конструктор был по-прежнему активен) затем <xref:System.Runtime.Caching.ChangeMonitor.InitializationComplete%2A> будет метод автоматически удалите монитор изменений.</span><span class="sxs-lookup"><span data-stu-id="25e1c-181">When a derived change monitor's constructor calls the <xref:System.Runtime.Caching.ChangeMonitor.InitializationComplete%2A> method, if the state of the change monitor has already changed (that is, the state that is monitored has already changed when the constructor was still active) then <xref:System.Runtime.Caching.ChangeMonitor.InitializationComplete%2A> method will automatically dispose the change monitor.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="25e1c-182">Пользователи не должны вызывать <xref:System.Runtime.Caching.ChangeMonitor.Dispose%2A> метод.</span><span class="sxs-lookup"><span data-stu-id="25e1c-182">Users should not call the <xref:System.Runtime.Caching.ChangeMonitor.Dispose%2A> method.</span></span> <span data-ttu-id="25e1c-183">Тем не менее можно запретить пользователям вызова метода.</span><span class="sxs-lookup"><span data-stu-id="25e1c-183">However, you cannot prevent users from calling the method.</span></span> <span data-ttu-id="25e1c-184">Таким образом, если они есть, <xref:System.Runtime.Caching.ChangeMonitor.OnChanged%2A> вызывается метод.</span><span class="sxs-lookup"><span data-stu-id="25e1c-184">Therefore, if they do, the <xref:System.Runtime.Caching.ChangeMonitor.OnChanged%2A> method is invoked.</span></span> <span data-ttu-id="25e1c-185">В этом случае запись кэша уведомляется, как если бы зависимость изменилась.</span><span class="sxs-lookup"><span data-stu-id="25e1c-185">In that case, the cache entry is notified as if the dependency has changed.</span></span>  
  
 <span data-ttu-id="25e1c-186">Чтобы предотвратить переопределения производными классами <xref:System.Runtime.Caching.ChangeMonitor.Dispose%2A> метод, метод не является явной реализацией интерфейса.</span><span class="sxs-lookup"><span data-stu-id="25e1c-186">To prevent derived classes from overriding <xref:System.Runtime.Caching.ChangeMonitor.Dispose%2A> method, the method is not an explicit interface implementation.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">
          <span data-ttu-id="25e1c-187">Инициализация не завершена в производном классе монитора изменений, который вызвал базовый метод <see cref="M:System.Runtime.Caching.ChangeMonitor.Dispose" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="25e1c-187">Initialization is not complete in the derived change-monitor class that called the base <see cref="M:System.Runtime.Caching.ChangeMonitor.Dispose" /> method.</span>
          </span>
        </exception>
        <altmember cref="M:System.Runtime.Caching.ChangeMonitor.OnChanged(System.Object)" />
      </Docs>
    </Member>
    <Member MemberName="Dispose">
      <MemberSignature Language="C#" Value="protected abstract void Dispose (bool disposing);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void Dispose(bool disposing) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.Caching.ChangeMonitor.Dispose(System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Protected MustOverride Sub Dispose (disposing As Boolean)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; abstract void Dispose(bool disposing);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Caching</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="disposing" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="disposing">
          <span data-ttu-id="25e1c-188">Значение <see langword="true" />, чтобы освободить управляемые и неуправляемые ресурсы и любые ссылки на экземпляр <see cref="T:System.Runtime.Caching.ChangeMonitor" />; значение <see langword="false" />, чтобы освободить только неуправляемые ресурсы.</span>
          <span class="sxs-lookup">
            <span data-stu-id="25e1c-188">
              <see langword="true" /> to release managed and unmanaged resources and any references to a <see cref="T:System.Runtime.Caching.ChangeMonitor" /> instance; <see langword="false" /> to release only unmanaged resources.</span>
          </span>
          <span data-ttu-id="25e1c-189">Если передается значение <see langword="false" />, метод <see cref="M:System.Runtime.Caching.ChangeMonitor.Dispose(System.Boolean)" /> вызывается потоком <see langword="finalizer" />, а любые внешние управляемые ссылки в большинстве случаев становятся недействительными, так как они уже были очищены сборщиком мусора.</span>
          <span class="sxs-lookup">
            <span data-stu-id="25e1c-189">When <see langword="false" /> is passed, the <see cref="M:System.Runtime.Caching.ChangeMonitor.Dispose(System.Boolean)" /> method is called by a <see langword="finalizer" /> thread and any external managed references are likely no longer valid because they have already been garbage collected.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="25e1c-190">Освобождает все управляемые и неуправляемые ресурсы и все ссылки на экземпляр <see cref="T:System.Runtime.Caching.ChangeMonitor" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="25e1c-190">Releases all managed and unmanaged resources and any references to the <see cref="T:System.Runtime.Caching.ChangeMonitor" /> instance.</span>
          </span>
          <span data-ttu-id="25e1c-191">Эту перегрузку необходимо реализовывать в производных классах, контролирующих изменения.</span>
          <span class="sxs-lookup">
            <span data-stu-id="25e1c-191">This overload must be implemented by derived change-monitor classes.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="25e1c-192">Если значение `disposing` значение `true`, все управляемые и неуправляемые ресурсы удаляются, и все ссылки на этот объект освобождаются, чтобы экземпляр производного монитора изменения могут быть собраны как мусор.</span><span class="sxs-lookup"><span data-stu-id="25e1c-192">When the value of `disposing` value is `true`, all managed and unmanaged resources are disposed and any references to this object are released so that the derived change-monitor instance can be garbage collected.</span></span> <span data-ttu-id="25e1c-193">Гарантируется, что базовый <xref:System.Runtime.Caching.ChangeMonitor.Dispose%2A> метод будет вызывать реализованный <xref:System.Runtime.Caching.ChangeMonitor.Dispose%2A> метод только один раз.</span><span class="sxs-lookup"><span data-stu-id="25e1c-193">It is guaranteed that the base <xref:System.Runtime.Caching.ChangeMonitor.Dispose%2A> method will invoke the implemented <xref:System.Runtime.Caching.ChangeMonitor.Dispose%2A> method only one time.</span></span>  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides">
          <para>
            <span data-ttu-id="25e1c-194">Монитор изменений необходимо реализовать <see cref="M:System.Runtime.Caching.ChangeMonitor.Dispose(System.Boolean)" /> перегрузку, чтобы освободить все управляемые и неуправляемые ресурсы, когда значение <paramref name="disposing" /> — <see langword="true" />.</span>
            <span class="sxs-lookup">
              <span data-stu-id="25e1c-194">A change monitor must implement the <see cref="M:System.Runtime.Caching.ChangeMonitor.Dispose(System.Boolean)" /> overload to release all managed and unmanaged resources when the value of <paramref name="disposing" /> is <see langword="true" />.</span>
            </span>
            <span data-ttu-id="25e1c-195">
              <see cref="M:System.Runtime.Caching.ChangeMonitor.Dispose(System.Boolean)" /> Перегрузку метода, которая имеет <paramref name="disposing" /> значение <see langword="true" /> вызывается только один раз, а именно: при удалении экземпляра в первый раз.</span>
            <span class="sxs-lookup">
              <span data-stu-id="25e1c-195">The <see cref="M:System.Runtime.Caching.ChangeMonitor.Dispose(System.Boolean)" /> method overload that has a <paramref name="disposing" /> value of <see langword="true" /> is called only one time, namely, when the instance is disposed for the first time.</span>
            </span>
            <span data-ttu-id="25e1c-196">Монитор изменений не должны вызывать <see cref="M:System.Runtime.Caching.ChangeMonitor.Dispose(System.Boolean)" /> перегрузить непосредственно.</span>
            <span class="sxs-lookup">
              <span data-stu-id="25e1c-196">A change monitor must not call the <see cref="M:System.Runtime.Caching.ChangeMonitor.Dispose(System.Boolean)" /> overload directly.</span>
            </span>
            <span data-ttu-id="25e1c-197">Монитор производном изменений можно вызывать открытые без параметров <see cref="M:System.Runtime.Caching.ChangeMonitor.Dispose" /> метод в базовом <see cref="T:System.Runtime.Caching.ChangeMonitor" /> класса.</span>
            <span class="sxs-lookup">
              <span data-stu-id="25e1c-197">A derived change monitor can call the public parameter-less <see cref="M:System.Runtime.Caching.ChangeMonitor.Dispose" /> method on the base <see cref="T:System.Runtime.Caching.ChangeMonitor" /> class.</span>
            </span>
            <span data-ttu-id="25e1c-198">Кроме того монитор изменений может реализовать метод завершения.</span>
            <span class="sxs-lookup">
              <span data-stu-id="25e1c-198">Alternatively, a change monitor can implement a finalizer method.</span>
            </span>
            <span data-ttu-id="25e1c-199">В этом случае можно вызвать метод завершения <see cref="M:System.Runtime.Caching.ChangeMonitor.Dispose(System.Boolean)" /> метод и передать его <paramref name="disposing" /> значение <see langword="false" />.</span>
            <span class="sxs-lookup">
              <span data-stu-id="25e1c-199">In that case, the finalizer can invoke the <see cref="M:System.Runtime.Caching.ChangeMonitor.Dispose(System.Boolean)" /> method and pass it a <paramref name="disposing" /> value of <see langword="false" />.</span>
            </span>
            <span data-ttu-id="25e1c-200">Тем не менее это обычно нет необходимости.</span>
            <span class="sxs-lookup">
              <span data-stu-id="25e1c-200">However, this is usually unnecessary.</span>
            </span>
            <span data-ttu-id="25e1c-201">Мониторинг изменений зависимостей обычно выполняется службой, которая содержит ссылку на экземпляр монитора изменений.</span>
            <span class="sxs-lookup">
              <span data-stu-id="25e1c-201">Monitoring for dependency changes is typically performed by a service that maintains a reference to the change-monitor instance.</span>
            </span>
            <span data-ttu-id="25e1c-202">Ссылка защищает экземпляр от сборщика мусора и таким образом делает метод завершения ненужные.</span>
            <span class="sxs-lookup">
              <span data-stu-id="25e1c-202">The reference prevents the instance from being garbage collected, and therefore makes a finalizer method unnecessary.</span>
            </span>
            <span data-ttu-id="25e1c-203">Во избежание утечки памяти при изменении зависимость, <see cref="M:System.Runtime.Caching.ChangeMonitor.OnChanged(System.Object)" /> метод удаляет экземпляр монитора изменений (если только не закончил инициализацию).</span>
            <span class="sxs-lookup">
              <span data-stu-id="25e1c-203">To avoid memory leaks, when a dependency changes, the <see cref="M:System.Runtime.Caching.ChangeMonitor.OnChanged(System.Object)" /> method disposes the change-monitor instance (unless initialization has not finished).</span>
            </span>
          </para>
        </block>
      </Docs>
    </Member>
    <Member MemberName="HasChanged">
      <MemberSignature Language="C#" Value="public bool HasChanged { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool HasChanged" />
      <MemberSignature Language="DocId" Value="P:System.Runtime.Caching.ChangeMonitor.HasChanged" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property HasChanged As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool HasChanged { bool get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Caching</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="25e1c-204">Получает значение, указывающее, что состояние, отслеживаемое классом <see cref="T:System.Runtime.Caching.ChangeMonitor" />, изменилось.</span>
          <span class="sxs-lookup">
            <span data-stu-id="25e1c-204">Gets a value that indicates that the state that is monitored by the <see cref="T:System.Runtime.Caching.ChangeMonitor" /> class has changed.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="25e1c-205">Значение <see langword="true" />, если состояние отслеживаемое экземпляром <see cref="T:System.Runtime.Caching.ChangeMonitor" />, изменилось; в противном случае — значение <see langword="false" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="25e1c-205">
              <see langword="true" /> if the state that is monitored by the <see cref="T:System.Runtime.Caching.ChangeMonitor" /> instance has changed; otherwise, <see langword="false" />.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="25e1c-206">Можно проверить значение этого свойства в производном <xref:System.Runtime.Caching.ChangeMonitor> класс, чтобы изменился ли зависимости.</span><span class="sxs-lookup"><span data-stu-id="25e1c-206">You can check the value of this property in a derived <xref:System.Runtime.Caching.ChangeMonitor> class to see whether a dependency has changed.</span></span>  
  
 <span data-ttu-id="25e1c-207">Имеет значение `true` при изменении зависимостей (то есть, когда <xref:System.Runtime.Caching.ChangeMonitor.OnChanged%2A> вызывается метод).</span><span class="sxs-lookup"><span data-stu-id="25e1c-207">The value is set to `true` when a dependency change occurs (that is, when the <xref:System.Runtime.Caching.ChangeMonitor.OnChanged%2A> method is called).</span></span> <span data-ttu-id="25e1c-208">После <xref:System.Runtime.Caching.ChangeMonitor.OnChanged%2A> метод вызывается из производного класса, значение <xref:System.Runtime.Caching.ChangeMonitor.HasChanged%2A> свойство будет `true`независимо от того, следует ли <xref:System.Runtime.Caching.OnChangedCallback> экземпляр получила уведомление с помощью вызова <xref:System.Runtime.Caching.ChangeMonitor.NotifyOnChanged%2A> метод.</span><span class="sxs-lookup"><span data-stu-id="25e1c-208">After the <xref:System.Runtime.Caching.ChangeMonitor.OnChanged%2A> method is called by the derived class, the value of the <xref:System.Runtime.Caching.ChangeMonitor.HasChanged%2A> property will be `true`, regardless of whether a <xref:System.Runtime.Caching.OnChangedCallback> instance has been notified by a call to the <xref:System.Runtime.Caching.ChangeMonitor.NotifyOnChanged%2A> method.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="25e1c-209">Можно проверить, вызывающие объекты <xref:System.Runtime.Caching.ChangeMonitor.HasChanged%2A> свойство, чтобы узнать, изменился ли зависимости.</span><span class="sxs-lookup"><span data-stu-id="25e1c-209">Callers can check the <xref:System.Runtime.Caching.ChangeMonitor.HasChanged%2A> property to see whether a dependency has changed.</span></span> <span data-ttu-id="25e1c-210">Однако в многопоточной среде, проще и более простого в сопровождении подход является вставка данных в реализации кэша без проверки <xref:System.Runtime.Caching.ChangeMonitor.HasChanged%2A> свойство.</span><span class="sxs-lookup"><span data-stu-id="25e1c-210">However, in a multi-threaded environment, a simpler and more maintainable approach is to insert data into a cache implementation without checking the <xref:System.Runtime.Caching.ChangeMonitor.HasChanged%2A> property.</span></span> <span data-ttu-id="25e1c-211">Необходимо проверить реализации кэша <xref:System.Runtime.Caching.ChangeMonitor.HasChanged%2A> свойство для вас и не должно выполнять инструкции insert или операции задания, если один или несколько связанные зависимости уже были изменены.</span><span class="sxs-lookup"><span data-stu-id="25e1c-211">Cache implementations must check the <xref:System.Runtime.Caching.ChangeMonitor.HasChanged%2A> property for you and must not perform an insert or set operation if one or more associated dependencies have already changed.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Runtime.Caching.ChangeMonitor.NotifyOnChanged(System.Runtime.Caching.OnChangedCallback)" />
        <altmember cref="M:System.Runtime.Caching.ChangeMonitor.OnChanged(System.Object)" />
      </Docs>
    </Member>
    <Member MemberName="InitializationComplete">
      <MemberSignature Language="C#" Value="protected void InitializationComplete ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig instance void InitializationComplete() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.Caching.ChangeMonitor.InitializationComplete" />
      <MemberSignature Language="VB.NET" Value="Protected Sub InitializationComplete ()" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; void InitializationComplete();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Caching</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="25e1c-212">Вызывается из конструктора производных классов и указывает на завершение инициализации.</span>
          <span class="sxs-lookup">
            <span data-stu-id="25e1c-212">Called from the constructor of derived classes to indicate that initialization is finished.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="25e1c-213">В случае изменения зависимостей до завершения в производном классе инициализации, необходимо вызвать конструктор производного класса <xref:System.Runtime.Caching.ChangeMonitor.OnChanged%2A> метод.</span><span class="sxs-lookup"><span data-stu-id="25e1c-213">If a dependency changes before initialization is complete in a derived class, the constructor of the derived class must invoke the <xref:System.Runtime.Caching.ChangeMonitor.OnChanged%2A> method.</span></span>  
  
 <span data-ttu-id="25e1c-214">Когда <xref:System.Runtime.Caching.ChangeMonitor.OnChanged%2A> вызывается метод, <xref:System.Runtime.Caching.ChangeMonitor.HasChanged%2A> автоматически присваивается свойству `true` монитор изменений.</span><span class="sxs-lookup"><span data-stu-id="25e1c-214">When the <xref:System.Runtime.Caching.ChangeMonitor.OnChanged%2A> method is invoked, the <xref:System.Runtime.Caching.ChangeMonitor.HasChanged%2A> property is automatically set to `true` by the change monitor.</span></span> <span data-ttu-id="25e1c-215">В результате, когда монитор изменений конструктор вызывает метод <xref:System.Runtime.Caching.ChangeMonitor.InitializationComplete%2A> метода базового класса будет автоматически вызывать <xref:System.Runtime.Caching.ChangeMonitor.Dispose%2A> метод.</span><span class="sxs-lookup"><span data-stu-id="25e1c-215">As a result, when the change monitor's constructor calls the <xref:System.Runtime.Caching.ChangeMonitor.InitializationComplete%2A> method, the base class will automatically call the <xref:System.Runtime.Caching.ChangeMonitor.Dispose%2A> method.</span></span> <span data-ttu-id="25e1c-216">При завершении инициализации <xref:System.Runtime.Caching.ChangeMonitor.OnChanged%2A> метод автоматически удаляет экземпляр производного монитора изменения.</span><span class="sxs-lookup"><span data-stu-id="25e1c-216">If initialization is complete, the <xref:System.Runtime.Caching.ChangeMonitor.OnChanged%2A> method automatically disposes the derived change-monitor instance.</span></span>  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides">
          <para>
            <span data-ttu-id="25e1c-217">Конструктор производного класса необходимо вызвать базовый <see cref="M:System.Runtime.Caching.ChangeMonitor.InitializationComplete" /> метода до завершения работы конструктор возвращает.</span>
            <span class="sxs-lookup">
              <span data-stu-id="25e1c-217">The constructor of a derived class must call the base <see cref="M:System.Runtime.Caching.ChangeMonitor.InitializationComplete" /> method before the constructor returns.</span>
            </span>
            <span data-ttu-id="25e1c-218">Конструктор производного класса может вызвать <see cref="M:System.Runtime.Caching.ChangeMonitor.Dispose" /> метод только после <see cref="M:System.Runtime.Caching.ChangeMonitor.InitializationComplete" /> вызывается, потому что <see cref="M:System.Runtime.Caching.ChangeMonitor.Dispose" /> метод вызывает исключение, если инициализация не завершена.</span>
            <span class="sxs-lookup">
              <span data-stu-id="25e1c-218">The constructor of a derived class can call the <see cref="M:System.Runtime.Caching.ChangeMonitor.Dispose" /> method only after <see cref="M:System.Runtime.Caching.ChangeMonitor.InitializationComplete" /> is called, because the <see cref="M:System.Runtime.Caching.ChangeMonitor.Dispose" /> method throws an exception if initialization is not completed.</span>
            </span>
          </para>
        </block>
      </Docs>
    </Member>
    <Member MemberName="IsDisposed">
      <MemberSignature Language="C#" Value="public bool IsDisposed { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsDisposed" />
      <MemberSignature Language="DocId" Value="P:System.Runtime.Caching.ChangeMonitor.IsDisposed" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsDisposed As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsDisposed { bool get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Caching</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="25e1c-219">Получает значение, указывающее, что производный экземпляр класса <see cref="T:System.Runtime.Caching.ChangeMonitor" /> удален.</span>
          <span class="sxs-lookup">
            <span data-stu-id="25e1c-219">Gets a value that indicates that the derived instance of a <see cref="T:System.Runtime.Caching.ChangeMonitor" /> class is disposed.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="25e1c-220">Значение <see langword="true" />, если экземпляр удален; в противном случае — значение <see langword="false" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="25e1c-220">
              <see langword="true" /> if the instance is disposed; otherwise, <see langword="false" />.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="25e1c-221">Свойство имеет значение `true` после определения базовой <xref:System.Runtime.Caching.ChangeMonitor.Dispose%2A> вызовы метода <xref:System.Runtime.Caching.ChangeMonitor.Dispose%2A> метод в производном классе для удаления экземпляра.</span><span class="sxs-lookup"><span data-stu-id="25e1c-221">The property is set to `true` after the base <xref:System.Runtime.Caching.ChangeMonitor.Dispose%2A> method calls the <xref:System.Runtime.Caching.ChangeMonitor.Dispose%2A> method in a derived class to dispose of the instance.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="NotifyOnChanged">
      <MemberSignature Language="C#" Value="public void NotifyOnChanged (System.Runtime.Caching.OnChangedCallback onChangedCallback);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void NotifyOnChanged(class System.Runtime.Caching.OnChangedCallback onChangedCallback) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.Caching.ChangeMonitor.NotifyOnChanged(System.Runtime.Caching.OnChangedCallback)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void NotifyOnChanged(System::Runtime::Caching::OnChangedCallback ^ onChangedCallback);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Caching</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="onChangedCallback" Type="System.Runtime.Caching.OnChangedCallback" />
      </Parameters>
      <Docs>
        <param name="onChangedCallback">
          <span data-ttu-id="25e1c-222">Ссылка на метод, вызываемый при изменении зависимости.</span>
          <span class="sxs-lookup">
            <span data-stu-id="25e1c-222">A reference to a method that is invoked when a dependency has changed.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="25e1c-223">Вызывается средствами реализации кэша для регистрации обратного вызова и уведомления экземпляра <see cref="T:System.Runtime.Caching.ObjectCache" /> об изменении зависимости с использованием делегата <see cref="T:System.Runtime.Caching.OnChangedCallback" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="25e1c-223">Called by Cache implementers to register a callback and notify an <see cref="T:System.Runtime.Caching.ObjectCache" /> instance through the <see cref="T:System.Runtime.Caching.OnChangedCallback" /> delegate when a dependency has changed.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="25e1c-224">Этот метод использовать реализациях кэша для привязки к монитору изменений.</span><span class="sxs-lookup"><span data-stu-id="25e1c-224">Cache implementers use this method to wire themselves up to a change monitor.</span></span> <span data-ttu-id="25e1c-225">Если связать один или несколько мониторов изменений с элементом кэша, то можно передать <xref:System.Runtime.Caching.CacheItemPolicy> экземпляр с заполненным свойством мониторов изменений с элементом кэша.</span><span class="sxs-lookup"><span data-stu-id="25e1c-225">If you associate one or more change monitors with the cache item, you pass a <xref:System.Runtime.Caching.CacheItemPolicy> instance with a populated change monitors property to the cache item.</span></span> <span data-ttu-id="25e1c-226">Реализация кэша мониторов изменений поддерживает отвечает за итерацию <xref:System.Runtime.Caching.CacheItemPolicy.ChangeMonitors%2A> свойство и регистр <xref:System.Runtime.Caching.OnChangedCallback> делегатов с каждым изменения монитора, которые найдет.</span><span class="sxs-lookup"><span data-stu-id="25e1c-226">A cache implementer that supports change monitors is responsible for iterating over the <xref:System.Runtime.Caching.CacheItemPolicy.ChangeMonitors%2A> property and register the <xref:System.Runtime.Caching.OnChangedCallback> delegates with each change monitor that it finds.</span></span>  
  
 <span data-ttu-id="25e1c-227">Поскольку <xref:System.Runtime.Caching.OnChangedCallback> делегат включает необязательный параметр состояния, конкретная реализация монитора изменений может передать необязательную информацию о состоянии.</span><span class="sxs-lookup"><span data-stu-id="25e1c-227">Because the <xref:System.Runtime.Caching.OnChangedCallback> delegate includes an optional state parameter, a concrete change monitor implementation can pass optional state information.</span></span> <span data-ttu-id="25e1c-228">Реализатор кэша определяет, могут быть предприняты явная зависимость типа состояния, который передает настраиваемый монитор изменений как часть обратного вызова.</span><span class="sxs-lookup"><span data-stu-id="25e1c-228">The cache implementer determines whether an explicit dependency on the type of state that a custom change monitor passes as part of the callback can be taken.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="25e1c-229">API расширяемости базовый кэша не имеет требования явной зависимости типа состояния.</span><span class="sxs-lookup"><span data-stu-id="25e1c-229">The base cache extensibility API has no requirement for explicit dependency on the type of state.</span></span>  
  
 <span data-ttu-id="25e1c-230">Реализация <xref:System.Runtime.Caching.ChangeMonitor.NotifyOnChanged%2A> метод автоматически определяет, является ли состояние монитора уже изменен во время <xref:System.Runtime.Caching.ChangeMonitor.NotifyOnChanged%2A> вызывается метод.</span><span class="sxs-lookup"><span data-stu-id="25e1c-230">The implementation of the <xref:System.Runtime.Caching.ChangeMonitor.NotifyOnChanged%2A> method automatically determines whether the state of the monitor has already changed at the time <xref:System.Runtime.Caching.ChangeMonitor.NotifyOnChanged%2A> method is called.</span></span> <span data-ttu-id="25e1c-231">Если <xref:System.Runtime.Caching.ChangeMonitor.HasChanged%2A> свойство `true`, а затем автоматически вызывает метод <xref:System.Runtime.Caching.OnChangedCallback> обработчик событий, который был зарегистрирован, с использованием <xref:System.Runtime.Caching.ChangeMonitor.OnChanged%2A> метод.</span><span class="sxs-lookup"><span data-stu-id="25e1c-231">If the <xref:System.Runtime.Caching.ChangeMonitor.HasChanged%2A> property is `true`, then the method automatically calls the <xref:System.Runtime.Caching.OnChangedCallback> event handler, that was registered, through the <xref:System.Runtime.Caching.ChangeMonitor.OnChanged%2A> method.</span></span> <span data-ttu-id="25e1c-232">Это происходит потому, что это возможно, с момента реализации кэша создает монитор изменений, во время реализации кэша возвращает монитора и связывает сам вплоть до его базового отслеживаемых состояние изменилось.</span><span class="sxs-lookup"><span data-stu-id="25e1c-232">This occurs because it is possible that from the time a cache implementation creates a change monitor, to the time a cache implementation gets the monitor and wires itself up to it, the underlying monitored state has changed.</span></span> <span data-ttu-id="25e1c-233">Если уже изменилось состояние выберите объект, который передается <xref:System.Runtime.Caching.ChangeMonitor.OnChanged%2A> метод `null`.</span><span class="sxs-lookup"><span data-stu-id="25e1c-233">If the state has already changed then the object that is passed to the <xref:System.Runtime.Caching.ChangeMonitor.OnChanged%2A> method is `null`.</span></span>  
  
 <span data-ttu-id="25e1c-234"><xref:System.Runtime.Caching.ChangeMonitor.NotifyOnChanged%2A> Метод может вызываться только один раз и возникает исключение при последующих вызовах.</span><span class="sxs-lookup"><span data-stu-id="25e1c-234">The <xref:System.Runtime.Caching.ChangeMonitor.NotifyOnChanged%2A> method can be invoked only one time, and will throw an exception on subsequent calls.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">
          <span data-ttu-id="25e1c-235">Метод обратного вызова уже вызван.</span>
          <span class="sxs-lookup">
            <span data-stu-id="25e1c-235">The callback method has already been invoked.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="25e1c-236">Свойство <paramref name="onChangedCallback" /> имеет значение <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="25e1c-236">
              <paramref name="onChangedCallback" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <block subset="none" type="overrides">
          <para>1.  <span data-ttu-id="25e1c-237">Необходимо вызвать метод <see cref="M:System.Runtime.Caching.ChangeMonitor.NotifyOnChanged(System.Runtime.Caching.OnChangedCallback)" /> метод, чтобы получать уведомления о любых изменениях зависимостей.</span><span class="sxs-lookup"><span data-stu-id="25e1c-237">You must call the <see cref="M:System.Runtime.Caching.ChangeMonitor.NotifyOnChanged(System.Runtime.Caching.OnChangedCallback)" /> method to be notified of any dependency changes.</span></span><span data-ttu-id="25e1c-238">Если уже произошло изменение зависимостей, <see cref="T:System.Runtime.Caching.OnChangedCallback" /> экземпляр будет вызываться при <see cref="M:System.Runtime.Caching.ChangeMonitor.NotifyOnChanged(System.Runtime.Caching.OnChangedCallback)" /> вызывается.</span><span class="sxs-lookup"><span data-stu-id="25e1c-238">If a dependency change has already occurred, the <see cref="T:System.Runtime.Caching.OnChangedCallback" /> instance will be called when <see cref="M:System.Runtime.Caching.ChangeMonitor.NotifyOnChanged(System.Runtime.Caching.OnChangedCallback)" /> is called.</span></span><span data-ttu-id="25e1c-239">В противном случае <see cref="T:System.Runtime.Caching.OnChangedCallback" /> экземпляр будет вызван один раз либо если <see cref="M:System.Runtime.Caching.ChangeMonitor.OnChanged(System.Object)" /> вызове метода или при <see cref="M:System.Runtime.Caching.ChangeMonitor.Dispose" /> вызывается метод, какое событие происходит раньше.</span><span class="sxs-lookup"><span data-stu-id="25e1c-239">Otherwise, the <see cref="T:System.Runtime.Caching.OnChangedCallback" /> instance will be called one time, either when the <see cref="M:System.Runtime.Caching.ChangeMonitor.OnChanged(System.Object)" /> method is called or when the <see cref="M:System.Runtime.Caching.ChangeMonitor.Dispose" /> method is called, whichever occurs first.</span></span><span data-ttu-id="25e1c-240"><see cref="T:System.Runtime.Caching.OnChangedCallback" /> Экземпляр реализации кэша следует удалить запись кэша и если она запрошена вызывающим кэша, событие необходимые изменения или события обновления обратно в исходный вызывающий объект кэша.</span><span class="sxs-lookup"><span data-stu-id="25e1c-240">The <see cref="T:System.Runtime.Caching.OnChangedCallback" /> instance provided by the cache implementation should remove the cache entry and if it is requested by the cache caller, raise the necessary change or update event back to the original cache caller.</span></span>  
  
2.  <span data-ttu-id="25e1c-241">Реализация кэша объектов необходимо удалить запись кэша, связанную с изменением зависимостей.</span><span class="sxs-lookup"><span data-stu-id="25e1c-241">The object cache implementation must remove the cache entry that is associated with a dependency change.</span></span></para>
        </block>
        <altmember cref="M:System.Runtime.Caching.ChangeMonitor.OnChanged(System.Object)" />
      </Docs>
    </Member>
    <Member MemberName="OnChanged">
      <MemberSignature Language="C#" Value="protected void OnChanged (object state);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig instance void OnChanged(object state) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.Caching.ChangeMonitor.OnChanged(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Protected Sub OnChanged (state As Object)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; void OnChanged(System::Object ^ state);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Caching</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="state" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="state">
          <span data-ttu-id="25e1c-242">Данные для события изменения.</span>
          <span class="sxs-lookup">
            <span data-stu-id="25e1c-242">The data for the change event.</span>
          </span>
          <span data-ttu-id="25e1c-243">Это значение может быть равно <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="25e1c-243">This value can be <see langword="null" />.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="25e1c-244">Вызывается производными классами для создания события при изменении зависимости.</span>
          <span class="sxs-lookup">
            <span data-stu-id="25e1c-244">Called by derived classes to raise the event when a dependency changes.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="25e1c-245">Как правило <xref:System.Runtime.Caching.ChangeMonitor.OnChanged%2A> метод вызывается, когда происходят изменения зависимостей.</span><span class="sxs-lookup"><span data-stu-id="25e1c-245">Typically, the <xref:System.Runtime.Caching.ChangeMonitor.OnChanged%2A> method is called when dependency changes occur.</span></span> <span data-ttu-id="25e1c-246"><xref:System.Runtime.Caching.ChangeMonitor.OnChanged%2A> Экземпляр монитора изменений удален, однако реализации происходит только в том случае, если обратный вызов уже не был вызван метод также вызывается.</span><span class="sxs-lookup"><span data-stu-id="25e1c-246">The <xref:System.Runtime.Caching.ChangeMonitor.OnChanged%2A> method is also invoked when a change-monitor instance is disposed but the disposal occurs only if the callback has not already been invoked.</span></span>  
  
 <span data-ttu-id="25e1c-247">Если <xref:System.Runtime.Caching.ChangeMonitor.OnChanged%2A> метод вызывается перед <xref:System.Runtime.Caching.ChangeMonitor.NotifyOnChanged%2A> метод вызывается, данные о состоянии от вызова <xref:System.Runtime.Caching.ChangeMonitor.OnChanged%2A> метод сохраняется с помощью реализации кэша.</span><span class="sxs-lookup"><span data-stu-id="25e1c-247">If the <xref:System.Runtime.Caching.ChangeMonitor.OnChanged%2A> method is called before the <xref:System.Runtime.Caching.ChangeMonitor.NotifyOnChanged%2A> method is called, the state data from the call to the <xref:System.Runtime.Caching.ChangeMonitor.OnChanged%2A> method is saved by the cache implementation.</span></span> <span data-ttu-id="25e1c-248">Кроме того, обратный вызов, который <xref:System.Runtime.Caching.OnChangedCallback> сразу вызывается метод при <xref:System.Runtime.Caching.ChangeMonitor.NotifyOnChanged%2A> вызывается метод.</span><span class="sxs-lookup"><span data-stu-id="25e1c-248">Also, the callback to the <xref:System.Runtime.Caching.OnChangedCallback> method is invoked immediately when the <xref:System.Runtime.Caching.ChangeMonitor.NotifyOnChanged%2A> method is invoked.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="Overload:System.Runtime.Caching.ChangeMonitor.Dispose" />
        <altmember cref="M:System.Runtime.Caching.ChangeMonitor.NotifyOnChanged(System.Runtime.Caching.OnChangedCallback)" />
        <altmember cref="P:System.Runtime.Caching.ChangeMonitor.HasChanged" />
      </Docs>
    </Member>
    <Member MemberName="UniqueId">
      <MemberSignature Language="C#" Value="public abstract string UniqueId { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string UniqueId" />
      <MemberSignature Language="DocId" Value="P:System.Runtime.Caching.ChangeMonitor.UniqueId" />
      <MemberSignature Language="VB.NET" Value="Public MustOverride ReadOnly Property UniqueId As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; abstract property System::String ^ UniqueId { System::String ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Caching</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="25e1c-249">Получает значение, представляющее экземпляр класса <see cref="T:System.Runtime.Caching.ChangeMonitor" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="25e1c-249">Gets a value that represents the <see cref="T:System.Runtime.Caching.ChangeMonitor" /> class instance.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="25e1c-250">Идентификатор экземпляра монитора изменений.</span>
          <span class="sxs-lookup">
            <span data-stu-id="25e1c-250">The identifier for a change-monitor instance.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="25e1c-251"><xref:System.Runtime.Caching.ChangeMonitor.UniqueId%2A> Значение свойства обычно состоит из зависимостей имена вместе строковые данные, уникальным образом идентификаторы данных, который отслеживается с <xref:System.Runtime.Caching.ChangeMonitor> экземпляра.</span><span class="sxs-lookup"><span data-stu-id="25e1c-251">The <xref:System.Runtime.Caching.ChangeMonitor.UniqueId%2A> property value typically consists of dependency names combined string data that uniquely identifiers the data that is being monitored by a <xref:System.Runtime.Caching.ChangeMonitor> instance.</span></span> <span data-ttu-id="25e1c-252">Значение <xref:System.Runtime.Caching.ChangeMonitor.UniqueId%2A> свойство является строкой.</span><span class="sxs-lookup"><span data-stu-id="25e1c-252">The value of the <xref:System.Runtime.Caching.ChangeMonitor.UniqueId%2A> property is a string.</span></span> <span data-ttu-id="25e1c-253">Значение строки используется для назначения уникальный идентификатор <xref:System.Runtime.Caching.ChangeMonitor> экземпляра.</span><span class="sxs-lookup"><span data-stu-id="25e1c-253">The value of the string is used to assign the unique ID of the <xref:System.Runtime.Caching.ChangeMonitor> instance.</span></span>  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides">
          <para>
            <span data-ttu-id="25e1c-254">Путем переопределения свойства, можно определить пользовательскую реализацию для строкового значения свойства, чтобы назначить ему уникальный идентификатор.</span>
            <span class="sxs-lookup">
              <span data-stu-id="25e1c-254">By overriding the property, you can define a custom implementation for the string value of the property in order to assign it a unique ID.</span>
            </span>
          </para>
        </block>
        <block subset="none" type="overrides">
          <para>
            <span data-ttu-id="25e1c-255">В производных классах необходимо задать значение свойства в конструкторе.</span>
            <span class="sxs-lookup">
              <span data-stu-id="25e1c-255">In derived classes, you must set the value of the property in the constructor.</span>
            </span>
          </para>
        </block>
      </Docs>
    </Member>
  </Members>
</Type>