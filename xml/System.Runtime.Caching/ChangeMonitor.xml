<Type Name="ChangeMonitor" FullName="System.Runtime.Caching.ChangeMonitor">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="d7f673552db74d3ed1ff4f6fe8dcc10612167e5c" />
    <Meta Name="ms.sourcegitcommit" Value="d0bb31ec8354fa58c62c2a646057eec11d3e2150" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="ru-RU" />
    <Meta Name="ms.lasthandoff" Value="08/17/2018" />
    <Meta Name="ms.locfileid" Value="36542118" />
  </Metadata>
  <TypeSignature Language="C#" Value="public abstract class ChangeMonitor : IDisposable" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi abstract beforefieldinit ChangeMonitor extends System.Object implements class System.IDisposable" />
  <TypeSignature Language="DocId" Value="T:System.Runtime.Caching.ChangeMonitor" />
  <TypeSignature Language="VB.NET" Value="Public MustInherit Class ChangeMonitor&#xA;Implements IDisposable" />
  <TypeSignature Language="C++ CLI" Value="public ref class ChangeMonitor abstract : IDisposable" />
  <TypeSignature Language="F#" Value="type ChangeMonitor = class&#xA;    interface IDisposable" />
  <AssemblyInfo>
    <AssemblyName>System.Runtime.Caching</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>System.IDisposable</InterfaceName>
    </Interface>
  </Interfaces>
  <Docs>
    <summary>
      <span data-ttu-id="ded96-101">Предоставляет базовый класс производного пользовательского типа, отслеживающего изменения в состоянии данных, от которых зависит элемент кэша.</span>
      <span class="sxs-lookup">
        <span data-stu-id="ded96-101">Provides a base class for a derived custom type that monitors changes in the state of the data which a cache item depends on.</span>
      </span>
    </summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="ded96-102"><xref:System.Runtime.Caching.ChangeMonitor> Класс используется как базовый класс для классов производном монитора, которые предназначены специально для реализации конкретного кэша.</span><span class="sxs-lookup"><span data-stu-id="ded96-102">The <xref:System.Runtime.Caching.ChangeMonitor> class is used as the base class for derived monitor classes that are specialized for particular cache implementations.</span></span> <span data-ttu-id="ded96-103">Объект <xref:System.Runtime.Caching.ChangeMonitor> экземпляр отслеживает изменения в состояние данных, который зависит от элемента кэша.</span><span class="sxs-lookup"><span data-stu-id="ded96-103">A <xref:System.Runtime.Caching.ChangeMonitor> instance monitors changes in the state of data which a cache item depends on.</span></span> <span data-ttu-id="ded96-104">Например элемент может быть сущностью данных или файлов, кэшируются, содержимое.</span><span class="sxs-lookup"><span data-stu-id="ded96-104">For example, the item can be a file or data entity whose contents are cached.</span></span> <span data-ttu-id="ded96-105">При обновлении сущности данных или файлов необходимо также изменить связанную запись кэша.</span><span class="sxs-lookup"><span data-stu-id="ded96-105">If the file or data entity is updated, the associated cache entry must be changed also.</span></span> <span data-ttu-id="ded96-106">Общие элементы, которые могут контролироваться включают сущностей данных (например, поля базы данных, значения, строки или таблицы), другая запись кэша и файлы и атрибуты файла.</span><span class="sxs-lookup"><span data-stu-id="ded96-106">Common items that can be monitored include data entities (such as database fields, values, rows, or tables), another cache entry, and files and file attributes.</span></span>  
  
 <span data-ttu-id="ded96-107">Изменение зависимости — изменение в состоянии зависимости.</span><span class="sxs-lookup"><span data-stu-id="ded96-107">A dependency change is a change in the state of a dependency.</span></span> <span data-ttu-id="ded96-108">В обычной реализации кэша после <xref:System.Runtime.Caching.ChangeMonitor> экземпляр уведомляет о том, что изменилась зависимость кэша, кэш выполняет необходимое действие, например аннулирование вставленной записи кэша.</span><span class="sxs-lookup"><span data-stu-id="ded96-108">In a typical cache implementation, after a <xref:System.Runtime.Caching.ChangeMonitor> instance notifies the cache that a dependency has changed, the cache performs the required action, such as invalidating the inserted cache entry.</span></span>  
  
 <span data-ttu-id="ded96-109">Производные <xref:System.Runtime.Caching.ChangeMonitor> классы могут быть настроены для наблюдения за изменениями зависимостей для конкретных различных хранилищ данных.</span><span class="sxs-lookup"><span data-stu-id="ded96-109">Derived <xref:System.Runtime.Caching.ChangeMonitor> classes can be customized to monitor dependency changes for specific different data stores.</span></span> <span data-ttu-id="ded96-110">Например существуют реализации кэша для файловой системы, физической памяти или базы данных.</span><span class="sxs-lookup"><span data-stu-id="ded96-110">For example, there are cache implementations for a file system, physical memory, or a database.</span></span> <span data-ttu-id="ded96-111"><xref:System.Runtime.Caching.ChangeMonitor> Класс проверяет изменения, происходящие вне кэша и оповещает кэша, которые произошли изменения.</span><span class="sxs-lookup"><span data-stu-id="ded96-111">The <xref:System.Runtime.Caching.ChangeMonitor> class examines changes that occur outside the cache, and then alerts the cache that changes have occurred.</span></span>  
  
 <span data-ttu-id="ded96-112">[!INCLUDE[dnprdnshort](~/includes/dnprdnshort-md.md)] Включает следующие классы, производные от <xref:System.Runtime.Caching.ChangeMonitor> класса:</span><span class="sxs-lookup"><span data-stu-id="ded96-112">The [!INCLUDE[dnprdnshort](~/includes/dnprdnshort-md.md)] includes the following classes that derive from <xref:System.Runtime.Caching.ChangeMonitor> class:</span></span>  
  
-   <xref:System.Runtime.Caching.CacheEntryChangeMonitor>  
  
-   <xref:System.Runtime.Caching.FileChangeMonitor>  
  
-   <xref:System.Runtime.Caching.HostFileChangeMonitor>  
  
-   <xref:System.Runtime.Caching.SqlChangeMonitor>  
  
 <span data-ttu-id="ded96-113">Каждый из этих классов работает с различными типами зависимостей.</span><span class="sxs-lookup"><span data-stu-id="ded96-113">Each of these classes works with different types of dependencies.</span></span> <span data-ttu-id="ded96-114">Например, производном <xref:System.Runtime.Caching.FileChangeMonitor> класс отслеживает изменения в кэш для данных файловой системы (файлы и папки), который зависит от элемента кэша.</span><span class="sxs-lookup"><span data-stu-id="ded96-114">For example, the derived <xref:System.Runtime.Caching.FileChangeMonitor> class monitors changes to a cache for file system data (files and folders) that the cache item depends on.</span></span>  
  
 ]]></format>
    </remarks>
    <threadsafe>
      <span data-ttu-id="ded96-115">Данный тип потокобезопасен.</span>
      <span class="sxs-lookup">
        <span data-stu-id="ded96-115">This type is thread safe.</span>
      </span>
    </threadsafe>
    <block subset="none" type="overrides">
      <span data-ttu-id="ded96-116">
        <para>При создании пользовательской реализации кэша или производного типа, монитора изменений должно следовать определенным правилам. В следующем списке перечислены эти рекомендации. Дополнительные сведения см. в документации для отдельных методов или свойств.  -Конструктор производного класса необходимо задать <see cref="P:System.Runtime.Caching.ChangeMonitor.UniqueId" /> свойство, начать мониторинг, а также вызвать <see cref="M:System.Runtime.Caching.ChangeMonitor.InitializationComplete" /> метод перед возвращением метода. Если конструктор обнаруживает ошибку во время конструкции, а также необходимо иметь для освобождения ресурсов, конструктор может вызывать только <see cref="Overload:System.Runtime.Caching.ChangeMonitor.Dispose" /> перегружать после <see cref="M:System.Runtime.Caching.ChangeMonitor.InitializationComplete" /> вызывается метод, так как <see cref="Overload:System.Runtime.Caching.ChangeMonitor.Dispose" /> вызовет перегрузку <see cref="T:System.InvalidOperationException" /> исключение, если инициализация не завершена.  — Если внесения изменений в данных, который отслеживается до инициализации завершения, необходимо вызвать конструктор <see cref="M:System.Runtime.Caching.ChangeMonitor.OnChanged(System.Object)" /> метод перед вызовом <see cref="M:System.Runtime.Caching.ChangeMonitor.InitializationComplete" /> метод.  -После производный <see cref="T:System.Runtime.Caching.ChangeMonitor" /> создается экземпляр типа, необходимо вставить в пользовательский монитор <see cref="T:System.Runtime.Caching.ObjectCache" /> реализации. Или если вы закончили с помощью монитора изменений, вызовите <see cref="Overload:System.Runtime.Caching.ChangeMonitor.Dispose" /> метод.  -После <see cref="T:System.Runtime.Caching.ChangeMonitor" /> экземпляр вставляется в <see cref="T:System.Runtime.Caching.ObjectCache" /> реализации <see cref="T:System.Runtime.Caching.ObjectCache" /> экземпляра требуется, что монитор изменений будет удален. Даже в том случае, если курсор является недопустимым и приводит к возникновению исключения <see cref="T:System.Runtime.Caching.ObjectCache" /> реализация должна вызывать <see cref="Overload:System.Runtime.Caching.ChangeMonitor.Dispose" /> перегрузки.  -После вставки монитор производном изменений в кэше, <see cref="T:System.Runtime.Caching.ObjectCache" /> реализация должна вызывать <see cref="M:System.Runtime.Caching.ChangeMonitor.NotifyOnChanged(System.Runtime.Caching.OnChangedCallback)" />, передавая <see cref="T:System.Runtime.Caching.OnChangedCallback" /> объекта. <see cref="M:System.Runtime.Caching.ChangeMonitor.NotifyOnChanged(System.Runtime.Caching.OnChangedCallback)" /> Метод может вызываться только один раз. Если уже произошло изменение зависимостей, <see cref="T:System.Runtime.Caching.OnChangedCallback" /> экземпляра будет немедленно вызван при <see cref="M:System.Runtime.Caching.ChangeMonitor.NotifyOnChanged(System.Runtime.Caching.OnChangedCallback)" /> вызывается. В противном случае <see cref="T:System.Runtime.Caching.OnChangedCallback" /> экземпляра будет вызываться только один раз. Один раз вызов происходит либо при <see cref="M:System.Runtime.Caching.ChangeMonitor.OnChanged(System.Object)" /> вызывается метод, так как <see cref="T:System.Runtime.Caching.ChangeMonitor" /> экземпляр обнаружено изменение, или когда <see cref="M:System.Runtime.Caching.ChangeMonitor.Dispose" /> вызывается метод <see cref="T:System.Runtime.Caching.ChangeMonitor" />, что произойдет раньше.  - <see cref="T:System.Runtime.Caching.OnChangedCallback" /> Экземпляра, предоставляемый <see cref="T:System.Runtime.Caching.ObjectCache" /> реализации следует удалить связанную запись кэша и укажите причину, используя <see cref="F:System.Web.Caching.CacheItemRemovedReason.DependencyChanged" /> перечисления.  -A <see cref="T:System.Runtime.Caching.ChangeMonitor" /> экземпляра можно вызвать <see cref="M:System.Runtime.Caching.ChangeMonitor.OnChanged(System.Object)" /> метод либо перед реализацией кэша вызвал <see cref="M:System.Runtime.Caching.ChangeMonitor.NotifyOnChanged(System.Runtime.Caching.OnChangedCallback)" /> метод или после. Если <see cref="M:System.Runtime.Caching.ChangeMonitor.OnChanged(System.Object)" /> метод был вызван перед <see cref="M:System.Runtime.Caching.ChangeMonitor.NotifyOnChanged(System.Runtime.Caching.OnChangedCallback)" /> называется базой <see cref="T:System.Runtime.Caching.ChangeMonitor" /> реализации уведомит кэша, что это произошло и инициирует обратный вызов передается <see cref="M:System.Runtime.Caching.ChangeMonitor.NotifyOnChanged(System.Runtime.Caching.OnChangedCallback)" /> немедленно в том случае, когда <see cref="M:System.Runtime.Caching.ChangeMonitor.NotifyOnChanged(System.Runtime.Caching.OnChangedCallback)" /> вызывается. Любые данные о состоянии, передается <see cref="M:System.Runtime.Caching.ChangeMonitor.OnChanged(System.Object)" /> метод сохраняется монитор изменений, а впоследствии передается <see cref="M:System.Runtime.Caching.ChangeMonitor.NotifyOnChanged(System.Runtime.Caching.OnChangedCallback)" /> метод при <see cref="M:System.Runtime.Caching.ChangeMonitor.NotifyOnChanged(System.Runtime.Caching.OnChangedCallback)" /> вызывается метод.  — Монитор изменений необходимо реализовать <see cref="M:System.Runtime.Caching.ChangeMonitor.Dispose(System.Boolean)" /> метод. Дополнительные сведения см. в разделе <see cref="M:System.Runtime.Caching.ChangeMonitor.Dispose(System.Boolean)" /> документации по методу.  - <see cref="M:System.Runtime.Caching.ChangeMonitor.Dispose" /> Перегрузку метода должен вызываться для удаления <see cref="T:System.Runtime.Caching.ChangeMonitor" /> экземпляра. Ниже перечислены правила для вызова Dispose:-перед вставкой элемента в кэше, он отвечает за вызывающий объект для удаления <see cref="T:System.Runtime.Caching.ChangeMonitor" /> экземпляра.  — Один раз для элемента кэша и <see cref="T:System.Runtime.Caching.ChangeMonitor" /> экземпляры, связанные с ним, передаются в кэш, средство реализации кэша необходимо убедиться в том, что <see cref="Overload:System.Runtime.Caching.ChangeMonitor.Dispose" /> вызывается метод, даже если вставка завершается ошибкой.  -После элемента и связанный с ним <see cref="T:System.Runtime.Caching.ChangeMonitor" /> экземпляры передаются в кэш, вызывающий объект не должен удалить зависимость, так как при <see cref="Overload:System.Runtime.Caching.ChangeMonitor.Dispose" /> вызывается метод, вызов обрабатывается так, как если бы зависимость изменилась. В результате <see cref="M:System.Runtime.Caching.ChangeMonitor.OnChanged(System.Object)" /> автоматически вызывается метод.  -Учетом этих правил, <see cref="Overload:System.Runtime.Caching.ChangeMonitor.Dispose" /> метод должен вызываться в одном из следующих способов:-пользователей необходимо вызвать <see cref="M:System.Runtime.Caching.ChangeMonitor.Dispose" /> перегрузку метода, если они не вставки в кэш экземпляра производного монитора изменений.  — Если реализация пытается вставить экземпляра монитора изменений в кэше объектов, но Вставка завершается неудачно, реализация кэша отвечает за вызов метода <see cref="M:System.Runtime.Caching.ChangeMonitor.Dispose" /> перегрузки. При попытке вставки приводит к исключению, реализация кэша необходимо уничтожить все связанные зависимости.  — Если запись кэша удаляется, реализация кэша должна также удалить зависимости.  -Внутренней реализации <see cref="M:System.Runtime.Caching.ChangeMonitor.OnChanged(System.Object)" /> автоматически вызывает метод <see cref="Overload:System.Runtime.Caching.ChangeMonitor.Dispose" /> метод после он вызывает обратный вызов, который зарегистрирован при помощи <see cref="M:System.Runtime.Caching.ChangeMonitor.NotifyOnChanged(System.Runtime.Caching.OnChangedCallback)" />.  <block subset="none" type="note"><para> Этот автоматический вызов к методу dispose, во время запуска событий возникает только при инициализации <see cref="T:System.Runtime.Caching.ChangeMonitor" /> экземпляр ранее был завершен.  </para></block>  При вызове конструктора монитор производном изменений <see cref="M:System.Runtime.Caching.ChangeMonitor.InitializationComplete" /> метод, если состояние монитора изменений уже был изменен (то есть состояние, отслеживаемое уже измененные при конструктор был по-прежнему активен) то <see cref="M:System.Runtime.Caching.ChangeMonitor.InitializationComplete" /> будет метод автоматически удалите монитора изменений.  - <see cref="P:System.Runtime.Caching.ChangeMonitor.HasChanged" /> Свойству <see langword="true" /> после <see cref="M:System.Runtime.Caching.ChangeMonitor.OnChanged(System.Object)" /> экземпляром производного монитора изменений, независимо от того, вызывается метод <see cref="T:System.Runtime.Caching.OnChangedCallback" /> он задан с помощью вызова <see cref="M:System.Runtime.Caching.ChangeMonitor.NotifyOnChanged(System.Runtime.Caching.OnChangedCallback)" /> метод или нет.</para>
      </span>
      <span class="sxs-lookup">
        <span data-stu-id="ded96-116">
          <para>If you create a custom cache implementation or a derived change monitor type, you must follow certain guidelines. The following list summarizes these guidelines. For more information, see the documentation for individual methods or properties.  -   The constructor of a derived class must set the <see cref="P:System.Runtime.Caching.ChangeMonitor.UniqueId" /> property, begin monitoring, and call <see cref="M:System.Runtime.Caching.ChangeMonitor.InitializationComplete" /> method before the method returns. If a constructor encounters an error during constructions and must have to dispose of resources, the constructor can only call the <see cref="Overload:System.Runtime.Caching.ChangeMonitor.Dispose" /> overload after the <see cref="M:System.Runtime.Caching.ChangeMonitor.InitializationComplete" /> method is called because the <see cref="Overload:System.Runtime.Caching.ChangeMonitor.Dispose" /> overload will throw an <see cref="T:System.InvalidOperationException" /> exception if initialization is not completed.  -   If changes occur in the data that is being monitored before initialization is complete, the constructor must call the <see cref="M:System.Runtime.Caching.ChangeMonitor.OnChanged(System.Object)" /> method before calling the <see cref="M:System.Runtime.Caching.ChangeMonitor.InitializationComplete" /> method.  -   After a derived <see cref="T:System.Runtime.Caching.ChangeMonitor" /> type is instantiated, you must insert the monitor into a custom <see cref="T:System.Runtime.Caching.ObjectCache" /> implementation. Or if you are finished using the change monitor, call the <see cref="Overload:System.Runtime.Caching.ChangeMonitor.Dispose" /> method.  -   After a <see cref="T:System.Runtime.Caching.ChangeMonitor" /> instance is inserted into a <see cref="T:System.Runtime.Caching.ObjectCache" /> implementation, the <see cref="T:System.Runtime.Caching.ObjectCache" /> instance require that the change monitor is disposed. Even if the insertion is invalid and causes an exception, the <see cref="T:System.Runtime.Caching.ObjectCache" /> implementation must call the <see cref="Overload:System.Runtime.Caching.ChangeMonitor.Dispose" /> overload.  -   After a derived change monitor is inserted into a cache, the <see cref="T:System.Runtime.Caching.ObjectCache" /> implementation must call <see cref="M:System.Runtime.Caching.ChangeMonitor.NotifyOnChanged(System.Runtime.Caching.OnChangedCallback)" />, by passing a <see cref="T:System.Runtime.Caching.OnChangedCallback" /> object. The <see cref="M:System.Runtime.Caching.ChangeMonitor.NotifyOnChanged(System.Runtime.Caching.OnChangedCallback)" /> method can be called only one time. If a dependency change has already occurred, the <see cref="T:System.Runtime.Caching.OnChangedCallback" /> instance will be called immediately when <see cref="M:System.Runtime.Caching.ChangeMonitor.NotifyOnChanged(System.Runtime.Caching.OnChangedCallback)" /> is called. Otherwise, the <see cref="T:System.Runtime.Caching.OnChangedCallback" /> instance will be called only one time. This one time call occurs either when the <see cref="M:System.Runtime.Caching.ChangeMonitor.OnChanged(System.Object)" /> method is called because the <see cref="T:System.Runtime.Caching.ChangeMonitor" /> instance detected a change, or when the <see cref="M:System.Runtime.Caching.ChangeMonitor.Dispose" /> method is called on the <see cref="T:System.Runtime.Caching.ChangeMonitor" />, whichever occurs first.  -   The <see cref="T:System.Runtime.Caching.OnChangedCallback" /> instance that is provided by an <see cref="T:System.Runtime.Caching.ObjectCache" /> implementation should remove the associated cache entry and specify a reason by using the <see cref="F:System.Web.Caching.CacheItemRemovedReason.DependencyChanged" /> enumeration.  -   A <see cref="T:System.Runtime.Caching.ChangeMonitor" /> instance can call the <see cref="M:System.Runtime.Caching.ChangeMonitor.OnChanged(System.Object)" /> method either before a cache implementation has called <see cref="M:System.Runtime.Caching.ChangeMonitor.NotifyOnChanged(System.Runtime.Caching.OnChangedCallback)" /> method or after. If the <see cref="M:System.Runtime.Caching.ChangeMonitor.OnChanged(System.Object)" /> method is called before <see cref="M:System.Runtime.Caching.ChangeMonitor.NotifyOnChanged(System.Runtime.Caching.OnChangedCallback)" /> is called, the base <see cref="T:System.Runtime.Caching.ChangeMonitor" /> implementation will notify the cache that this has occurred and will trigger the callback to be passed to <see cref="M:System.Runtime.Caching.ChangeMonitor.NotifyOnChanged(System.Runtime.Caching.OnChangedCallback)" /> immediately when <see cref="M:System.Runtime.Caching.ChangeMonitor.NotifyOnChanged(System.Runtime.Caching.OnChangedCallback)" /> is invoked. Any state data that is passed to the <see cref="M:System.Runtime.Caching.ChangeMonitor.OnChanged(System.Object)" /> method is saved by the change monitor and subsequently passed to the <see cref="M:System.Runtime.Caching.ChangeMonitor.NotifyOnChanged(System.Runtime.Caching.OnChangedCallback)" /> method when the <see cref="M:System.Runtime.Caching.ChangeMonitor.NotifyOnChanged(System.Runtime.Caching.OnChangedCallback)" /> method is invoked.  -   A change monitor must implement the <see cref="M:System.Runtime.Caching.ChangeMonitor.Dispose(System.Boolean)" /> method. For more information, see the <see cref="M:System.Runtime.Caching.ChangeMonitor.Dispose(System.Boolean)" /> method documentation.  -   The <see cref="M:System.Runtime.Caching.ChangeMonitor.Dispose" /> method overload must be called to dispose of the <see cref="T:System.Runtime.Caching.ChangeMonitor" /> instance. The rules for calling Dispose are as follows:  -   Before an item is inserted into the cache, it is the responsibility of caller to dispose of a <see cref="T:System.Runtime.Caching.ChangeMonitor" /> instance.  -   Once cache item and the <see cref="T:System.Runtime.Caching.ChangeMonitor" /> instances that are associated with it are passed to a cache, the cache implementer must make sure that that the <see cref="Overload:System.Runtime.Caching.ChangeMonitor.Dispose" /> method is called, even if the insert fails.  -   After an item and its associated <see cref="T:System.Runtime.Caching.ChangeMonitor" /> instances are passed to a cache, the caller must not dispose the dependency because when the <see cref="Overload:System.Runtime.Caching.ChangeMonitor.Dispose" /> method is called, the call is treated as if the dependency has changed. As a result, the <see cref="M:System.Runtime.Caching.ChangeMonitor.OnChanged(System.Object)" /> method is automatically invoked.  -   Taking these rules into consideration, the <see cref="Overload:System.Runtime.Caching.ChangeMonitor.Dispose" /> method must be called in one of the following ways:  -   Users must call the <see cref="M:System.Runtime.Caching.ChangeMonitor.Dispose" /> method overload if they decide not to insert the derived change-monitor instance into a cache.  -   If the implementation tries to insert the change-monitor instance into an object cache but the insertion fails, the cache implementation is responsible for calling the <see cref="M:System.Runtime.Caching.ChangeMonitor.Dispose" /> overload. When the insertion attempt causes an exception, the cache implementation must dispose of any associated dependencies.  -   If the cache entry is removed, the cache implementation must also dispose of the dependency.  -   The internal implementation of the <see cref="M:System.Runtime.Caching.ChangeMonitor.OnChanged(System.Object)" /> method automatically calls the <see cref="Overload:System.Runtime.Caching.ChangeMonitor.Dispose" /> method after it calls a callback that is registered through <see cref="M:System.Runtime.Caching.ChangeMonitor.NotifyOnChanged(System.Runtime.Caching.OnChangedCallback)" />.  <block subset="none" type="note"><para> This automatic call to the dispose method during the event firing only occurs if the initialization of the <see cref="T:System.Runtime.Caching.ChangeMonitor" /> instance was previously completed.  </para></block>  When a derived change monitor's constructor calls the <see cref="M:System.Runtime.Caching.ChangeMonitor.InitializationComplete" /> method, if the state of the change monitor has already changed (that is, the state that is monitored already changed when the constructor was still active) then the <see cref="M:System.Runtime.Caching.ChangeMonitor.InitializationComplete" /> method will automatically dispose of the change monitor.  -   The <see cref="P:System.Runtime.Caching.ChangeMonitor.HasChanged" /> property is set to <see langword="true" /> after the <see cref="M:System.Runtime.Caching.ChangeMonitor.OnChanged(System.Object)" /> method is called by the derived change-monitor instance, regardless of whether a <see cref="T:System.Runtime.Caching.OnChangedCallback" /> object has been set by a call to the <see cref="M:System.Runtime.Caching.ChangeMonitor.NotifyOnChanged(System.Runtime.Caching.OnChangedCallback)" /> method or not.</para>
        </span>
      </span>
    </block>
    <altmember cref="N:System.Web.Caching" />
    <altmember cref="T:System.Runtime.Caching.ObjectCache" />
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="protected ChangeMonitor ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.Caching.ChangeMonitor.#ctor" />
      <MemberSignature Language="VB.NET" Value="Protected Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; ChangeMonitor();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Caching</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="ded96-117">Инициализирует новый экземпляр класса <see cref="T:System.Runtime.Caching.ChangeMonitor" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ded96-117">Initializes a new instance of the <see cref="T:System.Runtime.Caching.ChangeMonitor" /> class.</span>
          </span>
          <span data-ttu-id="ded96-118">Этот конструктор вызывается конструкторами в производных классах для инициализации базового класса.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ded96-118">This constructor is called from constructors in derived classes to initialize the base class.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="ded96-119"><xref:System.Runtime.Caching.ChangeMonitor> Класс имеет конструктор по умолчанию.</span><span class="sxs-lookup"><span data-stu-id="ded96-119">The <xref:System.Runtime.Caching.ChangeMonitor> class has a default constructor.</span></span> <span data-ttu-id="ded96-120">Тем не менее, наследуют от базового <xref:System.Runtime.Caching.ChangeMonitor> класса и определение пользовательского отслеживания изменений поведения, должны выполнять инициализацию в конструкторе.</span><span class="sxs-lookup"><span data-stu-id="ded96-120">However, classes that inherit from the base <xref:System.Runtime.Caching.ChangeMonitor> class and define custom change-monitoring behavior must perform initialization in the constructor.</span></span> <span data-ttu-id="ded96-121">Дополнительные сведения см. примечания для разработчиков производных классов раздела.</span><span class="sxs-lookup"><span data-stu-id="ded96-121">For more information, see the Notes for Inheritors section.</span></span>  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides">
          <span data-ttu-id="ded96-122">
            <para>Конструктор производного класса необходимо задать <see cref="P:System.Runtime.Caching.ChangeMonitor.UniqueId" /> свойство, начать мониторинг, а также вызвать <see cref="M:System.Runtime.Caching.ChangeMonitor.InitializationComplete" /> класса перед возвращением. При изменении зависимости до инициализации завершен (например, если ключ зависимые кэша не найден в кэше), необходимо вызвать конструктор <see cref="M:System.Runtime.Caching.ChangeMonitor.OnChanged(System.Object)" /> метод перед вызовом <see cref="M:System.Runtime.Caching.ChangeMonitor.InitializationComplete" /> метод. В этом случае можно вызвать конструктор <see cref="M:System.Runtime.Caching.ChangeMonitor.Dispose" /> метод только после того, как <see cref="M:System.Runtime.Caching.ChangeMonitor.InitializationComplete" /> вызывается метод, так как <see cref="M:System.Runtime.Caching.ChangeMonitor.Dispose" /> метод вызывает исключение, если инициализация не завершена.</para>
          </span>
          <span class="sxs-lookup">
            <span data-stu-id="ded96-122">
              <para>The constructor of a derived class must set the <see cref="P:System.Runtime.Caching.ChangeMonitor.UniqueId" /> property, begin monitoring, and call the <see cref="M:System.Runtime.Caching.ChangeMonitor.InitializationComplete" /> class before it returns. If a dependency changes before initialization is complete (for example, if a dependent cache key is not found in the cache), the constructor must call the <see cref="M:System.Runtime.Caching.ChangeMonitor.OnChanged(System.Object)" /> method before it calls the <see cref="M:System.Runtime.Caching.ChangeMonitor.InitializationComplete" /> method. In this case, constructor can call the <see cref="M:System.Runtime.Caching.ChangeMonitor.Dispose" /> method only after the <see cref="M:System.Runtime.Caching.ChangeMonitor.InitializationComplete" /> method is called, because the <see cref="M:System.Runtime.Caching.ChangeMonitor.Dispose" /> method throws an exception if initialization is not completed.</para>
            </span>
          </span>
        </block>
      </Docs>
    </Member>
    <MemberGroup MemberName="Dispose">
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Caching</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="ded96-123">Освобождает все ресурсы, используемые текущим экземпляром класса <see cref="T:System.Runtime.Caching.ChangeMonitor" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ded96-123">Releases all resources used by the current instance of the <see cref="T:System.Runtime.Caching.ChangeMonitor" /> class.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="ded96-124"><xref:System.Runtime.Caching.ChangeMonitor.Dispose%2A> Метод используется для освобождения <xref:System.Runtime.Caching.ChangeMonitor> экземпляра и связанных ресурсов.</span><span class="sxs-lookup"><span data-stu-id="ded96-124">The <xref:System.Runtime.Caching.ChangeMonitor.Dispose%2A> method is used to release the <xref:System.Runtime.Caching.ChangeMonitor> instance and related resources.</span></span> <span data-ttu-id="ded96-125">Открытый <xref:System.Runtime.Caching.ChangeMonitor.Dispose%2A> метод вызывается для координации процесса реализации с событиями жизненного цикла ключа монитора изменений производных классов (например, инициализация), а также для освобождения <xref:System.Runtime.Caching.ChangeMonitor> экземпляра, чтобы экземпляр мог быть удален сборщиком мусора.</span><span class="sxs-lookup"><span data-stu-id="ded96-125">The public <xref:System.Runtime.Caching.ChangeMonitor.Dispose%2A> method is invoked to coordinate the disposal process with key life-cycle events of derived change-monitor classes (such as initialization), and to release the <xref:System.Runtime.Caching.ChangeMonitor> instance so that the instance can be garbage collected.</span></span> <span data-ttu-id="ded96-126"><xref:System.Runtime.Caching.ChangeMonitor.Dispose%2A> Метод реализуется классами производного монитора изменения для реализации своих управляемых и неуправляемых ресурсов.</span><span class="sxs-lookup"><span data-stu-id="ded96-126">The <xref:System.Runtime.Caching.ChangeMonitor.Dispose%2A> method is implemented by derived change-monitor classes to dispose of their managed and unmanaged resources.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </MemberGroup>
    <Member MemberName="Dispose">
      <MemberSignature Language="C#" Value="public void Dispose ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Dispose() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.Caching.ChangeMonitor.Dispose" />
      <MemberSignature Language="VB.NET" Value="Public Sub Dispose ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void Dispose();" />
      <MemberSignature Language="F#" Value="abstract member Dispose : unit -&gt; unit&#xA;override this.Dispose : unit -&gt; unit" Usage="changeMonitor.Dispose " />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.IDisposable.Dispose</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Caching</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="ded96-127">Освобождает все ресурсы, используемые текущим экземпляром класса <see cref="T:System.Runtime.Caching.ChangeMonitor" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ded96-127">Releases all resources that are used by the current instance of the <see cref="T:System.Runtime.Caching.ChangeMonitor" /> class.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="ded96-128"><xref:System.Runtime.Caching.ChangeMonitor.Dispose%2A> Вызывает метод <xref:System.Runtime.Caching.ChangeMonitor.Dispose%2A> метода производного класса только один раз, при первом вызове.</span><span class="sxs-lookup"><span data-stu-id="ded96-128">The <xref:System.Runtime.Caching.ChangeMonitor.Dispose%2A> method invokes the <xref:System.Runtime.Caching.ChangeMonitor.Dispose%2A> method of derived classes only one time, the first time it is called.</span></span> <span data-ttu-id="ded96-129">Последующие вызовы <xref:System.Runtime.Caching.ChangeMonitor.Dispose%2A> метод не оказывают влияния.</span><span class="sxs-lookup"><span data-stu-id="ded96-129">Subsequent calls to the <xref:System.Runtime.Caching.ChangeMonitor.Dispose%2A> method have no effect.</span></span> <span data-ttu-id="ded96-130">После вызова метода <xref:System.Runtime.Caching.ChangeMonitor.IsDisposed%2A> свойству `true`.</span><span class="sxs-lookup"><span data-stu-id="ded96-130">After the method has been called, the <xref:System.Runtime.Caching.ChangeMonitor.IsDisposed%2A> property is set to `true`.</span></span>  
  
 <span data-ttu-id="ded96-131"><xref:System.Runtime.Caching.ChangeMonitor.Dispose%2A> Перегрузка должна вызываться для удаления <xref:System.Runtime.Caching.ChangeMonitor> экземпляра.</span><span class="sxs-lookup"><span data-stu-id="ded96-131">The <xref:System.Runtime.Caching.ChangeMonitor.Dispose%2A> overload must be called to dispose of a <xref:System.Runtime.Caching.ChangeMonitor> instance.</span></span> <span data-ttu-id="ded96-132">Ниже приведены правила для вызова метода dispose.</span><span class="sxs-lookup"><span data-stu-id="ded96-132">The following are the rules for calling the dispose method:</span></span>  
  
-   <span data-ttu-id="ded96-133">Перед вставкой элемента в кэше, он отвечает за вызывающего избавиться от <xref:System.Runtime.Caching.ChangeMonitor> экземпляра.</span><span class="sxs-lookup"><span data-stu-id="ded96-133">Before an item is inserted into the cache, it is the caller's responsibility to dispose of a <xref:System.Runtime.Caching.ChangeMonitor> instance.</span></span>  
  
-   <span data-ttu-id="ded96-134">Один раз для элемента кэша и <xref:System.Runtime.Caching.ChangeMonitor> экземпляры, связанные с ним передаются в кэш, реализующий объект кэша, который необходимо убедиться в том, <xref:System.Runtime.Caching.ChangeMonitor.Dispose%2A> вызывается, даже если вставка завершается ошибкой.</span><span class="sxs-lookup"><span data-stu-id="ded96-134">Once cache item and the <xref:System.Runtime.Caching.ChangeMonitor> instances that are associated with it are passed to a cache, the cache implementer that must make sure that <xref:System.Runtime.Caching.ChangeMonitor.Dispose%2A> is called, even if the insert fails.</span></span>  
  
-   <span data-ttu-id="ded96-135">После элемента и связанный с ним <xref:System.Runtime.Caching.ChangeMonitor> экземпляры передаются в кэш, вызывающий объект не должен удалить зависимость, так как при <xref:System.Runtime.Caching.ChangeMonitor.Dispose%2A> вызывается метод, вызов обрабатывается так, как если бы зависимость изменилась.</span><span class="sxs-lookup"><span data-stu-id="ded96-135">After an item and its associated <xref:System.Runtime.Caching.ChangeMonitor> instances are passed to a cache, the caller must not dispose the dependency because when the <xref:System.Runtime.Caching.ChangeMonitor.Dispose%2A> method is called, the call is treated as if the dependency has changed.</span></span> <span data-ttu-id="ded96-136">В результате <xref:System.Runtime.Caching.ChangeMonitor.OnChanged%2A> автоматически вызывается метод.</span><span class="sxs-lookup"><span data-stu-id="ded96-136">As a result, the <xref:System.Runtime.Caching.ChangeMonitor.OnChanged%2A> method is automatically invoked.</span></span>  
  
-   <span data-ttu-id="ded96-137">Учитывая эти правила, <xref:System.Runtime.Caching.ChangeMonitor.Dispose%2A> метод должен вызываться в одном из следующих способов:</span><span class="sxs-lookup"><span data-stu-id="ded96-137">Taking these rules into consideration, the <xref:System.Runtime.Caching.ChangeMonitor.Dispose%2A> method must be called in one of the following ways:</span></span>  
  
    -   <span data-ttu-id="ded96-138">Пользователям необходимо вызвать <xref:System.Runtime.Caching.ChangeMonitor.Dispose%2A> перегрузку метода, если они не вставки в кэш экземпляра производного монитора изменений.</span><span class="sxs-lookup"><span data-stu-id="ded96-138">Users must call the <xref:System.Runtime.Caching.ChangeMonitor.Dispose%2A> method overload if they decide not to insert the derived change-monitor instance into a cache.</span></span>  
  
    -   <span data-ttu-id="ded96-139">Реализация кэша отвечает за вызов метода <xref:System.Runtime.Caching.ChangeMonitor.Dispose%2A> перегружать, если реализация пытается вставить экземпляра монитора изменений в кэше объектов, но Вставка завершается неудачно.</span><span class="sxs-lookup"><span data-stu-id="ded96-139">The cache implementation is responsible for calling the <xref:System.Runtime.Caching.ChangeMonitor.Dispose%2A> overload if the implementation tries to insert the change-monitor instance into an object cache but the insertion fails.</span></span> <span data-ttu-id="ded96-140">При попытке вставки приводит к исключению, реализация кэша должна освободить все связанные зависимости.</span><span class="sxs-lookup"><span data-stu-id="ded96-140">When the insertion attempt causes an exception, the cache implementation must dispose any associated dependencies.</span></span>  
  
    -   <span data-ttu-id="ded96-141">Если запись кэша удаляется, реализация кэша должна также удалить зависимость.</span><span class="sxs-lookup"><span data-stu-id="ded96-141">If the cache entry is removed, the cache implementation must also dispose the dependency.</span></span>  
  
 <span data-ttu-id="ded96-142">Внутренняя реализация <xref:System.Runtime.Caching.ChangeMonitor.OnChanged%2A> автоматически вызывает метод <xref:System.Runtime.Caching.ChangeMonitor.Dispose%2A> метод после он вызывает обратный вызов, который зарегистрирован при помощи <xref:System.Runtime.Caching.ChangeMonitor.NotifyOnChanged%2A> метод.</span><span class="sxs-lookup"><span data-stu-id="ded96-142">The internal implementation of the <xref:System.Runtime.Caching.ChangeMonitor.OnChanged%2A> method automatically calls the <xref:System.Runtime.Caching.ChangeMonitor.Dispose%2A> method after it calls a callback that is registered through the <xref:System.Runtime.Caching.ChangeMonitor.NotifyOnChanged%2A> method.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="ded96-143">Это автоматическое dispose, во время запуска событий возникает только при инициализации <xref:System.Runtime.Caching.ChangeMonitor> экземпляра содержанием.</span><span class="sxs-lookup"><span data-stu-id="ded96-143">This automatic dispose during the event firing only occurs if the initialization of the <xref:System.Runtime.Caching.ChangeMonitor> instance previously completed.</span></span>  
  
 <span data-ttu-id="ded96-144">При вызове конструктора монитор производном изменений <xref:System.Runtime.Caching.ChangeMonitor.InitializationComplete%2A> метод, если состояние монитора изменений уже был изменен (то есть состояние, которое отслеживается уже изменен при конструктор был по-прежнему активен) затем <xref:System.Runtime.Caching.ChangeMonitor.InitializationComplete%2A> будет метод автоматически dispose монитора изменений.</span><span class="sxs-lookup"><span data-stu-id="ded96-144">When a derived change monitor's constructor calls the <xref:System.Runtime.Caching.ChangeMonitor.InitializationComplete%2A> method, if the state of the change monitor has already changed (that is, the state that is monitored has already changed when the constructor was still active) then <xref:System.Runtime.Caching.ChangeMonitor.InitializationComplete%2A> method will automatically dispose the change monitor.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="ded96-145">Пользователям не следует вызывать <xref:System.Runtime.Caching.ChangeMonitor.Dispose%2A> метод.</span><span class="sxs-lookup"><span data-stu-id="ded96-145">Users should not call the <xref:System.Runtime.Caching.ChangeMonitor.Dispose%2A> method.</span></span> <span data-ttu-id="ded96-146">Тем не менее нельзя запретить пользователям в результате вызова метода.</span><span class="sxs-lookup"><span data-stu-id="ded96-146">However, you cannot prevent users from calling the method.</span></span> <span data-ttu-id="ded96-147">Таким образом, если это так, <xref:System.Runtime.Caching.ChangeMonitor.OnChanged%2A> вызывается метод.</span><span class="sxs-lookup"><span data-stu-id="ded96-147">Therefore, if they do, the <xref:System.Runtime.Caching.ChangeMonitor.OnChanged%2A> method is invoked.</span></span> <span data-ttu-id="ded96-148">В этом случае записи кэша уведомляется, как если бы зависимость изменилась.</span><span class="sxs-lookup"><span data-stu-id="ded96-148">In that case, the cache entry is notified as if the dependency has changed.</span></span>  
  
 <span data-ttu-id="ded96-149">Чтобы предотвратить переопределение производных классов <xref:System.Runtime.Caching.ChangeMonitor.Dispose%2A> метод, метод не является явной реализацией интерфейса.</span><span class="sxs-lookup"><span data-stu-id="ded96-149">To prevent derived classes from overriding <xref:System.Runtime.Caching.ChangeMonitor.Dispose%2A> method, the method is not an explicit interface implementation.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">
          <span data-ttu-id="ded96-150">Инициализация не завершена в производном классе монитора изменений, который вызвал базовый метод <see cref="M:System.Runtime.Caching.ChangeMonitor.Dispose" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ded96-150">Initialization is not complete in the derived change-monitor class that called the base <see cref="M:System.Runtime.Caching.ChangeMonitor.Dispose" /> method.</span>
          </span>
        </exception>
        <altmember cref="M:System.Runtime.Caching.ChangeMonitor.OnChanged(System.Object)" />
      </Docs>
    </Member>
    <Member MemberName="Dispose">
      <MemberSignature Language="C#" Value="protected abstract void Dispose (bool disposing);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void Dispose(bool disposing) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.Caching.ChangeMonitor.Dispose(System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Protected MustOverride Sub Dispose (disposing As Boolean)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; abstract void Dispose(bool disposing);" />
      <MemberSignature Language="F#" Value="abstract member Dispose : bool -&gt; unit" Usage="changeMonitor.Dispose disposing" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Caching</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="disposing" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="disposing">
          <span data-ttu-id="ded96-151">Значение <see langword="true" />, чтобы освободить управляемые и неуправляемые ресурсы и любые ссылки на экземпляр <see cref="T:System.Runtime.Caching.ChangeMonitor" />; значение <see langword="false" />, чтобы освободить только неуправляемые ресурсы.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ded96-151">
              <see langword="true" /> to release managed and unmanaged resources and any references to a <see cref="T:System.Runtime.Caching.ChangeMonitor" /> instance; <see langword="false" /> to release only unmanaged resources.</span>
          </span>
          <span data-ttu-id="ded96-152">Если передается значение <see langword="false" />, метод <see cref="M:System.Runtime.Caching.ChangeMonitor.Dispose(System.Boolean)" /> вызывается потоком <see langword="finalizer" />, а любые внешние управляемые ссылки в большинстве случаев становятся недействительными, так как они уже были очищены сборщиком мусора.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ded96-152">When <see langword="false" /> is passed, the <see cref="M:System.Runtime.Caching.ChangeMonitor.Dispose(System.Boolean)" /> method is called by a <see langword="finalizer" /> thread and any external managed references are likely no longer valid because they have already been garbage collected.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="ded96-153">Освобождает все управляемые и неуправляемые ресурсы и все ссылки на экземпляр <see cref="T:System.Runtime.Caching.ChangeMonitor" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ded96-153">Releases all managed and unmanaged resources and any references to the <see cref="T:System.Runtime.Caching.ChangeMonitor" /> instance.</span>
          </span>
          <span data-ttu-id="ded96-154">Эту перегрузку необходимо реализовывать в производных классах, контролирующих изменения.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ded96-154">This overload must be implemented by derived change-monitor classes.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="ded96-155">Если значение `disposing` значение `true`, удаляются все управляемые и неуправляемые ресурсы, а все ссылки на этот объект освобождается таким образом, чтобы экземпляр производного монитора изменений может быть удален сборщиком мусора.</span><span class="sxs-lookup"><span data-stu-id="ded96-155">When the value of `disposing` value is `true`, all managed and unmanaged resources are disposed and any references to this object are released so that the derived change-monitor instance can be garbage collected.</span></span> <span data-ttu-id="ded96-156">Гарантируется, что базовый <xref:System.Runtime.Caching.ChangeMonitor.Dispose%2A> метод будет вызывать реализованный интерфейс <xref:System.Runtime.Caching.ChangeMonitor.Dispose%2A> метод только один раз.</span><span class="sxs-lookup"><span data-stu-id="ded96-156">It is guaranteed that the base <xref:System.Runtime.Caching.ChangeMonitor.Dispose%2A> method will invoke the implemented <xref:System.Runtime.Caching.ChangeMonitor.Dispose%2A> method only one time.</span></span>  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides">
          <span data-ttu-id="ded96-157">
            <para>Монитор изменений необходимо реализовать <see cref="M:System.Runtime.Caching.ChangeMonitor.Dispose(System.Boolean)" /> перегрузки, чтобы освободить все управляемые и неуправляемые ресурсы при значение <paramref name="disposing" /> является <see langword="true" />. <see cref="M:System.Runtime.Caching.ChangeMonitor.Dispose(System.Boolean)" /> Перегрузки метода, который имеет <paramref name="disposing" /> значение <see langword="true" /> вызывается только один раз, а именно, при удалении экземпляра в первый раз. Монитор изменений не должны вызывать <see cref="M:System.Runtime.Caching.ChangeMonitor.Dispose(System.Boolean)" /> непосредственно перегрузить. Монитор производном изменений можно вызвать открытый без параметров <see cref="M:System.Runtime.Caching.ChangeMonitor.Dispose" /> метод в базовом <see cref="T:System.Runtime.Caching.ChangeMonitor" /> класса.  Кроме того монитор изменений можно реализовать в методе завершения. В этом случае можно вызвать метод завершения <see cref="M:System.Runtime.Caching.ChangeMonitor.Dispose(System.Boolean)" /> метод и передать его <paramref name="disposing" /> значение <see langword="false" />. Тем не менее это обычно не требуется. Мониторинг изменений зависимостей обычно выполняется службой, которая содержит ссылку на экземпляр монитора изменений. Ссылка не позволяет экземпляру сборщику мусора и таким образом делает метод завершения ненужные. Чтобы избежать утечки памяти, при изменении зависимости, <see cref="M:System.Runtime.Caching.ChangeMonitor.OnChanged(System.Object)" /> метод удаляет экземпляр монитора изменений (если инициализация не завершена).</para>
          </span>
          <span class="sxs-lookup">
            <span data-stu-id="ded96-157">
              <para>A change monitor must implement the <see cref="M:System.Runtime.Caching.ChangeMonitor.Dispose(System.Boolean)" /> overload to release all managed and unmanaged resources when the value of <paramref name="disposing" /> is <see langword="true" />. The <see cref="M:System.Runtime.Caching.ChangeMonitor.Dispose(System.Boolean)" /> method overload that has a <paramref name="disposing" /> value of <see langword="true" /> is called only one time, namely, when the instance is disposed for the first time. A change monitor must not call the <see cref="M:System.Runtime.Caching.ChangeMonitor.Dispose(System.Boolean)" /> overload directly. A derived change monitor can call the public parameter-less <see cref="M:System.Runtime.Caching.ChangeMonitor.Dispose" /> method on the base <see cref="T:System.Runtime.Caching.ChangeMonitor" /> class.  Alternatively, a change monitor can implement a finalizer method. In that case, the finalizer can invoke the <see cref="M:System.Runtime.Caching.ChangeMonitor.Dispose(System.Boolean)" /> method and pass it a <paramref name="disposing" /> value of <see langword="false" />. However, this is usually unnecessary. Monitoring for dependency changes is typically performed by a service that maintains a reference to the change-monitor instance. The reference prevents the instance from being garbage collected, and therefore makes a finalizer method unnecessary. To avoid memory leaks, when a dependency changes, the <see cref="M:System.Runtime.Caching.ChangeMonitor.OnChanged(System.Object)" /> method disposes the change-monitor instance (unless initialization has not finished).</para>
            </span>
          </span>
        </block>
      </Docs>
    </Member>
    <Member MemberName="HasChanged">
      <MemberSignature Language="C#" Value="public bool HasChanged { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool HasChanged" />
      <MemberSignature Language="DocId" Value="P:System.Runtime.Caching.ChangeMonitor.HasChanged" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property HasChanged As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool HasChanged { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.HasChanged : bool" Usage="System.Runtime.Caching.ChangeMonitor.HasChanged" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Caching</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="ded96-158">Получает значение, указывающее, что состояние, отслеживаемое классом <see cref="T:System.Runtime.Caching.ChangeMonitor" />, изменилось.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ded96-158">Gets a value that indicates that the state that is monitored by the <see cref="T:System.Runtime.Caching.ChangeMonitor" /> class has changed.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="ded96-159">Значение <see langword="true" />, если состояние отслеживаемое экземпляром <see cref="T:System.Runtime.Caching.ChangeMonitor" />, изменилось; в противном случае — значение <see langword="false" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ded96-159">
              <see langword="true" /> if the state that is monitored by the <see cref="T:System.Runtime.Caching.ChangeMonitor" /> instance has changed; otherwise, <see langword="false" />.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="ded96-160">Можно проверить значение этого свойства в производном <xref:System.Runtime.Caching.ChangeMonitor> класса, чтобы увидеть, был ли изменен зависимость.</span><span class="sxs-lookup"><span data-stu-id="ded96-160">You can check the value of this property in a derived <xref:System.Runtime.Caching.ChangeMonitor> class to see whether a dependency has changed.</span></span>  
  
 <span data-ttu-id="ded96-161">Значение присваивается `true` при изменении зависимостей (то есть, в том случае, когда <xref:System.Runtime.Caching.ChangeMonitor.OnChanged%2A> вызывается метод).</span><span class="sxs-lookup"><span data-stu-id="ded96-161">The value is set to `true` when a dependency change occurs (that is, when the <xref:System.Runtime.Caching.ChangeMonitor.OnChanged%2A> method is called).</span></span> <span data-ttu-id="ded96-162">После <xref:System.Runtime.Caching.ChangeMonitor.OnChanged%2A> был вызван для производного класса, значение <xref:System.Runtime.Caching.ChangeMonitor.HasChanged%2A> свойство будет иметь `true`, независимо от того, следует ли <xref:System.Runtime.Caching.OnChangedCallback> экземпляр получил уведомление с помощью вызова <xref:System.Runtime.Caching.ChangeMonitor.NotifyOnChanged%2A> метод.</span><span class="sxs-lookup"><span data-stu-id="ded96-162">After the <xref:System.Runtime.Caching.ChangeMonitor.OnChanged%2A> method is called by the derived class, the value of the <xref:System.Runtime.Caching.ChangeMonitor.HasChanged%2A> property will be `true`, regardless of whether a <xref:System.Runtime.Caching.OnChangedCallback> instance has been notified by a call to the <xref:System.Runtime.Caching.ChangeMonitor.NotifyOnChanged%2A> method.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="ded96-163">Чтобы узнать, вызывающие объекты <xref:System.Runtime.Caching.ChangeMonitor.HasChanged%2A> свойство, чтобы увидеть, был ли изменен зависимость.</span><span class="sxs-lookup"><span data-stu-id="ded96-163">Callers can check the <xref:System.Runtime.Caching.ChangeMonitor.HasChanged%2A> property to see whether a dependency has changed.</span></span> <span data-ttu-id="ded96-164">Тем не менее, в среде с несколькими потоками проще и более простым в обслуживании подход — вставить данные в реализации кэша без проверки <xref:System.Runtime.Caching.ChangeMonitor.HasChanged%2A> свойство.</span><span class="sxs-lookup"><span data-stu-id="ded96-164">However, in a multi-threaded environment, a simpler and more maintainable approach is to insert data into a cache implementation without checking the <xref:System.Runtime.Caching.ChangeMonitor.HasChanged%2A> property.</span></span> <span data-ttu-id="ded96-165">Реализации кэша необходимо проверить <xref:System.Runtime.Caching.ChangeMonitor.HasChanged%2A> свойство для вас и не должно выполнения инструкции insert или операция задания, если один или несколько связанных зависимостей уже были изменены.</span><span class="sxs-lookup"><span data-stu-id="ded96-165">Cache implementations must check the <xref:System.Runtime.Caching.ChangeMonitor.HasChanged%2A> property for you and must not perform an insert or set operation if one or more associated dependencies have already changed.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Runtime.Caching.ChangeMonitor.NotifyOnChanged(System.Runtime.Caching.OnChangedCallback)" />
        <altmember cref="M:System.Runtime.Caching.ChangeMonitor.OnChanged(System.Object)" />
      </Docs>
    </Member>
    <Member MemberName="InitializationComplete">
      <MemberSignature Language="C#" Value="protected void InitializationComplete ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig instance void InitializationComplete() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.Caching.ChangeMonitor.InitializationComplete" />
      <MemberSignature Language="VB.NET" Value="Protected Sub InitializationComplete ()" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; void InitializationComplete();" />
      <MemberSignature Language="F#" Value="member this.InitializationComplete : unit -&gt; unit" Usage="changeMonitor.InitializationComplete " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Caching</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="ded96-166">Вызывается из конструктора производных классов и указывает на завершение инициализации.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ded96-166">Called from the constructor of derived classes to indicate that initialization is finished.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="ded96-167">Если зависимость изменится до завершения установки в производном классе, необходимо вызвать конструктор производного класса <xref:System.Runtime.Caching.ChangeMonitor.OnChanged%2A> метод.</span><span class="sxs-lookup"><span data-stu-id="ded96-167">If a dependency changes before initialization is complete in a derived class, the constructor of the derived class must invoke the <xref:System.Runtime.Caching.ChangeMonitor.OnChanged%2A> method.</span></span>  
  
 <span data-ttu-id="ded96-168">Когда <xref:System.Runtime.Caching.ChangeMonitor.OnChanged%2A> вызывается метод, <xref:System.Runtime.Caching.ChangeMonitor.HasChanged%2A> свойству автоматически присваивается `true` по монитора изменений.</span><span class="sxs-lookup"><span data-stu-id="ded96-168">When the <xref:System.Runtime.Caching.ChangeMonitor.OnChanged%2A> method is invoked, the <xref:System.Runtime.Caching.ChangeMonitor.HasChanged%2A> property is automatically set to `true` by the change monitor.</span></span> <span data-ttu-id="ded96-169">Таким образом, когда монитор изменений конструктор вызывает метод <xref:System.Runtime.Caching.ChangeMonitor.InitializationComplete%2A> метод, автоматически вызывает базовый класс <xref:System.Runtime.Caching.ChangeMonitor.Dispose%2A> метод.</span><span class="sxs-lookup"><span data-stu-id="ded96-169">As a result, when the change monitor's constructor calls the <xref:System.Runtime.Caching.ChangeMonitor.InitializationComplete%2A> method, the base class will automatically call the <xref:System.Runtime.Caching.ChangeMonitor.Dispose%2A> method.</span></span> <span data-ttu-id="ded96-170">При завершении инициализации, <xref:System.Runtime.Caching.ChangeMonitor.OnChanged%2A> метод автоматически удаляет экземпляр производного монитора изменений.</span><span class="sxs-lookup"><span data-stu-id="ded96-170">If initialization is complete, the <xref:System.Runtime.Caching.ChangeMonitor.OnChanged%2A> method automatically disposes the derived change-monitor instance.</span></span>  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides">
          <span data-ttu-id="ded96-171">
            <para>Конструктор производного класса необходимо вызвать базовый <see cref="M:System.Runtime.Caching.ChangeMonitor.InitializationComplete" /> метода до завершения работы конструктор возвращает. Конструктор производного класса может вызвать <see cref="M:System.Runtime.Caching.ChangeMonitor.Dispose" /> метод только после того, как <see cref="M:System.Runtime.Caching.ChangeMonitor.InitializationComplete" /> вызывается, поскольку <see cref="M:System.Runtime.Caching.ChangeMonitor.Dispose" /> метод вызывает исключение, если инициализация не завершена.</para>
          </span>
          <span class="sxs-lookup">
            <span data-stu-id="ded96-171">
              <para>The constructor of a derived class must call the base <see cref="M:System.Runtime.Caching.ChangeMonitor.InitializationComplete" /> method before the constructor returns. The constructor of a derived class can call the <see cref="M:System.Runtime.Caching.ChangeMonitor.Dispose" /> method only after <see cref="M:System.Runtime.Caching.ChangeMonitor.InitializationComplete" /> is called, because the <see cref="M:System.Runtime.Caching.ChangeMonitor.Dispose" /> method throws an exception if initialization is not completed.</para>
            </span>
          </span>
        </block>
      </Docs>
    </Member>
    <Member MemberName="IsDisposed">
      <MemberSignature Language="C#" Value="public bool IsDisposed { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsDisposed" />
      <MemberSignature Language="DocId" Value="P:System.Runtime.Caching.ChangeMonitor.IsDisposed" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsDisposed As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsDisposed { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.IsDisposed : bool" Usage="System.Runtime.Caching.ChangeMonitor.IsDisposed" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Caching</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="ded96-172">Получает значение, указывающее, что производный экземпляр класса <see cref="T:System.Runtime.Caching.ChangeMonitor" /> удален.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ded96-172">Gets a value that indicates that the derived instance of a <see cref="T:System.Runtime.Caching.ChangeMonitor" /> class is disposed.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="ded96-173">Значение <see langword="true" />, если экземпляр удален; в противном случае — значение <see langword="false" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ded96-173">
              <see langword="true" /> if the instance is disposed; otherwise, <see langword="false" />.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="ded96-174">Свойство имеет значение `true` после базовый <xref:System.Runtime.Caching.ChangeMonitor.Dispose%2A> вызовы методов <xref:System.Runtime.Caching.ChangeMonitor.Dispose%2A> метод в производном классе, чтобы удалять его.</span><span class="sxs-lookup"><span data-stu-id="ded96-174">The property is set to `true` after the base <xref:System.Runtime.Caching.ChangeMonitor.Dispose%2A> method calls the <xref:System.Runtime.Caching.ChangeMonitor.Dispose%2A> method in a derived class to dispose of the instance.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="NotifyOnChanged">
      <MemberSignature Language="C#" Value="public void NotifyOnChanged (System.Runtime.Caching.OnChangedCallback onChangedCallback);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void NotifyOnChanged(class System.Runtime.Caching.OnChangedCallback onChangedCallback) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.Caching.ChangeMonitor.NotifyOnChanged(System.Runtime.Caching.OnChangedCallback)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void NotifyOnChanged(System::Runtime::Caching::OnChangedCallback ^ onChangedCallback);" />
      <MemberSignature Language="F#" Value="member this.NotifyOnChanged : System.Runtime.Caching.OnChangedCallback -&gt; unit" Usage="changeMonitor.NotifyOnChanged onChangedCallback" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Caching</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="onChangedCallback" Type="System.Runtime.Caching.OnChangedCallback" />
      </Parameters>
      <Docs>
        <param name="onChangedCallback">
          <span data-ttu-id="ded96-175">Ссылка на метод, вызываемый при изменении зависимости.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ded96-175">A reference to a method that is invoked when a dependency has changed.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="ded96-176">Вызывается средствами реализации кэша для регистрации обратного вызова и уведомления экземпляра <see cref="T:System.Runtime.Caching.ObjectCache" /> об изменении зависимости с использованием делегата <see cref="T:System.Runtime.Caching.OnChangedCallback" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ded96-176">Called by Cache implementers to register a callback and notify an <see cref="T:System.Runtime.Caching.ObjectCache" /> instance through the <see cref="T:System.Runtime.Caching.OnChangedCallback" /> delegate when a dependency has changed.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="ded96-177">Реализации кэша используйте этот метод для привязки к монитору изменений.</span><span class="sxs-lookup"><span data-stu-id="ded96-177">Cache implementers use this method to wire themselves up to a change monitor.</span></span> <span data-ttu-id="ded96-178">Если можно связать одно или несколько мониторов изменений с элемента кэша, то можно передать <xref:System.Runtime.Caching.CacheItemPolicy> экземпляр с заполненным свойством мониторов изменений для элемента кэша.</span><span class="sxs-lookup"><span data-stu-id="ded96-178">If you associate one or more change monitors with the cache item, you pass a <xref:System.Runtime.Caching.CacheItemPolicy> instance with a populated change monitors property to the cache item.</span></span> <span data-ttu-id="ded96-179">Реализация кэша мониторов изменений поддерживает отвечает за перебор <xref:System.Runtime.Caching.CacheItemPolicy.ChangeMonitors%2A> свойство и регистрация <xref:System.Runtime.Caching.OnChangedCallback> делегатов с каждым изменить монитор, которые будут найдены.</span><span class="sxs-lookup"><span data-stu-id="ded96-179">A cache implementer that supports change monitors is responsible for iterating over the <xref:System.Runtime.Caching.CacheItemPolicy.ChangeMonitors%2A> property and register the <xref:System.Runtime.Caching.OnChangedCallback> delegates with each change monitor that it finds.</span></span>  
  
 <span data-ttu-id="ded96-180">Так как <xref:System.Runtime.Caching.OnChangedCallback> делегат включает необязательный параметр состояния, конкретная реализация монитора изменений можно передать необязательные сведения о состоянии.</span><span class="sxs-lookup"><span data-stu-id="ded96-180">Because the <xref:System.Runtime.Caching.OnChangedCallback> delegate includes an optional state parameter, a concrete change monitor implementation can pass optional state information.</span></span> <span data-ttu-id="ded96-181">Реализация кэша определяет, следует ли выполнить явную зависимость от типа состояния, который передает монитор пользовательских изменений как часть обратного вызова.</span><span class="sxs-lookup"><span data-stu-id="ded96-181">The cache implementer determines whether an explicit dependency on the type of state that a custom change monitor passes as part of the callback can be taken.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="ded96-182">API расширяемости базовый кэша не имеет требования явных зависимостей типа состояния.</span><span class="sxs-lookup"><span data-stu-id="ded96-182">The base cache extensibility API has no requirement for explicit dependency on the type of state.</span></span>  
  
 <span data-ttu-id="ded96-183">Реализация <xref:System.Runtime.Caching.ChangeMonitor.NotifyOnChanged%2A> метод автоматически определяет ли состояние монитора уже изменен во время <xref:System.Runtime.Caching.ChangeMonitor.NotifyOnChanged%2A> вызывается метод.</span><span class="sxs-lookup"><span data-stu-id="ded96-183">The implementation of the <xref:System.Runtime.Caching.ChangeMonitor.NotifyOnChanged%2A> method automatically determines whether the state of the monitor has already changed at the time <xref:System.Runtime.Caching.ChangeMonitor.NotifyOnChanged%2A> method is called.</span></span> <span data-ttu-id="ded96-184">Если <xref:System.Runtime.Caching.ChangeMonitor.HasChanged%2A> свойство `true`, а затем автоматически вызывает метод <xref:System.Runtime.Caching.OnChangedCallback> обработчик событий, который был зарегистрирован, с помощью <xref:System.Runtime.Caching.ChangeMonitor.OnChanged%2A> метод.</span><span class="sxs-lookup"><span data-stu-id="ded96-184">If the <xref:System.Runtime.Caching.ChangeMonitor.HasChanged%2A> property is `true`, then the method automatically calls the <xref:System.Runtime.Caching.OnChangedCallback> event handler, that was registered, through the <xref:System.Runtime.Caching.ChangeMonitor.OnChanged%2A> method.</span></span> <span data-ttu-id="ded96-185">Это происходит, так как это возможно, что с момента реализация кэша создает монитор изменений, реализация кэша возвращает монитор и связывает сам до, времени базовой отслеживаемых состояние изменилось.</span><span class="sxs-lookup"><span data-stu-id="ded96-185">This occurs because it is possible that from the time a cache implementation creates a change monitor, to the time a cache implementation gets the monitor and wires itself up to it, the underlying monitored state has changed.</span></span> <span data-ttu-id="ded96-186">Если уже изменения состояния выберите объект, который передается <xref:System.Runtime.Caching.ChangeMonitor.OnChanged%2A> метод `null`.</span><span class="sxs-lookup"><span data-stu-id="ded96-186">If the state has already changed then the object that is passed to the <xref:System.Runtime.Caching.ChangeMonitor.OnChanged%2A> method is `null`.</span></span>  
  
 <span data-ttu-id="ded96-187"><xref:System.Runtime.Caching.ChangeMonitor.NotifyOnChanged%2A> Метод может вызываться только один раз и приведет к возникновению исключения при последующих вызовах.</span><span class="sxs-lookup"><span data-stu-id="ded96-187">The <xref:System.Runtime.Caching.ChangeMonitor.NotifyOnChanged%2A> method can be invoked only one time, and will throw an exception on subsequent calls.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">
          <span data-ttu-id="ded96-188">Метод обратного вызова уже вызван.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ded96-188">The callback method has already been invoked.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="ded96-189">Свойство <paramref name="onChangedCallback" /> имеет значение <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ded96-189">
              <paramref name="onChangedCallback" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <block subset="none" type="overrides">
          <span data-ttu-id="ded96-190">
            <para>1.  Необходимо вызвать <see cref="M:System.Runtime.Caching.ChangeMonitor.NotifyOnChanged(System.Runtime.Caching.OnChangedCallback)" /> метод, чтобы получать уведомления о любых изменениях зависимостей. Если уже произошло изменение зависимостей, <see cref="T:System.Runtime.Caching.OnChangedCallback" /> экземпляра будет выполнен при вызове <see cref="M:System.Runtime.Caching.ChangeMonitor.NotifyOnChanged(System.Runtime.Caching.OnChangedCallback)" /> вызывается. В противном случае <see cref="T:System.Runtime.Caching.OnChangedCallback" /> экземпляра вызывается один раз либо если <see cref="M:System.Runtime.Caching.ChangeMonitor.OnChanged(System.Object)" /> был вызван или когда <see cref="M:System.Runtime.Caching.ChangeMonitor.Dispose" /> вызывается метод, что произойдет раньше. <see cref="T:System.Runtime.Caching.OnChangedCallback" /> Экземпляра, предоставляемых реализацией кэша следует удалить запись кэша и при их запросе вызывающим кэша, вызывать важное изменение или событие обновления обратно в исходный вызывающий объект кэша.  2.  Реализация кэша объектов необходимо удалить запись кэша, связанный с изменением зависимостей.</para>
          </span>
          <span class="sxs-lookup">
            <span data-stu-id="ded96-190">
              <para>1.  You must call the <see cref="M:System.Runtime.Caching.ChangeMonitor.NotifyOnChanged(System.Runtime.Caching.OnChangedCallback)" /> method to be notified of any dependency changes. If a dependency change has already occurred, the <see cref="T:System.Runtime.Caching.OnChangedCallback" /> instance will be called when <see cref="M:System.Runtime.Caching.ChangeMonitor.NotifyOnChanged(System.Runtime.Caching.OnChangedCallback)" /> is called. Otherwise, the <see cref="T:System.Runtime.Caching.OnChangedCallback" /> instance will be called one time, either when the <see cref="M:System.Runtime.Caching.ChangeMonitor.OnChanged(System.Object)" /> method is called or when the <see cref="M:System.Runtime.Caching.ChangeMonitor.Dispose" /> method is called, whichever occurs first. The <see cref="T:System.Runtime.Caching.OnChangedCallback" /> instance provided by the cache implementation should remove the cache entry and if it is requested by the cache caller, raise the necessary change or update event back to the original cache caller.  2.  The object cache implementation must remove the cache entry that is associated with a dependency change.</para>
            </span>
          </span>
        </block>
        <altmember cref="M:System.Runtime.Caching.ChangeMonitor.OnChanged(System.Object)" />
      </Docs>
    </Member>
    <Member MemberName="OnChanged">
      <MemberSignature Language="C#" Value="protected void OnChanged (object state);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig instance void OnChanged(object state) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.Caching.ChangeMonitor.OnChanged(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Protected Sub OnChanged (state As Object)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; void OnChanged(System::Object ^ state);" />
      <MemberSignature Language="F#" Value="member this.OnChanged : obj -&gt; unit" Usage="changeMonitor.OnChanged state" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Caching</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="state" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="state">
          <span data-ttu-id="ded96-191">Данные для события изменения.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ded96-191">The data for the change event.</span>
          </span>
          <span data-ttu-id="ded96-192">Это значение может быть равно <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ded96-192">This value can be <see langword="null" />.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="ded96-193">Вызывается производными классами для создания события при изменении зависимости.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ded96-193">Called by derived classes to raise the event when a dependency changes.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="ded96-194">Как правило <xref:System.Runtime.Caching.ChangeMonitor.OnChanged%2A> метод вызывается при изменении зависимости.</span><span class="sxs-lookup"><span data-stu-id="ded96-194">Typically, the <xref:System.Runtime.Caching.ChangeMonitor.OnChanged%2A> method is called when dependency changes occur.</span></span> <span data-ttu-id="ded96-195"><xref:System.Runtime.Caching.ChangeMonitor.OnChanged%2A> Удаления экземпляра монитора изменений, однако реализации происходит только в том случае, если функция обратного вызова уже не был вызван также вызывается метод.</span><span class="sxs-lookup"><span data-stu-id="ded96-195">The <xref:System.Runtime.Caching.ChangeMonitor.OnChanged%2A> method is also invoked when a change-monitor instance is disposed but the disposal occurs only if the callback has not already been invoked.</span></span>  
  
 <span data-ttu-id="ded96-196">Если <xref:System.Runtime.Caching.ChangeMonitor.OnChanged%2A> метод был вызван перед <xref:System.Runtime.Caching.ChangeMonitor.NotifyOnChanged%2A> метод вызывается, данные о состоянии из вызова <xref:System.Runtime.Caching.ChangeMonitor.OnChanged%2A> метод сохраняется реализацией кэша.</span><span class="sxs-lookup"><span data-stu-id="ded96-196">If the <xref:System.Runtime.Caching.ChangeMonitor.OnChanged%2A> method is called before the <xref:System.Runtime.Caching.ChangeMonitor.NotifyOnChanged%2A> method is called, the state data from the call to the <xref:System.Runtime.Caching.ChangeMonitor.OnChanged%2A> method is saved by the cache implementation.</span></span> <span data-ttu-id="ded96-197">Кроме того, обратный вызов, который <xref:System.Runtime.Caching.OnChangedCallback> метод вызывается сразу же при <xref:System.Runtime.Caching.ChangeMonitor.NotifyOnChanged%2A> вызывается метод.</span><span class="sxs-lookup"><span data-stu-id="ded96-197">Also, the callback to the <xref:System.Runtime.Caching.OnChangedCallback> method is invoked immediately when the <xref:System.Runtime.Caching.ChangeMonitor.NotifyOnChanged%2A> method is invoked.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="Overload:System.Runtime.Caching.ChangeMonitor.Dispose" />
        <altmember cref="M:System.Runtime.Caching.ChangeMonitor.NotifyOnChanged(System.Runtime.Caching.OnChangedCallback)" />
        <altmember cref="P:System.Runtime.Caching.ChangeMonitor.HasChanged" />
      </Docs>
    </Member>
    <Member MemberName="UniqueId">
      <MemberSignature Language="C#" Value="public abstract string UniqueId { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string UniqueId" />
      <MemberSignature Language="DocId" Value="P:System.Runtime.Caching.ChangeMonitor.UniqueId" />
      <MemberSignature Language="VB.NET" Value="Public MustOverride ReadOnly Property UniqueId As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; abstract property System::String ^ UniqueId { System::String ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.UniqueId : string" Usage="System.Runtime.Caching.ChangeMonitor.UniqueId" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Caching</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="ded96-198">Получает значение, представляющее экземпляр класса <see cref="T:System.Runtime.Caching.ChangeMonitor" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ded96-198">Gets a value that represents the <see cref="T:System.Runtime.Caching.ChangeMonitor" /> class instance.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="ded96-199">Идентификатор экземпляра монитора изменений.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ded96-199">The identifier for a change-monitor instance.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="ded96-200"><xref:System.Runtime.Caching.ChangeMonitor.UniqueId%2A> Значение свойства обычно состоит из зависимостей имен строковых данных, уникальным образом идентификаторов данных, который находится под наблюдением <xref:System.Runtime.Caching.ChangeMonitor> экземпляра.</span><span class="sxs-lookup"><span data-stu-id="ded96-200">The <xref:System.Runtime.Caching.ChangeMonitor.UniqueId%2A> property value typically consists of dependency names combined string data that uniquely identifiers the data that is being monitored by a <xref:System.Runtime.Caching.ChangeMonitor> instance.</span></span> <span data-ttu-id="ded96-201">Значение <xref:System.Runtime.Caching.ChangeMonitor.UniqueId%2A> свойство содержит строку.</span><span class="sxs-lookup"><span data-stu-id="ded96-201">The value of the <xref:System.Runtime.Caching.ChangeMonitor.UniqueId%2A> property is a string.</span></span> <span data-ttu-id="ded96-202">Значение строки используется для назначения уникальный идентификатор <xref:System.Runtime.Caching.ChangeMonitor> экземпляра.</span><span class="sxs-lookup"><span data-stu-id="ded96-202">The value of the string is used to assign the unique ID of the <xref:System.Runtime.Caching.ChangeMonitor> instance.</span></span>  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides">
          <span data-ttu-id="ded96-203">
            <para>Переопределяя свойство, можно определить индивидуальную реализацию для строковое значение свойства, чтобы назначить его уникальный идентификатор.</para>
          </span>
          <span class="sxs-lookup">
            <span data-stu-id="ded96-203">
              <para>By overriding the property, you can define a custom implementation for the string value of the property in order to assign it a unique ID.</para>
            </span>
          </span>
        </block>
        <block subset="none" type="overrides">
          <span data-ttu-id="ded96-204">
            <para>В производных классах необходимо задать значение свойства в конструкторе.</para>
          </span>
          <span class="sxs-lookup">
            <span data-stu-id="ded96-204">
              <para>In derived classes, you must set the value of the property in the constructor.</para>
            </span>
          </span>
        </block>
      </Docs>
    </Member>
  </Members>
</Type>