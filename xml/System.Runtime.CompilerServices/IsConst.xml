<Type Name="IsConst" FullName="System.Runtime.CompilerServices.IsConst">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="16ca5bfe528a1557a6c1debf6aaf3dc5d8b9082a" />
    <Meta Name="ms.sourcegitcommit" Value="d31dc2ede16f6f7bc64e90d9f897ff54c4e3869b" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="ru-RU" />
    <Meta Name="ms.lasthandoff" Value="04/03/2018" />
  </Metadata>
  <TypeSignature Language="C#" Value="public static class IsConst" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi abstract sealed beforefieldinit IsConst extends System.Object" />
  <TypeSignature Language="DocId" Value="T:System.Runtime.CompilerServices.IsConst" />
  <TypeSignature Language="VB.NET" Value="Public Class IsConst" />
  <TypeSignature Language="C++ CLI" Value="public ref class IsConst abstract sealed" />
  <AssemblyInfo>
    <AssemblyName>System.Runtime</AssemblyName>
    <AssemblyVersion>4.0.20.0</AssemblyVersion>
    <AssemblyVersion>4.1.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.1.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>mscorlib</AssemblyName>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>
      <span data-ttu-id="e1a79-101">Указывает, что измененный тип имеет модификатор <see langword="const" />.</span>
      <span class="sxs-lookup">
        <span data-stu-id="e1a79-101">Indicates that the modified type has a <see langword="const" /> modifier.</span>
      </span>
      <span data-ttu-id="e1a79-102">Этот класс не наследуется.</span>
      <span class="sxs-lookup">
        <span data-stu-id="e1a79-102">This class cannot be inherited.</span>
      </span>
    </summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e1a79-103">Компилятор Microsoft C++ вставляет этот модификатор в метаданные для любого параметра, тип возвращаемого значения, или объявлении объекта объявлены как `const` в исходном коде.</span><span class="sxs-lookup"><span data-stu-id="e1a79-103">The Microsoft C++ compiler emits this modifier into metadata for any parameter, return type, or object declaration declared as `const` in the source code.</span></span>  
  
 <span data-ttu-id="e1a79-104">Компиляторы выдают в метаданные, чтобы изменить способ, которым компилятор just-in-time (JIT) обрабатывает значения, когда поведение по умолчанию не подходит пользовательские модификаторы.</span><span class="sxs-lookup"><span data-stu-id="e1a79-104">Compilers emit custom modifiers within metadata to change the way that the just-in-time (JIT) compiler handles values when the default behavior is not appropriate.</span></span>  <span data-ttu-id="e1a79-105">Когда JIT-компилятор встречает пользовательский модификатор, он обрабатывает значение так, как указывает этот модификатор.</span><span class="sxs-lookup"><span data-stu-id="e1a79-105">When the JIT compiler encounters a custom modifier, it handles the value in the way that the modifier specifies.</span></span>  <span data-ttu-id="e1a79-106">Компиляторы могут применять пользовательские модификаторы к методам, параметрам и возвращаемые значения.</span><span class="sxs-lookup"><span data-stu-id="e1a79-106">Compilers can apply custom modifiers to methods, parameters, and return values.</span></span>  <span data-ttu-id="e1a79-107">JIT-компилятор должен учитывать обязательные модификаторы, но может игнорировать необязательные.</span><span class="sxs-lookup"><span data-stu-id="e1a79-107">The JIT compiler must respond to required modifiers but can ignore optional modifiers.</span></span>  
  
 <span data-ttu-id="e1a79-108">Существует возможность создавать пользовательские модификаторы в метаданные, используя один из следующих способов:</span><span class="sxs-lookup"><span data-stu-id="e1a79-108">You can emit custom modifiers into metadata using one of the following techniques:</span></span>  
  
-   <span data-ttu-id="e1a79-109">С помощью методов в <xref:System.Reflection.Emit.TypeBuilder> класса, такие как <xref:System.Reflection.Emit.TypeBuilder.DefineMethod%2A>, <xref:System.Reflection.Emit.TypeBuilder.DefineField%2A>, <xref:System.Reflection.Emit.TypeBuilder.DefineConstructor%2A>, и <xref:System.Reflection.Emit.TypeBuilder.DefineProperty%2A>.</span><span class="sxs-lookup"><span data-stu-id="e1a79-109">Using methods in the <xref:System.Reflection.Emit.TypeBuilder> class such as <xref:System.Reflection.Emit.TypeBuilder.DefineMethod%2A>, <xref:System.Reflection.Emit.TypeBuilder.DefineField%2A>, <xref:System.Reflection.Emit.TypeBuilder.DefineConstructor%2A>, and <xref:System.Reflection.Emit.TypeBuilder.DefineProperty%2A>.</span></span>  
  
-   <span data-ttu-id="e1a79-110">Создания файла инструкций промежуточного языка MSIL Microsoft, которое содержит вызовы к `modopt` и `modreq`и сборка файла с [Ilasm.exe (ассемблер IL)](~/docs/framework/tools/ilasm-exe-il-assembler.md).</span><span class="sxs-lookup"><span data-stu-id="e1a79-110">Generating a Microsoft intermediate language (MSIL) instruction file that contains calls to `modopt` and `modreq`, and assembling the file with the [Ilasm.exe (IL Assembler)](~/docs/framework/tools/ilasm-exe-il-assembler.md).</span></span>  
  
-   <span data-ttu-id="e1a79-111">Использование неуправляемого API-интерфейса отражения.</span><span class="sxs-lookup"><span data-stu-id="e1a79-111">Using the unmanaged reflection API.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="e1a79-112">Ниже приведен пример, как можно опускать <xref:System.Runtime.CompilerServices.IsConst> объект в сборке с помощью отражения.</span><span class="sxs-lookup"><span data-stu-id="e1a79-112">The following example demonstrates how to emit an <xref:System.Runtime.CompilerServices.IsConst> object into an assembly using reflection.</span></span>  
  
 [!code-cpp[Runtime.CompilerServices.IsConst#1](~/samples/snippets/cpp/VS_Snippets_CLR/Runtime.CompilerServices.IsConst/cpp/sample.cpp#1)]  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members />
</Type>