<Type Name="IsCopyConstructed" FullName="System.Runtime.CompilerServices.IsCopyConstructed">
  <TypeSignature Language="C#" Value="public static class IsCopyConstructed" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi abstract sealed beforefieldinit IsCopyConstructed extends System.Object" />
  <TypeSignature Language="DocId" Value="T:System.Runtime.CompilerServices.IsCopyConstructed" />
  <TypeSignature Language="VB.NET" Value="Public Class IsCopyConstructed" />
  <TypeSignature Language="C++ CLI" Value="public ref class IsCopyConstructed abstract sealed" />
  <AssemblyInfo>
    <AssemblyName>System.Runtime.CompilerServices.VisualC</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.1.0.0</AssemblyVersion>
    <AssemblyVersion>4.1.1.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>mscorlib</AssemblyName>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute>
      <AttributeName>System.Runtime.InteropServices.ComVisible(true)</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary><span data-ttu-id="91fa7-101">Указывает, что при любом копировании значений данного типа необходимо использовать конструктор копий, предоставляемый этим типом.</span><span class="sxs-lookup"><span data-stu-id="91fa7-101">Indicates that any copying of values of this type must use the copy constructor provided by the type.</span></span>  <span data-ttu-id="91fa7-102">Этот класс не наследуется.</span><span class="sxs-lookup"><span data-stu-id="91fa7-102">This class cannot be inherited.</span></span></summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="91fa7-103">Любой тип, была изменена <xref:System.Runtime.CompilerServices.IsCopyConstructed> класс должен реализовывать метод с именем `MarshalCopy` , вызывает конструктор собственные копии.</span><span class="sxs-lookup"><span data-stu-id="91fa7-103">Any type modified by the <xref:System.Runtime.CompilerServices.IsCopyConstructed> class must implement a method named `MarshalCopy` that calls the native copy constructor.</span></span>  
  
 <span data-ttu-id="91fa7-104">Любой собственный тип C++, включенный в метаданные с конструкторами копий необходимо иметь методы, вызываемые маршалером при копировании значений через границы маршалинга.</span><span class="sxs-lookup"><span data-stu-id="91fa7-104">Any native C++ type that is emitted into metadata with copy constructors needs to have those methods called by the marshaler when copying values across the marshaling boundary.</span></span>  <span data-ttu-id="91fa7-105">Компилятор Microsoft C++ изменяет все собственные типы C++ в параметрах метода и возвращаемых типов, имеющих этот модификатор для запуска такого поведения в коде маршалинга.</span><span class="sxs-lookup"><span data-stu-id="91fa7-105">The Microsoft C++ compiler modifies all native C++ types in method parameters and return types that have this modifier to trigger this behavior in the marshaling code.</span></span>  
  
 <span data-ttu-id="91fa7-106">Компиляторы выдают в метаданные, чтобы изменить способ, которым компилятор just-in-time (JIT) обрабатывает значения, когда поведение по умолчанию не подходит пользовательские модификаторы.</span><span class="sxs-lookup"><span data-stu-id="91fa7-106">Compilers emit custom modifiers within metadata to change the way that the just-in-time (JIT) compiler handles values when the default behavior is not appropriate.</span></span>  <span data-ttu-id="91fa7-107">Когда JIT-компилятор встречает пользовательский модификатор, он обрабатывает значение так, как указывает этот модификатор.</span><span class="sxs-lookup"><span data-stu-id="91fa7-107">When the JIT compiler encounters a custom modifier, it handles the value in the way that the modifier specifies.</span></span>  <span data-ttu-id="91fa7-108">Компиляторы могут применять пользовательские модификаторы к методам, параметрам и возвращаемые значения.</span><span class="sxs-lookup"><span data-stu-id="91fa7-108">Compilers can apply custom modifiers to methods, parameters, and return values.</span></span>  <span data-ttu-id="91fa7-109">JIT-компилятор должен учитывать обязательные модификаторы, но может игнорировать необязательные.</span><span class="sxs-lookup"><span data-stu-id="91fa7-109">The JIT compiler must respond to required modifiers but can ignore optional modifiers.</span></span>  
  
 <span data-ttu-id="91fa7-110">Существует возможность создавать пользовательские модификаторы в метаданные, используя один из следующих способов:</span><span class="sxs-lookup"><span data-stu-id="91fa7-110">You can emit custom modifiers into metadata using one of the following techniques:</span></span>  
  
-   <span data-ttu-id="91fa7-111">С помощью методов в <xref:System.Reflection.Emit.TypeBuilder> класса, такие как <xref:System.Reflection.Emit.TypeBuilder.DefineMethod%2A>, <xref:System.Reflection.Emit.TypeBuilder.DefineField%2A>, <xref:System.Reflection.Emit.TypeBuilder.DefineConstructor%2A>, и <xref:System.Reflection.Emit.TypeBuilder.DefineProperty%2A>.</span><span class="sxs-lookup"><span data-stu-id="91fa7-111">Using methods in the <xref:System.Reflection.Emit.TypeBuilder> class such as <xref:System.Reflection.Emit.TypeBuilder.DefineMethod%2A>, <xref:System.Reflection.Emit.TypeBuilder.DefineField%2A>, <xref:System.Reflection.Emit.TypeBuilder.DefineConstructor%2A>, and <xref:System.Reflection.Emit.TypeBuilder.DefineProperty%2A>.</span></span>  
  
-   <span data-ttu-id="91fa7-112">Создания файла инструкций промежуточного языка MSIL Microsoft, которое содержит вызовы к `modopt` и `modreq`и сборка файла с [Ilasm.exe (ассемблер IL)](~/docs/framework/tools/ilasm-exe-il-assembler.md).</span><span class="sxs-lookup"><span data-stu-id="91fa7-112">Generating a Microsoft intermediate language (MSIL) instruction file that contains calls to `modopt` and `modreq`, and assembling the file with the [Ilasm.exe (IL Assembler)](~/docs/framework/tools/ilasm-exe-il-assembler.md).</span></span>  
  
-   <span data-ttu-id="91fa7-113">Использование неуправляемого API-интерфейса отражения.</span><span class="sxs-lookup"><span data-stu-id="91fa7-113">Using the unmanaged reflection API.</span></span>  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members />
</Type>