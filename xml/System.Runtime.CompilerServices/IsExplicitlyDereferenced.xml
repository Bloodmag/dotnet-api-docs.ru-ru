<Type Name="IsExplicitlyDereferenced" FullName="System.Runtime.CompilerServices.IsExplicitlyDereferenced">
  <TypeSignature Language="C#" Value="public static class IsExplicitlyDereferenced" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi abstract sealed beforefieldinit IsExplicitlyDereferenced extends System.Object" />
  <TypeSignature Language="DocId" Value="T:System.Runtime.CompilerServices.IsExplicitlyDereferenced" />
  <TypeSignature Language="VB.NET" Value="Public Class IsExplicitlyDereferenced" />
  <TypeSignature Language="C++ CLI" Value="public ref class IsExplicitlyDereferenced abstract sealed" />
  <AssemblyInfo>
    <AssemblyName>System.Runtime.CompilerServices.VisualC</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.1.0.0</AssemblyVersion>
    <AssemblyVersion>4.1.1.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>mscorlib</AssemblyName>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary><span data-ttu-id="c8988-101">Указывает, что управляемый указатель представляет параметр-указатель внутри сигнатуры метода.</span><span class="sxs-lookup"><span data-stu-id="c8988-101">Indicates that a managed pointer represents a pointer parameter within a method signature.</span></span> <span data-ttu-id="c8988-102">Этот класс не наследуется.</span><span class="sxs-lookup"><span data-stu-id="c8988-102">This class cannot be inherited.</span></span></summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="c8988-103">В C++ управляемые указатели и управляемые ссылки передаются в метаданные как указатели.</span><span class="sxs-lookup"><span data-stu-id="c8988-103">In C++, managed pointers and managed references are emitted into metadata as pointers.</span></span>  <span data-ttu-id="c8988-104">Для различения двух типов в метаданных, компилятор Microsoft C++ применяет данный модификатор к управляемые указатели.</span><span class="sxs-lookup"><span data-stu-id="c8988-104">To distinguish between the two types in metadata, the Microsoft  C++ compiler applies this modifier to managed pointers.</span></span>  <span data-ttu-id="c8988-105">Модификатор для управляемых ссылочных типов не вставляется.</span><span class="sxs-lookup"><span data-stu-id="c8988-105">It emits no modifier on managed reference types.</span></span>  <span data-ttu-id="c8988-106">Компиляторы должны знать правильный синтаксис вызова при импорте метода из области метаданных.</span><span class="sxs-lookup"><span data-stu-id="c8988-106">Compilers need to know the correct calling syntax when importing a method from metadata scope.</span></span>  <span data-ttu-id="c8988-107"><xref:System.Runtime.CompilerServices.IsExplicitlyDereferenced> Класса и его партнеру <xref:System.Runtime.CompilerServices.IsImplicitlyDereferenced> класса, неоднозначность ссылочные параметры из параметров-указателей.</span><span class="sxs-lookup"><span data-stu-id="c8988-107">The <xref:System.Runtime.CompilerServices.IsExplicitlyDereferenced> class and its partner, the <xref:System.Runtime.CompilerServices.IsImplicitlyDereferenced> class, disambiguate reference parameters from pointer parameters.</span></span>  
  
 <span data-ttu-id="c8988-108">Компиляторы выдают в метаданные, чтобы изменить способ, которым компилятор just-in-time (JIT) обрабатывает значения, когда поведение по умолчанию не подходит пользовательские модификаторы.</span><span class="sxs-lookup"><span data-stu-id="c8988-108">Compilers emit custom modifiers within metadata to change the way that the just-in-time (JIT) compiler handles values when the default behavior is not appropriate.</span></span>  <span data-ttu-id="c8988-109">Когда JIT-компилятор встречает пользовательский модификатор, он обрабатывает значение так, как указывает этот модификатор.</span><span class="sxs-lookup"><span data-stu-id="c8988-109">When the JIT compiler encounters a custom modifier, it handles the value in the way that the modifier specifies.</span></span>  <span data-ttu-id="c8988-110">Компиляторы могут применять пользовательские модификаторы к методам, параметрам и возвращаемые значения.</span><span class="sxs-lookup"><span data-stu-id="c8988-110">Compilers can apply custom modifiers to methods, parameters, and return values.</span></span>  <span data-ttu-id="c8988-111">JIT-компилятор должен учитывать обязательные модификаторы, но может игнорировать необязательные.</span><span class="sxs-lookup"><span data-stu-id="c8988-111">The JIT compiler must respond to required modifiers but can ignore optional modifiers.</span></span>  
  
 <span data-ttu-id="c8988-112">Существует возможность создавать пользовательские модификаторы в метаданные, используя один из следующих способов:</span><span class="sxs-lookup"><span data-stu-id="c8988-112">You can emit custom modifiers into metadata using one of the following techniques:</span></span>  
  
-   <span data-ttu-id="c8988-113">С помощью методов в <xref:System.Reflection.Emit.TypeBuilder> класса, такие как <xref:System.Reflection.Emit.TypeBuilder.DefineMethod%2A>, <xref:System.Reflection.Emit.TypeBuilder.DefineField%2A>, <xref:System.Reflection.Emit.TypeBuilder.DefineConstructor%2A>, и <xref:System.Reflection.Emit.TypeBuilder.DefineProperty%2A>.</span><span class="sxs-lookup"><span data-stu-id="c8988-113">Using methods in the <xref:System.Reflection.Emit.TypeBuilder> class such as <xref:System.Reflection.Emit.TypeBuilder.DefineMethod%2A>, <xref:System.Reflection.Emit.TypeBuilder.DefineField%2A>, <xref:System.Reflection.Emit.TypeBuilder.DefineConstructor%2A>, and <xref:System.Reflection.Emit.TypeBuilder.DefineProperty%2A>.</span></span>  
  
-   <span data-ttu-id="c8988-114">Создания файла инструкций промежуточного языка MSIL Microsoft, которое содержит вызовы к `modopt` и `modreq`и сборка файла с [Ilasm.exe (ассемблер IL)](~/docs/framework/tools/ilasm-exe-il-assembler.md).</span><span class="sxs-lookup"><span data-stu-id="c8988-114">Generating a Microsoft intermediate language (MSIL) instruction file that contains calls to `modopt` and `modreq`, and assembling the file with the [Ilasm.exe (IL Assembler)](~/docs/framework/tools/ilasm-exe-il-assembler.md).</span></span>  
  
-   <span data-ttu-id="c8988-115">Использование неуправляемого API-интерфейса отражения.</span><span class="sxs-lookup"><span data-stu-id="c8988-115">Using the unmanaged reflection API.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="c8988-116">Ниже приведен пример, как можно опускать <xref:System.Runtime.CompilerServices.IsExplicitlyDereferenced> объект в сборке с помощью отражения.</span><span class="sxs-lookup"><span data-stu-id="c8988-116">The following example demonstrates how to emit an <xref:System.Runtime.CompilerServices.IsExplicitlyDereferenced> object into an assembly using reflection.</span></span>  
  
 [!code-cpp[Runtime.CompilerServices.IsExplicitlyDereferenced#1](~/samples/snippets/cpp/VS_Snippets_CLR/Runtime.CompilerServices.IsExplicitlyDereferenced/cpp/sample.cpp#1)]  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members />
</Type>