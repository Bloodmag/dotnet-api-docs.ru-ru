<Type Name="IsJitIntrinsic" FullName="System.Runtime.CompilerServices.IsJitIntrinsic">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="ec03692da0d0d5a4e1c003feb2dcb81b8e672323" />
    <Meta Name="ms.sourcegitcommit" Value="6a0b904069161bbaec4ffd02aa7d9cf38c61e72e" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="ru-RU" />
    <Meta Name="ms.lasthandoff" Value="06/24/2018" />
    <Meta Name="ms.locfileid" Value="36541011" />
  </Metadata>
  <TypeSignature Language="C#" Value="public static class IsJitIntrinsic" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi abstract sealed beforefieldinit IsJitIntrinsic extends System.Object" />
  <TypeSignature Language="DocId" Value="T:System.Runtime.CompilerServices.IsJitIntrinsic" />
  <TypeSignature Language="VB.NET" Value="Public Class IsJitIntrinsic" />
  <TypeSignature Language="C++ CLI" Value="public ref class IsJitIntrinsic abstract sealed" />
  <TypeSignature Language="F#" Value="type IsJitIntrinsic = class" />
  <AssemblyInfo>
    <AssemblyName>System.Runtime.CompilerServices.VisualC</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.1.0.0</AssemblyVersion>
    <AssemblyVersion>4.1.1.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>mscorlib</AssemblyName>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>Указывает, что измененный метод является внутренним значением, для которого JIT-компилятор может генерировать особый код. Этот класс не наследуется.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Компиляторы выдают в метаданные, чтобы изменить способ, которым компилятор just-in-time (JIT) обрабатывает значения, когда поведение по умолчанию не подходит пользовательские модификаторы.  Когда JIT-компилятор встречает пользовательский модификатор, он обрабатывает значение так, как указывает этот модификатор.  Компиляторы могут применять пользовательские модификаторы к методам, параметрам и возвращаемые значения.  JIT-компилятор должен учитывать обязательные модификаторы, но может игнорировать необязательные.  
  
 Существует возможность создавать пользовательские модификаторы в метаданные, используя один из следующих способов:  
  
-   С помощью методов в <xref:System.Reflection.Emit.TypeBuilder> класса, такие как <xref:System.Reflection.Emit.TypeBuilder.DefineMethod%2A>, <xref:System.Reflection.Emit.TypeBuilder.DefineField%2A>, <xref:System.Reflection.Emit.TypeBuilder.DefineConstructor%2A>, и <xref:System.Reflection.Emit.TypeBuilder.DefineProperty%2A>.  
  
-   Создания файла инструкций промежуточного языка MSIL Microsoft, которое содержит вызовы к `modopt` и `modreq`и сборка файла с [Ilasm.exe (ассемблер IL)](~/docs/framework/tools/ilasm-exe-il-assembler.md).  
  
-   Использование неуправляемого API-интерфейса отражения.  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members />
</Type>