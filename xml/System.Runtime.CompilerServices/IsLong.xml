<Type Name="IsLong" FullName="System.Runtime.CompilerServices.IsLong">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="f8bf804695c48d4ce5c23b8a91eec7f8319047e2" />
    <Meta Name="ms.sourcegitcommit" Value="434f60616a9793fa8436744549fc856e94f7a648" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="ru-RU" />
    <Meta Name="ms.lasthandoff" Value="08/24/2018" />
    <Meta Name="ms.locfileid" Value="37472129" />
  </Metadata>
  <TypeSignature Language="C#" Value="public static class IsLong" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi abstract sealed beforefieldinit IsLong extends System.Object" />
  <TypeSignature Language="DocId" Value="T:System.Runtime.CompilerServices.IsLong" />
  <TypeSignature Language="VB.NET" Value="Public Class IsLong" />
  <TypeSignature Language="C++ CLI" Value="public ref class IsLong abstract sealed" />
  <TypeSignature Language="F#" Value="type IsLong = class" />
  <AssemblyInfo>
    <AssemblyName>System.Runtime.CompilerServices.VisualC</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.1.0.0</AssemblyVersion>
    <AssemblyVersion>4.1.1.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>mscorlib</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>
      <span data-ttu-id="fc0fe-101">Указывает, что измененное целое число является стандартным значением <see langword="long" /> из C++.</span>
      <span class="sxs-lookup">
        <span data-stu-id="fc0fe-101">Indicates that a modified integer is a standard C++ <see langword="long" /> value.</span>
      </span>
      <span data-ttu-id="fc0fe-102">Этот класс не наследуется.</span>
      <span class="sxs-lookup">
        <span data-stu-id="fc0fe-102">This class cannot be inherited.</span>
      </span>
    </summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="fc0fe-103">Стандарт C++ указывает, что `long` значение и значение типа integer являются различных типов.</span><span class="sxs-lookup"><span data-stu-id="fc0fe-103">The C++ standard indicates that a `long` value and an integer value are distinct types.</span></span>  <span data-ttu-id="fc0fe-104">Тем не менее, они представлены с помощью `ELEMENT_TYPE_I4` в сборке.</span><span class="sxs-lookup"><span data-stu-id="fc0fe-104">However, they are both represented using `ELEMENT_TYPE_I4` in an assembly.</span></span>  <span data-ttu-id="fc0fe-105">Чтобы отличить `long` из целого числа в C++, компилятор Microsoft C++ добавляет <xref:System.Runtime.CompilerServices.IsLong> модификатор в любой экземпляр `long` е emited.</span><span class="sxs-lookup"><span data-stu-id="fc0fe-105">To distinguish a `long` from an integer in C++, the Microsoft C++ compiler adds the <xref:System.Runtime.CompilerServices.IsLong> modifier to any instance of a `long` when the instance is emited.</span></span>  <span data-ttu-id="fc0fe-106">Этот процесс критически важен для поддержки языка типобезопасность.</span><span class="sxs-lookup"><span data-stu-id="fc0fe-106">This process is critically important for maintaining language-level type safety.</span></span>  
  
 <span data-ttu-id="fc0fe-107">Компиляторы выдают пользовательские модификаторы, в метаданных, чтобы изменить способ, которым компилятор just-in-time (JIT) обрабатывает значения, когда поведение по умолчанию не подходит.</span><span class="sxs-lookup"><span data-stu-id="fc0fe-107">Compilers emit custom modifiers within metadata to change the way that the just-in-time (JIT) compiler handles values when the default behavior is not appropriate.</span></span>  <span data-ttu-id="fc0fe-108">Когда JIT-компилятор встречает пользовательский модификатор, он обрабатывает значение так, как указывает этот модификатор.</span><span class="sxs-lookup"><span data-stu-id="fc0fe-108">When the JIT compiler encounters a custom modifier, it handles the value in the way that the modifier specifies.</span></span>  <span data-ttu-id="fc0fe-109">Компиляторы могут применять пользовательские модификаторы для методов, параметров и возвращаемых значений.</span><span class="sxs-lookup"><span data-stu-id="fc0fe-109">Compilers can apply custom modifiers to methods, parameters, and return values.</span></span>  <span data-ttu-id="fc0fe-110">JIT-компилятор должен отвечать на обязательные модификаторы, но могут игнорировать необязательные модификаторы.</span><span class="sxs-lookup"><span data-stu-id="fc0fe-110">The JIT compiler must respond to required modifiers but can ignore optional modifiers.</span></span>  
  
 <span data-ttu-id="fc0fe-111">Допускается выдача пользовательских модификаторов в метаданные, с помощью одного из следующих способов:</span><span class="sxs-lookup"><span data-stu-id="fc0fe-111">You can emit custom modifiers into metadata using one of the following techniques:</span></span>  
  
-   <span data-ttu-id="fc0fe-112">С помощью методов в <xref:System.Reflection.Emit.TypeBuilder> класса, такие как <xref:System.Reflection.Emit.TypeBuilder.DefineMethod%2A>, <xref:System.Reflection.Emit.TypeBuilder.DefineField%2A>, <xref:System.Reflection.Emit.TypeBuilder.DefineConstructor%2A>, и <xref:System.Reflection.Emit.TypeBuilder.DefineProperty%2A>.</span><span class="sxs-lookup"><span data-stu-id="fc0fe-112">Using methods in the <xref:System.Reflection.Emit.TypeBuilder> class such as <xref:System.Reflection.Emit.TypeBuilder.DefineMethod%2A>, <xref:System.Reflection.Emit.TypeBuilder.DefineField%2A>, <xref:System.Reflection.Emit.TypeBuilder.DefineConstructor%2A>, and <xref:System.Reflection.Emit.TypeBuilder.DefineProperty%2A>.</span></span>  
  
-   <span data-ttu-id="fc0fe-113">Создание файла инструкций промежуточного языка MSIL Майкрософт, которое содержит вызовы к `modopt` и `modreq`и сборка файла с [Ilasm.exe (ассемблер IL)](~/docs/framework/tools/ilasm-exe-il-assembler.md).</span><span class="sxs-lookup"><span data-stu-id="fc0fe-113">Generating a Microsoft intermediate language (MSIL) instruction file that contains calls to `modopt` and `modreq`, and assembling the file with the [Ilasm.exe (IL Assembler)](~/docs/framework/tools/ilasm-exe-il-assembler.md).</span></span>  
  
-   <span data-ttu-id="fc0fe-114">С помощью API неуправляемого отражения.</span><span class="sxs-lookup"><span data-stu-id="fc0fe-114">Using the unmanaged reflection API.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="fc0fe-115">Следующий пример демонстрирует порождения <xref:System.Runtime.CompilerServices.IsLong> объект в сборке с помощью отражения.</span><span class="sxs-lookup"><span data-stu-id="fc0fe-115">The following example demonstrates how to emit an <xref:System.Runtime.CompilerServices.IsLong> object into an assembly using reflection.</span></span>  
  
 [!code-cpp[Runtime.CompilerServices.IsLong#1](~/samples/snippets/cpp/VS_Snippets_CLR/Runtime.CompilerServices.IsLong/cpp/sample.cpp#1)]  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members />
</Type>