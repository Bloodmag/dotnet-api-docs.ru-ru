<Type Name="StructLayoutAttribute" FullName="System.Runtime.InteropServices.StructLayoutAttribute">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="34be8492f463b278983485994e764ce595977dbb" />
    <Meta Name="ms.sourcegitcommit" Value="6a0b904069161bbaec4ffd02aa7d9cf38c61e72e" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="ru-RU" />
    <Meta Name="ms.lasthandoff" Value="06/24/2018" />
    <Meta Name="ms.locfileid" Value="36537517" />
  </Metadata>
  <TypeSignature Language="C#" Value="public sealed class StructLayoutAttribute : Attribute" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed beforefieldinit StructLayoutAttribute extends System.Attribute" />
  <TypeSignature Language="DocId" Value="T:System.Runtime.InteropServices.StructLayoutAttribute" />
  <TypeSignature Language="VB.NET" Value="Public NotInheritable Class StructLayoutAttribute&#xA;Inherits Attribute" />
  <TypeSignature Language="C++ CLI" Value="public ref class StructLayoutAttribute sealed : Attribute" />
  <TypeSignature Language="F#" Value="type StructLayoutAttribute = class&#xA;    inherit Attribute" />
  <AssemblyInfo>
    <AssemblyName>System.Runtime</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.10.0</AssemblyVersion>
    <AssemblyVersion>4.0.20.0</AssemblyVersion>
    <AssemblyVersion>4.1.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.1.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>mscorlib</AssemblyName>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Attribute</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute>
      <AttributeName>System.AttributeUsage(System.AttributeTargets.Class | System.AttributeTargets.Struct, Inherited=false)</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName>System.Runtime.InteropServices.ComVisible(true)</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>Позволяет управлять физическим размещением полей данных класса или структуры в памяти.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Этот атрибут можно применять в классах и структурах.  
  
 Общеязыковая среда выполнения управляет физической компоновкой полей данных класса или структуры в управляемой памяти. Однако для передачи типа в неуправляемый код может использовать <xref:System.Runtime.InteropServices.StructLayoutAttribute> атрибут для управления размещением неуправляемого типа. Использование атрибута с <xref:System.Runtime.InteropServices.LayoutKind.Sequential?displayProperty=nameWithType> заставляет члены структуры располагаться последовательно в порядке их появления. <xref:System.Runtime.InteropServices.LayoutKind.Sequential?displayProperty=nameWithType> Элементы управления макета в управляемой памяти, а также макет в неуправляемой памяти. Для преобразуемых типов он управляет макетом при класса или структуры маршалинга в неуправляемый код, но не влияет на макет в управляемой памяти. Использование атрибута с <xref:System.Runtime.InteropServices.LayoutKind.Explicit?displayProperty=nameWithType> для управления точным положением каждого члена данных. Это влияет на управляемых и неуправляемых макета для преобразуемые и непреобразуемые типы. С помощью <xref:System.Runtime.InteropServices.LayoutKind.Explicit?displayProperty=nameWithType> , необходимо использовать <xref:System.Runtime.InteropServices.FieldOffsetAttribute> атрибут, чтобы указать позицию каждого поля в тип.  
  
 Компиляторы C#, Visual Basic и C++ применяются <xref:System.Runtime.InteropServices.LayoutKind.Sequential> значение размещения структуры по умолчанию. Для классов, необходимо применить <xref:System.Runtime.InteropServices.LayoutKind.Sequential?displayProperty=nameWithType> значение явно. [Tlbimp.exe (программа импорта библиотек типов)](~/docs/framework/tools/tlbimp-exe-type-library-importer.md) также применяется <xref:System.Runtime.InteropServices.StructLayoutAttribute> атрибут; он всегда применяется <xref:System.Runtime.InteropServices.LayoutKind.Sequential?displayProperty=nameWithType> при импортировании библиотеки типов.  
  
   
  
## Examples  
 В следующем примере показано объявление управляемого `GetSystemTime` функцией и определяет `MySystemTime` класса <xref:System.Runtime.InteropServices.LayoutKind.Explicit?displayProperty=nameWithType> макета. `GetSystemTime` Возвращает системное время и выводит на консоль.  
  
 [!code-cpp[StructLayoutAttribute#1](~/samples/snippets/cpp/VS_Snippets_CLR/StructLayoutAttribute/CPP/structlayoutattribute.cpp#1)]
 [!code-csharp[StructLayoutAttribute#1](~/samples/snippets/csharp/VS_Snippets_CLR/StructLayoutAttribute/CS/structlayoutattribute.cs#1)]
 [!code-vb[StructLayoutAttribute#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/StructLayoutAttribute/VB/structlayoutattribute.vb#1)]  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <MemberGroup MemberName=".ctor">
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Инициализирует новый экземпляр класса <see cref="T:System.Runtime.InteropServices.StructLayoutAttribute" />.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public StructLayoutAttribute (short layoutKind);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(int16 layoutKind) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.InteropServices.StructLayoutAttribute.#ctor(System.Int16)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (layoutKind As Short)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; StructLayoutAttribute(short layoutKind);" />
      <MemberSignature Language="F#" Value="new System.Runtime.InteropServices.StructLayoutAttribute : int16 -&gt; System.Runtime.InteropServices.StructLayoutAttribute" Usage="new System.Runtime.InteropServices.StructLayoutAttribute layoutKind" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="layoutKind" Type="System.Int16" />
      </Parameters>
      <Docs>
        <param name="layoutKind">16-разрядное целое число, представляющее одно из значений <see cref="T:System.Runtime.InteropServices.LayoutKind" />, определяющих компоновку класса или структуры.</param>
        <summary>Инициализирует новый экземпляр класса <see cref="T:System.Runtime.InteropServices.StructLayoutAttribute" />, используя указанный элемент перечисления <see cref="T:System.Runtime.InteropServices.LayoutKind" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Этот конструктор использует исходное 16-разрядное целое число, представляющее каждого <xref:System.Runtime.InteropServices.LayoutKind> член перечисления. [Tlbimp.exe (программа импорта библиотек типов)](~/docs/framework/tools/tlbimp-exe-type-library-importer.md) использует этот конструктор.  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Runtime.InteropServices.LayoutKind" />
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public StructLayoutAttribute (System.Runtime.InteropServices.LayoutKind layoutKind);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(valuetype System.Runtime.InteropServices.LayoutKind layoutKind) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.InteropServices.StructLayoutAttribute.#ctor(System.Runtime.InteropServices.LayoutKind)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; StructLayoutAttribute(System::Runtime::InteropServices::LayoutKind layoutKind);" />
      <MemberSignature Language="F#" Value="new System.Runtime.InteropServices.StructLayoutAttribute : System.Runtime.InteropServices.LayoutKind -&gt; System.Runtime.InteropServices.StructLayoutAttribute" Usage="new System.Runtime.InteropServices.StructLayoutAttribute layoutKind" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="layoutKind" Type="System.Runtime.InteropServices.LayoutKind" />
      </Parameters>
      <Docs>
        <param name="layoutKind">Одно из значений перечисления, определяющих компоновку класса или структуры.</param>
        <summary>Инициализирует новый экземпляр класса <see cref="T:System.Runtime.InteropServices.StructLayoutAttribute" />, используя указанный элемент перечисления <see cref="T:System.Runtime.InteropServices.LayoutKind" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Для чтения кода, менее подвержены возникновению ошибок всегда следует используйте этот конструктор.  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Runtime.InteropServices.LayoutKind" />
      </Docs>
    </Member>
    <Member MemberName="CharSet">
      <MemberSignature Language="C#" Value="public System.Runtime.InteropServices.CharSet CharSet;" />
      <MemberSignature Language="ILAsm" Value=".field public valuetype System.Runtime.InteropServices.CharSet CharSet" />
      <MemberSignature Language="DocId" Value="F:System.Runtime.InteropServices.StructLayoutAttribute.CharSet" />
      <MemberSignature Language="VB.NET" Value="Public CharSet As CharSet " />
      <MemberSignature Language="C++ CLI" Value="public: System::Runtime::InteropServices::CharSet CharSet;" />
      <MemberSignature Language="F#" Value="val mutable CharSet : System.Runtime.InteropServices.CharSet" Usage="System.Runtime.InteropServices.StructLayoutAttribute.CharSet" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Runtime.InteropServices.CharSet</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Показывает, каким образом следует выполнять маршалирование по умолчанию для полей строковых данных в классе (как <see langword="LPWSTR" /> или как <see langword="LPSTR" />).</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Если `CharSet` имеет значение <xref:System.Runtime.InteropServices.CharSet.Unicode?displayProperty=nameWithType>, все строковые аргументы преобразуются в символы Юникода (`LPWSTR`) перед передачей в неуправляемую реализацию. Если поле имеет значение <xref:System.Runtime.InteropServices.CharSet.Ansi?displayProperty=nameWithType>, строки преобразуются в строки ANSI (`LPSTR`). Если `CharSet` имеет значение <xref:System.Runtime.InteropServices.CharSet.Auto?displayProperty=nameWithType>, преобразование зависит от платформы (ANSI для Windows 98 и Windows Me и Юникод в более поздних версиях).  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Runtime.InteropServices.CharSet" />
      </Docs>
    </Member>
    <Member MemberName="Pack">
      <MemberSignature Language="C#" Value="public int Pack;" />
      <MemberSignature Language="ILAsm" Value=".field public int32 Pack" />
      <MemberSignature Language="DocId" Value="F:System.Runtime.InteropServices.StructLayoutAttribute.Pack" />
      <MemberSignature Language="VB.NET" Value="Public Pack As Integer " />
      <MemberSignature Language="C++ CLI" Value="public: int Pack;" />
      <MemberSignature Language="F#" Value="val mutable Pack : int" Usage="System.Runtime.InteropServices.StructLayoutAttribute.Pack" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Управляет выравниванием полей данных для класса или структуры в памяти.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Runtime.InteropServices.StructLayoutAttribute.Pack> Поле управляет выравниванием полей типа в памяти.  Это влияет на <xref:System.Runtime.InteropServices.LayoutKind.Sequential?displayProperty=nameWithType> и <xref:System.Runtime.InteropServices.LayoutKind.Explicit?displayProperty=nameWithType>. По умолчанию равно 0, указывает на значение по умолчанию упаковочный размер для текущей платформы. Значение <xref:System.Runtime.InteropServices.StructLayoutAttribute.Pack> должно быть 0, 1, 2, 4, 8, 16, 32, 64 или 128:  
  
 Поля экземпляра типа выравниваются по следующим правилам:  
  
-   Выравнивание типа — это размер ее наибольшего элемента (1, 2, 4, 8, байты и т.п.) или заданный размер, равно меньшему.  
  
-   Каждого поля должны соответствовать полям собственный размер (1, 2, 4, 8, байты и т.п.) или выравнивание типа, равно меньшему.  Так как размер его наибольший элемент, который больше или равно другим длины поля, выравнивание по умолчанию типа это обычно означает, что поля выравниваются по их размер. Например, даже если самое большое поле в типе является 64-разрядное (8-байтовое) целое или поле пакета установлено значение 8, <xref:System.Byte> поля выравнивания в 1 байт, <xref:System.Int16> поля выровнены по 2 байта, и <xref:System.Int32> поля выровнены по 4-байтовым границам.  
  
-   Заполнение добавляется между полями для удовлетворения требований к выравниванию.  
  
 Например, рассмотрим следующую структуру, которая состоит из двух <xref:System.Byte> полей и один <xref:System.Int32> поля, если она используется с различными значениями для <xref:System.Runtime.InteropServices.StructLayoutAttribute.Pack> поля.  
  
 [!code-csharp[System.Runtime.InteropServices.StructLayoutAttribute.Pack#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.runtime.interopservices.structlayoutattribute.pack/cs/packex0.cs#1)]  
  
> [!IMPORTANT]
>  Для успешной компиляции примеров на C#, необходимо указать `/unsafe` переключатель компилятора.  
  
 Если указан размер пакета по умолчанию размер структуры — 8 байт. Два байта занимают первые два байта памяти, так как необходимо согласовать байт на один байт. Так как выравнивание по умолчанию типа равно 4 байта, что размер наибольшего поля `i3`, существует два байт заполнения, следуют целочисленного поля.  
  
 [!code-csharp[System.Runtime.InteropServices.StructLayoutAttribute.Pack#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.runtime.interopservices.structlayoutattribute.pack/cs/packex1.cs#2)]  
  
 Если <xref:System.Runtime.InteropServices.StructLayoutAttribute.Pack> имеет значение 2, размер структуры — 6 байт. Как и прежде, два байта занимают первые два байта памяти. Поскольку поля теперь выровнены по 2 байта, нет без заполнения между вторым байтом и целое число.  
  
 [!code-csharp[System.Runtime.InteropServices.StructLayoutAttribute.Pack#3](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.runtime.interopservices.structlayoutattribute.pack/cs/packex2.cs#3)]  
  
 Если <xref:System.Runtime.InteropServices.StructLayoutAttribute.Pack> имеет значение 4, размер структуры является таким же, как в случае по умолчанию, где тип выравнивания был определен на размер его самое большое поле, `i3`, — 4.  
  
 [!code-csharp[System.Runtime.InteropServices.StructLayoutAttribute.Pack#4](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.runtime.interopservices.structlayoutattribute.pack/cs/packex3.cs#4)]  
  
 Если <xref:System.Runtime.InteropServices.StructLayoutAttribute.Pack> задано значение 8, размер структуры по-прежнему остается такое же, как значение по умолчанию регистр, так как `i3` выравнивает поле на 4-байтовой границе, которой меньше, чем 8-байтовой границе, задаваемое полем пакет.  
  
 [!code-csharp[System.Runtime.InteropServices.StructLayoutAttribute.Pack#5](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.runtime.interopservices.structlayoutattribute.pack/cs/packex4.cs#5)]  
  
 Чтобы воспользоваться другой пример, рассмотрим следующую структуру, которая состоит из полей по два байта, поле один 32-разрядное целое число со знаком, один массив одноэлементных байт и десятичное значение. По умолчанию, упаковочный размер размер структуры составляет 28 байт. Два байта занимают первые два байта памяти, следуют двух байт заполнения, следуют целое число. Далее следует массив однобайтовых, следуют три байта заполнения. Наконец <xref:System.Decimal> поле d5, выравнивание по 4-байтовой границе, так как десятичное значение состоит из четырех <xref:System.Int32> полей, поэтому его выравнивание основано на самой большой размер поля, а не на размер <xref:System.Decimal> структуру в целом.  
  
 [!code-csharp[System.Runtime.InteropServices.StructLayoutAttribute.Pack#6](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.runtime.interopservices.structlayoutattribute.pack/cs/packex5.cs#6)]  
  
 Если <xref:System.Runtime.InteropServices.StructLayoutAttribute.Pack> имеет значение 2, размер структуры — 24 байта. По сравнению с выравнивание по умолчанию были удалены два байта внутреннего отступа между двумя байтами и целое число, поскольку тип выравнивания теперь 4, а не 2. И три байта заполнения после `a4` были заменены один байт заполнения, так как `d5` теперь выравнивает на 2-байтовой границе, а не с 4-байтовой границе.  
  
 [!code-csharp[System.Runtime.InteropServices.StructLayoutAttribute.Pack#7](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.runtime.interopservices.structlayoutattribute.pack/cs/packex6.cs#7)]  
  
 Если <xref:System.Runtime.InteropServices.StructLayoutAttribute.Pack> задано значение 8, размер структуры является таким же, как в случае по умолчанию из-за меньше 8 всех требований к выравниванию в этой структуре.  
  
 [!code-csharp[System.Runtime.InteropServices.StructLayoutAttribute.Pack#8](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.runtime.interopservices.structlayoutattribute.pack/cs/packex7.cs#8)]  
  
 <xref:System.Runtime.InteropServices.StructLayoutAttribute.Pack> Поле часто используется при экспорте структур во время диска и сетевых операций записи. Это поле также часто используется во время вызова неуправляемого кода и операции взаимодействия.  
  
 Иногда поле используется для уменьшения требований к памяти, производя плотного размера упаковки. Однако это использование требует тщательного анализа существующих аппаратных ограничений и фактически может привести к снижению производительности.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Size">
      <MemberSignature Language="C#" Value="public int Size;" />
      <MemberSignature Language="ILAsm" Value=".field public int32 Size" />
      <MemberSignature Language="DocId" Value="F:System.Runtime.InteropServices.StructLayoutAttribute.Size" />
      <MemberSignature Language="VB.NET" Value="Public Size As Integer " />
      <MemberSignature Language="C++ CLI" Value="public: int Size;" />
      <MemberSignature Language="F#" Value="val mutable Size : int" Usage="System.Runtime.InteropServices.StructLayoutAttribute.Size" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Указывает абсолютный размер класса или структуры.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Это поле должно быть равно или больше, чем общий размер в байтах членов класса или структуры. Это поле является главным образом для компиляторов, которые хотят расширить память, занятую структуры для прямого неуправляемого доступа. Например это поле можно использовать при работе с объединения, которые не представлены в метаданных напрямую.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Value">
      <MemberSignature Language="C#" Value="public System.Runtime.InteropServices.LayoutKind Value { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Runtime.InteropServices.LayoutKind Value" />
      <MemberSignature Language="DocId" Value="P:System.Runtime.InteropServices.StructLayoutAttribute.Value" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Value As LayoutKind" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Runtime::InteropServices::LayoutKind Value { System::Runtime::InteropServices::LayoutKind get(); };" />
      <MemberSignature Language="F#" Value="member this.Value : System.Runtime.InteropServices.LayoutKind" Usage="System.Runtime.InteropServices.StructLayoutAttribute.Value" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Runtime.InteropServices.LayoutKind</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Получает значение <see cref="T:System.Runtime.InteropServices.LayoutKind" />, определяющее компоновку класса или структуры.</summary>
        <value>Одно из значений перечисления, определяющих компоновку класса или структуры.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
  </Members>
</Type>