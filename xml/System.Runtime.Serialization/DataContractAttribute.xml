<Type Name="DataContractAttribute" FullName="System.Runtime.Serialization.DataContractAttribute">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="9381053a785b7c23121ec86b709cd483651a437a" />
    <Meta Name="ms.sourcegitcommit" Value="1b899505ed6d42225f2b3c9150bfdc080d0d1f9b" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="ru-RU" />
    <Meta Name="ms.lasthandoff" Value="04/28/2018" />
  </Metadata>
  <TypeSignature Language="C#" Value="public sealed class DataContractAttribute : Attribute" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed beforefieldinit DataContractAttribute extends System.Attribute" />
  <TypeSignature Language="DocId" Value="T:System.Runtime.Serialization.DataContractAttribute" />
  <TypeSignature Language="VB.NET" Value="Public NotInheritable Class DataContractAttribute&#xA;Inherits Attribute" />
  <TypeSignature Language="C++ CLI" Value="public ref class DataContractAttribute sealed : Attribute" />
  <AssemblyInfo>
    <AssemblyName>System.Runtime.Serialization.Primitives</AssemblyName>
    <AssemblyVersion>4.1.1.0</AssemblyVersion>
    <AssemblyVersion>4.2.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.1.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>System.Runtime.Serialization</AssemblyName>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Attribute</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute>
      <AttributeName>System.AttributeUsage(System.AttributeTargets.Class | System.AttributeTargets.Enum | System.AttributeTargets.Struct, AllowMultiple=false, Inherited=false)</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>
      <span data-ttu-id="e647a-101">Указывает, что тип определяет или реализует контракт данных и может быть сериализован сериализатором, таким как <see cref="T:System.Runtime.Serialization.DataContractSerializer" />.</span>
      <span class="sxs-lookup">
        <span data-stu-id="e647a-101">Specifies that the type defines or implements a data contract and is serializable by a serializer, such as the <see cref="T:System.Runtime.Serialization.DataContractSerializer" />.</span>
      </span>
      <span data-ttu-id="e647a-102">Чтобы сделать тип сериализуемым, авторы типа должны определить для него контракт данных.</span>
      <span class="sxs-lookup">
        <span data-stu-id="e647a-102">To make their type serializable, type authors must define a data contract for their type.</span>
      </span>
    </summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e647a-103">Применяйте атрибут <xref:System.Runtime.Serialization.DataContractAttribute> к типам (классам, структурам или перечислениям), используемым в операциях сериализации и десериализации средством <xref:System.Runtime.Serialization.DataContractSerializer>.</span><span class="sxs-lookup"><span data-stu-id="e647a-103">Apply the <xref:System.Runtime.Serialization.DataContractAttribute> attribute to types (classes, structures, or enumerations) that are used in serialization and deserialization operations by the <xref:System.Runtime.Serialization.DataContractSerializer>.</span></span> <span data-ttu-id="e647a-104">Если отправка и получение сообщений выполняются с помощью инфраструктуры [!INCLUDE[indigo1](~/includes/indigo1-md.md)], следует применять атрибут <xref:System.Runtime.Serialization.DataContractAttribute> ко всем классам, которые хранят и управляют содержащимися в сообщениях данными.</span><span class="sxs-lookup"><span data-stu-id="e647a-104">If you send or receive messages by using the [!INCLUDE[indigo1](~/includes/indigo1-md.md)] infrastructure, you should also apply the <xref:System.Runtime.Serialization.DataContractAttribute> to any classes that hold and manipulate data sent in messages.</span></span> [!INCLUDE[crabout](~/includes/crabout-md.md)]<span data-ttu-id="e647a-105"> контрактах данных см. в разделе [использование контрактов данных](~/docs/framework/wcf/feature-details/using-data-contracts.md).</span><span class="sxs-lookup"><span data-stu-id="e647a-105"> data contracts, see [Using Data Contracts](~/docs/framework/wcf/feature-details/using-data-contracts.md).</span></span>  
  
 <span data-ttu-id="e647a-106">Также необходимо применить атрибут <xref:System.Runtime.Serialization.DataMemberAttribute> ко всем полям, свойствам или событиям, содержащим сериализуемые значения.</span><span class="sxs-lookup"><span data-stu-id="e647a-106">You must also apply the <xref:System.Runtime.Serialization.DataMemberAttribute> to any field, property, or event that holds values you want to serialize.</span></span> <span data-ttu-id="e647a-107">Применение атрибута <xref:System.Runtime.Serialization.DataContractAttribute> явно разрешает <xref:System.Runtime.Serialization.DataContractSerializer> выполнять сериализацию и десериализацию данных.</span><span class="sxs-lookup"><span data-stu-id="e647a-107">By applying the <xref:System.Runtime.Serialization.DataContractAttribute>, you explicitly enable the <xref:System.Runtime.Serialization.DataContractSerializer> to serialize and deserialize the data.</span></span>  
  
> [!CAUTION]
>  <span data-ttu-id="e647a-108">Атрибут <xref:System.Runtime.Serialization.DataMemberAttribute> можно применять к закрытым полям.</span><span class="sxs-lookup"><span data-stu-id="e647a-108">You can apply the <xref:System.Runtime.Serialization.DataMemberAttribute> to private fields.</span></span> <span data-ttu-id="e647a-109">Необходимо помнить, что возвращаемые полем данные (даже если поле закрытое) сериализуются и десериализуются, и, следовательно, могут быть просмотрены или перехвачены злоумышленником или процессом.</span><span class="sxs-lookup"><span data-stu-id="e647a-109">Be aware that the data returned by the field (even if it is private) is serialized and deserialized, and thus can be viewed or intercepted by a malicious user or process.</span></span>  
  
 [!INCLUDE[crabout](~/includes/crabout-md.md)]<span data-ttu-id="e647a-110"> контракты данных, см. в разделах, перечисленных в [использование контрактов данных](~/docs/framework/wcf/feature-details/using-data-contracts.md).</span><span class="sxs-lookup"><span data-stu-id="e647a-110"> data contracts, see the topics listed in [Using Data Contracts](~/docs/framework/wcf/feature-details/using-data-contracts.md).</span></span>  
  
## <a name="data-contracts"></a><span data-ttu-id="e647a-111">Контракты данных</span><span class="sxs-lookup"><span data-stu-id="e647a-111">Data Contracts</span></span>  
 <span data-ttu-id="e647a-112">Объект *контракт данных* — это абстрактное описание набора полей с именем и типом данных для каждого поля.</span><span class="sxs-lookup"><span data-stu-id="e647a-112">A *data contract* is an abstract description of a set of fields with a name and data type for each field.</span></span> <span data-ttu-id="e647a-113">Контракт данных существует вне любых реализаций, что делает возможным взаимодействие служб на разных платформах.</span><span class="sxs-lookup"><span data-stu-id="e647a-113">The data contract exists outside of any single implementation to allow services on different platforms to interoperate.</span></span> <span data-ttu-id="e647a-114">Поскольку данные, передаваемые между службами, соответствуют одному и тому же контракту, все службы могут обработать данные.</span><span class="sxs-lookup"><span data-stu-id="e647a-114">As long as the data passed between the services conforms to the same contract, all the services can process the data.</span></span> <span data-ttu-id="e647a-115">Этот процесс называется также *слабо связанная система*.</span><span class="sxs-lookup"><span data-stu-id="e647a-115">This processing is also known as a *loosely coupled system*.</span></span> <span data-ttu-id="e647a-116">Контракт данных похож на интерфейс в том, что контракт указывает, каким образом должны подаваться данные, чтобы они могли быть обработаны приложением.</span><span class="sxs-lookup"><span data-stu-id="e647a-116">A data contract is also similar to an interface in that the contract specifies how data must be delivered so that it can be processed by an application.</span></span> <span data-ttu-id="e647a-117">Например, контракт данных может вызвать тип данных "Person", имеющий два текстовых поля "FirstName" и "LastName".</span><span class="sxs-lookup"><span data-stu-id="e647a-117">For example, the data contract may call for a data type named "Person" that has two text fields, named "FirstName" and "LastName".</span></span> <span data-ttu-id="e647a-118">Чтобы создать контракт данных, примените атрибут <xref:System.Runtime.Serialization.DataContractAttribute> к классу и атрибут <xref:System.Runtime.Serialization.DataMemberAttribute> ко всем полям или свойствам, которые требуется сериализовать.</span><span class="sxs-lookup"><span data-stu-id="e647a-118">To create a data contract, apply the <xref:System.Runtime.Serialization.DataContractAttribute> to the class and apply the <xref:System.Runtime.Serialization.DataMemberAttribute> to any fields or properties that must be serialized.</span></span> <span data-ttu-id="e647a-119">После сериализации данные соответствуют контракту данных, неявно встроенному в этот тип.</span><span class="sxs-lookup"><span data-stu-id="e647a-119">When serialized, the data conforms to the data contract that is implicitly built into the type.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="e647a-120">Поведение контракта данных при наследовании существенно отличается от поведения реального интерфейса.</span><span class="sxs-lookup"><span data-stu-id="e647a-120">A data contract differs significantly from an actual interface in its inheritance behavior.</span></span> <span data-ttu-id="e647a-121">Интерфейсы наследуются любыми производными типами.</span><span class="sxs-lookup"><span data-stu-id="e647a-121">Interfaces are inherited by any derived types.</span></span> <span data-ttu-id="e647a-122">Если применить атрибут <xref:System.Runtime.Serialization.DataContractAttribute> к базовому классу, производные типы не будут наследовать атрибут или поведение.</span><span class="sxs-lookup"><span data-stu-id="e647a-122">When you apply the <xref:System.Runtime.Serialization.DataContractAttribute> to a base class, the derived types do not inherit the attribute or the behavior.</span></span> <span data-ttu-id="e647a-123">Но если у производного типа есть контракт данных, элементы данных базового класса сериализуются.</span><span class="sxs-lookup"><span data-stu-id="e647a-123">However, if a derived type has a data contract, the data members of the base class are serialized.</span></span> <span data-ttu-id="e647a-124">Однако необходимо применить атрибут <xref:System.Runtime.Serialization.DataMemberAttribute> к новым членам производного класса, чтобы сделать их сериализуемыми.</span><span class="sxs-lookup"><span data-stu-id="e647a-124">However, you must apply the <xref:System.Runtime.Serialization.DataMemberAttribute> to new members in a derived class to make them serializable.</span></span>  
  
## <a name="xml-schema-documents-and-the-svcutil-tool"></a><span data-ttu-id="e647a-125">Документы схемы XML и средство SvcUtil</span><span class="sxs-lookup"><span data-stu-id="e647a-125">XML Schema Documents and the SvcUtil Tool</span></span>  
 <span data-ttu-id="e647a-126">При обмене данными с другими службами необходимо описать контракт данных.</span><span class="sxs-lookup"><span data-stu-id="e647a-126">If you are exchanging data with other services, you must describe the data contract.</span></span> <span data-ttu-id="e647a-127">Чтобы определить контракты данных для текущей версии <xref:System.Runtime.Serialization.DataContractSerializer>, можно использовать схему XML.</span><span class="sxs-lookup"><span data-stu-id="e647a-127">For the current version of the <xref:System.Runtime.Serialization.DataContractSerializer>, an XML schema can be used to define data contracts.</span></span> <span data-ttu-id="e647a-128">(Для этой же цели могут использоваться другие формы описания/метаданных.) Чтобы создать XML-схемы из приложения, используйте [ServiceModel Metadata Utility Tool (Svcutil.exe)](~/docs/framework/wcf/servicemodel-metadata-utility-tool-svcutil-exe.md) с **/dconly** параметр командной строки.</span><span class="sxs-lookup"><span data-stu-id="e647a-128">(Other forms of metadata/description could be used for the same purpose.) To create an XML schema from your application, use the [ServiceModel Metadata Utility Tool (Svcutil.exe)](~/docs/framework/wcf/servicemodel-metadata-utility-tool-svcutil-exe.md) with the **/dconly** command line option.</span></span> <span data-ttu-id="e647a-129">Если на вход средства передана сборка, по умолчанию средство создает набор схем XML, определяющий все типы контрактов данных этой сборки.</span><span class="sxs-lookup"><span data-stu-id="e647a-129">When the input to the tool is an assembly, by default, the tool generates a set of XML schemas that define all the data contract types found in that assembly.</span></span> <span data-ttu-id="e647a-130">И наоборот, можно использовать средство Svcutil.exe для создания определений классов Visual Basic или C#, соответствующих требованиям схем XML, использующих конструкторы, которые могут быть выражены посредством контрактов данных.</span><span class="sxs-lookup"><span data-stu-id="e647a-130">Conversely, you can also use the Svcutil.exe tool to create Visual Basic or C# class definitions that conform to the requirements of XML schemas that use constructs that can be expressed by data contracts.</span></span> <span data-ttu-id="e647a-131">В этом случае **/dconly** параметр командной строки не является обязательным.</span><span class="sxs-lookup"><span data-stu-id="e647a-131">In this case, the **/dconly** command line option is not required.</span></span>  
  
 <span data-ttu-id="e647a-132">Если на вход средства Svcutil.exe передана схема XML, по умолчанию средство создает набор классов.</span><span class="sxs-lookup"><span data-stu-id="e647a-132">If the input to the Svcutil.exe tool is an XML schema, by default, the tool creates a set of classes.</span></span> <span data-ttu-id="e647a-133">При рассмотрении этих классов можно заметить, что был применен атрибут <xref:System.Runtime.Serialization.DataContractAttribute>.</span><span class="sxs-lookup"><span data-stu-id="e647a-133">If you examine those classes, you find that the <xref:System.Runtime.Serialization.DataContractAttribute> has been applied.</span></span> <span data-ttu-id="e647a-134">Эти классы можно использовать для создания нового приложения обработки данных, которыми требуется обмениваться с другими службами.</span><span class="sxs-lookup"><span data-stu-id="e647a-134">You can use those classes to create a new application to process data that must be exchanged with other services.</span></span>  
  
 <span data-ttu-id="e647a-135">Также можно запустить средство для конечной точки, возвращающей документ на языке описания служб (WSDL), чтобы автоматически создать код и конфигурацию для создания клиента [!INCLUDE[indigo1](~/includes/indigo1-md.md)].</span><span class="sxs-lookup"><span data-stu-id="e647a-135">You can also run the tool against an endpoint that returns a Web Services Description Language (WSDL) document to automatically generate the code and configuration to create an [!INCLUDE[indigo1](~/includes/indigo1-md.md)] client.</span></span> <span data-ttu-id="e647a-136">Созданный код включает типы, отмеченные атрибутом <xref:System.Runtime.Serialization.DataContractAttribute>.</span><span class="sxs-lookup"><span data-stu-id="e647a-136">The generated code includes types that are marked with the <xref:System.Runtime.Serialization.DataContractAttribute>.</span></span>  
  
## <a name="reusing-existing-types"></a><span data-ttu-id="e647a-137">Повторное использование существующих типов</span><span class="sxs-lookup"><span data-stu-id="e647a-137">Reusing Existing Types</span></span>  
 <span data-ttu-id="e647a-138">Существует два основных требования контракта данных: наличие постоянного имени и наличие списка элементов.</span><span class="sxs-lookup"><span data-stu-id="e647a-138">A data contract has two basic requirements: a stable name and a list of members.</span></span> <span data-ttu-id="e647a-139">Постоянное имя состоит из универсального кода ресурса (URI) пространства имен и локального имени контракта.</span><span class="sxs-lookup"><span data-stu-id="e647a-139">The stable name consists of the namespace uniform resource identifier (URI) and the local name of the contract.</span></span> <span data-ttu-id="e647a-140">По умолчанию при применении <xref:System.Runtime.Serialization.DataContractAttribute> к классу он использует имя класса, как локальное имя и пространство имен класса (с префиксом «http://schemas.datacontract.org/2004/07/») как URI пространства имен.</span><span class="sxs-lookup"><span data-stu-id="e647a-140">By default, when you apply the <xref:System.Runtime.Serialization.DataContractAttribute> to a class, it uses the class name as the local name and the class's namespace (prefixed with "http://schemas.datacontract.org/2004/07/") as the namespace URI.</span></span> <span data-ttu-id="e647a-141">Значения по умолчанию можно переопределить, задав свойства <xref:System.Runtime.Serialization.DataContractAttribute.Name%2A> и <xref:System.Runtime.Serialization.DataContractAttribute.Namespace%2A>.</span><span class="sxs-lookup"><span data-stu-id="e647a-141">You can override the defaults by setting the <xref:System.Runtime.Serialization.DataContractAttribute.Name%2A> and <xref:System.Runtime.Serialization.DataContractAttribute.Namespace%2A> properties.</span></span> <span data-ttu-id="e647a-142">Можно также изменить пространство имен, применив атрибут <xref:System.Runtime.Serialization.ContractNamespaceAttribute> к пространству имен.</span><span class="sxs-lookup"><span data-stu-id="e647a-142">You can also change the namespace by applying the <xref:System.Runtime.Serialization.ContractNamespaceAttribute> to the namespace.</span></span> <span data-ttu-id="e647a-143">Используйте эту возможность, когда существует тип, обрабатывающий данные необходимым образом, но его пространство имен и имя класса отличаются от контракта данных.</span><span class="sxs-lookup"><span data-stu-id="e647a-143">Use this capability when you have an existing type that processes data exactly as you require but has a different namespace and class name from the data contract.</span></span> <span data-ttu-id="e647a-144">Переопределив значения по умолчанию, можно повторно использовать этот существующий тип и обеспечить соответствие сериализованных данных контракту данных.</span><span class="sxs-lookup"><span data-stu-id="e647a-144">By overriding the default values, you can reuse your existing type and have the serialized data conform to the data contract.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="e647a-145">В любом коде можно использовать слово `DataContract` вместо длинного <xref:System.Runtime.Serialization.DataContractAttribute>.</span><span class="sxs-lookup"><span data-stu-id="e647a-145">In any code, you can use the word `DataContract` instead of the longer <xref:System.Runtime.Serialization.DataContractAttribute>.</span></span>  
  
## <a name="versioning"></a><span data-ttu-id="e647a-146">Управление версиями</span><span class="sxs-lookup"><span data-stu-id="e647a-146">Versioning</span></span>  
 <span data-ttu-id="e647a-147">Контракт данных также может размещать свои более поздние версии.</span><span class="sxs-lookup"><span data-stu-id="e647a-147">A data contract can also accommodate later versions of itself.</span></span> <span data-ttu-id="e647a-148">То есть в случае, когда более поздняя версия контракта включает дополнительные данные, эти данные хранятся и возвращаются отправителю без изменений.</span><span class="sxs-lookup"><span data-stu-id="e647a-148">That is, when a later version of the contract includes extra data, that data is stored and returned to a sender untouched.</span></span> <span data-ttu-id="e647a-149">Для этого реализуйте интерфейс <xref:System.Runtime.Serialization.IExtensibleDataObject>.</span><span class="sxs-lookup"><span data-stu-id="e647a-149">To do this, implement the <xref:System.Runtime.Serialization.IExtensibleDataObject> interface.</span></span>  
  
 [!INCLUDE[crabout](~/includes/crabout-md.md)]<span data-ttu-id="e647a-150"> Управление версиями, в разделе [управление версиями контракта данных](~/docs/framework/wcf/feature-details/data-contract-versioning.md).</span><span class="sxs-lookup"><span data-stu-id="e647a-150"> versioning, see [Data Contract Versioning](~/docs/framework/wcf/feature-details/data-contract-versioning.md).</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="e647a-151">В приведенном ниже примере выполняется сериализация и десериализация класса `Person`, к которому был применен атрибут <xref:System.Runtime.Serialization.DataContractAttribute>.</span><span class="sxs-lookup"><span data-stu-id="e647a-151">The following example serializes and deserializes a class named `Person` to which the <xref:System.Runtime.Serialization.DataContractAttribute> has been applied.</span></span> <span data-ttu-id="e647a-152">Обратите внимание, что свойствам <xref:System.Runtime.Serialization.DataContractAttribute.Namespace%2A> и <xref:System.Runtime.Serialization.DataContractAttribute.Name%2A> были заданы значения, переопределяющие параметры по умолчанию.</span><span class="sxs-lookup"><span data-stu-id="e647a-152">Note that the <xref:System.Runtime.Serialization.DataContractAttribute.Namespace%2A> and <xref:System.Runtime.Serialization.DataContractAttribute.Name%2A> properties have been set to values that override the default settings.</span></span>  
  
 [!code-csharp[DataContractAttribute#1](~/samples/snippets/csharp/VS_Snippets_CFX/datacontractattribute/cs/overview.cs#1)]
 [!code-vb[DataContractAttribute#1](~/samples/snippets/visualbasic/VS_Snippets_CFX/datacontractattribute/vb/overview.vb#1)]  
  
 ]]></format>
    </remarks>
    <altmember cref="T:System.Runtime.Serialization.IExtensibleDataObject" />
    <altmember cref="T:System.Runtime.Serialization.ExtensionDataObject" />
    <altmember cref="T:System.Runtime.Serialization.DataContractSerializer" />
    <altmember cref="T:System.Runtime.Serialization.DataMemberAttribute" />
    <altmember cref="T:System.Runtime.Serialization.ISerializable" />
    <altmember cref="T:System.Runtime.Serialization.KnownTypeAttribute" />
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public DataContractAttribute ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.Serialization.DataContractAttribute.#ctor" />
      <MemberSignature Language="VB.NET" Value="Public Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; DataContractAttribute();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Serialization.Primitives</AssemblyName>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Serialization</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="e647a-153">Инициализирует новый экземпляр класса <see cref="T:System.Runtime.Serialization.DataContractAttribute" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e647a-153">Initializes a new instance of the <see cref="T:System.Runtime.Serialization.DataContractAttribute" /> class.</span>
          </span>
        </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="IsNameSetExplicitly">
      <MemberSignature Language="C#" Value="public bool IsNameSetExplicitly { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsNameSetExplicitly" />
      <MemberSignature Language="DocId" Value="P:System.Runtime.Serialization.DataContractAttribute.IsNameSetExplicitly" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsNameSetExplicitly As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsNameSetExplicitly { bool get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Serialization.Primitives</AssemblyName>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Serialization</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="e647a-154">Получает значение, указывающее, был ли объект <see cref="P:System.Runtime.Serialization.DataContractAttribute.Name" /> задан явно.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e647a-154">Gets whether <see cref="P:System.Runtime.Serialization.DataContractAttribute.Name" /> has been explicitly set.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="e647a-155">Возвращает <see langword="true" /> Если это имя было задано явно; в противном случае — <see langword="false" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e647a-155">Returns <see langword="true" /> if the name has been explicitly set; otherwise, <see langword="false" />.</span>
          </span>
        </value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="IsNamespaceSetExplicitly">
      <MemberSignature Language="C#" Value="public bool IsNamespaceSetExplicitly { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsNamespaceSetExplicitly" />
      <MemberSignature Language="DocId" Value="P:System.Runtime.Serialization.DataContractAttribute.IsNamespaceSetExplicitly" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsNamespaceSetExplicitly As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsNamespaceSetExplicitly { bool get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Serialization.Primitives</AssemblyName>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Serialization</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="e647a-156">Получает значение, указывающее, был ли объект <see cref="P:System.Runtime.Serialization.DataContractAttribute.Namespace" /> задан явно.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e647a-156">Gets whether <see cref="P:System.Runtime.Serialization.DataContractAttribute.Namespace" /> has been explicitly set.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="e647a-157">Возвращает <see langword="true" /> Если пространство имен было задано явно; в противном случае — <see langword="false" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e647a-157">Returns <see langword="true" /> if the namespace has been explicitly set; otherwise, <see langword="false" />.</span>
          </span>
        </value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="IsReference">
      <MemberSignature Language="C#" Value="public bool IsReference { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsReference" />
      <MemberSignature Language="DocId" Value="P:System.Runtime.Serialization.DataContractAttribute.IsReference" />
      <MemberSignature Language="VB.NET" Value="Public Property IsReference As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsReference { bool get(); void set(bool value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Serialization.Primitives</AssemblyName>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Serialization</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="e647a-158">Возвращает или задает значение, указывающее, следует ли сохранять данные ссылки на объект.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e647a-158">Gets or sets a value that indicates whether to preserve object reference data.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="e647a-159">Значение <see langword="true" />, если требуется сохранить данные ссылки на объект с помощью стандартного XML; в противном случае — значение <see langword="false" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e647a-159">
              <see langword="true" /> to keep object reference data using standard XML; otherwise, <see langword="false" />.</span>
          </span>
          <span data-ttu-id="e647a-160">Значение по умолчанию: <see langword="false" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e647a-160">The default is <see langword="false" />.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e647a-161">Используйте свойство `IsReference`, чтобы задать <xref:System.Runtime.Serialization.DataContractSerializer> вставлять конструкции XML, сохраняющие сведения о ссылках на объект.</span><span class="sxs-lookup"><span data-stu-id="e647a-161">Use the `IsReference` property to instruct the <xref:System.Runtime.Serialization.DataContractSerializer> to insert XML constructs that preserve object reference information.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Runtime.Serialization.DataContractSerializer.PreserveObjectReferences" />
      </Docs>
    </Member>
    <Member MemberName="IsReferenceSetExplicitly">
      <MemberSignature Language="C#" Value="public bool IsReferenceSetExplicitly { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsReferenceSetExplicitly" />
      <MemberSignature Language="DocId" Value="P:System.Runtime.Serialization.DataContractAttribute.IsReferenceSetExplicitly" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsReferenceSetExplicitly As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsReferenceSetExplicitly { bool get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Serialization.Primitives</AssemblyName>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Serialization</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="e647a-162">Получает значение, указывающее, был ли объект <see cref="P:System.Runtime.Serialization.DataContractAttribute.IsReference" /> задан явно.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e647a-162">Gets whether <see cref="P:System.Runtime.Serialization.DataContractAttribute.IsReference" /> has been explicitly set.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="e647a-163">
            <see langword="true" /> Если ссылка была задана явно; в противном случае <see langword="false" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e647a-163">
              <see langword="true" /> if the reference has been explicitly set; otherwise, <see langword="false" />.</span>
          </span>
        </value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Name">
      <MemberSignature Language="C#" Value="public string Name { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string Name" />
      <MemberSignature Language="DocId" Value="P:System.Runtime.Serialization.DataContractAttribute.Name" />
      <MemberSignature Language="VB.NET" Value="Public Property Name As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ Name { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Serialization.Primitives</AssemblyName>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Serialization</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="e647a-164">Возвращает или задает имя для контракта данных типа.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e647a-164">Gets or sets the name of the data contract for the type.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="e647a-165">Локальное имя контракта данных.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e647a-165">The local name of a data contract.</span>
          </span>
          <span data-ttu-id="e647a-166">Значение по умолчанию — это имя класса, к которому применяется атрибут.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e647a-166">The default is the name of the class that the attribute is applied to.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e647a-167">Свойство <xref:System.Runtime.Serialization.DataContractAttribute.Name%2A> используется для задания имени контракту данных, которое является именем типа в схеме XML.</span><span class="sxs-lookup"><span data-stu-id="e647a-167">The <xref:System.Runtime.Serialization.DataContractAttribute.Name%2A> property is used to give a name to a data contract, which is the name of the type in XML schema.</span></span> <span data-ttu-id="e647a-168">Дополнительные сведения см. в разделе [имена контрактов данных](~/docs/framework/wcf/feature-details/data-contract-names.md).</span><span class="sxs-lookup"><span data-stu-id="e647a-168">For more information, see [Data Contract Names](~/docs/framework/wcf/feature-details/data-contract-names.md).</span></span>  
  
 <span data-ttu-id="e647a-169">По умолчанию имя контракта данных — это имя типа, к которому применяется атрибут <xref:System.Runtime.Serialization.DataContractAttribute>.</span><span class="sxs-lookup"><span data-stu-id="e647a-169">By default, the name of a data contract is the name of the type that the <xref:System.Runtime.Serialization.DataContractAttribute> is applied to.</span></span> <span data-ttu-id="e647a-170">Однако могут существовать причины изменить это имя по умолчанию.</span><span class="sxs-lookup"><span data-stu-id="e647a-170">However, there may be reasons to change this default name.</span></span> <span data-ttu-id="e647a-171">Одной из них может быть необходимость разрешить существующему типу обрабатывать данные, которые должны соответствовать существующему контракту данных.</span><span class="sxs-lookup"><span data-stu-id="e647a-171">One reason is to allow an existing type to process data that must conform to an existing data contract.</span></span> <span data-ttu-id="e647a-172">Например, существует тип `Person`, но для контракта данных, встроенного в схему XML, требуется, чтобы имя было `Customer`.</span><span class="sxs-lookup"><span data-stu-id="e647a-172">For example, there exists a type named `Person` but the data contract, embodied in an XML schema, requires that the name be `Customer`.</span></span> <span data-ttu-id="e647a-173">Контракт можно выполнить, задав значению свойства значение `Customer`.</span><span class="sxs-lookup"><span data-stu-id="e647a-173">The contract can be satisfied by setting the property value to `Customer`.</span></span>  
  
 <span data-ttu-id="e647a-174">Другой причиной может быть необходимость разрешить создание имен, которые недопустимы в качестве имени типа.</span><span class="sxs-lookup"><span data-stu-id="e647a-174">A second reason is to allow the generation of names that are invalid as type names.</span></span> <span data-ttu-id="e647a-175">Например, если для контракта данных требуется имя, не разрешенное в качестве имени типа, задайте значению свойства это запрещенное имя.</span><span class="sxs-lookup"><span data-stu-id="e647a-175">For example, if a data contract demands a name that is not allowable as a type name, set the property value to that disallowed name.</span></span> <span data-ttu-id="e647a-176">Например, строку "$value" нельзя использовать в качестве имени типа, но можно использовать как значение свойства <xref:System.Runtime.Serialization.DataContractAttribute.Name%2A>.</span><span class="sxs-lookup"><span data-stu-id="e647a-176">For instance, the string "$value" is disallowed as a type name but is allowed as a <xref:System.Runtime.Serialization.DataContractAttribute.Name%2A> property value.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Namespace">
      <MemberSignature Language="C#" Value="public string Namespace { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string Namespace" />
      <MemberSignature Language="DocId" Value="P:System.Runtime.Serialization.DataContractAttribute.Namespace" />
      <MemberSignature Language="VB.NET" Value="Public Property Namespace As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ Namespace { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Serialization.Primitives</AssemblyName>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Serialization</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="e647a-177">Возвращает или задает пространство имен для контракта данных типа.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e647a-177">Gets or sets the namespace for the data contract for the type.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="e647a-178">Пространство имен контракта.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e647a-178">The namespace of the contract.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e647a-179">Используйте это свойство, чтобы задать определенное пространство имен, если тип должен возвращать данные, соответствующие определенному контракту данных.</span><span class="sxs-lookup"><span data-stu-id="e647a-179">Use this property to specify a particular namespace if your type must return data that complies with a specific data contract.</span></span>  
  
> [!TIP]
>  <span data-ttu-id="e647a-180">Для успешной передачи данных имя данных в контракте данных должно быть одинаковым и на клиенте, и на сервере.</span><span class="sxs-lookup"><span data-stu-id="e647a-180">For the data to be successfully transmitted, the name of the data in a data contract must be the same in both the client and the server.</span></span> <span data-ttu-id="e647a-181">Проекты Visual Basic по умолчанию, добавьте префикс для пространства имен, определенные в каждом файле (называется «корневое пространство имен,» с именем проекта).</span><span class="sxs-lookup"><span data-stu-id="e647a-181">Visual Basic projects, by default, add a prefix to the namespace defined in each file (called the "root namespace," named after the project).</span></span> <span data-ttu-id="e647a-182">После добавления префикса пространства имен клиента и сервера для одного и того же типа становятся различными.</span><span class="sxs-lookup"><span data-stu-id="e647a-182">Adding this prefix causes the client and server namespaces to be different for the same type.</span></span> <span data-ttu-id="e647a-183">Решением является установка <xref:System.Runtime.Serialization.DataContractAttribute.Namespace%2A> значение «», или явно задать пространство имен контракта данных в этом свойстве.</span><span class="sxs-lookup"><span data-stu-id="e647a-183">The solution is to set the <xref:System.Runtime.Serialization.DataContractAttribute.Namespace%2A> property to "", or to explicitly set the data contract namespace in this property.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>