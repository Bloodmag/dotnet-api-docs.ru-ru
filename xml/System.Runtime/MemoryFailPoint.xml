<Type Name="MemoryFailPoint" FullName="System.Runtime.MemoryFailPoint">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="61e44bc871caa29f826e0555271beb6a45d2de1c" />
    <Meta Name="ms.sourcegitcommit" Value="d31dc2ede16f6f7bc64e90d9f897ff54c4e3869b" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="ru-RU" />
    <Meta Name="ms.lasthandoff" Value="04/03/2018" />
    <Meta Name="ms.locfileid" Value="30489358" />
  </Metadata>
  <TypeSignature Language="C#" Value="public sealed class MemoryFailPoint : System.Runtime.ConstrainedExecution.CriticalFinalizerObject, IDisposable" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed beforefieldinit MemoryFailPoint extends System.Runtime.ConstrainedExecution.CriticalFinalizerObject implements class System.IDisposable" />
  <TypeSignature Language="DocId" Value="T:System.Runtime.MemoryFailPoint" />
  <TypeSignature Language="VB.NET" Value="Public NotInheritable Class MemoryFailPoint&#xA;Inherits CriticalFinalizerObject&#xA;Implements IDisposable" />
  <TypeSignature Language="C++ CLI" Value="public ref class MemoryFailPoint sealed : System::Runtime::ConstrainedExecution::CriticalFinalizerObject, IDisposable" />
  <AssemblyInfo>
    <AssemblyName>mscorlib</AssemblyName>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>System.Runtime</AssemblyName>
    <AssemblyVersion>4.2.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.1.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Runtime.ConstrainedExecution.CriticalFinalizerObject</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>System.IDisposable</InterfaceName>
    </Interface>
  </Interfaces>
  <Docs>
    <summary>Проверяет наличие достаточного количество ресурсов памяти перед выполнением операции. Этот класс не наследуется.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
> [!NOTE]
>  Этот класс предназначен для использования при разработке дополнительных.  
  
 Создание экземпляра <xref:System.Runtime.MemoryFailPoint> класс создает шлюз памяти. Шлюз памяти проверяет наличие достаточного количество ресурсов, перед запуском действия, которому требуется большой объем памяти. В результате сбоя проверки <xref:System.InsufficientMemoryException> вызываемом исключении. Это исключение не позволяет выполнить операцию при запуске и снижает вероятность сбоев из-за нехватки ресурсов. Это позволяет уменьшить производительность, чтобы избежать <xref:System.OutOfMemoryException> исключения и любые нарушения состояния, которое может быть вызвано неправильной обработки исключений в произвольных местах в коде.  
  
> [!IMPORTANT]
>  Этот тип реализует <xref:System.IDisposable> интерфейса. После завершения с помощью типа следует освободить его прямо или косвенно. Для удаления типа непосредственно вызвать его <xref:System.IDisposable.Dispose%2A> метод в `try` / `catch` блока. Чтобы удалить ее косвенно, использовать языковой конструкции, такие как `using` (в C#) или `Using` (в Visual Basic). Дополнительные сведения см. в разделе «С помощью объекта, реализует интерфейс IDisposable» в <xref:System.IDisposable> разделе интерфейса.  
  
 Путем создания исключения <xref:System.InsufficientMemoryException> исключение, приложение может различать оценки, что операция не сможет завершить и частично завершенной операции, может привести к повреждению состояния приложения. Это позволяет приложению уменьшить частоту пессимистичной политики эскалации, чего может потребоваться выгрузка текущего <xref:System.AppDomain> или перезапуска процесса.  
  
 <xref:System.Runtime.MemoryFailPoint> проверяет, достаточно памяти и последовательных виртуального адресного пространства, доступны ли во все сборки мусора кучи и может увеличить размер файла подкачки.  <xref:System.Runtime.MemoryFailPoint> делает никаких гарантий относительно долгосрочной доступности памяти в течение времени существования шлюза, но вызывающим объектам следует всегда использовать <xref:System.Runtime.MemoryFailPoint.Dispose%2A> метод, чтобы гарантировать, что ресурсы, связанные с <xref:System.Runtime.MemoryFailPoint> освобождаются.  
  
 Для использования шлюза памяти, необходимо создать <xref:System.Runtime.MemoryFailPoint> объекта и указать число мегабайтов (МБ) памяти, должен использовать следующей операции. Если недостаточно памяти недоступен, <xref:System.InsufficientMemoryException> исключения.  
  
 Параметр конструктора должен быть положительным целым числом. Отрицательное значение вызывает <xref:System.ArgumentOutOfRangeException> исключение.  
  
 <xref:System.Runtime.MemoryFailPoint> работает с детализацией 16 МБ. Все значения меньше 16 МБ, обрабатываются как 16 МБ, и другие значения обрабатываются как следующего наибольшего кратно 16 МБ.  
  
   
  
## Examples  
 <xref:System.Runtime.MemoryFailPoint> позволяет приложению замедлить свою работу и избежать исчерпания памяти по принципу повреждения.  Он должен использоваться в лексической области видимости.  Следующий пример запускает потоки для обработки элементов в рабочей очереди.  Перед запуском каждого потока, доступными ресурсами памяти проверяются с помощью <xref:System.Runtime.MemoryFailPoint>.  Если исключение создается, основной метод ожидает, пока объем памяти доступен, прежде чем запускать следующий поток.  
  
 [!code-csharp[MemoryFailPoint#1](~/samples/snippets/csharp/VS_Snippets_CLR/MemoryFailPoint/CS/program.cs#1)]  
  
 ]]></format>
    </remarks>
    <permission cref="T:System.Security.Permissions.SecurityPermission">для вызова неуправляемого кода. Связанное перечисление: <see cref="F:System.Security.Permissions.SecurityPermissionFlag.UnmanagedCode" />. Действие по обеспечению безопасности: <see cref="F:System.Security.Permissions.SecurityAction.LinkDemand" /></permission>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public MemoryFailPoint (int sizeInMegabytes);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(int32 sizeInMegabytes) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.MemoryFailPoint.#ctor(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (sizeInMegabytes As Integer)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; MemoryFailPoint(int sizeInMegabytes);" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="sizeInMegabytes" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="sizeInMegabytes">Необходимый объем памяти в мегабайтах. Это значение должно быть положительным.</param>
        <summary>Инициализирует новый экземпляр класса <see cref="T:System.Runtime.MemoryFailPoint" />, указывающий объем памяти, необходимый для успешного выполнения.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Объем памяти, используемый вашим приложением для обработки рабочего элемента можно определить эмпирически.  Чтобы оценить объем памяти, необходимые приложению для обработки запроса, рассмотрите возможность использования <xref:System.GC.GetTotalMemory%2A?displayProperty=nameWithType> метод, чтобы определить объем памяти, доступной до и после вызова метода, который обрабатывает рабочий элемент. В разделе <xref:System.Runtime.MemoryFailPoint> класс пример кода, который динамически определяет значение для `sizeInMegabytes` параметра.  
  
   
  
## Examples  
 Ниже приведен пример, как определить объем памяти, требуемый методу при выполнении. Данный пример кода является частью большего примера, приведенного для <xref:System.Runtime.MemoryFailPoint> класса.  
  
 [!code-csharp[MemoryFailPoint#2](~/samples/snippets/csharp/VS_Snippets_CLR/MemoryFailPoint/CS/program.cs#2)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">Заданный объем памяти является отрицательным числом.</exception>
        <exception cref="T:System.InsufficientMemoryException">Для выполнения кода, защищенного логическим элементом, недостаточно памяти.</exception>
        <permission cref="T:System.Security.SecurityCriticalAttribute">требуется полное доверие для непосредственно вызывающего метода. Этот член не может использоваться частично доверенным или прозрачным кодом.</permission>
      </Docs>
    </Member>
    <Member MemberName="Dispose">
      <MemberSignature Language="C#" Value="public void Dispose ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Dispose() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.MemoryFailPoint.Dispose" />
      <MemberSignature Language="VB.NET" Value="Public Sub Dispose ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void Dispose();" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.IDisposable.Dispose</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Освобождает все ресурсы, занятые модулем <see cref="T:System.Runtime.MemoryFailPoint" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Вызовите метод <xref:System.Runtime.MemoryFailPoint.Dispose%2A> по окончании использования класса <xref:System.Runtime.MemoryFailPoint>. Метод <xref:System.Runtime.MemoryFailPoint.Dispose%2A> оставляет класс <xref:System.Runtime.MemoryFailPoint> в непригодном для использования состоянии. После вызова метода <xref:System.Runtime.MemoryFailPoint>, необходимо освободить все ссылки на <xref:System.Runtime.MemoryFailPoint> , сборщик мусора мог освободить память, <xref:System.Runtime.MemoryFailPoint> занимаемую. Дополнительные сведения см. в разделе [очистки неуправляемых ресурсов](~/docs/standard/garbage-collection/unmanaged.md) и [метода](~/docs/standard/garbage-collection/implementing-dispose.md).  
  
> [!NOTE]
>  Всегда вызывайте метод <xref:System.Runtime.MemoryFailPoint.Dispose%2A> перед освобождением последней ссылки на класс <xref:System.Runtime.MemoryFailPoint>. В противном случае используемые им ресурсы не будут освобождены до тех пор, пока сборщик мусора не вызовет для объекта <xref:System.Runtime.MemoryFailPoint> метод `Finalize`.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Finalize">
      <MemberSignature Language="C#" Value="~MemoryFailPoint ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance void Finalize() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.MemoryFailPoint.Finalize" />
      <MemberSignature Language="VB.NET" Value="Finalize ()" />
      <MemberSignature Language="C++ CLI" Value="!MemoryFailPoint ()" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Обеспечивает освобождение ресурсов и выполнение других завершающих операций, когда сборщик мусора восстанавливает объект <see cref="T:System.Runtime.MemoryFailPoint" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Сборщик мусора вызывает <xref:System.Runtime.MemoryFailPoint.Finalize%2A> метод, если текущий объект готов к завершению.  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Object.Finalize" />
      </Docs>
    </Member>
  </Members>
</Type>