<Type Name="ProfileOptimization" FullName="System.Runtime.ProfileOptimization">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="858f0245329b150023b79f4536c24c775356f272" />
    <Meta Name="ms.sourcegitcommit" Value="6a0b904069161bbaec4ffd02aa7d9cf38c61e72e" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="ru-RU" />
    <Meta Name="ms.lasthandoff" Value="06/24/2018" />
    <Meta Name="ms.locfileid" Value="36532967" />
  </Metadata>
  <TypeSignature Language="C#" Value="public static class ProfileOptimization" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi abstract sealed beforefieldinit ProfileOptimization extends System.Object" />
  <TypeSignature Language="DocId" Value="T:System.Runtime.ProfileOptimization" />
  <TypeSignature Language="VB.NET" Value="Public Class ProfileOptimization" />
  <TypeSignature Language="C++ CLI" Value="public ref class ProfileOptimization abstract sealed" />
  <TypeSignature Language="F#" Value="type ProfileOptimization = class" />
  <AssemblyInfo>
    <AssemblyName>mscorlib</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>Улучшает производительность при запуске доменов приложения в приложениях, требующих JIT-компилятора путем фоновой компиляции методов, выполнение которых ожидается, на основе профилей, созданных во время предыдущих компиляций.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
> [!IMPORTANT]
>  Оптимизация профиля требуется многоядерных компьютеров. Методы игнорируются на других компьютерах.  
  
 Профиль, который был создан во время предыдущего использования считывается при каждом запуске оптимизации профиля в домене приложения. Сведения в профиле используется вспомогательными фоновая компиляция по требованию, определяя методы, которые, скорее всего, будет выполняться во время запуска. На многоядерных компьютерах это повышает вероятность того, что метод уже скомпилирован по времени, когда это необходимо, чтобы вызвать компилятор JIT не имеет основного потока приложения.  
  
 Файл профиля перезаписывается при каждом использовании, поэтому он всегда содержит самые последние сведения о том, какие методы используются во время запуска.  
  
 Профили оптимизации не ограничиваются запуска домена приложения. Они могут использоваться для всех действий, которые потребуют активно использовать JIT-компилятора. Может поддерживать несколько профилей для домена приложения, чтобы каждый такое действие содержит собственный профиль.  
  
 Чтобы использовать профили оптимизации в домене приложения, необходимо вызвать метод <xref:System.Runtime.ProfileOptimization.SetProfileRoot%2A> метод и укажите папку для хранения профилей. Папка должна уже существовать. Чтобы начать работу с профилем, вызовите <xref:System.Runtime.ProfileOptimization.StartProfile%2A> метод и указать имя файла профиля. Если файл не была записана ранее, он будет создан при первом использовании. Нет времени преимущество первый производительности не создается профиль.  
  
 Оптимизация профиля не изменяет порядок, в котором выполняются методы. Методы не выполняются в фоновом потоке; Если метод скомпилирован, но никогда не вызывается, он просто не используется. Если файл профиля повреждены или не удается записать в указанную папку (например, если папка не существует), выполнение программы продолжается без оптимизации профилирования.  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName="SetProfileRoot">
      <MemberSignature Language="C#" Value="public static void SetProfileRoot (string directoryPath);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void SetProfileRoot(string directoryPath) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.ProfileOptimization.SetProfileRoot(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub SetProfileRoot (directoryPath As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void SetProfileRoot(System::String ^ directoryPath);" />
      <MemberSignature Language="F#" Value="static member SetProfileRoot : string -&gt; unit" Usage="System.Runtime.ProfileOptimization.SetProfileRoot directoryPath" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Security.SecurityCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="directoryPath" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="directoryPath">Полный путь к папке, где хранятся файлы профиля для текущего домена приложения.</param>
        <summary>Включает профилирование оптимизации для текущего домена приложения и задает каталог, в котором хранятся файлы профиля оптимизации. На одноядерном компьютере этот метод игнорируется.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Перед вызовом этого метода необходимо вызвать <xref:System.Runtime.ProfileOptimization.StartProfile%2A> метода в первый раз в текущем домене приложения. При вызове метода <xref:System.Runtime.ProfileOptimization.SetProfileRoot%2A> более одного раза в том же домене приложения, все вызовы после первого учитываются.  
  
 Указанная папка должна существовать. Если не существует, вызов этого метода он не создается и не возникает.  
  
 На компьютерах, которые имеют несколько ядер этот метод учитывается.  
  
 ]]></format>
        </remarks>
        <permission cref="T:System.Security.SecurityCriticalAttribute">требуется полное доверие для непосредственно вызывающего метода. Этот член не может использоваться частично доверенным или прозрачным кодом.</permission>
      </Docs>
    </Member>
    <Member MemberName="StartProfile">
      <MemberSignature Language="C#" Value="public static void StartProfile (string profile);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void StartProfile(string profile) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.ProfileOptimization.StartProfile(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub StartProfile (profile As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void StartProfile(System::String ^ profile);" />
      <MemberSignature Language="F#" Value="static member StartProfile : string -&gt; unit" Usage="System.Runtime.ProfileOptimization.StartProfile profile" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Security.SecurityCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="profile" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="profile">Имя файла профиля для использования.</param>
        <summary>Запускает JIT-компиляцию методов, которые ранее были записаны в указанном файле профиля, в фоновом потоке. Запускает процесс записи текущего использования методов, который позже перезаписывает указанный файл профиля.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Если указанный профиль существует в папке, указанной <xref:System.Runtime.ProfileOptimization.SetProfileRoot%2A> метод, его данные используется для определения порядка, в котором методы компилируются в фоновом потоке. <xref:System.Runtime.ProfileOptimization.StartProfile%2A> Метод создает профиль, если он еще не существует и инициирует запись используйте метод.  
  
 Только методы, вызываемые фактически записываются независимо от того, является ли они скомпилированы в фоновом потоке, или для главного потока приложения. Метод компилируется для основного потока приложения, если приложению необходимо вызывать его, прежде чем компиляции в фоновом потоке.  
  
 Код, который выполняет запись отслеживает частоту, с которой методы компилируются, включая методы, которые компилируются в фоновом потоке и в основном потоке. Если скорость падает ниже заранее определенном уровне, записи останавливается. Также запись остановится, если частота JIT-компиляцию превышает заранее заданное верхний предел.  
  
 Если <xref:System.Runtime.ProfileOptimization.SetProfileRoot%2A> метод не был вызван для текущего домена приложения, или если компьютер имеет несколько ядер <xref:System.Runtime.ProfileOptimization.StartProfile%2A> метод не оказывает влияния.  
  
 ]]></format>
        </remarks>
        <permission cref="T:System.Security.SecurityCriticalAttribute">требуется полное доверие для непосредственно вызывающего метода. Этот член не может использоваться частично доверенным или прозрачным кодом.</permission>
      </Docs>
    </Member>
  </Members>
</Type>