<Type Name="ClaimsAuthorizationManager" FullName="System.Security.Claims.ClaimsAuthorizationManager">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="fa77fc99c06460c962f41c33b11554f448051d19" />
    <Meta Name="ms.sourcegitcommit" Value="6a0b904069161bbaec4ffd02aa7d9cf38c61e72e" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="ru-RU" />
    <Meta Name="ms.lasthandoff" Value="06/24/2018" />
    <Meta Name="ms.locfileid" Value="36531914" />
  </Metadata>
  <TypeSignature Language="C#" Value="public class ClaimsAuthorizationManager : System.IdentityModel.Configuration.ICustomIdentityConfiguration" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit ClaimsAuthorizationManager extends System.Object implements class System.IdentityModel.Configuration.ICustomIdentityConfiguration" />
  <TypeSignature Language="DocId" Value="T:System.Security.Claims.ClaimsAuthorizationManager" />
  <TypeSignature Language="VB.NET" Value="Public Class ClaimsAuthorizationManager&#xA;Implements ICustomIdentityConfiguration" />
  <TypeSignature Language="C++ CLI" Value="public ref class ClaimsAuthorizationManager : System::IdentityModel::Configuration::ICustomIdentityConfiguration" />
  <TypeSignature Language="F#" Value="type ClaimsAuthorizationManager = class&#xA;    interface ICustomIdentityConfiguration" />
  <AssemblyInfo>
    <AssemblyName>System.IdentityModel</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>System.IdentityModel.Configuration.ICustomIdentityConfiguration</InterfaceName>
    </Interface>
  </Interfaces>
  <Docs>
    <summary>Определяет базовую реализацию диспетчера авторизации утверждений.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Security.Claims.ClaimsAuthorizationManager> Класс предоставляет базовую реализацию для диспетчера авторизации утверждений. Диспетчера авторизации утверждений может использоваться в следующих двух сценариях:  
  
-   В веб-приложениях и службах диспетчера авторизации утверждений можно добавить в конвейер обработки для предоставления это точка расширяемости, откуда вы можете разрешить доступ к ресурсу согласно значению входящих утверждений до выполнения кода приложения что фактически реализует запрошенного ресурса вызывается.  
  
-   При использовании <xref:System.IdentityModel.Services.ClaimsPrincipalPermission> класса или <xref:System.IdentityModel.Services.ClaimsPrincipalPermissionAttribute> для выполнения принудительного или декларативного доступа на основе утверждений проверяет в коде, диспетчер авторизации утверждений, настроенный для приложения вызывается системой для выполнения Проверка. Проверка доступа на основе утверждений могут выполняться в веб-приложений и приложений для настольных систем.  
  
 Реализация по умолчанию, предоставляемые <xref:System.Security.Claims.ClaimsAuthorizationManager> класс авторизует доступ для каждого утверждения, представленные; тем не менее, можно наследовать от этого класса и переопределить <xref:System.Security.Claims.ClaimsAuthorizationManager.CheckAccess%2A> метод, чтобы предоставить свою собственную логику авторизации.  
  
 Использование диспетчера авторизации утверждений является необязательным. Можно настроить приложение для использования диспетчера авторизации утверждений, либо программно с помощью <xref:System.IdentityModel.Configuration.IdentityConfiguration> класса или декларативно, указав [ &lt;claimsAuthorizationManager&gt; ](~/docs/framework/configure-apps/file-schema/windows-identity-foundation/claimsauthorizationmanager.md)элемент, который является дочерним элементом элемента [ &lt;identityConfiguration&gt; ](~/docs/framework/configure-apps/file-schema/windows-identity-foundation/identityconfiguration.md) элемент в файле конфигурации приложения. Если приложение является веб-сайта или веб-приложения, размещенного в Internet Information Services (IIS), необходимо добавить <xref:System.IdentityModel.Services.ClaimsAuthorizationModule> в коллекции модулей HTTP ASP.NET.  
  
> [!IMPORTANT]
>  При использовании <xref:System.IdentityModel.Services.ClaimsPrincipalPermission> класса или <xref:System.IdentityModel.Services.ClaimsPrincipalPermissionAttribute> класса диспетчера авторизации утверждений, который используется для выполнения проверки доступа является тот, который задан в конфигурации удостоверения в <xref:System.IdentityModel.Services.FederatedAuthentication.FederationConfiguration%2A?displayProperty=nameWithType> свойство. В файле конфигурации, это `<identityConfiguration>` раздел, на который ссылается значение по умолчанию `<federationConfiguration>` элемента. Это справедливо даже для служб Windows Communication Foundation (WCF) и приложений для настольных систем.  
  
 <xref:System.Security.Claims.ClaimsAuthorizationManager> Базового класса не принимают дополнительную настройку; Однако можно переопределить <xref:System.Security.Claims.ClaimsAuthorizationManager.LoadCustomConfiguration%2A> в производных классах для предоставления инициализации диспетчера авторизации утверждений из дочерних элементов `<claimsAuthorizationElement>`. Типичный сценарий — использование этих дочерних элементов для указания политик авторизации, которые определяют, какие типы и значения утверждений необходимы для получения доступа к какой ресурс. Это не жестких требований, то, что вы можете создать любое использование синтаксиса смысл и для реализации.  
  
   
  
## Examples  
 Примеры кода, которые используются в <xref:System.Security.Claims.ClaimsAuthorizationManager> разделы взяты из `Claims Based Authorization` образца. Этот образец представляет диспетчера авторизации настраиваемых утверждений, который может авторизовать субъектов, исходя из политики, которая указана в конфигурации. Диспетчер авторизации настраиваемых утверждений состоит из трех основных компонентов: класс, производный от <xref:System.Security.Claims.ClaimsAuthorizationManager> , реализующий диспетчер `ResourceAction` класс, пар ресурса и действия, а средство чтения политики, которое считывает и компилирует политику, которая указанный в файле конфигурации. При этом компилированных политики могут затем использоваться диспетчером авторизации утверждений для идентификации участника для авторизации доступа к ресурсам. Для краткости показаны не все элементы. Сведения о этого образца, а также другие доступные образцы для WIF и о том, где для их загрузки см. в разделе [индекс образцов кода WIF](~/docs/framework/security/wif-code-sample-index.md).  
  
 Следующий код показывает реализацию диспетчера авторизации настраиваемых утверждений. <xref:System.Security.Claims.ClaimsAuthorizationManager.LoadCustomConfiguration%2A> Метод считывает и компилирует политики из конфигурации с помощью вспомогательного класса политики чтения (не показано) и <xref:System.Security.Claims.ClaimsAuthorizationManager.CheckAccess%2A> метод предоставляет или запрещает доступ на основании этой политики.  
  
 [!code-csharp[WifClaimsBasedAuthorization#2](~/samples/snippets/csharp/VS_Snippets_Misc/wifclaimsbasedauthorization/cs/claimsauthorizationlibrary/myclaimsauthorizationmanager.cs#2)]  
  
 В следующем коде показано `ResourceAction` класс, используемый диспетчером пользовательских утверждений.  
  
 [!code-csharp[WifClaimsBasedAuthorization#1](~/samples/snippets/csharp/VS_Snippets_Misc/wifclaimsbasedauthorization/cs/claimsauthorizationlibrary/resourceaction.cs#1)]  
  
 Следующий код XML показано, как настроить утверждения диспетчера авторизации, показанном выше, для веб-приложения, размещенные в IIS 7.5. Отображаются только элементы, связанные с конфигурацией диспетчера авторизации утверждений. Обратите внимание, что ссылку на <xref:System.IdentityModel.Services.ClaimsAuthorizationModule> класс должен быть добавлен в конвейер под `<system.Webserver>` элемента. Для сайтов и приложений, размещенных в версиях IIS до IIS 7 модули можно добавить в конвейер под `<system.Web>` элемента. Эта конфигурация отображается, но в комментарий.  
  
 От диспетчера авторизации утверждений политики определяется настраиваемый `<policy>` элементы [ &lt;claimsAuthorizationManager&gt; ](~/docs/framework/configure-apps/file-schema/windows-identity-foundation/claimsauthorizationmanager.md) элемента. В первой политики участник должен иметь одно из утверждений, указанный для выполнения указанного действия с указанным ресурсом. Второй политики участник должен иметь оба утверждения, чтобы иметь возможность выполнения указанного действия с указанным ресурсом. Для всех других участника автоматически предоставляется доступ, независимо от того, утверждениям, которые он содержит.  
  
```  
<configuration>  
  <configSections>  
    <!--WIF 4.5 sections -->  
    <section name="system.identityModel" type="System.IdentityModel.Configuration.SystemIdentityModelSection, System.IdentityModel, Version=4.0.0.0, Culture=neutral, PublicKeyToken=B77A5C561934E089"/>  
    ...  
  
  </configSections>  
  
  ...  
  
  <system.web>  
    <httpModules>  
      <!--WIF 4.5 modules -->  
      <!--Not needed here for IIS >= 7 -->  
      <!--<add name="ClaimsAuthorizationModule" type="System.IdentityModel.Services.ClaimsAuthorizationModule, System.IdentityModel.Services, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089"/>-->  
    </httpModules>  
  </system.web>  
  
  ...  
  
  <system.webServer>  
    <modules>  
      <!--WIF 4.5 modules -->  
      <add name="ClaimsAuthorizationModule" type="System.IdentityModel.Services.ClaimsAuthorizationModule, System.IdentityModel.Services, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089"/>  
    </modules>  
  </system.webServer>  
  
  ...  
  
  <!-- WIF 4.5 s.im section-->  
  <system.identityModel>  
    <identityConfiguration>  
      <claimsAuthorizationManager type="ClaimsAuthorizationLibrary.MyClaimsAuthorizationManager, ClaimsAuthorizationLibrary">  
        <policy resource="http://localhost:28491/Developers.aspx" action="GET">  
          <or>  
            <claim claimType="http://schemas.microsoft.com/ws/2008/06/identity/claims/role" claimValue="developer" />  
            <claim claimType="http://schemas.xmlsoap.org/claims/Group" claimValue="Administrator" />  
          </or>  
        </policy>  
        <policy resource="http://localhost:28491/Administrators.aspx" action="GET">  
          <and>  
            <claim claimType="http://schemas.xmlsoap.org/claims/Group" claimValue="Administrator" />  
            <claim claimType="http://schemas.xmlsoap.org/ws/2005/05/identity/claims/country" claimValue="USA" />  
          </and>  
        </policy>  
        <policy resource="http://localhost:28491/Default.aspx" action="GET">  
        </policy>  
        <policy resource="http://localhost:28491/" action="GET">  
        </policy>  
        <policy resource="http://localhost:28491/Claims.aspx" action="GET">  
        </policy>  
      </claimsAuthorizationManager>  
  
      ...  
  
    </identityConfiguration>  
  </system.identityModel>  
  ...  
  
</configuration><configuration>  
  <configSections>  
    <!--WIF 4.5 sections -->  
    <section name="system.identityModel" type="System.IdentityModel.Configuration.SystemIdentityModelSection, System.IdentityModel, Version=4.0.0.0, Culture=neutral, PublicKeyToken=B77A5C561934E089"/>  
    ...  
  
  </configSections>  
  
  ...  
  
  <system.web>  
    <httpModules>  
      <!--WIF 4.5 modules -->  
      <!--Not needed here for IIS >= 7 -->  
      <!--<add name="ClaimsAuthorizationModule" type="System.IdentityModel.Services.ClaimsAuthorizationModule, System.IdentityModel.Services, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089"/>-->  
    </httpModules>  
  </system.web>  
  
  ...  
  
  <system.webServer>  
    <modules>  
      <!--WIF 4.5 modules -->  
      <add name="ClaimsAuthorizationModule" type="System.IdentityModel.Services.ClaimsAuthorizationModule, System.IdentityModel.Services, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089"/>  
    </modules>  
  </system.webServer>  
  
  ...  
  
  <!-- WIF 4.5 s.im section-->  
  <system.identityModel>  
    <identityConfiguration>  
      <claimsAuthorizationManager type="MyClaimsAuthorizationManager.SimpleClaimsAuthoirzationManager, MyClaimsAuthorizationManager" />  
      ...  
  
  </system.identityModel>  
  ...  
  
</configuration>  
```  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public ClaimsAuthorizationManager ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Security.Claims.ClaimsAuthorizationManager.#ctor" />
      <MemberSignature Language="VB.NET" Value="Public Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; ClaimsAuthorizationManager();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IdentityModel</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary>Инициализирует новый экземпляр класса <see cref="T:System.Security.Claims.ClaimsAuthorizationManager" />.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CheckAccess">
      <MemberSignature Language="C#" Value="public virtual bool CheckAccess (System.Security.Claims.AuthorizationContext context);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool CheckAccess(class System.Security.Claims.AuthorizationContext context) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Security.Claims.ClaimsAuthorizationManager.CheckAccess(System.Security.Claims.AuthorizationContext)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function CheckAccess (context As AuthorizationContext) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual bool CheckAccess(System::Security::Claims::AuthorizationContext ^ context);" />
      <MemberSignature Language="F#" Value="abstract member CheckAccess : System.Security.Claims.AuthorizationContext -&gt; bool&#xA;override this.CheckAccess : System.Security.Claims.AuthorizationContext -&gt; bool" Usage="claimsAuthorizationManager.CheckAccess context" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IdentityModel</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="context" Type="System.Security.Claims.AuthorizationContext" />
      </Parameters>
      <Docs>
        <param name="context">Контекст авторизации, который содержит тему, ресурс и действие, для которых необходимо проверить авторизацию.</param>
        <summary>При реализации в производном классе проверяет авторизацию для субъекта в указанном контексте, чтобы выполнить заданное действие в указанном ресурсе.</summary>
        <returns>Значение <see langword="true" />, если субъекту разрешено выполнение указанного действия с указанным ресурсом; в противном случае — значение <see langword="false" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Базовая реализация всегда возвращает `true`, который авторизует доступ. Можно переопределить этот метод в производном классе для авторизации доступа на основе требований приложения проверяющей Стороны. Если этот метод возвращает `false`, Windows Identity Foundation (WIF) возвращает ошибку несанкционированного вызывающему объекту; в противном случае выполнение передается приложению проверяющей Стороны.  
  
   
  
## Examples  
 Примеры кода, которые используются в <xref:System.Security.Claims.ClaimsAuthorizationManager> разделы взяты из `Claims Based Authorization` образца. Этот образец представляет диспетчера авторизации настраиваемых утверждений, который может авторизовать субъектов, исходя из политики, которая указана в конфигурации. Диспетчер авторизации настраиваемых утверждений состоит из трех основных компонентов: класс, производный от <xref:System.Security.Claims.ClaimsAuthorizationManager> , реализующий диспетчер `ResourceAction` класс, пар ресурса и действия, а средство чтения политики, которое считывает и компилирует политику, которая указанный в файле конфигурации. При этом компилированных политики могут затем использоваться диспетчером авторизации утверждений для идентификации участника для авторизации доступа к ресурсам. Для краткости показаны не все элементы. Сведения о этого образца, а также другие доступные образцы для WIF и о том, где для их загрузки см. в разделе [индекс образцов кода WIF](~/docs/framework/security/wif-code-sample-index.md).  
  
 В следующем коде показано переопределение метода <xref:System.Security.Claims.ClaimsAuthorizationManager.CheckAccess%2A> метод. Этот метод предоставляет или запрещает доступ на основе политики считываются и компилируются в файле конфигурации.  
  
 [!code-csharp[WifClaimsBasedAuthorization#3](~/samples/snippets/csharp/VS_Snippets_Misc/wifclaimsbasedauthorization/cs/claimsauthorizationlibrary/myclaimsauthorizationmanager.cs#3)]  
[!code-csharp[WifClaimsBasedAuthorization#5](~/samples/snippets/csharp/VS_Snippets_Misc/wifclaimsbasedauthorization/cs/claimsauthorizationlibrary/myclaimsauthorizationmanager.cs#5)]  
  
 В следующем коде показано `ResourceAction` класс, используемый диспетчером пользовательских утверждений.  
  
 [!code-csharp[WifClaimsBasedAuthorization#1](~/samples/snippets/csharp/VS_Snippets_Misc/wifclaimsbasedauthorization/cs/claimsauthorizationlibrary/resourceaction.cs#1)]  
  
 От диспетчера авторизации утверждений политики определяется настраиваемый `<policy>` элементы [ &lt;claimsAuthorizationManager&gt; ](~/docs/framework/configure-apps/file-schema/windows-identity-foundation/claimsauthorizationmanager.md) элемента. Эта политика чтения и скомпилированные с <xref:System.Security.Claims.ClaimsAuthorizationManager.LoadCustomConfiguration%2A> метод. В первой политики участник должен иметь одно из утверждений, указанный для выполнения указанного действия с указанным ресурсом. Второй политики участник должен иметь оба утверждения, чтобы иметь возможность выполнения указанного действия с указанным ресурсом. Для всех других участника автоматически предоставляется доступ, независимо от того, утверждениям, которые он содержит.  
  
```  
<system.identityModel>  
  <identityConfiguration>  
    <claimsAuthorizationManager type="ClaimsAuthorizationLibrary.MyClaimsAuthorizationManager, ClaimsAuthorizationLibrary">  
      <policy resource="http://localhost:28491/Developers.aspx" action="GET">  
        <or>  
          <claim claimType="http://schemas.microsoft.com/ws/2008/06/identity/claims/role" claimValue="developer" />  
          <claim claimType="http://schemas.xmlsoap.org/claims/Group" claimValue="Administrator" />  
        </or>  
      </policy>  
      <policy resource="http://localhost:28491/Administrators.aspx" action="GET">  
        <and>  
          <claim claimType="http://schemas.xmlsoap.org/claims/Group" claimValue="Administrator" />  
          <claim claimType="http://schemas.xmlsoap.org/ws/2005/05/identity/claims/country" claimValue="USA" />  
        </and>  
      </policy>  
      <policy resource="http://localhost:28491/Default.aspx" action="GET">  
      </policy>  
      <policy resource="http://localhost:28491/" action="GET">  
      </policy>  
      <policy resource="http://localhost:28491/Claims.aspx" action="GET">  
      </policy>  
    </claimsAuthorizationManager>  
  
    ...  
  
  </identityConfiguration>  
</system.identityModel>  
```  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="LoadCustomConfiguration">
      <MemberSignature Language="C#" Value="public virtual void LoadCustomConfiguration (System.Xml.XmlNodeList nodelist);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void LoadCustomConfiguration(class System.Xml.XmlNodeList nodelist) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Security.Claims.ClaimsAuthorizationManager.LoadCustomConfiguration(System.Xml.XmlNodeList)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub LoadCustomConfiguration (nodelist As XmlNodeList)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void LoadCustomConfiguration(System::Xml::XmlNodeList ^ nodelist);" />
      <MemberSignature Language="F#" Value="abstract member LoadCustomConfiguration : System.Xml.XmlNodeList -&gt; unit&#xA;override this.LoadCustomConfiguration : System.Xml.XmlNodeList -&gt; unit" Usage="claimsAuthorizationManager.LoadCustomConfiguration nodelist" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.IdentityModel.Configuration.ICustomIdentityConfiguration.LoadCustomConfiguration(System.Xml.XmlNodeList)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.IdentityModel</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="nodelist" Type="System.Xml.XmlNodeList" />
      </Parameters>
      <Docs>
        <param name="nodelist">Пользовательские элементы конфигурации. Каждый узел в списке имеет тип <see cref="T:System.Xml.XmlElement" />.</param>
        <summary>При переопределении в производном классе загружает пользовательскую конфигурацию из XML-кода.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Security.Claims.ClaimsAuthenticationManager.LoadCustomConfiguration%2A> Метод вызывается инфраструктурой конфигурации. При вызове этого метода `nodelist` будет содержать верхнего уровня дочерних элементов [ &lt;claimsAuthorizationManager&gt; ](~/docs/framework/configure-apps/file-schema/windows-identity-foundation/claimsauthorizationmanager.md) элемент из файла конфигурации. Каждый из этих элементов может в свою очередь, содержат атрибуты или дочерние элементы в зависимости от схемы конфигурации, определенных для производного класса. Если нет дочерних элементов отображается под `<claimsAuthorizationManager>` элемент в файле конфигурации, этот метод не вызывается.  
  
 Реализация по умолчанию создает <xref:System.NotImplementedException>. Переопределите этот метод в производном классе позволяет включить инициализацию диспетчера авторизации утверждений из файла конфигурации. Как правило элементы конфигурации используются для выражения политики авторизации; Тем не менее можно определить элементы и использовать их каким-либо образом, который имеет смысл в соответствии с требованиями приложения.  
  
   
  
## Examples  
 Примеры кода, которые используются в <xref:System.Security.Claims.ClaimsAuthorizationManager> разделы взяты из `Claims Based Authorization` образца. Этот образец представляет диспетчера авторизации настраиваемых утверждений, который может авторизовать субъектов, исходя из политики, которая указана в конфигурации. Диспетчер авторизации настраиваемых утверждений состоит из трех основных компонентов: класс, производный от <xref:System.Security.Claims.ClaimsAuthorizationManager> , реализующий диспетчер `ResourceAction` класс, пар ресурса и действия, а средство чтения политики, которое считывает и компилирует политику, которая указанный в файле конфигурации. При этом компилированных политики могут затем использоваться диспетчером авторизации утверждений для идентификации участника для авторизации доступа к ресурсам. Для краткости показаны не все элементы. Сведения о этого образца, а также другие доступные образцы для WIF и о том, где для их загрузки см. в разделе [индекс образцов кода WIF](~/docs/framework/security/wif-code-sample-index.md).  
  
 В следующем коде показано переопределение метода <xref:System.Security.Claims.ClaimsAuthorizationManager.LoadCustomConfiguration%2A> метод. Этот метод использует вспомогательный класс средства чтения политики (не показано) для чтения и скомпилируйте политик авторизации, заданных в файле конфигурации. Политики будут добавлены в словарь и доступны только по `ResourceAction` ключевой объект, созданный из ресурса и действия, для которых они предназначены.  
  
 [!code-csharp[WifClaimsBasedAuthorization#3](~/samples/snippets/csharp/VS_Snippets_Misc/wifclaimsbasedauthorization/cs/claimsauthorizationlibrary/myclaimsauthorizationmanager.cs#3)]  
[!code-csharp[WifClaimsBasedAuthorization#4](~/samples/snippets/csharp/VS_Snippets_Misc/wifclaimsbasedauthorization/cs/claimsauthorizationlibrary/myclaimsauthorizationmanager.cs#4)]  
  
 В следующем коде показано `ResourceAction` класс, используемый диспетчером пользовательских утверждений.  
  
 [!code-csharp[WifClaimsBasedAuthorization#1](~/samples/snippets/csharp/VS_Snippets_Misc/wifclaimsbasedauthorization/cs/claimsauthorizationlibrary/resourceaction.cs#1)]  
  
 От диспетчера авторизации утверждений политики определяется настраиваемый `<policy>` элементы [ &lt;claimsAuthorizationManager&gt; ](~/docs/framework/configure-apps/file-schema/windows-identity-foundation/claimsauthorizationmanager.md) элемента. Эта политика чтения и скомпилированные с <xref:System.Security.Claims.ClaimsAuthorizationManager.LoadCustomConfiguration%2A> метод. В первой политики участник должен иметь одно из утверждений, указанный для выполнения указанного действия с указанным ресурсом. Второй политики участник должен иметь оба утверждения, чтобы иметь возможность выполнения указанного действия с указанным ресурсом. Для всех других участника автоматически предоставляется доступ, независимо от того, утверждениям, которые он содержит.  
  
```  
<system.identityModel>  
  <identityConfiguration>  
    <claimsAuthorizationManager type="ClaimsAuthorizationLibrary.MyClaimsAuthorizationManager, ClaimsAuthorizationLibrary">  
      <policy resource="http://localhost:28491/Developers.aspx" action="GET">  
        <or>  
          <claim claimType="http://schemas.microsoft.com/ws/2008/06/identity/claims/role" claimValue="developer" />  
          <claim claimType="http://schemas.xmlsoap.org/claims/Group" claimValue="Administrator" />  
        </or>  
      </policy>  
      <policy resource="http://localhost:28491/Administrators.aspx" action="GET">  
        <and>  
          <claim claimType="http://schemas.xmlsoap.org/claims/Group" claimValue="Administrator" />  
          <claim claimType="http://schemas.xmlsoap.org/ws/2005/05/identity/claims/country" claimValue="USA" />  
        </and>  
      </policy>  
      <policy resource="http://localhost:28491/Default.aspx" action="GET">  
      </policy>  
      <policy resource="http://localhost:28491/" action="GET">  
      </policy>  
      <policy resource="http://localhost:28491/Claims.aspx" action="GET">  
      </policy>  
    </claimsAuthorizationManager>  
  
    ...  
  
  </identityConfiguration>  
</system.identityModel>  
```  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>