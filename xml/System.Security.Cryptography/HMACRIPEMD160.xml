<Type Name="HMACRIPEMD160" FullName="System.Security.Cryptography.HMACRIPEMD160">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="af4f8995a55f8bf92313c47b792af80d17b7aef7" />
    <Meta Name="ms.sourcegitcommit" Value="434f60616a9793fa8436744549fc856e94f7a648" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="ru-RU" />
    <Meta Name="ms.lasthandoff" Value="08/25/2018" />
    <Meta Name="ms.locfileid" Value="39878661" />
  </Metadata>
  <TypeSignature Language="C#" Value="public class HMACRIPEMD160 : System.Security.Cryptography.HMAC" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit HMACRIPEMD160 extends System.Security.Cryptography.HMAC" />
  <TypeSignature Language="DocId" Value="T:System.Security.Cryptography.HMACRIPEMD160" />
  <TypeSignature Language="VB.NET" Value="Public Class HMACRIPEMD160&#xA;Inherits HMAC" />
  <TypeSignature Language="C++ CLI" Value="public ref class HMACRIPEMD160 : System::Security::Cryptography::HMAC" />
  <TypeSignature Language="F#" Value="type HMACRIPEMD160 = class&#xA;    inherit HMAC" />
  <AssemblyInfo>
    <AssemblyName>mscorlib</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Security.Cryptography.HMAC</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0">
      <AttributeName>System.Runtime.InteropServices.ComVisible(true)</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>
      <span data-ttu-id="3a7fe-101">Вычисляет хэш-код аутентификации сообщения (HMAC) с помощью хэш-функции <see cref="T:System.Security.Cryptography.RIPEMD160" />.</span>
      <span class="sxs-lookup">
        <span data-stu-id="3a7fe-101">Computes a Hash-based Message Authentication Code (HMAC) by using the <see cref="T:System.Security.Cryptography.RIPEMD160" /> hash function.</span>
      </span>
    </summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="3a7fe-102"><xref:System.Security.Cryptography.HMACRIPEMD160> — это разновидность хэш-алгоритма, который создан на основе хэш-функция RIPEMD-160 и используется как хэш-сообщения проверки подлинности кода (HMAC).</span><span class="sxs-lookup"><span data-stu-id="3a7fe-102"><xref:System.Security.Cryptography.HMACRIPEMD160> is a type of keyed hash algorithm that is constructed from the RIPEMD-160 hash function and used as a Hash-based Message Authentication Code (HMAC).</span></span> <span data-ttu-id="3a7fe-103">Процесс HMAC смешивании секретного ключа с данными сообщения, хэширует результат хэш-функции, еще раз смешивании хэш-значения с секретным ключом и затем применяет хэш-функцию еще раз.</span><span class="sxs-lookup"><span data-stu-id="3a7fe-103">The HMAC process mixes a secret key with the message data, hashes the result with the hash function, mixes that hash value with the secret key again, and then applies the hash function a second time.</span></span> <span data-ttu-id="3a7fe-104">Выходные данные хэш-код является длиной 160 бит.</span><span class="sxs-lookup"><span data-stu-id="3a7fe-104">The output hash is 160 bits in length.</span></span>  
  
 <span data-ttu-id="3a7fe-105">Код HMAC можно использовать для определения факта подделки сообщения, передаваемого по незащищенному каналу, при условии, что отправитель и получатель общий секретный ключ.</span><span class="sxs-lookup"><span data-stu-id="3a7fe-105">An HMAC can be used to determine whether a message sent over an insecure channel has been tampered with, provided that the sender and receiver share a secret key.</span></span> <span data-ttu-id="3a7fe-106">Отправитель вычисляет хэш-значение для исходных данных и передает исходные данные и хэш-значения в одном сообщении.</span><span class="sxs-lookup"><span data-stu-id="3a7fe-106">The sender computes the hash value for the original data and sends both the original data and the hash value as a single message.</span></span> <span data-ttu-id="3a7fe-107">Получатель повторно вычисляет хэш-значение для полученного сообщения и проверяет, что совпадает передаваемых HMAC.</span><span class="sxs-lookup"><span data-stu-id="3a7fe-107">The receiver recalculates the hash value on the received message and checks that the computed HMAC matches the transmitted HMAC.</span></span>  
  
 <span data-ttu-id="3a7fe-108">Любое изменение данных или хэш-значения вызовет несовпадение, поскольку требуется знание секретного ключа, чтобы изменить сообщение и воспроизвести правильное значение хэша.</span><span class="sxs-lookup"><span data-stu-id="3a7fe-108">Any change to the data or the hash value results in a mismatch, because knowledge of the secret key is required to change the message and reproduce the correct hash value.</span></span> <span data-ttu-id="3a7fe-109">Таким образом Если исходные и вычисляемого хэш-значения совпадают, сообщение проходит проверку подлинности.</span><span class="sxs-lookup"><span data-stu-id="3a7fe-109">Therefore, if the original and computed hash values match, the message is authenticated.</span></span>  
  
 <span data-ttu-id="3a7fe-110"><xref:System.Security.Cryptography.HMACRIPEMD160> принимает ключи любого размера и создает хеш-последовательность, 160 бит.</span><span class="sxs-lookup"><span data-stu-id="3a7fe-110"><xref:System.Security.Cryptography.HMACRIPEMD160> accepts keys of any size, and produces a hash sequence that is 160 bits long.</span></span>  
  
 <span data-ttu-id="3a7fe-111">Хэш-алгоритма RIPEMD и последующих работах были разработаны для ЕС RIPE проекта.</span><span class="sxs-lookup"><span data-stu-id="3a7fe-111">The RIPEMD hash algorithm and its successors were developed by the European RIPE project.</span></span> <span data-ttu-id="3a7fe-112">Исходный алгоритм RIPEMD предназначен для замены MD4 и MD5 и более поздней версии была усилена за переименован RIPEMD-160.</span><span class="sxs-lookup"><span data-stu-id="3a7fe-112">The original RIPEMD algorithm was designed to replace MD4 and MD5 and was later strengthened and renamed RIPEMD-160.</span></span> <span data-ttu-id="3a7fe-113">Хэш-алгоритма RIPEMD-160 создает 160-разрядный хэш-значение.</span><span class="sxs-lookup"><span data-stu-id="3a7fe-113">The RIPEMD-160 hash algorithm produces a 160-bit hash value.</span></span> <span data-ttu-id="3a7fe-114">Разработчики алгоритма сделали его общедоступным.</span><span class="sxs-lookup"><span data-stu-id="3a7fe-114">The algorithm's designers have placed it in the public domain.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="3a7fe-115">В следующем примере показано, как для подписания файла с помощью <xref:System.Security.Cryptography.HMACRIPEMD160> объект и затем проверить файл.</span><span class="sxs-lookup"><span data-stu-id="3a7fe-115">The following example shows how to sign a file by using the <xref:System.Security.Cryptography.HMACRIPEMD160> object and then how to verify the file.</span></span>  
  
 [!code-cpp[HMACRIPEMD160#1](~/samples/snippets/cpp/VS_Snippets_CLR/HMACRIPEMD160/CPP/hmacripemd160.cpp#1)]
 [!code-csharp[HMACRIPEMD160#1](~/samples/snippets/csharp/VS_Snippets_CLR/HMACRIPEMD160/CS/hmacripemd160.cs#1)]
 [!code-vb[HMACRIPEMD160#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/HMACRIPEMD160/vb/hmacripemd160.vb#1)]  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <MemberGroup MemberName=".ctor">
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="3a7fe-116">Инициализирует новый экземпляр класса <see cref="T:System.Security.Cryptography.HMACRIPEMD160" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3a7fe-116">Initializes a new instance of the <see cref="T:System.Security.Cryptography.HMACRIPEMD160" /> class.</span>
          </span>
        </summary>
      </Docs>
    </MemberGroup>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public HMACRIPEMD160 ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Security.Cryptography.HMACRIPEMD160.#ctor" />
      <MemberSignature Language="VB.NET" Value="Public Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; HMACRIPEMD160();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="3a7fe-117">Инициализирует новый экземпляр класса <see cref="T:System.Security.Cryptography.HMACRIPEMD160" /> 64-байтовым ключом, созданным с помощью алгоритма генерации случайных чисел.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3a7fe-117">Initializes a new instance of the <see cref="T:System.Security.Cryptography.HMACRIPEMD160" /> class with a randomly generated 64-byte key.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="3a7fe-118"><xref:System.Security.Cryptography.HMACRIPEMD160> — это разновидность хэш-алгоритма, который создан на основе хэш-функция RIPEMD-160 и используется как хэш-сообщения проверки подлинности кода (HMAC).</span><span class="sxs-lookup"><span data-stu-id="3a7fe-118"><xref:System.Security.Cryptography.HMACRIPEMD160> is a type of keyed hash algorithm that is constructed from the RIPEMD-160 hash function and used as a Hash-based Message Authentication Code (HMAC).</span></span> <span data-ttu-id="3a7fe-119">Процесс HMAC смешивании секретного ключа с данными сообщения, хэширует результат хэш-функции, еще раз смешивании хэш-значения с секретным ключом и затем применяет хэш-функцию еще раз.</span><span class="sxs-lookup"><span data-stu-id="3a7fe-119">The HMAC process mixes a secret key with the message data, hashes the result with the hash function, mixes that hash value with the secret key again, and then applies the hash function a second time.</span></span> <span data-ttu-id="3a7fe-120">Выходные данные хэш-код является длиной 160 бит.</span><span class="sxs-lookup"><span data-stu-id="3a7fe-120">The output hash is 160 bytes in length.</span></span>  
  
 <span data-ttu-id="3a7fe-121">Этот конструктор использует 64-разрядного случайный ключ.</span><span class="sxs-lookup"><span data-stu-id="3a7fe-121">This constructor uses a 64-byte, randomly generated key.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public HMACRIPEMD160 (byte[] key);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(unsigned int8[] key) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Security.Cryptography.HMACRIPEMD160.#ctor(System.Byte[])" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (key As Byte())" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; HMACRIPEMD160(cli::array &lt;System::Byte&gt; ^ key);" />
      <MemberSignature Language="F#" Value="new System.Security.Cryptography.HMACRIPEMD160 : byte[] -&gt; System.Security.Cryptography.HMACRIPEMD160" Usage="new System.Security.Cryptography.HMACRIPEMD160 key" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="key" Type="System.Byte[]" />
      </Parameters>
      <Docs>
        <param name="key">
          <span data-ttu-id="3a7fe-122">Секретный ключ для шифрования <see cref="T:System.Security.Cryptography.HMACRIPEMD160" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3a7fe-122">The secret key for <see cref="T:System.Security.Cryptography.HMACRIPEMD160" /> encryption.</span>
          </span>
          <span data-ttu-id="3a7fe-123">Длина ключа может быть произвольной, но если она превышает 64 байта, ключ хэшируется (с помощью хэш-функции SHA-1) для получения 64-байтового ключа.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3a7fe-123">The key can be any length, but if it is more than 64 bytes long it is hashed (using SHA-1) to derive a 64-byte key.</span>
          </span>
          <span data-ttu-id="3a7fe-124">Поэтому рекомендуется использовать секретный ключ длиной 64 байта.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3a7fe-124">Therefore, the recommended size of the secret key is 64 bytes.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="3a7fe-125">Инициализирует новый экземпляр класса <see cref="T:System.Security.Cryptography.HMACRIPEMD160" /> указанными данными ключа.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3a7fe-125">Initializes a new instance of the <see cref="T:System.Security.Cryptography.HMACRIPEMD160" /> class with the specified key data.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="3a7fe-126"><xref:System.Security.Cryptography.HMACRIPEMD160> — это разновидность хэш-алгоритма, который создан на основе хэш-функция RIPEMD-160 и используется как хэш-сообщения проверки подлинности кода (HMAC).</span><span class="sxs-lookup"><span data-stu-id="3a7fe-126"><xref:System.Security.Cryptography.HMACRIPEMD160> is a type of keyed hash algorithm that is constructed from the RIPEMD-160 hash function and used as a Hash-based Message Authentication Code (HMAC).</span></span> <span data-ttu-id="3a7fe-127">Процесс HMAC смешивании секретного ключа с данными сообщения, хэширует результат хэш-функции, еще раз смешивании хэш-значения с секретным ключом и затем применяет хэш-функцию еще раз.</span><span class="sxs-lookup"><span data-stu-id="3a7fe-127">The HMAC process mixes a secret key with the message data, hashes the result with the hash function, mixes that hash value with the secret key again, and then applies the hash function a second time.</span></span> <span data-ttu-id="3a7fe-128">Выходные данные хэш-код является длиной 160 бит.</span><span class="sxs-lookup"><span data-stu-id="3a7fe-128">The output hash is 160 bytes in length.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="3a7fe-129">Пример использования этого конструктора, см. в разделе <xref:System.Security.Cryptography.HMACRIPEMD160> класса.</span><span class="sxs-lookup"><span data-stu-id="3a7fe-129">For an example of how to use this constructor, see the <xref:System.Security.Cryptography.HMACRIPEMD160> class.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="3a7fe-130">Параметр <paramref name="key" /> имеет значение <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3a7fe-130">The <paramref name="key" /> parameter is <see langword="null" />.</span>
          </span>
        </exception>
      </Docs>
    </Member>
  </Members>
</Type>