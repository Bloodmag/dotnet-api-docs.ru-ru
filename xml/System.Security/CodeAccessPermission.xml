<Type Name="CodeAccessPermission" FullName="System.Security.CodeAccessPermission">
  <TypeSignature Language="C#" Value="public abstract class CodeAccessPermission : System.Security.IPermission, System.Security.IStackWalk" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi abstract serializable beforefieldinit CodeAccessPermission extends System.Object implements class System.Security.IPermission, class System.Security.ISecurityEncodable, class System.Security.IStackWalk" />
  <TypeSignature Language="DocId" Value="T:System.Security.CodeAccessPermission" />
  <TypeSignature Language="VB.NET" Value="Public MustInherit Class CodeAccessPermission&#xA;Implements IPermission, IStackWalk" />
  <TypeSignature Language="C++ CLI" Value="public ref class CodeAccessPermission abstract : System::Security::IPermission, System::Security::IStackWalk" />
  <AssemblyInfo>
    <AssemblyName>mscorlib</AssemblyName>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>System.Security.Permissions</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>System.Security.IPermission</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.Security.IStackWalk</InterfaceName>
    </Interface>
  </Interfaces>
  <Attributes>
    <Attribute>
      <AttributeName>System.Runtime.InteropServices.ComVisible(true)</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary><span data-ttu-id="7e6e5-101">Определяет базовую структуру всех разрешений доступа к коду.</span><span class="sxs-lookup"><span data-stu-id="7e6e5-101">Defines the underlying structure of all code access permissions.</span></span></summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="7e6e5-102">Разрешения доступа к коду использовать проверку стека для убедитесь, что все вызывающие объекты кода были предоставлены разрешения.</span><span class="sxs-lookup"><span data-stu-id="7e6e5-102">Code access permissions use a stack walk to ensure that all callers of the code have been granted a permission.</span></span> <span data-ttu-id="7e6e5-103">Если объект разрешения `null`, он обрабатывается таким же, как объект разрешения с состоянием <xref:System.Security.Permissions.PermissionState.None?displayProperty=nameWithType>.</span><span class="sxs-lookup"><span data-stu-id="7e6e5-103">If a permission object is `null`, it is handled the same as a permission object with the state <xref:System.Security.Permissions.PermissionState.None?displayProperty=nameWithType>.</span></span>  
  
 <span data-ttu-id="7e6e5-104">Стек вызовов обычно представляется как растет вниз, так что методы, расположенные выше в стеке вызовов вызывать методы, расположенные в стеке вызовов.</span><span class="sxs-lookup"><span data-stu-id="7e6e5-104">The call stack is typically represented as growing down, so that methods higher in the call stack call methods lower in the call stack.</span></span>  
  
 <span data-ttu-id="7e6e5-105">Наследники <xref:System.Security.CodeAccessPermission> должно быть предоставлено полное доверие для правильной работы как разрешения, расширяющие инфраструктуру безопасности.</span><span class="sxs-lookup"><span data-stu-id="7e6e5-105">Inheritors of the <xref:System.Security.CodeAccessPermission> class must be granted full trust to function correctly as permissions extending the security infrastructure.</span></span> <span data-ttu-id="7e6e5-106">Чтобы определить, что наследники являются полностью доверенными, <xref:System.Security.CodeAccessPermission> проблемы <xref:System.Security.Permissions.SecurityAction.InheritanceDemand> для <xref:System.Security.Permissions.SecurityPermissionFlag.ControlEvidence>  =  `true` и <xref:System.Security.Permissions.SecurityPermissionFlag.ControlPolicy>  =  `true`.</span><span class="sxs-lookup"><span data-stu-id="7e6e5-106">To determine that the inheritors are fully trusted, <xref:System.Security.CodeAccessPermission> issues an <xref:System.Security.Permissions.SecurityAction.InheritanceDemand> for <xref:System.Security.Permissions.SecurityPermissionFlag.ControlEvidence> = `true` and <xref:System.Security.Permissions.SecurityPermissionFlag.ControlPolicy> = `true`.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="7e6e5-107">В следующем примере кода показаны разрешения, производным от <xref:System.Security.CodeAccessPermission> класса.</span><span class="sxs-lookup"><span data-stu-id="7e6e5-107">The following code example shows a permission derived from the <xref:System.Security.CodeAccessPermission> class.</span></span>  
  
 [!code-cpp[System.Security.Permissions.NameIdPermission#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Security.Permissions.NameIdPermission/CPP/nameidpermission.cpp#1)]
 [!code-csharp[System.Security.Permissions.NameIdPermission#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Security.Permissions.NameIdPermission/CS/nameidpermission.cs#1)]
 [!code-vb[System.Security.Permissions.NameIdPermission#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Security.Permissions.NameIdPermission/VB/nameidpermission.vb#1)]  
  
 ]]></format>
    </remarks>
    <permission cref="F:System.Security.Permissions.SecurityAction.InheritanceDemand"><span data-ttu-id="7e6e5-108">для возможности классов-наследников предоставления свидетельств, просмотра и изменения политики.</span><span class="sxs-lookup"><span data-stu-id="7e6e5-108">for the ability of inheritors to provide evidence and view and modify policy.</span></span> <span data-ttu-id="7e6e5-109">Связанные перечисления: <see cref="F:System.Security.Permissions.SecurityPermissionFlag.ControlEvidence" />, <see cref="F:System.Security.Permissions.SecurityPermissionFlag.ControlPolicy" />.</span><span class="sxs-lookup"><span data-stu-id="7e6e5-109">Associated enumerations: <see cref="F:System.Security.Permissions.SecurityPermissionFlag.ControlEvidence" />, <see cref="F:System.Security.Permissions.SecurityPermissionFlag.ControlPolicy" />.</span></span></permission>
    <block subset="none" type="overrides">
      <para><span data-ttu-id="7e6e5-110">При наследовании от <see cref="T:System.Security.CodeAccessPermission" />, необходимо также реализовать <see cref="T:System.Security.Permissions.IUnrestrictedPermission" /> интерфейса.</span><span class="sxs-lookup"><span data-stu-id="7e6e5-110">When you inherit from <see cref="T:System.Security.CodeAccessPermission" />, you must also implement the <see cref="T:System.Security.Permissions.IUnrestrictedPermission" /> interface.</span></span>  
  
 <span data-ttu-id="7e6e5-111">Следующие <see cref="T:System.Security.CodeAccessPermission" /> члены должны быть переопределены: <see cref="M:System.Security.CodeAccessPermission.Copy" />, <see cref="M:System.Security.CodeAccessPermission.Intersect(System.Security.IPermission)" />, <see cref="M:System.Security.CodeAccessPermission.IsSubsetOf(System.Security.IPermission)" />, <see cref="M:System.Security.CodeAccessPermission.ToXml" />, <see cref="M:System.Security.CodeAccessPermission.FromXml(System.Security.SecurityElement)" />, и <see cref="M:System.Security.CodeAccessPermission.Union(System.Security.IPermission)" />.</span><span class="sxs-lookup"><span data-stu-id="7e6e5-111">The following <see cref="T:System.Security.CodeAccessPermission" /> members must be overridden: <see cref="M:System.Security.CodeAccessPermission.Copy" />, <see cref="M:System.Security.CodeAccessPermission.Intersect(System.Security.IPermission)" />, <see cref="M:System.Security.CodeAccessPermission.IsSubsetOf(System.Security.IPermission)" />, <see cref="M:System.Security.CodeAccessPermission.ToXml" />, <see cref="M:System.Security.CodeAccessPermission.FromXml(System.Security.SecurityElement)" />, and <see cref="M:System.Security.CodeAccessPermission.Union(System.Security.IPermission)" />.</span></span>  
  
 <span data-ttu-id="7e6e5-112">Необходимо также определить конструктор, принимающий <see cref="T:System.Security.Permissions.PermissionState" /> качестве единственного параметра.</span><span class="sxs-lookup"><span data-stu-id="7e6e5-112">You must also define a constructor that takes a <see cref="T:System.Security.Permissions.PermissionState" /> as its only parameter.</span></span>  
  
 <span data-ttu-id="7e6e5-113">Необходимо применить <see cref="T:System.SerializableAttribute" /> класс, который наследует от атрибут <see cref="T:System.Security.CodeAccessPermission" />.</span><span class="sxs-lookup"><span data-stu-id="7e6e5-113">You must apply the <see cref="T:System.SerializableAttribute" /> attribute to a class that inherits from <see cref="T:System.Security.CodeAccessPermission" />.</span></span></para>
    </block>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="protected CodeAccessPermission ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Security.CodeAccessPermission.#ctor" />
      <MemberSignature Language="VB.NET" Value="Protected Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; CodeAccessPermission();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Security.Permissions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="7e6e5-114">Инициализирует новый экземпляр класса <see cref="T:System.Security.CodeAccessPermission" />.</span><span class="sxs-lookup"><span data-stu-id="7e6e5-114">Initializes a new instance of the <see cref="T:System.Security.CodeAccessPermission" /> class.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="7e6e5-115">Данный конструктор вызывается для инициализации состояния типа при создании экземпляра производного класса.</span><span class="sxs-lookup"><span data-stu-id="7e6e5-115">This constructor is called to initialize state in the type whenever an instance of the derived class is created.</span></span> <span data-ttu-id="7e6e5-116">Хотя можно явно вызвать этот конструктор в объявлении конструктора конструктор производного класса, это обычно нет необходимости; Большинство компиляторов автоматически создают такой вызов.</span><span class="sxs-lookup"><span data-stu-id="7e6e5-116">Although you can explicitly call this constructor in the constructor declaration of the derived class constructor, this is not usually necessary; most compilers will automatically generate the call for you.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Assert">
      <MemberSignature Language="C#" Value="public void Assert ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Assert() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Security.CodeAccessPermission.Assert" />
      <MemberSignature Language="VB.NET" Value="Public Sub Assert ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void Assert();" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Security.IStackWalk.Assert</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Security.Permissions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="7e6e5-117">Объявляет, что вызывающий код может получить доступ к ресурсу, защищенному требованием разрешения, через код, вызывающий этот метод, даже если вызывающим объектам выше в стеке вызовов не предоставлено разрешение на доступ к ресурсу.</span><span class="sxs-lookup"><span data-stu-id="7e6e5-117">Declares that the calling code can access the resource protected by a permission demand through the code that calls this method, even if callers higher in the stack have not been granted permission to access the resource.</span></span> <span data-ttu-id="7e6e5-118"><see cref="M:System.Security.CodeAccessPermission.Assert" /> может вызвать проблемы системы безопасности.</span><span class="sxs-lookup"><span data-stu-id="7e6e5-118">Using <see cref="M:System.Security.CodeAccessPermission.Assert" /> can create security issues.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="7e6e5-119">Стек вызовов обычно представляется как растет вниз, так что методы, расположенные выше в стеке вызовов вызывать методы, расположенные в стеке вызовов.</span><span class="sxs-lookup"><span data-stu-id="7e6e5-119">The call stack is typically represented as growing down, so that methods higher in the call stack call methods lower in the call stack.</span></span> <span data-ttu-id="7e6e5-120">Вызов <xref:System.Security.CodeAccessPermission.Assert%2A> предотвращает обход стека, начавшейся ниже в стеке вызовов, перебирать элементы стека выше код, который вызывает этот метод.</span><span class="sxs-lookup"><span data-stu-id="7e6e5-120">Calling <xref:System.Security.CodeAccessPermission.Assert%2A> prevents a stack walk originating lower in the call stack from proceeding up the call stack beyond the code that calls this method.</span></span> <span data-ttu-id="7e6e5-121">Таким образом даже если вызывающим объектам выше в стеке вызовов нет необходимых разрешений на доступ к ресурсу, они по-прежнему доступен через код, который вызывает этот метод для проверки наличия необходимых разрешений.</span><span class="sxs-lookup"><span data-stu-id="7e6e5-121">Therefore, even if callers higher on the call stack do not have the requisite permissions to access a resource, they can still access it through the code that calls this method on the necessary permission.</span></span> <span data-ttu-id="7e6e5-122">Утверждение действует только в том случае, если код, вызывающий <xref:System.Security.CodeAccessPermission.Assert%2A> проходит проверку безопасности на наличие утверждающего разрешения.</span><span class="sxs-lookup"><span data-stu-id="7e6e5-122">An assertion is effective only if the code that calls <xref:System.Security.CodeAccessPermission.Assert%2A> passes the security check for the permission that it is asserting.</span></span>  
  
 <span data-ttu-id="7e6e5-123">Вызов <xref:System.Security.CodeAccessPermission.Assert%2A> действует до возвращается вызывающему коду, вызвавшему его.</span><span class="sxs-lookup"><span data-stu-id="7e6e5-123">The call to <xref:System.Security.CodeAccessPermission.Assert%2A> is effective until the calling code returns to its caller.</span></span> <span data-ttu-id="7e6e5-124">Только один <xref:System.Security.CodeAccessPermission.Assert%2A> могут быть активными в каждом кадре.</span><span class="sxs-lookup"><span data-stu-id="7e6e5-124">Only one <xref:System.Security.CodeAccessPermission.Assert%2A> can be active on a frame.</span></span> <span data-ttu-id="7e6e5-125">Попытка вызвать <xref:System.Security.CodeAccessPermission.Assert%2A> при наличии активного <xref:System.Security.CodeAccessPermission.Assert%2A> существует на кадре приводит <xref:System.Security.SecurityException>.</span><span class="sxs-lookup"><span data-stu-id="7e6e5-125">An attempt to call <xref:System.Security.CodeAccessPermission.Assert%2A> when an active <xref:System.Security.CodeAccessPermission.Assert%2A> exists on the frame results in a <xref:System.Security.SecurityException>.</span></span> <span data-ttu-id="7e6e5-126">Вызовите <xref:System.Security.CodeAccessPermission.RevertAssert%2A> или <xref:System.Security.CodeAccessPermission.RevertAll%2A> удаление активной <xref:System.Security.CodeAccessPermission.Assert%2A>.</span><span class="sxs-lookup"><span data-stu-id="7e6e5-126">Call <xref:System.Security.CodeAccessPermission.RevertAssert%2A> or <xref:System.Security.CodeAccessPermission.RevertAll%2A> to remove an active <xref:System.Security.CodeAccessPermission.Assert%2A>.</span></span>  
  
 <span data-ttu-id="7e6e5-127"><xref:System.Security.CodeAccessPermission.Assert%2A> учитывается для разрешения не предоставляются, так как запрос на это разрешение не будет успешным.</span><span class="sxs-lookup"><span data-stu-id="7e6e5-127"><xref:System.Security.CodeAccessPermission.Assert%2A> is ignored for a permission not granted because a demand for that permission will not succeed.</span></span> <span data-ttu-id="7e6e5-128">Тем не менее если код, расположенный ниже в стеке вызовов вызывает <xref:System.Security.CodeAccessPermission.Demand%2A> этим разрешением, <xref:System.Security.SecurityException> возникает при проверке стека достигается код, который пытался вызвать <xref:System.Security.CodeAccessPermission.Assert%2A>.</span><span class="sxs-lookup"><span data-stu-id="7e6e5-128">However, if code lower on the call stack calls <xref:System.Security.CodeAccessPermission.Demand%2A> for that permission, a <xref:System.Security.SecurityException> is thrown when the stack walk reaches the code that tried to call <xref:System.Security.CodeAccessPermission.Assert%2A>.</span></span> <span data-ttu-id="7e6e5-129">Это происходит потому, что код, вызвавший <xref:System.Security.CodeAccessPermission.Assert%2A> не предоставлено разрешение, несмотря на то, что он пытался <xref:System.Security.CodeAccessPermission.Assert%2A> его.</span><span class="sxs-lookup"><span data-stu-id="7e6e5-129">This happens because the code that called <xref:System.Security.CodeAccessPermission.Assert%2A> has not been granted the permission, even though it tried to <xref:System.Security.CodeAccessPermission.Assert%2A> it.</span></span>  
  
> [!CAUTION]
>  <span data-ttu-id="7e6e5-130">Поскольку вызов <xref:System.Security.CodeAccessPermission.Assert%2A> удаляет требование, что весь код в цепочке вызовов должно быть предоставлено разрешение на доступ к указанному ресурсу, может привести к возникновению проблем безопасности неправильное или неверно.</span><span class="sxs-lookup"><span data-stu-id="7e6e5-130">Because calling <xref:System.Security.CodeAccessPermission.Assert%2A> removes the requirement that all code in the call chain must be granted permission to access the specified resource, it can open up security issues if used incorrectly or inappropriately.</span></span> <span data-ttu-id="7e6e5-131">Таким образом он должен использоваться с большой осторожностью.</span><span class="sxs-lookup"><span data-stu-id="7e6e5-131">Therefore, it should be used with great caution.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Security.SecurityException"><span data-ttu-id="7e6e5-132">У вызывающего кода отсутствует <see cref="F:System.Security.Permissions.SecurityPermissionFlag.Assertion" />.</span><span class="sxs-lookup"><span data-stu-id="7e6e5-132">The calling code does not have <see cref="F:System.Security.Permissions.SecurityPermissionFlag.Assertion" />.</span></span>  
  
 <span data-ttu-id="7e6e5-133">- или -</span><span class="sxs-lookup"><span data-stu-id="7e6e5-133">-or-</span></span>  
  
 <span data-ttu-id="7e6e5-134">Уже имеется активное утверждение <see cref="M:System.Security.CodeAccessPermission.Assert" /> для текущего кадра.</span><span class="sxs-lookup"><span data-stu-id="7e6e5-134">There is already an active <see cref="M:System.Security.CodeAccessPermission.Assert" /> for the current frame.</span></span></exception>
        <permission cref="T:System.Security.Permissions.SecurityPermission"><span data-ttu-id="7e6e5-135">для возможности вызова <see cref="M:System.Security.CodeAccessPermission.Assert" />.</span><span class="sxs-lookup"><span data-stu-id="7e6e5-135">for the ability to call <see cref="M:System.Security.CodeAccessPermission.Assert" />.</span></span> <span data-ttu-id="7e6e5-136">Связанное перечисление: <see cref="F:System.Security.Permissions.SecurityPermissionFlag.Assertion" /></span><span class="sxs-lookup"><span data-stu-id="7e6e5-136">Associated enumeration: <see cref="F:System.Security.Permissions.SecurityPermissionFlag.Assertion" /></span></span></permission>
        <block subset="none" type="overrides">
          <para><span data-ttu-id="7e6e5-137">Этот метод нельзя переопределить.</span><span class="sxs-lookup"><span data-stu-id="7e6e5-137">You cannot override this method.</span></span></para>
        </block>
      </Docs>
    </Member>
    <Member MemberName="Copy">
      <MemberSignature Language="C#" Value="public abstract System.Security.IPermission Copy ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Security.IPermission Copy() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Security.CodeAccessPermission.Copy" />
      <MemberSignature Language="VB.NET" Value="Public MustOverride Function Copy () As IPermission" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; abstract System::Security::IPermission ^ Copy();" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Security.IPermission.Copy</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Security.Permissions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Security.IPermission</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="7e6e5-138">При реализации производным классом создает и возвращает идентичную копию текущего объекта разрешения.</span><span class="sxs-lookup"><span data-stu-id="7e6e5-138">When implemented by a derived class, creates and returns an identical copy of the current permission object.</span></span></summary>
        <returns><span data-ttu-id="7e6e5-139">Копия текущего объекта разрешения.</span><span class="sxs-lookup"><span data-stu-id="7e6e5-139">A copy of the current permission object.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="7e6e5-140">Копия объекта разрешений представляет тот же уровень доступа к ресурсам, как исходный объект разрешения.</span><span class="sxs-lookup"><span data-stu-id="7e6e5-140">A copy of a permission object represents the same access to resources as the original permission object.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="7e6e5-141">В следующем примере кода показано переопределение <xref:System.Security.CodeAccessPermission.Copy%2A> метод.</span><span class="sxs-lookup"><span data-stu-id="7e6e5-141">The following code example shows an override of the <xref:System.Security.CodeAccessPermission.Copy%2A> method.</span></span> <span data-ttu-id="7e6e5-142">Данный пример кода является частью большего примера, приведенного для <xref:System.Security.CodeAccessPermission> класса.</span><span class="sxs-lookup"><span data-stu-id="7e6e5-142">This code example is part of a larger example provided for the <xref:System.Security.CodeAccessPermission> class.</span></span>  
  
 [!code-cpp[System.Security.Permissions.NameIdPermission#2](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Security.Permissions.NameIdPermission/CPP/nameidpermission.cpp#2)]
 [!code-csharp[System.Security.Permissions.NameIdPermission#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Security.Permissions.NameIdPermission/CS/nameidpermission.cs#2)]
 [!code-vb[System.Security.Permissions.NameIdPermission#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Security.Permissions.NameIdPermission/VB/nameidpermission.vb#2)]  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides">
          <para><span data-ttu-id="7e6e5-143">Необходимо переопределить этот метод в производном классе.</span><span class="sxs-lookup"><span data-stu-id="7e6e5-143">You must override this method in a derived class.</span></span></para>
        </block>
      </Docs>
    </Member>
    <Member MemberName="Demand">
      <MemberSignature Language="C#" Value="public void Demand ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Demand() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Security.CodeAccessPermission.Demand" />
      <MemberSignature Language="VB.NET" Value="Public Sub Demand ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void Demand();" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Security.IPermission.Demand</InterfaceMember>
        <InterfaceMember>M:System.Security.IStackWalk.Demand</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Security.Permissions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="7e6e5-144">Принудительно создает <see cref="T:System.Security.SecurityException" /> во время выполнения, если все вызывающие методы, расположенные выше в стеке вызовов, не получили разрешения, указанного текущим экземпляром.</span><span class="sxs-lookup"><span data-stu-id="7e6e5-144">Forces a <see cref="T:System.Security.SecurityException" /> at run time if all callers higher in the call stack have not been granted the permission specified by the current instance.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="7e6e5-145">Этот метод обычно используется с защищенными библиотеками для обеспечения наличия у вызывающих объектов разрешений на доступ к ресурсу.</span><span class="sxs-lookup"><span data-stu-id="7e6e5-145">This method is typically used by secure libraries to ensure that callers have permission to access a resource.</span></span> <span data-ttu-id="7e6e5-146">Например, файл класса в безопасной библиотеке классов вызывает <xref:System.Security.CodeAccessPermission.Demand%2A> для необходимого <xref:System.Security.Permissions.FileIOPermission> перед выполнением операции файл запрошенную вызывающим.</span><span class="sxs-lookup"><span data-stu-id="7e6e5-146">For example, a file class in a secure class library calls <xref:System.Security.CodeAccessPermission.Demand%2A> for the necessary <xref:System.Security.Permissions.FileIOPermission> before performing a file operation requested by the caller.</span></span>  
  
 <span data-ttu-id="7e6e5-147">Разрешения для кода, который вызывает этот метод, не проверяется; Проверка начинается с непосредственный вызывающий объект кода и продолжается вверх по стеку.</span><span class="sxs-lookup"><span data-stu-id="7e6e5-147">The permissions of the code that calls this method are not examined; the check begins from the immediate caller of that code and proceeds up the stack.</span></span> <span data-ttu-id="7e6e5-148">Стек вызовов обычно представляется как растет вниз, так что методы, расположенные выше в стеке вызовов вызывать методы, расположенные в стеке вызовов.</span><span class="sxs-lookup"><span data-stu-id="7e6e5-148">The call stack is typically represented as growing down, so that methods higher in the call stack call methods lower in the call stack.</span></span> <span data-ttu-id="7e6e5-149"><xref:System.Security.CodeAccessPermission.Demand%2A> выполняется успешно, только если не <xref:System.Security.SecurityException> возникает.</span><span class="sxs-lookup"><span data-stu-id="7e6e5-149"><xref:System.Security.CodeAccessPermission.Demand%2A> succeeds only if no <xref:System.Security.SecurityException> is raised.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Security.SecurityException"><span data-ttu-id="7e6e5-150">Вызывающий метод, расположенный выше в стеке вызовов, не имеет разрешения, указанного текущим экземпляром.</span><span class="sxs-lookup"><span data-stu-id="7e6e5-150">A caller higher in the call stack does not have the permission specified by the current instance.</span></span>  
  
 <span data-ttu-id="7e6e5-151">- или -</span><span class="sxs-lookup"><span data-stu-id="7e6e5-151">-or-</span></span>  
  
 <span data-ttu-id="7e6e5-152">Вызывающий метод, расположенный выше в стеке вызовов, вызвал <see cref="M:System.Security.CodeAccessPermission.Deny" /> в текущем объекте разрешений.</span><span class="sxs-lookup"><span data-stu-id="7e6e5-152">A caller higher in the call stack has called <see cref="M:System.Security.CodeAccessPermission.Deny" /> on the current permission object.</span></span></exception>
        <block subset="none" type="overrides">
          <para><span data-ttu-id="7e6e5-153">Этот метод нельзя переопределить.</span><span class="sxs-lookup"><span data-stu-id="7e6e5-153">You cannot override this method.</span></span></para>
        </block>
      </Docs>
    </Member>
    <Member MemberName="Deny">
      <MemberSignature Language="C#" Value="public void Deny ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Deny() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Security.CodeAccessPermission.Deny" />
      <MemberSignature Language="VB.NET" Value="Public Sub Deny ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void Deny();" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Security.IStackWalk.Deny</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Security.Permissions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="7e6e5-154">Запрещает вызывающим объектам выше в стеке вызовов использовать код, который вызывает этот метод для доступа к ресурсу, указанному текущим экземпляром.</span><span class="sxs-lookup"><span data-stu-id="7e6e5-154">Prevents callers higher in the call stack from using the code that calls this method to access the resource specified by the current instance.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
> [!IMPORTANT]
>  <span data-ttu-id="7e6e5-155"><xref:System.Security.CodeAccessPermission.Deny%2A> Метод должен использоваться только для защиты ресурсов от случайного доступа полностью доверенным кодом.</span><span class="sxs-lookup"><span data-stu-id="7e6e5-155">The <xref:System.Security.CodeAccessPermission.Deny%2A> method should be used only to protect resources from accidental access by fully trusted code.</span></span> <span data-ttu-id="7e6e5-156">Он не должен использоваться для защиты ресурсов от умышленного злоупотребления ненадежным кодом.</span><span class="sxs-lookup"><span data-stu-id="7e6e5-156">It should not be used to protect resources from intentional misuse by untrusted code.</span></span> <span data-ttu-id="7e6e5-157">Например если метод `A` проблемы <xref:System.Security.CodeAccessPermission.Deny%2A> разрешения и вызывает метод `B`, метод `B` описания можно переопределить <xref:System.Security.CodeAccessPermission.Deny%2A> , выполнив <xref:System.Security.CodeAccessPermission.Assert%2A>.</span><span class="sxs-lookup"><span data-stu-id="7e6e5-157">For example, if method `A` issues a <xref:System.Security.CodeAccessPermission.Deny%2A> for a permission and then calls method `B`, method `B` can overtly override the <xref:System.Security.CodeAccessPermission.Deny%2A> by issuing an <xref:System.Security.CodeAccessPermission.Assert%2A>.</span></span> <span data-ttu-id="7e6e5-158">Вызываемый метод всегда выше в стеке.</span><span class="sxs-lookup"><span data-stu-id="7e6e5-158">The called method is always higher in the stack.</span></span> <span data-ttu-id="7e6e5-159">Таким образом Если метод `B` попытается получить доступ к защищенному ресурсу, система безопасности начинается проверка наличия разрешения с ним, так как метод `B` является непосредственного вызывающего объекта, а затем последовательно вниз в стек, чтобы подтвердить, что не <xref:System.Security.CodeAccessPermission.Deny%2A> или <xref:System.Security.CodeAccessPermission.PermitOnly%2A> ниже в стеке.</span><span class="sxs-lookup"><span data-stu-id="7e6e5-159">Therefore, if method `B` tries to access a protected resource, the security system begins checking for permissions with it because method `B` is the immediate caller, and then walks down the stack to confirm that there is no <xref:System.Security.CodeAccessPermission.Deny%2A> or <xref:System.Security.CodeAccessPermission.PermitOnly%2A> lower in the stack.</span></span> <span data-ttu-id="7e6e5-160">Метод `B`, который пытается получить доступ к ресурсу, можно остановить обход стека немедленно с помощью <xref:System.Security.CodeAccessPermission.Assert%2A> метод.</span><span class="sxs-lookup"><span data-stu-id="7e6e5-160">Method `B`, which is trying to access the resource, can stop the stack walk immediately by using the <xref:System.Security.CodeAccessPermission.Assert%2A> method.</span></span> <span data-ttu-id="7e6e5-161">В этом случае <xref:System.Security.CodeAccessPermission.Deny%2A> помещаются в стек с помощью метода `A` (метод вызова) никогда не будет обнаружен.</span><span class="sxs-lookup"><span data-stu-id="7e6e5-161">In that case, the <xref:System.Security.CodeAccessPermission.Deny%2A> placed on the stack by method `A` (the calling method) is never discovered.</span></span>  
  
 <span data-ttu-id="7e6e5-162">Этот метод не позволяет вызывающим объектам выше в стеке вызовов доступ к защищенному ресурсу через код, вызывающий этот метод, даже если этим вызывающим предоставлено разрешение на доступ к нему.</span><span class="sxs-lookup"><span data-stu-id="7e6e5-162">This method prevents callers higher in the call stack from accessing the protected resource through the code that calls this method, even if those callers have been granted permission to access it.</span></span> <span data-ttu-id="7e6e5-163">Стек вызовов обычно представляется как растет вниз, так что методы, расположенные выше в стеке вызовов вызывать методы, расположенные в стеке вызовов.</span><span class="sxs-lookup"><span data-stu-id="7e6e5-163">The call stack is typically represented as growing down, so that methods higher in the call stack call methods lower in the call stack.</span></span>  
  
 <span data-ttu-id="7e6e5-164"><xref:System.Security.CodeAccessPermission.Deny%2A> можно ограничить ответственность программиста или предотвратить случайного характера, поскольку он не позволяет использовать метод, вызывающий <xref:System.Security.CodeAccessPermission.Deny%2A> не могут использоваться для доступа к ресурсу, защищенному путем отказа в разрешении.</span><span class="sxs-lookup"><span data-stu-id="7e6e5-164"><xref:System.Security.CodeAccessPermission.Deny%2A> can limit the liability of the programmer or help prevent accidental security issues because it helps prevent the method that calls <xref:System.Security.CodeAccessPermission.Deny%2A> from being used to access the resource protected by the denied permission.</span></span> <span data-ttu-id="7e6e5-165">Если метод вызывает метод <xref:System.Security.CodeAccessPermission.Deny%2A> для разрешения и если <xref:System.Security.CodeAccessPermission.Demand%2A> для этого разрешения вызывающий объект, расположенный ниже в стеке вызовов, то проверка безопасности завершится ошибкой при достижении <xref:System.Security.CodeAccessPermission.Deny%2A>.</span><span class="sxs-lookup"><span data-stu-id="7e6e5-165">If a method calls <xref:System.Security.CodeAccessPermission.Deny%2A> on a permission, and if a <xref:System.Security.CodeAccessPermission.Demand%2A> for that permission is invoked by a caller lower in the call stack, that security check will fail when it reaches the <xref:System.Security.CodeAccessPermission.Deny%2A>.</span></span>  
  
 <span data-ttu-id="7e6e5-166">Вызов <xref:System.Security.CodeAccessPermission.Deny%2A> действует до возвращается вызывающему коду, вызвавшему его.</span><span class="sxs-lookup"><span data-stu-id="7e6e5-166">The call to <xref:System.Security.CodeAccessPermission.Deny%2A> is effective until the calling code returns to its caller.</span></span> <span data-ttu-id="7e6e5-167">Только один <xref:System.Security.CodeAccessPermission.Deny%2A> могут быть активными в каждом кадре.</span><span class="sxs-lookup"><span data-stu-id="7e6e5-167">Only one <xref:System.Security.CodeAccessPermission.Deny%2A> can be active on a frame.</span></span> <span data-ttu-id="7e6e5-168">Попытка вызвать <xref:System.Security.CodeAccessPermission.Deny%2A> при наличии активного <xref:System.Security.CodeAccessPermission.Deny%2A> существует на кадре приводит <xref:System.Security.SecurityException>.</span><span class="sxs-lookup"><span data-stu-id="7e6e5-168">An attempt to call <xref:System.Security.CodeAccessPermission.Deny%2A> when an active <xref:System.Security.CodeAccessPermission.Deny%2A> exists on the frame results in a <xref:System.Security.SecurityException>.</span></span> <span data-ttu-id="7e6e5-169">Вызовите <xref:System.Security.CodeAccessPermission.RevertDeny%2A> или <xref:System.Security.CodeAccessPermission.RevertAll%2A> удаление активной <xref:System.Security.CodeAccessPermission.Deny%2A>.</span><span class="sxs-lookup"><span data-stu-id="7e6e5-169">Call <xref:System.Security.CodeAccessPermission.RevertDeny%2A> or <xref:System.Security.CodeAccessPermission.RevertAll%2A> to remove an active <xref:System.Security.CodeAccessPermission.Deny%2A>.</span></span> <span data-ttu-id="7e6e5-170"><xref:System.Security.CodeAccessPermission.Deny%2A> учитывается для разрешения не предоставляются, так как запрос на это разрешение не будет успешным.</span><span class="sxs-lookup"><span data-stu-id="7e6e5-170"><xref:System.Security.CodeAccessPermission.Deny%2A> is ignored for a permission not granted because a demand for that permission will not succeed.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Security.SecurityException"><span data-ttu-id="7e6e5-171">Уже имеется активное утверждение <see cref="M:System.Security.CodeAccessPermission.Deny" /> для текущего кадра.</span><span class="sxs-lookup"><span data-stu-id="7e6e5-171">There is already an active <see cref="M:System.Security.CodeAccessPermission.Deny" /> for the current frame.</span></span></exception>
        <block subset="none" type="overrides">
          <para><span data-ttu-id="7e6e5-172">Этот метод нельзя переопределить.</span><span class="sxs-lookup"><span data-stu-id="7e6e5-172">You cannot override this method.</span></span></para>
        </block>
      </Docs>
    </Member>
    <Member MemberName="Equals">
      <MemberSignature Language="C#" Value="public override bool Equals (object obj);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance bool Equals(object obj) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Security.CodeAccessPermission.Equals(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function Equals (obj As Object) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override bool Equals(System::Object ^ obj);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Security.Permissions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.ComVisible(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="obj" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="obj"><span data-ttu-id="7e6e5-173">Объект <see cref="T:System.Security.CodeAccessPermission" />, который требуется сравнить с текущим объектом <see cref="T:System.Security.CodeAccessPermission" />.</span><span class="sxs-lookup"><span data-stu-id="7e6e5-173">The <see cref="T:System.Security.CodeAccessPermission" /> object to compare with the current <see cref="T:System.Security.CodeAccessPermission" />.</span></span></param>
        <summary><span data-ttu-id="7e6e5-174">Определяет, равен ли заданный объект <see cref="T:System.Security.CodeAccessPermission" /> текущему объекту <see cref="T:System.Security.CodeAccessPermission" />.</span><span class="sxs-lookup"><span data-stu-id="7e6e5-174">Determines whether the specified <see cref="T:System.Security.CodeAccessPermission" /> object is equal to the current <see cref="T:System.Security.CodeAccessPermission" />.</span></span></summary>
        <returns>
          <span data-ttu-id="7e6e5-175">Значение <see langword="true" />, если заданный объект <see cref="T:System.Security.CodeAccessPermission" /> равен текущему объекту <see cref="T:System.Security.CodeAccessPermission" />; в противном случае — значение <see langword="false" />. </span><span class="sxs-lookup"><span data-stu-id="7e6e5-175"><see langword="true" /> if the specified <see cref="T:System.Security.CodeAccessPermission" /> object is equal to the current <see cref="T:System.Security.CodeAccessPermission" />; otherwise, <see langword="false" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="7e6e5-176">Дополнительные сведения см. в разделе <xref:System.Object.Equals%2A>.</span><span class="sxs-lookup"><span data-stu-id="7e6e5-176">For more information, see <xref:System.Object.Equals%2A>.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="FromXml">
      <MemberSignature Language="C#" Value="public abstract void FromXml (System.Security.SecurityElement elem);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void FromXml(class System.Security.SecurityElement elem) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Security.CodeAccessPermission.FromXml(System.Security.SecurityElement)" />
      <MemberSignature Language="VB.NET" Value="Public MustOverride Sub FromXml (elem As SecurityElement)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; abstract void FromXml(System::Security::SecurityElement ^ elem);" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Security.ISecurityEncodable.FromXml(System.Security.SecurityElement)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Security.Permissions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="elem" Type="System.Security.SecurityElement" />
      </Parameters>
      <Docs>
        <param name="elem"><span data-ttu-id="7e6e5-177">Кодировка XML, используемая для восстановления объекта безопасности.</span><span class="sxs-lookup"><span data-stu-id="7e6e5-177">The XML encoding to use to reconstruct the security object.</span></span></param>
        <summary><span data-ttu-id="7e6e5-178">Если переопределено в производном классе, восстанавливает объект безопасности с заданным состоянием из данных в формате XML.</span><span class="sxs-lookup"><span data-stu-id="7e6e5-178">When overridden in a derived class, reconstructs a security object with a specified state from an XML encoding.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="7e6e5-179">Пользовательский код, который расширяет объекты безопасности необходимо реализовать <xref:System.Security.CodeAccessPermission.ToXml%2A> и <xref:System.Security.CodeAccessPermission.FromXml%2A> методов, чтобы объекты можно было кодировать безопасности.</span><span class="sxs-lookup"><span data-stu-id="7e6e5-179">Custom code that extends security objects needs to implement the <xref:System.Security.CodeAccessPermission.ToXml%2A> and <xref:System.Security.CodeAccessPermission.FromXml%2A> methods to make the objects security-encodable.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="7e6e5-180">В следующем примере кода показано переопределение <xref:System.Security.CodeAccessPermission.FromXml%2A> метод.</span><span class="sxs-lookup"><span data-stu-id="7e6e5-180">The following code example shows an override of the <xref:System.Security.CodeAccessPermission.FromXml%2A> method.</span></span> <span data-ttu-id="7e6e5-181">Данный пример кода является частью большего примера, приведенного для <xref:System.Security.CodeAccessPermission> класса.</span><span class="sxs-lookup"><span data-stu-id="7e6e5-181">This code example is part of a larger example provided for the <xref:System.Security.CodeAccessPermission> class.</span></span>  
  
 [!code-cpp[System.Security.Permissions.NameIdPermission#10](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Security.Permissions.NameIdPermission/CPP/nameidpermission.cpp#10)]
 [!code-csharp[System.Security.Permissions.NameIdPermission#10](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Security.Permissions.NameIdPermission/CS/nameidpermission.cs#10)]
 [!code-vb[System.Security.Permissions.NameIdPermission#10](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Security.Permissions.NameIdPermission/VB/nameidpermission.vb#10)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="7e6e5-182">Параметр <paramref name="elem" /> имеет значение <see langword="null" />.</span><span class="sxs-lookup"><span data-stu-id="7e6e5-182">The <paramref name="elem" /> parameter is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="7e6e5-183">Тип экземпляра, который описывается содержащимся в параметре <paramref name="elem" /> кодом XML, не соответствует типу текущего экземпляра.</span><span class="sxs-lookup"><span data-stu-id="7e6e5-183">The <paramref name="elem" /> parameter does not contain the XML encoding for an instance of the same type as the current instance.</span></span>  
  
 <span data-ttu-id="7e6e5-184">- или -</span><span class="sxs-lookup"><span data-stu-id="7e6e5-184">-or-</span></span>  
  
 <span data-ttu-id="7e6e5-185">Номер версии параметра <paramref name="elem" /> не поддерживается.</span><span class="sxs-lookup"><span data-stu-id="7e6e5-185">The version number of the <paramref name="elem" /> parameter is not supported.</span></span></exception>
        <block subset="none" type="overrides">
          <para><span data-ttu-id="7e6e5-186">Необходимо переопределить этот метод в производном классе.</span><span class="sxs-lookup"><span data-stu-id="7e6e5-186">You must override this method in a derived class.</span></span></para>
        </block>
      </Docs>
    </Member>
    <Member MemberName="GetHashCode">
      <MemberSignature Language="C#" Value="public override int GetHashCode ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance int32 GetHashCode() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Security.CodeAccessPermission.GetHashCode" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function GetHashCode () As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override int GetHashCode();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Security.Permissions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.ComVisible(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="7e6e5-187">Возвращает хэш-код для объекта <see cref="T:System.Security.CodeAccessPermission" />, который можно использовать в алгоритмах хэширования и структурах данных, например в хэш-таблице.</span><span class="sxs-lookup"><span data-stu-id="7e6e5-187">Gets a hash code for the <see cref="T:System.Security.CodeAccessPermission" /> object that is suitable for use in hashing algorithms and data structures such as a hash table.</span></span></summary>
        <returns><span data-ttu-id="7e6e5-188">Хэш-код для текущего объекта <see cref="T:System.Security.CodeAccessPermission" />.</span><span class="sxs-lookup"><span data-stu-id="7e6e5-188">A hash code for the current <see cref="T:System.Security.CodeAccessPermission" /> object.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="7e6e5-189">Хэш-код для двух экземпляров одного разрешения, может отличаться, поэтому хэш-код не следует использовать для сравнения двух <xref:System.Security.CodeAccessPermission> объектов.</span><span class="sxs-lookup"><span data-stu-id="7e6e5-189">The hash code for two instances of the same permission might be different, hence a hash code should not be used to compare two <xref:System.Security.CodeAccessPermission> objects.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Intersect">
      <MemberSignature Language="C#" Value="public abstract System.Security.IPermission Intersect (System.Security.IPermission target);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Security.IPermission Intersect(class System.Security.IPermission target) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Security.CodeAccessPermission.Intersect(System.Security.IPermission)" />
      <MemberSignature Language="VB.NET" Value="Public MustOverride Function Intersect (target As IPermission) As IPermission" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; abstract System::Security::IPermission ^ Intersect(System::Security::IPermission ^ target);" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Security.IPermission.Intersect(System.Security.IPermission)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Security.Permissions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Security.IPermission</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="target" Type="System.Security.IPermission" />
      </Parameters>
      <Docs>
        <param name="target"><span data-ttu-id="7e6e5-190">Разрешение, пересекающееся с текущим разрешением.</span><span class="sxs-lookup"><span data-stu-id="7e6e5-190">A permission to intersect with the current permission.</span></span> <span data-ttu-id="7e6e5-191">Его тип должен совпадать с типом текущего разрешения.</span><span class="sxs-lookup"><span data-stu-id="7e6e5-191">It must be of the same type as the current permission.</span></span></param>
        <summary><span data-ttu-id="7e6e5-192">При реализации производным классом создает и возвращает разрешение, представляющее собой пересечение текущего и указанного разрешений.</span><span class="sxs-lookup"><span data-stu-id="7e6e5-192">When implemented by a derived class, creates and returns a permission that is the intersection of the current permission and the specified permission.</span></span></summary>
        <returns><span data-ttu-id="7e6e5-193">Новое разрешение, представляющее собой пересечение текущего и указанного разрешений.</span><span class="sxs-lookup"><span data-stu-id="7e6e5-193">A new permission that represents the intersection of the current permission and the specified permission.</span></span> <span data-ttu-id="7e6e5-194">Если пересечение пусто, новое разрешение имеет значение <see langword="null" />.</span><span class="sxs-lookup"><span data-stu-id="7e6e5-194">This new permission is <see langword="null" /> if the intersection is empty.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="7e6e5-195">Пересечение двух разрешений является разрешением, которое описывает набор операций, в обоих разрешениях.</span><span class="sxs-lookup"><span data-stu-id="7e6e5-195">The intersection of two permissions is a permission that describes the set of operations they both describe in common.</span></span> <span data-ttu-id="7e6e5-196">Только запрос, передающий оба исходных разрешения, передает их пересечение.</span><span class="sxs-lookup"><span data-stu-id="7e6e5-196">Only a demand that passes both original permissions will pass the intersection.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="7e6e5-197">В следующем примере кода показано переопределение <xref:System.Security.CodeAccessPermission.Intersect%2A> метод.</span><span class="sxs-lookup"><span data-stu-id="7e6e5-197">The following code example shows an override of the <xref:System.Security.CodeAccessPermission.Intersect%2A> method.</span></span> <span data-ttu-id="7e6e5-198">Данный пример кода является частью большего примера, приведенного для <xref:System.Security.CodeAccessPermission> класса.</span><span class="sxs-lookup"><span data-stu-id="7e6e5-198">This code example is part of a larger example provided for the <xref:System.Security.CodeAccessPermission> class.</span></span>  
  
 [!code-cpp[System.Security.Permissions.NameIdPermission#5](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Security.Permissions.NameIdPermission/CPP/nameidpermission.cpp#5)]
 [!code-csharp[System.Security.Permissions.NameIdPermission#5](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Security.Permissions.NameIdPermission/CS/nameidpermission.cs#5)]
 [!code-vb[System.Security.Permissions.NameIdPermission#5](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Security.Permissions.NameIdPermission/VB/nameidpermission.vb#5)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="7e6e5-199">Параметр <paramref name="target" /> не равен <see langword="null" /> и не является экземпляром того же класса, что и текущее разрешение.</span><span class="sxs-lookup"><span data-stu-id="7e6e5-199">The <paramref name="target" /> parameter is not <see langword="null" /> and is not an instance of the same class as the current permission.</span></span></exception>
        <block subset="none" type="overrides">
          <para><span data-ttu-id="7e6e5-200">Необходимо переопределить этот метод в производном классе.</span><span class="sxs-lookup"><span data-stu-id="7e6e5-200">You must override this method in a derived class.</span></span></para>
        </block>
      </Docs>
    </Member>
    <Member MemberName="IsSubsetOf">
      <MemberSignature Language="C#" Value="public abstract bool IsSubsetOf (System.Security.IPermission target);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool IsSubsetOf(class System.Security.IPermission target) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Security.CodeAccessPermission.IsSubsetOf(System.Security.IPermission)" />
      <MemberSignature Language="VB.NET" Value="Public MustOverride Function IsSubsetOf (target As IPermission) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; abstract bool IsSubsetOf(System::Security::IPermission ^ target);" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Security.IPermission.IsSubsetOf(System.Security.IPermission)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Security.Permissions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="target" Type="System.Security.IPermission" />
      </Parameters>
      <Docs>
        <param name="target"><span data-ttu-id="7e6e5-201">Разрешение, для которого требуется проверить отношение подмножества.</span><span class="sxs-lookup"><span data-stu-id="7e6e5-201">A permission that is to be tested for the subset relationship.</span></span> <span data-ttu-id="7e6e5-202">Его тип должен совпадать с типом текущего разрешения.</span><span class="sxs-lookup"><span data-stu-id="7e6e5-202">This permission must be of the same type as the current permission.</span></span></param>
        <summary><span data-ttu-id="7e6e5-203">Когда реализован производным классом, определяет, является ли текущее разрешение подмножеством указанного разрешения.</span><span class="sxs-lookup"><span data-stu-id="7e6e5-203">When implemented by a derived class, determines whether the current permission is a subset of the specified permission.</span></span></summary>
        <returns>
          <span data-ttu-id="7e6e5-204">Значение <see langword="true" />, если текущее разрешение является подмножеством заданного разрешения; в противном случае — значение <see langword="false" />.</span><span class="sxs-lookup"><span data-stu-id="7e6e5-204"><see langword="true" /> if the current permission is a subset of the specified permission; otherwise, <see langword="false" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="7e6e5-205">Текущее разрешение является подмножеством указанного разрешения, если текущее разрешение задает набор операций, полностью содержащихся в заданном разрешении.</span><span class="sxs-lookup"><span data-stu-id="7e6e5-205">The current permission is a subset of the specified permission if the current permission specifies a set of operations that is wholly contained by the specified permission.</span></span> <span data-ttu-id="7e6e5-206">Например, разрешение, которое предоставляет доступ к C:\example.txt является подмножеством разрешения, предоставляющего доступ к C:\\.</span><span class="sxs-lookup"><span data-stu-id="7e6e5-206">For example, a permission that represents access to C:\example.txt is a subset of a permission that represents access to C:\\.</span></span> <span data-ttu-id="7e6e5-207">Если этот метод возвращает `true`, текущее разрешение не предоставляет большего доступа к защищенному ресурсу, чем указанное разрешение.</span><span class="sxs-lookup"><span data-stu-id="7e6e5-207">If this method returns `true`, the current permission represents no more access to the protected resource than does the specified permission.</span></span>  
  
 <span data-ttu-id="7e6e5-208">Следующие инструкции, обязательно `true` для всех переопределений <xref:System.Security.CodeAccessPermission.IsSubsetOf%2A> метод.</span><span class="sxs-lookup"><span data-stu-id="7e6e5-208">The following statements are required to be `true` for all overrides of the <xref:System.Security.CodeAccessPermission.IsSubsetOf%2A> method.</span></span> <span data-ttu-id="7e6e5-209">*X*, *Y*, и *Z* представляют объекты разрешений доступа пользовательского кода, которые не являются пустыми ссылками *U* представляет неограниченное разрешение доступа к коду, и *N* представляет пустое разрешение с <xref:System.Security.Permissions.PermissionState> из <xref:System.Security.Permissions.PermissionState.None>.</span><span class="sxs-lookup"><span data-stu-id="7e6e5-209">*X*, *Y*, and *Z* represent custom code access permission objects that are not null references, *U* represents an unrestricted code access permission, and *N* represents an empty permission with a <xref:System.Security.Permissions.PermissionState> of <xref:System.Security.Permissions.PermissionState.None>.</span></span>  
  
-   <span data-ttu-id="7e6e5-210">*X*. IsSubsetOf (*X*) возвращает `true`.</span><span class="sxs-lookup"><span data-stu-id="7e6e5-210">*X*.IsSubsetOf(*X*) returns `true`.</span></span>  
  
-   <span data-ttu-id="7e6e5-211">*X*. IsSubsetOf (*Y*) возвращает то же значение, что *Y*. IsSubsetOf (*X*), только если *X* и *Y* представляет тот же набор разрешений.</span><span class="sxs-lookup"><span data-stu-id="7e6e5-211">*X*.IsSubsetOf(*Y*) returns the same value as *Y*.IsSubsetOf(*X*) if and only if *X* and *Y* represent the same set of permissions.</span></span>  
  
-   <span data-ttu-id="7e6e5-212">Если *X*. IsSubsetOf (*Y*) и *Y*. IsSubsetOf (*Z*) в обоих случаях возвращается `true`, *X*. IsSubsetOf (*Z*) возвращает `true`.</span><span class="sxs-lookup"><span data-stu-id="7e6e5-212">If *X*.IsSubsetOf(*Y*) and *Y*.IsSubsetOf(*Z*) both return `true`, *X*.IsSubsetOf(*Z*) returns `true`.</span></span>  
  
-   <span data-ttu-id="7e6e5-213">*X*. IsSubsetOf (*U*) возвращает `true`.</span><span class="sxs-lookup"><span data-stu-id="7e6e5-213">*X*.IsSubsetOf(*U*) returns `true`.</span></span>  
  
-   <span data-ttu-id="7e6e5-214">*X*. IsSubsetOf (*N*) возвращает `false`.</span><span class="sxs-lookup"><span data-stu-id="7e6e5-214">*X*.IsSubsetOf(*N*) returns `false`.</span></span>  
  
-   <span data-ttu-id="7e6e5-215">*N*. IsSubsetOf (*X*) возвращает `true`.</span><span class="sxs-lookup"><span data-stu-id="7e6e5-215">*N*.IsSubsetOf(*X*) returns `true`.</span></span>  
  
 <span data-ttu-id="7e6e5-216">Если *X* и *Y* представляют объекты разрешений доступа пользовательского кода, которые являются пустыми ссылками *X*. IsSubsetOf (*Y*) возвращает `true`.</span><span class="sxs-lookup"><span data-stu-id="7e6e5-216">If *X* and *Y* represent custom code access permission objects that are null references, *X*.IsSubsetOf(*Y*) returns `true`.</span></span> <span data-ttu-id="7e6e5-217">Если *Z* также имеет значение null, то составная операция *X*. UNION (*Y*). IsSubsetOf (*Z*) также возвращает `true` поскольку объединение двух пустых разрешений является разрешением значение null.</span><span class="sxs-lookup"><span data-stu-id="7e6e5-217">If *Z* is also null, the compound set operation *X*.Union(*Y*).IsSubsetOf(*Z*) also returns `true` because the union of two null permissions is a null permission.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="7e6e5-218">В следующем примере кода показано переопределение <xref:System.Security.CodeAccessPermission.IsSubsetOf%2A> метод.</span><span class="sxs-lookup"><span data-stu-id="7e6e5-218">The following code example shows an override of the <xref:System.Security.CodeAccessPermission.IsSubsetOf%2A> method.</span></span> <span data-ttu-id="7e6e5-219">Данный пример кода является частью большего примера, приведенного для <xref:System.Security.CodeAccessPermission> класса.</span><span class="sxs-lookup"><span data-stu-id="7e6e5-219">This code example is part of a larger example provided for the <xref:System.Security.CodeAccessPermission> class.</span></span>  
  
 [!code-cpp[System.Security.Permissions.NameIdPermission#4](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Security.Permissions.NameIdPermission/CPP/nameidpermission.cpp#4)]
 [!code-csharp[System.Security.Permissions.NameIdPermission#4](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Security.Permissions.NameIdPermission/CS/nameidpermission.cs#4)]
 [!code-vb[System.Security.Permissions.NameIdPermission#4](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Security.Permissions.NameIdPermission/VB/nameidpermission.vb#4)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="7e6e5-220">Параметр <paramref name="target" /> не равен <see langword="null" /> и не относится к тому же типу, что и текущее разрешение.</span><span class="sxs-lookup"><span data-stu-id="7e6e5-220">The <paramref name="target" /> parameter is not <see langword="null" /> and is not of the same type as the current permission.</span></span></exception>
        <block subset="none" type="overrides">
          <para><span data-ttu-id="7e6e5-221">Необходимо переопределить этот метод в производном классе.</span><span class="sxs-lookup"><span data-stu-id="7e6e5-221">You must override this method in a derived class.</span></span></para>
        </block>
      </Docs>
    </Member>
    <Member MemberName="PermitOnly">
      <MemberSignature Language="C#" Value="public void PermitOnly ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void PermitOnly() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Security.CodeAccessPermission.PermitOnly" />
      <MemberSignature Language="VB.NET" Value="Public Sub PermitOnly ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void PermitOnly();" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Security.IStackWalk.PermitOnly</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Security.Permissions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="7e6e5-222">Запрещает вызывающим объектам выше в стеке вызовов использовать код, который вызывает этот метод для доступа ко всем ресурсам, за исключением ресурса, указанного текущим экземпляром.</span><span class="sxs-lookup"><span data-stu-id="7e6e5-222">Prevents callers higher in the call stack from using the code that calls this method to access all resources except for the resource specified by the current instance.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
> [!IMPORTANT]
>  <span data-ttu-id="7e6e5-223"><xref:System.Security.CodeAccessPermission.PermitOnly%2A> Метод должен использоваться только для защиты ресурсов от случайного доступа полностью доверенным кодом.</span><span class="sxs-lookup"><span data-stu-id="7e6e5-223">The <xref:System.Security.CodeAccessPermission.PermitOnly%2A> method should be used only to protect resources from accidental access by fully trusted code.</span></span> <span data-ttu-id="7e6e5-224">Он не должен использоваться для защиты ресурсов от умышленного злоупотребления ненадежным кодом.</span><span class="sxs-lookup"><span data-stu-id="7e6e5-224">It should not be used to protect resources from intentional misuse by untrusted code.</span></span> <span data-ttu-id="7e6e5-225">Например если метод `A` проблемы <xref:System.Security.CodeAccessPermission.PermitOnly%2A> разрешения и вызывает метод `B`, метод `B` описания можно переопределить <xref:System.Security.CodeAccessPermission.PermitOnly%2A> , выполнив <xref:System.Security.CodeAccessPermission.Assert%2A>.</span><span class="sxs-lookup"><span data-stu-id="7e6e5-225">For example, if method `A` issues a <xref:System.Security.CodeAccessPermission.PermitOnly%2A> for a permission and then calls method `B`, method `B` can overtly override the <xref:System.Security.CodeAccessPermission.PermitOnly%2A> by issuing an <xref:System.Security.CodeAccessPermission.Assert%2A>.</span></span> <span data-ttu-id="7e6e5-226">Вызываемый метод всегда выше в стеке.</span><span class="sxs-lookup"><span data-stu-id="7e6e5-226">The called method is always higher in the stack.</span></span> <span data-ttu-id="7e6e5-227">Таким образом Если метод `B` попытается получить доступ к защищенному ресурсу, система безопасности начинается проверка наличия разрешения с ним, так как метод `B` является непосредственного вызывающего объекта, а затем последовательно вниз в стек, чтобы подтвердить, что не <xref:System.Security.CodeAccessPermission.Deny%2A> или <xref:System.Security.CodeAccessPermission.PermitOnly%2A> ниже в стеке.</span><span class="sxs-lookup"><span data-stu-id="7e6e5-227">Therefore, if method `B` tries to access a protected resource, the security system begins checking for permissions with it because method `B` is the immediate caller, and then walks down the stack to confirm that there is no <xref:System.Security.CodeAccessPermission.Deny%2A> or <xref:System.Security.CodeAccessPermission.PermitOnly%2A> lower in the stack.</span></span> <span data-ttu-id="7e6e5-228">Метод `B`, который пытается получить доступ к ресурсу, можно остановить обход стека немедленно с помощью <xref:System.Security.CodeAccessPermission.Assert%2A> метод.</span><span class="sxs-lookup"><span data-stu-id="7e6e5-228">Method `B`, which is trying to access the resource, can stop the stack walk immediately by using the <xref:System.Security.CodeAccessPermission.Assert%2A> method.</span></span> <span data-ttu-id="7e6e5-229">В этом случае <xref:System.Security.CodeAccessPermission.PermitOnly%2A> помещаются в стек с помощью метода `A` (метод вызова) никогда не будет обнаружен.</span><span class="sxs-lookup"><span data-stu-id="7e6e5-229">In that case, the <xref:System.Security.CodeAccessPermission.PermitOnly%2A> placed on the stack by method `A` (the calling method) is never discovered.</span></span>  
  
 <span data-ttu-id="7e6e5-230"><xref:System.Security.CodeAccessPermission.PermitOnly%2A> Аналогично <xref:System.Security.CodeAccessPermission.Deny%2A>, в том, что оба метода приводят стека возвращать ошибку, если они в противном случае будет выполнено успешно.</span><span class="sxs-lookup"><span data-stu-id="7e6e5-230"><xref:System.Security.CodeAccessPermission.PermitOnly%2A> is similar to <xref:System.Security.CodeAccessPermission.Deny%2A>, in that both cause stack walks to fail when they would otherwise succeed.</span></span> <span data-ttu-id="7e6e5-231">Различие состоит в том <xref:System.Security.CodeAccessPermission.Deny%2A> задает разрешения, которые стека терпит неудачу, но <xref:System.Security.CodeAccessPermission.PermitOnly%2A> указывает только разрешения, которые не приводят к сбою стека.</span><span class="sxs-lookup"><span data-stu-id="7e6e5-231">The difference is that <xref:System.Security.CodeAccessPermission.Deny%2A> specifies permissions that will cause the stack walk to fail, but <xref:System.Security.CodeAccessPermission.PermitOnly%2A> specifies the only permissions that do not cause the stack walk to fail.</span></span>  
  
 <span data-ttu-id="7e6e5-232">Вызовите этот метод, чтобы убедиться, что код может использоваться для доступа к только к заданным ресурсам.</span><span class="sxs-lookup"><span data-stu-id="7e6e5-232">Call this method to ensure that your code can be used to access only the specified resources.</span></span> <span data-ttu-id="7e6e5-233">Вызов <xref:System.Security.CodeAccessPermission.PermitOnly%2A> действует до возвращается вызывающему коду, вызвавшему его.</span><span class="sxs-lookup"><span data-stu-id="7e6e5-233">The call to <xref:System.Security.CodeAccessPermission.PermitOnly%2A> is effective until the calling code returns to its caller.</span></span> <span data-ttu-id="7e6e5-234">Только один <xref:System.Security.CodeAccessPermission.PermitOnly%2A> могут быть активными в каждом кадре.</span><span class="sxs-lookup"><span data-stu-id="7e6e5-234">Only one <xref:System.Security.CodeAccessPermission.PermitOnly%2A> can be active on a frame.</span></span> <span data-ttu-id="7e6e5-235">Попытка вызвать <xref:System.Security.CodeAccessPermission.PermitOnly%2A> при наличии активного <xref:System.Security.CodeAccessPermission.PermitOnly%2A> существует на кадре приводит <xref:System.Security.SecurityException>.</span><span class="sxs-lookup"><span data-stu-id="7e6e5-235">An attempt to call <xref:System.Security.CodeAccessPermission.PermitOnly%2A> when an active <xref:System.Security.CodeAccessPermission.PermitOnly%2A> exists on the frame results in a <xref:System.Security.SecurityException>.</span></span> <span data-ttu-id="7e6e5-236">Вызовите <xref:System.Security.CodeAccessPermission.RevertPermitOnly%2A> или <xref:System.Security.CodeAccessPermission.RevertAll%2A> удаление активной <xref:System.Security.CodeAccessPermission.PermitOnly%2A>.</span><span class="sxs-lookup"><span data-stu-id="7e6e5-236">Call <xref:System.Security.CodeAccessPermission.RevertPermitOnly%2A> or <xref:System.Security.CodeAccessPermission.RevertAll%2A> to remove an active <xref:System.Security.CodeAccessPermission.PermitOnly%2A>.</span></span>  
  
 <span data-ttu-id="7e6e5-237"><xref:System.Security.CodeAccessPermission.PermitOnly%2A> учитывается для разрешения не предоставляются, так как запрос на это разрешение не будет успешным.</span><span class="sxs-lookup"><span data-stu-id="7e6e5-237"><xref:System.Security.CodeAccessPermission.PermitOnly%2A> is ignored for a permission not granted because a demand for that permission will not succeed.</span></span> <span data-ttu-id="7e6e5-238">Тем не менее если код, расположенный ниже, при вызове стеке вызовов <xref:System.Security.CodeAccessPermission.Demand%2A> этим разрешением, <xref:System.Security.SecurityException> возникает при проверке стека достигается код, который пытался вызвать <xref:System.Security.CodeAccessPermission.PermitOnly%2A>.</span><span class="sxs-lookup"><span data-stu-id="7e6e5-238">However, if code lower on the call stack later calls <xref:System.Security.CodeAccessPermission.Demand%2A> for that permission, a <xref:System.Security.SecurityException> is thrown when the stack walk reaches the code that tried to call <xref:System.Security.CodeAccessPermission.PermitOnly%2A>.</span></span> <span data-ttu-id="7e6e5-239">Это так, как код, вызвавший <xref:System.Security.CodeAccessPermission.PermitOnly%2A> не предоставлено разрешение, несмотря на вызов <xref:System.Security.CodeAccessPermission.PermitOnly%2A> для этого разрешения.</span><span class="sxs-lookup"><span data-stu-id="7e6e5-239">This is because the code that called <xref:System.Security.CodeAccessPermission.PermitOnly%2A> has not been granted the permission, even though it called <xref:System.Security.CodeAccessPermission.PermitOnly%2A> for that permission.</span></span> <span data-ttu-id="7e6e5-240">Стек вызовов обычно представляется как растет вниз, так что методы, расположенные выше в стеке вызовов вызывать методы, расположенные в стеке вызовов.</span><span class="sxs-lookup"><span data-stu-id="7e6e5-240">The call stack is typically represented as growing down, so that methods higher in the call stack call methods lower in the call stack.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Security.SecurityException"><span data-ttu-id="7e6e5-241">Уже имеется активное утверждение <see cref="M:System.Security.CodeAccessPermission.PermitOnly" /> для текущего кадра.</span><span class="sxs-lookup"><span data-stu-id="7e6e5-241">There is already an active <see cref="M:System.Security.CodeAccessPermission.PermitOnly" /> for the current frame.</span></span></exception>
        <block subset="none" type="overrides">
          <para><span data-ttu-id="7e6e5-242">Этот метод нельзя переопределить.</span><span class="sxs-lookup"><span data-stu-id="7e6e5-242">You cannot override this method.</span></span></para>
        </block>
      </Docs>
    </Member>
    <Member MemberName="RevertAll">
      <MemberSignature Language="C#" Value="public static void RevertAll ();" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void RevertAll() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Security.CodeAccessPermission.RevertAll" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub RevertAll ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void RevertAll();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Security.Permissions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="7e6e5-243">Приводит к удалению и выводу из действия всех предыдущих переопределений для текущего кадра.</span><span class="sxs-lookup"><span data-stu-id="7e6e5-243">Causes all previous overrides for the current frame to be removed and no longer in effect.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="7e6e5-244">При наличии перекрытия не (<xref:System.Security.CodeAccessPermission.Assert%2A>, <xref:System.Security.CodeAccessPermission.Deny%2A>, или <xref:System.Security.CodeAccessPermission.PermitOnly%2A>) для текущего кадра <xref:System.ExecutionEngineException> возникает исключение.</span><span class="sxs-lookup"><span data-stu-id="7e6e5-244">If there are no overrides (<xref:System.Security.CodeAccessPermission.Assert%2A>, <xref:System.Security.CodeAccessPermission.Deny%2A>, or <xref:System.Security.CodeAccessPermission.PermitOnly%2A>) for the current frame, an <xref:System.ExecutionEngineException> is thrown.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="7e6e5-245">Для текущего кадра отсутствует предыдущий метод <see cref="M:System.Security.CodeAccessPermission.Assert" />, <see cref="M:System.Security.CodeAccessPermission.Deny" /> или <see cref="M:System.Security.CodeAccessPermission.PermitOnly" />.</span><span class="sxs-lookup"><span data-stu-id="7e6e5-245">There is no previous <see cref="M:System.Security.CodeAccessPermission.Assert" />, <see cref="M:System.Security.CodeAccessPermission.Deny" />, or <see cref="M:System.Security.CodeAccessPermission.PermitOnly" /> for the current frame.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="RevertAssert">
      <MemberSignature Language="C#" Value="public static void RevertAssert ();" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void RevertAssert() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Security.CodeAccessPermission.RevertAssert" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub RevertAssert ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void RevertAssert();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Security.Permissions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="7e6e5-246">Удаляет все предыдущие методы <see cref="M:System.Security.CodeAccessPermission.Assert" /> для текущего кадра и прекращает их действие.</span><span class="sxs-lookup"><span data-stu-id="7e6e5-246">Causes any previous <see cref="M:System.Security.CodeAccessPermission.Assert" /> for the current frame to be removed and no longer in effect.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="7e6e5-247">При наличии не <xref:System.Security.CodeAccessPermission.Assert%2A> для текущего кадра <xref:System.ExecutionEngineException> возникает исключение.</span><span class="sxs-lookup"><span data-stu-id="7e6e5-247">If there is no <xref:System.Security.CodeAccessPermission.Assert%2A> for the current frame, an <xref:System.ExecutionEngineException> is thrown.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="7e6e5-248">Для текущего кадра отсутствует предыдущий метод <see cref="M:System.Security.CodeAccessPermission.Assert" />.</span><span class="sxs-lookup"><span data-stu-id="7e6e5-248">There is no previous <see cref="M:System.Security.CodeAccessPermission.Assert" /> for the current frame.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="RevertDeny">
      <MemberSignature Language="C#" Value="public static void RevertDeny ();" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void RevertDeny() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Security.CodeAccessPermission.RevertDeny" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub RevertDeny ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void RevertDeny();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Security.Permissions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="7e6e5-249">Удаляет все предыдущие методы <see cref="M:System.Security.CodeAccessPermission.Deny" /> для текущего кадра и прекращает их действие.</span><span class="sxs-lookup"><span data-stu-id="7e6e5-249">Causes any previous <see cref="M:System.Security.CodeAccessPermission.Deny" /> for the current frame to be removed and no longer in effect.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="7e6e5-250">При наличии не <xref:System.Security.CodeAccessPermission.Deny%2A> для текущего кадра <xref:System.ExecutionEngineException> возникает исключение.</span><span class="sxs-lookup"><span data-stu-id="7e6e5-250">If there is no <xref:System.Security.CodeAccessPermission.Deny%2A> for the current frame, an <xref:System.ExecutionEngineException> is thrown.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="7e6e5-251">Для текущего кадра отсутствует предыдущий метод <see cref="M:System.Security.CodeAccessPermission.Deny" />.</span><span class="sxs-lookup"><span data-stu-id="7e6e5-251">There is no previous <see cref="M:System.Security.CodeAccessPermission.Deny" /> for the current frame.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="RevertPermitOnly">
      <MemberSignature Language="C#" Value="public static void RevertPermitOnly ();" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void RevertPermitOnly() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Security.CodeAccessPermission.RevertPermitOnly" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub RevertPermitOnly ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void RevertPermitOnly();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Security.Permissions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="7e6e5-252">Удаляет все предыдущие методы <see cref="M:System.Security.CodeAccessPermission.PermitOnly" /> для текущего кадра и прекращает их действие.</span><span class="sxs-lookup"><span data-stu-id="7e6e5-252">Causes any previous <see cref="M:System.Security.CodeAccessPermission.PermitOnly" /> for the current frame to be removed and no longer in effect.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="7e6e5-253">При наличии не <xref:System.Security.CodeAccessPermission.PermitOnly%2A> для текущего кадра <xref:System.ExecutionEngineException> возникает исключение.</span><span class="sxs-lookup"><span data-stu-id="7e6e5-253">If there is no <xref:System.Security.CodeAccessPermission.PermitOnly%2A> for the current frame, an <xref:System.ExecutionEngineException> is thrown.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="7e6e5-254">Для текущего кадра отсутствует предыдущий метод <see cref="M:System.Security.CodeAccessPermission.PermitOnly" />.</span><span class="sxs-lookup"><span data-stu-id="7e6e5-254">There is no previous <see cref="M:System.Security.CodeAccessPermission.PermitOnly" /> for the current frame.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="System.Security.IPermission.Demand">
      <MemberSignature Language="C#" Value="void IPermission.Demand ();" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance void System.Security.IPermission.Demand() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Security.CodeAccessPermission.System#Security#IPermission#Demand" />
      <MemberSignature Language="VB.NET" Value="Sub Demand () Implements IPermission.Demand" />
      <MemberSignature Language="C++ CLI" Value=" virtual void System.Security.IPermission.Demand() = System::Security::IPermission::Demand;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Security.IPermission.Demand</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="System.Security.IStackWalk.Assert">
      <MemberSignature Language="C#" Value="void IStackWalk.Assert ();" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance void System.Security.IStackWalk.Assert() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Security.CodeAccessPermission.System#Security#IStackWalk#Assert" />
      <MemberSignature Language="VB.NET" Value="Sub Assert () Implements IStackWalk.Assert" />
      <MemberSignature Language="C++ CLI" Value=" virtual void System.Security.IStackWalk.Assert() = System::Security::IStackWalk::Assert;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Security.IStackWalk.Assert</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="System.Security.IStackWalk.Demand">
      <MemberSignature Language="C#" Value="void IStackWalk.Demand ();" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance void System.Security.IStackWalk.Demand() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Security.CodeAccessPermission.System#Security#IStackWalk#Demand" />
      <MemberSignature Language="VB.NET" Value="Sub Demand () Implements IStackWalk.Demand" />
      <MemberSignature Language="C++ CLI" Value=" virtual void System.Security.IStackWalk.Demand() = System::Security::IStackWalk::Demand;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Security.IStackWalk.Demand</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="System.Security.IStackWalk.Deny">
      <MemberSignature Language="C#" Value="void IStackWalk.Deny ();" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance void System.Security.IStackWalk.Deny() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Security.CodeAccessPermission.System#Security#IStackWalk#Deny" />
      <MemberSignature Language="VB.NET" Value="Sub Deny () Implements IStackWalk.Deny" />
      <MemberSignature Language="C++ CLI" Value=" virtual void System.Security.IStackWalk.Deny() = System::Security::IStackWalk::Deny;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Security.IStackWalk.Deny</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="System.Security.IStackWalk.PermitOnly">
      <MemberSignature Language="C#" Value="void IStackWalk.PermitOnly ();" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance void System.Security.IStackWalk.PermitOnly() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Security.CodeAccessPermission.System#Security#IStackWalk#PermitOnly" />
      <MemberSignature Language="VB.NET" Value="Sub PermitOnly () Implements IStackWalk.PermitOnly" />
      <MemberSignature Language="C++ CLI" Value=" virtual void System.Security.IStackWalk.PermitOnly() = System::Security::IStackWalk::PermitOnly;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Security.IStackWalk.PermitOnly</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ToString">
      <MemberSignature Language="C#" Value="public override string ToString ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance string ToString() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Security.CodeAccessPermission.ToString" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function ToString () As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override System::String ^ ToString();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Security.Permissions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="7e6e5-255">Создает и возвращает строковое представление текущего объекта разрешения.</span><span class="sxs-lookup"><span data-stu-id="7e6e5-255">Creates and returns a string representation of the current permission object.</span></span></summary>
        <returns><span data-ttu-id="7e6e5-256">Строковое представление текущего объекта разрешения.</span><span class="sxs-lookup"><span data-stu-id="7e6e5-256">A string representation of the current permission object.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="7e6e5-257">Этот метод полезен при отладке, когда нужно отобразить разрешение в виде строки.</span><span class="sxs-lookup"><span data-stu-id="7e6e5-257">This method is useful in debugging when you need to display the permission as a string.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ToXml">
      <MemberSignature Language="C#" Value="public abstract System.Security.SecurityElement ToXml ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Security.SecurityElement ToXml() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Security.CodeAccessPermission.ToXml" />
      <MemberSignature Language="VB.NET" Value="Public MustOverride Function ToXml () As SecurityElement" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; abstract System::Security::SecurityElement ^ ToXml();" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Security.ISecurityEncodable.ToXml</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Security.Permissions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Security.SecurityElement</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="7e6e5-258">При переопределении в производном классе создает кодировку XML для объекта безопасности и его текущего состояния.</span><span class="sxs-lookup"><span data-stu-id="7e6e5-258">When overridden in a derived class, creates an XML encoding of the security object and its current state.</span></span></summary>
        <returns><span data-ttu-id="7e6e5-259">Кодировка XML объекта безопасности, включающая сведения о состоянии.</span><span class="sxs-lookup"><span data-stu-id="7e6e5-259">An XML encoding of the security object, including any state information.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="7e6e5-260">Пользовательский код, который расширяет объекты безопасности необходимо реализовать <xref:System.Security.CodeAccessPermission.ToXml%2A> и <xref:System.Security.CodeAccessPermission.FromXml%2A> методов, чтобы объекты можно было кодировать безопасности.</span><span class="sxs-lookup"><span data-stu-id="7e6e5-260">Custom code that extends security objects needs to implement the <xref:System.Security.CodeAccessPermission.ToXml%2A> and <xref:System.Security.CodeAccessPermission.FromXml%2A> methods to make the objects security-encodable.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="7e6e5-261">В следующем примере кода показано переопределение <xref:System.Security.CodeAccessPermission.ToXml%2A> метод.</span><span class="sxs-lookup"><span data-stu-id="7e6e5-261">The following code example shows an override of the <xref:System.Security.CodeAccessPermission.ToXml%2A> method.</span></span> <span data-ttu-id="7e6e5-262">Данный пример кода является частью большего примера, приведенного для <xref:System.Security.CodeAccessPermission> класса.</span><span class="sxs-lookup"><span data-stu-id="7e6e5-262">This code example is part of a larger example provided for the <xref:System.Security.CodeAccessPermission> class.</span></span>  
  
 [!code-cpp[System.Security.Permissions.NameIdPermission#11](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Security.Permissions.NameIdPermission/CPP/nameidpermission.cpp#11)]
 [!code-csharp[System.Security.Permissions.NameIdPermission#11](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Security.Permissions.NameIdPermission/CS/nameidpermission.cs#11)]
 [!code-vb[System.Security.Permissions.NameIdPermission#11](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Security.Permissions.NameIdPermission/VB/nameidpermission.vb#11)]  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides">
          <para><span data-ttu-id="7e6e5-263">Необходимо переопределить этот метод в производном классе.</span><span class="sxs-lookup"><span data-stu-id="7e6e5-263">You must override this method in a derived class.</span></span></para>
        </block>
      </Docs>
    </Member>
    <Member MemberName="Union">
      <MemberSignature Language="C#" Value="public virtual System.Security.IPermission Union (System.Security.IPermission other);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Security.IPermission Union(class System.Security.IPermission other) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Security.CodeAccessPermission.Union(System.Security.IPermission)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function Union (other As IPermission) As IPermission" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::Security::IPermission ^ Union(System::Security::IPermission ^ other);" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Security.IPermission.Union(System.Security.IPermission)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Security.Permissions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Security.IPermission</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="other" Type="System.Security.IPermission" />
      </Parameters>
      <Docs>
        <param name="other"><span data-ttu-id="7e6e5-264">Разрешение, которое требуется объединить с текущим разрешением.</span><span class="sxs-lookup"><span data-stu-id="7e6e5-264">A permission to combine with the current permission.</span></span> <span data-ttu-id="7e6e5-265">Его тип должен совпадать с типом текущего разрешения.</span><span class="sxs-lookup"><span data-stu-id="7e6e5-265">It must be of the same type as the current permission.</span></span></param>
        <summary><span data-ttu-id="7e6e5-266">При переопределении в производном классе создает разрешение, представляющее собой объединение текущего и указанного разрешений.</span><span class="sxs-lookup"><span data-stu-id="7e6e5-266">When overridden in a derived class, creates a permission that is the union of the current permission and the specified permission.</span></span></summary>
        <returns><span data-ttu-id="7e6e5-267">Новое разрешение, представляющее собой объединение текущего и указанного разрешений.</span><span class="sxs-lookup"><span data-stu-id="7e6e5-267">A new permission that represents the union of the current permission and the specified permission.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="7e6e5-268">Результат вызова метода <xref:System.Security.CodeAccessPermission.Union%2A> является разрешение, представляющее все действия, представленные текущего разрешения и указанного разрешений.</span><span class="sxs-lookup"><span data-stu-id="7e6e5-268">The result of a call to <xref:System.Security.CodeAccessPermission.Union%2A> is a permission that represents all the operations represented by both the current permission and the specified permission.</span></span> <span data-ttu-id="7e6e5-269">Любой запрос, передающий любое разрешение, передает их объединение.</span><span class="sxs-lookup"><span data-stu-id="7e6e5-269">Any demand that passes either permission passes their union.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="7e6e5-270">В следующем примере кода показано переопределение <xref:System.Security.CodeAccessPermission.Union%2A> метод.</span><span class="sxs-lookup"><span data-stu-id="7e6e5-270">The following code example shows an override of the <xref:System.Security.CodeAccessPermission.Union%2A> method.</span></span> <span data-ttu-id="7e6e5-271">Данный пример кода является частью большего примера, приведенного для <xref:System.Security.CodeAccessPermission> класса.</span><span class="sxs-lookup"><span data-stu-id="7e6e5-271">This code example is part of a larger example provided for the <xref:System.Security.CodeAccessPermission> class.</span></span>  
  
 [!code-cpp[System.Security.Permissions.NameIdPermission#12](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Security.Permissions.NameIdPermission/CPP/nameidpermission.cpp#12)]
 [!code-csharp[System.Security.Permissions.NameIdPermission#12](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Security.Permissions.NameIdPermission/CS/nameidpermission.cs#12)]
 [!code-vb[System.Security.Permissions.NameIdPermission#12](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Security.Permissions.NameIdPermission/VB/nameidpermission.vb#12)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.NotSupportedException"><span data-ttu-id="7e6e5-272">Параметр <paramref name="other" /> не равен <see langword="null" />.</span><span class="sxs-lookup"><span data-stu-id="7e6e5-272">The <paramref name="other" /> parameter is not <see langword="null" />.</span></span> <span data-ttu-id="7e6e5-273">Этот метод поддерживается на данном уровне только при передаче значения <see langword="null" />.</span><span class="sxs-lookup"><span data-stu-id="7e6e5-273">This method is only supported at this level when passed <see langword="null" />.</span></span></exception>
        <block subset="none" type="overrides">
          <para><span data-ttu-id="7e6e5-274">Необходимо переопределить этот метод в производном классе.</span><span class="sxs-lookup"><span data-stu-id="7e6e5-274">You must override this method in a derived class.</span></span> <span data-ttu-id="7e6e5-275">Копия разрешение должно возвращаться, если значение <paramref name="other" /> параметр <see langword="null" />.</span><span class="sxs-lookup"><span data-stu-id="7e6e5-275">You should return a copy of the permission if the value of the <paramref name="other" /> parameter is <see langword="null" />.</span></span></para>
        </block>
      </Docs>
    </Member>
  </Members>
</Type>