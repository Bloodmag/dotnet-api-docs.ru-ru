<Type Name="SupportedAddressingMode" FullName="System.ServiceModel.Channels.SupportedAddressingMode">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="7572a49e3eb49e3e583c5413d3be8bece2605b1d" />
    <Meta Name="ms.sourcegitcommit" Value="3907f9a5780957d9c85af2e54c0a5bc2a5bf19ab" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="ru-RU" />
    <Meta Name="ms.lasthandoff" Value="06/14/2018" />
    <Meta Name="ms.locfileid" Value="34313555" />
  </Metadata>
  <TypeSignature Language="C#" Value="public enum SupportedAddressingMode" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed SupportedAddressingMode extends System.Enum" />
  <TypeSignature Language="DocId" Value="T:System.ServiceModel.Channels.SupportedAddressingMode" />
  <TypeSignature Language="VB.NET" Value="Public Enum SupportedAddressingMode" />
  <TypeSignature Language="C++ CLI" Value="public enum class SupportedAddressingMode" />
  <AssemblyInfo>
    <AssemblyName>System.ServiceModel</AssemblyName>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Enum</BaseTypeName>
  </Base>
  <Docs>
    <summary>
      <span data-ttu-id="0abd5-101">Указывает, поддерживает ли служба отправку ответов только на анонимные адреса, только на неанонимные адреса, или на оба типа адресов.</span>
      <span class="sxs-lookup">
        <span data-stu-id="0abd5-101">Specifies whether a service supports sending responses to anonymous addresses only, to non-anonymous addresses only, or to both.</span>
      </span>
    </summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="0abd5-102">Это перечисление используется для задания возможностей сервера, который, в свою очередь, устанавливает требования для клиентов.</span><span class="sxs-lookup"><span data-stu-id="0abd5-102">This enumeration is used to specify the capability of a server, which, in turn, imposes a requirement on its clients.</span></span>  
  
 <span data-ttu-id="0abd5-103">Windows Communication Foundation (WCF) имеется множество адресации для указания, куда должны отправляться сообщения.</span><span class="sxs-lookup"><span data-stu-id="0abd5-103">Windows Communication Foundation (WCF) has a variety of addressing controls for specifying where messages should be sent.</span></span> <span data-ttu-id="0abd5-104">Например, есть логический адрес <xref:System.ServiceModel.Channels.MessageHeaders.To%2A> для места назначения сообщения, физический адрес ("Via"), который используется транспортом, прослушиваемым службой, и адрес <xref:System.ServiceModel.Channels.MessageHeaders.ReplyTo%2A> конечной точки, содержащий адрес конечной точки клиента.</span><span class="sxs-lookup"><span data-stu-id="0abd5-104">For example, there is the logical <xref:System.ServiceModel.Channels.MessageHeaders.To%2A> address for the message destination, the physical ("Via") address, used by the transport, at which a service listens, and the <xref:System.ServiceModel.Channels.MessageHeaders.ReplyTo%2A> address of the endpoint that provides the address of the client endpoint.</span></span>  
  
 <span data-ttu-id="0abd5-105">В самом общем случае, когда две стороны обмениваются сообщениями только между собой, нет необходимости отдельно задавать эти адреса.</span><span class="sxs-lookup"><span data-stu-id="0abd5-105">In the most basic case, when two parties exchange messages between themselves only, it is not necessary to specify these addresses separately.</span></span> <span data-ttu-id="0abd5-106">Но так как в обмене сообщениями могут быть задействованы другие пункты назначения, нужно уметь определить, когда требуется задать эти адреса явно.</span><span class="sxs-lookup"><span data-stu-id="0abd5-106">But because exchanges can involve other message destinations, you must be able to specify when addresses must be explicitly provided.</span></span> <span data-ttu-id="0abd5-107">Даже при взаимодействии только двух сторон это иногда может потребоваться, как, например, в случае с двусторонним HTTP-взаимодействием, когда сервер должен создавать собственный HTTP-запрос.</span><span class="sxs-lookup"><span data-stu-id="0abd5-107">Even between just two parties this ability is sometimes required, as with dual HTTP where the server must create its own HTTP request.</span></span> <span data-ttu-id="0abd5-108">Следующие типы отношений определены перечислением <xref:System.ServiceModel.Channels.SupportedAddressingMode> для описания шаблонов обмена сообщениями.</span><span class="sxs-lookup"><span data-stu-id="0abd5-108">The following kinds of relationships are defined by the <xref:System.ServiceModel.Channels.SupportedAddressingMode> enumeration to capture these messaging patterns:</span></span>  
  
-   <span data-ttu-id="0abd5-109">Анонимные адреса — основной вид адресации.</span><span class="sxs-lookup"><span data-stu-id="0abd5-109">Anonymous addresses are the most basic form of addressing.</span></span> <span data-ttu-id="0abd5-110">Анонимная адресация используется, если есть путь ответа по умолчанию.</span><span class="sxs-lookup"><span data-stu-id="0abd5-110">Anonymous addressing is used when there is a default path for a response.</span></span> <span data-ttu-id="0abd5-111">Протокол TCP — это двунаправленный транспорт, ответ на сообщение TCP может быть отправлен обратно на тот же сокет, с которого пришло исходное сообщение.</span><span class="sxs-lookup"><span data-stu-id="0abd5-111">TCP is a bi-directional communication transport and the response to a TCP message can be sent back to the other side of the socket that sent the original message.</span></span> <span data-ttu-id="0abd5-112">Аналогично, модель запрос-ответ протокола HTTP отправляет ответы по каналу HTTP-ответа.</span><span class="sxs-lookup"><span data-stu-id="0abd5-112">Similarly, the request-reply model of HTTP sends responses through the HTTP reply channel.</span></span> <span data-ttu-id="0abd5-113">Ни один из этих двух видов ответов не требует указания, куда идут сообщения ответа-HTTP.</span><span class="sxs-lookup"><span data-stu-id="0abd5-113">Neither of these responses requires specifying where the response messages are going.</span></span> <span data-ttu-id="0abd5-114">Если сервер требует анонимных ответов от клиента, используется анонимный значение перечисления.</span><span class="sxs-lookup"><span data-stu-id="0abd5-114">When a server requires anonymous responses from the client, it uses the Anonymous value of the enumeration.</span></span> <span data-ttu-id="0abd5-115">WCF системных <xref:System.ServiceModel.NetTcpBinding>, <xref:System.ServiceModel.BasicHttpBinding> и <xref:System.ServiceModel.WSHttpBinding> привязки всегда использовать анонимные адреса.</span><span class="sxs-lookup"><span data-stu-id="0abd5-115">The WCF system-provided <xref:System.ServiceModel.NetTcpBinding>, <xref:System.ServiceModel.BasicHttpBinding> and <xref:System.ServiceModel.WSHttpBinding> bindings always use Anonymous addresses.</span></span>  
  
-   <span data-ttu-id="0abd5-116">Неанонимные адреса будут использоваться при отправке ответа требует создания нового канала связи.</span><span class="sxs-lookup"><span data-stu-id="0abd5-116">NonAnonymous addresses are used when sending the response requires creating a new channel for communication.</span></span> <span data-ttu-id="0abd5-117">WCF системных <xref:System.ServiceModel.WSDualHttpBinding> привязка использует неанонимный адрес.</span><span class="sxs-lookup"><span data-stu-id="0abd5-117">The WCF system-provided <xref:System.ServiceModel.WSDualHttpBinding> binding uses a NonAnonymous address.</span></span> <span data-ttu-id="0abd5-118">При двустороннем HTTP-взаимодействии клиент создает HTTP-запрос для отправки сообщения, а затем сервер должен создать собственный HTTP-запрос для отправки ответа.</span><span class="sxs-lookup"><span data-stu-id="0abd5-118">With dual HTTP, the client creates an HTTP request to send a message and then the server must create its own HTTP request to send a response.</span></span> <span data-ttu-id="0abd5-119">Поскольку сервер инициирует отправку, он должен указать определенную конечную точку для установки соединения.</span><span class="sxs-lookup"><span data-stu-id="0abd5-119">Because the server is initiating the send, it must have a specific endpoint to establish the connection.</span></span> <span data-ttu-id="0abd5-120">Необходимо предоставить серверу адрес конечной точки для ответа.</span><span class="sxs-lookup"><span data-stu-id="0abd5-120">You must provide the server the address of an endpoint for its response.</span></span> <span data-ttu-id="0abd5-121">Аналогично Если служба должна ответить на одностороннее сообщение, полученное, необходимо также неанонимных адресов, поскольку нет обратного канала для обмена данными.</span><span class="sxs-lookup"><span data-stu-id="0abd5-121">Similarly, if a service must respond to a one-way message that it received, it also requires a NonAnonymous address because there is no back channel available for communication.</span></span> <span data-ttu-id="0abd5-122">Если сервер отправляет сообщение обратно, требуется совершенно отдельная операция, не связанная с операцией отправки первого сообщения.</span><span class="sxs-lookup"><span data-stu-id="0abd5-122">If the server sends a message back, a completely separate operation from that used to send the first message is required.</span></span>  
  
-   <span data-ttu-id="0abd5-123">Смешанный — третий вид адресации, который объединяет в себе анонимный доступ и неанонимных адреса в зависимости от того, который отправляется сообщение.</span><span class="sxs-lookup"><span data-stu-id="0abd5-123">Mixed is a third form of addressing which combines Anonymous and NonAnonymous addresses depending on the message that is being sent.</span></span> <span data-ttu-id="0abd5-124">Типичный пример адресации в режиме Mixed — использование выделенного компьютера для обработки сообщений об ошибках и подтверждений.</span><span class="sxs-lookup"><span data-stu-id="0abd5-124">A typical example of mixed-mode addressing is the use of a dedicated machine for processing fault or acknowledgment messages.</span></span> <span data-ttu-id="0abd5-125">Если в стандартной последовательности обмена для ответов — HTTP или TCP, для ответных сообщений используется анонимная адресация, но ошибок используется адресация non-anonymous.</span><span class="sxs-lookup"><span data-stu-id="0abd5-125">If the standard exchange sequence for replies is HTTP or TCP, the responses use Anonymous addressing but the faults use non-anonymous addressing.</span></span> <span data-ttu-id="0abd5-126">Хотя WCF предоставляет возможность в какой-либо стандартной привязке адресации Mixed, вполне возможно создать канал, позволяющий службе отправлять ответы напрямую по обратному каналу (если адрес ответа является анонимный) или по отдельному канал (когда адрес ответа является неанонимных).</span><span class="sxs-lookup"><span data-stu-id="0abd5-126">While WCF does not provide Mixed addressing functionality in one of its standard bindings, it is possible to write a channel that allows the service to send responses directly on the back-channel (when the response address is Anonymous) or on a separate channel (when the response address is NonAnonymous).</span></span> <span data-ttu-id="0abd5-127">В этом случае элемент привязки канала используется для задания <xref:System.ServiceModel.Channels.SupportedAddressingMode> смешанный режим.</span><span class="sxs-lookup"><span data-stu-id="0abd5-127">In such a case, the binding element of the channel is used to set <xref:System.ServiceModel.Channels.SupportedAddressingMode> to Mixed.</span></span>  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName="Anonymous">
      <MemberSignature Language="C#" Value="Anonymous" />
      <MemberSignature Language="ILAsm" Value=".field public static literal valuetype System.ServiceModel.Channels.SupportedAddressingMode Anonymous = int32(0)" />
      <MemberSignature Language="DocId" Value="F:System.ServiceModel.Channels.SupportedAddressingMode.Anonymous" />
      <MemberSignature Language="VB.NET" Value="Anonymous" />
      <MemberSignature Language="C++ CLI" Value="Anonymous" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.ServiceModel.Channels.SupportedAddressingMode</ReturnType>
      </ReturnValue>
      <MemberValue>0</MemberValue>
      <Docs>
        <summary>
          <span data-ttu-id="0abd5-128">Сервер поддерживает только анонимные адреса и клиенты должны предоставлять анонимный обратный адрес.</span>
          <span class="sxs-lookup">
            <span data-stu-id="0abd5-128">The server only supports anonymous addresses and clients must provide an anonymous response address.</span>
          </span>
        </summary>
      </Docs>
    </Member>
    <Member MemberName="Mixed">
      <MemberSignature Language="C#" Value="Mixed" />
      <MemberSignature Language="ILAsm" Value=".field public static literal valuetype System.ServiceModel.Channels.SupportedAddressingMode Mixed = int32(2)" />
      <MemberSignature Language="DocId" Value="F:System.ServiceModel.Channels.SupportedAddressingMode.Mixed" />
      <MemberSignature Language="VB.NET" Value="Mixed" />
      <MemberSignature Language="C++ CLI" Value="Mixed" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.ServiceModel.Channels.SupportedAddressingMode</ReturnType>
      </ReturnValue>
      <MemberValue>2</MemberValue>
      <Docs>
        <summary>
          <span data-ttu-id="0abd5-129">Сервер поддерживает анонимные и неанонимные адреса и клиенты могут выбрать использовать один из них или оба.</span>
          <span class="sxs-lookup">
            <span data-stu-id="0abd5-129">The server supports both anonymous and non-anonymous addresses and clients may choose to use either or both.</span>
          </span>
        </summary>
      </Docs>
    </Member>
    <Member MemberName="NonAnonymous">
      <MemberSignature Language="C#" Value="NonAnonymous" />
      <MemberSignature Language="ILAsm" Value=".field public static literal valuetype System.ServiceModel.Channels.SupportedAddressingMode NonAnonymous = int32(1)" />
      <MemberSignature Language="DocId" Value="F:System.ServiceModel.Channels.SupportedAddressingMode.NonAnonymous" />
      <MemberSignature Language="VB.NET" Value="NonAnonymous" />
      <MemberSignature Language="C++ CLI" Value="NonAnonymous" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.ServiceModel.Channels.SupportedAddressingMode</ReturnType>
      </ReturnValue>
      <MemberValue>1</MemberValue>
      <Docs>
        <summary>
          <span data-ttu-id="0abd5-130">Сервер поддерживает только неанонимные адреса и клиенты должны предоставлять неанонимный обратный адрес.</span>
          <span class="sxs-lookup">
            <span data-stu-id="0abd5-130">The server only supports non-anonymous addresses and clients must provide a non-anonymous response address.</span>
          </span>
        </summary>
      </Docs>
    </Member>
  </Members>
</Type>