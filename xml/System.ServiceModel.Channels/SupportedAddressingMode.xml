<Type Name="SupportedAddressingMode" FullName="System.ServiceModel.Channels.SupportedAddressingMode">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="1543cde8dbf5d2afa103db8cd8285b3cfad2e0dd" />
    <Meta Name="ms.sourcegitcommit" Value="6a0b904069161bbaec4ffd02aa7d9cf38c61e72e" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="ru-RU" />
    <Meta Name="ms.lasthandoff" Value="06/24/2018" />
    <Meta Name="ms.locfileid" Value="36620405" />
  </Metadata>
  <TypeSignature Language="C#" Value="public enum SupportedAddressingMode" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed SupportedAddressingMode extends System.Enum" />
  <TypeSignature Language="DocId" Value="T:System.ServiceModel.Channels.SupportedAddressingMode" />
  <TypeSignature Language="VB.NET" Value="Public Enum SupportedAddressingMode" />
  <TypeSignature Language="C++ CLI" Value="public enum class SupportedAddressingMode" />
  <TypeSignature Language="F#" Value="type SupportedAddressingMode = " />
  <AssemblyInfo>
    <AssemblyName>System.ServiceModel</AssemblyName>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Enum</BaseTypeName>
  </Base>
  <Docs>
    <summary>Указывает, поддерживает ли служба отправку ответов только на анонимные адреса, только на неанонимные адреса, или на оба типа адресов.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Это перечисление используется для задания возможностей сервера, который, в свою очередь, устанавливает требования для клиентов.  
  
 Windows Communication Foundation (WCF) имеется множество адресации для указания, куда должны отправляться сообщения. Например, есть логический адрес <xref:System.ServiceModel.Channels.MessageHeaders.To%2A> для места назначения сообщения, физический адрес ("Via"), который используется транспортом, прослушиваемым службой, и адрес <xref:System.ServiceModel.Channels.MessageHeaders.ReplyTo%2A> конечной точки, содержащий адрес конечной точки клиента.  
  
 В самом общем случае, когда две стороны обмениваются сообщениями только между собой, нет необходимости отдельно задавать эти адреса. Но так как в обмене сообщениями могут быть задействованы другие пункты назначения, нужно уметь определить, когда требуется задать эти адреса явно. Даже при взаимодействии только двух сторон это иногда может потребоваться, как, например, в случае с двусторонним HTTP-взаимодействием, когда сервер должен создавать собственный HTTP-запрос. Следующие типы отношений определены перечислением <xref:System.ServiceModel.Channels.SupportedAddressingMode> для описания шаблонов обмена сообщениями.  
  
-   Анонимные адреса — основной вид адресации. Анонимная адресация используется, если есть путь ответа по умолчанию. Протокол TCP — это двунаправленный транспорт, ответ на сообщение TCP может быть отправлен обратно на тот же сокет, с которого пришло исходное сообщение. Аналогично, модель запрос-ответ протокола HTTP отправляет ответы по каналу HTTP-ответа. Ни один из этих двух видов ответов не требует указания, куда идут сообщения ответа-HTTP. Если сервер требует анонимных ответов от клиента, используется анонимный значение перечисления. WCF системных <xref:System.ServiceModel.NetTcpBinding>, <xref:System.ServiceModel.BasicHttpBinding> и <xref:System.ServiceModel.WSHttpBinding> привязки всегда использовать анонимные адреса.  
  
-   Неанонимные адреса будут использоваться при отправке ответа требует создания нового канала связи. WCF системных <xref:System.ServiceModel.WSDualHttpBinding> привязка использует неанонимный адрес. При двустороннем HTTP-взаимодействии клиент создает HTTP-запрос для отправки сообщения, а затем сервер должен создать собственный HTTP-запрос для отправки ответа. Поскольку сервер инициирует отправку, он должен указать определенную конечную точку для установки соединения. Необходимо предоставить серверу адрес конечной точки для ответа. Аналогично Если служба должна ответить на одностороннее сообщение, полученное, необходимо также неанонимных адресов, поскольку нет обратного канала для обмена данными. Если сервер отправляет сообщение обратно, требуется совершенно отдельная операция, не связанная с операцией отправки первого сообщения.  
  
-   Смешанный — третий вид адресации, который объединяет в себе анонимный доступ и неанонимных адреса в зависимости от того, который отправляется сообщение. Типичный пример адресации в режиме Mixed — использование выделенного компьютера для обработки сообщений об ошибках и подтверждений. Если в стандартной последовательности обмена для ответов — HTTP или TCP, для ответных сообщений используется анонимная адресация, но ошибок используется адресация non-anonymous. Хотя WCF предоставляет возможность в какой-либо стандартной привязке адресации Mixed, вполне возможно создать канал, позволяющий службе отправлять ответы напрямую по обратному каналу (если адрес ответа является анонимный) или по отдельному канал (когда адрес ответа является неанонимных). В этом случае элемент привязки канала используется для задания <xref:System.ServiceModel.Channels.SupportedAddressingMode> смешанный режим.  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName="Anonymous">
      <MemberSignature Language="C#" Value="Anonymous" />
      <MemberSignature Language="ILAsm" Value=".field public static literal valuetype System.ServiceModel.Channels.SupportedAddressingMode Anonymous = int32(0)" />
      <MemberSignature Language="DocId" Value="F:System.ServiceModel.Channels.SupportedAddressingMode.Anonymous" />
      <MemberSignature Language="VB.NET" Value="Anonymous" />
      <MemberSignature Language="C++ CLI" Value="Anonymous" />
      <MemberSignature Language="F#" Value="Anonymous = 0" Usage="System.ServiceModel.Channels.SupportedAddressingMode.Anonymous" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.ServiceModel.Channels.SupportedAddressingMode</ReturnType>
      </ReturnValue>
      <MemberValue>0</MemberValue>
      <Docs>
        <summary>Сервер поддерживает только анонимные адреса и клиенты должны предоставлять анонимный обратный адрес.</summary>
      </Docs>
    </Member>
    <Member MemberName="Mixed">
      <MemberSignature Language="C#" Value="Mixed" />
      <MemberSignature Language="ILAsm" Value=".field public static literal valuetype System.ServiceModel.Channels.SupportedAddressingMode Mixed = int32(2)" />
      <MemberSignature Language="DocId" Value="F:System.ServiceModel.Channels.SupportedAddressingMode.Mixed" />
      <MemberSignature Language="VB.NET" Value="Mixed" />
      <MemberSignature Language="C++ CLI" Value="Mixed" />
      <MemberSignature Language="F#" Value="Mixed = 2" Usage="System.ServiceModel.Channels.SupportedAddressingMode.Mixed" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.ServiceModel.Channels.SupportedAddressingMode</ReturnType>
      </ReturnValue>
      <MemberValue>2</MemberValue>
      <Docs>
        <summary>Сервер поддерживает анонимные и неанонимные адреса и клиенты могут выбрать использовать один из них или оба.</summary>
      </Docs>
    </Member>
    <Member MemberName="NonAnonymous">
      <MemberSignature Language="C#" Value="NonAnonymous" />
      <MemberSignature Language="ILAsm" Value=".field public static literal valuetype System.ServiceModel.Channels.SupportedAddressingMode NonAnonymous = int32(1)" />
      <MemberSignature Language="DocId" Value="F:System.ServiceModel.Channels.SupportedAddressingMode.NonAnonymous" />
      <MemberSignature Language="VB.NET" Value="NonAnonymous" />
      <MemberSignature Language="C++ CLI" Value="NonAnonymous" />
      <MemberSignature Language="F#" Value="NonAnonymous = 1" Usage="System.ServiceModel.Channels.SupportedAddressingMode.NonAnonymous" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.ServiceModel.Channels.SupportedAddressingMode</ReturnType>
      </ReturnValue>
      <MemberValue>1</MemberValue>
      <Docs>
        <summary>Сервер поддерживает только неанонимные адреса и клиенты должны предоставлять неанонимный обратный адрес.</summary>
      </Docs>
    </Member>
  </Members>
</Type>