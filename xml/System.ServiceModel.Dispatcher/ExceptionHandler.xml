<Type Name="ExceptionHandler" FullName="System.ServiceModel.Dispatcher.ExceptionHandler">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="296f8c496c252c20e3432c79da30eab9b4c0925e" />
    <Meta Name="ms.sourcegitcommit" Value="3907f9a5780957d9c85af2e54c0a5bc2a5bf19ab" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="ru-RU" />
    <Meta Name="ms.lasthandoff" Value="06/14/2018" />
    <Meta Name="ms.locfileid" Value="34317000" />
  </Metadata>
  <TypeSignature Language="C#" Value="public abstract class ExceptionHandler" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi abstract beforefieldinit ExceptionHandler extends System.Object" />
  <TypeSignature Language="DocId" Value="T:System.ServiceModel.Dispatcher.ExceptionHandler" />
  <TypeSignature Language="VB.NET" Value="Public MustInherit Class ExceptionHandler" />
  <TypeSignature Language="C++ CLI" Value="public ref class ExceptionHandler abstract" />
  <AssemblyInfo>
    <AssemblyName>System.ServiceModel</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>Расширьте класс <see cref="T:System.ServiceModel.Dispatcher.ExceptionHandler" /> для создания обработчика исключений для необработанных исключений, появляющихся во время работы Windows Communication Foundation (WCF).</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Расширьте класс <xref:System.ServiceModel.Dispatcher.ExceptionHandler> и переопределите метод <xref:System.ServiceModel.Dispatcher.ExceptionHandler.HandleException%2A> для определения, следует ли исключению закрывать приложение. Затем создайте новый экземпляр пользовательского <xref:System.ServiceModel.Dispatcher.ExceptionHandler> класса, который назначается статический <xref:System.ServiceModel.Dispatcher.ExceptionHandler.AsynchronousThreadExceptionHandler%2A> или <xref:System.ServiceModel.Dispatcher.ExceptionHandler.TransportExceptionHandler%2A> свойство до создания клиентов WCF или служб.  
  
   
  
## Examples  
 В следующем образце кода показана реализация абстрактного класса <xref:System.ServiceModel.Dispatcher.ExceptionHandler>, который переопределяет метод <xref:System.ServiceModel.Dispatcher.ExceptionHandler.HandleException%2A>.  
  
 [!code-csharp[S_UEExceptionHandler#0](~/samples/snippets/csharp/VS_Snippets_CFX/s_ueexceptionhandler/cs/program.cs#0)]
 [!code-vb[S_UEExceptionHandler#0](~/samples/snippets/visualbasic/VS_Snippets_CFX/s_ueexceptionhandler/vb/module1.vb#0)]  
  
 В следующем примере кода показано, как разрешить настраиваемое `MyExceptionHandler` для необработанных исключений, возникающих в рамках среды выполнения WCF.  
  
 [!code-csharp[S_UEExceptionHandler#1](~/samples/snippets/csharp/VS_Snippets_CFX/s_ueexceptionhandler/cs/program.cs#1)]
 [!code-vb[S_UEExceptionHandler#1](~/samples/snippets/visualbasic/VS_Snippets_CFX/s_ueexceptionhandler/vb/module1.vb#1)]  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="protected ExceptionHandler ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ServiceModel.Dispatcher.ExceptionHandler.#ctor" />
      <MemberSignature Language="VB.NET" Value="Protected Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; ExceptionHandler();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary>Инициализирует новый экземпляр класса <see cref="T:System.ServiceModel.Dispatcher.ExceptionHandler" />.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="AlwaysHandle">
      <MemberSignature Language="C#" Value="public static System.ServiceModel.Dispatcher.ExceptionHandler AlwaysHandle { get; }" />
      <MemberSignature Language="ILAsm" Value=".property class System.ServiceModel.Dispatcher.ExceptionHandler AlwaysHandle" />
      <MemberSignature Language="DocId" Value="P:System.ServiceModel.Dispatcher.ExceptionHandler.AlwaysHandle" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Property AlwaysHandle As ExceptionHandler" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static property System::ServiceModel::Dispatcher::ExceptionHandler ^ AlwaysHandle { System::ServiceModel::Dispatcher::ExceptionHandler ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.ServiceModel.Dispatcher.ExceptionHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Получает экземпляр объекта <see cref="T:System.ServiceModel.Dispatcher.ExceptionHandler" />, обрабатывающий все исключения.</summary>
        <value>Объект <see cref="T:System.ServiceModel.Dispatcher.ExceptionHandler" />, возвращающий значение <see langword="true" /> для всех исключений.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="AsynchronousThreadExceptionHandler">
      <MemberSignature Language="C#" Value="public static System.ServiceModel.Dispatcher.ExceptionHandler AsynchronousThreadExceptionHandler { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property class System.ServiceModel.Dispatcher.ExceptionHandler AsynchronousThreadExceptionHandler" />
      <MemberSignature Language="DocId" Value="P:System.ServiceModel.Dispatcher.ExceptionHandler.AsynchronousThreadExceptionHandler" />
      <MemberSignature Language="VB.NET" Value="Public Shared Property AsynchronousThreadExceptionHandler As ExceptionHandler" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static property System::ServiceModel::Dispatcher::ExceptionHandler ^ AsynchronousThreadExceptionHandler { System::ServiceModel::Dispatcher::ExceptionHandler ^ get(); void set(System::ServiceModel::Dispatcher::ExceptionHandler ^ value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>get: System.Runtime.ConstrainedExecution.ReliabilityContract(System.Runtime.ConstrainedExecution.Consistency.WillNotCorruptState, System.Runtime.ConstrainedExecution.Cer.Success)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>set: System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.ServiceModel.Dispatcher.ExceptionHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Получает или задает реализацию текущего объекта <see cref="T:System.ServiceModel.Dispatcher.ExceptionHandler" /> для домена приложения.</summary>
        <value>Присваивает настраиваемый <see cref="T:System.ServiceModel.Dispatcher.ExceptionHandler" /> объект, принимающий необработанные исключения, происходящие в асинхронных потоках Windows Communication Foundation (WCF).</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 По умолчанию <xref:System.ServiceModel.Dispatcher.ExceptionHandler.AsynchronousThreadExceptionHandler%2A> свойство `null`, и необработанные исключения в асинхронных потоках WCF завершить приложение.  Задает это свойство для объекта <xref:System.ServiceModel.Dispatcher.ExceptionHandler>, чтобы получить и отреагировать на эти исключения.  
  
 Если необработанное исключение происходит на асинхронный поток WCF и достигает этого обработчика, состояние домена приложения может быть нарушена.  <xref:System.ServiceModel.Dispatcher.ExceptionHandler.HandleException%2A> не должен возвращать `true` исключений.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="HandleException">
      <MemberSignature Language="C#" Value="public abstract bool HandleException (Exception exception);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool HandleException(class System.Exception exception) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ServiceModel.Dispatcher.ExceptionHandler.HandleException(System.Exception)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; abstract bool HandleException(Exception ^ exception);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="exception" Type="System.Exception" />
      </Parameters>
      <Docs>
        <param name="exception">Исключение, произошедшее во время работы Windows Communication Foundation (WCF) и которое может закрыть приложение.</param>
        <summary>При переопределении в производном классе возвращает значение <see langword="true" />, если исключение было обработано, или значение <see langword="false" />, если исключение необходимо заново генерировать, а приложение закрыть.</summary>
        <returns>Значение <see langword="true" />, если исключение обработано; в противном случае — значение <see langword="false" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Свойство <xref:System.ServiceModel.Dispatcher.ExceptionHandler.HandleException%2A> возвращает значение `true`, если исключение было обработано. Если оно возвращает значение `false` или выдает другое исключение, то исходное исключение генерируется заново.  
  
   
  
## Examples  
 В следующем образце кода показана реализация абстрактного класса <xref:System.ServiceModel.Dispatcher.ExceptionHandler>, который переопределяет метод <xref:System.ServiceModel.Dispatcher.ExceptionHandler.HandleException%2A>.  
  
  
  
 В следующем примере кода показано, как разрешить настраиваемое `MyExceptionHandler` для необработанных исключений, возникающих в рамках среды выполнения WCF.  
  
  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="TransportExceptionHandler">
      <MemberSignature Language="C#" Value="public static System.ServiceModel.Dispatcher.ExceptionHandler TransportExceptionHandler { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property class System.ServiceModel.Dispatcher.ExceptionHandler TransportExceptionHandler" />
      <MemberSignature Language="DocId" Value="P:System.ServiceModel.Dispatcher.ExceptionHandler.TransportExceptionHandler" />
      <MemberSignature Language="VB.NET" Value="Public Shared Property TransportExceptionHandler As ExceptionHandler" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static property System::ServiceModel::Dispatcher::ExceptionHandler ^ TransportExceptionHandler { System::ServiceModel::Dispatcher::ExceptionHandler ^ get(); void set(System::ServiceModel::Dispatcher::ExceptionHandler ^ value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.ServiceModel.Dispatcher.ExceptionHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Получает или задает реализацию текущего транспортного объекта <see cref="T:System.ServiceModel.Dispatcher.ExceptionHandler" /> для домена приложения.</summary>
        <value>Настраиваемый <see cref="T:System.ServiceModel.Dispatcher.ExceptionHandler" /> объект, принимающий необработанные исключения, происходящие внутри глобального транспорта Windows Communication Foundation (WCF).</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 По умолчанию <xref:System.ServiceModel.Dispatcher.ExceptionHandler.TransportExceptionHandler%2A> свойству присвоено значение <xref:System.ServiceModel.Dispatcher.ExceptionHandler.AlwaysHandle%2A>, пропуску необработанных исключений внутри транспорта WCF пропускаются.  Задайте этому свойству значение экземпляра объекта <xref:System.ServiceModel.Dispatcher.ExceptionHandler>, чтобы получать и реагировать на эти исключения.  
  
 Если необработанное исключение происходит внутри глобального транспорта WCF и достигает этого обработчика, есть вероятность того, входит в домен приложения становится известен посторонним. <xref:System.ServiceModel.Dispatcher.ExceptionHandler.HandleException%2A> может возвращать `false` такие исключения завершить приложение.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>