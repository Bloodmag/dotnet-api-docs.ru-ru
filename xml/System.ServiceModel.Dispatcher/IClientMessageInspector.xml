<Type Name="IClientMessageInspector" FullName="System.ServiceModel.Dispatcher.IClientMessageInspector">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="1c72611cc7b655ebd69e6b72bf259c275567000d" />
    <Meta Name="ms.sourcegitcommit" Value="d31dc2ede16f6f7bc64e90d9f897ff54c4e3869b" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="ru-RU" />
    <Meta Name="ms.lasthandoff" Value="04/03/2018" />
  </Metadata>
  <TypeSignature Language="C#" Value="public interface IClientMessageInspector" />
  <TypeSignature Language="ILAsm" Value=".class public interface auto ansi abstract IClientMessageInspector" />
  <TypeSignature Language="DocId" Value="T:System.ServiceModel.Dispatcher.IClientMessageInspector" />
  <TypeSignature Language="VB.NET" Value="Public Interface IClientMessageInspector" />
  <TypeSignature Language="C++ CLI" Value="public interface class IClientMessageInspector" />
  <AssemblyInfo>
    <AssemblyName>System.ServiceModel</AssemblyName>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>System.ServiceModel.Primitives</AssemblyName>
    <AssemblyVersion>4.1.0.0</AssemblyVersion>
    <AssemblyVersion>4.1.1.0</AssemblyVersion>
    <AssemblyVersion>4.2.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Interfaces />
  <Docs>
    <summary>
      <span data-ttu-id="38fe0-101">Определяет объект инспектора сообщений, который можно добавить в коллекцию <see cref="P:System.ServiceModel.Dispatcher.ClientRuntime.MessageInspectors" /> для просмотра или изменения сообщений.</span>
      <span class="sxs-lookup">
        <span data-stu-id="38fe0-101">Defines a message inspector object that can be added to the <see cref="P:System.ServiceModel.Dispatcher.ClientRuntime.MessageInspectors" /> collection to view or modify messages.</span>
      </span>
    </summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="38fe0-102">Для проверки или изменения сообщений при их передаче через объект клиента T:System.ServiceModel.Dispatcher.IClientMessageInspector необходимо реализовать интерфейс<xref:System.ServiceModel.Dispatcher.IClientMessageInspector> и добавить его в коллекцию <xref:System.ServiceModel.Dispatcher.ClientRuntime.MessageInspectors%2A> для проверки или изменения сообщений при их передаче через объект клиента [!INCLUDE[indigo2](~/includes/indigo2-md.md)].</span><span class="sxs-lookup"><span data-stu-id="38fe0-102">Implement the <xref:System.ServiceModel.Dispatcher.IClientMessageInspector> interface and add it to the <xref:System.ServiceModel.Dispatcher.ClientRuntime.MessageInspectors%2A> collection to inspect or modify messages as they pass through a [!INCLUDE[indigo2](~/includes/indigo2-md.md)] client object.</span></span> <span data-ttu-id="38fe0-103">Дополнительные сведения см. в разделе <xref:System.ServiceModel.Dispatcher.ClientRuntime>.</span><span class="sxs-lookup"><span data-stu-id="38fe0-103">For details, see <xref:System.ServiceModel.Dispatcher.ClientRuntime>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="38fe0-104">В следующем примере кода показана реализация, при вызове которой на консоль выводятся строки.</span><span class="sxs-lookup"><span data-stu-id="38fe0-104">The following code example shows an implementation that writes strings to the console when the implementation is called.</span></span>  
  
 [!code-csharp[Interceptors#1](~/samples/snippets/csharp/VS_Snippets_CFX/interceptors/cs/interceptors.cs#1)]
 [!code-vb[Interceptors#1](~/samples/snippets/visualbasic/VS_Snippets_CFX/interceptors/vb/interceptors.vb#1)]  
  
 <span data-ttu-id="38fe0-105">В следующем примере кода показано использование <xref:System.ServiceModel.Description.IEndpointBehavior?displayProperty=nameWithType> для вставки клиентского инспектора сообщений в конечную точку клиента.</span><span class="sxs-lookup"><span data-stu-id="38fe0-105">The following code example shows how to use an <xref:System.ServiceModel.Description.IEndpointBehavior?displayProperty=nameWithType> to insert the client message inspector in the client endpoint.</span></span>  
  
 [!code-csharp[Interceptors#2](~/samples/snippets/csharp/VS_Snippets_CFX/interceptors/cs/insertingbehaviors.cs#2)]
 [!code-vb[Interceptors#2](~/samples/snippets/visualbasic/VS_Snippets_CFX/interceptors/vb/insertingbehaviors.vb#2)]  
  
 <span data-ttu-id="38fe0-106">Наконец, в следующем примере кода показано, как изменить файл конфигурации клиента, чтобы использовать поведение конечной точки с определенной конечной точкой.</span><span class="sxs-lookup"><span data-stu-id="38fe0-106">Finally, the following code example shows how to modify the client configuration file to use the endpoint behavior with a particular endpoint.</span></span>  
  
 [!code-xml[Interceptors#3](~/samples/snippets/csharp/VS_Snippets_CFX/interceptors/cs/client.exe.config#3)]   
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName="AfterReceiveReply">
      <MemberSignature Language="C#" Value="public void AfterReceiveReply (ref System.ServiceModel.Channels.Message reply, object correlationState);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void AfterReceiveReply(class System.ServiceModel.Channels.Message&amp; reply, object correlationState) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ServiceModel.Dispatcher.IClientMessageInspector.AfterReceiveReply(System.ServiceModel.Channels.Message@,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Sub AfterReceiveReply (ByRef reply As Message, correlationState As Object)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void AfterReceiveReply(System::ServiceModel::Channels::Message ^ % reply, System::Object ^ correlationState);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel.Primitives</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="reply" Type="System.ServiceModel.Channels.Message&amp;" RefType="ref" />
        <Parameter Name="correlationState" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="reply">
          <span data-ttu-id="38fe0-107">Сообщение, преобразуемое в типы и передающееся обратно клиентскому приложению.</span>
          <span class="sxs-lookup">
            <span data-stu-id="38fe0-107">The message to be transformed into types and handed back to the client application.</span>
          </span>
        </param>
        <param name="correlationState">
          <span data-ttu-id="38fe0-108">Данные состояния корреляции.</span>
          <span class="sxs-lookup">
            <span data-stu-id="38fe0-108">Correlation state data.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="38fe0-109">Разрешает проверку или изменение сообщения после получения ответного сообщения, но перед его передачей клиентскому приложению.</span>
          <span class="sxs-lookup">
            <span data-stu-id="38fe0-109">Enables inspection or modification of a message after a reply message is received but prior to passing it back to the client application.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="38fe0-110">Реализуйте метод <xref:System.ServiceModel.Dispatcher.IClientMessageInspector.AfterReceiveReply%2A> для проверки или изменения ответного сообщения после его получения объектом клиента [!INCLUDE[indigo2](~/includes/indigo2-md.md)], но до десериализации в объекты, возвращаемые клиентскому приложению.</span><span class="sxs-lookup"><span data-stu-id="38fe0-110">Implement <xref:System.ServiceModel.Dispatcher.IClientMessageInspector.AfterReceiveReply%2A> to inspect or modify a reply message after it has been received by the [!INCLUDE[indigo2](~/includes/indigo2-md.md)] client object but before it is deserialized into objects that are returned to the client application.</span></span>  
  
 <span data-ttu-id="38fe0-111">`correlationState` — это объект, возвращаемый пользователем при вызове метода <xref:System.ServiceModel.Dispatcher.IClientMessageInspector.BeforeSendRequest%2A> для данного сообщения.</span><span class="sxs-lookup"><span data-stu-id="38fe0-111">The `correlationState` is the object returned by the user when <xref:System.ServiceModel.Dispatcher.IClientMessageInspector.BeforeSendRequest%2A> is called for this message.</span></span> <span data-ttu-id="38fe0-112">Рекомендуется сделать его типом <xref:System.Guid?displayProperty=nameWithType>, чтобы гарантировать отсутствие совпадающих объектов `correlationState`.</span><span class="sxs-lookup"><span data-stu-id="38fe0-112">The best practice is to make this a <xref:System.Guid?displayProperty=nameWithType> to ensure that no two `correlationState` objects are the same.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="38fe0-113">В следующем примере кода показана реализация, при вызове которой на консоль выводятся строки.</span><span class="sxs-lookup"><span data-stu-id="38fe0-113">The following code example shows an implementation that writes strings to the console when the implementation is called.</span></span>  
  
 [!code-csharp[Interceptors#1](~/samples/snippets/csharp/VS_Snippets_CFX/interceptors/cs/interceptors.cs#1)]
 [!code-vb[Interceptors#1](~/samples/snippets/visualbasic/VS_Snippets_CFX/interceptors/vb/interceptors.vb#1)]  
  
 <span data-ttu-id="38fe0-114">В следующем примере кода показано использование <xref:System.ServiceModel.Description.IEndpointBehavior?displayProperty=nameWithType> для вставки клиентского инспектора сообщений в конечную точку клиента.</span><span class="sxs-lookup"><span data-stu-id="38fe0-114">The following code example shows how to use an <xref:System.ServiceModel.Description.IEndpointBehavior?displayProperty=nameWithType> to insert the client message inspector in the client endpoint.</span></span>  
  
 [!code-csharp[Interceptors#2](~/samples/snippets/csharp/VS_Snippets_CFX/interceptors/cs/insertingbehaviors.cs#2)]
 [!code-vb[Interceptors#2](~/samples/snippets/visualbasic/VS_Snippets_CFX/interceptors/vb/insertingbehaviors.vb#2)]  
  
 <span data-ttu-id="38fe0-115">Наконец, в следующем примере кода показано, как изменить файл конфигурации клиента, чтобы использовать поведение конечной точки с определенной конечной точкой.</span><span class="sxs-lookup"><span data-stu-id="38fe0-115">Finally, the following code example shows how to modify the client configuration file to use the endpoint behavior with a particular endpoint.</span></span>  
  
 [!code-xml[Interceptors#3](~/samples/snippets/csharp/VS_Snippets_CFX/interceptors/cs/client.exe.config#3)]   
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="BeforeSendRequest">
      <MemberSignature Language="C#" Value="public object BeforeSendRequest (ref System.ServiceModel.Channels.Message request, System.ServiceModel.IClientChannel channel);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance object BeforeSendRequest(class System.ServiceModel.Channels.Message&amp; request, class System.ServiceModel.IClientChannel channel) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ServiceModel.Dispatcher.IClientMessageInspector.BeforeSendRequest(System.ServiceModel.Channels.Message@,System.ServiceModel.IClientChannel)" />
      <MemberSignature Language="VB.NET" Value="Public Function BeforeSendRequest (ByRef request As Message, channel As IClientChannel) As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Object ^ BeforeSendRequest(System::ServiceModel::Channels::Message ^ % request, System::ServiceModel::IClientChannel ^ channel);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel.Primitives</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="request" Type="System.ServiceModel.Channels.Message&amp;" RefType="ref" />
        <Parameter Name="channel" Type="System.ServiceModel.IClientChannel" />
      </Parameters>
      <Docs>
        <param name="request">
          <span data-ttu-id="38fe0-116">Сообщение, отправляемое службе.</span>
          <span class="sxs-lookup">
            <span data-stu-id="38fe0-116">The message to be sent to the service.</span>
          </span>
        </param>
        <param name="channel">
          <span data-ttu-id="38fe0-117">Канал объекта клиента [!INCLUDE[indigo2](~/includes/indigo2-md.md)].</span>
          <span class="sxs-lookup">
            <span data-stu-id="38fe0-117">The [!INCLUDE[indigo2](~/includes/indigo2-md.md)] client object channel.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="38fe0-118">Разрешает проверку или изменение сообщения до того, как сообщение запроса отправляется службе.</span>
          <span class="sxs-lookup">
            <span data-stu-id="38fe0-118">Enables inspection or modification of a message before a request message is sent to a service.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="38fe0-119">Объект, который возвращается как аргумент <paramref name="correlationState" /> метода <see cref="M:System.ServiceModel.Dispatcher.IClientMessageInspector.AfterReceiveReply(System.ServiceModel.Channels.Message@,System.Object)" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="38fe0-119">The object that is returned as the <paramref name="correlationState" /> argument of the <see cref="M:System.ServiceModel.Dispatcher.IClientMessageInspector.AfterReceiveReply(System.ServiceModel.Channels.Message@,System.Object)" /> method.</span>
          </span>
          <span data-ttu-id="38fe0-120">Если состояние корреляции не используется, то его значение — <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="38fe0-120">This is <see langword="null" /> if no correlation state is used.</span>
          </span>
          <span data-ttu-id="38fe0-121">Рекомендуется сделать его типом <see cref="T:System.Guid" />, чтобы гарантировать отсутствие совпадающих объектов <paramref name="correlationState" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="38fe0-121">The best practice is to make this a <see cref="T:System.Guid" /> to ensure that no two <paramref name="correlationState" /> objects are the same.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="38fe0-122">Реализуйте метод <xref:System.ServiceModel.Dispatcher.IClientMessageInspector.BeforeSendRequest%2A> для проверки или изменения сообщения запроса перед его отправкой.</span><span class="sxs-lookup"><span data-stu-id="38fe0-122">Implement the <xref:System.ServiceModel.Dispatcher.IClientMessageInspector.BeforeSendRequest%2A> to inspect or modify a request message before it is sent.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="38fe0-123">В следующем примере кода показана реализация, при вызове которой на консоль выводятся строки.</span><span class="sxs-lookup"><span data-stu-id="38fe0-123">The following code example shows an implementation that writes strings to the console when the implementation is called.</span></span>  
  
 [!code-csharp[Interceptors#1](~/samples/snippets/csharp/VS_Snippets_CFX/interceptors/cs/interceptors.cs#1)]
 [!code-vb[Interceptors#1](~/samples/snippets/visualbasic/VS_Snippets_CFX/interceptors/vb/interceptors.vb#1)]  
  
 <span data-ttu-id="38fe0-124">В следующем примере кода показано использование <xref:System.ServiceModel.Description.IEndpointBehavior?displayProperty=nameWithType> для вставки клиентского инспектора сообщений в конечную точку клиента.</span><span class="sxs-lookup"><span data-stu-id="38fe0-124">The following code example shows how to use an <xref:System.ServiceModel.Description.IEndpointBehavior?displayProperty=nameWithType> to insert the client message inspector in the client endpoint.</span></span>  
  
 [!code-csharp[Interceptors#2](~/samples/snippets/csharp/VS_Snippets_CFX/interceptors/cs/insertingbehaviors.cs#2)]
 [!code-vb[Interceptors#2](~/samples/snippets/visualbasic/VS_Snippets_CFX/interceptors/vb/insertingbehaviors.vb#2)]  
  
 <span data-ttu-id="38fe0-125">Наконец, в следующем примере кода показано, как изменить файл конфигурации клиента, чтобы использовать поведение конечной точки с определенной конечной точкой.</span><span class="sxs-lookup"><span data-stu-id="38fe0-125">Finally, the following code example shows how to modify the client configuration file to use the endpoint behavior with a particular endpoint.</span></span>  
  
 [!code-xml[Interceptors#3](~/samples/snippets/csharp/VS_Snippets_CFX/interceptors/cs/client.exe.config#3)]   
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>