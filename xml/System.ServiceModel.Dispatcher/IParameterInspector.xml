<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" version="1.2" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="IParameterInspector.xml" source-language="en-US" target-language="ru-RU">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-15c36f0" tool-company="Microsoft" />
      <xliffext:skl_file_name xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">02cd5861-7ce2-4a82-b358-31f8435a0ac589566eb5793aa3f3ad4d0a23250acea1ef5b6913.skl</xliffext:skl_file_name>
      <xliffext:version xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">1.2</xliffext:version>
      <xliffext:ms.openlocfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">89566eb5793aa3f3ad4d0a23250acea1ef5b6913</xliffext:ms.openlocfilehash>
      <xliffext:ms.sourcegitcommit xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">d31dc2ede16f6f7bc64e90d9f897ff54c4e3869b</xliffext:ms.sourcegitcommit>
      <xliffext:ms.lasthandoff xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">04/03/2018</xliffext:ms.lasthandoff>
      <xliffext:moniker_ids xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">netcore-1.0,netcore-1.1,netcore-2.0,netframework-4.5.1,netframework-4.5.2,netframework-4.5,netframework-4.6.1,netframework-4.6.2,netframework-4.6,netframework-4.7.1,netframework-4.7,xamarinandroid-7.1,xamarinios-10.8,xamarinmac-3.0</xliffext:moniker_ids>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve" uid="T:System.ServiceModel.Dispatcher.IParameterInspector">
          <source>Defines the contract implemented by custom parameter inspectors that enables inspection or modification of information prior to and subsequent to calls on either the client or the service.</source>
          
        </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.ServiceModel.Dispatcher.IParameterInspector">
          <source>Implement the <ph id="ph1">&lt;xref:System.ServiceModel.Dispatcher.IParameterInspector&gt;</ph> interface to create a custom parameter inspector that can view and modify the contents of a call both before the call and after the call in either client or service applications.</source>
          <target state="translated">Реализуйте интерфейс <ph id="ph1">&lt;xref:System.ServiceModel.Dispatcher.IParameterInspector&gt;</ph> для создания пользовательского инспектора параметров, который может проверять и модифицировать содержимое вызова до и после осуществления вызова со стороны приложения клиента или службы.</target>       </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.ServiceModel.Dispatcher.IParameterInspector">
          <source>On outbound calls from a client, the inspector is invoked before the request contents are serialized and sent to the service.</source>
          <target state="translated">Для исходящих вызовов от клиента инспектор вызывается до сериализации содержимого запроса и направляется в службу.</target>       </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.ServiceModel.Dispatcher.IParameterInspector">
          <source>The inspector is also called after the response has been deserialized but before the return values have been dispatched to the proxy method.</source>
          <target state="translated">Инспектор также вызывается после десериализации ответного сообщения, но до передачи возвращаемых значений в прокси-метод.</target>       </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.ServiceModel.Dispatcher.IParameterInspector">
          <source>On inbound calls to a service, the inspector is invoked after parameters are deserialized but before they are dispatched to the service operation.</source>
          <target state="translated">Для входящих вызовов к службе инспектор вызывается после десериализации параметров, но до их передачи в операцию службы.</target>       </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.ServiceModel.Dispatcher.IParameterInspector">
          <source>Use the <ph id="ph1">&lt;xref:System.ServiceModel.Dispatcher.ClientOperation.ParameterInspectors%2A?displayProperty=nameWithType&gt;</ph> or the <ph id="ph2">&lt;xref:System.ServiceModel.Dispatcher.DispatchOperation.ParameterInspectors%2A?displayProperty=nameWithType&gt;</ph> properties to add an <ph id="ph3">&lt;xref:System.ServiceModel.Dispatcher.IParameterInspector&gt;</ph> implementation to the inspectors collection for a particular operation.</source>
          <target state="translated">Используйте свойство <ph id="ph1">&lt;xref:System.ServiceModel.Dispatcher.ClientOperation.ParameterInspectors%2A?displayProperty=nameWithType&gt;</ph> или <ph id="ph2">&lt;xref:System.ServiceModel.Dispatcher.DispatchOperation.ParameterInspectors%2A?displayProperty=nameWithType&gt;</ph> для добавления реализации <ph id="ph3">&lt;xref:System.ServiceModel.Dispatcher.IParameterInspector&gt;</ph> в коллекцию инспекторов для конкретной операции.</target>       </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.ServiceModel.Dispatcher.IParameterInspector">
          <source><bpt id="p1">**</bpt>Note<ept id="p1">**</ept> Developers and administrators must ensure that the interaction with other <ph id="ph1">&lt;xref:System.ServiceModel.Dispatcher.IParameterInspector&gt;</ph> implementations is understood.</source>
          <target state="translated"><bpt id="p1">**</bpt>Примечание<ept id="p1">**</ept> разработчики и администраторы должны обеспечить взаимодействие с другими <ph id="ph1">&lt;xref:System.ServiceModel.Dispatcher.IParameterInspector&gt;</ph> понятны реализации.</target>       </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.ServiceModel.Dispatcher.IParameterInspector">
          <source>The following code example shows an <ph id="ph1">&lt;xref:System.ServiceModel.Dispatcher.IParameterInspector&gt;</ph> implementation that:</source>
          <target state="translated">В следующем примере кода показана реализация <ph id="ph1">&lt;xref:System.ServiceModel.Dispatcher.IParameterInspector&gt;</ph>, которая</target>       </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.ServiceModel.Dispatcher.IParameterInspector">
          <source>Writes the operation name and return value to the console after a response has been deserialized by the service or a request has been serialized by a client.</source>
          <target state="translated">записывает имя операции и возвращаемое значение в консоль после десериализации ответного сообщения службой или сериализации сообщения запроса клиентом;</target>       </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.ServiceModel.Dispatcher.IParameterInspector">
          <source>Writes the operation name to the console after deserializing a response on the client or after a response has been serialized on the service.</source>
          <target state="translated">записывает имя операции в консоль после десериализации ответного сообщения клиентом или после сериализации сообщения службой.</target>       </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.ServiceModel.Dispatcher.IParameterInspector">
          <source>The following code example shows how to use either <ph id="ph1">&lt;xref:System.ServiceModel.Description.IOperationBehavior?displayProperty=nameWithType&gt;</ph>, <ph id="ph2">&lt;xref:System.ServiceModel.Description.IEndpointBehavior?displayProperty=nameWithType&gt;</ph> or <ph id="ph3">&lt;xref:System.ServiceModel.Description.IServiceBehavior?displayProperty=nameWithType&gt;</ph> to insert <ph id="ph4">&lt;xref:System.ServiceModel.Dispatcher.IParameterInspector&gt;</ph> objects.</source>
          <target state="translated">В следующем примере кода демонстрируется использование поведения <ph id="ph1">&lt;xref:System.ServiceModel.Description.IOperationBehavior?displayProperty=nameWithType&gt;</ph>, <ph id="ph2">&lt;xref:System.ServiceModel.Description.IEndpointBehavior?displayProperty=nameWithType&gt;</ph> или <ph id="ph3">&lt;xref:System.ServiceModel.Description.IServiceBehavior?displayProperty=nameWithType&gt;</ph> для вставки объектов <ph id="ph4">&lt;xref:System.ServiceModel.Dispatcher.IParameterInspector&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve" uid="M:System.ServiceModel.Dispatcher.IParameterInspector.AfterCall(System.String,System.Object[],System.Object,System.Object)">
          <source>The name of the invoked operation.</source>
          
        </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve" uid="M:System.ServiceModel.Dispatcher.IParameterInspector.AfterCall(System.String,System.Object[],System.Object,System.Object)">
          <source>Any output objects.</source>
          
        </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve" uid="M:System.ServiceModel.Dispatcher.IParameterInspector.AfterCall(System.String,System.Object[],System.Object,System.Object)">
          <source>The return value of the operation.</source>
          
        </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve" uid="M:System.ServiceModel.Dispatcher.IParameterInspector.AfterCall(System.String,System.Object[],System.Object,System.Object)">
          <source>Any correlation state returned from the <ph id="ph1">&lt;see cref="M:System.ServiceModel.Dispatcher.IParameterInspector.BeforeCall(System.String,System.Object[])" /&gt;</ph> method, or <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</source>
          
        </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve" uid="M:System.ServiceModel.Dispatcher.IParameterInspector.AfterCall(System.String,System.Object[],System.Object,System.Object)">
          <source>Called after client calls are returned and before service responses are sent.</source>
          
        </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ServiceModel.Dispatcher.IParameterInspector.AfterCall(System.String,System.Object[],System.Object,System.Object)">
          <source>On outbound calls from a client, the inspector is invoked before the request contents are serialized and sent to the service.</source>
          <target state="translated">Для исходящих вызовов от клиента инспектор вызывается до сериализации содержимого запроса и направляется в службу.</target>       </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ServiceModel.Dispatcher.IParameterInspector.AfterCall(System.String,System.Object[],System.Object,System.Object)">
          <source>The inspector is also called after the response has been deserialized but before the return values have been dispatched to the proxy method.</source>
          <target state="translated">Инспектор также вызывается после десериализации ответного сообщения, но до передачи возвращаемых значений в прокси-метод.</target>       </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ServiceModel.Dispatcher.IParameterInspector.AfterCall(System.String,System.Object[],System.Object,System.Object)">
          <source>On inbound calls to a service, the inspector is invoked after parameters are deserialized but before they are dispatched to the service operation.</source>
          <target state="translated">Для входящих вызовов к службе инспектор вызывается после десериализации параметров, но до их передачи в операцию службы.</target>       </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ServiceModel.Dispatcher.IParameterInspector.AfterCall(System.String,System.Object[],System.Object,System.Object)">
          <source>The following code example shows an <ph id="ph1">&lt;xref:System.ServiceModel.Dispatcher.IParameterInspector&gt;</ph> implementation that:</source>
          <target state="translated">В следующем примере кода показана реализация <ph id="ph1">&lt;xref:System.ServiceModel.Dispatcher.IParameterInspector&gt;</ph>, которая</target>       </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ServiceModel.Dispatcher.IParameterInspector.AfterCall(System.String,System.Object[],System.Object,System.Object)">
          <source>Writes the operation name and return value to the console after a response has been deserialized by the service or a request has been serialized by a client.</source>
          <target state="translated">записывает имя операции и возвращаемое значение в консоль после десериализации ответного сообщения службой или сериализации сообщения запроса клиентом;</target>       </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ServiceModel.Dispatcher.IParameterInspector.AfterCall(System.String,System.Object[],System.Object,System.Object)">
          <source>Writes the operation name to the console after deserializing a response on the client or after a response has been serialized on the service.</source>
          <target state="translated">записывает имя операции в консоль после десериализации ответного сообщения клиентом или после сериализации сообщения службой.</target>       </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ServiceModel.Dispatcher.IParameterInspector.AfterCall(System.String,System.Object[],System.Object,System.Object)">
          <source>The following code example shows how to use either <ph id="ph1">&lt;xref:System.ServiceModel.Description.IOperationBehavior?displayProperty=nameWithType&gt;</ph>, <ph id="ph2">&lt;xref:System.ServiceModel.Description.IEndpointBehavior?displayProperty=nameWithType&gt;</ph>, or <ph id="ph3">&lt;xref:System.ServiceModel.Description.IServiceBehavior?displayProperty=nameWithType&gt;</ph> to insert <ph id="ph4">&lt;xref:System.ServiceModel.Dispatcher.IParameterInspector&gt;</ph> objects.</source>
          <target state="translated">В следующем примере демонстрируется использование поведения <ph id="ph1">&lt;xref:System.ServiceModel.Description.IOperationBehavior?displayProperty=nameWithType&gt;</ph>, <ph id="ph2">&lt;xref:System.ServiceModel.Description.IEndpointBehavior?displayProperty=nameWithType&gt;</ph> или <ph id="ph3">&lt;xref:System.ServiceModel.Description.IServiceBehavior?displayProperty=nameWithType&gt;</ph> для вставки объектов <ph id="ph4">&lt;xref:System.ServiceModel.Dispatcher.IParameterInspector&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve" uid="M:System.ServiceModel.Dispatcher.IParameterInspector.BeforeCall(System.String,System.Object[])">
          <source>The name of the operation.</source>
          
        </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve" uid="M:System.ServiceModel.Dispatcher.IParameterInspector.BeforeCall(System.String,System.Object[])">
          <source>The objects passed to the method by the client.</source>
          
        </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve" uid="M:System.ServiceModel.Dispatcher.IParameterInspector.BeforeCall(System.String,System.Object[])">
          <source>Called before client calls are sent and after service responses are returned.</source>
          
        </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve" uid="M:System.ServiceModel.Dispatcher.IParameterInspector.BeforeCall(System.String,System.Object[])">
          <source>The correlation state that is returned as the <ph id="ph1">&lt;paramref name="correlationState" /&gt;</ph> parameter in <ph id="ph2">&lt;see cref="M:System.ServiceModel.Dispatcher.IParameterInspector.AfterCall(System.String,System.Object[],System.Object,System.Object)" /&gt;</ph>.</source>
          
        </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve" uid="M:System.ServiceModel.Dispatcher.IParameterInspector.BeforeCall(System.String,System.Object[])">
          <source>Return <ph id="ph1">&lt;see langword="null" /&gt;</ph> if you do not intend to use correlation state.</source>
          
        </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ServiceModel.Dispatcher.IParameterInspector.BeforeCall(System.String,System.Object[])">
          <source>On outbound calls from a client, the inspector is invoked before the request contents are serialized and sent to the service.</source>
          <target state="translated">Для исходящих вызовов от клиента инспектор вызывается до сериализации содержимого запроса и направляется в службу.</target>       </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ServiceModel.Dispatcher.IParameterInspector.BeforeCall(System.String,System.Object[])">
          <source>The inspector is also called after the response has been deserialized but before the return values have been dispatched to the proxy method.</source>
          <target state="translated">Инспектор также вызывается после десериализации ответного сообщения, но до передачи возвращаемых значений в прокси-метод.</target>       </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ServiceModel.Dispatcher.IParameterInspector.BeforeCall(System.String,System.Object[])">
          <source>On inbound calls to a service, the inspector is invoked after the request contents are deserialized and dispatched to the service operation and before the response contents are serialized and sent to the client.</source>
          <target state="translated">Для входящих вызовов в службу инспектор вызывается после десериализации содержимого запроса и передачи в операцию службы, и до сериализации содержимого ответного сообщения и отправления клиенту.</target>       </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ServiceModel.Dispatcher.IParameterInspector.BeforeCall(System.String,System.Object[])">
          <source>The following code example shows an <ph id="ph1">&lt;xref:System.ServiceModel.Dispatcher.IParameterInspector&gt;</ph> implementation that:</source>
          <target state="translated">В следующем примере кода показана реализация <ph id="ph1">&lt;xref:System.ServiceModel.Dispatcher.IParameterInspector&gt;</ph>, которая</target>       </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ServiceModel.Dispatcher.IParameterInspector.BeforeCall(System.String,System.Object[])">
          <source>Writes the operation name and return value to the console after a response has been deserialized by the service or a request has been serialized by a client.</source>
          <target state="translated">записывает имя операции и возвращаемое значение в консоль после десериализации ответного сообщения службой или сериализации сообщения запроса клиентом;</target>       </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ServiceModel.Dispatcher.IParameterInspector.BeforeCall(System.String,System.Object[])">
          <source>Writes the operation name to the console after deserializing a response on the client or after a response is serialized on the service.</source>
          <target state="translated">записывает имя операции в консоль после десериализации ответного сообщения клиентом или после сериализации сообщения службой.</target>       </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ServiceModel.Dispatcher.IParameterInspector.BeforeCall(System.String,System.Object[])">
          <source>The following code example shows how to use either <ph id="ph1">&lt;xref:System.ServiceModel.Description.IOperationBehavior?displayProperty=nameWithType&gt;</ph>, <ph id="ph2">&lt;xref:System.ServiceModel.Description.IEndpointBehavior?displayProperty=nameWithType&gt;</ph> or <ph id="ph3">&lt;xref:System.ServiceModel.Description.IServiceBehavior?displayProperty=nameWithType&gt;</ph> to insert <ph id="ph4">&lt;xref:System.ServiceModel.Dispatcher.IParameterInspector&gt;</ph> objects.</source>
          <target state="translated">В следующем примере кода демонстрируется использование поведения <ph id="ph1">&lt;xref:System.ServiceModel.Description.IOperationBehavior?displayProperty=nameWithType&gt;</ph>, <ph id="ph2">&lt;xref:System.ServiceModel.Description.IEndpointBehavior?displayProperty=nameWithType&gt;</ph> или <ph id="ph3">&lt;xref:System.ServiceModel.Description.IServiceBehavior?displayProperty=nameWithType&gt;</ph> для вставки объектов <ph id="ph4">&lt;xref:System.ServiceModel.Dispatcher.IParameterInspector&gt;</ph>.</target>       </trans-unit>
      </group>
    </body>
  </file>
</xliff>