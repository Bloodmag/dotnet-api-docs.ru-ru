<Type Name="MessageProtectionOrder" FullName="System.ServiceModel.Security.MessageProtectionOrder">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="721a611b9bd61c79f1ab7d6f048b863ff8301e7a" />
    <Meta Name="ms.sourcegitcommit" Value="cc0c87a2e12b0fb9ba9ecdd3d4950f0572524db8" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="ru-RU" />
    <Meta Name="ms.lasthandoff" Value="05/03/2018" />
    <Meta Name="ms.locfileid" Value="32690006" />
  </Metadata>
  <TypeSignature Language="C#" Value="public enum MessageProtectionOrder" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed MessageProtectionOrder extends System.Enum" />
  <TypeSignature Language="DocId" Value="T:System.ServiceModel.Security.MessageProtectionOrder" />
  <TypeSignature Language="VB.NET" Value="Public Enum MessageProtectionOrder" />
  <TypeSignature Language="C++ CLI" Value="public enum class MessageProtectionOrder" />
  <AssemblyInfo>
    <AssemblyName>System.ServiceModel</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Enum</BaseTypeName>
  </Base>
  <Docs>
    <summary>Указывает порядок операций при защите сообщения.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Это перечисление используется совместно со свойством <xref:System.ServiceModel.Channels.AsymmetricSecurityBindingElement.MessageProtectionOrder%2A?displayProperty=nameWithType> класса <xref:System.ServiceModel.Channels.AsymmetricSecurityBindingElement> и свойством <xref:System.ServiceModel.Channels.SymmetricSecurityBindingElement.MessageProtectionOrder%2A?displayProperty=nameWithType> класса <xref:System.ServiceModel.Channels.SymmetricSecurityBindingElement>.  
  
 Если сообщение уязвимо для атак хэш-кода (например, если сообщение короткое или низкой энтропии), следует использовать параметр SignBeforeEncryptAndEncryptSignature или EncryptBeforeSign. (*Энтропии* — это случайные данные, предоставляемые сервером и клиентом и используется для создания общего ключа для шифрования и расшифровки данных.)  
  
## <a name="what-is-ordered"></a>Что значит «по порядку»?  
 WCF предлагает три разные уровни защиты, определяющие, каким образом сообщения, защищенные с помощью средств безопасности сообщений SOAP. Значение по умолчанию — SignBeforeEncryptAndEncryptSignature. На этом уровне к сообщению сначала добавляется сигнатура, затем шифруется текст сообщения, после чего шифруется XML-сигнатура. Такой подход снижает вероятность взлома сигнатуры путем ее подбора.  
  
 Однако выбранный по умолчанию уровень безопасности отрицательно влияет на производительность. В результате за повышенную безопасность приходится расплачиваться пониженной производительностью. Шифрование сигнатуры может привести к падению производительности на 10–40%. Если содержимое данных сообщения является низкое значение, а производительность гораздо более значительные, используйте SignBeforeEncrypt. При выборе этого значения хэш-код сигнатуры передается открытым текстом, что при низкой энтропии делает сообщения более уязвимыми к взлому путем подбора сигнатуры.  
  
## <a name="custom-bindings-only"></a>Только настраиваемые привязки  
 Чтобы изменить значение свойства `MessageProtectionOrder`, необходимо создать настраиваемую привязку безопасности. Дополнительные сведения о создании настраиваемых привязок см. в разделе [привязки привязанных к](~/docs/framework/wcf/extending/creating-user-defined-bindings.md). Дополнительные сведения о создании настраиваемых привязок для конкретного режима проверки подлинности см. в разделе [как: создание SecurityBindingElement для режима проверки подлинности указан](~/docs/framework/wcf/feature-details/how-to-create-a-securitybindingelement-for-a-specified-authentication-mode.md).  
  
   
  
## Examples  
 В следующем примере создается <xref:System.ServiceModel.Channels.SymmetricSecurityBindingElement> элемент и задает его <xref:System.ServiceModel.Channels.SymmetricSecurityBindingElement.MessageProtectionOrder%2A> свойства SignBeforeEncrypt.  
  
 [!code-csharp[c_CustomBinding#3](~/samples/snippets/csharp/VS_Snippets_CFX/c_custombinding/cs/c_custombinding.cs#3)]
 [!code-vb[c_CustomBinding#3](~/samples/snippets/visualbasic/VS_Snippets_CFX/c_custombinding/vb/source.vb#3)]  
  
 ]]></format>
    </remarks>
    <altmember cref="T:System.ServiceModel.Security.MessageProtectionOrder" />
    <altmember cref="T:System.ServiceModel.Channels.AsymmetricSecurityBindingElement" />
    <altmember cref="T:System.ServiceModel.Channels.SymmetricSecurityBindingElement" />
  </Docs>
  <Members>
    <Member MemberName="EncryptBeforeSign">
      <MemberSignature Language="C#" Value="EncryptBeforeSign" />
      <MemberSignature Language="ILAsm" Value=".field public static literal valuetype System.ServiceModel.Security.MessageProtectionOrder EncryptBeforeSign = int32(2)" />
      <MemberSignature Language="DocId" Value="F:System.ServiceModel.Security.MessageProtectionOrder.EncryptBeforeSign" />
      <MemberSignature Language="VB.NET" Value="EncryptBeforeSign" />
      <MemberSignature Language="C++ CLI" Value="EncryptBeforeSign" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.ServiceModel.Security.MessageProtectionOrder</ReturnType>
      </ReturnValue>
      <MemberValue>2</MemberValue>
      <Docs>
        <summary>Указывает, что сообщение SOAP шифруется перед созданием для этого сообщения цифровой сигнатуры.</summary>
      </Docs>
    </Member>
    <Member MemberName="SignBeforeEncrypt">
      <MemberSignature Language="C#" Value="SignBeforeEncrypt" />
      <MemberSignature Language="ILAsm" Value=".field public static literal valuetype System.ServiceModel.Security.MessageProtectionOrder SignBeforeEncrypt = int32(0)" />
      <MemberSignature Language="DocId" Value="F:System.ServiceModel.Security.MessageProtectionOrder.SignBeforeEncrypt" />
      <MemberSignature Language="VB.NET" Value="SignBeforeEncrypt" />
      <MemberSignature Language="C++ CLI" Value="SignBeforeEncrypt" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.ServiceModel.Security.MessageProtectionOrder</ReturnType>
      </ReturnValue>
      <MemberValue>0</MemberValue>
      <Docs>
        <summary>Указывает, что цифровая сигнатура создается для сообщения SOAP перед шифрованием любой другой части сообщения, однако сама цифровая сигнатура не шифруется.</summary>
      </Docs>
    </Member>
    <Member MemberName="SignBeforeEncryptAndEncryptSignature">
      <MemberSignature Language="C#" Value="SignBeforeEncryptAndEncryptSignature" />
      <MemberSignature Language="ILAsm" Value=".field public static literal valuetype System.ServiceModel.Security.MessageProtectionOrder SignBeforeEncryptAndEncryptSignature = int32(1)" />
      <MemberSignature Language="DocId" Value="F:System.ServiceModel.Security.MessageProtectionOrder.SignBeforeEncryptAndEncryptSignature" />
      <MemberSignature Language="VB.NET" Value="SignBeforeEncryptAndEncryptSignature" />
      <MemberSignature Language="C++ CLI" Value="SignBeforeEncryptAndEncryptSignature" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.ServiceModel.Security.MessageProtectionOrder</ReturnType>
      </ReturnValue>
      <MemberValue>1</MemberValue>
      <Docs>
        <summary>Указывает, что цифровая сигнатура создается для сообщения SOAP перед шифрованием любой другой части сообщения, а сама цифровая сигнатура также шифруется.</summary>
      </Docs>
    </Member>
  </Members>
</Type>