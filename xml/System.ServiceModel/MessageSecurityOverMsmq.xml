<Type Name="MessageSecurityOverMsmq" FullName="System.ServiceModel.MessageSecurityOverMsmq">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="f55e49f0b7d5e18924c433066394c02c3eacb324" />
    <Meta Name="ms.sourcegitcommit" Value="cc0c87a2e12b0fb9ba9ecdd3d4950f0572524db8" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="ru-RU" />
    <Meta Name="ms.lasthandoff" Value="05/03/2018" />
    <Meta Name="ms.locfileid" Value="32690399" />
  </Metadata>
  <TypeSignature Language="C#" Value="public sealed class MessageSecurityOverMsmq" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed beforefieldinit MessageSecurityOverMsmq extends System.Object" />
  <TypeSignature Language="DocId" Value="T:System.ServiceModel.MessageSecurityOverMsmq" />
  <TypeSignature Language="VB.NET" Value="Public NotInheritable Class MessageSecurityOverMsmq" />
  <TypeSignature Language="C++ CLI" Value="public ref class MessageSecurityOverMsmq sealed" />
  <AssemblyInfo>
    <AssemblyName>System.ServiceModel</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>Позволяет задать для привязки <see cref="T:System.ServiceModel.NetMsmqBinding" /> свойства безопасности на уровне сообщений.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Доступ к объекту осуществляется через привязку с помощью свойства <xref:System.ServiceModel.NetMsmqBinding.Security%2A>, которое возвращает объект <xref:System.ServiceModel.NetMsmqSecurity>. Этот объект имеет свойство <xref:System.ServiceModel.NetMsmqSecurity.Message%2A>, содержащее ссылку на объект <xref:System.ServiceModel.MessageSecurityOverMsmq>.  
  
   
  
## Examples  
 [!code-csharp[UEMessageSecurityOverMsmq#1](~/samples/snippets/csharp/VS_Snippets_CFX/uemessagesecurityovermsmq/cs/program.cs#1)]
 [!code-vb[UEMessageSecurityOverMsmq#1](~/samples/snippets/visualbasic/VS_Snippets_CFX/uemessagesecurityovermsmq/vb/program.vb#1)]  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public MessageSecurityOverMsmq ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ServiceModel.MessageSecurityOverMsmq.#ctor" />
      <MemberSignature Language="VB.NET" Value="Public Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; MessageSecurityOverMsmq();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary>Инициализирует новый экземпляр класса <see cref="T:System.ServiceModel.MessageSecurityOverMsmq" />.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="AlgorithmSuite">
      <MemberSignature Language="C#" Value="public System.ServiceModel.Security.SecurityAlgorithmSuite AlgorithmSuite { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.ServiceModel.Security.SecurityAlgorithmSuite AlgorithmSuite" />
      <MemberSignature Language="DocId" Value="P:System.ServiceModel.MessageSecurityOverMsmq.AlgorithmSuite" />
      <MemberSignature Language="VB.NET" Value="Public Property AlgorithmSuite As SecurityAlgorithmSuite" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::ServiceModel::Security::SecurityAlgorithmSuite ^ AlgorithmSuite { System::ServiceModel::Security::SecurityAlgorithmSuite ^ get(); void set(System::ServiceModel::Security::SecurityAlgorithmSuite ^ value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(typeof(System.ServiceModel.Security.SecurityAlgorithmSuite), "Default")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.ServiceModel.Security.SecurityAlgorithmSuite</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Указывает набор алгоритмов, используемый для обеспечения безопасности сообщений на уровне SOAP.</summary>
        <value>Параметр <see cref="T:System.ServiceModel.Security.SecurityAlgorithmSuite" /> для сообщений, отправляемых через привязку <see cref="T:System.ServiceModel.NetMsmqBinding" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 В объекте <xref:System.ServiceModel.Security.SecurityAlgorithmSuite> задаются различные алгоритмы, например алгоритмы канонизации, дайджеста, шифрования ключей, цифровой сигнатуры, шифрования сообщений и формирования ключей. Это свойство наиболее часто применяется при работе с платформой, в которой используются алгоритмы, отличные от заданных по умолчанию. При изменении значения этого свойства необходимо знать о сильных и слабых сторонах соответствующих алгоритмов.  
  
   
  
## Examples  
 [!code-csharp[UEMessageSecurityOverMsmq#2](~/samples/snippets/csharp/VS_Snippets_CFX/uemessagesecurityovermsmq/cs/program.cs#2)]
 [!code-vb[UEMessageSecurityOverMsmq#2](~/samples/snippets/visualbasic/VS_Snippets_CFX/uemessagesecurityovermsmq/vb/program.vb#2)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ClientCredentialType">
      <MemberSignature Language="C#" Value="public System.ServiceModel.MessageCredentialType ClientCredentialType { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.ServiceModel.MessageCredentialType ClientCredentialType" />
      <MemberSignature Language="DocId" Value="P:System.ServiceModel.MessageSecurityOverMsmq.ClientCredentialType" />
      <MemberSignature Language="VB.NET" Value="Public Property ClientCredentialType As MessageCredentialType" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::ServiceModel::MessageCredentialType ClientCredentialType { System::ServiceModel::MessageCredentialType get(); void set(System::ServiceModel::MessageCredentialType value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(Mono.Cecil.CustomAttributeArgument)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.ServiceModel.MessageCredentialType</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Возвращает или задает параметры безопасности <see cref="T:System.ServiceModel.MessageCredentialType" /> для сообщений, отправляемых посредством транспорта MSMQ.</summary>
        <value>Параметры безопасности <see cref="T:System.ServiceModel.MessageCredentialType" /> для сообщений, отправляемых посредством транспорта MSMQ.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Это свойство может принимать одно из следующих значений.  
  
-   **Нет**: Это позволяет службе взаимодействовать с анонимными клиентами. Как для службы, так и для клиента учетные данные не требуются.  
  
-   **Windows**: Это позволяет проводить проверку подлинности учетных данных Windows обмен сообщениями SOAP. В этом случае всегда выполняется проверка подлинности на основе Kerberos.  
  
-   **Имя пользователя**: Это позволяет службе требовать проверку подлинности клиента с помощью учетных данных UserName. Эти учетные данные необходимо указать с помощью класса <xref:System.ServiceModel.Description.ClientCredentials>.  
  
> [!NOTE]
>  WCF не поддерживает передачу дайджеста пароля или получение ключей с использованием пароля и использование таких ключей для обеспечения безопасности сообщений. Таким образом WCF принудительно обеспечивает безопасность обмена данными при использовании учетных данных UserName. Для этого режима требуется указать сертификат службы на стороне клиента с помощью `ClientCredential` поведение и `serviceCertificate`:  
  
-   `Certificate`. Данное значение позволяет службе требовать проверку подлинности клиента с помощью сертификата. В этом случае учетные данные клиента должны быть определены с помощью класса <xref:System.ServiceModel.Description.ClientCredentials> или поведения `ClientCredentials`. Учетные данные службы в данном случае должны быть определены с помощью класса <xref:System.ServiceModel.Description.ClientCredentials> или поведения `ClientCredentials`, которому задается значение `serviceCertificate`.  
  
-   `InfoCard`. Данное значение позволяет службе требовать проверки подлинности клиента с помощью системы InfoCard. Необходимо определить `serviceCertificate` в поведении `ClientCredential`.  
  
-   Учетные данные сертификата для `MessageSecurityOverMsmq` действительны только в том случае, если режиму безопасности присвоено значение `Both` или `Message`.  
  
   
  
## Examples  
 [!code-csharp[UEMessageSecurityOverMsmq#3](~/samples/snippets/csharp/VS_Snippets_CFX/uemessagesecurityovermsmq/cs/program.cs#3)]
 [!code-vb[UEMessageSecurityOverMsmq#3](~/samples/snippets/visualbasic/VS_Snippets_CFX/uemessagesecurityovermsmq/vb/program.vb#3)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>