<Type Name="ServiceController" FullName="System.ServiceProcess.ServiceController">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="9a3b28ab31ae22be9c5d05c1e032e4a25945f287" />
    <Meta Name="ms.sourcegitcommit" Value="d31dc2ede16f6f7bc64e90d9f897ff54c4e3869b" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="ru-RU" />
    <Meta Name="ms.lasthandoff" Value="04/03/2018" />
    <Meta Name="ms.locfileid" Value="30530988" />
  </Metadata>
  <TypeSignature Language="C#" Value="public class ServiceController : System.ComponentModel.Component" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit ServiceController extends System.ComponentModel.Component" />
  <TypeSignature Language="DocId" Value="T:System.ServiceProcess.ServiceController" />
  <TypeSignature Language="VB.NET" Value="Public Class ServiceController&#xA;Inherits Component" />
  <TypeSignature Language="C++ CLI" Value="public ref class ServiceController : System::ComponentModel::Component" />
  <AssemblyInfo>
    <AssemblyName>System.ServiceProcess.ServiceController</AssemblyName>
    <AssemblyVersion>4.1.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>System.ServiceProcess</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
    <BaseTypeName FrameworkAlternate="netframework-4.5">System.ComponentModel.Component</BaseTypeName>
  </Base>
  <Interfaces></Interfaces>
  <Attributes>
    <Attribute>
      <AttributeName>System.ComponentModel.Designer("System.ServiceProcess.Design.ServiceControllerDesigner, System.Design, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName>System.ServiceProcess.ServiceProcessDescription("ServiceControllerDesc")</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>Представляет службу Windows и позволяет подключаться к запущенной или остановленной службе, управлять работой службы и получать сведения о ней.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Можно использовать <xref:System.ServiceProcess.ServiceController> класса для подключения и поведения существующих служб. При создании экземпляра <xref:System.ServiceProcess.ServiceController> класса, его свойства настраиваются, он взаимодействует с определенной службой Windows. Затем можно использовать класс для запуска, остановки и других манипуляций со службой.  
  
 Скорее всего, будет использовать <xref:System.ServiceProcess.ServiceController> в администрировании. Например, можно создать Windows или службе через веб-приложение, которое отправляет пользовательский команды <xref:System.ServiceProcess.ServiceController> экземпляра. Это может потребоваться, поскольку оснастка консоли MMC диспетчера управления службами (SCM) не поддерживает пользовательские команды.  
  
 После создания экземпляра <xref:System.ServiceProcess.ServiceController>, необходимо задать два свойства для идентификации службы, с которой он взаимодействует: имя компьютера и имя службы, которые вы хотите контролировать.  
  
> [!NOTE]
>  По умолчанию <xref:System.ServiceProcess.ServiceController.MachineName%2A> устанавливается на локальном компьютере, поэтому необходимо изменить его, если не требуется задать экземпляр, чтобы они указывали на другой компьютер.  
  
 Как правило автор службы пишет код, который настраивает действия, связанные с той или иной команды. Например, служба может содержать код для реагирования на <xref:System.ServiceProcess.ServiceBase.OnPause%2A?displayProperty=nameWithType> команды. В этом случае пользовательская обработка <xref:System.ServiceProcess.ServiceController.Pause%2A> задача выполняется до системы приостанавливает работу службы.  
  
 Набор команд, которые может обрабатывать служба зависит от свойств; Например, можно задать <xref:System.ServiceProcess.ServiceController.CanStop%2A> свойства службы `false`. Этот параметр отображает `Stop` команда недоступна для данной службы; предотвращает останов службы из диспетчера управления Службами, отключив кнопку необходимые. При попытке остановить службу из кода, система вызывает ошибку и отображает сообщение об ошибке «не удалось остановить `servicename`.»  
  
   
  
## Examples  
 В следующем примере показано использование <xref:System.ServiceProcess.ServiceController> класса для управления `SimpleService` пример службы.  
  
 [!code-csharp[ServiceControllerClass#1](~/samples/snippets/csharp/VS_Snippets_CLR/ServiceControllerClass/CS/program.cs#1)]
 [!code-vb[ServiceControllerClass#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/ServiceControllerClass/VB/program.vb#1)]  
  
 ]]></format>
    </remarks>
    <altmember cref="T:System.ServiceProcess.ServiceBase" />
    <altmember cref="T:System.ServiceProcess.ServiceControllerStatus" />
    <altmember cref="T:System.ServiceProcess.ServiceType" />
  </Docs>
  <Members>
    <MemberGroup MemberName=".ctor">
      <AssemblyInfo>
        <AssemblyName>System.ServiceProcess</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Инициализирует новый экземпляр класса <see cref="T:System.ServiceProcess.ServiceController" />.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public ServiceController ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ServiceProcess.ServiceController.#ctor" />
      <MemberSignature Language="VB.NET" Value="Public Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; ServiceController();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceProcess</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary>Инициализирует новый экземпляр класса <see cref="T:System.ServiceProcess.ServiceController" />, не связанный с конкретной службой.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public ServiceController (string name);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(string name) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ServiceProcess.ServiceController.#ctor(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (name As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; ServiceController(System::String ^ name);" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceProcess.ServiceController</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.ServiceProcess</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="name">Имя, определяющее службу для системы. Это также может быть отображаемое имя службы.</param>
        <summary>Инициализирует новый экземпляр класса <see cref="T:System.ServiceProcess.ServiceController" />, связанный с существующей службой на локальном компьютере.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 В следующем примере показано использование <xref:System.ServiceProcess.ServiceController.%23ctor%28System.String%29?displayProperty=nameWithType> конструктор для создания <xref:System.ServiceProcess.ServiceController> объект, используемый для образца службы управления. Данный пример является частью большего примера, приведенного для <xref:System.ServiceProcess.ServiceController> класса.  
  
 [!code-csharp[ServiceControllerClass#2](~/samples/snippets/csharp/VS_Snippets_CLR/ServiceControllerClass/CS/program.cs#2)]
 [!code-vb[ServiceControllerClass#2](~/samples/snippets/visualbasic/VS_Snippets_CLR/ServiceControllerClass/VB/program.vb#2)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <paramref name="name" /> недопустим.</exception>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public ServiceController (string name, string machineName);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(string name, string machineName) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ServiceProcess.ServiceController.#ctor(System.String,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (name As String, machineName As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; ServiceController(System::String ^ name, System::String ^ machineName);" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceProcess.ServiceController</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.ServiceProcess</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
        <Parameter Name="machineName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="name">Имя, определяющее службу для системы. Это также может быть отображаемое имя службы.</param>
        <param name="machineName">Компьютер, на котором находится служба.</param>
        <summary>Инициализирует новый экземпляр класса <see cref="T:System.ServiceProcess.ServiceController" />, связанный с существующей службой на указанном компьютере.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Для `machineName` параметр, можно использовать «.» для представления локального компьютера.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <paramref name="name" /> недопустим.  
  
 - или -  
  
 <paramref name="machineName" /> недопустим.</exception>
      </Docs>
    </Member>
    <Member MemberName="CanPauseAndContinue">
      <MemberSignature Language="C#" Value="public bool CanPauseAndContinue { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool CanPauseAndContinue" />
      <MemberSignature Language="DocId" Value="P:System.ServiceProcess.ServiceController.CanPauseAndContinue" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property CanPauseAndContinue As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool CanPauseAndContinue { bool get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceProcess.ServiceController</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.ServiceProcess</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ServiceProcess.ServiceProcessDescription("SPCanPauseAndContinue")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Получает значение, показывающее, возможны ли приостановка и возобновление работы службы.</summary>
        <value>
          <see langword="true" />, если работу службы можно приостановить; в противном случае — <see langword="false" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 В следующем примере показано использование <xref:System.ServiceProcess.ServiceController.CanPauseAndContinue%2A> свойства, чтобы определить, является ли службы можно приостановить и продолжить. Данный пример является частью большего примера, приведенного для <xref:System.ServiceProcess.ServiceController> класса.  
  
 [!code-csharp[ServiceControllerClass#2](~/samples/snippets/csharp/VS_Snippets_CLR/ServiceControllerClass/CS/program.cs#2)]
 [!code-vb[ServiceControllerClass#2](~/samples/snippets/visualbasic/VS_Snippets_CLR/ServiceControllerClass/VB/program.vb#2)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ComponentModel.Win32Exception">Произошла ошибка при обращении к API-интерфейсу системы.</exception>
        <exception cref="T:System.InvalidOperationException">Служба не была найдена.</exception>
      </Docs>
    </Member>
    <Member MemberName="CanShutdown">
      <MemberSignature Language="C#" Value="public bool CanShutdown { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool CanShutdown" />
      <MemberSignature Language="DocId" Value="P:System.ServiceProcess.ServiceController.CanShutdown" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property CanShutdown As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool CanShutdown { bool get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceProcess.ServiceController</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.ServiceProcess</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ServiceProcess.ServiceProcessDescription("SPCanShutdown")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Получает значение, показывающее, необходимо ли уведомлять службу о завершении работы системы.</summary>
        <value>
          <see langword="true" />, если служба должна получать уведомление о завершении работы системы; в противном случае — <see langword="false" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 В следующем примере показано использование <xref:System.ServiceProcess.ServiceController.CanShutdown%2A> свойства, чтобы определить, является ли служба предоставляет обработчик для события завершения. Данный пример является частью большего примера, приведенного для <xref:System.ServiceProcess.ServiceController> класса.  
  
 [!code-csharp[ServiceControllerClass#2](~/samples/snippets/csharp/VS_Snippets_CLR/ServiceControllerClass/CS/program.cs#2)]
 [!code-vb[ServiceControllerClass#2](~/samples/snippets/visualbasic/VS_Snippets_CLR/ServiceControllerClass/VB/program.vb#2)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ComponentModel.Win32Exception">Произошла ошибка при обращении к API-интерфейсу системы.</exception>
        <exception cref="T:System.InvalidOperationException">Служба не была найдена.</exception>
      </Docs>
    </Member>
    <Member MemberName="CanStop">
      <MemberSignature Language="C#" Value="public bool CanStop { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool CanStop" />
      <MemberSignature Language="DocId" Value="P:System.ServiceProcess.ServiceController.CanStop" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property CanStop As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool CanStop { bool get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceProcess.ServiceController</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.ServiceProcess</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ServiceProcess.ServiceProcessDescription("SPCanStop")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Получает значение, определяющее, возможен ли останов службы после ее запуска.</summary>
        <value>
          <see langword="true" />, если возможны останов службы и вызов метода <see cref="M:System.ServiceProcess.ServiceBase.OnStop" />; в противном случае — <see langword="false" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 В следующем примере показано использование <xref:System.ServiceProcess.ServiceController.CanStop%2A> свойства, чтобы определить, является ли служба предоставляет обработчик для события остановки. Данный пример является частью большего примера, приведенного для <xref:System.ServiceProcess.ServiceController> класса.  
  
 [!code-csharp[ServiceControllerClass#2](~/samples/snippets/csharp/VS_Snippets_CLR/ServiceControllerClass/CS/program.cs#2)]
 [!code-vb[ServiceControllerClass#2](~/samples/snippets/visualbasic/VS_Snippets_CLR/ServiceControllerClass/VB/program.vb#2)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ComponentModel.Win32Exception">Произошла ошибка при обращении к API-интерфейсу системы.</exception>
        <exception cref="T:System.InvalidOperationException">Служба не была найдена.</exception>
      </Docs>
    </Member>
    <Member MemberName="Close">
      <MemberSignature Language="C#" Value="public void Close ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Close() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ServiceProcess.ServiceController.Close" />
      <MemberSignature Language="VB.NET" Value="Public Sub Close ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Close();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceProcess</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Отключает данный экземпляр <see cref="T:System.ServiceProcess.ServiceController" /> от службы и освобождает все выделенные ему ресурсы.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.ServiceProcess.ServiceController.Close%2A> Освобождает все дескрипторы, связанные с <xref:System.ServiceProcess.ServiceController> экземпляр.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Continue">
      <MemberSignature Language="C#" Value="public void Continue ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Continue() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ServiceProcess.ServiceController.Continue" />
      <MemberSignature Language="VB.NET" Value="Public Sub Continue ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Continue();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceProcess.ServiceController</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.ServiceProcess</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Возобновляет работу службы после ее приостановки.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 При вызове <xref:System.ServiceProcess.ServiceController.Continue%2A> для службы, ее состояние сначала изменяется на `ContinuePending` и по завершении <xref:System.ServiceProcess.ServiceController.Continue%2A> методом, он заменяется `Running`.  
  
 Не удается вызвать <xref:System.ServiceProcess.ServiceController.Continue%2A> для службы, пока состояние контроллера службы — `Paused`.  
  
   
  
## Examples  
 В следующем примере показано использование <xref:System.ServiceProcess.ServiceController.Continue%2A> метода продолжение работы приостановленной службы. Данный пример является частью большего примера, приведенного для <xref:System.ServiceProcess.ServiceController> класса.  
  
 [!code-csharp[ServiceControllerClass#5](~/samples/snippets/csharp/VS_Snippets_CLR/ServiceControllerClass/CS/program.cs#5)]
 [!code-vb[ServiceControllerClass#5](~/samples/snippets/visualbasic/VS_Snippets_CLR/ServiceControllerClass/VB/program.vb#5)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ComponentModel.Win32Exception">Произошла ошибка при обращении к API-интерфейсу системы.</exception>
        <exception cref="T:System.InvalidOperationException">Служба не была найдена.</exception>
        <permission cref="T:System.ServiceProcess.ServiceControllerPermission">для управления службами на компьютере. Связанное перечисление: <see cref="F:System.ServiceProcess.ServiceControllerPermissionAccess.Control" /></permission>
        <permission cref="T:System.Security.Permissions.SecurityPermission">для неограниченного доступа к данным службы. Связанное перечисление: <see cref="F:System.Security.Permissions.PermissionState.Unrestricted" /></permission>
        <altmember cref="P:System.ServiceProcess.ServiceController.CanPauseAndContinue" />
        <altmember cref="M:System.ServiceProcess.ServiceController.Pause" />
        <altmember cref="P:System.ServiceProcess.ServiceController.Status" />
      </Docs>
    </Member>
    <Member MemberName="DependentServices">
      <MemberSignature Language="C#" Value="public System.ServiceProcess.ServiceController[] DependentServices { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.ServiceProcess.ServiceController[] DependentServices" />
      <MemberSignature Language="DocId" Value="P:System.ServiceProcess.ServiceController.DependentServices" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property DependentServices As ServiceController()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property cli::array &lt;System::ServiceProcess::ServiceController ^&gt; ^ DependentServices { cli::array &lt;System::ServiceProcess::ServiceController ^&gt; ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceProcess.ServiceController</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.ServiceProcess</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ServiceProcess.ServiceProcessDescription("SPDependentServices")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.ServiceProcess.ServiceController[]</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Получает набор служб, который зависит от службы, связанной с данным экземпляром <see cref="T:System.ServiceProcess.ServiceController" />.</summary>
        <value>Массив экземпляров <see cref="T:System.ServiceProcess.ServiceController" />, каждый из которых связан со службой, зависящей от данной службы.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.ServiceProcess.ServiceController.DependentServices%2A> Массива представляет служб, которые система останавливается, если приложение вызывает <xref:System.ServiceProcess.ServiceController.Stop%2A> для этой службы.  
  
   
  
## Examples  
 В следующем примере используется <xref:System.ServiceProcess.ServiceController> класса, чтобы отобразить набор служб, зависящих от службы журнала событий.  
  
 [!code-cpp[ServiceController#3](~/samples/snippets/cpp/VS_Snippets_CLR/ServiceController/CPP/servicecontroller.cpp#3)]
 [!code-csharp[ServiceController#3](~/samples/snippets/csharp/VS_Snippets_CLR/ServiceController/CS/servicecontroller.cs#3)]
 [!code-vb[ServiceController#3](~/samples/snippets/visualbasic/VS_Snippets_CLR/ServiceController/VB/servicecontroller.vb#3)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ComponentModel.Win32Exception">Произошла ошибка при обращении к API-интерфейсу системы.</exception>
        <exception cref="T:System.InvalidOperationException">Служба не была найдена.</exception>
        <permission cref="T:System.ServiceProcess.ServiceControllerPermission">для подключения к существующим службам на компьютере. Связанное перечисление: <see cref="F:System.ServiceProcess.ServiceControllerPermissionAccess.Browse" /></permission>
      </Docs>
    </Member>
    <Member MemberName="DisplayName">
      <MemberSignature Language="C#" Value="public string DisplayName { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string DisplayName" />
      <MemberSignature Language="DocId" Value="P:System.ServiceProcess.ServiceController.DisplayName" />
      <MemberSignature Language="VB.NET" Value="Public Property DisplayName As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ DisplayName { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceProcess.ServiceController</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.ServiceProcess</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.ReadOnly(true)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ServiceProcess.ServiceProcessDescription("SPDisplayName")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Получает или задает понятное имя службы.</summary>
        <value>Понятное имя службы, которое может использоваться для ее идентификации.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Можно задать <xref:System.ServiceProcess.ServiceController.DisplayName%2A> на пустую строку ("»), свойства, но `null` приводит к возникновению исключения.  
  
   
  
## Examples  
 В следующем примере используется <xref:System.ServiceProcess.ServiceController> класса, чтобы отобразить набор служб, зависящих от службы журнала событий.  
  
 [!code-cpp[ServiceController#3](~/samples/snippets/cpp/VS_Snippets_CLR/ServiceController/CPP/servicecontroller.cpp#3)]
 [!code-csharp[ServiceController#3](~/samples/snippets/csharp/VS_Snippets_CLR/ServiceController/CS/servicecontroller.cs#3)]
 [!code-vb[ServiceController#3](~/samples/snippets/visualbasic/VS_Snippets_CLR/ServiceController/VB/servicecontroller.vb#3)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">Значение параметра <see cref="P:System.ServiceProcess.ServiceController.DisplayName" /> — <see langword="null" />.</exception>
        <exception cref="T:System.ComponentModel.Win32Exception">Произошла ошибка при обращении к API-интерфейсу системы.</exception>
        <exception cref="T:System.InvalidOperationException">Служба не была найдена.</exception>
      </Docs>
    </Member>
    <Member MemberName="Dispose">
      <MemberSignature Language="C#" Value="public void Dispose ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Dispose() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ServiceProcess.ServiceController.Dispose" />
      <MemberSignature Language="VB.NET" Value="Public Sub Dispose ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void Dispose();" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.IDisposable.Dispose</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.ServiceProcess.ServiceController</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Dispose">
      <MemberSignature Language="C#" Value="protected override void Dispose (bool disposing);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance void Dispose(bool disposing) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ServiceProcess.ServiceController.Dispose(System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Sub Dispose (disposing As Boolean)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; override void Dispose(bool disposing);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceProcess.ServiceController</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.ServiceProcess</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="disposing" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="disposing">
          Значение <see langword="true" /> позволяет освободить как управляемые, так и неуправляемые ресурсы; значение <see langword="false" /> освобождает только неуправляемые ресурсы.</param>
        <summary>Освобождает неуправляемые ресурсы, используемые объектом <see cref="T:System.ServiceProcess.ServiceController" />, а при необходимости освобождает также управляемые ресурсы.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Этот метод вызывается методом открытые `Dispose()` метод и <xref:System.Object.Finalize%2A> метод. `Dispose()` вызывает защищенный `Dispose(Boolean)` метод с `disposing` равным `true`. <xref:System.Object.Finalize%2A> вызывает `Dispose` с `disposing` значение `false`.  
  
 При `disposing` параметр имеет значение true, данный метод освобождает все ресурсы, занятые любыми управляемыми объектами, которые <xref:System.ServiceProcess.ServiceController> ссылки. Этот метод вызывает метод `Dispose()` каждого объекта, на который есть ссылка.  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides">
          <para>
            Метод <see langword="Dispose" /> может вызываться несколько раз другими объектами. При переопределении метода <see langword="Dispose(Boolean)" /> нужно избегать ссылок на объекты, которые были уничтожены предыдущими вызовами метода <see langword="Dispose" />. Дополнительные сведения о реализации <see langword="Dispose(Boolean)" />, в разделе [метода](~/docs/standard/garbage-collection/implementing-dispose.md).  
  
 Дополнительные сведения о <see langword="Dispose" /> и <see cref="M:System.Object.Finalize" />, в разделе [очистки неуправляемых ресурсов](~/docs/standard/garbage-collection/unmanaged.md) и [переопределение метода Finalize](http://msdn.microsoft.com/library/8026cb68-fe93-43fc-96c1-c09ad7d64cd3).</para>
        </block>
      </Docs>
    </Member>
    <Member MemberName="ExecuteCommand">
      <MemberSignature Language="C#" Value="public void ExecuteCommand (int command);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void ExecuteCommand(int32 command) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ServiceProcess.ServiceController.ExecuteCommand(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Sub ExecuteCommand (command As Integer)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void ExecuteCommand(int command);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceProcess</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="command" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="command">Определяемый приложением флаг команды, показывающий, какая пользовательская команда должна быть выполнена. Значение должно находиться в диапазоне от 128 до 256 включительно.</param>
        <summary>Выполняет пользовательскую команду для службы.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 При вызове <xref:System.ServiceProcess.ServiceController.ExecuteCommand%2A>, не изменяет состояние службы. Если служба была запущена, она остается в состоянии `Running`. Если служба была остановлена, она остается в состоянии `Stopped`, и т. д. Чтобы обработать пользовательскую команду, необходимо переопределить службы <xref:System.ServiceProcess.ServiceBase.OnCustomCommand%2A> метод и предоставить обработчик для команды, заданные по `command` параметр.  
  
   
  
## Examples  
 В следующем примере кода показано использование <xref:System.ServiceProcess.ServiceController.ExecuteCommand%28System.Int32%29?displayProperty=nameWithType> метод для выполнения пользовательских команд в `SimpleService` пример службы.  
  
 [!code-csharp[ServiceContoller_ExecuteCommand#1](~/samples/snippets/csharp/VS_Snippets_CLR/ServiceContoller_ExecuteCommand/CS/program.cs#1)]
 [!code-vb[ServiceContoller_ExecuteCommand#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/ServiceContoller_ExecuteCommand/VB/module1.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ComponentModel.Win32Exception">Произошла ошибка при обращении к API-интерфейсу системы.</exception>
        <exception cref="T:System.InvalidOperationException">Служба не была найдена.</exception>
        <permission cref="T:System.ServiceProcess.ServiceControllerPermission">для управления службами на компьютере. Связанное перечисление: <see cref="F:System.ServiceProcess.ServiceControllerPermissionAccess.Control" /></permission>
        <permission cref="T:System.Security.Permissions.SecurityPermission">для неограниченного доступа к данным службы. Связанное перечисление: <see cref="F:System.Security.Permissions.PermissionState.Unrestricted" /></permission>
        <altmember cref="M:System.ServiceProcess.ServiceBase.OnCustomCommand(System.Int32)" />
      </Docs>
    </Member>
    <MemberGroup MemberName="GetDevices">
      <AssemblyInfo>
        <AssemblyName>System.ServiceProcess.ServiceController</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Загружает службы драйверов устройств на компьютере.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="GetDevices">
      <MemberSignature Language="C#" Value="public static System.ServiceProcess.ServiceController[] GetDevices ();" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.ServiceProcess.ServiceController[] GetDevices() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ServiceProcess.ServiceController.GetDevices" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function GetDevices () As ServiceController()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static cli::array &lt;System::ServiceProcess::ServiceController ^&gt; ^ GetDevices();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceProcess.ServiceController</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.ServiceProcess</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.ServiceProcess.ServiceController[]</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Загружает службы драйверов устройств на локальном компьютере.</summary>
        <returns>Массив типа <see cref="T:System.ServiceProcess.ServiceController" />, каждый элемент которого связан со службой драйвера устройства на локальном компьютере.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.ServiceProcess.ServiceController.GetDevices%2A> Возвращает только устройство драйвер службы на локальном компьютере. Для получения служб драйверов не для устройства или службы, которые не являются драйверами устройств, вызовите <xref:System.ServiceProcess.ServiceController.GetServices%2A> метод. Вместе эти два метода обеспечивают доступ ко всем службам на компьютере.  
  
   
  
## Examples  
 В следующем примере используется <xref:System.ServiceProcess.ServiceController> для отображения службы драйверов устройств на локальном компьютере.  
  
 [!code-cpp[ServiceController#5](~/samples/snippets/cpp/VS_Snippets_CLR/ServiceController/CPP/servicecontroller.cpp#5)]
 [!code-csharp[ServiceController#5](~/samples/snippets/csharp/VS_Snippets_CLR/ServiceController/CS/servicecontroller.cs#5)]
 [!code-vb[ServiceController#5](~/samples/snippets/visualbasic/VS_Snippets_CLR/ServiceController/VB/servicecontroller.vb#5)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ComponentModel.Win32Exception">Произошла ошибка при обращении к API-интерфейсу системы.</exception>
        <altmember cref="M:System.ServiceProcess.ServiceController.GetServices" />
      </Docs>
    </Member>
    <Member MemberName="GetDevices">
      <MemberSignature Language="C#" Value="public static System.ServiceProcess.ServiceController[] GetDevices (string machineName);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.ServiceProcess.ServiceController[] GetDevices(string machineName) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ServiceProcess.ServiceController.GetDevices(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function GetDevices (machineName As String) As ServiceController()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static cli::array &lt;System::ServiceProcess::ServiceController ^&gt; ^ GetDevices(System::String ^ machineName);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceProcess.ServiceController</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.ServiceProcess</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.ServiceProcess.ServiceController[]</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="machineName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="machineName">Компьютер, с которого должны быть загружены службы драйверов устройств.</param>
        <summary>Загружает службы драйверов устройств на указанном компьютере.</summary>
        <returns>Массив типа <see cref="T:System.ServiceProcess.ServiceController" />, каждый элемент которого связан со службой драйвера устройства на указанном компьютере.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.ServiceProcess.ServiceController.GetDevices%2A> Возвращает только устройство драйвер службы с указанного компьютера. Для получения служб драйверов не для устройства или службы, которые не являются драйверами устройств, вызовите <xref:System.ServiceProcess.ServiceController.GetServices%2A> метод. Вместе эти два метода обеспечивают доступ ко всем службам на компьютере.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ComponentModel.Win32Exception">Произошла ошибка при обращении к API-интерфейсу системы.</exception>
        <exception cref="T:System.ArgumentException">Синтаксис параметра <paramref name="machineName" /> недопустим.</exception>
        <altmember cref="M:System.ServiceProcess.ServiceController.GetServices" />
      </Docs>
    </Member>
    <MemberGroup MemberName="GetServices">
      <AssemblyInfo>
        <AssemblyName>System.ServiceProcess.ServiceController</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Загружает находящиеся на компьютере службы драйверов, не связанные с устройствами, а также службы, не являющиеся драйверами.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="GetServices">
      <MemberSignature Language="C#" Value="public static System.ServiceProcess.ServiceController[] GetServices ();" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.ServiceProcess.ServiceController[] GetServices() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ServiceProcess.ServiceController.GetServices" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function GetServices () As ServiceController()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static cli::array &lt;System::ServiceProcess::ServiceController ^&gt; ^ GetServices();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceProcess.ServiceController</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.ServiceProcess</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.ServiceProcess.ServiceController[]</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Загружает все службы на локальном компьютере, за исключением служб драйверов устройств.</summary>
        <returns>Массив типа <see cref="T:System.ServiceProcess.ServiceController" />, каждый элемент которого связан со службой на локальном компьютере.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.ServiceProcess.ServiceController.GetServices%2A> Возвращает только службы драйверов, не относящиеся к устройствам и служб, которые не являются драйверами устройств с локального компьютера. Чтобы получить службы драйверов устройств, вызовите <xref:System.ServiceProcess.ServiceController.GetDevices%2A> метод. Вместе эти два метода обеспечивают доступ ко всем службам на компьютере.  
  
   
  
## Examples  
 В следующем примере используется <xref:System.ServiceProcess.ServiceController> класс, чтобы отобразить службы, которые выполняются на локальном компьютере.  
  
 [!code-cpp[ServiceController#6](~/samples/snippets/cpp/VS_Snippets_CLR/ServiceController/CPP/servicecontroller.cpp#6)]
 [!code-csharp[ServiceController#6](~/samples/snippets/csharp/VS_Snippets_CLR/ServiceController/CS/servicecontroller.cs#6)]
 [!code-vb[ServiceController#6](~/samples/snippets/visualbasic/VS_Snippets_CLR/ServiceController/VB/servicecontroller.vb#6)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ComponentModel.Win32Exception">Произошла ошибка при обращении к API-интерфейсу системы.</exception>
        <altmember cref="M:System.ServiceProcess.ServiceController.GetDevices" />
      </Docs>
    </Member>
    <Member MemberName="GetServices">
      <MemberSignature Language="C#" Value="public static System.ServiceProcess.ServiceController[] GetServices (string machineName);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.ServiceProcess.ServiceController[] GetServices(string machineName) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ServiceProcess.ServiceController.GetServices(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function GetServices (machineName As String) As ServiceController()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static cli::array &lt;System::ServiceProcess::ServiceController ^&gt; ^ GetServices(System::String ^ machineName);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceProcess.ServiceController</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.ServiceProcess</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.ServiceProcess.ServiceController[]</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="machineName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="machineName">Компьютер, с которого должны быть загружены службы.</param>
        <summary>Загружает все службы на указанном компьютере, за исключением служб драйверов устройств.</summary>
        <returns>Массив типа <see cref="T:System.ServiceProcess.ServiceController" />, каждый элемент которого связан со службой на указанном компьютере.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.ServiceProcess.ServiceController.GetServices%2A> Возвращает только службы драйверов, не относящиеся к устройствам и служб, которые не являются драйверами устройств с указанного компьютера. Чтобы получить службы драйверов устройств, вызовите <xref:System.ServiceProcess.ServiceController.GetDevices%2A> метод. Вместе эти два метода обеспечивают доступ ко всем службам на компьютере.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ComponentModel.Win32Exception">Произошла ошибка при обращении к API-интерфейсу системы.</exception>
        <exception cref="T:System.ArgumentException">Синтаксис параметра <paramref name="machineName" /> недопустим.</exception>
        <altmember cref="M:System.ServiceProcess.ServiceController.GetDevices" />
      </Docs>
    </Member>
    <Member MemberName="MachineName">
      <MemberSignature Language="C#" Value="public string MachineName { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string MachineName" />
      <MemberSignature Language="DocId" Value="P:System.ServiceProcess.ServiceController.MachineName" />
      <MemberSignature Language="VB.NET" Value="Public Property MachineName As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ MachineName { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceProcess.ServiceController</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.ServiceProcess</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(".")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.SettingsBindable(true)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ServiceProcess.ServiceProcessDescription("SPMachineName")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Получает или задает имя компьютера, на котором находится данная служба.</summary>
        <value>Имя компьютера, на котором работает служба, связанная с данным экземпляром <see cref="T:System.ServiceProcess.ServiceController" />. Значение по умолчанию — локальный компьютер (".").</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Имя компьютера является имя сервера, на котором выполняется данная служба, без предшествующих знаков обратной косой черты (\\\\).  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">Неправильный синтаксис параметра <see cref="P:System.ServiceProcess.ServiceController.MachineName" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="Pause">
      <MemberSignature Language="C#" Value="public void Pause ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Pause() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ServiceProcess.ServiceController.Pause" />
      <MemberSignature Language="VB.NET" Value="Public Sub Pause ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Pause();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceProcess.ServiceController</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.ServiceProcess</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Приостанавливает работу службы.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Не удается вызвать <xref:System.ServiceProcess.ServiceController.Continue%2A> для службы, пока состояние контроллера службы — `Paused`.  
  
   
  
## Examples  
 В следующем примере показано использование <xref:System.ServiceProcess.ServiceController.Pause%2A> метод, чтобы приостановить службу. Данный пример является частью большего примера, приведенного для <xref:System.ServiceProcess.ServiceController> класса.  
  
 [!code-csharp[ServiceControllerClass#4](~/samples/snippets/csharp/VS_Snippets_CLR/ServiceControllerClass/CS/program.cs#4)]
 [!code-vb[ServiceControllerClass#4](~/samples/snippets/visualbasic/VS_Snippets_CLR/ServiceControllerClass/VB/program.vb#4)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ComponentModel.Win32Exception">Произошла ошибка при обращении к API-интерфейсу системы.</exception>
        <exception cref="T:System.InvalidOperationException">Служба не была найдена.</exception>
        <permission cref="T:System.ServiceProcess.ServiceControllerPermission">для управления службами на компьютере. Связанное перечисление: <see cref="F:System.ServiceProcess.ServiceControllerPermissionAccess.Control" /></permission>
        <permission cref="T:System.Security.Permissions.SecurityPermission">для неограниченного доступа к данным службы. Связанное перечисление: <see cref="F:System.Security.Permissions.PermissionState.Unrestricted" /></permission>
        <altmember cref="P:System.ServiceProcess.ServiceController.CanPauseAndContinue" />
        <altmember cref="M:System.ServiceProcess.ServiceController.Continue" />
        <altmember cref="P:System.ServiceProcess.ServiceController.Status" />
      </Docs>
    </Member>
    <Member MemberName="Refresh">
      <MemberSignature Language="C#" Value="public void Refresh ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Refresh() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ServiceProcess.ServiceController.Refresh" />
      <MemberSignature Language="VB.NET" Value="Public Sub Refresh ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Refresh();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceProcess.ServiceController</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.ServiceProcess</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Обновляет значения свойств текущими значениями.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.ServiceProcess.ServiceController.Refresh%2A> Метода заставляет <xref:System.ServiceProcess.ServiceController.ServicesDependedOn%2A>, <xref:System.ServiceProcess.ServiceController.DependentServices%2A>, и <xref:System.ServiceProcess.ServiceController.Status%2A> свойства нужно сбросить в их текущие значения, если далее ссылаются.  
  
   
  
## Examples  
 В следующем примере показано использование <xref:System.ServiceProcess.ServiceController.Refresh%2A> метод, чтобы получить состояние службы. Код указывает службе приостановить, а затем ожидает состояния в соответствии с изменениями. Данный пример является частью большего примера, приведенного для <xref:System.ServiceProcess.ServiceController> класса.  
  
 [!code-csharp[ServiceControllerClass#4](~/samples/snippets/csharp/VS_Snippets_CLR/ServiceControllerClass/CS/program.cs#4)]
 [!code-vb[ServiceControllerClass#4](~/samples/snippets/visualbasic/VS_Snippets_CLR/ServiceControllerClass/VB/program.vb#4)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ServiceHandle">
      <MemberSignature Language="C#" Value="public System.Runtime.InteropServices.SafeHandle ServiceHandle { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Runtime.InteropServices.SafeHandle ServiceHandle" />
      <MemberSignature Language="DocId" Value="P:System.ServiceProcess.ServiceController.ServiceHandle" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property ServiceHandle As SafeHandle" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Runtime::InteropServices::SafeHandle ^ ServiceHandle { System::Runtime::InteropServices::SafeHandle ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceProcess.ServiceController</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.ServiceProcess</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Runtime.InteropServices.SafeHandle</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Получает дескриптор службы.</summary>
        <value>Свойство <see cref="T:System.Runtime.InteropServices.SafeHandle" />, содержащее дескриптор для службы.</value>
        <remarks>To be added.</remarks>
        <exception cref="T:System.InvalidOperationException">Служба не была найдена.</exception>
        <permission cref="T:System.Security.Permissions.SecurityPermission">для доступа к неуправляемому коду. Связанное перечисление: <see cref="F:System.Security.Permissions.SecurityPermissionFlag.UnmanagedCode" />.</permission>
      </Docs>
    </Member>
    <Member MemberName="ServiceName">
      <MemberSignature Language="C#" Value="public string ServiceName { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string ServiceName" />
      <MemberSignature Language="DocId" Value="P:System.ServiceProcess.ServiceController.ServiceName" />
      <MemberSignature Language="VB.NET" Value="Public Property ServiceName As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ ServiceName { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceProcess.ServiceController</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.ServiceProcess</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue("")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.ReadOnly(true)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.SettingsBindable(true)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.TypeConverter(typeof(System.ServiceProcess.Design.ServiceNameConverter))</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ServiceProcess.ServiceProcessDescription("SPServiceName")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Получает или задает имя, определяющее службу, на которую ссылается данный экземпляр.</summary>
        <value>Имя, определяющее службу, на которую ссылается данный экземпляр <see cref="T:System.ServiceProcess.ServiceController" />. Значение по умолчанию — пустая строка ("").</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.ServiceProcess.ServiceController.ServiceName%2A> Идентифицирует службу к диспетчеру управления службами. Изменение этого свойства вызывает <xref:System.ServiceProcess.ServiceController> экземпляр для привязки к другой службе, не изменяет отображает оснастку Microsoft Management Console какие диспетчера служб.  
  
 При реализации пользовательской службы, значение этого свойства должно быть идентично имени службы в <xref:System.ServiceProcess.ServiceInstaller.ServiceName%2A> свойства соответствующего элемента <xref:System.ServiceProcess.ServiceInstaller> класса. В коде <xref:System.ServiceProcess.ServiceController.ServiceName%2A> обычно задается в `main()` функция исполняемого файла.  
  
 При сбросе <xref:System.ServiceProcess.ServiceController.ServiceName%2A> свойство, метод, который задает свойство устанавливает этот экземпляр <xref:System.ServiceProcess.ServiceController.DisplayName%2A> на пустую строку (»»).  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">Значение параметра <see cref="P:System.ServiceProcess.ServiceController.ServiceName" /> — <see langword="null" />.</exception>
        <exception cref="T:System.ArgumentException">Неправильный синтаксис свойства <see cref="P:System.ServiceProcess.ServiceController.ServiceName" />.</exception>
        <exception cref="T:System.InvalidOperationException">Служба не была найдена.</exception>
      </Docs>
    </Member>
    <Member MemberName="ServicesDependedOn">
      <MemberSignature Language="C#" Value="public System.ServiceProcess.ServiceController[] ServicesDependedOn { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.ServiceProcess.ServiceController[] ServicesDependedOn" />
      <MemberSignature Language="DocId" Value="P:System.ServiceProcess.ServiceController.ServicesDependedOn" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property ServicesDependedOn As ServiceController()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property cli::array &lt;System::ServiceProcess::ServiceController ^&gt; ^ ServicesDependedOn { cli::array &lt;System::ServiceProcess::ServiceController ^&gt; ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceProcess.ServiceController</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.ServiceProcess</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ServiceProcess.ServiceProcessDescription("SPServicesDependedOn")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.ServiceProcess.ServiceController[]</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Набор служб, от которых зависит данная служба.</summary>
        <value>Массив экземпляров <see cref="T:System.ServiceProcess.ServiceController" />, каждый из которых связан со службой, которая должна быть запущена для запуска данной службы.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Если хотя бы одна служба в <xref:System.ServiceProcess.ServiceController.ServicesDependedOn%2A> массива не запущена, вы не сможете запустить эту службу.  
  
   
  
## Examples  
 В следующем примере используется <xref:System.ServiceProcess.ServiceController> класса для отображения набор служб, в которых зависит служба сообщений.  
  
 [!code-cpp[ServiceController#4](~/samples/snippets/cpp/VS_Snippets_CLR/ServiceController/CPP/servicecontroller.cpp#4)]
 [!code-csharp[ServiceController#4](~/samples/snippets/csharp/VS_Snippets_CLR/ServiceController/CS/servicecontroller.cs#4)]
 [!code-vb[ServiceController#4](~/samples/snippets/visualbasic/VS_Snippets_CLR/ServiceController/VB/servicecontroller.vb#4)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ComponentModel.Win32Exception">Произошла ошибка при обращении к API-интерфейсу системы.</exception>
        <exception cref="T:System.InvalidOperationException">Служба не была найдена.</exception>
        <permission cref="T:System.ServiceProcess.ServiceControllerPermission">для подключения к существующим службам на компьютере. Связанное перечисление: <see cref="F:System.ServiceProcess.ServiceControllerPermissionAccess.Browse" /></permission>
      </Docs>
    </Member>
    <Member MemberName="ServiceType">
      <MemberSignature Language="C#" Value="public System.ServiceProcess.ServiceType ServiceType { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.ServiceProcess.ServiceType ServiceType" />
      <MemberSignature Language="DocId" Value="P:System.ServiceProcess.ServiceController.ServiceType" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property ServiceType As ServiceType" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::ServiceProcess::ServiceType ServiceType { System::ServiceProcess::ServiceType get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceProcess.ServiceController</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.ServiceProcess</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ServiceProcess.ServiceProcessDescription("SPServiceType")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.ServiceProcess.ServiceType</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Получает тип службы, на которую ссылается данный объект.</summary>
        <value>Одно из значений <see cref="T:System.ServiceProcess.ServiceType" />, используемое для определения типа сетевой службы.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Тип службы определяет, как службы используется системой. Значение <xref:System.ServiceProcess.ServiceController.ServiceType%2A> свойство представляет набор флагов, связанных с помощью оператора побитового или.  
  
   
  
## Examples  
 В следующем примере используется <xref:System.ServiceProcess.ServiceController> для отображения службы драйверов устройств на локальном компьютере.  
  
 [!code-cpp[ServiceController#5](~/samples/snippets/cpp/VS_Snippets_CLR/ServiceController/CPP/servicecontroller.cpp#5)]
 [!code-csharp[ServiceController#5](~/samples/snippets/csharp/VS_Snippets_CLR/ServiceController/CS/servicecontroller.cs#5)]
 [!code-vb[ServiceController#5](~/samples/snippets/visualbasic/VS_Snippets_CLR/ServiceController/VB/servicecontroller.vb#5)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ComponentModel.Win32Exception">Произошла ошибка при обращении к API-интерфейсу системы.</exception>
        <exception cref="T:System.InvalidOperationException">Служба не была найдена.</exception>
        <altmember cref="T:System.ServiceProcess.ServiceType" />
      </Docs>
    </Member>
    <MemberGroup MemberName="Start">
      <AssemblyInfo>
        <AssemblyName>System.ServiceProcess.ServiceController</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Запускает службу.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Start">
      <MemberSignature Language="C#" Value="public void Start ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Start() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ServiceProcess.ServiceController.Start" />
      <MemberSignature Language="VB.NET" Value="Public Sub Start ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Start();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceProcess.ServiceController</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.ServiceProcess</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Запускает службу без передачи аргументов.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Не удается вызвать <xref:System.ServiceProcess.ServiceController.Stop%2A> для службы, пока состояние контроллера службы — `Running`.  
  
   
  
## Examples  
 В следующем примере используется <xref:System.ServiceProcess.ServiceController> класса, чтобы проверить, остановлена ли служба оповещений. Если служба остановлена, в примере используется для запуска службы и ожидает, пока служба имеет состояние <xref:System.ServiceProcess.ServiceControllerStatus.Running>.  
  
 [!code-cpp[ServiceController#1](~/samples/snippets/cpp/VS_Snippets_CLR/ServiceController/CPP/servicecontroller.cpp#1)]
 [!code-csharp[ServiceController#1](~/samples/snippets/csharp/VS_Snippets_CLR/ServiceController/CS/servicecontroller.cs#1)]
 [!code-vb[ServiceController#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/ServiceController/VB/servicecontroller.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ComponentModel.Win32Exception">Произошла ошибка при обращении к API-интерфейсу системы.</exception>
        <exception cref="T:System.InvalidOperationException">Служба не была найдена.</exception>
        <permission cref="T:System.ServiceProcess.ServiceControllerPermission">для управления службами на компьютере. Связанное перечисление: <see cref="F:System.ServiceProcess.ServiceControllerPermissionAccess.Control" /></permission>
        <permission cref="T:System.Security.Permissions.SecurityPermission">для неограниченного доступа к данным службы. Связанное перечисление: <see cref="F:System.Security.Permissions.PermissionState.Unrestricted" /></permission>
        <altmember cref="M:System.ServiceProcess.ServiceController.Stop" />
        <altmember cref="P:System.ServiceProcess.ServiceController.Status" />
      </Docs>
    </Member>
    <Member MemberName="Start">
      <MemberSignature Language="C#" Value="public void Start (string[] args);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Start(string[] args) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ServiceProcess.ServiceController.Start(System.String[])" />
      <MemberSignature Language="VB.NET" Value="Public Sub Start (args As String())" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Start(cli::array &lt;System::String ^&gt; ^ args);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceProcess.ServiceController</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.ServiceProcess</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="args" Type="System.String[]" />
      </Parameters>
      <Docs>
        <param name="args">Массив аргументов для передачи в службу при ее запуске.</param>
        <summary>Запускает службу, передавая заданные аргументы.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Не удается вызвать <xref:System.ServiceProcess.ServiceController.Stop%2A> для службы, пока состояние контроллера службы — `Running`.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ComponentModel.Win32Exception">Произошла ошибка при обращении к API-интерфейсу системы.</exception>
        <exception cref="T:System.InvalidOperationException">Служба запускаться не будет.</exception>
        <exception cref="T:System.ArgumentNullException">
          Свойство <paramref name="args" /> имеет значение <see langword="null" />.  
  
 - или -  
  
 Элемент массива — <see langword="null" />.</exception>
        <permission cref="T:System.ServiceProcess.ServiceControllerPermission">для управления службами на компьютере. Связанное перечисление: <see cref="F:System.ServiceProcess.ServiceControllerPermissionAccess.Control" /></permission>
        <permission cref="T:System.Security.Permissions.SecurityPermission">для неограниченного доступа к данным службы. Связанное перечисление: <see cref="F:System.Security.Permissions.PermissionState.Unrestricted" /></permission>
        <altmember cref="M:System.ServiceProcess.ServiceController.Stop" />
        <altmember cref="P:System.ServiceProcess.ServiceController.Status" />
      </Docs>
    </Member>
    <Member MemberName="StartType">
      <MemberSignature Language="C#" Value="public System.ServiceProcess.ServiceStartMode StartType { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.ServiceProcess.ServiceStartMode StartType" />
      <MemberSignature Language="DocId" Value="P:System.ServiceProcess.ServiceController.StartType" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property StartType As ServiceStartMode" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::ServiceProcess::ServiceStartMode StartType { System::ServiceProcess::ServiceStartMode get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceProcess.ServiceController</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.ServiceProcess</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ServiceProcess.ServiceProcessDescription("SPStartType")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.ServiceProcess.ServiceStartMode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Возвращает значение, указывающее способ запуска службы, представленной объектом <see cref="T:System.ServiceProcess.ServiceController" />.</summary>
        <value>Значение, указывающее способ запуска службы.</value>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ComponentModel.Win32Exception">Произошла ошибка при обращении к API-интерфейсу системы.</exception>
        <permission cref="T:System.ServiceProcess.ServiceControllerPermission">для просмотра служб на компьютере. Связанное перечисление: <see cref="F:System.ServiceProcess.ServiceControllerPermissionAccess.Browse" />.</permission>
        <altmember cref="T:System.ServiceProcess.ServiceStartMode" />
      </Docs>
    </Member>
    <Member MemberName="Status">
      <MemberSignature Language="C#" Value="public System.ServiceProcess.ServiceControllerStatus Status { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.ServiceProcess.ServiceControllerStatus Status" />
      <MemberSignature Language="DocId" Value="P:System.ServiceProcess.ServiceController.Status" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Status As ServiceControllerStatus" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::ServiceProcess::ServiceControllerStatus Status { System::ServiceProcess::ServiceControllerStatus get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceProcess.ServiceController</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.ServiceProcess</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ServiceProcess.ServiceProcessDescription("SPStatus")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.ServiceProcess.ServiceControllerStatus</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Получает состояние службы, на которую ссылается данный объект.</summary>
        <value>Одно из значений <see cref="T:System.ServiceProcess.ServiceControllerStatus" />, определяющее состояние службы: запущена ли она, остановлена, приостановлена, а также ожидаются ли команды запуска, останова, паузы или возобновления работы службы.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Состояние указывает текущее состояние службы. Набор возможных значений включает несколько, которые указывают, ожидает ли изменение состояния команды.  
  
   
  
## Examples  
 В следующем примере используется <xref:System.ServiceProcess.ServiceController> класс, чтобы проверить текущее состояние службы Telnet. Если служба остановлена, в примере запускается служба. Если служба запущена, она останавливается служба.  
  
 [!code-cpp[ServiceController#2](~/samples/snippets/cpp/VS_Snippets_CLR/ServiceController/CPP/servicecontroller.cpp#2)]
 [!code-csharp[ServiceController#2](~/samples/snippets/csharp/VS_Snippets_CLR/ServiceController/CS/servicecontroller.cs#2)]
 [!code-vb[ServiceController#2](~/samples/snippets/visualbasic/VS_Snippets_CLR/ServiceController/VB/servicecontroller.vb#2)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ComponentModel.Win32Exception">Произошла ошибка при обращении к API-интерфейсу системы.</exception>
        <exception cref="T:System.InvalidOperationException">Служба не была найдена.</exception>
      </Docs>
    </Member>
    <Member MemberName="Stop">
      <MemberSignature Language="C#" Value="public void Stop ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Stop() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ServiceProcess.ServiceController.Stop" />
      <MemberSignature Language="VB.NET" Value="Public Sub Stop ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Stop();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceProcess.ServiceController</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.ServiceProcess</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Останавливает данную службу и все зависящие от нее службы.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Если все службы зависят от этой службы ее работы, они будут остановлены до остановки этой службы. <xref:System.ServiceProcess.ServiceController.DependentServices%2A> Свойство содержит набор служб, зависящих от данного объекта.  
  
 Если остановить службу, которая зависит от этой службы, вызовите <xref:System.ServiceProcess.ServiceController.Stop%2A> метод в этой службе в течение <xref:System.ServiceProcess.ServiceController.Stop%2A> метод родительской службы. <xref:System.ServiceProcess.ServiceController.ServicesDependedOn%2A> Свойство содержит службы, от которых зависит данная служба.  
  
   
  
## Examples  
 В следующем примере используется <xref:System.ServiceProcess.ServiceController> класс, чтобы проверить текущее состояние службы Telnet. Если служба остановлена, в примере запускается служба. Если служба запущена, она останавливается служба.  
  
 [!code-cpp[ServiceController#2](~/samples/snippets/cpp/VS_Snippets_CLR/ServiceController/CPP/servicecontroller.cpp#2)]
 [!code-csharp[ServiceController#2](~/samples/snippets/csharp/VS_Snippets_CLR/ServiceController/CS/servicecontroller.cs#2)]
 [!code-vb[ServiceController#2](~/samples/snippets/visualbasic/VS_Snippets_CLR/ServiceController/VB/servicecontroller.vb#2)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ComponentModel.Win32Exception">Произошла ошибка при обращении к API-интерфейсу системы.</exception>
        <exception cref="T:System.InvalidOperationException">Служба не была найдена.</exception>
        <permission cref="T:System.ServiceProcess.ServiceControllerPermission">для управления службами на компьютере. Связанное перечисление: <see cref="F:System.ServiceProcess.ServiceControllerPermissionAccess.Control" /></permission>
        <permission cref="T:System.Security.Permissions.SecurityPermission">для неограниченного доступа к данным службы. Связанное перечисление: <see cref="F:System.Security.Permissions.PermissionState.Unrestricted" /></permission>
        <altmember cref="P:System.ServiceProcess.ServiceController.CanStop" />
        <altmember cref="M:System.ServiceProcess.ServiceController.Start" />
        <altmember cref="P:System.ServiceProcess.ServiceController.Status" />
      </Docs>
    </Member>
    <MemberGroup MemberName="WaitForStatus">
      <AssemblyInfo>
        <AssemblyName>System.ServiceProcess.ServiceController</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Ожидает достижения службой указанного состояния.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="WaitForStatus">
      <MemberSignature Language="C#" Value="public void WaitForStatus (System.ServiceProcess.ServiceControllerStatus desiredStatus);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WaitForStatus(valuetype System.ServiceProcess.ServiceControllerStatus desiredStatus) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ServiceProcess.ServiceController.WaitForStatus(System.ServiceProcess.ServiceControllerStatus)" />
      <MemberSignature Language="VB.NET" Value="Public Sub WaitForStatus (desiredStatus As ServiceControllerStatus)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void WaitForStatus(System::ServiceProcess::ServiceControllerStatus desiredStatus);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceProcess.ServiceController</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.ServiceProcess</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="desiredStatus" Type="System.ServiceProcess.ServiceControllerStatus" />
      </Parameters>
      <Docs>
        <param name="desiredStatus">Ожидаемое состояние.</param>
        <summary>Постоянно ожидает достижения службой указанного состояния.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Используйте <xref:System.ServiceProcess.ServiceController.WaitForStatus%2A> приостановить приложение обработки пока служба достигнет требуемого состояния.  
  
> [!NOTE]
>  <xref:System.ServiceProcess.ServiceController.WaitForStatus%2A> Метод ожидает в течение приблизительно 250 миллисекунд, прошедших проверку каждого состояния.  <xref:System.ServiceProcess.ServiceController.WaitForStatus%2A> не удается обнаружить регистр наблюдаемое изменение для службы `desiredStatus` и затем перейти на другое состояние в течение этого периода.  
  
   
  
## Examples  
 В следующем примере используется <xref:System.ServiceProcess.ServiceController> класса, чтобы проверить, остановлена ли служба оповещений. Если служба остановлена, в примере используется для запуска службы и ожидает, пока служба имеет состояние <xref:System.ServiceProcess.ServiceControllerStatus.Running>.  
  
 [!code-cpp[ServiceController#1](~/samples/snippets/cpp/VS_Snippets_CLR/ServiceController/CPP/servicecontroller.cpp#1)]
 [!code-csharp[ServiceController#1](~/samples/snippets/csharp/VS_Snippets_CLR/ServiceController/CS/servicecontroller.cs#1)]
 [!code-vb[ServiceController#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/ServiceController/VB/servicecontroller.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ComponentModel.InvalidEnumArgumentException">Параметр <paramref name="desiredStatus" /> не соответствует ни одному из значений, определенных в перечислении <see cref="T:System.ServiceProcess.ServiceControllerStatus" />.</exception>
        <altmember cref="P:System.ServiceProcess.ServiceController.Status" />
      </Docs>
    </Member>
    <Member MemberName="WaitForStatus">
      <MemberSignature Language="C#" Value="public void WaitForStatus (System.ServiceProcess.ServiceControllerStatus desiredStatus, TimeSpan timeout);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WaitForStatus(valuetype System.ServiceProcess.ServiceControllerStatus desiredStatus, valuetype System.TimeSpan timeout) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ServiceProcess.ServiceController.WaitForStatus(System.ServiceProcess.ServiceControllerStatus,System.TimeSpan)" />
      <MemberSignature Language="VB.NET" Value="Public Sub WaitForStatus (desiredStatus As ServiceControllerStatus, timeout As TimeSpan)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void WaitForStatus(System::ServiceProcess::ServiceControllerStatus desiredStatus, TimeSpan timeout);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceProcess.ServiceController</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.ServiceProcess</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="desiredStatus" Type="System.ServiceProcess.ServiceControllerStatus" />
        <Parameter Name="timeout" Type="System.TimeSpan" />
      </Parameters>
      <Docs>
        <param name="desiredStatus">Ожидаемое состояние.</param>
        <param name="timeout">Объект <see cref="T:System.TimeSpan" />, определяющий временной интервал, в течение которого ожидается достижение службой заданного состояния.</param>
        <summary>Ожидает достижения службой заданного состояния или истечения заданного тайм-аута.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Используйте <xref:System.ServiceProcess.ServiceController.WaitForStatus%2A> приостановить приложение обработки пока служба достигнет требуемого состояния.  
  
> [!NOTE]
>  <xref:System.ServiceProcess.ServiceController.WaitForStatus%2A> Метод ожидает в течение приблизительно 250 миллисекунд, прошедших проверку каждого состояния.  <xref:System.ServiceProcess.ServiceController.WaitForStatus%2A> не удается обнаружить регистр наблюдаемое изменение для службы `desiredStatus` и затем перейти на другое состояние в течение этого периода.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ComponentModel.InvalidEnumArgumentException">Параметр <paramref name="desiredStatus" /> не соответствует ни одному из значений, определенных в перечислении <see cref="T:System.ServiceProcess.ServiceControllerStatus" />.</exception>
        <exception cref="T:System.ServiceProcess.TimeoutException">Срок действия значения, указанного для параметра <paramref name="timeout" />, истекает.</exception>
        <altmember cref="P:System.ServiceProcess.ServiceController.Status" />
      </Docs>
    </Member>
  </Members>
</Type>