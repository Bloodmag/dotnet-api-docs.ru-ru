<Type Name="ServiceProcessInstaller" FullName="System.ServiceProcess.ServiceProcessInstaller">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="79299cc2f8fd9772fbb8c8961ba6f8b4705dbc5a" />
    <Meta Name="ms.sourcegitcommit" Value="d31dc2ede16f6f7bc64e90d9f897ff54c4e3869b" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="ru-RU" />
    <Meta Name="ms.lasthandoff" Value="04/03/2018" />
    <Meta Name="ms.locfileid" Value="30529838" />
  </Metadata>
  <TypeSignature Language="C#" Value="public class ServiceProcessInstaller : System.Configuration.Install.ComponentInstaller" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit ServiceProcessInstaller extends System.Configuration.Install.ComponentInstaller" />
  <TypeSignature Language="DocId" Value="T:System.ServiceProcess.ServiceProcessInstaller" />
  <TypeSignature Language="VB.NET" Value="Public Class ServiceProcessInstaller&#xA;Inherits ComponentInstaller" />
  <TypeSignature Language="C++ CLI" Value="public ref class ServiceProcessInstaller : System::Configuration::Install::ComponentInstaller" />
  <AssemblyInfo>
    <AssemblyName>System.ServiceProcess</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Configuration.Install.ComponentInstaller</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>Устанавливает классы, содержащие исполняемый файл, которые расширяют класс <see cref="T:System.ServiceProcess.ServiceBase" />. Этот класс вызывается программами установки, например InstallUtil.exe, при установке служебного приложения.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.ServiceProcess.ServiceProcessInstaller> Работы общие для всех служб в исполняемом файле. Используется программой установки для записи значений реестра, связанные со службами, которые вы хотите установить.  
  
 Чтобы установить службу, создайте класс установщика проектов, наследуемый от <xref:System.Configuration.Install.Installer>и задайте <xref:System.ComponentModel.RunInstallerAttribute> класса в `true`. В рамках проекта, создавать один <xref:System.ServiceProcess.ServiceProcessInstaller> экземпляра для каждого приложения службы и один <xref:System.ServiceProcess.ServiceInstaller> экземпляра для каждой службы в приложении. Наконец, добавьте <xref:System.ServiceProcess.ServiceProcessInstaller> экземпляра и <xref:System.ServiceProcess.ServiceInstaller> экземпляры в проект класс установщика.  
  
 При запуске InstallUtil.exe программа ищет классы в сборке службы с <xref:System.ComponentModel.RunInstallerAttribute> значение `true`. Добавление классов в сборку службы, добавив их в <xref:System.Configuration.Install.Installer.Installers%2A> коллекцию, связанную с установщиком проектов. Если <xref:System.ComponentModel.RunInstallerAttribute> — `false`, программа установки игнорирует установщик проекта.  
  
 Для экземпляра <xref:System.ServiceProcess.ServiceProcessInstaller>, включают свойства можно изменить, указав, что приложение службы будет выполняться под учетной записью, кроме пользователя, выполнившего вход. Можно указать определенный <xref:System.ServiceProcess.ServiceProcessInstaller.Username%2A> и <xref:System.ServiceProcess.ServiceProcessInstaller.Password%2A> пару, с которой должна запускаться служба, или можно использовать <xref:System.ServiceProcess.ServiceProcessInstaller.Account%2A> для указания запуска службы под системной учетной записи компьютера, локальный или учетная запись сетевой службы или учетной записи пользователя.  
  
> [!NOTE]
>  Системная учетная запись компьютера не совпадает с учетной записи администратора.  
  
 Как правило, не следует вызывать методы на <xref:System.ServiceProcess.ServiceInstaller> вашей программы; они обычно вызываются только программой установки. Вызывается автоматически <xref:System.ServiceProcess.ServiceProcessInstaller.Install%2A?displayProperty=nameWithType> и <xref:System.ServiceProcess.ServiceInstaller.Install%2A?displayProperty=nameWithType> методов во время установки. При необходимости он обрабатывает сбои, вызывая <xref:System.ServiceProcess.ServiceProcessInstaller.Rollback%2A> (или <xref:System.ServiceProcess.ServiceInstaller.Rollback%2A?displayProperty=nameWithType>) для всех ранее установленных компонентов.  
  
 Программа установки приложения автоматического сохранения сведений об уже установленных компонентах, с помощью установщика проекта <xref:System.Configuration.Install.Installer.Context%2A?displayProperty=nameWithType>. Эти сведения постоянно обновляются при <xref:System.ServiceProcess.ServiceProcessInstaller> экземпляр и каждый <xref:System.ServiceProcess.ServiceInstaller> установлен экземпляр служебной программой. Обычно нет необходимости явно изменять сведения о состоянии в коде.  
  
 При создании экземпляра <xref:System.ServiceProcess.ServiceProcessInstaller> вызывает конструктор базового класса, <xref:System.Configuration.Install.ComponentInstaller.%23ctor%2A>вызывать.  
  
   
  
## Examples  
 В следующем примере создается установщик проектов MyProjectInstaller, который наследует от <xref:System.Configuration.Install.Installer>. Предполагается есть исполняемого файла, содержащего две службы «Hello World служба 1» и «Hello World службы 2». В конструкторе для MyProjectInstaller (может быть вызвана программой установки) <xref:System.ServiceProcess.ServiceInstaller> объекты создаются для каждой службы и <xref:System.ServiceProcess.ServiceProcessInstaller> создается для исполняемого файла. Для программы установки распознать как допустимый установщик MyProjectInstaller <xref:System.ComponentModel.RunInstallerAttribute> атрибута задано значение `true`.  
  
 Дополнительные свойства задаются на процессов и установщиков служб до их добавления к <xref:System.Configuration.Install.Installer.Installers%2A> коллекции. При обращении программы установки к MyProjectInstaller объекты, добавляемые к <xref:System.Configuration.Install.Installer.Installers%2A> коллекции посредством вызова <xref:System.Configuration.Install.InstallerCollection.Add%2A?displayProperty=nameWithType> будет установлен в свою очередь. В процессе установщик сохраняются сведения о состоянии объектов, которые будут установлены, чтобы каждый объект может быть аннулированы в свою очередь в случае сбоя установки.  
  
 Как правило класс установщика проектов не создается явным образом. Может создать его и добавить <xref:System.ComponentModel.RunInstallerAttribute>, но фактически вызывает служебную программу установки и, соответственно, класс.  
  
 [!code-cpp[Classic ServiceInstaller Example#1](~/samples/snippets/cpp/VS_Snippets_CLR_Classic/classic ServiceInstaller Example/CPP/source.cpp#1)]
 [!code-csharp[Classic ServiceInstaller Example#1](~/samples/snippets/csharp/VS_Snippets_CLR_Classic/classic ServiceInstaller Example/CS/source.cs#1)]
 [!code-vb[Classic ServiceInstaller Example#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_Classic/classic ServiceInstaller Example/VB/source.vb#1)]  
  
 ]]></format>
    </remarks>
    <altmember cref="T:System.ServiceProcess.ServiceInstaller" />
    <altmember cref="T:System.ServiceProcess.ServiceBase" />
    <altmember cref="T:System.Configuration.Install.ComponentInstaller" />
    <altmember cref="P:System.Configuration.Install.Installer.Installers" />
    <altmember cref="T:System.ServiceProcess.ServiceAccount" />
    <altmember cref="T:System.ServiceProcess.Design.ServiceInstallerDialog" />
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public ServiceProcessInstaller ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ServiceProcess.ServiceProcessInstaller.#ctor" />
      <MemberSignature Language="VB.NET" Value="Public Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; ServiceProcessInstaller();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceProcess</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary>Создает новый экземпляр класса <see cref="T:System.ServiceProcess.ServiceProcessInstaller" />.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Account">
      <MemberSignature Language="C#" Value="public System.ServiceProcess.ServiceAccount Account { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.ServiceProcess.ServiceAccount Account" />
      <MemberSignature Language="DocId" Value="P:System.ServiceProcess.ServiceProcessInstaller.Account" />
      <MemberSignature Language="VB.NET" Value="Public Property Account As ServiceAccount" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::ServiceProcess::ServiceAccount Account { System::ServiceProcess::ServiceAccount get(); void set(System::ServiceProcess::ServiceAccount value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceProcess</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(Mono.Cecil.CustomAttributeArgument)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ServiceProcess.ServiceProcessDescription("ServiceProcessInstallerAccount")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.ServiceProcess.ServiceAccount</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Получает или задает тип учетной записи, под управлением которой должно запускаться данное служебное приложение.</summary>
        <value>Объект <see cref="T:System.ServiceProcess.ServiceAccount" />, определяющий тип учетной записи, под управлением которой система запускает данную службу. Значение по умолчанию: <see langword="User" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Когда <xref:System.ServiceProcess.ServiceProcessInstaller.Account%2A> свойство `User`, <xref:System.ServiceProcess.ServiceProcessInstaller.Username%2A> и <xref:System.ServiceProcess.ServiceProcessInstaller.Password%2A> свойства используются для определения учетной записи, под которой запускается приложение службы.  
  
 <xref:System.ServiceProcess.ServiceProcessInstaller.Username%2A> И <xref:System.ServiceProcess.ServiceProcessInstaller.Password%2A> пары позволяет службе для запуска под учетной записью, отличной от учетной записи system. Например, это позволяет службе запускаться автоматически при перезагрузке, когда пользователь не вошел в систему. Если оставить либо <xref:System.ServiceProcess.ServiceProcessInstaller.Username%2A> или <xref:System.ServiceProcess.ServiceProcessInstaller.Password%2A> пустым и задайте <xref:System.ServiceProcess.ServiceProcessInstaller.Account%2A> для `User`, вам необходимо ввести допустимое имя пользователя и пароль во время установки.  
  
 Можно также указать, что служба запускается под учетной записью локальной системы, или в качестве локальной или сетевой службы. В разделе <xref:System.ServiceProcess.ServiceAccount> перечисления подробные сведения о типах учетных записей.  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.ServiceProcess.ServiceProcessInstaller.Username" />
        <altmember cref="P:System.ServiceProcess.ServiceProcessInstaller.Password" />
        <altmember cref="T:System.ServiceProcess.ServiceAccount" />
        <altmember cref="T:System.ServiceProcess.Design.ServiceInstallerDialog" />
      </Docs>
    </Member>
    <Member MemberName="CopyFromComponent">
      <MemberSignature Language="C#" Value="public override void CopyFromComponent (System.ComponentModel.IComponent comp);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance void CopyFromComponent(class System.ComponentModel.IComponent comp) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ServiceProcess.ServiceProcessInstaller.CopyFromComponent(System.ComponentModel.IComponent)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Sub CopyFromComponent (comp As IComponent)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override void CopyFromComponent(System::ComponentModel::IComponent ^ comp);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceProcess</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="comp" Type="System.ComponentModel.IComponent" />
      </Parameters>
      <Docs>
        <param name="comp">Объект <see cref="T:System.ComponentModel.IComponent" />, представляющий процесс службы.</param>
        <summary>Реализует метод <see cref="M:System.Configuration.Install.ComponentInstaller.CopyFromComponent(System.ComponentModel.IComponent)" /> базового класса без поведения, определяемого классом <see cref="T:System.ServiceProcess.ServiceProcessInstaller" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Этот метод не должен вызываться из кода. Метод базового класса для <xref:System.Configuration.Install.ComponentInstaller> — `abstract`, поэтому здесь реализован в производном классе. Однако не <xref:System.ServiceProcess.ServiceProcessInstaller> обработки в реализации метода данного класса.  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.ServiceProcess.ServiceProcessInstaller.Install(System.Collections.IDictionary)" />
        <altmember cref="M:System.ServiceProcess.ServiceProcessInstaller.Rollback(System.Collections.IDictionary)" />
      </Docs>
    </Member>
    <Member MemberName="HelpText">
      <MemberSignature Language="C#" Value="public override string HelpText { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string HelpText" />
      <MemberSignature Language="DocId" Value="P:System.ServiceProcess.ServiceProcessInstaller.HelpText" />
      <MemberSignature Language="VB.NET" Value="Public Overrides ReadOnly Property HelpText As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property System::String ^ HelpText { System::String ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceProcess</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Получает текст справки для параметров установки службы.</summary>
        <value>Текст справки, содержащий описание действий по заданию имени пользователя и пароля для запуска службы под управлением определенной учетной записи.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Этот текст справки может использоваться при запуске службы вручную. Он указывается, как ввести имя и пароль пользователя.  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.ServiceProcess.ServiceProcessInstaller.Username" />
        <altmember cref="P:System.ServiceProcess.ServiceProcessInstaller.Password" />
      </Docs>
    </Member>
    <Member MemberName="Install">
      <MemberSignature Language="C#" Value="public override void Install (System.Collections.IDictionary stateSaver);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance void Install(class System.Collections.IDictionary stateSaver) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ServiceProcess.ServiceProcessInstaller.Install(System.Collections.IDictionary)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Sub Install (stateSaver As IDictionary)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override void Install(System::Collections::IDictionary ^ stateSaver);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceProcess</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="stateSaver" Type="System.Collections.IDictionary" />
      </Parameters>
      <Docs>
        <param name="stateSaver">Объект <see cref="T:System.Collections.IDictionary" />, содержащий контекстные данные, связанные с процессом установки.</param>
        <summary>Записывает в реестр сведения о служебном приложении. Этот метод предназначен для использования инструментами установки, которые автоматически вызывают соответствующие методы.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Как правило, не следует вызывать методы на <xref:System.ServiceProcess.ServiceProcessInstaller> вашей программы; они обычно вызываются только программой установки. Вызывается автоматически <xref:System.ServiceProcess.ServiceProcessInstaller.Install%2A?displayProperty=nameWithType> метод во время установки. При необходимости он обрабатывает сбои, вызывая <xref:System.ServiceProcess.ServiceProcessInstaller.Rollback%2A> для ранее установленных компонентов. Этот метод передает установки базового класса <xref:System.Configuration.Install.Installer.Install%2A?displayProperty=nameWithType> метод.  
  
 Как правило, не будет вызывать методы на <xref:System.ServiceProcess.ServiceInstaller> вашей программы; они обычно вызываются только программой установки. Вызывается автоматически <xref:System.ServiceProcess.ServiceProcessInstaller.Install%2A?displayProperty=nameWithType> и <xref:System.ServiceProcess.ServiceInstaller.Install%2A?displayProperty=nameWithType> методов во время установки. При необходимости он обрабатывает сбои, вызывая <xref:System.ServiceProcess.ServiceProcessInstaller.Rollback%2A> (или <xref:System.ServiceProcess.ServiceInstaller.Rollback%2A?displayProperty=nameWithType>) для всех ранее установленных компонентов  
  
 Программа установки приложения автоматического сохранения сведений об уже установленных компонентах, с помощью установщика проекта <xref:System.Configuration.Install.Installer.Context%2A?displayProperty=nameWithType>. Сведения о состоянии, переданные в <xref:System.ServiceProcess.ServiceProcessInstaller.Install%2A> как `stateSaver` параметра, постоянно обновляются при <xref:System.ServiceProcess.ServiceProcessInstaller> экземпляр и каждый <xref:System.ServiceProcess.ServiceInstaller> установлен экземпляр служебной программой. Обычно нет необходимости явно изменять сведения о состоянии в коде.  
  
 <xref:System.ServiceProcess.ServiceProcessInstaller.Install%2A> передает в метод вызова исключения, вызываемые методы базового класса или <xref:System.Configuration.Install.Installer.BeforeInstall>  /  <xref:System.Configuration.Install.Installer.AfterInstall> обработчики событий.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">Значение параметра <paramref name="stateSaver" /> — <see langword="null" />.</exception>
        <altmember cref="M:System.ServiceProcess.ServiceProcessInstaller.Rollback(System.Collections.IDictionary)" />
        <altmember cref="M:System.Configuration.Install.Installer.Commit(System.Collections.IDictionary)" />
        <altmember cref="M:System.Configuration.Install.Installer.Uninstall(System.Collections.IDictionary)" />
      </Docs>
    </Member>
    <Member MemberName="Password">
      <MemberSignature Language="C#" Value="public string Password { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string Password" />
      <MemberSignature Language="DocId" Value="P:System.ServiceProcess.ServiceProcessInstaller.Password" />
      <MemberSignature Language="VB.NET" Value="Public Property Password As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ Password { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceProcess</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Получает или задает пароль, связанный с учетной записью пользователя, под управлением которой запускается служебное приложение.</summary>
        <value>Пароль, связанный с учетной записью, под управлением которой должна запускаться служба. Значение по умолчанию — пустая строка (""). Это свойство не является общим и не может быть сериализовано.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.ServiceProcess.ServiceProcessInstaller.Password%2A> И <xref:System.ServiceProcess.ServiceProcessInstaller.Username%2A> пары позволяет службе для запуска под учетной записью, отличной от учетной записи system. Например, это позволяет службе запускаться автоматически при перезагрузке, когда пользователь не вошел в систему.  
  
 <xref:System.ServiceProcess.ServiceProcessInstaller.Password%2A> и <xref:System.ServiceProcess.ServiceProcessInstaller.Username%2A> обрабатываются безопасным образом, в том, что они никогда не сериализуются и сохранены в состоянии установки (установщик проекта <xref:System.Configuration.Install.Installer.Context%2A?displayProperty=nameWithType>) или в другое место с помощью общего доступа.  
  
 Установка <xref:System.ServiceProcess.ServiceProcessInstaller.Username%2A> и <xref:System.ServiceProcess.ServiceProcessInstaller.Password%2A> позволяет связывать учетную запись автоматически со службой во время установки. Если оставить либо <xref:System.ServiceProcess.ServiceProcessInstaller.Username%2A> или <xref:System.ServiceProcess.ServiceProcessInstaller.Password%2A> пустым и задайте <xref:System.ServiceProcess.ServiceProcessInstaller.Account%2A> для `User`, вам необходимо ввести допустимое имя пользователя и пароль во время установки.  
  
 Другой вариант для запуска под отдельной учетной записью службы является использование системной учетной записи компьютера. Этой учетной записи, которая отличается от учетной записи администратора, требуется пароль. Системной учетной записи больше прав, чем вошедший в систему пользователя. Служба требует выполнения под учетной записью системы, а не учетной записи пользователя, позволяет избежать проблем, связанных с отсутствием разрешений  
  
 Если <xref:System.ServiceProcess.ServiceProcessInstaller.Account%2A> имеет любое значение, отличное от `User`, используется указанная учетная запись (локальный или сетевой службы или локальной системы), даже если <xref:System.ServiceProcess.ServiceProcessInstaller.Username%2A> и <xref:System.ServiceProcess.ServiceProcessInstaller.Password%2A> заполняются свойства.  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.ServiceProcess.ServiceProcessInstaller.Username" />
        <altmember cref="P:System.ServiceProcess.ServiceProcessInstaller.Account" />
        <altmember cref="T:System.ServiceProcess.Design.ServiceInstallerDialog" />
      </Docs>
    </Member>
    <Member MemberName="Rollback">
      <MemberSignature Language="C#" Value="public override void Rollback (System.Collections.IDictionary savedState);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance void Rollback(class System.Collections.IDictionary savedState) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ServiceProcess.ServiceProcessInstaller.Rollback(System.Collections.IDictionary)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Sub Rollback (savedState As IDictionary)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override void Rollback(System::Collections::IDictionary ^ savedState);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceProcess</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="savedState" Type="System.Collections.IDictionary" />
      </Parameters>
      <Docs>
        <param name="savedState">Объект <see cref="T:System.Collections.IDictionary" />, содержащий контекстные данные, связанные с процессом установки.</param>
        <summary>Отменяет сведения о служебном приложении, записанные в реестр процедурой установки. Этот метод предназначен для использования инструментами установки, которые автоматически обрабатывают соответствующие методы.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Как правило, не следует вызывать методы на <xref:System.ServiceProcess.ServiceProcessInstaller> вашей программы; они обычно вызываются только программой установки. Вызывается автоматически <xref:System.ServiceProcess.ServiceProcessInstaller.Install%2A?displayProperty=nameWithType> метод во время установки. При необходимости он обрабатывает сбои, вызывая <xref:System.ServiceProcess.ServiceProcessInstaller.Rollback%2A> для объекта, вызвавшего исключение.  
  
 Программа установки приложения автоматического сохранения сведений об уже установленных компонентах, с помощью установщика проекта <xref:System.Configuration.Install.Installer.Context%2A?displayProperty=nameWithType>. Сведения о состоянии, переданные в <xref:System.ServiceProcess.ServiceProcessInstaller.Rollback%2A> как `savedState` параметра, постоянно обновляются при <xref:System.ServiceProcess.ServiceProcessInstaller> экземпляр и каждый <xref:System.ServiceProcess.ServiceInstaller> установлен экземпляр служебной программой. Обычно нет необходимости явно изменять сведения о состоянии в коде.  
  
 <xref:System.ServiceProcess.ServiceProcessInstaller.Rollback%2A> передает в метод вызова исключения, вызываемые методы базового класса или <xref:System.Configuration.Install.Installer.BeforeInstall>  /  <xref:System.Configuration.Install.Installer.AfterInstall> обработчики событий.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">Значение параметра <paramref name="savedState" /> — <see langword="null" />.  
  
 - или -  
  
 Параметр <paramref name="savedState" /> поврежден либо отсутствует.</exception>
        <altmember cref="M:System.ServiceProcess.ServiceProcessInstaller.Install(System.Collections.IDictionary)" />
        <altmember cref="T:System.Configuration.Install.ComponentInstaller" />
      </Docs>
    </Member>
    <Member MemberName="Username">
      <MemberSignature Language="C#" Value="public string Username { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string Username" />
      <MemberSignature Language="DocId" Value="P:System.ServiceProcess.ServiceProcessInstaller.Username" />
      <MemberSignature Language="VB.NET" Value="Public Property Username As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ Username { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceProcess</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.TypeConverter("System.Diagnostics.Design.StringValueConverter, System.Design, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Получает или задает учетную запись пользователя, под управлением которой будет запускаться служебное приложение.</summary>
        <value>Учетная запись, под управлением которой должна запускаться служба. Значение по умолчанию — пустая строка ("").</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.ServiceProcess.ServiceProcessInstaller.Username%2A> И <xref:System.ServiceProcess.ServiceProcessInstaller.Password%2A> пары позволяет службе для запуска под учетной записью, отличной от учетной записи system. Например, это позволяет службе запускаться автоматически при перезагрузке, когда пользователь не вошел в систему.  
  
 <xref:System.ServiceProcess.ServiceProcessInstaller.Password%2A> и <xref:System.ServiceProcess.ServiceProcessInstaller.Username%2A> обрабатываются безопасным образом, в том, что они никогда не сериализуются и сохранены в состоянии установки (установщик проекта <xref:System.Configuration.Install.Installer.Context%2A?displayProperty=nameWithType>) или в другое место с помощью общего доступа.  
  
 Установка <xref:System.ServiceProcess.ServiceProcessInstaller.Username%2A> и <xref:System.ServiceProcess.ServiceProcessInstaller.Password%2A> позволяет связывать учетную запись автоматически со службой во время установки. Если оставить либо <xref:System.ServiceProcess.ServiceProcessInstaller.Username%2A> или <xref:System.ServiceProcess.ServiceProcessInstaller.Password%2A> пустым и задайте <xref:System.ServiceProcess.ServiceProcessInstaller.Account%2A> для `User`, вам необходимо ввести допустимое имя пользователя и пароль во время установки.  
  
 Другой вариант для запуска под отдельной учетной записью службы является использование системной учетной записи компьютера. Этой учетной записи, которая отличается от учетной записи администратора, требуется пароль. Системной учетной записи больше прав, чем вошедший в систему пользователя. Служба требует выполнения под учетной записью системы, а не учетной записи пользователя, позволяет избежать проблем, связанных с отсутствием разрешений  
  
 Если <xref:System.ServiceProcess.ServiceProcessInstaller.Account%2A> имеет любое значение, отличное от `User`, используется указанная учетная запись (локальный или сетевой службы или локальной системы), даже если <xref:System.ServiceProcess.ServiceProcessInstaller.Username%2A> и <xref:System.ServiceProcess.ServiceProcessInstaller.Password%2A> заполняются свойства.  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.ServiceProcess.ServiceProcessInstaller.Password" />
        <altmember cref="P:System.ServiceProcess.ServiceProcessInstaller.Account" />
        <altmember cref="T:System.ServiceProcess.Design.ServiceInstallerDialog" />
      </Docs>
    </Member>
  </Members>
</Type>