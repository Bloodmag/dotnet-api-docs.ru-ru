<Type Name="SrgsSemanticInterpretationTag" FullName="System.Speech.Recognition.SrgsGrammar.SrgsSemanticInterpretationTag">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="4dfefe71ebcdf102f83b8b09105e2143a5c91c37" />
    <Meta Name="ms.sourcegitcommit" Value="df6cf590aa3087f6c7c202712eee781c6a3c8f96" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="ru-RU" />
    <Meta Name="ms.lasthandoff" Value="05/07/2018" />
    <Meta Name="ms.locfileid" Value="33685415" />
  </Metadata>
  <TypeSignature Language="C#" Value="public class SrgsSemanticInterpretationTag : System.Speech.Recognition.SrgsGrammar.SrgsElement" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi serializable beforefieldinit SrgsSemanticInterpretationTag extends System.Speech.Recognition.SrgsGrammar.SrgsElement" />
  <TypeSignature Language="DocId" Value="T:System.Speech.Recognition.SrgsGrammar.SrgsSemanticInterpretationTag" />
  <TypeSignature Language="VB.NET" Value="Public Class SrgsSemanticInterpretationTag&#xA;Inherits SrgsElement" />
  <TypeSignature Language="C++ CLI" Value="public ref class SrgsSemanticInterpretationTag : System::Speech::Recognition::SrgsGrammar::SrgsElement" />
  <AssemblyInfo>
    <AssemblyName>System.Speech</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Speech.Recognition.SrgsGrammar.SrgsElement</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute>
      <AttributeName>System.Diagnostics.DebuggerDisplay("{DebuggerDisplayString ()}")</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>Представляет тег, содержащий [ECMAScript](https://www.ecma-international.org/publications/standards/Ecma-327.htm), который запускается при сопоставлении правила.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Формат по умолчанию семантики System.Speech соответствует стандарту W3C [интерпретации семантики для распознавания речи (SISR) версии 1.0](http://go.microsoft.com/fwlink/?LinkId=201765), где формат для `tag` — элементы, содержащие скрипт `semantics/1.0`. Необходимо указать скрипт для <xref:System.Speech.Recognition.SrgsGrammar.SrgsSemanticInterpretationTag> объектов, используя следующий формат. В синтаксисе `semantics/1.0`:  
  
-   Правило переменной содержащего его элемента правила определяется «out».  
  
-   Имя объекта, имеющего доступ к переменной правило элементы правил за пределами содержащего его элемента правила определяется «правила».  
  
-   Результат из последних ссылкой правило, соответствующий utterance представляемого «rules.latest()».  
  
 Можно также связать значение семантики с фразой в грамматике без использования скриптов, с помощью <xref:System.Speech.Recognition.SrgsGrammar.SrgsNameValueTag> объекта.  
  
   
  
## Examples  
 В следующем примере создается грамматики по выбору города рейса. В этом примере <xref:System.Speech.Recognition.SrgsGrammar.SrgsSemanticInterpretationTag> присваивать семантического значения для каждого города, являющееся код аэропорта города. В примере также используется <xref:System.Speech.Recognition.SrgsGrammar.SrgsSemanticInterpretationTag> назначить отдельный ключ семантики для каждого из две ссылки, внесенные программой <xref:System.Speech.Recognition.SrgsGrammar.SrgsRuleRef> объект с именем `cityRef` для <xref:System.Speech.Recognition.SrgsGrammar.SrgsRule> объект с именем `cities`. Семантические ключи определяют распознаваемым city как город прибытия авиабилетов или название города отправления. Обработчик <xref:System.Speech.Recognition.SpeechRecognitionEngine.SpeechRecognized> событий ключи используются для извлечения семантики из результата распознавания.  
  
 В примере кода «out» ссылается на правило, переменная, содержащая <xref:System.Speech.Recognition.SrgsGrammar.SrgsRule>. Выражение «out. LeavingFrom» ссылается на свойство с именем `LeavingFrom` правило переменной на правило с именем `bookFlight`.  
  
 Выражение «rules.flightCities» ссылается на правило переменной в правиле, <xref:System.Speech.Recognition.SrgsGrammar.SrgsRule.Id%2A> — `flightCities`, и который осуществляется ссылка на правило. В примере, выражение «out. LeavingFrom=rules.flightCities;» присваивает значение из данного правила, <xref:System.Speech.Recognition.SrgsGrammar.SrgsRule.Id%2A> — `flightCities` к свойству с именем `LeavingFrom` правило переменной на правило с именем `bookFlight`. В разделе [семантической результаты содержимого](http://msdn.microsoft.com/library/622291af-615c-4a15-9014-2933aa3f89fe), [ссылки на имя правила грамматики](http://msdn.microsoft.com/library/0777e975-8665-4cc3-957b-752743cb1bb9), и [ссылки на справочник правило грамматики](http://msdn.microsoft.com/library/dec3a809-9aa2-4139-893f-3a549ca1e03e) Дополнительные сведения.  
  
```  
using System;  
using System.Speech.Recognition;  
using System.Speech.Recognition.SrgsGrammar;  
  
namespace SampleRecognition  
{  
  class Program  
  {  
    static void Main(string[] args)  
  
    // Initialize a SpeechRecognitionEngine object.  
    {  
      using (SpeechRecognitionEngine recognizer =  
         new SpeechRecognitionEngine(new System.Globalization.CultureInfo("en-US")))  
      {  
  
        // Create a rule for the cities, assign a semantic value to each city.  
        SrgsRule cities = new SrgsRule("flightCities");  
        SrgsItem chi = new SrgsItem("Chicago");  
        chi.Add(new SrgsSemanticInterpretationTag("out = \"ORD\";"));  
        SrgsItem bos = new SrgsItem("Boston");  
        bos.Add(new SrgsSemanticInterpretationTag("out = \"BOS\";"));  
        SrgsItem mia = new SrgsItem("Miami");  
        mia.Add(new SrgsSemanticInterpretationTag("out = \"MIA\";"));  
        SrgsItem dal = new SrgsItem("Dallas");  
        dal.Add(new SrgsSemanticInterpretationTag("out = \"DFW\";"));  
  
        SrgsOneOf airports = new SrgsOneOf(chi, bos, mia, dal);  
        cities.Add(airports);  
        cities.Scope = SrgsRuleScope.Private;  
  
        // Create a rule reference to the rule for cities.  
        SrgsRuleRef cityRef = new SrgsRuleRef(cities);  
  
        // Create the root rule for the grammar.  
        SrgsRule bookFlight = new SrgsRule("flightBooker");  
        bookFlight.Add(new SrgsItem("I want to fly from"));  
        bookFlight.Add(cityRef);  
        bookFlight.Add(new SrgsSemanticInterpretationTag("out.LeavingFrom=rules.flightCities;"));  
        bookFlight.Add(new SrgsItem("to"));  
        bookFlight.Add(cityRef);  
        bookFlight.Add(new SrgsSemanticInterpretationTag("out.GoingTo=rules.flightCities;"));  
        bookFlight.Scope = SrgsRuleScope.Public;  
  
        // Initialize the SrgsDocument, set the root rule, add rules to the collection.  
        SrgsDocument itinerary = new SrgsDocument(bookFlight);  
        itinerary.Rules.Add(cities);  
  
        // Create a Grammar object and load it to the recognizer.  
        Grammar g = new Grammar(itinerary);  
        g.Name = ("City Chooser");  
        recognizer.LoadGrammarAsync(g);  
  
        // Configure recognizer input.                  
        recognizer.SetInputToDefaultAudioDevice();  
  
        // Attach a handler for the SpeechRecognized event.  
        recognizer.SpeechRecognized +=  
          new EventHandler<SpeechRecognizedEventArgs>(recognizer_SpeechRecognized);  
  
        // Start recognition.  
        recognizer.RecognizeAsync();  
        Console.WriteLine("Starting asynchronous recognition...");  
  
        // Keep the console window open.  
        Console.ReadLine();  
      }  
    }  
  
    // Write to the console the text and the semantics from the recognition result.  
    static void recognizer_SpeechRecognized(object sender, SpeechRecognizedEventArgs e)  
    {  
      Console.WriteLine("Speech recognized: " + e.Result.Text);  
      Console.WriteLine();  
      Console.WriteLine("Semantic results:");  
      Console.WriteLine("  The departure city is: " + e.Result.Semantics["LeavingFrom"].Value);  
      Console.WriteLine("  The arrival city is: " + e.Result.Semantics["GoingTo"].Value);  
    }  
  }  
}  
  
```  
  
 Ниже приведен XML-форму грамматики, создаваемые в коде, в приведенном выше примере.  
  
```xml  
<?xml version="1.0" encoding="utf-8"?>  
<grammar xml:lang="en-US" root="flightBooker" tag-format="semantics/1.0"   
version="1.0" xmlns="http://www.w3.org/2001/06/grammar">  
  
  <rule id="flightBooker" scope="public">  
    <item> I want to fly from </item>  
    <ruleref uri="#flightCities" />   
    <tag> out.LeavingFrom=rules.flightCities; </tag>  
    <item> to </item>  
    <ruleref uri="#flightCities" />   
    <tag> out.GoingTo=rules.flightCities; </tag>  
  </rule>  
  
  <rule id="flightCities" scope="private">  
    <one-of>  
      <item> Chicago <tag> out="ORD"; </tag></item>  
      <item> Boston <tag> out="BOS"; </tag></item>  
      <item> Miami <tag> out="MIA"; </tag></item>  
      <item> Dallas <tag> out="DFW"; </tag></item>  
    </one-of>  
  </rule>  
  
</grammar>  
```  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <MemberGroup MemberName=".ctor">
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Создает экземпляр класса <see cref="T:System.Speech.Recognition.SrgsGrammar.SrgsSemanticInterpretationTag" />.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public SrgsSemanticInterpretationTag ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Speech.Recognition.SrgsGrammar.SrgsSemanticInterpretationTag.#ctor" />
      <MemberSignature Language="VB.NET" Value="Public Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; SrgsSemanticInterpretationTag();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary>Создает экземпляр класса <see cref="T:System.Speech.Recognition.SrgsGrammar.SrgsSemanticInterpretationTag" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Этот конструктор создает семантической интерпретации тег которого <xref:System.Speech.Recognition.SrgsGrammar.SrgsSemanticInterpretationTag.Script%2A> свойство содержит пустую строку.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public SrgsSemanticInterpretationTag (string script);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(string script) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Speech.Recognition.SrgsGrammar.SrgsSemanticInterpretationTag.#ctor(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (script As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; SrgsSemanticInterpretationTag(System::String ^ script);" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="script" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="script">Строка, содержащая [ECMAScript](https://www.ecma-international.org/publications/standards/Ecma-327.htm) для тега.</param>
        <summary>Создает экземпляр класса <see cref="T:System.Speech.Recognition.SrgsGrammar.SrgsSemanticInterpretationTag" />, указывая содержимое скрипта тега.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Этот конструктор создает семантической интерпретации тег которого <xref:System.Speech.Recognition.SrgsGrammar.SrgsSemanticInterpretationTag.Script%2A> свойству присвоено значение в `script`.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          Свойство <paramref name="script" /> имеет значение <see langword="null" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="Script">
      <MemberSignature Language="C#" Value="public string Script { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string Script" />
      <MemberSignature Language="DocId" Value="P:System.Speech.Recognition.SrgsGrammar.SrgsSemanticInterpretationTag.Script" />
      <MemberSignature Language="VB.NET" Value="Public Property Script As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ Script { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Возвращает или задает [ECMAScript](https://www.ecma-international.org/publications/standards/Ecma-327.htm) для тега.</summary>
        <value>Строка, содержащая семантический скрипт интерпретации для тега.</value>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">Предпринимается попытка присвоить параметру **Script** значение <see langword="null" />.</exception>
      </Docs>
    </Member>
  </Members>
</Type>