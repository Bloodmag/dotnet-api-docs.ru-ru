<Type Name="DictationGrammar" FullName="System.Speech.Recognition.DictationGrammar">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="2a9cab1c5d410240a3a4cc63fcbf44fab1b4ea11" />
    <Meta Name="ms.sourcegitcommit" Value="6a0b904069161bbaec4ffd02aa7d9cf38c61e72e" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="ru-RU" />
    <Meta Name="ms.lasthandoff" Value="06/24/2018" />
    <Meta Name="ms.locfileid" Value="36608549" />
  </Metadata>
  <TypeSignature Language="C#" Value="public class DictationGrammar : System.Speech.Recognition.Grammar" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit DictationGrammar extends System.Speech.Recognition.Grammar" />
  <TypeSignature Language="DocId" Value="T:System.Speech.Recognition.DictationGrammar" />
  <TypeSignature Language="VB.NET" Value="Public Class DictationGrammar&#xA;Inherits Grammar" />
  <TypeSignature Language="C++ CLI" Value="public ref class DictationGrammar : System::Speech::Recognition::Grammar" />
  <TypeSignature Language="F#" Value="type DictationGrammar = class&#xA;    inherit Grammar" />
  <AssemblyInfo>
    <AssemblyName>System.Speech</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Speech.Recognition.Grammar</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>Представляет грамматику распознавания речи, используемую для диктовки вольного текста.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Этот класс предоставляет приложениям стандартные языка модель, которая может обрабатывать произноситься пользователем данные в текст. Этот класс поддерживает по умолчанию и пользовательские <xref:System.Speech.Recognition.DictationGrammar> объектов. Сведения о выборе грамматики диктовки см. в разделе <xref:System.Speech.Recognition.DictationGrammar.%23ctor%28System.String%29> конструктор.  
  
 По умолчанию <xref:System.Speech.Recognition.DictationGrammar> языковая модель является бесплатной контекста. Не делает использование конкретных слов или word порядок идентификации и интерпретировать звукового ввода. Чтобы добавить контекст грамматики диктовки, используйте <xref:System.Speech.Recognition.DictationGrammar.SetDictationContext%2A> метод.  
  
> [!NOTE]
>  <xref:System.Speech.Recognition.DictationGrammar> объекты не поддерживают <xref:System.Speech.Recognition.Grammar.Priority%2A> свойство. <xref:System.Speech.Recognition.DictationGrammar> Создает <xref:System.NotSupportedException> Если <xref:System.Speech.Recognition.Grammar.Priority%2A> имеет значение.  
  
   
  
## Examples  
 Следующий пример создает три диктовки грамматик, добавляет их в новую <xref:System.Speech.Recognition.SpeechRecognitionEngine> объекта и возвращает новый объект. Первый грамматики является грамматики диктовки по умолчанию. Второй грамматики является диктовки правописание. Третий грамматику является грамматику диктовки по умолчанию, которая содержит фразу контекста. <xref:System.Speech.Recognition.DictationGrammar.SetDictationContext%2A> Метод используется для присоединения к ним грамматики диктовки фразы контекст после его загрузки, чтобы <xref:System.Speech.Recognition.SpeechRecognitionEngine> объекта.  
  
```csharp  
  
private SpeechRecognitionEngine LoadDictationGrammars()  
{  
  
  // Create a default dictation grammar.  
  DictationGrammar defaultDictationGrammar = new DictationGrammar();  
  defaultDictationGrammar.Name = "default dictation";  
  defaultDictationGrammar.Enabled = true;  
  
  // Create the spelling dictation grammar.  
  DictationGrammar spellingDictationGrammar =  
    new DictationGrammar("grammar:dictation#spelling");  
  spellingDictationGrammar.Name = "spelling dictation";  
  spellingDictationGrammar.Enabled = true;  
  
  // Create the question dictation grammar.  
  DictationGrammar customDictationGrammar =  
    new DictationGrammar("grammar:dictation");  
  customDictationGrammar.Name = "question dictation";  
  customDictationGrammar.Enabled = true;  
  
  // Create a SpeechRecognitionEngine object and add the grammars to it.  
  SpeechRecognitionEngine recoEngine = new SpeechRecognitionEngine();  
  recoEngine.LoadGrammar(defaultDictationGrammar);  
  recoEngine.LoadGrammar(spellingDictationGrammar);  
  recoEngine.LoadGrammar(customDictationGrammar);  
  
  // Add a context to customDictationGrammar.  
  customDictationGrammar.SetDictationContext("How do you", null);  
  
  return recoEngine;  
}  
  
```  
  
 ]]></format>
    </remarks>
    <altmember cref="T:System.Speech.Recognition.Grammar" />
  </Docs>
  <Members>
    <MemberGroup MemberName=".ctor">
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Инициализирует новый экземпляр класса <see cref="T:System.Speech.Recognition.DictationGrammar" />.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public DictationGrammar ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Speech.Recognition.DictationGrammar.#ctor" />
      <MemberSignature Language="VB.NET" Value="Public Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; DictationGrammar();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary>Инициализирует новый экземпляр класса <see cref="T:System.Speech.Recognition.DictationGrammar" /> для грамматики диктовки по умолчанию, предоставляемой технологией Windows Desktop Speech Technology.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Грамматика диктовки по умолчанию эмулирует примеров стандартных диктовки, включая знаки препинания. Он не поддерживает написание слова.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public DictationGrammar (string topic);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(string topic) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Speech.Recognition.DictationGrammar.#ctor(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (topic As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; DictationGrammar(System::String ^ topic);" />
      <MemberSignature Language="F#" Value="new System.Speech.Recognition.DictationGrammar : string -&gt; System.Speech.Recognition.DictationGrammar" Usage="new System.Speech.Recognition.DictationGrammar topic" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="topic" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="topic">Совместимый с XML универсальный идентификатор ресурса (URI), определяющий грамматику диктовки: <c>grammar:dictation</c> или <c>grammar:dictation#spelling</c>.</param>
        <summary>Инициализирует новый экземпляр класса <see cref="T:System.Speech.Recognition.DictationGrammar" /> с указанной грамматикой диктовки.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Платформа речи использует специальный синтаксис URI для определения пользовательских диктовки грамматики. Значение `grammar:dictation` указывает грамматики диктовки по умолчанию. Значение `grammar:dictation#spelling` указывает диктовки правописание.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="SetDictationContext">
      <MemberSignature Language="C#" Value="public void SetDictationContext (string precedingText, string subsequentText);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void SetDictationContext(string precedingText, string subsequentText) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Speech.Recognition.DictationGrammar.SetDictationContext(System.String,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Sub SetDictationContext (precedingText As String, subsequentText As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void SetDictationContext(System::String ^ precedingText, System::String ^ subsequentText);" />
      <MemberSignature Language="F#" Value="member this.SetDictationContext : string * string -&gt; unit" Usage="dictationGrammar.SetDictationContext (precedingText, subsequentText)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="precedingText" Type="System.String" />
        <Parameter Name="subsequentText" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="precedingText">Текст, указывающий начало контекста диктовки.</param>
        <param name="subsequentText">Текст, указывающий конец контекста диктовки.</param>
        <summary>Добавляет контекст в грамматику диктовки, загруженную объектом <see cref="T:System.Speech.Recognition.SpeechRecognizer" /> или <see cref="T:System.Speech.Recognition.SpeechRecognitionEngine" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 По умолчанию диктовки грамматики не делает использование конкретных слов или word порядок идентификации и интерпретировать звукового ввода. При добавлении контекст Грамматика диктовки использует механизм распознавания `precedingText` и `subsequentText` для определения, когда следует интерпретировать речи как Диктовка.  
  
> [!NOTE]
>  Грамматика диктовки должна быть загружена с <xref:System.Speech.Recognition.SpeechRecognizer> или <xref:System.Speech.Recognition.SpeechRecognitionEngine> объекта перед использованием <xref:System.Speech.Recognition.DictationGrammar.SetDictationContext%2A> Добавление контекста.  
  
 В следующей таблице описаны как механизм распознавания использует два параметра для определения необходимости использования диктовки грамматики.  
  
|`precedingText`|`subsequentText`|Описание:|  
|---------------------|----------------------|-----------------|  
|не `null`|не `null`|Механизм распознавания использует условия для скобок фраз кандидата.|  
|`null`|не `null`|Использует механизм распознавания `subsequentText` завершения диктовки.|  
|не `null`|`null`|Использует механизм распознавания `precedingText` запуск диктовки.|  
|`null`|`null`|Механизм распознавания не использует контекст при использовании диктовки грамматики.|  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Speech.Recognition.Grammar" />
      </Docs>
    </Member>
  </Members>
</Type>