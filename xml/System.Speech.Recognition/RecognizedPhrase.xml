<Type Name="RecognizedPhrase" FullName="System.Speech.Recognition.RecognizedPhrase">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="c7b4bcf1096859683fe6b5c969f81cc456020402" />
    <Meta Name="ms.sourcegitcommit" Value="d31dc2ede16f6f7bc64e90d9f897ff54c4e3869b" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="ru-RU" />
    <Meta Name="ms.lasthandoff" Value="04/03/2018" />
    <Meta Name="ms.locfileid" Value="30529518" />
  </Metadata>
  <TypeSignature Language="C#" Value="public class RecognizedPhrase" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi serializable beforefieldinit RecognizedPhrase extends System.Object" />
  <TypeSignature Language="DocId" Value="T:System.Speech.Recognition.RecognizedPhrase" />
  <TypeSignature Language="VB.NET" Value="Public Class RecognizedPhrase" />
  <TypeSignature Language="C++ CLI" Value="public ref class RecognizedPhrase" />
  <AssemblyInfo>
    <AssemblyName>System.Speech</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute>
      <AttributeName>System.Diagnostics.DebuggerDisplay("{Text}")</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>Содержит подробные сведения о распознанных входных данных, созданные распознавателем речи.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Этот класс содержит подробные сведения о слова и фразы, обработанных в ходе операции распознавания речи, включая следующие:  
  
-   <xref:System.Speech.Recognition.RecognizedPhrase.Grammar%2A> Ссылок на свойства <xref:System.Speech.Recognition.Grammar> , распознаватель, используемый для идентификации входных данных.  
  
-   <xref:System.Speech.Recognition.RecognizedPhrase.Text%2A> Свойство содержит нормализованный текст для фразы.  
  
-   <xref:System.Speech.Recognition.RecognizedPhrase.Semantics%2A> Свойство ссылается на семантические сведения, содержащиеся в результат. Семантические сведения — это словарь имен ключей и связанные данные семантической.  
  
-   <xref:System.Speech.Recognition.RecognizedPhrase.Words%2A> Свойство содержит упорядоченную коллекцию <xref:System.Speech.Recognition.RecognizedWordUnit> объекты, представляющие каждую распознан word во входных данных. Каждая единица word содержит формат отображения, лексической формат и сведения произношение для соответствующего word.  
  
-   <xref:System.Speech.Recognition.RecognizedPhrase.ReplacementWordUnits%2A> Свойство содержит информацию о специальные слова подстановки.  
  
-   <xref:System.Speech.Recognition.RecognizedPhrase.Homophones%2A> И <xref:System.Speech.Recognition.RecognizedPhrase.HomophoneGroupId%2A> свойства содержат сведения об альтернативных результатов распознавания, имеющих то же или аналогичные произношение.  
  
-   Значение <xref:System.Speech.Recognition.RecognizedPhrase.Confidence%2A> указывает степень вероятности, присвоенное распознавателем речи, что распознанная фраза совпадает с входным параметром.  
  
 Распознаватель речи возвращает результаты распознавания в <xref:System.Speech.Recognition.RecognitionResult> объекта, который наследует от <xref:System.Speech.Recognition.RecognizedPhrase>. Результат распознавания <xref:System.Speech.Recognition.RecognitionResult.Alternates%2A> свойство содержит упорядоченную коллекцию <xref:System.Speech.Recognition.RecognizedPhrase> объектов, каждый из которых является возможное совпадение ввода с помощью распознавателя.  
  
   
  
## Examples  
 В следующем примере показано обработчик <xref:System.Speech.Recognition.SpeechRecognitionEngine.SpeechRecognized?displayProperty=nameWithType>, <xref:System.Speech.Recognition.SpeechRecognizer.SpeechRecognized?displayProperty=nameWithType>, или <xref:System.Speech.Recognition.Grammar.SpeechRecognized?displayProperty=nameWithType> событий, а также некоторые сведения, связанные с <xref:System.Speech.Recognition.RecognitionResult> объекта. Класс <xref:System.Speech.Recognition.RecognitionResult> является производным от класса <xref:System.Speech.Recognition.RecognizedPhrase>.  
  
```csharp  
void SpeechRecognizedHandler(object sender, SpeechRecognizedEventArgs e)  
{  
  if (e.Result == null) return;  
  
  // Add event handler code here.  
  
  // The following code illustrates some of the information available  
  // in the recognition result.  
  Console.WriteLine("Recognition result summary:");  
  Console.WriteLine(  
    "  Recognized phrase: {0}\n" +   
    "  Confidence score {1}\n" +   
    "  Grammar used: {2}\n",   
    e.Result.Text, e.Result.Confidence, e.Result.Grammar.Name);  
  
  // Display the semantic values in the recognition result.  
  Console.WriteLine("  Semantic results:");  
  foreach (KeyValuePair<String, SemanticValue> child in e.Result.Semantics)  
  {  
    Console.WriteLine("    The {0} city is {1}",  
      child.Key, child.Value.Value ?? "null");  
  }  
  Console.WriteLine();  
  
  // Display information about the words in the recognition result.  
  Console.WriteLine("  Word summary: ");  
  foreach (RecognizedWordUnit word in e.Result.Words)  
  {  
    Console.WriteLine(  
      "    Lexical form ({1})" +  
      " Pronunciation ({0})" +  
      " Display form ({2})",  
      word.Pronunciation, word.LexicalForm, word.DisplayAttributes);  
  }  
  
  // Display information about the audio in the recognition result.  
  Console.WriteLine("  Input audio summary:\n" +  
    "    Candidate Phrase at:       {0} mSec\n" +  
    "    Phrase Length:             {1} mSec\n" +  
    "    Input State Time:          {2}\n" +  
    "    Input Format:              {3}\n",  
    e.Result.Audio.AudioPosition,  
    e.Result.Audio.Duration,  
    e.Result.Audio.StartTime,  
    e.Result.Audio.Format.EncodingFormat);  
  
  // Display information about the alternate recognitions in the recognition result.  
  Console.WriteLine("  Alternate phrase collection:");  
  foreach (RecognizedPhrase phrase in e.Result.Alternates)  
  {  
    Console.WriteLine("    Phrase: " + phrase.Text);  
    Console.WriteLine("    Confidence score: " + phrase.Confidence);  
  }  
}  
```  
  
 ]]></format>
    </remarks>
    <altmember cref="T:System.Speech.Recognition.RecognitionResult" />
    <altmember cref="T:System.Speech.Recognition.RecognizedWordUnit" />
  </Docs>
  <Members>
    <Member MemberName="Confidence">
      <MemberSignature Language="C#" Value="public float Confidence { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance float32 Confidence" />
      <MemberSignature Language="DocId" Value="P:System.Speech.Recognition.RecognizedPhrase.Confidence" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Confidence As Single" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property float Confidence { float get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Single</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Возвращает присвоенное распознавателем значение, которое представляет вероятность того, что <see cref="T:System.Speech.Recognition.RecognizedPhrase" /> соответствует заданным входным данным.</summary>
        <value>Относительная мера достоверности правильного распознания фразы. Значение находится в диапазоне от 0,0 до 1,0 (низкая и высокая достоверность соответственно).</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Достоверности не указывает абсолютный вероятность правильного распознавания фразы. Вместо этого достоверности обеспечивают механизм для сравнения относительную точность нескольких альтернативных результатов распознавания для указанных введенных данных. Это облегчает, возвращая наиболее точный результат распознавания. Например если показатель достоверности 0,8 распознанной фразы, это означает, что фразу имеет 80% вероятность того, что совпадение точным для входных данных.  Он означает, что фразу наиболее вероятные что совпадение точное, для ввода, чем другие результаты, имеющие достоверности оценки меньше, чем 0,8.  
  
 Показатель достоверности сам по себе не имеет смысла, если нет альтернативного результаты для сравнения, из одной и той же операции распознавания или из предыдущего отзывы одинаковыми входными данными. Значения используются для ранжирования альтернативных кандидата фраз, возвращенных <xref:System.Speech.Recognition.RecognitionResult.Alternates%2A> свойство <xref:System.Speech.Recognition.RecognitionResult> объектов.  
  
 Значения достоверности: относительный и уникальный для каждого модуля распознавания. Достоверность значения, возвращаемые два разных распознавания нельзя сравнивать осмысленным образом.  
  
 Распознавание речи может назначить низкий показатель достоверности ввода речи по различным причинам, включая фона помех, inarticulate речи или непредвиденных слова или word последовательностей. Если приложение использует <xref:System.Speech.Recognition.SpeechRecognitionEngine> экземпляр, можно изменить уровень достоверности какие речь приняты или отклонены с одним из входных данных <xref:System.Speech.Recognition.SpeechRecognitionEngine.UpdateRecognizerSetting%2A> методы. Пороговые значения достоверности для общего распознавателя, управляется <xref:System.Speech.Recognition.SpeechRecognizer>, связанные с профилем пользователя и хранится в реестре Windows. Приложения не следует записывать изменения в реестр для свойств общего распознавателя.  
  
 <xref:System.Speech.Recognition.RecognitionResult.Alternates%2A> Свойство <xref:System.Speech.Recognition.RecognitionResult> объект содержит упорядоченную коллекцию <xref:System.Speech.Recognition.RecognizedPhrase> объектов, каждый из которых является возможное совпадение ввода с помощью распознавателя. Варианты упорядочены от самого высокого наименьшее уверенность в том.  
  
   
  
## Examples  
 В следующем примере показано обработчик <xref:System.Speech.Recognition.SpeechRecognitionEngine.SpeechRecognized?displayProperty=nameWithType>, <xref:System.Speech.Recognition.SpeechRecognizer.SpeechRecognized?displayProperty=nameWithType>, или <xref:System.Speech.Recognition.Grammar.SpeechRecognized?displayProperty=nameWithType> событий. В примере показаны сведения, связанные с <xref:System.Speech.Recognition.RecognitionResult> объект, некоторые из которых является производным от <xref:System.Speech.Recognition.RecognizedPhrase>. Обработчик отображает достоверности для распознанной фразы также и для альтернативных результатов распознавания.  
  
```csharp  
void SpeechRecognizedHandler(object sender, SpeechRecognizedEventArgs e)  
{  
  if (e.Result == null) return;  
  
  // Add event handler code here.  
  
  // The following code illustrates some of the information available  
  // in the recognition result.  
  Console.WriteLine("Recognition result summary:");  
  Console.WriteLine(  
    "  Recognized phrase: {0}\n" +   
    "  Confidence score {1}\n" +   
    "  Grammar used: {2}\n",   
    e.Result.Text, e.Result.Confidence, e.Result.Grammar.Name);  
  
  // Display the semantic values in the recognition result.  
  Console.WriteLine("  Semantic results:");  
  foreach (KeyValuePair<String, SemanticValue> child in e.Result.Semantics)  
  {  
    Console.WriteLine("    The {0} city is {1}",  
      child.Key, child.Value.Value ?? "null");  
  }  
  Console.WriteLine();  
  
  // Display information about the words in the recognition result.  
  Console.WriteLine("  Word summary: ");  
  foreach (RecognizedWordUnit word in e.Result.Words)  
  {  
    Console.WriteLine(  
      "    Lexical form ({1})" +  
      " Pronunciation ({0})" +  
      " Display form ({2})",  
      word.Pronunciation, word.LexicalForm, word.DisplayAttributes);  
  }  
  
  // Display information about the audio in the recognition result.  
  Console.WriteLine("  Input audio summary:\n" +  
    "    Candidate Phrase at:       {0} mSec\n" +  
    "    Phrase Length:             {1} mSec\n" +  
    "    Input State Time:          {2}\n" +  
    "    Input Format:              {3}\n",  
    e.Result.Audio.AudioPosition,  
    e.Result.Audio.Duration,  
    e.Result.Audio.StartTime,  
    e.Result.Audio.Format.EncodingFormat);  
  
  // Display information about the alternate recognitions in the recognition result.  
  Console.WriteLine("  Alternate phrase collection:");  
  foreach (RecognizedPhrase phrase in e.Result.Alternates)  
  {  
    Console.WriteLine("    Phrase: " + phrase.Text);  
    Console.WriteLine("    Confidence score: " + phrase.Confidence);  
  }  
}  
  
```  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Speech.Recognition.RecognitionResult" />
        <altmember cref="P:System.Speech.Recognition.RecognitionResult.Alternates" />
        <altmember cref="T:System.Speech.Recognition.SpeechRecognitionEngine" />
        <altmember cref="T:System.Speech.Recognition.SpeechRecognizer" />
      </Docs>
    </Member>
    <Member MemberName="ConstructSmlFromSemantics">
      <MemberSignature Language="C#" Value="public System.Xml.XPath.IXPathNavigable ConstructSmlFromSemantics ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Xml.XPath.IXPathNavigable ConstructSmlFromSemantics() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Speech.Recognition.RecognizedPhrase.ConstructSmlFromSemantics" />
      <MemberSignature Language="VB.NET" Value="Public Function ConstructSmlFromSemantics () As IXPathNavigable" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Xml::XPath::IXPathNavigable ^ ConstructSmlFromSemantics();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Xml.XPath.IXPathNavigable</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Возвращает документ на языке разметки семантики (SML) для семантической информации в объекте <see cref="T:System.Speech.Recognition.RecognizedPhrase" />.</summary>
        <returns>Возвращает описание семантики объекта <see cref="T:System.Speech.Recognition.RecognizedPhrase" /> на языке SML в виде объекта, доступного по пути [XPath](http://msdn.microsoft.com/library/ms256115.aspx).</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Сведения о языке разметки семантики (SML) см. в разделе [семантики языка разметки](http://msdn.microsoft.com/library/f9d83443-2cac-49bc-a447-210feda62f5d).  
  
   
  
## Examples  
 В следующем примере метод возвращает строку, содержащую SML для семантики распознанной фразы.  
  
```  
private string GetSemanticsSML(RecognizedPhrase result)  
{  
  if (result.Semantics.Count > 0)  
  {  
    return result.ConstructSmlFromSemantics().CreateNavigator().OuterXml;  
  }  
  else  
  {  
    return null;  
  }  
}  
```  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Grammar">
      <MemberSignature Language="C#" Value="public System.Speech.Recognition.Grammar Grammar { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Speech.Recognition.Grammar Grammar" />
      <MemberSignature Language="DocId" Value="P:System.Speech.Recognition.RecognizedPhrase.Grammar" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Grammar As Grammar" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Speech::Recognition::Grammar ^ Grammar { System::Speech::Recognition::Grammar ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Speech.Recognition.Grammar</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Получает объект <see cref="T:System.Speech.Recognition.Grammar" />, используемый распознавателем речи для возврата <see cref="T:System.Speech.Recognition.RecognizedPhrase" />.</summary>
        <value>Объект грамматики, который использовался распознавателем для идентификации входных данных.</value>
        <remarks>To be added.</remarks>
        <altmember cref="T:System.Speech.Recognition.Grammar" />
        <altmember cref="T:System.Speech.Recognition.RecognitionResult" />
        <altmember cref="T:System.Speech.Recognition.SpeechRecognitionEngine" />
        <altmember cref="T:System.Speech.Recognition.SpeechRecognizer" />
      </Docs>
    </Member>
    <Member MemberName="HomophoneGroupId">
      <MemberSignature Language="C#" Value="public int HomophoneGroupId { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 HomophoneGroupId" />
      <MemberSignature Language="DocId" Value="P:System.Speech.Recognition.RecognizedPhrase.HomophoneGroupId" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property HomophoneGroupId As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property int HomophoneGroupId { int get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Возвращает идентификатор группы омофонов для фразы.</summary>
        <value>Идентификатор группы омофонов для фразы.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Распознаватель речи всех альтернативных результатов распознавания, имеющих то же произношение назначает идентификатор группы. Для каждого альтернативного с уникальным произношение распознаватель создает группы омофонов. Распознаватель речи создает новую группу идентификаторов для каждой операции распознавания и идентификаторы не может использоваться для сравнения конечных сгенерированных распознавания отдельных операций.  
  
 Например для распознавания результат содержатся варианты «информация», «заключительного» и «произо», первые два альтернативных результатов будет принадлежать одной группы омофонов, и последний вариант будет единственный элемент второй группы омофонов.  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Speech.Recognition.RecognitionResult.Alternates" />
        <altmember cref="P:System.Speech.Recognition.RecognizedPhrase.Homophones" />
      </Docs>
    </Member>
    <Member MemberName="Homophones">
      <MemberSignature Language="C#" Value="public System.Collections.ObjectModel.ReadOnlyCollection&lt;System.Speech.Recognition.RecognizedPhrase&gt; Homophones { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Collections.ObjectModel.ReadOnlyCollection`1&lt;class System.Speech.Recognition.RecognizedPhrase&gt; Homophones" />
      <MemberSignature Language="DocId" Value="P:System.Speech.Recognition.RecognizedPhrase.Homophones" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Homophones As ReadOnlyCollection(Of RecognizedPhrase)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Collections::ObjectModel::ReadOnlyCollection&lt;System::Speech::Recognition::RecognizedPhrase ^&gt; ^ Homophones { System::Collections::ObjectModel::ReadOnlyCollection&lt;System::Speech::Recognition::RecognizedPhrase ^&gt; ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.ObjectModel.ReadOnlyCollection&lt;System.Speech.Recognition.RecognizedPhrase&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Получает коллекцию альтернативных результатов распознавания, имеющих то же произношение, что и данная распознанная фраза.</summary>
        <value>Доступная только для чтения коллекция альтернативных результатов распознавания, имеющих то же произношение, что и данная распознанная фраза.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Это свойство возвращает всех других альтернативных результатов распознавания, имеющих то же произношение, что данная распознанная фраза.  
  
 Например для распознавания результат содержится вариантов, «информация» и «заключительного», в коллекцию омофонов для первого альтернативного «информация», будет содержать второй фразы «заключительного». Коллекция омофонов для второго альтернативного «хвоста», будет содержать первый фразу «информация».  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Speech.Recognition.RecognitionResult.Alternates" />
        <altmember cref="P:System.Speech.Recognition.RecognizedPhrase.HomophoneGroupId" />
      </Docs>
    </Member>
    <Member MemberName="ReplacementWordUnits">
      <MemberSignature Language="C#" Value="public System.Collections.ObjectModel.Collection&lt;System.Speech.Recognition.ReplacementText&gt; ReplacementWordUnits { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Collections.ObjectModel.Collection`1&lt;class System.Speech.Recognition.ReplacementText&gt; ReplacementWordUnits" />
      <MemberSignature Language="DocId" Value="P:System.Speech.Recognition.RecognizedPhrase.ReplacementWordUnits" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property ReplacementWordUnits As Collection(Of ReplacementText)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Collections::ObjectModel::Collection&lt;System::Speech::Recognition::ReplacementText ^&gt; ^ ReplacementWordUnits { System::Collections::ObjectModel::Collection&lt;System::Speech::Recognition::ReplacementText ^&gt; ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.ObjectModel.Collection&lt;System.Speech.Recognition.ReplacementText&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Получает сведения о тексте, который распознаватель речи изменил в ходе нормализации преобразования речи в текст.</summary>
        <value>Коллекция объектов <see cref="T:System.Speech.Recognition.ReplacementText" />, описывающих части текста, которые распознаватель речи заменил в процессе нормализации распознанных входных данных.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 В рамках процесса распознавания речи распознаватель речи нормализует распознанных входных данных в форме отображения.  
  
 Ввода речи «двадцать пять долларов», приводит результат распознавания где <xref:System.Speech.Recognition.RecognizedPhrase.Words%2A> свойство содержит слова, «20», «5» и «долларов» и <xref:System.Speech.Recognition.RecognizedPhrase.Text%2A> свойство содержит фразу «25,00». Дополнительные сведения о нормализации текст см. в разделе <xref:System.Speech.Recognition.ReplacementText> класса.  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Speech.Recognition.RecognizedWordUnit" />
        <altmember cref="T:System.Speech.Recognition.ReplacementText" />
        <altmember cref="P:System.Speech.Recognition.RecognizedPhrase.Text" />
        <altmember cref="P:System.Speech.Recognition.RecognizedPhrase.Words" />
      </Docs>
    </Member>
    <Member MemberName="Semantics">
      <MemberSignature Language="C#" Value="public System.Speech.Recognition.SemanticValue Semantics { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Speech.Recognition.SemanticValue Semantics" />
      <MemberSignature Language="DocId" Value="P:System.Speech.Recognition.RecognizedPhrase.Semantics" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Semantics As SemanticValue" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Speech::Recognition::SemanticValue ^ Semantics { System::Speech::Recognition::SemanticValue ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Speech.Recognition.SemanticValue</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Получает семантическую информацию, связанную с распознанной фразой.</summary>
        <value>Семантическая информация, связанная с распознанной фразой.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Грамматика распознавания речи может включать информацию о своем. При распознавателя речи формирует результат распознавания для таких Грамматика, семантическая сведения могут быть добавлены в результате распознавания согласно правилам грамматики и ввода в распознаватель. Дополнительные сведения о семантических см. в разделе [основные сведения о результатах семантической](http://msdn.microsoft.com/library/2a9dbd8b-cf6d-42cd-bbb9-ca0b3e534005) и <xref:System.Speech.Recognition.SemanticResultKey> и <xref:System.Speech.Recognition.SemanticResultValue> классы.  
  
   
  
## Examples  
 В следующем примере определяется метод, который получает семантические сведения из распознанной фразы. По возвращении из этого метода содержит значение семантики ключ или значение null, если значение не было получено. Этот метод проверяет только разделы верхнего уровня. Поскольку семантический сведения содержатся в это дерево значений, ключей более низкого уровня должен осуществляться через семантические возвращаемого значения.  
  
```  
static bool TryGetSemanticValue(  
      RecognizedPhrase phrase, string key, out SemanticValue value)  
{  
  value = null;  
  bool found = phrase.Semantics.ContainsKey(key);  
  if (found)  
  {  
    value = phrase.Semantics[key];  
  }  
  
  return found;  
}  
```  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Speech.Recognition.SemanticResultKey" />
        <altmember cref="T:System.Speech.Recognition.SemanticResultValue" />
        <altmember cref="T:System.Speech.Recognition.SemanticValue" />
      </Docs>
    </Member>
    <Member MemberName="Text">
      <MemberSignature Language="C#" Value="public string Text { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string Text" />
      <MemberSignature Language="DocId" Value="P:System.Speech.Recognition.RecognizedPhrase.Text" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Text As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ Text { System::String ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Получает нормализованный текст, созданный распознавателем речи на основе распознанных входных данных.</summary>
        <value>Нормализованный текст, созданный распознавателем речи на основе распознанных входных данных.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Как часть процесса распознавания речи распознаватель речи выполняет нормализацию речи в текст в форме отображения распознанных входных данных.  
  
 Ввода речи «двадцать пять долларов», приводит результат распознавания где <xref:System.Speech.Recognition.RecognizedPhrase.Words%2A> свойство содержит слова, «20», «5» и «долларов» и <xref:System.Speech.Recognition.RecognizedPhrase.Text%2A> свойство содержит фразу «25,00». Дополнительные сведения о нормализации текст см. в разделе <xref:System.Speech.Recognition.ReplacementText>.  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Speech.Recognition.RecognizedPhrase.ReplacementWordUnits" />
        <altmember cref="P:System.Speech.Recognition.RecognizedPhrase.Words" />
      </Docs>
    </Member>
    <Member MemberName="Words">
      <MemberSignature Language="C#" Value="public System.Collections.ObjectModel.ReadOnlyCollection&lt;System.Speech.Recognition.RecognizedWordUnit&gt; Words { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Collections.ObjectModel.ReadOnlyCollection`1&lt;class System.Speech.Recognition.RecognizedWordUnit&gt; Words" />
      <MemberSignature Language="DocId" Value="P:System.Speech.Recognition.RecognizedPhrase.Words" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Words As ReadOnlyCollection(Of RecognizedWordUnit)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Collections::ObjectModel::ReadOnlyCollection&lt;System::Speech::Recognition::RecognizedWordUnit ^&gt; ^ Words { System::Collections::ObjectModel::ReadOnlyCollection&lt;System::Speech::Recognition::RecognizedWordUnit ^&gt; ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.ObjectModel.ReadOnlyCollection&lt;System.Speech.Recognition.RecognizedWordUnit&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Получает слова, созданные распознавателем речи на основе распознанных входных данных.</summary>
        <value>Коллекция объектов <see cref="T:System.Speech.Recognition.RecognizedWordUnit" />, созданных распознавателем речи для распознанных входных данных.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Это свойство содержит слова, полученных из входных данных при распознаватель речи до нормализации распознавателя речи в текст результата.  
  
 Ввода речи «двадцать пять долларов», приводит результат распознавания где <xref:System.Speech.Recognition.RecognizedPhrase.Words%2A> свойство содержит слова, «20», «5» и «долларов» и <xref:System.Speech.Recognition.RecognizedPhrase.Text%2A> свойство содержит фразу «25,00». Дополнительные сведения о нормализации текст см. в разделе <xref:System.Speech.Recognition.ReplacementText>.  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Speech.Recognition.RecognizedWordUnit" />
        <altmember cref="P:System.Speech.Recognition.RecognizedPhrase.ReplacementWordUnits" />
        <altmember cref="P:System.Speech.Recognition.RecognizedPhrase.Text" />
      </Docs>
    </Member>
  </Members>
</Type>