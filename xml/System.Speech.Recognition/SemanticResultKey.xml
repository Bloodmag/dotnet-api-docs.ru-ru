<Type Name="SemanticResultKey" FullName="System.Speech.Recognition.SemanticResultKey">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="68d8adcbb951b916fb8741f4e20d6c90b9461f90" />
    <Meta Name="ms.sourcegitcommit" Value="d31dc2ede16f6f7bc64e90d9f897ff54c4e3869b" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="ru-RU" />
    <Meta Name="ms.lasthandoff" Value="04/03/2018" />
    <Meta Name="ms.locfileid" Value="30529338" />
  </Metadata>
  <TypeSignature Language="C#" Value="public class SemanticResultKey" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit SemanticResultKey extends System.Object" />
  <TypeSignature Language="DocId" Value="T:System.Speech.Recognition.SemanticResultKey" />
  <TypeSignature Language="VB.NET" Value="Public Class SemanticResultKey" />
  <TypeSignature Language="C++ CLI" Value="public ref class SemanticResultKey" />
  <AssemblyInfo>
    <AssemblyName>System.Speech</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute>
      <AttributeName>System.Diagnostics.DebuggerDisplay("{_semanticKey.DebugSummary}")</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>Связывает ключевую строку со значениями <see cref="T:System.Speech.Recognition.SemanticResultValue" /> для идентификации объектов <see cref="T:System.Speech.Recognition.SemanticValue" />.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Основной единицей семантики выражений в System.Speech является <xref:System.Speech.Recognition.SemanticValue>, который представляет собой пару ключ значение.  
  
 С помощью <xref:System.Speech.Recognition.SemanticResultKey> объектов тегов <xref:System.Speech.Recognition.SemanticResultValue> экземпляров, содержащихся в <xref:System.Speech.Recognition.GrammarBuilder> объектов и строк, чтобы легко доступны значения из <xref:System.Speech.Recognition.SemanticValue> экземпляров на распознавание.  
  
 Можно использовать <xref:System.Speech.Recognition.SemanticResultValue> и <xref:System.Speech.Recognition.SemanticResultKey> объектов вместе с <xref:System.Speech.Recognition.GrammarBuilder> и <xref:System.Speech.Recognition.Choices> объектов, для определения семантической структуры для Грамматика распознавания речи. Для доступа к семантической информации в результатов распознавания, получить экземпляр <xref:System.Speech.Recognition.SemanticValue> через <xref:System.Speech.Recognition.RecognizedPhrase.Semantics%2A> свойство <xref:System.Speech.Recognition.RecognizedPhrase>.  
  
 Дополнительные сведения об использовании <xref:System.Speech.Recognition.SemanticResultValue> и <xref:System.Speech.Recognition.SemanticResultKey> объектов, в разделе [SemanticResultValue понимание и объекты SemanticResultKey](http://msdn.microsoft.com/library/0fea1236-5261-4608-89b3-9ce9ffc22a1c) и [SemanticResultKey для извлечения с помощью SemanticResultValue](http://msdn.microsoft.com/library/198e29b8-845f-4cec-a25e-f55c0eaf46aa) в [руководство по программированию речи системе для .NET Framework 4.0](http://msdn.microsoft.com/library/610116c7-3817-40ff-857b-5d41e8511043).  
  
   
  
## Examples  
 В следующем примере создается <xref:System.Speech.Recognition.Grammar> распознавать ввод пароля в форме «пароль —...», где фактические входных данных сопоставляется с подстановочным знаком.  
  
 Подстановочный знак, помеченных семантического ключ и <xref:System.Speech.Recognition.Grammar.SpeechRecognized> обработчик проверяет наличие этот тег, чтобы убедиться, что произошло ввода пароля.  
  
```csharp  
private void pwdGrammar()   
{  
  GrammarBuilder pwdBuilder = new GrammarBuilder("My Password is");  
  GrammarBuilder wildcardBuilder = new GrammarBuilder();  
  wildcardBuilder.AppendWildcard();  
  SemanticResultKey wildcardKey= new SemanticResultKey("Password", wildcardBuilder);  
  pwdBuilder+=wildcardKey;  
  Grammar grammar = new Grammar(pwdBuilder);  
  grammar.Name = "Password input";  
  
  grammar.SpeechRecognized += delegate(object sender, SpeechRecognizedEventArgs eventArgs)   
  {  
    SemanticValue semantics = eventArgs.Result.Semantics;  
    RecognitionResult result=eventArgs.Result;  
  
    if (!semantics.ContainsKey("Password"))   
    {  
      SpeechUI.SendTextFeedback(eventArgs.Result, "No Password Provided", false);  
    }  
    else   
    {  
      RecognizedAudio pwdAudio = result.GetAudioForWordRange(result.Words[3], result.Words[result.Words.Count - 1]);  
      MemoryStream pwdMemoryStream = new MemoryStream();  
      pwdAudio.WriteToAudioStream(pwdMemoryStream);  
      if (!IsValidPwd(pwdMemoryStream))   
      {  
        string badPwd = System.IO.Path.GetTempPath() + "BadPwd" + (new Random()).Next().ToString() + ".wav";  
        FileStream waveStream = new FileStream(badPwd, FileMode.Create);  
        pwdAudio.WriteToWaveStream(waveStream);  
        waveStream.Flush();  
        waveStream.Close();  
        SpeechUI.SendTextFeedback(eventArgs.Result, "Invalid Password", false);  
  
      }  
    }  
  };  
  grammar.Enabled = true;  
  _recognizer.LoadGrammar(grammar);  
  UpdateGrammarTree(_grammarTreeView, _recognizer);  
  
}  
```  
  
 ]]></format>
    </remarks>
    <altmember cref="T:System.Speech.Recognition.SemanticValue" />
    <altmember cref="T:System.Speech.Recognition.SemanticResultValue" />
  </Docs>
  <Members>
    <MemberGroup MemberName=".ctor">
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Создает экземпляр <see cref="T:System.Speech.Recognition.SemanticResultKey" /> и связывает ключ с компонентами грамматики.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Конструкторы для <xref:System.Speech.Recognition.SemanticResultKey> укажите текст тега (ключ семантики) и набор компонентов грамматики добавляемый Грамматика распознавания речи.  
  
 Грамматики компонентов может быть задано в виде массива <xref:System.Speech.Recognition.GrammarBuilder> объектов, или как массив <xref:System.String> экземпляров.  
  
 Если компоненты грамматики используются при распознавании, можно воспользоваться возвращаемый <xref:System.Speech.Recognition.SemanticValue> с помощью текст тега, предоставляемых конструктору <xref:System.Speech.Recognition.SemanticResultKey> как ключ семантики. <xref:System.Speech.Recognition.SemanticValue.Value%2A> Свойство <xref:System.Speech.Recognition.SemanticValue> экземпляр будет определяться грамматики компоненты, используемые в определении <xref:System.Speech.Recognition.SemanticResultKey>.  
  
 ]]></format>
        </remarks>
      </Docs>
    </MemberGroup>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public SemanticResultKey (string semanticResultKey, params System.Speech.Recognition.GrammarBuilder[] builders);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(string semanticResultKey, class System.Speech.Recognition.GrammarBuilder[] builders) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Speech.Recognition.SemanticResultKey.#ctor(System.String,System.Speech.Recognition.GrammarBuilder[])" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (semanticResultKey As String, ParamArray builders As GrammarBuilder())" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; SemanticResultKey(System::String ^ semanticResultKey, ... cli::array &lt;System::Speech::Recognition::GrammarBuilder ^&gt; ^ builders);" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="semanticResultKey" Type="System.String" />
        <Parameter Name="builders" Type="System.Speech.Recognition.GrammarBuilder[]">
          <Attributes>
            <Attribute>
              <AttributeName>System.ParamArray</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="semanticResultKey">Тег, который будет использоваться как семантический ключ для доступа к экземпляру <see cref="T:System.Speech.Recognition.SemanticValue" />, который связан с объектами <see cref="T:System.Speech.Recognition.GrammarBuilder" />, указанными в аргументе <c>builders</c>.</param>
        <param name="builders">Массив компонентов грамматики, которые будут связаны с объектом <see cref="T:System.Speech.Recognition.SemanticValue" />, доступным по тегу, который определен в <c>semanticResultKey</c>.</param>
        <summary>Присваивает семантический ключ одному или нескольким объектам <see cref="T:System.Speech.Recognition.GrammarBuilder" />, используемым для создания грамматики распознавания речи.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Из-за неявных преобразований `builders` поддерживает аргумент <xref:System.Speech.Recognition.SemanticResultValue>, <xref:System.Speech.Recognition.SemanticResultKey>, <xref:System.Speech.Recognition.Choices>, и <xref:System.String> объекты. Дополнительные сведения о неявных преобразованиях см. в разделе <xref:System.Speech.Recognition.GrammarBuilder.op_Implicit%2A>.  
  
 При выполнении операции распознавания, <xref:System.Speech.Recognition.GrammarBuilder> объектов `builders` аргумент, обрабатываются как последовательные. Например если следующие <xref:System.Speech.Recognition.SemanticResultValue> используется для создания <xref:System.Speech.Recognition.Grammar>, входные данные для механизма распознавания должен содержать слова «выпей» в последовательности для распознавания.  
  
```csharp  
SemanticResultKey stringTest=new SemanticResultKey(  
    "stringTest", new GrammarBuilder[] {  
    new GrammarBuilder("the"),  
    new GrammarBuilder("quick"),  
    new GrammarBuilder("brown"),  
    new GrammarBuilder("fox")});  
```  
  
 `semanticResultKey` Аргумент содержит тег, используемый для доступа к <xref:System.Speech.Recognition.SemanticValue> которого может быть возвращено.  
  
 <xref:System.Speech.Recognition.SemanticValue.Value%2A> Из <xref:System.Speech.Recognition.SemanticValue> определяется <xref:System.Speech.Recognition.GrammarBuilder> экземпляров, предоставляемые `builders` параметра.  
  
 Если <xref:System.Speech.Recognition.GrammarBuilder> объекты содержат определение экземпляры <xref:System.Speech.Recognition.SemanticResultValue>, значение <xref:System.Speech.Recognition.SemanticValue> — `null`.  
  
 Если <xref:System.Speech.Recognition.GrammarBuilder> объектами, предоставляемыми в `builders` параметр предоставляют непомеченный (не связанные с <xref:System.Speech.Recognition.SemanticResultKey> объекта) <xref:System.Speech.Recognition.SemanticResultValue> экземпляр, используемый с помощью логики распознавания, что экземпляр <xref:System.Speech.Recognition.SemanticResultValue> определим <xref:System.Speech.Recognition.SemanticValue.Value%2A>свойство <xref:System.Speech.Recognition.SemanticValue> , произведенной.  
  
 Должен быть один и только один untagged <xref:System.Speech.Recognition.SemanticResultValue> экземпляра в <xref:System.Speech.Recognition.GrammarBuilder> объекты, указанные по `builders` параметр. Если несколько экземпляров без тега <xref:System.Speech.Recognition.SemanticResultValue> связанных с <xref:System.Speech.Recognition.SemanticResultKey>, каждый попытается наборе значение <xref:System.Speech.Recognition.SemanticValue> полученных в результате распознавания. Это не допускается, а распознаватель возникает исключение при попытке использовать <xref:System.Speech.Recognition.Grammar> создан с помощью таких <xref:System.Speech.Recognition.SemanticResultKey> экземпляра.  
  
 Экземпляры <xref:System.Speech.Recognition.SemanticResultValue> содержащихся в <xref:System.Speech.Recognition.GrammarBuilder> объекты, указанные по `builders` параметр и уже связан с другим <xref:System.Speech.Recognition.SemanticResultKey> не влияют на текущий <xref:System.Speech.Recognition.SemanticResultKey> экземпляра.  
  
   
  
## Examples  
 В следующем примере создается <xref:System.Speech.Recognition.Grammar> распознавать ввод пароля в форме «пароль —...», где фактические входных данных сопоставляется с подстановочным знаком.  
  
 Подстановочный знак пометки <xref:System.Speech.Recognition.SpeechRecognizer> значение ключа которого имеет значение «Password». <xref:System.Speech.Recognition.Grammar.SpeechRecognized> Обработчик проверит наличие этого тега, получает аудио ввода пароля и проверяется пароль.  
  
```csharp  
private void pwdGrammar()   
{  
  GrammarBuilder pwdBuilder = new GrammarBuilder("My Password is");  
  GrammarBuilder wildcardBuilder = new GrammarBuilder();  
  wildcardBuilder.AppendWildcard();  
  SemanticResultKey wildcardKey= new SemanticResultKey("Password", wildcardBuilder);  
  pwdBuilder+=wildcardKey;  
  Grammar grammar = new Grammar(pwdBuilder);  
  grammar.Name = "Password input";  
  
  grammar.SpeechRecognized +=   
    delegate(object sender, SpeechRecognizedEventArgs eventArgs)   
    {  
      SemanticValue semantics = eventArgs.Result.Semantics;  
      RecognitionResult result=eventArgs.Result;  
  
      if (!semantics.ContainsKey("Password"))   
      {  
        SpeechUI.SendTextFeedback(eventArgs.Result, "No Password Provided", false);  
      }  
      else   
      {  
        RecognizedAudio pwdAudio = result.GetAudioForWordRange(  
                  result.Words[3],  
                  result.Words[result.Words.Count - 1]);  
                  MemoryStream pwdMemoryStream = new MemoryStream();  
                  pwdAudio.WriteToAudioStream(pwdMemoryStream);  
        if (!IsValidPwd(pwdMemoryStream))   
        {  
          string badPwd = System.IO.Path.GetTempPath() + "BadPwd" + (new Random()).Next().ToString() + ".wav";  
          FileStream waveStream = new FileStream(badPwd, FileMode.Create);    
          pwdAudio.WriteToWaveStream(waveStream);  
          waveStream.Flush();  
          waveStream.Close();  
          SpeechUI.SendTextFeedback(eventArgs.Result, "Invalid Password", false);      
        }  
      }  
    };  
  
  grammar.Enabled = true;  
  _recognizer.LoadGrammar(grammar);  
  UpdateGrammarTree(_grammarTreeView, _recognizer);  
  
}  
```  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public SemanticResultKey (string semanticResultKey, params string[] phrases);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(string semanticResultKey, string[] phrases) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Speech.Recognition.SemanticResultKey.#ctor(System.String,System.String[])" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (semanticResultKey As String, ParamArray phrases As String())" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; SemanticResultKey(System::String ^ semanticResultKey, ... cli::array &lt;System::String ^&gt; ^ phrases);" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="semanticResultKey" Type="System.String" />
        <Parameter Name="phrases" Type="System.String[]">
          <Attributes>
            <Attribute>
              <AttributeName>System.ParamArray</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="semanticResultKey">Тег, который будет использоваться для доступа к экземпляру <see cref="T:System.Speech.Recognition.SemanticValue" />, связанному с объектами <see cref="T:System.String" />, указанными в аргументе <c>phrases</c>.</param>
        <param name="phrases">Один или несколько объектов <see cref="T:System.String" />, сцепленный текст которых будет связан с объектом <see cref="T:System.Speech.Recognition.SemanticValue" />, доступ к которому осуществляется по тегу, определенному в <c>semanticResultKey</c>.</param>
        <summary>Присваивает семантический ключ одному или нескольким экземплярам <see cref="T:System.String" />, используемым для создания грамматики распознавания речи.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 При выполнении операции распознавания, <xref:System.String> объектов, используемых в `phrases` рассматриваются как последовательный. Например если следующие <xref:System.Speech.Recognition.SemanticResultValue> используется для создания <xref:System.Speech.Recognition.Grammar>, входные данные для механизма распознавания должен содержать слова «выпей» в последовательности для распознавания.  
  
```csharp  
SemanticResultKey stringTest=new SemanticResultKey("stringTest",   
                                new string[] {  
                                               "the",  
                                               "quick",  
                                               "brown",  
                                               "fox"});  
```  
  
 `semanticResultKey` Аргумент определяет ключ, используемый для доступа к <xref:System.Speech.Recognition.SemanticValue> которого может быть возвращено.  
  
 При построении <xref:System.Speech.Recognition.Grammar> с помощью <xref:System.Speech.Recognition.GrammarBuilder> , содержащий ключ семантики на основе массива объектов string <xref:System.Speech.Recognition.SemanticValue.Value%2A> из <xref:System.Speech.Recognition.SemanticValue> получаемую в результате операции распознавания будет строку, используемую при распознавании. В предыдущем примере, это означает, что <xref:System.Speech.Recognition.SemanticValue.Value%2A> бы «quick brown fox».  
  
   
  
## Examples  
 В следующем примере создается <xref:System.Speech.Recognition.Grammar> из <xref:System.Speech.Recognition.GrammarBuilder> объект, который использует <xref:System.Speech.Recognition.SemanticResultKey>, определяемый массивом <xref:System.String> объектов.  
  
 Механизм распознавания с помощью <xref:System.Speech.Recognition.Grammar> будет создан распознать фразу «цвет красный зеленый синий ноль». Семантика <xref:System.Speech.Recognition.RecognizedPhrase> возвращенных распознавания будет содержать <xref:System.Speech.Recognition.SemanticValue> с <xref:System.Speech.Recognition.SemanticValue.Value%2A> из «красный зеленый синий». Вы можете получить доступ к <xref:System.Speech.Recognition.SemanticValue> с помощью тега «code».  
  
 Из-за `SemanticResultValue("zero", 5)` к <xref:System.Speech.Recognition.GrammarBuilder>, корневой <xref:System.Speech.Recognition.SemanticValue> объекта в <xref:System.Speech.Recognition.RecognizedPhrase> будет иметь значение 5.  
  
```csharp  
private void keyTest()   
{  
  // Say "color red green blue zero"  
  GrammarBuilder gb = new GrammarBuilder("color") +  
                        new SemanticResultKey("code",   
                          (new string[] {"red", "green", "blue"})) +  
                        new SemanticResultValue("zero", 5);  
  Grammar g = new Grammar(gb);  
  g.Name = "keyTest";  
  _recognizer.LoadGrammar(g);  
}  
```  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ToGrammarBuilder">
      <MemberSignature Language="C#" Value="public System.Speech.Recognition.GrammarBuilder ToGrammarBuilder ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Speech.Recognition.GrammarBuilder ToGrammarBuilder() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Speech.Recognition.SemanticResultKey.ToGrammarBuilder" />
      <MemberSignature Language="VB.NET" Value="Public Function ToGrammarBuilder () As GrammarBuilder" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Speech::Recognition::GrammarBuilder ^ ToGrammarBuilder();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Speech.Recognition.GrammarBuilder</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Возвращает экземпляр <see cref="T:System.Speech.Recognition.GrammarBuilder" />, созданный из текущего <see cref="T:System.Speech.Recognition.SemanticResultKey" />.</summary>
        <returns>To be added.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Использование <xref:System.Speech.Recognition.SemanticResultValue.ToGrammarBuilder%2A> эквивалентно использованию <xref:System.Speech.Recognition.GrammarBuilder> конструктор, принимающий <xref:System.Speech.Recognition.SemanticResultKey> в качестве аргумента (<xref:System.Speech.Recognition.GrammarBuilder.%23ctor%28System.Speech.Recognition.SemanticResultKey%29>).  
  
   
  
## Examples  
 В следующем примере создается <xref:System.Speech.Recognition.Grammar> объект, который поддерживает команды, чтобы изменить цвет фона.  
  
 Объект <xref:System.Speech.Recognition.Choices> объекта (`colorChoice`) со списком параметров для цветов фона заполняется с помощью <xref:System.Speech.Recognition.Choices.Add%28System.Speech.Recognition.GrammarBuilder%5B%5D%29> метод с <xref:System.Speech.Recognition.GrammarBuilder> экземпляров. <xref:System.Speech.Recognition.GrammarBuilder> Экземпляры получаются через <xref:System.Speech.Recognition.SemanticResultKey.ToGrammarBuilder> метод <xref:System.Speech.Recognition.SemanticResultValue> объекты, созданные из цветных строк.  
  
 Объект <xref:System.Speech.Recognition.GrammarBuilder> затем получается путем вызова метода <xref:System.Speech.Recognition.SemanticResultKey.ToGrammarBuilder> на <xref:System.Speech.Recognition.SemanticResultKey> экземпляр, который будет использоваться для ключа семантической вариантов в `colorChoice`.  
  
```csharp  
  
private Grammar CreateGrammarBuilderRGBSemantics()   
{  
  
  // Create a set of choices, each a lookup from a color name to RGB.  
  // Choices constructors do not take SemanticResultValue parameters, so cast   
  // the SemanticResultValue to GrammarBuilder.  
  Choices colorChoice = new Choices();  
  foreach (string colorName in System.Enum.GetNames(typeof(KnownColor)))   
  {  
    SemanticResultValue colorValue=new SemanticResultValue(colorName, Color.FromName(colorName).ToArgb());  
  
    // Use implicit conversion of SemanticResultValue to GrammarBuilder.  
    colorChoice.Add(colorValue.ToGrammarBuilder());      
  }  
  SemanticResultKey choiceKey = new SemanticResultKey("rgb", colorChoice);  
  GrammarBuilder choiceBuilder = choiceKey.ToGrammarBuilder();  
  
  // Create two intermediate grammars with introductory phrase and the color choice.  
  GrammarBuilder makeBackgroundBuilder = "Make background";  
  makeBackgroundBuilder.Append(choiceBuilder);  
  
  GrammarBuilder configureBackgroundBuilder = new GrammarBuilder("Configure background as");  
  configureBackgroundBuilder.Append((new SemanticResultKey("rgb", colorChoice)).ToGrammarBuilder());  
  
  // Create the Grammar object, which recognizes either intermediate grammar.  
  Grammar grammar = new Grammar(new Choices(new GrammarBuilder[] {makeBackgroundBuilder, configureBackgroundBuilder}));  
  grammar.Name = "Make Background /Configure background as";  
  
  return grammar;  
}  
  
```  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>