<Type Name="TtsEngineSsml" FullName="System.Speech.Synthesis.TtsEngine.TtsEngineSsml">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="c80a1ca495dfe40157bf97e75246761ad6921d28" />
    <Meta Name="ms.sourcegitcommit" Value="6a0b904069161bbaec4ffd02aa7d9cf38c61e72e" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="ru-RU" />
    <Meta Name="ms.lasthandoff" Value="06/24/2018" />
    <Meta Name="ms.locfileid" Value="36408830" />
  </Metadata>
  <TypeSignature Language="C#" Value="public abstract class TtsEngineSsml" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi abstract beforefieldinit TtsEngineSsml extends System.Object" />
  <TypeSignature Language="DocId" Value="T:System.Speech.Synthesis.TtsEngine.TtsEngineSsml" />
  <TypeSignature Language="VB.NET" Value="Public MustInherit Class TtsEngineSsml" />
  <TypeSignature Language="C++ CLI" Value="public ref class TtsEngineSsml abstract" />
  <TypeSignature Language="F#" Value="type TtsEngineSsml = class" />
  <AssemblyInfo>
    <AssemblyName>System.Speech</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>Абстрактный базовый класс, который должен быть реализован всеми механизмами синтеза речи из текста.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Чтобы создать обработчик пользовательского преобразования текста в речь, приложение всегда должно реализовать класс, производный от абстрактного базового класса <xref:System.Speech.Synthesis.TtsEngine.TtsEngineSsml>.  
  
 Неправильно зарегистрирован реализация <xref:System.Speech.Synthesis.TtsEngine.TtsEngineSsml> может быть использован как синтезатора речи, <xref:System.Speech.Synthesis> приложений на основе пространства имен.  
  
 Наследование от объектов <xref:System.Speech.Synthesis.TtsEngine.TtsEngineSsml> необходимо переопределить следующие члены: <xref:System.Speech.Synthesis.TtsEngine.TtsEngineSsml.%23ctor%2A>, <xref:System.Speech.Synthesis.TtsEngine.TtsEngineSsml.AddLexicon%2A>, <xref:System.Speech.Synthesis.TtsEngine.TtsEngineSsml.RemoveLexicon%2A>, <xref:System.Speech.Synthesis.TtsEngine.TtsEngineSsml.GetOutputFormat%2A> и <xref:System.Speech.Synthesis.TtsEngine.TtsEngineSsml.Speak%2A>.  
  
 Самым важным элементом этого <xref:System.Speech.Synthesis.TtsEngine.TtsEngineSsml> класс для реализации <xref:System.Speech.Synthesis.TtsEngine.TtsEngineSsml.Speak%2A> метод.  
  
 <xref:System.Speech.Synthesis.TtsEngine.TtsEngineSsml.Speak%2A> Метод вызывается средством синтаксического анализа текста инфраструктур получения:  
  
1.  Ссылку на <xref:System.Speech.Synthesis.TtsEngine.ITtsEngineSite> интерфейс, который предоставляет доступ к службам системы, такие как даже очереди и записи звука выходных данных.  
  
2.  Массив <xref:System.Speech.Synthesis.TtsEngine.TextFragment> экземпляра, полученных из входных данных языка разметки синтеза речи (SSML). Помимо текста отображаются как речи синтаксический анализ SSML хранит сведения о запрошенных атрибутов речи в <xref:System.Speech.Synthesis.TtsEngine.FragmentState> экземпляр, связанный с каждой принимаемые <xref:System.Speech.Synthesis.TtsEngine.TextFragment> объекта.  
  
 Речевого синтезатора приложения при необходимости можно выполнять запросы для указанным выходным форматом, реализовав <xref:System.Speech.Synthesis.TtsEngine.TtsEngineSsml.GetOutputFormat%2A> вызываемый платформой при попытке предоставить правильные выходные звуковые данные.  
  
 Разработчик может также поддерживают управление внешние определения произношение или словари, с их реализации <xref:System.Speech.Synthesis.TtsEngine.TtsEngineSsml.AddLexicon%2A> и <xref:System.Speech.Synthesis.TtsEngine.TtsEngineSsml.RemoveLexicon%2A>.  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="protected TtsEngineSsml (string registryKey);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig specialname rtspecialname instance void .ctor(string registryKey) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Speech.Synthesis.TtsEngine.TtsEngineSsml.#ctor(System.String)" />
      <MemberSignature Language="VB.NET" Value="Protected Sub New (registryKey As String)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; TtsEngineSsml(System::String ^ registryKey);" />
      <MemberSignature Language="F#" Value="new System.Speech.Synthesis.TtsEngine.TtsEngineSsml : string -&gt; System.Speech.Synthesis.TtsEngine.TtsEngineSsml" Usage="new System.Speech.Synthesis.TtsEngine.TtsEngineSsml registryKey" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="registryKey" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="registryKey">Полное имя раздела реестра для токена голоса, связанного с реализацией <see cref="T:System.Speech.Synthesis.TtsEngine.TtsEngineSsml" />. обработчик.</param>
        <summary>Создает новый экземпляр <see cref="T:System.Speech.Synthesis.TtsEngine.TtsEngineSsml" /> на основе соответствующего раздела реестра токена голоса.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Вызывает этот конструктор обычно создаются путем <xref:System.Speech.Synthesis> приложений, выбрав синтезатора речи для использования экземпляром служб на основе <xref:System.Speech.Synthesis.SpeechSynthesizer>.  
  
 Объект <xref:System.Speech.Synthesis.TtsEngine.TtsEngineSsml> должен быть регистром в HKEY_LOCAL_MACHINE\SOFTWARE\Microsoft\Speech\Voices\Tokens.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="AddLexicon">
      <MemberSignature Language="C#" Value="public abstract void AddLexicon (Uri uri, string mediaType, System.Speech.Synthesis.TtsEngine.ITtsEngineSite site);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void AddLexicon(class System.Uri uri, string mediaType, class System.Speech.Synthesis.TtsEngine.ITtsEngineSite site) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Speech.Synthesis.TtsEngine.TtsEngineSsml.AddLexicon(System.Uri,System.String,System.Speech.Synthesis.TtsEngine.ITtsEngineSite)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; abstract void AddLexicon(Uri ^ uri, System::String ^ mediaType, System::Speech::Synthesis::TtsEngine::ITtsEngineSite ^ site);" />
      <MemberSignature Language="F#" Value="abstract member AddLexicon : Uri * string * System.Speech.Synthesis.TtsEngine.ITtsEngineSite -&gt; unit" Usage="ttsEngineSsml.AddLexicon (uri, mediaType, site)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="uri" Type="System.Uri" />
        <Parameter Name="mediaType" Type="System.String" />
        <Parameter Name="site" Type="System.Speech.Synthesis.TtsEngine.ITtsEngineSite" />
      </Parameters>
      <Docs>
        <param name="uri">Допустимый экземпляр <see langword="System.Uri" />, указывающий местоположение информации о словарях.</param>
        <param name="mediaType">Строка, содержащая тип мультимедиа лексикона. Типы мультимедиа не учитывают регистр.</param>
        <param name="site">Ссылка на интерфейс <see cref="T:System.Speech.Synthesis.TtsEngine.ITtsEngineSite" />, используемый для взаимодействия с инфраструктурой платформы.</param>
        <summary>Добавляет лексикон к объекту <see langword="Synthesizer" /><see langword="Voice" />, реализованному текущим экземпляром <see cref="T:System.Speech.Synthesis.TtsEngine.TtsEngineSsml" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Лексики произношение — это совокупность слов или фраз, а также их произношения, заданные с помощью соответствующих произношение буквой.  
  
 Обычно этот метод вызывается инфраструктурой платформы в ответ на <xref:System.Speech.Synthesis> зависимости приложения, вызывающие <xref:System.Speech.Synthesis.TtsEngine.TtsEngineSsml.AddLexicon%2A> и с помощью синтезатора речи, реализуемый текущего <xref:System.Speech.Synthesis.TtsEngine.TtsEngineSsml> экземпляра.  
  
 Значение `mediaType` — обычно спецификация MIME, как в спецификации SSML используется MIME для спецификаций носителя.  
  
   
  
## Examples  
 Реализация <xref:System.Speech.Synthesis.TtsEngine.TtsEngineSsml.AddLexicon%2A> использует <xref:System.Speech.Synthesis.TtsEngine.ITtsEngineSite> переданный интерфейс для загрузки лексики из ресурса. Затем сохраняет `System.IO.Stream` для лексики в `System.Collections.Generic.Dictionary` экземпляра, индексированный по лексики URI.  
  
```  
public static Dictionary<Uri, Stream> _aLexicons = new Dictionary<Uri, Stream>();  
  
 public void AddLexicon(Uri uri, string mediaType, ITtsEngineSite site) {  
    Stream stream = site.LoadResource(uri, mediaType);  
    _aLexicons.Add(uri, stream);  
}  
  
 public void RemoveLexicon(Uri uri, ITtsEngineSite site) {  
     Stream stream;  
     if (_aLexicons.TryGetValue(uri, out stream)) {  
         stream.Close();  
         _aLexicons.Remove(uri);  
     }  
}  
  
```  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides">
          <para>Отвечает реализации полностью знание и обрабатывать лексики, хранящиеся в <paramref name="uri" />. Реализация необходимо также отслеживать и управлять временем жизни всех словари, которые он добавляет.</para>
        </block>
      </Docs>
    </Member>
    <Member MemberName="GetOutputFormat">
      <MemberSignature Language="C#" Value="public abstract IntPtr GetOutputFormat (System.Speech.Synthesis.TtsEngine.SpeakOutputFormat speakOutputFormat, IntPtr targetWaveFormat);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance native int GetOutputFormat(valuetype System.Speech.Synthesis.TtsEngine.SpeakOutputFormat speakOutputFormat, native int targetWaveFormat) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Speech.Synthesis.TtsEngine.TtsEngineSsml.GetOutputFormat(System.Speech.Synthesis.TtsEngine.SpeakOutputFormat,System.IntPtr)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; abstract IntPtr GetOutputFormat(System::Speech::Synthesis::TtsEngine::SpeakOutputFormat speakOutputFormat, IntPtr targetWaveFormat);" />
      <MemberSignature Language="F#" Value="abstract member GetOutputFormat : System.Speech.Synthesis.TtsEngine.SpeakOutputFormat * nativeint -&gt; nativeint" Usage="ttsEngineSsml.GetOutputFormat (speakOutputFormat, targetWaveFormat)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IntPtr</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="speakOutputFormat" Type="System.Speech.Synthesis.TtsEngine.SpeakOutputFormat" />
        <Parameter Name="targetWaveFormat" Type="System.IntPtr" />
      </Parameters>
      <Docs>
        <param name="speakOutputFormat">Допустимый член перечисления <see cref="T:System.Speech.Synthesis.TtsEngine.SpeakOutputFormat" />, указывающий тип запрошенного формата аудиовывода.</param>
        <param name="targetWaveFormat">Указатель на структуру <see langword="struct" />, содержащую сведения о типе звукового формата, запрошенном аргументом <c>speakOutputFormat</c>.</param>
        <summary>Возвращает максимально точного соответствующие звуковые выходные данные, поддерживаемые данным ответом механизма синтеза на запрос к механизму синтеза на поддержку определенного формата вывода.</summary>
        <returns>Возвращает допустимый экземпляр <see langword="IntPtr" /> при ссылке на <see langword="struct" />, содержащий подробные сведения о формате вывода.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Структура, используемая как `targetWaveFormat` и вернул метод должен быть совместим с `WAVEFORMATEX` доступен в разделе SAPI, и возвращаемое значение должны быть оборудованы с помощью `CoTaskMemAlloc`.  
  
 `struct` Необходимо предоставить эквивалентно функциональные возможности:  
  
```  
internal struct WaveFormat  
{  
    public Int16 FormatTag;  
    public Int16 Channels;  
    public int SamplesPerSec;  
    public int AvgBytesPerSec;  
    public Int16 BlockAlign;  
    public Int16 BitsPerSample;  
    public Int16 Size;  
}  
```  
  
   
  
## Examples  
 Реализация образца ниже проверяет выбранных входных параметров, их использование, если они находятся в пределах, в противном случае — с использованием значений по умолчанию.  
  
```  
public IntPtr GetOutputFormat(SpeakOutputFormat format, IntPtr targetWaveFormat) {  
    WaveFormat waveFormat = new WaveFormat();  
    WaveFormat rq=new WaveFormat();  
    Marshal.PtrToStructure(targetWaveFormat,rq);  
  
    waveFormat.AvgBytesPerSec = AvgBytesPerSec Min < rq.AvgBytesPerSec && rq.AvgBytesPerSec < AvgBytesPerSecMax? rq.AvgBytesPerSec : 3200;  
    waveFormat.BitsPerSample = BitsPerSampleMin < rq.AvgBytesPerSec && rq.BitsPerSample < BitsPerSampleMax ? rq.AvgBytesPerSec : 3200; 16;  
    waveFormat.BlockAlign = 2;  
    waveFormat.Channels = 1;  
    waveFormat.FormatTag = 1;  
    waveFormat.SamplesPerSec = 16000;  
    waveFormat.Size = 0;  
  
    IntPtr wfx = Marshal.AllocCoTaskMem(Marshal.SizeOf(waveFormat));  
    Marshal.StructureToPtr(waveFormat, wfx, false);  
  
    //Console.WriteLine ("GetOutputFormat called");  
    return wfx;  
}  
internal struct WaveFormat {  
    public Int16 FormatTag;  
    public Int16 Channels;  
    public int SamplesPerSec;  
    public int AvgBytesPerSec;  
    public Int16 BlockAlign;  
    public Int16 BitsPerSample;  
    public Int16 Size;  
}  
```  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides">
          <para>Объект, наследуемый от <see cref="T:System.Speech.Synthesis.TtsEngine.TtsEngineSsml" /> следует изучить запрошенного выходного формата в соответствии с <paramref name="targetWaveFormat" /> и возвращает ближайший формат, который он поддерживает.</para>
        </block>
      </Docs>
    </Member>
    <Member MemberName="RemoveLexicon">
      <MemberSignature Language="C#" Value="public abstract void RemoveLexicon (Uri uri, System.Speech.Synthesis.TtsEngine.ITtsEngineSite site);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void RemoveLexicon(class System.Uri uri, class System.Speech.Synthesis.TtsEngine.ITtsEngineSite site) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Speech.Synthesis.TtsEngine.TtsEngineSsml.RemoveLexicon(System.Uri,System.Speech.Synthesis.TtsEngine.ITtsEngineSite)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; abstract void RemoveLexicon(Uri ^ uri, System::Speech::Synthesis::TtsEngine::ITtsEngineSite ^ site);" />
      <MemberSignature Language="F#" Value="abstract member RemoveLexicon : Uri * System.Speech.Synthesis.TtsEngine.ITtsEngineSite -&gt; unit" Usage="ttsEngineSsml.RemoveLexicon (uri, site)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="uri" Type="System.Uri" />
        <Parameter Name="site" Type="System.Speech.Synthesis.TtsEngine.ITtsEngineSite" />
      </Parameters>
      <Docs>
        <param name="uri">Допустимый экземпляр <see langword="System.Uri" />, указывающий местоположение информации о словарях.</param>
        <param name="site">Ссылка на интерфейс <see cref="T:System.Speech.Synthesis.TtsEngine.ITtsEngineSite" /> передаваемые в инфраструктуре платформы, чтобы разрешить доступ к ресурсам инфраструктуры.</param>
        <summary>Удаляет лексикон, загруженный в данный момент объектом <see langword="Synthesizer" /><see langword="Voice" />, который реализуется текущим экземпляром <see cref="T:System.Speech.Synthesis.TtsEngine.TtsEngineSsml" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Лексики произношение — это совокупность слов или фраз, а также их произношения, заданные с помощью соответствующих произношение буквой.  
  
 Этот метод обычно вызывается в ответ на <xref:System.Speech.Synthesis> зависимости приложения, вызывающие <xref:System.Speech.Synthesis.SpeechSynthesizer.RemoveLexicon%2A> и с помощью синтезатора речи, реализуемый текущего <xref:System.Speech.Synthesis.TtsEngine.TtsEngineSsml> экземпляра.  
  
   
  
## Examples  
 Реализация <xref:System.Speech.Synthesis.TtsEngine.TtsEngineSsml.RemoveLexicon%2A> использует лексики URI для запроса к экземпляру `System.Collections.Generic.Dictionary` для `System.IO.Stream`, закрывает поток и удаляет uri, ссылающийся на правила.  
  
```  
public static Dictionary<Uri, Stream> _aLexicons = new Dictionary<Uri, Stream>();  
  
 public void AddLexicon(Uri uri, string mediaType, ITtsEngineSite site) {  
    Stream stream = site.LoadResource(uri, mediaType);  
    _aLexicons.Add(uri, stream);  
}  
  
 public void RemoveLexicon(Uri uri, ITtsEngineSite site) {  
     Stream stream;  
     if (_aLexicons.TryGetValue(uri, out stream)) {  
         stream.Close();  
         _aLexicons.Remove(uri);  
     }  
}  
```  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides">
          <para>Отвечает реализации полностью знание и обрабатывать лексики, хранящиеся в <paramref name="uri" />. Реализация необходимо также отслеживать и управлять временем жизни всех словари, которые она удаляет.</para>
        </block>
      </Docs>
    </Member>
    <Member MemberName="Speak">
      <MemberSignature Language="C#" Value="public abstract void Speak (System.Speech.Synthesis.TtsEngine.TextFragment[] fragment, IntPtr waveHeader, System.Speech.Synthesis.TtsEngine.ITtsEngineSite site);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Speak(class System.Speech.Synthesis.TtsEngine.TextFragment[] fragment, native int waveHeader, class System.Speech.Synthesis.TtsEngine.ITtsEngineSite site) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Speech.Synthesis.TtsEngine.TtsEngineSsml.Speak(System.Speech.Synthesis.TtsEngine.TextFragment[],System.IntPtr,System.Speech.Synthesis.TtsEngine.ITtsEngineSite)" />
      <MemberSignature Language="VB.NET" Value="Public MustOverride Sub Speak (fragment As TextFragment(), waveHeader As IntPtr, site As ITtsEngineSite)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; abstract void Speak(cli::array &lt;System::Speech::Synthesis::TtsEngine::TextFragment ^&gt; ^ fragment, IntPtr waveHeader, System::Speech::Synthesis::TtsEngine::ITtsEngineSite ^ site);" />
      <MemberSignature Language="F#" Value="abstract member Speak : System.Speech.Synthesis.TtsEngine.TextFragment[] * nativeint * System.Speech.Synthesis.TtsEngine.ITtsEngineSite -&gt; unit" Usage="ttsEngineSsml.Speak (fragment, waveHeader, site)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="fragment" Type="System.Speech.Synthesis.TtsEngine.TextFragment[]" />
        <Parameter Name="waveHeader" Type="System.IntPtr" />
        <Parameter Name="site" Type="System.Speech.Synthesis.TtsEngine.ITtsEngineSite" />
      </Parameters>
      <Docs>
        <param name="fragment">Массив экземпляров <see cref="T:System.Speech.Synthesis.TtsEngine.TextFragment" />, содержащих текст для преобразования в речь.</param>
        <param name="waveHeader">
          <see langword="IntPtr" />, указывающий на структуру, содержащую формат аудиовыхода.</param>
        <param name="site">Ссылка на интерфейс <see cref="T:System.Speech.Synthesis.TtsEngine.ITtsEngineSite" /> передаваемые в инфраструктуре платформы, чтобы разрешить доступ к ресурсам инфраструктуры.</param>
        <summary>Отрисовывает указанный массив <see cref="T:System.Speech.Synthesis.TtsEngine.TextFragment" /> в указанном формате вывода.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Структура, используемая как `waveHeader` и вернул метод должен быть совместим с `WAVEFORMATEX` доступен в разделе SAPI.  
  
 `struct` Необходимо предоставить эквивалентно функциональные возможности:  
  
```  
internal struct WaveFormat  
{  
    public Int16 FormatTag;  
    public Int16 Channels;  
    public int SamplesPerSec;  
    public int AvgBytesPerSec;  
    public Int16 BlockAlign;  
    public Int16 BitsPerSample;  
    public Int16 Size;  
}  
```  
  
   
  
## Examples  
 Ниже приведен пример часть реализации синтеза речи пользовательских наследование от <xref:System.Speech.Synthesis.TtsEngine.TtsEngineSsml>и с помощью использование <xref:System.Speech.Synthesis.TtsEngine.TextFragment>, <xref:System.Speech.Synthesis.TtsEngine.SpeechEventInfo>, <xref:System.Speech.Synthesis.TtsEngine.FragmentState>, и <xref:System.Speech.Synthesis.TtsEngine.TtsEventId>  
  
 Реализация <xref:System.Speech.Synthesis.TtsEngine.TtsEngineSsml.Speak%2A>  
  
1.  Получает массив <xref:System.Speech.Synthesis.TtsEngine.TextFragment> экземпляров и создает новый массив <xref:System.Speech.Synthesis.TtsEngine.TextFragment> экземпляры должны быть переданы `Speak` метода для базового механизма синтеза.  
  
2.  Если <xref:System.Speech.Synthesis.TtsEngine.TtsEngineAction> , найдено значение перечисления из <xref:System.Speech.Synthesis.TtsEngine.FragmentState.Action%2A> свойство <xref:System.Speech.Synthesis.TtsEngine.FragmentState> возвращенных <xref:System.Speech.Synthesis.TtsEngine.TextFragment.State%2A> каждого экземпляра <xref:System.Speech.Synthesis.TtsEngine.TextFragment> экземпляр <xref:System.Speech.Synthesis.TtsEngine.TtsEngineAction.Speak>, реализация  
  
    -   Преобразует Americanism для Britishisms в Произносимый текст.  
  
    -   Если <xref:System.Speech.Synthesis.TtsEngine.ITtsEngineSite.EventInterest%2A> свойство <xref:System.Speech.Synthesis.TtsEngine.ITtsEngineSite> интерфейсов, предоставляемых для поддержки реализации <xref:System.Speech.Synthesis.TtsEngine.TtsEventId.WordBoundary> тип события <xref:System.Speech.Synthesis.TtsEngine.SpeechEventInfo> позволяет создать событие для диска индикатор синтезатора создается экземпляр.  
  
3.  Затем вызывается механизм визуализации речи с измененной <xref:System.Speech.Synthesis.TtsEngine.TextFragment> массива.  
  
```  
private const int WordBoundaryFlag = 1 << (int)TtsEventId.WordBoundary;  
private readonly char[] spaces = new char[] { ' ', '\t', '\r', '\n' };  
internal struct UsVsUk  
{  
  internal string UK;  
  internal string US;  
}  
  
override public void Speak (TextFragment [] frags, IntPtr wfx, ITtsEngineSite site)  
{  
  TextFragment [] newFrags=new TextFragment[frags.Length];  
  
  for (int i=0;i<frags.Length;i++){  
    newFrags[i].State=frags[i].State;  
    //truncate  
    newFrags[i].TextToSpeak = frags[i].TextToSpeak.Substring(frags[i].TextOffset,  
                               frags[i].TextLength);  
    newFrags[i].TextLength = newFrags[i].TextToSpeak.Length;  
    newFrags[i].TextOffset = 0;  
    if (newFrags[i].State.Action == TtsEngineAction.Speak) {  
      //Us to UK conversion  
      foreach (UsVsUk term in TransList) {  
      newFrags[i].TextToSpeak.Replace(term.US, term.UK);  
      }  
      //Generate progress meter events if supported  
      if ((site.EventInterest & WordBoundaryFlag) != 0) {  
      string[] subs = newFrags[i].TextToSpeak.Split(spaces);  
  
      foreach (string s in subs) {  
        int offset = newFrags[i].TextOffset;  
        SpeechEventInfo spEvent = new SpeechEventInfo((Int16)TtsEventId.WordBoundary,   
                (Int16)EventParameterType.Undefined,   
                 s.Length, new IntPtr(offset));  
        offset += s.Length;  
        if (s.Trim().Length > 0) {  
          SpeechEventInfo[] events = new SpeechEventInfo[1];  
          events[0] = spEvent;  
          site.AddEvents(events, 1);  
        }  
      }  
      }  
    }  
  }  
    _baseSynthesize.Speak(newFrags, wfx, site);  
  
}  
```  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides">
          <para>Реализует синтезаторов речи пользовательских с использованием <see cref="T:System.Speech.Synthesis.TtsEngine.TtsEngineSsml" /> и <see cref="M:System.Speech.Synthesis.TtsEngine.TtsEngineSsml.Speak(System.Speech.Synthesis.TtsEngine.TextFragment[],System.IntPtr,System.Speech.Synthesis.TtsEngine.ITtsEngineSite)" /> работают как фильтры или посредников между приложениями синтезатора создано с помощью инфраструктуры платформы по членам <see cref="N:System.Speech.Synthesis" /> пространства имен и базовой системы синтеза речи.  Объект <see cref="M:System.Speech.Synthesis.TtsEngine.TtsEngineSsml.Speak(System.Speech.Synthesis.TtsEngine.TextFragment[],System.IntPtr,System.Speech.Synthesis.TtsEngine.ITtsEngineSite)" /> реализации: 1.  Перехватывает или изменять аспекты входящего <see cref="T:System.Speech.Synthesis.TtsEngine.TextFragment" /> объектов 2.  Создает все необходимые события с помощью ссылки сайта <see cref="T:System.Speech.Synthesis.TtsEngine.ITtsEngineSite" /> 3 экземпляра.  Создает фактические синтезированную речь.  Создание речи чаще всего выполнено путем вызова <c>Speak</c> на речи, Подготовка к просмотру ядер, предоставляемые операционной системой.  Если один из доступных речи подготовки отчетов не используется, объект, наследуемый от <see cref="T:System.Speech.Synthesis.TtsEngine.TtsEngineSsml" /> необходимо создать собственный модуль подготовки отчетов речи.  Доступ к <c>Speak</c> метод полученного с помощью реестра и отражение.  При наследовании от <see cref="T:System.Speech.Synthesis.TtsEngine.TtsEngineSsml" />, необходимо переопределить следующие члены: <see cref="M:System.Speech.Synthesis.TtsEngine.TtsEngineSsml.#ctor(System.String)" />, <see cref="M:System.Speech.Synthesis.TtsEngine.TtsEngineSsml.AddLexicon(System.Uri,System.String,System.Speech.Synthesis.TtsEngine.ITtsEngineSite)" />, <see cref="M:System.Speech.Synthesis.TtsEngine.TtsEngineSsml.RemoveLexicon(System.Uri,System.Speech.Synthesis.TtsEngine.ITtsEngineSite)" />, <see cref="M:System.Speech.Synthesis.TtsEngine.TtsEngineSsml.GetOutputFormat(System.Speech.Synthesis.TtsEngine.SpeakOutputFormat,System.IntPtr)" />, и <see cref="M:System.Speech.Synthesis.TtsEngine.TtsEngineSsml.Speak(System.Speech.Synthesis.TtsEngine.TextFragment[],System.IntPtr,System.Speech.Synthesis.TtsEngine.ITtsEngineSite)" />.</para>
        </block>
      </Docs>
    </Member>
  </Members>
</Type>