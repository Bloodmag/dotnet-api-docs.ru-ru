<Type Name="Group" FullName="System.Text.RegularExpressions.Group">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="bc532af15db92579ba54d48945294a88689c0807" />
    <Meta Name="ms.sourcegitcommit" Value="6a0b904069161bbaec4ffd02aa7d9cf38c61e72e" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="ru-RU" />
    <Meta Name="ms.lasthandoff" Value="06/24/2018" />
    <Meta Name="ms.locfileid" Value="36408297" />
  </Metadata>
  <TypeSignature Language="C#" Value="public class Group : System.Text.RegularExpressions.Capture" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi serializable beforefieldinit Group extends System.Text.RegularExpressions.Capture" />
  <TypeSignature Language="DocId" Value="T:System.Text.RegularExpressions.Group" />
  <TypeSignature Language="VB.NET" Value="Public Class Group&#xA;Inherits Capture" />
  <TypeSignature Language="C++ CLI" Value="public ref class Group : System::Text::RegularExpressions::Capture" />
  <TypeSignature Language="F#" Value="type Group = class&#xA;    inherit Capture" />
  <AssemblyInfo>
    <AssemblyName>System.Text.RegularExpressions</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.10.0</AssemblyVersion>
    <AssemblyVersion>4.1.0.0</AssemblyVersion>
    <AssemblyVersion>4.1.1.0</AssemblyVersion>
    <AssemblyVersion>4.2.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.1.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>System</AssemblyName>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Text.RegularExpressions.Capture</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>Представляет результаты из одной группы записи.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Группа захвата может захватить ноль, один или более строк в одном сопоставлении из-за квантификаторы. (Дополнительные сведения см. в разделе [квантификаторы](~/docs/standard/base-types/quantifiers-in-regular-expressions.md).) Все подстрок, соответствующих одной группы записи доступны из <xref:System.Text.RegularExpressions.Group.Captures%2A?displayProperty=nameWithType> свойство. Сведения о последней записанной подстроке может осуществляться непосредственно из `Value` и `Index` свойства. (Это, <xref:System.Text.RegularExpressions.Group> экземпляр эквивалентен последнему элементу коллекции, возвращенной <xref:System.Text.RegularExpressions.Group.Captures%2A> свойство, которое отражает последней записью захватываемой группы.)  
  
 Пример позволяет прояснить это отношение между <xref:System.Text.RegularExpressions.Group> объекта и <xref:System.Text.RegularExpressions.CaptureCollection?displayProperty=nameWithType> , возвращаемый <xref:System.Text.RegularExpressions.Group.Captures%2A> свойство. Шаблон регулярного выражения `(\b(\w+?)[,:;]?\s?)+[?.!]` соответствует всему предложению. Определение регулярного выражения показано в следующей таблице.  
  
|Шаблон|Описание:|  
|-------------|-----------------|  
|`\b`|Совпадение должно начинаться на границе слова.|  
|`(\w+?)`|Соответствует одному или нескольким символам слова (как можно меньшему количеству). Это вторая группа записи (внутренний). (Первая группа захвата включает `\b` элемент языка.)|  
|`[,:;]?`|Совпадение с нулем или одним вхождением запятой, запятой или точкой с запятой.|  
|`\s?`|Совпадение вхождением ноль или один символ пробела.|  
|`(\b(\w+?)[,:;]?\s?)+`|Совпадение с шаблоном, состоящий из границы слова, одной или несколькими символами слова, знак пунктуации и пробел один или несколько раз. Это первая группа записи.|  
|`[?.!]`|Сопоставление вхождения периода, вопросительным знаком или восклицательным знаком.|  
  
 В этом шаблоне регулярного выражения, подшаблону `(\w+?)` соответствует несколько слов в предложении. Тем не менее значение <xref:System.Text.RegularExpressions.Group> объект представляет только для последнего соответствовал `(\w+?)` перехватывает, в то время как <xref:System.Text.RegularExpressions.Group.Captures%2A> возвращает <xref:System.Text.RegularExpressions.CaptureCollection> , представляющий все выделенного текста. Как показывает вывод, <xref:System.Text.RegularExpressions.CaptureCollection> второй захватываемой группой содержит четыре объекта. Последний из них соответствует <xref:System.Text.RegularExpressions.Group> объекта.  
  
 [!code-csharp[System.Text.RegularExpressions.Group.Class#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.text.regularexpressions.group.class/cs/groupandcaptures1.cs#1)]
 [!code-vb[System.Text.RegularExpressions.Group.Class#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.text.regularexpressions.group.class/vb/groupandcaptures1.vb#1)]  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName="Captures">
      <MemberSignature Language="C#" Value="public System.Text.RegularExpressions.CaptureCollection Captures { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Text.RegularExpressions.CaptureCollection Captures" />
      <MemberSignature Language="DocId" Value="P:System.Text.RegularExpressions.Group.Captures" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Captures As CaptureCollection" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Text::RegularExpressions::CaptureCollection ^ Captures { System::Text::RegularExpressions::CaptureCollection ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.Captures : System.Text.RegularExpressions.CaptureCollection" Usage="System.Text.RegularExpressions.Group.Captures" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.RegularExpressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Text.RegularExpressions.CaptureCollection</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Получает коллекцию всех записей, соответствующих группе записи, в порядке, в котором первыми расположены внутренние слева направо (или внутренние справа налево, если регулярное выражение изменено с помощью параметра <see cref="F:System.Text.RegularExpressions.RegexOptions.RightToLeft" />). Коллекция может иметь ноль и более элементов.</summary>
        <value>Коллекция подстрок, соответствующих группе.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Если квантификатор не применяется к записи в группу, в коллекцию, возвращаемую <xref:System.Text.RegularExpressions.Group.Captures%2A> свойства содержит один <xref:System.Text.RegularExpressions.Capture> объект, предоставляющий сведения о той же подстроки, как <xref:System.Text.RegularExpressions.Group> объект. Это показано в следующем примере: Он определяет регулярное выражение, `\b(\w+)\b`, что извлекает один word из предложения. <xref:System.Text.RegularExpressions.Group> Объект захватывает слово «This» и одного объекта в <xref:System.Text.RegularExpressions.CaptureCollection> содержит сведения о то же выделение.  
  
 [!code-csharp[System.Text.RegularExpressions.Group.Captures#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.text.regularexpressions.group.captures/cs/captures1.cs#1)]
 [!code-vb[System.Text.RegularExpressions.Group.Captures#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.text.regularexpressions.group.captures/vb/captures1.vb#1)]  
  
 Реальные программы для <xref:System.Text.RegularExpressions.Group.Captures%2A> свойства возникает, когда захватываемой группе применяется квантификатор, чтобы группа захватывает несколько подстрок одним регулярным выражением. В этом случае <xref:System.Text.RegularExpressions.Group> объект содержит сведения о последней выделенной подстроке, тогда как <xref:System.Text.RegularExpressions.Group.Captures%2A> свойство содержит сведения о подстроках, группой. В следующем примере регулярное выражение `\b(\w+\s*)+\.` соответствует всему предложению, которое оканчивается точкой. Группы `(\w+\s*)+` выделяет отдельные слова в коллекции. Поскольку <xref:System.Text.RegularExpressions.Group> коллекция содержит сведения только о последней выделенной подстроке, он получает последнее слово в предложении «предложение». Тем не менее, каждое слово группой доступен из коллекции, возвращенной <xref:System.Text.RegularExpressions.Group.Captures%2A> свойство.  
  
 [!code-csharp[System.Text.RegularExpressions.Group.Captures#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.text.regularexpressions.group.captures/cs/captures2.cs#2)]
 [!code-vb[System.Text.RegularExpressions.Group.Captures#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.text.regularexpressions.group.captures/vb/captures2.vb#2)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Name">
      <MemberSignature Language="C#" Value="public string Name { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string Name" />
      <MemberSignature Language="DocId" Value="P:System.Text.RegularExpressions.Group.Name" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Name As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ Name { System::String ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.Name : string" Usage="System.Text.RegularExpressions.Group.Name" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.RegularExpressions</AssemblyName>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Возвращает имя захватываемой группы, представляемое текущим экземпляром.</summary>
        <value>Имя захватываемой группы, представляемое текущим экземпляром.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Success">
      <MemberSignature Language="C#" Value="public bool Success { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool Success" />
      <MemberSignature Language="DocId" Value="P:System.Text.RegularExpressions.Group.Success" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Success As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool Success { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.Success : bool" Usage="System.Text.RegularExpressions.Group.Success" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.RegularExpressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Получает значение, указывающее на то, успешно ли совпадение.</summary>
        <value>Значение <see langword="true" />, если совпадение успешно, иначе значение <see langword="false" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 `Success` Имеет значение true, если хотя бы одна строка была записана этой группы. Это эквивалентно логическое выражение (Group.Captures.Count > 0).  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Synchronized">
      <MemberSignature Language="C#" Value="public static System.Text.RegularExpressions.Group Synchronized (System.Text.RegularExpressions.Group inner);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Text.RegularExpressions.Group Synchronized(class System.Text.RegularExpressions.Group inner) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.RegularExpressions.Group.Synchronized(System.Text.RegularExpressions.Group)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Synchronized (inner As Group) As Group" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Text::RegularExpressions::Group ^ Synchronized(System::Text::RegularExpressions::Group ^ inner);" />
      <MemberSignature Language="F#" Value="static member Synchronized : System.Text.RegularExpressions.Group -&gt; System.Text.RegularExpressions.Group" Usage="System.Text.RegularExpressions.Group.Synchronized inner" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Text.RegularExpressions</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Text.RegularExpressions.Group</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="inner" Type="System.Text.RegularExpressions.Group" />
      </Parameters>
      <Docs>
        <param name="inner">Входной объект <see cref="T:System.Text.RegularExpressions.Group" />.</param>
        <summary>Возвращает объект <see langword="Group" />, эквивалентный тому из предоставленных, который можно безопасно разделить между несколькими потоками.</summary>
        <returns>Объект регулярного выражения <see langword="Group" />.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">Свойство <paramref name="inner" /> имеет значение <see langword="null" />.</exception>
      </Docs>
    </Member>
  </Members>
</Type>