<Type Name="RegexCompilationInfo" FullName="System.Text.RegularExpressions.RegexCompilationInfo">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="731a068feb7a24b5a370b0ee36313a7a143e71c7" />
    <Meta Name="ms.sourcegitcommit" Value="d31dc2ede16f6f7bc64e90d9f897ff54c4e3869b" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="ru-RU" />
    <Meta Name="ms.lasthandoff" Value="04/03/2018" />
    <Meta Name="ms.locfileid" Value="30530208" />
  </Metadata>
  <TypeSignature Language="C#" Value="public class RegexCompilationInfo" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi serializable beforefieldinit RegexCompilationInfo extends System.Object" />
  <TypeSignature Language="DocId" Value="T:System.Text.RegularExpressions.RegexCompilationInfo" />
  <TypeSignature Language="VB.NET" Value="Public Class RegexCompilationInfo" />
  <TypeSignature Language="C++ CLI" Value="public ref class RegexCompilationInfo" />
  <AssemblyInfo>
    <AssemblyName>System</AssemblyName>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>System.Text.RegularExpressions</AssemblyName>
    <AssemblyVersion>4.2.1.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>Представляет сведения о регулярном выражении, используемые для компиляции регулярного выражения в отдельную сборку.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Массив <xref:System.Text.RegularExpressions.RegexCompilationInfo> объектов передается <xref:System.Text.RegularExpressions.Regex.CompileToAssembly%2A> метод для предоставления сведений о каждой регулярных выражений должны быть включены в сборку. Каждое скомпилированное регулярное выражение, которое включено в сборке представлено как класс, производный от <xref:System.Text.RegularExpressions.Regex>. Свойства <xref:System.Text.RegularExpressions.RegexCompilationInfo> определение типа, имя класса регулярного выражения, его полное имя (то есть, его пространство имен и имя его типа), шаблон регулярного выражения, дополнительные параметры (например, является ли регулярное выражение без учета регистра) и интервала времени ожидания, которое указывает, как долго обработчик регулярных выражений поиска соответствия.  
  
 Можно создать экземпляр <xref:System.Text.RegularExpressions.RegexCompilationInfo> , вызывая его перегруженный конструктор.  
  
 ]]></format>
    </remarks>
    <altmember cref="Overload:System.Text.RegularExpressions.Regex.CompileToAssembly" />
  </Docs>
  <Members>
    <MemberGroup MemberName=".ctor">
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Инициализирует новый экземпляр класса <see cref="T:System.Text.RegularExpressions.RegexCompilationInfo" />.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public RegexCompilationInfo (string pattern, System.Text.RegularExpressions.RegexOptions options, string name, string fullnamespace, bool ispublic);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(string pattern, valuetype System.Text.RegularExpressions.RegexOptions options, string name, string fullnamespace, bool ispublic) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.RegularExpressions.RegexCompilationInfo.#ctor(System.String,System.Text.RegularExpressions.RegexOptions,System.String,System.String,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (pattern As String, options As RegexOptions, name As String, fullnamespace As String, ispublic As Boolean)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; RegexCompilationInfo(System::String ^ pattern, System::Text::RegularExpressions::RegexOptions options, System::String ^ name, System::String ^ fullnamespace, bool ispublic);" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Text.RegularExpressions</AssemblyName>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="pattern" Type="System.String" />
        <Parameter Name="options" Type="System.Text.RegularExpressions.RegexOptions" />
        <Parameter Name="name" Type="System.String" />
        <Parameter Name="fullnamespace" Type="System.String" />
        <Parameter Name="ispublic" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="pattern">Регулярное выражение для компилирования.</param>
        <param name="options">Параметры регулярного выражения для использования при компилировании регулярного выражения.</param>
        <param name="name">Имя типа, представляющего скомпилированное регулярное выражение.</param>
        <param name="fullnamespace">Пространство имен, к которому принадлежит новый тип.</param>
        <param name="ispublic">
          Значение <see langword="true" />, чтобы сделать скомпилированное регулярное выражение видимым для всех, иначе значение <see langword="false" />.</param>
        <summary>Инициализирует новый экземпляр класса <see cref="T:System.Text.RegularExpressions.RegexCompilationInfo" />, содержащего сведения о регулярном выражении, которое должно быть включено в сборку.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Каждый параметр <xref:System.Text.RegularExpressions.RegexCompilationInfo.%23ctor%28System.String%2CSystem.Text.RegularExpressions.RegexOptions%2CSystem.String%2CSystem.String%2CSystem.Boolean%29> конструктор напрямую соответствует идентификатору свойство <xref:System.Text.RegularExpressions.RegexCompilationInfo> класса. Поскольку все свойства чтения и записи, их значения можно также присвоить напрямую.  
  
 <xref:System.Text.RegularExpressions.Regex.CompileToAssembly%2A> Метод создает сборку, содержащую скомпилированные регулярные выражения. Таким образом, не следует указывать <xref:System.Text.RegularExpressions.RegexOptions.Compiled> как одно из значений `options`.  
  
 Если `ispublic` — `true`, классом скомпилированных регулярных выражений дается открытый доступ. То есть он может быть создан из кода, выполняющегося в любой сборке. Если `ispublic` — `false`, предоставляется класс скомпилированное регулярное выражение `internal` (в C#) или `Friend` (в Visual Basic) специальных возможностей. То есть он может быть создан только из кода, выполняющегося в одной сборке с классом регулярных выражений.  
  
   
  
## Examples  
 В следующем примере создается и используется скомпилированное регулярное выражение в два этапа.  
  
 На первом шаге компилируются и выполняются в следующем примере кода. <xref:System.Text.RegularExpressions.RegexCompilationInfo.%23ctor%2A> Конструктор в примере кода определяет скомпилированное регулярное выражение. Результат выполнения кода является сборка с именем "FishRegex.dll", содержащая тип скомпилированного регулярного выражения с именем `FishRegex`.  
  
 [!code-csharp[sys.txt.rgxCompInfo#1](~/samples/snippets/csharp/VS_Snippets_CLR/sys.txt.rgxCompInfo/cs/genFishRegex.cs#1)]
 [!code-vb[sys.txt.rgxCompInfo#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/sys.txt.rgxCompInfo/vb/genFishRegex.vb#1)]  
  
 На втором этапе компиляции в следующем примере кода, используя ссылку на "FishRegex.dll" и затем запустить полученный исполняемый файл. Исполняемый файл соответствует целевой строке, используя `FishRegex` введите и отображает совпадение, группы, группа захвата и позиция индекса совпадений в целевой строке.  
  
 [!code-csharp[sys.txt.rgxCompInfo#2](~/samples/snippets/csharp/VS_Snippets_CLR/sys.txt.rgxCompInfo/cs/useFishRegex.cs#2)]
 [!code-vb[sys.txt.rgxCompInfo#2](~/samples/snippets/visualbasic/VS_Snippets_CLR/sys.txt.rgxCompInfo/vb/useFishRegex.vb#2)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          Свойство <paramref name="name" /> имеет значение <see cref="F:System.String.Empty" />.</exception>
        <exception cref="T:System.ArgumentNullException">
          Свойство <paramref name="pattern" /> имеет значение <see langword="null" />.  
  
 - или -  
  
 Свойство <paramref name="name" /> имеет значение <see langword="null" />.  
  
 - или -  
  
 Свойство <paramref name="fullnamespace" /> имеет значение <see langword="null" />.</exception>
        <block subset="none" type="usage">
          <para>Этот конструктор создает экземпляр скомпилированного регулярного выражения, используется значение времени ожидания по умолчанию домена приложения, в которой он создан. Если задано значение времени ожидания для домена приложения, скомпилированное регулярное выражение использует значение <see cref="F:System.Text.RegularExpressions.Regex.InfiniteMatchTimeout" />, что запрещает операцию поиска совпадения с шаблоном, по истечении времени ожидания. Рекомендуемые конструктор для создания скомпилированное регулярное выражение является <see cref="M:System.Text.RegularExpressions.RegexCompilationInfo.#ctor(System.String,System.Text.RegularExpressions.RegexOptions,System.String,System.String,System.Boolean,System.TimeSpan)" />, который позволяет установить интервал времени ожидания.</para>
        </block>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public RegexCompilationInfo (string pattern, System.Text.RegularExpressions.RegexOptions options, string name, string fullnamespace, bool ispublic, TimeSpan matchTimeout);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(string pattern, valuetype System.Text.RegularExpressions.RegexOptions options, string name, string fullnamespace, bool ispublic, valuetype System.TimeSpan matchTimeout) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.RegularExpressions.RegexCompilationInfo.#ctor(System.String,System.Text.RegularExpressions.RegexOptions,System.String,System.String,System.Boolean,System.TimeSpan)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (pattern As String, options As RegexOptions, name As String, fullnamespace As String, ispublic As Boolean, matchTimeout As TimeSpan)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; RegexCompilationInfo(System::String ^ pattern, System::Text::RegularExpressions::RegexOptions options, System::String ^ name, System::String ^ fullnamespace, bool ispublic, TimeSpan matchTimeout);" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Text.RegularExpressions</AssemblyName>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="pattern" Type="System.String" />
        <Parameter Name="options" Type="System.Text.RegularExpressions.RegexOptions" />
        <Parameter Name="name" Type="System.String" />
        <Parameter Name="fullnamespace" Type="System.String" />
        <Parameter Name="ispublic" Type="System.Boolean" />
        <Parameter Name="matchTimeout" Type="System.TimeSpan" />
      </Parameters>
      <Docs>
        <param name="pattern">Регулярное выражение для компилирования.</param>
        <param name="options">Параметры регулярного выражения для использования при компилировании регулярного выражения.</param>
        <param name="name">Имя типа, представляющего скомпилированное регулярное выражение.</param>
        <param name="fullnamespace">Пространство имен, к которому принадлежит новый тип.</param>
        <param name="ispublic">
          Значение <see langword="true" />, чтобы сделать скомпилированное регулярное выражение видимым для всех, иначе значение <see langword="false" />.</param>
        <param name="matchTimeout">Интервал времени ожидания по умолчанию для регулярного выражения.</param>
        <summary>Инициализирует новый экземпляр класса <see cref="T:System.Text.RegularExpressions.RegexCompilationInfo" />, содержащего сведения о регулярном выражении с указанным значение времени ожидания, которое должно быть включено в сборку.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Каждый параметр <xref:System.Text.RegularExpressions.RegexCompilationInfo.%23ctor%28System.String%2CSystem.Text.RegularExpressions.RegexOptions%2CSystem.String%2CSystem.String%2CSystem.Boolean%29> конструктор напрямую соответствует идентификатору свойство <xref:System.Text.RegularExpressions.RegexCompilationInfo> класса. Поскольку все свойства чтения и записи, их значения можно также присвоить напрямую.  
  
 <xref:System.Text.RegularExpressions.Regex.CompileToAssembly%2A> Метод создает сборку, содержащую скомпилированные регулярные выражения. Таким образом, не следует указывать <xref:System.Text.RegularExpressions.RegexOptions.Compiled> как одно из значений `options`.  
  
 Если `ispublic` — `true`, классом скомпилированных регулярных выражений дается открытый доступ. То есть он может быть создан из кода, выполняющегося в любой сборке. Если `ispublic` — `false`, предоставляется класс скомпилированное регулярное выражение `internal` (в C#) или `Friend` (в Visual Basic) специальных возможностей. То есть он может быть создан только из кода, выполняющегося в одной сборке с классом регулярных выражений.  
  
 `matchTimeout` Параметр определяет интервал времени ожидания по умолчанию для скомпилированного регулярного выражения. Это значение представляет приблизительное количество времени, который объект скомпилированное регулярное выражение будет выполнять одной операции сопоставления, прежде чем истечет время ожидания, и обработчик регулярных выражений создает исключение <xref:System.Text.RegularExpressions.RegexMatchTimeoutException> исключение во время его следующей проверки времени . Дополнительные сведения о значение времени ожидания. в разделе <xref:System.Text.RegularExpressions.RegexCompilationInfo.MatchTimeout%2A> свойство.  
  
> [!IMPORTANT]
>  Рекомендуется всегда устанавливать значение времени ожидания по умолчанию для скомпилированного регулярного выражения. Потребители библиотеки регулярного выражения можно переопределить это значение времени ожидания, передав <xref:System.TimeSpan> значение, представляющее новый интервал времени ожидания для этого перегруженного конструктора.  
  
   
  
## Examples  
 В следующем примере определяется один скомпилированное регулярное выражение с именем `DuplicateChars` , определяющий два или более экземпляров того же символа во входной строке. Скомпилированное регулярное выражение имеет время ожидания по умолчанию 2 секунды. При выполнении примера он создает библиотеку классов с именем RegexLib.dll, содержащий скомпилированное регулярное выражение.  
  
 [!code-csharp[System.Text.RegularExpressions.RegexCompilationInfo.MatchTimeout#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.text.regularexpressions.regexcompilationinfo.matchtimeout/cs/example1.cs#1)]
 [!code-vb[System.Text.RegularExpressions.RegexCompilationInfo.MatchTimeout#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.text.regularexpressions.regexcompilationinfo.matchtimeout/vb/example1.vb#1)]  
  
 Шаблон регулярного выражения `(\w)\1+` определяется, как показано в следующей таблице.  
  
|Шаблон|Описание:|  
|-------------|-----------------|  
|`(\w)`|Совпадение с любым символом слова и назначьте его первая группа записи.|  
|`\1+`|Сопоставление одного или нескольких вхождений значение первой захватываемой группы.|  
  
 В следующем примере используется `DuplicatedChars` регулярное выражение для обозначения повторяющихся символов в массиве строк. При вызове `DuplicatedChars` конструктор, он изменяет интервал времени ожидания 5 секунд.  
  
 [!code-csharp[System.Text.RegularExpressions.RegexCompilationInfo.MatchTimeout#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.text.regularexpressions.regexcompilationinfo.matchtimeout/cs/example1a.cs#2)]
 [!code-vb[System.Text.RegularExpressions.RegexCompilationInfo.MatchTimeout#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.text.regularexpressions.regexcompilationinfo.matchtimeout/vb/example1a.vb#2)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          Свойство <paramref name="name" /> имеет значение <see cref="F:System.String.Empty" />.</exception>
        <exception cref="T:System.ArgumentNullException">
          Свойство <paramref name="pattern" /> имеет значение <see langword="null" />.  
  
 - или -  
  
 Свойство <paramref name="name" /> имеет значение <see langword="null" />.  
  
 - или -  
  
 Свойство <paramref name="fullnamespace" /> имеет значение <see langword="null" />.</exception>
        <exception cref="T:System.ArgumentOutOfRangeException">
          Значение <paramref name="matchTimeout" /> отрицательно, равно нулю или больше приблизительно 24 дней.</exception>
        <altmember cref="P:System.Text.RegularExpressions.RegexCompilationInfo.MatchTimeout" />
      </Docs>
    </Member>
    <Member MemberName="IsPublic">
      <MemberSignature Language="C#" Value="public bool IsPublic { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsPublic" />
      <MemberSignature Language="DocId" Value="P:System.Text.RegularExpressions.RegexCompilationInfo.IsPublic" />
      <MemberSignature Language="VB.NET" Value="Public Property IsPublic As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsPublic { bool get(); void set(bool value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Text.RegularExpressions</AssemblyName>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Получает или задает значение, указывающее на то, обладает ли скомпилированное регулярное выражение общей видимостью.</summary>
        <value>
          Значение <see langword="true" />, если регулярное выражение обладает общей видимостью, иначе значение <see langword="false" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Если <xref:System.Text.RegularExpressions.RegexCompilationInfo.IsPublic%2A> свойство `false`, класс регулярного выражения, определенные в текущем экземпляре могут быть созданы только код, выполняемый в сборке, которая содержит класс. Тем не менее поскольку <xref:System.Text.RegularExpressions.Regex.CompileToAssembly%2A?displayProperty=nameWithType> метод создает сборку, содержащую скомпилированные регулярные выражения и не допускает дополнительный код для добавления, как правило, нет причин для присвоения этому свойству значение `false`.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="MatchTimeout">
      <MemberSignature Language="C#" Value="public TimeSpan MatchTimeout { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.TimeSpan MatchTimeout" />
      <MemberSignature Language="DocId" Value="P:System.Text.RegularExpressions.RegexCompilationInfo.MatchTimeout" />
      <MemberSignature Language="VB.NET" Value="Public Property MatchTimeout As TimeSpan" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property TimeSpan MatchTimeout { TimeSpan get(); void set(TimeSpan value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Text.RegularExpressions</AssemblyName>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.TimeSpan</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Получает или задает интервал времени ожидания по умолчанию регулярного выражения.</summary>
        <value>Максимальный интервал времени по умолчанию, который может пройти в операции сравнения с шаблоном, прежде чем возникнет исключение <see cref="T:System.Text.RegularExpressions.RegexMatchTimeoutException" />, или <see cref="F:System.Text.RegularExpressions.Regex.InfiniteMatchTimeout" />, если контроль времени ожидания отключен.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Text.RegularExpressions.RegexCompilationInfo.MatchTimeout%2A> Свойство определяет интервал времени ожидания по умолчанию для скомпилированного регулярного выражения. Это значение представляет приблизительное количество времени, скомпилированное регулярное выражение будет выполняться одной операции сопоставления, прежде чем истечет время ожидания, и обработчик регулярных выражений создает исключение <xref:System.Text.RegularExpressions.RegexMatchTimeoutException> исключение во время его следующей проверки времени.  
  
> [!IMPORTANT]
>  Рекомендуется всегда устанавливать значение времени ожидания по умолчанию для скомпилированного регулярного выражения. Потребители библиотеки регулярного выражения можно переопределить это значение времени ожидания, передав <xref:System.TimeSpan> значение, представляющее новый интервал времени ожидания для конструктора классов скомпилированное регулярное выражение.  
  
 Можно назначить значение времени ожидания по умолчанию для <xref:System.Text.RegularExpressions.RegexCompilationInfo> объекта в любой из следующих способов:  
  
-   Путем вызова <xref:System.AppDomain.SetData%2A?displayProperty=nameWithType> метод и предоставляет строковое представление <xref:System.TimeSpan> значение для свойства «REGEX_DEFAULT_MATCH_TIMEOUT».  
  
-   Путем вызова <xref:System.Text.RegularExpressions.RegexCompilationInfo.%23ctor%28System.String%2CSystem.Text.RegularExpressions.RegexOptions%2CSystem.String%2CSystem.String%2CSystem.Boolean%2CSystem.TimeSpan%29> конструктор и указав значение для `matchTimeout` параметра.  
  
-   Установив значение этого свойства.  
  
 Чтобы задать интервал ожидания разумного, учитывайте следующие факторы:  
  
-   Длина и сложность шаблон регулярного выражения. Длинные и более сложные регулярные выражения требуется больше времени, чем более короткий и простой из них.  
  
-   Нагрузка ожидаемый машины. Обработка занимает больше времени, в системах с высокой загрузкой ЦП и памяти.  
  
   
  
## Examples  
 В следующем примере определяется один скомпилированное регулярное выражение с именем `DuplicateChars` , определяющий два или более экземпляров того же символа во входной строке. Скомпилированное регулярное выражение имеет время ожидания по умолчанию 2 секунды. При выполнении примера он создает библиотеку классов с именем RegexLib.dll, содержащий скомпилированное регулярное выражение.  
  
 [!code-csharp[System.Text.RegularExpressions.RegexCompilationInfo.MatchTimeout#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.text.regularexpressions.regexcompilationinfo.matchtimeout/cs/example1.cs#1)]
 [!code-vb[System.Text.RegularExpressions.RegexCompilationInfo.MatchTimeout#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.text.regularexpressions.regexcompilationinfo.matchtimeout/vb/example1.vb#1)]  
  
 Шаблон регулярного выражения `(\w)\1+` определяется, как показано в следующей таблице.  
  
|Шаблон|Описание:|  
|-------------|-----------------|  
|`(\w)`|Совпадение с любым символом слова и назначьте его первая группа записи.|  
|`\1+`|Сопоставление одного или нескольких вхождений значение первой захватываемой группы.|  
  
 В следующем примере используется `DuplicatedChars` регулярное выражение для обозначения повторяющихся символов в массиве строк. При вызове `DuplicatedChars` конструктор, он изменяет интервал времени ожидания 5 секунд.  
  
 [!code-csharp[System.Text.RegularExpressions.RegexCompilationInfo.MatchTimeout#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.text.regularexpressions.regexcompilationinfo.matchtimeout/cs/example1a.cs#2)]
 [!code-vb[System.Text.RegularExpressions.RegexCompilationInfo.MatchTimeout#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.text.regularexpressions.regexcompilationinfo.matchtimeout/vb/example1a.vb#2)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Text.RegularExpressions.RegexCompilationInfo.#ctor(System.String,System.Text.RegularExpressions.RegexOptions,System.String,System.String,System.Boolean,System.TimeSpan)" />
      </Docs>
    </Member>
    <Member MemberName="Name">
      <MemberSignature Language="C#" Value="public string Name { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string Name" />
      <MemberSignature Language="DocId" Value="P:System.Text.RegularExpressions.RegexCompilationInfo.Name" />
      <MemberSignature Language="VB.NET" Value="Public Property Name As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ Name { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Text.RegularExpressions</AssemblyName>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Получает или задает имя типа, представляющего скомпилированное регулярное выражение.</summary>
        <value>Имя нового типа.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Text.RegularExpressions.RegexCompilationInfo> Класс используется для определения скомпилированного регулярного выражения, который представлен класс, производный от <xref:System.Text.RegularExpressions.Regex>. <xref:System.Text.RegularExpressions.RegexCompilationInfo.Name%2A> Свойство определяет имя класса типа регулярных выражений и <xref:System.Text.RegularExpressions.RegexCompilationInfo.Namespace%2A> и <xref:System.Text.RegularExpressions.RegexCompilationInfo.Name%2A> вместе определяют его полное имя.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">Значением этого свойства является <see langword="null" />.</exception>
        <exception cref="T:System.ArgumentException">Значением для этого свойства является пустая строка.</exception>
      </Docs>
    </Member>
    <Member MemberName="Namespace">
      <MemberSignature Language="C#" Value="public string Namespace { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string Namespace" />
      <MemberSignature Language="DocId" Value="P:System.Text.RegularExpressions.RegexCompilationInfo.Namespace" />
      <MemberSignature Language="VB.NET" Value="Public Property Namespace As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ Namespace { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Text.RegularExpressions</AssemblyName>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Получает или задает пространство имен, к которому принадлежит новый тип.</summary>
        <value>Пространство имен нового типа.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Text.RegularExpressions.RegexCompilationInfo> Класс используется для определения скомпилированного регулярного выражения, который представлен класс, производный от <xref:System.Text.RegularExpressions.Regex>. <xref:System.Text.RegularExpressions.RegexCompilationInfo.Namespace%2A> Свойство определяет пространство имен, содержащее тип скомпилированное регулярное выражение и <xref:System.Text.RegularExpressions.RegexCompilationInfo.Namespace%2A> и <xref:System.Text.RegularExpressions.RegexCompilationInfo.Name%2A> вместе определяют его полное имя.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">Значением этого свойства является <see langword="null" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="Options">
      <MemberSignature Language="C#" Value="public System.Text.RegularExpressions.RegexOptions Options { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Text.RegularExpressions.RegexOptions Options" />
      <MemberSignature Language="DocId" Value="P:System.Text.RegularExpressions.RegexCompilationInfo.Options" />
      <MemberSignature Language="VB.NET" Value="Public Property Options As RegexOptions" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Text::RegularExpressions::RegexOptions Options { System::Text::RegularExpressions::RegexOptions get(); void set(System::Text::RegularExpressions::RegexOptions value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Text.RegularExpressions</AssemblyName>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Text.RegularExpressions.RegexOptions</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Получает или задает параметры для использования при компилировании регулярного выражения.</summary>
        <value>Побитовое сочетание значений перечисления.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Text.RegularExpressions.Regex.CompileToAssembly%2A> Метод создает сборку, содержащую скомпилированные регулярные выражения. Поэтому, не нужно указывать <xref:System.Text.RegularExpressions.RegexOptions.Compiled> как одно из значений этого свойства. Если он имеется, <xref:System.Text.RegularExpressions.RegexOptions.Compiled> параметр учитывается.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Pattern">
      <MemberSignature Language="C#" Value="public string Pattern { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string Pattern" />
      <MemberSignature Language="DocId" Value="P:System.Text.RegularExpressions.RegexCompilationInfo.Pattern" />
      <MemberSignature Language="VB.NET" Value="Public Property Pattern As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ Pattern { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Text.RegularExpressions</AssemblyName>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Получает или задает регулярное выражение для компилирования.</summary>
        <value>Регулярное выражение для компилирования.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Text.RegularExpressions.RegexCompilationInfo.Pattern%2A> Свойство может содержать любое допустимое регулярное выражение. Если значение <xref:System.Text.RegularExpressions.RegexCompilationInfo.Pattern%2A> свойство не является синтаксически правильным регулярному выражению, вызов <xref:System.Text.RegularExpressions.Regex.CompileToAssembly%2A> вызывает исключение <xref:System.ArgumentException>.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">Значением этого свойства является <see langword="null" />.</exception>
      </Docs>
    </Member>
  </Members>
</Type>