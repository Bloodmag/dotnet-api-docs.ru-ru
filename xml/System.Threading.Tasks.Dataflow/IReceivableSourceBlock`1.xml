<Type Name="IReceivableSourceBlock&lt;TOutput&gt;" FullName="System.Threading.Tasks.Dataflow.IReceivableSourceBlock&lt;TOutput&gt;">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="1b86e98ae4b436a7f5b89511c3b073ef1405ea4a" />
    <Meta Name="ms.sourcegitcommit" Value="434f60616a9793fa8436744549fc856e94f7a648" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="ru-RU" />
    <Meta Name="ms.lasthandoff" Value="08/25/2018" />
    <Meta Name="ms.locfileid" Value="39759132" />
  </Metadata>
  <TypeSignature Language="C#" Value="public interface IReceivableSourceBlock&lt;TOutput&gt; : System.Threading.Tasks.Dataflow.ISourceBlock&lt;TOutput&gt;" />
  <TypeSignature Language="ILAsm" Value=".class public interface auto ansi abstract IReceivableSourceBlock`1&lt;TOutput&gt; implements class System.Threading.Tasks.Dataflow.IDataflowBlock, class System.Threading.Tasks.Dataflow.ISourceBlock`1&lt;!TOutput&gt;" />
  <TypeSignature Language="DocId" Value="T:System.Threading.Tasks.Dataflow.IReceivableSourceBlock`1" />
  <TypeSignature Language="VB.NET" Value="Public Interface IReceivableSourceBlock(Of TOutput)&#xA;Implements ISourceBlock(Of TOutput)" />
  <TypeSignature Language="C++ CLI" Value="generic &lt;typename TOutput&gt;&#xA;public interface class IReceivableSourceBlock : System::Threading::Tasks::Dataflow::ISourceBlock&lt;TOutput&gt;" />
  <TypeSignature Language="F#" Value="type IReceivableSourceBlock&lt;'Output&gt; = interface&#xA;    interface IDataflowBlock&#xA;    interface ISourceBlock&lt;'Output&gt;" />
  <AssemblyInfo>
    <AssemblyName>System.Threading.Tasks.Dataflow</AssemblyName>
    <AssemblyVersion>4.6.0.0</AssemblyVersion>
    <AssemblyVersion>4.6.1.0</AssemblyVersion>
    <AssemblyVersion>4.6.2.0</AssemblyVersion>
    <AssemblyVersion>4.6.3.0</AssemblyVersion>
  </AssemblyInfo>
  <TypeParameters>
    <TypeParameter Name="TOutput" />
  </TypeParameters>
  <Interfaces>
    <Interface>
      <InterfaceName>System.Threading.Tasks.Dataflow.ISourceBlock&lt;TOutput&gt;</InterfaceName>
    </Interface>
  </Interfaces>
  <Docs>
    <typeparam name="TOutput">
      <span data-ttu-id="67b10-101">Указывает тип данных, поставляемых <see cref="T:System.Threading.Tasks.Dataflow.IReceivableSourceBlock`1" />.</span>
      <span class="sxs-lookup">
        <span data-stu-id="67b10-101">Specifies the type of data supplied by the <see cref="T:System.Threading.Tasks.Dataflow.IReceivableSourceBlock`1" />.</span>
      </span>
    </typeparam>
    <summary>
      <span data-ttu-id="67b10-102">Представляет блок потока данных, который поддерживает получение сообщений без привязывания.</span>
      <span class="sxs-lookup">
        <span data-stu-id="67b10-102">Represents a dataflow block that supports receiving messages without linking.</span>
      </span>
    </summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
[!INCLUDE [tpl-install-instructions](~/includes/tpl-install-instructions.md)]
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName="TryReceive">
      <MemberSignature Language="C#" Value="public bool TryReceive (Predicate&lt;TOutput&gt; filter, out TOutput item);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool TryReceive(class System.Predicate`1&lt;!TOutput&gt; filter, [out] !TOutput&amp; item) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Tasks.Dataflow.IReceivableSourceBlock`1.TryReceive(System.Predicate{`0},`0@)" />
      <MemberSignature Language="VB.NET" Value="Public Function TryReceive (filter As Predicate(Of TOutput), ByRef item As TOutput) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool TryReceive(Predicate&lt;TOutput&gt; ^ filter, [Runtime::InteropServices::Out] TOutput % item);" />
      <MemberSignature Language="F#" Value="abstract member TryReceive : Predicate&lt;'Output&gt; *  -&gt; bool" Usage="iReceivableSourceBlock.TryReceive (filter, item)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks.Dataflow</AssemblyName>
        <AssemblyVersion>4.6.0.0</AssemblyVersion>
        <AssemblyVersion>4.6.1.0</AssemblyVersion>
        <AssemblyVersion>4.6.2.0</AssemblyVersion>
        <AssemblyVersion>4.6.3.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="filter" Type="System.Predicate&lt;TOutput&gt;" />
        <Parameter Name="item" Type="TOutput" RefType="out" />
      </Parameters>
      <Docs>
        <param name="filter">
          <span data-ttu-id="67b10-103">Значение предиката должно быть успешно передано, чтобы оно было получено.</span>
          <span class="sxs-lookup">
            <span data-stu-id="67b10-103">The predicate value must successfully pass in order for it to be received.</span>
          </span>
          <span data-ttu-id="67b10-104">Элемент <c>filter</c> может представлять собой <see langword="null" />, и в этом случае все элементы будут переданы.</span>
          <span class="sxs-lookup">
            <span data-stu-id="67b10-104">
              <c>filter</c> may be <see langword="null" />, in which case all items will pass.</span>
          </span>
        </param>
        <param name="item">
          <span data-ttu-id="67b10-105">Элемент, полученный от источника.</span>
          <span class="sxs-lookup">
            <span data-stu-id="67b10-105">The item received from the source.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="67b10-106">Пытается синхронно получить доступный выходной элемент от интерфейса <see cref="T:System.Threading.Tasks.Dataflow.IReceivableSourceBlock`1" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="67b10-106">Attempts to synchronously receive an available output item from the <see cref="T:System.Threading.Tasks.Dataflow.IReceivableSourceBlock`1" />.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="67b10-107">Значение <see langword="true" />, если получить элемент не удалось; в противном случае — значение <see langword="false" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="67b10-107">
              <see langword="true" /> if an item could be received; otherwise, <see langword="false" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="67b10-108">Этот метод не блокирует ожидание источника для получения элемента.</span><span class="sxs-lookup"><span data-stu-id="67b10-108">This method does not block waiting for the source to provide an item.</span></span>  
  
 <span data-ttu-id="67b10-109">После проверки для элемента, будет возвращена ли элемент был доступен.</span><span class="sxs-lookup"><span data-stu-id="67b10-109">It will return after checking for an element, whether or not an element was available.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="TryReceiveAll">
      <MemberSignature Language="C#" Value="public bool TryReceiveAll (out System.Collections.Generic.IList&lt;TOutput&gt; items);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool TryReceiveAll([out] class System.Collections.Generic.IList`1&lt;!TOutput&gt;&amp; items) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Tasks.Dataflow.IReceivableSourceBlock`1.TryReceiveAll(System.Collections.Generic.IList{`0}@)" />
      <MemberSignature Language="VB.NET" Value="Public Function TryReceiveAll (ByRef items As IList(Of TOutput)) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool TryReceiveAll([Runtime::InteropServices::Out] System::Collections::Generic::IList&lt;TOutput&gt; ^ % items);" />
      <MemberSignature Language="F#" Value="abstract member TryReceiveAll :  -&gt; bool" Usage="iReceivableSourceBlock.TryReceiveAll items" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks.Dataflow</AssemblyName>
        <AssemblyVersion>4.6.0.0</AssemblyVersion>
        <AssemblyVersion>4.6.1.0</AssemblyVersion>
        <AssemblyVersion>4.6.2.0</AssemblyVersion>
        <AssemblyVersion>4.6.3.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="items" Type="System.Collections.Generic.IList&lt;TOutput&gt;" RefType="out" />
      </Parameters>
      <Docs>
        <param name="items">
          <span data-ttu-id="67b10-110">Элементы, полученные от источника.</span>
          <span class="sxs-lookup">
            <span data-stu-id="67b10-110">The items received from the source.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="67b10-111">Пытается синхронно получить все доступные элементы от интерфейса <see cref="T:System.Threading.Tasks.Dataflow.IReceivableSourceBlock`1" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="67b10-111">Attempts to synchronously receive all available items from the <see cref="T:System.Threading.Tasks.Dataflow.IReceivableSourceBlock`1" />.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="67b10-112">Значение <see langword="true" />, если могут быть получены один или несколько элементов; в противном случае — значение <see langword="false" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="67b10-112">
              <see langword="true" /> if one or more items could be received; otherwise, <see langword="false" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="67b10-113">Этот метод не блокирует ожидание источника для получения элемента.</span><span class="sxs-lookup"><span data-stu-id="67b10-113">This method does not block waiting for the source to provide an item.</span></span>  
  
 <span data-ttu-id="67b10-114">После проверки для элементов, будет возвращена ли элемент был доступен.</span><span class="sxs-lookup"><span data-stu-id="67b10-114">It will return after checking for elements, whether or not an element was available.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>