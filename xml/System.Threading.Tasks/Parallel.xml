<Type Name="Parallel" FullName="System.Threading.Tasks.Parallel">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="0ccd8e8796d91623d453ef299472d90582525e77" />
    <Meta Name="ms.sourcegitcommit" Value="6a0b904069161bbaec4ffd02aa7d9cf38c61e72e" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="ru-RU" />
    <Meta Name="ms.lasthandoff" Value="06/24/2018" />
    <Meta Name="ms.locfileid" Value="36407715" />
  </Metadata>
  <TypeSignature Language="C#" Value="public static class Parallel" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi abstract sealed beforefieldinit Parallel extends System.Object" />
  <TypeSignature Language="DocId" Value="T:System.Threading.Tasks.Parallel" />
  <TypeSignature Language="VB.NET" Value="Public Class Parallel" />
  <TypeSignature Language="C++ CLI" Value="public ref class Parallel abstract sealed" />
  <TypeSignature Language="F#" Value="type Parallel = class" />
  <AssemblyInfo>
    <AssemblyName>System.Threading.Tasks.Parallel</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.3.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>mscorlib</AssemblyName>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>Предоставляет поддержку параллельных циклов и областей.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Threading.Tasks.Parallel> Класс предоставляет данных на основе библиотеки параллельных замен для общих операций например циклы, для каждого цикла и выполнение набора инструкций.  
  
   
  
## Examples  
 В этом примере демонстрируется несколько подходов к реализации параллельного цикла с помощью нескольких языковых конструкций.  
  
 [!code-csharp[System.Threading.Tasks.Parallel#07](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.threading.tasks.parallel/cs/parallelintro.cs#07)]
 [!code-vb[System.Threading.Tasks.Parallel#07](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.threading.tasks.parallel/vb/parallelintro.vb#07)]  
  
 ]]></format>
    </remarks>
    <threadsafe>Все открытые и защищенные члены <see cref="T:System.Threading.Tasks.Parallel" /> являются потокобезопасными и могут быть использованы одновременно из нескольких потоков.</threadsafe>
  </Docs>
  <Members>
    <MemberGroup MemberName="For">
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks.Parallel</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.3.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Выполняет цикл <see langword="for" /> (<see langword="For" /> в Visual Basic), обеспечивая возможность параллельного выполнения итераций.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="For">
      <MemberSignature Language="C#" Value="public static System.Threading.Tasks.ParallelLoopResult For (int fromInclusive, int toExclusive, Action&lt;int,System.Threading.Tasks.ParallelLoopState&gt; body);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.Threading.Tasks.ParallelLoopResult For(int32 fromInclusive, int32 toExclusive, class System.Action`2&lt;int32, class System.Threading.Tasks.ParallelLoopState&gt; body) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Tasks.Parallel.For(System.Int32,System.Int32,System.Action{System.Int32,System.Threading.Tasks.ParallelLoopState})" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function For (fromInclusive As Integer, toExclusive As Integer, body As Action(Of Integer, ParallelLoopState)) As ParallelLoopResult" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Threading::Tasks::ParallelLoopResult For(int fromInclusive, int toExclusive, Action&lt;int, System::Threading::Tasks::ParallelLoopState ^&gt; ^ body);" />
      <MemberSignature Language="F#" Value="static member For : int * int * Action&lt;int, System.Threading.Tasks.ParallelLoopState&gt; -&gt; System.Threading.Tasks.ParallelLoopResult" Usage="System.Threading.Tasks.Parallel.For (fromInclusive, toExclusive, body)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks.Parallel</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.3.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.ParallelLoopResult</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="fromInclusive" Type="System.Int32" />
        <Parameter Name="toExclusive" Type="System.Int32" />
        <Parameter Name="body" Type="System.Action&lt;System.Int32,System.Threading.Tasks.ParallelLoopState&gt;" />
      </Parameters>
      <Docs>
        <param name="fromInclusive">Начальный индекс, включительно.</param>
        <param name="toExclusive">Конечный индекс, не включительно.</param>
        <param name="body">Делегат, который вызывается один раз за итерацию.</param>
        <summary>Выполняет цикл <see langword="for" /> (<see langword="For" /> в Visual Basic), обеспечивая возможность параллельного выполнения итераций, а также контроля состояния цикла и управления этим состоянием.</summary>
        <returns>Структура, в которой содержатся сведения о выполненной части цикла.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 `body` Делегат вызывается один раз для каждого значения в диапазоне итерации (`fromInclusive`, `toExclusive`). Предоставляется с двумя аргументами:  
  
-   <xref:System.Int32> Значение, представляющее количество итераций.  
  
-   Объект <xref:System.Threading.Tasks.ParallelLoopState> экземпляр, который может использоваться для выхода из цикла преждевременно. <xref:System.Threading.Tasks.ParallelLoopState> Объект создается компилятором, не создаются в пользовательском коде.  
  
 Вызов <xref:System.Threading.Tasks.ParallelLoopState.Break%2A> метод сообщает `for` операции, что не требуется выполнение итераций после текущей. Однако все итерации до текущей один по-прежнему будет выполняться, если они еще не сделали этого.  
  
 Таким образом, вызов <xref:System.Threading.Tasks.ParallelLoopState.Break%2A> аналогична использованию операцию приостановки выполнения в традиционном `for` как цикла на языке C#, но это не идеальное замены: например, нет никакой гарантии, что итераций после текущего определенно не будет выполнение.  
  
 Если выполнение всех итераций до текущего не требуется, используйте <xref:System.Threading.Tasks.ParallelLoopState.Stop%2A> метод вместо <xref:System.Threading.Tasks.ParallelLoopState.Break%2A>. Вызов <xref:System.Threading.Tasks.ParallelLoopState.Stop%2A> сообщает `for` цикла, можно пропустить всех оставшихся итераций, независимо от того, является ли они до или после текущей итерации, так как все необходимые рабочие будет уже были завершены. Однако, как с <xref:System.Threading.Tasks.ParallelLoopState.Break%2A>, нет гарантий, в соответствии с которыми не будет выполняться другими итерациями.  
  
 Если цикл завершается преждевременно, <xref:System.Threading.Tasks.ParallelLoopResult> структуру, которая возвращается будет содержать необходимые сведения о завершении цикла.  
  
 Если `fromInclusive` больше или равен `toExclusive`, метод возвращается немедленно, без выполнения перебора.  
  
   
  
## Examples  
 В следующем примере выполняется до 100 итераций цикла в параллельном режиме. Приостанавливает работу каждой итерации для произвольного интервал от 1 до 1000 миллисекунд. Случайное значение определяет, на какой итерации цикла <xref:System.Threading.Tasks.ParallelLoopState.Break%2A?displayProperty=nameWithType> вызывается метод. Как видно в результатах показано в примере, нет итераций, индекс которого больше, чем <xref:System.Threading.Tasks.ParallelLoopState.LowestBreakIteration%2A?displayProperty=nameWithType> начальное значение свойства после вызова <xref:System.Threading.Tasks.ParallelLoopState.Break%2A?displayProperty=nameWithType> метод.  
  
 [!code-csharp[System.Threading.Tasks.ParallelLoopState#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.threading.tasks.parallelloopstate/cs/break1.cs#2)]
 [!code-vb[System.Threading.Tasks.ParallelLoopState#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.threading.tasks.parallelloopstate/vb/break1.vb#2)]  
  
 Поскольку итерации цикла вряд ли по-прежнему выполняться, когда <xref:System.Threading.Tasks.ParallelLoopState.Break%2A?displayProperty=nameWithType> вызывается метод, вызывает каждой итерации <xref:System.Threading.Tasks.ParallelLoopState.ShouldExitCurrentIteration%2A?displayProperty=nameWithType> свойство для проверки, вызвал ли другую итерацию <xref:System.Threading.Tasks.ParallelLoopState.Break%2A?displayProperty=nameWithType> метод. Если свойство имеет значение `true`, итерации проверяет значение <xref:System.Threading.Tasks.ParallelLoopState.LowestBreakIteration%2A?displayProperty=nameWithType> свойства и, если больше, чем значение индекса текущей итерации, возвращается немедленно.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">Аргумент <paramref name="body" /> имеет значение <see langword="null" />.</exception>
        <exception cref="T:System.AggregateException">Исключение, которое содержит все отдельные исключения, создаваемые во всех потоках.</exception>
        <altmember cref="T:System.Threading.Tasks.ParallelLoopState" />
      </Docs>
    </Member>
    <Member MemberName="For">
      <MemberSignature Language="C#" Value="public static System.Threading.Tasks.ParallelLoopResult For (int fromInclusive, int toExclusive, Action&lt;int&gt; body);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.Threading.Tasks.ParallelLoopResult For(int32 fromInclusive, int32 toExclusive, class System.Action`1&lt;int32&gt; body) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Tasks.Parallel.For(System.Int32,System.Int32,System.Action{System.Int32})" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function For (fromInclusive As Integer, toExclusive As Integer, body As Action(Of Integer)) As ParallelLoopResult" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Threading::Tasks::ParallelLoopResult For(int fromInclusive, int toExclusive, Action&lt;int&gt; ^ body);" />
      <MemberSignature Language="F#" Value="static member For : int * int * Action&lt;int&gt; -&gt; System.Threading.Tasks.ParallelLoopResult" Usage="System.Threading.Tasks.Parallel.For (fromInclusive, toExclusive, body)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks.Parallel</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.3.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.ParallelLoopResult</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="fromInclusive" Type="System.Int32" />
        <Parameter Name="toExclusive" Type="System.Int32" />
        <Parameter Name="body" Type="System.Action&lt;System.Int32&gt;" />
      </Parameters>
      <Docs>
        <param name="fromInclusive">Начальный индекс, включительно.</param>
        <param name="toExclusive">Конечный индекс, не включительно.</param>
        <param name="body">Делегат, который вызывается один раз за итерацию.</param>
        <summary>Выполняет цикл <see langword="for" /> (<see langword="For" /> в Visual Basic), обеспечивая возможность параллельного выполнения итераций.</summary>
        <returns>Структура, в которой содержатся сведения о выполненной части цикла.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 `body` Делегат вызывается один раз для каждого значения в диапазоне итерации (`fromInclusive`, `toExclusive`). Предоставляется с числом итераций (<xref:System.Int32>) как параметр.  
  
 Если `fromInclusive` больше или равен `toExclusive`, метод возвращается немедленно, без выполнения перебора.  
  
   
  
## Examples  
 В следующем примере используется <xref:System.Threading.Tasks.Parallel.For%2A> метод 100 вызовов делегата, который приводит к возникновению случайных байтовых значений и вычисляет их суммы.  
  
 [!code-csharp[System.Threading.Tasks.Parallel.For#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.threading.tasks.parallel.for/cs/for1.cs#1)]
 [!code-vb[System.Threading.Tasks.Parallel.For#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.threading.tasks.parallel.for/vb/for1.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">Аргумент <paramref name="body" /> имеет значение <see langword="null" />.</exception>
        <exception cref="T:System.AggregateException">Исключение, которое содержит все отдельные исключения, создаваемые во всех потоках.</exception>
      </Docs>
    </Member>
    <Member MemberName="For">
      <MemberSignature Language="C#" Value="public static System.Threading.Tasks.ParallelLoopResult For (long fromInclusive, long toExclusive, Action&lt;long,System.Threading.Tasks.ParallelLoopState&gt; body);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.Threading.Tasks.ParallelLoopResult For(int64 fromInclusive, int64 toExclusive, class System.Action`2&lt;int64, class System.Threading.Tasks.ParallelLoopState&gt; body) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Tasks.Parallel.For(System.Int64,System.Int64,System.Action{System.Int64,System.Threading.Tasks.ParallelLoopState})" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function For (fromInclusive As Long, toExclusive As Long, body As Action(Of Long, ParallelLoopState)) As ParallelLoopResult" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Threading::Tasks::ParallelLoopResult For(long fromInclusive, long toExclusive, Action&lt;long, System::Threading::Tasks::ParallelLoopState ^&gt; ^ body);" />
      <MemberSignature Language="F#" Value="static member For : int64 * int64 * Action&lt;int64, System.Threading.Tasks.ParallelLoopState&gt; -&gt; System.Threading.Tasks.ParallelLoopResult" Usage="System.Threading.Tasks.Parallel.For (fromInclusive, toExclusive, body)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks.Parallel</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.3.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.ParallelLoopResult</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="fromInclusive" Type="System.Int64" />
        <Parameter Name="toExclusive" Type="System.Int64" />
        <Parameter Name="body" Type="System.Action&lt;System.Int64,System.Threading.Tasks.ParallelLoopState&gt;" />
      </Parameters>
      <Docs>
        <param name="fromInclusive">Начальный индекс, включительно.</param>
        <param name="toExclusive">Конечный индекс, не включительно.</param>
        <param name="body">Делегат, который вызывается один раз за итерацию.</param>
        <summary>Выполняет цикл <see langword="for" /> (<see langword="For" /> в Visual Basic) с 64-разрядными индексами, обеспечивая возможность параллельного выполнения итераций, а также контроля состояния цикла и управления этим состоянием.</summary>
        <returns>Структура <see cref="T:System.Threading.Tasks.ParallelLoopResult" />, в которой содержатся сведения о выполненной части цикла.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 `body` Делегат вызывается один раз для каждого значения в диапазоне итерации (`fromInclusive`, `toExclusive`). Предоставляется со следующими параметрами: число итераций (<xref:System.Int64>) и <xref:System.Threading.Tasks.ParallelLoopState> экземпляр, который может использоваться для выхода из цикла преждевременно.  
  
 Вызов <xref:System.Threading.Tasks.ParallelLoopState.Break%2A> метод сообщает `for` , итераций после текущего не должны быть выполнены, но сделать все итерации до текущей операции.  
  
 Таким образом, вызов разрыв аналогична использованию операцию приостановки выполнения в традиционном `for` как цикла на языке C#, но это не идеальное замены: например, нет гарантии, что итерации после текущего определенно не будет выполняться.  
  
 Если выполнение всех итераций до текущего не требуется, используйте <xref:System.Threading.Tasks.ParallelLoopState.Stop%2A> метод вместо <xref:System.Threading.Tasks.ParallelLoopState.Break%2A>. Вызов <xref:System.Threading.Tasks.ParallelLoopState.Stop%2A> сообщает `for` цикла, можно пропустить всех оставшихся итераций, независимо от того, является ли они до или после текущей итерации, так как все необходимые рабочие будет уже были завершены. Однако, как с <xref:System.Threading.Tasks.ParallelLoopState.Break%2A>, нет гарантий, в соответствии с которыми не будет выполняться другими итерациями.  
  
 Если цикл завершается преждевременно, <xref:System.Threading.Tasks.ParallelLoopResult> структуру, которая возвращается будет содержать необходимые сведения о завершении цикла.  
  
 Если `fromInclusive` больше или равно `toExclusive`, а затем метод возвращается немедленно, без выполнения перебора.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">Аргумент <paramref name="body" /> имеет значение <see langword="null" />.</exception>
        <exception cref="T:System.AggregateException">Исключение, которое содержит все отдельные исключения, создаваемые во всех потоках.</exception>
      </Docs>
    </Member>
    <Member MemberName="For">
      <MemberSignature Language="C#" Value="public static System.Threading.Tasks.ParallelLoopResult For (long fromInclusive, long toExclusive, Action&lt;long&gt; body);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.Threading.Tasks.ParallelLoopResult For(int64 fromInclusive, int64 toExclusive, class System.Action`1&lt;int64&gt; body) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Tasks.Parallel.For(System.Int64,System.Int64,System.Action{System.Int64})" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function For (fromInclusive As Long, toExclusive As Long, body As Action(Of Long)) As ParallelLoopResult" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Threading::Tasks::ParallelLoopResult For(long fromInclusive, long toExclusive, Action&lt;long&gt; ^ body);" />
      <MemberSignature Language="F#" Value="static member For : int64 * int64 * Action&lt;int64&gt; -&gt; System.Threading.Tasks.ParallelLoopResult" Usage="System.Threading.Tasks.Parallel.For (fromInclusive, toExclusive, body)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks.Parallel</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.3.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.ParallelLoopResult</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="fromInclusive" Type="System.Int64" />
        <Parameter Name="toExclusive" Type="System.Int64" />
        <Parameter Name="body" Type="System.Action&lt;System.Int64&gt;" />
      </Parameters>
      <Docs>
        <param name="fromInclusive">Начальный индекс, включительно.</param>
        <param name="toExclusive">Конечный индекс, не включительно.</param>
        <param name="body">Делегат, который вызывается один раз за итерацию.</param>
        <summary>Выполняет цикл <see langword="for" /> (<see langword="For" /> в Visual Basic) с 64-разрядными индексами, в котором итерации могут выполняться параллельно.</summary>
        <returns>Структура, в которой содержатся сведения о выполненной части цикла.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 `body` Делегат вызывается один раз для каждого значения в диапазоне итерации (`fromInclusive`, `toExclusive`). Предоставляется с числом итераций (<xref:System.Int64>) как параметр.  
  
 Если `fromInclusive` больше или равен `toExclusive`, метод возвращается немедленно, без выполнения перебора.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">Аргумент <paramref name="body" /> имеет значение <see langword="null" />.</exception>
        <exception cref="T:System.AggregateException">Исключение, которое содержит все отдельные исключения, создаваемые во всех потоках.</exception>
      </Docs>
    </Member>
    <Member MemberName="For">
      <MemberSignature Language="C#" Value="public static System.Threading.Tasks.ParallelLoopResult For (int fromInclusive, int toExclusive, System.Threading.Tasks.ParallelOptions parallelOptions, Action&lt;int,System.Threading.Tasks.ParallelLoopState&gt; body);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.Threading.Tasks.ParallelLoopResult For(int32 fromInclusive, int32 toExclusive, class System.Threading.Tasks.ParallelOptions parallelOptions, class System.Action`2&lt;int32, class System.Threading.Tasks.ParallelLoopState&gt; body) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Tasks.Parallel.For(System.Int32,System.Int32,System.Threading.Tasks.ParallelOptions,System.Action{System.Int32,System.Threading.Tasks.ParallelLoopState})" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Threading::Tasks::ParallelLoopResult For(int fromInclusive, int toExclusive, System::Threading::Tasks::ParallelOptions ^ parallelOptions, Action&lt;int, System::Threading::Tasks::ParallelLoopState ^&gt; ^ body);" />
      <MemberSignature Language="F#" Value="static member For : int * int * System.Threading.Tasks.ParallelOptions * Action&lt;int, System.Threading.Tasks.ParallelLoopState&gt; -&gt; System.Threading.Tasks.ParallelLoopResult" Usage="System.Threading.Tasks.Parallel.For (fromInclusive, toExclusive, parallelOptions, body)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks.Parallel</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.3.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.ParallelLoopResult</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="fromInclusive" Type="System.Int32" />
        <Parameter Name="toExclusive" Type="System.Int32" />
        <Parameter Name="parallelOptions" Type="System.Threading.Tasks.ParallelOptions" />
        <Parameter Name="body" Type="System.Action&lt;System.Int32,System.Threading.Tasks.ParallelLoopState&gt;" />
      </Parameters>
      <Docs>
        <param name="fromInclusive">Начальный индекс, включительно.</param>
        <param name="toExclusive">Конечный индекс, не включительно.</param>
        <param name="parallelOptions">Объект, используемый для настройки поведения этой операции.</param>
        <param name="body">Делегат, который вызывается один раз за итерацию.</param>
        <summary>Выполняет цикл <see langword="for" /> (<see langword="For" /> в Visual Basic), обеспечивая возможность параллельного выполнения итераций, настройки параметров цикла, а также контроля состояния цикла и управления этим состоянием.</summary>
        <returns>Структура, в которой содержатся сведения о выполненной части цикла.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 `body` Делегат вызывается один раз для каждого значения в диапазоне итерации (`fromInclusive`, `toExclusive`). Предоставляется со следующими параметрами: число итераций (<xref:System.Int32>) и <xref:System.Threading.Tasks.ParallelLoopState> экземпляр, который может использоваться для выхода из цикла преждевременно.  
  
 Если `fromInclusive` больше или равен `toExclusive`, метод возвращается немедленно, без выполнения перебора.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.OperationCanceledException">Токен <see cref="T:System.Threading.CancellationToken" /> в аргументе <paramref name="parallelOptions" /> отменен.</exception>
        <exception cref="T:System.ArgumentNullException">Аргумент <paramref name="body" /> имеет значение <see langword="null" />.  -или- Аргумент <paramref name="parallelOptions" /> имеет значение <see langword="null" />.</exception>
        <exception cref="T:System.AggregateException">Исключение, которое содержит все отдельные исключения, создаваемые во всех потоках.</exception>
        <exception cref="T:System.ObjectDisposedException">
          <see cref="T:System.Threading.CancellationTokenSource" />, связанный с <see cref="T:System.Threading.CancellationToken" /> в <paramref name="parallelOptions" />, удален.</exception>
      </Docs>
    </Member>
    <Member MemberName="For">
      <MemberSignature Language="C#" Value="public static System.Threading.Tasks.ParallelLoopResult For (int fromInclusive, int toExclusive, System.Threading.Tasks.ParallelOptions parallelOptions, Action&lt;int&gt; body);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.Threading.Tasks.ParallelLoopResult For(int32 fromInclusive, int32 toExclusive, class System.Threading.Tasks.ParallelOptions parallelOptions, class System.Action`1&lt;int32&gt; body) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Tasks.Parallel.For(System.Int32,System.Int32,System.Threading.Tasks.ParallelOptions,System.Action{System.Int32})" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Threading::Tasks::ParallelLoopResult For(int fromInclusive, int toExclusive, System::Threading::Tasks::ParallelOptions ^ parallelOptions, Action&lt;int&gt; ^ body);" />
      <MemberSignature Language="F#" Value="static member For : int * int * System.Threading.Tasks.ParallelOptions * Action&lt;int&gt; -&gt; System.Threading.Tasks.ParallelLoopResult" Usage="System.Threading.Tasks.Parallel.For (fromInclusive, toExclusive, parallelOptions, body)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks.Parallel</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.3.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.ParallelLoopResult</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="fromInclusive" Type="System.Int32" />
        <Parameter Name="toExclusive" Type="System.Int32" />
        <Parameter Name="parallelOptions" Type="System.Threading.Tasks.ParallelOptions" />
        <Parameter Name="body" Type="System.Action&lt;System.Int32&gt;" />
      </Parameters>
      <Docs>
        <param name="fromInclusive">Начальный индекс, включительно.</param>
        <param name="toExclusive">Конечный индекс, не включительно.</param>
        <param name="parallelOptions">Объект, используемый для настройки поведения этой операции.</param>
        <param name="body">Делегат, который вызывается один раз за итерацию.</param>
        <summary>Выполняет цикл <see langword="for" /> (<see langword="For" /> в Visual Basic), обеспечивая возможность параллельного выполнения итераций и настройки параметров цикла.</summary>
        <returns>Структура, в которой содержатся сведения о выполненной части цикла.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 `body` Делегат вызывается один раз для каждого значения в диапазоне итерации (`fromInclusive`, `toExclusive`). Предоставляется с числом итераций (<xref:System.Int32>) как параметр.  
  
 Если `fromInclusive` больше или равно `toExclusive`, а затем метод возвращается немедленно, без выполнения перебора.  
  
   
  
## Examples  
 В следующем примере показано, как отменить параллельный цикл:  
  
 [!code-csharp[System.Threading.Tasks.Parallel#05](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.threading.tasks.parallel/cs/parallelforcancel.cs#05)]
 [!code-vb[System.Threading.Tasks.Parallel#05](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.threading.tasks.parallel/vb/parallelforcancel.vb#05)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.OperationCanceledException">Токен <see cref="T:System.Threading.CancellationToken" /> в аргументе <paramref name="parallelOptions" /> отменен.</exception>
        <exception cref="T:System.ArgumentNullException">Аргумент <paramref name="body" /> имеет значение <see langword="null" />.  -или- Аргумент <paramref name="parallelOptions" /> имеет значение <see langword="null" />.</exception>
        <exception cref="T:System.AggregateException">Исключение, которое содержит все отдельные исключения, создаваемые во всех потоках.</exception>
        <exception cref="T:System.ObjectDisposedException">
          <see cref="T:System.Threading.CancellationTokenSource" />, связанный с <see cref="T:System.Threading.CancellationToken" /> в <paramref name="parallelOptions" />, удален.</exception>
      </Docs>
    </Member>
    <Member MemberName="For">
      <MemberSignature Language="C#" Value="public static System.Threading.Tasks.ParallelLoopResult For (long fromInclusive, long toExclusive, System.Threading.Tasks.ParallelOptions parallelOptions, Action&lt;long,System.Threading.Tasks.ParallelLoopState&gt; body);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.Threading.Tasks.ParallelLoopResult For(int64 fromInclusive, int64 toExclusive, class System.Threading.Tasks.ParallelOptions parallelOptions, class System.Action`2&lt;int64, class System.Threading.Tasks.ParallelLoopState&gt; body) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Tasks.Parallel.For(System.Int64,System.Int64,System.Threading.Tasks.ParallelOptions,System.Action{System.Int64,System.Threading.Tasks.ParallelLoopState})" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Threading::Tasks::ParallelLoopResult For(long fromInclusive, long toExclusive, System::Threading::Tasks::ParallelOptions ^ parallelOptions, Action&lt;long, System::Threading::Tasks::ParallelLoopState ^&gt; ^ body);" />
      <MemberSignature Language="F#" Value="static member For : int64 * int64 * System.Threading.Tasks.ParallelOptions * Action&lt;int64, System.Threading.Tasks.ParallelLoopState&gt; -&gt; System.Threading.Tasks.ParallelLoopResult" Usage="System.Threading.Tasks.Parallel.For (fromInclusive, toExclusive, parallelOptions, body)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks.Parallel</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.3.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.ParallelLoopResult</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="fromInclusive" Type="System.Int64" />
        <Parameter Name="toExclusive" Type="System.Int64" />
        <Parameter Name="parallelOptions" Type="System.Threading.Tasks.ParallelOptions" />
        <Parameter Name="body" Type="System.Action&lt;System.Int64,System.Threading.Tasks.ParallelLoopState&gt;" />
      </Parameters>
      <Docs>
        <param name="fromInclusive">Начальный индекс, включительно.</param>
        <param name="toExclusive">Конечный индекс, не включительно.</param>
        <param name="parallelOptions">Объект, используемый для настройки поведения этой операции.</param>
        <param name="body">Делегат, который вызывается один раз за итерацию.</param>
        <summary>Выполняет цикл <see langword="for" /> (<see langword="For" /> в Visual Basic) с 64-разрядными индексами, обеспечивая возможность параллельного выполнения итераций, настройки параметров цикла, а также контроля состояния цикла и управления этим состоянием.</summary>
        <returns>Структура, в которой содержатся сведения о выполненной части цикла.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 `body` Делегат вызывается один раз для каждого значения в диапазоне итерации (`fromInclusive`, `toExclusive`). Предоставляется со следующими параметрами: число итераций (<xref:System.Int64>) и <xref:System.Threading.Tasks.ParallelLoopState> экземпляр, который может использоваться для выхода из цикла преждевременно.  
  
 Если `fromInclusive` больше или равен `toExclusive`, метод возвращается немедленно, без выполнения перебора.  
  
   
  
## Examples  
 В следующем примере показано, как использовать <xref:System.Threading.Tasks.Parallel.For%2A?displayProperty=nameWithType> метод <xref:System.Threading.Tasks.ParallelOptions> объекта:  
  
 [!code-csharp[System.Threading.Tasks.Parallel#03](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.threading.tasks.parallel/cs/parallelfor.cs#03)]
 [!code-vb[System.Threading.Tasks.Parallel#03](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.threading.tasks.parallel/vb/parallelfor.vb#03)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.OperationCanceledException">Токен <see cref="T:System.Threading.CancellationToken" /> в аргументе <paramref name="parallelOptions" /> отменен.</exception>
        <exception cref="T:System.ArgumentNullException">Аргумент <paramref name="body" /> имеет значение <see langword="null" />.  -или- Аргумент <paramref name="parallelOptions" /> имеет значение <see langword="null" />.</exception>
        <exception cref="T:System.AggregateException">Исключение, которое содержит все отдельные исключения, создаваемые во всех потоках.</exception>
        <exception cref="T:System.ObjectDisposedException">
          <see cref="T:System.Threading.CancellationTokenSource" />, связанный с <see cref="T:System.Threading.CancellationToken" /> в <paramref name="parallelOptions" />, удален.</exception>
      </Docs>
    </Member>
    <Member MemberName="For">
      <MemberSignature Language="C#" Value="public static System.Threading.Tasks.ParallelLoopResult For (long fromInclusive, long toExclusive, System.Threading.Tasks.ParallelOptions parallelOptions, Action&lt;long&gt; body);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.Threading.Tasks.ParallelLoopResult For(int64 fromInclusive, int64 toExclusive, class System.Threading.Tasks.ParallelOptions parallelOptions, class System.Action`1&lt;int64&gt; body) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Tasks.Parallel.For(System.Int64,System.Int64,System.Threading.Tasks.ParallelOptions,System.Action{System.Int64})" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Threading::Tasks::ParallelLoopResult For(long fromInclusive, long toExclusive, System::Threading::Tasks::ParallelOptions ^ parallelOptions, Action&lt;long&gt; ^ body);" />
      <MemberSignature Language="F#" Value="static member For : int64 * int64 * System.Threading.Tasks.ParallelOptions * Action&lt;int64&gt; -&gt; System.Threading.Tasks.ParallelLoopResult" Usage="System.Threading.Tasks.Parallel.For (fromInclusive, toExclusive, parallelOptions, body)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks.Parallel</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.3.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.ParallelLoopResult</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="fromInclusive" Type="System.Int64" />
        <Parameter Name="toExclusive" Type="System.Int64" />
        <Parameter Name="parallelOptions" Type="System.Threading.Tasks.ParallelOptions" />
        <Parameter Name="body" Type="System.Action&lt;System.Int64&gt;" />
      </Parameters>
      <Docs>
        <param name="fromInclusive">Начальный индекс, включительно.</param>
        <param name="toExclusive">Конечный индекс, не включительно.</param>
        <param name="parallelOptions">Объект, используемый для настройки поведения этой операции.</param>
        <param name="body">Делегат, который вызывается один раз за итерацию.</param>
        <summary>Выполняет цикл <see langword="for" /> (<see langword="For" /> в Visual Basic) с 64-разрядными индексами, обеспечивая возможность параллельного выполнения итераций и настройки параметров цикла.</summary>
        <returns>Структура, в которой содержатся сведения о выполненной части цикла.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Поддерживает 64-разрядными индексами. `body` Делегат вызывается один раз для каждого значения в диапазоне итерации (`fromInclusive`, `toExclusive`). Предоставляется с числом итераций (<xref:System.Int64>) как параметр.  
  
 Если `fromInclusive` больше или равно `toExclusive`, а затем метод возвращается немедленно, без выполнения перебора.  
  
   
  
## Examples  
 В следующем примере показано, как использовать <xref:System.Threading.Tasks.ParallelOptions> для указания пользовательского планировщика:  
  
 [!code-csharp[System.Threading.Tasks.Parallel#06](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.threading.tasks.parallel/cs/parallelforwithscheduler.cs#06)]
 [!code-vb[System.Threading.Tasks.Parallel#06](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.threading.tasks.parallel/vb/parallelforwithscheduler.vb#06)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.OperationCanceledException">Токен <see cref="T:System.Threading.CancellationToken" /> в аргументе <paramref name="parallelOptions" /> отменен.</exception>
        <exception cref="T:System.ArgumentNullException">Аргумент <paramref name="body" /> имеет значение <see langword="null" />.  -или- Аргумент <paramref name="parallelOptions" /> имеет значение <see langword="null" />.</exception>
        <exception cref="T:System.AggregateException">Исключение, которое содержит все отдельные исключения, создаваемые во всех потоках.</exception>
        <exception cref="T:System.ObjectDisposedException">
          <see cref="T:System.Threading.CancellationTokenSource" />, связанный с <see cref="T:System.Threading.CancellationToken" /> в <paramref name="parallelOptions" />, удален.</exception>
      </Docs>
    </Member>
    <Member MemberName="For&lt;TLocal&gt;">
      <MemberSignature Language="C#" Value="public static System.Threading.Tasks.ParallelLoopResult For&lt;TLocal&gt; (int fromInclusive, int toExclusive, Func&lt;TLocal&gt; localInit, Func&lt;int,System.Threading.Tasks.ParallelLoopState,TLocal,TLocal&gt; body, Action&lt;TLocal&gt; localFinally);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.Threading.Tasks.ParallelLoopResult For&lt;TLocal&gt;(int32 fromInclusive, int32 toExclusive, class System.Func`1&lt;!!TLocal&gt; localInit, class System.Func`4&lt;int32, class System.Threading.Tasks.ParallelLoopState, !!TLocal, !!TLocal&gt; body, class System.Action`1&lt;!!TLocal&gt; localFinally) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Tasks.Parallel.For``1(System.Int32,System.Int32,System.Func{``0},System.Func{System.Int32,System.Threading.Tasks.ParallelLoopState,``0,``0},System.Action{``0})" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function For(Of TLocal) (fromInclusive As Integer, toExclusive As Integer, localInit As Func(Of TLocal), body As Func(Of Integer, ParallelLoopState, TLocal, TLocal), localFinally As Action(Of TLocal)) As ParallelLoopResult" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TLocal&gt;&#xA; static System::Threading::Tasks::ParallelLoopResult For(int fromInclusive, int toExclusive, Func&lt;TLocal&gt; ^ localInit, Func&lt;int, System::Threading::Tasks::ParallelLoopState ^, TLocal, TLocal&gt; ^ body, Action&lt;TLocal&gt; ^ localFinally);" />
      <MemberSignature Language="F#" Value="static member For : int * int * Func&lt;'Local&gt; * Func&lt;int, System.Threading.Tasks.ParallelLoopState, 'Local, 'Local&gt; * Action&lt;'Local&gt; -&gt; System.Threading.Tasks.ParallelLoopResult" Usage="System.Threading.Tasks.Parallel.For (fromInclusive, toExclusive, localInit, body, localFinally)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks.Parallel</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.3.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.ParallelLoopResult</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TLocal" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="fromInclusive" Type="System.Int32" />
        <Parameter Name="toExclusive" Type="System.Int32" />
        <Parameter Name="localInit" Type="System.Func&lt;TLocal&gt;" />
        <Parameter Name="body" Type="System.Func&lt;System.Int32,System.Threading.Tasks.ParallelLoopState,TLocal,TLocal&gt;" />
        <Parameter Name="localFinally" Type="System.Action&lt;TLocal&gt;" />
      </Parameters>
      <Docs>
        <typeparam name="TLocal">Тип данных, локальных для потока.</typeparam>
        <param name="fromInclusive">Начальный индекс, включительно.</param>
        <param name="toExclusive">Конечный индекс, не включительно.</param>
        <param name="localInit">Делегат функции, который возвращает начальное состояние локальных данных для каждой задачи.</param>
        <param name="body">Делегат, который вызывается один раз за итерацию.</param>
        <param name="localFinally">Делегат, который выполняет финальное действие с локальным состоянием каждой задачи.</param>
        <summary>Выполняет цикл <see langword="for" /> (<see langword="For" /> в Visual Basic) с локальными данными потока, обеспечивая возможность параллельного выполнения итераций, а также контроля состояния цикла и управления этим состоянием.</summary>
        <returns>Структура, в которой содержатся сведения о выполненной части цикла.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 `body` Делегат вызывается один раз для каждого значения в диапазоне итерации (`fromInclusive`, `toExclusive`). Предоставляется со следующими параметрами: число итераций (<xref:System.Int32>), <xref:System.Threading.Tasks.ParallelLoopState> экземпляр, который может использоваться для выхода из цикла преждевременно и некоторое локальное состояние, которое может быть общим для итераций, которые выполняются в одном потоке.  
  
 `localInit` Делегат вызывается один раз для каждой задачи, которая участвует в выполнении цикла и возвращает начальное локальное состояние для каждой из этих задач. Эти начальные состояния передаются первому `body` вызовов на каждой задачи. Затем вызов каждого последующего тела возвращает потенциально измененное значение состояния, передается следующему вызову тела. Наконец, вызов последнего тела в каждой задачи возвращает значение состояния, передаваемый `localFinally` делегата. `localFinally` Делегат вызывается один раз за задачи для выполнения финальное действие с локальным состоянием каждой задачи. Этот делегат может быть вызван одновременно несколько задач; Таким образом необходимо синхронизировать доступ ко всем общим переменным.  
  
 <xref:System.Threading.Tasks.Parallel.For%2A?displayProperty=nameWithType> Метод может использовать задач больше, чем потоков в течение времени существования его выполнения, как существующие задачи завершаются и заменяются на новые задачи. Это дает базовый <xref:System.Threading.Tasks.TaskScheduler> объекта возможность добавить, изменить или удалить потоков, обслуживающих цикла.  
  
 Если `fromInclusive` больше или равно `toExclusive`, а затем метод возвращается немедленно, без выполнения перебора.  
  
 Пример использования этого метода см. в разделе [как: написание цикла Parallel.For локальными переменными потока](~/docs/standard/parallel-programming/how-to-write-a-parallel-for-loop-with-thread-local-variables.md).  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">Аргумент <paramref name="body" /> имеет значение <see langword="null" />.  -или- Аргумент <paramref name="localInit" /> имеет значение <see langword="null" />.  -или- Аргумент <paramref name="localFinally" /> имеет значение <see langword="null" />.</exception>
        <exception cref="T:System.AggregateException">Исключение, которое содержит все отдельные исключения, создаваемые во всех потоках.</exception>
      </Docs>
    </Member>
    <Member MemberName="For&lt;TLocal&gt;">
      <MemberSignature Language="C#" Value="public static System.Threading.Tasks.ParallelLoopResult For&lt;TLocal&gt; (long fromInclusive, long toExclusive, Func&lt;TLocal&gt; localInit, Func&lt;long,System.Threading.Tasks.ParallelLoopState,TLocal,TLocal&gt; body, Action&lt;TLocal&gt; localFinally);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.Threading.Tasks.ParallelLoopResult For&lt;TLocal&gt;(int64 fromInclusive, int64 toExclusive, class System.Func`1&lt;!!TLocal&gt; localInit, class System.Func`4&lt;int64, class System.Threading.Tasks.ParallelLoopState, !!TLocal, !!TLocal&gt; body, class System.Action`1&lt;!!TLocal&gt; localFinally) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Tasks.Parallel.For``1(System.Int64,System.Int64,System.Func{``0},System.Func{System.Int64,System.Threading.Tasks.ParallelLoopState,``0,``0},System.Action{``0})" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function For(Of TLocal) (fromInclusive As Long, toExclusive As Long, localInit As Func(Of TLocal), body As Func(Of Long, ParallelLoopState, TLocal, TLocal), localFinally As Action(Of TLocal)) As ParallelLoopResult" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TLocal&gt;&#xA; static System::Threading::Tasks::ParallelLoopResult For(long fromInclusive, long toExclusive, Func&lt;TLocal&gt; ^ localInit, Func&lt;long, System::Threading::Tasks::ParallelLoopState ^, TLocal, TLocal&gt; ^ body, Action&lt;TLocal&gt; ^ localFinally);" />
      <MemberSignature Language="F#" Value="static member For : int64 * int64 * Func&lt;'Local&gt; * Func&lt;int64, System.Threading.Tasks.ParallelLoopState, 'Local, 'Local&gt; * Action&lt;'Local&gt; -&gt; System.Threading.Tasks.ParallelLoopResult" Usage="System.Threading.Tasks.Parallel.For (fromInclusive, toExclusive, localInit, body, localFinally)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks.Parallel</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.3.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.ParallelLoopResult</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TLocal" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="fromInclusive" Type="System.Int64" />
        <Parameter Name="toExclusive" Type="System.Int64" />
        <Parameter Name="localInit" Type="System.Func&lt;TLocal&gt;" />
        <Parameter Name="body" Type="System.Func&lt;System.Int64,System.Threading.Tasks.ParallelLoopState,TLocal,TLocal&gt;" />
        <Parameter Name="localFinally" Type="System.Action&lt;TLocal&gt;" />
      </Parameters>
      <Docs>
        <typeparam name="TLocal">Тип данных, локальных для потока.</typeparam>
        <param name="fromInclusive">Начальный индекс, включительно.</param>
        <param name="toExclusive">Конечный индекс, не включительно.</param>
        <param name="localInit">Делегат функции, который возвращает начальное состояние локальных данных для каждой задачи.</param>
        <param name="body">Делегат, который вызывается один раз за итерацию.</param>
        <param name="localFinally">Делегат, который выполняет финальное действие с локальным состоянием каждой задачи.</param>
        <summary>Выполняет цикл <see langword="for" /> (<see langword="For" /> в Visual Basic) с 64-разрядными индексами и локальными данными потока, обеспечивая возможность параллельного выполнения итераций, а также контроля состояния цикла и управления этим состоянием.</summary>
        <returns>Структура, в которой содержатся сведения о выполненной части цикла.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 `body` Делегат вызывается один раз для каждого значения в диапазоне итерации (`fromInclusive`, `toExclusive`). Предоставляется со следующими параметрами: число итераций (<xref:System.Int64>), <xref:System.Threading.Tasks.ParallelLoopState> экземпляр, который может использоваться для выхода из цикла преждевременно и некоторое локальное состояние, которое может быть общим для итераций, которые выполняются на ту же задачу.  
  
 `localInit` Делегат вызывается один раз для каждой задачи, которая участвует в выполнении цикла и возвращает начальное локальное состояние для каждой из этих задач. Эти начальные состояния передаются первому `body` вызовов на каждой задачи. Затем вызов каждого последующего тела возвращает потенциально измененное значение состояния, передается следующему вызову тела. Наконец, вызов последнего тела в каждой задачи возвращает значение состояния, передаваемый `localFinally` делегата. `localFinally` Делегат вызывается один раз за задачи для выполнения финальное действие с локальным состоянием каждой задачи. Этот делегат может быть вызван одновременно несколько задач; Таким образом необходимо синхронизировать доступ ко всем общим переменным.  
  
 <xref:System.Threading.Tasks.Parallel.For%2A?displayProperty=nameWithType> Метод может использовать задач больше, чем потоков в течение времени существования его выполнения, как существующие задачи завершаются и заменяются на новые задачи. Это дает базовый <xref:System.Threading.Tasks.TaskScheduler> объекта возможность добавить, изменить или удалить потоков, обслуживающих цикла.  
  
 Если `fromInclusive` больше или равно `toExclusive`, а затем метод возвращается немедленно, без выполнения перебора.  
  
 Пример использования этого метода см. в разделе [как: написание цикла Parallel.For локальными переменными потока](~/docs/standard/parallel-programming/how-to-write-a-parallel-for-loop-with-thread-local-variables.md).  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">Аргумент <paramref name="body" /> имеет значение <see langword="null" />.  -или- Аргумент <paramref name="localInit" /> имеет значение <see langword="null" />.  -или- Аргумент <paramref name="localFinally" /> имеет значение <see langword="null" />.</exception>
        <exception cref="T:System.AggregateException">Исключение, которое содержит все отдельные исключения, создаваемые во всех потоках.</exception>
      </Docs>
    </Member>
    <Member MemberName="For&lt;TLocal&gt;">
      <MemberSignature Language="C#" Value="public static System.Threading.Tasks.ParallelLoopResult For&lt;TLocal&gt; (int fromInclusive, int toExclusive, System.Threading.Tasks.ParallelOptions parallelOptions, Func&lt;TLocal&gt; localInit, Func&lt;int,System.Threading.Tasks.ParallelLoopState,TLocal,TLocal&gt; body, Action&lt;TLocal&gt; localFinally);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.Threading.Tasks.ParallelLoopResult For&lt;TLocal&gt;(int32 fromInclusive, int32 toExclusive, class System.Threading.Tasks.ParallelOptions parallelOptions, class System.Func`1&lt;!!TLocal&gt; localInit, class System.Func`4&lt;int32, class System.Threading.Tasks.ParallelLoopState, !!TLocal, !!TLocal&gt; body, class System.Action`1&lt;!!TLocal&gt; localFinally) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Tasks.Parallel.For``1(System.Int32,System.Int32,System.Threading.Tasks.ParallelOptions,System.Func{``0},System.Func{System.Int32,System.Threading.Tasks.ParallelLoopState,``0,``0},System.Action{``0})" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TLocal&gt;&#xA; static System::Threading::Tasks::ParallelLoopResult For(int fromInclusive, int toExclusive, System::Threading::Tasks::ParallelOptions ^ parallelOptions, Func&lt;TLocal&gt; ^ localInit, Func&lt;int, System::Threading::Tasks::ParallelLoopState ^, TLocal, TLocal&gt; ^ body, Action&lt;TLocal&gt; ^ localFinally);" />
      <MemberSignature Language="F#" Value="static member For : int * int * System.Threading.Tasks.ParallelOptions * Func&lt;'Local&gt; * Func&lt;int, System.Threading.Tasks.ParallelLoopState, 'Local, 'Local&gt; * Action&lt;'Local&gt; -&gt; System.Threading.Tasks.ParallelLoopResult" Usage="System.Threading.Tasks.Parallel.For (fromInclusive, toExclusive, parallelOptions, localInit, body, localFinally)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks.Parallel</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.3.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.ParallelLoopResult</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TLocal" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="fromInclusive" Type="System.Int32" />
        <Parameter Name="toExclusive" Type="System.Int32" />
        <Parameter Name="parallelOptions" Type="System.Threading.Tasks.ParallelOptions" />
        <Parameter Name="localInit" Type="System.Func&lt;TLocal&gt;" />
        <Parameter Name="body" Type="System.Func&lt;System.Int32,System.Threading.Tasks.ParallelLoopState,TLocal,TLocal&gt;" />
        <Parameter Name="localFinally" Type="System.Action&lt;TLocal&gt;" />
      </Parameters>
      <Docs>
        <typeparam name="TLocal">Тип данных, локальных для потока.</typeparam>
        <param name="fromInclusive">Начальный индекс, включительно.</param>
        <param name="toExclusive">Конечный индекс, не включительно.</param>
        <param name="parallelOptions">Объект, используемый для настройки поведения этой операции.</param>
        <param name="localInit">Делегат функции, который возвращает начальное состояние локальных данных для каждой задачи.</param>
        <param name="body">Делегат, который вызывается один раз за итерацию.</param>
        <param name="localFinally">Делегат, который выполняет финальное действие с локальным состоянием каждой задачи.</param>
        <summary>Выполняет цикл <see langword="for" /> (<see langword="For" /> в Visual Basic) с локальными данными потока, обеспечивая возможность параллельного выполнения итераций, настройки параметров цикла, а также контроля состояния цикла и управления этим состоянием.</summary>
        <returns>Структура, в которой содержатся сведения о выполненной части цикла.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 `body` Делегат вызывается один раз для каждого значения в диапазоне итерации (`fromInclusive`, `toExclusive`). Предоставляется со следующими параметрами: число итераций (<xref:System.Int32>), <xref:System.Threading.Tasks.ParallelLoopState> экземпляр, который может использоваться для выхода из цикла преждевременно и некоторое локальное состояние, которое может быть общим для итераций, которые выполняются на ту же задачу.  
  
 `localInit` Делегат вызывается один раз для каждой задачи, которая участвует в выполнении цикла и возвращает начальное локальное состояние для каждой из этих задач. Эти начальные состояния передаются первому `body` вызовов на каждой задачи. Затем вызов каждого последующего тела возвращает потенциально измененное значение состояния, передается следующему вызову тела. Наконец, вызов последнего тела в каждой задачи возвращает значение состояния, передаваемый `localFinally` делегата. `localFinally` Делегат вызывается один раз за задачи для выполнения финальное действие с локальным состоянием каждой задачи. Этот делегат может быть вызван одновременно несколькими потоками; Таким образом необходимо синхронизировать доступ ко всем общим переменным.  
  
 <xref:System.Threading.Tasks.Parallel.For%2A?displayProperty=nameWithType> Метод может использовать задач больше, чем потоков в течение времени существования его выполнения, как существующие задачи завершаются и заменяются на новые задачи. Это дает базовый <xref:System.Threading.Tasks.TaskScheduler> объекта возможность добавить, изменить или удалить потоков, обслуживающих цикла.  
  
 Если `fromInclusive` больше или равно `toExclusive`, а затем метод возвращается немедленно, без выполнения перебора.  
  
   
  
## Examples  
 Следующий пример использует локальные переменные потока для вычисления суммы результаты длительных операций. В этом примере ограничивает степень параллелизма до 4.  
  
 [!code-csharp[System.Threading.Tasks.Parallel#04](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.threading.tasks.parallel/cs/threadlocalforwithoptions.cs#04)]
 [!code-vb[System.Threading.Tasks.Parallel#04](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.threading.tasks.parallel/vb/threadlocalforwithoptions.vb#04)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">Аргумент <paramref name="body" /> имеет значение <see langword="null" />.  -или- Аргумент <paramref name="localInit" /> имеет значение <see langword="null" />.  -или- Аргумент <paramref name="localFinally" /> имеет значение <see langword="null" />.  -или- Аргумент <paramref name="parallelOptions" /> имеет значение <see langword="null" />.</exception>
        <exception cref="T:System.OperationCanceledException">Токен <see cref="T:System.Threading.CancellationToken" /> в аргументе <paramref name="parallelOptions" /> отменен.</exception>
        <exception cref="T:System.ObjectDisposedException">
          <see cref="T:System.Threading.CancellationTokenSource" />, связанный с <see cref="T:System.Threading.CancellationToken" /> в <paramref name="parallelOptions" />, удален.</exception>
        <exception cref="T:System.AggregateException">Исключение, которое содержит все отдельные исключения, создаваемые во всех потоках.</exception>
      </Docs>
    </Member>
    <Member MemberName="For&lt;TLocal&gt;">
      <MemberSignature Language="C#" Value="public static System.Threading.Tasks.ParallelLoopResult For&lt;TLocal&gt; (long fromInclusive, long toExclusive, System.Threading.Tasks.ParallelOptions parallelOptions, Func&lt;TLocal&gt; localInit, Func&lt;long,System.Threading.Tasks.ParallelLoopState,TLocal,TLocal&gt; body, Action&lt;TLocal&gt; localFinally);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.Threading.Tasks.ParallelLoopResult For&lt;TLocal&gt;(int64 fromInclusive, int64 toExclusive, class System.Threading.Tasks.ParallelOptions parallelOptions, class System.Func`1&lt;!!TLocal&gt; localInit, class System.Func`4&lt;int64, class System.Threading.Tasks.ParallelLoopState, !!TLocal, !!TLocal&gt; body, class System.Action`1&lt;!!TLocal&gt; localFinally) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Tasks.Parallel.For``1(System.Int64,System.Int64,System.Threading.Tasks.ParallelOptions,System.Func{``0},System.Func{System.Int64,System.Threading.Tasks.ParallelLoopState,``0,``0},System.Action{``0})" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TLocal&gt;&#xA; static System::Threading::Tasks::ParallelLoopResult For(long fromInclusive, long toExclusive, System::Threading::Tasks::ParallelOptions ^ parallelOptions, Func&lt;TLocal&gt; ^ localInit, Func&lt;long, System::Threading::Tasks::ParallelLoopState ^, TLocal, TLocal&gt; ^ body, Action&lt;TLocal&gt; ^ localFinally);" />
      <MemberSignature Language="F#" Value="static member For : int64 * int64 * System.Threading.Tasks.ParallelOptions * Func&lt;'Local&gt; * Func&lt;int64, System.Threading.Tasks.ParallelLoopState, 'Local, 'Local&gt; * Action&lt;'Local&gt; -&gt; System.Threading.Tasks.ParallelLoopResult" Usage="System.Threading.Tasks.Parallel.For (fromInclusive, toExclusive, parallelOptions, localInit, body, localFinally)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks.Parallel</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.3.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.ParallelLoopResult</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TLocal" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="fromInclusive" Type="System.Int64" />
        <Parameter Name="toExclusive" Type="System.Int64" />
        <Parameter Name="parallelOptions" Type="System.Threading.Tasks.ParallelOptions" />
        <Parameter Name="localInit" Type="System.Func&lt;TLocal&gt;" />
        <Parameter Name="body" Type="System.Func&lt;System.Int64,System.Threading.Tasks.ParallelLoopState,TLocal,TLocal&gt;" />
        <Parameter Name="localFinally" Type="System.Action&lt;TLocal&gt;" />
      </Parameters>
      <Docs>
        <typeparam name="TLocal">Тип данных, локальных для потока.</typeparam>
        <param name="fromInclusive">Начальный индекс, включительно.</param>
        <param name="toExclusive">Конечный индекс, не включительно.</param>
        <param name="parallelOptions">Объект, используемый для настройки поведения этой операции.</param>
        <param name="localInit">Делегат функции, который возвращает начальное состояние локальных данных для каждого потока.</param>
        <param name="body">Делегат, который вызывается один раз за итерацию.</param>
        <param name="localFinally">Делегат, который выполняет финальное действие с локальным состоянием каждого потока.</param>
        <summary>Выполняет цикл <see langword="for" /> (<see langword="For" /> в Visual Basic) с 64-разрядными индексами и локальными данными потока, обеспечивая возможность параллельного выполнения итераций, настройки параметров цикла, а также контроля состояния цикла и управления этим состоянием.</summary>
        <returns>Структура, в которой содержатся сведения о выполненной части цикла.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 `body` Делегат вызывается один раз для каждого значения в диапазоне итерации (`fromInclusive`, `toExclusive`). Предоставляется со следующими параметрами: число итераций (<xref:System.Int64>), <xref:System.Threading.Tasks.ParallelLoopState> экземпляр, который может использоваться для выхода из цикла преждевременно и некоторое локальное состояние, которое может быть общим для итераций, которые выполняются в одном потоке.  
  
 `localInit` Делегат вызывается один раз для каждого потока, который участвует в выполнении цикла и возвращает начальное локальное состояние для каждого из этих потоков. Эти начальные состояния передаются первому `body` вызовов для каждого потока. Затем вызов каждого последующего тела возвращает потенциально измененное значение состояния, передается следующему вызову тела. Наконец, вызов последнего тела в каждом потоке возвращает значение состояния, передаваемый `localFinally` делегата. `localFinally` Делегат вызывается один раз за поток, выполняющий финальное действие с локальным состоянием каждого потока. Этот делегат может быть вызван одновременно несколькими потоками; Таким образом необходимо синхронизировать доступ ко всем общим переменным.  
  
 <xref:System.Threading.Tasks.Parallel.For%2A?displayProperty=nameWithType> Метод может использовать задач больше, чем потоков в течение времени существования его выполнения, как существующие задачи завершаются и заменяются на новые задачи. Это дает базовый <xref:System.Threading.Tasks.TaskScheduler> объекта возможность добавить, изменить или удалить потоков, обслуживающих цикла.  
  
 Если `fromInclusive` больше или равно `toExclusive`, а затем метод возвращается немедленно, без выполнения перебора.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">Аргумент <paramref name="body" /> имеет значение <see langword="null" />.  -или- Аргумент <paramref name="localInit" /> имеет значение <see langword="null" />.  -или- Аргумент <paramref name="localFinally" /> имеет значение <see langword="null" />.  -или- Аргумент <paramref name="parallelOptions" /> имеет значение <see langword="null" />.</exception>
        <exception cref="T:System.OperationCanceledException">Токен <see cref="T:System.Threading.CancellationToken" /> в аргументе <paramref name="parallelOptions" /> отменен.</exception>
        <exception cref="T:System.ObjectDisposedException">
          <see cref="T:System.Threading.CancellationTokenSource" />, связанный с <see cref="T:System.Threading.CancellationToken" /> в <paramref name="parallelOptions" />, удален.</exception>
        <exception cref="T:System.AggregateException">Исключение, которое содержит все отдельные исключения, создаваемые во всех потоках.</exception>
      </Docs>
    </Member>
    <MemberGroup MemberName="ForEach&lt;TSource&gt;">
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks.Parallel</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.3.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Выполняет операцию <see langword="foreach" /> (<see langword="For Each " /> в Visual Basic), обеспечивая возможность параллельного выполнения итераций.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="ForEach&lt;TSource&gt;">
      <MemberSignature Language="C#" Value="public static System.Threading.Tasks.ParallelLoopResult ForEach&lt;TSource&gt; (System.Collections.Concurrent.OrderablePartitioner&lt;TSource&gt; source, Action&lt;TSource,System.Threading.Tasks.ParallelLoopState,long&gt; body);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.Threading.Tasks.ParallelLoopResult ForEach&lt;TSource&gt;(class System.Collections.Concurrent.OrderablePartitioner`1&lt;!!TSource&gt; source, class System.Action`3&lt;!!TSource, class System.Threading.Tasks.ParallelLoopState, int64&gt; body) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Tasks.Parallel.ForEach``1(System.Collections.Concurrent.OrderablePartitioner{``0},System.Action{``0,System.Threading.Tasks.ParallelLoopState,System.Int64})" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function ForEach(Of TSource) (source As OrderablePartitioner(Of TSource), body As Action(Of TSource, ParallelLoopState, Long)) As ParallelLoopResult" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TSource&gt;&#xA; static System::Threading::Tasks::ParallelLoopResult ForEach(System::Collections::Concurrent::OrderablePartitioner&lt;TSource&gt; ^ source, Action&lt;TSource, System::Threading::Tasks::ParallelLoopState ^, long&gt; ^ body);" />
      <MemberSignature Language="F#" Value="static member ForEach : System.Collections.Concurrent.OrderablePartitioner&lt;'Source&gt; * Action&lt;'Source, System.Threading.Tasks.ParallelLoopState, int64&gt; -&gt; System.Threading.Tasks.ParallelLoopResult" Usage="System.Threading.Tasks.Parallel.ForEach (source, body)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks.Parallel</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.3.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.ParallelLoopResult</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TSource" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="source" Type="System.Collections.Concurrent.OrderablePartitioner&lt;TSource&gt;" />
        <Parameter Name="body" Type="System.Action&lt;TSource,System.Threading.Tasks.ParallelLoopState,System.Int64&gt;" />
      </Parameters>
      <Docs>
        <typeparam name="TSource">Тип элементов в <c>источника</c>.</typeparam>
        <param name="source">Упорядочиваемый разделитель, содержащий исходный источник данных.</param>
        <param name="body">Делегат, который вызывается один раз за итерацию.</param>
        <summary>Выполняет операцию <see langword="foreach" /> (<see langword="For Each" /> в Visual Basic) для объекта <see cref="T:System.Collections.Concurrent.OrderablePartitioner`1" />, обеспечивая возможность параллельного выполнения итераций, а также контроля состояния цикла и управления этим состоянием.</summary>
        <returns>Структура, в которой содержатся сведения о выполненной части цикла.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Эта перегрузка предоставляется для сценариев, где вы хотите переопределить значение по умолчанию схему секционирования. Например небольших тел циклов может повыситься при использовании секционирования диапазона. <xref:System.Threading.Tasks.Parallel.ForEach%2A?displayProperty=nameWithType> Метод ожидает пользовательские разделители для поддержки динамическое секционирование. Дополнительные сведения см. в разделе [пользовательские разделители для PLINQ и TPL](~/docs/standard/parallel-programming/custom-partitioners-for-plinq-and-tpl.md) и [как: реализация динамических разделов](~/docs/standard/parallel-programming/how-to-implement-dynamic-partitions.md).  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">Аргумент <paramref name="source" /> имеет значение <see langword="null" />.  -или- Аргумент <paramref name="body" /> имеет значение <see langword="null" />.</exception>
        <exception cref="T:System.InvalidOperationException">Свойство <see cref="P:System.Collections.Concurrent.Partitioner`1.SupportsDynamicPartitions" /> в упорядочиваемом разделителе <paramref name="source" /> возвращает значение <see langword="false" />.  -или- Свойство <see cref="P:System.Collections.Concurrent.OrderablePartitioner`1.KeysNormalized" /> в упорядочиваемом разделителе источника возвращает значение <see langword="false" />.  -или- Все методы в упорядочиваемом модуле разделения источника возвращают <see langword="null" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="ForEach&lt;TSource&gt;">
      <MemberSignature Language="C#" Value="public static System.Threading.Tasks.ParallelLoopResult ForEach&lt;TSource&gt; (System.Collections.Concurrent.Partitioner&lt;TSource&gt; source, Action&lt;TSource,System.Threading.Tasks.ParallelLoopState&gt; body);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.Threading.Tasks.ParallelLoopResult ForEach&lt;TSource&gt;(class System.Collections.Concurrent.Partitioner`1&lt;!!TSource&gt; source, class System.Action`2&lt;!!TSource, class System.Threading.Tasks.ParallelLoopState&gt; body) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Tasks.Parallel.ForEach``1(System.Collections.Concurrent.Partitioner{``0},System.Action{``0,System.Threading.Tasks.ParallelLoopState})" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function ForEach(Of TSource) (source As Partitioner(Of TSource), body As Action(Of TSource, ParallelLoopState)) As ParallelLoopResult" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TSource&gt;&#xA; static System::Threading::Tasks::ParallelLoopResult ForEach(System::Collections::Concurrent::Partitioner&lt;TSource&gt; ^ source, Action&lt;TSource, System::Threading::Tasks::ParallelLoopState ^&gt; ^ body);" />
      <MemberSignature Language="F#" Value="static member ForEach : System.Collections.Concurrent.Partitioner&lt;'Source&gt; * Action&lt;'Source, System.Threading.Tasks.ParallelLoopState&gt; -&gt; System.Threading.Tasks.ParallelLoopResult" Usage="System.Threading.Tasks.Parallel.ForEach (source, body)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks.Parallel</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.3.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.ParallelLoopResult</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TSource" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="source" Type="System.Collections.Concurrent.Partitioner&lt;TSource&gt;" />
        <Parameter Name="body" Type="System.Action&lt;TSource,System.Threading.Tasks.ParallelLoopState&gt;" />
      </Parameters>
      <Docs>
        <typeparam name="TSource">Тип элементов в <c>источника</c>.</typeparam>
        <param name="source">Разделитель, содержащий исходный источник данных.</param>
        <param name="body">Делегат, который вызывается один раз за итерацию.</param>
        <summary>Выполняет операцию <see langword="foreach" /> (<see langword="For Each" /> в Visual Basic) для объекта <see cref="T:System.Collections.Concurrent.Partitioner" />, обеспечивая возможность параллельного выполнения итераций, а также контроля состояния цикла и управления этим состоянием.</summary>
        <returns>Структура, в которой содержатся сведения о выполненной части цикла.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Эта перегрузка предоставляется для сценариев, где вы хотите переопределить значение по умолчанию схему секционирования. Например небольших тел циклов может повыситься при использовании секционирования диапазона. <xref:System.Threading.Tasks.Parallel.ForEach%2A?displayProperty=nameWithType> Метод ожидает пользовательские разделители для поддержки динамическое секционирование. Дополнительные сведения см. в разделе [пользовательские разделители для PLINQ и TPL](~/docs/standard/parallel-programming/custom-partitioners-for-plinq-and-tpl.md) и [как: реализация динамических разделов](~/docs/standard/parallel-programming/how-to-implement-dynamic-partitions.md).  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">Аргумент <paramref name="source" /> имеет значение <see langword="null" />.  -или- Аргумент <paramref name="body" /> имеет значение <see langword="null" />.</exception>
        <exception cref="T:System.InvalidOperationException">Свойство <see cref="P:System.Collections.Concurrent.Partitioner`1.SupportsDynamicPartitions" /> в разделителе <paramref name="source" /> возвращает <see langword="false" />.  -или- Метод в разделителе <paramref name="source" /> возвращает <see langword="null" />.  -или- Метод <see cref="M:System.Collections.Concurrent.Partitioner`1.GetPartitions(System.Int32)" /> в разделителе <paramref name="source" /> не возвращает правильное число разделов.</exception>
      </Docs>
    </Member>
    <Member MemberName="ForEach&lt;TSource&gt;">
      <MemberSignature Language="C#" Value="public static System.Threading.Tasks.ParallelLoopResult ForEach&lt;TSource&gt; (System.Collections.Concurrent.Partitioner&lt;TSource&gt; source, Action&lt;TSource&gt; body);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.Threading.Tasks.ParallelLoopResult ForEach&lt;TSource&gt;(class System.Collections.Concurrent.Partitioner`1&lt;!!TSource&gt; source, class System.Action`1&lt;!!TSource&gt; body) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Tasks.Parallel.ForEach``1(System.Collections.Concurrent.Partitioner{``0},System.Action{``0})" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function ForEach(Of TSource) (source As Partitioner(Of TSource), body As Action(Of TSource)) As ParallelLoopResult" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TSource&gt;&#xA; static System::Threading::Tasks::ParallelLoopResult ForEach(System::Collections::Concurrent::Partitioner&lt;TSource&gt; ^ source, Action&lt;TSource&gt; ^ body);" />
      <MemberSignature Language="F#" Value="static member ForEach : System.Collections.Concurrent.Partitioner&lt;'Source&gt; * Action&lt;'Source&gt; -&gt; System.Threading.Tasks.ParallelLoopResult" Usage="System.Threading.Tasks.Parallel.ForEach (source, body)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks.Parallel</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.3.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.ParallelLoopResult</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TSource" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="source" Type="System.Collections.Concurrent.Partitioner&lt;TSource&gt;" />
        <Parameter Name="body" Type="System.Action&lt;TSource&gt;" />
      </Parameters>
      <Docs>
        <typeparam name="TSource">Тип элементов в <c>источника</c>.</typeparam>
        <param name="source">Разделитель, содержащий исходный источник данных.</param>
        <param name="body">Делегат, который вызывается один раз за итерацию.</param>
        <summary>Выполняет операцию <see langword="foreach" /> (<see langword="For Each" /> в Visual Basic) для объекта <see cref="T:System.Collections.Concurrent.Partitioner" />, обеспечивая возможность параллельного выполнения итераций.</summary>
        <returns>Структура, в которой содержатся сведения о выполненной части цикла.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Эта перегрузка предоставляется для сценариев, где вы хотите переопределить значение по умолчанию схему секционирования. Например небольших тел циклов может повыситься при использовании секционирования диапазона. <xref:System.Threading.Tasks.Parallel.ForEach%2A?displayProperty=nameWithType> Метод ожидает пользовательские разделители для поддержки динамическое секционирование. Дополнительные сведения см. в разделе [пользовательские разделители для PLINQ и TPL](~/docs/standard/parallel-programming/custom-partitioners-for-plinq-and-tpl.md) и [как: реализация динамических разделов](~/docs/standard/parallel-programming/how-to-implement-dynamic-partitions.md).  
  
   
  
## Examples  
 В следующем примере показана реализация модуля разделения диапазона для использования с <xref:System.Threading.Tasks.Parallel.ForEach%2A?displayProperty=nameWithType>:  
  
 [!code-csharp[System.Threading.Tasks.Parallel_RangePartitioners#01](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.threading.tasks.parallel_rangepartitioners/cs/rangepartitioner.cs#01)]
 [!code-vb[System.Threading.Tasks.Parallel_RangePartitioners#01](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.threading.tasks.parallel_rangepartitioners/vb/rangepart.vb#01)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">Аргумент <paramref name="source" /> имеет значение <see langword="null" />.  -или- Аргумент <paramref name="body" /> имеет значение <see langword="null" />.</exception>
        <exception cref="T:System.InvalidOperationException">Свойство <see cref="P:System.Collections.Concurrent.Partitioner`1.SupportsDynamicPartitions" /> в разделителе <paramref name="source" /> возвращает <see langword="false" />.  -или- Исключение, которое возникает, когда какие-либо методы в разделителе <paramref name="source" /> возвращают значение <see langword="null" />.  -или- Метод <see cref="M:System.Collections.Concurrent.Partitioner`1.GetPartitions(System.Int32)" /> в разделителе <paramref name="source" /> не возвращает правильное число разделов.</exception>
      </Docs>
    </Member>
    <Member MemberName="ForEach&lt;TSource&gt;">
      <MemberSignature Language="C#" Value="public static System.Threading.Tasks.ParallelLoopResult ForEach&lt;TSource&gt; (System.Collections.Generic.IEnumerable&lt;TSource&gt; source, Action&lt;TSource,System.Threading.Tasks.ParallelLoopState,long&gt; body);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.Threading.Tasks.ParallelLoopResult ForEach&lt;TSource&gt;(class System.Collections.Generic.IEnumerable`1&lt;!!TSource&gt; source, class System.Action`3&lt;!!TSource, class System.Threading.Tasks.ParallelLoopState, int64&gt; body) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Tasks.Parallel.ForEach``1(System.Collections.Generic.IEnumerable{``0},System.Action{``0,System.Threading.Tasks.ParallelLoopState,System.Int64})" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function ForEach(Of TSource) (source As IEnumerable(Of TSource), body As Action(Of TSource, ParallelLoopState, Long)) As ParallelLoopResult" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TSource&gt;&#xA; static System::Threading::Tasks::ParallelLoopResult ForEach(System::Collections::Generic::IEnumerable&lt;TSource&gt; ^ source, Action&lt;TSource, System::Threading::Tasks::ParallelLoopState ^, long&gt; ^ body);" />
      <MemberSignature Language="F#" Value="static member ForEach : seq&lt;'Source&gt; * Action&lt;'Source, System.Threading.Tasks.ParallelLoopState, int64&gt; -&gt; System.Threading.Tasks.ParallelLoopResult" Usage="System.Threading.Tasks.Parallel.ForEach (source, body)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks.Parallel</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.3.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.ParallelLoopResult</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TSource" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="source" Type="System.Collections.Generic.IEnumerable&lt;TSource&gt;" />
        <Parameter Name="body" Type="System.Action&lt;TSource,System.Threading.Tasks.ParallelLoopState,System.Int64&gt;" />
      </Parameters>
      <Docs>
        <typeparam name="TSource">Тип данных в источнике.</typeparam>
        <param name="source">Перечислимый источник данных.</param>
        <param name="body">Делегат, который вызывается один раз за итерацию.</param>
        <summary>Выполняет операцию <see langword="foreach" /> (<see langword="For Each" /> в Visual Basic) с 64-разрядными индексами для объекта <see cref="T:System.Collections.IEnumerable" />, обеспечивая возможность параллельного выполнения итераций, а также контроля состояния цикла и управления этим состоянием.</summary>
        <returns>Структура, в которой содержатся сведения о выполненной части цикла.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 `body` Делегат вызывается один раз для каждого элемента в `source` enumerable. Предоставляется со следующими параметрами: текущий элемент <xref:System.Threading.Tasks.ParallelLoopState> экземпляр, который может использоваться для выхода из цикла преждевременно и индекс текущего элемента (<xref:System.Int64>).  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">Аргумент <paramref name="source" /> имеет значение <see langword="null" />.  -или- Аргумент <paramref name="body" /> имеет значение <see langword="null" />.</exception>
        <exception cref="T:System.AggregateException">Исключение, которое содержит все отдельные исключения, создаваемые во всех потоках.</exception>
      </Docs>
    </Member>
    <Member MemberName="ForEach&lt;TSource&gt;">
      <MemberSignature Language="C#" Value="public static System.Threading.Tasks.ParallelLoopResult ForEach&lt;TSource&gt; (System.Collections.Generic.IEnumerable&lt;TSource&gt; source, Action&lt;TSource,System.Threading.Tasks.ParallelLoopState&gt; body);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.Threading.Tasks.ParallelLoopResult ForEach&lt;TSource&gt;(class System.Collections.Generic.IEnumerable`1&lt;!!TSource&gt; source, class System.Action`2&lt;!!TSource, class System.Threading.Tasks.ParallelLoopState&gt; body) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Tasks.Parallel.ForEach``1(System.Collections.Generic.IEnumerable{``0},System.Action{``0,System.Threading.Tasks.ParallelLoopState})" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function ForEach(Of TSource) (source As IEnumerable(Of TSource), body As Action(Of TSource, ParallelLoopState)) As ParallelLoopResult" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TSource&gt;&#xA; static System::Threading::Tasks::ParallelLoopResult ForEach(System::Collections::Generic::IEnumerable&lt;TSource&gt; ^ source, Action&lt;TSource, System::Threading::Tasks::ParallelLoopState ^&gt; ^ body);" />
      <MemberSignature Language="F#" Value="static member ForEach : seq&lt;'Source&gt; * Action&lt;'Source, System.Threading.Tasks.ParallelLoopState&gt; -&gt; System.Threading.Tasks.ParallelLoopResult" Usage="System.Threading.Tasks.Parallel.ForEach (source, body)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks.Parallel</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.3.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.ParallelLoopResult</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TSource" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="source" Type="System.Collections.Generic.IEnumerable&lt;TSource&gt;" />
        <Parameter Name="body" Type="System.Action&lt;TSource,System.Threading.Tasks.ParallelLoopState&gt;" />
      </Parameters>
      <Docs>
        <typeparam name="TSource">Тип данных в источнике.</typeparam>
        <param name="source">Перечислимый источник данных.</param>
        <param name="body">Делегат, который вызывается один раз за итерацию.</param>
        <summary>Выполняет операцию <see langword="foreach" /> (<see langword="For Each" /> в Visual Basic) для объекта <see cref="T:System.Collections.IEnumerable" />, обеспечивая возможность параллельного выполнения итераций, а также контроля состояния цикла и управления этим состоянием.</summary>
        <returns>Структура, в которой содержатся сведения о выполненной части цикла.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 `body` Делегат вызывается один раз для каждого элемента в `source` enumerable. Предоставляется со следующими параметрами: текущий элемент и <xref:System.Threading.Tasks.ParallelLoopState> экземпляр, который может использоваться для выхода из цикла преждевременно.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">Аргумент <paramref name="source" /> имеет значение <see langword="null" />.  -или- Аргумент <paramref name="body" /> имеет значение <see langword="null" />.</exception>
        <exception cref="T:System.AggregateException">Исключение, которое содержит все отдельные исключения, создаваемые во всех потоках.</exception>
      </Docs>
    </Member>
    <Member MemberName="ForEach&lt;TSource&gt;">
      <MemberSignature Language="C#" Value="public static System.Threading.Tasks.ParallelLoopResult ForEach&lt;TSource&gt; (System.Collections.Generic.IEnumerable&lt;TSource&gt; source, Action&lt;TSource&gt; body);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.Threading.Tasks.ParallelLoopResult ForEach&lt;TSource&gt;(class System.Collections.Generic.IEnumerable`1&lt;!!TSource&gt; source, class System.Action`1&lt;!!TSource&gt; body) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Tasks.Parallel.ForEach``1(System.Collections.Generic.IEnumerable{``0},System.Action{``0})" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function ForEach(Of TSource) (source As IEnumerable(Of TSource), body As Action(Of TSource)) As ParallelLoopResult" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TSource&gt;&#xA; static System::Threading::Tasks::ParallelLoopResult ForEach(System::Collections::Generic::IEnumerable&lt;TSource&gt; ^ source, Action&lt;TSource&gt; ^ body);" />
      <MemberSignature Language="F#" Value="static member ForEach : seq&lt;'Source&gt; * Action&lt;'Source&gt; -&gt; System.Threading.Tasks.ParallelLoopResult" Usage="System.Threading.Tasks.Parallel.ForEach (source, body)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks.Parallel</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.3.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.ParallelLoopResult</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TSource" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="source" Type="System.Collections.Generic.IEnumerable&lt;TSource&gt;" />
        <Parameter Name="body" Type="System.Action&lt;TSource&gt;" />
      </Parameters>
      <Docs>
        <typeparam name="TSource">Тип данных в источнике.</typeparam>
        <param name="source">Перечислимый источник данных.</param>
        <param name="body">Делегат, который вызывается один раз за итерацию.</param>
        <summary>Выполняет операцию <see langword="foreach" /> (<see langword="For Each" /> в Visual Basic) для объекта <see cref="T:System.Collections.IEnumerable" />, обеспечивая возможность параллельного выполнения итераций.</summary>
        <returns>Структура, в которой содержатся сведения о выполненной части цикла.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 `body` Делегат вызывается один раз для каждого элемента в `source` enumerable. Предоставляется с текущим элементом в качестве параметра.  
  
   
  
## Examples  
 В следующем примере используется <xref:System.Threading.Tasks.Parallel.ForEach%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Action%7B%60%600%7D%29> метод для подсчета числа гласные и отличные от пробельных символов в текстовом файле. В этом случае <xref:System.Threading.Tasks.ParallelLoopResult> значение, возвращенное методом игнорируется. Обратите внимание, что из-за операций могут выполняться параллельно, необходимо убедиться, что увеличение переменных счетчика является атомарной операции, и, несколько потоков не пытайтесь обратиться к переменных счетчика одновременно. Для этой цели в примере используется `lock` инструкции (в C#) и `SyncLock` инструкции (в Visual Basic).  
  
 [!code-csharp[System.Threading.Tasks.Parallel.ForEach#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.threading.tasks.parallel.foreach/cs/foreach1.cs#1)]
 [!code-vb[System.Threading.Tasks.Parallel.ForEach#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.threading.tasks.parallel.foreach/vb/foreach1.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">Аргумент <paramref name="source" /> имеет значение <see langword="null" />.  -или- Аргумент <paramref name="body" /> имеет значение <see langword="null" />.</exception>
        <exception cref="T:System.AggregateException">Исключение, которое содержит все отдельные исключения, создаваемые во всех потоках.</exception>
      </Docs>
    </Member>
    <Member MemberName="ForEach&lt;TSource&gt;">
      <MemberSignature Language="C#" Value="public static System.Threading.Tasks.ParallelLoopResult ForEach&lt;TSource&gt; (System.Collections.Concurrent.OrderablePartitioner&lt;TSource&gt; source, System.Threading.Tasks.ParallelOptions parallelOptions, Action&lt;TSource,System.Threading.Tasks.ParallelLoopState,long&gt; body);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.Threading.Tasks.ParallelLoopResult ForEach&lt;TSource&gt;(class System.Collections.Concurrent.OrderablePartitioner`1&lt;!!TSource&gt; source, class System.Threading.Tasks.ParallelOptions parallelOptions, class System.Action`3&lt;!!TSource, class System.Threading.Tasks.ParallelLoopState, int64&gt; body) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Tasks.Parallel.ForEach``1(System.Collections.Concurrent.OrderablePartitioner{``0},System.Threading.Tasks.ParallelOptions,System.Action{``0,System.Threading.Tasks.ParallelLoopState,System.Int64})" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TSource&gt;&#xA; static System::Threading::Tasks::ParallelLoopResult ForEach(System::Collections::Concurrent::OrderablePartitioner&lt;TSource&gt; ^ source, System::Threading::Tasks::ParallelOptions ^ parallelOptions, Action&lt;TSource, System::Threading::Tasks::ParallelLoopState ^, long&gt; ^ body);" />
      <MemberSignature Language="F#" Value="static member ForEach : System.Collections.Concurrent.OrderablePartitioner&lt;'Source&gt; * System.Threading.Tasks.ParallelOptions * Action&lt;'Source, System.Threading.Tasks.ParallelLoopState, int64&gt; -&gt; System.Threading.Tasks.ParallelLoopResult" Usage="System.Threading.Tasks.Parallel.ForEach (source, parallelOptions, body)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks.Parallel</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.3.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.ParallelLoopResult</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TSource" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="source" Type="System.Collections.Concurrent.OrderablePartitioner&lt;TSource&gt;" />
        <Parameter Name="parallelOptions" Type="System.Threading.Tasks.ParallelOptions" />
        <Parameter Name="body" Type="System.Action&lt;TSource,System.Threading.Tasks.ParallelLoopState,System.Int64&gt;" />
      </Parameters>
      <Docs>
        <typeparam name="TSource">Тип элементов в <c>источника</c>.</typeparam>
        <param name="source">Упорядочиваемый разделитель, содержащий исходный источник данных.</param>
        <param name="parallelOptions">Объект, используемый для настройки поведения этой операции.</param>
        <param name="body">Делегат, который вызывается один раз за итерацию.</param>
        <summary>Выполняет операцию <see langword="foreach" /> (<see langword="For Each" /> в Visual Basic) для объекта <see cref="T:System.Collections.Concurrent.OrderablePartitioner`1" />, обеспечивая возможность параллельного выполнения итераций, настройки параметров цикла, а также контроля состояния цикла и управления этим состоянием.</summary>
        <returns>Структура, в которой содержатся сведения о выполненной части цикла.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Эта перегрузка предоставляется для сценариев, где вы хотите переопределить значение по умолчанию схему секционирования. Например небольших тел циклов может повыситься при использовании секционирования диапазона. <xref:System.Threading.Tasks.Parallel.ForEach%2A?displayProperty=nameWithType> Метод ожидает пользовательские разделители для поддержки динамическое секционирование. Дополнительные сведения см. в разделе [пользовательские разделители для PLINQ и TPL](~/docs/standard/parallel-programming/custom-partitioners-for-plinq-and-tpl.md) и [как: реализация динамических разделов](~/docs/standard/parallel-programming/how-to-implement-dynamic-partitions.md).  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.OperationCanceledException">Токен <see cref="T:System.Threading.CancellationToken" /> в аргументе <paramref name="parallelOptions" /> отменен</exception>
        <exception cref="T:System.ArgumentNullException">Аргумент <paramref name="source" /> имеет значение <see langword="null" />.  -или- Аргумент <paramref name="parallelOptions" /> имеет значение <see langword="null" />.  -или- Аргумент <paramref name="body" /> имеет значение <see langword="null" />.</exception>
        <exception cref="T:System.ObjectDisposedException">
          <see cref="T:System.Threading.CancellationTokenSource" />, связанный с <see cref="T:System.Threading.CancellationToken" /> в <paramref name="parallelOptions" />, удален.</exception>
        <exception cref="T:System.InvalidOperationException">Свойство <see cref="P:System.Collections.Concurrent.Partitioner`1.SupportsDynamicPartitions" /> в упорядочиваемом разделителе <paramref name="source" /> возвращает значение <see langword="false" />.  -или- Свойство <see cref="P:System.Collections.Concurrent.OrderablePartitioner`1.KeysNormalized" /> в упорядочиваемом разделителе <paramref name="source" /> возвращает значение <see langword="false" />.  -или- Исключение, которое возникает, когда методы в упорядочиваемом разделителе <paramref name="source" /> возвращают значение <see langword="null" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="ForEach&lt;TSource&gt;">
      <MemberSignature Language="C#" Value="public static System.Threading.Tasks.ParallelLoopResult ForEach&lt;TSource&gt; (System.Collections.Concurrent.Partitioner&lt;TSource&gt; source, System.Threading.Tasks.ParallelOptions parallelOptions, Action&lt;TSource,System.Threading.Tasks.ParallelLoopState&gt; body);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.Threading.Tasks.ParallelLoopResult ForEach&lt;TSource&gt;(class System.Collections.Concurrent.Partitioner`1&lt;!!TSource&gt; source, class System.Threading.Tasks.ParallelOptions parallelOptions, class System.Action`2&lt;!!TSource, class System.Threading.Tasks.ParallelLoopState&gt; body) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Tasks.Parallel.ForEach``1(System.Collections.Concurrent.Partitioner{``0},System.Threading.Tasks.ParallelOptions,System.Action{``0,System.Threading.Tasks.ParallelLoopState})" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TSource&gt;&#xA; static System::Threading::Tasks::ParallelLoopResult ForEach(System::Collections::Concurrent::Partitioner&lt;TSource&gt; ^ source, System::Threading::Tasks::ParallelOptions ^ parallelOptions, Action&lt;TSource, System::Threading::Tasks::ParallelLoopState ^&gt; ^ body);" />
      <MemberSignature Language="F#" Value="static member ForEach : System.Collections.Concurrent.Partitioner&lt;'Source&gt; * System.Threading.Tasks.ParallelOptions * Action&lt;'Source, System.Threading.Tasks.ParallelLoopState&gt; -&gt; System.Threading.Tasks.ParallelLoopResult" Usage="System.Threading.Tasks.Parallel.ForEach (source, parallelOptions, body)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks.Parallel</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.3.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.ParallelLoopResult</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TSource" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="source" Type="System.Collections.Concurrent.Partitioner&lt;TSource&gt;" />
        <Parameter Name="parallelOptions" Type="System.Threading.Tasks.ParallelOptions" />
        <Parameter Name="body" Type="System.Action&lt;TSource,System.Threading.Tasks.ParallelLoopState&gt;" />
      </Parameters>
      <Docs>
        <typeparam name="TSource">Тип элементов в <c>источника</c>.</typeparam>
        <param name="source">Разделитель, содержащий исходный источник данных.</param>
        <param name="parallelOptions">Объект, используемый для настройки поведения этой операции.</param>
        <param name="body">Делегат, который вызывается один раз за итерацию.</param>
        <summary>Выполняет операцию <see langword="foreach" /> (<see langword="For Each" /> в Visual Basic) для объекта <see cref="T:System.Collections.Concurrent.Partitioner" />, обеспечивая возможность параллельного выполнения итераций, настройки параметров цикла, а также контроля состояния цикла и управления этим состоянием.</summary>
        <returns>Структура, в которой содержатся сведения о выполненной части цикла.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Эта перегрузка предоставляется для сценариев, где вы хотите переопределить значение по умолчанию схему секционирования. Например небольших тел циклов может повыситься при использовании секционирования диапазона. <xref:System.Threading.Tasks.Parallel.ForEach%2A?displayProperty=nameWithType> Метод ожидает пользовательские разделители для поддержки динамическое секционирование. Дополнительные сведения см. в разделе [пользовательские разделители для PLINQ и TPL](~/docs/standard/parallel-programming/custom-partitioners-for-plinq-and-tpl.md) и [как: реализация динамических разделов](~/docs/standard/parallel-programming/how-to-implement-dynamic-partitions.md).  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.OperationCanceledException">Токен <see cref="T:System.Threading.CancellationToken" /> в аргументе <paramref name="parallelOptions" /> отменен.</exception>
        <exception cref="T:System.ObjectDisposedException">
          <see cref="T:System.Threading.CancellationTokenSource" />, связанный с <see cref="T:System.Threading.CancellationToken" /> в <paramref name="parallelOptions" />, удален.</exception>
        <exception cref="T:System.ArgumentNullException">Аргумент <paramref name="source" /> имеет значение <see langword="null" />.  -или- Аргумент <paramref name="parallelOptions" /> имеет значение <see langword="null" />.  -или- Аргумент <paramref name="body" /> имеет значение <see langword="null" />.</exception>
        <exception cref="T:System.InvalidOperationException">Свойство <see cref="P:System.Collections.Concurrent.Partitioner`1.SupportsDynamicPartitions" /> в разделителе <paramref name="source" /> возвращает <see langword="false" />.  -или- Исключение, которое возникает, когда какие-либо методы в разделителе <paramref name="source" /> возвращают значение <see langword="null" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="ForEach&lt;TSource&gt;">
      <MemberSignature Language="C#" Value="public static System.Threading.Tasks.ParallelLoopResult ForEach&lt;TSource&gt; (System.Collections.Concurrent.Partitioner&lt;TSource&gt; source, System.Threading.Tasks.ParallelOptions parallelOptions, Action&lt;TSource&gt; body);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.Threading.Tasks.ParallelLoopResult ForEach&lt;TSource&gt;(class System.Collections.Concurrent.Partitioner`1&lt;!!TSource&gt; source, class System.Threading.Tasks.ParallelOptions parallelOptions, class System.Action`1&lt;!!TSource&gt; body) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Tasks.Parallel.ForEach``1(System.Collections.Concurrent.Partitioner{``0},System.Threading.Tasks.ParallelOptions,System.Action{``0})" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TSource&gt;&#xA; static System::Threading::Tasks::ParallelLoopResult ForEach(System::Collections::Concurrent::Partitioner&lt;TSource&gt; ^ source, System::Threading::Tasks::ParallelOptions ^ parallelOptions, Action&lt;TSource&gt; ^ body);" />
      <MemberSignature Language="F#" Value="static member ForEach : System.Collections.Concurrent.Partitioner&lt;'Source&gt; * System.Threading.Tasks.ParallelOptions * Action&lt;'Source&gt; -&gt; System.Threading.Tasks.ParallelLoopResult" Usage="System.Threading.Tasks.Parallel.ForEach (source, parallelOptions, body)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks.Parallel</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.3.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.ParallelLoopResult</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TSource" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="source" Type="System.Collections.Concurrent.Partitioner&lt;TSource&gt;" />
        <Parameter Name="parallelOptions" Type="System.Threading.Tasks.ParallelOptions" />
        <Parameter Name="body" Type="System.Action&lt;TSource&gt;" />
      </Parameters>
      <Docs>
        <typeparam name="TSource">Тип элементов в <c>источника</c>.</typeparam>
        <param name="source">Разделитель, содержащий исходный источник данных.</param>
        <param name="parallelOptions">Объект, используемый для настройки поведения этой операции.</param>
        <param name="body">Делегат, который вызывается один раз за итерацию.</param>
        <summary>Выполняет операцию <see langword="foreach" /> (<see langword="For Each" /> в Visual Basic) для объекта <see cref="T:System.Collections.Concurrent.Partitioner" />, обеспечивая возможность параллельного выполнения итераций и настройки параметров цикла.</summary>
        <returns>Структура, в которой содержатся сведения о выполненной части цикла.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Эта перегрузка предоставляется для сценариев, где вы хотите переопределить значение по умолчанию схему секционирования. Например небольших тел циклов может повыситься при использовании секционирования диапазона. <xref:System.Threading.Tasks.Parallel.ForEach%2A?displayProperty=nameWithType> Метод ожидает пользовательские разделители для поддержки динамическое секционирование. Дополнительные сведения см. в разделе [пользовательские разделители для PLINQ и TPL](~/docs/standard/parallel-programming/custom-partitioners-for-plinq-and-tpl.md) и [как: реализация динамических разделов](~/docs/standard/parallel-programming/how-to-implement-dynamic-partitions.md).  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.OperationCanceledException">Токен <see cref="T:System.Threading.CancellationToken" /> в аргументе <paramref name="parallelOptions" /> отменен.</exception>
        <exception cref="T:System.ObjectDisposedException">
          <see cref="T:System.Threading.CancellationTokenSource" />, связанный с <see cref="T:System.Threading.CancellationToken" /> в <paramref name="parallelOptions" />, удален.</exception>
        <exception cref="T:System.ArgumentNullException">Аргумент <paramref name="source" /> имеет значение <see langword="null" />.  -или- Аргумент <paramref name="parallelOptions" /> имеет значение <see langword="null" />.  -или- Аргумент <paramref name="body" /> имеет значение <see langword="null" />.</exception>
        <exception cref="T:System.InvalidOperationException">Свойство <see cref="P:System.Collections.Concurrent.Partitioner`1.SupportsDynamicPartitions" /> в разделителе <paramref name="source" /> возвращает <see langword="false" />.  -или- Исключение, которое возникает, когда какие-либо методы в разделителе <paramref name="source" /> возвращают значение <see langword="null" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="ForEach&lt;TSource&gt;">
      <MemberSignature Language="C#" Value="public static System.Threading.Tasks.ParallelLoopResult ForEach&lt;TSource&gt; (System.Collections.Generic.IEnumerable&lt;TSource&gt; source, System.Threading.Tasks.ParallelOptions parallelOptions, Action&lt;TSource,System.Threading.Tasks.ParallelLoopState,long&gt; body);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.Threading.Tasks.ParallelLoopResult ForEach&lt;TSource&gt;(class System.Collections.Generic.IEnumerable`1&lt;!!TSource&gt; source, class System.Threading.Tasks.ParallelOptions parallelOptions, class System.Action`3&lt;!!TSource, class System.Threading.Tasks.ParallelLoopState, int64&gt; body) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Tasks.Parallel.ForEach``1(System.Collections.Generic.IEnumerable{``0},System.Threading.Tasks.ParallelOptions,System.Action{``0,System.Threading.Tasks.ParallelLoopState,System.Int64})" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TSource&gt;&#xA; static System::Threading::Tasks::ParallelLoopResult ForEach(System::Collections::Generic::IEnumerable&lt;TSource&gt; ^ source, System::Threading::Tasks::ParallelOptions ^ parallelOptions, Action&lt;TSource, System::Threading::Tasks::ParallelLoopState ^, long&gt; ^ body);" />
      <MemberSignature Language="F#" Value="static member ForEach : seq&lt;'Source&gt; * System.Threading.Tasks.ParallelOptions * Action&lt;'Source, System.Threading.Tasks.ParallelLoopState, int64&gt; -&gt; System.Threading.Tasks.ParallelLoopResult" Usage="System.Threading.Tasks.Parallel.ForEach (source, parallelOptions, body)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks.Parallel</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.3.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.ParallelLoopResult</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TSource" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="source" Type="System.Collections.Generic.IEnumerable&lt;TSource&gt;" />
        <Parameter Name="parallelOptions" Type="System.Threading.Tasks.ParallelOptions" />
        <Parameter Name="body" Type="System.Action&lt;TSource,System.Threading.Tasks.ParallelLoopState,System.Int64&gt;" />
      </Parameters>
      <Docs>
        <typeparam name="TSource">Тип данных в источнике.</typeparam>
        <param name="source">Перечислимый источник данных.</param>
        <param name="parallelOptions">Объект, используемый для настройки поведения этой операции.</param>
        <param name="body">Делегат, который вызывается один раз за итерацию.</param>
        <summary>Выполняет операцию <see langword="foreach" /> (<see langword="For Each" /> в Visual Basic) с 64-разрядными индексами для объекта <see cref="T:System.Collections.IEnumerable" />, обеспечивая возможность параллельного выполнения итераций, настройки параметров цикла, а также контроля состояния цикла и управления этим состоянием.</summary>
        <returns>Структура, в которой содержатся сведения о выполненной части цикла.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 `body` Делегат вызывается один раз для каждого элемента в `source` enumerable. Предоставляется со следующими параметрами: текущий элемент <xref:System.Threading.Tasks.ParallelLoopState> экземпляр, который может использоваться для выхода из цикла преждевременно и индекс текущего элемента (<xref:System.Int64>).  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.OperationCanceledException">Токен <see cref="T:System.Threading.CancellationToken" /> в аргументе <paramref name="parallelOptions" /> отменен</exception>
        <exception cref="T:System.ArgumentNullException">Аргумент <paramref name="source" /> имеет значение <see langword="null" />.  -или- Аргумент <paramref name="parallelOptions" /> имеет значение <see langword="null" />.  -или- Аргумент <paramref name="body" /> имеет значение <see langword="null" />.</exception>
        <exception cref="T:System.AggregateException">Исключение, которое содержит все отдельные исключения, создаваемые во всех потоках.</exception>
        <exception cref="T:System.ObjectDisposedException">
          <see cref="T:System.Threading.CancellationTokenSource" />, связанный с <see cref="T:System.Threading.CancellationToken" /> в <paramref name="parallelOptions" />, удален.</exception>
      </Docs>
    </Member>
    <Member MemberName="ForEach&lt;TSource&gt;">
      <MemberSignature Language="C#" Value="public static System.Threading.Tasks.ParallelLoopResult ForEach&lt;TSource&gt; (System.Collections.Generic.IEnumerable&lt;TSource&gt; source, System.Threading.Tasks.ParallelOptions parallelOptions, Action&lt;TSource,System.Threading.Tasks.ParallelLoopState&gt; body);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.Threading.Tasks.ParallelLoopResult ForEach&lt;TSource&gt;(class System.Collections.Generic.IEnumerable`1&lt;!!TSource&gt; source, class System.Threading.Tasks.ParallelOptions parallelOptions, class System.Action`2&lt;!!TSource, class System.Threading.Tasks.ParallelLoopState&gt; body) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Tasks.Parallel.ForEach``1(System.Collections.Generic.IEnumerable{``0},System.Threading.Tasks.ParallelOptions,System.Action{``0,System.Threading.Tasks.ParallelLoopState})" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TSource&gt;&#xA; static System::Threading::Tasks::ParallelLoopResult ForEach(System::Collections::Generic::IEnumerable&lt;TSource&gt; ^ source, System::Threading::Tasks::ParallelOptions ^ parallelOptions, Action&lt;TSource, System::Threading::Tasks::ParallelLoopState ^&gt; ^ body);" />
      <MemberSignature Language="F#" Value="static member ForEach : seq&lt;'Source&gt; * System.Threading.Tasks.ParallelOptions * Action&lt;'Source, System.Threading.Tasks.ParallelLoopState&gt; -&gt; System.Threading.Tasks.ParallelLoopResult" Usage="System.Threading.Tasks.Parallel.ForEach (source, parallelOptions, body)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks.Parallel</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.3.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.ParallelLoopResult</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TSource" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="source" Type="System.Collections.Generic.IEnumerable&lt;TSource&gt;" />
        <Parameter Name="parallelOptions" Type="System.Threading.Tasks.ParallelOptions" />
        <Parameter Name="body" Type="System.Action&lt;TSource,System.Threading.Tasks.ParallelLoopState&gt;" />
      </Parameters>
      <Docs>
        <typeparam name="TSource">Тип данных в источнике.</typeparam>
        <param name="source">Перечислимый источник данных.</param>
        <param name="parallelOptions">Объект, используемый для настройки поведения этой операции.</param>
        <param name="body">Делегат, который вызывается один раз за итерацию.</param>
        <summary>Выполняет операцию <see langword="foreach" /> (<see langword="For Each" /> в Visual Basic) для объекта <see cref="T:System.Collections.IEnumerable" />, обеспечивая возможность параллельного выполнения итераций, настройки параметров цикла, а также контроля состояния цикла и управления этим состоянием.</summary>
        <returns>Структура, в которой содержатся сведения о выполненной части цикла.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 `body` Делегат вызывается один раз для каждого элемента в `source` enumerable. Предоставляется со следующими параметрами: текущий элемент и <xref:System.Threading.Tasks.ParallelLoopState> экземпляр, который может использоваться для выхода из цикла преждевременно.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.OperationCanceledException">Токен <see cref="T:System.Threading.CancellationToken" /> в аргументе <paramref name="parallelOptions" /> отменен</exception>
        <exception cref="T:System.ArgumentNullException">Аргумент <paramref name="source" /> имеет значение <see langword="null" />.  -или- Аргумент <paramref name="parallelOptions" /> имеет значение <see langword="null" />.  -или- Аргумент <paramref name="body" /> имеет значение <see langword="null" />.</exception>
        <exception cref="T:System.AggregateException">Исключение, которое содержит все отдельные исключения, создаваемые во всех потоках.</exception>
        <exception cref="T:System.ObjectDisposedException">
          <see cref="T:System.Threading.CancellationTokenSource" />, связанный с <see cref="T:System.Threading.CancellationToken" /> в <paramref name="parallelOptions" />, удален.</exception>
      </Docs>
    </Member>
    <Member MemberName="ForEach&lt;TSource&gt;">
      <MemberSignature Language="C#" Value="public static System.Threading.Tasks.ParallelLoopResult ForEach&lt;TSource&gt; (System.Collections.Generic.IEnumerable&lt;TSource&gt; source, System.Threading.Tasks.ParallelOptions parallelOptions, Action&lt;TSource&gt; body);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.Threading.Tasks.ParallelLoopResult ForEach&lt;TSource&gt;(class System.Collections.Generic.IEnumerable`1&lt;!!TSource&gt; source, class System.Threading.Tasks.ParallelOptions parallelOptions, class System.Action`1&lt;!!TSource&gt; body) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Tasks.Parallel.ForEach``1(System.Collections.Generic.IEnumerable{``0},System.Threading.Tasks.ParallelOptions,System.Action{``0})" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TSource&gt;&#xA; static System::Threading::Tasks::ParallelLoopResult ForEach(System::Collections::Generic::IEnumerable&lt;TSource&gt; ^ source, System::Threading::Tasks::ParallelOptions ^ parallelOptions, Action&lt;TSource&gt; ^ body);" />
      <MemberSignature Language="F#" Value="static member ForEach : seq&lt;'Source&gt; * System.Threading.Tasks.ParallelOptions * Action&lt;'Source&gt; -&gt; System.Threading.Tasks.ParallelLoopResult" Usage="System.Threading.Tasks.Parallel.ForEach (source, parallelOptions, body)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks.Parallel</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.3.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.ParallelLoopResult</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TSource" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="source" Type="System.Collections.Generic.IEnumerable&lt;TSource&gt;" />
        <Parameter Name="parallelOptions" Type="System.Threading.Tasks.ParallelOptions" />
        <Parameter Name="body" Type="System.Action&lt;TSource&gt;" />
      </Parameters>
      <Docs>
        <typeparam name="TSource">Тип данных в источнике.</typeparam>
        <param name="source">Перечислимый источник данных.</param>
        <param name="parallelOptions">Объект, используемый для настройки поведения этой операции.</param>
        <param name="body">Делегат, который вызывается один раз за итерацию.</param>
        <summary>Выполняет операцию <see langword="foreach" /> (<see langword="For Each" /> в Visual Basic) для объекта <see cref="T:System.Collections.IEnumerable" />, обеспечивая возможность параллельного выполнения итераций и настройки параметров цикла.</summary>
        <returns>Структура, в которой содержатся сведения о выполненной части цикла.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 `body` Делегат вызывается один раз для каждого элемента в `source` enumerable. Предоставляется с текущим элементом в качестве параметра.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.OperationCanceledException">Токен <see cref="T:System.Threading.CancellationToken" /> в аргументе <paramref name="parallelOptions" /> отменен</exception>
        <exception cref="T:System.ArgumentNullException">Аргумент <paramref name="source" /> имеет значение <see langword="null" />.  -или- Аргумент <paramref name="parallelOptions" /> имеет значение <see langword="null" />.  -или- Аргумент <paramref name="body" /> имеет значение <see langword="null" />.</exception>
        <exception cref="T:System.AggregateException">Исключение, которое содержит все отдельные исключения, создаваемые во всех потоках.</exception>
        <exception cref="T:System.ObjectDisposedException">
          <see cref="T:System.Threading.CancellationTokenSource" />, связанный с <see cref="T:System.Threading.CancellationToken" /> в <paramref name="parallelOptions" />, удален.</exception>
      </Docs>
    </Member>
    <Member MemberName="ForEach&lt;TSource,TLocal&gt;">
      <MemberSignature Language="C#" Value="public static System.Threading.Tasks.ParallelLoopResult ForEach&lt;TSource,TLocal&gt; (System.Collections.Concurrent.OrderablePartitioner&lt;TSource&gt; source, Func&lt;TLocal&gt; localInit, Func&lt;TSource,System.Threading.Tasks.ParallelLoopState,long,TLocal,TLocal&gt; body, Action&lt;TLocal&gt; localFinally);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.Threading.Tasks.ParallelLoopResult ForEach&lt;TSource, TLocal&gt;(class System.Collections.Concurrent.OrderablePartitioner`1&lt;!!TSource&gt; source, class System.Func`1&lt;!!TLocal&gt; localInit, class System.Func`5&lt;!!TSource, class System.Threading.Tasks.ParallelLoopState, int64, !!TLocal, !!TLocal&gt; body, class System.Action`1&lt;!!TLocal&gt; localFinally) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Tasks.Parallel.ForEach``2(System.Collections.Concurrent.OrderablePartitioner{``0},System.Func{``1},System.Func{``0,System.Threading.Tasks.ParallelLoopState,System.Int64,``1,``1},System.Action{``1})" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function ForEach(Of TSource, TLocal) (source As OrderablePartitioner(Of TSource), localInit As Func(Of TLocal), body As Func(Of TSource, ParallelLoopState, Long, TLocal, TLocal), localFinally As Action(Of TLocal)) As ParallelLoopResult" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TSource, typename TLocal&gt;&#xA; static System::Threading::Tasks::ParallelLoopResult ForEach(System::Collections::Concurrent::OrderablePartitioner&lt;TSource&gt; ^ source, Func&lt;TLocal&gt; ^ localInit, Func&lt;TSource, System::Threading::Tasks::ParallelLoopState ^, long, TLocal, TLocal&gt; ^ body, Action&lt;TLocal&gt; ^ localFinally);" />
      <MemberSignature Language="F#" Value="static member ForEach : System.Collections.Concurrent.OrderablePartitioner&lt;'Source&gt; * Func&lt;'Local&gt; * Func&lt;'Source, System.Threading.Tasks.ParallelLoopState, int64, 'Local, 'Local&gt; * Action&lt;'Local&gt; -&gt; System.Threading.Tasks.ParallelLoopResult" Usage="System.Threading.Tasks.Parallel.ForEach (source, localInit, body, localFinally)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks.Parallel</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.3.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.ParallelLoopResult</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TSource" />
        <TypeParameter Name="TLocal" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="source" Type="System.Collections.Concurrent.OrderablePartitioner&lt;TSource&gt;" />
        <Parameter Name="localInit" Type="System.Func&lt;TLocal&gt;" />
        <Parameter Name="body" Type="System.Func&lt;TSource,System.Threading.Tasks.ParallelLoopState,System.Int64,TLocal,TLocal&gt;" />
        <Parameter Name="localFinally" Type="System.Action&lt;TLocal&gt;" />
      </Parameters>
      <Docs>
        <typeparam name="TSource">Тип элементов в <c>источника</c>.</typeparam>
        <typeparam name="TLocal">Тип данных, локальных для потока.</typeparam>
        <param name="source">Упорядочиваемый разделитель, содержащий исходный источник данных.</param>
        <param name="localInit">Делегат функции, который возвращает начальное состояние локальных данных для каждой задачи.</param>
        <param name="body">Делегат, который вызывается один раз за итерацию.</param>
        <param name="localFinally">Делегат, который выполняет финальное действие с локальным состоянием каждой задачи.</param>
        <summary>Выполняет операцию <see langword="foreach" /> (<see langword="For Each" /> в Visual Basic) с локальными данными потока для объекта <see cref="T:System.Collections.Concurrent.OrderablePartitioner`1" />, обеспечивая возможность параллельного выполнения итераций, настройки параметров цикла, а также контроля состояния цикла и управления этим состоянием.</summary>
        <returns>Структура, в которой содержатся сведения о выполненной части цикла.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Эта перегрузка предоставляется для сценариев, где вы хотите переопределить значение по умолчанию схему секционирования. Например небольших тел циклов может повыситься при использовании секционирования диапазона. <xref:System.Threading.Tasks.Parallel.ForEach%2A> Метод ожидает пользовательские разделители для поддержки динамическое секционирование. Дополнительные сведения см. в разделе [пользовательские разделители для PLINQ и TPL](~/docs/standard/parallel-programming/custom-partitioners-for-plinq-and-tpl.md) и [как: реализация динамических разделов](~/docs/standard/parallel-programming/how-to-implement-dynamic-partitions.md).  
  
 `localInit` Делегат вызывается один раз для каждой задачи, которая участвует в выполнении цикла и возвращает начальное локальное состояние для каждой из этих задач. Эти начальные состояния передаются первому `body` вызовов на каждой задачи. Затем вызов каждого последующего тела возвращает потенциально измененное значение состояния, передается следующему вызову тела. Наконец, вызов последнего тела в каждой задачи возвращает значение состояния, передаваемый `localFinally` делегата. `localFinally` Делегат вызывается один раз за задачи для выполнения финальное действие с локальным состоянием каждой задачи. Этот делегат может быть вызван одновременно несколько задач; Таким образом необходимо синхронизировать доступ ко всем общим переменным.  
  
 <xref:System.Threading.Tasks.Parallel.ForEach%2A?displayProperty=nameWithType> Метод может использовать задач больше, чем потоков в течение времени существования его выполнения, как существующие задачи завершаются и заменяются на новые задачи. Это дает базовый <xref:System.Threading.Tasks.TaskScheduler> объекта возможность добавить, изменить или удалить потоков, обслуживающих цикла.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">Аргумент <paramref name="source" /> имеет значение <see langword="null" />.  -или- Аргумент <paramref name="body" /> имеет значение <see langword="null" />.  -или- Аргумент <paramref name="localInit" /> имеет значение <see langword="null" />.  -или- Аргумент <paramref name="localFinally" /> имеет значение <see langword="null" />.</exception>
        <exception cref="T:System.InvalidOperationException">Свойство <see cref="P:System.Collections.Concurrent.Partitioner`1.SupportsDynamicPartitions" /> в разделителе <paramref name="source" /><see cref="T:System.Collections.Concurrent.Partitioner" /> возвращает значение <see langword="false" /> или разделитель возвращает части со значением <see langword="null" />.</exception>
        <exception cref="T:System.AggregateException">Исключение, которое содержит все отдельные исключения, создаваемые во всех потоках.</exception>
      </Docs>
    </Member>
    <Member MemberName="ForEach&lt;TSource,TLocal&gt;">
      <MemberSignature Language="C#" Value="public static System.Threading.Tasks.ParallelLoopResult ForEach&lt;TSource,TLocal&gt; (System.Collections.Concurrent.Partitioner&lt;TSource&gt; source, Func&lt;TLocal&gt; localInit, Func&lt;TSource,System.Threading.Tasks.ParallelLoopState,TLocal,TLocal&gt; body, Action&lt;TLocal&gt; localFinally);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.Threading.Tasks.ParallelLoopResult ForEach&lt;TSource, TLocal&gt;(class System.Collections.Concurrent.Partitioner`1&lt;!!TSource&gt; source, class System.Func`1&lt;!!TLocal&gt; localInit, class System.Func`4&lt;!!TSource, class System.Threading.Tasks.ParallelLoopState, !!TLocal, !!TLocal&gt; body, class System.Action`1&lt;!!TLocal&gt; localFinally) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Tasks.Parallel.ForEach``2(System.Collections.Concurrent.Partitioner{``0},System.Func{``1},System.Func{``0,System.Threading.Tasks.ParallelLoopState,``1,``1},System.Action{``1})" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function ForEach(Of TSource, TLocal) (source As Partitioner(Of TSource), localInit As Func(Of TLocal), body As Func(Of TSource, ParallelLoopState, TLocal, TLocal), localFinally As Action(Of TLocal)) As ParallelLoopResult" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TSource, typename TLocal&gt;&#xA; static System::Threading::Tasks::ParallelLoopResult ForEach(System::Collections::Concurrent::Partitioner&lt;TSource&gt; ^ source, Func&lt;TLocal&gt; ^ localInit, Func&lt;TSource, System::Threading::Tasks::ParallelLoopState ^, TLocal, TLocal&gt; ^ body, Action&lt;TLocal&gt; ^ localFinally);" />
      <MemberSignature Language="F#" Value="static member ForEach : System.Collections.Concurrent.Partitioner&lt;'Source&gt; * Func&lt;'Local&gt; * Func&lt;'Source, System.Threading.Tasks.ParallelLoopState, 'Local, 'Local&gt; * Action&lt;'Local&gt; -&gt; System.Threading.Tasks.ParallelLoopResult" Usage="System.Threading.Tasks.Parallel.ForEach (source, localInit, body, localFinally)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks.Parallel</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.3.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.ParallelLoopResult</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TSource" />
        <TypeParameter Name="TLocal" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="source" Type="System.Collections.Concurrent.Partitioner&lt;TSource&gt;" />
        <Parameter Name="localInit" Type="System.Func&lt;TLocal&gt;" />
        <Parameter Name="body" Type="System.Func&lt;TSource,System.Threading.Tasks.ParallelLoopState,TLocal,TLocal&gt;" />
        <Parameter Name="localFinally" Type="System.Action&lt;TLocal&gt;" />
      </Parameters>
      <Docs>
        <typeparam name="TSource">Тип элементов в <c>источника</c>.</typeparam>
        <typeparam name="TLocal">Тип данных, локальных для потока.</typeparam>
        <param name="source">Разделитель, содержащий исходный источник данных.</param>
        <param name="localInit">Делегат функции, который возвращает начальное состояние локальных данных для каждой задачи.</param>
        <param name="body">Делегат, который вызывается один раз за итерацию.</param>
        <param name="localFinally">Делегат, который выполняет финальное действие с локальным состоянием каждой задачи.</param>
        <summary>Выполняет операцию <see langword="foreach" /> (<see langword="For Each" /> в Visual Basic) с локальными данными потока для объекта <see cref="T:System.Collections.Concurrent.Partitioner" />, обеспечивая возможность параллельного выполнения итераций, а также контроля состояния цикла и управления этим состоянием.</summary>
        <returns>Структура, в которой содержатся сведения о выполненной части цикла.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Эта перегрузка предоставляется для сценариев, где вы хотите переопределить значение по умолчанию схему секционирования. Например небольших тел циклов может повыситься при использовании секционирования диапазона. <xref:System.Threading.Tasks.Parallel.ForEach%2A> Метод ожидает пользовательские разделители для поддержки динамическое секционирование. Дополнительные сведения см. в разделе [пользовательские разделители для PLINQ и TPL](~/docs/standard/parallel-programming/custom-partitioners-for-plinq-and-tpl.md) и [как: реализация динамических разделов](~/docs/standard/parallel-programming/how-to-implement-dynamic-partitions.md).  
  
 `localInit` Делегат вызывается один раз для каждого потока, который участвует в выполнении цикла и возвращает начальное локальное состояние для каждой из этих задач. Эти начальные состояния передаются первому `body` вызовов на каждой задачи. Затем вызов каждого последующего тела возвращает потенциально измененное значение состояния, передается следующему вызову тела. Наконец, вызов последнего тела в каждой задачи возвращает значение состояния, передаваемый `localFinally` делегата. `localFinally` Делегат вызывается один раз за задачи для выполнения финальное действие с локальным состоянием каждой задачи. Этот делегат может быть вызван одновременно несколько задач; Таким образом необходимо синхронизировать доступ ко всем общим переменным.  
  
 <xref:System.Threading.Tasks.Parallel.ForEach%2A?displayProperty=nameWithType> Метод может использовать задач больше, чем потоков в течение времени существования его выполнения, как существующие задачи завершаются и заменяются на новые задачи. Это дает базовый <xref:System.Threading.Tasks.TaskScheduler> объекта возможность добавить, изменить или удалить потоков, обслуживающих цикла.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">Аргумент <paramref name="source" /> имеет значение <see langword="null" />.  -или- Аргумент <paramref name="body" /> имеет значение <see langword="null" />.  -или- Аргумент <paramref name="localInit" /> имеет значение <see langword="null" />.  -или- Аргумент <paramref name="localFinally" /> имеет значение <see langword="null" />.</exception>
        <exception cref="T:System.InvalidOperationException">Свойство <see cref="P:System.Collections.Concurrent.Partitioner`1.SupportsDynamicPartitions" /> в разделителе <paramref name="source" /><see cref="T:System.Collections.Concurrent.Partitioner" /> возвращает значение <see langword="false" /> или разделитель возвращает части со значением <see langword="null" />.</exception>
        <exception cref="T:System.AggregateException">Исключение, которое содержит все отдельные исключения, создаваемые во всех потоках.</exception>
      </Docs>
    </Member>
    <Member MemberName="ForEach&lt;TSource,TLocal&gt;">
      <MemberSignature Language="C#" Value="public static System.Threading.Tasks.ParallelLoopResult ForEach&lt;TSource,TLocal&gt; (System.Collections.Generic.IEnumerable&lt;TSource&gt; source, Func&lt;TLocal&gt; localInit, Func&lt;TSource,System.Threading.Tasks.ParallelLoopState,long,TLocal,TLocal&gt; body, Action&lt;TLocal&gt; localFinally);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.Threading.Tasks.ParallelLoopResult ForEach&lt;TSource, TLocal&gt;(class System.Collections.Generic.IEnumerable`1&lt;!!TSource&gt; source, class System.Func`1&lt;!!TLocal&gt; localInit, class System.Func`5&lt;!!TSource, class System.Threading.Tasks.ParallelLoopState, int64, !!TLocal, !!TLocal&gt; body, class System.Action`1&lt;!!TLocal&gt; localFinally) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Tasks.Parallel.ForEach``2(System.Collections.Generic.IEnumerable{``0},System.Func{``1},System.Func{``0,System.Threading.Tasks.ParallelLoopState,System.Int64,``1,``1},System.Action{``1})" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function ForEach(Of TSource, TLocal) (source As IEnumerable(Of TSource), localInit As Func(Of TLocal), body As Func(Of TSource, ParallelLoopState, Long, TLocal, TLocal), localFinally As Action(Of TLocal)) As ParallelLoopResult" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TSource, typename TLocal&gt;&#xA; static System::Threading::Tasks::ParallelLoopResult ForEach(System::Collections::Generic::IEnumerable&lt;TSource&gt; ^ source, Func&lt;TLocal&gt; ^ localInit, Func&lt;TSource, System::Threading::Tasks::ParallelLoopState ^, long, TLocal, TLocal&gt; ^ body, Action&lt;TLocal&gt; ^ localFinally);" />
      <MemberSignature Language="F#" Value="static member ForEach : seq&lt;'Source&gt; * Func&lt;'Local&gt; * Func&lt;'Source, System.Threading.Tasks.ParallelLoopState, int64, 'Local, 'Local&gt; * Action&lt;'Local&gt; -&gt; System.Threading.Tasks.ParallelLoopResult" Usage="System.Threading.Tasks.Parallel.ForEach (source, localInit, body, localFinally)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks.Parallel</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.3.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.ParallelLoopResult</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TSource" />
        <TypeParameter Name="TLocal" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="source" Type="System.Collections.Generic.IEnumerable&lt;TSource&gt;" />
        <Parameter Name="localInit" Type="System.Func&lt;TLocal&gt;" />
        <Parameter Name="body" Type="System.Func&lt;TSource,System.Threading.Tasks.ParallelLoopState,System.Int64,TLocal,TLocal&gt;" />
        <Parameter Name="localFinally" Type="System.Action&lt;TLocal&gt;" />
      </Parameters>
      <Docs>
        <typeparam name="TSource">Тип данных в источнике.</typeparam>
        <typeparam name="TLocal">Тип данных, локальных для потока.</typeparam>
        <param name="source">Перечислимый источник данных.</param>
        <param name="localInit">Делегат функции, который возвращает начальное состояние локальных данных для каждой задачи.</param>
        <param name="body">Делегат, который вызывается один раз за итерацию.</param>
        <param name="localFinally">Делегат, который выполняет финальное действие с локальным состоянием каждой задачи.</param>
        <summary>Выполняет операцию <see langword="foreach" /> (<see langword="For Each" /> в Visual Basic) с локальными данными потока для объекта <see cref="T:System.Collections.IEnumerable" />, обеспечивая возможность параллельного выполнения итераций, а также контроля состояния цикла и управления этим состоянием.</summary>
        <returns>Структура, в которой содержатся сведения о выполненной части цикла.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 `body` Делегат вызывается один раз для каждого элемента в `source` enumerable. Предоставляется со следующими параметрами: текущий элемент <xref:System.Threading.Tasks.ParallelLoopState> экземпляр, который может использоваться для выхода из цикла преждевременно, индекс текущего элемента (<xref:System.Int64>) и некоторые локальное состояние, которое может быть общим для итераций, которые выполняются в том же потоке.  
  
 `localInit` Делегат вызывается один раз для каждой задачи, которая участвует в выполнении цикла и возвращает начальное локальное состояние для каждой из этих задач. Эти начальные состояния передаются первому `body` вызовов на каждой задачи. Затем вызов каждого последующего тела возвращает потенциально измененное значение состояния, передается следующему вызову тела. Наконец, вызов последнего тела в каждой задачи возвращает значение состояния, передаваемый `localFinally` делегата. `localFinally` Делегат вызывается один раз за задачи для выполнения финальное действие с локальным состоянием каждой задачи. Этот делегат может быть вызван одновременно несколько задач; Таким образом необходимо синхронизировать доступ ко всем общим переменным.  
  
 <xref:System.Threading.Tasks.Parallel.ForEach%2A?displayProperty=nameWithType> Метод может использовать задач больше, чем потоков в течение времени существования его выполнения, как существующие задачи завершаются и заменяются на новые задачи. Это дает базовый <xref:System.Threading.Tasks.TaskScheduler> объекта возможность добавить, изменить или удалить потоков, обслуживающих цикла.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">Аргумент <paramref name="source" /> имеет значение <see langword="null" />.  -или- Аргумент <paramref name="body" /> имеет значение <see langword="null" />.  -или- Аргумент <paramref name="localInit" /> имеет значение <see langword="null" />.  -или- Аргумент <paramref name="localFinally" /> имеет значение <see langword="null" />.</exception>
        <exception cref="T:System.AggregateException">Исключение, которое содержит все отдельные исключения, создаваемые во всех потоках.</exception>
      </Docs>
    </Member>
    <Member MemberName="ForEach&lt;TSource,TLocal&gt;">
      <MemberSignature Language="C#" Value="public static System.Threading.Tasks.ParallelLoopResult ForEach&lt;TSource,TLocal&gt; (System.Collections.Generic.IEnumerable&lt;TSource&gt; source, Func&lt;TLocal&gt; localInit, Func&lt;TSource,System.Threading.Tasks.ParallelLoopState,TLocal,TLocal&gt; body, Action&lt;TLocal&gt; localFinally);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.Threading.Tasks.ParallelLoopResult ForEach&lt;TSource, TLocal&gt;(class System.Collections.Generic.IEnumerable`1&lt;!!TSource&gt; source, class System.Func`1&lt;!!TLocal&gt; localInit, class System.Func`4&lt;!!TSource, class System.Threading.Tasks.ParallelLoopState, !!TLocal, !!TLocal&gt; body, class System.Action`1&lt;!!TLocal&gt; localFinally) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Tasks.Parallel.ForEach``2(System.Collections.Generic.IEnumerable{``0},System.Func{``1},System.Func{``0,System.Threading.Tasks.ParallelLoopState,``1,``1},System.Action{``1})" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function ForEach(Of TSource, TLocal) (source As IEnumerable(Of TSource), localInit As Func(Of TLocal), body As Func(Of TSource, ParallelLoopState, TLocal, TLocal), localFinally As Action(Of TLocal)) As ParallelLoopResult" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TSource, typename TLocal&gt;&#xA; static System::Threading::Tasks::ParallelLoopResult ForEach(System::Collections::Generic::IEnumerable&lt;TSource&gt; ^ source, Func&lt;TLocal&gt; ^ localInit, Func&lt;TSource, System::Threading::Tasks::ParallelLoopState ^, TLocal, TLocal&gt; ^ body, Action&lt;TLocal&gt; ^ localFinally);" />
      <MemberSignature Language="F#" Value="static member ForEach : seq&lt;'Source&gt; * Func&lt;'Local&gt; * Func&lt;'Source, System.Threading.Tasks.ParallelLoopState, 'Local, 'Local&gt; * Action&lt;'Local&gt; -&gt; System.Threading.Tasks.ParallelLoopResult" Usage="System.Threading.Tasks.Parallel.ForEach (source, localInit, body, localFinally)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks.Parallel</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.3.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.ParallelLoopResult</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TSource" />
        <TypeParameter Name="TLocal" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="source" Type="System.Collections.Generic.IEnumerable&lt;TSource&gt;" />
        <Parameter Name="localInit" Type="System.Func&lt;TLocal&gt;" />
        <Parameter Name="body" Type="System.Func&lt;TSource,System.Threading.Tasks.ParallelLoopState,TLocal,TLocal&gt;" />
        <Parameter Name="localFinally" Type="System.Action&lt;TLocal&gt;" />
      </Parameters>
      <Docs>
        <typeparam name="TSource">Тип данных в источнике.</typeparam>
        <typeparam name="TLocal">Тип данных, локальных для потока.</typeparam>
        <param name="source">Перечислимый источник данных.</param>
        <param name="localInit">Делегат функции, который возвращает начальное состояние локальных данных для каждой задачи.</param>
        <param name="body">Делегат, который вызывается один раз за итерацию.</param>
        <param name="localFinally">Делегат, который выполняет финальное действие с локальным состоянием каждой задачи.</param>
        <summary>Выполняет операцию <see langword="foreach" /> (<see langword="For Each" /> в Visual Basic) с локальными данными потока для объекта <see cref="T:System.Collections.IEnumerable" />, обеспечивая возможность параллельного выполнения итераций, а также контроля состояния цикла и управления этим состоянием.</summary>
        <returns>Структура, в которой содержатся сведения о выполненной части цикла.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 `body` Делегат вызывается один раз для каждого элемента в `source` enumerable. Предоставляется со следующими параметрами: текущий элемент <xref:System.Threading.Tasks.ParallelLoopState> экземпляр, который может использоваться для выхода из цикла преждевременно и некоторое локальное состояние, которое может быть общим для итераций, которые выполняются в одном потоке.  
  
 `localInit` Делегат вызывается один раз для каждой задачи, которая участвует в выполнении цикла и возвращает начальное локальное состояние для каждой из этих задач. Эти начальные состояния передаются первому `body` вызовов на каждой задачи. Затем вызов каждого последующего тела возвращает потенциально измененное значение состояния, передается следующему вызову тела. Наконец, вызов последнего тела в каждой задачи возвращает значение состояния, передаваемый `localFinally` делегата. `localFinally` Делегат вызывается один раз за поток, выполняющий финальное действие с локальным состоянием каждой задачи. Этот делегат может быть вызван одновременно несколько задач; Таким образом необходимо синхронизировать доступ ко всем общим переменным.  
  
 <xref:System.Threading.Tasks.Parallel.ForEach%2A?displayProperty=nameWithType> Метод может использовать задач больше, чем потоков в течение времени существования его выполнения, как существующие задачи завершаются и заменяются на новые задачи. Это дает базовый <xref:System.Threading.Tasks.TaskScheduler> объекта возможность добавить, изменить или удалить потоков, обслуживающих цикла.  
  
   
  
## Examples  
 В следующем примере показано, как использовать <xref:System.Threading.Tasks.Parallel.ForEach%2A> метод с локальным состоянием:  
  
 [!code-csharp[System.Threading.Tasks.Parallel#02](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.threading.tasks.parallel/cs/parallelforeach.cs#02)]
 [!code-vb[System.Threading.Tasks.Parallel#02](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.threading.tasks.parallel/vb/parallelforeach.vb#02)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">Аргумент <paramref name="source" /> имеет значение <see langword="null" />.  -или- Аргумент <paramref name="body" /> имеет значение <see langword="null" />.  -или- Аргумент <paramref name="localInit" /> имеет значение <see langword="null" />.  -или- Аргумент <paramref name="localFinally" /> имеет значение <see langword="null" />.</exception>
        <exception cref="T:System.AggregateException">Исключение, которое содержит все отдельные исключения, создаваемые во всех потоках.</exception>
      </Docs>
    </Member>
    <Member MemberName="ForEach&lt;TSource,TLocal&gt;">
      <MemberSignature Language="C#" Value="public static System.Threading.Tasks.ParallelLoopResult ForEach&lt;TSource,TLocal&gt; (System.Collections.Concurrent.OrderablePartitioner&lt;TSource&gt; source, System.Threading.Tasks.ParallelOptions parallelOptions, Func&lt;TLocal&gt; localInit, Func&lt;TSource,System.Threading.Tasks.ParallelLoopState,long,TLocal,TLocal&gt; body, Action&lt;TLocal&gt; localFinally);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.Threading.Tasks.ParallelLoopResult ForEach&lt;TSource, TLocal&gt;(class System.Collections.Concurrent.OrderablePartitioner`1&lt;!!TSource&gt; source, class System.Threading.Tasks.ParallelOptions parallelOptions, class System.Func`1&lt;!!TLocal&gt; localInit, class System.Func`5&lt;!!TSource, class System.Threading.Tasks.ParallelLoopState, int64, !!TLocal, !!TLocal&gt; body, class System.Action`1&lt;!!TLocal&gt; localFinally) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Tasks.Parallel.ForEach``2(System.Collections.Concurrent.OrderablePartitioner{``0},System.Threading.Tasks.ParallelOptions,System.Func{``1},System.Func{``0,System.Threading.Tasks.ParallelLoopState,System.Int64,``1,``1},System.Action{``1})" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TSource, typename TLocal&gt;&#xA; static System::Threading::Tasks::ParallelLoopResult ForEach(System::Collections::Concurrent::OrderablePartitioner&lt;TSource&gt; ^ source, System::Threading::Tasks::ParallelOptions ^ parallelOptions, Func&lt;TLocal&gt; ^ localInit, Func&lt;TSource, System::Threading::Tasks::ParallelLoopState ^, long, TLocal, TLocal&gt; ^ body, Action&lt;TLocal&gt; ^ localFinally);" />
      <MemberSignature Language="F#" Value="static member ForEach : System.Collections.Concurrent.OrderablePartitioner&lt;'Source&gt; * System.Threading.Tasks.ParallelOptions * Func&lt;'Local&gt; * Func&lt;'Source, System.Threading.Tasks.ParallelLoopState, int64, 'Local, 'Local&gt; * Action&lt;'Local&gt; -&gt; System.Threading.Tasks.ParallelLoopResult" Usage="System.Threading.Tasks.Parallel.ForEach (source, parallelOptions, localInit, body, localFinally)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks.Parallel</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.3.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.ParallelLoopResult</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TSource" />
        <TypeParameter Name="TLocal" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="source" Type="System.Collections.Concurrent.OrderablePartitioner&lt;TSource&gt;" />
        <Parameter Name="parallelOptions" Type="System.Threading.Tasks.ParallelOptions" />
        <Parameter Name="localInit" Type="System.Func&lt;TLocal&gt;" />
        <Parameter Name="body" Type="System.Func&lt;TSource,System.Threading.Tasks.ParallelLoopState,System.Int64,TLocal,TLocal&gt;" />
        <Parameter Name="localFinally" Type="System.Action&lt;TLocal&gt;" />
      </Parameters>
      <Docs>
        <typeparam name="TSource">Тип элементов в <c>источника</c>.</typeparam>
        <typeparam name="TLocal">Тип данных, локальных для потока.</typeparam>
        <param name="source">Упорядочиваемый разделитель, содержащий исходный источник данных.</param>
        <param name="parallelOptions">Объект, используемый для настройки поведения этой операции.</param>
        <param name="localInit">Делегат функции, который возвращает начальное состояние локальных данных для каждой задачи.</param>
        <param name="body">Делегат, который вызывается один раз за итерацию.</param>
        <param name="localFinally">Делегат, который выполняет финальное действие с локальным состоянием каждой задачи.</param>
        <summary>Выполняет операцию <see langword="foreach" /> (<see langword="For Each" /> в Visual Basic) с 64-разрядными индексами и локальными данными потока для объекта <see cref="T:System.Collections.Concurrent.OrderablePartitioner`1" />, обеспечивая возможность параллельного выполнения итераций, настройки параметров цикла, а также контроля состояния цикла и управления этим состоянием.</summary>
        <returns>Структура, в которой содержатся сведения о выполненной части цикла.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Эта перегрузка предоставляется для сценариев, где вы хотите переопределить значение по умолчанию схему секционирования. Например небольших тел циклов может повыситься при использовании секционирования диапазона. <xref:System.Threading.Tasks.Parallel.ForEach%2A> Метод ожидает пользовательские разделители для поддержки динамическое секционирование. Дополнительные сведения см. в разделе [пользовательские разделители для PLINQ и TPL](~/docs/standard/parallel-programming/custom-partitioners-for-plinq-and-tpl.md) и [как: реализация динамических разделов](~/docs/standard/parallel-programming/how-to-implement-dynamic-partitions.md).  
  
 `localInit` Делегат вызывается один раз для каждой задачи, которая участвует в выполнении цикла и возвращает начальное локальное состояние для каждой из этих задач. Эти начальные состояния передаются первому `body` вызовов на каждой задачи. Затем вызов каждого последующего тела возвращает потенциально измененное значение состояния, передается следующему вызову тела. Наконец, вызов последнего тела в каждом потоке возвращает значение состояния, передаваемый `localFinally` делегата. `localFinally` Делегат вызывается один раз за задачи для выполнения финальное действие с локальным состоянием каждой задачи. Этот делегат может быть вызван одновременно несколько задач; Таким образом необходимо синхронизировать доступ ко всем общим переменным.  
  
 <xref:System.Threading.Tasks.Parallel.ForEach%2A?displayProperty=nameWithType> Метод может использовать задач больше, чем потоков в течение времени существования его выполнения, как существующие задачи завершаются и заменяются на новые задачи. Это дает базовый <xref:System.Threading.Tasks.TaskScheduler> объекта возможность добавить, изменить или удалить потоков, обслуживающих цикла.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">Аргумент <paramref name="source" /> имеет значение <see langword="null" />.  -или- Аргумент <paramref name="parallelOptions" /> имеет значение <see langword="null" />.  -или- Аргумент <paramref name="body" /> имеет значение <see langword="null" />.  -или- Аргумент <paramref name="localInit" /> или аргумент <paramref name="localFinally" /> имеет значение <see langword="null" />.</exception>
        <exception cref="T:System.InvalidOperationException">Свойство <see cref="P:System.Collections.Concurrent.Partitioner`1.SupportsDynamicPartitions" /> в разделителе <paramref name="source" /><see cref="T:System.Collections.Concurrent.Partitioner" /> возвращает значение <see langword="false" /> или разделитель возвращает части со значением <see langword="null" />.</exception>
        <exception cref="T:System.AggregateException">Исключение, которое содержит все отдельные исключения, создаваемые во всех потоках.</exception>
        <exception cref="T:System.OperationCanceledException">Токен <see cref="T:System.Threading.CancellationToken" /> в аргументе <paramref name="parallelOptions" /> отменен.</exception>
        <exception cref="T:System.ObjectDisposedException">
          <see cref="T:System.Threading.CancellationTokenSource" />, связанный с <see cref="T:System.Threading.CancellationToken" /> в <paramref name="parallelOptions" />, удален.</exception>
      </Docs>
    </Member>
    <Member MemberName="ForEach&lt;TSource,TLocal&gt;">
      <MemberSignature Language="C#" Value="public static System.Threading.Tasks.ParallelLoopResult ForEach&lt;TSource,TLocal&gt; (System.Collections.Concurrent.Partitioner&lt;TSource&gt; source, System.Threading.Tasks.ParallelOptions parallelOptions, Func&lt;TLocal&gt; localInit, Func&lt;TSource,System.Threading.Tasks.ParallelLoopState,TLocal,TLocal&gt; body, Action&lt;TLocal&gt; localFinally);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.Threading.Tasks.ParallelLoopResult ForEach&lt;TSource, TLocal&gt;(class System.Collections.Concurrent.Partitioner`1&lt;!!TSource&gt; source, class System.Threading.Tasks.ParallelOptions parallelOptions, class System.Func`1&lt;!!TLocal&gt; localInit, class System.Func`4&lt;!!TSource, class System.Threading.Tasks.ParallelLoopState, !!TLocal, !!TLocal&gt; body, class System.Action`1&lt;!!TLocal&gt; localFinally) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Tasks.Parallel.ForEach``2(System.Collections.Concurrent.Partitioner{``0},System.Threading.Tasks.ParallelOptions,System.Func{``1},System.Func{``0,System.Threading.Tasks.ParallelLoopState,``1,``1},System.Action{``1})" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TSource, typename TLocal&gt;&#xA; static System::Threading::Tasks::ParallelLoopResult ForEach(System::Collections::Concurrent::Partitioner&lt;TSource&gt; ^ source, System::Threading::Tasks::ParallelOptions ^ parallelOptions, Func&lt;TLocal&gt; ^ localInit, Func&lt;TSource, System::Threading::Tasks::ParallelLoopState ^, TLocal, TLocal&gt; ^ body, Action&lt;TLocal&gt; ^ localFinally);" />
      <MemberSignature Language="F#" Value="static member ForEach : System.Collections.Concurrent.Partitioner&lt;'Source&gt; * System.Threading.Tasks.ParallelOptions * Func&lt;'Local&gt; * Func&lt;'Source, System.Threading.Tasks.ParallelLoopState, 'Local, 'Local&gt; * Action&lt;'Local&gt; -&gt; System.Threading.Tasks.ParallelLoopResult" Usage="System.Threading.Tasks.Parallel.ForEach (source, parallelOptions, localInit, body, localFinally)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks.Parallel</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.3.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.ParallelLoopResult</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TSource" />
        <TypeParameter Name="TLocal" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="source" Type="System.Collections.Concurrent.Partitioner&lt;TSource&gt;" />
        <Parameter Name="parallelOptions" Type="System.Threading.Tasks.ParallelOptions" />
        <Parameter Name="localInit" Type="System.Func&lt;TLocal&gt;" />
        <Parameter Name="body" Type="System.Func&lt;TSource,System.Threading.Tasks.ParallelLoopState,TLocal,TLocal&gt;" />
        <Parameter Name="localFinally" Type="System.Action&lt;TLocal&gt;" />
      </Parameters>
      <Docs>
        <typeparam name="TSource">Тип элементов в <c>источника</c>.</typeparam>
        <typeparam name="TLocal">Тип данных, локальных для потока.</typeparam>
        <param name="source">Разделитель, содержащий исходный источник данных.</param>
        <param name="parallelOptions">Объект, используемый для настройки поведения этой операции.</param>
        <param name="localInit">Делегат функции, который возвращает начальное состояние локальных данных для каждой задачи.</param>
        <param name="body">Делегат, который вызывается один раз за итерацию.</param>
        <param name="localFinally">Делегат, который выполняет финальное действие с локальным состоянием каждой задачи.</param>
        <summary>Выполняет операцию <see langword="foreach" /> (<see langword="For Each" /> в Visual Basic) с локальными данными потока для объекта <see cref="T:System.Collections.Concurrent.Partitioner" />, обеспечивая возможность параллельного выполнения итераций, настройки параметров цикла, а также контроля состояния цикла и управления этим состоянием.</summary>
        <returns>Структура, в которой содержатся сведения о выполненной части цикла.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Эта перегрузка предоставляется для сценариев, где вы хотите переопределить значение по умолчанию схему секционирования. Например небольших тел циклов может повыситься при использовании секционирования диапазона. <xref:System.Threading.Tasks.Parallel.ForEach%2A> Метод ожидает пользовательские разделители для поддержки динамическое секционирование. Эта перегрузка предоставляется для сценариев с небольших тел циклов, может повыситься при использовании статического диапазона секционирования. Разделители должны поддерживать динамические разделы.  Дополнительные сведения см. в разделе [пользовательские разделители для PLINQ и TPL](~/docs/standard/parallel-programming/custom-partitioners-for-plinq-and-tpl.md) и [как: реализация динамических разделов](~/docs/standard/parallel-programming/how-to-implement-dynamic-partitions.md).  
  
 `localInit` Делегат вызывается один раз для каждой задачи, которая участвует в выполнении цикла и возвращает начальное локальное состояние для каждой из этих задач. Эти начальные состояния передаются первому `body` вызовов на каждой задачи. Затем вызов каждого последующего тела возвращает потенциально измененное значение состояния, передается следующему вызову тела. Наконец, вызов последнего тела в каждой задачи возвращает значение состояния, передаваемый `localFinally` делегата. `localFinally` Делегат вызывается один раз за задачи для выполнения финальное действие с локальным состоянием каждой задачи. Этот делегат может быть вызван одновременно несколько задач; Таким образом необходимо синхронизировать доступ ко всем общим переменным.  
  
 <xref:System.Threading.Tasks.Parallel.ForEach%2A?displayProperty=nameWithType> Метод может использовать задач больше, чем потоков в течение времени существования его выполнения, как существующие задачи завершаются и заменяются на новые задачи. Это дает базовый <xref:System.Threading.Tasks.TaskScheduler> объекта возможность добавить, изменить или удалить потоков, обслуживающих цикла.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">Аргумент <paramref name="source" /> имеет значение <see langword="null" />.  -или- Аргумент <paramref name="parallelOptions" /> имеет значение <see langword="null" />.  -или- Аргумент <paramref name="body" /> имеет значение <see langword="null" />.  -или- Аргумент <paramref name="localInit" /> имеет значение <see langword="null" />.  -или- Аргумент <paramref name="localFinally" /> имеет значение <see langword="null" />.</exception>
        <exception cref="T:System.InvalidOperationException">Свойство <see cref="P:System.Collections.Concurrent.Partitioner`1.SupportsDynamicPartitions" /> в разделителе <paramref name="source" /><see cref="T:System.Collections.Concurrent.Partitioner" /> возвращает значение <see langword="false" /> или разделитель возвращает части со значением <see langword="null" />.</exception>
        <exception cref="T:System.AggregateException">Исключение, которое содержит все отдельные исключения, создаваемые во всех потоках.</exception>
        <exception cref="T:System.OperationCanceledException">Токен <see cref="T:System.Threading.CancellationToken" /> в аргументе <paramref name="parallelOptions" /> отменен.</exception>
        <exception cref="T:System.ObjectDisposedException">
          <see cref="T:System.Threading.CancellationTokenSource" />, связанный с <see cref="T:System.Threading.CancellationToken" /> в <paramref name="parallelOptions" />, удален.</exception>
      </Docs>
    </Member>
    <Member MemberName="ForEach&lt;TSource,TLocal&gt;">
      <MemberSignature Language="C#" Value="public static System.Threading.Tasks.ParallelLoopResult ForEach&lt;TSource,TLocal&gt; (System.Collections.Generic.IEnumerable&lt;TSource&gt; source, System.Threading.Tasks.ParallelOptions parallelOptions, Func&lt;TLocal&gt; localInit, Func&lt;TSource,System.Threading.Tasks.ParallelLoopState,long,TLocal,TLocal&gt; body, Action&lt;TLocal&gt; localFinally);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.Threading.Tasks.ParallelLoopResult ForEach&lt;TSource, TLocal&gt;(class System.Collections.Generic.IEnumerable`1&lt;!!TSource&gt; source, class System.Threading.Tasks.ParallelOptions parallelOptions, class System.Func`1&lt;!!TLocal&gt; localInit, class System.Func`5&lt;!!TSource, class System.Threading.Tasks.ParallelLoopState, int64, !!TLocal, !!TLocal&gt; body, class System.Action`1&lt;!!TLocal&gt; localFinally) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Tasks.Parallel.ForEach``2(System.Collections.Generic.IEnumerable{``0},System.Threading.Tasks.ParallelOptions,System.Func{``1},System.Func{``0,System.Threading.Tasks.ParallelLoopState,System.Int64,``1,``1},System.Action{``1})" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TSource, typename TLocal&gt;&#xA; static System::Threading::Tasks::ParallelLoopResult ForEach(System::Collections::Generic::IEnumerable&lt;TSource&gt; ^ source, System::Threading::Tasks::ParallelOptions ^ parallelOptions, Func&lt;TLocal&gt; ^ localInit, Func&lt;TSource, System::Threading::Tasks::ParallelLoopState ^, long, TLocal, TLocal&gt; ^ body, Action&lt;TLocal&gt; ^ localFinally);" />
      <MemberSignature Language="F#" Value="static member ForEach : seq&lt;'Source&gt; * System.Threading.Tasks.ParallelOptions * Func&lt;'Local&gt; * Func&lt;'Source, System.Threading.Tasks.ParallelLoopState, int64, 'Local, 'Local&gt; * Action&lt;'Local&gt; -&gt; System.Threading.Tasks.ParallelLoopResult" Usage="System.Threading.Tasks.Parallel.ForEach (source, parallelOptions, localInit, body, localFinally)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks.Parallel</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.3.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.ParallelLoopResult</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TSource" />
        <TypeParameter Name="TLocal" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="source" Type="System.Collections.Generic.IEnumerable&lt;TSource&gt;" />
        <Parameter Name="parallelOptions" Type="System.Threading.Tasks.ParallelOptions" />
        <Parameter Name="localInit" Type="System.Func&lt;TLocal&gt;" />
        <Parameter Name="body" Type="System.Func&lt;TSource,System.Threading.Tasks.ParallelLoopState,System.Int64,TLocal,TLocal&gt;" />
        <Parameter Name="localFinally" Type="System.Action&lt;TLocal&gt;" />
      </Parameters>
      <Docs>
        <typeparam name="TSource">Тип данных в источнике.</typeparam>
        <typeparam name="TLocal">Тип данных, локальных для потока.</typeparam>
        <param name="source">Перечислимый источник данных.</param>
        <param name="parallelOptions">Объект, используемый для настройки поведения этой операции.</param>
        <param name="localInit">Делегат функции, который возвращает начальное состояние локальных данных для каждой задачи.</param>
        <param name="body">Делегат, который вызывается один раз за итерацию.</param>
        <param name="localFinally">Делегат, который выполняет финальное действие с локальным состоянием каждой задачи.</param>
        <summary>Выполняет операцию <see langword="foreach" /> (<see langword="For Each" /> в Visual Basic) с 64-разрядными индексами и локальными данными потока для объекта <see cref="T:System.Collections.IEnumerable" />, обеспечивая возможность параллельного выполнения итераций, настройки параметров цикла, а также контроля состояния цикла и управления этим состоянием.</summary>
        <returns>Структура, в которой содержатся сведения о выполненной части цикла.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 `body` Делегат вызывается один раз для каждого элемента в `source` enumerable. Предоставляется со следующими параметрами: текущий элемент <xref:System.Threading.Tasks.ParallelLoopState> экземпляр, который может использоваться для выхода из цикла преждевременно, индекс текущего элемента (<xref:System.Int64>) и некоторые локальное состояние, которое может быть общим для итераций, которые выполняются в том же потоке.  
  
 `localInit` Делегат вызывается один раз для каждой задачи, которая участвует в выполнении цикла и возвращает начальное локальное состояние для каждой из этих задач. Эти начальные состояния передаются первому `body` вызовов на каждой задачи. Затем вызов каждого последующего тела возвращает потенциально измененное значение состояния, передается следующему вызову тела. Наконец, вызов последнего тела в каждой задачи возвращает значение состояния, передаваемый `localFinally` делегата. `localFinally` Делегат вызывается один раз за поток, выполняющий финальное действие с локальным состоянием каждой задачи. Этот делегат может быть вызван одновременно несколько задач; Таким образом необходимо синхронизировать доступ ко всем общим переменным.  
  
 <xref:System.Threading.Tasks.Parallel.ForEach%2A?displayProperty=nameWithType> Метод может использовать задач больше, чем потоков в течение времени существования его выполнения, как существующие задачи завершаются и заменяются на новые задачи. Это дает базовый <xref:System.Threading.Tasks.TaskScheduler> объекта возможность добавить, изменить или удалить потоков, обслуживающих цикла.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">Аргумент <paramref name="source" /> имеет значение <see langword="null" />.  -или- Аргумент <paramref name="parallelOptions" /> имеет значение <see langword="null" />.  -или- Аргумент <paramref name="body" /> имеет значение <see langword="null" />.  -или- Аргумент <paramref name="localInit" /> имеет значение <see langword="null" />.  -или- Аргумент <paramref name="localFinally" /> имеет значение <see langword="null" />.</exception>
        <exception cref="T:System.OperationCanceledException">Токен <see cref="T:System.Threading.CancellationToken" /> в аргументе <paramref name="parallelOptions" /> отменен.</exception>
        <exception cref="T:System.ObjectDisposedException">
          <see cref="T:System.Threading.CancellationTokenSource" />, связанный с <see cref="T:System.Threading.CancellationToken" /> в <paramref name="parallelOptions" />, удален.</exception>
        <exception cref="T:System.AggregateException">Исключение, которое содержит все отдельные исключения, создаваемые во всех потоках.</exception>
      </Docs>
    </Member>
    <Member MemberName="ForEach&lt;TSource,TLocal&gt;">
      <MemberSignature Language="C#" Value="public static System.Threading.Tasks.ParallelLoopResult ForEach&lt;TSource,TLocal&gt; (System.Collections.Generic.IEnumerable&lt;TSource&gt; source, System.Threading.Tasks.ParallelOptions parallelOptions, Func&lt;TLocal&gt; localInit, Func&lt;TSource,System.Threading.Tasks.ParallelLoopState,TLocal,TLocal&gt; body, Action&lt;TLocal&gt; localFinally);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.Threading.Tasks.ParallelLoopResult ForEach&lt;TSource, TLocal&gt;(class System.Collections.Generic.IEnumerable`1&lt;!!TSource&gt; source, class System.Threading.Tasks.ParallelOptions parallelOptions, class System.Func`1&lt;!!TLocal&gt; localInit, class System.Func`4&lt;!!TSource, class System.Threading.Tasks.ParallelLoopState, !!TLocal, !!TLocal&gt; body, class System.Action`1&lt;!!TLocal&gt; localFinally) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Tasks.Parallel.ForEach``2(System.Collections.Generic.IEnumerable{``0},System.Threading.Tasks.ParallelOptions,System.Func{``1},System.Func{``0,System.Threading.Tasks.ParallelLoopState,``1,``1},System.Action{``1})" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TSource, typename TLocal&gt;&#xA; static System::Threading::Tasks::ParallelLoopResult ForEach(System::Collections::Generic::IEnumerable&lt;TSource&gt; ^ source, System::Threading::Tasks::ParallelOptions ^ parallelOptions, Func&lt;TLocal&gt; ^ localInit, Func&lt;TSource, System::Threading::Tasks::ParallelLoopState ^, TLocal, TLocal&gt; ^ body, Action&lt;TLocal&gt; ^ localFinally);" />
      <MemberSignature Language="F#" Value="static member ForEach : seq&lt;'Source&gt; * System.Threading.Tasks.ParallelOptions * Func&lt;'Local&gt; * Func&lt;'Source, System.Threading.Tasks.ParallelLoopState, 'Local, 'Local&gt; * Action&lt;'Local&gt; -&gt; System.Threading.Tasks.ParallelLoopResult" Usage="System.Threading.Tasks.Parallel.ForEach (source, parallelOptions, localInit, body, localFinally)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks.Parallel</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.3.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.ParallelLoopResult</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TSource" />
        <TypeParameter Name="TLocal" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="source" Type="System.Collections.Generic.IEnumerable&lt;TSource&gt;" />
        <Parameter Name="parallelOptions" Type="System.Threading.Tasks.ParallelOptions" />
        <Parameter Name="localInit" Type="System.Func&lt;TLocal&gt;" />
        <Parameter Name="body" Type="System.Func&lt;TSource,System.Threading.Tasks.ParallelLoopState,TLocal,TLocal&gt;" />
        <Parameter Name="localFinally" Type="System.Action&lt;TLocal&gt;" />
      </Parameters>
      <Docs>
        <typeparam name="TSource">Тип данных в источнике.</typeparam>
        <typeparam name="TLocal">Тип данных, локальных для потока.</typeparam>
        <param name="source">Перечислимый источник данных.</param>
        <param name="parallelOptions">Объект, используемый для настройки поведения этой операции.</param>
        <param name="localInit">Делегат функции, который возвращает начальное состояние локальных данных для каждой задачи.</param>
        <param name="body">Делегат, который вызывается один раз за итерацию.</param>
        <param name="localFinally">Делегат, который выполняет финальное действие с локальным состоянием каждой задачи.</param>
        <summary>Выполняет операцию <see langword="foreach" /> (<see langword="For Each" /> в Visual Basic) с локальными данными потока для объекта <see cref="T:System.Collections.IEnumerable" />, обеспечивая возможность параллельного выполнения итераций, настройки параметров цикла, а также контроля состояния цикла и управления этим состоянием.</summary>
        <returns>Структура, в которой содержатся сведения о выполненной части цикла.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 `body` Делегат вызывается один раз для каждого элемента в `source` enumerable. Предоставляется со следующими параметрами: текущий элемент <xref:System.Threading.Tasks.ParallelLoopState> экземпляр, который может использоваться для выхода из цикла преждевременно и некоторое локальное состояние, которое может быть общим для итераций, которые выполняются в одном потоке.  
  
 `localInit` Делегат вызывается один раз для каждой задачи, которая участвует в выполнении цикла и возвращает начальное локальное состояние для каждой из этих задач. Эти начальные состояния передаются первому `body` вызовов на каждой задачи. Затем вызов каждого последующего тела возвращает потенциально измененное значение состояния, передается следующему вызову тела. Наконец, вызов последнего тела в каждой задачи возвращает значение состояния, передаваемый `localFinally` делегата. `localFinally` Делегат вызывается один раз за поток, выполняющий финальное действие с локальным состоянием каждой задачи. Этот делегат может быть вызван одновременно несколько задач; Таким образом необходимо синхронизировать доступ ко всем общим переменным.  
  
 <xref:System.Threading.Tasks.Parallel.ForEach%2A?displayProperty=nameWithType> Метод может использовать задач больше, чем потоков в течение времени существования его выполнения, как существующие задачи завершаются и заменяются на новые задачи. Это дает базовый <xref:System.Threading.Tasks.TaskScheduler> объекта возможность добавить, изменить или удалить потоков, обслуживающих цикла.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">Аргумент <paramref name="source" /> имеет значение <see langword="null" />.  -или- Аргумент <paramref name="parallelOptions" /> имеет значение <see langword="null" />.  -или- Аргумент <paramref name="body" /> имеет значение <see langword="null" />.  -или- Аргумент <paramref name="localInit" /> имеет значение <see langword="null" />.  -или- Аргумент <paramref name="localFinally" /> имеет значение <see langword="null" />.</exception>
        <exception cref="T:System.OperationCanceledException">Токен <see cref="T:System.Threading.CancellationToken" /> в аргументе <paramref name="parallelOptions" /> отменен.</exception>
        <exception cref="T:System.ObjectDisposedException">
          <see cref="T:System.Threading.CancellationTokenSource" />, связанный с <see cref="T:System.Threading.CancellationToken" /> в <paramref name="parallelOptions" />, удален.</exception>
        <exception cref="T:System.AggregateException">Исключение, которое содержит все отдельные исключения, создаваемые во всех потоках.</exception>
      </Docs>
    </Member>
    <MemberGroup MemberName="Invoke">
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks.Parallel</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.3.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Выполняет все предоставленные действия, по возможности в параллельном режиме.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Invoke">
      <MemberSignature Language="C#" Value="public static void Invoke (params Action[] actions);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void Invoke(class System.Action[] actions) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Tasks.Parallel.Invoke(System.Action[])" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub Invoke (ParamArray actions As Action())" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void Invoke(... cli::array &lt;Action ^&gt; ^ actions);" />
      <MemberSignature Language="F#" Value="static member Invoke : Action[] -&gt; unit" Usage="System.Threading.Tasks.Parallel.Invoke actions" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks.Parallel</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.3.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="actions" Type="System.Action[]">
          <Attributes>
            <Attribute>
              <AttributeName>System.ParamArray</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="actions">Массив действий <see cref="T:System.Action" /> для выполнения.</param>
        <summary>Выполняет все предоставленные действия, по возможности в параллельном режиме.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Этот метод можно использовать для выполнения ряда операций, потенциально параллельно.  
  
 Гарантии не предоставляются о порядке, в котором выполнение операций, или они выполняются параллельно. Этот метод не возвращает до завершения каждой из предоставленного операций, независимо от того, происходит ли из-за завершения плановым или в результате завершения.  
  
 Дополнительные сведения см. в разделе [Практическое руководство. Использование метода Parallel.Invoke для выполнения простых параллельных задач](~/docs/standard/parallel-programming/how-to-use-parallel-invoke-to-execute-parallel-operations.md).  
  
   
  
## Examples  
 В этом примере демонстрируется использование <xref:System.Threading.Tasks.Parallel.Invoke%2A> метода с помощью других методов, анонимные делегаты и лямбда-выражения.  
  
 [!code-csharp[System.Threading.Tasks.Parallel#01](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.threading.tasks.parallel/cs/parallelinvoke.cs#01)]
 [!code-vb[System.Threading.Tasks.Parallel#01](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.threading.tasks.parallel/vb/parallelinvoke.vb#01)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">Аргумент <paramref name="actions" /> имеет значение <see langword="null" />.</exception>
        <exception cref="T:System.AggregateException">Исключение, которое возникает, когда любое действие в массиве <paramref name="actions" /> создает исключение.</exception>
        <exception cref="T:System.ArgumentException">Массив <paramref name="actions" /> содержит элемент <see langword="null" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="Invoke">
      <MemberSignature Language="C#" Value="public static void Invoke (System.Threading.Tasks.ParallelOptions parallelOptions, params Action[] actions);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void Invoke(class System.Threading.Tasks.ParallelOptions parallelOptions, class System.Action[] actions) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Tasks.Parallel.Invoke(System.Threading.Tasks.ParallelOptions,System.Action[])" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void Invoke(System::Threading::Tasks::ParallelOptions ^ parallelOptions, ... cli::array &lt;Action ^&gt; ^ actions);" />
      <MemberSignature Language="F#" Value="static member Invoke : System.Threading.Tasks.ParallelOptions * Action[] -&gt; unit" Usage="System.Threading.Tasks.Parallel.Invoke (parallelOptions, actions)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks.Parallel</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.3.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="parallelOptions" Type="System.Threading.Tasks.ParallelOptions" />
        <Parameter Name="actions" Type="System.Action[]">
          <Attributes>
            <Attribute>
              <AttributeName>System.ParamArray</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="parallelOptions">Объект, используемый для настройки поведения этой операции.</param>
        <param name="actions">Массив действий для выполнения.</param>
        <summary>Выполняет каждое из указанных действий по возможности в параллельном режиме, если операция не отменена пользователем.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Этот метод можно использовать для выполнения ряда операций, потенциально параллельно. Токен отмены передается в <xref:System.Threading.Tasks.ParallelOptions> структуры позволяет вызывающему объекту отменить всю операцию. См. дополнительные сведения об [отмене в управляемых потоках](~/docs/standard/threading/cancellation-in-managed-threads.md).  
  
 Гарантии не предоставляются о порядке, в котором выполнение операций, или они выполняются параллельно. Этот метод не возвращает до завершения каждой из предоставленного операций, независимо от того, происходит ли из-за завершения плановым или в результате завершения.  
  
 Дополнительные сведения см. в разделе [Практическое руководство. Использование метода Parallel.Invoke для выполнения простых параллельных задач](~/docs/standard/parallel-programming/how-to-use-parallel-invoke-to-execute-parallel-operations.md).  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.OperationCanceledException">
          <see cref="T:System.Threading.CancellationToken" /> в <paramref name="parallelOptions" /> задан.</exception>
        <exception cref="T:System.ArgumentNullException">Аргумент <paramref name="actions" /> имеет значение <see langword="null" />.  -или- Аргумент <paramref name="parallelOptions" /> имеет значение <see langword="null" />.</exception>
        <exception cref="T:System.AggregateException">Исключение, которое возникает, когда любое действие в массиве <paramref name="actions" /> создает исключение.</exception>
        <exception cref="T:System.ArgumentException">Массив <paramref name="actions" /> содержит элемент <see langword="null" />.</exception>
        <exception cref="T:System.ObjectDisposedException">
          <see cref="T:System.Threading.CancellationTokenSource" />, связанный с <see cref="T:System.Threading.CancellationToken" /> в <paramref name="parallelOptions" />, удален.</exception>
      </Docs>
    </Member>
  </Members>
</Type>