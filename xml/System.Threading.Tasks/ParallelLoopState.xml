<Type Name="ParallelLoopState" FullName="System.Threading.Tasks.ParallelLoopState">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="3e4244160069333f5d930b81c7b54173c2ad6d6a" />
    <Meta Name="ms.sourcegitcommit" Value="d31dc2ede16f6f7bc64e90d9f897ff54c4e3869b" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="ru-RU" />
    <Meta Name="ms.lasthandoff" Value="04/03/2018" />
  </Metadata>
  <TypeSignature Language="C#" Value="public class ParallelLoopState" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit ParallelLoopState extends System.Object" />
  <TypeSignature Language="DocId" Value="T:System.Threading.Tasks.ParallelLoopState" />
  <TypeSignature Language="VB.NET" Value="Public Class ParallelLoopState" />
  <TypeSignature Language="C++ CLI" Value="public ref class ParallelLoopState" />
  <AssemblyInfo>
    <AssemblyName>System.Threading.Tasks.Parallel</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.3.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>mscorlib</AssemblyName>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute>
      <AttributeName>System.Diagnostics.DebuggerDisplay("ShouldExitCurrentIteration = {ShouldExitCurrentIteration}")</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>
      <span data-ttu-id="8e2a5-101">Позволяет итерациям параллельных циклов взаимодействовать с другими итерациями.</span>
      <span class="sxs-lookup">
        <span data-stu-id="8e2a5-101">Enables iterations of parallel loops to interact with other iterations.</span>
      </span>
      <span data-ttu-id="8e2a5-102">Экземпляр этого класса предоставляется каждому циклу классом <see cref="T:System.Threading.Tasks.Parallel" />; невозможно создавать экземпляры в коде.</span>
      <span class="sxs-lookup">
        <span data-stu-id="8e2a5-102">An instance of this class is provided by the <see cref="T:System.Threading.Tasks.Parallel" /> class to each loop; you can not create instances in your code.</span>
      </span>
    </summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="8e2a5-103">Обратите внимание, что не удается создать экземпляр этого класса.</span><span class="sxs-lookup"><span data-stu-id="8e2a5-103">Note that you cannot instantiate an instance of this class.</span></span> <span data-ttu-id="8e2a5-104">Автоматически создается компилятором как аргумент в вызове <xref:System.Threading.Tasks.Parallel.For%2A?displayProperty=nameWithType> или <xref:System.Threading.Tasks.Parallel.ForEach%2A?displayProperty=nameWithType> метод.</span><span class="sxs-lookup"><span data-stu-id="8e2a5-104">It is automatically generated by the compiler as an argument in a call to the <xref:System.Threading.Tasks.Parallel.For%2A?displayProperty=nameWithType> or <xref:System.Threading.Tasks.Parallel.ForEach%2A?displayProperty=nameWithType> method.</span></span> <span data-ttu-id="8e2a5-105">Иллюстрация приведена в примере.</span><span class="sxs-lookup"><span data-stu-id="8e2a5-105">The example provides an illustration.</span></span>  
  
 <span data-ttu-id="8e2a5-106">Конструкции, такие как `for` и `foreach` (в C#) и `For` и `For Each` (в Visual Basic) выполнять последовательно от наименьшего индекса и заканчивая самым верхним или из первого объекта в наборе на последнюю.</span><span class="sxs-lookup"><span data-stu-id="8e2a5-106">Constructs such as `for` and `foreach` (in C#) and `For` and `For Each` (in Visual Basic) execute sequentially from the lowest index to the highest or from the first object in a set to the last.</span></span> <span data-ttu-id="8e2a5-107">Напротив <xref:System.Threading.Tasks.Parallel.For%2A?displayProperty=nameWithType> и <xref:System.Threading.Tasks.Parallel.ForEach%2A?displayProperty=nameWithType> методов — нет.</span><span class="sxs-lookup"><span data-stu-id="8e2a5-107">In contrast, the <xref:System.Threading.Tasks.Parallel.For%2A?displayProperty=nameWithType> and <xref:System.Threading.Tasks.Parallel.ForEach%2A?displayProperty=nameWithType> methods do not.</span></span> <span data-ttu-id="8e2a5-108">Поскольку отдельные итерации цикла выполняются параллельно, оно может начинается и заканчивается в любом порядке.</span><span class="sxs-lookup"><span data-stu-id="8e2a5-108">Because individual iterations of the loop run in parallel, they can begin and end in any order.</span></span> <span data-ttu-id="8e2a5-109"><xref:System.Threading.Tasks.ParallelLoopState> Класс позволяет отдельных итерациям параллельных циклов взаимодействовать друг с другом.</span><span class="sxs-lookup"><span data-stu-id="8e2a5-109">The <xref:System.Threading.Tasks.ParallelLoopState> class allows individual iterations of parallel loops to interact with one another.</span></span> <span data-ttu-id="8e2a5-110"><xref:System.Threading.Tasks.ParallelLoopState> Класс позволяет:</span><span class="sxs-lookup"><span data-stu-id="8e2a5-110">The <xref:System.Threading.Tasks.ParallelLoopState> class allows you to:</span></span>  
  
-   <span data-ttu-id="8e2a5-111">Выйти из текущей итерации и предотвратить любые дополнительных итераций запуститься путем вызова <xref:System.Threading.Tasks.ParallelLoopState.Stop%2A> метод.</span><span class="sxs-lookup"><span data-stu-id="8e2a5-111">Exit the current iteration and prevent any additional iterations from starting by calling the <xref:System.Threading.Tasks.ParallelLoopState.Stop%2A> method.</span></span> <span data-ttu-id="8e2a5-112">Это не влияет на итераций, которые уже начали выполнение.</span><span class="sxs-lookup"><span data-stu-id="8e2a5-112">This does not affect iterations that have already begun execution.</span></span>  
  
-   <span data-ttu-id="8e2a5-113">Предотвратить выполнение путем вызова любого итераций с индексом, больше, чем текущий индекс <xref:System.Threading.Tasks.ParallelLoopState.Break%2A> метод.</span><span class="sxs-lookup"><span data-stu-id="8e2a5-113">Prevent any iterations with an index greater than the current index from executing by calling the <xref:System.Threading.Tasks.ParallelLoopState.Break%2A> method.</span></span> <span data-ttu-id="8e2a5-114">Это не влияет на итераций, которые уже начали выполнение.</span><span class="sxs-lookup"><span data-stu-id="8e2a5-114">This does not affect iterations that have already begun execution.</span></span>  
  
-   <span data-ttu-id="8e2a5-115">Определить, произошло ли исключение в какой-либо итерации цикла, получая значение <xref:System.Threading.Tasks.ParallelLoopState.IsExceptional%2A> свойства.</span><span class="sxs-lookup"><span data-stu-id="8e2a5-115">Determine whether an exception has occurred in any loop iteration by retrieving the value of the <xref:System.Threading.Tasks.ParallelLoopState.IsExceptional%2A> property.</span></span>  
  
-   <span data-ttu-id="8e2a5-116">Определить, вызвал ли какая-либо итерация цикла <xref:System.Threading.Tasks.ParallelLoopState.Stop%2A> метод, получая значение <xref:System.Threading.Tasks.ParallelLoopState.IsStopped%2A> свойства.</span><span class="sxs-lookup"><span data-stu-id="8e2a5-116">Determine whether any iteration of the loop has called the <xref:System.Threading.Tasks.ParallelLoopState.Stop%2A> method by retrieving the value of the <xref:System.Threading.Tasks.ParallelLoopState.IsStopped%2A> property.</span></span> <span data-ttu-id="8e2a5-117">Это свойство можно использовать для возврата из итераций цикла, которая запущена перед вызовом <xref:System.Threading.Tasks.ParallelLoopState.Stop%2A> метода, но по-прежнему выполняются.</span><span class="sxs-lookup"><span data-stu-id="8e2a5-117">You can use this property to return from iterations of the loop that started before the call to the <xref:System.Threading.Tasks.ParallelLoopState.Stop%2A> method but are still executing.</span></span>  
  
-   <span data-ttu-id="8e2a5-118">Определить, вызвал ли какая-либо итерация цикла <xref:System.Threading.Tasks.ParallelLoopState.Break%2A> или <xref:System.Threading.Tasks.ParallelLoopState.Stop%2A> метода или создала исключение, получая значение <xref:System.Threading.Tasks.ParallelLoopState.ShouldExitCurrentIteration%2A> свойства.</span><span class="sxs-lookup"><span data-stu-id="8e2a5-118">Determine whether any iteration of the loop has called the <xref:System.Threading.Tasks.ParallelLoopState.Break%2A> or <xref:System.Threading.Tasks.ParallelLoopState.Stop%2A> method or has thrown an exception by retrieving the value of the <xref:System.Threading.Tasks.ParallelLoopState.ShouldExitCurrentIteration%2A> property.</span></span>  
  
-   <span data-ttu-id="8e2a5-119">Выход из продолжительной итерации, индекс которого больше, чем индекс итерации, в которой был вызван метод Break, получая значение <xref:System.Threading.Tasks.ParallelLoopState.LowestBreakIteration%2A> свойства.</span><span class="sxs-lookup"><span data-stu-id="8e2a5-119">Exit from a long-running iteration whose index is greater than the index of an iteration in which Break was called by retrieving the value of the <xref:System.Threading.Tasks.ParallelLoopState.LowestBreakIteration%2A> property.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="8e2a5-120">В следующем примере выполняется до 100 итераций цикла в параллельном режиме.</span><span class="sxs-lookup"><span data-stu-id="8e2a5-120">The following example executes up to 100 iterations of a loop in parallel.</span></span> <span data-ttu-id="8e2a5-121">Приостанавливает работу каждой итерации для произвольного интервал от 1 до 1000 миллисекунд.</span><span class="sxs-lookup"><span data-stu-id="8e2a5-121">Each iteration pauses for a random interval from 1 to 1,000 milliseconds.</span></span> <span data-ttu-id="8e2a5-122">Случайное значение определяет, на какой итерации цикла <xref:System.Threading.Tasks.ParallelLoopState.Break%2A> вызывается метод.</span><span class="sxs-lookup"><span data-stu-id="8e2a5-122">A randomly generated value determines on which iteration of the loop the <xref:System.Threading.Tasks.ParallelLoopState.Break%2A> method is called.</span></span> <span data-ttu-id="8e2a5-123">Как видно в результатах показано в примере, нет итераций, индекс которого больше, чем <xref:System.Threading.Tasks.ParallelLoopState.LowestBreakIteration%2A> начальное значение свойства после вызова <xref:System.Threading.Tasks.ParallelLoopState.Break%2A> метод.</span><span class="sxs-lookup"><span data-stu-id="8e2a5-123">As the output from the example shows, no iterations whose index is greater than the <xref:System.Threading.Tasks.ParallelLoopState.LowestBreakIteration%2A> property value start after the call to the <xref:System.Threading.Tasks.ParallelLoopState.Break%2A> method.</span></span>  
  
 [!code-csharp[System.Threading.Tasks.ParallelLoopState#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.threading.tasks.parallelloopstate/cs/break1.cs#2)]
 [!code-vb[System.Threading.Tasks.ParallelLoopState#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.threading.tasks.parallelloopstate/vb/break1.vb#2)]  
  
 <span data-ttu-id="8e2a5-124">Поскольку итерации цикла вряд ли по-прежнему выполняться, когда <xref:System.Threading.Tasks.ParallelLoopState.Break%2A> вызывается метод, вызывает каждой итерации <xref:System.Threading.Tasks.ParallelLoopState.ShouldExitCurrentIteration%2A> свойство для проверки, вызвал ли другую итерацию <xref:System.Threading.Tasks.ParallelLoopState.Break%2A> метод.</span><span class="sxs-lookup"><span data-stu-id="8e2a5-124">Because iterations of the loop are still likely to be executing when the <xref:System.Threading.Tasks.ParallelLoopState.Break%2A> method is called, each iteration calls the <xref:System.Threading.Tasks.ParallelLoopState.ShouldExitCurrentIteration%2A> property to check whether another iteration has called the <xref:System.Threading.Tasks.ParallelLoopState.Break%2A> method.</span></span> <span data-ttu-id="8e2a5-125">Если свойство имеет значение `true`, итерации проверяет значение <xref:System.Threading.Tasks.ParallelLoopState.LowestBreakIteration%2A> свойства и, если больше, чем значение индекса текущей итерации, возвращается немедленно.</span><span class="sxs-lookup"><span data-stu-id="8e2a5-125">If  the property value is `true`, the iteration checks the value of the <xref:System.Threading.Tasks.ParallelLoopState.LowestBreakIteration%2A> property and, if it is greater than the current iteration's index value, returns immediately.</span></span>  
  
 ]]></format>
    </remarks>
    <threadsafe>
      <span data-ttu-id="8e2a5-126">Объект <see cref="T:System.Threading.Tasks.ParallelLoopState" /> экземпляр предназначен для использования только в теле цикла, к которому был предоставлен экземпляр.</span>
      <span class="sxs-lookup">
        <span data-stu-id="8e2a5-126">A <see cref="T:System.Threading.Tasks.ParallelLoopState" /> instance is meant to be used only within the body of the loop to which an instance was provided.</span>
      </span>
      <span data-ttu-id="8e2a5-127">Не является безопасным для использования в предоставленный <see cref="T:System.Threading.Tasks.ParallelLoopState" /> экземпляра после связанного цикла заканчивается, и не безопасна явно передавать его другим потокам и предоставлять этим потокам доступ к нему в любое время.</span>
      <span class="sxs-lookup">
        <span data-stu-id="8e2a5-127">It is not safe to use a provided <see cref="T:System.Threading.Tasks.ParallelLoopState" /> instance after the associated loop ends, nor is it safe to explicitly hand it off to other threads and have those threads access it at any time.</span>
      </span>
      <span data-ttu-id="8e2a5-128">Другой <see cref="T:System.Threading.Tasks.ParallelLoopState" /> экземпляр будет предоставляться для каждого потока, участвующие в цикле.</span>
      <span class="sxs-lookup">
        <span data-stu-id="8e2a5-128">A different <see cref="T:System.Threading.Tasks.ParallelLoopState" /> instance will be provided to each thread involved in a loop.</span>
      </span>
    </threadsafe>
  </Docs>
  <Members>
    <Member MemberName="Break">
      <MemberSignature Language="C#" Value="public void Break ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Break() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Tasks.ParallelLoopState.Break" />
      <MemberSignature Language="VB.NET" Value="Public Sub Break ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Break();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks.Parallel</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.3.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="8e2a5-129">Сообщает, что цикл <see cref="T:System.Threading.Tasks.Parallel" /> должен прекратить выполнение итераций после текущей в первый удобный для системы момент.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8e2a5-129">Communicates that the <see cref="T:System.Threading.Tasks.Parallel" /> loop should cease execution of iterations beyond the current iteration at the system's earliest convenience.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="8e2a5-130"><xref:System.Threading.Tasks.ParallelLoopState.Break%2A> Указывает, выполнение не итераций после текущей итерации.</span><span class="sxs-lookup"><span data-stu-id="8e2a5-130"><xref:System.Threading.Tasks.ParallelLoopState.Break%2A> indicates that no iterations after the current iteration should be run.</span></span> <span data-ttu-id="8e2a5-131">Фактически он отменяет любые дополнительные итерации цикла.</span><span class="sxs-lookup"><span data-stu-id="8e2a5-131">It effectively cancels any additional iterations of the loop.</span></span> <span data-ttu-id="8e2a5-132">Тем не менее любой итераций, которые уже начали выполнение не останавливается.</span><span class="sxs-lookup"><span data-stu-id="8e2a5-132">However, it does not stop any iterations that have already begun execution.</span></span> <span data-ttu-id="8e2a5-133">Например если <xref:System.Threading.Tasks.ParallelLoopState.Break%2A> вызывается из 100-й итерации параллельного цикла итерации от 0 до 1 000, все итерации меньше 100 следует по-прежнему выполняться, но итераций от 101 до 1000, еще не запущена, не выполнять.</span><span class="sxs-lookup"><span data-stu-id="8e2a5-133">For example, if <xref:System.Threading.Tasks.ParallelLoopState.Break%2A> is called from the 100th iteration of a parallel loop iterating from 0 to 1,000, all iterations less than 100 should still be run, but the iterations from 101 through to 1000 that have not yet started are not executed.</span></span>  
  
 <span data-ttu-id="8e2a5-134">Для длительных итераций, которые уже могут выполняться <xref:System.Threading.Tasks.ParallelLoopState.Break%2A> задает <xref:System.Threading.Tasks.ParallelLoopState.LowestBreakIteration%2A> индекс текущей итерации, если текущий индекс меньше, чем текущее значение свойства <xref:System.Threading.Tasks.ParallelLoopState.LowestBreakIteration%2A>.</span><span class="sxs-lookup"><span data-stu-id="8e2a5-134">For long-running iterations that may already be executing, <xref:System.Threading.Tasks.ParallelLoopState.Break%2A> sets the <xref:System.Threading.Tasks.ParallelLoopState.LowestBreakIteration%2A> property to the current iteration's index if the current index is less than the current value of <xref:System.Threading.Tasks.ParallelLoopState.LowestBreakIteration%2A>.</span></span> <span data-ttu-id="8e2a5-135">Чтобы остановить, индекс которого больше, чем первую итерацию разрыв конкурирующих выполнения итераций, делать следующее:</span><span class="sxs-lookup"><span data-stu-id="8e2a5-135">To stop iterations whose index is greater than the lowest break iteration from competing execution, you should do the following:</span></span>  
  
1.  <span data-ttu-id="8e2a5-136">Проверьте ли <xref:System.Threading.Tasks.ParallelLoopState.ShouldExitCurrentIteration%2A> свойство `true`.</span><span class="sxs-lookup"><span data-stu-id="8e2a5-136">Check whether the <xref:System.Threading.Tasks.ParallelLoopState.ShouldExitCurrentIteration%2A> property is `true`.</span></span>  
  
2.  <span data-ttu-id="8e2a5-137">Выйти из итерации, если его индекс больше <xref:System.Threading.Tasks.ParallelLoopState.LowestBreakIteration%2A> значение свойства.</span><span class="sxs-lookup"><span data-stu-id="8e2a5-137">Exit from the iteration if its index is greater than the <xref:System.Threading.Tasks.ParallelLoopState.LowestBreakIteration%2A> property value.</span></span>  
  
 <span data-ttu-id="8e2a5-138">Иллюстрация приведена в примере.</span><span class="sxs-lookup"><span data-stu-id="8e2a5-138">The example provides an illustration.</span></span>  
  
 <span data-ttu-id="8e2a5-139"><xref:System.Threading.Tasks.ParallelLoopState.Break%2A> обычно принят на работу на основе поиска алгоритмы, где порядок, имеющиеся в источнике данных.</span><span class="sxs-lookup"><span data-stu-id="8e2a5-139"><xref:System.Threading.Tasks.ParallelLoopState.Break%2A> is typically employed in search-based algorithms where an ordering is present in the data source.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="8e2a5-140">В следующем примере выполняется до 100 итераций цикла в параллельном режиме.</span><span class="sxs-lookup"><span data-stu-id="8e2a5-140">The following example executes up to 100 iterations of a loop in parallel.</span></span> <span data-ttu-id="8e2a5-141">Приостанавливает работу каждой итерации для произвольного интервал от 1 до 1000 миллисекунд.</span><span class="sxs-lookup"><span data-stu-id="8e2a5-141">Each iteration pauses for a random interval from 1 to 1,000 milliseconds.</span></span> <span data-ttu-id="8e2a5-142">Случайное значение определяет, на какой итерации цикла <xref:System.Threading.Tasks.ParallelLoopState.Break%2A> вызывается метод.</span><span class="sxs-lookup"><span data-stu-id="8e2a5-142">A randomly generated value determines on which iteration of the loop the <xref:System.Threading.Tasks.ParallelLoopState.Break%2A> method is called.</span></span> <span data-ttu-id="8e2a5-143">Как видно в результатах показано в примере, нет итераций, индекс которого больше, чем <xref:System.Threading.Tasks.ParallelLoopState.LowestBreakIteration%2A> начальное значение свойства после вызова <xref:System.Threading.Tasks.ParallelLoopState.Break%2A> метод.</span><span class="sxs-lookup"><span data-stu-id="8e2a5-143">As the output from the example shows, no iterations whose index is greater than the <xref:System.Threading.Tasks.ParallelLoopState.LowestBreakIteration%2A> property value start after the call to the <xref:System.Threading.Tasks.ParallelLoopState.Break%2A> method.</span></span>  
  
 [!code-csharp[System.Threading.Tasks.ParallelLoopState#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.threading.tasks.parallelloopstate/cs/break1.cs#2)]
 [!code-vb[System.Threading.Tasks.ParallelLoopState#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.threading.tasks.parallelloopstate/vb/break1.vb#2)]  
  
 <span data-ttu-id="8e2a5-144">Поскольку итерации цикла вряд ли по-прежнему выполняться, когда <xref:System.Threading.Tasks.ParallelLoopState.Break%2A> вызывается метод, вызывает каждой итерации <xref:System.Threading.Tasks.ParallelLoopState.ShouldExitCurrentIteration%2A> свойство для проверки, вызвал ли другую итерацию <xref:System.Threading.Tasks.ParallelLoopState.Break%2A> метод.</span><span class="sxs-lookup"><span data-stu-id="8e2a5-144">Because iterations of the loop are still likely to be executing when the <xref:System.Threading.Tasks.ParallelLoopState.Break%2A> method is called, each iteration calls the <xref:System.Threading.Tasks.ParallelLoopState.ShouldExitCurrentIteration%2A> property to check whether another iteration has called the <xref:System.Threading.Tasks.ParallelLoopState.Break%2A> method.</span></span> <span data-ttu-id="8e2a5-145">Если свойство имеет значение `true`, итерации проверяет значение <xref:System.Threading.Tasks.ParallelLoopState.LowestBreakIteration%2A> свойства и, если больше, чем значение индекса текущей итерации, возвращается немедленно.</span><span class="sxs-lookup"><span data-stu-id="8e2a5-145">If  the property value is `true`, the iteration checks the value of the <xref:System.Threading.Tasks.ParallelLoopState.LowestBreakIteration%2A> property and, if it is greater than the current iteration's index value, returns immediately.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">
          <span data-ttu-id="8e2a5-146">Был ранее вызван метод <see cref="M:System.Threading.Tasks.ParallelLoopState.Stop" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8e2a5-146">The <see cref="M:System.Threading.Tasks.ParallelLoopState.Stop" /> method was previously called.</span>
          </span>
          <span data-ttu-id="8e2a5-147">
            <see cref="M:System.Threading.Tasks.ParallelLoopState.Break" /> и <see cref="M:System.Threading.Tasks.ParallelLoopState.Stop" /> не могут использоваться в сочетании итерациями одного и того же цикла.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8e2a5-147">
              <see cref="M:System.Threading.Tasks.ParallelLoopState.Break" /> and <see cref="M:System.Threading.Tasks.ParallelLoopState.Stop" /> may not be used in combination by iterations of the same loop.</span>
          </span>
        </exception>
        <altmember cref="P:System.Threading.Tasks.ParallelLoopState.ShouldExitCurrentIteration" />
        <altmember cref="P:System.Threading.Tasks.ParallelLoopState.LowestBreakIteration" />
      </Docs>
    </Member>
    <Member MemberName="IsExceptional">
      <MemberSignature Language="C#" Value="public bool IsExceptional { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsExceptional" />
      <MemberSignature Language="DocId" Value="P:System.Threading.Tasks.ParallelLoopState.IsExceptional" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsExceptional As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsExceptional { bool get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks.Parallel</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.3.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="8e2a5-148">Получает значение, указывающее, возникло ли в какой-либо итерации цикла исключение, не обработанное данной итерацией.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8e2a5-148">Gets whether any iteration of the loop has thrown an exception that went unhandled by that iteration.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="8e2a5-149">Значение <see langword="true" />, если было вызвано необработанное исключение; в противном случае — значение <see langword="false" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8e2a5-149">
              <see langword="true" /> if an unhandled exception was thrown; otherwise, <see langword="false" />.</span>
          </span>
        </value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="IsStopped">
      <MemberSignature Language="C#" Value="public bool IsStopped { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsStopped" />
      <MemberSignature Language="DocId" Value="P:System.Threading.Tasks.ParallelLoopState.IsStopped" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsStopped As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsStopped { bool get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks.Parallel</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.3.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="8e2a5-150">Получает значение, указывающее, вызывала ли какая-либо итерация цикла метод <see cref="M:System.Threading.Tasks.ParallelLoopState.Stop" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8e2a5-150">Gets whether any iteration of the loop has called the <see cref="M:System.Threading.Tasks.ParallelLoopState.Stop" /> method.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="8e2a5-151">Значение <see langword="true" />, если какая-либо итерация остановила цикл, вызвав метод <see cref="M:System.Threading.Tasks.ParallelLoopState.Stop" />; в противном случае — значение <see langword="false" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8e2a5-151">
              <see langword="true" /> if any iteration has stopped the loop by calling the <see cref="M:System.Threading.Tasks.ParallelLoopState.Stop" /> method; otherwise, <see langword="false" />.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="8e2a5-152">Для длительных итерации цикла, можно извлечь значение <xref:System.Threading.Tasks.ParallelLoopState.IsStopped%2A> свойства, чтобы определить ли все итерации цикла, начала выполнения перед вызовом <xref:System.Threading.Tasks.ParallelLoopState.Stop%2A> метод по-прежнему выполняются.</span><span class="sxs-lookup"><span data-stu-id="8e2a5-152">For long-running iterations of the loop, you can retrieve the value of the <xref:System.Threading.Tasks.ParallelLoopState.IsStopped%2A> property to determine whether any iterations of the loop that began execution before the call to the <xref:System.Threading.Tasks.ParallelLoopState.Stop%2A> method are still executing.</span></span> <span data-ttu-id="8e2a5-153">Затем можно использовать значение <xref:System.Threading.Tasks.ParallelLoopState.IsStopped%2A> свойства, чтобы определить ли они немедленный возврат, или выполнение в обычном режиме.</span><span class="sxs-lookup"><span data-stu-id="8e2a5-153">You can then use the value of the <xref:System.Threading.Tasks.ParallelLoopState.IsStopped%2A> property to determine whether they should return immediately or execute normally.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="8e2a5-154">В следующем примере выполняется до 10 000 итераций цикла в параллельном режиме.</span><span class="sxs-lookup"><span data-stu-id="8e2a5-154">The following example executes up to 10,000 iterations of a loop in parallel.</span></span> <span data-ttu-id="8e2a5-155">Приостанавливает работу каждой итерации для произвольного интервал от 1 до 1000 миллисекунд.</span><span class="sxs-lookup"><span data-stu-id="8e2a5-155">Each iteration pauses for a random interval from 1 to 1,000 milliseconds.</span></span> <span data-ttu-id="8e2a5-156">Случайное значение определяет, на какой итерации цикла <xref:System.Threading.Tasks.ParallelLoopState.Stop%2A> вызывается метод.</span><span class="sxs-lookup"><span data-stu-id="8e2a5-156">A randomly generated value determines on which iteration of the loop the <xref:System.Threading.Tasks.ParallelLoopState.Stop%2A> method is called.</span></span> <span data-ttu-id="8e2a5-157">Поскольку итерации цикла вряд ли по-прежнему выполняться, когда <xref:System.Threading.Tasks.ParallelLoopState.Stop%2A> вызывается метод, лямбда-выражение вызывает <xref:System.Threading.Tasks.ParallelLoopState.IsStopped%2A> метод для проверки, вызвал ли другую итерацию <xref:System.Threading.Tasks.ParallelLoopState.Stop%2A> метод.</span><span class="sxs-lookup"><span data-stu-id="8e2a5-157">Because iterations of the loop are still likely to be executing when the <xref:System.Threading.Tasks.ParallelLoopState.Stop%2A> method is called, the lambda expression calls the <xref:System.Threading.Tasks.ParallelLoopState.IsStopped%2A> method to check whether another iteration has called the <xref:System.Threading.Tasks.ParallelLoopState.Stop%2A> method.</span></span> <span data-ttu-id="8e2a5-158">Если он возвращает `true`, немедленно возвращает итерации.</span><span class="sxs-lookup"><span data-stu-id="8e2a5-158">If it returns `true`, the iteration returns immediately.</span></span>  
  
 [!code-csharp[System.Threading.Tasks.ParallelLoopState#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.threading.tasks.parallelloopstate/cs/stop1.cs#1)]
 [!code-vb[System.Threading.Tasks.ParallelLoopState#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.threading.tasks.parallelloopstate/vb/stop1.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="LowestBreakIteration">
      <MemberSignature Language="C#" Value="public Nullable&lt;long&gt; LowestBreakIteration { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Nullable`1&lt;int64&gt; LowestBreakIteration" />
      <MemberSignature Language="DocId" Value="P:System.Threading.Tasks.ParallelLoopState.LowestBreakIteration" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property LowestBreakIteration As Nullable(Of Long)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property Nullable&lt;long&gt; LowestBreakIteration { Nullable&lt;long&gt; get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks.Parallel</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.3.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Nullable&lt;System.Int64&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="8e2a5-159">Получает первую итерацию цикла, из которой был вызван метод <see cref="M:System.Threading.Tasks.ParallelLoopState.Break" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8e2a5-159">Gets the lowest iteration of the loop from which <see cref="M:System.Threading.Tasks.ParallelLoopState.Break" /> was called.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="8e2a5-160">Получает первую итерацию, из которой был вызван метод <see cref="M:System.Threading.Tasks.ParallelLoopState.Break" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8e2a5-160">The lowest iteration from which <see cref="M:System.Threading.Tasks.ParallelLoopState.Break" /> was called.</span>
          </span>
          <span data-ttu-id="8e2a5-161">В случае цикла <see cref="M:System.Threading.Tasks.Parallel.ForEach``1(System.Collections.Concurrent.Partitioner{``0},System.Action{``0})" /> значение основано на внутренне создаваемом индексе.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8e2a5-161">In the case of a <see cref="M:System.Threading.Tasks.Parallel.ForEach``1(System.Collections.Concurrent.Partitioner{``0},System.Action{``0})" /> loop, the value is based on an internally-generated index.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="8e2a5-162">Возможно несколько итераций параллельного цикла для вызова <xref:System.Threading.Tasks.ParallelLoopState.Break%2A> метод.</span><span class="sxs-lookup"><span data-stu-id="8e2a5-162">It is possible for multiple iterations of a parallel loop to call the <xref:System.Threading.Tasks.ParallelLoopState.Break%2A> method.</span></span> <span data-ttu-id="8e2a5-163">Если они есть, это значение равно наименьшего индекса итерации, который вызвал <xref:System.Threading.Tasks.ParallelLoopState.Break%2A>.</span><span class="sxs-lookup"><span data-stu-id="8e2a5-163">If they do, this value is the smallest index of an iteration that called <xref:System.Threading.Tasks.ParallelLoopState.Break%2A>.</span></span> <span data-ttu-id="8e2a5-164">При вызове без итерации цикла <xref:System.Threading.Tasks.ParallelLoopState.Break%2A>, это свойство возвращает `null`.</span><span class="sxs-lookup"><span data-stu-id="8e2a5-164">If no iteration of the loop called <xref:System.Threading.Tasks.ParallelLoopState.Break%2A>, this property returns `null`.</span></span> <span data-ttu-id="8e2a5-165">Обратите внимание, что значение свойства не влияет на вызовы <xref:System.Threading.Tasks.ParallelLoopState.Stop%2A> метод.</span><span class="sxs-lookup"><span data-stu-id="8e2a5-165">Note that the property value is unaffected by calls to the <xref:System.Threading.Tasks.ParallelLoopState.Stop%2A> method.</span></span>  
  
 <span data-ttu-id="8e2a5-166">В итерации долго выполняющихся всех итераций после итерации, который вызывает <xref:System.Threading.Tasks.ParallelLoopState.Break%2A> нет необходимости использовать метод, <xref:System.Threading.Tasks.ParallelLoopState.LowestBreakIteration%2A> свойство используется для завершения итерации, начала выполнения перед вызовом <xref:System.Threading.Tasks.ParallelLoopState.Break%2A> метод.</span><span class="sxs-lookup"><span data-stu-id="8e2a5-166">In long-running iterations in which all iterations after the iteration that calls the <xref:System.Threading.Tasks.ParallelLoopState.Break%2A> method need not run, the <xref:System.Threading.Tasks.ParallelLoopState.LowestBreakIteration%2A> property is used to terminate iterations that began execution before the call to the <xref:System.Threading.Tasks.ParallelLoopState.Break%2A> method.</span></span> <span data-ttu-id="8e2a5-167">Чтобы остановить, индекс которого больше, чем первую итерацию разрыв конкурирующих выполнения итераций, делать следующее:</span><span class="sxs-lookup"><span data-stu-id="8e2a5-167">To stop iterations whose index is greater than the lowest break iteration from competing execution, you should do the following:</span></span>  
  
1.  <span data-ttu-id="8e2a5-168">Проверьте ли <xref:System.Threading.Tasks.ParallelLoopState.ShouldExitCurrentIteration%2A> свойство `true`.</span><span class="sxs-lookup"><span data-stu-id="8e2a5-168">Check whether the <xref:System.Threading.Tasks.ParallelLoopState.ShouldExitCurrentIteration%2A> property is `true`.</span></span>  
  
2.  <span data-ttu-id="8e2a5-169">Выйти из итерации, если его индекс больше <xref:System.Threading.Tasks.ParallelLoopState.LowestBreakIteration%2A> значение свойства.</span><span class="sxs-lookup"><span data-stu-id="8e2a5-169">Exit from the iteration if its index is greater than the <xref:System.Threading.Tasks.ParallelLoopState.LowestBreakIteration%2A> property value.</span></span>  
  
 <span data-ttu-id="8e2a5-170">Иллюстрация приведена в примере.</span><span class="sxs-lookup"><span data-stu-id="8e2a5-170">The example provides an illustration.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="8e2a5-171">В следующем примере выполняется до 100 итераций цикла в параллельном режиме.</span><span class="sxs-lookup"><span data-stu-id="8e2a5-171">The following example executes up to 100 iterations of a loop in parallel.</span></span> <span data-ttu-id="8e2a5-172">Приостанавливает работу каждой итерации для произвольного интервал от 1 до 1000 миллисекунд.</span><span class="sxs-lookup"><span data-stu-id="8e2a5-172">Each iteration pauses for a random interval from 1 to 1,000 milliseconds.</span></span> <span data-ttu-id="8e2a5-173">Случайное значение определяет, на какой итерации цикла <xref:System.Threading.Tasks.ParallelLoopState.Break%2A> вызывается метод.</span><span class="sxs-lookup"><span data-stu-id="8e2a5-173">A randomly generated value determines on which iteration of the loop the <xref:System.Threading.Tasks.ParallelLoopState.Break%2A> method is called.</span></span> <span data-ttu-id="8e2a5-174">Это предотвращает итераций, индекс которого больше, чем <xref:System.Threading.Tasks.ParallelLoopState.LowestBreakIteration%2A> значение свойства запуститься после вызова <xref:System.Threading.Tasks.ParallelLoopState.Break%2A> метода, но он не влияет на все итерации, которые уже начал выполняться.</span><span class="sxs-lookup"><span data-stu-id="8e2a5-174">This prevents iterations whose index is greater than the <xref:System.Threading.Tasks.ParallelLoopState.LowestBreakIteration%2A> property value from starting after the call to the <xref:System.Threading.Tasks.ParallelLoopState.Break%2A> method, but it does not affect any iterations that have already begun executing.</span></span> <span data-ttu-id="8e2a5-175">Чтобы предотвратить их выполнение, вызывает каждой итерации <xref:System.Threading.Tasks.ParallelLoopState.ShouldExitCurrentIteration%2A> метод для проверки, вызвал ли другую итерацию <xref:System.Threading.Tasks.ParallelLoopState.Break%2A> метод.</span><span class="sxs-lookup"><span data-stu-id="8e2a5-175">To prevent these from completing, each iteration calls the <xref:System.Threading.Tasks.ParallelLoopState.ShouldExitCurrentIteration%2A> method to check whether another iteration has called the <xref:System.Threading.Tasks.ParallelLoopState.Break%2A> method.</span></span> <span data-ttu-id="8e2a5-176">Если Да, итерация проверяет значение <xref:System.Threading.Tasks.ParallelLoopState.LowestBreakIteration%2A> свойства и, если больше, чем значение индекса текущей итерации, возвращается немедленно.</span><span class="sxs-lookup"><span data-stu-id="8e2a5-176">If so, the iteration checks the value of the <xref:System.Threading.Tasks.ParallelLoopState.LowestBreakIteration%2A> property and, if it is greater than the current iteration's index value, returns immediately.</span></span>  
  
 [!code-csharp[System.Threading.Tasks.ParallelLoopState#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.threading.tasks.parallelloopstate/cs/break1.cs#2)]
 [!code-vb[System.Threading.Tasks.ParallelLoopState#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.threading.tasks.parallelloopstate/vb/break1.vb#2)]  
  
 <span data-ttu-id="8e2a5-177">Обратите внимание, что, поскольку <xref:System.Threading.Tasks.ParallelLoopState.LowestBreakIteration%2A> значение выходит за пределы области за пределами параллельного цикла, необходимо назначить переменной, которая отображается за пределами цикла, если вы хотите сохранить ее значение.</span><span class="sxs-lookup"><span data-stu-id="8e2a5-177">Note that, because the <xref:System.Threading.Tasks.ParallelLoopState.LowestBreakIteration%2A> value is out of scope outside of the parallel loop, you must assign it to a variable that is visible outside of the loop if you want to preserve its value.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Threading.Tasks.ParallelLoopState.ShouldExitCurrentIteration" />
        <altmember cref="M:System.Threading.Tasks.ParallelLoopState.Break" />
      </Docs>
    </Member>
    <Member MemberName="ShouldExitCurrentIteration">
      <MemberSignature Language="C#" Value="public bool ShouldExitCurrentIteration { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool ShouldExitCurrentIteration" />
      <MemberSignature Language="DocId" Value="P:System.Threading.Tasks.ParallelLoopState.ShouldExitCurrentIteration" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property ShouldExitCurrentIteration As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool ShouldExitCurrentIteration { bool get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks.Parallel</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.3.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="8e2a5-178">Получает значение, указывающее, следует ли текущей итерации цикла завершить работу на основе запросов от этой или других итераций.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8e2a5-178">Gets whether the current iteration of the loop should exit based on requests made by this or other iterations.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="8e2a5-179">Значение <see langword="true" />, если текущая итерация должна завершать работу; в противном случае — значение <see langword="false" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8e2a5-179">
              <see langword="true" /> if the current iteration should exit; otherwise, <see langword="false" />.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="8e2a5-180"><xref:System.Threading.Tasks.ParallelLoopState.ShouldExitCurrentIteration%2A> Свойству `true` при выполнении любого из следующих условий:</span><span class="sxs-lookup"><span data-stu-id="8e2a5-180">The <xref:System.Threading.Tasks.ParallelLoopState.ShouldExitCurrentIteration%2A> property is set to `true` under any of the following conditions:</span></span>  
  
-   <span data-ttu-id="8e2a5-181">Итерации цикла вызовов <xref:System.Threading.Tasks.ParallelLoopState.Break%2A> или <xref:System.Threading.Tasks.ParallelLoopState.Stop%2A>.</span><span class="sxs-lookup"><span data-stu-id="8e2a5-181">An iteration of the loop calls <xref:System.Threading.Tasks.ParallelLoopState.Break%2A> or <xref:System.Threading.Tasks.ParallelLoopState.Stop%2A>.</span></span>  
  
-   <span data-ttu-id="8e2a5-182">Итерация цикла создает исключение.</span><span class="sxs-lookup"><span data-stu-id="8e2a5-182">An iteration of the loop throws an exception.</span></span>  
  
-   <span data-ttu-id="8e2a5-183">Цикл будет отменена.</span><span class="sxs-lookup"><span data-stu-id="8e2a5-183">The loop is canceled.</span></span>  
  
 <span data-ttu-id="8e2a5-184">Если этому свойству присвоено `true`, <xref:System.Threading.Tasks.Parallel> класс заранее попытается запретить запуск выполнения дополнительных итераций цикла.</span><span class="sxs-lookup"><span data-stu-id="8e2a5-184">When this property is `true`, the <xref:System.Threading.Tasks.Parallel> class will proactively attempt to prohibit additional iterations of the loop from starting execution.</span></span> <span data-ttu-id="8e2a5-185">Тем не менее могут быть случаи, где не удается избежать дополнительных итераций запуститься.</span><span class="sxs-lookup"><span data-stu-id="8e2a5-185">However, there may be cases where it is unable to prevent additional iterations from starting.</span></span>  
  
 <span data-ttu-id="8e2a5-186">Он также может быть так, что уже началось выполнение продолжительной итерации.</span><span class="sxs-lookup"><span data-stu-id="8e2a5-186">It may also be the case that a long-running iteration has already begun execution.</span></span> <span data-ttu-id="8e2a5-187">В таких случаях итераций может явно не проверять <xref:System.Threading.Tasks.ParallelLoopState.ShouldExitCurrentIteration%2A> свойство и прекращает выполнение, если свойство возвращает `true`.</span><span class="sxs-lookup"><span data-stu-id="8e2a5-187">In such cases, iterations may explicitly check the <xref:System.Threading.Tasks.ParallelLoopState.ShouldExitCurrentIteration%2A> property and cease execution if the property returns `true`.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="8e2a5-188">В следующем примере выполняется до 100 итераций цикла в параллельном режиме.</span><span class="sxs-lookup"><span data-stu-id="8e2a5-188">The following example executes up to 100 iterations of a loop in parallel.</span></span> <span data-ttu-id="8e2a5-189">Приостанавливает работу каждой итерации для произвольного интервал от 1 до 1000 миллисекунд.</span><span class="sxs-lookup"><span data-stu-id="8e2a5-189">Each iteration pauses for a random interval from 1 to 1,000 milliseconds.</span></span> <span data-ttu-id="8e2a5-190">Случайное значение определяет, на какой итерации цикла <xref:System.Threading.Tasks.ParallelLoopState.Break%2A> вызывается метод.</span><span class="sxs-lookup"><span data-stu-id="8e2a5-190">A randomly generated value determines on which iteration of the loop the <xref:System.Threading.Tasks.ParallelLoopState.Break%2A> method is called.</span></span> <span data-ttu-id="8e2a5-191">Это предотвращает итераций, индекс которого больше, чем <xref:System.Threading.Tasks.ParallelLoopState.LowestBreakIteration%2A> значение свойства запуститься после вызова <xref:System.Threading.Tasks.ParallelLoopState.Break%2A> метода, но он не влияет на все итерации, которые уже начал выполняться.</span><span class="sxs-lookup"><span data-stu-id="8e2a5-191">This prevents iterations whose index is greater than the <xref:System.Threading.Tasks.ParallelLoopState.LowestBreakIteration%2A> property value from starting after the call to the <xref:System.Threading.Tasks.ParallelLoopState.Break%2A> method, but it does not affect any iterations that have already begun executing.</span></span> <span data-ttu-id="8e2a5-192">Чтобы предотвратить их выполнение, вызывает каждой итерации <xref:System.Threading.Tasks.ParallelLoopState.ShouldExitCurrentIteration%2A> метод для проверки, вызвал ли другую итерацию <xref:System.Threading.Tasks.ParallelLoopState.Break%2A> метод.</span><span class="sxs-lookup"><span data-stu-id="8e2a5-192">To prevent these from completing, each iteration calls the <xref:System.Threading.Tasks.ParallelLoopState.ShouldExitCurrentIteration%2A> method to check whether another iteration has called the <xref:System.Threading.Tasks.ParallelLoopState.Break%2A> method.</span></span> <span data-ttu-id="8e2a5-193">Если Да, итерация проверяет значение <xref:System.Threading.Tasks.ParallelLoopState.LowestBreakIteration%2A> свойства и, если больше, чем значение индекса текущей итерации, возвращается немедленно.</span><span class="sxs-lookup"><span data-stu-id="8e2a5-193">If so, the iteration checks the value of the <xref:System.Threading.Tasks.ParallelLoopState.LowestBreakIteration%2A> property and, if it is greater than the current iteration's index value, returns immediately.</span></span>  
  
 [!code-csharp[System.Threading.Tasks.ParallelLoopState#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.threading.tasks.parallelloopstate/cs/break1.cs#2)]
 [!code-vb[System.Threading.Tasks.ParallelLoopState#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.threading.tasks.parallelloopstate/vb/break1.vb#2)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Threading.Tasks.ParallelLoopState.LowestBreakIteration" />
        <altmember cref="M:System.Threading.Tasks.ParallelLoopState.Break" />
        <altmember cref="M:System.Threading.Tasks.ParallelLoopState.Stop" />
      </Docs>
    </Member>
    <Member MemberName="Stop">
      <MemberSignature Language="C#" Value="public void Stop ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Stop() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Tasks.ParallelLoopState.Stop" />
      <MemberSignature Language="VB.NET" Value="Public Sub Stop ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Stop();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks.Parallel</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.3.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="8e2a5-194">Сообщает, что цикл <see cref="T:System.Threading.Tasks.Parallel" /> должен прекратить выполнение в первый удобный для системы момент.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8e2a5-194">Communicates that the <see cref="T:System.Threading.Tasks.Parallel" /> loop should cease execution at the system's earliest convenience.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="8e2a5-195">Вызов <xref:System.Threading.Tasks.ParallelLoopState.Stop%2A> метод показывает все итерации цикла, которые еще не были запущены запуска не требуется.</span><span class="sxs-lookup"><span data-stu-id="8e2a5-195">Calling the <xref:System.Threading.Tasks.ParallelLoopState.Stop%2A> method indicates that any iterations of the loop that have not yet started need not be run.</span></span> <span data-ttu-id="8e2a5-196">Фактически он отменяет любые дополнительные итерации цикла.</span><span class="sxs-lookup"><span data-stu-id="8e2a5-196">It effectively cancels any additional iterations of the loop.</span></span> <span data-ttu-id="8e2a5-197">Тем не менее любой итераций, которые уже начали выполнение не останавливается.</span><span class="sxs-lookup"><span data-stu-id="8e2a5-197">However, it does not stop any iterations that have already begun execution.</span></span>  
  
 <span data-ttu-id="8e2a5-198">Вызов <xref:System.Threading.Tasks.ParallelLoopState.Stop%2A> метода заставляет <xref:System.Threading.Tasks.ParallelLoopState.IsStopped%2A> возвращаемое свойство `true` для какой-либо итерации цикла, который все еще выполняется.</span><span class="sxs-lookup"><span data-stu-id="8e2a5-198">Calling the <xref:System.Threading.Tasks.ParallelLoopState.Stop%2A> method causes the <xref:System.Threading.Tasks.ParallelLoopState.IsStopped%2A> property to return `true` for any iteration of the loop that is still executing.</span></span> <span data-ttu-id="8e2a5-199">Это особенно полезно для долго выполняющихся итераций, которые можно проверить <xref:System.Threading.Tasks.ParallelLoopState.IsStopped%2A> свойство и выйти раньше, если его значение равно `true`.</span><span class="sxs-lookup"><span data-stu-id="8e2a5-199">This is particularly useful for long-running iterations, which can check the <xref:System.Threading.Tasks.ParallelLoopState.IsStopped%2A> property and exit early if its value is `true`.</span></span>  
  
 <span data-ttu-id="8e2a5-200"><xref:System.Threading.Tasks.ParallelLoopState.Stop%2A> обычно работает в алгоритмах поиска, где после результирующего найдено, никакие другие итераций должны выполняться.</span><span class="sxs-lookup"><span data-stu-id="8e2a5-200"><xref:System.Threading.Tasks.ParallelLoopState.Stop%2A> is typically employed in search-based algorithms, where once a result is found, no other iterations need be executed.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="8e2a5-201">В следующем примере выполняется до 10 000 итераций цикла в параллельном режиме.</span><span class="sxs-lookup"><span data-stu-id="8e2a5-201">The following example executes up to 10,000 iterations of a loop in parallel.</span></span> <span data-ttu-id="8e2a5-202">Приостанавливает работу каждой итерации для произвольного интервал от 1 до 1000 миллисекунд.</span><span class="sxs-lookup"><span data-stu-id="8e2a5-202">Each iteration pauses for a random interval from 1 to 1,000 milliseconds.</span></span> <span data-ttu-id="8e2a5-203">Случайное значение определяет, на какой итерации цикла <xref:System.Threading.Tasks.ParallelLoopState.Stop%2A> вызывается метод.</span><span class="sxs-lookup"><span data-stu-id="8e2a5-203">A randomly generated value determines on which iteration of the loop the <xref:System.Threading.Tasks.ParallelLoopState.Stop%2A> method is called.</span></span> <span data-ttu-id="8e2a5-204">Как показывают выходные данные примера, итерации не выполнить после вызова <xref:System.Threading.Tasks.ParallelLoopState.Stop%2A> метод.</span><span class="sxs-lookup"><span data-stu-id="8e2a5-204">As the output from the example shows, no iterations execute after the call to the <xref:System.Threading.Tasks.ParallelLoopState.Stop%2A> method.</span></span>  
  
 [!code-csharp[System.Threading.Tasks.ParallelLoopState#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.threading.tasks.parallelloopstate/cs/stop1.cs#1)]
 [!code-vb[System.Threading.Tasks.ParallelLoopState#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.threading.tasks.parallelloopstate/vb/stop1.vb#1)]  
  
 <span data-ttu-id="8e2a5-205">Поскольку итерации цикла вряд ли по-прежнему выполняться, когда <xref:System.Threading.Tasks.ParallelLoopState.Stop%2A> вызывается метод, вызывает каждой итерации <xref:System.Threading.Tasks.ParallelLoopState.IsStopped%2A> метод для проверки, вызвал ли другую итерацию <xref:System.Threading.Tasks.ParallelLoopState.Stop%2A> метод.</span><span class="sxs-lookup"><span data-stu-id="8e2a5-205">Because iterations of the loop are still likely to be executing when the <xref:System.Threading.Tasks.ParallelLoopState.Stop%2A> method is called, each iteration calls the <xref:System.Threading.Tasks.ParallelLoopState.IsStopped%2A> method to check whether another iteration has called the <xref:System.Threading.Tasks.ParallelLoopState.Stop%2A> method.</span></span> <span data-ttu-id="8e2a5-206">Если он возвращает `true`, немедленно возвращает итерации.</span><span class="sxs-lookup"><span data-stu-id="8e2a5-206">If it returns `true`, the iteration returns immediately.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">
          <span data-ttu-id="8e2a5-207">Метод <see cref="M:System.Threading.Tasks.ParallelLoopState.Break" /> был вызван ранее.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8e2a5-207">The <see cref="M:System.Threading.Tasks.ParallelLoopState.Break" /> method was called previously.</span>
          </span>
          <span data-ttu-id="8e2a5-208">
            <see cref="M:System.Threading.Tasks.ParallelLoopState.Break" /> и <see cref="M:System.Threading.Tasks.ParallelLoopState.Stop" /> не могут использоваться в сочетании итерациями одного и того же цикла.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8e2a5-208">
              <see cref="M:System.Threading.Tasks.ParallelLoopState.Break" /> and <see cref="M:System.Threading.Tasks.ParallelLoopState.Stop" /> may not be used in combination by iterations of the same loop.</span>
          </span>
        </exception>
        <altmember cref="P:System.Threading.Tasks.ParallelLoopState.IsStopped" />
      </Docs>
    </Member>
  </Members>
</Type>