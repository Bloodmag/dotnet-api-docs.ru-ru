<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" version="1.2" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="AsyncFlowControl.xml" source-language="en-US" target-language="ru-RU">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-15c36f0" tool-company="Microsoft" />
      <xliffext:skl_file_name xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">02cd5861-7ce2-4a82-b358-31f8435a0ac5e6dae693cd1ac3ea4d8fb159e78d5e7190097d98.skl</xliffext:skl_file_name>
      <xliffext:version xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">1.2</xliffext:version>
      <xliffext:ms.openlocfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">e6dae693cd1ac3ea4d8fb159e78d5e7190097d98</xliffext:ms.openlocfilehash>
      <xliffext:ms.sourcegitcommit xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">d31dc2ede16f6f7bc64e90d9f897ff54c4e3869b</xliffext:ms.sourcegitcommit>
      <xliffext:ms.lasthandoff xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">04/03/2018</xliffext:ms.lasthandoff>
      <xliffext:moniker_ids xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">netcore-2.0,netcore-2.1,netframework-4.5.1,netframework-4.5.2,netframework-4.5,netframework-4.6.1,netframework-4.6.2,netframework-4.6,netframework-4.7.1,netframework-4.7,netstandard-2.0,xamarinandroid-7.1,xamarinios-10.8,xamarinmac-3.0</xliffext:moniker_ids>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve" uid="T:System.Threading.AsyncFlowControl">
          <source>Provides the functionality to restore the migration, or flow, of the execution context between threads.</source>
          <target state="translated">Обеспечивает функциональность для восстановления миграции или перемещения контекста выполнения между потоками.</target>       </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Threading.AsyncFlowControl">
          <source>An execution context contains all execution-related information for a logical thread.</source>
          <target state="translated">Контекст выполнения содержит все данные, касающиеся выполнения логических потоков.</target>       </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Threading.AsyncFlowControl">
          <source>The flow of the execution context to other threads can be prevented by using the <ph id="ph1">&lt;xref:System.Threading.ExecutionContext.SuppressFlow%2A?displayProperty=nameWithType&gt;</ph> method, which returns an <ph id="ph2">&lt;xref:System.Threading.AsyncFlowControl&gt;</ph> structure.</source>
          <target state="translated">Поток контекста выполнения в другие потоки, можно предотвратить с помощью <ph id="ph1">&lt;xref:System.Threading.ExecutionContext.SuppressFlow%2A?displayProperty=nameWithType&gt;</ph> метод, возвращающий <ph id="ph2">&lt;xref:System.Threading.AsyncFlowControl&gt;</ph> структуры.</target>       </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Threading.AsyncFlowControl">
          <source>The <ph id="ph1">&lt;xref:System.Threading.AsyncFlowControl.Undo%2A&gt;</ph> method of the returned <ph id="ph2">&lt;xref:System.Threading.AsyncFlowControl&gt;</ph> structure can be used to undo the flow suppression.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Threading.AsyncFlowControl.Undo%2A&gt;</ph> Метод возвращаемого <ph id="ph2">&lt;xref:System.Threading.AsyncFlowControl&gt;</ph> структуру может использоваться для отмены подавления потока.</target>       </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Threading.AsyncFlowControl">
          <source>The <ph id="ph1">&lt;xref:System.Threading.AsyncFlowControl&gt;</ph> structure must be used on the same thread on which it was created.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Threading.AsyncFlowControl&gt;</ph> Структуры должны использоваться в том же потоке, в котором он был создан.</target>       </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve" uid="M:System.Threading.AsyncFlowControl.Dispose">
          <source>Releases all resources used by the current instance of the <ph id="ph1">&lt;see cref="T:System.Threading.AsyncFlowControl" /&gt;</ph> class.</source>
          <target state="translated">Освобождает все ресурсы, используемые текущим экземпляром класса <ph id="ph1">&lt;see cref="T:System.Threading.AsyncFlowControl" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.AsyncFlowControl.Dispose">
          <source>Call <ph id="ph1">`Dispose`</ph> when you are finished using the <ph id="ph2">&lt;xref:System.Threading.AsyncFlowControl&gt;</ph>.</source>
          <target state="translated">Вызовите метод <ph id="ph1">`Dispose`</ph> по окончании использования класса <ph id="ph2">&lt;xref:System.Threading.AsyncFlowControl&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.AsyncFlowControl.Dispose">
          <source>The <ph id="ph1">`Dispose`</ph> method leaves the <ph id="ph2">&lt;xref:System.Threading.AsyncFlowControl&gt;</ph> in an unusable state.</source>
          <target state="translated">Метод <ph id="ph1">`Dispose`</ph> оставляет класс <ph id="ph2">&lt;xref:System.Threading.AsyncFlowControl&gt;</ph> в непригодном для использования состоянии.</target>       </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.AsyncFlowControl.Dispose">
          <source>After calling <ph id="ph1">`Dispose`</ph>, you must release all references to the <ph id="ph2">&lt;xref:System.Threading.AsyncFlowControl&gt;</ph> so the garbage collector can reclaim the memory that the <ph id="ph3">&lt;xref:System.Threading.AsyncFlowControl&gt;</ph> was occupying.</source>
          <target state="translated">После вызова метода <ph id="ph1">`Dispose`</ph>, необходимо освободить все ссылки на <ph id="ph2">&lt;xref:System.Threading.AsyncFlowControl&gt;</ph> , сборщик мусора мог освободить память, <ph id="ph3">&lt;xref:System.Threading.AsyncFlowControl&gt;</ph> занимаемую.</target>       </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.AsyncFlowControl.Dispose">
          <source>For more information, see <bpt id="p1">[</bpt>Cleaning Up Unmanaged Resources<ept id="p1">](~/docs/standard/garbage-collection/unmanaged.md)</ept> and <bpt id="p2">[</bpt>Implementing a Dispose Method<ept id="p2">](~/docs/standard/garbage-collection/implementing-dispose.md)</ept>.</source>
          <target state="translated">Дополнительные сведения см. в разделе <bpt id="p1">[</bpt>очистки неуправляемых ресурсов<ept id="p1">](~/docs/standard/garbage-collection/unmanaged.md)</ept> и <bpt id="p2">[</bpt>метода<ept id="p2">](~/docs/standard/garbage-collection/implementing-dispose.md)</ept>.</target>       </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.AsyncFlowControl.Dispose">
          <source>Always call <ph id="ph1">`Dispose`</ph> before you release your last reference to the <ph id="ph2">&lt;xref:System.Threading.AsyncFlowControl&gt;</ph>.</source>
          <target state="translated">Всегда вызывайте метод <ph id="ph1">`Dispose`</ph> перед освобождением последней ссылки на класс <ph id="ph2">&lt;xref:System.Threading.AsyncFlowControl&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.AsyncFlowControl.Dispose">
          <source>Otherwise, the resources it is using will not be freed until the garbage collector calls the <ph id="ph1">&lt;xref:System.Threading.AsyncFlowControl&gt;</ph> object's <ph id="ph2">`Finalize`</ph> method.</source>
          <target state="translated">В противном случае используемые им ресурсы не будут освобождены до тех пор, пока сборщик мусора не вызовет для объекта <ph id="ph1">&lt;xref:System.Threading.AsyncFlowControl&gt;</ph> метод <ph id="ph2">`Finalize`</ph>.</target>       </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve" uid="M:System.Threading.AsyncFlowControl.Dispose">
          <source>The <ph id="ph1">&lt;see cref="T:System.Threading.AsyncFlowControl" /&gt;</ph> structure is not used on the thread where it was created.</source>
          <target state="translated">Структура <ph id="ph1">&lt;see cref="T:System.Threading.AsyncFlowControl" /&gt;</ph> не используется в потоке, в котором она была создана.</target>       </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve" uid="M:System.Threading.AsyncFlowControl.Dispose">
          <source>-or-</source>
          <target state="translated">- или -</target>       </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve" uid="M:System.Threading.AsyncFlowControl.Dispose">
          <source>The <ph id="ph1">&lt;see cref="T:System.Threading.AsyncFlowControl" /&gt;</ph> structure has already been used to call <ph id="ph2">&lt;see cref="M:System.Threading.AsyncFlowControl.Dispose" /&gt;</ph> or <ph id="ph3">&lt;see cref="M:System.Threading.AsyncFlowControl.Undo" /&gt;</ph>.</source>
          <target state="translated">Структура <ph id="ph1">&lt;see cref="T:System.Threading.AsyncFlowControl" /&gt;</ph> уже использовалась для вызова <ph id="ph2">&lt;see cref="M:System.Threading.AsyncFlowControl.Dispose" /&gt;</ph> или <ph id="ph3">&lt;see cref="M:System.Threading.AsyncFlowControl.Undo" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve" uid="T:System.Threading.AsyncFlowControl">
          <source>Determines whether two instances are equal.</source>
          <target state="translated">Определяет, равны ли два экземпляра.</target>       </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve" uid="M:System.Threading.AsyncFlowControl.Equals(System.Object)">
          <source>An object to compare with the current structure.</source>
          <target state="translated">Объект для сравнения с текущей структурой.</target>       </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve" uid="M:System.Threading.AsyncFlowControl.Equals(System.Object)">
          <source>Determines whether the specified object is equal to the current <ph id="ph1">&lt;see cref="T:System.Threading.AsyncFlowControl" /&gt;</ph> structure.</source>
          <target state="translated">Определяет, эквивалентен ли указанный объект текущей структуре <ph id="ph1">&lt;see cref="T:System.Threading.AsyncFlowControl" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve" uid="M:System.Threading.AsyncFlowControl.Equals(System.Object)">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph> if <ph id="ph2">&lt;paramref name="obj" /&gt;</ph> is an <ph id="ph3">&lt;see cref="T:System.Threading.AsyncFlowControl" /&gt;</ph> structure and is equal to the current <ph id="ph4">&lt;see cref="T:System.Threading.AsyncFlowControl" /&gt;</ph> structure; otherwise, <ph id="ph5">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated">Значение <ph id="ph1">&lt;see langword="true" /&gt;</ph>, если <ph id="ph2">&lt;paramref name="obj" /&gt;</ph> является структурой <ph id="ph3">&lt;see cref="T:System.Threading.AsyncFlowControl" /&gt;</ph> и эквивалентен текущей структуре <ph id="ph4">&lt;see cref="T:System.Threading.AsyncFlowControl" /&gt;</ph> в противном случае — <ph id="ph5">&lt;see langword="false" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve" uid="M:System.Threading.AsyncFlowControl.Equals(System.Threading.AsyncFlowControl)">
          <source>An <ph id="ph1">&lt;see cref="T:System.Threading.AsyncFlowControl" /&gt;</ph> structure to compare with the current structure.</source>
          <target state="translated">Структура <ph id="ph1">&lt;see cref="T:System.Threading.AsyncFlowControl" /&gt;</ph> для сравнения с текущей структурой.</target>       </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve" uid="M:System.Threading.AsyncFlowControl.Equals(System.Threading.AsyncFlowControl)">
          <source>Determines whether the specified <ph id="ph1">&lt;see cref="T:System.Threading.AsyncFlowControl" /&gt;</ph> structure is equal to the current <ph id="ph2">&lt;see cref="T:System.Threading.AsyncFlowControl" /&gt;</ph> structure.</source>
          <target state="translated">Определяет, равна ли указанная структура <ph id="ph1">&lt;see cref="T:System.Threading.AsyncFlowControl" /&gt;</ph> текущей структуре <ph id="ph2">&lt;see cref="T:System.Threading.AsyncFlowControl" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve" uid="M:System.Threading.AsyncFlowControl.Equals(System.Threading.AsyncFlowControl)">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph> if <ph id="ph2">&lt;paramref name="obj" /&gt;</ph> is equal to the current <ph id="ph3">&lt;see cref="T:System.Threading.AsyncFlowControl" /&gt;</ph> structure; otherwise, <ph id="ph4">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated">Значение <ph id="ph1">&lt;see langword="true" /&gt;</ph>, если объект <ph id="ph2">&lt;paramref name="obj" /&gt;</ph> равен текущей структуре <ph id="ph3">&lt;see cref="T:System.Threading.AsyncFlowControl" /&gt;</ph>; в противном случае — значение <ph id="ph4">&lt;see langword="false" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve" uid="M:System.Threading.AsyncFlowControl.GetHashCode">
          <source>Gets a hash code for the current <ph id="ph1">&lt;see cref="T:System.Threading.AsyncFlowControl" /&gt;</ph> structure.</source>
          <target state="translated">Получает хэш-код текущей структуры <ph id="ph1">&lt;see cref="T:System.Threading.AsyncFlowControl" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve" uid="M:System.Threading.AsyncFlowControl.GetHashCode">
          <source>A hash code for the current <ph id="ph1">&lt;see cref="T:System.Threading.AsyncFlowControl" /&gt;</ph> structure.</source>
          <target state="translated">Хэш-код для текущей структуры <ph id="ph1">&lt;see cref="T:System.Threading.AsyncFlowControl" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve" uid="M:System.Threading.AsyncFlowControl.op_Equality(System.Threading.AsyncFlowControl,System.Threading.AsyncFlowControl)">
          <source>An <ph id="ph1">&lt;see cref="T:System.Threading.AsyncFlowControl" /&gt;</ph> structure.</source>
          <target state="translated">Структура <ph id="ph1">&lt;see cref="T:System.Threading.AsyncFlowControl" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve" uid="M:System.Threading.AsyncFlowControl.op_Equality(System.Threading.AsyncFlowControl,System.Threading.AsyncFlowControl)">
          <source>An <ph id="ph1">&lt;see cref="T:System.Threading.AsyncFlowControl" /&gt;</ph> structure.</source>
          <target state="translated">Структура <ph id="ph1">&lt;see cref="T:System.Threading.AsyncFlowControl" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve" uid="M:System.Threading.AsyncFlowControl.op_Equality(System.Threading.AsyncFlowControl,System.Threading.AsyncFlowControl)">
          <source>Compares two <ph id="ph1">&lt;see cref="T:System.Threading.AsyncFlowControl" /&gt;</ph> structures to determine whether they are equal.</source>
          <target state="translated">Сравнивает две структуры <ph id="ph1">&lt;see cref="T:System.Threading.AsyncFlowControl" /&gt;</ph>, чтобы определить, совпадают ли они.</target>       </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve" uid="M:System.Threading.AsyncFlowControl.op_Equality(System.Threading.AsyncFlowControl,System.Threading.AsyncFlowControl)">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph> if the two structures are equal; otherwise, <ph id="ph2">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated">Значение <ph id="ph1">&lt;see langword="true" /&gt;</ph>, если обе структуры эквивалентны, в противном случае — значение <ph id="ph2">&lt;see langword="false" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.AsyncFlowControl.op_Equality(System.Threading.AsyncFlowControl,System.Threading.AsyncFlowControl)">
          <source>The equivalent method for this operator is <ph id="ph1">&lt;xref:System.Threading.AsyncFlowControl.Equals%28System.Threading.AsyncFlowControl%29?displayProperty=nameWithType&gt;</ph>.</source>
          <target state="translated">Эквивалентный метод для этого оператора является <ph id="ph1">&lt;xref:System.Threading.AsyncFlowControl.Equals%28System.Threading.AsyncFlowControl%29?displayProperty=nameWithType&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve" uid="M:System.Threading.AsyncFlowControl.op_Inequality(System.Threading.AsyncFlowControl,System.Threading.AsyncFlowControl)">
          <source>An <ph id="ph1">&lt;see cref="T:System.Threading.AsyncFlowControl" /&gt;</ph> structure.</source>
          <target state="translated">Структура <ph id="ph1">&lt;see cref="T:System.Threading.AsyncFlowControl" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve" uid="M:System.Threading.AsyncFlowControl.op_Inequality(System.Threading.AsyncFlowControl,System.Threading.AsyncFlowControl)">
          <source>An <ph id="ph1">&lt;see cref="T:System.Threading.AsyncFlowControl" /&gt;</ph> structure.</source>
          <target state="translated">Структура <ph id="ph1">&lt;see cref="T:System.Threading.AsyncFlowControl" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve" uid="M:System.Threading.AsyncFlowControl.op_Inequality(System.Threading.AsyncFlowControl,System.Threading.AsyncFlowControl)">
          <source>Compares two <ph id="ph1">&lt;see cref="T:System.Threading.AsyncFlowControl" /&gt;</ph> structures to determine whether they are not equal.</source>
          <target state="translated">Сравнивает две структуры <ph id="ph1">&lt;see cref="T:System.Threading.AsyncFlowControl" /&gt;</ph> на неравенство.</target>       </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve" uid="M:System.Threading.AsyncFlowControl.op_Inequality(System.Threading.AsyncFlowControl,System.Threading.AsyncFlowControl)">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph> if the structures are not equal; otherwise, <ph id="ph2">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated">Значение <ph id="ph1">&lt;see langword="true" /&gt;</ph>, если структуры не равны; в противном случае — значение <ph id="ph2">&lt;see langword="false" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.AsyncFlowControl.op_Inequality(System.Threading.AsyncFlowControl,System.Threading.AsyncFlowControl)">
          <source>The equivalent method for this operator is <ph id="ph1">&lt;xref:System.Threading.AsyncFlowControl.Equals%28System.Threading.AsyncFlowControl%29?displayProperty=nameWithType&gt;</ph>.</source>
          <target state="translated">Эквивалентный метод для этого оператора является <ph id="ph1">&lt;xref:System.Threading.AsyncFlowControl.Equals%28System.Threading.AsyncFlowControl%29?displayProperty=nameWithType&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve" uid="M:System.Threading.AsyncFlowControl.Undo">
          <source>Restores the flow of the execution context between threads.</source>
          <target state="translated">Восстанавливает перемещение контекста выполнения между потоками.</target>       </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.AsyncFlowControl.Undo">
          <source>The <ph id="ph1">&lt;xref:System.Threading.ExecutionContext.SuppressFlow%2A?displayProperty=nameWithType&gt;</ph> method returns an <ph id="ph2">&lt;xref:System.Threading.AsyncFlowControl&gt;</ph> structure that is used to restore the flow.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Threading.ExecutionContext.SuppressFlow%2A?displayProperty=nameWithType&gt;</ph> Возвращает <ph id="ph2">&lt;xref:System.Threading.AsyncFlowControl&gt;</ph> структура, используемая для восстановления потока.</target>       </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.AsyncFlowControl.Undo">
          <source>The <ph id="ph1">&lt;xref:System.Threading.AsyncFlowControl.Undo%2A&gt;</ph> method must be called only on the <ph id="ph2">&lt;xref:System.Threading.AsyncFlowControl&gt;</ph> structure returned by its associated <ph id="ph3">&lt;xref:System.Threading.ExecutionContext.SuppressFlow%2A&gt;</ph> method.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Threading.AsyncFlowControl.Undo%2A&gt;</ph> Метод должен вызываться только для <ph id="ph2">&lt;xref:System.Threading.AsyncFlowControl&gt;</ph> структуры, возвращенный связанный с ним <ph id="ph3">&lt;xref:System.Threading.ExecutionContext.SuppressFlow%2A&gt;</ph> метод.</target>       </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve" uid="M:System.Threading.AsyncFlowControl.Undo">
          <source>The <ph id="ph1">&lt;see cref="T:System.Threading.AsyncFlowControl" /&gt;</ph> structure is not used on the thread where it was created.</source>
          <target state="translated">Структура <ph id="ph1">&lt;see cref="T:System.Threading.AsyncFlowControl" /&gt;</ph> не используется в потоке, в котором она была создана.</target>       </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve" uid="M:System.Threading.AsyncFlowControl.Undo">
          <source>-or-</source>
          <target state="translated">- или -</target>       </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve" uid="M:System.Threading.AsyncFlowControl.Undo">
          <source>The <ph id="ph1">&lt;see cref="T:System.Threading.AsyncFlowControl" /&gt;</ph> structure has already been used to call <ph id="ph2">&lt;see cref="M:System.Threading.AsyncFlowControl.Dispose" /&gt;</ph> or <ph id="ph3">&lt;see cref="M:System.Threading.AsyncFlowControl.Undo" /&gt;</ph>.</source>
          <target state="translated">Структура <ph id="ph1">&lt;see cref="T:System.Threading.AsyncFlowControl" /&gt;</ph> уже использовалась для вызова <ph id="ph2">&lt;see cref="M:System.Threading.AsyncFlowControl.Dispose" /&gt;</ph> или <ph id="ph3">&lt;see cref="M:System.Threading.AsyncFlowControl.Undo" /&gt;</ph>.</target>       </trans-unit>
      </group>
    </body>
  </file>
</xliff>