<Type Name="AutoResetEvent" FullName="System.Threading.AutoResetEvent">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="7526a17165511a13b7213d3a9d257c6304cccb3b" />
    <Meta Name="ms.sourcegitcommit" Value="6a0b904069161bbaec4ffd02aa7d9cf38c61e72e" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="ru-RU" />
    <Meta Name="ms.lasthandoff" Value="06/24/2018" />
    <Meta Name="ms.locfileid" Value="36407156" />
  </Metadata>
  <TypeSignature Language="C#" Value="public sealed class AutoResetEvent : System.Threading.EventWaitHandle" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed beforefieldinit AutoResetEvent extends System.Threading.EventWaitHandle" />
  <TypeSignature Language="DocId" Value="T:System.Threading.AutoResetEvent" />
  <TypeSignature Language="VB.NET" Value="Public NotInheritable Class AutoResetEvent&#xA;Inherits EventWaitHandle" />
  <TypeSignature Language="C++ CLI" Value="public ref class AutoResetEvent sealed : System::Threading::EventWaitHandle" />
  <TypeSignature Language="F#" Value="type AutoResetEvent = class&#xA;    inherit EventWaitHandle" />
  <AssemblyInfo>
    <AssemblyName>System.Threading</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.10.0</AssemblyVersion>
    <AssemblyVersion>4.1.0.0</AssemblyVersion>
    <AssemblyVersion>4.1.1.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>mscorlib</AssemblyName>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Threading.EventWaitHandle</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute>
      <AttributeName>System.Runtime.InteropServices.ComVisible(true)</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>Уведомляет ожидающий поток о том, что произошло событие. Этот класс не наследуется.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 `AutoResetEvent` позволяет потокам взаимодействовать друг с другом путем передачи сигналов. Как правило этот класс используются, когда потоки требуется монопольный доступ к ресурсу.  
  
> [!IMPORTANT]
>  Этот тип реализует <xref:System.IDisposable> интерфейса. После завершения с помощью типа следует освободить его прямо или косвенно. Для удаления типа непосредственно вызвать его <xref:System.IDisposable.Dispose%2A> метод в `try` / `catch` блока. Чтобы удалить ее косвенно, использовать языковой конструкции, такие как `using` (в C#) или `Using` (в Visual Basic). Дополнительные сведения см. в разделе «С помощью объекта, реализует интерфейс IDisposable» в <xref:System.IDisposable> разделе интерфейса.  
  
 Поток ожидает сигнала, вызвав <xref:System.Threading.WaitHandle.WaitOne%2A> на `AutoResetEvent`. Если `AutoResetEvent` в несигнальное состояние, поток будет заблокирован, ожидание потока, который в текущий момент контролирующего ресурс указывают, что ресурс доступен путем вызова <xref:System.Threading.EventWaitHandle.Set%2A>.  
  
 Вызов `Set` сигналы `AutoResetEvent` освободить ожидающий поток. `AutoResetEvent` остается в сигнальном состоянии до одного ожидающего потока освобождается, а затем возвращает несигнальное состояние. Если нет ожидающих потоков, состояние остается сигнальным бесконечно.  
  
 Если поток выполняет вызов <xref:System.Threading.WaitHandle.WaitOne%2A> при <xref:System.Threading.AutoResetEvent> находится в состоянии получения сигнала, не блокирует поток. <xref:System.Threading.AutoResetEvent> Немедленно освобождает поток и возвращает несигнальное состояние.  
  
> [!IMPORTANT]
>  Нет никакой гарантии, каждый вызов <xref:System.Threading.EventWaitHandle.Set%2A> метод освобождает поток. Если два вызова находятся слишком близко друг к другу, что второй вызов происходит до выпустила потока, освобождается только один поток. Это, как если бы второй вызов не произошло. Кроме того Если <xref:System.Threading.EventWaitHandle.Set%2A> вызывается, когда нет ожидающих потоков и <xref:System.Threading.AutoResetEvent> уже есть сигнал, вызов не оказывает влияния.  
  
 Можно управлять начальное состояние `AutoResetEvent` , передав конструктору логическое значение: `true` Если начальное состояние сигнальное и `false` в противном случае.  
  
 `AutoResetEvent` Можно также использовать с `static` <xref:System.Threading.WaitHandle.WaitAll%2A> и <xref:System.Threading.WaitHandle.WaitAny%2A> методы.  
  
 Дополнительные сведения о механизмах синхронизации потоков см. в разделе [AutoResetEvent](~/docs/standard/threading/autoresetevent.md) в основной документации.  
  
 Начиная с .NET Framework версии 2.0, <xref:System.Threading.AutoResetEvent> является производным от нового <xref:System.Threading.EventWaitHandle> класса. <xref:System.Threading.AutoResetEvent> Функционально эквивалентен <xref:System.Threading.EventWaitHandle> с <xref:System.Threading.EventResetMode.AutoReset?displayProperty=nameWithType>.  
  
> [!NOTE]
>  В отличие от <xref:System.Threading.AutoResetEvent> класса <xref:System.Threading.EventWaitHandle> класс предоставляет доступ к под названием system события синхронизации.  
  
   
  
## Examples  
 В следующем примере показано, как использовать <xref:System.Threading.AutoResetEvent> освобождать одному потоку за раз, вызывая <xref:System.Threading.EventWaitHandle.Set%2A> метод (базовый класс) каждый раз пользователь нажимает **ввод** ключа. В примере запускается три потоки, которые ожидают <xref:System.Threading.AutoResetEvent> , созданного в сигнальное состояние. Первый поток освобожден, немедленно, потому что <xref:System.Threading.AutoResetEvent> уже находится в состоянии получения сигнала. В результате <xref:System.Threading.AutoResetEvent> в несигнальное состояние, чтобы последующие потоки блокируются. Заблокированных потоков не освобождаются, пока пользователь отпускает их одну во время, нажав клавишу **ввод** ключа.  
  
 После потоки освобождаются от первого <xref:System.Threading.AutoResetEvent>, они ожидают на другом <xref:System.Threading.AutoResetEvent> , созданного в несигнальное состояние. Блокировать все три потока, поэтому <xref:System.Threading.EventWaitHandle.Set%2A> метод должен вызываться три раза, чтобы освободить их все.  
  
 [!code-cpp[System.Threading.AutoResetEvent#3](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Threading.AutoResetEvent/CPP/simplerisbetter.cpp#3)]
 [!code-csharp[System.Threading.AutoResetEvent#3](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Threading.AutoResetEvent/CS/simplerisbetter.cs#3)]
 [!code-vb[System.Threading.AutoResetEvent#3](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Threading.AutoResetEvent/VB/simplerisbetter.vb#3)]  
  
 ]]></format>
    </remarks>
    <threadsafe>Этот класс является потокобезопасным.</threadsafe>
    <altmember cref="T:System.Threading.WaitHandle" />
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public AutoResetEvent (bool initialState);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(bool initialState) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.AutoResetEvent.#ctor(System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (initialState As Boolean)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; AutoResetEvent(bool initialState);" />
      <MemberSignature Language="F#" Value="new System.Threading.AutoResetEvent : bool -&gt; System.Threading.AutoResetEvent" Usage="new System.Threading.AutoResetEvent initialState" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="initialState" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="initialState">Значение <see langword="true" /> для задания начального состояния сигнальным; <see langword="false" /> для задания несигнального начального состояния.</param>
        <summary>Инициализирует новый экземпляр класса <see cref="T:System.Threading.AutoResetEvent" /> логическим значением, показывающим наличие сигнального состояния.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 В следующем примере используется <xref:System.Threading.AutoResetEvent> для синхронизации действий потоков два. Первый поток, являющийся потока приложения, выполняет `Main`. Записывает значения защищенного ресурса, который является `static` (`Shared` в Visual Basic) поля с именем `number`. Второй поток выполняет статический `ThreadProc` метод, который считывает значения, записанные `Main`.  
  
 `ThreadProc` Метод ожидает <xref:System.Threading.AutoResetEvent>. Когда `Main` вызовы <xref:System.Threading.EventWaitHandle.Set%2A> метод <xref:System.Threading.AutoResetEvent>, `ThreadProc` метод считывает одно значение. <xref:System.Threading.AutoResetEvent> Немедленно сбрасывается, поэтому `ThreadProc` метод ожидает еще раз.  
  
 Логика программы гарантирует, что `ThreadProc` метод никогда не считывает значение два раза. Он не гарантирует, что `ThreadProc` метод считывает все значения, созданные `Main`. Такой гарантии потребует секунды <xref:System.Threading.AutoResetEvent> блокировки.  
  
 После каждой операции записи `Main` дает путем вызова <xref:System.Threading.Thread.Sleep%2A?displayProperty=nameWithType> метод, чтобы предоставить возможность выполнения другого потока. В противном случае — на компьютере с одним процессором `Main` написать много значений между любыми двумя операции чтения.  
  
 [!code-cpp[System.Threading.AutoResetEvent#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Threading.AutoResetEvent/CPP/class1.cpp#1)]
 [!code-csharp[System.Threading.AutoResetEvent#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Threading.AutoResetEvent/CS/class1.cs#1)]
 [!code-vb[System.Threading.AutoResetEvent#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Threading.AutoResetEvent/VB/class1.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Threading.WaitHandle" />
      </Docs>
    </Member>
  </Members>
</Type>