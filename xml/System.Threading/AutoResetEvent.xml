<Type Name="AutoResetEvent" FullName="System.Threading.AutoResetEvent">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="c79efb880d15907bddea1d039a240af1ebfce8c7" />
    <Meta Name="ms.sourcegitcommit" Value="5a49536d99d2d0b54e4cb7280870903e043272df" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="ru-RU" />
    <Meta Name="ms.lasthandoff" Value="07/03/2018" />
    <Meta Name="ms.locfileid" Value="37609138" />
  </Metadata>
  <TypeSignature Language="C#" Value="public sealed class AutoResetEvent : System.Threading.EventWaitHandle" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed beforefieldinit AutoResetEvent extends System.Threading.EventWaitHandle" />
  <TypeSignature Language="DocId" Value="T:System.Threading.AutoResetEvent" />
  <TypeSignature Language="VB.NET" Value="Public NotInheritable Class AutoResetEvent&#xA;Inherits EventWaitHandle" />
  <TypeSignature Language="C++ CLI" Value="public ref class AutoResetEvent sealed : System::Threading::EventWaitHandle" />
  <TypeSignature Language="F#" Value="type AutoResetEvent = class&#xA;    inherit EventWaitHandle" />
  <AssemblyInfo>
    <AssemblyName>System.Threading</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.10.0</AssemblyVersion>
    <AssemblyVersion>4.1.0.0</AssemblyVersion>
    <AssemblyVersion>4.1.1.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>mscorlib</AssemblyName>
    <AssemblyVersion>1.0.5000.0</AssemblyVersion>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Threading.EventWaitHandle</BaseTypeName>
    <BaseTypeName FrameworkAlternate="netframework-1.1">System.Threading.WaitHandle</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute>
      <AttributeName>System.Runtime.InteropServices.ComVisible(true)</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>Уведомляет ожидающий поток о том, что произошло событие. Этот класс не наследуется.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 `AutoResetEvent` позволяет потокам взаимодействовать друг с другом, обмениваясь сигналами. Обычно этот класс используется, когда потоков требуется монопольный доступ к ресурсу.  
  
> [!IMPORTANT]
>  Этот тип реализует <xref:System.IDisposable> интерфейс. Когда вы закончите, используя тип, следует освободить его прямо или косвенно. Чтобы удалить тип напрямую, вызовите его <xref:System.IDisposable.Dispose%2A> метод в `try` / `catch` блока. Чтобы избавиться от его косвенно, используйте языковой конструкции, такие как `using` (в C#) или `Using` (в Visual Basic). Дополнительные сведения см. в разделе «С помощью объекта, реализует IDisposable» <xref:System.IDisposable> разделу интерфейса.  
  
 Поток ожидает сигнала, вызвав <xref:System.Threading.WaitHandle.WaitOne%2A> на `AutoResetEvent`. Если `AutoResetEvent` в сигнальное состояние, поток блокируется, в состоянии ожидания потока, который в настоящее время управляет ресурсом информировать, что ресурс доступен, вызвав <xref:System.Threading.EventWaitHandle.Set%2A>.  
  
 Вызов `Set` сигналы `AutoResetEvent` освободить ожидающий поток. `AutoResetEvent` остается в сигнальном состоянии до одиночного потока ожидания освобождается и затем возвращается в состояние отсутствия сигнала. Если нет ожидающих потоков, состояние остается сигнальным бесконечно.  
  
 Если поток вызывает <xref:System.Threading.WaitHandle.WaitOne%2A> хотя <xref:System.Threading.AutoResetEvent> находится в сигнальном состоянии, не блокирует поток. <xref:System.Threading.AutoResetEvent> Немедленно освобождает поток и возвращается в состояние отсутствия сигнала.  
  
> [!IMPORTANT]
>  Нет никакой гарантии, при каждом вызове <xref:System.Threading.EventWaitHandle.Set%2A> метод выпустит потока. Если два вызова, слишком близко друг к другу, что второй вызов происходит до выпустила поток освобождается только один поток. Это не так, как если произошел второй вызов. Кроме того Если <xref:System.Threading.EventWaitHandle.Set%2A> вызывается, когда нет ожидающих потоков и <xref:System.Threading.AutoResetEvent> уже есть сигнал, вызов не оказывает влияния.  
  
 Можно управлять начальное состояние `AutoResetEvent` , передав конструктору логическое значение: `true` Если начальное состояние переводится в сигнальное состояние и `false` в противном случае.  
  
 `AutoResetEvent` Можно также использовать с `static` <xref:System.Threading.WaitHandle.WaitAll%2A> и <xref:System.Threading.WaitHandle.WaitAny%2A> методы.  
  
 Дополнительные сведения о механизмах синхронизации потоков, см. в разделе [AutoResetEvent](~/docs/standard/threading/autoresetevent.md) в основной документации.  
  
 Начиная с .NET Framework версии 2.0, <xref:System.Threading.AutoResetEvent> является производным от нового <xref:System.Threading.EventWaitHandle> класса. <xref:System.Threading.AutoResetEvent> Функционально эквивалентен <xref:System.Threading.EventWaitHandle> созданные с помощью <xref:System.Threading.EventResetMode.AutoReset?displayProperty=nameWithType>.  
  
> [!NOTE]
>  В отличие от <xref:System.Threading.AutoResetEvent> класса <xref:System.Threading.EventWaitHandle> класс предоставляет доступ к именованные системные события синхронизации.  
  
   
  
## Examples  
 В следующем примере показано, как использовать <xref:System.Threading.AutoResetEvent> освободить один поток за раз, путем вызова <xref:System.Threading.EventWaitHandle.Set%2A> метода (в базовом классе каждый) раз пользователь нажимает клавишу **ввод** ключ. В примере запускается три потоки, которые ожидают <xref:System.Threading.AutoResetEvent> , созданного в сигнальном состоянии. Первый поток освобождается немедленно, поскольку <xref:System.Threading.AutoResetEvent> уже находится в сигнальном состоянии. Эта функция сбрасывает <xref:System.Threading.AutoResetEvent> в сигнальное состояние, чтобы последующие потоки блокируются. Заблокированные потоки не освобождаются, пока пользователь отпускает их одну за раз, нажав клавишу **ввод** ключ.  
  
 После потоки освобождаются от первого <xref:System.Threading.AutoResetEvent>, они ждут на другом <xref:System.Threading.AutoResetEvent> , созданного в сигнальное состояние. Заблокировать все три потока, поэтому <xref:System.Threading.EventWaitHandle.Set%2A> метод должен вызываться три раза, чтобы освободить их все.  
  
 [!code-cpp[System.Threading.AutoResetEvent#3](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Threading.AutoResetEvent/CPP/simplerisbetter.cpp#3)]
 [!code-csharp[System.Threading.AutoResetEvent#3](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Threading.AutoResetEvent/CS/simplerisbetter.cs#3)]
 [!code-vb[System.Threading.AutoResetEvent#3](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Threading.AutoResetEvent/VB/simplerisbetter.vb#3)]  
  
 ]]></format>
    </remarks>
    <threadsafe>Этот класс является потокобезопасным.</threadsafe>
    <altmember cref="T:System.Threading.WaitHandle" />
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public AutoResetEvent (bool initialState);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(bool initialState) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.AutoResetEvent.#ctor(System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (initialState As Boolean)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; AutoResetEvent(bool initialState);" />
      <MemberSignature Language="F#" Value="new System.Threading.AutoResetEvent : bool -&gt; System.Threading.AutoResetEvent" Usage="new System.Threading.AutoResetEvent initialState" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="initialState" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="initialState">Значение <see langword="true" /> для задания начального состояния сигнальным; <see langword="false" /> для задания несигнального начального состояния.</param>
        <summary>Инициализирует новый экземпляр класса <see cref="T:System.Threading.AutoResetEvent" /> логическим значением, показывающим наличие сигнального состояния.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 В следующем примере используется <xref:System.Threading.AutoResetEvent> для синхронизации действий потоков два. Первый поток, являющийся потока приложения, выполняет `Main`. Он записывает значения к защищенному ресурсу, который является `static` (`Shared` в Visual Basic) поле с именем `number`. Второй поток выполняет статический `ThreadProc` метод, который считывает значения, записанные `Main`.  
  
 `ThreadProc` Метод ожидает <xref:System.Threading.AutoResetEvent>. Когда `Main` вызовы <xref:System.Threading.EventWaitHandle.Set%2A> метод <xref:System.Threading.AutoResetEvent>, `ThreadProc` метод считывает одно значение. <xref:System.Threading.AutoResetEvent> Немедленно сбрасывается, поэтому `ThreadProc` метод ожидает еще раз.  
  
 Логику программы гарантирует, что `ThreadProc` метод никогда не считывает значение два раза. Он не гарантирует, что `ThreadProc` метод считывает все значения, написанной `Main`. Такой гарантии потребует секунды <xref:System.Threading.AutoResetEvent> блокировки.  
  
 После каждой операции записи `Main` дает путем вызова <xref:System.Threading.Thread.Sleep%2A?displayProperty=nameWithType> метод, чтобы предоставить возможность выполнения второй поток. В противном случае — на однопроцессорном компьютере `Main` написать много значений между любыми двумя операций чтения.  
  
 [!code-cpp[System.Threading.AutoResetEvent#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Threading.AutoResetEvent/CPP/class1.cpp#1)]
 [!code-csharp[System.Threading.AutoResetEvent#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Threading.AutoResetEvent/CS/class1.cs#1)]
 [!code-vb[System.Threading.AutoResetEvent#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Threading.AutoResetEvent/VB/class1.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Threading.WaitHandle" />
      </Docs>
    </Member>
    <Member MemberName="Reset">
      <MemberSignature Language="C#" Value="public bool Reset ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool Reset() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.AutoResetEvent.Reset" />
      <MemberSignature Language="VB.NET" Value="Public Function Reset () As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool Reset();" />
      <MemberSignature Language="F#" Value="member this.Reset : unit -&gt; bool" Usage="autoResetEvent.Reset " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Set">
      <MemberSignature Language="C#" Value="public bool Set ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool Set() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.AutoResetEvent.Set" />
      <MemberSignature Language="VB.NET" Value="Public Function Set () As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool Set();" />
      <MemberSignature Language="F#" Value="member this.Set : unit -&gt; bool" Usage="autoResetEvent.Set " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
  </Members>
</Type>