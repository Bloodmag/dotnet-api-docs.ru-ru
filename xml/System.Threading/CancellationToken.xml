<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" version="1.2" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="CancellationToken.xml" source-language="en-US" target-language="ru-RU">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-b857fe3" tool-company="Microsoft" />
      <xliffext:skl_file_name xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">2eccf4de-4b1c-4706-8cb3-f46682ccfb7219b22c264e9da195fc5b91af5de567dc3b839021.skl</xliffext:skl_file_name>
      <xliffext:version xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">1.2</xliffext:version>
      <xliffext:ms.openlocfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">19b22c264e9da195fc5b91af5de567dc3b839021</xliffext:ms.openlocfilehash>
      <xliffext:ms.sourcegitcommit xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">b15b8cf0f6dbc1504057c88969d9ef4b790891fe</xliffext:ms.sourcegitcommit>
      <xliffext:ms.lasthandoff xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">05/11/2018</xliffext:ms.lasthandoff>
      <xliffext:moniker_ids xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">netcore-1.0,netcore-1.1,netcore-2.0,netcore-2.1,netframework-4.5.1,netframework-4.5.2,netframework-4.5,netframework-4.6.1,netframework-4.6.2,netframework-4.6,netframework-4.7.1,netframework-4.7.2,netframework-4.7,netstandard-1.0,netstandard-1.1,netstandard-1.2,netstandard-1.3,netstandard-1.4,netstandard-1.6,netstandard-2.0,xamarinandroid-7.1,xamarinios-10.8,xamarinmac-3.0</xliffext:moniker_ids>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve" uid="T:System.Threading.CancellationToken">
          <source>Propagates notification that operations should be canceled.</source>
          <target state="translated">Распространяет уведомление о том, что операции следует отменить.</target>       </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Threading.CancellationToken">
          <source>A <ph id="ph1">&lt;xref:System.Threading.CancellationToken&gt;</ph> enables cooperative cancellation between threads, thread pool work items, or <ph id="ph2">&lt;xref:System.Threading.Tasks.Task&gt;</ph> objects.</source>
          <target state="translated">Объект <ph id="ph1">&lt;xref:System.Threading.CancellationToken&gt;</ph> обеспечивает возможность согласованной отмены между потоками, рабочие элементы пула потоков или <ph id="ph2">&lt;xref:System.Threading.Tasks.Task&gt;</ph> объектов.</target>       </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Threading.CancellationToken">
          <source>You create a cancellation token by instantiating a <ph id="ph1">&lt;xref:System.Threading.CancellationTokenSource&gt;</ph> object, which manages cancellation tokens retrieved from its <ph id="ph2">&lt;xref:System.Threading.CancellationTokenSource.Token%2A?displayProperty=nameWithType&gt;</ph> property.</source>
          <target state="translated">Создать токен отмены, создав <ph id="ph1">&lt;xref:System.Threading.CancellationTokenSource&gt;</ph> получить объект, который управляет токены отмены с его <ph id="ph2">&lt;xref:System.Threading.CancellationTokenSource.Token%2A?displayProperty=nameWithType&gt;</ph> свойство.</target>       </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Threading.CancellationToken">
          <source>You then  pass the cancellation token to any number of threads, tasks, or operations that should receive notice of cancellation.</source>
          <target state="translated">Затем передать токен отмены с любым количеством потоков, задачи и операции, которые должны получать уведомления об отмене.</target>       </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Threading.CancellationToken">
          <source>The token cannot be used to initiate cancellation.</source>
          <target state="translated">Токен не может использоваться, чтобы инициировать отмену.</target>       </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Threading.CancellationToken">
          <source>When the owning object calls <ph id="ph1">&lt;xref:System.Threading.CancellationTokenSource.Cancel%2A?displayProperty=nameWithType&gt;</ph>, the <ph id="ph2">&lt;xref:System.Threading.CancellationToken.IsCancellationRequested%2A&gt;</ph> property on every copy of the cancellation token is set to <ph id="ph3">`true`</ph>.</source>
          <target state="translated">При вызове метода объект-владелец <ph id="ph1">&lt;xref:System.Threading.CancellationTokenSource.Cancel%2A?displayProperty=nameWithType&gt;</ph>, <ph id="ph2">&lt;xref:System.Threading.CancellationToken.IsCancellationRequested%2A&gt;</ph> в каждом экземпляре токена отмены свойству <ph id="ph3">`true`</ph>.</target>       </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Threading.CancellationToken">
          <source>The objects that receive the notification can respond in whatever manner is appropriate.</source>
          <target state="translated">Объекты, которые получают уведомление может отреагировать любым способом, подходящим.</target>       </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Threading.CancellationToken">
          <source>For more information and code examples see <bpt id="p1">[</bpt>Cancellation in Managed Threads<ept id="p1">](~/docs/standard/threading/cancellation-in-managed-threads.md)</ept>.</source>
          <target state="translated">Дополнительные сведения и примеры кода см. <bpt id="p1">[</bpt>Отмена в управляемых потоках<ept id="p1">](~/docs/standard/threading/cancellation-in-managed-threads.md)</ept>.</target>       </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Threading.CancellationToken">
          <source>The following example uses a random number generator to emulate a data collection application that reads 10 integral values from eleven different instruments.</source>
          <target state="translated">В следующем примере генератора случайных чисел для эмуляции приложение коллекции данных, которое считывает из одиннадцать различные инструменты 10 целочисленных значений.</target>       </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Threading.CancellationToken">
          <source>A value of zero indicates that the measurement has failed for one instrument, in which case the operation should be cancelled and no overall mean should be computed.</source>
          <target state="translated">Нулевое значение указывает на сбой измерение для одного инструмента, в этом случае отмены операции и не общее среднее значение должно быть вычислено.</target>       </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Threading.CancellationToken">
          <source>To handle the possible cancellation of the operation, the example instantiates a <ph id="ph1">&lt;xref:System.Threading.CancellationTokenSource&gt;</ph> object that generates a cancellation token which is passed to a <ph id="ph2">&lt;xref:System.Threading.Tasks.TaskFactory&gt;</ph> object.</source>
          <target state="translated">Для обработки возможных Отмена операции, в примере создается экземпляр <ph id="ph1">&lt;xref:System.Threading.CancellationTokenSource&gt;</ph> объект, который создает токен отмены, который передается <ph id="ph2">&lt;xref:System.Threading.Tasks.TaskFactory&gt;</ph> объекта.</target>       </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Threading.CancellationToken">
          <source>The <ph id="ph1">&lt;xref:System.Threading.Tasks.TaskFactory&gt;</ph> object in turn passes the cancellation token to each of the tasks responsible for collecting readings for a particular instrument.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Threading.Tasks.TaskFactory&gt;</ph> Объект, в свою очередь передает токен отмены для каждой из задач отвечать за сбор показания для конкретного инструмента.</target>       </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Threading.CancellationToken">
          <source>The <ph id="ph1">&lt;xref:System.Threading.Tasks.TaskFactory.ContinueWhenAll%60%602%28System.Threading.Tasks.Task%7B%60%600%7D%5B%5D%2CSystem.Func%7BSystem.Threading.Tasks.Task%7B%60%600%7D%5B%5D%2C%60%601%7D%2CSystem.Threading.CancellationToken%29?displayProperty=nameWithType&gt;</ph> method is called to ensure that the mean is computed only after all readings have been gathered successfully.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Threading.Tasks.TaskFactory.ContinueWhenAll%60%602%28System.Threading.Tasks.Task%7B%60%600%7D%5B%5D%2CSystem.Func%7BSystem.Threading.Tasks.Task%7B%60%600%7D%5B%5D%2C%60%601%7D%2CSystem.Threading.CancellationToken%29?displayProperty=nameWithType&gt;</ph> Метод вызывается, чтобы убедиться, что среднее значение вычисляется только в том случае, если все показания были собраны успешно.</target>       </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Threading.CancellationToken">
          <source>If a task has not because it has been cancelled, the call to the <ph id="ph1">&lt;xref:System.Threading.Tasks.TaskFactory.ContinueWhenAll%2A?displayProperty=nameWithType&gt;</ph> method throws an exception.</source>
          <target state="translated">Если задача имеет не так, как оно было отменено, вызов <ph id="ph1">&lt;xref:System.Threading.Tasks.TaskFactory.ContinueWhenAll%2A?displayProperty=nameWithType&gt;</ph> метод создает исключение.</target>       </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Threading.CancellationToken">
          <source>All public and protected members of <ph id="ph1">&lt;see cref="T:System.Threading.CancellationToken" /&gt;</ph> are thread-safe and may be used concurrently from multiple threads.</source>
          <target state="translated">Все открытые и защищенные члены <ph id="ph1">&lt;see cref="T:System.Threading.CancellationToken" /&gt;</ph> являются потокобезопасными и могут быть использованы одновременно из нескольких потоков.</target>       </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve" uid="M:System.Threading.CancellationToken.#ctor(System.Boolean)">
          <source>The canceled state for the token.</source>
          <target state="translated">Состояние отмены для токена.</target>       </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve" uid="M:System.Threading.CancellationToken.#ctor(System.Boolean)">
          <source>Initializes the <ph id="ph1">&lt;see cref="T:System.Threading.CancellationToken" /&gt;</ph>.</source>
          <target state="translated">Инициализирует объект <ph id="ph1">&lt;see cref="T:System.Threading.CancellationToken" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.CancellationToken.#ctor(System.Boolean)">
          <source>Tokens created with this constructor will remain in the canceled state specified by the <ph id="ph1">`canceled`</ph> parameter.</source>
          <target state="translated">Токены, созданные с помощью этого конструктора остается в отмененном состоянии, указанном <ph id="ph1">`canceled`</ph> параметра.</target>       </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.CancellationToken.#ctor(System.Boolean)">
          <source>If <ph id="ph1">`canceled`</ph> is <ph id="ph2">`false`</ph>, both <ph id="ph3">&lt;xref:System.Threading.CancellationToken.CanBeCanceled%2A&gt;</ph> and <ph id="ph4">&lt;xref:System.Threading.CancellationToken.IsCancellationRequested%2A&gt;</ph> will be <ph id="ph5">`false`</ph>.</source>
          <target state="translated">Если <ph id="ph1">`canceled`</ph> — <ph id="ph2">`false`</ph>, оба <ph id="ph3">&lt;xref:System.Threading.CancellationToken.CanBeCanceled%2A&gt;</ph> и <ph id="ph4">&lt;xref:System.Threading.CancellationToken.IsCancellationRequested%2A&gt;</ph> будет <ph id="ph5">`false`</ph>.</target>       </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.CancellationToken.#ctor(System.Boolean)">
          <source>If <ph id="ph1">`canceled`</ph> is <ph id="ph2">`true`</ph>, both <ph id="ph3">&lt;xref:System.Threading.CancellationToken.CanBeCanceled%2A&gt;</ph> and <ph id="ph4">&lt;xref:System.Threading.CancellationToken.IsCancellationRequested%2A&gt;</ph> will be <ph id="ph5">`true`</ph>.</source>
          <target state="translated">Если <ph id="ph1">`canceled`</ph> — <ph id="ph2">`true`</ph>, оба <ph id="ph3">&lt;xref:System.Threading.CancellationToken.CanBeCanceled%2A&gt;</ph> и <ph id="ph4">&lt;xref:System.Threading.CancellationToken.IsCancellationRequested%2A&gt;</ph> будет <ph id="ph5">`true`</ph>.</target>       </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve" uid="P:System.Threading.CancellationToken.CanBeCanceled">
          <source>Gets whether this token is capable of being in the canceled state.</source>
          <target state="translated">Возвращает значение, указывающее, может ли данный токен находиться в отмененном состоянии.</target>       </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Threading.CancellationToken.CanBeCanceled">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph> if this token is capable of being in the canceled state; otherwise, <ph id="ph2">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated">Значение <ph id="ph1">&lt;see langword="true" /&gt;</ph>, если данный токен может быть в отмененном состоянии; в противном случае — значение <ph id="ph2">&lt;see langword="false" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Threading.CancellationToken.CanBeCanceled">
          <source>If <ph id="ph1">&lt;xref:System.Threading.CancellationToken.CanBeCanceled%2A&gt;</ph> returns <ph id="ph2">`false`</ph>, it is guaranteed that the token will never transition into a canceled state, meaning that <ph id="ph3">&lt;xref:System.Threading.CancellationToken.IsCancellationRequested%2A&gt;</ph> will never return <ph id="ph4">`true`</ph>.</source>
          <target state="translated">Если <ph id="ph1">&lt;xref:System.Threading.CancellationToken.CanBeCanceled%2A&gt;</ph> возвращает <ph id="ph2">`false`</ph>, это гарантирует, что маркер никогда не перейдут в отмененном состоянии, это значит, что <ph id="ph3">&lt;xref:System.Threading.CancellationToken.IsCancellationRequested%2A&gt;</ph> никогда не будут возвращать <ph id="ph4">`true`</ph>.</target>       </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Threading.CancellationToken.CanBeCanceled">
          <source>A cancellation token that cannot be canceled is returned by the static <ph id="ph1">&lt;xref:System.Threading.CancellationToken.None%2A?displayProperty=nameWithType&gt;</ph> property.</source>
          <target state="translated">Токен отмены, который не может быть отменено, возвращаемое статическим <ph id="ph1">&lt;xref:System.Threading.CancellationToken.None%2A?displayProperty=nameWithType&gt;</ph> свойство.</target>       </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Threading.CancellationToken.CanBeCanceled">
          <source>You can optionally use this property to determine whether a cancellation token can be canceled before examing the value of the <ph id="ph1">&lt;xref:System.Threading.CancellationToken.IsCancellationRequested%2A&gt;</ph> property to determine whether it has been canceled.</source>
          <target state="translated">При необходимости можно использовать это свойство для определения, является ли токен отмены, который может быть отменен до проверке значение <ph id="ph1">&lt;xref:System.Threading.CancellationToken.IsCancellationRequested%2A&gt;</ph> свойства, чтобы определить, является ли оно было отменено.</target>       </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve" uid="T:System.Threading.CancellationToken">
          <source>Determines whether the current <ph id="ph1">&lt;see cref="T:System.Threading.CancellationToken" /&gt;</ph> instance is equal to the specified token.</source>
          <target state="translated">Определяет, равен ли текущий экземпляр <ph id="ph1">&lt;see cref="T:System.Threading.CancellationToken" /&gt;</ph> заданному токену.</target>       </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve" uid="M:System.Threading.CancellationToken.Equals(System.Object)">
          <source>The other object to compare with this instance.</source>
          <target state="translated">Другой объект, сравниваемый с данным экземпляром.</target>       </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve" uid="M:System.Threading.CancellationToken.Equals(System.Object)">
          <source>Determines whether the current <ph id="ph1">&lt;see cref="T:System.Threading.CancellationToken" /&gt;</ph> instance is equal to the specified <ph id="ph2">&lt;see cref="T:System.Object" /&gt;</ph>.</source>
          <target state="translated">Определяет, равен ли текущий экземпляр <ph id="ph1">&lt;see cref="T:System.Threading.CancellationToken" /&gt;</ph> заданному объекту <ph id="ph2">&lt;see cref="T:System.Object" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve" uid="M:System.Threading.CancellationToken.Equals(System.Object)">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph> if <ph id="ph2">&lt;paramref name="other" /&gt;</ph> is a <ph id="ph3">&lt;see cref="T:System.Threading.CancellationToken" /&gt;</ph> and if the two instances are equal; otherwise, <ph id="ph4">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated">Значение <ph id="ph1">&lt;see langword="true" /&gt;</ph>, если параметр является <ph id="ph2">&lt;paramref name="other" /&gt;</ph> имеет значение <ph id="ph3">&lt;see cref="T:System.Threading.CancellationToken" /&gt;</ph>, и если два эти экземпляра равны; в противном случае — значение <ph id="ph4">&lt;see langword="false" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve" uid="M:System.Threading.CancellationToken.Equals(System.Object)">
          <source>See the Remarks section for more information.</source>
          <target state="translated">Дополнительные сведения см. в разделе "Примечания".</target>       </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.CancellationToken.Equals(System.Object)">
          <source>Two cancellation tokens are equal if any one of the following conditions is true:</source>
          <target state="translated">Два токена отмены равны, если выполняется любое из следующих условий:</target>       </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.CancellationToken.Equals(System.Object)">
          <source>They are associated with the same <ph id="ph1">&lt;xref:System.Threading.CancellationTokenSource&gt;</ph>.</source>
          <target state="translated">Они связаны с тем же <ph id="ph1">&lt;xref:System.Threading.CancellationTokenSource&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.CancellationToken.Equals(System.Object)">
          <source>They were both constructed from public <ph id="ph1">&lt;xref:System.Threading.CancellationToken&gt;</ph> constructors, and their <ph id="ph2">&lt;xref:System.Threading.CancellationToken.IsCancellationRequested?displayProperty=nameWithType&gt;</ph> values are equal.</source>
          <target state="translated">Оба они были созданы из открытых <ph id="ph1">&lt;xref:System.Threading.CancellationToken&gt;</ph> конструкторы и их <ph id="ph2">&lt;xref:System.Threading.CancellationToken.IsCancellationRequested?displayProperty=nameWithType&gt;</ph> значения равны.</target>       </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.CancellationToken.Equals(System.Object)">
          <source>The value of both cancellation tokens is <ph id="ph1">&lt;xref:System.Threading.CancellationToken.None?displayProperty=nameWithType&gt;</ph>.</source>
          <target state="translated">Имеет значение обоих токены отмены <ph id="ph1">&lt;xref:System.Threading.CancellationToken.None?displayProperty=nameWithType&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve" uid="M:System.Threading.CancellationToken.Equals(System.Object)">
          <source>An associated <ph id="ph1">&lt;see cref="T:System.Threading.CancellationTokenSource" /&gt;</ph> has been disposed.</source>
          <target state="translated">Связанный объект <ph id="ph1">&lt;see cref="T:System.Threading.CancellationTokenSource" /&gt;</ph> был удален.</target>       </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve" uid="M:System.Threading.CancellationToken.Equals(System.Threading.CancellationToken)">
          <source>The other <ph id="ph1">&lt;see cref="T:System.Threading.CancellationToken" /&gt;</ph> to compare with this instance.</source>
          <target state="translated">Другой объект <ph id="ph1">&lt;see cref="T:System.Threading.CancellationToken" /&gt;</ph> для сравнения с данным экземпляром.</target>       </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve" uid="M:System.Threading.CancellationToken.Equals(System.Threading.CancellationToken)">
          <source>Determines whether the current <ph id="ph1">&lt;see cref="T:System.Threading.CancellationToken" /&gt;</ph> instance is equal to the specified token.</source>
          <target state="translated">Определяет, равен ли текущий экземпляр <ph id="ph1">&lt;see cref="T:System.Threading.CancellationToken" /&gt;</ph> заданному токену.</target>       </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve" uid="M:System.Threading.CancellationToken.Equals(System.Threading.CancellationToken)">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph> if the instances are equal; otherwise, <ph id="ph2">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;see langword="true" /&gt;</ph>, если экземпляры равны; в противном случае — <ph id="ph2">&lt;see langword="false" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve" uid="M:System.Threading.CancellationToken.Equals(System.Threading.CancellationToken)">
          <source>See the Remarks section for more information.</source>
          <target state="translated">Дополнительные сведения см. в разделе "Примечания".</target>       </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.CancellationToken.Equals(System.Threading.CancellationToken)">
          <source>Two cancellation tokens are equal if any one of the following conditions is true:</source>
          <target state="translated">Два токена отмены равны, если выполняется любое из следующих условий:</target>       </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.CancellationToken.Equals(System.Threading.CancellationToken)">
          <source>They are associated with the same <ph id="ph1">&lt;xref:System.Threading.CancellationTokenSource&gt;</ph>.</source>
          <target state="translated">Они связаны с тем же <ph id="ph1">&lt;xref:System.Threading.CancellationTokenSource&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.CancellationToken.Equals(System.Threading.CancellationToken)">
          <source>They were both constructed from public <ph id="ph1">&lt;xref:System.Threading.CancellationToken&gt;</ph> constructors, and their <ph id="ph2">&lt;xref:System.Threading.CancellationToken.IsCancellationRequested?displayProperty=nameWithType&gt;</ph> values are equal.</source>
          <target state="translated">Оба они были созданы из открытых <ph id="ph1">&lt;xref:System.Threading.CancellationToken&gt;</ph> конструкторы и их <ph id="ph2">&lt;xref:System.Threading.CancellationToken.IsCancellationRequested?displayProperty=nameWithType&gt;</ph> значения равны.</target>       </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.CancellationToken.Equals(System.Threading.CancellationToken)">
          <source>The value of both cancellation tokens is <ph id="ph1">&lt;xref:System.Threading.CancellationToken.None?displayProperty=nameWithType&gt;</ph>.</source>
          <target state="translated">Имеет значение обоих токены отмены <ph id="ph1">&lt;xref:System.Threading.CancellationToken.None?displayProperty=nameWithType&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve" uid="M:System.Threading.CancellationToken.GetHashCode">
          <source>Serves as a hash function for a <ph id="ph1">&lt;see cref="T:System.Threading.CancellationToken" /&gt;</ph>.</source>
          <target state="translated">Служит хэш-функцией для <ph id="ph1">&lt;see cref="T:System.Threading.CancellationToken" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve" uid="M:System.Threading.CancellationToken.GetHashCode">
          <source>A hash code for the current <ph id="ph1">&lt;see cref="T:System.Threading.CancellationToken" /&gt;</ph> instance.</source>
          <target state="translated">Хэш-код для текущего экземпляра <ph id="ph1">&lt;see cref="T:System.Threading.CancellationToken" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve" uid="P:System.Threading.CancellationToken.IsCancellationRequested">
          <source>Gets whether cancellation has been requested for this token.</source>
          <target state="translated">Возвращает значение, указывающее, есть ли для данного токена запрос на отмену.</target>       </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Threading.CancellationToken.IsCancellationRequested">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph> if cancellation has been requested for this token; otherwise, <ph id="ph2">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;see langword="true" /&gt;</ph> Если Отмена запрошена для данного маркера; в противном случае <ph id="ph2">&lt;see langword="false" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Threading.CancellationToken.IsCancellationRequested">
          <source>This property indicates whether cancellation has been requested for this token, either through the token initially being constructed in a canceled state, or through calling <ph id="ph1">&lt;xref:System.Threading.CancellationTokenSource.Cancel%2A&gt;</ph> on the token's associated <ph id="ph2">&lt;xref:System.Threading.CancellationTokenSource&gt;</ph>.</source>
          <target state="translated">Это свойство указывает, запрошена ли Отмена для этого маркера через маркер, изначально создается в отмененном состоянии, или с помощью вызова метода <ph id="ph1">&lt;xref:System.Threading.CancellationTokenSource.Cancel%2A&gt;</ph> на маркер, связанного с <ph id="ph2">&lt;xref:System.Threading.CancellationTokenSource&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Threading.CancellationToken.IsCancellationRequested">
          <source>If this property is <ph id="ph1">`true`</ph>, it only guarantees that cancellation has been requested.</source>
          <target state="translated">Если это свойство имеет <ph id="ph1">`true`</ph>, оно гарантирует только что запрошена отмена.</target>       </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Threading.CancellationToken.IsCancellationRequested">
          <source>It does not guarantee that every registered handler has finished executing, nor that cancellation requests have finished propagating to all registered handlers.</source>
          <target state="translated">Он не гарантирует, что каждый зарегистрированный обработчик завершил выполнение или что завершено распространение всем зарегистрированным обработчикам запросов отмены.</target>       </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Threading.CancellationToken.IsCancellationRequested">
          <source>Additional synchronization may be required, particularly in situations where related objects are being canceled concurrently.</source>
          <target state="translated">Дополнительная синхронизация может потребоваться, особенно в тех случаях, где связанные объекты отменяются одновременно.</target>       </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Threading.CancellationToken.IsCancellationRequested">
          <source>The following is a simple example that executes a server process until the <ph id="ph1">&lt;xref:System.Threading.CancellationToken.IsCancellationRequested%2A&gt;</ph> property returns <ph id="ph2">`true`</ph>.</source>
          <target state="translated">Ниже приведен простой пример, который выполняет процесс сервера до <ph id="ph1">&lt;xref:System.Threading.CancellationToken.IsCancellationRequested%2A&gt;</ph> возвращает <ph id="ph2">`true`</ph>.</target>       </trans-unit>
        <trans-unit id="153" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Threading.CancellationToken.IsCancellationRequested">
          <source>The example instantiates a <ph id="ph1">&lt;xref:System.Threading.CancellationTokenSource&gt;</ph> object, which controls access to the cancellation token.</source>
          <target state="translated">В примере создается экземпляр <ph id="ph1">&lt;xref:System.Threading.CancellationTokenSource&gt;</ph> объект, который управляет доступом к маркеру отмены.</target>       </trans-unit>
        <trans-unit id="154" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Threading.CancellationToken.IsCancellationRequested">
          <source>It then defines two thread procedures.</source>
          <target state="translated">Затем он определяет две процедуры потока.</target>       </trans-unit>
        <trans-unit id="155" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Threading.CancellationToken.IsCancellationRequested">
          <source>The first is defined as a lambda expression that pools the keyboard and, when the "C" key is pressed, calls <ph id="ph1">&lt;xref:System.Threading.CancellationTokenSource.Cancel%2A?displayProperty=nameWithType&gt;</ph> to set the cancellation token to the cancelled state.</source>
          <target state="translated">Первый представляет собой лямбда-выражение, которое пулов клавиатуры и, при нажатии клавиши «C», вызывает <ph id="ph1">&lt;xref:System.Threading.CancellationTokenSource.Cancel%2A?displayProperty=nameWithType&gt;</ph> присвоено состояние отмены токена отмены.</target>       </trans-unit>
        <trans-unit id="156" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Threading.CancellationToken.IsCancellationRequested">
          <source>The second is a parameterized method, <ph id="ph1">`ServerClass.StaticMethod`</ph>, that executes a loop until the <ph id="ph2">&lt;xref:System.Threading.CancellationToken.IsCancellationRequested%2A&gt;</ph> property is <ph id="ph3">`true`</ph>.</source>
          <target state="translated">Второй является методом, а параметризованный <ph id="ph1">`ServerClass.StaticMethod`</ph>, который выполняет цикл до <ph id="ph2">&lt;xref:System.Threading.CancellationToken.IsCancellationRequested%2A&gt;</ph> свойство <ph id="ph3">`true`</ph>.</target>       </trans-unit>
        <trans-unit id="157" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Threading.CancellationToken.IsCancellationRequested">
          <source>The main thread then starts the two threads and blocks until the thread that executes the <ph id="ph1">`ServerClass.StaticMethod`</ph> method terminates.</source>
          <target state="translated">Основной поток запускает два потока и блокирует до поток, который выполняет <ph id="ph1">`ServerClass.StaticMethod`</ph> метод завершает.</target>       </trans-unit>
        <trans-unit id="158" translate="yes" xml:space="preserve" uid="P:System.Threading.CancellationToken.None">
          <source>Returns an empty <ph id="ph1">&lt;see cref="T:System.Threading.CancellationToken" /&gt;</ph> value.</source>
          <target state="translated">Возвращает пустое значение <ph id="ph1">&lt;see cref="T:System.Threading.CancellationToken" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="159" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Threading.CancellationToken.None">
          <source>An empty cancellation token.</source>
          <target state="translated">Пустой токен отмены.</target>       </trans-unit>
        <trans-unit id="160" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Threading.CancellationToken.None">
          <source>The cancellation token returned by this property cannot be canceled; that is, its <ph id="ph1">&lt;xref:System.Threading.CancellationToken.CanBeCanceled%2A&gt;</ph> property is <ph id="ph2">`false`</ph>.</source>
          <target state="translated">Токен отмены, это свойство не может быть отменено; то есть его <ph id="ph1">&lt;xref:System.Threading.CancellationToken.CanBeCanceled%2A&gt;</ph> свойство <ph id="ph2">`false`</ph>.</target>       </trans-unit>
        <trans-unit id="161" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Threading.CancellationToken.None">
          <source>You can also use the C#  <bpt id="p1">[</bpt>default(CancellationToken)<ept id="p1">](~/docs/csharp/language-reference/keywords/default.md)</ept> statement to create an empty cancellation token.</source>
          <target state="translated">Можно также использовать в C# <bpt id="p1">[</bpt>default(CancellationToken)<ept id="p1">](~/docs/csharp/language-reference/keywords/default.md)</ept> инструкцию, чтобы создать пустой токен отмены.</target>       </trans-unit>
        <trans-unit id="162" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Threading.CancellationToken.None">
          <source>Two empty cancellation tokens are always equal.</source>
          <target state="translated">Два токена отмены пустой всегда равны.</target>       </trans-unit>
        <trans-unit id="163" translate="yes" xml:space="preserve" uid="M:System.Threading.CancellationToken.op_Equality(System.Threading.CancellationToken,System.Threading.CancellationToken)">
          <source>The first instance.</source>
          <target state="translated">Первый экземпляр.</target>       </trans-unit>
        <trans-unit id="164" translate="yes" xml:space="preserve" uid="M:System.Threading.CancellationToken.op_Equality(System.Threading.CancellationToken,System.Threading.CancellationToken)">
          <source>The second instance.</source>
          <target state="translated">Второй экземпляр.</target>       </trans-unit>
        <trans-unit id="165" translate="yes" xml:space="preserve" uid="M:System.Threading.CancellationToken.op_Equality(System.Threading.CancellationToken,System.Threading.CancellationToken)">
          <source>Determines whether two <ph id="ph1">&lt;see cref="T:System.Threading.CancellationToken" /&gt;</ph> instances are equal.</source>
          <target state="translated">Определяет, равны ли два экземпляра <ph id="ph1">&lt;see cref="T:System.Threading.CancellationToken" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="166" translate="yes" xml:space="preserve" uid="M:System.Threading.CancellationToken.op_Equality(System.Threading.CancellationToken,System.Threading.CancellationToken)">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph> if the instances are equal; otherwise, <ph id="ph2">&lt;see langword="false" /&gt;</ph> See the Remarks section for more information.</source>
          <target state="translated"><ph id="ph1">&lt;see langword="true" /&gt;</ph>, если экземпляры равны, в противном случае <ph id="ph2">&lt;see langword="false" /&gt;</ph>. Дополнительную информацию см. в разделе "Примечания".</target>       </trans-unit>
        <trans-unit id="167" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.CancellationToken.op_Equality(System.Threading.CancellationToken,System.Threading.CancellationToken)">
          <source>Two cancellation tokens are equal if any one of the following conditions is true:</source>
          <target state="translated">Два токена отмены равны, если выполняется любое из следующих условий:</target>       </trans-unit>
        <trans-unit id="168" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.CancellationToken.op_Equality(System.Threading.CancellationToken,System.Threading.CancellationToken)">
          <source>They are associated with the same <ph id="ph1">&lt;xref:System.Threading.CancellationTokenSource&gt;</ph>.</source>
          <target state="translated">Они связаны с тем же <ph id="ph1">&lt;xref:System.Threading.CancellationTokenSource&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="169" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.CancellationToken.op_Equality(System.Threading.CancellationToken,System.Threading.CancellationToken)">
          <source>They were both constructed from public <ph id="ph1">&lt;xref:System.Threading.CancellationToken&gt;</ph> constructors, and their <ph id="ph2">&lt;xref:System.Threading.CancellationToken.IsCancellationRequested?displayProperty=nameWithType&gt;</ph> values are equal.</source>
          <target state="translated">Оба они были созданы из открытых <ph id="ph1">&lt;xref:System.Threading.CancellationToken&gt;</ph> конструкторы и их <ph id="ph2">&lt;xref:System.Threading.CancellationToken.IsCancellationRequested?displayProperty=nameWithType&gt;</ph> значения равны.</target>       </trans-unit>
        <trans-unit id="170" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.CancellationToken.op_Equality(System.Threading.CancellationToken,System.Threading.CancellationToken)">
          <source>The value of both cancellation tokens is <ph id="ph1">&lt;xref:System.Threading.CancellationToken.None?displayProperty=nameWithType&gt;</ph>.</source>
          <target state="translated">Имеет значение обоих токены отмены <ph id="ph1">&lt;xref:System.Threading.CancellationToken.None?displayProperty=nameWithType&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="171" translate="yes" xml:space="preserve" uid="M:System.Threading.CancellationToken.op_Equality(System.Threading.CancellationToken,System.Threading.CancellationToken)">
          <source>An associated <ph id="ph1">&lt;see cref="T:System.Threading.CancellationTokenSource" /&gt;</ph> has been disposed.</source>
          <target state="translated">Связанный объект <ph id="ph1">&lt;see cref="T:System.Threading.CancellationTokenSource" /&gt;</ph> был удален.</target>       </trans-unit>
        <trans-unit id="172" translate="yes" xml:space="preserve" uid="M:System.Threading.CancellationToken.op_Inequality(System.Threading.CancellationToken,System.Threading.CancellationToken)">
          <source>The first instance.</source>
          <target state="translated">Первый экземпляр.</target>       </trans-unit>
        <trans-unit id="173" translate="yes" xml:space="preserve" uid="M:System.Threading.CancellationToken.op_Inequality(System.Threading.CancellationToken,System.Threading.CancellationToken)">
          <source>The second instance.</source>
          <target state="translated">Второй экземпляр.</target>       </trans-unit>
        <trans-unit id="174" translate="yes" xml:space="preserve" uid="M:System.Threading.CancellationToken.op_Inequality(System.Threading.CancellationToken,System.Threading.CancellationToken)">
          <source>Determines whether two <ph id="ph1">&lt;see cref="T:System.Threading.CancellationToken" /&gt;</ph> instances are not equal.</source>
          <target state="translated">Определяет, действительно ли два экземпляра <ph id="ph1">&lt;see cref="T:System.Threading.CancellationToken" /&gt;</ph> не равны.</target>       </trans-unit>
        <trans-unit id="175" translate="yes" xml:space="preserve" uid="M:System.Threading.CancellationToken.op_Inequality(System.Threading.CancellationToken,System.Threading.CancellationToken)">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph> if the instances are not equal; otherwise, <ph id="ph2">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;see langword="true" /&gt;</ph>, если два экземпляра не равны, в противном случае — <ph id="ph2">&lt;see langword="false" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="176" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.CancellationToken.op_Inequality(System.Threading.CancellationToken,System.Threading.CancellationToken)">
          <source>For the definition of equality, see the <ph id="ph1">&lt;xref:System.Threading.CancellationToken.Equals%2A&gt;</ph> method.</source>
          <target state="translated">Определение равенства см <ph id="ph1">&lt;xref:System.Threading.CancellationToken.Equals%2A&gt;</ph> метод.</target>       </trans-unit>
        <trans-unit id="177" translate="yes" xml:space="preserve" uid="M:System.Threading.CancellationToken.op_Inequality(System.Threading.CancellationToken,System.Threading.CancellationToken)">
          <source>An associated <ph id="ph1">&lt;see cref="T:System.Threading.CancellationTokenSource" /&gt;</ph> has been disposed.</source>
          <target state="translated">Связанный объект <ph id="ph1">&lt;see cref="T:System.Threading.CancellationTokenSource" /&gt;</ph> был удален.</target>       </trans-unit>
        <trans-unit id="178" translate="yes" xml:space="preserve" uid="T:System.Threading.CancellationToken">
          <source>Registers a delegate that will be called when this <ph id="ph1">&lt;see cref="T:System.Threading.CancellationToken" /&gt;</ph> is canceled.</source>
          <target state="translated">Регистрирует делегат, который будет вызываться при отмене данного токена <ph id="ph1">&lt;see cref="T:System.Threading.CancellationToken" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="179" translate="yes" xml:space="preserve" uid="M:System.Threading.CancellationToken.Register(System.Action)">
          <source>The delegate to be executed when the <ph id="ph1">&lt;see cref="T:System.Threading.CancellationToken" /&gt;</ph> is canceled.</source>
          <target state="translated">Делегат, выполняемый при отмене токена <ph id="ph1">&lt;see cref="T:System.Threading.CancellationToken" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="180" translate="yes" xml:space="preserve" uid="M:System.Threading.CancellationToken.Register(System.Action)">
          <source>Registers a delegate that will be called when this <ph id="ph1">&lt;see cref="T:System.Threading.CancellationToken" /&gt;</ph> is canceled.</source>
          <target state="translated">Регистрирует делегат, который будет вызываться при отмене данного токена <ph id="ph1">&lt;see cref="T:System.Threading.CancellationToken" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="181" translate="yes" xml:space="preserve" uid="M:System.Threading.CancellationToken.Register(System.Action)">
          <source>The <ph id="ph1">&lt;see cref="T:System.Threading.CancellationTokenRegistration" /&gt;</ph> instance that can be used to unregister the callback.</source>
          <target state="translated">Экземпляр <ph id="ph1">&lt;see cref="T:System.Threading.CancellationTokenRegistration" /&gt;</ph>, который можно использовать для отмены регистрации обратного вызова.</target>       </trans-unit>
        <trans-unit id="182" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.CancellationToken.Register(System.Action)">
          <source>If this token is already in the canceled state, the delegate will be run immediately and synchronously.</source>
          <target state="translated">Если этот токен уже находится в состоянии отмены, делегат будет запущен немедленно и синхронно.</target>       </trans-unit>
        <trans-unit id="183" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.CancellationToken.Register(System.Action)">
          <source>Any exception the delegate generates will be propagated out of this method call.</source>
          <target state="translated">Любое исключение, которое создает делегат будет распространяться за пределы вызов этого метода.</target>       </trans-unit>
        <trans-unit id="184" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.CancellationToken.Register(System.Action)">
          <source>The current <ph id="ph1">&lt;xref:System.Threading.ExecutionContext&gt;</ph> is captured along with the delegate and will be used when executing it.</source>
          <target state="translated">Текущий <ph id="ph1">&lt;xref:System.Threading.ExecutionContext&gt;</ph> записывается вместе с делегатом и будут использоваться при его выполнении.</target>       </trans-unit>
        <trans-unit id="185" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.CancellationToken.Register(System.Action)">
          <source>The current <ph id="ph1">&lt;xref:System.Threading.SynchronizationContext&gt;</ph> is not captured.</source>
          <target state="translated">Текущий <ph id="ph1">&lt;xref:System.Threading.SynchronizationContext&gt;</ph> не фиксируются.</target>       </trans-unit>
        <trans-unit id="186" translate="yes" xml:space="preserve" uid="M:System.Threading.CancellationToken.Register(System.Action)">
          <source>The associated <ph id="ph1">&lt;see cref="T:System.Threading.CancellationTokenSource" /&gt;</ph> has been disposed.</source>
          <target state="translated">Связанный объект <ph id="ph1">&lt;see cref="T:System.Threading.CancellationTokenSource" /&gt;</ph> удален.</target>       </trans-unit>
        <trans-unit id="187" translate="yes" xml:space="preserve" uid="M:System.Threading.CancellationToken.Register(System.Action)">
          <source><ph id="ph1">&lt;paramref name="callback" /&gt;</ph> is null.</source>
          <target state="translated">Параметр <ph id="ph1">&lt;paramref name="callback" /&gt;</ph> имеет значение null.</target>       </trans-unit>
        <trans-unit id="188" translate="yes" xml:space="preserve" uid="M:System.Threading.CancellationToken.Register(System.Action,System.Boolean)">
          <source>The delegate to be executed when the <ph id="ph1">&lt;see cref="T:System.Threading.CancellationToken" /&gt;</ph> is canceled.</source>
          <target state="translated">Делегат, выполняемый при отмене токена <ph id="ph1">&lt;see cref="T:System.Threading.CancellationToken" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="189" translate="yes" xml:space="preserve" uid="M:System.Threading.CancellationToken.Register(System.Action,System.Boolean)">
          <source>A value that indicates whether to capture the current <ph id="ph1">&lt;see cref="T:System.Threading.SynchronizationContext" /&gt;</ph> and use it when invoking the <bpt id="p1">&lt;c&gt;</bpt>callback<ept id="p1">&lt;/c&gt;</ept>.</source>
          <target state="translated">Значение, указывающее, следует ли записывать текущий объект <ph id="ph1">&lt;see cref="T:System.Threading.SynchronizationContext" /&gt;</ph> и использовать его при вызове <bpt id="p1">&lt;c&gt;</bpt>callback<ept id="p1">&lt;/c&gt;</ept>.</target>       </trans-unit>
        <trans-unit id="190" translate="yes" xml:space="preserve" uid="M:System.Threading.CancellationToken.Register(System.Action,System.Boolean)">
          <source>Registers a delegate that will be called when this <ph id="ph1">&lt;see cref="T:System.Threading.CancellationToken" /&gt;</ph> is canceled.</source>
          <target state="translated">Регистрирует делегат, который будет вызываться при отмене данного токена <ph id="ph1">&lt;see cref="T:System.Threading.CancellationToken" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="191" translate="yes" xml:space="preserve" uid="M:System.Threading.CancellationToken.Register(System.Action,System.Boolean)">
          <source>The <ph id="ph1">&lt;see cref="T:System.Threading.CancellationTokenRegistration" /&gt;</ph> instance that can be used to unregister the callback.</source>
          <target state="translated">Экземпляр <ph id="ph1">&lt;see cref="T:System.Threading.CancellationTokenRegistration" /&gt;</ph>, который можно использовать для отмены регистрации обратного вызова.</target>       </trans-unit>
        <trans-unit id="192" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.CancellationToken.Register(System.Action,System.Boolean)">
          <source>If this token is already in the canceled state, the delegate will be run immediately and synchronously.</source>
          <target state="translated">Если этот токен уже находится в состоянии отмены, делегат будет запущен немедленно и синхронно.</target>       </trans-unit>
        <trans-unit id="193" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.CancellationToken.Register(System.Action,System.Boolean)">
          <source>Any exception the delegate generates will be propagated out of this method call.</source>
          <target state="translated">Любое исключение, которое создает делегат будет распространяться за пределы вызов этого метода.</target>       </trans-unit>
        <trans-unit id="194" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.CancellationToken.Register(System.Action,System.Boolean)">
          <source>The current <ph id="ph1">&lt;xref:System.Threading.ExecutionContext&gt;</ph> is captured along with the delegate and will be used when executing it.</source>
          <target state="translated">Текущий <ph id="ph1">&lt;xref:System.Threading.ExecutionContext&gt;</ph> записывается вместе с делегатом и будут использоваться при его выполнении.</target>       </trans-unit>
        <trans-unit id="195" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.CancellationToken.Register(System.Action,System.Boolean)">
          <source>If <ph id="ph1">`useSynchronizationContext`</ph> is <ph id="ph2">`true`</ph>, the current <ph id="ph3">&lt;xref:System.Threading.SynchronizationContext&gt;</ph>, if one exists, is also captured along with the delegate and will be used when executing it.</source>
          <target state="translated">Если <ph id="ph1">`useSynchronizationContext`</ph> — <ph id="ph2">`true`</ph>, текущий <ph id="ph3">&lt;xref:System.Threading.SynchronizationContext&gt;</ph>, если один существует, также записывается вместе с делегатом и будут использоваться при его выполнении.</target>       </trans-unit>
        <trans-unit id="196" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.CancellationToken.Register(System.Action,System.Boolean)">
          <source>Otherwise, <ph id="ph1">&lt;xref:System.Threading.SynchronizationContext&gt;</ph> is not captured.</source>
          <target state="translated">В противном случае <ph id="ph1">&lt;xref:System.Threading.SynchronizationContext&gt;</ph> не фиксируются.</target>       </trans-unit>
        <trans-unit id="197" translate="yes" xml:space="preserve" uid="M:System.Threading.CancellationToken.Register(System.Action,System.Boolean)">
          <source>The associated <ph id="ph1">&lt;see cref="T:System.Threading.CancellationTokenSource" /&gt;</ph> has been disposed.</source>
          <target state="translated">Связанный объект <ph id="ph1">&lt;see cref="T:System.Threading.CancellationTokenSource" /&gt;</ph> удален.</target>       </trans-unit>
        <trans-unit id="198" translate="yes" xml:space="preserve" uid="M:System.Threading.CancellationToken.Register(System.Action,System.Boolean)">
          <source><ph id="ph1">&lt;paramref name="callback" /&gt;</ph> is null.</source>
          <target state="translated">Параметр <ph id="ph1">&lt;paramref name="callback" /&gt;</ph> имеет значение null.</target>       </trans-unit>
        <trans-unit id="199" translate="yes" xml:space="preserve" uid="M:System.Threading.CancellationToken.Register(System.Action{System.Object},System.Object)">
          <source>The delegate to be executed when the <ph id="ph1">&lt;see cref="T:System.Threading.CancellationToken" /&gt;</ph> is canceled.</source>
          <target state="translated">Делегат, выполняемый при отмене токена <ph id="ph1">&lt;see cref="T:System.Threading.CancellationToken" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="200" translate="yes" xml:space="preserve" uid="M:System.Threading.CancellationToken.Register(System.Action{System.Object},System.Object)">
          <source>The state to pass to the <bpt id="p1">&lt;c&gt;</bpt>callback<ept id="p1">&lt;/c&gt;</ept> when the delegate is invoked.</source>
          <target state="translated">Состояние, передаваемое обратному вызову <bpt id="p1">&lt;c&gt;</bpt>callback<ept id="p1">&lt;/c&gt;</ept> при вызове делегата.</target>       </trans-unit>
        <trans-unit id="201" translate="yes" xml:space="preserve" uid="M:System.Threading.CancellationToken.Register(System.Action{System.Object},System.Object)">
          <source>This may be null.</source>
          <target state="translated">Может содержать пустое значение.</target>       </trans-unit>
        <trans-unit id="202" translate="yes" xml:space="preserve" uid="M:System.Threading.CancellationToken.Register(System.Action{System.Object},System.Object)">
          <source>Registers a delegate that will be called when this <ph id="ph1">&lt;see cref="T:System.Threading.CancellationToken" /&gt;</ph> is canceled.</source>
          <target state="translated">Регистрирует делегат, который будет вызываться при отмене данного токена <ph id="ph1">&lt;see cref="T:System.Threading.CancellationToken" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="203" translate="yes" xml:space="preserve" uid="M:System.Threading.CancellationToken.Register(System.Action{System.Object},System.Object)">
          <source>The <ph id="ph1">&lt;see cref="T:System.Threading.CancellationTokenRegistration" /&gt;</ph> instance that can be used to unregister the callback.</source>
          <target state="translated">Экземпляр <ph id="ph1">&lt;see cref="T:System.Threading.CancellationTokenRegistration" /&gt;</ph>, который можно использовать для отмены регистрации обратного вызова.</target>       </trans-unit>
        <trans-unit id="204" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.CancellationToken.Register(System.Action{System.Object},System.Object)">
          <source>If this token is already in the canceled state, the delegate will be run immediately and synchronously.</source>
          <target state="translated">Если этот токен уже находится в состоянии отмены, делегат будет запущен немедленно и синхронно.</target>       </trans-unit>
        <trans-unit id="205" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.CancellationToken.Register(System.Action{System.Object},System.Object)">
          <source>Any exception the delegate generates will be propagated out of this method call.</source>
          <target state="translated">Любое исключение, которое создает делегат будет распространяться за пределы вызов этого метода.</target>       </trans-unit>
        <trans-unit id="206" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.CancellationToken.Register(System.Action{System.Object},System.Object)">
          <source>The current <ph id="ph1">&lt;xref:System.Threading.ExecutionContext&gt;</ph> is captured along with the delegate and will be used when executing it.</source>
          <target state="translated">Текущий <ph id="ph1">&lt;xref:System.Threading.ExecutionContext&gt;</ph> записывается вместе с делегатом и будут использоваться при его выполнении.</target>       </trans-unit>
        <trans-unit id="207" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.CancellationToken.Register(System.Action{System.Object},System.Object)">
          <source>The current <ph id="ph1">&lt;xref:System.Threading.SynchronizationContext&gt;</ph> is not captured.</source>
          <target state="translated">Текущий <ph id="ph1">&lt;xref:System.Threading.SynchronizationContext&gt;</ph> не фиксируются.</target>       </trans-unit>
        <trans-unit id="208" translate="yes" xml:space="preserve" uid="M:System.Threading.CancellationToken.Register(System.Action{System.Object},System.Object)">
          <source>The associated <ph id="ph1">&lt;see cref="T:System.Threading.CancellationTokenSource" /&gt;</ph> has been disposed.</source>
          <target state="translated">Связанный объект <ph id="ph1">&lt;see cref="T:System.Threading.CancellationTokenSource" /&gt;</ph> удален.</target>       </trans-unit>
        <trans-unit id="209" translate="yes" xml:space="preserve" uid="M:System.Threading.CancellationToken.Register(System.Action{System.Object},System.Object)">
          <source><ph id="ph1">&lt;paramref name="callback" /&gt;</ph> is null.</source>
          <target state="translated">Параметр <ph id="ph1">&lt;paramref name="callback" /&gt;</ph> имеет значение null.</target>       </trans-unit>
        <trans-unit id="210" translate="yes" xml:space="preserve" uid="M:System.Threading.CancellationToken.Register(System.Action{System.Object},System.Object,System.Boolean)">
          <source>The delegate to be executed when the <ph id="ph1">&lt;see cref="T:System.Threading.CancellationToken" /&gt;</ph> is canceled.</source>
          <target state="translated">Делегат, выполняемый при отмене токена <ph id="ph1">&lt;see cref="T:System.Threading.CancellationToken" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="211" translate="yes" xml:space="preserve" uid="M:System.Threading.CancellationToken.Register(System.Action{System.Object},System.Object,System.Boolean)">
          <source>The state to pass to the <bpt id="p1">&lt;c&gt;</bpt>callback<ept id="p1">&lt;/c&gt;</ept> when the delegate is invoked.</source>
          <target state="translated">Состояние, передаваемое обратному вызову <bpt id="p1">&lt;c&gt;</bpt>callback<ept id="p1">&lt;/c&gt;</ept> при вызове делегата.</target>       </trans-unit>
        <trans-unit id="212" translate="yes" xml:space="preserve" uid="M:System.Threading.CancellationToken.Register(System.Action{System.Object},System.Object,System.Boolean)">
          <source>This may be null.</source>
          <target state="translated">Может содержать пустое значение.</target>       </trans-unit>
        <trans-unit id="213" translate="yes" xml:space="preserve" uid="M:System.Threading.CancellationToken.Register(System.Action{System.Object},System.Object,System.Boolean)">
          <source>A Boolean value that indicates whether to capture the current <ph id="ph1">&lt;see cref="T:System.Threading.SynchronizationContext" /&gt;</ph> and use it when invoking the <bpt id="p1">&lt;c&gt;</bpt>callback<ept id="p1">&lt;/c&gt;</ept>.</source>
          <target state="translated">Логическое значение, указывающее, следует ли записывать текущий объект <ph id="ph1">&lt;see cref="T:System.Threading.SynchronizationContext" /&gt;</ph> и использовать его при вызове <bpt id="p1">&lt;c&gt;</bpt>callback<ept id="p1">&lt;/c&gt;</ept>.</target>       </trans-unit>
        <trans-unit id="214" translate="yes" xml:space="preserve" uid="M:System.Threading.CancellationToken.Register(System.Action{System.Object},System.Object,System.Boolean)">
          <source>Registers a delegate that will be called when this <ph id="ph1">&lt;see cref="T:System.Threading.CancellationToken" /&gt;</ph> is canceled.</source>
          <target state="translated">Регистрирует делегат, который будет вызываться при отмене данного токена <ph id="ph1">&lt;see cref="T:System.Threading.CancellationToken" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="215" translate="yes" xml:space="preserve" uid="M:System.Threading.CancellationToken.Register(System.Action{System.Object},System.Object,System.Boolean)">
          <source>The <ph id="ph1">&lt;see cref="T:System.Threading.CancellationTokenRegistration" /&gt;</ph> instance that can be used to unregister the callback.</source>
          <target state="translated">Экземпляр <ph id="ph1">&lt;see cref="T:System.Threading.CancellationTokenRegistration" /&gt;</ph>, который можно использовать для отмены регистрации обратного вызова.</target>       </trans-unit>
        <trans-unit id="216" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.CancellationToken.Register(System.Action{System.Object},System.Object,System.Boolean)">
          <source>If this token is already in the canceled state, the delegate will be run immediately and synchronously.</source>
          <target state="translated">Если этот токен уже находится в состоянии отмены, делегат будет запущен немедленно и синхронно.</target>       </trans-unit>
        <trans-unit id="217" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.CancellationToken.Register(System.Action{System.Object},System.Object,System.Boolean)">
          <source>Any exception the delegate generates will be propagated out of this method call.</source>
          <target state="translated">Любое исключение, которое создает делегат будет распространяться за пределы вызов этого метода.</target>       </trans-unit>
        <trans-unit id="218" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.CancellationToken.Register(System.Action{System.Object},System.Object,System.Boolean)">
          <source>The current <ph id="ph1">&lt;xref:System.Threading.ExecutionContext&gt;</ph> is captured along with the delegate and will be used when executing it.</source>
          <target state="translated">Текущий <ph id="ph1">&lt;xref:System.Threading.ExecutionContext&gt;</ph> записывается вместе с делегатом и будут использоваться при его выполнении.</target>       </trans-unit>
        <trans-unit id="219" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.CancellationToken.Register(System.Action{System.Object},System.Object,System.Boolean)">
          <source>If <ph id="ph1">`useSynchronizationContext`</ph> is <ph id="ph2">`true`</ph>, the current <ph id="ph3">&lt;xref:System.Threading.SynchronizationContext&gt;</ph>, if one exists, is also captured along with the delegate and will be used when executing it.</source>
          <target state="translated">Если <ph id="ph1">`useSynchronizationContext`</ph> — <ph id="ph2">`true`</ph>, текущий <ph id="ph3">&lt;xref:System.Threading.SynchronizationContext&gt;</ph>, если один существует, также записывается вместе с делегатом и будут использоваться при его выполнении.</target>       </trans-unit>
        <trans-unit id="220" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.CancellationToken.Register(System.Action{System.Object},System.Object,System.Boolean)">
          <source>Otherwise, <ph id="ph1">&lt;xref:System.Threading.SynchronizationContext&gt;</ph> is not captured.</source>
          <target state="translated">В противном случае <ph id="ph1">&lt;xref:System.Threading.SynchronizationContext&gt;</ph> не фиксируются.</target>       </trans-unit>
        <trans-unit id="221" translate="yes" xml:space="preserve" uid="M:System.Threading.CancellationToken.Register(System.Action{System.Object},System.Object,System.Boolean)">
          <source>The associated <ph id="ph1">&lt;see cref="T:System.Threading.CancellationTokenSource" /&gt;</ph> has been disposed.</source>
          <target state="translated">Связанный объект <ph id="ph1">&lt;see cref="T:System.Threading.CancellationTokenSource" /&gt;</ph> удален.</target>       </trans-unit>
        <trans-unit id="222" translate="yes" xml:space="preserve" uid="M:System.Threading.CancellationToken.Register(System.Action{System.Object},System.Object,System.Boolean)">
          <source><ph id="ph1">&lt;paramref name="callback" /&gt;</ph> is null.</source>
          <target state="translated">Параметр <ph id="ph1">&lt;paramref name="callback" /&gt;</ph> имеет значение null.</target>       </trans-unit>
        <trans-unit id="223" translate="yes" xml:space="preserve" uid="M:System.Threading.CancellationToken.ThrowIfCancellationRequested">
          <source>Throws a <ph id="ph1">&lt;see cref="T:System.OperationCanceledException" /&gt;</ph> if this token has had cancellation requested.</source>
          <target state="translated">Создает исключение <ph id="ph1">&lt;see cref="T:System.OperationCanceledException" /&gt;</ph>, если для данного токена есть запрос на отмену.</target>       </trans-unit>
        <trans-unit id="224" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.CancellationToken.ThrowIfCancellationRequested">
          <source>This method provides functionality equivalent to:</source>
          <target state="translated">Этот метод предоставляет функциональные возможности, эквивалентно:</target>       </trans-unit>
        <trans-unit id="225" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.CancellationToken.ThrowIfCancellationRequested">
          <source>C#</source>
          <target state="translated">C#</target>       </trans-unit>
        <trans-unit id="226" translate="yes" xml:space="preserve" uid="M:System.Threading.CancellationToken.ThrowIfCancellationRequested">
          <source>The token has had cancellation requested.</source>
          <target state="translated">Этот токен имел запрос на отмену.</target>       </trans-unit>
        <trans-unit id="227" translate="yes" xml:space="preserve" uid="M:System.Threading.CancellationToken.ThrowIfCancellationRequested">
          <source>The associated <ph id="ph1">&lt;see cref="T:System.Threading.CancellationTokenSource" /&gt;</ph> has been disposed.</source>
          <target state="translated">Связанный объект <ph id="ph1">&lt;see cref="T:System.Threading.CancellationTokenSource" /&gt;</ph> удален.</target>       </trans-unit>
        <trans-unit id="228" translate="yes" xml:space="preserve" uid="P:System.Threading.CancellationToken.WaitHandle">
          <source>Gets a <ph id="ph1">&lt;see cref="T:System.Threading.WaitHandle" /&gt;</ph> that is signaled when the token is canceled.</source>
          <target state="translated">Возвращает дескриптор <ph id="ph1">&lt;see cref="T:System.Threading.WaitHandle" /&gt;</ph>, получающий сигнал при отмене токена.</target>       </trans-unit>
        <trans-unit id="229" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Threading.CancellationToken.WaitHandle">
          <source>A <ph id="ph1">&lt;see cref="T:System.Threading.WaitHandle" /&gt;</ph> that is signaled when the token is canceled.</source>
          <target state="translated">Дескриптор <ph id="ph1">&lt;see cref="T:System.Threading.WaitHandle" /&gt;</ph>, получающий сигнал при отмене токена.</target>       </trans-unit>
        <trans-unit id="230" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Threading.CancellationToken.WaitHandle">
          <source>Accessing this property causes a <ph id="ph1">&lt;xref:System.Threading.WaitHandle&gt;</ph> to be instantiated.</source>
          <target state="translated">Доступ к этому свойству вызывает <ph id="ph1">&lt;xref:System.Threading.WaitHandle&gt;</ph> для создания экземпляра.</target>       </trans-unit>
        <trans-unit id="231" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Threading.CancellationToken.WaitHandle">
          <source>It is preferable to only use this property when necessary, and to then dispose the associated <ph id="ph1">&lt;xref:System.Threading.CancellationTokenSource&gt;</ph> instance at the earliest opportunity (disposing the source will dispose of this allocated handle).</source>
          <target state="translated">Рекомендуется использовать только использовать это свойство при необходимости и затем уничтожить связанный <ph id="ph1">&lt;xref:System.Threading.CancellationTokenSource&gt;</ph> экземпляра при первой возможности (уничтожение источника приведет к уничтожению выделенного маркера).</target>       </trans-unit>
        <trans-unit id="232" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Threading.CancellationToken.WaitHandle">
          <source>The handle should not be closed or disposed directly.</source>
          <target state="translated">Дескриптор, не должен быть закрыт или удален напрямую.</target>       </trans-unit>
        <trans-unit id="233" translate="yes" xml:space="preserve" uid="P:System.Threading.CancellationToken.WaitHandle">
          <source>The associated <ph id="ph1">&lt;see cref="T:System.Threading.CancellationTokenSource" /&gt;</ph> has been disposed.</source>
          <target state="translated">Связанный объект <ph id="ph1">&lt;see cref="T:System.Threading.CancellationTokenSource" /&gt;</ph> удален.</target>       </trans-unit>
      </group>
    </body>
  </file>
</xliff>