<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" version="1.2" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="CancellationTokenSource.xml" source-language="en-US" target-language="ru-RU">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-15c36f0" tool-company="Microsoft" />
      <xliffext:skl_file_name xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">02cd5861-7ce2-4a82-b358-31f8435a0ac594e623c10b8f5fb941b4f23eb30c7dcadd826d47.skl</xliffext:skl_file_name>
      <xliffext:version xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">1.2</xliffext:version>
      <xliffext:ms.openlocfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">94e623c10b8f5fb941b4f23eb30c7dcadd826d47</xliffext:ms.openlocfilehash>
      <xliffext:ms.sourcegitcommit xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">d31dc2ede16f6f7bc64e90d9f897ff54c4e3869b</xliffext:ms.sourcegitcommit>
      <xliffext:ms.lasthandoff xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">04/03/2018</xliffext:ms.lasthandoff>
      <xliffext:moniker_ids xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">netcore-1.0,netcore-1.1,netcore-2.0,netcore-2.1,netframework-4.5.1,netframework-4.5.2,netframework-4.5,netframework-4.6.1,netframework-4.6.2,netframework-4.6,netframework-4.7.1,netframework-4.7,netstandard-1.0,netstandard-1.1,netstandard-1.2,netstandard-1.3,netstandard-1.4,netstandard-1.6,netstandard-2.0,xamarinandroid-7.1,xamarinios-10.8,xamarinmac-3.0</xliffext:moniker_ids>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve" uid="T:System.Threading.CancellationTokenSource">
          <source>Signals to a <ph id="ph1">&lt;see cref="T:System.Threading.CancellationToken" /&gt;</ph> that it should be canceled.</source>
          <target state="translated">Отправляет токену <ph id="ph1">&lt;see cref="T:System.Threading.CancellationToken" /&gt;</ph> сигнал отмены.</target>       </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Threading.CancellationTokenSource">
          <source>Starting with the <ph id="ph1">[!INCLUDE[net_v40_long](~/includes/net-v40-long-md.md)]</ph>, the .NET Framework uses a unified model for cooperative cancellation of asynchronous or long-running synchronous operations that involves two objects:</source>
          <target state="translated">Начиная с <ph id="ph1">[!INCLUDE[net_v40_long](~/includes/net-v40-long-md.md)]</ph>, .NET Framework используется новая универсальная модель совместной отмены асинхронных или долго выполняющихся синхронных операций, который включает в себя два объекта:</target>       </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Threading.CancellationTokenSource">
          <source>A <ph id="ph1">&lt;xref:System.Threading.CancellationTokenSource&gt;</ph> object, which provides a cancellation token through its <ph id="ph2">&lt;xref:System.Threading.CancellationTokenSource.Token%2A&gt;</ph> property and sends a cancellation message by calling its <ph id="ph3">&lt;xref:System.Threading.CancellationTokenSource.Cancel%2A&gt;</ph> or <ph id="ph4">&lt;xref:System.Threading.CancellationTokenSource.CancelAfter%2A&gt;</ph> method.</source>
          <target state="translated">Объект <ph id="ph1">&lt;xref:System.Threading.CancellationTokenSource&gt;</ph> object, который предоставляет токен отмены по его <ph id="ph2">&lt;xref:System.Threading.CancellationTokenSource.Token%2A&gt;</ph> свойство и отправляет сообщение об отмене путем вызова его <ph id="ph3">&lt;xref:System.Threading.CancellationTokenSource.Cancel%2A&gt;</ph> или <ph id="ph4">&lt;xref:System.Threading.CancellationTokenSource.CancelAfter%2A&gt;</ph> метод.</target>       </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Threading.CancellationTokenSource">
          <source>A <ph id="ph1">&lt;xref:System.Threading.CancellationToken&gt;</ph> object, which indicates whether cancellation is requested.</source>
          <target state="translated">Объект <ph id="ph1">&lt;xref:System.Threading.CancellationToken&gt;</ph> объект, который указывает, является ли запрос на отмену.</target>       </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Threading.CancellationTokenSource">
          <source>The general pattern for implementing the cooperative cancellation model is:</source>
          <target state="translated">Общая схема реализации модели совместной отмены выглядит следующим образом:</target>       </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Threading.CancellationTokenSource">
          <source>Instantiate a <ph id="ph1">&lt;xref:System.Threading.CancellationTokenSource&gt;</ph> object, which manages and sends cancellation notification to the individual cancellation tokens.</source>
          <target state="translated">Создается экземпляр объекта <ph id="ph1">&lt;xref:System.Threading.CancellationTokenSource&gt;</ph>, который управляет уведомлениями об отмене и передает их отдельным токенам отмены.</target>       </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Threading.CancellationTokenSource">
          <source>Pass the token returned by the <ph id="ph1">&lt;xref:System.Threading.CancellationTokenSource.Token%2A?displayProperty=nameWithType&gt;</ph> property to each task or thread that listens for cancellation.</source>
          <target state="translated">В каждую задачу или поток, ожидающий отмены, передается токен, возвращенный свойством <ph id="ph1">&lt;xref:System.Threading.CancellationTokenSource.Token%2A?displayProperty=nameWithType&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Threading.CancellationTokenSource">
          <source>Call the <ph id="ph1">&lt;xref:System.Threading.CancellationToken.IsCancellationRequested%2A?displayProperty=nameWithType&gt;</ph> method from operations that receive the cancellation token.</source>
          <target state="translated">Вызовите <ph id="ph1">&lt;xref:System.Threading.CancellationToken.IsCancellationRequested%2A?displayProperty=nameWithType&gt;</ph> метод от операций, которые получают токен отмены.</target>       </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Threading.CancellationTokenSource">
          <source>Provide a mechanism for each task or thread to respond to a cancellation request.</source>
          <target state="translated">Предоставляет механизм для каждой задачи или каждому потоку для ответа на запрос отмены.</target>       </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Threading.CancellationTokenSource">
          <source>Whether you choose to cancel an operation, and exactly how you do it, depends on your application logic.</source>
          <target state="translated">Необходимость отменить операцию, а именно как это сделать, зависит от логики приложения.</target>       </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Threading.CancellationTokenSource">
          <source>Call the <ph id="ph1">&lt;xref:System.Threading.CancellationTokenSource.Cancel%2A?displayProperty=nameWithType&gt;</ph> method to provide notification of cancellation.</source>
          <target state="translated">Вызывается метод <ph id="ph1">&lt;xref:System.Threading.CancellationTokenSource.Cancel%2A?displayProperty=nameWithType&gt;</ph> для предоставления уведомления об отмене.</target>       </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Threading.CancellationTokenSource">
          <source>This sets the <ph id="ph1">&lt;xref:System.Threading.CancellationToken.IsCancellationRequested%2A?displayProperty=nameWithType&gt;</ph> property on every copy of the cancellation token to <ph id="ph2">`true`</ph>.</source>
          <target state="translated">Это задает <ph id="ph1">&lt;xref:System.Threading.CancellationToken.IsCancellationRequested%2A?displayProperty=nameWithType&gt;</ph> в каждом экземпляре токена отмены для <ph id="ph2">`true`</ph>.</target>       </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Threading.CancellationTokenSource">
          <source>Call the <ph id="ph1">&lt;xref:System.Threading.CancellationTokenSource.Dispose%2A&gt;</ph> method when you are finished with the <ph id="ph2">&lt;xref:System.Threading.CancellationTokenSource&gt;</ph> object.</source>
          <target state="translated">Вызовите <ph id="ph1">&lt;xref:System.Threading.CancellationTokenSource.Dispose%2A&gt;</ph> метод при завершении работы с <ph id="ph2">&lt;xref:System.Threading.CancellationTokenSource&gt;</ph> объекта.</target>       </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Threading.CancellationTokenSource">
          <source>For more information, see <bpt id="p1">[</bpt>Cancellation in Managed Threads<ept id="p1">](~/docs/standard/threading/cancellation-in-managed-threads.md)</ept>.</source>
          <target state="translated">См. дополнительные сведения об <bpt id="p1">[</bpt>отмене в управляемых потоках<ept id="p1">](~/docs/standard/threading/cancellation-in-managed-threads.md)</ept>.</target>       </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Threading.CancellationTokenSource">
          <source>This type implements the <ph id="ph1">&lt;xref:System.IDisposable&gt;</ph> interface.</source>
          <target state="translated">Этот тип реализует <ph id="ph1">&lt;xref:System.IDisposable&gt;</ph> интерфейса.</target>       </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Threading.CancellationTokenSource">
          <source>When you have finished using an instance of the type, you should dispose of it either directly or indirectly.</source>
          <target state="translated">После завершения, используя экземпляр типа, следует освободить его прямо или косвенно.</target>       </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Threading.CancellationTokenSource">
          <source>To dispose of the type directly, call its <ph id="ph1">&lt;xref:System.IDisposable.Dispose%2A&gt;</ph> method in a <ph id="ph2">`try`</ph><ph id="ph3">/</ph><ph id="ph4">`catch`</ph> block.</source>
          <target state="translated">Для удаления типа непосредственно вызвать его <ph id="ph1">&lt;xref:System.IDisposable.Dispose%2A&gt;</ph> метод в <ph id="ph2">`try`</ph> <ph id="ph3">/</ph> <ph id="ph4">`catch`</ph> блока.</target>       </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Threading.CancellationTokenSource">
          <source>To dispose of it indirectly, use a language construct such as <ph id="ph1">`using`</ph> (in C#) or <ph id="ph2">`Using`</ph> (in Visual Basic).</source>
          <target state="translated">Чтобы удалить ее косвенно, использовать языковой конструкции, такие как <ph id="ph1">`using`</ph> (в C#) или <ph id="ph2">`Using`</ph> (в Visual Basic).</target>       </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Threading.CancellationTokenSource">
          <source>For more information, see the "Using an Object that Implements IDisposable" section in the <ph id="ph1">&lt;xref:System.IDisposable&gt;</ph> interface topic.</source>
          <target state="translated">Дополнительные сведения см. в разделе «С помощью объекта, реализует интерфейс IDisposable» в <ph id="ph1">&lt;xref:System.IDisposable&gt;</ph> разделе интерфейса.</target>       </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Threading.CancellationTokenSource">
          <source>The following example uses a random number generator to emulate a data collection application that reads 10 integral values from eleven different instruments.</source>
          <target state="translated">В следующем примере генератора случайных чисел для эмуляции приложение коллекции данных, которое считывает из одиннадцать различные инструменты 10 целочисленных значений.</target>       </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Threading.CancellationTokenSource">
          <source>A value of zero indicates that the measurement has failed for one instrument, in which case the operation should be cancelled and no overall mean should be computed.</source>
          <target state="translated">Нулевое значение указывает на сбой измерение для одного инструмента, в этом случае отмены операции и не общее среднее значение должно быть вычислено.</target>       </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Threading.CancellationTokenSource">
          <source>To handle the possible cancellation of the operation, the example instantiates a <ph id="ph1">&lt;xref:System.Threading.CancellationTokenSource&gt;</ph> object that generates a cancellation token which is passed to a <ph id="ph2">&lt;xref:System.Threading.Tasks.TaskFactory&gt;</ph> object.</source>
          <target state="translated">Для обработки возможных Отмена операции, в примере создается экземпляр <ph id="ph1">&lt;xref:System.Threading.CancellationTokenSource&gt;</ph> объект, который создает токен отмены, который передается <ph id="ph2">&lt;xref:System.Threading.Tasks.TaskFactory&gt;</ph> объекта.</target>       </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Threading.CancellationTokenSource">
          <source>The <ph id="ph1">&lt;xref:System.Threading.Tasks.TaskFactory&gt;</ph> object in turn passes the cancellation token to each of the tasks responsible for collecting readings for a particular instrument.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Threading.Tasks.TaskFactory&gt;</ph> Объект, в свою очередь передает токен отмены для каждой из задач отвечать за сбор показания для конкретного инструмента.</target>       </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Threading.CancellationTokenSource">
          <source>The <ph id="ph1">&lt;xref:System.Threading.Tasks.TaskFactory.ContinueWhenAll%60%602%28System.Threading.Tasks.Task%7B%60%600%7D%5B%5D%2CSystem.Func%7BSystem.Threading.Tasks.Task%7B%60%600%7D%5B%5D%2C%60%601%7D%2CSystem.Threading.CancellationToken%29?displayProperty=nameWithType&gt;</ph> method is called to ensure that the mean is computed only after all readings have been gathered successfully.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Threading.Tasks.TaskFactory.ContinueWhenAll%60%602%28System.Threading.Tasks.Task%7B%60%600%7D%5B%5D%2CSystem.Func%7BSystem.Threading.Tasks.Task%7B%60%600%7D%5B%5D%2C%60%601%7D%2CSystem.Threading.CancellationToken%29?displayProperty=nameWithType&gt;</ph> Метод вызывается, чтобы убедиться, что среднее значение вычисляется только в том случае, если все показания были собраны успешно.</target>       </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Threading.CancellationTokenSource">
          <source>If a task has not because it has been cancelled, the call to the <ph id="ph1">&lt;xref:System.Threading.Tasks.TaskFactory.ContinueWhenAll%2A?displayProperty=nameWithType&gt;</ph> method throws an exception.</source>
          <target state="translated">Если задача имеет не так, как оно было отменено, вызов <ph id="ph1">&lt;xref:System.Threading.Tasks.TaskFactory.ContinueWhenAll%2A?displayProperty=nameWithType&gt;</ph> метод создает исключение.</target>       </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Threading.CancellationTokenSource">
          <source>All public and protected members of <ph id="ph1">&lt;see cref="T:System.Threading.CancellationTokenSource" /&gt;</ph> are thread-safe and may be used concurrently from multiple threads, with the exception of <ph id="ph2">&lt;see cref="M:System.Threading.CancellationTokenSource.Dispose" /&gt;</ph>, which must only be used when all other operations on the <ph id="ph3">&lt;see cref="T:System.Threading.CancellationTokenSource" /&gt;</ph> object have completed.</source>
          <target state="translated">Все открытые и защищенные члены <ph id="ph1">&lt;see cref="T:System.Threading.CancellationTokenSource" /&gt;</ph> являются потокобезопасными и могут быть использованы одновременно из нескольких потоков, за исключением элемента <ph id="ph2">&lt;see cref="M:System.Threading.CancellationTokenSource.Dispose" /&gt;</ph>, который следует использовать только при всех операций в <ph id="ph3">&lt;see cref="T:System.Threading.CancellationTokenSource" /&gt;</ph> объекта завершена.</target>       </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve" uid="T:System.Threading.CancellationTokenSource">
          <source>Initializes the <ph id="ph1">&lt;see cref="T:System.Threading.CancellationTokenSource" /&gt;</ph>.</source>
          <target state="translated">Инициализирует объект <ph id="ph1">&lt;see cref="T:System.Threading.CancellationTokenSource" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve" uid="M:System.Threading.CancellationTokenSource.#ctor">
          <source>Initializes a new instance of the <ph id="ph1">&lt;see cref="T:System.Threading.CancellationTokenSource" /&gt;</ph> class.</source>
          <target state="translated">Инициализирует новый экземпляр класса <ph id="ph1">&lt;see cref="T:System.Threading.CancellationTokenSource" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve" uid="M:System.Threading.CancellationTokenSource.#ctor(System.Int32)">
          <source>The time interval in milliseconds to wait before canceling this <ph id="ph1">&lt;see cref="T:System.Threading.CancellationTokenSource" /&gt;</ph>.</source>
          <target state="translated">Интервал времени ожидания в миллисекундах перед отменой <ph id="ph1">&lt;see cref="T:System.Threading.CancellationTokenSource" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve" uid="M:System.Threading.CancellationTokenSource.#ctor(System.Int32)">
          <source>Initializes a new instance of the <ph id="ph1">&lt;see cref="T:System.Threading.CancellationTokenSource" /&gt;</ph> class that will be canceled after the specified delay in milliseconds.</source>
          <target state="translated">Инициализирует новый экземпляр класса <ph id="ph1">&lt;see cref="T:System.Threading.CancellationTokenSource" /&gt;</ph>, который будет отменен после указанной задержки (в миллисекундах).</target>       </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.CancellationTokenSource.#ctor(System.Int32)">
          <source>The countdown for the <ph id="ph1">`millisecondsDelay`</ph> starts during the call to the constructor.</source>
          <target state="translated">Отсчет <ph id="ph1">`millisecondsDelay`</ph> запускается во время вызова конструктора.</target>       </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.CancellationTokenSource.#ctor(System.Int32)">
          <source>When the <ph id="ph1">`millisecondsDelay`</ph> expires, the constructed <ph id="ph2">&lt;xref:System.Threading.CancellationTokenSource&gt;</ph> is canceled (if it has not been canceled already).</source>
          <target state="translated">Когда <ph id="ph1">`millisecondsDelay`</ph> истекает, построенный <ph id="ph2">&lt;xref:System.Threading.CancellationTokenSource&gt;</ph> отменяется (если оно не было отменено уже).</target>       </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.CancellationTokenSource.#ctor(System.Int32)">
          <source>Subsequent calls to <ph id="ph1">&lt;xref:System.Threading.CancellationTokenSource.CancelAfter%2A&gt;</ph> will reset the <ph id="ph2">`millisecondsDelay`</ph> for the constructed <ph id="ph3">&lt;xref:System.Threading.CancellationTokenSource&gt;</ph>, if it has not been canceled already.</source>
          <target state="translated">Последующие вызовы <ph id="ph1">&lt;xref:System.Threading.CancellationTokenSource.CancelAfter%2A&gt;</ph> приведет к сбросу <ph id="ph2">`millisecondsDelay`</ph> для сконструированный <ph id="ph3">&lt;xref:System.Threading.CancellationTokenSource&gt;</ph>, если он уже не отменена.</target>       </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve" uid="M:System.Threading.CancellationTokenSource.#ctor(System.Int32)">
          <source><ph id="ph1">&lt;paramref name="millisecondsDelay" /&gt;</ph> is less than -1.</source>
          <target state="translated">Значение <ph id="ph1">&lt;paramref name="millisecondsDelay" /&gt;</ph> меньше -1.</target>       </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve" uid="M:System.Threading.CancellationTokenSource.#ctor(System.TimeSpan)">
          <source>The time interval to wait before canceling this <ph id="ph1">&lt;see cref="T:System.Threading.CancellationTokenSource" /&gt;</ph>.</source>
          <target state="translated">Интервал времени ожидания в миллисекундах перед отменой <ph id="ph1">&lt;see cref="T:System.Threading.CancellationTokenSource" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve" uid="M:System.Threading.CancellationTokenSource.#ctor(System.TimeSpan)">
          <source>Initializes a new instance of the <ph id="ph1">&lt;see cref="T:System.Threading.CancellationTokenSource" /&gt;</ph> class that will be canceled after the specified time span.</source>
          <target state="translated">Инициализирует новый экземпляр класса <ph id="ph1">&lt;see cref="T:System.Threading.CancellationTokenSource" /&gt;</ph>, который будет отменен после указанного периода времени.</target>       </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.CancellationTokenSource.#ctor(System.TimeSpan)">
          <source>The countdown for the delay starts during the call to the constructor.</source>
          <target state="translated">При вызове конструктора запускает таймер задержки.</target>       </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.CancellationTokenSource.#ctor(System.TimeSpan)">
          <source>When the delay expires, the constructed <ph id="ph1">&lt;xref:System.Threading.CancellationTokenSource&gt;</ph> is canceled, if it has not been canceled already.</source>
          <target state="translated">Задержка истечения срока действия, построенный <ph id="ph1">&lt;xref:System.Threading.CancellationTokenSource&gt;</ph> отменяется, если он уже не отменена.</target>       </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.CancellationTokenSource.#ctor(System.TimeSpan)">
          <source>Subsequent calls to <ph id="ph1">&lt;xref:System.Threading.CancellationTokenSource.CancelAfter%2A&gt;</ph> will reset the delay for the constructed <ph id="ph2">&lt;xref:System.Threading.CancellationTokenSource&gt;</ph>, if it has not been canceled already.</source>
          <target state="translated">Последующие вызовы <ph id="ph1">&lt;xref:System.Threading.CancellationTokenSource.CancelAfter%2A&gt;</ph> приведет к сбросу задержки для сконструированный <ph id="ph2">&lt;xref:System.Threading.CancellationTokenSource&gt;</ph>, если он уже не отменена.</target>       </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve" uid="M:System.Threading.CancellationTokenSource.#ctor(System.TimeSpan)">
          <source><ph id="ph1">&lt;paramref name="delay" /&gt;</ph><ph id="ph2">
</ph><ph id="ph3">&lt;see langword="." /&gt;</ph><ph id="ph4">
</ph><ph id="ph5">&lt;see cref="P:System.TimeSpan.TotalMilliseconds" /&gt;</ph> is less than -1 or greater than <ph id="ph6">&lt;see cref="F:System.Int32.MaxValue" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="delay" /&gt;</ph><ph id="ph2">
</ph><ph id="ph3">&lt;see langword="." /&gt;</ph><ph id="ph4">
</ph><ph id="ph5">&lt;see cref="P:System.TimeSpan.TotalMilliseconds" /&gt;</ph> меньше –1 или больше <ph id="ph6">&lt;see cref="F:System.Int32.MaxValue" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve" uid="M:System.Threading.CancellationTokenSource.#ctor(System.TimeSpan)">
          <source><ph id="ph1">&lt;paramref name="delay" /&gt;</ph><ph id="ph2">
</ph><ph id="ph3">&lt;see langword="." /&gt;</ph><ph id="ph4">
</ph><ph id="ph5">&lt;see cref="P:System.TimeSpan.TotalMilliseconds" /&gt;</ph> is less than -1 or greater than <ph id="ph6">&lt;see cref="F:System.Int32.MaxValue" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="delay" /&gt;</ph><ph id="ph2">
</ph><ph id="ph3">&lt;see langword="." /&gt;</ph><ph id="ph4">
</ph><ph id="ph5">&lt;see cref="P:System.TimeSpan.TotalMilliseconds" /&gt;</ph> меньше –1 или больше <ph id="ph6">&lt;see cref="F:System.Int32.MaxValue" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve" uid="T:System.Threading.CancellationTokenSource">
          <source>Communicates a request for cancellation.</source>
          <target state="translated">Передает запрос на отмену.</target>       </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve" uid="M:System.Threading.CancellationTokenSource.Cancel">
          <source>Communicates a request for cancellation.</source>
          <target state="translated">Передает запрос на отмену.</target>       </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.CancellationTokenSource.Cancel">
          <source>The associated <ph id="ph1">&lt;xref:System.Threading.CancellationToken&gt;</ph> will be notified of the cancellation and will transition to a state where <ph id="ph2">&lt;xref:System.Threading.CancellationToken.IsCancellationRequested%2A&gt;</ph> returns true.</source>
          <target state="translated">Связанный <ph id="ph1">&lt;xref:System.Threading.CancellationToken&gt;</ph> будет уведомлен о отмену и перейдет в состояние где <ph id="ph2">&lt;xref:System.Threading.CancellationToken.IsCancellationRequested%2A&gt;</ph> возвращает значение true.</target>       </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.CancellationTokenSource.Cancel">
          <source>Any callbacks or cancelable operations registered with the <ph id="ph1">&lt;xref:System.Threading.CancellationToken&gt;</ph> will be executed.</source>
          <target state="translated">Все обратные вызовы и отменяемые операции зарегистрирована <ph id="ph1">&lt;xref:System.Threading.CancellationToken&gt;</ph> будет выполняться.</target>       </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.CancellationTokenSource.Cancel">
          <source>We recommend that cancelable operations and callbacks registered with <ph id="ph1">&lt;xref:System.Threading.CancellationToken&gt;</ph> not throw exceptions.</source>
          <target state="translated">Мы рекомендуем, обратные вызовы и отменяемые операции зарегистрированы <ph id="ph1">&lt;xref:System.Threading.CancellationToken&gt;</ph> не вызывают исключений.</target>       </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.CancellationTokenSource.Cancel">
          <source>This overload of Cancel will aggregate any exceptions thrown into an <ph id="ph1">&lt;xref:System.AggregateException&gt;</ph>, such that one callback throwing an exception will not prevent other registered callbacks from being executed.</source>
          <target state="translated">Эта перегрузка Cancel объединит все исключения в <ph id="ph1">&lt;xref:System.AggregateException&gt;</ph>, таким образом, что один метод обратного вызова, вызывая исключение, не будет препятствовать при выполнении других зарегистрированных обратных вызовов.</target>       </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.CancellationTokenSource.Cancel">
          <source>The following example uses a random number generator to emulate a data collection application that reads 10 integral values from eleven different instruments.</source>
          <target state="translated">В следующем примере генератора случайных чисел для эмуляции приложение коллекции данных, которое считывает из одиннадцать различные инструменты 10 целочисленных значений.</target>       </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.CancellationTokenSource.Cancel">
          <source>A value of zero indicates that the measurement has failed for one instrument, in which case the operation should be cancelled and no overall mean should be computed.</source>
          <target state="translated">Нулевое значение указывает на сбой измерение для одного инструмента, в этом случае отмены операции и не общее среднее значение должно быть вычислено.</target>       </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.CancellationTokenSource.Cancel">
          <source>To handle the possible cancellation of the operation, the example instantiates a <ph id="ph1">&lt;xref:System.Threading.CancellationTokenSource&gt;</ph> object that generates a cancellation token which is passed to a <ph id="ph2">&lt;xref:System.Threading.Tasks.TaskFactory&gt;</ph> object.</source>
          <target state="translated">Для обработки возможных Отмена операции, в примере создается экземпляр <ph id="ph1">&lt;xref:System.Threading.CancellationTokenSource&gt;</ph> объект, который создает токен отмены, который передается <ph id="ph2">&lt;xref:System.Threading.Tasks.TaskFactory&gt;</ph> объекта.</target>       </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.CancellationTokenSource.Cancel">
          <source>The <ph id="ph1">&lt;xref:System.Threading.Tasks.TaskFactory&gt;</ph> object in turn passes the cancellation token to each of the tasks responsible for collecting readings for a particular instrument.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Threading.Tasks.TaskFactory&gt;</ph> Объект, в свою очередь передает токен отмены для каждой из задач отвечать за сбор показания для конкретного инструмента.</target>       </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.CancellationTokenSource.Cancel">
          <source>The <ph id="ph1">&lt;xref:System.Threading.Tasks.TaskFactory.ContinueWhenAll%60%602%28System.Threading.Tasks.Task%7B%60%600%7D%5B%5D%2CSystem.Func%7BSystem.Threading.Tasks.Task%7B%60%600%7D%5B%5D%2C%60%601%7D%2CSystem.Threading.CancellationToken%29?displayProperty=nameWithType&gt;</ph> method is called to ensure that the mean is computed only after all readings have been gathered successfully.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Threading.Tasks.TaskFactory.ContinueWhenAll%60%602%28System.Threading.Tasks.Task%7B%60%600%7D%5B%5D%2CSystem.Func%7BSystem.Threading.Tasks.Task%7B%60%600%7D%5B%5D%2C%60%601%7D%2CSystem.Threading.CancellationToken%29?displayProperty=nameWithType&gt;</ph> Метод вызывается, чтобы убедиться, что среднее значение вычисляется только в том случае, если все показания были собраны успешно.</target>       </trans-unit>
        <trans-unit id="153" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.CancellationTokenSource.Cancel">
          <source>If a task has not because it has been cancelled, the call to the <ph id="ph1">&lt;xref:System.Threading.Tasks.TaskFactory.ContinueWhenAll%2A?displayProperty=nameWithType&gt;</ph> method throws an exception.</source>
          <target state="translated">Если задача имеет не так, как оно было отменено, вызов <ph id="ph1">&lt;xref:System.Threading.Tasks.TaskFactory.ContinueWhenAll%2A?displayProperty=nameWithType&gt;</ph> метод создает исключение.</target>       </trans-unit>
        <trans-unit id="154" translate="yes" xml:space="preserve" uid="M:System.Threading.CancellationTokenSource.Cancel">
          <source>This <ph id="ph1">&lt;see cref="T:System.Threading.CancellationTokenSource" /&gt;</ph> has been disposed.</source>
          <target state="translated">Данный объект <ph id="ph1">&lt;see cref="T:System.Threading.CancellationTokenSource" /&gt;</ph> был удален.</target>       </trans-unit>
        <trans-unit id="155" translate="yes" xml:space="preserve" uid="M:System.Threading.CancellationTokenSource.Cancel">
          <source>An aggregate exception containing all the exceptions thrown by the registered callbacks on the associated <ph id="ph1">&lt;see cref="T:System.Threading.CancellationToken" /&gt;</ph>.</source>
          <target state="translated">Статистическое исключение, содержащее все исключения, созданные зарегистрированными обратными вызовами на связанном <ph id="ph1">&lt;see cref="T:System.Threading.CancellationToken" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="156" translate="yes" xml:space="preserve" uid="M:System.Threading.CancellationTokenSource.Cancel(System.Boolean)">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph> if exceptions should immediately propagate; otherwise, <ph id="ph2">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;see langword="true" /&gt;</ph>, если исключения нужно распространять немедленно; в противном случае — значение <ph id="ph2">&lt;see langword="false" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="157" translate="yes" xml:space="preserve" uid="M:System.Threading.CancellationTokenSource.Cancel(System.Boolean)">
          <source>Communicates a request for cancellation, and specifies whether remaining callbacks and cancelable operations should be processed if an exception occurs.</source>
          <target state="translated">Передает запрос отмены и определяет, будут ли последующие обратные вызовы и отменяемые операции обрабатываться при возникновении исключения.</target>       </trans-unit>
        <trans-unit id="158" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.CancellationTokenSource.Cancel(System.Boolean)">
          <source>The associated <ph id="ph1">&lt;xref:System.Threading.CancellationToken&gt;</ph> will be notified of the cancellation and will transition to a state where <ph id="ph2">&lt;xref:System.Threading.CancellationToken.IsCancellationRequested%2A&gt;</ph> returns <ph id="ph3">`true`</ph>.</source>
          <target state="translated">Связанный <ph id="ph1">&lt;xref:System.Threading.CancellationToken&gt;</ph> будет уведомлен о отмену и перейдет в состояние где <ph id="ph2">&lt;xref:System.Threading.CancellationToken.IsCancellationRequested%2A&gt;</ph> возвращает <ph id="ph3">`true`</ph>.</target>       </trans-unit>
        <trans-unit id="159" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.CancellationTokenSource.Cancel(System.Boolean)">
          <source>Any callbacks or cancelable operations registered with the <ph id="ph1">&lt;xref:System.Threading.CancellationToken&gt;</ph> will be executed.</source>
          <target state="translated">Все обратные вызовы и отменяемые операции зарегистрирована <ph id="ph1">&lt;xref:System.Threading.CancellationToken&gt;</ph> будет выполняться.</target>       </trans-unit>
        <trans-unit id="160" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.CancellationTokenSource.Cancel(System.Boolean)">
          <source>Callbacks will be executed synchronously in LIFO order.</source>
          <target state="translated">Обратные вызовы выполняется синхронно в порядке LIFO.</target>       </trans-unit>
        <trans-unit id="161" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.CancellationTokenSource.Cancel(System.Boolean)">
          <source>We recommend that cancelable operations and callbacks registered with <ph id="ph1">&lt;xref:System.Threading.CancellationToken&gt;</ph> not throw exceptions.</source>
          <target state="translated">Мы рекомендуем, обратные вызовы и отменяемые операции зарегистрированы <ph id="ph1">&lt;xref:System.Threading.CancellationToken&gt;</ph> не вызывают исключений.</target>       </trans-unit>
        <trans-unit id="162" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.CancellationTokenSource.Cancel(System.Boolean)">
          <source>If <ph id="ph1">`throwOnFirstException`</ph> is <ph id="ph2">`true`</ph>, an exception will immediately propagate out of the call to <ph id="ph3">&lt;xref:System.Threading.CancellationTokenSource.Cancel%2A&gt;</ph>, preventing the remaining callbacks and cancelable operations from being processed.</source>
          <target state="translated">Если <ph id="ph1">`throwOnFirstException`</ph> — <ph id="ph2">`true`</ph>, исключение немедленно распространяется вне вызова <ph id="ph3">&lt;xref:System.Threading.CancellationTokenSource.Cancel%2A&gt;</ph>, предотвращает последующие обратные вызовы и отменяемые операции из процесса обработки.</target>       </trans-unit>
        <trans-unit id="163" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.CancellationTokenSource.Cancel(System.Boolean)">
          <source>If <ph id="ph1">`throwOnFirstException`</ph> is <ph id="ph2">`false`</ph>, this overload will aggregate any exceptions thrown into an <ph id="ph3">&lt;xref:System.AggregateException&gt;</ph>, such that one callback throwing an exception will not prevent other registered callbacks from being executed.</source>
          <target state="translated">Если <ph id="ph1">`throwOnFirstException`</ph> — <ph id="ph2">`false`</ph>, эта перегрузка объединит все исключения в <ph id="ph3">&lt;xref:System.AggregateException&gt;</ph>, таким образом, что один метод обратного вызова, вызывая исключение, не будет препятствовать при выполнении других зарегистрированных обратных вызовов.</target>       </trans-unit>
        <trans-unit id="164" translate="yes" xml:space="preserve" uid="M:System.Threading.CancellationTokenSource.Cancel(System.Boolean)">
          <source>This <ph id="ph1">&lt;see cref="T:System.Threading.CancellationTokenSource" /&gt;</ph> has been disposed.</source>
          <target state="translated">Данный объект <ph id="ph1">&lt;see cref="T:System.Threading.CancellationTokenSource" /&gt;</ph> был удален.</target>       </trans-unit>
        <trans-unit id="165" translate="yes" xml:space="preserve" uid="M:System.Threading.CancellationTokenSource.Cancel(System.Boolean)">
          <source>An aggregate exception containing all the exceptions thrown by the registered callbacks on the associated <ph id="ph1">&lt;see cref="T:System.Threading.CancellationToken" /&gt;</ph>.</source>
          <target state="translated">Статистическое исключение, содержащее все исключения, созданные зарегистрированными обратными вызовами на связанном <ph id="ph1">&lt;see cref="T:System.Threading.CancellationToken" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="166" translate="yes" xml:space="preserve" uid="T:System.Threading.CancellationTokenSource">
          <source>Schedules a cancel operation on this <ph id="ph1">&lt;see cref="T:System.Threading.CancellationTokenSource" /&gt;</ph>.</source>
          <target state="translated">Планирует операцию отмены для данного объекта <ph id="ph1">&lt;see cref="T:System.Threading.CancellationTokenSource" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="167" translate="yes" xml:space="preserve" uid="M:System.Threading.CancellationTokenSource.CancelAfter(System.Int32)">
          <source>The time span to wait before canceling this <ph id="ph1">&lt;see cref="T:System.Threading.CancellationTokenSource" /&gt;</ph>.</source>
          <target state="translated">Интервал времени ожидания перед отменой этого объекта <ph id="ph1">&lt;see cref="T:System.Threading.CancellationTokenSource" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="168" translate="yes" xml:space="preserve" uid="M:System.Threading.CancellationTokenSource.CancelAfter(System.Int32)">
          <source>Schedules a cancel operation on this <ph id="ph1">&lt;see cref="T:System.Threading.CancellationTokenSource" /&gt;</ph> after the specified number of milliseconds.</source>
          <target state="translated">Планирует операцию отмены для данного объекта <ph id="ph1">&lt;see cref="T:System.Threading.CancellationTokenSource" /&gt;</ph> после указанного числа миллисекунд.</target>       </trans-unit>
        <trans-unit id="169" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.CancellationTokenSource.CancelAfter(System.Int32)">
          <source>The countdown for the <ph id="ph1">`millisecondsDelay`</ph> starts during this call.</source>
          <target state="translated">Отсчет <ph id="ph1">`millisecondsDelay`</ph> запускается во время данного вызова.</target>       </trans-unit>
        <trans-unit id="170" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.CancellationTokenSource.CancelAfter(System.Int32)">
          <source>When the <ph id="ph1">`millisecondsDelay`</ph> expires, this <ph id="ph2">&lt;xref:System.Threading.CancellationTokenSource&gt;</ph> is canceled, if it has not been canceled already.</source>
          <target state="translated">Когда <ph id="ph1">`millisecondsDelay`</ph> истекает, это <ph id="ph2">&lt;xref:System.Threading.CancellationTokenSource&gt;</ph> отменяется, если он уже не отменена.</target>       </trans-unit>
        <trans-unit id="171" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.CancellationTokenSource.CancelAfter(System.Int32)">
          <source>Subsequent calls to CancelAfter will reset the <ph id="ph1">`millisecondsDelay`</ph> for this <ph id="ph2">&lt;xref:System.Threading.CancellationTokenSource&gt;</ph>, if it has not been canceled already.</source>
          <target state="translated">Последующие вызовы CancelAfter приведет к сбросу <ph id="ph1">`millisecondsDelay`</ph> для данного <ph id="ph2">&lt;xref:System.Threading.CancellationTokenSource&gt;</ph>, если он уже не отменена.</target>       </trans-unit>
        <trans-unit id="172" translate="yes" xml:space="preserve" uid="M:System.Threading.CancellationTokenSource.CancelAfter(System.Int32)">
          <source>The exception thrown when this <ph id="ph1">&lt;see cref="T:System.Threading.CancellationTokenSource" /&gt;</ph> has been disposed.</source>
          <target state="translated">Исключение, возникающее, если этот объект <ph id="ph1">&lt;see cref="T:System.Threading.CancellationTokenSource" /&gt;</ph> удален.</target>       </trans-unit>
        <trans-unit id="173" translate="yes" xml:space="preserve" uid="M:System.Threading.CancellationTokenSource.CancelAfter(System.Int32)">
          <source>The exception thrown when <ph id="ph1">&lt;paramref name="millisecondsDelay" /&gt;</ph> is less than -1.</source>
          <target state="translated">Исключение, которое возникает, если значение параметра <ph id="ph1">&lt;paramref name="millisecondsDelay" /&gt;</ph> меньше -1.</target>       </trans-unit>
        <trans-unit id="174" translate="yes" xml:space="preserve" uid="M:System.Threading.CancellationTokenSource.CancelAfter(System.TimeSpan)">
          <source>The time span to wait before canceling this <ph id="ph1">&lt;see cref="T:System.Threading.CancellationTokenSource" /&gt;</ph>.</source>
          <target state="translated">Интервал времени ожидания перед отменой этого объекта <ph id="ph1">&lt;see cref="T:System.Threading.CancellationTokenSource" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="175" translate="yes" xml:space="preserve" uid="M:System.Threading.CancellationTokenSource.CancelAfter(System.TimeSpan)">
          <source>Schedules a cancel operation on this <ph id="ph1">&lt;see cref="T:System.Threading.CancellationTokenSource" /&gt;</ph> after the specified time span.</source>
          <target state="translated">Планирует операцию отмены для данного объекта <ph id="ph1">&lt;see cref="T:System.Threading.CancellationTokenSource" /&gt;</ph> после указанного периода времени.</target>       </trans-unit>
        <trans-unit id="176" translate="yes" xml:space="preserve" uid="M:System.Threading.CancellationTokenSource.CancelAfter(System.TimeSpan)">
          <source>The exception thrown when this <ph id="ph1">&lt;see cref="T:System.Threading.CancellationTokenSource" /&gt;</ph> has been disposed.</source>
          <target state="translated">Исключение, возникающее, если этот объект <ph id="ph1">&lt;see cref="T:System.Threading.CancellationTokenSource" /&gt;</ph> удален.</target>       </trans-unit>
        <trans-unit id="177" translate="yes" xml:space="preserve" uid="M:System.Threading.CancellationTokenSource.CancelAfter(System.TimeSpan)">
          <source>The exception that is thrown when <ph id="ph1">&lt;paramref name="delay" /&gt;</ph> is less than -1 or greater than Int32.MaxValue.</source>
          <target state="translated">Исключение, которое возникает, если <ph id="ph1">&lt;paramref name="delay" /&gt;</ph> меньше -1 или больше Int32.MaxValue.</target>       </trans-unit>
        <trans-unit id="178" translate="yes" xml:space="preserve" uid="T:System.Threading.CancellationTokenSource">
          <source>Creates a <ph id="ph1">&lt;see cref="T:System.Threading.CancellationTokenSource" /&gt;</ph> that will be in the canceled state when any of the source tokens are in the canceled state.</source>
          <target state="translated">Создает объект <ph id="ph1">&lt;see cref="T:System.Threading.CancellationTokenSource" /&gt;</ph>, который будет иметь отмененное состояние, если какой-либо из исходных токенов находится в отмененном состоянии.</target>       </trans-unit>
        <trans-unit id="179" translate="yes" xml:space="preserve" uid="M:System.Threading.CancellationTokenSource.CreateLinkedTokenSource(System.Threading.CancellationToken[])">
          <source>An array that contains the cancellation token instances to observe.</source>
          <target state="translated">Массив, содержащий экземпляры токена отмены для наблюдения.</target>       </trans-unit>
        <trans-unit id="180" translate="yes" xml:space="preserve" uid="M:System.Threading.CancellationTokenSource.CreateLinkedTokenSource(System.Threading.CancellationToken[])">
          <source>Creates a <ph id="ph1">&lt;see cref="T:System.Threading.CancellationTokenSource" /&gt;</ph> that will be in the canceled state when any of the source tokens in the specified array are in the canceled state.</source>
          <target state="translated">Создает объект <ph id="ph1">&lt;see cref="T:System.Threading.CancellationTokenSource" /&gt;</ph>, который будет иметь отмененное состояние, если любой из исходных токенов в заданном массиве находится в отмененном состоянии.</target>       </trans-unit>
        <trans-unit id="181" translate="yes" xml:space="preserve" uid="M:System.Threading.CancellationTokenSource.CreateLinkedTokenSource(System.Threading.CancellationToken[])">
          <source>A <ph id="ph1">&lt;see cref="T:System.Threading.CancellationTokenSource" /&gt;</ph> that is linked to the source tokens.</source>
          <target state="translated">Объект <ph id="ph1">&lt;see cref="T:System.Threading.CancellationTokenSource" /&gt;</ph>, связанный с исходными токенами.</target>       </trans-unit>
        <trans-unit id="182" translate="yes" xml:space="preserve" uid="M:System.Threading.CancellationTokenSource.CreateLinkedTokenSource(System.Threading.CancellationToken[])">
          <source>A <ph id="ph1">&lt;see cref="T:System.Threading.CancellationTokenSource" /&gt;</ph> associated with one of the source tokens has been disposed.</source>
          <target state="translated">Объект <ph id="ph1">&lt;see cref="T:System.Threading.CancellationTokenSource" /&gt;</ph>, связанный с одним исходным токеном, был удален.</target>       </trans-unit>
        <trans-unit id="183" translate="yes" xml:space="preserve" uid="M:System.Threading.CancellationTokenSource.CreateLinkedTokenSource(System.Threading.CancellationToken[])">
          <source><ph id="ph1">&lt;paramref name="tokens" /&gt;</ph> is <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated">Свойство <ph id="ph1">&lt;paramref name="tokens" /&gt;</ph> имеет значение <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="184" translate="yes" xml:space="preserve" uid="M:System.Threading.CancellationTokenSource.CreateLinkedTokenSource(System.Threading.CancellationToken[])">
          <source><ph id="ph1">&lt;paramref name="tokens" /&gt;</ph> is empty.</source>
          <target state="translated">Параметр <ph id="ph1">&lt;paramref name="tokens" /&gt;</ph> пуст.</target>       </trans-unit>
        <trans-unit id="185" translate="yes" xml:space="preserve" uid="M:System.Threading.CancellationTokenSource.CreateLinkedTokenSource(System.Threading.CancellationToken,System.Threading.CancellationToken)">
          <source>The first cancellation token to observe.</source>
          <target state="translated">Первый токен отмены, который следует контролировать.</target>       </trans-unit>
        <trans-unit id="186" translate="yes" xml:space="preserve" uid="M:System.Threading.CancellationTokenSource.CreateLinkedTokenSource(System.Threading.CancellationToken,System.Threading.CancellationToken)">
          <source>The second cancellation token to observe.</source>
          <target state="translated">Второй токен отмены, который следует контролировать.</target>       </trans-unit>
        <trans-unit id="187" translate="yes" xml:space="preserve" uid="M:System.Threading.CancellationTokenSource.CreateLinkedTokenSource(System.Threading.CancellationToken,System.Threading.CancellationToken)">
          <source>Creates a <ph id="ph1">&lt;see cref="T:System.Threading.CancellationTokenSource" /&gt;</ph> that will be in the canceled state when any of the source tokens are in the canceled state.</source>
          <target state="translated">Создает объект <ph id="ph1">&lt;see cref="T:System.Threading.CancellationTokenSource" /&gt;</ph>, который будет иметь отмененное состояние, если какой-либо из исходных токенов находится в отмененном состоянии.</target>       </trans-unit>
        <trans-unit id="188" translate="yes" xml:space="preserve" uid="M:System.Threading.CancellationTokenSource.CreateLinkedTokenSource(System.Threading.CancellationToken,System.Threading.CancellationToken)">
          <source>A <ph id="ph1">&lt;see cref="T:System.Threading.CancellationTokenSource" /&gt;</ph> that is linked to the source tokens.</source>
          <target state="translated">Объект <ph id="ph1">&lt;see cref="T:System.Threading.CancellationTokenSource" /&gt;</ph>, связанный с исходными токенами.</target>       </trans-unit>
        <trans-unit id="189" translate="yes" xml:space="preserve" uid="M:System.Threading.CancellationTokenSource.CreateLinkedTokenSource(System.Threading.CancellationToken,System.Threading.CancellationToken)">
          <source>A <ph id="ph1">&lt;see cref="T:System.Threading.CancellationTokenSource" /&gt;</ph> associated with one of the source tokens has been disposed.</source>
          <target state="translated">Объект <ph id="ph1">&lt;see cref="T:System.Threading.CancellationTokenSource" /&gt;</ph>, связанный с одним исходным токеном, был удален.</target>       </trans-unit>
        <trans-unit id="190" translate="yes" xml:space="preserve" uid="T:System.Threading.CancellationTokenSource">
          <source>Releases all resources used by the current instance of the <ph id="ph1">&lt;see cref="T:System.Threading.CancellationTokenSource" /&gt;</ph> class.</source>
          <target state="translated">Освобождает все ресурсы, используемые текущим экземпляром класса <ph id="ph1">&lt;see cref="T:System.Threading.CancellationTokenSource" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="191" translate="yes" xml:space="preserve" uid="M:System.Threading.CancellationTokenSource.Dispose">
          <source>Releases all resources used by the current instance of the <ph id="ph1">&lt;see cref="T:System.Threading.CancellationTokenSource" /&gt;</ph> class.</source>
          <target state="translated">Освобождает все ресурсы, используемые текущим экземпляром класса <ph id="ph1">&lt;see cref="T:System.Threading.CancellationTokenSource" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="192" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.CancellationTokenSource.Dispose">
          <source>Call <ph id="ph1">`Dispose`</ph> when you are finished using the <ph id="ph2">&lt;xref:System.Threading.CancellationTokenSource&gt;</ph>.</source>
          <target state="translated">Вызовите метод <ph id="ph1">`Dispose`</ph> по окончании использования класса <ph id="ph2">&lt;xref:System.Threading.CancellationTokenSource&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="193" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.CancellationTokenSource.Dispose">
          <source>The <ph id="ph1">`Dispose`</ph> method leaves the <ph id="ph2">&lt;xref:System.Threading.CancellationTokenSource&gt;</ph> in an unusable state.</source>
          <target state="translated">Метод <ph id="ph1">`Dispose`</ph> оставляет класс <ph id="ph2">&lt;xref:System.Threading.CancellationTokenSource&gt;</ph> в непригодном для использования состоянии.</target>       </trans-unit>
        <trans-unit id="194" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.CancellationTokenSource.Dispose">
          <source>After calling <ph id="ph1">`Dispose`</ph>, you must release all references to the <ph id="ph2">&lt;xref:System.Threading.CancellationTokenSource&gt;</ph> so the garbage collector can reclaim the memory that the <ph id="ph3">&lt;xref:System.Threading.CancellationTokenSource&gt;</ph> was occupying.</source>
          <target state="translated">После вызова метода <ph id="ph1">`Dispose`</ph>, необходимо освободить все ссылки на <ph id="ph2">&lt;xref:System.Threading.CancellationTokenSource&gt;</ph> , сборщик мусора мог освободить память, <ph id="ph3">&lt;xref:System.Threading.CancellationTokenSource&gt;</ph> занимаемую.</target>       </trans-unit>
        <trans-unit id="195" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.CancellationTokenSource.Dispose">
          <source>For more information, see <bpt id="p1">[</bpt>Cleaning Up Unmanaged Resources<ept id="p1">](~/docs/standard/garbage-collection/unmanaged.md)</ept> and <bpt id="p2">[</bpt>Implementing a Dispose Method<ept id="p2">](~/docs/standard/garbage-collection/implementing-dispose.md)</ept>.</source>
          <target state="translated">Дополнительные сведения см. в разделе <bpt id="p1">[</bpt>очистки неуправляемых ресурсов<ept id="p1">](~/docs/standard/garbage-collection/unmanaged.md)</ept> и <bpt id="p2">[</bpt>метода<ept id="p2">](~/docs/standard/garbage-collection/implementing-dispose.md)</ept>.</target>       </trans-unit>
        <trans-unit id="196" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.CancellationTokenSource.Dispose">
          <source>Always call <ph id="ph1">`Dispose`</ph> before you release your last reference to the <ph id="ph2">&lt;xref:System.Threading.CancellationTokenSource&gt;</ph>.</source>
          <target state="translated">Всегда вызывайте метод <ph id="ph1">`Dispose`</ph> перед освобождением последней ссылки на класс <ph id="ph2">&lt;xref:System.Threading.CancellationTokenSource&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="197" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.CancellationTokenSource.Dispose">
          <source>Otherwise, the resources it is using will not be freed until the garbage collector calls the <ph id="ph1">&lt;xref:System.Threading.CancellationTokenSource&gt;</ph> object's <ph id="ph2">`Finalize`</ph> method.</source>
          <target state="translated">В противном случае используемые им ресурсы не будут освобождены до тех пор, пока сборщик мусора не вызовет для объекта <ph id="ph1">&lt;xref:System.Threading.CancellationTokenSource&gt;</ph> метод <ph id="ph2">`Finalize`</ph>.</target>       </trans-unit>
        <trans-unit id="198" translate="yes" xml:space="preserve" uid="M:System.Threading.CancellationTokenSource.Dispose(System.Boolean)">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph> to release both managed and unmanaged resources; <ph id="ph2">&lt;see langword="false" /&gt;</ph> to release only unmanaged resources.</source>
          <target state="translated">Значение <ph id="ph1">&lt;see langword="true" /&gt;</ph> позволяет освободить как управляемые, так и неуправляемые ресурсы; значение <ph id="ph2">&lt;see langword="false" /&gt;</ph> освобождает только неуправляемые ресурсы.</target>       </trans-unit>
        <trans-unit id="199" translate="yes" xml:space="preserve" uid="M:System.Threading.CancellationTokenSource.Dispose(System.Boolean)">
          <source>Releases the unmanaged resources used by the <ph id="ph1">&lt;see cref="T:System.Threading.CancellationTokenSource" /&gt;</ph> class and optionally releases the managed resources.</source>
          <target state="translated">Освобождает неуправляемые ресурсы, используемые классом <ph id="ph1">&lt;see cref="T:System.Threading.CancellationTokenSource" /&gt;</ph> (при необходимости освобождает и управляемые ресурсы).</target>       </trans-unit>
        <trans-unit id="200" translate="yes" xml:space="preserve" uid="P:System.Threading.CancellationTokenSource.IsCancellationRequested">
          <source>Gets whether cancellation has been requested for this <ph id="ph1">&lt;see cref="T:System.Threading.CancellationTokenSource" /&gt;</ph>.</source>
          <target state="translated">Получает значение, указывающее, есть ли для данного объекта <ph id="ph1">&lt;see cref="T:System.Threading.CancellationTokenSource" /&gt;</ph> запрос на отмену.</target>       </trans-unit>
        <trans-unit id="201" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Threading.CancellationTokenSource.IsCancellationRequested">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph> if cancellation has been requested for this <ph id="ph2">&lt;see cref="T:System.Threading.CancellationTokenSource" /&gt;</ph>; otherwise, <ph id="ph3">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated">Значение <ph id="ph1">&lt;see langword="true" /&gt;</ph>, если для данного объекта <ph id="ph2">&lt;see cref="T:System.Threading.CancellationTokenSource" /&gt;</ph> есть запрос на отмену; в противном случае — значение <ph id="ph3">&lt;see langword="false" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="202" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Threading.CancellationTokenSource.IsCancellationRequested">
          <source>This property indicates whether cancellation has been requested for this token source, such as due to a call to its <ph id="ph1">&lt;xref:System.Threading.CancellationTokenSource.Cancel%2A&gt;</ph> method.</source>
          <target state="translated">Это свойство указывает ли запрошена Отмена для этого маркера источника, например из-за вызова его <ph id="ph1">&lt;xref:System.Threading.CancellationTokenSource.Cancel%2A&gt;</ph> метод.</target>       </trans-unit>
        <trans-unit id="203" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Threading.CancellationTokenSource.IsCancellationRequested">
          <source>If this property returns <ph id="ph1">`true`</ph>, it only guarantees that cancellation has been requested.</source>
          <target state="translated">Если это свойство возвращает <ph id="ph1">`true`</ph>, оно гарантирует только что запрошена отмена.</target>       </trans-unit>
        <trans-unit id="204" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Threading.CancellationTokenSource.IsCancellationRequested">
          <source>It does not guarantee that every handler registered with the corresponding token has finished executing, nor that cancellation requests have finished propagating to all registered handlers.</source>
          <target state="translated">Он не гарантирует, что каждый обработчик, зарегистрированный с соответствующим токеном завершил выполнение или что запросы отмены завершено распространение всем зарегистрированным обработчикам.</target>       </trans-unit>
        <trans-unit id="205" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Threading.CancellationTokenSource.IsCancellationRequested">
          <source>Additional synchronization may be required, particularly in situations where related objects are being canceled concurrently.</source>
          <target state="translated">Дополнительная синхронизация может потребоваться, особенно в тех случаях, где связанные объекты отменяются одновременно.</target>       </trans-unit>
        <trans-unit id="206" translate="yes" xml:space="preserve" uid="P:System.Threading.CancellationTokenSource.Token">
          <source>Gets the <ph id="ph1">&lt;see cref="T:System.Threading.CancellationToken" /&gt;</ph> associated with this <ph id="ph2">&lt;see cref="T:System.Threading.CancellationTokenSource" /&gt;</ph>.</source>
          <target state="translated">Возвращает объект <ph id="ph1">&lt;see cref="T:System.Threading.CancellationToken" /&gt;</ph>, связанный с этим объектом <ph id="ph2">&lt;see cref="T:System.Threading.CancellationTokenSource" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="207" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Threading.CancellationTokenSource.Token">
          <source>The <ph id="ph1">&lt;see cref="T:System.Threading.CancellationToken" /&gt;</ph> associated with this <ph id="ph2">&lt;see cref="T:System.Threading.CancellationTokenSource" /&gt;</ph>.</source>
          <target state="translated">Рабочая область метаданных <ph id="ph1">&lt;see cref="T:System.Threading.CancellationToken" /&gt;</ph>, связанная с этим соединением <ph id="ph2">&lt;see cref="T:System.Threading.CancellationTokenSource" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="208" translate="yes" xml:space="preserve" uid="P:System.Threading.CancellationTokenSource.Token">
          <source>The token source has been disposed.</source>
          <target state="translated">Источник токена был удален.</target>       </trans-unit>
      </group>
    </body>
  </file>
</xliff>