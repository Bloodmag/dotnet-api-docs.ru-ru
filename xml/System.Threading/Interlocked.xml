<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" version="1.2" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="Interlocked.xml" source-language="en-US" target-language="ru-RU">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-15c36f0" tool-company="Microsoft" />
      <xliffext:skl_file_name xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">02cd5861-7ce2-4a82-b358-31f8435a0ac5883047e940a7b189bf8c52c13e9ba85d0fb9bf82.skl</xliffext:skl_file_name>
      <xliffext:version xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">1.2</xliffext:version>
      <xliffext:ms.openlocfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">883047e940a7b189bf8c52c13e9ba85d0fb9bf82</xliffext:ms.openlocfilehash>
      <xliffext:ms.sourcegitcommit xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">d31dc2ede16f6f7bc64e90d9f897ff54c4e3869b</xliffext:ms.sourcegitcommit>
      <xliffext:ms.lasthandoff xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">04/03/2018</xliffext:ms.lasthandoff>
      <xliffext:moniker_ids xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">netcore-1.0,netcore-1.1,netcore-2.0,netcore-2.1,netframework-4.5.1,netframework-4.5.2,netframework-4.5,netframework-4.6.1,netframework-4.6.2,netframework-4.6,netframework-4.7.1,netframework-4.7,netstandard-1.0,netstandard-1.1,netstandard-1.2,netstandard-1.3,netstandard-1.4,netstandard-1.6,netstandard-2.0,xamarinandroid-7.1,xamarinios-10.8,xamarinmac-3.0</xliffext:moniker_ids>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve" uid="T:System.Threading.Interlocked">
          <source>Provides atomic operations for variables that are shared by multiple threads.</source>
          <target state="translated">Предоставляет атомарные операции для переменных, общедоступных нескольким потокам.</target>       </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Threading.Interlocked">
          <source>The methods of this class help protect against errors that can occur when the scheduler switches contexts while a thread is updating a variable that can be accessed by other threads, or when two threads are executing concurrently on separate processors.</source>
          <target state="translated">Методы этого класса защиты от ошибок, которые могут возникнуть при переключении контекстов планировщиком, пока поток обновляет переменную, доступную из других потоков или при параллельном выполнении двух потоков на отдельных процессорах.</target>       </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Threading.Interlocked">
          <source>The members of this class do not throw exceptions.</source>
          <target state="translated">Члены этого класса не вызывают исключений.</target>       </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Threading.Interlocked">
          <source>The <ph id="ph1">&lt;xref:System.Threading.Interlocked.Increment%2A&gt;</ph> and <ph id="ph2">&lt;xref:System.Threading.Interlocked.Decrement%2A&gt;</ph> methods increment or decrement a variable and store the resulting value in a single operation.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Threading.Interlocked.Increment%2A&gt;</ph> И <ph id="ph2">&lt;xref:System.Threading.Interlocked.Decrement%2A&gt;</ph> методов увеличения или уменьшения переменной и его сохранить полученное значение в одной операции.</target>       </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Threading.Interlocked">
          <source>On most computers, incrementing a variable is not an atomic operation, requiring the following steps:</source>
          <target state="translated">На большинстве компьютеров увеличение значения переменной не является атомарной операцией, требует следующих шагов:</target>       </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Threading.Interlocked">
          <source>Load a value from an instance variable into a register.</source>
          <target state="translated">Загрузить значение из переменной экземпляра в регистр.</target>       </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Threading.Interlocked">
          <source>Increment or decrement the value.</source>
          <target state="translated">Увеличить или уменьшить значение.</target>       </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Threading.Interlocked">
          <source>Store the value in the instance variable.</source>
          <target state="translated">Сохранение значения в переменной экземпляра.</target>       </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Threading.Interlocked">
          <source>If you do not use <ph id="ph1">&lt;xref:System.Threading.Interlocked.Increment%2A&gt;</ph> and <ph id="ph2">&lt;xref:System.Threading.Interlocked.Decrement%2A&gt;</ph>, a thread can be preempted after executing the first two steps.</source>
          <target state="translated">Если вы не используете <ph id="ph1">&lt;xref:System.Threading.Interlocked.Increment%2A&gt;</ph> и <ph id="ph2">&lt;xref:System.Threading.Interlocked.Decrement%2A&gt;</ph>, поток может быть прерван после выполнения первых двух шагов.</target>       </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Threading.Interlocked">
          <source>Another thread can then execute all three steps.</source>
          <target state="translated">Другой поток может затем выполнить все три шага.</target>       </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Threading.Interlocked">
          <source>When the first thread resumes execution, it overwrites the value in the instance variable, and the effect of the increment or decrement performed by the second thread is lost.</source>
          <target state="translated">Когда первый поток возобновляет выполнение, он переопределяет значение в переменной экземпляра и эффект инкремент или декремент выполняется вторым потоком теряется.</target>       </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Threading.Interlocked">
          <source>The <ph id="ph1">&lt;xref:System.Threading.Interlocked.Exchange%2A&gt;</ph> method atomically exchanges the values of the specified variables.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Threading.Interlocked.Exchange%2A&gt;</ph> Метод атомарным образом меняет местами значения указанных переменных.</target>       </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Threading.Interlocked">
          <source>The <ph id="ph1">&lt;xref:System.Threading.Interlocked.CompareExchange%2A&gt;</ph> method combines two operations: comparing two values and storing a third value in one of the variables, based on the outcome of the comparison.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Threading.Interlocked.CompareExchange%2A&gt;</ph> Метод объединяет две операции: сравнение двух значений и сохранение третьего значения в одной из переменных, в зависимости от результата сравнения.</target>       </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Threading.Interlocked">
          <source>The compare and exchange operations are performed as an atomic operation.</source>
          <target state="translated">Операции сравнения и обмена выполняются в виде атомарной операции.</target>       </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Threading.Interlocked">
          <source>The following code example shows a thread-safe resource locking mechanism.</source>
          <target state="translated">В следующем примере кода показан механизм блокировки ресурсов потокобезопасным.</target>       </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Threading.Interlocked">
          <source>This type is thread safe.</source>
          <target state="translated">Данный тип потокобезопасен.</target>       </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve" uid="T:System.Threading.Interlocked">
          <source>Adds two integers and replaces the first integer with the sum, as an atomic operation.</source>
          <target state="translated">Добавляет два целых числа и заменяет первое число на сумму (атомарная операция).</target>       </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve" uid="M:System.Threading.Interlocked.Add(System.Int32@,System.Int32)">
          <source>A variable containing the first value to be added.</source>
          <target state="translated">Переменная, содержащая первое добавляемое значение.</target>       </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve" uid="M:System.Threading.Interlocked.Add(System.Int32@,System.Int32)">
          <source>The sum of the two values is stored in <bpt id="p1">&lt;c&gt;</bpt>location1<ept id="p1">&lt;/c&gt;</ept>.</source>
          <target state="translated">Сумма двух значений сохраняется в <bpt id="p1">&lt;c&gt;</bpt>location1<ept id="p1">&lt;/c&gt;</ept>.</target>       </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve" uid="M:System.Threading.Interlocked.Add(System.Int32@,System.Int32)">
          <source>The value to be added to the integer at <bpt id="p1">&lt;c&gt;</bpt>location1<ept id="p1">&lt;/c&gt;</ept>.</source>
          <target state="translated">Значение, добавляемое к целому в <bpt id="p1">&lt;c&gt;</bpt>location1<ept id="p1">&lt;/c&gt;</ept>.</target>       </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve" uid="M:System.Threading.Interlocked.Add(System.Int32@,System.Int32)">
          <source>Adds two 32-bit integers and replaces the first integer with the sum, as an atomic operation.</source>
          <target state="translated">Добавляет два 32-разрядных целых числа и заменяет первое число на сумму в виде атомарной операции.</target>       </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve" uid="M:System.Threading.Interlocked.Add(System.Int32@,System.Int32)">
          <source>The new value stored at <ph id="ph1">&lt;paramref name="location1" /&gt;</ph>.</source>
          <target state="translated">Новое значение сохраняется в <ph id="ph1">&lt;paramref name="location1" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Interlocked.Add(System.Int32@,System.Int32)">
          <source>This method handles an overflow condition by wrapping: if the value at <ph id="ph1">`location1`</ph> is <ph id="ph2">&lt;xref:System.Int32.MaxValue?displayProperty=nameWithType&gt;</ph> and <ph id="ph3">`value`</ph> is 1, the result is <ph id="ph4">&lt;xref:System.Int32.MinValue?displayProperty=nameWithType&gt;</ph>; if <ph id="ph5">`value`</ph> is 2, the result is (<ph id="ph6">&lt;xref:System.Int32.MinValue?displayProperty=nameWithType&gt;</ph> + 1); and so on.</source>
          <target state="translated">Этот метод обрабатывает условие, заключив: Если значение по <ph id="ph1">`location1`</ph> — <ph id="ph2">&lt;xref:System.Int32.MaxValue?displayProperty=nameWithType&gt;</ph> и <ph id="ph3">`value`</ph> -1, в результате <ph id="ph4">&lt;xref:System.Int32.MinValue?displayProperty=nameWithType&gt;</ph>; Если <ph id="ph5">`value`</ph> -2, в результате (<ph id="ph6">&lt;xref:System.Int32.MinValue?displayProperty=nameWithType&gt;</ph> + 1); и т. д.</target>       </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Interlocked.Add(System.Int32@,System.Int32)">
          <source>No exception is thrown.</source>
          <target state="translated">Исключение не возникает.</target>       </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve" uid="M:System.Threading.Interlocked.Add(System.Int32@,System.Int32)">
          <source>The address of <ph id="ph1">&lt;paramref name="location1" /&gt;</ph> is a null pointer.</source>
          <target state="translated">Адрес <ph id="ph1">&lt;paramref name="location1" /&gt;</ph> является пустым указателем.</target>       </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve" uid="M:System.Threading.Interlocked.Add(System.Int64@,System.Int64)">
          <source>A variable containing the first value to be added.</source>
          <target state="translated">Переменная, содержащая первое добавляемое значение.</target>       </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve" uid="M:System.Threading.Interlocked.Add(System.Int64@,System.Int64)">
          <source>The sum of the two values is stored in <bpt id="p1">&lt;c&gt;</bpt>location1<ept id="p1">&lt;/c&gt;</ept>.</source>
          <target state="translated">Сумма двух значений сохраняется в <bpt id="p1">&lt;c&gt;</bpt>location1<ept id="p1">&lt;/c&gt;</ept>.</target>       </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve" uid="M:System.Threading.Interlocked.Add(System.Int64@,System.Int64)">
          <source>The value to be added to the integer at <bpt id="p1">&lt;c&gt;</bpt>location1<ept id="p1">&lt;/c&gt;</ept>.</source>
          <target state="translated">Значение, добавляемое к целому в <bpt id="p1">&lt;c&gt;</bpt>location1<ept id="p1">&lt;/c&gt;</ept>.</target>       </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve" uid="M:System.Threading.Interlocked.Add(System.Int64@,System.Int64)">
          <source>Adds two 64-bit integers and replaces the first integer with the sum, as an atomic operation.</source>
          <target state="translated">Добавляет два 64-разрядных целых числа и заменяет первое число на сумму в виде атомарной операции.</target>       </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve" uid="M:System.Threading.Interlocked.Add(System.Int64@,System.Int64)">
          <source>The new value stored at <ph id="ph1">&lt;paramref name="location1" /&gt;</ph>.</source>
          <target state="translated">Новое значение сохраняется в <ph id="ph1">&lt;paramref name="location1" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Interlocked.Add(System.Int64@,System.Int64)">
          <source>This method handles an overflow condition by wrapping: if the value at <ph id="ph1">`location1`</ph> is <ph id="ph2">&lt;xref:System.Int64.MaxValue?displayProperty=nameWithType&gt;</ph> and <ph id="ph3">`value`</ph> is 1, the result is <ph id="ph4">&lt;xref:System.Int64.MinValue?displayProperty=nameWithType&gt;</ph>; if <ph id="ph5">`value`</ph> is 2, the result is (<ph id="ph6">&lt;xref:System.Int64.MinValue?displayProperty=nameWithType&gt;</ph> + 1); and so on.</source>
          <target state="translated">Этот метод обрабатывает условие, заключив: Если значение по <ph id="ph1">`location1`</ph> — <ph id="ph2">&lt;xref:System.Int64.MaxValue?displayProperty=nameWithType&gt;</ph> и <ph id="ph3">`value`</ph> -1, в результате <ph id="ph4">&lt;xref:System.Int64.MinValue?displayProperty=nameWithType&gt;</ph>; Если <ph id="ph5">`value`</ph> -2, в результате (<ph id="ph6">&lt;xref:System.Int64.MinValue?displayProperty=nameWithType&gt;</ph> + 1); и т. д.</target>       </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Interlocked.Add(System.Int64@,System.Int64)">
          <source>No exception is thrown.</source>
          <target state="translated">Исключение не возникает.</target>       </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Interlocked.Add(System.Int64@,System.Int64)">
          <source>The <ph id="ph1">&lt;xref:System.Threading.Interlocked.Read%2A&gt;</ph> method and the 64-bit overloads of the <ph id="ph2">&lt;xref:System.Threading.Interlocked.Increment%2A&gt;</ph>, <ph id="ph3">&lt;xref:System.Threading.Interlocked.Decrement%2A&gt;</ph>, and <ph id="ph4">&lt;xref:System.Threading.Interlocked.Add%2A&gt;</ph> methods are truly atomic only on systems where a <ph id="ph5">&lt;xref:System.IntPtr?displayProperty=nameWithType&gt;</ph> is 64 bits long.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Threading.Interlocked.Read%2A&gt;</ph> Метод и 64-разрядных перегрузки <ph id="ph2">&lt;xref:System.Threading.Interlocked.Increment%2A&gt;</ph>, <ph id="ph3">&lt;xref:System.Threading.Interlocked.Decrement%2A&gt;</ph>, и <ph id="ph4">&lt;xref:System.Threading.Interlocked.Add%2A&gt;</ph> методы атомарны действительно только в системах, где <ph id="ph5">&lt;xref:System.IntPtr?displayProperty=nameWithType&gt;</ph> long 64 бита.</target>       </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Interlocked.Add(System.Int64@,System.Int64)">
          <source>On other systems, these methods are atomic with respect to each other, but not with respect to other means of accessing the data.</source>
          <target state="translated">В других системах эти методы являются атомарными по отношению друг к другу, но не по отношению к другим способом доступа к данным.</target>       </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Interlocked.Add(System.Int64@,System.Int64)">
          <source>Thus, to be thread safe on 32-bit systems, any access to a 64-bit value must be made through the members of the <ph id="ph1">&lt;xref:System.Threading.Interlocked&gt;</ph> class.</source>
          <target state="translated">Таким образом, чтобы быть поточно-ориентированным на 32-разрядных системах, доступ к 64-разрядное значение необходимо вносить с помощью члены <ph id="ph1">&lt;xref:System.Threading.Interlocked&gt;</ph> класса.</target>       </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve" uid="M:System.Threading.Interlocked.Add(System.Int64@,System.Int64)">
          <source>The address of <ph id="ph1">&lt;paramref name="location1" /&gt;</ph> is a null pointer.</source>
          <target state="translated">Адрес <ph id="ph1">&lt;paramref name="location1" /&gt;</ph> является пустым указателем.</target>       </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve" uid="T:System.Threading.Interlocked">
          <source>Compares two values for equality and, if they are equal, replaces the first value.</source>
          <target state="translated">Сравнивает два значения на равенство и, если они равны, заменяет первое.</target>       </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve" uid="M:System.Threading.Interlocked.CompareExchange(System.Double@,System.Double,System.Double)">
          <source>The destination, whose value is compared with <bpt id="p1">&lt;c&gt;</bpt>comparand<ept id="p1">&lt;/c&gt;</ept> and possibly replaced.</source>
          <target state="translated">Целевой объект, значение которого сравнивается с объектом <bpt id="p1">&lt;c&gt;</bpt>comparand<ept id="p1">&lt;/c&gt;</ept> и может быть заменено.</target>       </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve" uid="M:System.Threading.Interlocked.CompareExchange(System.Double@,System.Double,System.Double)">
          <source>The value that replaces the destination value if the comparison results in equality.</source>
          <target state="translated">Значение, которым будет заменено целевое значение, если проверка покажет равенство.</target>       </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve" uid="M:System.Threading.Interlocked.CompareExchange(System.Double@,System.Double,System.Double)">
          <source>The value that is compared to the value at <bpt id="p1">&lt;c&gt;</bpt>location1<ept id="p1">&lt;/c&gt;</ept>.</source>
          <target state="translated">Значение, которое сравнивается со значением в позиции <bpt id="p1">&lt;c&gt;</bpt>location1<ept id="p1">&lt;/c&gt;</ept>.</target>       </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve" uid="M:System.Threading.Interlocked.CompareExchange(System.Double@,System.Double,System.Double)">
          <source>Compares two double-precision floating point numbers for equality and, if they are equal, replaces the first value.</source>
          <target state="translated">Сравнивает два числа с плавающей запятой двойной точности на равенство и, если они равны, заменяет первое значение.</target>       </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve" uid="M:System.Threading.Interlocked.CompareExchange(System.Double@,System.Double,System.Double)">
          <source>The original value in <ph id="ph1">&lt;paramref name="location1" /&gt;</ph>.</source>
          <target state="translated">Исходное значение в позиции <ph id="ph1">&lt;paramref name="location1" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Interlocked.CompareExchange(System.Double@,System.Double,System.Double)">
          <source>If <ph id="ph1">`comparand`</ph> and the value in <ph id="ph2">`location1`</ph> are equal, then <ph id="ph3">`value`</ph> is stored in <ph id="ph4">`location1`</ph>.</source>
          <target state="translated">Если <ph id="ph1">`comparand`</ph> и значения в <ph id="ph2">`location1`</ph> равны, то <ph id="ph3">`value`</ph> хранится в <ph id="ph4">`location1`</ph>.</target>       </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Interlocked.CompareExchange(System.Double@,System.Double,System.Double)">
          <source>Otherwise, no operation is performed.</source>
          <target state="translated">В противном случае операция не выполняется.</target>       </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Interlocked.CompareExchange(System.Double@,System.Double,System.Double)">
          <source>The compare and exchange operations are performed as an atomic operation.</source>
          <target state="translated">Операции сравнения и обмена выполняются в виде атомарной операции.</target>       </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Interlocked.CompareExchange(System.Double@,System.Double,System.Double)">
          <source>The return value of <ph id="ph1">&lt;xref:System.Threading.Interlocked.CompareExchange%2A&gt;</ph> is the original value in <ph id="ph2">`location1`</ph>, whether or not the exchange takes place.</source>
          <target state="translated">Возвращаемое значение <ph id="ph1">&lt;xref:System.Threading.Interlocked.CompareExchange%2A&gt;</ph> представляет собой исходное значение в <ph id="ph2">`location1`</ph>, независимо от того, имеется ли осуществления обмена.</target>       </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Interlocked.CompareExchange(System.Double@,System.Double,System.Double)">
          <source>The following code example demonstrates a thread-safe method that accumulates a running total of <ph id="ph1">&lt;xref:System.Double&gt;</ph> values.</source>
          <target state="translated">В следующем примере кода показан метод потокобезопасна, который собирает промежуточных итогов по <ph id="ph1">&lt;xref:System.Double&gt;</ph> значения.</target>       </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Interlocked.CompareExchange(System.Double@,System.Double,System.Double)">
          <source>Two threads add a series of <ph id="ph1">&lt;xref:System.Double&gt;</ph> values using the thread-safe method and ordinary addition, and when the threads complete the totals are compared.</source>
          <target state="translated">Два потока добавляет ряд <ph id="ph1">&lt;xref:System.Double&gt;</ph> значения с помощью поточно-метод и обычное суммирование, и затем потоки сравненные суммы.</target>       </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Interlocked.CompareExchange(System.Double@,System.Double,System.Double)">
          <source>On a dual-processor computer, there is a significant difference in the totals.</source>
          <target state="translated">На компьютере с двумя процессорами есть существенные различия в итоги.</target>       </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Interlocked.CompareExchange(System.Double@,System.Double,System.Double)">
          <source>In the thread-safe method, the initial value of the running total is saved, and then the <ph id="ph1">&lt;xref:System.Threading.Interlocked.CompareExchange%2A&gt;</ph> method is used to exchange the newly computed total with the old total.</source>
          <target state="translated">В методе поточно ориентированного сохраняется исходное значение промежуточных итогов, а затем <ph id="ph1">&lt;xref:System.Threading.Interlocked.CompareExchange%2A&gt;</ph> метод используется для обмена вновь вычисляемый итог с общей старого.</target>       </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Interlocked.CompareExchange(System.Double@,System.Double,System.Double)">
          <source>If the return value is not equal to the saved value of the running total, then another thread has updated the total in the meantime.</source>
          <target state="translated">Если возвращаемое значение не равно сохраненному значению промежуточных итогов, выберите другой поток обновляет в то же время.</target>       </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Interlocked.CompareExchange(System.Double@,System.Double,System.Double)">
          <source>In that case, the attempt to update the running total must be repeated.</source>
          <target state="translated">В этом случае необходимо повторить попытка обновить промежуточных итогов.</target>       </trans-unit>
        <trans-unit id="153" translate="yes" xml:space="preserve" uid="M:System.Threading.Interlocked.CompareExchange(System.Double@,System.Double,System.Double)">
          <source>The address of <ph id="ph1">&lt;paramref name="location1" /&gt;</ph> is a null pointer.</source>
          <target state="translated">Адрес <ph id="ph1">&lt;paramref name="location1" /&gt;</ph> является пустым указателем.</target>       </trans-unit>
        <trans-unit id="154" translate="yes" xml:space="preserve" uid="M:System.Threading.Interlocked.CompareExchange(System.Int32@,System.Int32,System.Int32)">
          <source>The destination, whose value is compared with <bpt id="p1">&lt;c&gt;</bpt>comparand<ept id="p1">&lt;/c&gt;</ept> and possibly replaced.</source>
          <target state="translated">Целевой объект, значение которого сравнивается с объектом <bpt id="p1">&lt;c&gt;</bpt>comparand<ept id="p1">&lt;/c&gt;</ept> и может быть заменено.</target>       </trans-unit>
        <trans-unit id="155" translate="yes" xml:space="preserve" uid="M:System.Threading.Interlocked.CompareExchange(System.Int32@,System.Int32,System.Int32)">
          <source>The value that replaces the destination value if the comparison results in equality.</source>
          <target state="translated">Значение, которым будет заменено целевое значение, если проверка покажет равенство.</target>       </trans-unit>
        <trans-unit id="156" translate="yes" xml:space="preserve" uid="M:System.Threading.Interlocked.CompareExchange(System.Int32@,System.Int32,System.Int32)">
          <source>The value that is compared to the value at <bpt id="p1">&lt;c&gt;</bpt>location1<ept id="p1">&lt;/c&gt;</ept>.</source>
          <target state="translated">Значение, которое сравнивается со значением в позиции <bpt id="p1">&lt;c&gt;</bpt>location1<ept id="p1">&lt;/c&gt;</ept>.</target>       </trans-unit>
        <trans-unit id="157" translate="yes" xml:space="preserve" uid="M:System.Threading.Interlocked.CompareExchange(System.Int32@,System.Int32,System.Int32)">
          <source>Compares two 32-bit signed integers for equality and, if they are equal, replaces the first value.</source>
          <target state="translated">Сравнивает два 32-разрядных целых числа со знаком на равенство и, если они равны, заменяет первое.</target>       </trans-unit>
        <trans-unit id="158" translate="yes" xml:space="preserve" uid="M:System.Threading.Interlocked.CompareExchange(System.Int32@,System.Int32,System.Int32)">
          <source>The original value in <ph id="ph1">&lt;paramref name="location1" /&gt;</ph>.</source>
          <target state="translated">Исходное значение в позиции <ph id="ph1">&lt;paramref name="location1" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="159" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Interlocked.CompareExchange(System.Int32@,System.Int32,System.Int32)">
          <source>If <ph id="ph1">`comparand`</ph> and the value in <ph id="ph2">`location1`</ph> are equal, then <ph id="ph3">`value`</ph> is stored in <ph id="ph4">`location1`</ph>.</source>
          <target state="translated">Если <ph id="ph1">`comparand`</ph> и значения в <ph id="ph2">`location1`</ph> равны, то <ph id="ph3">`value`</ph> хранится в <ph id="ph4">`location1`</ph>.</target>       </trans-unit>
        <trans-unit id="160" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Interlocked.CompareExchange(System.Int32@,System.Int32,System.Int32)">
          <source>Otherwise, no operation is performed.</source>
          <target state="translated">В противном случае операция не выполняется.</target>       </trans-unit>
        <trans-unit id="161" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Interlocked.CompareExchange(System.Int32@,System.Int32,System.Int32)">
          <source>The compare and exchange operations are performed as an atomic operation.</source>
          <target state="translated">Операции сравнения и обмена выполняются в виде атомарной операции.</target>       </trans-unit>
        <trans-unit id="162" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Interlocked.CompareExchange(System.Int32@,System.Int32,System.Int32)">
          <source>The return value of <ph id="ph1">&lt;xref:System.Threading.Interlocked.CompareExchange%2A&gt;</ph> is the original value in <ph id="ph2">`location1`</ph>, whether or not the exchange takes place.</source>
          <target state="translated">Возвращаемое значение <ph id="ph1">&lt;xref:System.Threading.Interlocked.CompareExchange%2A&gt;</ph> представляет собой исходное значение в <ph id="ph2">`location1`</ph>, независимо от того, имеется ли осуществления обмена.</target>       </trans-unit>
        <trans-unit id="163" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Interlocked.CompareExchange(System.Int32@,System.Int32,System.Int32)">
          <source>The following code example demonstrates a thread-safe method that accumulates a running total.</source>
          <target state="translated">В следующем примере кода демонстрируется метод потокобезопасна, накапливает промежуточных итогов.</target>       </trans-unit>
        <trans-unit id="164" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Interlocked.CompareExchange(System.Int32@,System.Int32,System.Int32)">
          <source>The initial value of the running total is saved, and then the <ph id="ph1">&lt;xref:System.Threading.Interlocked.CompareExchange%2A&gt;</ph> method is used to exchange the newly computed total with the old total.</source>
          <target state="translated">Начальное значение промежуточных итогов сохраняется, а затем <ph id="ph1">&lt;xref:System.Threading.Interlocked.CompareExchange%2A&gt;</ph> метод используется для обмена вновь вычисляемый итог с общей старого.</target>       </trans-unit>
        <trans-unit id="165" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Interlocked.CompareExchange(System.Int32@,System.Int32,System.Int32)">
          <source>If the return value is not equal to the saved value of the running total, then another thread has updated the total in the meantime.</source>
          <target state="translated">Если возвращаемое значение не равно сохраненному значению промежуточных итогов, выберите другой поток обновляет в то же время.</target>       </trans-unit>
        <trans-unit id="166" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Interlocked.CompareExchange(System.Int32@,System.Int32,System.Int32)">
          <source>In that case, the attempt to update the running total must be repeated.</source>
          <target state="translated">В этом случае необходимо повторить попытка обновить промежуточных итогов.</target>       </trans-unit>
        <trans-unit id="167" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Interlocked.CompareExchange(System.Int32@,System.Int32,System.Int32)">
          <source>The <ph id="ph1">&lt;xref:System.Threading.Interlocked.Add%2A&gt;</ph> method, introduced in version 2.0 of the .NET Framework, provides a more convenient way to accumulate thread-safe running totals for integers.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Threading.Interlocked.Add%2A&gt;</ph> Метод, появившиеся в .NET Framework версии 2.0 предоставляет более удобный накопить поточно ориентированного промежуточных итогов для целых чисел.</target>       </trans-unit>
        <trans-unit id="168" translate="yes" xml:space="preserve" uid="M:System.Threading.Interlocked.CompareExchange(System.Int32@,System.Int32,System.Int32)">
          <source>The address of <ph id="ph1">&lt;paramref name="location1" /&gt;</ph> is a null pointer.</source>
          <target state="translated">Адрес <ph id="ph1">&lt;paramref name="location1" /&gt;</ph> является пустым указателем.</target>       </trans-unit>
        <trans-unit id="169" translate="yes" xml:space="preserve" uid="M:System.Threading.Interlocked.CompareExchange(System.Int64@,System.Int64,System.Int64)">
          <source>The destination, whose value is compared with <bpt id="p1">&lt;c&gt;</bpt>comparand<ept id="p1">&lt;/c&gt;</ept> and possibly replaced.</source>
          <target state="translated">Целевой объект, значение которого сравнивается с объектом <bpt id="p1">&lt;c&gt;</bpt>comparand<ept id="p1">&lt;/c&gt;</ept> и может быть заменено.</target>       </trans-unit>
        <trans-unit id="170" translate="yes" xml:space="preserve" uid="M:System.Threading.Interlocked.CompareExchange(System.Int64@,System.Int64,System.Int64)">
          <source>The value that replaces the destination value if the comparison results in equality.</source>
          <target state="translated">Значение, которым будет заменено целевое значение, если проверка покажет равенство.</target>       </trans-unit>
        <trans-unit id="171" translate="yes" xml:space="preserve" uid="M:System.Threading.Interlocked.CompareExchange(System.Int64@,System.Int64,System.Int64)">
          <source>The value that is compared to the value at <bpt id="p1">&lt;c&gt;</bpt>location1<ept id="p1">&lt;/c&gt;</ept>.</source>
          <target state="translated">Значение, которое сравнивается со значением в позиции <bpt id="p1">&lt;c&gt;</bpt>location1<ept id="p1">&lt;/c&gt;</ept>.</target>       </trans-unit>
        <trans-unit id="172" translate="yes" xml:space="preserve" uid="M:System.Threading.Interlocked.CompareExchange(System.Int64@,System.Int64,System.Int64)">
          <source>Compares two 64-bit signed integers for equality and, if they are equal, replaces the first value.</source>
          <target state="translated">Сравнивает два 64-разрядных целых числа со знаком на равенство и, если они равны, заменяет первое.</target>       </trans-unit>
        <trans-unit id="173" translate="yes" xml:space="preserve" uid="M:System.Threading.Interlocked.CompareExchange(System.Int64@,System.Int64,System.Int64)">
          <source>The original value in <ph id="ph1">&lt;paramref name="location1" /&gt;</ph>.</source>
          <target state="translated">Исходное значение в позиции <ph id="ph1">&lt;paramref name="location1" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="174" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Interlocked.CompareExchange(System.Int64@,System.Int64,System.Int64)">
          <source>If <ph id="ph1">`comparand`</ph> and the value in <ph id="ph2">`location1`</ph> are equal, then <ph id="ph3">`value`</ph> is stored in <ph id="ph4">`location1`</ph>.</source>
          <target state="translated">Если <ph id="ph1">`comparand`</ph> и значения в <ph id="ph2">`location1`</ph> равны, то <ph id="ph3">`value`</ph> хранится в <ph id="ph4">`location1`</ph>.</target>       </trans-unit>
        <trans-unit id="175" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Interlocked.CompareExchange(System.Int64@,System.Int64,System.Int64)">
          <source>Otherwise, no operation is performed.</source>
          <target state="translated">В противном случае операция не выполняется.</target>       </trans-unit>
        <trans-unit id="176" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Interlocked.CompareExchange(System.Int64@,System.Int64,System.Int64)">
          <source>The compare and exchange operations are performed as an atomic operation.</source>
          <target state="translated">Операции сравнения и обмена выполняются в виде атомарной операции.</target>       </trans-unit>
        <trans-unit id="177" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Interlocked.CompareExchange(System.Int64@,System.Int64,System.Int64)">
          <source>The return value of <ph id="ph1">&lt;xref:System.Threading.Interlocked.CompareExchange%2A&gt;</ph> is the original value in <ph id="ph2">`location1`</ph>, whether or not the exchange takes place.</source>
          <target state="translated">Возвращаемое значение <ph id="ph1">&lt;xref:System.Threading.Interlocked.CompareExchange%2A&gt;</ph> представляет собой исходное значение в <ph id="ph2">`location1`</ph>, независимо от того, имеется ли осуществления обмена.</target>       </trans-unit>
        <trans-unit id="178" translate="yes" xml:space="preserve" uid="M:System.Threading.Interlocked.CompareExchange(System.Int64@,System.Int64,System.Int64)">
          <source>The address of <ph id="ph1">&lt;paramref name="location1" /&gt;</ph> is a null pointer.</source>
          <target state="translated">Адрес <ph id="ph1">&lt;paramref name="location1" /&gt;</ph> является пустым указателем.</target>       </trans-unit>
        <trans-unit id="179" translate="yes" xml:space="preserve" uid="M:System.Threading.Interlocked.CompareExchange(System.IntPtr@,System.IntPtr,System.IntPtr)">
          <source>The destination <ph id="ph1">&lt;see cref="T:System.IntPtr" /&gt;</ph>, whose value is compared with the value of <bpt id="p1">&lt;c&gt;</bpt>comparand<ept id="p1">&lt;/c&gt;</ept> and possibly replaced by <bpt id="p2">&lt;c&gt;</bpt>value<ept id="p2">&lt;/c&gt;</ept>.</source>
          <target state="translated">Целевое значение <ph id="ph1">&lt;see cref="T:System.IntPtr" /&gt;</ph>, которое будет сравниваться со значением параметра <bpt id="p1">&lt;c&gt;</bpt>comparand<ept id="p1">&lt;/c&gt;</ept> и, возможно, будет заменено <bpt id="p2">&lt;c&gt;</bpt>value<ept id="p2">&lt;/c&gt;</ept>.</target>       </trans-unit>
        <trans-unit id="180" translate="yes" xml:space="preserve" uid="M:System.Threading.Interlocked.CompareExchange(System.IntPtr@,System.IntPtr,System.IntPtr)">
          <source>The <ph id="ph1">&lt;see cref="T:System.IntPtr" /&gt;</ph> that replaces the destination value if the comparison results in equality.</source>
          <target state="translated">Значение <ph id="ph1">&lt;see cref="T:System.IntPtr" /&gt;</ph>, которое заменит целевое значение, если результатом сравнения будет равенство.</target>       </trans-unit>
        <trans-unit id="181" translate="yes" xml:space="preserve" uid="M:System.Threading.Interlocked.CompareExchange(System.IntPtr@,System.IntPtr,System.IntPtr)">
          <source>The <ph id="ph1">&lt;see cref="T:System.IntPtr" /&gt;</ph> that is compared to the value at <bpt id="p1">&lt;c&gt;</bpt>location1<ept id="p1">&lt;/c&gt;</ept>.</source>
          <target state="translated">Значение <ph id="ph1">&lt;see cref="T:System.IntPtr" /&gt;</ph>, которое сравнивается со значением в <bpt id="p1">&lt;c&gt;</bpt>location1<ept id="p1">&lt;/c&gt;</ept>.</target>       </trans-unit>
        <trans-unit id="182" translate="yes" xml:space="preserve" uid="M:System.Threading.Interlocked.CompareExchange(System.IntPtr@,System.IntPtr,System.IntPtr)">
          <source>Compares two platform-specific handles or pointers for equality and, if they are equal, replaces the first one.</source>
          <target state="translated">Сравнивает два зависящих от платформы обработчика или указателя на равенство и, если они равны, заменяет первое из значений.</target>       </trans-unit>
        <trans-unit id="183" translate="yes" xml:space="preserve" uid="M:System.Threading.Interlocked.CompareExchange(System.IntPtr@,System.IntPtr,System.IntPtr)">
          <source>The original value in <ph id="ph1">&lt;paramref name="location1" /&gt;</ph>.</source>
          <target state="translated">Исходное значение в позиции <ph id="ph1">&lt;paramref name="location1" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="184" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Interlocked.CompareExchange(System.IntPtr@,System.IntPtr,System.IntPtr)">
          <source>If <ph id="ph1">`comparand`</ph> and the value in <ph id="ph2">`location1`</ph> are equal, then <ph id="ph3">`value`</ph> is stored in <ph id="ph4">`location1`</ph>.</source>
          <target state="translated">Если <ph id="ph1">`comparand`</ph> и значения в <ph id="ph2">`location1`</ph> равны, то <ph id="ph3">`value`</ph> хранится в <ph id="ph4">`location1`</ph>.</target>       </trans-unit>
        <trans-unit id="185" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Interlocked.CompareExchange(System.IntPtr@,System.IntPtr,System.IntPtr)">
          <source>Otherwise, no operation is performed.</source>
          <target state="translated">В противном случае операция не выполняется.</target>       </trans-unit>
        <trans-unit id="186" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Interlocked.CompareExchange(System.IntPtr@,System.IntPtr,System.IntPtr)">
          <source>The compare and exchange operations are performed as an atomic operation.</source>
          <target state="translated">Операции сравнения и обмена выполняются в виде атомарной операции.</target>       </trans-unit>
        <trans-unit id="187" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Interlocked.CompareExchange(System.IntPtr@,System.IntPtr,System.IntPtr)">
          <source>The return value of this method is the original value in <ph id="ph1">`location1`</ph>, whether or not the exchange takes place.</source>
          <target state="translated">Возвращаемое значение метода представляет собой исходное значение в <ph id="ph1">`location1`</ph>, независимо от того, имеется ли осуществления обмена.</target>       </trans-unit>
        <trans-unit id="188" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Interlocked.CompareExchange(System.IntPtr@,System.IntPtr,System.IntPtr)">
          <source><ph id="ph1">&lt;xref:System.IntPtr&gt;</ph> is a platform-specific type.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.IntPtr&gt;</ph> — Это тип конкретную платформу.</target>       </trans-unit>
        <trans-unit id="189" translate="yes" xml:space="preserve" uid="M:System.Threading.Interlocked.CompareExchange(System.IntPtr@,System.IntPtr,System.IntPtr)">
          <source>The address of <ph id="ph1">&lt;paramref name="location1" /&gt;</ph> is a null pointer.</source>
          <target state="translated">Адрес <ph id="ph1">&lt;paramref name="location1" /&gt;</ph> является пустым указателем.</target>       </trans-unit>
        <trans-unit id="190" translate="yes" xml:space="preserve" uid="M:System.Threading.Interlocked.CompareExchange(System.Object@,System.Object,System.Object)">
          <source>The destination object that is compared with <bpt id="p1">&lt;c&gt;</bpt>comparand<ept id="p1">&lt;/c&gt;</ept> and possibly replaced.</source>
          <target state="translated">Целевой объект, который будет сравниваться со значением параметра <bpt id="p1">&lt;c&gt;</bpt>comparand<ept id="p1">&lt;/c&gt;</ept> и, возможно, будет заменен.</target>       </trans-unit>
        <trans-unit id="191" translate="yes" xml:space="preserve" uid="M:System.Threading.Interlocked.CompareExchange(System.Object@,System.Object,System.Object)">
          <source>The object that replaces the destination object if the comparison results in equality.</source>
          <target state="translated">Объект, который заменит целевой объект, если результатом сравнения будет равенство.</target>       </trans-unit>
        <trans-unit id="192" translate="yes" xml:space="preserve" uid="M:System.Threading.Interlocked.CompareExchange(System.Object@,System.Object,System.Object)">
          <source>The object that is compared to the object at <bpt id="p1">&lt;c&gt;</bpt>location1<ept id="p1">&lt;/c&gt;</ept>.</source>
          <target state="translated">Объект, который сравнивается с объектом в <bpt id="p1">&lt;c&gt;</bpt>location1<ept id="p1">&lt;/c&gt;</ept>.</target>       </trans-unit>
        <trans-unit id="193" translate="yes" xml:space="preserve" uid="M:System.Threading.Interlocked.CompareExchange(System.Object@,System.Object,System.Object)">
          <source>Compares two objects for reference equality and, if they are equal, replaces the first object.</source>
          <target state="translated">Сравнивает два объекта на равенство ссылок и, если они равны, заменяет первый объект.</target>       </trans-unit>
        <trans-unit id="194" translate="yes" xml:space="preserve" uid="M:System.Threading.Interlocked.CompareExchange(System.Object@,System.Object,System.Object)">
          <source>The original value in <ph id="ph1">&lt;paramref name="location1" /&gt;</ph>.</source>
          <target state="translated">Исходное значение в позиции <ph id="ph1">&lt;paramref name="location1" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="195" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Interlocked.CompareExchange(System.Object@,System.Object,System.Object)">
          <source>If <ph id="ph1">`comparand`</ph> and the object in <ph id="ph2">`location1`</ph> are equal, then <ph id="ph3">`value`</ph> is stored in <ph id="ph4">`location1`</ph>.</source>
          <target state="translated">Если <ph id="ph1">`comparand`</ph> и объект в <ph id="ph2">`location1`</ph> равны, то <ph id="ph3">`value`</ph> хранится в <ph id="ph4">`location1`</ph>.</target>       </trans-unit>
        <trans-unit id="196" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Interlocked.CompareExchange(System.Object@,System.Object,System.Object)">
          <source>Otherwise, no operation is performed.</source>
          <target state="translated">В противном случае операция не выполняется.</target>       </trans-unit>
        <trans-unit id="197" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Interlocked.CompareExchange(System.Object@,System.Object,System.Object)">
          <source>The compare and exchange operations are performed as an atomic operation.</source>
          <target state="translated">Операции сравнения и обмена выполняются в виде атомарной операции.</target>       </trans-unit>
        <trans-unit id="198" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Interlocked.CompareExchange(System.Object@,System.Object,System.Object)">
          <source>The return value of <ph id="ph1">&lt;xref:System.Threading.Interlocked.CompareExchange%2A&gt;</ph> is the original value in <ph id="ph2">`location1`</ph>, whether or not the exchange takes place.</source>
          <target state="translated">Возвращаемое значение <ph id="ph1">&lt;xref:System.Threading.Interlocked.CompareExchange%2A&gt;</ph> представляет собой исходное значение в <ph id="ph2">`location1`</ph>, независимо от того, имеется ли осуществления обмена.</target>       </trans-unit>
        <trans-unit id="199" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Interlocked.CompareExchange(System.Object@,System.Object,System.Object)">
          <source>Beginning with .NET Framework version 2.0, the <ph id="ph1">&lt;xref:System.Threading.Interlocked.CompareExchange%60%601%28%60%600%40%2C%60%600%2C%60%600%29&gt;</ph> method overload provides a type-safe alternative for reference types.</source>
          <target state="translated">Начиная с .NET Framework версии 2.0, <ph id="ph1">&lt;xref:System.Threading.Interlocked.CompareExchange%60%601%28%60%600%40%2C%60%600%2C%60%600%29&gt;</ph> перегрузка метода предоставляет типобезопасной альтернативой для ссылочных типов.</target>       </trans-unit>
        <trans-unit id="200" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Interlocked.CompareExchange(System.Object@,System.Object,System.Object)">
          <source>The objects are compared for reference equality, rather than <ph id="ph1">&lt;xref:System.Object.Equals%2A?displayProperty=nameWithType&gt;</ph>.</source>
          <target state="translated">Объекты сравниваются на предмет равенства ссылок, а не <ph id="ph1">&lt;xref:System.Object.Equals%2A?displayProperty=nameWithType&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="201" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Interlocked.CompareExchange(System.Object@,System.Object,System.Object)">
          <source>As a result, two boxed instances of the same value type (for example, the integer 3) always appear to be unequal, and no operation is performed.</source>
          <target state="translated">В результате два упакованных экземпляра одной и той же тип значения (например, целое число 3) всегда могут оказаться неэквивалентными и операция не выполняется.</target>       </trans-unit>
        <trans-unit id="202" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Interlocked.CompareExchange(System.Object@,System.Object,System.Object)">
          <source>Do not use this overload with value types.</source>
          <target state="translated">Не используйте эту перегрузку с типами значений.</target>       </trans-unit>
        <trans-unit id="203" translate="yes" xml:space="preserve" uid="M:System.Threading.Interlocked.CompareExchange(System.Object@,System.Object,System.Object)">
          <source>The address of <ph id="ph1">&lt;paramref name="location1" /&gt;</ph> is a null pointer.</source>
          <target state="translated">Адрес <ph id="ph1">&lt;paramref name="location1" /&gt;</ph> является пустым указателем.</target>       </trans-unit>
        <trans-unit id="204" translate="yes" xml:space="preserve" uid="M:System.Threading.Interlocked.CompareExchange(System.Single@,System.Single,System.Single)">
          <source>The destination, whose value is compared with <bpt id="p1">&lt;c&gt;</bpt>comparand<ept id="p1">&lt;/c&gt;</ept> and possibly replaced.</source>
          <target state="translated">Целевой объект, значение которого сравнивается с объектом <bpt id="p1">&lt;c&gt;</bpt>comparand<ept id="p1">&lt;/c&gt;</ept> и может быть заменено.</target>       </trans-unit>
        <trans-unit id="205" translate="yes" xml:space="preserve" uid="M:System.Threading.Interlocked.CompareExchange(System.Single@,System.Single,System.Single)">
          <source>The value that replaces the destination value if the comparison results in equality.</source>
          <target state="translated">Значение, которым будет заменено целевое значение, если проверка покажет равенство.</target>       </trans-unit>
        <trans-unit id="206" translate="yes" xml:space="preserve" uid="M:System.Threading.Interlocked.CompareExchange(System.Single@,System.Single,System.Single)">
          <source>The value that is compared to the value at <bpt id="p1">&lt;c&gt;</bpt>location1<ept id="p1">&lt;/c&gt;</ept>.</source>
          <target state="translated">Значение, которое сравнивается со значением в позиции <bpt id="p1">&lt;c&gt;</bpt>location1<ept id="p1">&lt;/c&gt;</ept>.</target>       </trans-unit>
        <trans-unit id="207" translate="yes" xml:space="preserve" uid="M:System.Threading.Interlocked.CompareExchange(System.Single@,System.Single,System.Single)">
          <source>Compares two single-precision floating point numbers for equality and, if they are equal, replaces the first value.</source>
          <target state="translated">Сравнивает два числа с плавающей запятой с обычной точностью на равенство и, если они равны, заменяет первое значение.</target>       </trans-unit>
        <trans-unit id="208" translate="yes" xml:space="preserve" uid="M:System.Threading.Interlocked.CompareExchange(System.Single@,System.Single,System.Single)">
          <source>The original value in <ph id="ph1">&lt;paramref name="location1" /&gt;</ph>.</source>
          <target state="translated">Исходное значение в позиции <ph id="ph1">&lt;paramref name="location1" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="209" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Interlocked.CompareExchange(System.Single@,System.Single,System.Single)">
          <source>If <ph id="ph1">`comparand`</ph> and the value in <ph id="ph2">`location1`</ph> are equal, then <ph id="ph3">`value`</ph> is stored in <ph id="ph4">`location1`</ph>.</source>
          <target state="translated">Если <ph id="ph1">`comparand`</ph> и значения в <ph id="ph2">`location1`</ph> равны, то <ph id="ph3">`value`</ph> хранится в <ph id="ph4">`location1`</ph>.</target>       </trans-unit>
        <trans-unit id="210" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Interlocked.CompareExchange(System.Single@,System.Single,System.Single)">
          <source>Otherwise, no operation is performed.</source>
          <target state="translated">В противном случае операция не выполняется.</target>       </trans-unit>
        <trans-unit id="211" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Interlocked.CompareExchange(System.Single@,System.Single,System.Single)">
          <source>The compare and exchange operations are performed as an atomic operation.</source>
          <target state="translated">Операции сравнения и обмена выполняются в виде атомарной операции.</target>       </trans-unit>
        <trans-unit id="212" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Interlocked.CompareExchange(System.Single@,System.Single,System.Single)">
          <source>The return value of <ph id="ph1">&lt;xref:System.Threading.Interlocked.CompareExchange%2A&gt;</ph> is the original value in <ph id="ph2">`location1`</ph>, whether or not the exchange takes place.</source>
          <target state="translated">Возвращаемое значение <ph id="ph1">&lt;xref:System.Threading.Interlocked.CompareExchange%2A&gt;</ph> представляет собой исходное значение в <ph id="ph2">`location1`</ph>, независимо от того, имеется ли осуществления обмена.</target>       </trans-unit>
        <trans-unit id="213" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Interlocked.CompareExchange(System.Single@,System.Single,System.Single)">
          <source>The following code example demonstrates a thread-safe method that accumulates a running total of <ph id="ph1">&lt;xref:System.Single&gt;</ph> values.</source>
          <target state="translated">В следующем примере кода показан метод потокобезопасна, который собирает промежуточных итогов по <ph id="ph1">&lt;xref:System.Single&gt;</ph> значения.</target>       </trans-unit>
        <trans-unit id="214" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Interlocked.CompareExchange(System.Single@,System.Single,System.Single)">
          <source>Two threads add a series of <ph id="ph1">&lt;xref:System.Single&gt;</ph> values using the thread-safe method and ordinary addition, and when the threads complete the totals are compared.</source>
          <target state="translated">Два потока добавляет ряд <ph id="ph1">&lt;xref:System.Single&gt;</ph> значения с помощью поточно-метод и обычное суммирование, и затем потоки сравненные суммы.</target>       </trans-unit>
        <trans-unit id="215" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Interlocked.CompareExchange(System.Single@,System.Single,System.Single)">
          <source>On a dual-processor computer, there is a significant difference in the totals.</source>
          <target state="translated">На компьютере с двумя процессорами есть существенные различия в итоги.</target>       </trans-unit>
        <trans-unit id="216" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Interlocked.CompareExchange(System.Single@,System.Single,System.Single)">
          <source>In the thread-safe method, the initial value of the running total is saved, and then the <ph id="ph1">&lt;xref:System.Threading.Interlocked.CompareExchange%2A&gt;</ph> method is used to exchange the newly computed total with the old total.</source>
          <target state="translated">В методе поточно ориентированного сохраняется исходное значение промежуточных итогов, а затем <ph id="ph1">&lt;xref:System.Threading.Interlocked.CompareExchange%2A&gt;</ph> метод используется для обмена вновь вычисляемый итог с общей старого.</target>       </trans-unit>
        <trans-unit id="217" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Interlocked.CompareExchange(System.Single@,System.Single,System.Single)">
          <source>If the return value is not equal to the saved value of the running total, then another thread has updated the total in the meantime.</source>
          <target state="translated">Если возвращаемое значение не равно сохраненному значению промежуточных итогов, выберите другой поток обновляет в то же время.</target>       </trans-unit>
        <trans-unit id="218" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Interlocked.CompareExchange(System.Single@,System.Single,System.Single)">
          <source>In that case, the attempt to update the running total must be repeated.</source>
          <target state="translated">В этом случае необходимо повторить попытка обновить промежуточных итогов.</target>       </trans-unit>
        <trans-unit id="219" translate="yes" xml:space="preserve" uid="M:System.Threading.Interlocked.CompareExchange(System.Single@,System.Single,System.Single)">
          <source>The address of <ph id="ph1">&lt;paramref name="location1" /&gt;</ph> is a null pointer.</source>
          <target state="translated">Адрес <ph id="ph1">&lt;paramref name="location1" /&gt;</ph> является пустым указателем.</target>       </trans-unit>
        <trans-unit id="220" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Interlocked.CompareExchange``1(``0@,``0,``0)">
          <source>The type to be used for <bpt id="p1">&lt;c&gt;</bpt>location1<ept id="p1">&lt;/c&gt;</ept>, <bpt id="p2">&lt;c&gt;</bpt>value<ept id="p2">&lt;/c&gt;</ept>, and <bpt id="p3">&lt;c&gt;</bpt>comparand<ept id="p3">&lt;/c&gt;</ept>.</source>
          <target state="translated">Тип, используемый для <bpt id="p1">&lt;c&gt;</bpt>location1<ept id="p1">&lt;/c&gt;</ept>, <bpt id="p2">&lt;c&gt;</bpt>значение<ept id="p2">&lt;/c&gt;</ept>, и <bpt id="p3">&lt;c&gt;</bpt>сравниваемый операнд<ept id="p3">&lt;/c&gt;</ept>.</target>       </trans-unit>
        <trans-unit id="221" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Interlocked.CompareExchange``1(``0@,``0,``0)">
          <source>This type must be a reference type.</source>
          <target state="translated">Этот тип должен быть ссылочным типом.</target>       </trans-unit>
        <trans-unit id="222" translate="yes" xml:space="preserve" uid="M:System.Threading.Interlocked.CompareExchange``1(``0@,``0,``0)">
          <source>The destination, whose value is compared with <bpt id="p1">&lt;c&gt;</bpt>comparand<ept id="p1">&lt;/c&gt;</ept> and possibly replaced.</source>
          <target state="translated">Целевой объект, значение которого сравнивается с объектом <bpt id="p1">&lt;c&gt;</bpt>comparand<ept id="p1">&lt;/c&gt;</ept> и может быть заменено.</target>       </trans-unit>
        <trans-unit id="223" translate="yes" xml:space="preserve" uid="M:System.Threading.Interlocked.CompareExchange``1(``0@,``0,``0)">
          <source>This is a reference parameter (<ph id="ph1">&lt;see langword="ref" /&gt;</ph> in C#, <ph id="ph2">&lt;see langword="ByRef" /&gt;</ph> in Visual Basic).</source>
          <target state="translated">Это ссылочный параметр (<ph id="ph1">&lt;see langword="ref" /&gt;</ph> в C#, <ph id="ph2">&lt;see langword="ByRef" /&gt;</ph> в Visual Basic).</target>       </trans-unit>
        <trans-unit id="224" translate="yes" xml:space="preserve" uid="M:System.Threading.Interlocked.CompareExchange``1(``0@,``0,``0)">
          <source>The value that replaces the destination value if the comparison results in equality.</source>
          <target state="translated">Значение, которым будет заменено целевое значение, если проверка покажет равенство.</target>       </trans-unit>
        <trans-unit id="225" translate="yes" xml:space="preserve" uid="M:System.Threading.Interlocked.CompareExchange``1(``0@,``0,``0)">
          <source>The value that is compared to the value at <bpt id="p1">&lt;c&gt;</bpt>location1<ept id="p1">&lt;/c&gt;</ept>.</source>
          <target state="translated">Значение, которое сравнивается со значением в позиции <bpt id="p1">&lt;c&gt;</bpt>location1<ept id="p1">&lt;/c&gt;</ept>.</target>       </trans-unit>
        <trans-unit id="226" translate="yes" xml:space="preserve" uid="M:System.Threading.Interlocked.CompareExchange``1(``0@,``0,``0)">
          <source>Compares two instances of the specified reference type <ph id="ph1">&lt;paramref name="T" /&gt;</ph> for equality and, if they are equal, replaces the first one.</source>
          <target state="translated">Сравнивает два экземпляра указанного ссылочного типа <ph id="ph1">&lt;paramref name="T" /&gt;</ph> на равенство и, если это так, заменяет один из них.</target>       </trans-unit>
        <trans-unit id="227" translate="yes" xml:space="preserve" uid="M:System.Threading.Interlocked.CompareExchange``1(``0@,``0,``0)">
          <source>The original value in <ph id="ph1">&lt;paramref name="location1" /&gt;</ph>.</source>
          <target state="translated">Исходное значение в позиции <ph id="ph1">&lt;paramref name="location1" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="228" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Interlocked.CompareExchange``1(``0@,``0,``0)">
          <source>If <ph id="ph1">`comparand`</ph> and the value in <ph id="ph2">`location1`</ph> are equal, then <ph id="ph3">`value`</ph> is stored in <ph id="ph4">`location1`</ph>.</source>
          <target state="translated">Если <ph id="ph1">`comparand`</ph> и значения в <ph id="ph2">`location1`</ph> равны, то <ph id="ph3">`value`</ph> хранится в <ph id="ph4">`location1`</ph>.</target>       </trans-unit>
        <trans-unit id="229" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Interlocked.CompareExchange``1(``0@,``0,``0)">
          <source>Otherwise, no operation is performed.</source>
          <target state="translated">В противном случае операция не выполняется.</target>       </trans-unit>
        <trans-unit id="230" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Interlocked.CompareExchange``1(``0@,``0,``0)">
          <source>The comparison and the exchange are performed as an atomic operation.</source>
          <target state="translated">Сравнение и обмен выполняются в виде атомарной операции.</target>       </trans-unit>
        <trans-unit id="231" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Interlocked.CompareExchange``1(``0@,``0,``0)">
          <source>The return value of this method is the original value in <ph id="ph1">`location1`</ph>, whether or not the exchange takes place.</source>
          <target state="translated">Возвращаемое значение метода представляет собой исходное значение в <ph id="ph1">`location1`</ph>, независимо от того, имеется ли осуществления обмена.</target>       </trans-unit>
        <trans-unit id="232" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Interlocked.CompareExchange``1(``0@,``0,``0)">
          <source>This method only supports reference types.</source>
          <target state="translated">Этот метод поддерживает только ссылочные типы.</target>       </trans-unit>
        <trans-unit id="233" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Interlocked.CompareExchange``1(``0@,``0,``0)">
          <source>There are overloads of the <ph id="ph1">&lt;xref:System.Threading.Interlocked.CompareExchange%2A&gt;</ph> method for the value types <ph id="ph2">&lt;xref:System.Int32&gt;</ph>, <ph id="ph3">&lt;xref:System.Int64&gt;</ph>, <ph id="ph4">&lt;xref:System.IntPtr&gt;</ph>, <ph id="ph5">&lt;xref:System.Single&gt;</ph>, and <ph id="ph6">&lt;xref:System.Double&gt;</ph>, but there is no support for other value types.</source>
          <target state="translated">Существуют перегрузки <ph id="ph1">&lt;xref:System.Threading.Interlocked.CompareExchange%2A&gt;</ph> метод для типов значений <ph id="ph2">&lt;xref:System.Int32&gt;</ph>, <ph id="ph3">&lt;xref:System.Int64&gt;</ph>, <ph id="ph4">&lt;xref:System.IntPtr&gt;</ph>, <ph id="ph5">&lt;xref:System.Single&gt;</ph>, и <ph id="ph6">&lt;xref:System.Double&gt;</ph>, но не поддерживается для других типов значений.</target>       </trans-unit>
        <trans-unit id="234" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Interlocked.CompareExchange``1(``0@,``0,``0)">
          <source>This method overload is preferable to the <ph id="ph1">&lt;xref:System.Threading.Interlocked.CompareExchange%28System.Object%40%2CSystem.Object%2CSystem.Object%29&gt;</ph> method overload, because the latter requires the destination object to be accessed late-bound.</source>
          <target state="translated">Эта перегрузка метода является более предпочтительным, чем <ph id="ph1">&lt;xref:System.Threading.Interlocked.CompareExchange%28System.Object%40%2CSystem.Object%2CSystem.Object%29&gt;</ph> перегрузку метода, так как последний требуется целевой объект должен осуществляться позднего связывания.</target>       </trans-unit>
        <trans-unit id="235" translate="yes" xml:space="preserve" uid="M:System.Threading.Interlocked.CompareExchange``1(``0@,``0,``0)">
          <source>The address of <ph id="ph1">&lt;paramref name="location1" /&gt;</ph> is a null pointer.</source>
          <target state="translated">Адрес <ph id="ph1">&lt;paramref name="location1" /&gt;</ph> является пустым указателем.</target>       </trans-unit>
        <trans-unit id="236" translate="yes" xml:space="preserve" uid="T:System.Threading.Interlocked">
          <source>Decrements a specified variable and stores the result, as an atomic operation.</source>
          <target state="translated">Уменьшает значение заданной переменной и сохраняет результат в виде атомарной операции.</target>       </trans-unit>
        <trans-unit id="237" translate="yes" xml:space="preserve" uid="M:System.Threading.Interlocked.Decrement(System.Int32@)">
          <source>The variable whose value is to be decremented.</source>
          <target state="translated">Переменная, у которой уменьшается значение.</target>       </trans-unit>
        <trans-unit id="238" translate="yes" xml:space="preserve" uid="M:System.Threading.Interlocked.Decrement(System.Int32@)">
          <source>Decrements a specified variable and stores the result, as an atomic operation.</source>
          <target state="translated">Уменьшает значение заданной переменной и сохраняет результат в виде атомарной операции.</target>       </trans-unit>
        <trans-unit id="239" translate="yes" xml:space="preserve" uid="M:System.Threading.Interlocked.Decrement(System.Int32@)">
          <source>The decremented value.</source>
          <target state="translated">Уменьшаемое значение.</target>       </trans-unit>
        <trans-unit id="240" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Interlocked.Decrement(System.Int32@)">
          <source>This method handles an overflow condition by wrapping: If <ph id="ph1">`location`</ph><ph id="ph2"> = </ph><ph id="ph3">&lt;xref:System.Int32.MinValue?displayProperty=nameWithType&gt;</ph>, <ph id="ph4">`location`</ph> - 1 = <ph id="ph5">&lt;xref:System.Int32.MaxValue?displayProperty=nameWithType&gt;</ph>.</source>
          <target state="translated">Этот метод обрабатывает условие, заключив: Если <ph id="ph1">`location`</ph> <ph id="ph2"> = </ph> <ph id="ph3">&lt;xref:System.Int32.MinValue?displayProperty=nameWithType&gt;</ph>, <ph id="ph4">`location`</ph> - 1 = <ph id="ph5">&lt;xref:System.Int32.MaxValue?displayProperty=nameWithType&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="241" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Interlocked.Decrement(System.Int32@)">
          <source>No exception is thrown.</source>
          <target state="translated">Исключение не возникает.</target>       </trans-unit>
        <trans-unit id="242" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Interlocked.Decrement(System.Int32@)">
          <source>The following example determines how many random numbers that range from 0 to 1,000 are required to generate 1,000 random numbers with a midpoint value.</source>
          <target state="translated">В следующем примере определяется, необходимые для создания 1 000 случайных чисел с среднее значение количества случайных чисел в диапазоне от 0 до 1000.</target>       </trans-unit>
        <trans-unit id="243" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Interlocked.Decrement(System.Int32@)">
          <source>To keep track of the number of midpoint values, a variable, <ph id="ph1">`midpointCount`</ph>, is set equal to 1,000 and decremented each time the random number generator returns a midpoint value.</source>
          <target state="translated">Для отслеживания числа значений середины, переменной, <ph id="ph1">`midpointCount`</ph>, набор равно 1000 и уменьшается на единицу при каждом генератора случайных чисел возвращает среднее значение.</target>       </trans-unit>
        <trans-unit id="244" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Interlocked.Decrement(System.Int32@)">
          <source>Because three threads generate the random numbers, the <ph id="ph1">&lt;xref:System.Threading.Interlocked.Decrement%28System.Int32%40%29&gt;</ph> method is called to ensure that multiple threads don't update <ph id="ph2">`midpointCount`</ph> concurrently.</source>
          <target state="translated">Так как три потока создания случайных чисел, <ph id="ph1">&lt;xref:System.Threading.Interlocked.Decrement%28System.Int32%40%29&gt;</ph> метод вызывается, чтобы убедиться, что несколько потоков не обновлять <ph id="ph2">`midpointCount`</ph> одновременно.</target>       </trans-unit>
        <trans-unit id="245" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Interlocked.Decrement(System.Int32@)">
          <source>Note that a lock is also used to protect the random number generator, and that a <ph id="ph1">&lt;xref:System.Threading.CountdownEvent&gt;</ph> object is used to ensure that the <ph id="ph2">`Main`</ph> method doesn't finish execution before the three threads.</source>
          <target state="translated">Обратите внимание, что блокировка также используется для защиты генератора случайных чисел и что <ph id="ph1">&lt;xref:System.Threading.CountdownEvent&gt;</ph> объект используется для убедитесь, что <ph id="ph2">`Main`</ph> метод завершается выполнение перед три потока.</target>       </trans-unit>
        <trans-unit id="246" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Interlocked.Decrement(System.Int32@)">
          <source>The following example is similar to the previous one, except that it uses the  instead of a thread procedure to generate 50,000 random midpoint integers.</source>
          <target state="translated">Следующий пример похож на предыдущий, за исключением того, что он использует вместо поток процедуру, чтобы сформировать 50 000 середины случайных целых чисел.</target>       </trans-unit>
        <trans-unit id="247" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Interlocked.Decrement(System.Int32@)">
          <source>In this example, a lambda expression replaces the <ph id="ph1">`GenerateNumbers`</ph> thread procedure, and the call to the <ph id="ph2">&lt;xref:System.Threading.Tasks.Task.WaitAll%2A?displayProperty=nameWithType&gt;</ph> method eliminates the need for the <ph id="ph3">&lt;xref:System.Threading.CountdownEvent&gt;</ph> object.</source>
          <target state="translated">В этом примере лямбда-выражение заменяет <ph id="ph1">`GenerateNumbers`</ph> процедуры потока и вызова <ph id="ph2">&lt;xref:System.Threading.Tasks.Task.WaitAll%2A?displayProperty=nameWithType&gt;</ph> метод исключает необходимость в <ph id="ph3">&lt;xref:System.Threading.CountdownEvent&gt;</ph> объекта.</target>       </trans-unit>
        <trans-unit id="248" translate="yes" xml:space="preserve" uid="M:System.Threading.Interlocked.Decrement(System.Int32@)">
          <source>The address of <ph id="ph1">&lt;paramref name="location" /&gt;</ph> is a null pointer.</source>
          <target state="translated">Адрес <ph id="ph1">&lt;paramref name="location" /&gt;</ph> является пустым указателем.</target>       </trans-unit>
        <trans-unit id="249" translate="yes" xml:space="preserve" uid="M:System.Threading.Interlocked.Decrement(System.Int64@)">
          <source>The variable whose value is to be decremented.</source>
          <target state="translated">Переменная, у которой уменьшается значение.</target>       </trans-unit>
        <trans-unit id="250" translate="yes" xml:space="preserve" uid="M:System.Threading.Interlocked.Decrement(System.Int64@)">
          <source>Decrements the specified variable and stores the result, as an atomic operation.</source>
          <target state="translated">Уменьшает значение заданной переменной и сохраняет результат в виде атомарной операции.</target>       </trans-unit>
        <trans-unit id="251" translate="yes" xml:space="preserve" uid="M:System.Threading.Interlocked.Decrement(System.Int64@)">
          <source>The decremented value.</source>
          <target state="translated">Уменьшаемое значение.</target>       </trans-unit>
        <trans-unit id="252" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Interlocked.Decrement(System.Int64@)">
          <source>This method handles an overflow condition by wrapping: if <ph id="ph1">`location`</ph><ph id="ph2"> = </ph><ph id="ph3">&lt;xref:System.Int64.MinValue?displayProperty=nameWithType&gt;</ph>, <ph id="ph4">`location`</ph> - 1 = <ph id="ph5">&lt;xref:System.Int64.MaxValue?displayProperty=nameWithType&gt;</ph>.</source>
          <target state="translated">Этот метод обрабатывает условие, заключив: Если <ph id="ph1">`location`</ph> <ph id="ph2"> = </ph> <ph id="ph3">&lt;xref:System.Int64.MinValue?displayProperty=nameWithType&gt;</ph>, <ph id="ph4">`location`</ph> - 1 = <ph id="ph5">&lt;xref:System.Int64.MaxValue?displayProperty=nameWithType&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="253" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Interlocked.Decrement(System.Int64@)">
          <source>No exception is thrown.</source>
          <target state="translated">Исключение не возникает.</target>       </trans-unit>
        <trans-unit id="254" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Interlocked.Decrement(System.Int64@)">
          <source>The <ph id="ph1">&lt;xref:System.Threading.Interlocked.Read%2A&gt;</ph> method and the 64-bit overloads of the <ph id="ph2">&lt;xref:System.Threading.Interlocked.Increment%2A&gt;</ph>, <ph id="ph3">&lt;xref:System.Threading.Interlocked.Decrement%2A&gt;</ph>, and <ph id="ph4">&lt;xref:System.Threading.Interlocked.Add%2A&gt;</ph> methods are truly atomic only on systems where a <ph id="ph5">&lt;xref:System.IntPtr?displayProperty=nameWithType&gt;</ph> is 64 bits long.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Threading.Interlocked.Read%2A&gt;</ph> Метод и 64-разрядных перегрузки <ph id="ph2">&lt;xref:System.Threading.Interlocked.Increment%2A&gt;</ph>, <ph id="ph3">&lt;xref:System.Threading.Interlocked.Decrement%2A&gt;</ph>, и <ph id="ph4">&lt;xref:System.Threading.Interlocked.Add%2A&gt;</ph> методы атомарны действительно только в системах, где <ph id="ph5">&lt;xref:System.IntPtr?displayProperty=nameWithType&gt;</ph> long 64 бита.</target>       </trans-unit>
        <trans-unit id="255" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Interlocked.Decrement(System.Int64@)">
          <source>On other systems, these methods are atomic with respect to each other, but not with respect to other means of accessing the data.</source>
          <target state="translated">В других системах эти методы являются атомарными по отношению друг к другу, но не по отношению к другим способом доступа к данным.</target>       </trans-unit>
        <trans-unit id="256" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Interlocked.Decrement(System.Int64@)">
          <source>Thus, to be thread safe on 32-bit systems, any access to a 64-bit value must be made through the members of the <ph id="ph1">&lt;xref:System.Threading.Interlocked&gt;</ph> class.</source>
          <target state="translated">Таким образом, чтобы быть поточно-ориентированным на 32-разрядных системах, доступ к 64-разрядное значение необходимо вносить с помощью члены <ph id="ph1">&lt;xref:System.Threading.Interlocked&gt;</ph> класса.</target>       </trans-unit>
        <trans-unit id="257" translate="yes" xml:space="preserve" uid="M:System.Threading.Interlocked.Decrement(System.Int64@)">
          <source>The address of <ph id="ph1">&lt;paramref name="location" /&gt;</ph> is a null pointer.</source>
          <target state="translated">Адрес <ph id="ph1">&lt;paramref name="location" /&gt;</ph> является пустым указателем.</target>       </trans-unit>
        <trans-unit id="258" translate="yes" xml:space="preserve" uid="T:System.Threading.Interlocked">
          <source>Sets a variable to a specified value as an atomic operation.</source>
          <target state="translated">Задает переменную указанным значением в виде атомарной операции.</target>       </trans-unit>
        <trans-unit id="259" translate="yes" xml:space="preserve" uid="M:System.Threading.Interlocked.Exchange(System.Double@,System.Double)">
          <source>The variable to set to the specified value.</source>
          <target state="translated">Переменная, которая задается указанным значением.</target>       </trans-unit>
        <trans-unit id="260" translate="yes" xml:space="preserve" uid="M:System.Threading.Interlocked.Exchange(System.Double@,System.Double)">
          <source>The value to which the <bpt id="p1">&lt;c&gt;</bpt>location1<ept id="p1">&lt;/c&gt;</ept> parameter is set.</source>
          <target state="translated">Значение, которое принимает параметр <bpt id="p1">&lt;c&gt;</bpt>location1<ept id="p1">&lt;/c&gt;</ept>.</target>       </trans-unit>
        <trans-unit id="261" translate="yes" xml:space="preserve" uid="M:System.Threading.Interlocked.Exchange(System.Double@,System.Double)">
          <source>Sets a double-precision floating point number to a specified value and returns the original value, as an atomic operation.</source>
          <target state="translated">Задает число с плавающей запятой с двойной точностью указанным значением в виде атомарной операции и возвращает исходное значение.</target>       </trans-unit>
        <trans-unit id="262" translate="yes" xml:space="preserve" uid="M:System.Threading.Interlocked.Exchange(System.Double@,System.Double)">
          <source>The original value of <ph id="ph1">&lt;paramref name="location1" /&gt;</ph>.</source>
          <target state="translated">Исходное значение <ph id="ph1">&lt;paramref name="location1" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="263" translate="yes" xml:space="preserve" uid="M:System.Threading.Interlocked.Exchange(System.Double@,System.Double)">
          <source>The address of <ph id="ph1">&lt;paramref name="location1" /&gt;</ph> is a null pointer.</source>
          <target state="translated">Адрес <ph id="ph1">&lt;paramref name="location1" /&gt;</ph> является пустым указателем.</target>       </trans-unit>
        <trans-unit id="264" translate="yes" xml:space="preserve" uid="M:System.Threading.Interlocked.Exchange(System.Int32@,System.Int32)">
          <source>The variable to set to the specified value.</source>
          <target state="translated">Переменная, которая задается указанным значением.</target>       </trans-unit>
        <trans-unit id="265" translate="yes" xml:space="preserve" uid="M:System.Threading.Interlocked.Exchange(System.Int32@,System.Int32)">
          <source>The value to which the <bpt id="p1">&lt;c&gt;</bpt>location1<ept id="p1">&lt;/c&gt;</ept> parameter is set.</source>
          <target state="translated">Значение, которое принимает параметр <bpt id="p1">&lt;c&gt;</bpt>location1<ept id="p1">&lt;/c&gt;</ept>.</target>       </trans-unit>
        <trans-unit id="266" translate="yes" xml:space="preserve" uid="M:System.Threading.Interlocked.Exchange(System.Int32@,System.Int32)">
          <source>Sets a 32-bit signed integer to a specified value and returns the original value, as an atomic operation.</source>
          <target state="translated">Присваивает 32-разрядному целому числу со знаком заданное значение и возвращает исходное значение в виде атомарной операции.</target>       </trans-unit>
        <trans-unit id="267" translate="yes" xml:space="preserve" uid="M:System.Threading.Interlocked.Exchange(System.Int32@,System.Int32)">
          <source>The original value of <ph id="ph1">&lt;paramref name="location1" /&gt;</ph>.</source>
          <target state="translated">Исходное значение <ph id="ph1">&lt;paramref name="location1" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="268" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Interlocked.Exchange(System.Int32@,System.Int32)">
          <source>The following code example shows a thread-safe resource locking mechanism.</source>
          <target state="translated">В следующем примере кода показан механизм блокировки ресурсов потокобезопасным.</target>       </trans-unit>
        <trans-unit id="269" translate="yes" xml:space="preserve" uid="M:System.Threading.Interlocked.Exchange(System.Int32@,System.Int32)">
          <source>The address of <ph id="ph1">&lt;paramref name="location1" /&gt;</ph> is a null pointer.</source>
          <target state="translated">Адрес <ph id="ph1">&lt;paramref name="location1" /&gt;</ph> является пустым указателем.</target>       </trans-unit>
        <trans-unit id="270" translate="yes" xml:space="preserve" uid="M:System.Threading.Interlocked.Exchange(System.Int64@,System.Int64)">
          <source>The variable to set to the specified value.</source>
          <target state="translated">Переменная, которая задается указанным значением.</target>       </trans-unit>
        <trans-unit id="271" translate="yes" xml:space="preserve" uid="M:System.Threading.Interlocked.Exchange(System.Int64@,System.Int64)">
          <source>The value to which the <bpt id="p1">&lt;c&gt;</bpt>location1<ept id="p1">&lt;/c&gt;</ept> parameter is set.</source>
          <target state="translated">Значение, которое принимает параметр <bpt id="p1">&lt;c&gt;</bpt>location1<ept id="p1">&lt;/c&gt;</ept>.</target>       </trans-unit>
        <trans-unit id="272" translate="yes" xml:space="preserve" uid="M:System.Threading.Interlocked.Exchange(System.Int64@,System.Int64)">
          <source>Sets a 64-bit signed integer to a specified value and returns the original value, as an atomic operation.</source>
          <target state="translated">Присваивает 64-разрядному целому числу со знаком заданное значение и возвращает исходное значение в виде атомарной операции.</target>       </trans-unit>
        <trans-unit id="273" translate="yes" xml:space="preserve" uid="M:System.Threading.Interlocked.Exchange(System.Int64@,System.Int64)">
          <source>The original value of <ph id="ph1">&lt;paramref name="location1" /&gt;</ph>.</source>
          <target state="translated">Исходное значение <ph id="ph1">&lt;paramref name="location1" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="274" translate="yes" xml:space="preserve" uid="M:System.Threading.Interlocked.Exchange(System.Int64@,System.Int64)">
          <source>The address of <ph id="ph1">&lt;paramref name="location1" /&gt;</ph> is a null pointer.</source>
          <target state="translated">Адрес <ph id="ph1">&lt;paramref name="location1" /&gt;</ph> является пустым указателем.</target>       </trans-unit>
        <trans-unit id="275" translate="yes" xml:space="preserve" uid="M:System.Threading.Interlocked.Exchange(System.IntPtr@,System.IntPtr)">
          <source>The variable to set to the specified value.</source>
          <target state="translated">Переменная, которая задается указанным значением.</target>       </trans-unit>
        <trans-unit id="276" translate="yes" xml:space="preserve" uid="M:System.Threading.Interlocked.Exchange(System.IntPtr@,System.IntPtr)">
          <source>The value to which the <bpt id="p1">&lt;c&gt;</bpt>location1<ept id="p1">&lt;/c&gt;</ept> parameter is set.</source>
          <target state="translated">Значение, которое принимает параметр <bpt id="p1">&lt;c&gt;</bpt>location1<ept id="p1">&lt;/c&gt;</ept>.</target>       </trans-unit>
        <trans-unit id="277" translate="yes" xml:space="preserve" uid="M:System.Threading.Interlocked.Exchange(System.IntPtr@,System.IntPtr)">
          <source>Sets a platform-specific handle or pointer to a specified value and returns the original value, as an atomic operation.</source>
          <target state="translated">Задает указатель или обработчик, зависящий от платформы в виде атомарной операции, и возвращает ссылку на исходное значение.</target>       </trans-unit>
        <trans-unit id="278" translate="yes" xml:space="preserve" uid="M:System.Threading.Interlocked.Exchange(System.IntPtr@,System.IntPtr)">
          <source>The original value of <ph id="ph1">&lt;paramref name="location1" /&gt;</ph>.</source>
          <target state="translated">Исходное значение <ph id="ph1">&lt;paramref name="location1" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="279" translate="yes" xml:space="preserve" uid="M:System.Threading.Interlocked.Exchange(System.IntPtr@,System.IntPtr)">
          <source>The address of <ph id="ph1">&lt;paramref name="location1" /&gt;</ph> is a null pointer.</source>
          <target state="translated">Адрес <ph id="ph1">&lt;paramref name="location1" /&gt;</ph> является пустым указателем.</target>       </trans-unit>
        <trans-unit id="280" translate="yes" xml:space="preserve" uid="M:System.Threading.Interlocked.Exchange(System.Object@,System.Object)">
          <source>The variable to set to the specified value.</source>
          <target state="translated">Переменная, которая задается указанным значением.</target>       </trans-unit>
        <trans-unit id="281" translate="yes" xml:space="preserve" uid="M:System.Threading.Interlocked.Exchange(System.Object@,System.Object)">
          <source>The value to which the <bpt id="p1">&lt;c&gt;</bpt>location1<ept id="p1">&lt;/c&gt;</ept> parameter is set.</source>
          <target state="translated">Значение, которое принимает параметр <bpt id="p1">&lt;c&gt;</bpt>location1<ept id="p1">&lt;/c&gt;</ept>.</target>       </trans-unit>
        <trans-unit id="282" translate="yes" xml:space="preserve" uid="M:System.Threading.Interlocked.Exchange(System.Object@,System.Object)">
          <source>Sets an object to a specified value and returns a reference to the original object, as an atomic operation.</source>
          <target state="translated">Задает объект указанным значением в виде атомарной операции и возвращает ссылку на исходный объект.</target>       </trans-unit>
        <trans-unit id="283" translate="yes" xml:space="preserve" uid="M:System.Threading.Interlocked.Exchange(System.Object@,System.Object)">
          <source>The original value of <ph id="ph1">&lt;paramref name="location1" /&gt;</ph>.</source>
          <target state="translated">Исходное значение <ph id="ph1">&lt;paramref name="location1" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="284" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Interlocked.Exchange(System.Object@,System.Object)">
          <source>Beginning with .NET Framework version 2.0, the <ph id="ph1">&lt;xref:System.Threading.Interlocked.Exchange%60%601%28%60%600%40%2C%60%600%29&gt;</ph> method overload provides a type-safe alternative for reference types.</source>
          <target state="translated">Начиная с .NET Framework версии 2.0, <ph id="ph1">&lt;xref:System.Threading.Interlocked.Exchange%60%601%28%60%600%40%2C%60%600%29&gt;</ph> перегрузка метода предоставляет типобезопасной альтернативой для ссылочных типов.</target>       </trans-unit>
        <trans-unit id="285" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Interlocked.Exchange(System.Object@,System.Object)">
          <source>The following code example shows the syntax for using <ph id="ph1">`Exchange`</ph> with any reference type object.</source>
          <target state="translated">В следующем примере кода показан синтаксис для использования <ph id="ph1">`Exchange`</ph> с любым объектом типа ссылки.</target>       </trans-unit>
        <trans-unit id="286" translate="yes" xml:space="preserve" uid="M:System.Threading.Interlocked.Exchange(System.Object@,System.Object)">
          <source>The address of <ph id="ph1">&lt;paramref name="location1" /&gt;</ph> is a null pointer.</source>
          <target state="translated">Адрес <ph id="ph1">&lt;paramref name="location1" /&gt;</ph> является пустым указателем.</target>       </trans-unit>
        <trans-unit id="287" translate="yes" xml:space="preserve" uid="M:System.Threading.Interlocked.Exchange(System.Single@,System.Single)">
          <source>The variable to set to the specified value.</source>
          <target state="translated">Переменная, которая задается указанным значением.</target>       </trans-unit>
        <trans-unit id="288" translate="yes" xml:space="preserve" uid="M:System.Threading.Interlocked.Exchange(System.Single@,System.Single)">
          <source>The value to which the <bpt id="p1">&lt;c&gt;</bpt>location1<ept id="p1">&lt;/c&gt;</ept> parameter is set.</source>
          <target state="translated">Значение, которое принимает параметр <bpt id="p1">&lt;c&gt;</bpt>location1<ept id="p1">&lt;/c&gt;</ept>.</target>       </trans-unit>
        <trans-unit id="289" translate="yes" xml:space="preserve" uid="M:System.Threading.Interlocked.Exchange(System.Single@,System.Single)">
          <source>Sets a single-precision floating point number to a specified value and returns the original value, as an atomic operation.</source>
          <target state="translated">Задает число с плавающей запятой с одинарной точностью указанным значением в виде атомарной операции и возвращает исходное значение.</target>       </trans-unit>
        <trans-unit id="290" translate="yes" xml:space="preserve" uid="M:System.Threading.Interlocked.Exchange(System.Single@,System.Single)">
          <source>The original value of <ph id="ph1">&lt;paramref name="location1" /&gt;</ph>.</source>
          <target state="translated">Исходное значение <ph id="ph1">&lt;paramref name="location1" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="291" translate="yes" xml:space="preserve" uid="M:System.Threading.Interlocked.Exchange(System.Single@,System.Single)">
          <source>The address of <ph id="ph1">&lt;paramref name="location1" /&gt;</ph> is a null pointer.</source>
          <target state="translated">Адрес <ph id="ph1">&lt;paramref name="location1" /&gt;</ph> является пустым указателем.</target>       </trans-unit>
        <trans-unit id="292" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Interlocked.Exchange``1(``0@,``0)">
          <source>The type to be used for <bpt id="p1">&lt;c&gt;</bpt>location1<ept id="p1">&lt;/c&gt;</ept> and <bpt id="p2">&lt;c&gt;</bpt>value<ept id="p2">&lt;/c&gt;</ept>.</source>
          <target state="translated">Тип, используемый для <bpt id="p1">&lt;c&gt;</bpt>location1<ept id="p1">&lt;/c&gt;</ept> и <bpt id="p2">&lt;c&gt;</bpt>значение<ept id="p2">&lt;/c&gt;</ept>.</target>       </trans-unit>
        <trans-unit id="293" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Interlocked.Exchange``1(``0@,``0)">
          <source>This type must be a reference type.</source>
          <target state="translated">Этот тип должен быть ссылочным типом.</target>       </trans-unit>
        <trans-unit id="294" translate="yes" xml:space="preserve" uid="M:System.Threading.Interlocked.Exchange``1(``0@,``0)">
          <source>The variable to set to the specified value.</source>
          <target state="translated">Переменная, которая задается указанным значением.</target>       </trans-unit>
        <trans-unit id="295" translate="yes" xml:space="preserve" uid="M:System.Threading.Interlocked.Exchange``1(``0@,``0)">
          <source>This is a reference parameter (<ph id="ph1">&lt;see langword="ref" /&gt;</ph> in C#, <ph id="ph2">&lt;see langword="ByRef" /&gt;</ph> in Visual Basic).</source>
          <target state="translated">Это ссылочный параметр (<ph id="ph1">&lt;see langword="ref" /&gt;</ph> в C#, <ph id="ph2">&lt;see langword="ByRef" /&gt;</ph> в Visual Basic).</target>       </trans-unit>
        <trans-unit id="296" translate="yes" xml:space="preserve" uid="M:System.Threading.Interlocked.Exchange``1(``0@,``0)">
          <source>The value to which the <bpt id="p1">&lt;c&gt;</bpt>location1<ept id="p1">&lt;/c&gt;</ept> parameter is set.</source>
          <target state="translated">Значение, которое принимает параметр <bpt id="p1">&lt;c&gt;</bpt>location1<ept id="p1">&lt;/c&gt;</ept>.</target>       </trans-unit>
        <trans-unit id="297" translate="yes" xml:space="preserve" uid="M:System.Threading.Interlocked.Exchange``1(``0@,``0)">
          <source>Sets a variable of the specified type <ph id="ph1">&lt;paramref name="T" /&gt;</ph> to a specified value and returns the original value, as an atomic operation.</source>
          <target state="translated">Задает определенное значение для переменной указанного типа <ph id="ph1">&lt;paramref name="T" /&gt;</ph> и возвращает исходное значение (атомарная операция).</target>       </trans-unit>
        <trans-unit id="298" translate="yes" xml:space="preserve" uid="M:System.Threading.Interlocked.Exchange``1(``0@,``0)">
          <source>The original value of <ph id="ph1">&lt;paramref name="location1" /&gt;</ph>.</source>
          <target state="translated">Исходное значение <ph id="ph1">&lt;paramref name="location1" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="299" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Interlocked.Exchange``1(``0@,``0)">
          <source>This method only supports reference types.</source>
          <target state="translated">Этот метод поддерживает только ссылочные типы.</target>       </trans-unit>
        <trans-unit id="300" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Interlocked.Exchange``1(``0@,``0)">
          <source>There are overloads of the <ph id="ph1">&lt;xref:System.Threading.Interlocked.Exchange%2A&gt;</ph> method for the <ph id="ph2">&lt;xref:System.Int32&gt;</ph>, <ph id="ph3">&lt;xref:System.Int64&gt;</ph>, <ph id="ph4">&lt;xref:System.IntPtr&gt;</ph>, <ph id="ph5">&lt;xref:System.Single&gt;</ph>, and <ph id="ph6">&lt;xref:System.Double&gt;</ph> value types, but there is no support for other value types.</source>
          <target state="translated">Существуют перегрузки <ph id="ph1">&lt;xref:System.Threading.Interlocked.Exchange%2A&gt;</ph> метод <ph id="ph2">&lt;xref:System.Int32&gt;</ph>, <ph id="ph3">&lt;xref:System.Int64&gt;</ph>, <ph id="ph4">&lt;xref:System.IntPtr&gt;</ph>, <ph id="ph5">&lt;xref:System.Single&gt;</ph>, и <ph id="ph6">&lt;xref:System.Double&gt;</ph> типы значений, но не поддерживается для других типов значений.</target>       </trans-unit>
        <trans-unit id="301" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Interlocked.Exchange``1(``0@,``0)">
          <source>This method overload is preferable to the <ph id="ph1">&lt;xref:System.Threading.Interlocked.Exchange%28System.Object%40%2CSystem.Object%29&gt;</ph> method overload, because the latter requires late-bound access to the destination object .</source>
          <target state="translated">Эта перегрузка метода является более предпочтительным, чем <ph id="ph1">&lt;xref:System.Threading.Interlocked.Exchange%28System.Object%40%2CSystem.Object%29&gt;</ph> перегрузку метода, так как последний требуется доступ с поздней привязкой в целевой объект.</target>       </trans-unit>
        <trans-unit id="302" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Interlocked.Exchange``1(``0@,``0)">
          <source>The following example launches ten tasks, each of which generates  100 ten-character part numbers.</source>
          <target state="translated">Следующий пример запускает десять задач, каждая из которых приводит к возникновению ошибки 100 номеров частей десяти символов.</target>       </trans-unit>
        <trans-unit id="303" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Interlocked.Exchange``1(``0@,``0)">
          <source>It then the part number that is first alphabetically.</source>
          <target state="translated">Затем этот номер части, который является первым в алфавитном порядке.</target>       </trans-unit>
        <trans-unit id="304" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Interlocked.Exchange``1(``0@,``0)">
          <source>The example uses the <ph id="ph1">`firstWidget`</ph> variable to store the ID that occurs first in the sort order.</source>
          <target state="translated">В этом примере <ph id="ph1">`firstWidget`</ph> переменной для хранения идентификатора, выполняемое первым в порядке сортировки.</target>       </trans-unit>
        <trans-unit id="305" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Interlocked.Exchange``1(``0@,``0)">
          <source>It compares each ID that it generates with the <ph id="ph1">`firstWidget`</ph> value.</source>
          <target state="translated">Она сравнивает каждый идентификатор, который создается с <ph id="ph1">`firstWidget`</ph> значение.</target>       </trans-unit>
        <trans-unit id="306" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Interlocked.Exchange``1(``0@,``0)">
          <source>If the new value precedes the current value of <ph id="ph1">`firstWidget`</ph> in the sort order, the example calls the <ph id="ph2">&lt;xref:System.Threading.Interlocked.Exchange%2A&gt;</ph> method to assign the new value to <ph id="ph3">`firstWidget`</ph>.</source>
          <target state="translated">Если новое значение предшествует текущее значение <ph id="ph1">`firstWidget`</ph> в порядке сортировки, в примере вызывается <ph id="ph2">&lt;xref:System.Threading.Interlocked.Exchange%2A&gt;</ph> метод, чтобы присвоить новое значение для <ph id="ph3">`firstWidget`</ph>.</target>       </trans-unit>
        <trans-unit id="307" translate="yes" xml:space="preserve" uid="M:System.Threading.Interlocked.Exchange``1(``0@,``0)">
          <source>The address of <ph id="ph1">&lt;paramref name="location1" /&gt;</ph> is a null pointer.</source>
          <target state="translated">Адрес <ph id="ph1">&lt;paramref name="location1" /&gt;</ph> является пустым указателем.</target>       </trans-unit>
        <trans-unit id="308" translate="yes" xml:space="preserve" uid="T:System.Threading.Interlocked">
          <source>Increments a specified variable and stores the result, as an atomic operation.</source>
          <target state="translated">Увеличивает значение заданной переменной и сохраняет результат в виде атомарной операции.</target>       </trans-unit>
        <trans-unit id="309" translate="yes" xml:space="preserve" uid="M:System.Threading.Interlocked.Increment(System.Int32@)">
          <source>The variable whose value is to be incremented.</source>
          <target state="translated">Переменная, значение которой должно увеличиваться.</target>       </trans-unit>
        <trans-unit id="310" translate="yes" xml:space="preserve" uid="M:System.Threading.Interlocked.Increment(System.Int32@)">
          <source>Increments a specified variable and stores the result, as an atomic operation.</source>
          <target state="translated">Увеличивает значение заданной переменной и сохраняет результат в виде атомарной операции.</target>       </trans-unit>
        <trans-unit id="311" translate="yes" xml:space="preserve" uid="M:System.Threading.Interlocked.Increment(System.Int32@)">
          <source>The incremented value.</source>
          <target state="translated">Увеличиваемое значение.</target>       </trans-unit>
        <trans-unit id="312" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Interlocked.Increment(System.Int32@)">
          <source>This method handles an overflow condition by wrapping: if <ph id="ph1">`location`</ph><ph id="ph2"> = </ph><ph id="ph3">&lt;xref:System.Int32.MaxValue?displayProperty=nameWithType&gt;</ph>, <ph id="ph4">`location`</ph> + 1 = <ph id="ph5">&lt;xref:System.Int32.MinValue?displayProperty=nameWithType&gt;</ph>.</source>
          <target state="translated">Этот метод обрабатывает условие, заключив: Если <ph id="ph1">`location`</ph> <ph id="ph2"> = </ph> <ph id="ph3">&lt;xref:System.Int32.MaxValue?displayProperty=nameWithType&gt;</ph>, <ph id="ph4">`location`</ph> + 1 = <ph id="ph5">&lt;xref:System.Int32.MinValue?displayProperty=nameWithType&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="313" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Interlocked.Increment(System.Int32@)">
          <source>No exception is thrown.</source>
          <target state="translated">Исключение не возникает.</target>       </trans-unit>
        <trans-unit id="314" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Interlocked.Increment(System.Int32@)">
          <source>The following example determines how many random numbers that range from 0 to 1,000 are required to generate 1,000 random numbers with a midpoint value.</source>
          <target state="translated">В следующем примере определяется, необходимые для создания 1 000 случайных чисел с среднее значение количества случайных чисел в диапазоне от 0 до 1000.</target>       </trans-unit>
        <trans-unit id="315" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Interlocked.Increment(System.Int32@)">
          <source>To keep track of the number of midpoint values, a variable, <ph id="ph1">`midpointCount`</ph>, is set equal to 0 and incremented each time the random number generator returns a midpoint value until it reaches 10,000.</source>
          <target state="translated">Для отслеживания числа значений середины, переменной, <ph id="ph1">`midpointCount`</ph>, равным 0 и увеличивается на единицу при каждом генератора случайных чисел возвращает среднее значение, пока не достигнет 10 000.</target>       </trans-unit>
        <trans-unit id="316" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Interlocked.Increment(System.Int32@)">
          <source>Because three threads generate the random numbers, the <ph id="ph1">&lt;xref:System.Threading.Interlocked.Increment%28System.Int32%40%29&gt;</ph> method is called to ensure that multiple threads don't update <ph id="ph2">`midpointCount`</ph> concurrently.</source>
          <target state="translated">Так как три потока создания случайных чисел, <ph id="ph1">&lt;xref:System.Threading.Interlocked.Increment%28System.Int32%40%29&gt;</ph> метод вызывается, чтобы убедиться, что несколько потоков не обновлять <ph id="ph2">`midpointCount`</ph> одновременно.</target>       </trans-unit>
        <trans-unit id="317" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Interlocked.Increment(System.Int32@)">
          <source>Note that a lock is also used to protect the random number generator, and that a <ph id="ph1">&lt;xref:System.Threading.CountdownEvent&gt;</ph> object is used to ensure that the <ph id="ph2">`Main`</ph> method doesn't finish execution before the three threads.</source>
          <target state="translated">Обратите внимание, что блокировка также используется для защиты генератора случайных чисел и что <ph id="ph1">&lt;xref:System.Threading.CountdownEvent&gt;</ph> объект используется для убедитесь, что <ph id="ph2">`Main`</ph> метод завершается выполнение перед три потока.</target>       </trans-unit>
        <trans-unit id="318" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Interlocked.Increment(System.Int32@)">
          <source>The following example is similar to the previous one, except that it uses the  instead of a thread procedure to generate 50,000 random midpoint integers.</source>
          <target state="translated">Следующий пример похож на предыдущий, за исключением того, что он использует вместо поток процедуру, чтобы сформировать 50 000 середины случайных целых чисел.</target>       </trans-unit>
        <trans-unit id="319" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Interlocked.Increment(System.Int32@)">
          <source>In this example, a lambda expression replaces the <ph id="ph1">`GenerateNumbers`</ph> thread procedure, and the call to the <ph id="ph2">&lt;xref:System.Threading.Tasks.Task.WaitAll%2A?displayProperty=nameWithType&gt;</ph> method eliminates the need for the <ph id="ph3">&lt;xref:System.Threading.CountdownEvent&gt;</ph> object.</source>
          <target state="translated">В этом примере лямбда-выражение заменяет <ph id="ph1">`GenerateNumbers`</ph> процедуры потока и вызова <ph id="ph2">&lt;xref:System.Threading.Tasks.Task.WaitAll%2A?displayProperty=nameWithType&gt;</ph> метод исключает необходимость в <ph id="ph3">&lt;xref:System.Threading.CountdownEvent&gt;</ph> объекта.</target>       </trans-unit>
        <trans-unit id="320" translate="yes" xml:space="preserve" uid="M:System.Threading.Interlocked.Increment(System.Int32@)">
          <source>The address of <ph id="ph1">&lt;paramref name="location" /&gt;</ph> is a null pointer.</source>
          <target state="translated">Адрес <ph id="ph1">&lt;paramref name="location" /&gt;</ph> является пустым указателем.</target>       </trans-unit>
        <trans-unit id="321" translate="yes" xml:space="preserve" uid="M:System.Threading.Interlocked.Increment(System.Int64@)">
          <source>The variable whose value is to be incremented.</source>
          <target state="translated">Переменная, значение которой должно увеличиваться.</target>       </trans-unit>
        <trans-unit id="322" translate="yes" xml:space="preserve" uid="M:System.Threading.Interlocked.Increment(System.Int64@)">
          <source>Increments a specified variable and stores the result, as an atomic operation.</source>
          <target state="translated">Увеличивает значение заданной переменной и сохраняет результат в виде атомарной операции.</target>       </trans-unit>
        <trans-unit id="323" translate="yes" xml:space="preserve" uid="M:System.Threading.Interlocked.Increment(System.Int64@)">
          <source>The incremented value.</source>
          <target state="translated">Увеличиваемое значение.</target>       </trans-unit>
        <trans-unit id="324" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Interlocked.Increment(System.Int64@)">
          <source>This method handles an overflow condition by wrapping: if <ph id="ph1">`location`</ph><ph id="ph2"> = </ph><ph id="ph3">&lt;xref:System.Int64.MaxValue?displayProperty=nameWithType&gt;</ph>, <ph id="ph4">`location`</ph> + 1 = <ph id="ph5">&lt;xref:System.Int64.MinValue?displayProperty=nameWithType&gt;</ph>.</source>
          <target state="translated">Этот метод обрабатывает условие, заключив: Если <ph id="ph1">`location`</ph> <ph id="ph2"> = </ph> <ph id="ph3">&lt;xref:System.Int64.MaxValue?displayProperty=nameWithType&gt;</ph>, <ph id="ph4">`location`</ph> + 1 = <ph id="ph5">&lt;xref:System.Int64.MinValue?displayProperty=nameWithType&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="325" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Interlocked.Increment(System.Int64@)">
          <source>No exception is thrown.</source>
          <target state="translated">Исключение не возникает.</target>       </trans-unit>
        <trans-unit id="326" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Interlocked.Increment(System.Int64@)">
          <source>The <ph id="ph1">&lt;xref:System.Threading.Interlocked.Read%2A&gt;</ph> method and the 64-bit overloads of the <ph id="ph2">&lt;xref:System.Threading.Interlocked.Increment%2A&gt;</ph>, <ph id="ph3">&lt;xref:System.Threading.Interlocked.Decrement%2A&gt;</ph>, and <ph id="ph4">&lt;xref:System.Threading.Interlocked.Add%2A&gt;</ph> methods are truly atomic only on systems where a <ph id="ph5">&lt;xref:System.IntPtr?displayProperty=nameWithType&gt;</ph> is 64 bits long.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Threading.Interlocked.Read%2A&gt;</ph> Метод и 64-разрядных перегрузки <ph id="ph2">&lt;xref:System.Threading.Interlocked.Increment%2A&gt;</ph>, <ph id="ph3">&lt;xref:System.Threading.Interlocked.Decrement%2A&gt;</ph>, и <ph id="ph4">&lt;xref:System.Threading.Interlocked.Add%2A&gt;</ph> методы атомарны действительно только в системах, где <ph id="ph5">&lt;xref:System.IntPtr?displayProperty=nameWithType&gt;</ph> long 64 бита.</target>       </trans-unit>
        <trans-unit id="327" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Interlocked.Increment(System.Int64@)">
          <source>On other systems, these methods are atomic with respect to each other, but not with respect to other means of accessing the data.</source>
          <target state="translated">В других системах эти методы являются атомарными по отношению друг к другу, но не по отношению к другим способом доступа к данным.</target>       </trans-unit>
        <trans-unit id="328" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Interlocked.Increment(System.Int64@)">
          <source>Thus, to be thread safe on 32-bit systems, any access to a 64-bit value must be made through the members of the <ph id="ph1">&lt;xref:System.Threading.Interlocked&gt;</ph> class.</source>
          <target state="translated">Таким образом, чтобы быть поточно-ориентированным на 32-разрядных системах, доступ к 64-разрядное значение необходимо вносить с помощью члены <ph id="ph1">&lt;xref:System.Threading.Interlocked&gt;</ph> класса.</target>       </trans-unit>
        <trans-unit id="329" translate="yes" xml:space="preserve" uid="M:System.Threading.Interlocked.Increment(System.Int64@)">
          <source>The address of <ph id="ph1">&lt;paramref name="location" /&gt;</ph> is a null pointer.</source>
          <target state="translated">Адрес <ph id="ph1">&lt;paramref name="location" /&gt;</ph> является пустым указателем.</target>       </trans-unit>
        <trans-unit id="330" translate="yes" xml:space="preserve" uid="M:System.Threading.Interlocked.MemoryBarrier">
          <source>Synchronizes memory access as follows: The processor that executes the current thread cannot reorder instructions in such a way that memory accesses before the call to <ph id="ph1">&lt;see cref="M:System.Threading.Interlocked.MemoryBarrier" /&gt;</ph> execute after memory accesses that follow the call to <ph id="ph2">&lt;see cref="M:System.Threading.Interlocked.MemoryBarrier" /&gt;</ph>.</source>
          <target state="translated">Синхронизирует доступ к памяти следующим образом: процессор, выполняющий текущий поток, не способен упорядочить инструкции так, чтобы обращения к памяти до вызова метода <ph id="ph1">&lt;see cref="M:System.Threading.Interlocked.MemoryBarrier" /&gt;</ph> выполнялись после обращений к памяти, следующих за вызовом метода <ph id="ph2">&lt;see cref="M:System.Threading.Interlocked.MemoryBarrier" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="331" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Interlocked.MemoryBarrier">
          <source>This method was added to the <ph id="ph1">&lt;xref:System.Threading.Interlocked&gt;</ph> class in the <ph id="ph2">[!INCLUDE[net_v45](~/includes/net-v45-md.md)]</ph> as a convenience; it's a wrapper for the <ph id="ph3">&lt;xref:System.Threading.Thread.MemoryBarrier%2A?displayProperty=nameWithType&gt;</ph> method.</source>
          <target state="translated">Этот метод добавлен для <ph id="ph1">&lt;xref:System.Threading.Interlocked&gt;</ph> класса в <ph id="ph2">[!INCLUDE[net_v45](~/includes/net-v45-md.md)]</ph> для удобства; он является оболочкой для <ph id="ph3">&lt;xref:System.Threading.Thread.MemoryBarrier%2A?displayProperty=nameWithType&gt;</ph> метод.</target>       </trans-unit>
        <trans-unit id="332" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Interlocked.MemoryBarrier">
          <source><ph id="ph1">&lt;xref:System.Threading.Interlocked.MemoryBarrier%2A&gt;</ph> is required only on multiprocessor systems that have weak memory ordering (for example, a system that employs multiple Intel Itanium processors).</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Threading.Interlocked.MemoryBarrier%2A&gt;</ph> требуется только в многопроцессорных системах, которые имеют слабые память порядок (например, системы, который использует несколько процессоров Intel Itanium).</target>       </trans-unit>
        <trans-unit id="333" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Interlocked.MemoryBarrier">
          <source>For most purposes, the C# <ph id="ph1">`lock`</ph> statement, the Visual Basic <ph id="ph2">`SyncLock`</ph> statement, or the <ph id="ph3">&lt;xref:System.Threading.Monitor&gt;</ph> class provide easier ways to synchronize data.</source>
          <target state="translated">Для большинства целей, C# <ph id="ph1">`lock`</ph> оператор, Visual Basic <ph id="ph2">`SyncLock`</ph> инструкции или <ph id="ph3">&lt;xref:System.Threading.Monitor&gt;</ph> класса предоставляют более простые способы синхронизации данных.</target>       </trans-unit>
        <trans-unit id="334" translate="yes" xml:space="preserve" uid="M:System.Threading.Interlocked.Read(System.Int64@)">
          <source>The 64-bit value to be loaded.</source>
          <target state="translated">Загружаемое 64-разрядное значение.</target>       </trans-unit>
        <trans-unit id="335" translate="yes" xml:space="preserve" uid="M:System.Threading.Interlocked.Read(System.Int64@)">
          <source>Returns a 64-bit value, loaded as an atomic operation.</source>
          <target state="translated">Возвращает 64-разрядное значение, загруженное в виде атомарной операции.</target>       </trans-unit>
        <trans-unit id="336" translate="yes" xml:space="preserve" uid="M:System.Threading.Interlocked.Read(System.Int64@)">
          <source>The loaded value.</source>
          <target state="translated">Загруженное значение.</target>       </trans-unit>
        <trans-unit id="337" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Interlocked.Read(System.Int64@)">
          <source>The <ph id="ph1">&lt;xref:System.Threading.Interlocked.Read%2A&gt;</ph> method is unnecessary on 64-bit systems, because 64-bit read operations are already atomic.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Threading.Interlocked.Read%2A&gt;</ph> Метод необязателен в 64-разрядных системах, так как 64-разрядной операции чтения уже являются атомарными.</target>       </trans-unit>
        <trans-unit id="338" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Interlocked.Read(System.Int64@)">
          <source>On 32-bit systems, 64-bit read operations are not atomic unless performed using <ph id="ph1">&lt;xref:System.Threading.Interlocked.Read%2A&gt;</ph>.</source>
          <target state="translated">В 32-разрядных системах, операций чтения для 64-разрядных не являются атомарными, если не выполнить с помощью <ph id="ph1">&lt;xref:System.Threading.Interlocked.Read%2A&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="339" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Interlocked.Read(System.Int64@)">
          <source>The <ph id="ph1">&lt;xref:System.Threading.Interlocked.Read%2A&gt;</ph> method and the 64-bit overloads of the <ph id="ph2">&lt;xref:System.Threading.Interlocked.Increment%2A&gt;</ph>, <ph id="ph3">&lt;xref:System.Threading.Interlocked.Decrement%2A&gt;</ph>, and <ph id="ph4">&lt;xref:System.Threading.Interlocked.Add%2A&gt;</ph> methods are truly atomic only on systems where a <ph id="ph5">&lt;xref:System.IntPtr?displayProperty=nameWithType&gt;</ph> is 64 bits long.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Threading.Interlocked.Read%2A&gt;</ph> Метод и 64-разрядных перегрузки <ph id="ph2">&lt;xref:System.Threading.Interlocked.Increment%2A&gt;</ph>, <ph id="ph3">&lt;xref:System.Threading.Interlocked.Decrement%2A&gt;</ph>, и <ph id="ph4">&lt;xref:System.Threading.Interlocked.Add%2A&gt;</ph> методы атомарны действительно только в системах, где <ph id="ph5">&lt;xref:System.IntPtr?displayProperty=nameWithType&gt;</ph> long 64 бита.</target>       </trans-unit>
        <trans-unit id="340" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Interlocked.Read(System.Int64@)">
          <source>On other systems, these methods are atomic with respect to each other, but not with respect to other means of accessing the data.</source>
          <target state="translated">В других системах эти методы являются атомарными по отношению друг к другу, но не по отношению к другим способом доступа к данным.</target>       </trans-unit>
        <trans-unit id="341" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Interlocked.Read(System.Int64@)">
          <source>Thus, to be thread safe on 32-bit systems, any access to a 64-bit value must be made through the members of the <ph id="ph1">&lt;xref:System.Threading.Interlocked&gt;</ph> class.</source>
          <target state="translated">Таким образом, чтобы быть поточно-ориентированным на 32-разрядных системах, доступ к 64-разрядное значение необходимо вносить с помощью члены <ph id="ph1">&lt;xref:System.Threading.Interlocked&gt;</ph> класса.</target>       </trans-unit>
        <trans-unit id="342" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Interlocked.Read(System.Int64@)">
          <source><ph id="ph1">&lt;xref:System.IntPtr&gt;</ph> is a platform-specific type.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.IntPtr&gt;</ph> — Это тип конкретную платформу.</target>       </trans-unit>
      </group>
    </body>
  </file>
</xliff>