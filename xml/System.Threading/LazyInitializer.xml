<Type Name="LazyInitializer" FullName="System.Threading.LazyInitializer">
  <TypeSignature Language="C#" Value="public static class LazyInitializer" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi abstract sealed beforefieldinit LazyInitializer extends System.Object" />
  <TypeSignature Language="DocId" Value="T:System.Threading.LazyInitializer" />
  <TypeSignature Language="VB.NET" Value="Public Class LazyInitializer" />
  <TypeSignature Language="C++ CLI" Value="public ref class LazyInitializer abstract sealed" />
  <AssemblyInfo>
    <AssemblyName>System.Threading</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.10.0</AssemblyVersion>
    <AssemblyVersion>4.1.0.0</AssemblyVersion>
    <AssemblyVersion>4.1.1.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>mscorlib</AssemblyName>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary><span data-ttu-id="5b55b-101">Обеспечивает процедуры инициализации адаптирующегося типа.</span><span class="sxs-lookup"><span data-stu-id="5b55b-101">Provides lazy initialization routines.</span></span></summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="5b55b-102">Эти подпрограммы позволяют избежать необходимости выделять выделенный, отложенной инициализации экземпляра, вместо использования ссылок, чтобы убедиться, что целевые объекты были инициализированы, поскольку они доступны.</span><span class="sxs-lookup"><span data-stu-id="5b55b-102">These routines avoid needing to allocate a dedicated, lazy-initialization instance, instead using references to ensure targets have been initialized as they are accessed.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="5b55b-103">В следующем примере демонстрируется использование EnsureInitialized отложенная инициализация значение, используя значение типа Boolean для отслеживания ли инициализация уже был выполнен и объект для использования в качестве взаимно исключающей блокировки.</span><span class="sxs-lookup"><span data-stu-id="5b55b-103">The following example demonstrates how to use EnsureInitialized to lazily initialize a value using a Boolean value to track whether initialization has already happened and an object to use as the mutual exclusion lock.</span></span>  
  
```vb  
Dim _data As ExpensiveData = Nothing  
Dim _dataInitialized As Boolean = False  
Dim _dataLock As Object = Nothing  
'    ...  
Dim name = LazyInitializer.EnsureInitialized(_data, _dataInitialized, _dataLock)  
```  
  
```csharp  
ExpensiveData _data = null;  
                     bool _dataInitialized = false;  
                     object _dataLock = new object();  
                  //  ...  
  
                    ExpensiveData dataToUse = LazyInitializer.EnsureInitialized(ref _data, ref _dataInitialized, ref _dataLock);  
```  
  
 ]]></format>
    </remarks>
    <threadsafe><span data-ttu-id="5b55b-104">Методы <see cref="T:System.Threading.LazyInitializer" /> являются потокобезопасными и могут быть вызваны из нескольких потоков одновременно.</span><span class="sxs-lookup"><span data-stu-id="5b55b-104">The methods of <see cref="T:System.Threading.LazyInitializer" /> are thread-safe and may be called from multiple threads concurrently.</span></span></threadsafe>
  </Docs>
  <Members>
    <MemberGroup MemberName="EnsureInitialized&lt;T&gt;">
      <AssemblyInfo>
        <AssemblyName>System.Threading</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="5b55b-105">Инициализирует целевой тип, если он еще не инициализирован.</span><span class="sxs-lookup"><span data-stu-id="5b55b-105">Initializes a target type if it hasn't already been initialized.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="EnsureInitialized&lt;T&gt;">
      <MemberSignature Language="C#" Value="public static T EnsureInitialized&lt;T&gt; (ref T target) where T : class;" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig !!T EnsureInitialized&lt;class T&gt;(!!T&amp; target) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.LazyInitializer.EnsureInitialized``1(``0@)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function EnsureInitialized(Of T As Class) (ByRef target As T) As T" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename T&gt;&#xA; where T : class static T EnsureInitialized(T % target);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>T</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="T">
          <Constraints>
            <ParameterAttribute>ReferenceTypeConstraint</ParameterAttribute>
          </Constraints>
        </TypeParameter>
      </TypeParameters>
      <Parameters>
        <Parameter Name="target" Type="T&amp;" RefType="ref" />
      </Parameters>
      <Docs>
        <typeparam name="T"><span data-ttu-id="5b55b-106">Тип инициализируемой ссылки.</span><span class="sxs-lookup"><span data-stu-id="5b55b-106">The type of the reference to be initialized.</span></span></typeparam>
        <param name="target"><span data-ttu-id="5b55b-107">Ссылка типа <c>T</c>, которую необходимо инициализировать, если она еще не инициализирована.</span><span class="sxs-lookup"><span data-stu-id="5b55b-107">A reference of type <c>T</c> to initialize if it has not already been initialized.</span></span></param>
        <summary><span data-ttu-id="5b55b-108">Инициализирует целевой ссылочный тип его конструктором типа по умолчанию, если он еще не инициализирован.</span><span class="sxs-lookup"><span data-stu-id="5b55b-108">Initializes a target reference type with the type's default constructor if it hasn't already been initialized.</span></span></summary>
        <returns><span data-ttu-id="5b55b-109">Инициализируемая ссылка типа <paramref name="T" />.</span><span class="sxs-lookup"><span data-stu-id="5b55b-109">The initialized reference of type <paramref name="T" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="5b55b-110">Этот метод может использоваться только со ссылочными типами.</span><span class="sxs-lookup"><span data-stu-id="5b55b-110">This method may only be used on reference types.</span></span> <span data-ttu-id="5b55b-111">Чтобы обеспечить инициализацию типов значений, см. другие перегрузки EnsureInitialized.</span><span class="sxs-lookup"><span data-stu-id="5b55b-111">To ensure initialization of value types, see other overloads of EnsureInitialized.</span></span>  
  
 <span data-ttu-id="5b55b-112">Этот метод может использоваться одновременно несколькими потоками для инициализации `target`.</span><span class="sxs-lookup"><span data-stu-id="5b55b-112">This method may be used concurrently by multiple threads to initialize `target`.</span></span>  
  
 <span data-ttu-id="5b55b-113">В случае, когда несколько потоков, доступ к этому методу одновременно несколько экземпляров `T` может быть создан, но только один будет храниться в `target`.</span><span class="sxs-lookup"><span data-stu-id="5b55b-113">In the event that multiple threads access this method concurrently, multiple instances of `T` may be created, but only one will be stored into `target`.</span></span> <span data-ttu-id="5b55b-114">В таких ситуаций этот метод не уничтожает объекты, которые не были сохранены.</span><span class="sxs-lookup"><span data-stu-id="5b55b-114">In such an occurrence, this method will not dispose of the objects that were not stored.</span></span> <span data-ttu-id="5b55b-115">Если такие объекты должны быть уничтожены, именно вызывающий объект для определения, если объект не был использован и затем соответствующим образом удалить объект.</span><span class="sxs-lookup"><span data-stu-id="5b55b-115">If such objects must be disposed, it is up to the caller to determine if an object was not used and to then dispose of the object appropriately.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.MemberAccessException"><span data-ttu-id="5b55b-116">Разрешения на доступ к конструктору типа <paramref name="T" /> отсутствовали.</span><span class="sxs-lookup"><span data-stu-id="5b55b-116">Permissions to access the constructor of type <paramref name="T" /> were missing.</span></span></exception>
        <exception cref="T:System.MissingMemberException"><span data-ttu-id="5b55b-117">Тип <paramref name="T" /> не имеет конструктора по умолчанию.</span><span class="sxs-lookup"><span data-stu-id="5b55b-117">Type <paramref name="T" /> does not have a default constructor.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="EnsureInitialized&lt;T&gt;">
      <MemberSignature Language="C#" Value="public static T EnsureInitialized&lt;T&gt; (ref T target, Func&lt;T&gt; valueFactory) where T : class;" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig !!T EnsureInitialized&lt;class T&gt;(!!T&amp; target, class System.Func`1&lt;!!T&gt; valueFactory) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.LazyInitializer.EnsureInitialized``1(``0@,System.Func{``0})" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function EnsureInitialized(Of T As Class) (ByRef target As T, valueFactory As Func(Of T)) As T" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename T&gt;&#xA; where T : class static T EnsureInitialized(T % target, Func&lt;T&gt; ^ valueFactory);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>T</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="T">
          <Constraints>
            <ParameterAttribute>ReferenceTypeConstraint</ParameterAttribute>
          </Constraints>
        </TypeParameter>
      </TypeParameters>
      <Parameters>
        <Parameter Name="target" Type="T&amp;" RefType="ref" />
        <Parameter Name="valueFactory" Type="System.Func&lt;T&gt;" />
      </Parameters>
      <Docs>
        <typeparam name="T"><span data-ttu-id="5b55b-118">Ссылочный тип инициализируемой ссылки.</span><span class="sxs-lookup"><span data-stu-id="5b55b-118">The reference type of the reference to be initialized.</span></span></typeparam>
        <param name="target"><span data-ttu-id="5b55b-119">Ссылка типа <c>T</c>, которую необходимо инициализировать, если она еще не инициализирована.</span><span class="sxs-lookup"><span data-stu-id="5b55b-119">The reference of type <c>T</c> to initialize if it hasn't already been initialized.</span></span></param>
        <param name="valueFactory"><span data-ttu-id="5b55b-120">Функция, которая вызывается для инициализации ссылки.</span><span class="sxs-lookup"><span data-stu-id="5b55b-120">The function that is called to initialize the reference.</span></span></param>
        <summary><span data-ttu-id="5b55b-121">Инициализирует целевой ссылочный тип с использованием указанной функцией, если он еще не инициализирован.</span><span class="sxs-lookup"><span data-stu-id="5b55b-121">Initializes a target reference type by using a specified function if it hasn't already been initialized.</span></span></summary>
        <returns><span data-ttu-id="5b55b-122">Инициализированное значение типа <paramref name="T" />.</span><span class="sxs-lookup"><span data-stu-id="5b55b-122">The initialized value of type <paramref name="T" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="5b55b-123">Этот метод может использоваться только со ссылочными типами и `valueFactory` не может возвращать пустую ссылку (Nothing в Visual Basic).</span><span class="sxs-lookup"><span data-stu-id="5b55b-123">This method may only be used on reference types, and `valueFactory` may not return a null reference (Nothing in Visual Basic).</span></span> <span data-ttu-id="5b55b-124">Чтобы обеспечить инициализацию типов значений или разрешить значение null ссылочных типов, см. другие перегрузки EnsureInitialized.</span><span class="sxs-lookup"><span data-stu-id="5b55b-124">To ensure initialization of value types or to allow null reference types, see other overloads of EnsureInitialized.</span></span>  
  
 <span data-ttu-id="5b55b-125">Этот метод может использоваться одновременно несколькими потоками для инициализации `target`.</span><span class="sxs-lookup"><span data-stu-id="5b55b-125">This method may be used concurrently by multiple threads to initialize `target`.</span></span>  
  
 <span data-ttu-id="5b55b-126">В случае, когда несколько потоков, доступ к этому методу одновременно несколько экземпляров `T` может быть создан, но только один будет храниться в `target`.</span><span class="sxs-lookup"><span data-stu-id="5b55b-126">In the event that multiple threads access this method concurrently, multiple instances of `T` may be created, but only one will be stored into `target`.</span></span> <span data-ttu-id="5b55b-127">В таких ситуаций этот метод не уничтожает объекты, которые не были сохранены.</span><span class="sxs-lookup"><span data-stu-id="5b55b-127">In such an occurrence, this method will not dispose of the objects that were not stored.</span></span> <span data-ttu-id="5b55b-128">Если такие объекты должны быть уничтожены, именно вызывающий объект для определения, если объект не был использован и затем соответствующим образом удалить объект.</span><span class="sxs-lookup"><span data-stu-id="5b55b-128">If such objects must be disposed, it is up to the caller to determine if an object was not used and to then dispose of the object appropriately.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.MissingMemberException"><span data-ttu-id="5b55b-129">Тип <paramref name="T" /> не имеет конструктора по умолчанию.</span><span class="sxs-lookup"><span data-stu-id="5b55b-129">Type <paramref name="T" /> does not have a default constructor.</span></span></exception>
        <exception cref="T:System.InvalidOperationException">
          <span data-ttu-id="5b55b-130"><paramref name="valueFactory" /> вернул значение NULL (Nothing в Visual Basic).</span><span class="sxs-lookup"><span data-stu-id="5b55b-130"><paramref name="valueFactory" /> returned null (Nothing in Visual Basic).</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="EnsureInitialized&lt;T&gt;">
      <MemberSignature Language="C#" Value="public static T EnsureInitialized&lt;T&gt; (ref T target, ref bool initialized, ref object syncLock);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig !!T EnsureInitialized&lt;T&gt;(!!T&amp; target, bool&amp; initialized, object&amp; syncLock) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.LazyInitializer.EnsureInitialized``1(``0@,System.Boolean@,System.Object@)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function EnsureInitialized(Of T) (ByRef target As T, ByRef initialized As Boolean, ByRef syncLock As Object) As T" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename T&gt;&#xA; static T EnsureInitialized(T % target, bool % initialized, System::Object ^ % syncLock);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>T</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="T" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="target" Type="T&amp;" RefType="ref" />
        <Parameter Name="initialized" Type="System.Boolean&amp;" RefType="ref" />
        <Parameter Name="syncLock" Type="System.Object&amp;" RefType="ref" />
      </Parameters>
      <Docs>
        <typeparam name="T"><span data-ttu-id="5b55b-131">Тип инициализируемой ссылки.</span><span class="sxs-lookup"><span data-stu-id="5b55b-131">The type of the reference to be initialized.</span></span></typeparam>
        <param name="target"><span data-ttu-id="5b55b-132">Ссылка или значение типа <c>T</c>, которое необходимо инициализировать, если оно еще не инициализировано.</span><span class="sxs-lookup"><span data-stu-id="5b55b-132">A reference or value of type <c>T</c> to initialize if it hasn't already been initialized.</span></span></param>
        <param name="initialized"><span data-ttu-id="5b55b-133">Ссылка на логическое значение, определяющее, инициализирована ли цель.</span><span class="sxs-lookup"><span data-stu-id="5b55b-133">A reference to a Boolean value that determines whether the target has already been initialized.</span></span></param>
        <param name="syncLock"><span data-ttu-id="5b55b-134">Ссылка на объект, используемый как взаимоисключающая блокировка для инициализации параметра <c>target</c>.</span><span class="sxs-lookup"><span data-stu-id="5b55b-134">A reference to an object used as the mutually exclusive lock for initializing <c>target</c>.</span></span> <span data-ttu-id="5b55b-135">Если <c>syncLock</c> имеет значение <see langword="null" />, будет создан новый объект.</span><span class="sxs-lookup"><span data-stu-id="5b55b-135">If <c>syncLock</c> is <see langword="null" />, a new object will be instantiated.</span></span></param>
        <summary><span data-ttu-id="5b55b-136">Инициализирует целевой ссылочный тип или тип значения его конструктором по умолчанию, если он еще не инициализирован.</span><span class="sxs-lookup"><span data-stu-id="5b55b-136">Initializes a target reference or value type with its default constructor if it hasn't already been initialized.</span></span></summary>
        <returns><span data-ttu-id="5b55b-137">Инициализированное значение типа <paramref name="T" />.</span><span class="sxs-lookup"><span data-stu-id="5b55b-137">The initialized value of type <paramref name="T" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="5b55b-138">Если `intialized` задано как true, то Дополнительная инициализация не выполняется.</span><span class="sxs-lookup"><span data-stu-id="5b55b-138">If `intialized` is specified as true, then no further initialization occurs.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.MemberAccessException"><span data-ttu-id="5b55b-139">Разрешения на доступ к конструктору типа <paramref name="T" /> отсутствовали.</span><span class="sxs-lookup"><span data-stu-id="5b55b-139">Permissions to access the constructor of type <paramref name="T" /> were missing.</span></span></exception>
        <exception cref="T:System.MissingMemberException"><span data-ttu-id="5b55b-140">Тип <paramref name="T" /> не имеет конструктора по умолчанию.</span><span class="sxs-lookup"><span data-stu-id="5b55b-140">Type <paramref name="T" /> does not have a default constructor.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="EnsureInitialized&lt;T&gt;">
      <MemberSignature Language="C#" Value="public static T EnsureInitialized&lt;T&gt; (ref T target, ref object syncLock, Func&lt;T&gt; valueFactory) where T : class;" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig !!T EnsureInitialized&lt;class T&gt;(!!T&amp; target, object&amp; syncLock, class System.Func`1&lt;!!T&gt; valueFactory) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.LazyInitializer.EnsureInitialized``1(``0@,System.Object@,System.Func{``0})" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function EnsureInitialized(Of T As Class) (ByRef target As T, ByRef syncLock As Object, valueFactory As Func(Of T)) As T" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename T&gt;&#xA; where T : class static T EnsureInitialized(T % target, System::Object ^ % syncLock, Func&lt;T&gt; ^ valueFactory);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>T</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="T">
          <Constraints>
            <ParameterAttribute>ReferenceTypeConstraint</ParameterAttribute>
          </Constraints>
        </TypeParameter>
      </TypeParameters>
      <Parameters>
        <Parameter Name="target" Type="T&amp;" RefType="ref" />
        <Parameter Name="syncLock" Type="System.Object&amp;" RefType="ref" />
        <Parameter Name="valueFactory" Type="System.Func&lt;T&gt;" />
      </Parameters>
      <Docs>
        <typeparam name="T">To be added.</typeparam>
        <param name="target">To be added.</param>
        <param name="syncLock">To be added.</param>
        <param name="valueFactory">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="EnsureInitialized&lt;T&gt;">
      <MemberSignature Language="C#" Value="public static T EnsureInitialized&lt;T&gt; (ref T target, ref bool initialized, ref object syncLock, Func&lt;T&gt; valueFactory);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig !!T EnsureInitialized&lt;T&gt;(!!T&amp; target, bool&amp; initialized, object&amp; syncLock, class System.Func`1&lt;!!T&gt; valueFactory) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.LazyInitializer.EnsureInitialized``1(``0@,System.Boolean@,System.Object@,System.Func{``0})" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function EnsureInitialized(Of T) (ByRef target As T, ByRef initialized As Boolean, ByRef syncLock As Object, valueFactory As Func(Of T)) As T" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename T&gt;&#xA; static T EnsureInitialized(T % target, bool % initialized, System::Object ^ % syncLock, Func&lt;T&gt; ^ valueFactory);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>T</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="T" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="target" Type="T&amp;" RefType="ref" />
        <Parameter Name="initialized" Type="System.Boolean&amp;" RefType="ref" />
        <Parameter Name="syncLock" Type="System.Object&amp;" RefType="ref" />
        <Parameter Name="valueFactory" Type="System.Func&lt;T&gt;" />
      </Parameters>
      <Docs>
        <typeparam name="T"><span data-ttu-id="5b55b-141">Тип инициализируемой ссылки.</span><span class="sxs-lookup"><span data-stu-id="5b55b-141">The type of the reference to be initialized.</span></span></typeparam>
        <param name="target"><span data-ttu-id="5b55b-142">Ссылка или значение типа <c>T</c>, которое необходимо инициализировать, если оно еще не инициализировано.</span><span class="sxs-lookup"><span data-stu-id="5b55b-142">A reference or value of type <c>T</c> to initialize if it hasn't already been initialized.</span></span></param>
        <param name="initialized"><span data-ttu-id="5b55b-143">Ссылка на логическое значение, определяющее, инициализирована ли цель.</span><span class="sxs-lookup"><span data-stu-id="5b55b-143">A reference to a Boolean value that determines whether the target has already been initialized.</span></span></param>
        <param name="syncLock"><span data-ttu-id="5b55b-144">Ссылка на объект, используемый как взаимоисключающая блокировка для инициализации параметра <c>target</c>.</span><span class="sxs-lookup"><span data-stu-id="5b55b-144">A reference to an object used as the mutually exclusive lock for initializing <c>target</c>.</span></span> <span data-ttu-id="5b55b-145">Если <c>syncLock</c> имеет значение <see langword="null" />, будет создан новый объект.</span><span class="sxs-lookup"><span data-stu-id="5b55b-145">If <c>syncLock</c> is <see langword="null" />, a new object will be instantiated.</span></span></param>
        <param name="valueFactory"><span data-ttu-id="5b55b-146">Функция, которая вызывается для инициализации ссылки или значения.</span><span class="sxs-lookup"><span data-stu-id="5b55b-146">The function that is called to initialize the reference or value.</span></span></param>
        <summary><span data-ttu-id="5b55b-147">Инициализирует целевой ссылочный тип или тип значения с использованием указанной функцией, если он еще не инициализирован.</span><span class="sxs-lookup"><span data-stu-id="5b55b-147">Initializes a target reference or value type by using a specified function if it hasn't already been initialized.</span></span></summary>
        <returns><span data-ttu-id="5b55b-148">Инициализированное значение типа <paramref name="T" />.</span><span class="sxs-lookup"><span data-stu-id="5b55b-148">The initialized value of type <paramref name="T" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="5b55b-149">Если `intialized` задано как true, то Дополнительная инициализация не выполняется.</span><span class="sxs-lookup"><span data-stu-id="5b55b-149">If `intialized` is specified as true, then no further initialization occurs.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.MemberAccessException"><span data-ttu-id="5b55b-150">Разрешения на доступ к конструктору типа <paramref name="T" /> отсутствовали.</span><span class="sxs-lookup"><span data-stu-id="5b55b-150">Permissions to access the constructor of type <paramref name="T" /> were missing.</span></span></exception>
        <exception cref="T:System.MissingMemberException"><span data-ttu-id="5b55b-151">Тип <paramref name="T" /> не имеет конструктора по умолчанию.</span><span class="sxs-lookup"><span data-stu-id="5b55b-151">Type <paramref name="T" /> does not have a default constructor.</span></span></exception>
      </Docs>
    </Member>
  </Members>
</Type>