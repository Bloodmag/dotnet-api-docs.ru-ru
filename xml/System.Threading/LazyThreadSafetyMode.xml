<Type Name="LazyThreadSafetyMode" FullName="System.Threading.LazyThreadSafetyMode">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="bffe15f7432e9c6a32d5ebae79cbf8cad97790ab" />
    <Meta Name="ms.sourcegitcommit" Value="434f60616a9793fa8436744549fc856e94f7a648" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="ru-RU" />
    <Meta Name="ms.lasthandoff" Value="08/24/2018" />
    <Meta Name="ms.locfileid" Value="36605923" />
  </Metadata>
  <TypeSignature Language="C#" Value="public enum LazyThreadSafetyMode" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed LazyThreadSafetyMode extends System.Enum" />
  <TypeSignature Language="DocId" Value="T:System.Threading.LazyThreadSafetyMode" />
  <TypeSignature Language="VB.NET" Value="Public Enum LazyThreadSafetyMode" />
  <TypeSignature Language="C++ CLI" Value="public enum class LazyThreadSafetyMode" />
  <TypeSignature Language="F#" Value="type LazyThreadSafetyMode = " />
  <AssemblyInfo>
    <AssemblyName>System.Runtime</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.10.0</AssemblyVersion>
    <AssemblyVersion>4.0.20.0</AssemblyVersion>
    <AssemblyVersion>4.1.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.1.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>mscorlib</AssemblyName>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Enum</BaseTypeName>
  </Base>
  <Docs>
    <summary>
      <span data-ttu-id="3662b-101">Определяет, как экземпляр <see cref="T:System.Lazy`1" /> синхронизирует доступ из нескольких потоков.</span>
      <span class="sxs-lookup">
        <span data-stu-id="3662b-101">Specifies how a <see cref="T:System.Lazy`1" /> instance synchronizes access among multiple threads.</span>
      </span>
    </summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="3662b-102">Это перечисление используется для указания `mode` параметр <xref:System.Lazy%601> конструкторы.</span><span class="sxs-lookup"><span data-stu-id="3662b-102">Use this enumeration to specify the `mode` parameter of <xref:System.Lazy%601> constructors.</span></span> <span data-ttu-id="3662b-103">Влияние на синхронизацию потоков все конструкторы могут быть описаны с точки зрения это перечисление, независимо от того, имеется ли у них есть `mode` параметров.</span><span class="sxs-lookup"><span data-stu-id="3662b-103">The effects of all constructors on thread synchronization can be described in terms of this enumeration, whether or not they have `mode` parameters.</span></span>  
  
 <span data-ttu-id="3662b-104">Объект <xref:System.Lazy%601> экземпляр инициализируется с помощью метода инициализации, определяемое пользователем или конструктором по умолчанию для `T`.</span><span class="sxs-lookup"><span data-stu-id="3662b-104">A <xref:System.Lazy%601> instance is initialized either by a user-specified initialization method or by the default constructor for `T`.</span></span> <span data-ttu-id="3662b-105">Метод инициализации, заданный параметром `valueFactory` параметр <xref:System.Lazy%601> конструктор.</span><span class="sxs-lookup"><span data-stu-id="3662b-105">The initialization method is specified by the `valueFactory` parameter of a <xref:System.Lazy%601> constructor.</span></span> <span data-ttu-id="3662b-106">Метод возвращает экземпляр `T`, который является типом, который неактивно создается экземпляром <xref:System.Lazy%601>.</span><span class="sxs-lookup"><span data-stu-id="3662b-106">The method returns an instance of `T`, which is the type that is lazily instantiated by the instance of <xref:System.Lazy%601>.</span></span> <span data-ttu-id="3662b-107">Если конструктор не поддерживает `valueFactory` параметра, конструктор по умолчанию для `T` используется для инициализации <xref:System.Lazy%601> экземпляра.</span><span class="sxs-lookup"><span data-stu-id="3662b-107">If a constructor does not have a `valueFactory` parameter, the default constructor for `T` is used to initialize the <xref:System.Lazy%601> instance.</span></span> <span data-ttu-id="3662b-108">В любом случае инициализация выполняется при первом вызове <xref:System.Lazy%601.Value%2A?displayProperty=nameWithType> свойство.</span><span class="sxs-lookup"><span data-stu-id="3662b-108">In either case, initialization occurs the first time you call the <xref:System.Lazy%601.Value%2A?displayProperty=nameWithType> property.</span></span>  
  
 <span data-ttu-id="3662b-109">Помимо указания потокобезопасность объекта <xref:System.Lazy%601> экземпляр, это перечисление влияет на кэширование исключений.</span><span class="sxs-lookup"><span data-stu-id="3662b-109">In addition to specifying the thread safety of a <xref:System.Lazy%601> instance, this enumeration affects exception caching.</span></span> <span data-ttu-id="3662b-110">Если исключения кэшируются для <xref:System.Lazy%601> экземпляра, вы получите только один шанс инициализации экземпляра.</span><span class="sxs-lookup"><span data-stu-id="3662b-110">When exceptions are cached for a <xref:System.Lazy%601> instance, you get only one chance to initialize the instance.</span></span> <span data-ttu-id="3662b-111">Если возникает исключение при первом вызове <xref:System.Lazy%601.Value%2A?displayProperty=nameWithType> свойство, что исключение кэшируется и создается повторно при всех последующих вызовах <xref:System.Lazy%601.Value%2A?displayProperty=nameWithType> свойство.</span><span class="sxs-lookup"><span data-stu-id="3662b-111">If an exception is thrown the first time you call the <xref:System.Lazy%601.Value%2A?displayProperty=nameWithType> property, that exception is cached and rethrown on all subsequent calls to the <xref:System.Lazy%601.Value%2A?displayProperty=nameWithType> property.</span></span> <span data-ttu-id="3662b-112">Кэширование исключений удобен тем, что любые два потока всегда получать один и тот же результат, даже при возникновении ошибок.</span><span class="sxs-lookup"><span data-stu-id="3662b-112">The advantage of caching exceptions is that any two threads always get the same result, even when errors occur.</span></span>  
  
 <span data-ttu-id="3662b-113">При указании в режиме PublicationOnly, исключения не кэшируются.</span><span class="sxs-lookup"><span data-stu-id="3662b-113">When you specify the PublicationOnly mode, exceptions are never cached.</span></span> <span data-ttu-id="3662b-114">При указании None и ExecutionAndPublication, кэширование зависит от того указывает метод инициализации или разрешить конструктор по умолчанию для `T` для использования.</span><span class="sxs-lookup"><span data-stu-id="3662b-114">When you specify None or ExecutionAndPublication, caching depends on whether you specify an initialization method or allow the default constructor for `T` to be used.</span></span> <span data-ttu-id="3662b-115">Указание метода инициализации включает кэширование исключений для этих двух режимов.</span><span class="sxs-lookup"><span data-stu-id="3662b-115">Specifying an initialization method enables exception caching for these two modes.</span></span> <span data-ttu-id="3662b-116">Метод инициализации может быть очень простым.</span><span class="sxs-lookup"><span data-stu-id="3662b-116">The initialization method can be very simple.</span></span> <span data-ttu-id="3662b-117">Например, он может вызывать конструктор по умолчанию для `T`: `new Lazy<Contents>(() => new Contents(), mode)` в C# или `New Lazy(Of Contents)(Function() New Contents())` в Visual Basic.</span><span class="sxs-lookup"><span data-stu-id="3662b-117">For example, it might call the default constructor for `T`: `new Lazy<Contents>(() => new Contents(), mode)` in C#, or `New Lazy(Of Contents)(Function() New Contents())` in Visual Basic.</span></span> <span data-ttu-id="3662b-118">Если используется конструктор, который не указывает метод инициализации, исключения, вызываемые конструктором по умолчанию для по `T` не кэшируются.</span><span class="sxs-lookup"><span data-stu-id="3662b-118">If you use a constructor that does not specify an initialization method, exceptions that are thrown by the default constructor for `T` are not cached.</span></span> <span data-ttu-id="3662b-119">В следующей таблице приведены исключения, поведение кэширования.</span><span class="sxs-lookup"><span data-stu-id="3662b-119">The following table summarizes exception caching behavior.</span></span>  
  
|<span data-ttu-id="3662b-120">Режим</span><span class="sxs-lookup"><span data-stu-id="3662b-120">Mode</span></span>|<span data-ttu-id="3662b-121">С помощью метода инициализации</span><span class="sxs-lookup"><span data-stu-id="3662b-121">Using initialization method</span></span>|<span data-ttu-id="3662b-122">С помощью конструктора по умолчанию для `T`</span><span class="sxs-lookup"><span data-stu-id="3662b-122">Using default constructor for `T`</span></span>|  
|----------|---------------------------------|---------------------------------------|  
|<span data-ttu-id="3662b-123">Нет</span><span class="sxs-lookup"><span data-stu-id="3662b-123">None</span></span>|<span data-ttu-id="3662b-124">Кэшировано</span><span class="sxs-lookup"><span data-stu-id="3662b-124">Cached</span></span>|<span data-ttu-id="3662b-125">Некэшируемые</span><span class="sxs-lookup"><span data-stu-id="3662b-125">Not cached</span></span>|  
|<span data-ttu-id="3662b-126">PublicationOnly</span><span class="sxs-lookup"><span data-stu-id="3662b-126">PublicationOnly</span></span>|<span data-ttu-id="3662b-127">Некэшируемые</span><span class="sxs-lookup"><span data-stu-id="3662b-127">Not cached</span></span>|<span data-ttu-id="3662b-128">Некэшируемые</span><span class="sxs-lookup"><span data-stu-id="3662b-128">Not cached</span></span>|  
|<span data-ttu-id="3662b-129">ExecutionAndPublication</span><span class="sxs-lookup"><span data-stu-id="3662b-129">ExecutionAndPublication</span></span>|<span data-ttu-id="3662b-130">Кэшировано</span><span class="sxs-lookup"><span data-stu-id="3662b-130">Cached</span></span>|<span data-ttu-id="3662b-131">Некэшируемые</span><span class="sxs-lookup"><span data-stu-id="3662b-131">Not cached</span></span>|  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName="ExecutionAndPublication">
      <MemberSignature Language="C#" Value="ExecutionAndPublication" />
      <MemberSignature Language="ILAsm" Value=".field public static literal valuetype System.Threading.LazyThreadSafetyMode ExecutionAndPublication = int32(2)" />
      <MemberSignature Language="DocId" Value="F:System.Threading.LazyThreadSafetyMode.ExecutionAndPublication" />
      <MemberSignature Language="VB.NET" Value="ExecutionAndPublication" />
      <MemberSignature Language="C++ CLI" Value="ExecutionAndPublication" />
      <MemberSignature Language="F#" Value="ExecutionAndPublication = 2" Usage="System.Threading.LazyThreadSafetyMode.ExecutionAndPublication" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.LazyThreadSafetyMode</ReturnType>
      </ReturnValue>
      <MemberValue>2</MemberValue>
      <Docs>
        <summary>
          <span data-ttu-id="3662b-132">Блокировки используются, чтобы убедиться, что только один поток может инициализировать экземпляр <see cref="T:System.Lazy`1" /> потокобезопасным способом.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3662b-132">Locks are used to ensure that only a single thread can initialize a <see cref="T:System.Lazy`1" /> instance in a thread-safe manner.</span>
          </span>
          <span data-ttu-id="3662b-133">Если метод инициализации (или конструктор по умолчанию, если метод инициализации отсутствует) использует внутренние блокировки, могут возникнуть взаимоблокировки.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3662b-133">If the initialization method (or the default constructor, if there is no initialization method) uses locks internally, deadlocks can occur.</span>
          </span>
          <span data-ttu-id="3662b-134">Если вы используете конструктор <see cref="T:System.Lazy`1" />, который указывает метод инициализации (параметр <paramref name="valueFactory" />), и если этот метод инициализации вызывает исключение (или не может обработать исключение) при первом вызове свойства <see cref="P:System.Lazy`1.Value" />, исключение кэшируется и вызывается повторно в последующих вызовах свойства <see cref="P:System.Lazy`1.Value" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3662b-134">If you use a <see cref="T:System.Lazy`1" /> constructor that specifies an initialization method (<paramref name="valueFactory" /> parameter), and if that initialization method throws an exception (or fails to handle an exception) the first time you call the <see cref="P:System.Lazy`1.Value" /> property, then the exception is cached and thrown again on subsequent calls to the <see cref="P:System.Lazy`1.Value" /> property.</span>
          </span>
          <span data-ttu-id="3662b-135">Если вы используете конструктор <see cref="T:System.Lazy`1" />, который не указывает метод инициализации, исключения, вызываемые конструктором по умолчанию для <paramref name="T" />, не кэшируются.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3662b-135">If you use a <see cref="T:System.Lazy`1" /> constructor that does not specify an initialization method, exceptions that are thrown by the default constructor for <paramref name="T" /> are not cached.</span>
          </span>
          <span data-ttu-id="3662b-136">В этом случае последующий вызов свойства <see cref="P:System.Lazy`1.Value" /> может успешно инициализировать экземпляр <see cref="T:System.Lazy`1" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3662b-136">In that case, a subsequent call to the <see cref="P:System.Lazy`1.Value" /> property might successfully initialize the <see cref="T:System.Lazy`1" /> instance.</span>
          </span>
          <span data-ttu-id="3662b-137">Если метод инициализации рекурсивно получает доступ к свойству <see cref="P:System.Lazy`1.Value" /> экземпляра <see cref="T:System.Lazy`1" />, вызывается <see cref="T:System.InvalidOperationException" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3662b-137">If the initialization method recursively accesses the <see cref="P:System.Lazy`1.Value" /> property of the <see cref="T:System.Lazy`1" /> instance, an <see cref="T:System.InvalidOperationException" /> is thrown.</span>
          </span>
        </summary>
      </Docs>
    </Member>
    <Member MemberName="None">
      <MemberSignature Language="C#" Value="None" />
      <MemberSignature Language="ILAsm" Value=".field public static literal valuetype System.Threading.LazyThreadSafetyMode None = int32(0)" />
      <MemberSignature Language="DocId" Value="F:System.Threading.LazyThreadSafetyMode.None" />
      <MemberSignature Language="VB.NET" Value="None" />
      <MemberSignature Language="C++ CLI" Value="None" />
      <MemberSignature Language="F#" Value="None = 0" Usage="System.Threading.LazyThreadSafetyMode.None" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.LazyThreadSafetyMode</ReturnType>
      </ReturnValue>
      <MemberValue>0</MemberValue>
      <Docs>
        <summary>
          <span data-ttu-id="3662b-138">Экземпляр <see cref="T:System.Lazy`1" /> не является потокобезопасным; если доступ к экземпляру осуществляется из нескольких потоков, его поведение не определено.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3662b-138">The <see cref="T:System.Lazy`1" /> instance is not thread safe; if the instance is accessed from multiple threads, its behavior is undefined.</span>
          </span>
          <span data-ttu-id="3662b-139">Используйте этот режим только в том случае, когда крайне важна высокая производительность, а экземпляр <see cref="T:System.Lazy`1" /> гарантированно не будет инициализирован больше, чем из одного потока.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3662b-139">Use this mode only when high performance is crucial and the <see cref="T:System.Lazy`1" /> instance is guaranteed never to be initialized from more than one thread.</span>
          </span>
          <span data-ttu-id="3662b-140">Если вы используете конструктор <see cref="T:System.Lazy`1" />, который указывает метод инициализации (параметр <paramref name="valueFactory" />), и если этот метод инициализации вызывает исключение (или не может обработать исключение) при первом вызове свойства <see cref="P:System.Lazy`1.Value" />, исключение кэшируется и вызывается повторно в последующих вызовах свойства <see cref="P:System.Lazy`1.Value" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3662b-140">If you use a <see cref="T:System.Lazy`1" /> constructor that specifies an initialization method (<paramref name="valueFactory" /> parameter), and if that initialization method throws an exception (or fails to handle an exception) the first time you call the <see cref="P:System.Lazy`1.Value" /> property, then the exception is cached and thrown again on subsequent calls to the <see cref="P:System.Lazy`1.Value" /> property.</span>
          </span>
          <span data-ttu-id="3662b-141">Если вы используете конструктор <see cref="T:System.Lazy`1" />, который не указывает метод инициализации, исключения, вызываемые конструктором по умолчанию для <paramref name="T" />, не кэшируются.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3662b-141">If you use a <see cref="T:System.Lazy`1" /> constructor that does not specify an initialization method, exceptions that are thrown by the default constructor for <paramref name="T" /> are not cached.</span>
          </span>
          <span data-ttu-id="3662b-142">В этом случае последующий вызов свойства <see cref="P:System.Lazy`1.Value" /> может успешно инициализировать экземпляр <see cref="T:System.Lazy`1" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3662b-142">In that case, a subsequent call to the <see cref="P:System.Lazy`1.Value" /> property might successfully initialize the <see cref="T:System.Lazy`1" /> instance.</span>
          </span>
          <span data-ttu-id="3662b-143">Если метод инициализации рекурсивно получает доступ к свойству <see cref="P:System.Lazy`1.Value" /> экземпляра <see cref="T:System.Lazy`1" />, вызывается <see cref="T:System.InvalidOperationException" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3662b-143">If the initialization method recursively accesses the <see cref="P:System.Lazy`1.Value" /> property of the <see cref="T:System.Lazy`1" /> instance, an <see cref="T:System.InvalidOperationException" /> is thrown.</span>
          </span>
        </summary>
      </Docs>
    </Member>
    <Member MemberName="PublicationOnly">
      <MemberSignature Language="C#" Value="PublicationOnly" />
      <MemberSignature Language="ILAsm" Value=".field public static literal valuetype System.Threading.LazyThreadSafetyMode PublicationOnly = int32(1)" />
      <MemberSignature Language="DocId" Value="F:System.Threading.LazyThreadSafetyMode.PublicationOnly" />
      <MemberSignature Language="VB.NET" Value="PublicationOnly" />
      <MemberSignature Language="C++ CLI" Value="PublicationOnly" />
      <MemberSignature Language="F#" Value="PublicationOnly = 1" Usage="System.Threading.LazyThreadSafetyMode.PublicationOnly" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.LazyThreadSafetyMode</ReturnType>
      </ReturnValue>
      <MemberValue>1</MemberValue>
      <Docs>
        <summary>
          <span data-ttu-id="3662b-144">Если несколько потоков пытаются инициализировать экземпляр одновременно <see cref="T:System.Lazy`1" />, всем потокам разрешено выполнять метод инициализации (или конструктор по умолчанию, если нет метода инициализации).</span>
          <span class="sxs-lookup">
            <span data-stu-id="3662b-144">When multiple threads try to initialize a <see cref="T:System.Lazy`1" /> instance simultaneously, all threads are allowed to run the initialization method (or the default constructor, if there is no initialization method).</span>
          </span>
          <span data-ttu-id="3662b-145">Первый поток для выполнения инициализации задает значение экземпляра <see cref="T:System.Lazy`1" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3662b-145">The first thread to complete initialization sets the value of the <see cref="T:System.Lazy`1" /> instance.</span>
          </span>
          <span data-ttu-id="3662b-146">Это значение возвращается в любые другие потоки, которые одновременно выполняли метод инициализации, если метод инициализации не вызывал исключения в этих потоках.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3662b-146">That value is returned to any other threads that were simultaneously running the initialization method, unless the initialization method throws exceptions on those threads.</span>
          </span>
          <span data-ttu-id="3662b-147">Любые экземпляры <paramref name="T" />, созданные конкурирующими потоками, удаляются.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3662b-147">Any instances of <paramref name="T" /> that were created by the competing threads are discarded.</span>
          </span>
          <span data-ttu-id="3662b-148">Если метод инициализации вызывает исключение в каком-либо потоке, исключение распространяется из свойства <see cref="P:System.Lazy`1.Value" /> в этом потоке.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3662b-148">If the initialization method throws an exception on any thread, the exception is propagated out of the <see cref="P:System.Lazy`1.Value" /> property on that thread.</span>
          </span>
          <span data-ttu-id="3662b-149">Исключение не кэшируется.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3662b-149">The exception is not cached.</span>
          </span>
          <span data-ttu-id="3662b-150">Значение свойства <see cref="P:System.Lazy`1.IsValueCreated" /> остается <see langword="false" />, и последующие вызовы свойства <see cref="P:System.Lazy`1.Value" /> потоком, где возникло исключение, или другими потоками вызывают повторный запуск метода инициализации.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3662b-150">The value of the <see cref="P:System.Lazy`1.IsValueCreated" /> property remains <see langword="false" />, and subsequent calls to the <see cref="P:System.Lazy`1.Value" /> property, either by the thread where the exception was thrown or by other threads, cause the initialization method to run again.</span>
          </span>
          <span data-ttu-id="3662b-151">Если метод инициализации рекурсивно получает доступ к свойству <see cref="P:System.Lazy`1.Value" /> экземпляра <see cref="T:System.Lazy`1" />, исключение не вызывается.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3662b-151">If the initialization method recursively accesses the <see cref="P:System.Lazy`1.Value" /> property of the <see cref="T:System.Lazy`1" /> instance, no exception is thrown.</span>
          </span>
        </summary>
      </Docs>
    </Member>
  </Members>
</Type>