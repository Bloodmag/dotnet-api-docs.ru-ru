<Type Name="ManualResetEvent" FullName="System.Threading.ManualResetEvent">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="5343529fad8e538779d92325cf5ad62dcadec461" />
    <Meta Name="ms.sourcegitcommit" Value="0ec122ee5f3681159b8460ab15b409fd6e3d3ae0" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="ru-RU" />
    <Meta Name="ms.lasthandoff" Value="10/04/2018" />
    <Meta Name="ms.locfileid" Value="48762305" />
  </Metadata>
  <TypeSignature Language="C#" Value="public sealed class ManualResetEvent : System.Threading.EventWaitHandle" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed beforefieldinit ManualResetEvent extends System.Threading.EventWaitHandle" />
  <TypeSignature Language="DocId" Value="T:System.Threading.ManualResetEvent" />
  <TypeSignature Language="VB.NET" Value="Public NotInheritable Class ManualResetEvent&#xA;Inherits EventWaitHandle" />
  <TypeSignature Language="C++ CLI" Value="public ref class ManualResetEvent sealed : System::Threading::EventWaitHandle" />
  <TypeSignature Language="F#" Value="type ManualResetEvent = class&#xA;    inherit EventWaitHandle" />
  <AssemblyInfo>
    <AssemblyName>System.Threading</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.10.0</AssemblyVersion>
    <AssemblyVersion>4.1.0.0</AssemblyVersion>
    <AssemblyVersion>4.1.1.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>mscorlib</AssemblyName>
    <AssemblyVersion>1.0.5000.0</AssemblyVersion>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Threading.EventWaitHandle</BaseTypeName>
    <BaseTypeName FrameworkAlternate="netframework-1.1">System.Threading.WaitHandle</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
      <AttributeName>System.Runtime.InteropServices.ComVisible(true)</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>Уведомляет один или более ожидающих потоков о том, что произошло событие. Этот класс не наследуется.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 В .NET Framework версии 2.0 <xref:System.Threading.ManualResetEvent> является производным от нового <xref:System.Threading.EventWaitHandle> класса. Объект <xref:System.Threading.ManualResetEvent> функционально эквивалентен <xref:System.Threading.EventWaitHandle> созданные с помощью <xref:System.Threading.EventResetMode.ManualReset?displayProperty=nameWithType>.  
  
> [!NOTE]
>  В отличие от <xref:System.Threading.ManualResetEvent> класса <xref:System.Threading.EventWaitHandle> класс предоставляет доступ к именованные системные события синхронизации.  
  
 <xref:System.Threading.ManualResetEvent> позволяет потокам взаимодействовать друг с другом, обмениваясь сигналами. Как правило это взаимодействие касается задачу, которую один поток необходимо завершить перед продолжением других потоков.  
  
 Когда поток начинает действие, которое необходимо выполнить перед другими продолжить потоков, он вызывает метод <xref:System.Threading.EventWaitHandle.Reset%2A> поместить `ManualResetEvent` в сигнальное состояние. Этот поток может рассматриваться как управление `ManualResetEvent`. После этого вызова потоков <xref:System.Threading.WaitHandle.WaitOne%2A> на `ManualResetEvent` блокируется, ожидая сигнала. Если управляющий поток завершит работу, он вызывает <xref:System.Threading.EventWaitHandle.Set%2A> информировать, что можно продолжить ожидающих потоков. Все ожидающие потоки освобождаются.  
  
 После сигнала, `ManualResetEvent` остается в сигнальном состоянии, пока сбрасывается вручную. То есть вызовы `WaitOne` немедленный возврат.  
  
 Можно управлять начальное состояние `ManualResetEvent` , передав в конструктор, логическое значение `true` Если начальное состояние переводится в сигнальное состояние и `false` в противном случае.  
  
 `ManualResetEvent` Можно также использовать с `static` <xref:System.Threading.WaitHandle.WaitAll%2A> и <xref:System.Threading.WaitHandle.WaitAny%2A> методы.  
  
 Дополнительные сведения о механизмах синхронизации потоков, см. в разделе [ManualResetEvent и ManualResetEventSlim](~/docs/standard/threading/manualresetevent-and-manualreseteventslim.md) в основной документации.  
  
   
  
## Examples  
 В следующем примере показано, как <xref:System.Threading.ManualResetEvent> работает. Пример начинается с <xref:System.Threading.ManualResetEvent> в состояние без сигнала (то есть `false` передается в конструктор). В примере создается три потоков, каждый из которых блоков на <xref:System.Threading.ManualResetEvent> путем вызова его <xref:System.Threading.WaitHandle.WaitOne%2A> метод. Когда пользователь нажимает **ввод** ключа, в примере вызывается <xref:System.Threading.EventWaitHandle.Set%2A> метод, который освобождает все три потока. Сравните это с поведением <xref:System.Threading.AutoResetEvent> класс, который освобождает один потоков одновременно, сброс автоматически после каждого выпуска.  
  
 Нажав клавишу **ввод** ключ еще раз демонстрирует, что <xref:System.Threading.ManualResetEvent> остается в сигнальном состоянии, пока его <xref:System.Threading.EventWaitHandle.Reset%2A> вызывается метод: В примере запускается две дополнительные потоки. Эти потоки не блокируются во время звонка <xref:System.Threading.WaitHandle.WaitOne%2A> метод, но вместо запуска и выполнения.  
  
 Нажав клавишу **ввод** ключ еще раз приводит пример, чтобы вызвать <xref:System.Threading.EventWaitHandle.Reset%2A> метод и начать один дополнительные поток, который блокирует при вызове <xref:System.Threading.WaitHandle.WaitOne%2A>. Нажав клавишу **ввод** ключа один последний раз вызывает <xref:System.Threading.EventWaitHandle.Set%2A> выпуска последнего потока и программа завершается.  
  
 [!code-cpp[System.Threading.ManualResetEvent#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Threading.ManualResetEvent/CPP/source.cpp#1)]
 [!code-csharp[System.Threading.ManualResetEvent#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Threading.ManualResetEvent/CS/source.cs#1)]
 [!code-vb[System.Threading.ManualResetEvent#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Threading.ManualResetEvent/VB/source.vb#1)]  
  
 ]]></format>
    </remarks>
    <threadsafe>Этот класс является потокобезопасным.</threadsafe>
    <altmember cref="T:System.Threading.WaitHandle" />
    <related type="Article" href="~/docs/standard/threading/index.md">Управляемая поточность</related>
    <related type="Article" href="~/docs/standard/threading/manualresetevent-and-manualreseteventslim.md">Событие ручного сброса</related>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public ManualResetEvent (bool initialState);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(bool initialState) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.ManualResetEvent.#ctor(System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (initialState As Boolean)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; ManualResetEvent(bool initialState);" />
      <MemberSignature Language="F#" Value="new System.Threading.ManualResetEvent : bool -&gt; System.Threading.ManualResetEvent" Usage="new System.Threading.ManualResetEvent initialState" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters>
        <Parameter Name="initialState" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="initialState">Значение <see langword="true" /> для задания начального состояния сигнальным; <see langword="false" /> для задания несигнального начального состояния.</param>
        <summary>Инициализирует новый экземпляр класса <see cref="T:System.Threading.ManualResetEvent" /> логическим значением, показывающим наличие сигнального состояния.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Если начальное состояние <xref:System.Threading.ManualResetEvent> оповещается (то есть, в том случае, если создается путем передачи `true` для `initialState`), потоки, ожидающие <xref:System.Threading.ManualResetEvent> не блокируют. Если начальное состояние является несигнальным, потоки блокируются до <xref:System.Threading.EventWaitHandle.Set%2A> вызывается метод.  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Threading.WaitHandle" />
        <related type="Article" href="~/docs/standard/threading/index.md">Управляемая поточность</related>
        <related type="Article" href="~/docs/standard/threading/manualresetevent-and-manualreseteventslim.md">ManualResetEvent</related>
      </Docs>
    </Member>
    <Member MemberName="Reset">
      <MemberSignature Language="C#" Value="public bool Reset ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool Reset() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.ManualResetEvent.Reset" />
      <MemberSignature Language="VB.NET" Value="Public Function Reset () As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool Reset();" />
      <MemberSignature Language="F#" Value="member this.Reset : unit -&gt; bool" Usage="manualResetEvent.Reset " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Threading</AssemblyName>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Set">
      <MemberSignature Language="C#" Value="public bool Set ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool Set() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.ManualResetEvent.Set" />
      <MemberSignature Language="VB.NET" Value="Public Function Set () As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool Set();" />
      <MemberSignature Language="F#" Value="member this.Set : unit -&gt; bool" Usage="manualResetEvent.Set " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Threading</AssemblyName>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
  </Members>
</Type>