<Type Name="ManualResetEvent" FullName="System.Threading.ManualResetEvent">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="6bd57be7d0b7a3e06e014afa452e4dadda84883c" />
    <Meta Name="ms.sourcegitcommit" Value="d31dc2ede16f6f7bc64e90d9f897ff54c4e3869b" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="ru-RU" />
    <Meta Name="ms.lasthandoff" Value="04/03/2018" />
  </Metadata>
  <TypeSignature Language="C#" Value="public sealed class ManualResetEvent : System.Threading.EventWaitHandle" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed beforefieldinit ManualResetEvent extends System.Threading.EventWaitHandle" />
  <TypeSignature Language="DocId" Value="T:System.Threading.ManualResetEvent" />
  <TypeSignature Language="VB.NET" Value="Public NotInheritable Class ManualResetEvent&#xA;Inherits EventWaitHandle" />
  <TypeSignature Language="C++ CLI" Value="public ref class ManualResetEvent sealed : System::Threading::EventWaitHandle" />
  <AssemblyInfo>
    <AssemblyName>System.Threading</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.10.0</AssemblyVersion>
    <AssemblyVersion>4.1.0.0</AssemblyVersion>
    <AssemblyVersion>4.1.1.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>mscorlib</AssemblyName>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Threading.EventWaitHandle</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute>
      <AttributeName>System.Runtime.InteropServices.ComVisible(true)</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>
      <span data-ttu-id="b6538-101">Notifies one or more waiting threads that an event has occurred.</span>
      <span class="sxs-lookup">
        <span data-stu-id="b6538-101">Notifies one or more waiting threads that an event has occurred.</span>
      </span>
      <span data-ttu-id="b6538-102">This class cannot be inherited.</span>
      <span class="sxs-lookup">
        <span data-stu-id="b6538-102">This class cannot be inherited.</span>
      </span>
    </summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="b6538-103">В .NET Framework версии 2.0 <xref:System.Threading.ManualResetEvent> является производным от нового <xref:System.Threading.EventWaitHandle> класса.</span><span class="sxs-lookup"><span data-stu-id="b6538-103">In the .NET Framework version 2.0, <xref:System.Threading.ManualResetEvent> derives from the new <xref:System.Threading.EventWaitHandle> class.</span></span> <span data-ttu-id="b6538-104">Объект <xref:System.Threading.ManualResetEvent> функционально эквивалентен <xref:System.Threading.EventWaitHandle> с <xref:System.Threading.EventResetMode.ManualReset?displayProperty=nameWithType>.</span><span class="sxs-lookup"><span data-stu-id="b6538-104">A <xref:System.Threading.ManualResetEvent> is functionally equivalent to an <xref:System.Threading.EventWaitHandle> created with <xref:System.Threading.EventResetMode.ManualReset?displayProperty=nameWithType>.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="b6538-105">В отличие от <xref:System.Threading.ManualResetEvent> класса <xref:System.Threading.EventWaitHandle> класс предоставляет доступ к под названием system события синхронизации.</span><span class="sxs-lookup"><span data-stu-id="b6538-105">Unlike the <xref:System.Threading.ManualResetEvent> class, the <xref:System.Threading.EventWaitHandle> class provides access to named system synchronization events.</span></span>  
  
 <span data-ttu-id="b6538-106"><xref:System.Threading.ManualResetEvent> позволяет потокам взаимодействовать друг с другом путем передачи сигналов.</span><span class="sxs-lookup"><span data-stu-id="b6538-106"><xref:System.Threading.ManualResetEvent> allows threads to communicate with each other by signaling.</span></span> <span data-ttu-id="b6538-107">Как правило это взаимодействие касается задачи одного потока, в который должна быть выполнена до другие потоки могут продолжить работу.</span><span class="sxs-lookup"><span data-stu-id="b6538-107">Typically, this communication concerns a task which one thread must complete before other threads can proceed.</span></span>  
  
 <span data-ttu-id="b6538-108">Когда поток начинает работу, которая должна быть выполнена до других потоков продолжить работу, он вызывает метод <xref:System.Threading.EventWaitHandle.Reset%2A> поместить `ManualResetEvent` в несигнальное состояние.</span><span class="sxs-lookup"><span data-stu-id="b6538-108">When a thread begins an activity that must complete before other threads proceed, it calls <xref:System.Threading.EventWaitHandle.Reset%2A> to put `ManualResetEvent` in the non-signaled state.</span></span> <span data-ttu-id="b6538-109">Этот поток может рассматриваться как управление `ManualResetEvent`.</span><span class="sxs-lookup"><span data-stu-id="b6538-109">This thread can be thought of as controlling the `ManualResetEvent`.</span></span> <span data-ttu-id="b6538-110">Потоки, вызывающих метод <xref:System.Threading.WaitHandle.WaitOne%2A> на `ManualResetEvent` будут заблокированы, ожидая сигнала.</span><span class="sxs-lookup"><span data-stu-id="b6538-110">Threads that call <xref:System.Threading.WaitHandle.WaitOne%2A> on the `ManualResetEvent` will block, awaiting the signal.</span></span> <span data-ttu-id="b6538-111">Когда контролирующий поток завершит работу, он вызывает <xref:System.Threading.EventWaitHandle.Set%2A> сигнала, ожидающих потоков можно перейти.</span><span class="sxs-lookup"><span data-stu-id="b6538-111">When the controlling thread completes the activity, it calls <xref:System.Threading.EventWaitHandle.Set%2A> to signal that the waiting threads can proceed.</span></span> <span data-ttu-id="b6538-112">Все ожидающие потоки освобождаются.</span><span class="sxs-lookup"><span data-stu-id="b6538-112">All waiting threads are released.</span></span>  
  
 <span data-ttu-id="b6538-113">Когда было сообщено, `ManualResetEvent` остается в сигнальном состоянии, пока будет сброшен вручную.</span><span class="sxs-lookup"><span data-stu-id="b6538-113">Once it has been signaled, `ManualResetEvent` remains signaled until it is manually reset.</span></span> <span data-ttu-id="b6538-114">То есть, вызовы `WaitOne` немедленный возврат.</span><span class="sxs-lookup"><span data-stu-id="b6538-114">That is, calls to `WaitOne` return immediately.</span></span>  
  
 <span data-ttu-id="b6538-115">Можно управлять начальное состояние `ManualResetEvent` , передав значение типа Boolean в конструктор `true` Если начальное состояние сигнальное и `false` в противном случае.</span><span class="sxs-lookup"><span data-stu-id="b6538-115">You can control the initial state of a `ManualResetEvent` by passing a Boolean value to the constructor, `true` if the initial state is signaled and `false` otherwise.</span></span>  
  
 <span data-ttu-id="b6538-116">`ManualResetEvent` Можно также использовать с `static` <xref:System.Threading.WaitHandle.WaitAll%2A> и <xref:System.Threading.WaitHandle.WaitAny%2A> методы.</span><span class="sxs-lookup"><span data-stu-id="b6538-116">`ManualResetEvent` can also be used with the `static`<xref:System.Threading.WaitHandle.WaitAll%2A> and <xref:System.Threading.WaitHandle.WaitAny%2A> methods.</span></span>  
  
 <span data-ttu-id="b6538-117">Дополнительные сведения о механизмах синхронизации потоков см. в разделе [ManualResetEvent и ManualResetEventSlim](~/docs/standard/threading/manualresetevent-and-manualreseteventslim.md) в основной документации.</span><span class="sxs-lookup"><span data-stu-id="b6538-117">For more information about thread synchronization mechanisms, see [ManualResetEvent and ManualResetEventSlim](~/docs/standard/threading/manualresetevent-and-manualreseteventslim.md) in the conceptual documentation.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="b6538-118">В следующем примере показано, как <xref:System.Threading.ManualResetEvent> работает.</span><span class="sxs-lookup"><span data-stu-id="b6538-118">The following example demonstrates how <xref:System.Threading.ManualResetEvent> works.</span></span> <span data-ttu-id="b6538-119">Пример начинается с <xref:System.Threading.ManualResetEvent> в несигнальное состояние (то есть `false` передается в конструктор).</span><span class="sxs-lookup"><span data-stu-id="b6538-119">The example starts with a <xref:System.Threading.ManualResetEvent> in the unsignaled state (that is, `false` is passed to the constructor).</span></span> <span data-ttu-id="b6538-120">В примере создаются три потоков, каждый из которых блоки на <xref:System.Threading.ManualResetEvent> путем вызова его <xref:System.Threading.WaitHandle.WaitOne%2A> метод.</span><span class="sxs-lookup"><span data-stu-id="b6538-120">The example creates three threads, each of which blocks on the <xref:System.Threading.ManualResetEvent> by calling its <xref:System.Threading.WaitHandle.WaitOne%2A> method.</span></span> <span data-ttu-id="b6538-121">Когда пользователь нажимает **ввод** ключа, в примере вызывается <xref:System.Threading.EventWaitHandle.Set%2A> метод, который освобождает все три потока.</span><span class="sxs-lookup"><span data-stu-id="b6538-121">When the user presses the **Enter** key, the example calls the <xref:System.Threading.EventWaitHandle.Set%2A> method, which releases all three threads.</span></span> <span data-ttu-id="b6538-122">Сравните это с поведением <xref:System.Threading.AutoResetEvent> класс, который освобождает один потоков одновременно, автоматически Сброс после каждого выпуска.</span><span class="sxs-lookup"><span data-stu-id="b6538-122">Contrast this with the behavior of the <xref:System.Threading.AutoResetEvent> class, which releases threads one at a time, resetting automatically after each release.</span></span>  
  
 <span data-ttu-id="b6538-123">Нажав клавишу **ввод** ключ еще раз демонстрирует, что <xref:System.Threading.ManualResetEvent> остается в сигнальном состоянии до ее <xref:System.Threading.EventWaitHandle.Reset%2A> вызывается метод: В примере запускается две дополнительные потоки.</span><span class="sxs-lookup"><span data-stu-id="b6538-123">Pressing the **Enter** key again demonstrates that the <xref:System.Threading.ManualResetEvent> remains in the signaled state until its <xref:System.Threading.EventWaitHandle.Reset%2A> method is called: The example starts two more threads.</span></span> <span data-ttu-id="b6538-124">Эти потоки не блокируются во время звонка <xref:System.Threading.WaitHandle.WaitOne%2A> метода, но вместо этого выполняется до ее завершения.</span><span class="sxs-lookup"><span data-stu-id="b6538-124">These threads do not block when they call the <xref:System.Threading.WaitHandle.WaitOne%2A> method, but instead run to completion.</span></span>  
  
 <span data-ttu-id="b6538-125">Нажав клавишу **ввод** ключ еще раз вызывает примере вызов <xref:System.Threading.EventWaitHandle.Reset%2A> метод и начать один дополнительные поток, который блокирует при вызове <xref:System.Threading.WaitHandle.WaitOne%2A>.</span><span class="sxs-lookup"><span data-stu-id="b6538-125">Pressing the **Enter** key again causes the example to call the <xref:System.Threading.EventWaitHandle.Reset%2A> method and to start one more thread, which blocks when it calls <xref:System.Threading.WaitHandle.WaitOne%2A>.</span></span> <span data-ttu-id="b6538-126">Нажав клавишу **ввод** ключа один последний раз вызывает <xref:System.Threading.EventWaitHandle.Set%2A> для освобождения последнего потока и программа завершается.</span><span class="sxs-lookup"><span data-stu-id="b6538-126">Pressing the **Enter** key one final time calls <xref:System.Threading.EventWaitHandle.Set%2A> to release the last thread, and the program ends.</span></span>  
  
 [!code-cpp[System.Threading.ManualResetEvent#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Threading.ManualResetEvent/CPP/source.cpp#1)]
 [!code-csharp[System.Threading.ManualResetEvent#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Threading.ManualResetEvent/CS/source.cs#1)]
 [!code-vb[System.Threading.ManualResetEvent#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Threading.ManualResetEvent/VB/source.vb#1)]  
  
 ]]></format>
    </remarks>
    <threadsafe>
      <span data-ttu-id="b6538-127">Этот класс является потокобезопасным.</span>
      <span class="sxs-lookup">
        <span data-stu-id="b6538-127">This class is thread safe.</span>
      </span>
    </threadsafe>
    <altmember cref="T:System.Threading.WaitHandle" />
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public ManualResetEvent (bool initialState);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(bool initialState) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.ManualResetEvent.#ctor(System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (initialState As Boolean)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; ManualResetEvent(bool initialState);" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="initialState" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="initialState">
          <span data-ttu-id="b6538-128">
            <see langword="true" /> to set the initial state signaled; <see langword="false" /> to set the initial state to nonsignaled.</span>
          <span class="sxs-lookup">
            <span data-stu-id="b6538-128">
              <see langword="true" /> to set the initial state signaled; <see langword="false" /> to set the initial state to nonsignaled.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="b6538-129">Initializes a new instance of the <see cref="T:System.Threading.ManualResetEvent" /> class with a Boolean value indicating whether to set the initial state to signaled.</span>
          <span class="sxs-lookup">
            <span data-stu-id="b6538-129">Initializes a new instance of the <see cref="T:System.Threading.ManualResetEvent" /> class with a Boolean value indicating whether to set the initial state to signaled.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="b6538-130">Если начальное состояние <xref:System.Threading.ManualResetEvent> получает сигнал (то есть, в том случае, если создается путем передачи `true` для `initialState`), потоки, ожидающие <xref:System.Threading.ManualResetEvent> не блокируются.</span><span class="sxs-lookup"><span data-stu-id="b6538-130">If the initial state of a <xref:System.Threading.ManualResetEvent> is signaled (that is, if it is created by passing `true` for `initialState`), threads that wait on the <xref:System.Threading.ManualResetEvent> do not block.</span></span> <span data-ttu-id="b6538-131">Если начальное состояние является несигнальным, потоки блокируются до <xref:System.Threading.EventWaitHandle.Set%2A> вызывается метод.</span><span class="sxs-lookup"><span data-stu-id="b6538-131">If the initial state is nonsignaled, threads block until the <xref:System.Threading.EventWaitHandle.Set%2A> method is called.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Threading.WaitHandle" />
      </Docs>
    </Member>
  </Members>
</Type>