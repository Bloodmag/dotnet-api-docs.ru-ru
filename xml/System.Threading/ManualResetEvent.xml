<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" version="1.2" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="ManualResetEvent.xml" source-language="en-US" target-language="ru-RU">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-15c36f0" tool-company="Microsoft" />
      <xliffext:skl_file_name xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">02cd5861-7ce2-4a82-b358-31f8435a0ac56bd57be7d0b7a3e06e014afa452e4dadda84883c.skl</xliffext:skl_file_name>
      <xliffext:version xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">1.2</xliffext:version>
      <xliffext:ms.openlocfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">6bd57be7d0b7a3e06e014afa452e4dadda84883c</xliffext:ms.openlocfilehash>
      <xliffext:ms.sourcegitcommit xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">d31dc2ede16f6f7bc64e90d9f897ff54c4e3869b</xliffext:ms.sourcegitcommit>
      <xliffext:ms.lasthandoff xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">04/03/2018</xliffext:ms.lasthandoff>
      <xliffext:moniker_ids xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">netcore-1.0,netcore-1.1,netcore-2.0,netcore-2.1,netframework-4.5.1,netframework-4.5.2,netframework-4.5,netframework-4.6.1,netframework-4.6.2,netframework-4.6,netframework-4.7.1,netframework-4.7,netstandard-1.0,netstandard-1.1,netstandard-1.2,netstandard-1.3,netstandard-1.4,netstandard-1.6,netstandard-2.0,xamarinandroid-7.1,xamarinios-10.8,xamarinmac-3.0</xliffext:moniker_ids>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve" uid="T:System.Threading.ManualResetEvent">
          <source>Notifies one or more waiting threads that an event has occurred.</source>
          <target state="translated">Уведомляет один или более ожидающих потоков о том, что произошло событие.</target>       </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve" uid="T:System.Threading.ManualResetEvent">
          <source>This class cannot be inherited.</source>
          <target state="translated">Этот класс не наследуется.</target>       </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Threading.ManualResetEvent">
          <source>In the .NET Framework version 2.0, <ph id="ph1">&lt;xref:System.Threading.ManualResetEvent&gt;</ph> derives from the new <ph id="ph2">&lt;xref:System.Threading.EventWaitHandle&gt;</ph> class.</source>
          <target state="translated">В .NET Framework версии 2.0 <ph id="ph1">&lt;xref:System.Threading.ManualResetEvent&gt;</ph> является производным от нового <ph id="ph2">&lt;xref:System.Threading.EventWaitHandle&gt;</ph> класса.</target>       </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Threading.ManualResetEvent">
          <source>A <ph id="ph1">&lt;xref:System.Threading.ManualResetEvent&gt;</ph> is functionally equivalent to an <ph id="ph2">&lt;xref:System.Threading.EventWaitHandle&gt;</ph> created with <ph id="ph3">&lt;xref:System.Threading.EventResetMode.ManualReset?displayProperty=nameWithType&gt;</ph>.</source>
          <target state="translated">Объект <ph id="ph1">&lt;xref:System.Threading.ManualResetEvent&gt;</ph> функционально эквивалентен <ph id="ph2">&lt;xref:System.Threading.EventWaitHandle&gt;</ph> с <ph id="ph3">&lt;xref:System.Threading.EventResetMode.ManualReset?displayProperty=nameWithType&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Threading.ManualResetEvent">
          <source>Unlike the <ph id="ph1">&lt;xref:System.Threading.ManualResetEvent&gt;</ph> class, the <ph id="ph2">&lt;xref:System.Threading.EventWaitHandle&gt;</ph> class provides access to named system synchronization events.</source>
          <target state="translated">В отличие от <ph id="ph1">&lt;xref:System.Threading.ManualResetEvent&gt;</ph> класса <ph id="ph2">&lt;xref:System.Threading.EventWaitHandle&gt;</ph> класс предоставляет доступ к под названием system события синхронизации.</target>       </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Threading.ManualResetEvent">
          <source><ph id="ph1">&lt;xref:System.Threading.ManualResetEvent&gt;</ph> allows threads to communicate with each other by signaling.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Threading.ManualResetEvent&gt;</ph> позволяет потокам взаимодействовать друг с другом путем передачи сигналов.</target>       </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Threading.ManualResetEvent">
          <source>Typically, this communication concerns a task which one thread must complete before other threads can proceed.</source>
          <target state="translated">Как правило это взаимодействие касается задачи одного потока, в который должна быть выполнена до другие потоки могут продолжить работу.</target>       </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Threading.ManualResetEvent">
          <source>When a thread begins an activity that must complete before other threads proceed, it calls <ph id="ph1">&lt;xref:System.Threading.EventWaitHandle.Reset%2A&gt;</ph> to put <ph id="ph2">`ManualResetEvent`</ph> in the non-signaled state.</source>
          <target state="translated">Когда поток начинает работу, которая должна быть выполнена до других потоков продолжить работу, он вызывает метод <ph id="ph1">&lt;xref:System.Threading.EventWaitHandle.Reset%2A&gt;</ph> поместить <ph id="ph2">`ManualResetEvent`</ph> в несигнальное состояние.</target>       </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Threading.ManualResetEvent">
          <source>This thread can be thought of as controlling the <ph id="ph1">`ManualResetEvent`</ph>.</source>
          <target state="translated">Этот поток может рассматриваться как управление <ph id="ph1">`ManualResetEvent`</ph>.</target>       </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Threading.ManualResetEvent">
          <source>Threads that call <ph id="ph1">&lt;xref:System.Threading.WaitHandle.WaitOne%2A&gt;</ph> on the <ph id="ph2">`ManualResetEvent`</ph> will block, awaiting the signal.</source>
          <target state="translated">Потоки, вызывающих метод <ph id="ph1">&lt;xref:System.Threading.WaitHandle.WaitOne%2A&gt;</ph> на <ph id="ph2">`ManualResetEvent`</ph> будут заблокированы, ожидая сигнала.</target>       </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Threading.ManualResetEvent">
          <source>When the controlling thread completes the activity, it calls <ph id="ph1">&lt;xref:System.Threading.EventWaitHandle.Set%2A&gt;</ph> to signal that the waiting threads can proceed.</source>
          <target state="translated">Когда контролирующий поток завершит работу, он вызывает <ph id="ph1">&lt;xref:System.Threading.EventWaitHandle.Set%2A&gt;</ph> сигнала, ожидающих потоков можно перейти.</target>       </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Threading.ManualResetEvent">
          <source>All waiting threads are released.</source>
          <target state="translated">Все ожидающие потоки освобождаются.</target>       </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Threading.ManualResetEvent">
          <source>Once it has been signaled, <ph id="ph1">`ManualResetEvent`</ph> remains signaled until it is manually reset.</source>
          <target state="translated">Когда было сообщено, <ph id="ph1">`ManualResetEvent`</ph> остается в сигнальном состоянии, пока будет сброшен вручную.</target>       </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Threading.ManualResetEvent">
          <source>That is, calls to <ph id="ph1">`WaitOne`</ph> return immediately.</source>
          <target state="translated">То есть, вызовы <ph id="ph1">`WaitOne`</ph> немедленный возврат.</target>       </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Threading.ManualResetEvent">
          <source>You can control the initial state of a <ph id="ph1">`ManualResetEvent`</ph> by passing a Boolean value to the constructor, <ph id="ph2">`true`</ph> if the initial state is signaled and <ph id="ph3">`false`</ph> otherwise.</source>
          <target state="translated">Можно управлять начальное состояние <ph id="ph1">`ManualResetEvent`</ph> , передав значение типа Boolean в конструктор <ph id="ph2">`true`</ph> Если начальное состояние сигнальное и <ph id="ph3">`false`</ph> в противном случае.</target>       </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Threading.ManualResetEvent">
          <source><ph id="ph1">`ManualResetEvent`</ph> can also be used with the <ph id="ph2">`static`</ph><ph id="ph3">&lt;xref:System.Threading.WaitHandle.WaitAll%2A&gt;</ph> and <ph id="ph4">&lt;xref:System.Threading.WaitHandle.WaitAny%2A&gt;</ph> methods.</source>
          <target state="translated"><ph id="ph1">`ManualResetEvent`</ph> Можно также использовать с <ph id="ph2">`static`</ph> <ph id="ph3">&lt;xref:System.Threading.WaitHandle.WaitAll%2A&gt;</ph> и <ph id="ph4">&lt;xref:System.Threading.WaitHandle.WaitAny%2A&gt;</ph> методы.</target>       </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Threading.ManualResetEvent">
          <source>For more information about thread synchronization mechanisms, see <bpt id="p1">[</bpt>ManualResetEvent and ManualResetEventSlim<ept id="p1">](~/docs/standard/threading/manualresetevent-and-manualreseteventslim.md)</ept> in the conceptual documentation.</source>
          <target state="translated">Дополнительные сведения о механизмах синхронизации потоков см. в разделе <bpt id="p1">[</bpt>ManualResetEvent и ManualResetEventSlim<ept id="p1">](~/docs/standard/threading/manualresetevent-and-manualreseteventslim.md)</ept> в основной документации.</target>       </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Threading.ManualResetEvent">
          <source>The following example demonstrates how <ph id="ph1">&lt;xref:System.Threading.ManualResetEvent&gt;</ph> works.</source>
          <target state="translated">В следующем примере показано, как <ph id="ph1">&lt;xref:System.Threading.ManualResetEvent&gt;</ph> работает.</target>       </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Threading.ManualResetEvent">
          <source>The example starts with a <ph id="ph1">&lt;xref:System.Threading.ManualResetEvent&gt;</ph> in the unsignaled state (that is, <ph id="ph2">`false`</ph> is passed to the constructor).</source>
          <target state="translated">Пример начинается с <ph id="ph1">&lt;xref:System.Threading.ManualResetEvent&gt;</ph> в несигнальное состояние (то есть <ph id="ph2">`false`</ph> передается в конструктор).</target>       </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Threading.ManualResetEvent">
          <source>The example creates three threads, each of which blocks on the <ph id="ph1">&lt;xref:System.Threading.ManualResetEvent&gt;</ph> by calling its <ph id="ph2">&lt;xref:System.Threading.WaitHandle.WaitOne%2A&gt;</ph> method.</source>
          <target state="translated">В примере создаются три потоков, каждый из которых блоки на <ph id="ph1">&lt;xref:System.Threading.ManualResetEvent&gt;</ph> путем вызова его <ph id="ph2">&lt;xref:System.Threading.WaitHandle.WaitOne%2A&gt;</ph> метод.</target>       </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Threading.ManualResetEvent">
          <source>When the user presses the <bpt id="p1">**</bpt>Enter<ept id="p1">**</ept> key, the example calls the <ph id="ph1">&lt;xref:System.Threading.EventWaitHandle.Set%2A&gt;</ph> method, which releases all three threads.</source>
          <target state="translated">Когда пользователь нажимает <bpt id="p1">**</bpt>ввод<ept id="p1">**</ept> ключа, в примере вызывается <ph id="ph1">&lt;xref:System.Threading.EventWaitHandle.Set%2A&gt;</ph> метод, который освобождает все три потока.</target>       </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Threading.ManualResetEvent">
          <source>Contrast this with the behavior of the <ph id="ph1">&lt;xref:System.Threading.AutoResetEvent&gt;</ph> class, which releases threads one at a time, resetting automatically after each release.</source>
          <target state="translated">Сравните это с поведением <ph id="ph1">&lt;xref:System.Threading.AutoResetEvent&gt;</ph> класс, который освобождает один потоков одновременно, автоматически Сброс после каждого выпуска.</target>       </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Threading.ManualResetEvent">
          <source>Pressing the <bpt id="p1">**</bpt>Enter<ept id="p1">**</ept> key again demonstrates that the <ph id="ph1">&lt;xref:System.Threading.ManualResetEvent&gt;</ph> remains in the signaled state until its <ph id="ph2">&lt;xref:System.Threading.EventWaitHandle.Reset%2A&gt;</ph> method is called: The example starts two more threads.</source>
          <target state="translated">Нажав клавишу <bpt id="p1">**</bpt>ввод<ept id="p1">**</ept> ключ еще раз демонстрирует, что <ph id="ph1">&lt;xref:System.Threading.ManualResetEvent&gt;</ph> остается в сигнальном состоянии до ее <ph id="ph2">&lt;xref:System.Threading.EventWaitHandle.Reset%2A&gt;</ph> вызывается метод: В примере запускается две дополнительные потоки.</target>       </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Threading.ManualResetEvent">
          <source>These threads do not block when they call the <ph id="ph1">&lt;xref:System.Threading.WaitHandle.WaitOne%2A&gt;</ph> method, but instead run to completion.</source>
          <target state="translated">Эти потоки не блокируются во время звонка <ph id="ph1">&lt;xref:System.Threading.WaitHandle.WaitOne%2A&gt;</ph> метода, но вместо этого выполняется до ее завершения.</target>       </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Threading.ManualResetEvent">
          <source>Pressing the <bpt id="p1">**</bpt>Enter<ept id="p1">**</ept> key again causes the example to call the <ph id="ph1">&lt;xref:System.Threading.EventWaitHandle.Reset%2A&gt;</ph> method and to start one more thread, which blocks when it calls <ph id="ph2">&lt;xref:System.Threading.WaitHandle.WaitOne%2A&gt;</ph>.</source>
          <target state="translated">Нажав клавишу <bpt id="p1">**</bpt>ввод<ept id="p1">**</ept> ключ еще раз вызывает примере вызов <ph id="ph1">&lt;xref:System.Threading.EventWaitHandle.Reset%2A&gt;</ph> метод и начать один дополнительные поток, который блокирует при вызове <ph id="ph2">&lt;xref:System.Threading.WaitHandle.WaitOne%2A&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Threading.ManualResetEvent">
          <source>Pressing the <bpt id="p1">**</bpt>Enter<ept id="p1">**</ept> key one final time calls <ph id="ph1">&lt;xref:System.Threading.EventWaitHandle.Set%2A&gt;</ph> to release the last thread, and the program ends.</source>
          <target state="translated">Нажав клавишу <bpt id="p1">**</bpt>ввод<ept id="p1">**</ept> ключа один последний раз вызывает <ph id="ph1">&lt;xref:System.Threading.EventWaitHandle.Set%2A&gt;</ph> для освобождения последнего потока и программа завершается.</target>       </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Threading.ManualResetEvent">
          <source>This class is thread safe.</source>
          <target state="translated">Этот класс является потокобезопасным.</target>       </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve" uid="M:System.Threading.ManualResetEvent.#ctor(System.Boolean)">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph> to set the initial state signaled; <ph id="ph2">&lt;see langword="false" /&gt;</ph> to set the initial state to nonsignaled.</source>
          <target state="translated">Значение <ph id="ph1">&lt;see langword="true" /&gt;</ph> для задания начального состояния сигнальным; <ph id="ph2">&lt;see langword="false" /&gt;</ph> для задания несигнального начального состояния.</target>       </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve" uid="M:System.Threading.ManualResetEvent.#ctor(System.Boolean)">
          <source>Initializes a new instance of the <ph id="ph1">&lt;see cref="T:System.Threading.ManualResetEvent" /&gt;</ph> class with a Boolean value indicating whether to set the initial state to signaled.</source>
          <target state="translated">Инициализирует новый экземпляр класса <ph id="ph1">&lt;see cref="T:System.Threading.ManualResetEvent" /&gt;</ph> логическим значением, показывающим наличие сигнального состояния.</target>       </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.ManualResetEvent.#ctor(System.Boolean)">
          <source>If the initial state of a <ph id="ph1">&lt;xref:System.Threading.ManualResetEvent&gt;</ph> is signaled (that is, if it is created by passing <ph id="ph2">`true`</ph> for <ph id="ph3">`initialState`</ph>), threads that wait on the <ph id="ph4">&lt;xref:System.Threading.ManualResetEvent&gt;</ph> do not block.</source>
          <target state="translated">Если начальное состояние <ph id="ph1">&lt;xref:System.Threading.ManualResetEvent&gt;</ph> получает сигнал (то есть, в том случае, если создается путем передачи <ph id="ph2">`true`</ph> для <ph id="ph3">`initialState`</ph>), потоки, ожидающие <ph id="ph4">&lt;xref:System.Threading.ManualResetEvent&gt;</ph> не блокируются.</target>       </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.ManualResetEvent.#ctor(System.Boolean)">
          <source>If the initial state is nonsignaled, threads block until the <ph id="ph1">&lt;xref:System.Threading.EventWaitHandle.Set%2A&gt;</ph> method is called.</source>
          <target state="translated">Если начальное состояние является несигнальным, потоки блокируются до <ph id="ph1">&lt;xref:System.Threading.EventWaitHandle.Set%2A&gt;</ph> вызывается метод.</target>       </trans-unit>
      </group>
    </body>
  </file>
</xliff>