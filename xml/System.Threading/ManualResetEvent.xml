<Type Name="ManualResetEvent" FullName="System.Threading.ManualResetEvent">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="3c19185907e45c5b7b80aae8627946c15d4efd4f" />
    <Meta Name="ms.sourcegitcommit" Value="6a0b904069161bbaec4ffd02aa7d9cf38c61e72e" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="ru-RU" />
    <Meta Name="ms.lasthandoff" Value="06/24/2018" />
    <Meta Name="ms.locfileid" Value="36605910" />
  </Metadata>
  <TypeSignature Language="C#" Value="public sealed class ManualResetEvent : System.Threading.EventWaitHandle" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed beforefieldinit ManualResetEvent extends System.Threading.EventWaitHandle" />
  <TypeSignature Language="DocId" Value="T:System.Threading.ManualResetEvent" />
  <TypeSignature Language="VB.NET" Value="Public NotInheritable Class ManualResetEvent&#xA;Inherits EventWaitHandle" />
  <TypeSignature Language="C++ CLI" Value="public ref class ManualResetEvent sealed : System::Threading::EventWaitHandle" />
  <TypeSignature Language="F#" Value="type ManualResetEvent = class&#xA;    inherit EventWaitHandle" />
  <AssemblyInfo>
    <AssemblyName>System.Threading</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.10.0</AssemblyVersion>
    <AssemblyVersion>4.1.0.0</AssemblyVersion>
    <AssemblyVersion>4.1.1.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>mscorlib</AssemblyName>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Threading.EventWaitHandle</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute>
      <AttributeName>System.Runtime.InteropServices.ComVisible(true)</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>Уведомляет один или более ожидающих потоков о том, что произошло событие. Этот класс не наследуется.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 В .NET Framework версии 2.0 <xref:System.Threading.ManualResetEvent> является производным от нового <xref:System.Threading.EventWaitHandle> класса. Объект <xref:System.Threading.ManualResetEvent> функционально эквивалентен <xref:System.Threading.EventWaitHandle> с <xref:System.Threading.EventResetMode.ManualReset?displayProperty=nameWithType>.  
  
> [!NOTE]
>  В отличие от <xref:System.Threading.ManualResetEvent> класса <xref:System.Threading.EventWaitHandle> класс предоставляет доступ к под названием system события синхронизации.  
  
 <xref:System.Threading.ManualResetEvent> позволяет потокам взаимодействовать друг с другом путем передачи сигналов. Как правило это взаимодействие касается задачи одного потока, в который должна быть выполнена до другие потоки могут продолжить работу.  
  
 Когда поток начинает работу, которая должна быть выполнена до других потоков продолжить работу, он вызывает метод <xref:System.Threading.EventWaitHandle.Reset%2A> поместить `ManualResetEvent` в несигнальное состояние. Этот поток может рассматриваться как управление `ManualResetEvent`. Потоки, вызывающих метод <xref:System.Threading.WaitHandle.WaitOne%2A> на `ManualResetEvent` будут заблокированы, ожидая сигнала. Когда контролирующий поток завершит работу, он вызывает <xref:System.Threading.EventWaitHandle.Set%2A> сигнала, ожидающих потоков можно перейти. Все ожидающие потоки освобождаются.  
  
 Когда было сообщено, `ManualResetEvent` остается в сигнальном состоянии, пока будет сброшен вручную. То есть, вызовы `WaitOne` немедленный возврат.  
  
 Можно управлять начальное состояние `ManualResetEvent` , передав значение типа Boolean в конструктор `true` Если начальное состояние сигнальное и `false` в противном случае.  
  
 `ManualResetEvent` Можно также использовать с `static` <xref:System.Threading.WaitHandle.WaitAll%2A> и <xref:System.Threading.WaitHandle.WaitAny%2A> методы.  
  
 Дополнительные сведения о механизмах синхронизации потоков см. в разделе [ManualResetEvent и ManualResetEventSlim](~/docs/standard/threading/manualresetevent-and-manualreseteventslim.md) в основной документации.  
  
   
  
## Examples  
 В следующем примере показано, как <xref:System.Threading.ManualResetEvent> работает. Пример начинается с <xref:System.Threading.ManualResetEvent> в несигнальное состояние (то есть `false` передается в конструктор). В примере создаются три потоков, каждый из которых блоки на <xref:System.Threading.ManualResetEvent> путем вызова его <xref:System.Threading.WaitHandle.WaitOne%2A> метод. Когда пользователь нажимает **ввод** ключа, в примере вызывается <xref:System.Threading.EventWaitHandle.Set%2A> метод, который освобождает все три потока. Сравните это с поведением <xref:System.Threading.AutoResetEvent> класс, который освобождает один потоков одновременно, автоматически Сброс после каждого выпуска.  
  
 Нажав клавишу **ввод** ключ еще раз демонстрирует, что <xref:System.Threading.ManualResetEvent> остается в сигнальном состоянии до ее <xref:System.Threading.EventWaitHandle.Reset%2A> вызывается метод: В примере запускается две дополнительные потоки. Эти потоки не блокируются во время звонка <xref:System.Threading.WaitHandle.WaitOne%2A> метода, но вместо этого выполняется до ее завершения.  
  
 Нажав клавишу **ввод** ключ еще раз вызывает примере вызов <xref:System.Threading.EventWaitHandle.Reset%2A> метод и начать один дополнительные поток, который блокирует при вызове <xref:System.Threading.WaitHandle.WaitOne%2A>. Нажав клавишу **ввод** ключа один последний раз вызывает <xref:System.Threading.EventWaitHandle.Set%2A> для освобождения последнего потока и программа завершается.  
  
 [!code-cpp[System.Threading.ManualResetEvent#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Threading.ManualResetEvent/CPP/source.cpp#1)]
 [!code-csharp[System.Threading.ManualResetEvent#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Threading.ManualResetEvent/CS/source.cs#1)]
 [!code-vb[System.Threading.ManualResetEvent#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Threading.ManualResetEvent/VB/source.vb#1)]  
  
 ]]></format>
    </remarks>
    <threadsafe>Этот класс является потокобезопасным.</threadsafe>
    <altmember cref="T:System.Threading.WaitHandle" />
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public ManualResetEvent (bool initialState);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(bool initialState) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.ManualResetEvent.#ctor(System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (initialState As Boolean)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; ManualResetEvent(bool initialState);" />
      <MemberSignature Language="F#" Value="new System.Threading.ManualResetEvent : bool -&gt; System.Threading.ManualResetEvent" Usage="new System.Threading.ManualResetEvent initialState" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="initialState" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="initialState">Значение <see langword="true" /> для задания начального состояния сигнальным; <see langword="false" /> для задания несигнального начального состояния.</param>
        <summary>Инициализирует новый экземпляр класса <see cref="T:System.Threading.ManualResetEvent" /> логическим значением, показывающим наличие сигнального состояния.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Если начальное состояние <xref:System.Threading.ManualResetEvent> получает сигнал (то есть, в том случае, если создается путем передачи `true` для `initialState`), потоки, ожидающие <xref:System.Threading.ManualResetEvent> не блокируются. Если начальное состояние является несигнальным, потоки блокируются до <xref:System.Threading.EventWaitHandle.Set%2A> вызывается метод.  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Threading.WaitHandle" />
      </Docs>
    </Member>
  </Members>
</Type>