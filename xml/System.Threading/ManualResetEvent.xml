<Type Name="ManualResetEvent" FullName="System.Threading.ManualResetEvent">
  <Metadata><Meta Name="ms.openlocfilehash" Value="55d22a680762383ef96947462e2824d553269a1f" /><Meta Name="ms.sourcegitcommit" Value="1654a92bac785a221098172d9cacd405ceaac9b7" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="ru-RU" /><Meta Name="ms.lasthandoff" Value="12/01/2018" /><Meta Name="ms.locfileid" Value="52738807" /></Metadata><TypeSignature Language="C#" Value="public sealed class ManualResetEvent : System.Threading.EventWaitHandle" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed beforefieldinit ManualResetEvent extends System.Threading.EventWaitHandle" />
  <TypeSignature Language="DocId" Value="T:System.Threading.ManualResetEvent" />
  <TypeSignature Language="VB.NET" Value="Public NotInheritable Class ManualResetEvent&#xA;Inherits EventWaitHandle" />
  <TypeSignature Language="C++ CLI" Value="public ref class ManualResetEvent sealed : System::Threading::EventWaitHandle" />
  <TypeSignature Language="F#" Value="type ManualResetEvent = class&#xA;    inherit EventWaitHandle" />
  <AssemblyInfo>
    <AssemblyName>System.Threading</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.10.0</AssemblyVersion>
    <AssemblyVersion>4.1.0.0</AssemblyVersion>
    <AssemblyVersion>4.1.1.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>mscorlib</AssemblyName>
    <AssemblyVersion>1.0.5000.0</AssemblyVersion>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Threading.EventWaitHandle</BaseTypeName>
    <BaseTypeName FrameworkAlternate="netframework-1.1">System.Threading.WaitHandle</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
      <AttributeName>System.Runtime.InteropServices.ComVisible(true)</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary><span data-ttu-id="c80fd-101">Уведомляет один или более ожидающих потоков о том, что произошло событие.</span><span class="sxs-lookup"><span data-stu-id="c80fd-101">Notifies one or more waiting threads that an event has occurred.</span></span> <span data-ttu-id="c80fd-102">Этот класс не наследуется.</span><span class="sxs-lookup"><span data-stu-id="c80fd-102">This class cannot be inherited.</span></span></summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="c80fd-103">В .NET Framework версии 2.0 <xref:System.Threading.ManualResetEvent> является производным от нового <xref:System.Threading.EventWaitHandle> класса.</span><span class="sxs-lookup"><span data-stu-id="c80fd-103">In the .NET Framework version 2.0, <xref:System.Threading.ManualResetEvent> derives from the new <xref:System.Threading.EventWaitHandle> class.</span></span> <span data-ttu-id="c80fd-104">Объект <xref:System.Threading.ManualResetEvent> функционально эквивалентен <xref:System.Threading.EventWaitHandle> созданные с помощью <xref:System.Threading.EventResetMode.ManualReset?displayProperty=nameWithType>.</span><span class="sxs-lookup"><span data-stu-id="c80fd-104">A <xref:System.Threading.ManualResetEvent> is functionally equivalent to an <xref:System.Threading.EventWaitHandle> created with <xref:System.Threading.EventResetMode.ManualReset?displayProperty=nameWithType>.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="c80fd-105">В отличие от <xref:System.Threading.ManualResetEvent> класса <xref:System.Threading.EventWaitHandle> класс предоставляет доступ к именованные системные события синхронизации.</span><span class="sxs-lookup"><span data-stu-id="c80fd-105">Unlike the <xref:System.Threading.ManualResetEvent> class, the <xref:System.Threading.EventWaitHandle> class provides access to named system synchronization events.</span></span>  
  
 <span data-ttu-id="c80fd-106"><xref:System.Threading.ManualResetEvent> позволяет потокам взаимодействовать друг с другом, обмениваясь сигналами.</span><span class="sxs-lookup"><span data-stu-id="c80fd-106"><xref:System.Threading.ManualResetEvent> allows threads to communicate with each other by signaling.</span></span> <span data-ttu-id="c80fd-107">Как правило это взаимодействие касается задачу, которую один поток необходимо завершить перед продолжением других потоков.</span><span class="sxs-lookup"><span data-stu-id="c80fd-107">Typically, this communication concerns a task which one thread must complete before other threads can proceed.</span></span>  
  
 <span data-ttu-id="c80fd-108">Когда поток начинает действие, которое необходимо выполнить перед другими продолжить потоков, он вызывает метод <xref:System.Threading.EventWaitHandle.Reset%2A> поместить `ManualResetEvent` в сигнальное состояние.</span><span class="sxs-lookup"><span data-stu-id="c80fd-108">When a thread begins an activity that must complete before other threads proceed, it calls <xref:System.Threading.EventWaitHandle.Reset%2A> to put `ManualResetEvent` in the non-signaled state.</span></span> <span data-ttu-id="c80fd-109">Этот поток может рассматриваться как управление `ManualResetEvent`.</span><span class="sxs-lookup"><span data-stu-id="c80fd-109">This thread can be thought of as controlling the `ManualResetEvent`.</span></span> <span data-ttu-id="c80fd-110">После этого вызова потоков <xref:System.Threading.WaitHandle.WaitOne%2A> на `ManualResetEvent` блокируется, ожидая сигнала.</span><span class="sxs-lookup"><span data-stu-id="c80fd-110">Threads that call <xref:System.Threading.WaitHandle.WaitOne%2A> on the `ManualResetEvent` will block, awaiting the signal.</span></span> <span data-ttu-id="c80fd-111">Если управляющий поток завершит работу, он вызывает <xref:System.Threading.EventWaitHandle.Set%2A> информировать, что можно продолжить ожидающих потоков.</span><span class="sxs-lookup"><span data-stu-id="c80fd-111">When the controlling thread completes the activity, it calls <xref:System.Threading.EventWaitHandle.Set%2A> to signal that the waiting threads can proceed.</span></span> <span data-ttu-id="c80fd-112">Все ожидающие потоки освобождаются.</span><span class="sxs-lookup"><span data-stu-id="c80fd-112">All waiting threads are released.</span></span>  
  
 <span data-ttu-id="c80fd-113">После сигнала, `ManualResetEvent` остается в сигнальном состоянии, пока сбрасывается вручную.</span><span class="sxs-lookup"><span data-stu-id="c80fd-113">Once it has been signaled, `ManualResetEvent` remains signaled until it is manually reset.</span></span> <span data-ttu-id="c80fd-114">То есть вызовы `WaitOne` немедленный возврат.</span><span class="sxs-lookup"><span data-stu-id="c80fd-114">That is, calls to `WaitOne` return immediately.</span></span>  
  
 <span data-ttu-id="c80fd-115">Можно управлять начальное состояние `ManualResetEvent` , передав в конструктор, логическое значение `true` Если начальное состояние переводится в сигнальное состояние и `false` в противном случае.</span><span class="sxs-lookup"><span data-stu-id="c80fd-115">You can control the initial state of a `ManualResetEvent` by passing a Boolean value to the constructor, `true` if the initial state is signaled and `false` otherwise.</span></span>  
  
 <span data-ttu-id="c80fd-116">`ManualResetEvent` Можно также использовать с `static` <xref:System.Threading.WaitHandle.WaitAll%2A> и <xref:System.Threading.WaitHandle.WaitAny%2A> методы.</span><span class="sxs-lookup"><span data-stu-id="c80fd-116">`ManualResetEvent` can also be used with the `static`<xref:System.Threading.WaitHandle.WaitAll%2A> and <xref:System.Threading.WaitHandle.WaitAny%2A> methods.</span></span>  
  
 <span data-ttu-id="c80fd-117">Дополнительные сведения о механизмах синхронизации потоков, см. в разделе [ManualResetEvent и ManualResetEventSlim](~/docs/standard/threading/manualresetevent-and-manualreseteventslim.md) в основной документации.</span><span class="sxs-lookup"><span data-stu-id="c80fd-117">For more information about thread synchronization mechanisms, see [ManualResetEvent and ManualResetEventSlim](~/docs/standard/threading/manualresetevent-and-manualreseteventslim.md) in the conceptual documentation.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="c80fd-118">В следующем примере показано, как <xref:System.Threading.ManualResetEvent> работает.</span><span class="sxs-lookup"><span data-stu-id="c80fd-118">The following example demonstrates how <xref:System.Threading.ManualResetEvent> works.</span></span> <span data-ttu-id="c80fd-119">Пример начинается с <xref:System.Threading.ManualResetEvent> в состояние без сигнала (то есть `false` передается в конструктор).</span><span class="sxs-lookup"><span data-stu-id="c80fd-119">The example starts with a <xref:System.Threading.ManualResetEvent> in the unsignaled state (that is, `false` is passed to the constructor).</span></span> <span data-ttu-id="c80fd-120">В примере создается три потоков, каждый из которых блоков на <xref:System.Threading.ManualResetEvent> путем вызова его <xref:System.Threading.WaitHandle.WaitOne%2A> метод.</span><span class="sxs-lookup"><span data-stu-id="c80fd-120">The example creates three threads, each of which blocks on the <xref:System.Threading.ManualResetEvent> by calling its <xref:System.Threading.WaitHandle.WaitOne%2A> method.</span></span> <span data-ttu-id="c80fd-121">Когда пользователь нажимает **ввод** ключа, в примере вызывается <xref:System.Threading.EventWaitHandle.Set%2A> метод, который освобождает все три потока.</span><span class="sxs-lookup"><span data-stu-id="c80fd-121">When the user presses the **Enter** key, the example calls the <xref:System.Threading.EventWaitHandle.Set%2A> method, which releases all three threads.</span></span> <span data-ttu-id="c80fd-122">Сравните это с поведением <xref:System.Threading.AutoResetEvent> класс, который освобождает один потоков одновременно, сброс автоматически после каждого выпуска.</span><span class="sxs-lookup"><span data-stu-id="c80fd-122">Contrast this with the behavior of the <xref:System.Threading.AutoResetEvent> class, which releases threads one at a time, resetting automatically after each release.</span></span>  
  
 <span data-ttu-id="c80fd-123">Нажав клавишу **ввод** ключ еще раз демонстрирует, что <xref:System.Threading.ManualResetEvent> остается в сигнальном состоянии, пока его <xref:System.Threading.EventWaitHandle.Reset%2A> вызывается метод: В примере запускается две дополнительные потоки.</span><span class="sxs-lookup"><span data-stu-id="c80fd-123">Pressing the **Enter** key again demonstrates that the <xref:System.Threading.ManualResetEvent> remains in the signaled state until its <xref:System.Threading.EventWaitHandle.Reset%2A> method is called: The example starts two more threads.</span></span> <span data-ttu-id="c80fd-124">Эти потоки не блокируются во время звонка <xref:System.Threading.WaitHandle.WaitOne%2A> метод, но вместо запуска и выполнения.</span><span class="sxs-lookup"><span data-stu-id="c80fd-124">These threads do not block when they call the <xref:System.Threading.WaitHandle.WaitOne%2A> method, but instead run to completion.</span></span>  
  
 <span data-ttu-id="c80fd-125">Нажав клавишу **ввод** ключ еще раз приводит пример, чтобы вызвать <xref:System.Threading.EventWaitHandle.Reset%2A> метод и начать один дополнительные поток, который блокирует при вызове <xref:System.Threading.WaitHandle.WaitOne%2A>.</span><span class="sxs-lookup"><span data-stu-id="c80fd-125">Pressing the **Enter** key again causes the example to call the <xref:System.Threading.EventWaitHandle.Reset%2A> method and to start one more thread, which blocks when it calls <xref:System.Threading.WaitHandle.WaitOne%2A>.</span></span> <span data-ttu-id="c80fd-126">Нажав клавишу **ввод** ключа один последний раз вызывает <xref:System.Threading.EventWaitHandle.Set%2A> выпуска последнего потока и программа завершается.</span><span class="sxs-lookup"><span data-stu-id="c80fd-126">Pressing the **Enter** key one final time calls <xref:System.Threading.EventWaitHandle.Set%2A> to release the last thread, and the program ends.</span></span>  
  
 [!code-cpp[System.Threading.ManualResetEvent#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Threading.ManualResetEvent/CPP/source.cpp#1)]
 [!code-csharp[System.Threading.ManualResetEvent#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Threading.ManualResetEvent/CS/source.cs#1)]
 [!code-vb[System.Threading.ManualResetEvent#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Threading.ManualResetEvent/VB/source.vb#1)]  
  
 ]]></format>
    </remarks>
    <threadsafe><span data-ttu-id="c80fd-127">Этот класс является потокобезопасным.</span><span class="sxs-lookup"><span data-stu-id="c80fd-127">This class is thread safe.</span></span></threadsafe>
    <altmember cref="T:System.Threading.WaitHandle" />
    <related type="Article" href="~/docs/standard/threading/index.md"><span data-ttu-id="c80fd-128">Управляемая поточность</span><span class="sxs-lookup"><span data-stu-id="c80fd-128">Managed Threading</span></span></related>
    <related type="Article" href="~/docs/standard/threading/manualresetevent-and-manualreseteventslim.md"><span data-ttu-id="c80fd-129">Событие ручного сброса</span><span class="sxs-lookup"><span data-stu-id="c80fd-129">Manual Reset Event</span></span></related>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public ManualResetEvent (bool initialState);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(bool initialState) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.ManualResetEvent.#ctor(System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (initialState As Boolean)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; ManualResetEvent(bool initialState);" />
      <MemberSignature Language="F#" Value="new System.Threading.ManualResetEvent : bool -&gt; System.Threading.ManualResetEvent" Usage="new System.Threading.ManualResetEvent initialState" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters>
        <Parameter Name="initialState" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="initialState"><span data-ttu-id="c80fd-130">Значение <see langword="true" /> для задания начального состояния сигнальным; <see langword="false" /> для задания несигнального начального состояния.</span><span class="sxs-lookup"><span data-stu-id="c80fd-130"><see langword="true" /> to set the initial state signaled; <see langword="false" /> to set the initial state to nonsignaled.</span></span></param>
        <summary><span data-ttu-id="c80fd-131">Инициализирует новый экземпляр класса <see cref="T:System.Threading.ManualResetEvent" /> логическим значением, показывающим наличие сигнального состояния.</span><span class="sxs-lookup"><span data-stu-id="c80fd-131">Initializes a new instance of the <see cref="T:System.Threading.ManualResetEvent" /> class with a Boolean value indicating whether to set the initial state to signaled.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="c80fd-132">Если начальное состояние <xref:System.Threading.ManualResetEvent> оповещается (то есть, в том случае, если создается путем передачи `true` для `initialState`), потоки, ожидающие <xref:System.Threading.ManualResetEvent> не блокируют.</span><span class="sxs-lookup"><span data-stu-id="c80fd-132">If the initial state of a <xref:System.Threading.ManualResetEvent> is signaled (that is, if it is created by passing `true` for `initialState`), threads that wait on the <xref:System.Threading.ManualResetEvent> do not block.</span></span> <span data-ttu-id="c80fd-133">Если начальное состояние является несигнальным, потоки блокируются до <xref:System.Threading.EventWaitHandle.Set%2A> вызывается метод.</span><span class="sxs-lookup"><span data-stu-id="c80fd-133">If the initial state is nonsignaled, threads block until the <xref:System.Threading.EventWaitHandle.Set%2A> method is called.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Threading.WaitHandle" />
        <related type="Article" href="~/docs/standard/threading/index.md"><span data-ttu-id="c80fd-134">Управляемая поточность</span><span class="sxs-lookup"><span data-stu-id="c80fd-134">Managed Threading</span></span></related>
        <related type="Article" href="~/docs/standard/threading/manualresetevent-and-manualreseteventslim.md"><span data-ttu-id="c80fd-135">ManualResetEvent</span><span class="sxs-lookup"><span data-stu-id="c80fd-135">ManualResetEvent</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="Reset">
      <MemberSignature Language="C#" Value="public bool Reset ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool Reset() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.ManualResetEvent.Reset" />
      <MemberSignature Language="VB.NET" Value="Public Function Reset () As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool Reset();" />
      <MemberSignature Language="F#" Value="member this.Reset : unit -&gt; bool" Usage="manualResetEvent.Reset " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Threading</AssemblyName>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="c80fd-136">Задает несигнальное состояние события, вызывая блокирование потоков.</span><span class="sxs-lookup"><span data-stu-id="c80fd-136">Sets the state of the event to nonsignaled, which causes threads to block.</span></span></summary>
        <returns><span data-ttu-id="c80fd-137">Значение <see langword="true" />, если операция выполнена успешно; в противном случае — значение <see langword="false" />.</span><span class="sxs-lookup"><span data-stu-id="c80fd-137"><see langword="true" /> if the operation succeeds; otherwise, <see langword="false" />.</span></span></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Set">
      <MemberSignature Language="C#" Value="public bool Set ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool Set() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.ManualResetEvent.Set" />
      <MemberSignature Language="VB.NET" Value="Public Function Set () As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool Set();" />
      <MemberSignature Language="F#" Value="member this.Set : unit -&gt; bool" Usage="manualResetEvent.Set " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Threading</AssemblyName>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="c80fd-138">Задает сигнальное состояние события, позволяя одному или нескольким ожидающим потокам развертываться.</span><span class="sxs-lookup"><span data-stu-id="c80fd-138">Sets the state of the event to signaled, which allows one or more waiting threads to proceed.</span></span></summary>
        <returns><span data-ttu-id="c80fd-139">Значение <see langword="true" />, если операция выполнена успешно; в противном случае — значение <see langword="false" />.</span><span class="sxs-lookup"><span data-stu-id="c80fd-139"><see langword="true" /> if the operation succeeds; otherwise, <see langword="false" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks  
<span data-ttu-id="c80fd-140">Вызов метода Set оставляет дескриптор ожидания в сигнальном состоянии до <xref:System.Threading.ManualResetEvent.Reset> вызывается метод.</span><span class="sxs-lookup"><span data-stu-id="c80fd-140">Calling the Set method leaves the wait handle in a signaled state until the <xref:System.Threading.ManualResetEvent.Reset> method is called.</span></span>

]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>