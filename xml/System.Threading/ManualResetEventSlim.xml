<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" version="1.2" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="ManualResetEventSlim.xml" source-language="en-US" target-language="ru-RU">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-15c36f0" tool-company="Microsoft" />
      <xliffext:skl_file_name xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">02cd5861-7ce2-4a82-b358-31f8435a0ac57525a47946f2ca16934b6f03acc5ce6bd78e6e66.skl</xliffext:skl_file_name>
      <xliffext:version xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">1.2</xliffext:version>
      <xliffext:ms.openlocfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">7525a47946f2ca16934b6f03acc5ce6bd78e6e66</xliffext:ms.openlocfilehash>
      <xliffext:ms.sourcegitcommit xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">d31dc2ede16f6f7bc64e90d9f897ff54c4e3869b</xliffext:ms.sourcegitcommit>
      <xliffext:ms.lasthandoff xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">04/03/2018</xliffext:ms.lasthandoff>
      <xliffext:moniker_ids xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">netcore-1.0,netcore-1.1,netcore-2.0,netcore-2.1,netframework-4.5.1,netframework-4.5.2,netframework-4.5,netframework-4.6.1,netframework-4.6.2,netframework-4.6,netframework-4.7.1,netframework-4.7,netstandard-1.0,netstandard-1.1,netstandard-1.2,netstandard-1.3,netstandard-1.4,netstandard-1.6,netstandard-2.0,xamarinandroid-7.1,xamarinios-10.8,xamarinmac-3.0</xliffext:moniker_ids>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve" uid="T:System.Threading.ManualResetEventSlim">
          <source>Provides a slimmed down version of <ph id="ph1">&lt;see cref="T:System.Threading.ManualResetEvent" /&gt;</ph>.</source>
          <target state="translated">Предоставляет уменьшенную версию <ph id="ph1">&lt;see cref="T:System.Threading.ManualResetEvent" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Threading.ManualResetEventSlim">
          <source>You can use this class for better performance than <ph id="ph1">&lt;xref:System.Threading.ManualResetEvent&gt;</ph> when wait times are expected to be very short, and when the event does not cross a process boundary.</source>
          <target state="translated">Этот класс можно использовать для повышения производительности, чем <ph id="ph1">&lt;xref:System.Threading.ManualResetEvent&gt;</ph> , если предполагается, что времена ожидания будут очень короткими и при события не пересекает границы процессов.</target>       </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Threading.ManualResetEventSlim">
          <source><ph id="ph1">&lt;xref:System.Threading.ManualResetEventSlim&gt;</ph> uses busy spinning for a short time while it waits for the event to become signaled.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Threading.ManualResetEventSlim&gt;</ph> использует цикличную работу в режиме занятости в течение короткого промежутка времени, пока ожидает перехода события в сигнальное состояние.</target>       </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Threading.ManualResetEventSlim">
          <source>When wait times are short, spinning can be much less expensive than waiting by using wait handles.</source>
          <target state="translated">Если периоды ожидания короткие, цикличность может стоить гораздо дешевле, чем ожидание с использованием соответствующих дескрипторов.</target>       </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Threading.ManualResetEventSlim">
          <source>However, if the event does not become signaled within a certain period of time, <ph id="ph1">&lt;xref:System.Threading.ManualResetEventSlim&gt;</ph> resorts to a regular event handle wait.</source>
          <target state="translated">Однако, если состояние события не изменяется в течение заданного периода времени, <ph id="ph1">&lt;xref:System.Threading.ManualResetEventSlim&gt;</ph> применяет обычный дескриптор ожидания событий.</target>       </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Threading.ManualResetEventSlim">
          <source>The following example shows how to use a <ph id="ph1">&lt;xref:System.Threading.ManualResetEventSlim&gt;</ph>.</source>
          <target state="translated">В следующем примере показано, как использовать <ph id="ph1">&lt;xref:System.Threading.ManualResetEventSlim&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Threading.ManualResetEventSlim">
          <source>For more information about the use of <ph id="ph1">`SpinCount`</ph> and other best practices concerning the use of this type, see <bpt id="p1">[</bpt>ManualResetEvent and ManualResetEventSlim<ept id="p1">](~/docs/standard/threading/manualresetevent-and-manualreseteventslim.md)</ept>.</source>
          <target state="translated">Дополнительные сведения об использовании <ph id="ph1">`SpinCount`</ph> и другие рекомендации по использованию этого типа. в разделе <bpt id="p1">[</bpt>ManualResetEvent и ManualResetEventSlim<ept id="p1">](~/docs/standard/threading/manualresetevent-and-manualreseteventslim.md)</ept>.</target>       </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Threading.ManualResetEventSlim">
          <source>All public and protected members of <ph id="ph1">&lt;see cref="T:System.Threading.ManualResetEventSlim" /&gt;</ph> are thread-safe and may be used concurrently from multiple threads, with the exception of Dispose, which must only be used when all other operations on the <ph id="ph2">&lt;see cref="T:System.Threading.ManualResetEventSlim" /&gt;</ph> have completed, and Reset, which should only be used when no other threads are accessing the event.</source>
          <target state="translated">Все открытые и защищенные члены <ph id="ph1">&lt;see cref="T:System.Threading.ManualResetEventSlim" /&gt;</ph> являются потокобезопасными и могут быть использованы одновременно из нескольких потоков, за исключением Dispose, который должен быть только используется, когда все операции в <ph id="ph2">&lt;see cref="T:System.Threading.ManualResetEventSlim" /&gt;</ph> выполнены и сбросить, которые должны использовать только когда нет других потоков получают доступ к событию.</target>       </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve" uid="T:System.Threading.ManualResetEventSlim">
          <source>Initializes a new instance of the <ph id="ph1">&lt;see cref="T:System.Threading.ManualResetEventSlim" /&gt;</ph> class.</source>
          <target state="translated">Инициализирует новый экземпляр класса <ph id="ph1">&lt;see cref="T:System.Threading.ManualResetEventSlim" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve" uid="M:System.Threading.ManualResetEventSlim.#ctor">
          <source>Initializes a new instance of the <ph id="ph1">&lt;see cref="T:System.Threading.ManualResetEventSlim" /&gt;</ph> class with an initial state of nonsignaled.</source>
          <target state="translated">Инициализирует новый экземпляр класса <ph id="ph1">&lt;see cref="T:System.Threading.ManualResetEventSlim" /&gt;</ph> начальным состоянием nonsignaled.</target>       </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve" uid="M:System.Threading.ManualResetEventSlim.#ctor(System.Boolean)">
          <source>true to set the initial state signaled; false to set the initial state to nonsignaled.</source>
          <target state="translated">значение true для задания начального сигнального состояния; значение false для задания начального несигнального состояния.</target>       </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve" uid="M:System.Threading.ManualResetEventSlim.#ctor(System.Boolean)">
          <source>Initializes a new instance of the <ph id="ph1">&lt;see cref="T:System.Threading.ManualResetEventSlim" /&gt;</ph> class with a Boolean value indicating whether to set the intial state to signaled.</source>
          <target state="translated">Инициализирует новый экземпляр класса <ph id="ph1">&lt;see cref="T:System.Threading.ManualResetEventSlim" /&gt;</ph> с логическим значением, указывающим, нужно ли для начального состояния задать сигнальное значение.</target>       </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve" uid="M:System.Threading.ManualResetEventSlim.#ctor(System.Boolean,System.Int32)">
          <source>true to set the initial state to signaled; false to set the initial state to nonsignaled.</source>
          <target state="translated">Значение true для задания начального сигнального состояния; значение false для задания начального несигнального состояния.</target>       </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve" uid="M:System.Threading.ManualResetEventSlim.#ctor(System.Boolean,System.Int32)">
          <source>The number of spin waits that will occur before falling back to a kernel-based wait operation.</source>
          <target state="translated">Число ожиданий прокруток до возврата к операции ожидания на основе ядра.</target>       </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve" uid="M:System.Threading.ManualResetEventSlim.#ctor(System.Boolean,System.Int32)">
          <source>Initializes a new instance of the <ph id="ph1">&lt;see cref="T:System.Threading.ManualResetEventSlim" /&gt;</ph> class with a Boolean value indicating whether to set the intial state to signaled and a specified spin count.</source>
          <target state="translated">Инициализирует новый экземпляр класса <ph id="ph1">&lt;see cref="T:System.Threading.ManualResetEventSlim" /&gt;</ph> с логическим значением, указывающим, нужно ли для начального состояния задать сигнальное значение, а также указанным числом прокруток.</target>       </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve" uid="M:System.Threading.ManualResetEventSlim.#ctor(System.Boolean,System.Int32)">
          <source><ph id="ph1">&lt;paramref name="spinCount" /&gt;</ph> is less than 0 or greater than the maximum allowed value.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="spinCount" /&gt;</ph> меньше 0 или больше максимального разрешенного значения.</target>       </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve" uid="T:System.Threading.ManualResetEventSlim">
          <source>Releases resources used by the current instance of the <ph id="ph1">&lt;see cref="T:System.Threading.ManualResetEventSlim" /&gt;</ph> class.</source>
          <target state="translated">Освобождает ресурсы, используемые текущим экземпляром класса <ph id="ph1">&lt;see cref="T:System.Threading.ManualResetEventSlim" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve" uid="M:System.Threading.ManualResetEventSlim.Dispose">
          <source>Releases all resources used by the current instance of the <ph id="ph1">&lt;see cref="T:System.Threading.ManualResetEventSlim" /&gt;</ph> class.</source>
          <target state="translated">Освобождает все ресурсы, используемые текущим экземпляром класса <ph id="ph1">&lt;see cref="T:System.Threading.ManualResetEventSlim" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.ManualResetEventSlim.Dispose">
          <source>Call <ph id="ph1">`Dispose`</ph> when you are finished using the <ph id="ph2">&lt;xref:System.Threading.ManualResetEventSlim&gt;</ph>.</source>
          <target state="translated">Вызовите метод <ph id="ph1">`Dispose`</ph> по окончании использования класса <ph id="ph2">&lt;xref:System.Threading.ManualResetEventSlim&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.ManualResetEventSlim.Dispose">
          <source>The <ph id="ph1">`Dispose`</ph> method leaves the <ph id="ph2">&lt;xref:System.Threading.ManualResetEventSlim&gt;</ph> in an unusable state.</source>
          <target state="translated">Метод <ph id="ph1">`Dispose`</ph> оставляет класс <ph id="ph2">&lt;xref:System.Threading.ManualResetEventSlim&gt;</ph> в непригодном для использования состоянии.</target>       </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.ManualResetEventSlim.Dispose">
          <source>After calling <ph id="ph1">`Dispose`</ph>, you must release all references to the <ph id="ph2">&lt;xref:System.Threading.ManualResetEventSlim&gt;</ph> so the garbage collector can reclaim the memory that the <ph id="ph3">&lt;xref:System.Threading.ManualResetEventSlim&gt;</ph> was occupying.</source>
          <target state="translated">После вызова метода <ph id="ph1">`Dispose`</ph>, необходимо освободить все ссылки на <ph id="ph2">&lt;xref:System.Threading.ManualResetEventSlim&gt;</ph> , сборщик мусора мог освободить память, <ph id="ph3">&lt;xref:System.Threading.ManualResetEventSlim&gt;</ph> занимаемую.</target>       </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.ManualResetEventSlim.Dispose">
          <source>For more information, see <bpt id="p1">[</bpt>Cleaning Up Unmanaged Resources<ept id="p1">](~/docs/standard/garbage-collection/unmanaged.md)</ept> and <bpt id="p2">[</bpt>Implementing a Dispose Method<ept id="p2">](~/docs/standard/garbage-collection/implementing-dispose.md)</ept>.</source>
          <target state="translated">Дополнительные сведения см. в разделе <bpt id="p1">[</bpt>очистки неуправляемых ресурсов<ept id="p1">](~/docs/standard/garbage-collection/unmanaged.md)</ept> и <bpt id="p2">[</bpt>метода<ept id="p2">](~/docs/standard/garbage-collection/implementing-dispose.md)</ept>.</target>       </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.ManualResetEventSlim.Dispose">
          <source>Always call <ph id="ph1">`Dispose`</ph> before you release your last reference to the <ph id="ph2">&lt;xref:System.Threading.ManualResetEventSlim&gt;</ph>.</source>
          <target state="translated">Всегда вызывайте метод <ph id="ph1">`Dispose`</ph> перед освобождением последней ссылки на класс <ph id="ph2">&lt;xref:System.Threading.ManualResetEventSlim&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.ManualResetEventSlim.Dispose">
          <source>Otherwise, the resources it is using will not be freed until the garbage collector calls the <ph id="ph1">&lt;xref:System.Threading.ManualResetEventSlim&gt;</ph> object's <ph id="ph2">`Finalize`</ph> method.</source>
          <target state="translated">В противном случае используемые им ресурсы не будут освобождены до тех пор, пока сборщик мусора не вызовет для объекта <ph id="ph1">&lt;xref:System.Threading.ManualResetEventSlim&gt;</ph> метод <ph id="ph2">`Finalize`</ph>.</target>       </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve" uid="M:System.Threading.ManualResetEventSlim.Dispose(System.Boolean)">
          <source>true to release both managed and unmanaged resources; false to release only unmanaged resources.</source>
          <target state="translated">Значение true, чтобы освободить управляемые и неуправляемые ресурсы; значение false, чтобы освободить только неуправляемые ресурсы.</target>       </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve" uid="M:System.Threading.ManualResetEventSlim.Dispose(System.Boolean)">
          <source>Releases the unmanaged resources used by the <ph id="ph1">&lt;see cref="T:System.Threading.ManualResetEventSlim" /&gt;</ph>, and optionally releases the managed resources.</source>
          <target state="translated">Освобождает неуправляемые ресурсы, используемые журналом <ph id="ph1">&lt;see cref="T:System.Threading.ManualResetEventSlim" /&gt;</ph>, и при необходимости освобождает также управляемые ресурсы.</target>       </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.ManualResetEventSlim.Dispose(System.Boolean)">
          <source>Unlike most of the members of <ph id="ph1">&lt;xref:System.Threading.ManualResetEventSlim&gt;</ph>, <ph id="ph2">&lt;xref:System.Threading.ManualResetEventSlim.Dispose%2A&gt;</ph> is not thread-safe and may not be used concurrently with other members of this instance.</source>
          <target state="translated">В отличие от большинства элементов <ph id="ph1">&lt;xref:System.Threading.ManualResetEventSlim&gt;</ph>, <ph id="ph2">&lt;xref:System.Threading.ManualResetEventSlim.Dispose%2A&gt;</ph> не потокобезопасна и не может использоваться параллельно с другими членами данного экземпляра.</target>       </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve" uid="P:System.Threading.ManualResetEventSlim.IsSet">
          <source>Gets whether the event is set.</source>
          <target state="translated">Получает значение, указывающее, установлено ли событие.</target>       </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Threading.ManualResetEventSlim.IsSet">
          <source>true if the event has is set; otherwise, false.</source>
          <target state="translated">Значение true, если событие установлено; в противном случае — значение false.</target>       </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve" uid="M:System.Threading.ManualResetEventSlim.Reset">
          <source>Sets the state of the event to nonsignaled, which causes threads to block.</source>
          <target state="translated">Задает несигнальное состояние события, вызывая блокирование потоков.</target>       </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.ManualResetEventSlim.Reset">
          <source><ph id="ph1">&lt;xref:System.Threading.ManualResetEventSlim.Reset%2A&gt;</ph> can be called concurrently with all members except <ph id="ph2">&lt;xref:System.Threading.ManualResetEventSlim.WaitHandle%2A&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Threading.ManualResetEventSlim.Reset%2A&gt;</ph> может быть вызван одновременно все члены, за исключением <ph id="ph2">&lt;xref:System.Threading.ManualResetEventSlim.WaitHandle%2A&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve" uid="M:System.Threading.ManualResetEventSlim.Reset">
          <source>The object has already been disposed.</source>
          <target state="translated">Объект уже удален.</target>       </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve" uid="M:System.Threading.ManualResetEventSlim.Set">
          <source>Sets the state of the event to signaled, which allows one or more threads waiting on the event to proceed.</source>
          <target state="translated">Устанавливает несигнальное состояние события, позволяя продолжить выполнение одному или нескольким потокам, ожидающим событие.</target>       </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve" uid="P:System.Threading.ManualResetEventSlim.SpinCount">
          <source>Gets the number of spin waits that will occur before falling back to a kernel-based wait operation.</source>
          <target state="translated">Получает число спин-блокировок до возврата к операции ожидания на основе ядра.</target>       </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Threading.ManualResetEventSlim.SpinCount">
          <source>Returns the number of spin waits that will occur before falling back to a kernel-based wait operation.</source>
          <target state="translated">Возвращает число спин-блокировок до возврата к операции ожидания на основе ядра.</target>       </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve" uid="T:System.Threading.ManualResetEventSlim">
          <source>Blocks the current thread until the current <ph id="ph1">&lt;see cref="T:System.Threading.ManualResetEventSlim" /&gt;</ph> is set.</source>
          <target state="translated">Блокирует текущий поток до установки текущего объекта <ph id="ph1">&lt;see cref="T:System.Threading.ManualResetEventSlim" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve" uid="M:System.Threading.ManualResetEventSlim.Wait">
          <source>Blocks the current thread until the current <ph id="ph1">&lt;see cref="T:System.Threading.ManualResetEventSlim" /&gt;</ph> is set.</source>
          <target state="translated">Блокирует текущий поток до установки текущего объекта <ph id="ph1">&lt;see cref="T:System.Threading.ManualResetEventSlim" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.ManualResetEventSlim.Wait">
          <source>The caller of this method blocks indefinitely until the current instance is set.</source>
          <target state="translated">Код, вызывающий этот метод блокируется бесконечно, пока значение текущего экземпляра.</target>       </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.ManualResetEventSlim.Wait">
          <source>The caller will return immediately if the event is currently in a set state.</source>
          <target state="translated">Вызывающий объект немедленно вернет Если событие находится в заданном состоянии.</target>       </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve" uid="M:System.Threading.ManualResetEventSlim.Wait">
          <source>The maximum number of waiters has been exceeded.</source>
          <target state="translated">Превышено максимально допустимое количество ожидающих.</target>       </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve" uid="M:System.Threading.ManualResetEventSlim.Wait">
          <source>The object has already been disposed.</source>
          <target state="translated">Объект уже удален.</target>       </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve" uid="M:System.Threading.ManualResetEventSlim.Wait(System.Int32)">
          <source>The number of milliseconds to wait, or <ph id="ph1">&lt;see cref="F:System.Threading.Timeout.Infinite" /&gt;</ph>(-1) to wait indefinitely.</source>
          <target state="translated">Время ожидания в миллисекундах или <ph id="ph1">&lt;see cref="F:System.Threading.Timeout.Infinite" /&gt;</ph> (-1) для неограниченного времени ожидания.</target>       </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve" uid="M:System.Threading.ManualResetEventSlim.Wait(System.Int32)">
          <source>Blocks the current thread until the current <ph id="ph1">&lt;see cref="T:System.Threading.ManualResetEventSlim" /&gt;</ph> is set, using a 32-bit signed integer to measure the time interval.</source>
          <target state="translated">Блокирует текущий поток до тех пор, пока не установлен текущий объект <ph id="ph1">&lt;see cref="T:System.Threading.ManualResetEventSlim" /&gt;</ph>, используя 32-разрядное знаковое целое число для измерения интервала времени.</target>       </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve" uid="M:System.Threading.ManualResetEventSlim.Wait(System.Int32)">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph> if the <ph id="ph2">&lt;see cref="T:System.Threading.ManualResetEventSlim" /&gt;</ph> was set; otherwise, <ph id="ph3">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated">Значение <ph id="ph1">&lt;see langword="true" /&gt;</ph>, если был задан <ph id="ph2">&lt;see cref="T:System.Threading.ManualResetEventSlim" /&gt;</ph>; в противном случае значение <ph id="ph3">&lt;see langword="false" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve" uid="M:System.Threading.ManualResetEventSlim.Wait(System.Int32)">
          <source><ph id="ph1">&lt;paramref name="millisecondsTimeout" /&gt;</ph> is a negative number other than -1, which represents an infinite time-out.</source>
          <target state="translated">Параметр <ph id="ph1">&lt;paramref name="millisecondsTimeout" /&gt;</ph> является отрицательным числом, отличным от –1, что означает бесконечное время ожидания.</target>       </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve" uid="M:System.Threading.ManualResetEventSlim.Wait(System.Int32)">
          <source>The maximum number of waiters has been exceeded.</source>
          <target state="translated">Превышено максимально допустимое количество ожидающих.</target>       </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve" uid="M:System.Threading.ManualResetEventSlim.Wait(System.Int32)">
          <source>The object has already been disposed.</source>
          <target state="translated">Объект уже удален.</target>       </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve" uid="M:System.Threading.ManualResetEventSlim.Wait(System.Threading.CancellationToken)">
          <source>The <ph id="ph1">&lt;see cref="T:System.Threading.CancellationToken" /&gt;</ph> to observe.</source>
          <target state="translated">Токен отмены <ph id="ph1">&lt;see cref="T:System.Threading.CancellationToken" /&gt;</ph>, который следует контролировать.</target>       </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve" uid="M:System.Threading.ManualResetEventSlim.Wait(System.Threading.CancellationToken)">
          <source>Blocks the current thread until the current <ph id="ph1">&lt;see cref="T:System.Threading.ManualResetEventSlim" /&gt;</ph> receives a signal, while observing a <ph id="ph2">&lt;see cref="T:System.Threading.CancellationToken" /&gt;</ph>.</source>
          <target state="translated">Блокирует текущий поток до получения сигнала текущим объектом <ph id="ph1">&lt;see cref="T:System.Threading.ManualResetEventSlim" /&gt;</ph>. Кроме того, метод контролирует токен <ph id="ph2">&lt;see cref="T:System.Threading.CancellationToken" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.ManualResetEventSlim.Wait(System.Threading.CancellationToken)">
          <source>The caller of this method blocks indefinitely until the current instance is set.</source>
          <target state="translated">Код, вызывающий этот метод блокируется бесконечно, пока значение текущего экземпляра.</target>       </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.ManualResetEventSlim.Wait(System.Threading.CancellationToken)">
          <source>The caller will return immediately if the event is currently in a set state.</source>
          <target state="translated">Вызывающий объект немедленно вернет Если событие находится в заданном состоянии.</target>       </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve" uid="M:System.Threading.ManualResetEventSlim.Wait(System.Threading.CancellationToken)">
          <source>The maximum number of waiters has been exceeded.</source>
          <target state="translated">Превышено максимально допустимое количество ожидающих.</target>       </trans-unit>
        <trans-unit id="153" translate="yes" xml:space="preserve" uid="M:System.Threading.ManualResetEventSlim.Wait(System.Threading.CancellationToken)">
          <source><ph id="ph1">&lt;paramref name="cancellationToken" /&gt;</ph> was canceled.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="cancellationToken" /&gt;</ph> был отменен.</target>       </trans-unit>
        <trans-unit id="154" translate="yes" xml:space="preserve" uid="M:System.Threading.ManualResetEventSlim.Wait(System.Threading.CancellationToken)">
          <source>The object has already been disposed or the <ph id="ph1">&lt;see cref="T:System.Threading.CancellationTokenSource" /&gt;</ph> that created <ph id="ph2">&lt;paramref name="cancellationToken" /&gt;</ph> has been disposed.</source>
          <target state="translated">Объект был удален или <ph id="ph1">&lt;see cref="T:System.Threading.CancellationTokenSource" /&gt;</ph>, создавший <ph id="ph2">&lt;paramref name="cancellationToken" /&gt;</ph>, был удален.</target>       </trans-unit>
        <trans-unit id="155" translate="yes" xml:space="preserve" uid="M:System.Threading.ManualResetEventSlim.Wait(System.TimeSpan)">
          <source>A <ph id="ph1">&lt;see cref="T:System.TimeSpan" /&gt;</ph> that represents the number of milliseconds to wait, or a <ph id="ph2">&lt;see cref="T:System.TimeSpan" /&gt;</ph> that represents -1 milliseconds to wait indefinitely.</source>
          <target state="translated">Период <ph id="ph1">&lt;see cref="T:System.TimeSpan" /&gt;</ph>, представляющий время ожидания в миллисекундах, или период <ph id="ph2">&lt;see cref="T:System.TimeSpan" /&gt;</ph>, представляющий -1 миллисекунду для неограниченного ожидания.</target>       </trans-unit>
        <trans-unit id="156" translate="yes" xml:space="preserve" uid="M:System.Threading.ManualResetEventSlim.Wait(System.TimeSpan)">
          <source>Blocks the current thread until the current <ph id="ph1">&lt;see cref="T:System.Threading.ManualResetEventSlim" /&gt;</ph> is set, using a <ph id="ph2">&lt;see cref="T:System.TimeSpan" /&gt;</ph> to measure the time interval.</source>
          <target state="translated">Блокирует текущий поток, пока не будет установлено текущее событие <ph id="ph1">&lt;see cref="T:System.Threading.ManualResetEventSlim" /&gt;</ph>, используя объект <ph id="ph2">&lt;see cref="T:System.TimeSpan" /&gt;</ph> для измерения интервала времени.</target>       </trans-unit>
        <trans-unit id="157" translate="yes" xml:space="preserve" uid="M:System.Threading.ManualResetEventSlim.Wait(System.TimeSpan)">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph> if the <ph id="ph2">&lt;see cref="T:System.Threading.ManualResetEventSlim" /&gt;</ph> was set; otherwise, <ph id="ph3">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated">Значение <ph id="ph1">&lt;see langword="true" /&gt;</ph>, если был задан <ph id="ph2">&lt;see cref="T:System.Threading.ManualResetEventSlim" /&gt;</ph>; в противном случае значение <ph id="ph3">&lt;see langword="false" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="158" translate="yes" xml:space="preserve" uid="M:System.Threading.ManualResetEventSlim.Wait(System.TimeSpan)">
          <source><ph id="ph1">&lt;paramref name="timeout" /&gt;</ph> is a negative number other than -1 milliseconds, which represents an infinite time-out.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="timeout" /&gt;</ph> является отрицательным числом, отличным от -1 миллисекунды, которое представляет неограниченное время ожидания.</target>       </trans-unit>
        <trans-unit id="159" translate="yes" xml:space="preserve" uid="M:System.Threading.ManualResetEventSlim.Wait(System.TimeSpan)">
          <source>-or-</source>
          <target state="translated">- или -</target>       </trans-unit>
        <trans-unit id="160" translate="yes" xml:space="preserve" uid="M:System.Threading.ManualResetEventSlim.Wait(System.TimeSpan)">
          <source>The number of milliseconds in <ph id="ph1">&lt;paramref name="timeout" /&gt;</ph> is greater than <ph id="ph2">&lt;see cref="F:System.Int32.MaxValue" /&gt;</ph>.</source>
          <target state="translated">Количество миллисекунд в <ph id="ph1">&lt;paramref name="timeout" /&gt;</ph> больше, чем значение <ph id="ph2">&lt;see cref="F:System.Int32.MaxValue" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="161" translate="yes" xml:space="preserve" uid="M:System.Threading.ManualResetEventSlim.Wait(System.TimeSpan)">
          <source>The maximum number of waiters has been exceeded.</source>
          <target state="translated">Превышено максимально допустимое количество ожидающих.</target>       </trans-unit>
        <trans-unit id="162" translate="yes" xml:space="preserve" uid="M:System.Threading.ManualResetEventSlim.Wait(System.TimeSpan)">
          <source>The object has already been disposed.</source>
          <target state="translated">Объект уже удален.</target>       </trans-unit>
        <trans-unit id="163" translate="yes" xml:space="preserve" uid="M:System.Threading.ManualResetEventSlim.Wait(System.Int32,System.Threading.CancellationToken)">
          <source>The number of milliseconds to wait, or <ph id="ph1">&lt;see cref="F:System.Threading.Timeout.Infinite" /&gt;</ph>(-1) to wait indefinitely.</source>
          <target state="translated">Время ожидания в миллисекундах или <ph id="ph1">&lt;see cref="F:System.Threading.Timeout.Infinite" /&gt;</ph> (-1) для неограниченного времени ожидания.</target>       </trans-unit>
        <trans-unit id="164" translate="yes" xml:space="preserve" uid="M:System.Threading.ManualResetEventSlim.Wait(System.Int32,System.Threading.CancellationToken)">
          <source>The <ph id="ph1">&lt;see cref="T:System.Threading.CancellationToken" /&gt;</ph> to observe.</source>
          <target state="translated">Токен отмены <ph id="ph1">&lt;see cref="T:System.Threading.CancellationToken" /&gt;</ph>, который следует контролировать.</target>       </trans-unit>
        <trans-unit id="165" translate="yes" xml:space="preserve" uid="M:System.Threading.ManualResetEventSlim.Wait(System.Int32,System.Threading.CancellationToken)">
          <source>Blocks the current thread until the current <ph id="ph1">&lt;see cref="T:System.Threading.ManualResetEventSlim" /&gt;</ph> is set, using a 32-bit signed integer to measure the time interval, while observing a <ph id="ph2">&lt;see cref="T:System.Threading.CancellationToken" /&gt;</ph>.</source>
          <target state="translated">Блокирует текущий поток до тех пор, пока не будет установлен текущий объект <ph id="ph1">&lt;see cref="T:System.Threading.ManualResetEventSlim" /&gt;</ph>, используя 32-разрядное знаковое целое число для измерения интервала времени. Кроме того, метод контролирует токен <ph id="ph2">&lt;see cref="T:System.Threading.CancellationToken" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="166" translate="yes" xml:space="preserve" uid="M:System.Threading.ManualResetEventSlim.Wait(System.Int32,System.Threading.CancellationToken)">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph> if the <ph id="ph2">&lt;see cref="T:System.Threading.ManualResetEventSlim" /&gt;</ph> was set; otherwise, <ph id="ph3">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated">Значение <ph id="ph1">&lt;see langword="true" /&gt;</ph>, если был задан <ph id="ph2">&lt;see cref="T:System.Threading.ManualResetEventSlim" /&gt;</ph>; в противном случае значение <ph id="ph3">&lt;see langword="false" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="167" translate="yes" xml:space="preserve" uid="M:System.Threading.ManualResetEventSlim.Wait(System.Int32,System.Threading.CancellationToken)">
          <source><ph id="ph1">&lt;paramref name="cancellationToken" /&gt;</ph> was canceled.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="cancellationToken" /&gt;</ph> был отменен.</target>       </trans-unit>
        <trans-unit id="168" translate="yes" xml:space="preserve" uid="M:System.Threading.ManualResetEventSlim.Wait(System.Int32,System.Threading.CancellationToken)">
          <source><ph id="ph1">&lt;paramref name="millisecondsTimeout" /&gt;</ph> is a negative number other than -1, which represents an infinite time-out.</source>
          <target state="translated">Параметр <ph id="ph1">&lt;paramref name="millisecondsTimeout" /&gt;</ph> является отрицательным числом, отличным от –1, что означает бесконечное время ожидания.</target>       </trans-unit>
        <trans-unit id="169" translate="yes" xml:space="preserve" uid="M:System.Threading.ManualResetEventSlim.Wait(System.Int32,System.Threading.CancellationToken)">
          <source>The maximum number of waiters has been exceeded.</source>
          <target state="translated">Превышено максимально допустимое количество ожидающих.</target>       </trans-unit>
        <trans-unit id="170" translate="yes" xml:space="preserve" uid="M:System.Threading.ManualResetEventSlim.Wait(System.Int32,System.Threading.CancellationToken)">
          <source>The object has already been disposed or the <ph id="ph1">&lt;see cref="T:System.Threading.CancellationTokenSource" /&gt;</ph> that created <ph id="ph2">&lt;paramref name="cancellationToken" /&gt;</ph> has been disposed.</source>
          <target state="translated">Объект был удален или <ph id="ph1">&lt;see cref="T:System.Threading.CancellationTokenSource" /&gt;</ph>, создавший <ph id="ph2">&lt;paramref name="cancellationToken" /&gt;</ph>, был удален.</target>       </trans-unit>
        <trans-unit id="171" translate="yes" xml:space="preserve" uid="M:System.Threading.ManualResetEventSlim.Wait(System.TimeSpan,System.Threading.CancellationToken)">
          <source>A <ph id="ph1">&lt;see cref="T:System.TimeSpan" /&gt;</ph> that represents the number of milliseconds to wait, or a <ph id="ph2">&lt;see cref="T:System.TimeSpan" /&gt;</ph> that represents -1 milliseconds to wait indefinitely.</source>
          <target state="translated">Период <ph id="ph1">&lt;see cref="T:System.TimeSpan" /&gt;</ph>, представляющий время ожидания в миллисекундах, или период <ph id="ph2">&lt;see cref="T:System.TimeSpan" /&gt;</ph>, представляющий -1 миллисекунду для неограниченного ожидания.</target>       </trans-unit>
        <trans-unit id="172" translate="yes" xml:space="preserve" uid="M:System.Threading.ManualResetEventSlim.Wait(System.TimeSpan,System.Threading.CancellationToken)">
          <source>The <ph id="ph1">&lt;see cref="T:System.Threading.CancellationToken" /&gt;</ph> to observe.</source>
          <target state="translated">Токен отмены <ph id="ph1">&lt;see cref="T:System.Threading.CancellationToken" /&gt;</ph>, который следует контролировать.</target>       </trans-unit>
        <trans-unit id="173" translate="yes" xml:space="preserve" uid="M:System.Threading.ManualResetEventSlim.Wait(System.TimeSpan,System.Threading.CancellationToken)">
          <source>Blocks the current thread until the current <ph id="ph1">&lt;see cref="T:System.Threading.ManualResetEventSlim" /&gt;</ph> is set, using a <ph id="ph2">&lt;see cref="T:System.TimeSpan" /&gt;</ph> to measure the time interval, while observing a <ph id="ph3">&lt;see cref="T:System.Threading.CancellationToken" /&gt;</ph>.</source>
          <target state="translated">Блокирует текущий поток до тех пор, пока не будет установлен текущий объект <ph id="ph1">&lt;see cref="T:System.Threading.ManualResetEventSlim" /&gt;</ph>, используя значение <ph id="ph2">&lt;see cref="T:System.TimeSpan" /&gt;</ph> для измерения интервала времени. Кроме того, метод контролирует токен <ph id="ph3">&lt;see cref="T:System.Threading.CancellationToken" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="174" translate="yes" xml:space="preserve" uid="M:System.Threading.ManualResetEventSlim.Wait(System.TimeSpan,System.Threading.CancellationToken)">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph> if the <ph id="ph2">&lt;see cref="T:System.Threading.ManualResetEventSlim" /&gt;</ph> was set; otherwise, <ph id="ph3">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated">Значение <ph id="ph1">&lt;see langword="true" /&gt;</ph>, если был задан <ph id="ph2">&lt;see cref="T:System.Threading.ManualResetEventSlim" /&gt;</ph>; в противном случае значение <ph id="ph3">&lt;see langword="false" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="175" translate="yes" xml:space="preserve" uid="M:System.Threading.ManualResetEventSlim.Wait(System.TimeSpan,System.Threading.CancellationToken)">
          <source><ph id="ph1">&lt;paramref name="cancellationToken" /&gt;</ph> was canceled.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="cancellationToken" /&gt;</ph> был отменен.</target>       </trans-unit>
        <trans-unit id="176" translate="yes" xml:space="preserve" uid="M:System.Threading.ManualResetEventSlim.Wait(System.TimeSpan,System.Threading.CancellationToken)">
          <source><ph id="ph1">&lt;paramref name="timeout" /&gt;</ph> is a negative number other than -1 milliseconds, which represents an infinite time-out.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="timeout" /&gt;</ph> является отрицательным числом, отличным от -1 миллисекунды, которое представляет неограниченное время ожидания.</target>       </trans-unit>
        <trans-unit id="177" translate="yes" xml:space="preserve" uid="M:System.Threading.ManualResetEventSlim.Wait(System.TimeSpan,System.Threading.CancellationToken)">
          <source>-or-</source>
          <target state="translated">- или -</target>       </trans-unit>
        <trans-unit id="178" translate="yes" xml:space="preserve" uid="M:System.Threading.ManualResetEventSlim.Wait(System.TimeSpan,System.Threading.CancellationToken)">
          <source>The number of milliseconds in <ph id="ph1">&lt;paramref name="timeout" /&gt;</ph> is greater than <ph id="ph2">&lt;see cref="F:System.Int32.MaxValue" /&gt;</ph>.</source>
          <target state="translated">Количество миллисекунд в <ph id="ph1">&lt;paramref name="timeout" /&gt;</ph> больше, чем значение <ph id="ph2">&lt;see cref="F:System.Int32.MaxValue" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="179" translate="yes" xml:space="preserve" uid="M:System.Threading.ManualResetEventSlim.Wait(System.TimeSpan,System.Threading.CancellationToken)">
          <source>The maximum number of waiters has been exceeded.</source>
          <target state="translated">Превышено максимально допустимое количество ожидающих.</target>       </trans-unit>
        <trans-unit id="180" translate="yes" xml:space="preserve" uid="M:System.Threading.ManualResetEventSlim.Wait(System.TimeSpan,System.Threading.CancellationToken)">
          <source>The object has already been disposed or the <ph id="ph1">&lt;see cref="T:System.Threading.CancellationTokenSource" /&gt;</ph> that created <ph id="ph2">&lt;paramref name="cancellationToken" /&gt;</ph> has been disposed.</source>
          <target state="translated">Объект был удален или <ph id="ph1">&lt;see cref="T:System.Threading.CancellationTokenSource" /&gt;</ph>, создавший <ph id="ph2">&lt;paramref name="cancellationToken" /&gt;</ph>, был удален.</target>       </trans-unit>
        <trans-unit id="181" translate="yes" xml:space="preserve" uid="P:System.Threading.ManualResetEventSlim.WaitHandle">
          <source>Gets the underlying <ph id="ph1">&lt;see cref="T:System.Threading.WaitHandle" /&gt;</ph> object for this <ph id="ph2">&lt;see cref="T:System.Threading.ManualResetEventSlim" /&gt;</ph>.</source>
          <target state="translated">Получает базовый объект <ph id="ph1">&lt;see cref="T:System.Threading.WaitHandle" /&gt;</ph> для данного объекта <ph id="ph2">&lt;see cref="T:System.Threading.ManualResetEventSlim" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="182" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Threading.ManualResetEventSlim.WaitHandle">
          <source>The underlying <ph id="ph1">&lt;see cref="T:System.Threading.WaitHandle" /&gt;</ph> event object fore this <ph id="ph2">&lt;see cref="T:System.Threading.ManualResetEventSlim" /&gt;</ph>.</source>
          <target state="translated">Базовый объект события <ph id="ph1">&lt;see cref="T:System.Threading.WaitHandle" /&gt;</ph> для данного объекта <ph id="ph2">&lt;see cref="T:System.Threading.ManualResetEventSlim" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="183" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Threading.ManualResetEventSlim.WaitHandle">
          <source>Accessing this property forces initialization of an underlying event object if one hasn't already been created.</source>
          <target state="translated">Доступ к этому свойству вызывает инициализацию базового объекта события, если оно еще не создано.</target>       </trans-unit>
        <trans-unit id="184" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Threading.ManualResetEventSlim.WaitHandle">
          <source>To simply wait on this <ph id="ph1">&lt;xref:System.Threading.ManualResetEventSlim&gt;</ph>, the public Wait methods should be preferred.</source>
          <target state="translated">Для этого просто ожидания <ph id="ph1">&lt;xref:System.Threading.ManualResetEventSlim&gt;</ph>, открытые методы ожидания должен быть предпочтительным.</target>       </trans-unit>
        <trans-unit id="185" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Threading.ManualResetEventSlim.WaitHandle">
          <source>It is recommended to dispose the <ph id="ph1">&lt;xref:System.Threading.ManualResetEventSlim&gt;</ph> instance after accessing this property, in order to prevent a resource leak.</source>
          <target state="translated">Рекомендуется удалить <ph id="ph1">&lt;xref:System.Threading.ManualResetEventSlim&gt;</ph> экземпляра после доступа к этим свойством, во избежание утечки ресурсов.</target>       </trans-unit>
      </group>
    </body>
  </file>
</xliff>