<Type Name="Monitor" FullName="System.Threading.Monitor">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="90a2111b4e95ea3ea80a469c06f7334a9e6eac2b" />
    <Meta Name="ms.sourcegitcommit" Value="5a49536d99d2d0b54e4cb7280870903e043272df" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="ru-RU" />
    <Meta Name="ms.lasthandoff" Value="07/03/2018" />
    <Meta Name="ms.locfileid" Value="37549134" />
  </Metadata>
  <TypeSignature Language="C#" Value="public static class Monitor" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi abstract sealed beforefieldinit Monitor extends System.Object" />
  <TypeSignature Language="DocId" Value="T:System.Threading.Monitor" />
  <TypeSignature Language="VB.NET" Value="Public Class Monitor" />
  <TypeSignature Language="C++ CLI" Value="public ref class Monitor abstract sealed" />
  <TypeSignature Language="F#" Value="type Monitor = class" />
  <AssemblyInfo>
    <AssemblyName>System.Threading</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.10.0</AssemblyVersion>
    <AssemblyVersion>4.1.0.0</AssemblyVersion>
    <AssemblyVersion>4.1.1.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>mscorlib</AssemblyName>
    <AssemblyVersion>1.0.5000.0</AssemblyVersion>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute>
      <AttributeName>System.Runtime.InteropServices.ComVisible(true)</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>
      <span data-ttu-id="07e1c-101">Предоставляет механизм для синхронизации доступа к объектам.</span>
      <span class="sxs-lookup">
        <span data-stu-id="07e1c-101">Provides a mechanism that synchronizes access to objects.</span>
      </span>
    </summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="07e1c-102"><xref:System.Threading.Monitor> Класс позволяет синхронизировать доступ к области кода путем установки и снятия блокировки определенного объекта путем вызова <xref:System.Threading.Monitor.Enter%2A?displayProperty=nameWithType>, <xref:System.Threading.Monitor.TryEnter%2A?displayProperty=nameWithType>, и <xref:System.Threading.Monitor.Exit%2A?displayProperty=nameWithType> методы.</span><span class="sxs-lookup"><span data-stu-id="07e1c-102">The <xref:System.Threading.Monitor> class allows you to synchronize access to a region of code by taking and releasing a lock on a particular object by calling the <xref:System.Threading.Monitor.Enter%2A?displayProperty=nameWithType>, <xref:System.Threading.Monitor.TryEnter%2A?displayProperty=nameWithType>, and <xref:System.Threading.Monitor.Exit%2A?displayProperty=nameWithType> methods.</span></span> <span data-ttu-id="07e1c-103">Объект блокировки предоставляют возможность ограничить доступ к блоку кода, обычно называется критической секции.</span><span class="sxs-lookup"><span data-stu-id="07e1c-103">Object locks provide the ability to restrict access to a block of code, commonly called a critical section.</span></span> <span data-ttu-id="07e1c-104">Хотя поток владеет блокировкой для объекта, ни один поток может получить блокировку.</span><span class="sxs-lookup"><span data-stu-id="07e1c-104">While a thread owns the lock for an object, no other thread can acquire that lock.</span></span> <span data-ttu-id="07e1c-105">Можно также использовать <xref:System.Threading.Monitor> класс, чтобы гарантировать, что ни один поток может получить доступ к части приложения код, выполняемый владельцем блокировки, пока другой поток не будет выполнять код, используя другой объект с блокировкой.</span><span class="sxs-lookup"><span data-stu-id="07e1c-105">You can also use the <xref:System.Threading.Monitor> class to ensure that no other thread is allowed to access a section of application code being executed by the lock owner, unless the other thread is executing the code using a different locked object.</span></span>  
  
 <span data-ttu-id="07e1c-106">Содержание этой статьи</span><span class="sxs-lookup"><span data-stu-id="07e1c-106">In this article:</span></span>  
  
 <span data-ttu-id="07e1c-107">[Класс Monitor: Обзор](#Overview) </span><span class="sxs-lookup"><span data-stu-id="07e1c-107">[The Monitor class: An overview](#Overview) </span></span>  
 <span data-ttu-id="07e1c-108">[Объект блокировки](#Lock) </span><span class="sxs-lookup"><span data-stu-id="07e1c-108">[The lock object](#Lock) </span></span>  
 <span data-ttu-id="07e1c-109">[Критический раздел](#CriticalSection) </span><span class="sxs-lookup"><span data-stu-id="07e1c-109">[The critical section](#CriticalSection) </span></span>  
 <span data-ttu-id="07e1c-110">[Ожидания, Pulse и PulseAll](#Pulse) </span><span class="sxs-lookup"><span data-stu-id="07e1c-110">[Pulse, PulseAll, and Wait](#Pulse) </span></span>  
 [<span data-ttu-id="07e1c-111">Мониторы и дескрипторы ожидания</span><span class="sxs-lookup"><span data-stu-id="07e1c-111">Monitors and wait handles</span></span>](#WaitHandles)  
  
<a name="Overview"></a>   
## <a name="the-monitor-class-an-overview"></a><span data-ttu-id="07e1c-112">Класс Monitor: Обзор</span><span class="sxs-lookup"><span data-stu-id="07e1c-112">The Monitor class: An overview</span></span>  
 <span data-ttu-id="07e1c-113"><xref:System.Threading.Monitor> обладает следующими функциями:</span><span class="sxs-lookup"><span data-stu-id="07e1c-113"><xref:System.Threading.Monitor> has the following features:</span></span>  
  
-   <span data-ttu-id="07e1c-114">Он связан с объектом по требованию.</span><span class="sxs-lookup"><span data-stu-id="07e1c-114">It is associated with an object on demand.</span></span>  
  
-   <span data-ttu-id="07e1c-115">Отменяется, то есть могут вызываться непосредственно из любого контекста.</span><span class="sxs-lookup"><span data-stu-id="07e1c-115">It is unbound, which means it can be called directly from any context.</span></span>  
  
-   <span data-ttu-id="07e1c-116">Экземпляр <xref:System.Threading.Monitor> класс не может быть создан; методы <xref:System.Threading.Monitor> класса являются статическими.</span><span class="sxs-lookup"><span data-stu-id="07e1c-116">An instance of the <xref:System.Threading.Monitor> class cannot be created; the methods of the <xref:System.Threading.Monitor> class are all static.</span></span> <span data-ttu-id="07e1c-117">Каждый метод передается синхронизированный объект, который управляет доступом к критической секции.</span><span class="sxs-lookup"><span data-stu-id="07e1c-117">Each method is passed the synchronized object that controls access to the critical section.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="07e1c-118">Используйте <xref:System.Threading.Monitor> класс для блокировки объектов, отличных от строк (то есть ссылочные типы, отличные от <xref:System.String>), не типы значений.</span><span class="sxs-lookup"><span data-stu-id="07e1c-118">Use the <xref:System.Threading.Monitor> class to lock objects other than strings (that is, reference types other than <xref:System.String>), not value types.</span></span> <span data-ttu-id="07e1c-119">Дополнительные сведения см. в разделе перегрузок <xref:System.Threading.Monitor.Enter%2A> метод и [объект блокировки](#Lock) разделе этой статьи.</span><span class="sxs-lookup"><span data-stu-id="07e1c-119">For details, see the overloads of the <xref:System.Threading.Monitor.Enter%2A> method and [The lock object](#Lock) section later in this article.</span></span>  
  
 <span data-ttu-id="07e1c-120">В следующей таблице описаны действия, которые может быть занят потоков, которые обращаются к Синхронизируемые объекты:</span><span class="sxs-lookup"><span data-stu-id="07e1c-120">The following table describes the actions that can be taken by threads that access synchronized objects:</span></span>  
  
|<span data-ttu-id="07e1c-121">Действие</span><span class="sxs-lookup"><span data-stu-id="07e1c-121">Action</span></span>|<span data-ttu-id="07e1c-122">Описание:</span><span class="sxs-lookup"><span data-stu-id="07e1c-122">Description</span></span>|  
|------------|-----------------|  
|<span data-ttu-id="07e1c-123"><xref:System.Threading.Monitor.Enter%2A>, <xref:System.Threading.Monitor.TryEnter%2A></span><span class="sxs-lookup"><span data-stu-id="07e1c-123"><xref:System.Threading.Monitor.Enter%2A>, <xref:System.Threading.Monitor.TryEnter%2A></span></span>|<span data-ttu-id="07e1c-124">Получает блокировку для объекта.</span><span class="sxs-lookup"><span data-stu-id="07e1c-124">Acquires a lock for an object.</span></span> <span data-ttu-id="07e1c-125">Это действие также отмечает начало критической секции.</span><span class="sxs-lookup"><span data-stu-id="07e1c-125">This action also marks the beginning of a critical section.</span></span> <span data-ttu-id="07e1c-126">Ни один поток может входить в критический раздел, если он выполняет инструкции в критической секции, используя другой объект с блокировкой.</span><span class="sxs-lookup"><span data-stu-id="07e1c-126">No other thread can enter the critical section unless it is executing the instructions in the critical section using a different locked object.</span></span>|  
|<xref:System.Threading.Monitor.Wait%2A>|<span data-ttu-id="07e1c-127">Освобождает блокировку объекта, чтобы разрешить другим потокам для блокировки и доступа к объекту.</span><span class="sxs-lookup"><span data-stu-id="07e1c-127">Releases the lock on an object in order to permit other threads to lock and access the object.</span></span> <span data-ttu-id="07e1c-128">Вызывающий поток ожидает, пока другой поток обращается к объекту.</span><span class="sxs-lookup"><span data-stu-id="07e1c-128">The calling thread waits while another thread accesses the object.</span></span> <span data-ttu-id="07e1c-129">Сигналы Pulse используются для уведомления об изменении состояния объекта, для потоков в состоянии ожидания.</span><span class="sxs-lookup"><span data-stu-id="07e1c-129">Pulse signals are used to notify waiting threads about changes to an object's state.</span></span>|  
|<span data-ttu-id="07e1c-130"><xref:System.Threading.Monitor.Pulse%2A> (сигнал), <xref:System.Threading.Monitor.PulseAll%2A></span><span class="sxs-lookup"><span data-stu-id="07e1c-130"><xref:System.Threading.Monitor.Pulse%2A> (signal), <xref:System.Threading.Monitor.PulseAll%2A></span></span>|<span data-ttu-id="07e1c-131">Отправляет сигнал к одной или нескольким ожидающим потокам.</span><span class="sxs-lookup"><span data-stu-id="07e1c-131">Sends a signal to one or more waiting threads.</span></span> <span data-ttu-id="07e1c-132">Сигнал уведомляет ожидающий поток, изменения состояния объекта с блокировкой, и владелец блокировки готов для снятия блокировки.</span><span class="sxs-lookup"><span data-stu-id="07e1c-132">The signal notifies a waiting thread that the state of the locked object has changed, and the owner of the lock is ready to release the lock.</span></span> <span data-ttu-id="07e1c-133">Ожидающий поток помещается в очередь готовности объекта таким образом, он может в конечном счете получить блокировку для объекта.</span><span class="sxs-lookup"><span data-stu-id="07e1c-133">The waiting thread is placed in the object's ready queue so that it might eventually receive the lock for the object.</span></span> <span data-ttu-id="07e1c-134">Когда поток получает блокировку, его можно проверить новое состояние объекта см. в разделе, если был достигнут требуемое состояние.</span><span class="sxs-lookup"><span data-stu-id="07e1c-134">Once the thread has the lock, it can check the new state of the object to see if the required state has been reached.</span></span>|  
|<xref:System.Threading.Monitor.Exit%2A>|<span data-ttu-id="07e1c-135">Освобождает блокировку объекта.</span><span class="sxs-lookup"><span data-stu-id="07e1c-135">Releases the lock on an object.</span></span> <span data-ttu-id="07e1c-136">Это действие также отмечает конец критической секции, защищенной объектом с блокировкой.</span><span class="sxs-lookup"><span data-stu-id="07e1c-136">This action also marks the end of a critical section protected by the locked object.</span></span>|  
  
 <span data-ttu-id="07e1c-137">Начиная с версии [!INCLUDE[net_v40_long](~/includes/net-v40-long-md.md)], существует два набора из перегрузок для <xref:System.Threading.Monitor.Enter%2A> и <xref:System.Threading.Monitor.TryEnter%2A> методы.</span><span class="sxs-lookup"><span data-stu-id="07e1c-137">Beginning with the [!INCLUDE[net_v40_long](~/includes/net-v40-long-md.md)], there are two sets of overloads for the <xref:System.Threading.Monitor.Enter%2A> and <xref:System.Threading.Monitor.TryEnter%2A> methods.</span></span> <span data-ttu-id="07e1c-138">Имеет один набор перегрузок `ref` (в C#) или `ByRef` (в Visual Basic) <xref:System.Boolean> параметр, который автоматически устанавливается как `true` Если блокировки, даже если возникает исключение при получении блокировки.</span><span class="sxs-lookup"><span data-stu-id="07e1c-138">One set of overloads has a `ref` (in C#) or `ByRef` (in Visual Basic) <xref:System.Boolean> parameter that is atomically set to `true` if the lock is acquired, even if an exception is thrown when acquiring the lock.</span></span> <span data-ttu-id="07e1c-139">Используйте эти перегрузки, если крайне важно для снятия блокировки во всех случаях, даже в том случае, если ресурсы, которые защита блокировки может оказаться в несогласованном состоянии.</span><span class="sxs-lookup"><span data-stu-id="07e1c-139">Use these overloads if it is critical to release the lock in all cases, even when the resources the lock is protecting might not be in a consistent state.</span></span>  
  
<a name="Lock"></a>   
## <a name="the-lock-object"></a><span data-ttu-id="07e1c-140">Объект блокировки</span><span class="sxs-lookup"><span data-stu-id="07e1c-140">The lock object</span></span>  
 <span data-ttu-id="07e1c-141">Класс Monitor состоит из `static` (в C#) или `Shared` (в Visual Basic) методы, которые работают на объект, который управляет доступом к критической секции.</span><span class="sxs-lookup"><span data-stu-id="07e1c-141">The Monitor class consists of `static` (in C#) or  `Shared` (in Visual Basic) methods that operate on an object that controls access to the critical section.</span></span>  <span data-ttu-id="07e1c-142">Для каждого синхронизированного объекта сохраняется следующие сведения:</span><span class="sxs-lookup"><span data-stu-id="07e1c-142">The following information is maintained for each synchronized object:</span></span>  
  
-   <span data-ttu-id="07e1c-143">Ссылка на поток, удерживающий блокировку в настоящее время.</span><span class="sxs-lookup"><span data-stu-id="07e1c-143">A reference to the thread that currently holds the lock.</span></span>  
  
-   <span data-ttu-id="07e1c-144">Ссылка на очередь готовности, в которой находятся потоки, готовые к получению блокировки.</span><span class="sxs-lookup"><span data-stu-id="07e1c-144">A reference to a ready queue, which contains the threads that are ready to obtain the lock.</span></span>  
  
-   <span data-ttu-id="07e1c-145">Ссылка на очередь ожидания, в которой находятся потоки, ожидающие получать уведомления об изменении состояния объекта с блокировкой.</span><span class="sxs-lookup"><span data-stu-id="07e1c-145">A reference to a waiting queue, which contains the threads that are waiting for notification of a change in the state of the locked object.</span></span>  
  
 <span data-ttu-id="07e1c-146"><xref:System.Threading.Monitor> блокирует объекты (то есть ссылочные типы), а не типы значений.</span><span class="sxs-lookup"><span data-stu-id="07e1c-146"><xref:System.Threading.Monitor> locks objects (that is, reference types), not value types.</span></span> <span data-ttu-id="07e1c-147">Хотя можно передать тип значения в <xref:System.Threading.Monitor.Enter%2A> и <xref:System.Threading.Monitor.Exit%2A>, он упаковывается отдельно для каждого вызова.</span><span class="sxs-lookup"><span data-stu-id="07e1c-147">While you can pass a value type to <xref:System.Threading.Monitor.Enter%2A> and <xref:System.Threading.Monitor.Exit%2A>, it is boxed separately for each call.</span></span> <span data-ttu-id="07e1c-148">Поскольку при каждом вызове создается отдельный объект, <xref:System.Threading.Monitor.Enter%2A> никогда не выполняет блокировку, а код, который он предположительно защищает, на самом деле не синхронизируется.</span><span class="sxs-lookup"><span data-stu-id="07e1c-148">Since each call creates a separate object, <xref:System.Threading.Monitor.Enter%2A> never blocks, and the code it is supposedly protecting is not really synchronized.</span></span> <span data-ttu-id="07e1c-149">Кроме того, объект, переданный в <xref:System.Threading.Monitor.Exit%2A>, отличается от объекта, переданного в <xref:System.Threading.Monitor.Enter%2A>, поэтому <xref:System.Threading.Monitor> вызывает исключение <xref:System.Threading.SynchronizationLockException> с сообщением «Для не синхронизированного блока кода вызван метод синхронизации объектов».</span><span class="sxs-lookup"><span data-stu-id="07e1c-149">In addition, the object passed to <xref:System.Threading.Monitor.Exit%2A> is different from the object passed to <xref:System.Threading.Monitor.Enter%2A>, so <xref:System.Threading.Monitor> throws <xref:System.Threading.SynchronizationLockException> exception with the message "Object synchronization method was called from an unsynchronized block of code."</span></span>  
  
 <span data-ttu-id="07e1c-150">Приведенный ниже пример иллюстрирует данную проблему.</span><span class="sxs-lookup"><span data-stu-id="07e1c-150">The following example illustrates this problem.</span></span> <span data-ttu-id="07e1c-151">Он запускает десять задач, каждая из которых просто бездействует в течение 250 миллисекунд.</span><span class="sxs-lookup"><span data-stu-id="07e1c-151">It launches ten tasks, each of which just sleeps for 250 milliseconds.</span></span> <span data-ttu-id="07e1c-152">Затем каждая задача обновляет переменную счетчика `nTasks`, который предназначен для подсчета количества фактически запущенных и выполненных задач.</span><span class="sxs-lookup"><span data-stu-id="07e1c-152">Each task then updates a counter variable, `nTasks`, which is intended to count the number of tasks that actually launched and executed.</span></span> <span data-ttu-id="07e1c-153">Поскольку `nTasks` является глобальной переменной, которая может обновляться несколькими задачами одновременно, используется монитор, защищающий ее от одновременного изменения несколькими задачами.</span><span class="sxs-lookup"><span data-stu-id="07e1c-153">Because `nTasks` is a global variable that can be updated by multiple tasks simultaneously, a monitor is used to protect it from simultaneous modification by multiple tasks.</span></span> <span data-ttu-id="07e1c-154">Тем не менее, как показывают выходные данные в примере, каждая из задач вызывает исключение <xref:System.Threading.SynchronizationLockException>.</span><span class="sxs-lookup"><span data-stu-id="07e1c-154">However, as the output from the example shows, each of the tasks throws a <xref:System.Threading.SynchronizationLockException> exception.</span></span>  
  
 [!code-csharp[Conceptual.Monitors#2](~/samples/snippets/csharp/VS_Snippets_CLR/conceptual.monitors/cs/badlock1.cs#2)]
 [!code-vb[Conceptual.Monitors#2](~/samples/snippets/visualbasic/VS_Snippets_CLR/conceptual.monitors/vb/badlock1.vb#2)]  
  
 <span data-ttu-id="07e1c-155">Каждая задача вызывает исключение <xref:System.Threading.SynchronizationLockException> из-за того, что переменная `nTasks` упаковывается перед вызовом метода <xref:System.Threading.Monitor.Enter%2A?displayProperty=nameWithType> в каждой задаче.</span><span class="sxs-lookup"><span data-stu-id="07e1c-155">Each task throws a <xref:System.Threading.SynchronizationLockException> exception because the `nTasks` variable is boxed before the call to the <xref:System.Threading.Monitor.Enter%2A?displayProperty=nameWithType> method in each task.</span></span> <span data-ttu-id="07e1c-156">Другими словами, в каждый вызов метода передается отдельная переменная, которая независима от остальных.</span><span class="sxs-lookup"><span data-stu-id="07e1c-156">In other words, each method call is passed a separate variable that is independent of the others.</span></span> <span data-ttu-id="07e1c-157">`nTasks` снова упаковывается в вызове метода <xref:System.Threading.Monitor.Exit%2A?displayProperty=nameWithType>.</span><span class="sxs-lookup"><span data-stu-id="07e1c-157">`nTasks` is boxed again in the call to the <xref:System.Threading.Monitor.Exit%2A?displayProperty=nameWithType> method.</span></span> <span data-ttu-id="07e1c-158">И снова при этом создается десять новых упакованных переменных, которые не зависят друг от друга, `nTasks`, и десять упакованных переменных, созданных при вызове метода <xref:System.Threading.Monitor.Enter%2A?displayProperty=nameWithType>.</span><span class="sxs-lookup"><span data-stu-id="07e1c-158">Once again, this creates ten new boxed variables, which are independent of each other, `nTasks`, and the ten boxed variables created in the call to the <xref:System.Threading.Monitor.Enter%2A?displayProperty=nameWithType> method.</span></span> <span data-ttu-id="07e1c-159">Затем вызывается исключение, поскольку наш код пытается снять блокировку для вновь созданной переменной, которая ранее не была заблокирована.</span><span class="sxs-lookup"><span data-stu-id="07e1c-159">The exception is thrown, then, because our code is attempting to release a lock on a newly created variable that was not previously locked.</span></span>  
  
 <span data-ttu-id="07e1c-160">Хотя можно упаковать переменную типа значения перед вызовом <xref:System.Threading.Monitor.Enter%2A> и <xref:System.Threading.Monitor.Exit%2A>, как показано в следующем примере, и передать тот же упакованный объект в оба метода, такой подход не дает никаких преимуществ.</span><span class="sxs-lookup"><span data-stu-id="07e1c-160">Although you can box a value type variable before calling <xref:System.Threading.Monitor.Enter%2A> and <xref:System.Threading.Monitor.Exit%2A>, as shown in the following example, and pass the same boxed object to both methods, there is no advantage to doing this.</span></span> <span data-ttu-id="07e1c-161">Изменения неупакованной переменной не отражаются в упакованной копии, и возможность изменения значения упакованной копии отсутствует.</span><span class="sxs-lookup"><span data-stu-id="07e1c-161">Changes to the unboxed variable are not reflected in the boxed copy, and there is no way to change the value of the boxed copy.</span></span>  
  
 [!code-csharp[Conceptual.Monitors#3](~/samples/snippets/csharp/VS_Snippets_CLR/conceptual.monitors/cs/badbox1.cs#3)]
 [!code-vb[Conceptual.Monitors#3](~/samples/snippets/visualbasic/VS_Snippets_CLR/conceptual.monitors/vb/badbox1.vb#3)]  
  
 <span data-ttu-id="07e1c-162">При выборе объекта для синхронизации, вы должны блокировать только закрытые или внутренние объекты.</span><span class="sxs-lookup"><span data-stu-id="07e1c-162">When selecting an object on which to synchronize, you should lock only on private or internal objects.</span></span> <span data-ttu-id="07e1c-163">Блокировки внешних объектов может привести к взаимоблокировок, так как несвязанный код может выбрать те же объекты блокировки для разных целей.</span><span class="sxs-lookup"><span data-stu-id="07e1c-163">Locking on external objects might result in deadlocks, because unrelated code could choose the same objects to lock on for different purposes.</span></span>  
  
 <span data-ttu-id="07e1c-164">Обратите внимание, что вы можете синхронизировать объекта в нескольких доменах приложений, если объект, используемый для блокировки является производным от <xref:System.MarshalByRefObject>.</span><span class="sxs-lookup"><span data-stu-id="07e1c-164">Note that you can synchronize on an object in multiple application domains if the object used for the lock derives from <xref:System.MarshalByRefObject>.</span></span>  
  
<a name="CriticalSection"></a>   
## <a name="the-critical-section"></a><span data-ttu-id="07e1c-165">Критический раздел</span><span class="sxs-lookup"><span data-stu-id="07e1c-165">The critical section</span></span>  
 <span data-ttu-id="07e1c-166">Используйте <xref:System.Threading.Monitor.Enter%2A> и <xref:System.Threading.Monitor.Exit%2A> методов, чтобы пометить начало и конец критической секции.</span><span class="sxs-lookup"><span data-stu-id="07e1c-166">Use the <xref:System.Threading.Monitor.Enter%2A> and <xref:System.Threading.Monitor.Exit%2A> methods to mark the beginning and end of a critical section.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="07e1c-167">Функциональные возможности, предоставляемые <xref:System.Threading.Monitor.Enter%2A> и <xref:System.Threading.Monitor.Exit%2A> методы будут идентичны данным, предоставляемые [блокировки](~/docs/csharp/language-reference/keywords/lock-statement.md) инструкции на языке C# и [SyncLock](~/docs/visual-basic/language-reference/statements/synclock-statement.md) инструкции в Visual Basic, за исключением случаев, языковые конструкции wrap <xref:System.Threading.Monitor.Enter%28System.Object%2CSystem.Boolean%40%29?displayProperty=nameWithType> перегрузку метода и <xref:System.Threading.Monitor.Exit%2A?displayProperty=nameWithType> метод в `try`...`finally`</span><span class="sxs-lookup"><span data-stu-id="07e1c-167">The functionality provided by the <xref:System.Threading.Monitor.Enter%2A> and <xref:System.Threading.Monitor.Exit%2A> methods is identical to that provided by the [lock](~/docs/csharp/language-reference/keywords/lock-statement.md) statement in C# and the [SyncLock](~/docs/visual-basic/language-reference/statements/synclock-statement.md) statement in Visual Basic, except that the language constructs wrap the <xref:System.Threading.Monitor.Enter%28System.Object%2CSystem.Boolean%40%29?displayProperty=nameWithType> method overload and the <xref:System.Threading.Monitor.Exit%2A?displayProperty=nameWithType> method in a `try`…`finally`</span></span> <span data-ttu-id="07e1c-168">блок, чтобы высвободить монитор.</span><span class="sxs-lookup"><span data-stu-id="07e1c-168">block to ensure that the monitor is released.</span></span>  
  
 <span data-ttu-id="07e1c-169">Если критический раздел представляет собой набор смежных инструкции, то блокировка, введенная оператором <xref:System.Threading.Monitor.Enter%2A> метод гарантирует, что только один поток может выполнять вложенный код с заблокированного объекта.</span><span class="sxs-lookup"><span data-stu-id="07e1c-169">If the critical section is a set of contiguous instructions, then the lock acquired by the <xref:System.Threading.Monitor.Enter%2A> method guarantees that only a single thread can execute the enclosed code with the locked object.</span></span> <span data-ttu-id="07e1c-170">В этом случае мы рекомендуем поместить этот код в `try` блокировку и вызвать <xref:System.Threading.Monitor.Exit%2A> метод в `finally` блока.</span><span class="sxs-lookup"><span data-stu-id="07e1c-170">In this case, we recommend that you place that code in a `try` block and place the call to the <xref:System.Threading.Monitor.Exit%2A> method in a `finally` block.</span></span> <span data-ttu-id="07e1c-171">Это гарантирует снятие блокировки даже при возникновении исключения.</span><span class="sxs-lookup"><span data-stu-id="07e1c-171">This ensures that the lock is released even if an exception occurs.</span></span> <span data-ttu-id="07e1c-172">В следующем фрагменте кода показана схема работы.</span><span class="sxs-lookup"><span data-stu-id="07e1c-172">The following code fragment illustrates this pattern.</span></span>  
  
 [!code-csharp[System.Threading.Monitor.Class#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.threading.monitor.class/cs/Pattern2.cs#2)]
 [!code-vb[System.Threading.Monitor.Class#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.threading.monitor.class/vb/Pattern2.vb#2)]  
  
 <span data-ttu-id="07e1c-173">Это средство обычно используется для синхронизации доступа к статический метод или метод экземпляра класса.</span><span class="sxs-lookup"><span data-stu-id="07e1c-173">This facility is typically used to synchronize access to a static or instance method of a class.</span></span>  
  
 <span data-ttu-id="07e1c-174">Если критический раздел охватывает весь метод, средство блокировки можно сделать, поместив <xref:System.Runtime.CompilerServices.MethodImplAttribute?displayProperty=nameWithType> на метод, с указанием <xref:System.Runtime.CompilerServices.MethodImplOptions.Synchronized> значение в конструкторе класса <xref:System.Runtime.CompilerServices.MethodImplAttribute?displayProperty=nameWithType>.</span><span class="sxs-lookup"><span data-stu-id="07e1c-174">If a critical section spans an entire method, the locking facility can be achieved by placing the <xref:System.Runtime.CompilerServices.MethodImplAttribute?displayProperty=nameWithType> on the method, and specifying the <xref:System.Runtime.CompilerServices.MethodImplOptions.Synchronized> value in the constructor of <xref:System.Runtime.CompilerServices.MethodImplAttribute?displayProperty=nameWithType>.</span></span> <span data-ttu-id="07e1c-175">При использовании этого атрибута <xref:System.Threading.Monitor.Enter%2A> и <xref:System.Threading.Monitor.Exit%2A> вызовы методов не требуются.</span><span class="sxs-lookup"><span data-stu-id="07e1c-175">When you use this attribute, the <xref:System.Threading.Monitor.Enter%2A> and <xref:System.Threading.Monitor.Exit%2A> method calls are not needed.</span></span> <span data-ttu-id="07e1c-176">В следующем фрагменте кода показан этот шаблон:</span><span class="sxs-lookup"><span data-stu-id="07e1c-176">The following code fragment illustrates this pattern:</span></span>  
  
 [!code-csharp[System.Threading.Monitor.Class#3](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.threading.monitor.class/cs/Pattern2.cs#3)]
 [!code-vb[System.Threading.Monitor.Class#3](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.threading.monitor.class/vb/Pattern2.vb#3)]  
  
 <span data-ttu-id="07e1c-177">Обратите внимание на то, что данный атрибут приводит текущий поток удерживает блокировку до выполнения метода; Если блокировка может быть освобождена раньше, использовать <xref:System.Threading.Monitor> класса C# [блокировки](~/docs/csharp/language-reference/keywords/lock-statement.md) инструкции или Visual Basic [SyncLock](~/docs/visual-basic/language-reference/statements/synclock-statement.md) оператора в методе вместо атрибута.</span><span class="sxs-lookup"><span data-stu-id="07e1c-177">Note that the attribute causes the current thread to hold the lock until the method returns; if the lock can be released sooner, use the <xref:System.Threading.Monitor> class, the C# [lock](~/docs/csharp/language-reference/keywords/lock-statement.md) statement, or the Visual Basic [SyncLock](~/docs/visual-basic/language-reference/statements/synclock-statement.md) statement inside of the method instead of the attribute.</span></span>  
  
 <span data-ttu-id="07e1c-178">Хотя для <xref:System.Threading.Monitor.Enter%2A> и <xref:System.Threading.Monitor.Exit%2A> инструкций, блокировать и освободить объект заданного пересекать члена или границы класса или оба, это не рекомендуется.</span><span class="sxs-lookup"><span data-stu-id="07e1c-178">While it is possible for the <xref:System.Threading.Monitor.Enter%2A> and <xref:System.Threading.Monitor.Exit%2A> statements that lock and release a given object to cross member or class boundaries or both, this practice is not recommended.</span></span>  
  
<a name="Pulse"></a>   
## <a name="pulse-pulseall-and-wait"></a><span data-ttu-id="07e1c-179">Ожидания, Pulse и PulseAll</span><span class="sxs-lookup"><span data-stu-id="07e1c-179">Pulse, PulseAll, and Wait</span></span>  
 <span data-ttu-id="07e1c-180">Как только поток владеет блокировкой и он перешел критический раздел, который защищает блокировки, оно может вызвать <xref:System.Threading.Monitor.Wait%2A?displayProperty=nameWithType>, <xref:System.Threading.Monitor.Pulse%2A?displayProperty=nameWithType>, и <xref:System.Threading.Monitor.PulseAll%2A?displayProperty=nameWithType> методы.</span><span class="sxs-lookup"><span data-stu-id="07e1c-180">Once a thread owns the lock and has entered the critical section that the lock protects, it can call the <xref:System.Threading.Monitor.Wait%2A?displayProperty=nameWithType>, <xref:System.Threading.Monitor.Pulse%2A?displayProperty=nameWithType>, and <xref:System.Threading.Monitor.PulseAll%2A?displayProperty=nameWithType> methods.</span></span>  
  
 <span data-ttu-id="07e1c-181"><xref:System.Threading.Monitor.Wait%2A> снимает блокировку, если она является, ожидающий поток или потоков, чтобы получить блокировку и войдет в критический раздел и ожидает уведомления с помощью вызова <xref:System.Threading.Monitor.Pulse%2A?displayProperty=nameWithType> или <xref:System.Threading.Monitor.PulseAll%2A?displayProperty=nameWithType> метод.</span><span class="sxs-lookup"><span data-stu-id="07e1c-181"><xref:System.Threading.Monitor.Wait%2A> releases the lock if it is held, allows a waiting thread or threads to obtain the lock and enter the critical section,   and waits to be notified by a call to the <xref:System.Threading.Monitor.Pulse%2A?displayProperty=nameWithType> or <xref:System.Threading.Monitor.PulseAll%2A?displayProperty=nameWithType> method.</span></span> <span data-ttu-id="07e1c-182">Когда <xref:System.Threading.Monitor.Wait%2A> уведомляется, он возвращает значение и снова получает блокировку.</span><span class="sxs-lookup"><span data-stu-id="07e1c-182">When <xref:System.Threading.Monitor.Wait%2A> is notified, it returns and obtains the lock again.</span></span>  
  
 <span data-ttu-id="07e1c-183">Как <xref:System.Threading.Monitor.Pulse%2A>, так и <xref:System.Threading.Monitor.PulseAll%2A> сигнализируют следующему потоку в очереди ожидания о том, что можно продолжать работу.</span><span class="sxs-lookup"><span data-stu-id="07e1c-183">Both <xref:System.Threading.Monitor.Pulse%2A> and <xref:System.Threading.Monitor.PulseAll%2A> signal for the next thread in the wait queue to proceed.</span></span>  
  
<a name="WaitHandles"></a>   
## <a name="monitors-and-wait-handles"></a><span data-ttu-id="07e1c-184">Мониторы и дескрипторы ожидания</span><span class="sxs-lookup"><span data-stu-id="07e1c-184">Monitors and wait handles</span></span>  
 <span data-ttu-id="07e1c-185">Важно отметить различия между использованием <xref:System.Threading.Monitor> класс и <xref:System.Threading.WaitHandle> объектов.</span><span class="sxs-lookup"><span data-stu-id="07e1c-185">It is important to note the distinction between the use of the <xref:System.Threading.Monitor> class and <xref:System.Threading.WaitHandle> objects.</span></span>  
  
-   <span data-ttu-id="07e1c-186"><xref:System.Threading.Monitor> Класс полностью управляемые и полностью переносимые и может оказаться эффективнее с точки зрения требований к ресурсам операционной системы.</span><span class="sxs-lookup"><span data-stu-id="07e1c-186">The <xref:System.Threading.Monitor> class is purely managed, fully portable, and might be more efficient in terms of operating-system resource requirements.</span></span>  
  
-   <span data-ttu-id="07e1c-187">Объекты <xref:System.Threading.WaitHandle> представляют объекты ожидания операционной системы, удобны для синхронизации между управляемым и неуправляемым кодом и предоставляют некоторые расширенные функции операционной системы, например возможность ожидания сразу нескольких объектов.</span><span class="sxs-lookup"><span data-stu-id="07e1c-187"><xref:System.Threading.WaitHandle> objects represent operating-system waitable objects, are useful for synchronizing between managed and unmanaged code, and expose some advanced operating-system features like the ability to wait on many objects at once.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="07e1c-188">В следующем примере используется <xref:System.Threading.Monitor> класс для синхронизации доступа к один экземпляр генератора случайных чисел, представленный <xref:System.Random> класса.</span><span class="sxs-lookup"><span data-stu-id="07e1c-188">The following example uses the <xref:System.Threading.Monitor> class to synchronize access to a single instance of a random number generator represented by the <xref:System.Random> class.</span></span> <span data-ttu-id="07e1c-189">В примере создается десять задач, каждая из которых выполняется асинхронно в потоке пула потоков.</span><span class="sxs-lookup"><span data-stu-id="07e1c-189">The example creates ten tasks, each of which executes asynchronously on a thread pool thread.</span></span> <span data-ttu-id="07e1c-190">Каждая задача создает 10 000 случайных чисел, вычисляет их среднее значение и обновляет две переменные на уровне процедуры, поддержки, общее количество случайных чисел и их сумму.</span><span class="sxs-lookup"><span data-stu-id="07e1c-190">Each task generates 10,000 random numbers, calculates their average, and updates two procedure-level variables that maintain a running total of the number of random numbers generated and their sum.</span></span> <span data-ttu-id="07e1c-191">После выполнения всех задач, эти два значения затем используются для вычисления общей среднее значение.</span><span class="sxs-lookup"><span data-stu-id="07e1c-191">After all tasks have executed, these two values are then used to calculate the overall mean.</span></span>  
  
 [!code-csharp[System.Threading.Monitor.Class#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.threading.monitor.class/cs/example1.cs#1)]
 [!code-vb[System.Threading.Monitor.Class#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.threading.monitor.class/vb/example1.vb#1)]  
  
 <span data-ttu-id="07e1c-192">Они могут получать доступ из любой задачи, выполняемой в потоке пула потоков, доступ к переменным `total` и `n` также должна быть синхронизирована.</span><span class="sxs-lookup"><span data-stu-id="07e1c-192">Because they can be accessed from any task running on a thread pool thread, access to the variables `total` and `n` must also be synchronized.</span></span> <span data-ttu-id="07e1c-193"><xref:System.Threading.Interlocked.Add%2A?displayProperty=nameWithType> Метод используется для этой цели.</span><span class="sxs-lookup"><span data-stu-id="07e1c-193">The <xref:System.Threading.Interlocked.Add%2A?displayProperty=nameWithType> method is used for this purpose.</span></span>  
  
 <span data-ttu-id="07e1c-194">В следующем примере показано совместное использование <xref:System.Threading.Monitor> класс (реализуется с помощью `lock` или `SyncLock` языковой конструкции), <xref:System.Threading.Interlocked> класса и <xref:System.Threading.AutoResetEvent> класса.</span><span class="sxs-lookup"><span data-stu-id="07e1c-194">The following example demonstrates the combined use of the <xref:System.Threading.Monitor> class (implemented with the `lock` or `SyncLock` language construct), the <xref:System.Threading.Interlocked> class, and the <xref:System.Threading.AutoResetEvent> class.</span></span> <span data-ttu-id="07e1c-195">Он определяет два `internal` (в C#) или `Friend` (в Visual Basic) классы, `SyncResource` и `UnSyncResource`, которые соответственно предоставляют синхронизированный и несинхронизированный доступ к ресурсу.</span><span class="sxs-lookup"><span data-stu-id="07e1c-195">It defines two `internal` (in C#) or `Friend` (in Visual Basic) classes, `SyncResource` and `UnSyncResource`, that respectively provide synchronized and unsynchronized access to a resource.</span></span> <span data-ttu-id="07e1c-196">Чтобы убедиться, что в примере показано различие между синхронизированным и несинхронизированным доступом (что может случиться, если каждый вызов метода завершается быстро), метод включает случайную задержку: для потоки, в которых <xref:System.Threading.Thread.ManagedThreadId%2A?displayProperty=nameWithType> свойство является четным, вызовы метода <xref:System.Threading.Thread.Sleep%2A?displayProperty=nameWithType> для введения задержки в 2 000 миллисекунд.</span><span class="sxs-lookup"><span data-stu-id="07e1c-196">To ensure that the example illustrates the difference between the synchronized and unsynchronized access (which could be the case if each method call completes rapidly), the method includes a random delay: for threads whose <xref:System.Threading.Thread.ManagedThreadId%2A?displayProperty=nameWithType> property is even, the method calls <xref:System.Threading.Thread.Sleep%2A?displayProperty=nameWithType> to introduce a delay of 2,000 milliseconds.</span></span> <span data-ttu-id="07e1c-197">Обратите внимание, что, поскольку `SyncResource` класс не является общим, ни один из клиентского кода принимает блокировку в синхронизированном ресурсе; внутренний класс сам устанавливает блокировку.</span><span class="sxs-lookup"><span data-stu-id="07e1c-197">Note that, because the `SyncResource` class is not public, none of the client code takes a lock on the synchronized resource; the internal class itself takes the lock.</span></span> <span data-ttu-id="07e1c-198">Это предотвращает блокировка общедоступного объекта вредоносным кодом.</span><span class="sxs-lookup"><span data-stu-id="07e1c-198">This prevents malicious code from taking a lock on a public object.</span></span>  
  
 [!code-csharp[Conceptual.Monitors#1](~/samples/snippets/csharp/VS_Snippets_CLR/conceptual.monitors/cs/source.cs#1)]
 [!code-vb[Conceptual.Monitors#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/conceptual.monitors/vb/source.vb#1)]  
  
 <span data-ttu-id="07e1c-199">В примере определяется переменная, `numOps`, которое определяет число потоков, которые будут пытаться получить доступ к ресурсу.</span><span class="sxs-lookup"><span data-stu-id="07e1c-199">The example defines a variable, `numOps`, that defines the number of threads that will attempt to access the resource.</span></span> <span data-ttu-id="07e1c-200">Поток приложения вызывает <xref:System.Threading.ThreadPool.QueueUserWorkItem%28System.Threading.WaitCallback%29?displayProperty=nameWithType> метод для синхронизированного и несинхронизированного доступа по пять раз.</span><span class="sxs-lookup"><span data-stu-id="07e1c-200">The application thread calls the <xref:System.Threading.ThreadPool.QueueUserWorkItem%28System.Threading.WaitCallback%29?displayProperty=nameWithType> method for synchronized and unsynchronized access five times each.</span></span> <span data-ttu-id="07e1c-201"><xref:System.Threading.ThreadPool.QueueUserWorkItem%28System.Threading.WaitCallback%29?displayProperty=nameWithType> Метод имеет один параметр, делегат, который не принимает никаких параметров и не возвращает значений.</span><span class="sxs-lookup"><span data-stu-id="07e1c-201">The <xref:System.Threading.ThreadPool.QueueUserWorkItem%28System.Threading.WaitCallback%29?displayProperty=nameWithType> method has a single parameter, a delegate that accepts no parameters and returns no value.</span></span> <span data-ttu-id="07e1c-202">Для синхронизированного доступа он вызывает `SyncUpdateResource` метода; для несинхронизированного доступа он вызывает `UnSyncUpdateResource` метод.</span><span class="sxs-lookup"><span data-stu-id="07e1c-202">For synchronized access, it invokes the `SyncUpdateResource` method; for unsynchronized access, it invokes the `UnSyncUpdateResource` method.</span></span> <span data-ttu-id="07e1c-203">После каждого ряда вызовов метода поток приложения вызывает [AutoResetEvent.WaitOne](xref:System.Threading.WaitHandle.WaitOne*) метода, так что он блокируется до <xref:System.Threading.AutoResetEvent> экземпляр переводится в сигнальное состояние.</span><span class="sxs-lookup"><span data-stu-id="07e1c-203">After each set of method calls, the application thread calls the [AutoResetEvent.WaitOne](xref:System.Threading.WaitHandle.WaitOne*) method so that it blocks until the <xref:System.Threading.AutoResetEvent> instance is signaled.</span></span>  
  
 <span data-ttu-id="07e1c-204">Каждый вызов `SyncUpdateResource` вызывает внутренний метод `SyncResource.Access` метод, а затем вызывает <xref:System.Threading.Interlocked.Decrement%2A?displayProperty=nameWithType> способ уменьшения `numOps` счетчика.</span><span class="sxs-lookup"><span data-stu-id="07e1c-204">Each call to the `SyncUpdateResource` method calls the internal `SyncResource.Access` method and then calls the <xref:System.Threading.Interlocked.Decrement%2A?displayProperty=nameWithType> method to decrement the `numOps` counter.</span></span> <span data-ttu-id="07e1c-205"><xref:System.Threading.Interlocked.Decrement%2A?displayProperty=nameWithType> Метод используется для уменьшения счетчика, так как в противном случае нельзя быть уверенным, что второй поток будет обращаться к значению, прежде чем первый поток уменьшенное значение хранилось в переменной.</span><span class="sxs-lookup"><span data-stu-id="07e1c-205">The <xref:System.Threading.Interlocked.Decrement%2A?displayProperty=nameWithType> method Is used to decrement the counter, because otherwise you cannot be certain that a second thread will access the value before a first thread's decremented value has been stored in the variable.</span></span> <span data-ttu-id="07e1c-206">Когда последний синхронизированный рабочий поток уменьшит счетчик до нуля, указывающее, что все синхронизированные потоки завершили доступ к ресурсу, `SyncUpdateResource` вызовы методов <xref:System.Threading.EventWaitHandle.Set%2A?displayProperty=nameWithType> метод, который сигнализирует основному потоку продолжить выполнение.</span><span class="sxs-lookup"><span data-stu-id="07e1c-206">When the last synchronized worker thread decrements the counter to zero, indicating that all synchronized threads have completed accessing the resource, the `SyncUpdateResource` method calls the <xref:System.Threading.EventWaitHandle.Set%2A?displayProperty=nameWithType> method, which signals the main thread to continue execution.</span></span>  
  
 <span data-ttu-id="07e1c-207">Каждый вызов `UnSyncUpdateResource` вызывает внутренний метод `UnSyncResource.Access` метод, а затем вызывает <xref:System.Threading.Interlocked.Decrement%2A?displayProperty=nameWithType> способ уменьшения `numOps` счетчика.</span><span class="sxs-lookup"><span data-stu-id="07e1c-207">Each call to the `UnSyncUpdateResource` method calls the internal `UnSyncResource.Access` method and then calls the <xref:System.Threading.Interlocked.Decrement%2A?displayProperty=nameWithType> method to decrement the `numOps` counter.</span></span> <span data-ttu-id="07e1c-208">Опять же <xref:System.Threading.Interlocked.Decrement%2A?displayProperty=nameWithType> метод используется для уменьшения счетчика, чтобы второй поток не обращаться к значение перед уменьшенное значение первого потока был назначен переменной.</span><span class="sxs-lookup"><span data-stu-id="07e1c-208">Once again, the <xref:System.Threading.Interlocked.Decrement%2A?displayProperty=nameWithType> method Is used to decrement the counter to ensure that a second thread does not access the value before a first thread's decremented value has been assigned to the variable.</span></span> <span data-ttu-id="07e1c-209">Когда последний синхронизированный рабочий поток уменьшит счетчик до нуля, указывающее, что больше нет синхронизированных потоков требуется доступ к ресурсу, `UnSyncUpdateResource` вызовы методов <xref:System.Threading.EventWaitHandle.Set%2A?displayProperty=nameWithType> метод, который сигнализирует основному потоку продолжить выполнение .</span><span class="sxs-lookup"><span data-stu-id="07e1c-209">When the last unsynchronized worker thread decrements the counter to zero, indicating that no more unsynchronized threads need to access the resource, the `UnSyncUpdateResource` method calls the <xref:System.Threading.EventWaitHandle.Set%2A?displayProperty=nameWithType> method, which signals the main thread to continue execution.</span></span>  
  
 <span data-ttu-id="07e1c-210">Как показывает результат этого примера, синхронизированный доступ обеспечивает, что вызывающий поток выходит из защищенного ресурса до того, как другой поток получит доступ к этому ресурсу; каждый поток ожидает своего предшественника.</span><span class="sxs-lookup"><span data-stu-id="07e1c-210">As the output from  the example shows, synchronized access ensures that the calling thread exits the protected resource before another thread can access it; each thread waits on its predecessor.</span></span> <span data-ttu-id="07e1c-211">С другой стороны, без блокировки `UnSyncResource.Access` метод вызывается в том порядке, в котором потоки получить к нему доступ.</span><span class="sxs-lookup"><span data-stu-id="07e1c-211">On the other hand, without the lock, the `UnSyncResource.Access` method is called in the order in which threads reach it.</span></span>  
  
 ]]></format>
    </remarks>
    <threadsafe>
      <span data-ttu-id="07e1c-212">Данный тип потокобезопасен.</span>
      <span class="sxs-lookup">
        <span data-stu-id="07e1c-212">This type is thread safe.</span>
      </span>
    </threadsafe>
    <altmember cref="T:System.Threading.Thread" />
  </Docs>
  <Members>
    <MemberGroup MemberName="Enter">
      <AssemblyInfo>
        <AssemblyName>System.Threading</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="07e1c-213">Получает монопольную блокировку указанного объекта.</span>
          <span class="sxs-lookup">
            <span data-stu-id="07e1c-213">Acquires an exclusive lock on a specified object.</span>
          </span>
        </summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Enter">
      <MemberSignature Language="C#" Value="public static void Enter (object obj);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void Enter(object obj) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Monitor.Enter(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub Enter (obj As Object)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void Enter(System::Object ^ obj);" />
      <MemberSignature Language="F#" Value="static member Enter : obj -&gt; unit" Usage="System.Threading.Monitor.Enter obj" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="obj" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="obj">
          <span data-ttu-id="07e1c-214">Объект, для которого получается блокировка монитора.</span>
          <span class="sxs-lookup">
            <span data-stu-id="07e1c-214">The object on which to acquire the monitor lock.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="07e1c-215">Получает эксклюзивную блокировку указанного объекта.</span>
          <span class="sxs-lookup">
            <span data-stu-id="07e1c-215">Acquires an exclusive lock on the specified object.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="07e1c-216">Используйте `Enter` получения <xref:System.Threading.Monitor> на объект, переданный в качестве параметра.</span><span class="sxs-lookup"><span data-stu-id="07e1c-216">Use `Enter` to acquire the <xref:System.Threading.Monitor> on the object passed as the parameter.</span></span> <span data-ttu-id="07e1c-217">Если другой поток выполнил `Enter` в объекте, но еще не выполнен соответствующий <xref:System.Threading.Monitor.Exit%2A>, текущий поток будет заблокирован, пока другой поток освобождает объект.</span><span class="sxs-lookup"><span data-stu-id="07e1c-217">If another thread has executed an `Enter` on the object but has not yet executed the corresponding <xref:System.Threading.Monitor.Exit%2A>, the current thread will block until the other thread releases the object.</span></span> <span data-ttu-id="07e1c-218">Допустимо для одного потока для вызова `Enter` более одного раза без их блокировки, однако одинаковое число `Exit` должно быть вызвано прежде, чем другие потоки, ожидающие объекта будут разблокированы.</span><span class="sxs-lookup"><span data-stu-id="07e1c-218">It is legal for the same thread to invoke `Enter` more than once without it blocking; however, an equal number of `Exit` calls must be invoked before other threads waiting on the object will unblock.</span></span>  
  
 <span data-ttu-id="07e1c-219">Используйте <xref:System.Threading.Monitor> блокировка объектов (то есть ссылочные типы), не типы значений.</span><span class="sxs-lookup"><span data-stu-id="07e1c-219">Use <xref:System.Threading.Monitor> to lock objects (that is, reference types), not value types.</span></span> <span data-ttu-id="07e1c-220">При передаче переменной типа значения к `Enter`, она трактуется как объект.</span><span class="sxs-lookup"><span data-stu-id="07e1c-220">When you pass a value type variable to `Enter`, it is boxed as an object.</span></span> <span data-ttu-id="07e1c-221">Если передать ту же переменную, чтобы `Enter` снова, она трактуется как отдельный объект, и поток не блокируется.</span><span class="sxs-lookup"><span data-stu-id="07e1c-221">If you pass the same variable to `Enter` again, it is boxed as a separate object, and the thread does not block.</span></span> <span data-ttu-id="07e1c-222">В данном случае код, `Monitor` является защищается не защищена.</span><span class="sxs-lookup"><span data-stu-id="07e1c-222">In this case, the code that `Monitor` is supposedly protecting is not protected.</span></span> <span data-ttu-id="07e1c-223">Кроме того, при передаче переменной `Exit`, создается другой, отдельный объект.</span><span class="sxs-lookup"><span data-stu-id="07e1c-223">Furthermore, when you pass the variable to `Exit`, still another separate object is created.</span></span> <span data-ttu-id="07e1c-224">Так как объект, переданный `Exit` отличается от объекта, переданного `Enter`, `Monitor` вызывает <xref:System.Threading.SynchronizationLockException>.</span><span class="sxs-lookup"><span data-stu-id="07e1c-224">Because the object passed to `Exit` is different from the object passed to `Enter`, `Monitor` throws <xref:System.Threading.SynchronizationLockException>.</span></span> <span data-ttu-id="07e1c-225">Дополнительные сведения см. раздел общих понятий [мониторы](xref:System.Threading.Monitor).</span><span class="sxs-lookup"><span data-stu-id="07e1c-225">For more information, see the conceptual topic [Monitors](xref:System.Threading.Monitor).</span></span>  
  
 <span data-ttu-id="07e1c-226"><xref:System.Threading.Thread.Interrupt%2A> можно прервать потоков, ожидающих входа в `Monitor` объекта.</span><span class="sxs-lookup"><span data-stu-id="07e1c-226"><xref:System.Threading.Thread.Interrupt%2A> can interrupt threads that are waiting to enter a `Monitor` on an object.</span></span> <span data-ttu-id="07e1c-227">Объект <xref:System.Threading.ThreadInterruptedException> будет создано.</span><span class="sxs-lookup"><span data-stu-id="07e1c-227">A <xref:System.Threading.ThreadInterruptedException> will be thrown.</span></span>  
  
 <span data-ttu-id="07e1c-228">Использование языка C# `try`...`finally`</span><span class="sxs-lookup"><span data-stu-id="07e1c-228">Use a C# `try`…`finally`</span></span> <span data-ttu-id="07e1c-229">блок (`Try`...`Finally`</span><span class="sxs-lookup"><span data-stu-id="07e1c-229">block (`Try`…`Finally`</span></span> <span data-ttu-id="07e1c-230">в Visual Basic), чтобы убедитесь, что выпуск монитор, или использовать в C# `lock` инструкции (`SyncLock` в Visual Basic), который заключает в оболочку <xref:System.Threading.Monitor.Enter%2A> и <xref:System.Threading.Monitor.Exit%2A> методы в `try`...`finally`</span><span class="sxs-lookup"><span data-stu-id="07e1c-230">in Visual Basic) to ensure that you release the monitor, or use the C# `lock` statement (`SyncLock` statement in Visual Basic), which wraps the <xref:System.Threading.Monitor.Enter%2A> and <xref:System.Threading.Monitor.Exit%2A> methods in a `try`…`finally`</span></span> <span data-ttu-id="07e1c-231">блок.</span><span class="sxs-lookup"><span data-stu-id="07e1c-231">block.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="07e1c-232">В следующем примере показано использование метода `Enter`.</span><span class="sxs-lookup"><span data-stu-id="07e1c-232">The following example demonstrates how to use the `Enter` method.</span></span>  
  
 [!code-cpp[MonitorExmpl2#1](~/samples/snippets/cpp/VS_Snippets_CLR/MonitorExmpl2/CPP/monitor2.cpp#1)]
 [!code-csharp[MonitorExmpl2#1](~/samples/snippets/csharp/VS_Snippets_CLR/MonitorExmpl2/CS/monitor2.cs#1)]
 [!code-vb[MonitorExmpl2#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/MonitorExmpl2/VB/monitor2.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="07e1c-233">Параметр <paramref name="obj" /> имеет значение <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="07e1c-233">The <paramref name="obj" /> parameter is <see langword="null" />.</span>
          </span>
        </exception>
        <altmember cref="T:System.Threading.Thread" />
      </Docs>
    </Member>
    <Member MemberName="Enter">
      <MemberSignature Language="C#" Value="public static void Enter (object obj, ref bool lockTaken);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void Enter(object obj, bool&amp; lockTaken) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Monitor.Enter(System.Object,System.Boolean@)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub Enter (obj As Object, ByRef lockTaken As Boolean)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void Enter(System::Object ^ obj, bool % lockTaken);" />
      <MemberSignature Language="F#" Value="static member Enter : obj *  -&gt; unit" Usage="System.Threading.Monitor.Enter (obj, lockTaken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="obj" Type="System.Object" />
        <Parameter Name="lockTaken" Type="System.Boolean&amp;" RefType="ref" />
      </Parameters>
      <Docs>
        <param name="obj">
          <span data-ttu-id="07e1c-234">Объект, в котором следует ожидать.</span>
          <span class="sxs-lookup">
            <span data-stu-id="07e1c-234">The object on which to wait.</span>
          </span>
        </param>
        <param name="lockTaken">
          <span data-ttu-id="07e1c-235">Результат попытки получить блокировку, переданную по ссылке.</span>
          <span class="sxs-lookup">
            <span data-stu-id="07e1c-235">The result of the attempt to acquire the lock, passed by reference.</span>
          </span>
          <span data-ttu-id="07e1c-236">Входное значение должно равняться <see langword="false" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="07e1c-236">The input must be <see langword="false" />.</span>
          </span>
          <span data-ttu-id="07e1c-237">Выходное значение <see langword="true" />, если блокировка получена; в противном случае — выходное значение <see langword="false" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="07e1c-237">The output is <see langword="true" /> if the lock is acquired; otherwise, the output is <see langword="false" />.</span>
          </span>
          <span data-ttu-id="07e1c-238">Выходное значение задается, даже если при попытке получить блокировку возникает исключение.</span>
          <span class="sxs-lookup">
            <span data-stu-id="07e1c-238">The output is set even if an exception occurs during the attempt to acquire the lock.</span>
          </span>
          <span data-ttu-id="07e1c-239">Примечание. Если исключение не возникает, выходное значение этого метода всегда равно <see langword="true" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="07e1c-239">Note   If no exception occurs, the output of this method is always <see langword="true" />.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="07e1c-240">Получает монопольную блокировку указанного объекта и единым блоком задает значение, указывающее, была ли выполнена блокировка.</span>
          <span class="sxs-lookup">
            <span data-stu-id="07e1c-240">Acquires an exclusive lock on the specified object, and atomically sets a value that indicates whether the lock was taken.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="07e1c-241">Используйте `Enter` получения <xref:System.Threading.Monitor> на объект, переданный в качестве `obj` параметра.</span><span class="sxs-lookup"><span data-stu-id="07e1c-241">Use `Enter` to acquire the <xref:System.Threading.Monitor> on the object passed as the `obj` parameter.</span></span> <span data-ttu-id="07e1c-242">Если другой поток выполнил `Enter` в объекте, но еще не выполнен соответствующий <xref:System.Threading.Monitor.Exit%2A>, текущий поток будет заблокирован, пока другой поток освобождает объект.</span><span class="sxs-lookup"><span data-stu-id="07e1c-242">If another thread has executed an `Enter` on the object but has not yet executed the corresponding <xref:System.Threading.Monitor.Exit%2A>, the current thread will block until the other thread releases the object.</span></span> <span data-ttu-id="07e1c-243">Допустимо для одного потока для вызова `Enter` более одного раза без их блокировки, однако одинаковое число `Exit` должно быть вызвано прежде, чем другие потоки, ожидающие объекта будут разблокированы.</span><span class="sxs-lookup"><span data-stu-id="07e1c-243">It is legal for the same thread to invoke `Enter` more than once without it blocking; however, an equal number of `Exit` calls must be invoked before other threads waiting on the object will unblock.</span></span>  
  
 <span data-ttu-id="07e1c-244">Если не была выполнена блокировка, так как возникло исключение, переменная, указанная для `lockTaken` параметр `false` после завершения этого метода.</span><span class="sxs-lookup"><span data-stu-id="07e1c-244">If the lock was not taken because an exception was thrown, the variable specified for the `lockTaken` parameter is `false` after this method ends.</span></span> <span data-ttu-id="07e1c-245">Это позволяет программе определить, во всех случаях необходимость для снятия блокировки.</span><span class="sxs-lookup"><span data-stu-id="07e1c-245">This allows the program to determine, in all cases, whether it is necessary to release the lock.</span></span> <span data-ttu-id="07e1c-246">Если этот метод возвращает без создания исключения, переменная, указанная для `lockTaken` параметр всегда будет `true`, и нет необходимости, чтобы проверить его.</span><span class="sxs-lookup"><span data-stu-id="07e1c-246">If this method returns without throwing an exception, the variable specified for the `lockTaken` parameter is always `true`, and there is no need to test it.</span></span>  
  
 <span data-ttu-id="07e1c-247">Используйте <xref:System.Threading.Monitor> блокировка объектов (то есть ссылочные типы), не типы значений.</span><span class="sxs-lookup"><span data-stu-id="07e1c-247">Use <xref:System.Threading.Monitor> to lock objects (that is, reference types), not value types.</span></span> <span data-ttu-id="07e1c-248">При передаче переменной типа значения к `Enter`, она трактуется как объект.</span><span class="sxs-lookup"><span data-stu-id="07e1c-248">When you pass a value type variable to `Enter`, it is boxed as an object.</span></span> <span data-ttu-id="07e1c-249">Если передать ту же переменную, чтобы `Enter` снова, она трактуется как отдельный объект, и поток не блокируется.</span><span class="sxs-lookup"><span data-stu-id="07e1c-249">If you pass the same variable to `Enter` again, it is boxed as a separate object, and the thread does not block.</span></span> <span data-ttu-id="07e1c-250">В данном случае код, `Monitor` является защищается не защищена.</span><span class="sxs-lookup"><span data-stu-id="07e1c-250">In this case, the code that `Monitor` is supposedly protecting is not protected.</span></span> <span data-ttu-id="07e1c-251">Кроме того, при передаче переменной `Exit`, создается другой отдельный объект.</span><span class="sxs-lookup"><span data-stu-id="07e1c-251">Furthermore, when you pass the variable to `Exit`, another separate object is created.</span></span> <span data-ttu-id="07e1c-252">Так как объект, переданный `Exit` отличается от объекта, переданного `Enter`, `Monitor` вызывает <xref:System.Threading.SynchronizationLockException>.</span><span class="sxs-lookup"><span data-stu-id="07e1c-252">Because the object passed to `Exit` is different from the object passed to `Enter`, `Monitor` throws <xref:System.Threading.SynchronizationLockException>.</span></span> <span data-ttu-id="07e1c-253">Дополнительные сведения см. раздел общих понятий [мониторы](xref:System.Threading.Monitor).</span><span class="sxs-lookup"><span data-stu-id="07e1c-253">For more information, see the conceptual topic [Monitors](xref:System.Threading.Monitor).</span></span>  
  
 <span data-ttu-id="07e1c-254"><xref:System.Threading.Thread.Interrupt%2A> можно прервать потоков, ожидающих входа в `Monitor` объекта.</span><span class="sxs-lookup"><span data-stu-id="07e1c-254"><xref:System.Threading.Thread.Interrupt%2A> can interrupt threads that are waiting to enter a `Monitor` on an object.</span></span> <span data-ttu-id="07e1c-255">Объект <xref:System.Threading.ThreadInterruptedException> будет создано.</span><span class="sxs-lookup"><span data-stu-id="07e1c-255">A <xref:System.Threading.ThreadInterruptedException> will be thrown.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="07e1c-256">В следующем коде показано типичное использование <xref:System.Threading.Monitor.Enter%28System.Object%2CSystem.Boolean%40%29> перегрузки метода.</span><span class="sxs-lookup"><span data-stu-id="07e1c-256">The following code shows the basic pattern for using the <xref:System.Threading.Monitor.Enter%28System.Object%2CSystem.Boolean%40%29> method overload.</span></span> <span data-ttu-id="07e1c-257">Эта перегрузка всегда устанавливает значение переменной, которая передается `ref` параметра (`ByRef` в Visual Basic) `lockTaken`, даже если метод создает исключение, поэтому значение переменной является надежным способом для проверки блокировки должен быть выпущен.</span><span class="sxs-lookup"><span data-stu-id="07e1c-257">This overload always sets the value of the variable that is passed to the `ref` parameter (`ByRef` in Visual Basic) `lockTaken`, even if the method throws an exception, so the value of the variable is a reliable way to test whether the lock has to be released.</span></span>  
  
 [!code-csharp[System.Threading.Monitor.Enter#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.threading.monitor.enter/cs/example.cs#2)]
 [!code-vb[System.Threading.Monitor.Enter#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.threading.monitor.enter/vb/example.vb#2)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="07e1c-258">Входные данные для <paramref name="lockTaken" /> — <see langword="true" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="07e1c-258">The input to <paramref name="lockTaken" /> is <see langword="true" />.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="07e1c-259">Параметр <paramref name="obj" /> имеет значение <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="07e1c-259">The <paramref name="obj" /> parameter is <see langword="null" />.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="Exit">
      <MemberSignature Language="C#" Value="public static void Exit (object obj);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void Exit(object obj) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Monitor.Exit(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub Exit (obj As Object)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void Exit(System::Object ^ obj);" />
      <MemberSignature Language="F#" Value="static member Exit : obj -&gt; unit" Usage="System.Threading.Monitor.Exit obj" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.ConstrainedExecution.ReliabilityContract(System.Runtime.ConstrainedExecution.Consistency.WillNotCorruptState, System.Runtime.ConstrainedExecution.Cer.Success)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="obj" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="obj">
          <span data-ttu-id="07e1c-260">Объект, блокировка которого освобождается.</span>
          <span class="sxs-lookup">
            <span data-stu-id="07e1c-260">The object on which to release the lock.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="07e1c-261">Освобождает эксклюзивную блокировку указанного объекта.</span>
          <span class="sxs-lookup">
            <span data-stu-id="07e1c-261">Releases an exclusive lock on the specified object.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="07e1c-262">Вызывающий поток должен быть владельцем блокировки на `obj` параметра.</span><span class="sxs-lookup"><span data-stu-id="07e1c-262">The calling thread must own the lock on the `obj` parameter.</span></span> <span data-ttu-id="07e1c-263">Если вызывающий поток владеет блокировкой для указанного объекта, а одинаковое число `Exit` и <xref:System.Threading.Monitor.Enter%2A> вызывает для объекта, то блокировка снимается.</span><span class="sxs-lookup"><span data-stu-id="07e1c-263">If the calling thread owns the lock on the specified object, and has made an equal number of `Exit` and <xref:System.Threading.Monitor.Enter%2A> calls for the object, then the lock is released.</span></span> <span data-ttu-id="07e1c-264">Если вызывающий поток не вызван `Exit` столько раз `Enter`, блокировка не снимается.</span><span class="sxs-lookup"><span data-stu-id="07e1c-264">If the calling thread has not invoked `Exit` as many times as `Enter`, the lock is not released.</span></span>  
  
 <span data-ttu-id="07e1c-265">Если другие потоки находятся в очереди готовности для объекта, блокировка снимается, один из потоков блокировку.</span><span class="sxs-lookup"><span data-stu-id="07e1c-265">If the lock is released and other threads are in the ready queue for the object, one of the threads acquires the lock.</span></span> <span data-ttu-id="07e1c-266">Если другие потоки находятся в очереди ожидания получения блокировки, они не перемещаются автоматически в очередь готовности, когда владелец блокировки вызывает `Exit`.</span><span class="sxs-lookup"><span data-stu-id="07e1c-266">If other threads are in the waiting queue waiting to acquire the lock, they are not automatically moved to the ready queue when the owner of the lock calls `Exit`.</span></span> <span data-ttu-id="07e1c-267">Чтобы переместить один или несколько ожидающих потоков в очередь готовности, вызовите <xref:System.Threading.Monitor.Pulse%2A> или <xref:System.Threading.Monitor.PulseAll%2A> перед вызовом `Exit`.</span><span class="sxs-lookup"><span data-stu-id="07e1c-267">To move one or more waiting threads into the ready queue, call <xref:System.Threading.Monitor.Pulse%2A> or <xref:System.Threading.Monitor.PulseAll%2A> before invoking `Exit`.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="07e1c-268">В следующем примере показано использование метода `Exit`.</span><span class="sxs-lookup"><span data-stu-id="07e1c-268">The following example demonstrates how to use the `Exit` method.</span></span>  
  
 [!code-cpp[MonitorExmpl2#1](~/samples/snippets/cpp/VS_Snippets_CLR/MonitorExmpl2/CPP/monitor2.cpp#1)]
 [!code-csharp[MonitorExmpl2#1](~/samples/snippets/csharp/VS_Snippets_CLR/MonitorExmpl2/CS/monitor2.cs#1)]
 [!code-vb[MonitorExmpl2#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/MonitorExmpl2/VB/monitor2.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="07e1c-269">Параметр <paramref name="obj" /> имеет значение <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="07e1c-269">The <paramref name="obj" /> parameter is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.Threading.SynchronizationLockException">
          <span data-ttu-id="07e1c-270">Данный поток не владеет блокировкой для указанного объекта.</span>
          <span class="sxs-lookup">
            <span data-stu-id="07e1c-270">The current thread does not own the lock for the specified object.</span>
          </span>
        </exception>
        <altmember cref="T:System.Threading.Thread" />
      </Docs>
    </Member>
    <Member MemberName="IsEntered">
      <MemberSignature Language="C#" Value="public static bool IsEntered (object obj);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool IsEntered(object obj) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Monitor.IsEntered(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function IsEntered (obj As Object) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool IsEntered(System::Object ^ obj);" />
      <MemberSignature Language="F#" Value="static member IsEntered : obj -&gt; bool" Usage="System.Threading.Monitor.IsEntered obj" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="obj" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="obj">
          <span data-ttu-id="07e1c-271">Объект для тестирования.</span>
          <span class="sxs-lookup">
            <span data-stu-id="07e1c-271">The object to test.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="07e1c-272">Определяет, содержит ли текущий поток блокировку указанного объекта.</span>
          <span class="sxs-lookup">
            <span data-stu-id="07e1c-272">Determines whether the current thread holds the lock on the specified object.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="07e1c-273">Значение <see langword="true" />, если текущий поток владеет блокировкой в <paramref name="obj" />; в противном случае — значение <see langword="false" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="07e1c-273">
              <see langword="true" /> if the current thread holds the lock on <paramref name="obj" />; otherwise, <see langword="false" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="07e1c-274">Этот метод работает только для блокировки, полученные с помощью методов класса <xref:System.Threading.Monitor> класса или с помощью C# `lock` инструкции или Visual Basic `SyncLock` инструкцию, которая реализуются с помощью <xref:System.Threading.Monitor>.</span><span class="sxs-lookup"><span data-stu-id="07e1c-274">This method works only for locks that are acquired by using the methods of the <xref:System.Threading.Monitor> class, or by using the C# `lock` statement or the Visual Basic `SyncLock` statement, which are implemented with <xref:System.Threading.Monitor>.</span></span>  
  
 <span data-ttu-id="07e1c-275">Используйте этот метод, с помощью средств диагностики, такие как <xref:System.Diagnostics.Debug.Assert%2A> метод и <xref:System.Diagnostics.Contracts.Contract> класс, для отладки проблем с блокировкой, включающие <xref:System.Threading.Monitor> класса.</span><span class="sxs-lookup"><span data-stu-id="07e1c-275">Use this method with diagnostic tools, such as the <xref:System.Diagnostics.Debug.Assert%2A> method and the <xref:System.Diagnostics.Contracts.Contract> class, to debug locking issues that involve the <xref:System.Threading.Monitor> class.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="07e1c-276">Свойство <paramref name="obj" /> имеет значение <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="07e1c-276">
              <paramref name="obj" /> is <see langword="null" />.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="Pulse">
      <MemberSignature Language="C#" Value="public static void Pulse (object obj);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void Pulse(object obj) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Monitor.Pulse(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub Pulse (obj As Object)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void Pulse(System::Object ^ obj);" />
      <MemberSignature Language="F#" Value="static member Pulse : obj -&gt; unit" Usage="System.Threading.Monitor.Pulse obj" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="obj" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="obj">
          <span data-ttu-id="07e1c-277">Объект, ожидаемый потоком.</span>
          <span class="sxs-lookup">
            <span data-stu-id="07e1c-277">The object a thread is waiting for.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="07e1c-278">Уведомляет поток в очереди готовности об изменении состояния объекта с блокировкой.</span>
          <span class="sxs-lookup">
            <span data-stu-id="07e1c-278">Notifies a thread in the waiting queue of a change in the locked object's state.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="07e1c-279">Только текущий владелец блокировки может подать сигнал объекта ожидания с помощью `Pulse`.</span><span class="sxs-lookup"><span data-stu-id="07e1c-279">Only the current owner of the lock can signal a waiting object using `Pulse`.</span></span>  
  
 <span data-ttu-id="07e1c-280">Поток, который в данный момент принадлежит блокировка указанного объекта вызывает этот метод для указания следующий поток в списке для блокировки.</span><span class="sxs-lookup"><span data-stu-id="07e1c-280">The thread that currently owns the lock on the specified object invokes this method to signal the next thread in line for the lock.</span></span> <span data-ttu-id="07e1c-281">При получении импульса, ожидающий поток перемещается в очередь готовности.</span><span class="sxs-lookup"><span data-stu-id="07e1c-281">Upon receiving the pulse, the waiting thread is moved to the ready queue.</span></span> <span data-ttu-id="07e1c-282">Когда поток, вызвавший метод `Pulse` освобождает блокировку, следующий поток в очереди готовности (который не обязательно является потоком, был импульс) получает блокировку.</span><span class="sxs-lookup"><span data-stu-id="07e1c-282">When the thread that invoked `Pulse` releases the lock, the next thread in the ready queue (which is not necessarily the thread that was pulsed) acquires the lock.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="07e1c-283"><xref:System.Threading.Monitor> Класс не сохраняет состояние, указывающее, что <xref:System.Threading.Monitor.Pulse%2A> был вызван метод.</span><span class="sxs-lookup"><span data-stu-id="07e1c-283">The <xref:System.Threading.Monitor> class does not maintain state indicating that the <xref:System.Threading.Monitor.Pulse%2A> method has been called.</span></span> <span data-ttu-id="07e1c-284">Таким образом при вызове метода <xref:System.Threading.Monitor.Pulse%2A> при отсутствии ожидающих потоков, следующий поток, который вызывает <xref:System.Threading.Monitor.Wait%2A> блоки так, как если <xref:System.Threading.Monitor.Pulse%2A> никогда не был вызван.</span><span class="sxs-lookup"><span data-stu-id="07e1c-284">Thus, if you call <xref:System.Threading.Monitor.Pulse%2A> when no threads are waiting, the next thread that calls <xref:System.Threading.Monitor.Wait%2A> blocks as if <xref:System.Threading.Monitor.Pulse%2A> had never been called.</span></span> <span data-ttu-id="07e1c-285">Если при использовании двух потоков <xref:System.Threading.Monitor.Pulse%2A> и <xref:System.Threading.Monitor.Wait%2A> для взаимодействия, это может привести к взаимоблокировке.</span><span class="sxs-lookup"><span data-stu-id="07e1c-285">If two threads are using <xref:System.Threading.Monitor.Pulse%2A> and <xref:System.Threading.Monitor.Wait%2A> to interact, this could result in a deadlock.</span></span> <span data-ttu-id="07e1c-286">Сравните это с поведением <xref:System.Threading.AutoResetEvent> класса: Если сигнал <xref:System.Threading.AutoResetEvent> путем вызова его <xref:System.Threading.EventWaitHandle.Set%2A> метод и нет потоков в состоянии ожидания <xref:System.Threading.AutoResetEvent> остается в сигнальном состоянии, пока поток не вызовет <xref:System.Threading.WaitHandle.WaitOne%2A>, <xref:System.Threading.WaitHandle.WaitAny%2A>, или <xref:System.Threading.WaitHandle.WaitAll%2A>.</span><span class="sxs-lookup"><span data-stu-id="07e1c-286">Contrast this with the behavior of the <xref:System.Threading.AutoResetEvent> class: If you signal an <xref:System.Threading.AutoResetEvent> by calling its <xref:System.Threading.EventWaitHandle.Set%2A> method, and there are no threads waiting, the <xref:System.Threading.AutoResetEvent> remains in a signaled state until a thread calls <xref:System.Threading.WaitHandle.WaitOne%2A>, <xref:System.Threading.WaitHandle.WaitAny%2A>, or <xref:System.Threading.WaitHandle.WaitAll%2A>.</span></span> <span data-ttu-id="07e1c-287"><xref:System.Threading.AutoResetEvent> Освобождает этот поток и возвращается в состояние без сигнала.</span><span class="sxs-lookup"><span data-stu-id="07e1c-287">The <xref:System.Threading.AutoResetEvent> releases that thread and returns to the unsignaled state.</span></span>  
  
 <span data-ttu-id="07e1c-288">Обратите внимание, что синхронизированный объект имеет несколько ссылок, в том числе ссылку на поток, удерживающий блокировку, ссылку на очередь готовности, который содержит потоки, готовые к получению блокировки, и ссылку на очередь ожидания, в настоящее время которой содержит потоки, ожидающие уведомления об изменении состояния объекта.</span><span class="sxs-lookup"><span data-stu-id="07e1c-288">Note that a synchronized object holds several references, including a reference to the thread that currently holds the lock, a reference to the ready queue, which contains the threads that are ready to obtain the lock, and a reference to the waiting queue, which contains the threads that are waiting for notification of a change in the object's state.</span></span>  
  
 <span data-ttu-id="07e1c-289">`Pulse`, <xref:System.Threading.Monitor.PulseAll%2A>, И <xref:System.Threading.Monitor.Wait%2A> методы должны быть вызваны из синхронизированного блока кода.</span><span class="sxs-lookup"><span data-stu-id="07e1c-289">The `Pulse`, <xref:System.Threading.Monitor.PulseAll%2A>, and <xref:System.Threading.Monitor.Wait%2A> methods must be invoked from within a synchronized block of code.</span></span>  
  
 <span data-ttu-id="07e1c-290">Чтобы информировать несколько потоков, используйте <xref:System.Threading.Monitor.PulseAll%2A> метод.</span><span class="sxs-lookup"><span data-stu-id="07e1c-290">To signal multiple threads, use the <xref:System.Threading.Monitor.PulseAll%2A> method.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="07e1c-291">Параметр <paramref name="obj" /> имеет значение <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="07e1c-291">The <paramref name="obj" /> parameter is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.Threading.SynchronizationLockException">
          <span data-ttu-id="07e1c-292">Вызывающий поток не владеет блокировкой для указанного объекта.</span>
          <span class="sxs-lookup">
            <span data-stu-id="07e1c-292">The calling thread does not own the lock for the specified object.</span>
          </span>
        </exception>
        <altmember cref="T:System.Threading.Thread" />
      </Docs>
    </Member>
    <Member MemberName="PulseAll">
      <MemberSignature Language="C#" Value="public static void PulseAll (object obj);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void PulseAll(object obj) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Monitor.PulseAll(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub PulseAll (obj As Object)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void PulseAll(System::Object ^ obj);" />
      <MemberSignature Language="F#" Value="static member PulseAll : obj -&gt; unit" Usage="System.Threading.Monitor.PulseAll obj" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="obj" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="obj">
          <span data-ttu-id="07e1c-293">Объект, посылающий импульс.</span>
          <span class="sxs-lookup">
            <span data-stu-id="07e1c-293">The object that sends the pulse.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="07e1c-294">Уведомляет все ожидающие потоки об изменении состояния объекта.</span>
          <span class="sxs-lookup">
            <span data-stu-id="07e1c-294">Notifies all waiting threads of a change in the object's state.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="07e1c-295">Поток, который в данный момент принадлежит блокировка указанного объекта вызывает этот метод для указания всех потоков, ожидающих получения блокировки на объект.</span><span class="sxs-lookup"><span data-stu-id="07e1c-295">The thread that currently owns the lock on the specified object invokes this method to signal all threads waiting to acquire the lock on the object.</span></span> <span data-ttu-id="07e1c-296">После отправки сигнала ожидающим потокам, перемещаются в очередь готовности.</span><span class="sxs-lookup"><span data-stu-id="07e1c-296">After the signal is sent, the waiting threads are moved to the ready queue.</span></span> <span data-ttu-id="07e1c-297">Когда поток, вызвавший метод `PulseAll` освобождает блокировку, следующий поток в очереди готовности получает блокировку.</span><span class="sxs-lookup"><span data-stu-id="07e1c-297">When the thread that invoked `PulseAll` releases the lock, the next thread in the ready queue acquires the lock.</span></span>  
  
 <span data-ttu-id="07e1c-298">Обратите внимание, что синхронизированный объект имеет несколько ссылок, в том числе ссылку на поток, удерживающий блокировку, ссылку на очередь готовности, который содержит потоки, готовые к получению блокировки, и ссылку на очередь ожидания, в настоящее время которой содержит потоки, ожидающие уведомления об изменении состояния объекта.</span><span class="sxs-lookup"><span data-stu-id="07e1c-298">Note that a synchronized object holds several references, including a reference to the thread that currently holds the lock, a reference to the ready queue, which contains the threads that are ready to obtain the lock, and a reference to the waiting queue, which contains the threads that are waiting for notification of a change in the object's state.</span></span>  
  
 <span data-ttu-id="07e1c-299"><xref:System.Threading.Monitor.Pulse%2A>, `PulseAll`, И <xref:System.Threading.Monitor.Wait%2A> методы должны быть вызваны из синхронизированного блока кода.</span><span class="sxs-lookup"><span data-stu-id="07e1c-299">The <xref:System.Threading.Monitor.Pulse%2A>, `PulseAll`, and <xref:System.Threading.Monitor.Wait%2A> methods must be invoked from within a synchronized block of code.</span></span>  
  
 <span data-ttu-id="07e1c-300">В примечаниях к описанию <xref:System.Threading.Monitor.Pulse%2A> метод объяснить, что произойдет, если <xref:System.Threading.Monitor.Pulse%2A> вызывается при отсутствии ожидающих потоков.</span><span class="sxs-lookup"><span data-stu-id="07e1c-300">The remarks for the <xref:System.Threading.Monitor.Pulse%2A> method explain what happens if <xref:System.Threading.Monitor.Pulse%2A> is called when no threads are waiting.</span></span>  
  
 <span data-ttu-id="07e1c-301">Для обозначения одного потока, используйте `Pulse` метод.</span><span class="sxs-lookup"><span data-stu-id="07e1c-301">To signal a single thread, use the `Pulse` method.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="07e1c-302">Параметр <paramref name="obj" /> имеет значение <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="07e1c-302">The <paramref name="obj" /> parameter is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.Threading.SynchronizationLockException">
          <span data-ttu-id="07e1c-303">Вызывающий поток не владеет блокировкой для указанного объекта.</span>
          <span class="sxs-lookup">
            <span data-stu-id="07e1c-303">The calling thread does not own the lock for the specified object.</span>
          </span>
        </exception>
        <altmember cref="T:System.Threading.Thread" />
      </Docs>
    </Member>
    <MemberGroup MemberName="TryEnter">
      <AssemblyInfo>
        <AssemblyName>System.Threading</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="07e1c-304">Пытается получить эксклюзивную блокировку указанного объекта.</span>
          <span class="sxs-lookup">
            <span data-stu-id="07e1c-304">Attempts to acquire an exclusive lock on the specified object.</span>
          </span>
        </summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="TryEnter">
      <MemberSignature Language="C#" Value="public static bool TryEnter (object obj);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool TryEnter(object obj) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Monitor.TryEnter(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function TryEnter (obj As Object) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool TryEnter(System::Object ^ obj);" />
      <MemberSignature Language="F#" Value="static member TryEnter : obj -&gt; bool" Usage="System.Threading.Monitor.TryEnter obj" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="obj" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="obj">
          <span data-ttu-id="07e1c-305">Объект, блокировка которого получается.</span>
          <span class="sxs-lookup">
            <span data-stu-id="07e1c-305">The object on which to acquire the lock.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="07e1c-306">Пытается получить эксклюзивную блокировку указанного объекта.</span>
          <span class="sxs-lookup">
            <span data-stu-id="07e1c-306">Attempts to acquire an exclusive lock on the specified object.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="07e1c-307">Значение <see langword="true" />, если текущий поток получает блокировку; в противном случае — значение <see langword="false" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="07e1c-307">
              <see langword="true" /> if the current thread acquires the lock; otherwise, <see langword="false" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="07e1c-308">Если в случае успешного выполнения этот метод получает монопольную блокировку на `obj` параметра.</span><span class="sxs-lookup"><span data-stu-id="07e1c-308">If successful, this method acquires an exclusive lock on the `obj` parameter.</span></span> <span data-ttu-id="07e1c-309">Этот метод немедленно, возвращает ли доступна блокировка.</span><span class="sxs-lookup"><span data-stu-id="07e1c-309">This method returns immediately, whether or not the lock is available.</span></span>  
  
 <span data-ttu-id="07e1c-310">Этот метод аналогичен методу <xref:System.Threading.Monitor.Enter%2A>, но он никогда не блокирует текущий поток.</span><span class="sxs-lookup"><span data-stu-id="07e1c-310">This method is similar to <xref:System.Threading.Monitor.Enter%2A>, but it will never block the current thread.</span></span> <span data-ttu-id="07e1c-311">Если поток не может войти без блокировки, метод возвращает `false,`.</span><span class="sxs-lookup"><span data-stu-id="07e1c-311">If the thread cannot enter without blocking, the method returns `false,`.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="07e1c-312">Используйте <xref:System.Threading.Monitor> блокировка объектов (то есть ссылочные типы), не типы значений.</span><span class="sxs-lookup"><span data-stu-id="07e1c-312">Use <xref:System.Threading.Monitor> to lock objects (that is, reference types), not value types.</span></span> <span data-ttu-id="07e1c-313">Дополнительные сведения см. в разделе <xref:System.Threading.Monitor> статьи.</span><span class="sxs-lookup"><span data-stu-id="07e1c-313">For details, see the <xref:System.Threading.Monitor> article.</span></span>  
  
 <span data-ttu-id="07e1c-314">Чтобы убедиться, что поток не войдет в критический раздел, необходимо изучить возвращаемое значение метода и выполнения кода в критический раздел, только в том случае, если его возвращаемое значение `true`.</span><span class="sxs-lookup"><span data-stu-id="07e1c-314">To ensure that the thread does not enter the critical section, you should examine the method's return value and  execute code in the critical section only if its return value is `true`.</span></span> <span data-ttu-id="07e1c-315">В следующем фрагменте кода показан шаблон, используемый для вызова этого метода.</span><span class="sxs-lookup"><span data-stu-id="07e1c-315">The following code fragment shows the pattern used to call this method.</span></span> <span data-ttu-id="07e1c-316">Обратите внимание, что следует вызывать <xref:System.Threading.Monitor.Exit%2A> в `finally` блок, чтобы убедиться, что вызывающий поток освобождает блокировку критической секции, при возникновении исключения.</span><span class="sxs-lookup"><span data-stu-id="07e1c-316">Note that you should call <xref:System.Threading.Monitor.Exit%2A> in a `finally` block to ensure that the calling thread releases its lock on the critical section if an exception occurs.</span></span>  
  
 [!code-csharp[System.Threading.Monitor.TryEnter#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/System.Threading.Monitor.TryEnter/cs/pattern1.cs#1)]
 [!code-vb[System.Threading.Monitor.TryEnter#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/System.Threading.Monitor.TryEnter/vb/pattern1.vb#1)]  
  
   
  
## Examples  
 <span data-ttu-id="07e1c-317">В следующем примере кода показано, как использовать метод `TryEnter`.</span><span class="sxs-lookup"><span data-stu-id="07e1c-317">The following code example demonstrates how to use the `TryEnter` method.</span></span>  
  
 [!code-cpp[MonitorExmpl2#1](~/samples/snippets/cpp/VS_Snippets_CLR/MonitorExmpl2/CPP/monitor2.cpp#1)]
 [!code-csharp[MonitorExmpl2#1](~/samples/snippets/csharp/VS_Snippets_CLR/MonitorExmpl2/CS/monitor2.cs#1)]
 [!code-vb[MonitorExmpl2#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/MonitorExmpl2/VB/monitor2.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="07e1c-318">Параметр <paramref name="obj" /> имеет значение <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="07e1c-318">The <paramref name="obj" /> parameter is <see langword="null" />.</span>
          </span>
        </exception>
        <altmember cref="T:System.Threading.Thread" />
      </Docs>
    </Member>
    <Member MemberName="TryEnter">
      <MemberSignature Language="C#" Value="public static void TryEnter (object obj, ref bool lockTaken);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void TryEnter(object obj, bool&amp; lockTaken) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Monitor.TryEnter(System.Object,System.Boolean@)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub TryEnter (obj As Object, ByRef lockTaken As Boolean)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void TryEnter(System::Object ^ obj, bool % lockTaken);" />
      <MemberSignature Language="F#" Value="static member TryEnter : obj *  -&gt; unit" Usage="System.Threading.Monitor.TryEnter (obj, lockTaken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="obj" Type="System.Object" />
        <Parameter Name="lockTaken" Type="System.Boolean&amp;" RefType="ref" />
      </Parameters>
      <Docs>
        <param name="obj">
          <span data-ttu-id="07e1c-319">Объект, блокировка которого получается.</span>
          <span class="sxs-lookup">
            <span data-stu-id="07e1c-319">The object on which to acquire the lock.</span>
          </span>
        </param>
        <param name="lockTaken">
          <span data-ttu-id="07e1c-320">Результат попытки получить блокировку, переданную по ссылке.</span>
          <span class="sxs-lookup">
            <span data-stu-id="07e1c-320">The result of the attempt to acquire the lock, passed by reference.</span>
          </span>
          <span data-ttu-id="07e1c-321">Входное значение должно равняться <see langword="false" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="07e1c-321">The input must be <see langword="false" />.</span>
          </span>
          <span data-ttu-id="07e1c-322">Выходное значение <see langword="true" />, если блокировка получена; в противном случае — выходное значение <see langword="false" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="07e1c-322">The output is <see langword="true" /> if the lock is acquired; otherwise, the output is <see langword="false" />.</span>
          </span>
          <span data-ttu-id="07e1c-323">Выходное значение задается, даже если при попытке получить блокировку возникает исключение.</span>
          <span class="sxs-lookup">
            <span data-stu-id="07e1c-323">The output is set even if an exception occurs during the attempt to acquire the lock.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="07e1c-324">Пытается получить монопольную блокировку указанного объекта и единым блоком задает значение, указывающее, была ли выполнена блокировка.</span>
          <span class="sxs-lookup">
            <span data-stu-id="07e1c-324">Attempts to acquire an exclusive lock on the specified object, and atomically sets a value that indicates whether the lock was taken.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="07e1c-325">Если в случае успешного выполнения этот метод получает монопольную блокировку на `obj` параметра.</span><span class="sxs-lookup"><span data-stu-id="07e1c-325">If successful, this method acquires an exclusive lock on the `obj` parameter.</span></span> <span data-ttu-id="07e1c-326">Этот метод немедленно, возвращает ли доступна блокировка.</span><span class="sxs-lookup"><span data-stu-id="07e1c-326">This method returns immediately, whether or not the lock is available.</span></span>  
  
 <span data-ttu-id="07e1c-327">Если не была выполнена блокировка, так как возникло исключение, переменная, указанная для `lockTaken` параметр `false` после завершения этого метода.</span><span class="sxs-lookup"><span data-stu-id="07e1c-327">If the lock was not taken because an exception was thrown, the variable specified for the `lockTaken` parameter is `false` after this method ends.</span></span> <span data-ttu-id="07e1c-328">Это позволяет программе определить, во всех случаях необходимость для снятия блокировки.</span><span class="sxs-lookup"><span data-stu-id="07e1c-328">This allows the program to determine, in all cases, whether it is necessary to release the lock.</span></span>  
  
 <span data-ttu-id="07e1c-329">Этот метод аналогичен методу <xref:System.Threading.Monitor.Enter%28System.Object%2CSystem.Boolean%40%29>, но он никогда не блокирует текущий поток.</span><span class="sxs-lookup"><span data-stu-id="07e1c-329">This method is similar to <xref:System.Threading.Monitor.Enter%28System.Object%2CSystem.Boolean%40%29>, but it will never block the current thread.</span></span> <span data-ttu-id="07e1c-330">Если поток не может войти без блокировки, `lockTaken` аргумент имеет значение `false` при возвращении метода.</span><span class="sxs-lookup"><span data-stu-id="07e1c-330">If the thread cannot enter without blocking, the `lockTaken` argument is set to `false` when the method returns.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="07e1c-331">Используйте <xref:System.Threading.Monitor> блокировка объектов (то есть ссылочные типы), не типы значений.</span><span class="sxs-lookup"><span data-stu-id="07e1c-331">Use <xref:System.Threading.Monitor> to lock objects (that is, reference types), not value types.</span></span> <span data-ttu-id="07e1c-332">Дополнительные сведения см. в разделе <xref:System.Threading.Monitor> статьи.</span><span class="sxs-lookup"><span data-stu-id="07e1c-332">For more information, see the <xref:System.Threading.Monitor> article.</span></span>  
  
 <span data-ttu-id="07e1c-333">Чтобы убедиться, что поток не войдет в критический раздел, необходимо проверить значение `lockTaken` и выполнять код в критический раздел, только в том случае, если его значение равно `true`.</span><span class="sxs-lookup"><span data-stu-id="07e1c-333">To ensure that the thread does not enter the critical section, you should examine the value of `lockTaken` and  execute code in the critical section only if its value is `true`.</span></span> <span data-ttu-id="07e1c-334">В следующем фрагменте кода показан шаблон, используемый для вызова этого метода.</span><span class="sxs-lookup"><span data-stu-id="07e1c-334">The following code fragment shows the pattern used to call this method.</span></span> <span data-ttu-id="07e1c-335">Обратите внимание, что следует вызывать <xref:System.Threading.Monitor.Exit%2A> в `finally` блок, чтобы убедиться, что вызывающий поток освобождает блокировку критической секции, при возникновении исключения.</span><span class="sxs-lookup"><span data-stu-id="07e1c-335">Note that you should call <xref:System.Threading.Monitor.Exit%2A> in a `finally` block to ensure that the calling thread releases its lock on the critical section if an exception occurs.</span></span>  
  
 [!code-csharp[System.Threading.Monitor.TryEnter#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/System.Threading.Monitor.TryEnter/cs/pattern1.cs#2)]
 [!code-vb[System.Threading.Monitor.TryEnter#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/System.Threading.Monitor.TryEnter/vb/pattern1.vb#2)]  
  
   
  
## Examples  
 <span data-ttu-id="07e1c-336">В следующем коде показано типичное использование <xref:System.Threading.Monitor.TryEnter%28System.Object%2CSystem.Boolean%40%29> перегрузки метода.</span><span class="sxs-lookup"><span data-stu-id="07e1c-336">The following code shows the basic pattern for using the <xref:System.Threading.Monitor.TryEnter%28System.Object%2CSystem.Boolean%40%29> method overload.</span></span> <span data-ttu-id="07e1c-337">Эта перегрузка всегда устанавливает значение переменной, которая передается `ref` параметра (`ByRef` в Visual Basic) `lockTaken`, даже если метод создает исключение, поэтому значение переменной является надежным способом для проверки блокировки должен быть выпущен.</span><span class="sxs-lookup"><span data-stu-id="07e1c-337">This overload always sets the value of the variable that is passed to the `ref` parameter (`ByRef` in Visual Basic) `lockTaken`, even if the method throws an exception, so the value of the variable is a reliable way to test whether the lock has to be released.</span></span>  
  
 [!code-csharp[System.Threading.Monitor.Enter#3](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.threading.monitor.enter/cs/example.cs#3)]
 [!code-vb[System.Threading.Monitor.Enter#3](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.threading.monitor.enter/vb/example.vb#3)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="07e1c-338">Входные данные для <paramref name="lockTaken" /> — <see langword="true" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="07e1c-338">The input to <paramref name="lockTaken" /> is <see langword="true" />.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="07e1c-339">Параметр <paramref name="obj" /> имеет значение <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="07e1c-339">The <paramref name="obj" /> parameter is <see langword="null" />.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="TryEnter">
      <MemberSignature Language="C#" Value="public static bool TryEnter (object obj, int millisecondsTimeout);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool TryEnter(object obj, int32 millisecondsTimeout) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Monitor.TryEnter(System.Object,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function TryEnter (obj As Object, millisecondsTimeout As Integer) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool TryEnter(System::Object ^ obj, int millisecondsTimeout);" />
      <MemberSignature Language="F#" Value="static member TryEnter : obj * int -&gt; bool" Usage="System.Threading.Monitor.TryEnter (obj, millisecondsTimeout)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="obj" Type="System.Object" />
        <Parameter Name="millisecondsTimeout" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="obj">
          <span data-ttu-id="07e1c-340">Объект, блокировка которого получается.</span>
          <span class="sxs-lookup">
            <span data-stu-id="07e1c-340">The object on which to acquire the lock.</span>
          </span>
        </param>
        <param name="millisecondsTimeout">
          <span data-ttu-id="07e1c-341">Количество миллисекунд, в течение которых ожидать блокировку.</span>
          <span class="sxs-lookup">
            <span data-stu-id="07e1c-341">The number of milliseconds to wait for the lock.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="07e1c-342">Пытается получить эксклюзивную блокировку указанного объекта на заданное количество миллисекунд.</span>
          <span class="sxs-lookup">
            <span data-stu-id="07e1c-342">Attempts, for the specified number of milliseconds, to acquire an exclusive lock on the specified object.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="07e1c-343">Значение <see langword="true" />, если текущий поток получает блокировку; в противном случае — значение <see langword="false" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="07e1c-343">
              <see langword="true" /> if the current thread acquires the lock; otherwise, <see langword="false" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="07e1c-344">Если `millisecondsTimeout` равняется <xref:System.Threading.Timeout.Infinite>, этот метод эквивалентен <xref:System.Threading.Monitor.Enter%2A>.</span><span class="sxs-lookup"><span data-stu-id="07e1c-344">If the `millisecondsTimeout` parameter equals <xref:System.Threading.Timeout.Infinite>, this method is equivalent to <xref:System.Threading.Monitor.Enter%2A>.</span></span> <span data-ttu-id="07e1c-345">Если `millisecondsTimeout` равен 0, этот метод эквивалентен <xref:System.Threading.Monitor.TryEnter%2A>.</span><span class="sxs-lookup"><span data-stu-id="07e1c-345">If `millisecondsTimeout` equals 0, this method is equivalent to <xref:System.Threading.Monitor.TryEnter%2A>.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="07e1c-346">Используйте <xref:System.Threading.Monitor> блокировка объектов (то есть ссылочные типы), не типы значений.</span><span class="sxs-lookup"><span data-stu-id="07e1c-346">Use <xref:System.Threading.Monitor> to lock objects (that is, reference types), not value types.</span></span> <span data-ttu-id="07e1c-347">Дополнительные сведения см. в разделе <xref:System.Threading.Monitor> статьи.</span><span class="sxs-lookup"><span data-stu-id="07e1c-347">For details, see the <xref:System.Threading.Monitor> article.</span></span>  
  
 <span data-ttu-id="07e1c-348">Чтобы убедиться, что поток не войдет в критический раздел, необходимо изучить возвращаемое значение метода и выполнения кода в критический раздел, только в том случае, если его возвращаемое значение `true`.</span><span class="sxs-lookup"><span data-stu-id="07e1c-348">To ensure that the thread does not enter the critical section, you should examine the method's return value and  execute code in the critical section only if its return value is `true`.</span></span> <span data-ttu-id="07e1c-349">В следующем фрагменте кода показан шаблон, используемый для вызова этого метода.</span><span class="sxs-lookup"><span data-stu-id="07e1c-349">The following code fragment shows the pattern used to call this method.</span></span> <span data-ttu-id="07e1c-350">Обратите внимание, что следует вызывать <xref:System.Threading.Monitor.Exit%2A> в `finally` блок, чтобы убедиться, что вызывающий поток освобождает блокировку критической секции, при возникновении исключения.</span><span class="sxs-lookup"><span data-stu-id="07e1c-350">Note that you should call <xref:System.Threading.Monitor.Exit%2A> in a `finally` block to ensure that the calling thread releases its lock on the critical section if an exception occurs.</span></span>  
  
 [!code-csharp[System.Threading.Monitor.TryEnter#3](~/samples/snippets/csharp/VS_Snippets_CLR_System/System.Threading.Monitor.TryEnter/cs/pattern1.cs#3)]
 [!code-vb[System.Threading.Monitor.TryEnter#3](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/System.Threading.Monitor.TryEnter/vb/pattern1.vb#3)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="07e1c-351">Параметр <paramref name="obj" /> имеет значение <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="07e1c-351">The <paramref name="obj" /> parameter is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <span data-ttu-id="07e1c-352">
            <paramref name="millisecondsTimeout" /> является отрицательным числом и не равно <see cref="F:System.Threading.Timeout.Infinite" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="07e1c-352">
              <paramref name="millisecondsTimeout" /> is negative, and not equal to <see cref="F:System.Threading.Timeout.Infinite" />.</span>
          </span>
        </exception>
        <altmember cref="T:System.Threading.Thread" />
      </Docs>
    </Member>
    <Member MemberName="TryEnter">
      <MemberSignature Language="C#" Value="public static bool TryEnter (object obj, TimeSpan timeout);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool TryEnter(object obj, valuetype System.TimeSpan timeout) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Monitor.TryEnter(System.Object,System.TimeSpan)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function TryEnter (obj As Object, timeout As TimeSpan) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool TryEnter(System::Object ^ obj, TimeSpan timeout);" />
      <MemberSignature Language="F#" Value="static member TryEnter : obj * TimeSpan -&gt; bool" Usage="System.Threading.Monitor.TryEnter (obj, timeout)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="obj" Type="System.Object" />
        <Parameter Name="timeout" Type="System.TimeSpan" />
      </Parameters>
      <Docs>
        <param name="obj">
          <span data-ttu-id="07e1c-353">Объект, блокировка которого получается.</span>
          <span class="sxs-lookup">
            <span data-stu-id="07e1c-353">The object on which to acquire the lock.</span>
          </span>
        </param>
        <param name="timeout">
          <span data-ttu-id="07e1c-354">Класс <see cref="T:System.TimeSpan" />, представляющий количество времени, в течение которого ожидается блокировка.</span>
          <span class="sxs-lookup">
            <span data-stu-id="07e1c-354">A <see cref="T:System.TimeSpan" /> representing the amount of time to wait for the lock.</span>
          </span>
          <span data-ttu-id="07e1c-355">Значение –1 миллисекунды обозначает бесконечное ожидание.</span>
          <span class="sxs-lookup">
            <span data-stu-id="07e1c-355">A value of –1 millisecond specifies an infinite wait.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="07e1c-356">Пытается получить эксклюзивную блокировку указанного объекта в течение заданного количества времени.</span>
          <span class="sxs-lookup">
            <span data-stu-id="07e1c-356">Attempts, for the specified amount of time, to acquire an exclusive lock on the specified object.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="07e1c-357">Значение <see langword="true" />, если текущий поток получает блокировку; в противном случае — значение <see langword="false" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="07e1c-357">
              <see langword="true" /> if the current thread acquires the lock; otherwise, <see langword="false" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="07e1c-358">Если значение `timeout` преобразуется в миллисекунды равно – 1, этот метод эквивалентен <xref:System.Threading.Monitor.Enter%2A>.</span><span class="sxs-lookup"><span data-stu-id="07e1c-358">If the value of the `timeout` parameter converted to milliseconds equals –1, this method is equivalent to <xref:System.Threading.Monitor.Enter%2A>.</span></span> <span data-ttu-id="07e1c-359">Если значение `timeout` равен 0, этот метод эквивалентен <xref:System.Threading.Monitor.TryEnter%2A>.</span><span class="sxs-lookup"><span data-stu-id="07e1c-359">If the value of `timeout` equals 0, this method is equivalent to <xref:System.Threading.Monitor.TryEnter%2A>.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="07e1c-360">Используйте <xref:System.Threading.Monitor> блокировка объектов (то есть ссылочные типы), не типы значений.</span><span class="sxs-lookup"><span data-stu-id="07e1c-360">Use <xref:System.Threading.Monitor> to lock objects (that is, reference types), not value types.</span></span> <span data-ttu-id="07e1c-361">Дополнительные сведения см. в разделе <xref:System.Threading.Monitor> разделе, посвященном классу.</span><span class="sxs-lookup"><span data-stu-id="07e1c-361">For details, see the <xref:System.Threading.Monitor> class topic.</span></span>  
  
 <span data-ttu-id="07e1c-362">Чтобы убедиться, что поток не войдет в критический раздел, необходимо изучить возвращаемое значение метода и выполнения кода в критический раздел, только в том случае, если его возвращаемое значение `true`.</span><span class="sxs-lookup"><span data-stu-id="07e1c-362">To ensure that the thread does not enter the critical section, you should examine the method's return value and  execute code in the critical section only if its return value is `true`.</span></span> <span data-ttu-id="07e1c-363">В следующем фрагменте кода показан шаблон, используемый для вызова этого метода.</span><span class="sxs-lookup"><span data-stu-id="07e1c-363">The following code fragment shows the pattern used to call this method.</span></span> <span data-ttu-id="07e1c-364">Обратите внимание, что следует вызывать <xref:System.Threading.Monitor.Exit%2A> в `finally` блок, чтобы убедиться, что вызывающий поток освобождает блокировку критической секции, при возникновении исключения.</span><span class="sxs-lookup"><span data-stu-id="07e1c-364">Note that you should call <xref:System.Threading.Monitor.Exit%2A> in a `finally` block to ensure that the calling thread releases its lock on the critical section if an exception occurs.</span></span>  
  
 [!code-csharp[System.Threading.Monitor.TryEnter#5](~/samples/snippets/csharp/VS_Snippets_CLR_System/System.Threading.Monitor.TryEnter/cs/pattern1.cs#5)]
 [!code-vb[System.Threading.Monitor.TryEnter#5](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/System.Threading.Monitor.TryEnter/vb/pattern1.vb#5)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="07e1c-365">Параметр <paramref name="obj" /> имеет значение <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="07e1c-365">The <paramref name="obj" /> parameter is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <span data-ttu-id="07e1c-366">Значение <paramref name="timeout" /> (в миллисекундах) является отрицательным. Оно не равно <see cref="F:System.Threading.Timeout.Infinite" /> (-1 миллисекунда) или больше <see cref="F:System.Int32.MaxValue" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="07e1c-366">The value of <paramref name="timeout" /> in milliseconds is negative and is not equal to <see cref="F:System.Threading.Timeout.Infinite" /> (–1 millisecond), or is greater than <see cref="F:System.Int32.MaxValue" />.</span>
          </span>
        </exception>
        <altmember cref="T:System.Threading.Thread" />
      </Docs>
    </Member>
    <Member MemberName="TryEnter">
      <MemberSignature Language="C#" Value="public static void TryEnter (object obj, int millisecondsTimeout, ref bool lockTaken);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void TryEnter(object obj, int32 millisecondsTimeout, bool&amp; lockTaken) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Monitor.TryEnter(System.Object,System.Int32,System.Boolean@)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub TryEnter (obj As Object, millisecondsTimeout As Integer, ByRef lockTaken As Boolean)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void TryEnter(System::Object ^ obj, int millisecondsTimeout, bool % lockTaken);" />
      <MemberSignature Language="F#" Value="static member TryEnter : obj * int *  -&gt; unit" Usage="System.Threading.Monitor.TryEnter (obj, millisecondsTimeout, lockTaken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="obj" Type="System.Object" />
        <Parameter Name="millisecondsTimeout" Type="System.Int32" />
        <Parameter Name="lockTaken" Type="System.Boolean&amp;" RefType="ref" />
      </Parameters>
      <Docs>
        <param name="obj">
          <span data-ttu-id="07e1c-367">Объект, блокировка которого получается.</span>
          <span class="sxs-lookup">
            <span data-stu-id="07e1c-367">The object on which to acquire the lock.</span>
          </span>
        </param>
        <param name="millisecondsTimeout">
          <span data-ttu-id="07e1c-368">Количество миллисекунд, в течение которых ожидать блокировку.</span>
          <span class="sxs-lookup">
            <span data-stu-id="07e1c-368">The number of milliseconds to wait for the lock.</span>
          </span>
        </param>
        <param name="lockTaken">
          <span data-ttu-id="07e1c-369">Результат попытки получить блокировку, переданную по ссылке.</span>
          <span class="sxs-lookup">
            <span data-stu-id="07e1c-369">The result of the attempt to acquire the lock, passed by reference.</span>
          </span>
          <span data-ttu-id="07e1c-370">Входное значение должно равняться <see langword="false" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="07e1c-370">The input must be <see langword="false" />.</span>
          </span>
          <span data-ttu-id="07e1c-371">Выходное значение <see langword="true" />, если блокировка получена; в противном случае — выходное значение <see langword="false" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="07e1c-371">The output is <see langword="true" /> if the lock is acquired; otherwise, the output is <see langword="false" />.</span>
          </span>
          <span data-ttu-id="07e1c-372">Выходное значение задается, даже если при попытке получить блокировку возникает исключение.</span>
          <span class="sxs-lookup">
            <span data-stu-id="07e1c-372">The output is set even if an exception occurs during the attempt to acquire the lock.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="07e1c-373">В течение заданного количества миллисекунд пытается получить монопольную блокировку указанного объекта и единым блоком задает значение, указывающее, была ли выполнена блокировка.</span>
          <span class="sxs-lookup">
            <span data-stu-id="07e1c-373">Attempts, for the specified number of milliseconds, to acquire an exclusive lock on the specified object, and atomically sets a value that indicates whether the lock was taken.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="07e1c-374">Если `millisecondsTimeout` равняется <xref:System.Threading.Timeout.Infinite>, этот метод эквивалентен <xref:System.Threading.Monitor.Enter%28System.Object%29>.</span><span class="sxs-lookup"><span data-stu-id="07e1c-374">If the `millisecondsTimeout` parameter equals <xref:System.Threading.Timeout.Infinite>, this method is equivalent to <xref:System.Threading.Monitor.Enter%28System.Object%29>.</span></span> <span data-ttu-id="07e1c-375">Если `millisecondsTimeout` равен 0, этот метод эквивалентен <xref:System.Threading.Monitor.TryEnter%28System.Object%29>.</span><span class="sxs-lookup"><span data-stu-id="07e1c-375">If `millisecondsTimeout` equals 0, this method is equivalent to <xref:System.Threading.Monitor.TryEnter%28System.Object%29>.</span></span>  
  
 <span data-ttu-id="07e1c-376">Если не была выполнена блокировка, так как возникло исключение, переменная, указанная для `lockTaken` параметр `false` после завершения этого метода.</span><span class="sxs-lookup"><span data-stu-id="07e1c-376">If the lock was not taken because an exception was thrown, the variable specified for the `lockTaken` parameter is `false` after this method ends.</span></span> <span data-ttu-id="07e1c-377">Это позволяет программе определить, во всех случаях необходимость для снятия блокировки.</span><span class="sxs-lookup"><span data-stu-id="07e1c-377">This allows the program to determine, in all cases, whether it is necessary to release the lock.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="07e1c-378">Используйте <xref:System.Threading.Monitor> блокировка объектов (то есть ссылочные типы), не типы значений.</span><span class="sxs-lookup"><span data-stu-id="07e1c-378">Use <xref:System.Threading.Monitor> to lock objects (that is, reference types), not value types.</span></span> <span data-ttu-id="07e1c-379">Дополнительные сведения см. в разделе <xref:System.Threading.Monitor> разделе, посвященном классу.</span><span class="sxs-lookup"><span data-stu-id="07e1c-379">For more information, see the <xref:System.Threading.Monitor> class topic.</span></span>  
  
 <span data-ttu-id="07e1c-380">Чтобы убедиться, что поток не войдет в критический раздел, необходимо проверить значение `lockTaken` и выполнять код в критический раздел, только в том случае, если его значение равно `true`.</span><span class="sxs-lookup"><span data-stu-id="07e1c-380">To ensure that the thread does not enter the critical section, you should examine the value of `lockTaken` and  execute code in the critical section only if its value is `true`.</span></span> <span data-ttu-id="07e1c-381">В следующем фрагменте кода показан шаблон, используемый для вызова этого метода.</span><span class="sxs-lookup"><span data-stu-id="07e1c-381">The following code fragment shows the pattern used to call this method.</span></span> <span data-ttu-id="07e1c-382">Обратите внимание, что следует вызывать <xref:System.Threading.Monitor.Exit%2A> в `finally` блок, чтобы убедиться, что вызывающий поток освобождает блокировку критической секции, при возникновении исключения.</span><span class="sxs-lookup"><span data-stu-id="07e1c-382">Note that you should call <xref:System.Threading.Monitor.Exit%2A> in a `finally` block to ensure that the calling thread releases its lock on the critical section if an exception occurs.</span></span>  
  
 [!code-csharp[System.Threading.Monitor.TryEnter#4](~/samples/snippets/csharp/VS_Snippets_CLR_System/System.Threading.Monitor.TryEnter/cs/pattern1.cs#4)]
 [!code-vb[System.Threading.Monitor.TryEnter#4](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/System.Threading.Monitor.TryEnter/vb/pattern1.vb#4)]  
  
   
  
## Examples  
 <span data-ttu-id="07e1c-383">В следующем коде показано типичное использование <xref:System.Threading.Monitor.TryEnter%28System.Object%2CSystem.Boolean%40%29> перегрузки метода.</span><span class="sxs-lookup"><span data-stu-id="07e1c-383">The following code shows the basic pattern for using the <xref:System.Threading.Monitor.TryEnter%28System.Object%2CSystem.Boolean%40%29> method overload.</span></span> <span data-ttu-id="07e1c-384">Эта перегрузка всегда устанавливает значение переменной, которая передается `ref` параметра (`ByRef` в Visual Basic) `lockTaken`, даже если метод создает исключение, поэтому значение переменной является надежным способом для проверки блокировки должен быть выпущен.</span><span class="sxs-lookup"><span data-stu-id="07e1c-384">This overload always sets the value of the variable that is passed to the `ref` parameter (`ByRef` in Visual Basic) `lockTaken`, even if the method throws an exception, so the value of the variable is a reliable way to test whether the lock has to be released.</span></span>  
  
 [!code-csharp[System.Threading.Monitor.Enter#4](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.threading.monitor.enter/cs/example.cs#4)]
 [!code-vb[System.Threading.Monitor.Enter#4](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.threading.monitor.enter/vb/example.vb#4)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="07e1c-385">Входные данные для <paramref name="lockTaken" /> — <see langword="true" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="07e1c-385">The input to <paramref name="lockTaken" /> is <see langword="true" />.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="07e1c-386">Параметр <paramref name="obj" /> имеет значение <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="07e1c-386">The <paramref name="obj" /> parameter is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <span data-ttu-id="07e1c-387">
            <paramref name="millisecondsTimeout" /> является отрицательным числом и не равно <see cref="F:System.Threading.Timeout.Infinite" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="07e1c-387">
              <paramref name="millisecondsTimeout" /> is negative, and not equal to <see cref="F:System.Threading.Timeout.Infinite" />.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="TryEnter">
      <MemberSignature Language="C#" Value="public static void TryEnter (object obj, TimeSpan timeout, ref bool lockTaken);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void TryEnter(object obj, valuetype System.TimeSpan timeout, bool&amp; lockTaken) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Monitor.TryEnter(System.Object,System.TimeSpan,System.Boolean@)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub TryEnter (obj As Object, timeout As TimeSpan, ByRef lockTaken As Boolean)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void TryEnter(System::Object ^ obj, TimeSpan timeout, bool % lockTaken);" />
      <MemberSignature Language="F#" Value="static member TryEnter : obj * TimeSpan *  -&gt; unit" Usage="System.Threading.Monitor.TryEnter (obj, timeout, lockTaken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="obj" Type="System.Object" />
        <Parameter Name="timeout" Type="System.TimeSpan" />
        <Parameter Name="lockTaken" Type="System.Boolean&amp;" RefType="ref" />
      </Parameters>
      <Docs>
        <param name="obj">
          <span data-ttu-id="07e1c-388">Объект, блокировка которого получается.</span>
          <span class="sxs-lookup">
            <span data-stu-id="07e1c-388">The object on which to acquire the lock.</span>
          </span>
        </param>
        <param name="timeout">
          <span data-ttu-id="07e1c-389">Период времени, в течение которого ожидается блокировка.</span>
          <span class="sxs-lookup">
            <span data-stu-id="07e1c-389">The amount of time to wait for the lock.</span>
          </span>
          <span data-ttu-id="07e1c-390">Значение –1 миллисекунды обозначает бесконечное ожидание.</span>
          <span class="sxs-lookup">
            <span data-stu-id="07e1c-390">A value of –1 millisecond specifies an infinite wait.</span>
          </span>
        </param>
        <param name="lockTaken">
          <span data-ttu-id="07e1c-391">Результат попытки получить блокировку, переданную по ссылке.</span>
          <span class="sxs-lookup">
            <span data-stu-id="07e1c-391">The result of the attempt to acquire the lock, passed by reference.</span>
          </span>
          <span data-ttu-id="07e1c-392">Входное значение должно равняться <see langword="false" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="07e1c-392">The input must be <see langword="false" />.</span>
          </span>
          <span data-ttu-id="07e1c-393">Выходное значение <see langword="true" />, если блокировка получена; в противном случае — выходное значение <see langword="false" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="07e1c-393">The output is <see langword="true" /> if the lock is acquired; otherwise, the output is <see langword="false" />.</span>
          </span>
          <span data-ttu-id="07e1c-394">Выходное значение задается, даже если при попытке получить блокировку возникает исключение.</span>
          <span class="sxs-lookup">
            <span data-stu-id="07e1c-394">The output is set even if an exception occurs during the attempt to acquire the lock.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="07e1c-395">В течение заданного периода времени пытается получить монопольную блокировку указанного объекта и единым блоком задает значение, указывающее, была ли выполнена блокировка.</span>
          <span class="sxs-lookup">
            <span data-stu-id="07e1c-395">Attempts, for the specified amount of time, to acquire an exclusive lock on the specified object, and atomically sets a value that indicates whether the lock was taken.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="07e1c-396">Если значение `timeout` преобразуется в миллисекунды равно – 1, этот метод эквивалентен <xref:System.Threading.Monitor.Enter%28System.Object%29>.</span><span class="sxs-lookup"><span data-stu-id="07e1c-396">If the value of the `timeout` parameter converted to milliseconds equals –1, this method is equivalent to <xref:System.Threading.Monitor.Enter%28System.Object%29>.</span></span> <span data-ttu-id="07e1c-397">Если значение `timeout` равен 0, этот метод эквивалентен <xref:System.Threading.Monitor.TryEnter%28System.Object%29>.</span><span class="sxs-lookup"><span data-stu-id="07e1c-397">If the value of `timeout` equals 0, this method is equivalent to <xref:System.Threading.Monitor.TryEnter%28System.Object%29>.</span></span>  
  
 <span data-ttu-id="07e1c-398">Если не была выполнена блокировка, так как возникло исключение, переменная, указанная для `lockTaken` параметр `false` после завершения этого метода.</span><span class="sxs-lookup"><span data-stu-id="07e1c-398">If the lock was not taken because an exception was thrown, the variable specified for the `lockTaken` parameter is `false` after this method ends.</span></span> <span data-ttu-id="07e1c-399">Это позволяет программе определить, во всех случаях необходимость для снятия блокировки.</span><span class="sxs-lookup"><span data-stu-id="07e1c-399">This allows the program to determine, in all cases, whether it is necessary to release the lock.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="07e1c-400">Используйте <xref:System.Threading.Monitor> блокировка объектов (то есть ссылочные типы), не типы значений.</span><span class="sxs-lookup"><span data-stu-id="07e1c-400">Use <xref:System.Threading.Monitor> to lock objects (that is, reference types), not value types.</span></span> <span data-ttu-id="07e1c-401">Дополнительные сведения см. в разделе <xref:System.Threading.Monitor> разделе, посвященном классу.</span><span class="sxs-lookup"><span data-stu-id="07e1c-401">For more information, see the <xref:System.Threading.Monitor> class topic.</span></span>  
  
 <span data-ttu-id="07e1c-402">Чтобы убедиться, что поток не войдет в критический раздел, необходимо проверить значение `lockTaken` и выполнять код в критический раздел, только в том случае, если его значение равно `true`.</span><span class="sxs-lookup"><span data-stu-id="07e1c-402">To ensure that the thread does not enter the critical section, you should examine the value of `lockTaken` and  execute code in the critical section only if its value is `true`.</span></span> <span data-ttu-id="07e1c-403">В следующем фрагменте кода показан шаблон, используемый для вызова этого метода.</span><span class="sxs-lookup"><span data-stu-id="07e1c-403">The following code fragment shows the pattern used to call this method.</span></span> <span data-ttu-id="07e1c-404">Обратите внимание, что следует вызывать <xref:System.Threading.Monitor.Exit%2A> в `finally` блок, чтобы убедиться, что вызывающий поток освобождает блокировку критической секции, при возникновении исключения.</span><span class="sxs-lookup"><span data-stu-id="07e1c-404">Note that you should call <xref:System.Threading.Monitor.Exit%2A> in a `finally` block to ensure that the calling thread releases its lock on the critical section if an exception occurs.</span></span>  
  
 [!code-csharp[System.Threading.Monitor.TryEnter#6](~/samples/snippets/csharp/VS_Snippets_CLR_System/System.Threading.Monitor.TryEnter/cs/pattern1.cs#6)]
 [!code-vb[System.Threading.Monitor.TryEnter#6](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/System.Threading.Monitor.TryEnter/vb/pattern1.vb#6)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="07e1c-405">Входные данные для <paramref name="lockTaken" /> — <see langword="true" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="07e1c-405">The input to <paramref name="lockTaken" /> is <see langword="true" />.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="07e1c-406">Параметр <paramref name="obj" /> имеет значение <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="07e1c-406">The <paramref name="obj" /> parameter is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <span data-ttu-id="07e1c-407">Значение <paramref name="timeout" /> (в миллисекундах) является отрицательным. Оно не равно <see cref="F:System.Threading.Timeout.Infinite" /> (-1 миллисекунда) или больше <see cref="F:System.Int32.MaxValue" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="07e1c-407">The value of <paramref name="timeout" /> in milliseconds is negative and is not equal to <see cref="F:System.Threading.Timeout.Infinite" /> (–1 millisecond), or is greater than <see cref="F:System.Int32.MaxValue" />.</span>
          </span>
        </exception>
        <altmember cref="T:System.Threading.Thread" />
      </Docs>
    </Member>
    <MemberGroup MemberName="Wait">
      <AssemblyInfo>
        <AssemblyName>System.Threading</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="07e1c-408">Освобождает блокировку объекта и блокирует текущий поток до тех пор, пока тот не получит блокировку снова.</span>
          <span class="sxs-lookup">
            <span data-stu-id="07e1c-408">Releases the lock on an object and blocks the current thread until it reacquires the lock.</span>
          </span>
        </summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Wait">
      <MemberSignature Language="C#" Value="public static bool Wait (object obj);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool Wait(object obj) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Monitor.Wait(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Wait (obj As Object) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool Wait(System::Object ^ obj);" />
      <MemberSignature Language="F#" Value="static member Wait : obj -&gt; bool" Usage="System.Threading.Monitor.Wait obj" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="obj" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="obj">
          <span data-ttu-id="07e1c-409">Объект, в котором следует ожидать.</span>
          <span class="sxs-lookup">
            <span data-stu-id="07e1c-409">The object on which to wait.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="07e1c-410">Освобождает блокировку объекта и блокирует текущий поток до тех пор, пока тот не получит блокировку снова.</span>
          <span class="sxs-lookup">
            <span data-stu-id="07e1c-410">Releases the lock on an object and blocks the current thread until it reacquires the lock.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="07e1c-411">Значение <see langword="true" />, если вызов осуществил возврат из-за того, что вызывающий поток заново получил блокировку заданного объекта.</span>
          <span class="sxs-lookup">
            <span data-stu-id="07e1c-411">
              <see langword="true" /> if the call returned because the caller reacquired the lock for the specified object.</span>
          </span>
          <span data-ttu-id="07e1c-412">Этот метод не осуществляет возврат, если блокировка вновь не получена.</span>
          <span class="sxs-lookup">
            <span data-stu-id="07e1c-412">This method does not return if the lock is not reacquired.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="07e1c-413">Поток, который в данный момент принадлежит блокировка указанного объекта вызывает этот метод, чтобы освободить объект доступа к ней другим потоком.</span><span class="sxs-lookup"><span data-stu-id="07e1c-413">The thread that currently owns the lock on the specified object invokes this method in order to release the object so that another thread can access it.</span></span> <span data-ttu-id="07e1c-414">Вызывающий поток блокируется, ожидая получения блокировки.</span><span class="sxs-lookup"><span data-stu-id="07e1c-414">The caller is blocked while waiting to reacquire the lock.</span></span> <span data-ttu-id="07e1c-415">Этот метод вызывается, когда вызывающий объект должен ожидать изменения состояния, которые произойдут в результате операций другого потока.</span><span class="sxs-lookup"><span data-stu-id="07e1c-415">This method is called when the caller needs to wait for a state change that will occur as a result of another thread's operations.</span></span>  
  
 <span data-ttu-id="07e1c-416">Если поток вызывает `Wait`, он освобождает блокировку объекта и переходит в очередь ожидания объекта.</span><span class="sxs-lookup"><span data-stu-id="07e1c-416">When a thread calls `Wait`, it releases the lock on the object and enters the object's waiting queue.</span></span> <span data-ttu-id="07e1c-417">Следующий поток в очередь готовности объекта (если таковой имеется), получает блокировку и эксклюзивное использование объекта.</span><span class="sxs-lookup"><span data-stu-id="07e1c-417">The next thread in the object's ready queue (if there is one) acquires the lock and has exclusive use of the object.</span></span> <span data-ttu-id="07e1c-418">Все потоки, которые вызывают `Wait` остаются в очереди ожидания, пока не получат сигнала от <xref:System.Threading.Monitor.Pulse%2A> или <xref:System.Threading.Monitor.PulseAll%2A>, посланного владельцем блокировки.</span><span class="sxs-lookup"><span data-stu-id="07e1c-418">All threads that call `Wait` remain in the waiting queue until they receive a signal from <xref:System.Threading.Monitor.Pulse%2A> or <xref:System.Threading.Monitor.PulseAll%2A>, sent by the owner of the lock.</span></span> <span data-ttu-id="07e1c-419">Если `Pulse` отправляется, затрагивается только поток в голове очереди ожидания.</span><span class="sxs-lookup"><span data-stu-id="07e1c-419">If `Pulse` is sent, only the thread at the head of the waiting queue is affected.</span></span> <span data-ttu-id="07e1c-420">Если `PulseAll` отправляется, затрагиваются все потоки, которые ожидают объект.</span><span class="sxs-lookup"><span data-stu-id="07e1c-420">If `PulseAll` is sent, all threads that are waiting for the object are affected.</span></span> <span data-ttu-id="07e1c-421">При получении сигнала, оставьте в очередь ожидания один или несколько потоков и введите очередь готовности.</span><span class="sxs-lookup"><span data-stu-id="07e1c-421">When the signal is received, one or more threads leave the waiting queue and enter the ready queue.</span></span> <span data-ttu-id="07e1c-422">Поток в очередь готовности разрешается получения блокировки.</span><span class="sxs-lookup"><span data-stu-id="07e1c-422">A thread in the ready queue is permitted to reacquire the lock.</span></span>  
  
 <span data-ttu-id="07e1c-423">Этот метод возвращает, если вызывающий поток снова получает блокировку объекта.</span><span class="sxs-lookup"><span data-stu-id="07e1c-423">This method returns when the calling thread reacquires the lock on the object.</span></span> <span data-ttu-id="07e1c-424">Обратите внимание, что этот метод неограниченно блокируется, если владелец блокировки не вызывает `Pulse` или `PulseAll`.</span><span class="sxs-lookup"><span data-stu-id="07e1c-424">Note that this method blocks indefinitely if the holder of the lock does not call `Pulse` or `PulseAll`.</span></span>  
  
 <span data-ttu-id="07e1c-425">Вызывающий поток выполняет `Wait` один раз, независимо от того, сколько раз <xref:System.Threading.Monitor.Enter%2A> был вызван для указанного объекта.</span><span class="sxs-lookup"><span data-stu-id="07e1c-425">The caller executes `Wait` once, regardless of the number of times <xref:System.Threading.Monitor.Enter%2A> has been invoked for the specified object.</span></span> <span data-ttu-id="07e1c-426">По существу `Wait` метод сохраняет количество раз, вызывающий инструкцию `Enter` в объекте и вызывает `Exit` столько раз, сколько нужно, чтобы полностью освободить объект с блокировкой.</span><span class="sxs-lookup"><span data-stu-id="07e1c-426">Conceptually, the `Wait` method stores the number of times the caller invoked `Enter` on the object and invokes `Exit` as many times as necessary to fully release the locked object.</span></span> <span data-ttu-id="07e1c-427">Вызывающий объект затем блокируется, ожидая получения объекта.</span><span class="sxs-lookup"><span data-stu-id="07e1c-427">The caller then blocks while waiting to reacquire the object.</span></span> <span data-ttu-id="07e1c-428">Если вызывающий поток заново получает блокировку, система вызывает `Enter` столько раз, сколько необходимо для восстановления сохраненного `Enter` числа.</span><span class="sxs-lookup"><span data-stu-id="07e1c-428">When the caller reacquires the lock, the system calls `Enter` as many times as necessary to restore the saved `Enter` count for the caller.</span></span> <span data-ttu-id="07e1c-429">Вызов `Wait` снимает блокировку указанного объекта; если вызывающий объект является владельцем блокировки на другие объекты, они не освобождаются.</span><span class="sxs-lookup"><span data-stu-id="07e1c-429">Calling `Wait` releases the lock for the specified object only; if the caller is the owner of locks on other objects, these locks are not released.</span></span>  
  
 <span data-ttu-id="07e1c-430">Обратите внимание, что синхронизированный объект имеет несколько ссылок, в том числе ссылку на поток, удерживающий блокировку, ссылку на очередь готовности, который содержит потоки, готовые к получению блокировки, и ссылку на очередь ожидания, в настоящее время которой содержит потоки, ожидающие уведомления об изменении состояния объекта.</span><span class="sxs-lookup"><span data-stu-id="07e1c-430">Note that a synchronized object holds several references, including a reference to the thread that currently holds the lock, a reference to the ready queue, which contains the threads that are ready to obtain the lock, and a reference to the waiting queue, which contains the threads that are waiting for notification of a change in the object's state.</span></span>  
  
 <span data-ttu-id="07e1c-431"><xref:System.Threading.Monitor.Pulse%2A>, <xref:System.Threading.Monitor.PulseAll%2A>, И `Wait` методы должны быть вызваны из синхронизированного блока кода.</span><span class="sxs-lookup"><span data-stu-id="07e1c-431">The <xref:System.Threading.Monitor.Pulse%2A>, <xref:System.Threading.Monitor.PulseAll%2A>, and `Wait` methods must be invoked from within a synchronized block of code.</span></span>  
  
 <span data-ttu-id="07e1c-432">В примечаниях к описанию <xref:System.Threading.Monitor.Pulse%2A> метод объяснить, что произойдет, если <xref:System.Threading.Monitor.Pulse%2A> вызывается при отсутствии ожидающих потоков.</span><span class="sxs-lookup"><span data-stu-id="07e1c-432">The remarks for the <xref:System.Threading.Monitor.Pulse%2A> method explain what happens if <xref:System.Threading.Monitor.Pulse%2A> is called when no threads are waiting.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="07e1c-433">Параметр <paramref name="obj" /> имеет значение <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="07e1c-433">The <paramref name="obj" /> parameter is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.Threading.SynchronizationLockException">
          <span data-ttu-id="07e1c-434">Вызывающий поток не владеет блокировкой для указанного объекта.</span>
          <span class="sxs-lookup">
            <span data-stu-id="07e1c-434">The calling thread does not own the lock for the specified object.</span>
          </span>
        </exception>
        <exception cref="T:System.Threading.ThreadInterruptedException">
          <span data-ttu-id="07e1c-435">Поток, который вызывает <see langword="Wait" />, позже прерывается из состояния ожидания.</span>
          <span class="sxs-lookup">
            <span data-stu-id="07e1c-435">The thread that invokes <see langword="Wait" /> is later interrupted from the waiting state.</span>
          </span>
          <span data-ttu-id="07e1c-436">Это происходит, когда другой поток вызывает метод <see cref="M:System.Threading.Thread.Interrupt" /> этого потока.</span>
          <span class="sxs-lookup">
            <span data-stu-id="07e1c-436">This happens when another thread calls this thread's <see cref="M:System.Threading.Thread.Interrupt" /> method.</span>
          </span>
        </exception>
        <altmember cref="T:System.Threading.Thread" />
      </Docs>
    </Member>
    <Member MemberName="Wait">
      <MemberSignature Language="C#" Value="public static bool Wait (object obj, int millisecondsTimeout);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool Wait(object obj, int32 millisecondsTimeout) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Monitor.Wait(System.Object,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Wait (obj As Object, millisecondsTimeout As Integer) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool Wait(System::Object ^ obj, int millisecondsTimeout);" />
      <MemberSignature Language="F#" Value="static member Wait : obj * int -&gt; bool" Usage="System.Threading.Monitor.Wait (obj, millisecondsTimeout)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="obj" Type="System.Object" />
        <Parameter Name="millisecondsTimeout" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="obj">
          <span data-ttu-id="07e1c-437">Объект, в котором следует ожидать.</span>
          <span class="sxs-lookup">
            <span data-stu-id="07e1c-437">The object on which to wait.</span>
          </span>
        </param>
        <param name="millisecondsTimeout">
          <span data-ttu-id="07e1c-438">Количество миллисекунд для ожидания постановки в очередь готовности.</span>
          <span class="sxs-lookup">
            <span data-stu-id="07e1c-438">The number of milliseconds to wait before the thread enters the ready queue.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="07e1c-439">Освобождает блокировку объекта и блокирует текущий поток до тех пор, пока тот не получит блокировку снова.</span>
          <span class="sxs-lookup">
            <span data-stu-id="07e1c-439">Releases the lock on an object and blocks the current thread until it reacquires the lock.</span>
          </span>
          <span data-ttu-id="07e1c-440">Если указанные временные интервалы истекают, поток встает в очередь готовности.</span>
          <span class="sxs-lookup">
            <span data-stu-id="07e1c-440">If the specified time-out interval elapses, the thread enters the ready queue.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="07e1c-441">Значение <see langword="true" />, если блокировка была получена заново до истечения заданного времени; значение <see langword="false" />, если блокировка была получена заново по истечении заданного времени.</span>
          <span class="sxs-lookup">
            <span data-stu-id="07e1c-441">
              <see langword="true" /> if the lock was reacquired before the specified time elapsed; <see langword="false" /> if the lock was reacquired after the specified time elapsed.</span>
          </span>
          <span data-ttu-id="07e1c-442">Этот метод не осуществляет возврат, если блокировка не была получена.</span>
          <span class="sxs-lookup">
            <span data-stu-id="07e1c-442">The method does not return until the lock is reacquired.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="07e1c-443">Этот метод не возвращает до получения монопольной блокировки на `obj` параметра.</span><span class="sxs-lookup"><span data-stu-id="07e1c-443">This method does not return until it reacquires an exclusive lock on the `obj` parameter.</span></span>  
  
 <span data-ttu-id="07e1c-444">Поток, который в данный момент принадлежит блокировка указанного объекта вызывает этот метод, чтобы освободить объект доступа к ней другим потоком.</span><span class="sxs-lookup"><span data-stu-id="07e1c-444">The thread that currently owns the lock on the specified object invokes this method in order to release the object so that another thread can access it.</span></span> <span data-ttu-id="07e1c-445">Вызывающий поток блокируется, ожидая получения блокировки.</span><span class="sxs-lookup"><span data-stu-id="07e1c-445">The caller is blocked while waiting to reacquire the lock.</span></span> <span data-ttu-id="07e1c-446">Этот метод вызывается, когда вызывающий объект должен ожидать изменения состояния, которые произойдут в результате операций другого потока.</span><span class="sxs-lookup"><span data-stu-id="07e1c-446">This method is called when the caller needs to wait for a state change that will occur as a result of another thread's operations.</span></span>  
  
 <span data-ttu-id="07e1c-447">Время ожидания гарантирует, что текущий поток не блокируется неограниченно, если другой поток освобождает блокировку без предварительного вызова функции <xref:System.Threading.Monitor.Pulse%2A> или <xref:System.Threading.Monitor.PulseAll%2A> метод.</span><span class="sxs-lookup"><span data-stu-id="07e1c-447">The time-out ensures that the current thread does not block indefinitely if another thread releases the lock without first calling the <xref:System.Threading.Monitor.Pulse%2A> or <xref:System.Threading.Monitor.PulseAll%2A> method.</span></span> <span data-ttu-id="07e1c-448">Он также перемещает поток в очередь готовности, минуя другие потоки предшествует ей в очереди ожидания, таким образом, чтобы быстрее получения блокировки.</span><span class="sxs-lookup"><span data-stu-id="07e1c-448">It also moves the thread to the ready queue, bypassing other threads ahead of it in the wait queue, so that it can reacquire the lock sooner.</span></span> <span data-ttu-id="07e1c-449">Поток можно проверить возвращаемое значение <xref:System.Threading.Monitor.Wait%2A> метод для определения того, получена ли его блокировки до истечения времени ожидания. Поток можно оценить условия, которые привело к введите ожидания, и если необходимости вызова <xref:System.Threading.Monitor.Wait%2A> метод снова.</span><span class="sxs-lookup"><span data-stu-id="07e1c-449">The thread can test the return value of the <xref:System.Threading.Monitor.Wait%2A> method to determine whether it reacquired the lock prior to the time-out. The thread can evaluate the conditions that caused it to enter the wait, and if necessary call the <xref:System.Threading.Monitor.Wait%2A> method again.</span></span>  
  
 <span data-ttu-id="07e1c-450">Если поток вызывает `Wait`, он освобождает блокировку объекта и переходит в очередь ожидания объекта.</span><span class="sxs-lookup"><span data-stu-id="07e1c-450">When a thread calls `Wait`, it releases the lock on the object and enters the object's waiting queue.</span></span> <span data-ttu-id="07e1c-451">Следующий поток в очередь готовности объекта (если таковой имеется), получает блокировку и эксклюзивное использование объекта.</span><span class="sxs-lookup"><span data-stu-id="07e1c-451">The next thread in the object's ready queue (if there is one) acquires the lock and has exclusive use of the object.</span></span> <span data-ttu-id="07e1c-452">Поток, вызвавший `Wait` вызывающий поток, удерживающий блокировку остается в очереди ожидания либо до <xref:System.Threading.Monitor.PulseAll%2A>, или он является следующим в очереди, и вызывающий поток, удерживающий блокировку <xref:System.Threading.Monitor.Pulse%2A>.</span><span class="sxs-lookup"><span data-stu-id="07e1c-452">The thread that invoked `Wait` remains in the waiting queue until either a thread that holds the lock invokes <xref:System.Threading.Monitor.PulseAll%2A>, or it is the next in the queue and a thread that holds the lock invokes <xref:System.Threading.Monitor.Pulse%2A>.</span></span> <span data-ttu-id="07e1c-453">Тем не менее если `millisecondsTimeout` истечет раньше, чем другой поток вызывает этот объект <xref:System.Threading.Monitor.Pulse%2A> или <xref:System.Threading.Monitor.PulseAll%2A> метод, исходный поток перемещается в очередь готовности, чтобы снова получить блокировку.</span><span class="sxs-lookup"><span data-stu-id="07e1c-453">However, if `millisecondsTimeout` elapses before another thread invokes this object's <xref:System.Threading.Monitor.Pulse%2A> or <xref:System.Threading.Monitor.PulseAll%2A> method, the original thread is moved to the ready queue in order to regain the lock.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="07e1c-454">Если <xref:System.Threading.Timeout.Infinite> указывается для `millisecondsTimeout` параметра, этот метод неограниченно блокируется, если владелец блокировки вызывает <xref:System.Threading.Monitor.Pulse%2A> или <xref:System.Threading.Monitor.PulseAll%2A>.</span><span class="sxs-lookup"><span data-stu-id="07e1c-454">If <xref:System.Threading.Timeout.Infinite> is specified for the `millisecondsTimeout` parameter, this method blocks indefinitely unless the holder of the lock calls <xref:System.Threading.Monitor.Pulse%2A> or <xref:System.Threading.Monitor.PulseAll%2A>.</span></span> <span data-ttu-id="07e1c-455">Если `millisecondsTimeout` равно нулю, поток, вызывающий `Wait` снимает блокировку и затем немедленно постановки в очередь готовности, чтобы снова получить блокировку.</span><span class="sxs-lookup"><span data-stu-id="07e1c-455">If `millisecondsTimeout` equals 0, the thread that calls `Wait` releases the lock and then immediately enters the ready queue in order to regain the lock.</span></span>  
  
 <span data-ttu-id="07e1c-456">Вызывающий поток выполняет `Wait` один раз, независимо от того, сколько раз <xref:System.Threading.Monitor.Enter%2A> был вызван для указанного объекта.</span><span class="sxs-lookup"><span data-stu-id="07e1c-456">The caller executes `Wait` once, regardless of the number of times <xref:System.Threading.Monitor.Enter%2A> has been invoked for the specified object.</span></span> <span data-ttu-id="07e1c-457">По существу `Wait` метод сохраняет количество раз, вызывающий инструкцию <xref:System.Threading.Monitor.Enter%2A> в объекте и вызывает <xref:System.Threading.Monitor.Exit%2A> столько раз, сколько нужно, чтобы полностью освободить объект с блокировкой.</span><span class="sxs-lookup"><span data-stu-id="07e1c-457">Conceptually, the `Wait` method stores the number of times the caller invoked <xref:System.Threading.Monitor.Enter%2A> on the object and invokes <xref:System.Threading.Monitor.Exit%2A> as many times as necessary to fully release the locked object.</span></span> <span data-ttu-id="07e1c-458">Вызывающий объект затем блокируется, ожидая получения объекта.</span><span class="sxs-lookup"><span data-stu-id="07e1c-458">The caller then blocks while waiting to reacquire the object.</span></span> <span data-ttu-id="07e1c-459">Если вызывающий поток заново получает блокировку, система вызывает <xref:System.Threading.Monitor.Enter%2A> столько раз, сколько необходимо для восстановления сохраненного <xref:System.Threading.Monitor.Enter%2A> числа.</span><span class="sxs-lookup"><span data-stu-id="07e1c-459">When the caller reacquires the lock, the system calls <xref:System.Threading.Monitor.Enter%2A> as many times as necessary to restore the saved <xref:System.Threading.Monitor.Enter%2A> count for the caller.</span></span> <span data-ttu-id="07e1c-460">Вызов `Wait` снимает блокировку указанного объекта; если вызывающий объект является владельцем блокировки на другие объекты, они не освобождаются.</span><span class="sxs-lookup"><span data-stu-id="07e1c-460">Calling `Wait` releases the lock for the specified object only; if the caller is the owner of locks on other objects, these locks are not released.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="07e1c-461">Синхронизированный объект имеет несколько ссылок, в том числе ссылку на поток, удерживающий блокировку, ссылку на очередь готовности, который содержит потоки, готовые к получению блокировки, и ссылку на очередь ожидания, который содержит в настоящее время потоки, ожидающие получать уведомления об изменении состояния объекта.</span><span class="sxs-lookup"><span data-stu-id="07e1c-461">A synchronized object holds several references, including a reference to the thread that currently holds the lock, a reference to the ready queue, which contains the threads that are ready to obtain the lock, and a reference to the waiting queue, which contains the threads that are waiting for notification of a change in the object's state.</span></span>  
  
 <span data-ttu-id="07e1c-462"><xref:System.Threading.Monitor.Pulse%2A>, <xref:System.Threading.Monitor.PulseAll%2A>, И `Wait` методы должны быть вызваны из синхронизированного блока кода.</span><span class="sxs-lookup"><span data-stu-id="07e1c-462">The <xref:System.Threading.Monitor.Pulse%2A>, <xref:System.Threading.Monitor.PulseAll%2A>, and `Wait` methods must be invoked from within a synchronized block of code.</span></span>  
  
 <span data-ttu-id="07e1c-463">В примечаниях к описанию <xref:System.Threading.Monitor.Pulse%2A> метод объяснить, что произойдет, если <xref:System.Threading.Monitor.Pulse%2A> вызывается при отсутствии ожидающих потоков.</span><span class="sxs-lookup"><span data-stu-id="07e1c-463">The remarks for the <xref:System.Threading.Monitor.Pulse%2A> method explain what happens if <xref:System.Threading.Monitor.Pulse%2A> is called when no threads are waiting.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="07e1c-464">Параметр <paramref name="obj" /> имеет значение <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="07e1c-464">The <paramref name="obj" /> parameter is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.Threading.SynchronizationLockException">
          <span data-ttu-id="07e1c-465">Вызывающий поток не владеет блокировкой для указанного объекта.</span>
          <span class="sxs-lookup">
            <span data-stu-id="07e1c-465">The calling thread does not own the lock for the specified object.</span>
          </span>
        </exception>
        <exception cref="T:System.Threading.ThreadInterruptedException">
          <span data-ttu-id="07e1c-466">Поток, который вызывает <see langword="Wait" />, позже прерывается из состояния ожидания.</span>
          <span class="sxs-lookup">
            <span data-stu-id="07e1c-466">The thread that invokes <see langword="Wait" /> is later interrupted from the waiting state.</span>
          </span>
          <span data-ttu-id="07e1c-467">Это происходит, когда другой поток вызывает метод <see cref="M:System.Threading.Thread.Interrupt" /> этого потока.</span>
          <span class="sxs-lookup">
            <span data-stu-id="07e1c-467">This happens when another thread calls this thread's <see cref="M:System.Threading.Thread.Interrupt" /> method.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <span data-ttu-id="07e1c-468">Значение параметра <paramref name="millisecondsTimeout" /> отрицательно и не равно <see cref="F:System.Threading.Timeout.Infinite" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="07e1c-468">The value of the <paramref name="millisecondsTimeout" /> parameter is negative, and is not equal to <see cref="F:System.Threading.Timeout.Infinite" />.</span>
          </span>
        </exception>
        <altmember cref="T:System.Threading.Thread" />
      </Docs>
    </Member>
    <Member MemberName="Wait">
      <MemberSignature Language="C#" Value="public static bool Wait (object obj, TimeSpan timeout);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool Wait(object obj, valuetype System.TimeSpan timeout) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Monitor.Wait(System.Object,System.TimeSpan)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Wait (obj As Object, timeout As TimeSpan) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool Wait(System::Object ^ obj, TimeSpan timeout);" />
      <MemberSignature Language="F#" Value="static member Wait : obj * TimeSpan -&gt; bool" Usage="System.Threading.Monitor.Wait (obj, timeout)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="obj" Type="System.Object" />
        <Parameter Name="timeout" Type="System.TimeSpan" />
      </Parameters>
      <Docs>
        <param name="obj">
          <span data-ttu-id="07e1c-469">Объект, в котором следует ожидать.</span>
          <span class="sxs-lookup">
            <span data-stu-id="07e1c-469">The object on which to wait.</span>
          </span>
        </param>
        <param name="timeout">
          <span data-ttu-id="07e1c-470">Класс <see cref="T:System.TimeSpan" />, представляющий количество времени, до истечения которого поток поступает в очередь ожидания.</span>
          <span class="sxs-lookup">
            <span data-stu-id="07e1c-470">A <see cref="T:System.TimeSpan" /> representing the amount of time to wait before the thread enters the ready queue.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="07e1c-471">Освобождает блокировку объекта и блокирует текущий поток до тех пор, пока тот не получит блокировку снова.</span>
          <span class="sxs-lookup">
            <span data-stu-id="07e1c-471">Releases the lock on an object and blocks the current thread until it reacquires the lock.</span>
          </span>
          <span data-ttu-id="07e1c-472">Если указанные временные интервалы истекают, поток встает в очередь готовности.</span>
          <span class="sxs-lookup">
            <span data-stu-id="07e1c-472">If the specified time-out interval elapses, the thread enters the ready queue.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="07e1c-473">Значение <see langword="true" />, если блокировка была получена заново до истечения заданного времени; значение <see langword="false" />, если блокировка была получена заново по истечении заданного времени.</span>
          <span class="sxs-lookup">
            <span data-stu-id="07e1c-473">
              <see langword="true" /> if the lock was reacquired before the specified time elapsed; <see langword="false" /> if the lock was reacquired after the specified time elapsed.</span>
          </span>
          <span data-ttu-id="07e1c-474">Этот метод не осуществляет возврат, если блокировка не была получена.</span>
          <span class="sxs-lookup">
            <span data-stu-id="07e1c-474">The method does not return until the lock is reacquired.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="07e1c-475">Этот метод не возвращает до получения монопольной блокировки на `obj` параметра.</span><span class="sxs-lookup"><span data-stu-id="07e1c-475">This method does not return until it reacquires an exclusive lock on the `obj` parameter.</span></span>  
  
 <span data-ttu-id="07e1c-476">Поток, который в данный момент принадлежит блокировка указанного объекта вызывает этот метод, чтобы освободить объект доступа к ней другим потоком.</span><span class="sxs-lookup"><span data-stu-id="07e1c-476">The thread that currently owns the lock on the specified object invokes this method in order to release the object so that another thread can access it.</span></span> <span data-ttu-id="07e1c-477">Вызывающий поток блокируется, ожидая получения блокировки.</span><span class="sxs-lookup"><span data-stu-id="07e1c-477">The caller is blocked while waiting to reacquire the lock.</span></span> <span data-ttu-id="07e1c-478">Этот метод вызывается, когда вызывающий объект должен ожидать изменения состояния, которые произойдут в результате операций другого потока.</span><span class="sxs-lookup"><span data-stu-id="07e1c-478">This method is called when the caller needs to wait for a state change that will occur as a result of another thread's operations.</span></span>  
  
 <span data-ttu-id="07e1c-479">Время ожидания гарантирует, что текущий поток не блокируется неограниченно, если другой поток освобождает блокировку без предварительного вызова функции <xref:System.Threading.Monitor.Pulse%2A> или <xref:System.Threading.Monitor.PulseAll%2A> метод.</span><span class="sxs-lookup"><span data-stu-id="07e1c-479">The time-out ensures that the current thread does not block indefinitely if another thread releases the lock without first calling the <xref:System.Threading.Monitor.Pulse%2A> or <xref:System.Threading.Monitor.PulseAll%2A> method.</span></span> <span data-ttu-id="07e1c-480">Он также перемещает поток в очередь готовности, минуя другие потоки предшествует ей в очереди ожидания, таким образом, чтобы быстрее получения блокировки.</span><span class="sxs-lookup"><span data-stu-id="07e1c-480">It also moves the thread to the ready queue, bypassing other threads ahead of it in the wait queue, so that it can reacquire the lock sooner.</span></span> <span data-ttu-id="07e1c-481">Поток можно проверить возвращаемое значение <xref:System.Threading.Monitor.Wait%2A> метод для определения того, получена ли его блокировки до истечения времени ожидания. Поток можно оценить условия, которые привело к введите ожидания, и если необходимости вызова <xref:System.Threading.Monitor.Wait%2A> метод снова.</span><span class="sxs-lookup"><span data-stu-id="07e1c-481">The thread can test the return value of the <xref:System.Threading.Monitor.Wait%2A> method to determine whether it reacquired the lock prior to the time-out. The thread can evaluate the conditions that caused it to enter the wait, and if necessary call the <xref:System.Threading.Monitor.Wait%2A> method again.</span></span>  
  
 <span data-ttu-id="07e1c-482">Если поток вызывает `Wait`, он освобождает блокировку объекта и переходит в очередь ожидания объекта.</span><span class="sxs-lookup"><span data-stu-id="07e1c-482">When a thread calls `Wait`, it releases the lock on the object and enters the object's waiting queue.</span></span> <span data-ttu-id="07e1c-483">Следующий поток в очередь готовности объекта (если таковой имеется), получает блокировку и эксклюзивное использование объекта.</span><span class="sxs-lookup"><span data-stu-id="07e1c-483">The next thread in the object's ready queue (if there is one) acquires the lock and has exclusive use of the object.</span></span> <span data-ttu-id="07e1c-484">Поток, вызвавший `Wait` вызывающий поток, удерживающий блокировку остается в очереди ожидания либо до <xref:System.Threading.Monitor.PulseAll%2A>, или он является следующим в очереди, и вызывающий поток, удерживающий блокировку <xref:System.Threading.Monitor.Pulse%2A>.</span><span class="sxs-lookup"><span data-stu-id="07e1c-484">The thread that invoked `Wait` remains in the waiting queue until either a thread that holds the lock invokes <xref:System.Threading.Monitor.PulseAll%2A>, or it is the next in the queue and a thread that holds the lock invokes <xref:System.Threading.Monitor.Pulse%2A>.</span></span> <span data-ttu-id="07e1c-485">Тем не менее если `timeout` истечет раньше, чем другой поток вызывает этот объект <xref:System.Threading.Monitor.Pulse%2A> или <xref:System.Threading.Monitor.PulseAll%2A> метод, исходный поток перемещается в очередь готовности, чтобы снова получить блокировку.</span><span class="sxs-lookup"><span data-stu-id="07e1c-485">However, if `timeout` elapses before another thread invokes this object's <xref:System.Threading.Monitor.Pulse%2A> or <xref:System.Threading.Monitor.PulseAll%2A> method, the original thread is moved to the ready queue in order to regain the lock.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="07e1c-486">Если <xref:System.TimeSpan> представляющий-1 миллисекунда указывается для `timeout` параметра, этот метод неограниченно блокируется, если владелец блокировки вызывает <xref:System.Threading.Monitor.Pulse%2A> или <xref:System.Threading.Monitor.PulseAll%2A>.</span><span class="sxs-lookup"><span data-stu-id="07e1c-486">If a <xref:System.TimeSpan> representing –1 millisecond is specified for the `timeout` parameter, this method blocks indefinitely unless the holder of the lock calls <xref:System.Threading.Monitor.Pulse%2A> or <xref:System.Threading.Monitor.PulseAll%2A>.</span></span> <span data-ttu-id="07e1c-487">Если `timeout` равно 0, поток, вызывающий `Wait` снимает блокировку и затем немедленно постановки в очередь готовности, чтобы снова получить блокировку.</span><span class="sxs-lookup"><span data-stu-id="07e1c-487">If `timeout` is 0 milliseconds, the thread that calls `Wait` releases the lock and then immediately enters the ready queue in order to regain the lock.</span></span>  
  
 <span data-ttu-id="07e1c-488">Вызывающий поток выполняет `Wait` один раз, независимо от того, сколько раз <xref:System.Threading.Monitor.Enter%2A> был вызван для указанного объекта.</span><span class="sxs-lookup"><span data-stu-id="07e1c-488">The caller executes `Wait` once, regardless of the number of times <xref:System.Threading.Monitor.Enter%2A> has been invoked for the specified object.</span></span> <span data-ttu-id="07e1c-489">По существу `Wait` метод сохраняет количество раз, вызывающий инструкцию <xref:System.Threading.Monitor.Enter%2A> в объекте и вызывает <xref:System.Threading.Monitor.Exit%2A> столько раз, сколько нужно, чтобы полностью освободить объект с блокировкой.</span><span class="sxs-lookup"><span data-stu-id="07e1c-489">Conceptually, the `Wait` method stores the number of times the caller invoked <xref:System.Threading.Monitor.Enter%2A> on the object and invokes <xref:System.Threading.Monitor.Exit%2A> as many times as necessary to fully release the locked object.</span></span> <span data-ttu-id="07e1c-490">Вызывающий объект затем блокируется, ожидая получения объекта.</span><span class="sxs-lookup"><span data-stu-id="07e1c-490">The caller then blocks while waiting to reacquire the object.</span></span> <span data-ttu-id="07e1c-491">Если вызывающий поток заново получает блокировку, система вызывает <xref:System.Threading.Monitor.Enter%2A> столько раз, сколько необходимо для восстановления сохраненного <xref:System.Threading.Monitor.Enter%2A> числа.</span><span class="sxs-lookup"><span data-stu-id="07e1c-491">When the caller reacquires the lock, the system calls <xref:System.Threading.Monitor.Enter%2A> as many times as necessary to restore the saved <xref:System.Threading.Monitor.Enter%2A> count for the caller.</span></span> <span data-ttu-id="07e1c-492">Вызов `Wait` снимает блокировку указанного объекта; если вызывающий объект является владельцем блокировки на другие объекты, они не освобождаются.</span><span class="sxs-lookup"><span data-stu-id="07e1c-492">Calling `Wait` releases the lock for the specified object only; if the caller is the owner of locks on other objects, these locks are not released.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="07e1c-493">Синхронизированный объект имеет несколько ссылок, в том числе ссылку на поток, удерживающий блокировку, ссылку на очередь готовности, который содержит потоки, готовые к получению блокировки, и ссылку на очередь ожидания, который содержит в настоящее время потоки, ожидающие получать уведомления об изменении состояния объекта.</span><span class="sxs-lookup"><span data-stu-id="07e1c-493">A synchronized object holds several references, including a reference to the thread that currently holds the lock, a reference to the ready queue, which contains the threads that are ready to obtain the lock, and a reference to the waiting queue, which contains the threads that are waiting for notification of a change in the object's state.</span></span>  
  
 <span data-ttu-id="07e1c-494"><xref:System.Threading.Monitor.Pulse%2A>, <xref:System.Threading.Monitor.PulseAll%2A>, И `Wait` методы должны быть вызваны из синхронизированного блока кода.</span><span class="sxs-lookup"><span data-stu-id="07e1c-494">The <xref:System.Threading.Monitor.Pulse%2A>, <xref:System.Threading.Monitor.PulseAll%2A>, and `Wait` methods must be invoked from within a synchronized block of code.</span></span>  
  
 <span data-ttu-id="07e1c-495">В примечаниях к описанию <xref:System.Threading.Monitor.Pulse%2A> метод объяснить, что произойдет, если <xref:System.Threading.Monitor.Pulse%2A> вызывается при отсутствии ожидающих потоков.</span><span class="sxs-lookup"><span data-stu-id="07e1c-495">The remarks for the <xref:System.Threading.Monitor.Pulse%2A> method explain what happens if <xref:System.Threading.Monitor.Pulse%2A> is called when no threads are waiting.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="07e1c-496">Параметр <paramref name="obj" /> имеет значение <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="07e1c-496">The <paramref name="obj" /> parameter is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.Threading.SynchronizationLockException">
          <span data-ttu-id="07e1c-497">Вызывающий поток не владеет блокировкой для указанного объекта.</span>
          <span class="sxs-lookup">
            <span data-stu-id="07e1c-497">The calling thread does not own the lock for the specified object.</span>
          </span>
        </exception>
        <exception cref="T:System.Threading.ThreadInterruptedException">
          <span data-ttu-id="07e1c-498">Поток, который вызывает <see langword="Wait" />, позже прерывается из состояния ожидания.</span>
          <span class="sxs-lookup">
            <span data-stu-id="07e1c-498">The thread that invokes <see langword="Wait" /> is later interrupted from the waiting state.</span>
          </span>
          <span data-ttu-id="07e1c-499">Это происходит, когда другой поток вызывает метод <see cref="M:System.Threading.Thread.Interrupt" /> этого потока.</span>
          <span class="sxs-lookup">
            <span data-stu-id="07e1c-499">This happens when another thread calls this thread's <see cref="M:System.Threading.Thread.Interrupt" /> method.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <span data-ttu-id="07e1c-500">Значение параметра <paramref name="timeout" /> в миллисекундах отрицательно и не равно <see cref="F:System.Threading.Timeout.Infinite" /> (–1 миллисекунда), или больше чем <see cref="F:System.Int32.MaxValue" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="07e1c-500">The value of the <paramref name="timeout" /> parameter in milliseconds is negative and does not represent <see cref="F:System.Threading.Timeout.Infinite" /> (–1 millisecond), or is greater than <see cref="F:System.Int32.MaxValue" />.</span>
          </span>
        </exception>
        <altmember cref="T:System.Threading.Thread" />
      </Docs>
    </Member>
    <Member MemberName="Wait">
      <MemberSignature Language="C#" Value="public static bool Wait (object obj, int millisecondsTimeout, bool exitContext);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool Wait(object obj, int32 millisecondsTimeout, bool exitContext) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Monitor.Wait(System.Object,System.Int32,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Wait (obj As Object, millisecondsTimeout As Integer, exitContext As Boolean) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool Wait(System::Object ^ obj, int millisecondsTimeout, bool exitContext);" />
      <MemberSignature Language="F#" Value="static member Wait : obj * int * bool -&gt; bool" Usage="System.Threading.Monitor.Wait (obj, millisecondsTimeout, exitContext)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Threading</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="obj" Type="System.Object" />
        <Parameter Name="millisecondsTimeout" Type="System.Int32" />
        <Parameter Name="exitContext" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="obj">
          <span data-ttu-id="07e1c-501">Объект, в котором следует ожидать.</span>
          <span class="sxs-lookup">
            <span data-stu-id="07e1c-501">The object on which to wait.</span>
          </span>
        </param>
        <param name="millisecondsTimeout">
          <span data-ttu-id="07e1c-502">Количество миллисекунд для ожидания постановки в очередь готовности.</span>
          <span class="sxs-lookup">
            <span data-stu-id="07e1c-502">The number of milliseconds to wait before the thread enters the ready queue.</span>
          </span>
        </param>
        <param name="exitContext">
          <span data-ttu-id="07e1c-503">Значение <see langword="true" /> для выхода из домена синхронизации в текущем контексте перед ожиданием (в синхронизированном контексте) с его последующим повторным получением; в противном случае — значение <see langword="false" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="07e1c-503">
              <see langword="true" /> to exit and reacquire the synchronization domain for the context (if in a synchronized context) before the wait; otherwise, <see langword="false" />.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="07e1c-504">Освобождает блокировку объекта и блокирует текущий поток до тех пор, пока тот не получит блокировку снова.</span>
          <span class="sxs-lookup">
            <span data-stu-id="07e1c-504">Releases the lock on an object and blocks the current thread until it reacquires the lock.</span>
          </span>
          <span data-ttu-id="07e1c-505">Если указанные временные интервалы истекают, поток встает в очередь готовности.</span>
          <span class="sxs-lookup">
            <span data-stu-id="07e1c-505">If the specified time-out interval elapses, the thread enters the ready queue.</span>
          </span>
          <span data-ttu-id="07e1c-506">Этот метод также указывает на выход из области синхронизации для контекста (если она находится в синхронизированном контексте) до ожидания и ее повторное получение впоследствии.</span>
          <span class="sxs-lookup">
            <span data-stu-id="07e1c-506">This method also specifies whether the synchronization domain for the context (if in a synchronized context) is exited before the wait and reacquired afterward.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="07e1c-507">Значение <see langword="true" />, если блокировка была получена заново до истечения заданного времени; значение <see langword="false" />, если блокировка была получена заново по истечении заданного времени.</span>
          <span class="sxs-lookup">
            <span data-stu-id="07e1c-507">
              <see langword="true" /> if the lock was reacquired before the specified time elapsed; <see langword="false" /> if the lock was reacquired after the specified time elapsed.</span>
          </span>
          <span data-ttu-id="07e1c-508">Этот метод не осуществляет возврат, если блокировка не была получена.</span>
          <span class="sxs-lookup">
            <span data-stu-id="07e1c-508">The method does not return until the lock is reacquired.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="07e1c-509">Этот метод не возвращает до получения монопольной блокировки на `obj` параметра.</span><span class="sxs-lookup"><span data-stu-id="07e1c-509">This method does not return until it reacquires an exclusive lock on the `obj` parameter.</span></span>  
  
 <span data-ttu-id="07e1c-510">Поток, который в данный момент принадлежит блокировка указанного объекта вызывает этот метод, чтобы освободить объект доступа к ней другим потоком.</span><span class="sxs-lookup"><span data-stu-id="07e1c-510">The thread that currently owns the lock on the specified object invokes this method in order to release the object so that another thread can access it.</span></span> <span data-ttu-id="07e1c-511">Вызывающий поток блокируется, ожидая получения блокировки.</span><span class="sxs-lookup"><span data-stu-id="07e1c-511">The caller is blocked while waiting to reacquire the lock.</span></span> <span data-ttu-id="07e1c-512">Этот метод вызывается, когда вызывающий объект должен ожидать изменения состояния, которые произойдут в результате операций другого потока.</span><span class="sxs-lookup"><span data-stu-id="07e1c-512">This method is called when the caller needs to wait for a state change that will occur as a result of another thread's operations.</span></span>  
  
 <span data-ttu-id="07e1c-513">Время ожидания гарантирует, что текущий поток не блокируется неограниченно, если другой поток освобождает блокировку без предварительного вызова функции <xref:System.Threading.Monitor.Pulse%2A> или <xref:System.Threading.Monitor.PulseAll%2A> метод.</span><span class="sxs-lookup"><span data-stu-id="07e1c-513">The time-out ensures that the current thread does not block indefinitely if another thread releases the lock without first calling the <xref:System.Threading.Monitor.Pulse%2A> or <xref:System.Threading.Monitor.PulseAll%2A> method.</span></span> <span data-ttu-id="07e1c-514">Он также перемещает поток в очередь готовности, минуя другие потоки предшествует ей в очереди ожидания, таким образом, чтобы быстрее получения блокировки.</span><span class="sxs-lookup"><span data-stu-id="07e1c-514">It also moves the thread to the ready queue, bypassing other threads ahead of it in the wait queue, so that it can reacquire the lock sooner.</span></span> <span data-ttu-id="07e1c-515">Поток можно проверить возвращаемое значение <xref:System.Threading.Monitor.Wait%2A> метод для определения того, получена ли его блокировки до истечения времени ожидания. Поток можно оценить условия, которые привело к введите ожидания, и если необходимости вызова <xref:System.Threading.Monitor.Wait%2A> метод снова.</span><span class="sxs-lookup"><span data-stu-id="07e1c-515">The thread can test the return value of the <xref:System.Threading.Monitor.Wait%2A> method to determine whether it reacquired the lock prior to the time-out. The thread can evaluate the conditions that caused it to enter the wait, and if necessary call the <xref:System.Threading.Monitor.Wait%2A> method again.</span></span>  
  
 <span data-ttu-id="07e1c-516">Если поток вызывает `Wait`, он освобождает блокировку и входит в очередь ожидания.</span><span class="sxs-lookup"><span data-stu-id="07e1c-516">When a thread calls `Wait`, it releases the lock and enters the waiting queue.</span></span> <span data-ttu-id="07e1c-517">На этом этапе следующий поток в очереди готовности (если таковой имеется) может контролировать блокировки.</span><span class="sxs-lookup"><span data-stu-id="07e1c-517">At this point, the next thread in the ready queue (if there is one) is allowed to take control of the lock.</span></span> <span data-ttu-id="07e1c-518">Поток, вызвавший `Wait` вызывающий поток, удерживающий блокировку остается в очереди ожидания либо до <xref:System.Threading.Monitor.PulseAll%2A>, или он является следующим в очереди, и вызывающий поток, удерживающий блокировку <xref:System.Threading.Monitor.Pulse%2A>.</span><span class="sxs-lookup"><span data-stu-id="07e1c-518">The thread that invoked `Wait` remains in the waiting queue until either a thread that holds the lock invokes <xref:System.Threading.Monitor.PulseAll%2A>, or it is the next in the queue and a thread that holds the lock invokes <xref:System.Threading.Monitor.Pulse%2A>.</span></span> <span data-ttu-id="07e1c-519">Тем не менее если `millisecondsTimeout` истечет раньше, чем другой поток вызывает этот объект <xref:System.Threading.Monitor.Pulse%2A> или <xref:System.Threading.Monitor.PulseAll%2A> метод, исходный поток перемещается в очередь готовности, чтобы снова получить блокировку.</span><span class="sxs-lookup"><span data-stu-id="07e1c-519">However, if `millisecondsTimeout` elapses before another thread invokes this object's <xref:System.Threading.Monitor.Pulse%2A> or <xref:System.Threading.Monitor.PulseAll%2A> method, the original thread is moved to the ready queue in order to regain the lock.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="07e1c-520">Если <xref:System.Threading.Timeout.Infinite> указывается для `millisecondsTimeout` параметра, этот метод неограниченно блокируется, если владелец блокировки вызывает <xref:System.Threading.Monitor.Pulse%2A> или <xref:System.Threading.Monitor.PulseAll%2A>.</span><span class="sxs-lookup"><span data-stu-id="07e1c-520">If <xref:System.Threading.Timeout.Infinite> is specified for the `millisecondsTimeout` parameter, this method blocks indefinitely unless the holder of the lock calls <xref:System.Threading.Monitor.Pulse%2A> or <xref:System.Threading.Monitor.PulseAll%2A>.</span></span> <span data-ttu-id="07e1c-521">Если `millisecondsTimeout` равно нулю, поток, вызывающий `Wait` снимает блокировку и затем немедленно постановки в очередь готовности, чтобы снова получить блокировку.</span><span class="sxs-lookup"><span data-stu-id="07e1c-521">If `millisecondsTimeout` equals 0, the thread that calls `Wait` releases the lock and then immediately enters the ready queue in order to regain the lock.</span></span>  
  
 <span data-ttu-id="07e1c-522">Вызывающий поток выполняет `Wait` один раз, независимо от того, сколько раз <xref:System.Threading.Monitor.Enter%2A> был вызван для указанного объекта.</span><span class="sxs-lookup"><span data-stu-id="07e1c-522">The caller executes `Wait` once, regardless of the number of times <xref:System.Threading.Monitor.Enter%2A> has been invoked for the specified object.</span></span> <span data-ttu-id="07e1c-523">По существу `Wait` метод сохраняет количество раз, вызывающий инструкцию <xref:System.Threading.Monitor.Enter%2A> в объекте и вызывает <xref:System.Threading.Monitor.Exit%2A> столько раз, сколько нужно, чтобы полностью освободить объект с блокировкой.</span><span class="sxs-lookup"><span data-stu-id="07e1c-523">Conceptually, the `Wait` method stores the number of times the caller invoked <xref:System.Threading.Monitor.Enter%2A> on the object and invokes <xref:System.Threading.Monitor.Exit%2A> as many times as necessary to fully release the locked object.</span></span> <span data-ttu-id="07e1c-524">Вызывающий объект затем блокируется, ожидая получения объекта.</span><span class="sxs-lookup"><span data-stu-id="07e1c-524">The caller then blocks while waiting to reacquire the object.</span></span> <span data-ttu-id="07e1c-525">Если вызывающий поток заново получает блокировку, система вызывает <xref:System.Threading.Monitor.Enter%2A> столько раз, сколько необходимо для восстановления сохраненного <xref:System.Threading.Monitor.Enter%2A> числа.</span><span class="sxs-lookup"><span data-stu-id="07e1c-525">When the caller reacquires the lock, the system calls <xref:System.Threading.Monitor.Enter%2A> as many times as necessary to restore the saved <xref:System.Threading.Monitor.Enter%2A> count for the caller.</span></span> <span data-ttu-id="07e1c-526">Вызов `Wait` снимает блокировку указанного объекта; если вызывающий объект является владельцем блокировки на другие объекты, они не освобождаются.</span><span class="sxs-lookup"><span data-stu-id="07e1c-526">Calling `Wait` releases the lock for the specified object only; if the caller is the owner of locks on other objects, these locks are not released.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="07e1c-527">Синхронизированный объект имеет несколько ссылок, в том числе ссылку на поток, удерживающий блокировку, ссылку на очередь готовности, который содержит потоки, готовые к получению блокировки, и ссылку на очередь ожидания, который содержит в настоящее время потоки, ожидающие получать уведомления об изменении состояния объекта.</span><span class="sxs-lookup"><span data-stu-id="07e1c-527">A synchronized object holds several references, including a reference to the thread that currently holds the lock, a reference to the ready queue, which contains the threads that are ready to obtain the lock, and a reference to the waiting queue, which contains the threads that are waiting for notification of a change in the object's state.</span></span>  
  
 <span data-ttu-id="07e1c-528"><xref:System.Threading.Monitor.Pulse%2A>, <xref:System.Threading.Monitor.PulseAll%2A>, И `Wait` методы должны быть вызваны из синхронизированного блока кода.</span><span class="sxs-lookup"><span data-stu-id="07e1c-528">The <xref:System.Threading.Monitor.Pulse%2A>, <xref:System.Threading.Monitor.PulseAll%2A>, and `Wait` methods must be invoked from within a synchronized block of code.</span></span>  
  
 <span data-ttu-id="07e1c-529">В примечаниях к описанию <xref:System.Threading.Monitor.Pulse%2A> метод объяснить, что произойдет, если <xref:System.Threading.Monitor.Pulse%2A> вызывается при отсутствии ожидающих потоков.</span><span class="sxs-lookup"><span data-stu-id="07e1c-529">The remarks for the <xref:System.Threading.Monitor.Pulse%2A> method explain what happens if <xref:System.Threading.Monitor.Pulse%2A> is called when no threads are waiting.</span></span>  
  
## <a name="notes-on-exiting-the-context"></a><span data-ttu-id="07e1c-530">Примечания о выходе из контекста</span><span class="sxs-lookup"><span data-stu-id="07e1c-530">Notes on Exiting the Context</span></span>  
 <span data-ttu-id="07e1c-531">`exitContext` Параметр действует только <xref:System.Threading.Monitor.Wait%2A> метод вызывается из внутри управляемого контекста не по умолчанию.</span><span class="sxs-lookup"><span data-stu-id="07e1c-531">The`exitContext` parameter has no effect unless the <xref:System.Threading.Monitor.Wait%2A> method is called from inside a nondefault managed context.</span></span> <span data-ttu-id="07e1c-532">Это может произойти, если ваш поток находится внутри вызова к экземпляру класса, производного от <xref:System.ContextBoundObject>.</span><span class="sxs-lookup"><span data-stu-id="07e1c-532">This can happen if your thread is inside a call to an instance of a class derived from <xref:System.ContextBoundObject>.</span></span> <span data-ttu-id="07e1c-533">Даже если в настоящее время выполняется метод в классе, который не является производным от <xref:System.ContextBoundObject>, например <xref:System.String>, может быть в контексте не по умолчанию если <xref:System.ContextBoundObject> стеке в текущем домене приложения.</span><span class="sxs-lookup"><span data-stu-id="07e1c-533">Even if you are currently executing a method on a class that is not derived from <xref:System.ContextBoundObject>, like <xref:System.String>, you can be in a nondefault context if a <xref:System.ContextBoundObject> is on your stack in the current application domain.</span></span>  
  
 <span data-ttu-id="07e1c-534">Когда ваш код выполняется в контексте не по умолчанию, указав `true` для `exitContext` вызывающий поток выйти из управляемого контекста не по умолчанию (то есть для перехода в контекст по умолчанию) перед выполнением <xref:System.Threading.Monitor.Wait%2A> метод.</span><span class="sxs-lookup"><span data-stu-id="07e1c-534">When your code is executing in a nondefault context, specifying `true` for `exitContext` causes the thread to exit the nondefault managed context (that is, to transition to the default context) before executing the <xref:System.Threading.Monitor.Wait%2A> method.</span></span> <span data-ttu-id="07e1c-535">Возвращается к исходному контексту не по умолчанию после вызова <xref:System.Threading.Monitor.Wait%2A> завершения метода.</span><span class="sxs-lookup"><span data-stu-id="07e1c-535">It returns to the original nondefault context after the call to the <xref:System.Threading.Monitor.Wait%2A> method completes.</span></span>  
  
 <span data-ttu-id="07e1c-536">Это может быть полезно, если класс контекстно привязанные имеет <xref:System.Runtime.Remoting.Contexts.SynchronizationAttribute> применен атрибут.</span><span class="sxs-lookup"><span data-stu-id="07e1c-536">This can be useful when the context-bound class has the <xref:System.Runtime.Remoting.Contexts.SynchronizationAttribute> attribute applied.</span></span> <span data-ttu-id="07e1c-537">В этом случае все вызовы к членам класса автоматически синхронизируются и области синхронизации находится в теле код для класса.</span><span class="sxs-lookup"><span data-stu-id="07e1c-537">In that case, all calls to members of the class are automatically synchronized, and the synchronization domain is the entire body of code for the class.</span></span> <span data-ttu-id="07e1c-538">Если в стеке вызовов элемента вызывается <xref:System.Threading.Monitor.Wait%2A> метода с указанием `true` для `exitContext`, поток выходит из области синхронизации, позволяя потоку, который блокируется во время вызова любого члена объекта для продолжения.</span><span class="sxs-lookup"><span data-stu-id="07e1c-538">If code in the call stack of a member calls the <xref:System.Threading.Monitor.Wait%2A> method and specifies `true` for `exitContext`, the thread exits the synchronization domain, allowing a thread that is blocked on a call to any member of the object to proceed.</span></span> <span data-ttu-id="07e1c-539">Когда <xref:System.Threading.Monitor.Wait%2A> метод возвращает поток, которой был сделан вызов должен ожидать повторный ввод области синхронизации.</span><span class="sxs-lookup"><span data-stu-id="07e1c-539">When the <xref:System.Threading.Monitor.Wait%2A> method returns, the thread that made the call must wait to reenter the synchronization domain.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="07e1c-540">Параметр <paramref name="obj" /> имеет значение <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="07e1c-540">The <paramref name="obj" /> parameter is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.Threading.SynchronizationLockException">
          <span data-ttu-id="07e1c-541">
            <see langword="Wait" /> — не вызывается из синхронизированного блока кода.</span>
          <span class="sxs-lookup">
            <span data-stu-id="07e1c-541">
              <see langword="Wait" /> is not invoked from within a synchronized block of code.</span>
          </span>
        </exception>
        <exception cref="T:System.Threading.ThreadInterruptedException">
          <span data-ttu-id="07e1c-542">Поток, который вызывает <see langword="Wait" />, позже прерывается из состояния ожидания.</span>
          <span class="sxs-lookup">
            <span data-stu-id="07e1c-542">The thread that invokes <see langword="Wait" /> is later interrupted from the waiting state.</span>
          </span>
          <span data-ttu-id="07e1c-543">Это происходит, когда другой поток вызывает метод <see cref="M:System.Threading.Thread.Interrupt" /> этого потока.</span>
          <span class="sxs-lookup">
            <span data-stu-id="07e1c-543">This happens when another thread calls this thread's <see cref="M:System.Threading.Thread.Interrupt" /> method.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <span data-ttu-id="07e1c-544">Значение параметра <paramref name="millisecondsTimeout" /> отрицательно и не равно <see cref="F:System.Threading.Timeout.Infinite" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="07e1c-544">The value of the <paramref name="millisecondsTimeout" /> parameter is negative, and is not equal to <see cref="F:System.Threading.Timeout.Infinite" />.</span>
          </span>
        </exception>
        <altmember cref="T:System.Threading.Thread" />
      </Docs>
    </Member>
    <Member MemberName="Wait">
      <MemberSignature Language="C#" Value="public static bool Wait (object obj, TimeSpan timeout, bool exitContext);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool Wait(object obj, valuetype System.TimeSpan timeout, bool exitContext) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Monitor.Wait(System.Object,System.TimeSpan,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Wait (obj As Object, timeout As TimeSpan, exitContext As Boolean) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool Wait(System::Object ^ obj, TimeSpan timeout, bool exitContext);" />
      <MemberSignature Language="F#" Value="static member Wait : obj * TimeSpan * bool -&gt; bool" Usage="System.Threading.Monitor.Wait (obj, timeout, exitContext)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Threading</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="obj" Type="System.Object" />
        <Parameter Name="timeout" Type="System.TimeSpan" />
        <Parameter Name="exitContext" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="obj">
          <span data-ttu-id="07e1c-545">Объект, в котором следует ожидать.</span>
          <span class="sxs-lookup">
            <span data-stu-id="07e1c-545">The object on which to wait.</span>
          </span>
        </param>
        <param name="timeout">
          <span data-ttu-id="07e1c-546">Класс <see cref="T:System.TimeSpan" />, представляющий количество времени, до истечения которого поток поступает в очередь ожидания.</span>
          <span class="sxs-lookup">
            <span data-stu-id="07e1c-546">A <see cref="T:System.TimeSpan" /> representing the amount of time to wait before the thread enters the ready queue.</span>
          </span>
        </param>
        <param name="exitContext">
          <span data-ttu-id="07e1c-547">Значение <see langword="true" /> для выхода из домена синхронизации в текущем контексте перед ожиданием (в синхронизированном контексте) с его последующим повторным получением; в противном случае — значение <see langword="false" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="07e1c-547">
              <see langword="true" /> to exit and reacquire the synchronization domain for the context (if in a synchronized context) before the wait; otherwise, <see langword="false" />.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="07e1c-548">Освобождает блокировку объекта и блокирует текущий поток до тех пор, пока тот не получит блокировку снова.</span>
          <span class="sxs-lookup">
            <span data-stu-id="07e1c-548">Releases the lock on an object and blocks the current thread until it reacquires the lock.</span>
          </span>
          <span data-ttu-id="07e1c-549">Если указанные временные интервалы истекают, поток встает в очередь готовности.</span>
          <span class="sxs-lookup">
            <span data-stu-id="07e1c-549">If the specified time-out interval elapses, the thread enters the ready queue.</span>
          </span>
          <span data-ttu-id="07e1c-550">Дополнительно выходит из синхронизированного домена для синхронизации контекста до ожидания и получает домен впоследствии.</span>
          <span class="sxs-lookup">
            <span data-stu-id="07e1c-550">Optionally exits the synchronization domain for the synchronized context before the wait and reacquires the domain afterward.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="07e1c-551">Значение <see langword="true" />, если блокировка была получена заново до истечения заданного времени; значение <see langword="false" />, если блокировка была получена заново по истечении заданного времени.</span>
          <span class="sxs-lookup">
            <span data-stu-id="07e1c-551">
              <see langword="true" /> if the lock was reacquired before the specified time elapsed; <see langword="false" /> if the lock was reacquired after the specified time elapsed.</span>
          </span>
          <span data-ttu-id="07e1c-552">Этот метод не осуществляет возврат, если блокировка не была получена.</span>
          <span class="sxs-lookup">
            <span data-stu-id="07e1c-552">The method does not return until the lock is reacquired.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="07e1c-553">Этот метод не возвращает до получения монопольной блокировки на `obj` параметра.</span><span class="sxs-lookup"><span data-stu-id="07e1c-553">This method does not return until it reacquires an exclusive lock on the `obj` parameter.</span></span>  
  
 <span data-ttu-id="07e1c-554">Поток, который в данный момент принадлежит блокировка указанного объекта вызывает этот метод, чтобы освободить объект доступа к ней другим потоком.</span><span class="sxs-lookup"><span data-stu-id="07e1c-554">The thread that currently owns the lock on the specified object invokes this method in order to release the object so that another thread can access it.</span></span> <span data-ttu-id="07e1c-555">Вызывающий поток блокируется, ожидая получения блокировки.</span><span class="sxs-lookup"><span data-stu-id="07e1c-555">The caller is blocked while waiting to reacquire the lock.</span></span> <span data-ttu-id="07e1c-556">Этот метод вызывается, когда вызывающий объект должен ожидать изменения состояния, которые произойдут в результате операций другого потока.</span><span class="sxs-lookup"><span data-stu-id="07e1c-556">This method is called when the caller needs to wait for a state change that will occur as a result of another thread's operations.</span></span>  
  
 <span data-ttu-id="07e1c-557">Время ожидания гарантирует, что текущий поток не блокируется неограниченно, если другой поток освобождает блокировку без предварительного вызова функции <xref:System.Threading.Monitor.Pulse%2A> или <xref:System.Threading.Monitor.PulseAll%2A> метод.</span><span class="sxs-lookup"><span data-stu-id="07e1c-557">The time-out ensures that the current thread does not block indefinitely if another thread releases the lock without first calling the <xref:System.Threading.Monitor.Pulse%2A> or <xref:System.Threading.Monitor.PulseAll%2A> method.</span></span> <span data-ttu-id="07e1c-558">Он также перемещает поток в очередь готовности, минуя другие потоки предшествует ей в очереди ожидания, таким образом, чтобы быстрее получения блокировки.</span><span class="sxs-lookup"><span data-stu-id="07e1c-558">It also moves the thread to the ready queue, bypassing other threads ahead of it in the wait queue, so that it can reacquire the lock sooner.</span></span> <span data-ttu-id="07e1c-559">Поток можно проверить возвращаемое значение <xref:System.Threading.Monitor.Wait%2A> метод для определения того, получена ли его блокировки до истечения времени ожидания. Поток можно оценить условия, которые привело к введите ожидания, и если необходимости вызова <xref:System.Threading.Monitor.Wait%2A> метод снова.</span><span class="sxs-lookup"><span data-stu-id="07e1c-559">The thread can test the return value of the <xref:System.Threading.Monitor.Wait%2A> method to determine whether it reacquired the lock prior to the time-out. The thread can evaluate the conditions that caused it to enter the wait, and if necessary call the <xref:System.Threading.Monitor.Wait%2A> method again.</span></span>  
  
 <span data-ttu-id="07e1c-560">Если поток вызывает `Wait`, он освобождает блокировку и входит в очередь ожидания.</span><span class="sxs-lookup"><span data-stu-id="07e1c-560">When a thread calls `Wait`, it releases the lock and enters the waiting queue.</span></span> <span data-ttu-id="07e1c-561">На этом этапе следующий поток в очереди готовности (если таковой имеется) может контролировать блокировки.</span><span class="sxs-lookup"><span data-stu-id="07e1c-561">At this point, the next thread in the ready queue (if there is one) is allowed to take control of the lock.</span></span> <span data-ttu-id="07e1c-562">Поток, вызвавший `Wait` вызывающий поток, удерживающий блокировку остается в очереди ожидания либо до <xref:System.Threading.Monitor.PulseAll%2A>, или он является следующим в очереди, и вызывающий поток, удерживающий блокировку <xref:System.Threading.Monitor.Pulse%2A>.</span><span class="sxs-lookup"><span data-stu-id="07e1c-562">The thread that invoked `Wait` remains in the waiting queue until either a thread that holds the lock invokes <xref:System.Threading.Monitor.PulseAll%2A>, or it is the next in the queue and a thread that holds the lock invokes <xref:System.Threading.Monitor.Pulse%2A>.</span></span> <span data-ttu-id="07e1c-563">Тем не менее если `timeout` пройдет, прежде чем другой поток вызывает этот объект <xref:System.Threading.Monitor.Pulse%2A> или <xref:System.Threading.Monitor.PulseAll%2A> метод, исходный поток перемещается в очередь готовности, чтобы снова получить блокировку.</span><span class="sxs-lookup"><span data-stu-id="07e1c-563">However, if `timeout` milliseconds elapse before another thread invokes this object's <xref:System.Threading.Monitor.Pulse%2A> or <xref:System.Threading.Monitor.PulseAll%2A> method, the original thread is moved to the ready queue in order to regain the lock.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="07e1c-564">Если <xref:System.TimeSpan> представляющий-1 миллисекунду для указан `timeout` параметра, этот метод неограниченно блокируется, если владелец блокировки вызывает <xref:System.Threading.Monitor.Pulse%2A> или <xref:System.Threading.Monitor.PulseAll%2A>.</span><span class="sxs-lookup"><span data-stu-id="07e1c-564">If a <xref:System.TimeSpan> representing -1 millisecond is specified for the `timeout` parameter, this method blocks indefinitely unless the holder of the lock calls <xref:System.Threading.Monitor.Pulse%2A> or <xref:System.Threading.Monitor.PulseAll%2A>.</span></span> <span data-ttu-id="07e1c-565">Если `timeout` равно 0, поток, вызывающий `Wait` снимает блокировку и затем немедленно постановки в очередь готовности, чтобы снова получить блокировку.</span><span class="sxs-lookup"><span data-stu-id="07e1c-565">If `timeout` is 0 milliseconds, the thread that calls `Wait` releases the lock and then immediately enters the ready queue in order to regain the lock.</span></span>  
  
 <span data-ttu-id="07e1c-566">Вызывающий поток выполняет `Wait` один раз, независимо от того, сколько раз <xref:System.Threading.Monitor.Enter%2A> был вызван для указанного объекта.</span><span class="sxs-lookup"><span data-stu-id="07e1c-566">The caller executes `Wait` once, regardless of the number of times <xref:System.Threading.Monitor.Enter%2A> has been invoked for the specified object.</span></span> <span data-ttu-id="07e1c-567">По существу `Wait` метод сохраняет количество раз, вызывающий инструкцию <xref:System.Threading.Monitor.Enter%2A> в объекте и вызывает <xref:System.Threading.Monitor.Exit%2A> столько раз, сколько нужно, чтобы полностью освободить объект с блокировкой.</span><span class="sxs-lookup"><span data-stu-id="07e1c-567">Conceptually, the `Wait` method stores the number of times the caller invoked <xref:System.Threading.Monitor.Enter%2A> on the object and invokes <xref:System.Threading.Monitor.Exit%2A> as many times as necessary to fully release the locked object.</span></span> <span data-ttu-id="07e1c-568">Вызывающий объект затем блокируется, ожидая получения объекта.</span><span class="sxs-lookup"><span data-stu-id="07e1c-568">The caller then blocks while waiting to reacquire the object.</span></span> <span data-ttu-id="07e1c-569">Если вызывающий поток заново получает блокировку, система вызывает <xref:System.Threading.Monitor.Enter%2A> столько раз, сколько необходимо для восстановления сохраненного <xref:System.Threading.Monitor.Enter%2A> числа.</span><span class="sxs-lookup"><span data-stu-id="07e1c-569">When the caller reacquires the lock, the system calls <xref:System.Threading.Monitor.Enter%2A> as many times as necessary to restore the saved <xref:System.Threading.Monitor.Enter%2A> count for the caller.</span></span> <span data-ttu-id="07e1c-570">Вызов `Wait` снимает блокировку указанного объекта; если вызывающий объект является владельцем блокировки на другие объекты, они не освобождаются.</span><span class="sxs-lookup"><span data-stu-id="07e1c-570">Calling `Wait` releases the lock for the specified object only; if the caller is the owner of locks on other objects, these locks are not released.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="07e1c-571">Синхронизированный объект имеет несколько ссылок, в том числе ссылку на поток, удерживающий блокировку, ссылку на очередь готовности, который содержит потоки, готовые к получению блокировки, и ссылку на очередь ожидания, который содержит в настоящее время потоки, ожидающие получать уведомления об изменении состояния объекта.</span><span class="sxs-lookup"><span data-stu-id="07e1c-571">A synchronized object holds several references, including a reference to the thread that currently holds the lock, a reference to the ready queue, which contains the threads that are ready to obtain the lock, and a reference to the waiting queue, which contains the threads that are waiting for notification of a change in the object's state.</span></span>  
  
 <span data-ttu-id="07e1c-572"><xref:System.Threading.Monitor.Pulse%2A>, <xref:System.Threading.Monitor.PulseAll%2A>, И `Wait` методы должны быть вызваны из синхронизированного блока кода.</span><span class="sxs-lookup"><span data-stu-id="07e1c-572">The <xref:System.Threading.Monitor.Pulse%2A>, <xref:System.Threading.Monitor.PulseAll%2A>, and `Wait` methods must be invoked from within a synchronized block of code.</span></span>  
  
 <span data-ttu-id="07e1c-573">В примечаниях к описанию <xref:System.Threading.Monitor.Pulse%2A> метод объяснить, что произойдет, если <xref:System.Threading.Monitor.Pulse%2A> вызывается при отсутствии ожидающих потоков.</span><span class="sxs-lookup"><span data-stu-id="07e1c-573">The remarks for the <xref:System.Threading.Monitor.Pulse%2A> method explain what happens if <xref:System.Threading.Monitor.Pulse%2A> is called when no threads are waiting.</span></span>  
  
## <a name="notes-on-exiting-the-context"></a><span data-ttu-id="07e1c-574">Примечания о выходе из контекста</span><span class="sxs-lookup"><span data-stu-id="07e1c-574">Notes on Exiting the Context</span></span>  
 <span data-ttu-id="07e1c-575">`exitContext` Параметр действует только <xref:System.Threading.Monitor.Wait%2A> метод вызывается из внутри управляемого контекста не по умолчанию.</span><span class="sxs-lookup"><span data-stu-id="07e1c-575">The`exitContext` parameter has no effect unless the <xref:System.Threading.Monitor.Wait%2A> method is called from inside a nondefault managed context.</span></span> <span data-ttu-id="07e1c-576">Это может произойти, если ваш поток находится внутри вызова к экземпляру класса, производного от <xref:System.ContextBoundObject>.</span><span class="sxs-lookup"><span data-stu-id="07e1c-576">This can happen if your thread is inside a call to an instance of a class derived from <xref:System.ContextBoundObject>.</span></span> <span data-ttu-id="07e1c-577">Даже если в настоящее время выполняется метод в классе, который не является производным от <xref:System.ContextBoundObject>, например <xref:System.String>, может быть в контексте не по умолчанию если <xref:System.ContextBoundObject> стеке в текущем домене приложения.</span><span class="sxs-lookup"><span data-stu-id="07e1c-577">Even if you are currently executing a method on a class that is not derived from <xref:System.ContextBoundObject>, like <xref:System.String>, you can be in a nondefault context if a <xref:System.ContextBoundObject> is on your stack in the current application domain.</span></span>  
  
 <span data-ttu-id="07e1c-578">Когда ваш код выполняется в контексте не по умолчанию, указав `true` для `exitContext` вызывающий поток выйти из управляемого контекста не по умолчанию (то есть для перехода в контекст по умолчанию) перед выполнением <xref:System.Threading.Monitor.Wait%2A> метод.</span><span class="sxs-lookup"><span data-stu-id="07e1c-578">When your code is executing in a nondefault context, specifying `true` for `exitContext` causes the thread to exit the nondefault managed context (that is, to transition to the default context) before executing the <xref:System.Threading.Monitor.Wait%2A> method.</span></span> <span data-ttu-id="07e1c-579">Возвращается к исходному контексту не по умолчанию после вызова <xref:System.Threading.Monitor.Wait%2A> завершения метода.</span><span class="sxs-lookup"><span data-stu-id="07e1c-579">It returns to the original nondefault context after the call to the <xref:System.Threading.Monitor.Wait%2A> method completes.</span></span>  
  
 <span data-ttu-id="07e1c-580">Это может быть полезно, если класс контекстно привязанные имеет <xref:System.Runtime.Remoting.Contexts.SynchronizationAttribute> применен атрибут.</span><span class="sxs-lookup"><span data-stu-id="07e1c-580">This can be useful when the context-bound class has the <xref:System.Runtime.Remoting.Contexts.SynchronizationAttribute> attribute applied.</span></span> <span data-ttu-id="07e1c-581">В этом случае все вызовы к членам класса автоматически синхронизируются и области синхронизации находится в теле код для класса.</span><span class="sxs-lookup"><span data-stu-id="07e1c-581">In that case, all calls to members of the class are automatically synchronized, and the synchronization domain is the entire body of code for the class.</span></span> <span data-ttu-id="07e1c-582">Если в стеке вызовов элемента вызывается <xref:System.Threading.Monitor.Wait%2A> метода с указанием `true` для `exitContext`, поток выходит из области синхронизации, позволяя потоку, который блокируется во время вызова любого члена объекта для продолжения.</span><span class="sxs-lookup"><span data-stu-id="07e1c-582">If code in the call stack of a member calls the <xref:System.Threading.Monitor.Wait%2A> method and specifies `true` for `exitContext`, the thread exits the synchronization domain, allowing a thread that is blocked on a call to any member of the object to proceed.</span></span> <span data-ttu-id="07e1c-583">Когда <xref:System.Threading.Monitor.Wait%2A> метод возвращает поток, которой был сделан вызов должен ожидать повторный ввод области синхронизации.</span><span class="sxs-lookup"><span data-stu-id="07e1c-583">When the <xref:System.Threading.Monitor.Wait%2A> method returns, the thread that made the call must wait to reenter the synchronization domain.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="07e1c-584">Параметр <paramref name="obj" /> имеет значение <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="07e1c-584">The <paramref name="obj" /> parameter is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.Threading.SynchronizationLockException">
          <span data-ttu-id="07e1c-585">
            <see langword="Wait" /> — не вызывается из синхронизированного блока кода.</span>
          <span class="sxs-lookup">
            <span data-stu-id="07e1c-585">
              <see langword="Wait" /> is not invoked from within a synchronized block of code.</span>
          </span>
        </exception>
        <exception cref="T:System.Threading.ThreadInterruptedException">
          <span data-ttu-id="07e1c-586">Для потока, который вызывает Wait, состояние ожидания позже прерывается.</span>
          <span class="sxs-lookup">
            <span data-stu-id="07e1c-586">The thread that invokes Wait is later interrupted from the waiting state.</span>
          </span>
          <span data-ttu-id="07e1c-587">Это происходит, когда другой поток вызывает метод <see cref="M:System.Threading.Thread.Interrupt" /> этого потока.</span>
          <span class="sxs-lookup">
            <span data-stu-id="07e1c-587">This happens when another thread calls this thread's <see cref="M:System.Threading.Thread.Interrupt" /> method.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <span data-ttu-id="07e1c-588">Параметр <paramref name="timeout" /> имеет отрицательное значение и не представляет <see cref="F:System.Threading.Timeout.Infinite" /> (-1 миллисекунда) или больше, чем <see cref="F:System.Int32.MaxValue" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="07e1c-588">The <paramref name="timeout" /> parameter is negative and does not represent <see cref="F:System.Threading.Timeout.Infinite" /> (–1 millisecond), or is greater than <see cref="F:System.Int32.MaxValue" />.</span>
          </span>
        </exception>
        <altmember cref="T:System.Threading.Thread" />
      </Docs>
    </Member>
  </Members>
</Type>