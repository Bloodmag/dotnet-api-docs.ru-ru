<Type Name="Monitor" FullName="System.Threading.Monitor">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="04c73d8d6d8c0205db70235fd1bb85ce866c6212" />
    <Meta Name="ms.sourcegitcommit" Value="6a0b904069161bbaec4ffd02aa7d9cf38c61e72e" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="ru-RU" />
    <Meta Name="ms.lasthandoff" Value="06/24/2018" />
    <Meta Name="ms.locfileid" Value="36606693" />
  </Metadata>
  <TypeSignature Language="C#" Value="public static class Monitor" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi abstract sealed beforefieldinit Monitor extends System.Object" />
  <TypeSignature Language="DocId" Value="T:System.Threading.Monitor" />
  <TypeSignature Language="VB.NET" Value="Public Class Monitor" />
  <TypeSignature Language="C++ CLI" Value="public ref class Monitor abstract sealed" />
  <TypeSignature Language="F#" Value="type Monitor = class" />
  <AssemblyInfo>
    <AssemblyName>System.Threading</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.10.0</AssemblyVersion>
    <AssemblyVersion>4.1.0.0</AssemblyVersion>
    <AssemblyVersion>4.1.1.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>mscorlib</AssemblyName>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute>
      <AttributeName>System.Runtime.InteropServices.ComVisible(true)</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>Предоставляет механизм для синхронизации доступа к объектам.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Threading.Monitor> Позволяет синхронизировать доступ к области кода путем установки и снятия блокировки определенного объекта путем вызова <xref:System.Threading.Monitor.Enter%2A?displayProperty=nameWithType>, <xref:System.Threading.Monitor.TryEnter%2A?displayProperty=nameWithType>, и <xref:System.Threading.Monitor.Exit%2A?displayProperty=nameWithType> методы. Блокировки объектов предоставляют возможность ограничить доступ к блоку кода, обычно называемой критической секции. Пока поток владеет блокировкой для объекта, никакой другой поток не может получить блокировку. Можно также использовать <xref:System.Threading.Monitor> класса, чтобы гарантировать, что ни один поток имеет доступ к разделу приложения кода выполняется владельцем блокировки, пока другой поток не будет выполнять код, используя другой объект с блокировкой.  
  
 Содержание этой статьи  
  
 [Класс Monitor: Обзор](#Overview)   
 [Объект блокировки](#Lock)   
 [Критический раздел](#CriticalSection)   
 [Pulse, PulseAll и ожидания](#Pulse)   
 [Мониторы и дескрипторы ожидания](#WaitHandles)  
  
<a name="Overview"></a>   
## <a name="the-monitor-class-an-overview"></a>Класс Monitor: Обзор  
 <xref:System.Threading.Monitor> имеет следующие особенности:  
  
-   Он связан с объектом по требованию.  
  
-   Отменяется, то есть могут вызываться непосредственно из любого контекста.  
  
-   Экземпляр <xref:System.Threading.Monitor> не может быть создан класс; методы <xref:System.Threading.Monitor> класса являются статическими. Каждый метод передается синхронизированный объект, который управляет доступом к критической секции.  
  
> [!NOTE]
>  Используйте <xref:System.Threading.Monitor> класса для блокировки объектов, отличных от строки (то есть ссылочные типы, отличный от <xref:System.String>), не типы значений. Дополнительные сведения см. в разделе перегрузки <xref:System.Threading.Monitor.Enter%2A> метод и [объект блокировки](#Lock) далее в этой статье.  
  
 В следующей таблице описаны действия, которые могут быть выполнены из потоков, которые обращаются к Синхронизируемые объекты:  
  
|Действие|Описание:|  
|------------|-----------------|  
|<xref:System.Threading.Monitor.Enter%2A>, <xref:System.Threading.Monitor.TryEnter%2A>|Получает блокировку для объекта. Это действие также отмечает начало критической секции. Ни один поток может вводить критическую секцию, если он выполняет инструкции в критической секции, используя другой объект с блокировкой.|  
|<xref:System.Threading.Monitor.Wait%2A>|Освобождает блокировку объекта, чтобы разрешить другим потокам для блокировки и доступ к объекту. Вызывающий поток ожидает, пока другой поток обращается к объекту. Pulse сигналы, используемые для уведомления ожидающие потоки об изменении состояния объекта.|  
|<xref:System.Threading.Monitor.Pulse%2A> (сигнал) <xref:System.Threading.Monitor.PulseAll%2A>|Посылает сигнал один или более ожидающих потоков. Сигнал уведомляет ожидающий поток измененное состояние объекта с блокировкой, и владелец блокировки готов для снятия блокировки. Ожидающий поток помещается в очередь готовности объекта, чтобы она со временем может получить блокировку для объекта. Когда поток получает блокировку, он может проверить новое состояние объекта, чтобы увидеть, если был достигнут требуемое состояние.|  
|<xref:System.Threading.Monitor.Exit%2A>|Освобождает блокировку объекта. Это действие также отмечает конец критической секции, защищенной объектом с блокировкой.|  
  
 Начиная с версии [!INCLUDE[net_v40_long](~/includes/net-v40-long-md.md)], два набора перегрузки для <xref:System.Threading.Monitor.Enter%2A> и <xref:System.Threading.Monitor.TryEnter%2A> методы. Один набор из перегрузок имеет `ref` (в C#) или `ByRef` (в Visual Basic) <xref:System.Boolean> параметр, который автоматически устанавливается как `true` Если блокировки, даже если исключение при получении блокировки. Используйте эти перегрузки, если необходимо снять блокировку во всех случаях, даже в том случае, когда защита блокировки ресурсов может оказаться в несогласованном состоянии.  
  
<a name="Lock"></a>   
## <a name="the-lock-object"></a>Объект блокировки  
 Класс Monitor состоит из `static` (в C#) или `Shared` (в Visual Basic) методов, которые работают на объект, которая управляет доступом к критической секции.  Для каждого синхронизированного объекта осуществляется следующие сведения:  
  
-   Ссылка на поток, который в данный момент владеет блокировкой.  
  
-   Ссылка на очередь готовности, которая содержит потоки, готовые к получению блокировки.  
  
-   Ссылка на очередь ожидания, в которой находятся потоки, которые ожидают уведомления об изменении состояния объекта с блокировкой.  
  
 <xref:System.Threading.Monitor> блокирует объекты (то есть ссылочные типы), а не типы значений. Хотя можно передать тип значения в <xref:System.Threading.Monitor.Enter%2A> и <xref:System.Threading.Monitor.Exit%2A>, он упаковывается отдельно для каждого вызова. Поскольку при каждом вызове создается отдельный объект, <xref:System.Threading.Monitor.Enter%2A> никогда не выполняет блокировку, а код, который он предположительно защищает, на самом деле не синхронизируется. Кроме того, объект, переданный в <xref:System.Threading.Monitor.Exit%2A>, отличается от объекта, переданного в <xref:System.Threading.Monitor.Enter%2A>, поэтому <xref:System.Threading.Monitor> вызывает исключение <xref:System.Threading.SynchronizationLockException> с сообщением «Для не синхронизированного блока кода вызван метод синхронизации объектов».  
  
 Приведенный ниже пример иллюстрирует данную проблему. Он запускает десять задач, каждая из которых просто бездействует в течение 250 миллисекунд. Затем каждая задача обновляет переменную счетчика `nTasks`, который предназначен для подсчета количества фактически запущенных и выполненных задач. Поскольку `nTasks` является глобальной переменной, которая может обновляться несколькими задачами одновременно, используется монитор, защищающий ее от одновременного изменения несколькими задачами. Тем не менее, как показывают выходные данные в примере, каждая из задач вызывает исключение <xref:System.Threading.SynchronizationLockException>.  
  
 [!code-csharp[Conceptual.Monitors#2](~/samples/snippets/csharp/VS_Snippets_CLR/conceptual.monitors/cs/badlock1.cs#2)]
 [!code-vb[Conceptual.Monitors#2](~/samples/snippets/visualbasic/VS_Snippets_CLR/conceptual.monitors/vb/badlock1.vb#2)]  
  
 Каждая задача вызывает исключение <xref:System.Threading.SynchronizationLockException> из-за того, что переменная `nTasks` упаковывается перед вызовом метода <xref:System.Threading.Monitor.Enter%2A?displayProperty=nameWithType> в каждой задаче. Другими словами, в каждый вызов метода передается отдельная переменная, которая независима от остальных. `nTasks` снова упаковывается в вызове метода <xref:System.Threading.Monitor.Exit%2A?displayProperty=nameWithType>. И снова при этом создается десять новых упакованных переменных, которые не зависят друг от друга, `nTasks`, и десять упакованных переменных, созданных при вызове метода <xref:System.Threading.Monitor.Enter%2A?displayProperty=nameWithType>. Затем вызывается исключение, поскольку наш код пытается снять блокировку для вновь созданной переменной, которая ранее не была заблокирована.  
  
 Хотя можно упаковать переменную типа значения перед вызовом <xref:System.Threading.Monitor.Enter%2A> и <xref:System.Threading.Monitor.Exit%2A>, как показано в следующем примере, и передать тот же упакованный объект в оба метода, такой подход не дает никаких преимуществ. Изменения неупакованной переменной не отражаются в упакованной копии, и возможность изменения значения упакованной копии отсутствует.  
  
 [!code-csharp[Conceptual.Monitors#3](~/samples/snippets/csharp/VS_Snippets_CLR/conceptual.monitors/cs/badbox1.cs#3)]
 [!code-vb[Conceptual.Monitors#3](~/samples/snippets/visualbasic/VS_Snippets_CLR/conceptual.monitors/vb/badbox1.vb#3)]  
  
 При выборе объекта для синхронизации, необходимо заблокировать только в закрытых или внутренних объектов. Блокировки внешних объектов может привести к взаимоблокировки, так как несвязанный код может выбрать те же объекты блокировки для разных целей.  
  
 Обратите внимание, что для объекта в нескольких доменах приложений можно синхронизировать объект, используемый для блокировки, производного от <xref:System.MarshalByRefObject>.  
  
<a name="CriticalSection"></a>   
## <a name="the-critical-section"></a>Критический раздел  
 Используйте <xref:System.Threading.Monitor.Enter%2A> и <xref:System.Threading.Monitor.Exit%2A> методы для пометки в начале и конце критической секции.  
  
> [!NOTE]
>  Функциональные возможности, предоставляемые <xref:System.Threading.Monitor.Enter%2A> и <xref:System.Threading.Monitor.Exit%2A> методы будут идентичны данным, предоставляемые [блокировки](~/docs/csharp/language-reference/keywords/lock-statement.md) инструкции на языке C# и [SyncLock](~/docs/visual-basic/language-reference/statements/synclock-statement.md) инструкции на языке Visual Basic, за исключением того, языковые конструкции wrap <xref:System.Threading.Monitor.Enter%28System.Object%2CSystem.Boolean%40%29?displayProperty=nameWithType> перегрузка метода и <xref:System.Threading.Monitor.Exit%2A?displayProperty=nameWithType> метод в `try`...`finally` блок для освобождения монитор.  
  
 Если критическая секция является набором непрерывных инструкций, то блокировки, полученной путем <xref:System.Threading.Monitor.Enter%2A> метод гарантирует, что только один поток может выполнять обозначенный код с заблокированного объекта. В этом случае рекомендуется поместить этот код в `try` блокировку и вызвать <xref:System.Threading.Monitor.Exit%2A> метод в `finally` блока. Это гарантирует снятие блокировки даже при возникновении исключения. В следующем фрагменте кода показан этот шаблон.  
  
 [!code-csharp[System.Threading.Monitor.Class#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.threading.monitor.class/cs/Pattern2.cs#2)]
 [!code-vb[System.Threading.Monitor.Class#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.threading.monitor.class/vb/Pattern2.vb#2)]  
  
 Это средство обычно используется для синхронизации доступа к статический метод или метод экземпляра класса.  
  
 Если критический раздел распространяется на весь метод, средство блокировки может осуществляться путем размещения <xref:System.Runtime.CompilerServices.MethodImplAttribute?displayProperty=nameWithType> в методе и указав <xref:System.Runtime.CompilerServices.MethodImplOptions.Synchronized> значение в конструкторе <xref:System.Runtime.CompilerServices.MethodImplAttribute?displayProperty=nameWithType>. При использовании этого атрибута <xref:System.Threading.Monitor.Enter%2A> и <xref:System.Threading.Monitor.Exit%2A> вызовы методов не требуются. В следующем фрагменте кода показан этот шаблон:  
  
 [!code-csharp[System.Threading.Monitor.Class#3](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.threading.monitor.class/cs/Pattern2.cs#3)]
 [!code-vb[System.Threading.Monitor.Class#3](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.threading.monitor.class/vb/Pattern2.vb#3)]  
  
 Обратите внимание, что данный атрибут приводит текущего потока для хранения блокировки до выполнения метода; Если блокировка может быть освобождена раньше, используйте <xref:System.Threading.Monitor> класса C# [блокировки](~/docs/csharp/language-reference/keywords/lock-statement.md) инструкции или Visual Basic [SyncLock](~/docs/visual-basic/language-reference/statements/synclock-statement.md) оператора в методе вместо атрибута.  
  
 Хотя возможна для <xref:System.Threading.Monitor.Enter%2A> и <xref:System.Threading.Monitor.Exit%2A> инструкций, блокировки и освобождения данный объект для кросс-член класса границы и/или, это не рекомендуется.  
  
<a name="Pulse"></a>   
## <a name="pulse-pulseall-and-wait"></a>Pulse, PulseAll и ожидания  
 Когда поток владеет блокировкой и он перешел критическую секцию, которая защищает блокировку, он может вызвать <xref:System.Threading.Monitor.Wait%2A?displayProperty=nameWithType>, <xref:System.Threading.Monitor.Pulse%2A?displayProperty=nameWithType>, и <xref:System.Threading.Monitor.PulseAll%2A?displayProperty=nameWithType> методы.  
  
 <xref:System.Threading.Monitor.Wait%2A> снимает блокировку, если удерживается, позволяет ожидающий поток или потоков, чтобы получить блокировку и входа в критический раздел и ожидает уведомления путем вызова <xref:System.Threading.Monitor.Pulse%2A?displayProperty=nameWithType> или <xref:System.Threading.Monitor.PulseAll%2A?displayProperty=nameWithType> метод. Когда <xref:System.Threading.Monitor.Wait%2A> уведомляется, он возвращает значение и снова получает блокировку.  
  
 Как <xref:System.Threading.Monitor.Pulse%2A>, так и <xref:System.Threading.Monitor.PulseAll%2A> сигнализируют следующему потоку в очереди ожидания о том, что можно продолжать работу.  
  
<a name="WaitHandles"></a>   
## <a name="monitors-and-wait-handles"></a>Мониторы и дескрипторы ожидания  
 Важно отметить различия между использованием объектов <xref:System.Threading.Monitor> класса и <xref:System.Threading.WaitHandle> объектов.  
  
-   <xref:System.Threading.Monitor> Класс полностью управляемые и полностью переносимые, а также могут оказаться эффективными в плане использования ресурсов операционной системы.  
  
-   Объекты <xref:System.Threading.WaitHandle> представляют объекты ожидания операционной системы, удобны для синхронизации между управляемым и неуправляемым кодом и предоставляют некоторые расширенные функции операционной системы, например возможность ожидания сразу нескольких объектов.  
  
   
  
## Examples  
 В следующем примере используется <xref:System.Threading.Monitor> класса для синхронизации доступа к одному экземпляру генератора случайных чисел, представленного <xref:System.Random> класса. В примере создается десять задач, каждая из которых выполняется асинхронно в потоке пула потоков. Каждая задача создает 10 000 случайных чисел, вычисляет их среднее значение и обновляет две переменные уровня процедуры поддержки, общее число случайных чисел и их суммы. После выполнения всех задач, эти два значения затем используются для вычисления общего среднего значения.  
  
 [!code-csharp[System.Threading.Monitor.Class#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.threading.monitor.class/cs/example1.cs#1)]
 [!code-vb[System.Threading.Monitor.Class#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.threading.monitor.class/vb/example1.vb#1)]  
  
 Так как они могли быть доступны из любой задачи, выполняемой в потоке пула потоков, доступ к переменным `total` и `n` также должна быть синхронизирована. <xref:System.Threading.Interlocked.Add%2A?displayProperty=nameWithType> Метод используется для этой цели.  
  
 В следующем примере показано совместное использование <xref:System.Threading.Monitor> класса (реализуется с помощью `lock` или `SyncLock` конструкция языка), <xref:System.Threading.Interlocked> класса и <xref:System.Threading.AutoResetEvent> класса. Он определяет два `internal` (в C#) или `Friend` (в Visual Basic) классы, `SyncResource` и `UnSyncResource`, которые соответственно предоставляют синхронизированный и несинхронизированный доступ к ресурсу. Чтобы убедиться, что в примере демонстрируется различие между синхронизированным и несинхронизированным доступом (что может случиться, если каждый вызов метода завершается быстро), метод включает случайную задержку: для потоков, <xref:System.Threading.Thread.ManagedThreadId%2A?displayProperty=nameWithType> свойство является четным, вызовы метода <xref:System.Threading.Thread.Sleep%2A?displayProperty=nameWithType> для введения задержки в 2 000 миллисекунд. Обратите внимание, что, поскольку `SyncResource` класса не является общим, ни один клиентский код не выполняет блокировку в синхронизированном ресурсе; внутренний класс сам выполняет блокировку. Это предотвращает блокировка общедоступного объекта вредоносным кодом.  
  
 [!code-csharp[Conceptual.Monitors#1](~/samples/snippets/csharp/VS_Snippets_CLR/conceptual.monitors/cs/source.cs#1)]
 [!code-vb[Conceptual.Monitors#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/conceptual.monitors/vb/source.vb#1)]  
  
 В примере определяется переменная `numOps`, которое определяет число потоков, которые будут пытаться получить доступ к ресурсу. Поток приложения вызывает <xref:System.Threading.ThreadPool.QueueUserWorkItem%28System.Threading.WaitCallback%29?displayProperty=nameWithType> метод для синхронизированного и несинхронизированного доступа по пять раз. <xref:System.Threading.ThreadPool.QueueUserWorkItem%28System.Threading.WaitCallback%29?displayProperty=nameWithType> Метод принимает один параметр, делегат, который не принимает параметры и не возвращает значений. Для синхронизированного доступа он вызывает `SyncUpdateResource` метода; для несинхронизированного доступа он вызывает `UnSyncUpdateResource` метод. После каждого ряда вызовов метода поток приложения вызывает [AutoResetEvent.WaitOne](xref:System.Threading.WaitHandle.WaitOne*) метода, так что он блокируется до <xref:System.Threading.AutoResetEvent> экземпляр получает сигнал.  
  
 Каждый вызов `SyncUpdateResource` вызывает внутренний метод `SyncResource.Access` метода, а затем вызывает метод <xref:System.Threading.Interlocked.Decrement%2A?displayProperty=nameWithType> способ уменьшения `numOps` счетчика. <xref:System.Threading.Interlocked.Decrement%2A?displayProperty=nameWithType> Метод используется для уменьшения счетчика, так как в противном случае нельзя быть уверенным, что второй поток получит доступ к значение прежде, чем первый поток уменьшенное значение будет сохранено в переменной. Когда последний синхронизированный рабочий поток уменьшит счетчик до нуля, указывая, что все синхронизированные потоки завершили доступ к ресурсу, `SyncUpdateResource` вызовы метода <xref:System.Threading.EventWaitHandle.Set%2A?displayProperty=nameWithType> метод, который сигнализирует основному потоку продолжить выполнение.  
  
 Каждый вызов `UnSyncUpdateResource` вызывает внутренний метод `UnSyncResource.Access` метода, а затем вызывает метод <xref:System.Threading.Interlocked.Decrement%2A?displayProperty=nameWithType> способ уменьшения `numOps` счетчика. Опять же <xref:System.Threading.Interlocked.Decrement%2A?displayProperty=nameWithType> метод используется для уменьшения счетчика, чтобы второй поток не обращаться к значение перед уменьшенное значение первого потока был назначен переменной. Когда последний синхронизированный рабочий поток уменьшит счетчик до нуля, указывающее, что больше нет синхронизированных потоков требуется доступ к ресурсу, `UnSyncUpdateResource` вызовы метода <xref:System.Threading.EventWaitHandle.Set%2A?displayProperty=nameWithType> метод, который сигнализирует основному потоку продолжить выполнение .  
  
 Как показывает результат этого примера, синхронизированный доступ обеспечивает, что вызывающий поток выходит из защищенного ресурса до того, как другой поток получит доступ к этому ресурсу; каждый поток ожидает своего предшественника. С другой стороны, без блокировки `UnSyncResource.Access` метод вызывается в том порядке, в котором потоки получают к нему доступ.  
  
 ]]></format>
    </remarks>
    <threadsafe>Данный тип потокобезопасен.</threadsafe>
    <altmember cref="T:System.Threading.Thread" />
  </Docs>
  <Members>
    <MemberGroup MemberName="Enter">
      <AssemblyInfo>
        <AssemblyName>System.Threading</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Получает монопольную блокировку указанного объекта.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Enter">
      <MemberSignature Language="C#" Value="public static void Enter (object obj);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void Enter(object obj) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Monitor.Enter(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub Enter (obj As Object)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void Enter(System::Object ^ obj);" />
      <MemberSignature Language="F#" Value="static member Enter : obj -&gt; unit" Usage="System.Threading.Monitor.Enter obj" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="obj" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="obj">Объект, для которого получается блокировка монитора.</param>
        <summary>Получает эксклюзивную блокировку указанного объекта.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Используйте `Enter` получения <xref:System.Threading.Monitor> для объекта, переданного в качестве параметра. Если другой поток выполнил `Enter` в объекте, но еще не выполнен соответствующий <xref:System.Threading.Monitor.Exit%2A>, текущий поток будет заблокирован до другой поток освободит объект. Допустимо для одного потока для вызова `Enter` более одного раза без их блокировки, однако совпадает с числом `Exit` должно быть вызвано перед разблокирует других потоков, ожидающих в объекте.  
  
 Используйте <xref:System.Threading.Monitor> блокирует объекты (то есть ссылочные типы), не типы значений. При передаче переменной типа значения для `Enter`, она трактуется как объект. Если передать ту же переменную для `Enter` снова, она трактуется как отдельный объект, и поток не блокируется. В этом случае код, `Monitor` — защищается не защищен. Кроме того, если передать переменную `Exit`, создается другой, отдельный объект. Так как объект, переданный в `Exit` отличается от объекта, переданного в `Enter`, `Monitor` вызывает <xref:System.Threading.SynchronizationLockException>. Дополнительные сведения см. в разделе концептуальной [мониторы](xref:System.Threading.Monitor).  
  
 <xref:System.Threading.Thread.Interrupt%2A> можно прервать потоков, ожидающих входа `Monitor` на объект. Объект <xref:System.Threading.ThreadInterruptedException> будет создано.  
  
 С помощью C# `try`...`finally` блок (`Try`...`Finally` в Visual Basic), чтобы убедитесь, что монитор выпуска или с помощью C# `lock` инструкции (`SyncLock` инструкции на языке Visual Basic), который является оболочкой для <xref:System.Threading.Monitor.Enter%2A> и <xref:System.Threading.Monitor.Exit%2A> методы в `try`...`finally` блок.  
  
   
  
## Examples  
 В следующем примере показано использование метода `Enter`.  
  
 [!code-cpp[MonitorExmpl2#1](~/samples/snippets/cpp/VS_Snippets_CLR/MonitorExmpl2/CPP/monitor2.cpp#1)]
 [!code-csharp[MonitorExmpl2#1](~/samples/snippets/csharp/VS_Snippets_CLR/MonitorExmpl2/CS/monitor2.cs#1)]
 [!code-vb[MonitorExmpl2#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/MonitorExmpl2/VB/monitor2.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">Параметр <paramref name="obj" /> имеет значение <see langword="null" />.</exception>
        <altmember cref="T:System.Threading.Thread" />
      </Docs>
    </Member>
    <Member MemberName="Enter">
      <MemberSignature Language="C#" Value="public static void Enter (object obj, ref bool lockTaken);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void Enter(object obj, bool&amp; lockTaken) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Monitor.Enter(System.Object,System.Boolean@)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub Enter (obj As Object, ByRef lockTaken As Boolean)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void Enter(System::Object ^ obj, bool % lockTaken);" />
      <MemberSignature Language="F#" Value="static member Enter : obj *  -&gt; unit" Usage="System.Threading.Monitor.Enter (obj, lockTaken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="obj" Type="System.Object" />
        <Parameter Name="lockTaken" Type="System.Boolean&amp;" RefType="ref" />
      </Parameters>
      <Docs>
        <param name="obj">Объект, в котором следует ожидать.</param>
        <param name="lockTaken">Результат попытки получить блокировку, переданную по ссылке. Входное значение должно равняться <see langword="false" />. Выходное значение <see langword="true" />, если блокировка получена; в противном случае — выходное значение <see langword="false" />. Выходное значение задается, даже если при попытке получить блокировку возникает исключение.  Примечание. Если исключение не возникает, выходное значение этого метода всегда равно <see langword="true" />.</param>
        <summary>Получает монопольную блокировку указанного объекта и единым блоком задает значение, указывающее, была ли выполнена блокировка.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Используйте `Enter` получения <xref:System.Threading.Monitor> для объекта, переданного в качестве `obj` параметра. Если другой поток выполнил `Enter` в объекте, но еще не выполнен соответствующий <xref:System.Threading.Monitor.Exit%2A>, текущий поток будет заблокирован до другой поток освободит объект. Допустимо для одного потока для вызова `Enter` более одного раза без их блокировки, однако совпадает с числом `Exit` должно быть вызвано перед разблокирует других потоков, ожидающих в объекте.  
  
 Если блокировка не была сделана, поскольку возникло исключение, переменная, указанная для `lockTaken` параметр `false` после завершения этого метода. Это позволяет приложению определить, во всех случаях необходимость для снятия блокировки. Если этот метод возвращается без вызова исключения, переменная, указанная для `lockTaken` всегда `true`, и нет необходимости для его тестирования.  
  
 Используйте <xref:System.Threading.Monitor> блокирует объекты (то есть ссылочные типы), не типы значений. При передаче переменной типа значения для `Enter`, она трактуется как объект. Если передать ту же переменную для `Enter` снова, она трактуется как отдельный объект, и поток не блокируется. В этом случае код, `Monitor` — защищается не защищен. Кроме того, если передать переменную `Exit`, создается другой, отдельный объект. Так как объект, переданный в `Exit` отличается от объекта, переданного в `Enter`, `Monitor` вызывает <xref:System.Threading.SynchronizationLockException>. Дополнительные сведения см. в разделе концептуальной [мониторы](xref:System.Threading.Monitor).  
  
 <xref:System.Threading.Thread.Interrupt%2A> можно прервать потоков, ожидающих входа `Monitor` на объект. Объект <xref:System.Threading.ThreadInterruptedException> будет создано.  
  
   
  
## Examples  
 Ниже показан базовый шаблон для использования <xref:System.Threading.Monitor.Enter%28System.Object%2CSystem.Boolean%40%29> перегрузки метода. Эта перегрузка всегда устанавливает значение, передаваемое переменной `ref` параметра (`ByRef` в Visual Basic) `lockTaken`, даже если метод вызывает исключение, поэтому значение переменной является надежным способом для проверки блокировки должен быть выпущен.  
  
 [!code-csharp[System.Threading.Monitor.Enter#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.threading.monitor.enter/cs/example.cs#2)]
 [!code-vb[System.Threading.Monitor.Enter#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.threading.monitor.enter/vb/example.vb#2)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">Входные данные для <paramref name="lockTaken" /> — <see langword="true" />.</exception>
        <exception cref="T:System.ArgumentNullException">Параметр <paramref name="obj" /> имеет значение <see langword="null" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="Exit">
      <MemberSignature Language="C#" Value="public static void Exit (object obj);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void Exit(object obj) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Monitor.Exit(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub Exit (obj As Object)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void Exit(System::Object ^ obj);" />
      <MemberSignature Language="F#" Value="static member Exit : obj -&gt; unit" Usage="System.Threading.Monitor.Exit obj" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.ConstrainedExecution.ReliabilityContract(System.Runtime.ConstrainedExecution.Consistency.WillNotCorruptState, System.Runtime.ConstrainedExecution.Cer.Success)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="obj" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="obj">Объект, блокировка которого освобождается.</param>
        <summary>Освобождает эксклюзивную блокировку указанного объекта.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Вызывающий поток должен владеть блокировкой `obj` параметра. Если вызывающий поток владеет блокировкой для указанного объекта и он сделал одинаковое число `Exit` и <xref:System.Threading.Monitor.Enter%2A> вызывает для объекта, а затем снятия блокировки. Если вызывающий поток не вызвал инструкцию `Exit` столько раз, сколько `Enter`, блокировка не освобождается.  
  
 Если блокировка освобождается и другие потоки находятся в очереди готовности для объекта, один из потоков блокировку. Если другие потоки находятся в очереди ожидания получения блокировки, они не перемещаются автоматически в очередь готовности, когда владелец блокировки вызывает `Exit`. Чтобы переместить один или более ожидающих потоков в очередь готовности, вызовите <xref:System.Threading.Monitor.Pulse%2A> или <xref:System.Threading.Monitor.PulseAll%2A> перед вызовом `Exit`.  
  
   
  
## Examples  
 В следующем примере показано использование метода `Exit`.  
  
 [!code-cpp[MonitorExmpl2#1](~/samples/snippets/cpp/VS_Snippets_CLR/MonitorExmpl2/CPP/monitor2.cpp#1)]
 [!code-csharp[MonitorExmpl2#1](~/samples/snippets/csharp/VS_Snippets_CLR/MonitorExmpl2/CS/monitor2.cs#1)]
 [!code-vb[MonitorExmpl2#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/MonitorExmpl2/VB/monitor2.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">Параметр <paramref name="obj" /> имеет значение <see langword="null" />.</exception>
        <exception cref="T:System.Threading.SynchronizationLockException">Данный поток не владеет блокировкой для указанного объекта.</exception>
        <altmember cref="T:System.Threading.Thread" />
      </Docs>
    </Member>
    <Member MemberName="IsEntered">
      <MemberSignature Language="C#" Value="public static bool IsEntered (object obj);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool IsEntered(object obj) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Monitor.IsEntered(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function IsEntered (obj As Object) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool IsEntered(System::Object ^ obj);" />
      <MemberSignature Language="F#" Value="static member IsEntered : obj -&gt; bool" Usage="System.Threading.Monitor.IsEntered obj" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="obj" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="obj">Объект для тестирования.</param>
        <summary>Определяет, содержит ли текущий поток блокировку указанного объекта.</summary>
        <returns>Значение <see langword="true" />, если текущий поток владеет блокировкой в <paramref name="obj" />; в противном случае — значение <see langword="false" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Этот метод работает только для блокировки, полученные с помощью методов класса <xref:System.Threading.Monitor> класса или с помощью C# `lock` инструкции или Visual Basic `SyncLock` инструкцию, которая реализуются с помощью <xref:System.Threading.Monitor>.  
  
 Используйте этот метод, с помощью диагностических средств, таких как <xref:System.Diagnostics.Debug.Assert%2A> метод и <xref:System.Diagnostics.Contracts.Contract> класса для отладки проблем с блокировкой, включающих <xref:System.Threading.Monitor> класса.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">Свойство <paramref name="obj" /> имеет значение <see langword="null" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="Pulse">
      <MemberSignature Language="C#" Value="public static void Pulse (object obj);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void Pulse(object obj) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Monitor.Pulse(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub Pulse (obj As Object)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void Pulse(System::Object ^ obj);" />
      <MemberSignature Language="F#" Value="static member Pulse : obj -&gt; unit" Usage="System.Threading.Monitor.Pulse obj" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="obj" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="obj">Объект, ожидаемый потоком.</param>
        <summary>Уведомляет поток в очереди готовности об изменении состояния объекта с блокировкой.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Только текущий владелец блокировки может подать сигнал ожидающему объекту, используя `Pulse`.  
  
 Поток, который в данный момент владеет блокировкой указанного объекта вызывает этот метод для обозначения следующему потоку в строку для блокировки. При получении импульса, ожидающий поток перемещается в очередь готовности. Когда поток, вызвавший метод `Pulse` освобождает блокировку, следующий поток в очереди готовности (который не обязательно является потоком, получившим импульс) получает блокировку.  
  
> [!IMPORTANT]
>  <xref:System.Threading.Monitor> Класса не сохраняет состояние, указывающее, что <xref:System.Threading.Monitor.Pulse%2A> был вызван метод. Таким образом при вызове метода <xref:System.Threading.Monitor.Pulse%2A> при отсутствии ожидающих потоков, следующий поток, который вызывает <xref:System.Threading.Monitor.Wait%2A> блоки как если бы <xref:System.Threading.Monitor.Pulse%2A> никогда не был вызван. Если используется два потока <xref:System.Threading.Monitor.Pulse%2A> и <xref:System.Threading.Monitor.Wait%2A> для взаимодействия, это может привести к взаимоблокировке. Сравните это с поведением <xref:System.Threading.AutoResetEvent> класса: Если сигнал <xref:System.Threading.AutoResetEvent> путем вызова его <xref:System.Threading.EventWaitHandle.Set%2A> метода и нет потоков, ожидающих, <xref:System.Threading.AutoResetEvent> остается в состоянии получения сигнала, пока поток вызывает метод <xref:System.Threading.WaitHandle.WaitOne%2A>, <xref:System.Threading.WaitHandle.WaitAny%2A>, или <xref:System.Threading.WaitHandle.WaitAll%2A>. <xref:System.Threading.AutoResetEvent> Освобождает этого потока и возвращает несигнальное состояние.  
  
 Обратите внимание, что синхронизированный объект имеет несколько ссылок, в том числе ссылку на поток, который в настоящее время удерживает блокировку, ссылку на очередь готовности, которая содержит потоки, готовые к получению блокировки, и ссылку на очередь ожидания, который содержит потоки, которые ожидают уведомления об изменении состояния объекта.  
  
 `Pulse`, <xref:System.Threading.Monitor.PulseAll%2A>, И <xref:System.Threading.Monitor.Wait%2A> методы должны быть вызваны из синхронизированного блока кода.  
  
 Для обозначения нескольких потоков используется <xref:System.Threading.Monitor.PulseAll%2A> метод.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">Параметр <paramref name="obj" /> имеет значение <see langword="null" />.</exception>
        <exception cref="T:System.Threading.SynchronizationLockException">Вызывающий поток не владеет блокировкой для указанного объекта.</exception>
        <altmember cref="T:System.Threading.Thread" />
      </Docs>
    </Member>
    <Member MemberName="PulseAll">
      <MemberSignature Language="C#" Value="public static void PulseAll (object obj);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void PulseAll(object obj) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Monitor.PulseAll(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub PulseAll (obj As Object)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void PulseAll(System::Object ^ obj);" />
      <MemberSignature Language="F#" Value="static member PulseAll : obj -&gt; unit" Usage="System.Threading.Monitor.PulseAll obj" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="obj" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="obj">Объект, посылающий импульс.</param>
        <summary>Уведомляет все ожидающие потоки об изменении состояния объекта.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Поток, который в данный момент владеет блокировкой указанного объекта вызывает этот метод для указания всех потоков, ожидающих получения блокировки на объект. После отправки сигнала, потоки перемещаются в очередь готовности. Когда поток, вызвавший метод `PulseAll` освобождает блокировку, следующий поток в очереди готовности получает блокировку.  
  
 Обратите внимание, что синхронизированный объект имеет несколько ссылок, в том числе ссылку на поток, который в настоящее время удерживает блокировку, ссылку на очередь готовности, которая содержит потоки, готовые к получению блокировки, и ссылку на очередь ожидания, который содержит потоки, которые ожидают уведомления об изменении состояния объекта.  
  
 <xref:System.Threading.Monitor.Pulse%2A>, `PulseAll`, И <xref:System.Threading.Monitor.Wait%2A> методы должны быть вызваны из синхронизированного блока кода.  
  
 Примечания для <xref:System.Threading.Monitor.Pulse%2A> метод объясняется, что происходит при <xref:System.Threading.Monitor.Pulse%2A> вызывается при отсутствии ожидающих потоков.  
  
 Для обозначения одного потока, используется `Pulse` метод.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">Параметр <paramref name="obj" /> имеет значение <see langword="null" />.</exception>
        <exception cref="T:System.Threading.SynchronizationLockException">Вызывающий поток не владеет блокировкой для указанного объекта.</exception>
        <altmember cref="T:System.Threading.Thread" />
      </Docs>
    </Member>
    <MemberGroup MemberName="TryEnter">
      <AssemblyInfo>
        <AssemblyName>System.Threading</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Пытается получить эксклюзивную блокировку указанного объекта.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="TryEnter">
      <MemberSignature Language="C#" Value="public static bool TryEnter (object obj);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool TryEnter(object obj) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Monitor.TryEnter(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function TryEnter (obj As Object) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool TryEnter(System::Object ^ obj);" />
      <MemberSignature Language="F#" Value="static member TryEnter : obj -&gt; bool" Usage="System.Threading.Monitor.TryEnter obj" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="obj" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="obj">Объект, блокировка которого получается.</param>
        <summary>Пытается получить эксклюзивную блокировку указанного объекта.</summary>
        <returns>Значение <see langword="true" />, если текущий поток получает блокировку; в противном случае — значение <see langword="false" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Если успешно, этот метод получает эксклюзивную блокировку на `obj` параметра. Этот метод немедленно, возвращает ли доступна блокировка.  
  
 Этот метод аналогичен <xref:System.Threading.Monitor.Enter%2A>, но никогда не заблокирует текущего потока. Если поток не может войти без блокировки, метод возвращает `false,`.  
  
> [!NOTE]
>  Используйте <xref:System.Threading.Monitor> блокирует объекты (то есть ссылочные типы), не типы значений. Дополнительные сведения см. в разделе <xref:System.Threading.Monitor> статьи.  
  
 Чтобы убедиться, что поток не войдет в критическую секцию, необходимо изучить возвращаемое значение метода и выполнения кода в критический раздел только в том случае, если возвращаемое значение не `true`. В следующем фрагменте кода показан шаблон, используемый для вызова этого метода. Обратите внимание, что необходимо вызвать <xref:System.Threading.Monitor.Exit%2A> в `finally` блок, чтобы убедиться, что вызывающий поток освобождает блокировку критической секции при возникновении исключения.  
  
 [!code-csharp[System.Threading.Monitor.TryEnter#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/System.Threading.Monitor.TryEnter/cs/pattern1.cs#1)]
 [!code-vb[System.Threading.Monitor.TryEnter#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/System.Threading.Monitor.TryEnter/vb/pattern1.vb#1)]  
  
   
  
## Examples  
 В следующем примере кода показано, как использовать метод `TryEnter`.  
  
 [!code-cpp[MonitorExmpl2#1](~/samples/snippets/cpp/VS_Snippets_CLR/MonitorExmpl2/CPP/monitor2.cpp#1)]
 [!code-csharp[MonitorExmpl2#1](~/samples/snippets/csharp/VS_Snippets_CLR/MonitorExmpl2/CS/monitor2.cs#1)]
 [!code-vb[MonitorExmpl2#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/MonitorExmpl2/VB/monitor2.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">Параметр <paramref name="obj" /> имеет значение <see langword="null" />.</exception>
        <altmember cref="T:System.Threading.Thread" />
      </Docs>
    </Member>
    <Member MemberName="TryEnter">
      <MemberSignature Language="C#" Value="public static void TryEnter (object obj, ref bool lockTaken);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void TryEnter(object obj, bool&amp; lockTaken) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Monitor.TryEnter(System.Object,System.Boolean@)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub TryEnter (obj As Object, ByRef lockTaken As Boolean)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void TryEnter(System::Object ^ obj, bool % lockTaken);" />
      <MemberSignature Language="F#" Value="static member TryEnter : obj *  -&gt; unit" Usage="System.Threading.Monitor.TryEnter (obj, lockTaken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="obj" Type="System.Object" />
        <Parameter Name="lockTaken" Type="System.Boolean&amp;" RefType="ref" />
      </Parameters>
      <Docs>
        <param name="obj">Объект, блокировка которого получается.</param>
        <param name="lockTaken">Результат попытки получить блокировку, переданную по ссылке. Входное значение должно равняться <see langword="false" />. Выходное значение <see langword="true" />, если блокировка получена; в противном случае — выходное значение <see langword="false" />. Выходное значение задается, даже если при попытке получить блокировку возникает исключение.</param>
        <summary>Пытается получить монопольную блокировку указанного объекта и единым блоком задает значение, указывающее, была ли выполнена блокировка.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Если успешно, этот метод получает эксклюзивную блокировку на `obj` параметра. Этот метод немедленно, возвращает ли доступна блокировка.  
  
 Если блокировка не была сделана, поскольку возникло исключение, переменная, указанная для `lockTaken` параметр `false` после завершения этого метода. Это позволяет приложению определить, во всех случаях необходимость для снятия блокировки.  
  
 Этот метод аналогичен <xref:System.Threading.Monitor.Enter%28System.Object%2CSystem.Boolean%40%29>, но никогда не заблокирует текущего потока. Если поток не может войти без блокировки, `lockTaken` аргумента равно `false` когда этот метод возвращает.  
  
> [!NOTE]
>  Используйте <xref:System.Threading.Monitor> блокирует объекты (то есть ссылочные типы), не типы значений. Дополнительные сведения см. в разделе <xref:System.Threading.Monitor> статьи.  
  
 Чтобы убедиться, что поток не войдет в критическую секцию, необходимо проверить значение `lockTaken` и выполнять код в критический раздел только в том случае, если его значение равно `true`. В следующем фрагменте кода показан шаблон, используемый для вызова этого метода. Обратите внимание, что необходимо вызвать <xref:System.Threading.Monitor.Exit%2A> в `finally` блок, чтобы убедиться, что вызывающий поток освобождает блокировку критической секции при возникновении исключения.  
  
 [!code-csharp[System.Threading.Monitor.TryEnter#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/System.Threading.Monitor.TryEnter/cs/pattern1.cs#2)]
 [!code-vb[System.Threading.Monitor.TryEnter#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/System.Threading.Monitor.TryEnter/vb/pattern1.vb#2)]  
  
   
  
## Examples  
 Ниже показан базовый шаблон для использования <xref:System.Threading.Monitor.TryEnter%28System.Object%2CSystem.Boolean%40%29> перегрузки метода. Эта перегрузка всегда устанавливает значение, передаваемое переменной `ref` параметра (`ByRef` в Visual Basic) `lockTaken`, даже если метод вызывает исключение, поэтому значение переменной является надежным способом для проверки блокировки должен быть выпущен.  
  
 [!code-csharp[System.Threading.Monitor.Enter#3](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.threading.monitor.enter/cs/example.cs#3)]
 [!code-vb[System.Threading.Monitor.Enter#3](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.threading.monitor.enter/vb/example.vb#3)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">Входные данные для <paramref name="lockTaken" /> — <see langword="true" />.</exception>
        <exception cref="T:System.ArgumentNullException">Параметр <paramref name="obj" /> имеет значение <see langword="null" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="TryEnter">
      <MemberSignature Language="C#" Value="public static bool TryEnter (object obj, int millisecondsTimeout);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool TryEnter(object obj, int32 millisecondsTimeout) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Monitor.TryEnter(System.Object,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function TryEnter (obj As Object, millisecondsTimeout As Integer) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool TryEnter(System::Object ^ obj, int millisecondsTimeout);" />
      <MemberSignature Language="F#" Value="static member TryEnter : obj * int -&gt; bool" Usage="System.Threading.Monitor.TryEnter (obj, millisecondsTimeout)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="obj" Type="System.Object" />
        <Parameter Name="millisecondsTimeout" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="obj">Объект, блокировка которого получается.</param>
        <param name="millisecondsTimeout">Количество миллисекунд, в течение которых ожидать блокировку.</param>
        <summary>Пытается получить эксклюзивную блокировку указанного объекта на заданное количество миллисекунд.</summary>
        <returns>Значение <see langword="true" />, если текущий поток получает блокировку; в противном случае — значение <see langword="false" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Если `millisecondsTimeout` равняется <xref:System.Threading.Timeout.Infinite>, этот метод эквивалентен методу <xref:System.Threading.Monitor.Enter%2A>. Если `millisecondsTimeout` равно 0, то этот метод эквивалентен методу <xref:System.Threading.Monitor.TryEnter%2A>.  
  
> [!NOTE]
>  Используйте <xref:System.Threading.Monitor> блокирует объекты (то есть ссылочные типы), не типы значений. Дополнительные сведения см. в разделе <xref:System.Threading.Monitor> статьи.  
  
 Чтобы убедиться, что поток не войдет в критическую секцию, необходимо изучить возвращаемое значение метода и выполнения кода в критический раздел только в том случае, если возвращаемое значение не `true`. В следующем фрагменте кода показан шаблон, используемый для вызова этого метода. Обратите внимание, что необходимо вызвать <xref:System.Threading.Monitor.Exit%2A> в `finally` блок, чтобы убедиться, что вызывающий поток освобождает блокировку критической секции при возникновении исключения.  
  
 [!code-csharp[System.Threading.Monitor.TryEnter#3](~/samples/snippets/csharp/VS_Snippets_CLR_System/System.Threading.Monitor.TryEnter/cs/pattern1.cs#3)]
 [!code-vb[System.Threading.Monitor.TryEnter#3](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/System.Threading.Monitor.TryEnter/vb/pattern1.vb#3)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">Параметр <paramref name="obj" /> имеет значение <see langword="null" />.</exception>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <paramref name="millisecondsTimeout" /> является отрицательным числом и не равно <see cref="F:System.Threading.Timeout.Infinite" />.</exception>
        <altmember cref="T:System.Threading.Thread" />
      </Docs>
    </Member>
    <Member MemberName="TryEnter">
      <MemberSignature Language="C#" Value="public static bool TryEnter (object obj, TimeSpan timeout);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool TryEnter(object obj, valuetype System.TimeSpan timeout) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Monitor.TryEnter(System.Object,System.TimeSpan)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function TryEnter (obj As Object, timeout As TimeSpan) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool TryEnter(System::Object ^ obj, TimeSpan timeout);" />
      <MemberSignature Language="F#" Value="static member TryEnter : obj * TimeSpan -&gt; bool" Usage="System.Threading.Monitor.TryEnter (obj, timeout)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="obj" Type="System.Object" />
        <Parameter Name="timeout" Type="System.TimeSpan" />
      </Parameters>
      <Docs>
        <param name="obj">Объект, блокировка которого получается.</param>
        <param name="timeout">Класс <see cref="T:System.TimeSpan" />, представляющий количество времени, в течение которого ожидается блокировка. Значение –1 миллисекунды обозначает бесконечное ожидание.</param>
        <summary>Пытается получить эксклюзивную блокировку указанного объекта в течение заданного количества времени.</summary>
        <returns>Значение <see langword="true" />, если текущий поток получает блокировку; в противном случае — значение <see langword="false" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Если значение `timeout` параметр преобразованы в миллисекундах равно – 1, то этот метод эквивалентен методу <xref:System.Threading.Monitor.Enter%2A>. Если значение `timeout` равно 0, то этот метод эквивалентен методу <xref:System.Threading.Monitor.TryEnter%2A>.  
  
> [!NOTE]
>  Используйте <xref:System.Threading.Monitor> блокирует объекты (то есть ссылочные типы), не типы значений. Дополнительные сведения см. в разделе <xref:System.Threading.Monitor> разделе, посвященном классу.  
  
 Чтобы убедиться, что поток не войдет в критическую секцию, необходимо изучить возвращаемое значение метода и выполнения кода в критический раздел только в том случае, если возвращаемое значение не `true`. В следующем фрагменте кода показан шаблон, используемый для вызова этого метода. Обратите внимание, что необходимо вызвать <xref:System.Threading.Monitor.Exit%2A> в `finally` блок, чтобы убедиться, что вызывающий поток освобождает блокировку критической секции при возникновении исключения.  
  
 [!code-csharp[System.Threading.Monitor.TryEnter#5](~/samples/snippets/csharp/VS_Snippets_CLR_System/System.Threading.Monitor.TryEnter/cs/pattern1.cs#5)]
 [!code-vb[System.Threading.Monitor.TryEnter#5](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/System.Threading.Monitor.TryEnter/vb/pattern1.vb#5)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">Параметр <paramref name="obj" /> имеет значение <see langword="null" />.</exception>
        <exception cref="T:System.ArgumentOutOfRangeException">Значение <paramref name="timeout" /> (в миллисекундах) является отрицательным. Оно не равно <see cref="F:System.Threading.Timeout.Infinite" /> (-1 миллисекунда) или больше <see cref="F:System.Int32.MaxValue" />.</exception>
        <altmember cref="T:System.Threading.Thread" />
      </Docs>
    </Member>
    <Member MemberName="TryEnter">
      <MemberSignature Language="C#" Value="public static void TryEnter (object obj, int millisecondsTimeout, ref bool lockTaken);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void TryEnter(object obj, int32 millisecondsTimeout, bool&amp; lockTaken) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Monitor.TryEnter(System.Object,System.Int32,System.Boolean@)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub TryEnter (obj As Object, millisecondsTimeout As Integer, ByRef lockTaken As Boolean)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void TryEnter(System::Object ^ obj, int millisecondsTimeout, bool % lockTaken);" />
      <MemberSignature Language="F#" Value="static member TryEnter : obj * int *  -&gt; unit" Usage="System.Threading.Monitor.TryEnter (obj, millisecondsTimeout, lockTaken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="obj" Type="System.Object" />
        <Parameter Name="millisecondsTimeout" Type="System.Int32" />
        <Parameter Name="lockTaken" Type="System.Boolean&amp;" RefType="ref" />
      </Parameters>
      <Docs>
        <param name="obj">Объект, блокировка которого получается.</param>
        <param name="millisecondsTimeout">Количество миллисекунд, в течение которых ожидать блокировку.</param>
        <param name="lockTaken">Результат попытки получить блокировку, переданную по ссылке. Входное значение должно равняться <see langword="false" />. Выходное значение <see langword="true" />, если блокировка получена; в противном случае — выходное значение <see langword="false" />. Выходное значение задается, даже если при попытке получить блокировку возникает исключение.</param>
        <summary>В течение заданного количества миллисекунд пытается получить монопольную блокировку указанного объекта и единым блоком задает значение, указывающее, была ли выполнена блокировка.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Если `millisecondsTimeout` равняется <xref:System.Threading.Timeout.Infinite>, этот метод эквивалентен методу <xref:System.Threading.Monitor.Enter%28System.Object%29>. Если `millisecondsTimeout` равно 0, то этот метод эквивалентен методу <xref:System.Threading.Monitor.TryEnter%28System.Object%29>.  
  
 Если блокировка не была сделана, поскольку возникло исключение, переменная, указанная для `lockTaken` параметр `false` после завершения этого метода. Это позволяет приложению определить, во всех случаях необходимость для снятия блокировки.  
  
> [!NOTE]
>  Используйте <xref:System.Threading.Monitor> блокирует объекты (то есть ссылочные типы), не типы значений. Дополнительные сведения см. в разделе <xref:System.Threading.Monitor> разделе, посвященном классу.  
  
 Чтобы убедиться, что поток не войдет в критическую секцию, необходимо проверить значение `lockTaken` и выполнять код в критический раздел только в том случае, если его значение равно `true`. В следующем фрагменте кода показан шаблон, используемый для вызова этого метода. Обратите внимание, что необходимо вызвать <xref:System.Threading.Monitor.Exit%2A> в `finally` блок, чтобы убедиться, что вызывающий поток освобождает блокировку критической секции при возникновении исключения.  
  
 [!code-csharp[System.Threading.Monitor.TryEnter#4](~/samples/snippets/csharp/VS_Snippets_CLR_System/System.Threading.Monitor.TryEnter/cs/pattern1.cs#4)]
 [!code-vb[System.Threading.Monitor.TryEnter#4](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/System.Threading.Monitor.TryEnter/vb/pattern1.vb#4)]  
  
   
  
## Examples  
 Ниже показан базовый шаблон для использования <xref:System.Threading.Monitor.TryEnter%28System.Object%2CSystem.Boolean%40%29> перегрузки метода. Эта перегрузка всегда устанавливает значение, передаваемое переменной `ref` параметра (`ByRef` в Visual Basic) `lockTaken`, даже если метод вызывает исключение, поэтому значение переменной является надежным способом для проверки блокировки должен быть выпущен.  
  
 [!code-csharp[System.Threading.Monitor.Enter#4](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.threading.monitor.enter/cs/example.cs#4)]
 [!code-vb[System.Threading.Monitor.Enter#4](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.threading.monitor.enter/vb/example.vb#4)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">Входные данные для <paramref name="lockTaken" /> — <see langword="true" />.</exception>
        <exception cref="T:System.ArgumentNullException">Параметр <paramref name="obj" /> имеет значение <see langword="null" />.</exception>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <paramref name="millisecondsTimeout" /> является отрицательным числом и не равно <see cref="F:System.Threading.Timeout.Infinite" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="TryEnter">
      <MemberSignature Language="C#" Value="public static void TryEnter (object obj, TimeSpan timeout, ref bool lockTaken);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void TryEnter(object obj, valuetype System.TimeSpan timeout, bool&amp; lockTaken) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Monitor.TryEnter(System.Object,System.TimeSpan,System.Boolean@)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub TryEnter (obj As Object, timeout As TimeSpan, ByRef lockTaken As Boolean)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void TryEnter(System::Object ^ obj, TimeSpan timeout, bool % lockTaken);" />
      <MemberSignature Language="F#" Value="static member TryEnter : obj * TimeSpan *  -&gt; unit" Usage="System.Threading.Monitor.TryEnter (obj, timeout, lockTaken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="obj" Type="System.Object" />
        <Parameter Name="timeout" Type="System.TimeSpan" />
        <Parameter Name="lockTaken" Type="System.Boolean&amp;" RefType="ref" />
      </Parameters>
      <Docs>
        <param name="obj">Объект, блокировка которого получается.</param>
        <param name="timeout">Период времени, в течение которого ожидается блокировка. Значение –1 миллисекунды обозначает бесконечное ожидание.</param>
        <param name="lockTaken">Результат попытки получить блокировку, переданную по ссылке. Входное значение должно равняться <see langword="false" />. Выходное значение <see langword="true" />, если блокировка получена; в противном случае — выходное значение <see langword="false" />. Выходное значение задается, даже если при попытке получить блокировку возникает исключение.</param>
        <summary>В течение заданного периода времени пытается получить монопольную блокировку указанного объекта и единым блоком задает значение, указывающее, была ли выполнена блокировка.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Если значение `timeout` параметр преобразованы в миллисекундах равно – 1, то этот метод эквивалентен методу <xref:System.Threading.Monitor.Enter%28System.Object%29>. Если значение `timeout` равно 0, то этот метод эквивалентен методу <xref:System.Threading.Monitor.TryEnter%28System.Object%29>.  
  
 Если блокировка не была сделана, поскольку возникло исключение, переменная, указанная для `lockTaken` параметр `false` после завершения этого метода. Это позволяет приложению определить, во всех случаях необходимость для снятия блокировки.  
  
> [!NOTE]
>  Используйте <xref:System.Threading.Monitor> блокирует объекты (то есть ссылочные типы), не типы значений. Дополнительные сведения см. в разделе <xref:System.Threading.Monitor> разделе, посвященном классу.  
  
 Чтобы убедиться, что поток не войдет в критическую секцию, необходимо проверить значение `lockTaken` и выполнять код в критический раздел только в том случае, если его значение равно `true`. В следующем фрагменте кода показан шаблон, используемый для вызова этого метода. Обратите внимание, что необходимо вызвать <xref:System.Threading.Monitor.Exit%2A> в `finally` блок, чтобы убедиться, что вызывающий поток освобождает блокировку критической секции при возникновении исключения.  
  
 [!code-csharp[System.Threading.Monitor.TryEnter#6](~/samples/snippets/csharp/VS_Snippets_CLR_System/System.Threading.Monitor.TryEnter/cs/pattern1.cs#6)]
 [!code-vb[System.Threading.Monitor.TryEnter#6](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/System.Threading.Monitor.TryEnter/vb/pattern1.vb#6)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">Входные данные для <paramref name="lockTaken" /> — <see langword="true" />.</exception>
        <exception cref="T:System.ArgumentNullException">Параметр <paramref name="obj" /> имеет значение <see langword="null" />.</exception>
        <exception cref="T:System.ArgumentOutOfRangeException">Значение <paramref name="timeout" /> (в миллисекундах) является отрицательным. Оно не равно <see cref="F:System.Threading.Timeout.Infinite" /> (-1 миллисекунда) или больше <see cref="F:System.Int32.MaxValue" />.</exception>
        <altmember cref="T:System.Threading.Thread" />
      </Docs>
    </Member>
    <MemberGroup MemberName="Wait">
      <AssemblyInfo>
        <AssemblyName>System.Threading</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Освобождает блокировку объекта и блокирует текущий поток до тех пор, пока тот не получит блокировку снова.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Wait">
      <MemberSignature Language="C#" Value="public static bool Wait (object obj);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool Wait(object obj) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Monitor.Wait(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Wait (obj As Object) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool Wait(System::Object ^ obj);" />
      <MemberSignature Language="F#" Value="static member Wait : obj -&gt; bool" Usage="System.Threading.Monitor.Wait obj" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="obj" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="obj">Объект, в котором следует ожидать.</param>
        <summary>Освобождает блокировку объекта и блокирует текущий поток до тех пор, пока тот не получит блокировку снова.</summary>
        <returns>Значение <see langword="true" />, если вызов осуществил возврат из-за того, что вызывающий поток заново получил блокировку заданного объекта. Этот метод не осуществляет возврат, если блокировка вновь не получена.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Поток, который в данный момент владеет блокировкой указанного объекта вызывает этот метод, чтобы освободить объект доступа к ней другим потоком. Вызывающий поток блокируется, ожидая получения блокировки. Этот метод вызывается, когда вызывающий объект должен ожидать изменения состояния, которая может произойти в результате операций другого потока.  
  
 Если поток вызывает `Wait`, он освобождает блокировку объекта и входит в очередь ожидания объекта. Следующий поток в очереди готовности объекта (если есть) получает блокировку и эксклюзивное использование объекта. Все потоки, которые вызывают `Wait` остаются в очереди ожидания до получения сигнала от <xref:System.Threading.Monitor.Pulse%2A> или <xref:System.Threading.Monitor.PulseAll%2A>, отправленные владельцем блокировки. Если `Pulse` отправлен, затрагивается только поток в начало очереди ожидания. Если `PulseAll` отправляется, затрагиваются все потоки, которые ожидают объекта. При получении сигнала один или несколько потоков оставляют очередь ожидания и входят в очередь готовности. Поток в очереди готовности может повторно получить блокировку.  
  
 Этот метод возвращает, если вызывающий поток снова получает блокировку объекта. Обратите внимание, что этот метод неограниченно блокируется, если владелец блокировки не вызывает `Pulse` или `PulseAll`.  
  
 Вызывающий поток выполняет `Wait` один раз, независимо от того, сколько раз <xref:System.Threading.Monitor.Enter%2A> был вызван для указанного объекта. По существу `Wait` метод хранит количество раз, вызывающий инструкцию `Enter` в объекте и вызывает `Exit` столько раз, сколько нужно, чтобы полностью освободить объект с блокировкой. Затем код, вызывающий блокируется, ожидая получения объекта. Если вызывающий поток заново получает блокировку, система вызывает `Enter` столько раз, сколько необходимо для восстановления сохраненного `Enter` числа. Вызов `Wait` снимает блокировку указанного объекта; если вызывающий объект является владельцем блокировок других объектов, они не освобождаются.  
  
 Обратите внимание, что синхронизированный объект имеет несколько ссылок, в том числе ссылку на поток, который в настоящее время удерживает блокировку, ссылку на очередь готовности, которая содержит потоки, готовые к получению блокировки, и ссылку на очередь ожидания, который содержит потоки, которые ожидают уведомления об изменении состояния объекта.  
  
 <xref:System.Threading.Monitor.Pulse%2A>, <xref:System.Threading.Monitor.PulseAll%2A>, И `Wait` методы должны быть вызваны из синхронизированного блока кода.  
  
 Примечания для <xref:System.Threading.Monitor.Pulse%2A> метод объясняется, что происходит при <xref:System.Threading.Monitor.Pulse%2A> вызывается при отсутствии ожидающих потоков.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">Параметр <paramref name="obj" /> имеет значение <see langword="null" />.</exception>
        <exception cref="T:System.Threading.SynchronizationLockException">Вызывающий поток не владеет блокировкой для указанного объекта.</exception>
        <exception cref="T:System.Threading.ThreadInterruptedException">Поток, который вызывает <see langword="Wait" />, позже прерывается из состояния ожидания. Это происходит, когда другой поток вызывает метод <see cref="M:System.Threading.Thread.Interrupt" /> этого потока.</exception>
        <altmember cref="T:System.Threading.Thread" />
      </Docs>
    </Member>
    <Member MemberName="Wait">
      <MemberSignature Language="C#" Value="public static bool Wait (object obj, int millisecondsTimeout);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool Wait(object obj, int32 millisecondsTimeout) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Monitor.Wait(System.Object,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Wait (obj As Object, millisecondsTimeout As Integer) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool Wait(System::Object ^ obj, int millisecondsTimeout);" />
      <MemberSignature Language="F#" Value="static member Wait : obj * int -&gt; bool" Usage="System.Threading.Monitor.Wait (obj, millisecondsTimeout)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="obj" Type="System.Object" />
        <Parameter Name="millisecondsTimeout" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="obj">Объект, в котором следует ожидать.</param>
        <param name="millisecondsTimeout">Количество миллисекунд для ожидания постановки в очередь готовности.</param>
        <summary>Освобождает блокировку объекта и блокирует текущий поток до тех пор, пока тот не получит блокировку снова. Если указанные временные интервалы истекают, поток встает в очередь готовности.</summary>
        <returns>Значение <see langword="true" />, если блокировка была получена заново до истечения заданного времени; значение <see langword="false" />, если блокировка была получена заново по истечении заданного времени. Этот метод не осуществляет возврат, если блокировка не была получена.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Этот метод не возвращает до получения монопольной блокировки на `obj` параметра.  
  
 Поток, который в данный момент владеет блокировкой указанного объекта вызывает этот метод, чтобы освободить объект доступа к ней другим потоком. Вызывающий поток блокируется, ожидая получения блокировки. Этот метод вызывается, когда вызывающий объект должен ожидать изменения состояния, которая может произойти в результате операций другого потока.  
  
 Время ожидания гарантирует, что текущий поток не блокируется неограниченно, если другой поток освобождает блокировку без предварительного вызова функции <xref:System.Threading.Monitor.Pulse%2A> или <xref:System.Threading.Monitor.PulseAll%2A> метод. Он также перемещает поток в очередь готовности, минуя другие потоки опережать в очереди ожидания, чтобы быстрее получения блокировки. Поток можно проверить возвращаемое значение <xref:System.Threading.Monitor.Wait%2A> метод, чтобы определить, является ли была получена блокировка до истечения времени ожидания. Поток может вычислять условия, которые привело к введите время ожидания и, если требуется вызов <xref:System.Threading.Monitor.Wait%2A> метод снова.  
  
 Если поток вызывает `Wait`, он освобождает блокировку объекта и входит в очередь ожидания объекта. Следующий поток в очереди готовности объекта (если есть) получает блокировку и эксклюзивное использование объекта. Поток, вызвавший `Wait` вызывающий поток, удерживающий блокировку остается в очереди ожидания, пока не будет <xref:System.Threading.Monitor.PulseAll%2A>, или он является следующим в очереди, и поток, который владеет блокировкой вызывает <xref:System.Threading.Monitor.Pulse%2A>. Однако если `millisecondsTimeout` истечет раньше, чем другой поток вызывает этот объект <xref:System.Threading.Monitor.Pulse%2A> или <xref:System.Threading.Monitor.PulseAll%2A> метод исходный поток перемещается в очередь готовности, чтобы снова получить блокировку.  
  
> [!NOTE]
>  Если <xref:System.Threading.Timeout.Infinite> указан для `millisecondsTimeout` параметра, этот метод неограниченно блокируется, если владелец блокировки вызывает <xref:System.Threading.Monitor.Pulse%2A> или <xref:System.Threading.Monitor.PulseAll%2A>. Если `millisecondsTimeout` равно 0, поток, который вызывает `Wait` освобождает блокировку и немедленно входит в очередь готовности, чтобы снова получить блокировку.  
  
 Вызывающий поток выполняет `Wait` один раз, независимо от того, сколько раз <xref:System.Threading.Monitor.Enter%2A> был вызван для указанного объекта. По существу `Wait` метод хранит количество раз, вызывающий инструкцию <xref:System.Threading.Monitor.Enter%2A> в объекте и вызывает <xref:System.Threading.Monitor.Exit%2A> столько раз, сколько нужно, чтобы полностью освободить объект с блокировкой. Затем код, вызывающий блокируется, ожидая получения объекта. Если вызывающий поток заново получает блокировку, система вызывает <xref:System.Threading.Monitor.Enter%2A> столько раз, сколько необходимо для восстановления сохраненного <xref:System.Threading.Monitor.Enter%2A> числа. Вызов `Wait` снимает блокировку указанного объекта; если вызывающий объект является владельцем блокировок других объектов, они не освобождаются.  
  
> [!NOTE]
>  Синхронизированный объект имеет несколько ссылок, в том числе ссылку на поток, который в настоящее время удерживает блокировку, ссылку на очередь готовности, которая содержит потоки, готовые к получению блокировки, и ссылку на очередь ожидания, в которой содержится потоки, которые ожидают уведомления об изменении состояния объекта.  
  
 <xref:System.Threading.Monitor.Pulse%2A>, <xref:System.Threading.Monitor.PulseAll%2A>, И `Wait` методы должны быть вызваны из синхронизированного блока кода.  
  
 Примечания для <xref:System.Threading.Monitor.Pulse%2A> метод объясняется, что происходит при <xref:System.Threading.Monitor.Pulse%2A> вызывается при отсутствии ожидающих потоков.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">Параметр <paramref name="obj" /> имеет значение <see langword="null" />.</exception>
        <exception cref="T:System.Threading.SynchronizationLockException">Вызывающий поток не владеет блокировкой для указанного объекта.</exception>
        <exception cref="T:System.Threading.ThreadInterruptedException">Поток, который вызывает <see langword="Wait" />, позже прерывается из состояния ожидания. Это происходит, когда другой поток вызывает метод <see cref="M:System.Threading.Thread.Interrupt" /> этого потока.</exception>
        <exception cref="T:System.ArgumentOutOfRangeException">Значение параметра <paramref name="millisecondsTimeout" /> отрицательно и не равно <see cref="F:System.Threading.Timeout.Infinite" />.</exception>
        <altmember cref="T:System.Threading.Thread" />
      </Docs>
    </Member>
    <Member MemberName="Wait">
      <MemberSignature Language="C#" Value="public static bool Wait (object obj, TimeSpan timeout);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool Wait(object obj, valuetype System.TimeSpan timeout) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Monitor.Wait(System.Object,System.TimeSpan)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Wait (obj As Object, timeout As TimeSpan) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool Wait(System::Object ^ obj, TimeSpan timeout);" />
      <MemberSignature Language="F#" Value="static member Wait : obj * TimeSpan -&gt; bool" Usage="System.Threading.Monitor.Wait (obj, timeout)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="obj" Type="System.Object" />
        <Parameter Name="timeout" Type="System.TimeSpan" />
      </Parameters>
      <Docs>
        <param name="obj">Объект, в котором следует ожидать.</param>
        <param name="timeout">Класс <see cref="T:System.TimeSpan" />, представляющий количество времени, до истечения которого поток поступает в очередь ожидания.</param>
        <summary>Освобождает блокировку объекта и блокирует текущий поток до тех пор, пока тот не получит блокировку снова. Если указанные временные интервалы истекают, поток встает в очередь готовности.</summary>
        <returns>Значение <see langword="true" />, если блокировка была получена заново до истечения заданного времени; значение <see langword="false" />, если блокировка была получена заново по истечении заданного времени. Этот метод не осуществляет возврат, если блокировка не была получена.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Этот метод не возвращает до получения монопольной блокировки на `obj` параметра.  
  
 Поток, который в данный момент владеет блокировкой указанного объекта вызывает этот метод, чтобы освободить объект доступа к ней другим потоком. Вызывающий поток блокируется, ожидая получения блокировки. Этот метод вызывается, когда вызывающий объект должен ожидать изменения состояния, которая может произойти в результате операций другого потока.  
  
 Время ожидания гарантирует, что текущий поток не блокируется неограниченно, если другой поток освобождает блокировку без предварительного вызова функции <xref:System.Threading.Monitor.Pulse%2A> или <xref:System.Threading.Monitor.PulseAll%2A> метод. Он также перемещает поток в очередь готовности, минуя другие потоки опережать в очереди ожидания, чтобы быстрее получения блокировки. Поток можно проверить возвращаемое значение <xref:System.Threading.Monitor.Wait%2A> метод, чтобы определить, является ли была получена блокировка до истечения времени ожидания. Поток может вычислять условия, которые привело к введите время ожидания и, если требуется вызов <xref:System.Threading.Monitor.Wait%2A> метод снова.  
  
 Если поток вызывает `Wait`, он освобождает блокировку объекта и входит в очередь ожидания объекта. Следующий поток в очереди готовности объекта (если есть) получает блокировку и эксклюзивное использование объекта. Поток, вызвавший `Wait` вызывающий поток, удерживающий блокировку остается в очереди ожидания, пока не будет <xref:System.Threading.Monitor.PulseAll%2A>, или он является следующим в очереди, и поток, который владеет блокировкой вызывает <xref:System.Threading.Monitor.Pulse%2A>. Однако если `timeout` истечет раньше, чем другой поток вызывает этот объект <xref:System.Threading.Monitor.Pulse%2A> или <xref:System.Threading.Monitor.PulseAll%2A> метод исходный поток перемещается в очередь готовности, чтобы снова получить блокировку.  
  
> [!NOTE]
>  Если <xref:System.TimeSpan> представляющий-1 обозначает указан для `timeout` параметра, этот метод неограниченно блокируется, если владелец блокировки вызывает <xref:System.Threading.Monitor.Pulse%2A> или <xref:System.Threading.Monitor.PulseAll%2A>. Если `timeout` равно 0, поток, который вызывает `Wait` освобождает блокировку и немедленно входит в очередь готовности, чтобы снова получить блокировку.  
  
 Вызывающий поток выполняет `Wait` один раз, независимо от того, сколько раз <xref:System.Threading.Monitor.Enter%2A> был вызван для указанного объекта. По существу `Wait` метод хранит количество раз, вызывающий инструкцию <xref:System.Threading.Monitor.Enter%2A> в объекте и вызывает <xref:System.Threading.Monitor.Exit%2A> столько раз, сколько нужно, чтобы полностью освободить объект с блокировкой. Затем код, вызывающий блокируется, ожидая получения объекта. Если вызывающий поток заново получает блокировку, система вызывает <xref:System.Threading.Monitor.Enter%2A> столько раз, сколько необходимо для восстановления сохраненного <xref:System.Threading.Monitor.Enter%2A> числа. Вызов `Wait` снимает блокировку указанного объекта; если вызывающий объект является владельцем блокировок других объектов, они не освобождаются.  
  
> [!NOTE]
>  Синхронизированный объект имеет несколько ссылок, в том числе ссылку на поток, который в настоящее время удерживает блокировку, ссылку на очередь готовности, которая содержит потоки, готовые к получению блокировки, и ссылку на очередь ожидания, в которой содержится потоки, которые ожидают уведомления об изменении состояния объекта.  
  
 <xref:System.Threading.Monitor.Pulse%2A>, <xref:System.Threading.Monitor.PulseAll%2A>, И `Wait` методы должны быть вызваны из синхронизированного блока кода.  
  
 Примечания для <xref:System.Threading.Monitor.Pulse%2A> метод объясняется, что происходит при <xref:System.Threading.Monitor.Pulse%2A> вызывается при отсутствии ожидающих потоков.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">Параметр <paramref name="obj" /> имеет значение <see langword="null" />.</exception>
        <exception cref="T:System.Threading.SynchronizationLockException">Вызывающий поток не владеет блокировкой для указанного объекта.</exception>
        <exception cref="T:System.Threading.ThreadInterruptedException">Поток, который вызывает <see langword="Wait" />, позже прерывается из состояния ожидания. Это происходит, когда другой поток вызывает метод <see cref="M:System.Threading.Thread.Interrupt" /> этого потока.</exception>
        <exception cref="T:System.ArgumentOutOfRangeException">Значение параметра <paramref name="timeout" /> в миллисекундах отрицательно и не равно <see cref="F:System.Threading.Timeout.Infinite" /> (–1 миллисекунда), или больше чем <see cref="F:System.Int32.MaxValue" />.</exception>
        <altmember cref="T:System.Threading.Thread" />
      </Docs>
    </Member>
    <Member MemberName="Wait">
      <MemberSignature Language="C#" Value="public static bool Wait (object obj, int millisecondsTimeout, bool exitContext);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool Wait(object obj, int32 millisecondsTimeout, bool exitContext) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Monitor.Wait(System.Object,System.Int32,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Wait (obj As Object, millisecondsTimeout As Integer, exitContext As Boolean) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool Wait(System::Object ^ obj, int millisecondsTimeout, bool exitContext);" />
      <MemberSignature Language="F#" Value="static member Wait : obj * int * bool -&gt; bool" Usage="System.Threading.Monitor.Wait (obj, millisecondsTimeout, exitContext)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Threading</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="obj" Type="System.Object" />
        <Parameter Name="millisecondsTimeout" Type="System.Int32" />
        <Parameter Name="exitContext" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="obj">Объект, в котором следует ожидать.</param>
        <param name="millisecondsTimeout">Количество миллисекунд для ожидания постановки в очередь готовности.</param>
        <param name="exitContext">Значение <see langword="true" /> для выхода из домена синхронизации в текущем контексте перед ожиданием (в синхронизированном контексте) с его последующим повторным получением; в противном случае — значение <see langword="false" />.</param>
        <summary>Освобождает блокировку объекта и блокирует текущий поток до тех пор, пока тот не получит блокировку снова. Если указанные временные интервалы истекают, поток встает в очередь готовности. Этот метод также указывает на выход из области синхронизации для контекста (если она находится в синхронизированном контексте) до ожидания и ее повторное получение впоследствии.</summary>
        <returns>Значение <see langword="true" />, если блокировка была получена заново до истечения заданного времени; значение <see langword="false" />, если блокировка была получена заново по истечении заданного времени. Этот метод не осуществляет возврат, если блокировка не была получена.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Этот метод не возвращает до получения монопольной блокировки на `obj` параметра.  
  
 Поток, который в данный момент владеет блокировкой указанного объекта вызывает этот метод, чтобы освободить объект доступа к ней другим потоком. Вызывающий поток блокируется, ожидая получения блокировки. Этот метод вызывается, когда вызывающий объект должен ожидать изменения состояния, которая может произойти в результате операций другого потока.  
  
 Время ожидания гарантирует, что текущий поток не блокируется неограниченно, если другой поток освобождает блокировку без предварительного вызова функции <xref:System.Threading.Monitor.Pulse%2A> или <xref:System.Threading.Monitor.PulseAll%2A> метод. Он также перемещает поток в очередь готовности, минуя другие потоки опережать в очереди ожидания, чтобы быстрее получения блокировки. Поток можно проверить возвращаемое значение <xref:System.Threading.Monitor.Wait%2A> метод, чтобы определить, является ли была получена блокировка до истечения времени ожидания. Поток может вычислять условия, которые привело к введите время ожидания и, если требуется вызов <xref:System.Threading.Monitor.Wait%2A> метод снова.  
  
 Если поток вызывает `Wait`, он освобождает блокировку и входит в очередь ожидания. На этом этапе следующему потоку в очереди готовности (если есть) может контролировать блокировки. Поток, вызвавший `Wait` вызывающий поток, удерживающий блокировку остается в очереди ожидания, пока не будет <xref:System.Threading.Monitor.PulseAll%2A>, или он является следующим в очереди, и поток, который владеет блокировкой вызывает <xref:System.Threading.Monitor.Pulse%2A>. Однако если `millisecondsTimeout` истечет раньше, чем другой поток вызывает этот объект <xref:System.Threading.Monitor.Pulse%2A> или <xref:System.Threading.Monitor.PulseAll%2A> метод исходный поток перемещается в очередь готовности, чтобы снова получить блокировку.  
  
> [!NOTE]
>  Если <xref:System.Threading.Timeout.Infinite> указан для `millisecondsTimeout` параметра, этот метод неограниченно блокируется, если владелец блокировки вызывает <xref:System.Threading.Monitor.Pulse%2A> или <xref:System.Threading.Monitor.PulseAll%2A>. Если `millisecondsTimeout` равно 0, поток, который вызывает `Wait` освобождает блокировку и немедленно входит в очередь готовности, чтобы снова получить блокировку.  
  
 Вызывающий поток выполняет `Wait` один раз, независимо от того, сколько раз <xref:System.Threading.Monitor.Enter%2A> был вызван для указанного объекта. По существу `Wait` метод хранит количество раз, вызывающий инструкцию <xref:System.Threading.Monitor.Enter%2A> в объекте и вызывает <xref:System.Threading.Monitor.Exit%2A> столько раз, сколько нужно, чтобы полностью освободить объект с блокировкой. Затем код, вызывающий блокируется, ожидая получения объекта. Если вызывающий поток заново получает блокировку, система вызывает <xref:System.Threading.Monitor.Enter%2A> столько раз, сколько необходимо для восстановления сохраненного <xref:System.Threading.Monitor.Enter%2A> числа. Вызов `Wait` снимает блокировку указанного объекта; если вызывающий объект является владельцем блокировок других объектов, они не освобождаются.  
  
> [!NOTE]
>  Синхронизированный объект имеет несколько ссылок, в том числе ссылку на поток, который в настоящее время удерживает блокировку, ссылку на очередь готовности, которая содержит потоки, готовые к получению блокировки, и ссылку на очередь ожидания, в которой содержится потоки, которые ожидают уведомления об изменении состояния объекта.  
  
 <xref:System.Threading.Monitor.Pulse%2A>, <xref:System.Threading.Monitor.PulseAll%2A>, И `Wait` методы должны быть вызваны из синхронизированного блока кода.  
  
 Примечания для <xref:System.Threading.Monitor.Pulse%2A> метод объясняется, что происходит при <xref:System.Threading.Monitor.Pulse%2A> вызывается при отсутствии ожидающих потоков.  
  
## <a name="notes-on-exiting-the-context"></a>Примечания о выходе из контекста  
 `exitContext` Параметр действует только <xref:System.Threading.Monitor.Wait%2A> метод вызывается из внутри управляемого контекста не по умолчанию. Это может произойти, если ваш поток находится внутри вызова к экземпляру класса, производного от <xref:System.ContextBoundObject>. Даже если в настоящее время выполняется метод в классе, который не является производным от <xref:System.ContextBoundObject>, таких как <xref:System.String>, может быть в контексте не по умолчанию если <xref:System.ContextBoundObject> стеке в текущем домене приложения.  
  
 Если ваш код выполняется в контексте не по умолчанию, указав `true` для `exitContext` вызывающий поток выйти из управляемого контекста не по умолчанию (то есть переход в контекст по умолчанию) перед выполнением <xref:System.Threading.Monitor.Wait%2A> метод. Возвращается к исходному контексту не по умолчанию после вызова <xref:System.Threading.Monitor.Wait%2A> метод завершения.  
  
 Это может быть полезно, если привязанные к контексту класс имеет <xref:System.Runtime.Remoting.Contexts.SynchronizationAttribute> применен атрибут. В этом случае все вызовы к членам класса автоматически синхронизируются, и области синхронизации находится в теле кода для класса. Если код в стеке вызовов члена вызывает <xref:System.Threading.Monitor.Wait%2A> метод и указывает `true` для `exitContext`, поток выходит из области синхронизации, что поток, который блокируется во время вызова любого члена объекта для продолжения. Когда <xref:System.Threading.Monitor.Wait%2A> метод возвращает поток, в которой был сделан вызов необходимо подождать для повторного ввода области синхронизации.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">Параметр <paramref name="obj" /> имеет значение <see langword="null" />.</exception>
        <exception cref="T:System.Threading.SynchronizationLockException">
          <see langword="Wait" /> — не вызывается из синхронизированного блока кода.</exception>
        <exception cref="T:System.Threading.ThreadInterruptedException">Поток, который вызывает <see langword="Wait" />, позже прерывается из состояния ожидания. Это происходит, когда другой поток вызывает метод <see cref="M:System.Threading.Thread.Interrupt" /> этого потока.</exception>
        <exception cref="T:System.ArgumentOutOfRangeException">Значение параметра <paramref name="millisecondsTimeout" /> отрицательно и не равно <see cref="F:System.Threading.Timeout.Infinite" />.</exception>
        <altmember cref="T:System.Threading.Thread" />
      </Docs>
    </Member>
    <Member MemberName="Wait">
      <MemberSignature Language="C#" Value="public static bool Wait (object obj, TimeSpan timeout, bool exitContext);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool Wait(object obj, valuetype System.TimeSpan timeout, bool exitContext) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Monitor.Wait(System.Object,System.TimeSpan,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Wait (obj As Object, timeout As TimeSpan, exitContext As Boolean) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool Wait(System::Object ^ obj, TimeSpan timeout, bool exitContext);" />
      <MemberSignature Language="F#" Value="static member Wait : obj * TimeSpan * bool -&gt; bool" Usage="System.Threading.Monitor.Wait (obj, timeout, exitContext)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Threading</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="obj" Type="System.Object" />
        <Parameter Name="timeout" Type="System.TimeSpan" />
        <Parameter Name="exitContext" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="obj">Объект, в котором следует ожидать.</param>
        <param name="timeout">Класс <see cref="T:System.TimeSpan" />, представляющий количество времени, до истечения которого поток поступает в очередь ожидания.</param>
        <param name="exitContext">Значение <see langword="true" /> для выхода из домена синхронизации в текущем контексте перед ожиданием (в синхронизированном контексте) с его последующим повторным получением; в противном случае — значение <see langword="false" />.</param>
        <summary>Освобождает блокировку объекта и блокирует текущий поток до тех пор, пока тот не получит блокировку снова. Если указанные временные интервалы истекают, поток встает в очередь готовности. Дополнительно выходит из синхронизированного домена для синхронизации контекста до ожидания и получает домен впоследствии.</summary>
        <returns>Значение <see langword="true" />, если блокировка была получена заново до истечения заданного времени; значение <see langword="false" />, если блокировка была получена заново по истечении заданного времени. Этот метод не осуществляет возврат, если блокировка не была получена.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Этот метод не возвращает до получения монопольной блокировки на `obj` параметра.  
  
 Поток, который в данный момент владеет блокировкой указанного объекта вызывает этот метод, чтобы освободить объект доступа к ней другим потоком. Вызывающий поток блокируется, ожидая получения блокировки. Этот метод вызывается, когда вызывающий объект должен ожидать изменения состояния, которая может произойти в результате операций другого потока.  
  
 Время ожидания гарантирует, что текущий поток не блокируется неограниченно, если другой поток освобождает блокировку без предварительного вызова функции <xref:System.Threading.Monitor.Pulse%2A> или <xref:System.Threading.Monitor.PulseAll%2A> метод. Он также перемещает поток в очередь готовности, минуя другие потоки опережать в очереди ожидания, чтобы быстрее получения блокировки. Поток можно проверить возвращаемое значение <xref:System.Threading.Monitor.Wait%2A> метод, чтобы определить, является ли была получена блокировка до истечения времени ожидания. Поток может вычислять условия, которые привело к введите время ожидания и, если требуется вызов <xref:System.Threading.Monitor.Wait%2A> метод снова.  
  
 Если поток вызывает `Wait`, он освобождает блокировку и входит в очередь ожидания. На этом этапе следующему потоку в очереди готовности (если есть) может контролировать блокировки. Поток, вызвавший `Wait` вызывающий поток, удерживающий блокировку остается в очереди ожидания, пока не будет <xref:System.Threading.Monitor.PulseAll%2A>, или он является следующим в очереди, и поток, который владеет блокировкой вызывает <xref:System.Threading.Monitor.Pulse%2A>. Однако если `timeout` пройдет, прежде чем другой поток вызывает этот объект <xref:System.Threading.Monitor.Pulse%2A> или <xref:System.Threading.Monitor.PulseAll%2A> метод исходный поток перемещается в очередь готовности, чтобы снова получить блокировку.  
  
> [!NOTE]
>  Если <xref:System.TimeSpan> представляющий-1 миллисекунды указан для `timeout` параметра, этот метод неограниченно блокируется, если владелец блокировки вызывает <xref:System.Threading.Monitor.Pulse%2A> или <xref:System.Threading.Monitor.PulseAll%2A>. Если `timeout` равно 0, поток, который вызывает `Wait` освобождает блокировку и немедленно входит в очередь готовности, чтобы снова получить блокировку.  
  
 Вызывающий поток выполняет `Wait` один раз, независимо от того, сколько раз <xref:System.Threading.Monitor.Enter%2A> был вызван для указанного объекта. По существу `Wait` метод хранит количество раз, вызывающий инструкцию <xref:System.Threading.Monitor.Enter%2A> в объекте и вызывает <xref:System.Threading.Monitor.Exit%2A> столько раз, сколько нужно, чтобы полностью освободить объект с блокировкой. Затем код, вызывающий блокируется, ожидая получения объекта. Если вызывающий поток заново получает блокировку, система вызывает <xref:System.Threading.Monitor.Enter%2A> столько раз, сколько необходимо для восстановления сохраненного <xref:System.Threading.Monitor.Enter%2A> числа. Вызов `Wait` снимает блокировку указанного объекта; если вызывающий объект является владельцем блокировок других объектов, они не освобождаются.  
  
> [!NOTE]
>  Синхронизированный объект имеет несколько ссылок, в том числе ссылку на поток, который в настоящее время удерживает блокировку, ссылку на очередь готовности, которая содержит потоки, готовые к получению блокировки, и ссылку на очередь ожидания, в которой содержится потоки, которые ожидают уведомления об изменении состояния объекта.  
  
 <xref:System.Threading.Monitor.Pulse%2A>, <xref:System.Threading.Monitor.PulseAll%2A>, И `Wait` методы должны быть вызваны из синхронизированного блока кода.  
  
 Примечания для <xref:System.Threading.Monitor.Pulse%2A> метод объясняется, что происходит при <xref:System.Threading.Monitor.Pulse%2A> вызывается при отсутствии ожидающих потоков.  
  
## <a name="notes-on-exiting-the-context"></a>Примечания о выходе из контекста  
 `exitContext` Параметр действует только <xref:System.Threading.Monitor.Wait%2A> метод вызывается из внутри управляемого контекста не по умолчанию. Это может произойти, если ваш поток находится внутри вызова к экземпляру класса, производного от <xref:System.ContextBoundObject>. Даже если в настоящее время выполняется метод в классе, который не является производным от <xref:System.ContextBoundObject>, таких как <xref:System.String>, может быть в контексте не по умолчанию если <xref:System.ContextBoundObject> стеке в текущем домене приложения.  
  
 Если ваш код выполняется в контексте не по умолчанию, указав `true` для `exitContext` вызывающий поток выйти из управляемого контекста не по умолчанию (то есть переход в контекст по умолчанию) перед выполнением <xref:System.Threading.Monitor.Wait%2A> метод. Возвращается к исходному контексту не по умолчанию после вызова <xref:System.Threading.Monitor.Wait%2A> метод завершения.  
  
 Это может быть полезно, если привязанные к контексту класс имеет <xref:System.Runtime.Remoting.Contexts.SynchronizationAttribute> применен атрибут. В этом случае все вызовы к членам класса автоматически синхронизируются, и области синхронизации находится в теле кода для класса. Если код в стеке вызовов члена вызывает <xref:System.Threading.Monitor.Wait%2A> метод и указывает `true` для `exitContext`, поток выходит из области синхронизации, что поток, который блокируется во время вызова любого члена объекта для продолжения. Когда <xref:System.Threading.Monitor.Wait%2A> метод возвращает поток, в которой был сделан вызов необходимо подождать для повторного ввода области синхронизации.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">Параметр <paramref name="obj" /> имеет значение <see langword="null" />.</exception>
        <exception cref="T:System.Threading.SynchronizationLockException">
          <see langword="Wait" /> — не вызывается из синхронизированного блока кода.</exception>
        <exception cref="T:System.Threading.ThreadInterruptedException">Для потока, который вызывает Wait, состояние ожидания позже прерывается. Это происходит, когда другой поток вызывает метод <see cref="M:System.Threading.Thread.Interrupt" /> этого потока.</exception>
        <exception cref="T:System.ArgumentOutOfRangeException">Параметр <paramref name="timeout" /> имеет отрицательное значение и не представляет <see cref="F:System.Threading.Timeout.Infinite" /> (-1 миллисекунда) или больше, чем <see cref="F:System.Int32.MaxValue" />.</exception>
        <altmember cref="T:System.Threading.Thread" />
      </Docs>
    </Member>
  </Members>
</Type>