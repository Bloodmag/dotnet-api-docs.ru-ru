<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" version="1.2" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="Monitor.xml" source-language="en-US" target-language="ru-RU">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-15c36f0" tool-company="Microsoft" />
      <xliffext:skl_file_name xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">02cd5861-7ce2-4a82-b358-31f8435a0ac5cfafcfe91d4ef6eba6ebbbbe6d7101119c93823a.skl</xliffext:skl_file_name>
      <xliffext:version xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">1.2</xliffext:version>
      <xliffext:ms.openlocfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">cfafcfe91d4ef6eba6ebbbbe6d7101119c93823a</xliffext:ms.openlocfilehash>
      <xliffext:ms.sourcegitcommit xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">d31dc2ede16f6f7bc64e90d9f897ff54c4e3869b</xliffext:ms.sourcegitcommit>
      <xliffext:ms.lasthandoff xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">04/03/2018</xliffext:ms.lasthandoff>
      <xliffext:moniker_ids xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">netcore-1.0,netcore-1.1,netcore-2.0,netcore-2.1,netframework-4.5.1,netframework-4.5.2,netframework-4.5,netframework-4.6.1,netframework-4.6.2,netframework-4.6,netframework-4.7.1,netframework-4.7,netstandard-1.0,netstandard-1.1,netstandard-1.2,netstandard-1.3,netstandard-1.4,netstandard-1.6,netstandard-2.0,xamarinandroid-7.1,xamarinios-10.8,xamarinmac-3.0</xliffext:moniker_ids>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve" uid="T:System.Threading.Monitor">
          <source>Provides a mechanism that synchronizes access to objects.</source>
          <target state="translated">Предоставляет механизм для синхронизации доступа к объектам.</target>       </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Threading.Monitor">
          <source>The <ph id="ph1">&lt;xref:System.Threading.Monitor&gt;</ph> class allows you to synchronize access to a region of code by taking and releasing a lock on a particular object by calling the <ph id="ph2">&lt;xref:System.Threading.Monitor.Enter%2A?displayProperty=nameWithType&gt;</ph>, <ph id="ph3">&lt;xref:System.Threading.Monitor.TryEnter%2A?displayProperty=nameWithType&gt;</ph>, and <ph id="ph4">&lt;xref:System.Threading.Monitor.Exit%2A?displayProperty=nameWithType&gt;</ph> methods.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Threading.Monitor&gt;</ph> Позволяет синхронизировать доступ к области кода путем установки и снятия блокировки определенного объекта путем вызова <ph id="ph2">&lt;xref:System.Threading.Monitor.Enter%2A?displayProperty=nameWithType&gt;</ph>, <ph id="ph3">&lt;xref:System.Threading.Monitor.TryEnter%2A?displayProperty=nameWithType&gt;</ph>, и <ph id="ph4">&lt;xref:System.Threading.Monitor.Exit%2A?displayProperty=nameWithType&gt;</ph> методы.</target>       </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Threading.Monitor">
          <source>Object locks provide the ability to restrict access to a block of code, commonly called a critical section.</source>
          <target state="translated">Блокировки объектов предоставляют возможность ограничить доступ к блоку кода, обычно называемой критической секции.</target>       </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Threading.Monitor">
          <source>While a thread owns the lock for an object, no other thread can acquire that lock.</source>
          <target state="translated">Пока поток владеет блокировкой для объекта, никакой другой поток не может получить блокировку.</target>       </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Threading.Monitor">
          <source>You can also use the <ph id="ph1">&lt;xref:System.Threading.Monitor&gt;</ph> class to ensure that no other thread is allowed to access a section of application code being executed by the lock owner, unless the other thread is executing the code using a different locked object.</source>
          <target state="translated">Можно также использовать <ph id="ph1">&lt;xref:System.Threading.Monitor&gt;</ph> класса, чтобы гарантировать, что ни один поток имеет доступ к разделу приложения кода выполняется владельцем блокировки, пока другой поток не будет выполнять код, используя другой объект с блокировкой.</target>       </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Threading.Monitor">
          <source>In this article:</source>
          <target state="translated">Содержание этой статьи</target>       </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Threading.Monitor">
          <source><bpt id="p1">[</bpt>The Monitor class: An overview<ept id="p1">](#Overview)</ept><ph id="ph1"> </ph></source>
          <target state="translated"><bpt id="p1">[</bpt>Класс Monitor: Обзор<ept id="p1">](#Overview)</ept><ph id="ph1"> </ph></target>       </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Threading.Monitor">
          <source><bpt id="p1">[</bpt>The lock object<ept id="p1">](#Lock)</ept><ph id="ph1"> </ph></source>
          <target state="translated"><bpt id="p1">[</bpt>Объект блокировки<ept id="p1">](#Lock)</ept><ph id="ph1"> </ph></target>       </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Threading.Monitor">
          <source><bpt id="p1">[</bpt>The critical section<ept id="p1">](#CriticalSection)</ept><ph id="ph1"> </ph></source>
          <target state="translated"><bpt id="p1">[</bpt>Критический раздел<ept id="p1">](#CriticalSection)</ept><ph id="ph1"> </ph></target>       </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Threading.Monitor">
          <source><bpt id="p1">[</bpt>Pulse, PulseAll, and Wait<ept id="p1">](#Pulse)</ept><ph id="ph1"> </ph></source>
          <target state="translated"><bpt id="p1">[</bpt>Pulse, PulseAll и ожидания<ept id="p1">](#Pulse)</ept><ph id="ph1"> </ph></target>       </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Threading.Monitor">
          <source><bpt id="p1">[</bpt>Monitors and wait handles<ept id="p1">](#WaitHandles)</ept></source>
          <target state="translated"><bpt id="p1">[</bpt>Мониторы и дескрипторы ожидания<ept id="p1">](#WaitHandles)</ept></target>       </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Threading.Monitor">
          <source>The Monitor class: An overview</source>
          <target state="translated">Класс Monitor: Обзор</target>       </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Threading.Monitor">
          <source><ph id="ph1">&lt;xref:System.Threading.Monitor&gt;</ph> has the following features:</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Threading.Monitor&gt;</ph> имеет следующие особенности:</target>       </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Threading.Monitor">
          <source>It is associated with an object on demand.</source>
          <target state="translated">Он связан с объектом по требованию.</target>       </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Threading.Monitor">
          <source>It is unbound, which means it can be called directly from any context.</source>
          <target state="translated">Отменяется, то есть могут вызываться непосредственно из любого контекста.</target>       </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Threading.Monitor">
          <source>An instance of the <ph id="ph1">&lt;xref:System.Threading.Monitor&gt;</ph> class cannot be created; the methods of the <ph id="ph2">&lt;xref:System.Threading.Monitor&gt;</ph> class are all static.</source>
          <target state="translated">Экземпляр <ph id="ph1">&lt;xref:System.Threading.Monitor&gt;</ph> не может быть создан класс; методы <ph id="ph2">&lt;xref:System.Threading.Monitor&gt;</ph> класса являются статическими.</target>       </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Threading.Monitor">
          <source>Each method is passed the synchronized object that controls access to the critical section.</source>
          <target state="translated">Каждый метод передается синхронизированный объект, который управляет доступом к критической секции.</target>       </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Threading.Monitor">
          <source>Use the <ph id="ph1">&lt;xref:System.Threading.Monitor&gt;</ph> class to lock objects other than strings (that is, reference types other than <ph id="ph2">&lt;xref:System.String&gt;</ph>), not value types.</source>
          <target state="translated">Используйте <ph id="ph1">&lt;xref:System.Threading.Monitor&gt;</ph> класса для блокировки объектов, отличных от строки (то есть ссылочные типы, отличный от <ph id="ph2">&lt;xref:System.String&gt;</ph>), не типы значений.</target>       </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Threading.Monitor">
          <source>For details, see the overloads of the <ph id="ph1">&lt;xref:System.Threading.Monitor.Enter%2A&gt;</ph> method and <bpt id="p1">[</bpt>The lock object<ept id="p1">](#Lock)</ept> section later in this article.</source>
          <target state="translated">Дополнительные сведения см. в разделе перегрузки <ph id="ph1">&lt;xref:System.Threading.Monitor.Enter%2A&gt;</ph> метод и <bpt id="p1">[</bpt>объект блокировки<ept id="p1">](#Lock)</ept> далее в этой статье.</target>       </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Threading.Monitor">
          <source>The following table describes the actions that can be taken by threads that access synchronized objects:</source>
          <target state="translated">В следующей таблице описаны действия, которые могут быть выполнены из потоков, которые обращаются к Синхронизируемые объекты:</target>       </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Threading.Monitor">
          <source>Action</source>
          <target state="translated">Действие</target>       </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Threading.Monitor">
          <source>Description</source>
          <target state="translated">Описание:</target>       </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Threading.Monitor">
          <source><ph id="ph1">&lt;xref:System.Threading.Monitor.Enter%2A&gt;</ph>, <ph id="ph2">&lt;xref:System.Threading.Monitor.TryEnter%2A&gt;</ph></source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Threading.Monitor.Enter%2A&gt;</ph>, <ph id="ph2">&lt;xref:System.Threading.Monitor.TryEnter%2A&gt;</ph></target>       </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Threading.Monitor">
          <source>Acquires a lock for an object.</source>
          <target state="translated">Получает блокировку для объекта.</target>       </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Threading.Monitor">
          <source>This action also marks the beginning of a critical section.</source>
          <target state="translated">Это действие также отмечает начало критической секции.</target>       </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Threading.Monitor">
          <source>No other thread can enter the critical section unless it is executing the instructions in the critical section using a different locked object.</source>
          <target state="translated">Ни один поток может вводить критическую секцию, если он выполняет инструкции в критической секции, используя другой объект с блокировкой.</target>       </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Threading.Monitor">
          <source>Releases the lock on an object in order to permit other threads to lock and access the object.</source>
          <target state="translated">Освобождает блокировку объекта, чтобы разрешить другим потокам для блокировки и доступ к объекту.</target>       </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Threading.Monitor">
          <source>The calling thread waits while another thread accesses the object.</source>
          <target state="translated">Вызывающий поток ожидает, пока другой поток обращается к объекту.</target>       </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Threading.Monitor">
          <source>Pulse signals are used to notify waiting threads about changes to an object's state.</source>
          <target state="translated">Pulse сигналы, используемые для уведомления ожидающие потоки об изменении состояния объекта.</target>       </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Threading.Monitor">
          <source><ph id="ph1">&lt;xref:System.Threading.Monitor.Pulse%2A&gt;</ph> (signal), <ph id="ph2">&lt;xref:System.Threading.Monitor.PulseAll%2A&gt;</ph></source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Threading.Monitor.Pulse%2A&gt;</ph> (сигнал) <ph id="ph2">&lt;xref:System.Threading.Monitor.PulseAll%2A&gt;</ph></target>       </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Threading.Monitor">
          <source>Sends a signal to one or more waiting threads.</source>
          <target state="translated">Посылает сигнал один или более ожидающих потоков.</target>       </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Threading.Monitor">
          <source>The signal notifies a waiting thread that the state of the locked object has changed, and the owner of the lock is ready to release the lock.</source>
          <target state="translated">Сигнал уведомляет ожидающий поток измененное состояние объекта с блокировкой, и владелец блокировки готов для снятия блокировки.</target>       </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Threading.Monitor">
          <source>The waiting thread is placed in the object's ready queue so that it might eventually receive the lock for the object.</source>
          <target state="translated">Ожидающий поток помещается в очередь готовности объекта, чтобы она со временем может получить блокировку для объекта.</target>       </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Threading.Monitor">
          <source>Once the thread has the lock, it can check the new state of the object to see if the required state has been reached.</source>
          <target state="translated">Когда поток получает блокировку, он может проверить новое состояние объекта, чтобы увидеть, если был достигнут требуемое состояние.</target>       </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Threading.Monitor">
          <source>Releases the lock on an object.</source>
          <target state="translated">Освобождает блокировку объекта.</target>       </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Threading.Monitor">
          <source>This action also marks the end of a critical section protected by the locked object.</source>
          <target state="translated">Это действие также отмечает конец критической секции, защищенной объектом с блокировкой.</target>       </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Threading.Monitor">
          <source>Beginning with the <ph id="ph1">[!INCLUDE[net_v40_long](~/includes/net-v40-long-md.md)]</ph>, there are two sets of overloads for the <ph id="ph2">&lt;xref:System.Threading.Monitor.Enter%2A&gt;</ph> and <ph id="ph3">&lt;xref:System.Threading.Monitor.TryEnter%2A&gt;</ph> methods.</source>
          <target state="translated">Начиная с версии <ph id="ph1">[!INCLUDE[net_v40_long](~/includes/net-v40-long-md.md)]</ph>, два набора перегрузки для <ph id="ph2">&lt;xref:System.Threading.Monitor.Enter%2A&gt;</ph> и <ph id="ph3">&lt;xref:System.Threading.Monitor.TryEnter%2A&gt;</ph> методы.</target>       </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Threading.Monitor">
          <source>One set of overloads has a <ph id="ph1">`ref`</ph> (in C#) or <ph id="ph2">`ByRef`</ph> (in Visual Basic) <ph id="ph3">&lt;xref:System.Boolean&gt;</ph> parameter that is atomically set to <ph id="ph4">`true`</ph> if the lock is acquired, even if an exception is thrown when acquiring the lock.</source>
          <target state="translated">Один набор из перегрузок имеет <ph id="ph1">`ref`</ph> (в C#) или <ph id="ph2">`ByRef`</ph> (в Visual Basic) <ph id="ph3">&lt;xref:System.Boolean&gt;</ph> параметр, который автоматически устанавливается как <ph id="ph4">`true`</ph> Если блокировки, даже если исключение при получении блокировки.</target>       </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Threading.Monitor">
          <source>Use these overloads if it is critical to release the lock in all cases, even when the resources the lock is protecting might not be in a consistent state.</source>
          <target state="translated">Используйте эти перегрузки, если необходимо снять блокировку во всех случаях, даже в том случае, когда защита блокировки ресурсов может оказаться в несогласованном состоянии.</target>       </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Threading.Monitor">
          <source>The lock object</source>
          <target state="translated">Объект блокировки</target>       </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Threading.Monitor">
          <source>The Monitor class consists of <ph id="ph1">`static`</ph> (in C#) or  <ph id="ph2">`Shared`</ph> (in Visual Basic) methods that operate on an object that controls access to the critical section.</source>
          <target state="translated">Класс Monitor состоит из <ph id="ph1">`static`</ph> (в C#) или <ph id="ph2">`Shared`</ph> (в Visual Basic) методов, которые работают на объект, которая управляет доступом к критической секции.</target>       </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Threading.Monitor">
          <source>The following information is maintained for each synchronized object:</source>
          <target state="translated">Для каждого синхронизированного объекта осуществляется следующие сведения:</target>       </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Threading.Monitor">
          <source>A reference to the thread that currently holds the lock.</source>
          <target state="translated">Ссылка на поток, который в данный момент владеет блокировкой.</target>       </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Threading.Monitor">
          <source>A reference to a ready queue, which contains the threads that are ready to obtain the lock.</source>
          <target state="translated">Ссылка на очередь готовности, которая содержит потоки, готовые к получению блокировки.</target>       </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Threading.Monitor">
          <source>A reference to a waiting queue, which contains the threads that are waiting for notification of a change in the state of the locked object.</source>
          <target state="translated">Ссылка на очередь ожидания, в которой находятся потоки, которые ожидают уведомления об изменении состояния объекта с блокировкой.</target>       </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Threading.Monitor">
          <source><ph id="ph1">&lt;xref:System.Threading.Monitor&gt;</ph> locks objects (that is, reference types), not value types.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Threading.Monitor&gt;</ph> блокирует объекты (то есть ссылочные типы), а не типы значений.</target>       </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Threading.Monitor">
          <source>While you can pass a value type to <ph id="ph1">&lt;xref:System.Threading.Monitor.Enter%2A&gt;</ph> and <ph id="ph2">&lt;xref:System.Threading.Monitor.Exit%2A&gt;</ph>, it is boxed separately for each call.</source>
          <target state="translated">Хотя можно передать тип значения в <ph id="ph1">&lt;xref:System.Threading.Monitor.Enter%2A&gt;</ph> и <ph id="ph2">&lt;xref:System.Threading.Monitor.Exit%2A&gt;</ph>, он упаковывается отдельно для каждого вызова.</target>       </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Threading.Monitor">
          <source>Since each call creates a separate object, <ph id="ph1">&lt;xref:System.Threading.Monitor.Enter%2A&gt;</ph> never blocks, and the code it is supposedly protecting is not really synchronized.</source>
          <target state="translated">Поскольку при каждом вызове создается отдельный объект, <ph id="ph1">&lt;xref:System.Threading.Monitor.Enter%2A&gt;</ph> никогда не выполняет блокировку, а код, который он предположительно защищает, на самом деле не синхронизируется.</target>       </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Threading.Monitor">
          <source>In addition, the object passed to <ph id="ph1">&lt;xref:System.Threading.Monitor.Exit%2A&gt;</ph> is different from the object passed to <ph id="ph2">&lt;xref:System.Threading.Monitor.Enter%2A&gt;</ph>, so <ph id="ph3">&lt;xref:System.Threading.Monitor&gt;</ph> throws <ph id="ph4">&lt;xref:System.Threading.SynchronizationLockException&gt;</ph> exception with the message "Object synchronization method was called from an unsynchronized block of code."</source>
          <target state="translated">Кроме того, объект, переданный в <ph id="ph1">&lt;xref:System.Threading.Monitor.Exit%2A&gt;</ph>, отличается от объекта, переданного в <ph id="ph2">&lt;xref:System.Threading.Monitor.Enter%2A&gt;</ph>, поэтому <ph id="ph3">&lt;xref:System.Threading.Monitor&gt;</ph> вызывает исключение <ph id="ph4">&lt;xref:System.Threading.SynchronizationLockException&gt;</ph> с сообщением «Для не синхронизированного блока кода вызван метод синхронизации объектов».</target>       </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Threading.Monitor">
          <source>The following example illustrates this problem.</source>
          <target state="translated">Приведенный ниже пример иллюстрирует данную проблему.</target>       </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Threading.Monitor">
          <source>It launches ten tasks, each of which just sleeps for 250 milliseconds.</source>
          <target state="translated">Он запускает десять задач, каждая из которых просто бездействует в течение 250 миллисекунд.</target>       </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Threading.Monitor">
          <source>Each task then updates a counter variable, <ph id="ph1">`nTasks`</ph>, which is intended to count the number of tasks that actually launched and executed.</source>
          <target state="translated">Затем каждая задача обновляет переменную счетчика <ph id="ph1">`nTasks`</ph>, который предназначен для подсчета количества фактически запущенных и выполненных задач.</target>       </trans-unit>
        <trans-unit id="153" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Threading.Monitor">
          <source>Because <ph id="ph1">`nTasks`</ph> is a global variable that can be updated by multiple tasks simultaneously, a monitor is used to protect it from simultaneous modification by multiple tasks.</source>
          <target state="translated">Поскольку <ph id="ph1">`nTasks`</ph> является глобальной переменной, которая может обновляться несколькими задачами одновременно, используется монитор, защищающий ее от одновременного изменения несколькими задачами.</target>       </trans-unit>
        <trans-unit id="154" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Threading.Monitor">
          <source>However, as the output from the example shows, each of the tasks throws a <ph id="ph1">&lt;xref:System.Threading.SynchronizationLockException&gt;</ph> exception.</source>
          <target state="translated">Тем не менее, как показывают выходные данные в примере, каждая из задач вызывает исключение <ph id="ph1">&lt;xref:System.Threading.SynchronizationLockException&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="155" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Threading.Monitor">
          <source>Each task throws a <ph id="ph1">&lt;xref:System.Threading.SynchronizationLockException&gt;</ph> exception because the <ph id="ph2">`nTasks`</ph> variable is boxed before the call to the <ph id="ph3">&lt;xref:System.Threading.Monitor.Enter%2A?displayProperty=nameWithType&gt;</ph> method in each task.</source>
          <target state="translated">Каждая задача вызывает исключение <ph id="ph1">&lt;xref:System.Threading.SynchronizationLockException&gt;</ph> из-за того, что переменная <ph id="ph2">`nTasks`</ph> упаковывается перед вызовом метода <ph id="ph3">&lt;xref:System.Threading.Monitor.Enter%2A?displayProperty=nameWithType&gt;</ph> в каждой задаче.</target>       </trans-unit>
        <trans-unit id="156" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Threading.Monitor">
          <source>In other words, each method call is passed a separate variable that is independent of the others.</source>
          <target state="translated">Другими словами, в каждый вызов метода передается отдельная переменная, которая независима от остальных.</target>       </trans-unit>
        <trans-unit id="157" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Threading.Monitor">
          <source><ph id="ph1">`nTasks`</ph> is boxed again in the call to the <ph id="ph2">&lt;xref:System.Threading.Monitor.Exit%2A?displayProperty=nameWithType&gt;</ph> method.</source>
          <target state="translated"><ph id="ph1">`nTasks`</ph> снова упаковывается в вызове метода <ph id="ph2">&lt;xref:System.Threading.Monitor.Exit%2A?displayProperty=nameWithType&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="158" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Threading.Monitor">
          <source>Once again, this creates ten new boxed variables, which are independent of each other, <ph id="ph1">`nTasks`</ph>, and the ten boxed variables created in the call to the <ph id="ph2">&lt;xref:System.Threading.Monitor.Enter%2A?displayProperty=nameWithType&gt;</ph> method.</source>
          <target state="translated">И снова при этом создается десять новых упакованных переменных, которые не зависят друг от друга, <ph id="ph1">`nTasks`</ph>, и десять упакованных переменных, созданных при вызове метода <ph id="ph2">&lt;xref:System.Threading.Monitor.Enter%2A?displayProperty=nameWithType&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="159" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Threading.Monitor">
          <source>The exception is thrown, then, because our code is attempting to release a lock on a newly created variable that was not previously locked.</source>
          <target state="translated">Затем вызывается исключение, поскольку наш код пытается снять блокировку для вновь созданной переменной, которая ранее не была заблокирована.</target>       </trans-unit>
        <trans-unit id="160" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Threading.Monitor">
          <source>Although you can box a value type variable before calling <ph id="ph1">&lt;xref:System.Threading.Monitor.Enter%2A&gt;</ph> and <ph id="ph2">&lt;xref:System.Threading.Monitor.Exit%2A&gt;</ph>, as shown in the following example, and pass the same boxed object to both methods, there is no advantage to doing this.</source>
          <target state="translated">Хотя можно упаковать переменную типа значения перед вызовом <ph id="ph1">&lt;xref:System.Threading.Monitor.Enter%2A&gt;</ph> и <ph id="ph2">&lt;xref:System.Threading.Monitor.Exit%2A&gt;</ph>, как показано в следующем примере, и передать тот же упакованный объект в оба метода, такой подход не дает никаких преимуществ.</target>       </trans-unit>
        <trans-unit id="161" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Threading.Monitor">
          <source>Changes to the unboxed variable are not reflected in the boxed copy, and there is no way to change the value of the boxed copy.</source>
          <target state="translated">Изменения неупакованной переменной не отражаются в упакованной копии, и возможность изменения значения упакованной копии отсутствует.</target>       </trans-unit>
        <trans-unit id="162" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Threading.Monitor">
          <source>When selecting an object on which to synchronize, you should lock only on private or internal objects.</source>
          <target state="translated">При выборе объекта для синхронизации, необходимо заблокировать только в закрытых или внутренних объектов.</target>       </trans-unit>
        <trans-unit id="163" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Threading.Monitor">
          <source>Locking on external objects might result in deadlocks, because unrelated code could choose the same objects to lock on for different purposes.</source>
          <target state="translated">Блокировки внешних объектов может привести к взаимоблокировки, так как несвязанный код может выбрать те же объекты блокировки для разных целей.</target>       </trans-unit>
        <trans-unit id="164" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Threading.Monitor">
          <source>Note that you can synchronize on an object in multiple application domains if the object used for the lock derives from <ph id="ph1">&lt;xref:System.MarshalByRefObject&gt;</ph>.</source>
          <target state="translated">Обратите внимание, что для объекта в нескольких доменах приложений можно синхронизировать объект, используемый для блокировки, производного от <ph id="ph1">&lt;xref:System.MarshalByRefObject&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="165" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Threading.Monitor">
          <source>The critical section</source>
          <target state="translated">Критический раздел</target>       </trans-unit>
        <trans-unit id="166" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Threading.Monitor">
          <source>Use the <ph id="ph1">&lt;xref:System.Threading.Monitor.Enter%2A&gt;</ph> and <ph id="ph2">&lt;xref:System.Threading.Monitor.Exit%2A&gt;</ph> methods to mark the beginning and end of a critical section.</source>
          <target state="translated">Используйте <ph id="ph1">&lt;xref:System.Threading.Monitor.Enter%2A&gt;</ph> и <ph id="ph2">&lt;xref:System.Threading.Monitor.Exit%2A&gt;</ph> методы для пометки в начале и конце критической секции.</target>       </trans-unit>
        <trans-unit id="167" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Threading.Monitor">
          <source>The functionality provided by the <ph id="ph1">&lt;xref:System.Threading.Monitor.Enter%2A&gt;</ph> and <ph id="ph2">&lt;xref:System.Threading.Monitor.Exit%2A&gt;</ph> methods is identical to that provided by the <bpt id="p1">[</bpt>lock<ept id="p1">](~/docs/csharp/language-reference/keywords/lock-statement.md)</ept> statement in C# and the <bpt id="p2">[</bpt>SyncLock<ept id="p2">](~/docs/visual-basic/language-reference/statements/synclock-statement.md)</ept> statement in Visual Basic, except that the language constructs wrap the <ph id="ph3">&lt;xref:System.Threading.Monitor.Enter%28System.Object%2CSystem.Boolean%40%29?displayProperty=nameWithType&gt;</ph> method overload and the <ph id="ph4">&lt;xref:System.Threading.Monitor.Exit%2A?displayProperty=nameWithType&gt;</ph> method in a <ph id="ph5">`try`</ph>…<ph id="ph6">`finally`</ph></source>
          <target state="translated">Функциональные возможности, предоставляемые <ph id="ph1">&lt;xref:System.Threading.Monitor.Enter%2A&gt;</ph> и <ph id="ph2">&lt;xref:System.Threading.Monitor.Exit%2A&gt;</ph> методы будут идентичны данным, предоставляемые <bpt id="p1">[</bpt>блокировки<ept id="p1">](~/docs/csharp/language-reference/keywords/lock-statement.md)</ept> инструкции на языке C# и <bpt id="p2">[</bpt>SyncLock<ept id="p2">](~/docs/visual-basic/language-reference/statements/synclock-statement.md)</ept> инструкции на языке Visual Basic, за исключением того, языковые конструкции wrap <ph id="ph3">&lt;xref:System.Threading.Monitor.Enter%28System.Object%2CSystem.Boolean%40%29?displayProperty=nameWithType&gt;</ph> перегрузка метода и <ph id="ph4">&lt;xref:System.Threading.Monitor.Exit%2A?displayProperty=nameWithType&gt;</ph> метод в <ph id="ph5">`try`</ph>...<ph id="ph6">`finally`</ph></target>       </trans-unit>
        <trans-unit id="168" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Threading.Monitor">
          <source>block to ensure that the monitor is released.</source>
          <target state="translated">блок для освобождения монитор.</target>       </trans-unit>
        <trans-unit id="169" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Threading.Monitor">
          <source>If the critical section is a set of contiguous instructions, then the lock acquired by the <ph id="ph1">&lt;xref:System.Threading.Monitor.Enter%2A&gt;</ph> method guarantees that only a single thread can execute the enclosed code with the locked object.</source>
          <target state="translated">Если критическая секция является набором непрерывных инструкций, то блокировки, полученной путем <ph id="ph1">&lt;xref:System.Threading.Monitor.Enter%2A&gt;</ph> метод гарантирует, что только один поток может выполнять обозначенный код с заблокированного объекта.</target>       </trans-unit>
        <trans-unit id="170" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Threading.Monitor">
          <source>In this case, we recommend that you place that code in a <ph id="ph1">`try`</ph> block and place the call to the <ph id="ph2">&lt;xref:System.Threading.Monitor.Exit%2A&gt;</ph> method in a <ph id="ph3">`finally`</ph> block.</source>
          <target state="translated">В этом случае рекомендуется поместить этот код в <ph id="ph1">`try`</ph> блокировку и вызвать <ph id="ph2">&lt;xref:System.Threading.Monitor.Exit%2A&gt;</ph> метод в <ph id="ph3">`finally`</ph> блока.</target>       </trans-unit>
        <trans-unit id="171" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Threading.Monitor">
          <source>This ensures that the lock is released even if an exception occurs.</source>
          <target state="translated">Это гарантирует снятие блокировки даже при возникновении исключения.</target>       </trans-unit>
        <trans-unit id="172" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Threading.Monitor">
          <source>The following code fragment illustrates this pattern.</source>
          <target state="translated">В следующем фрагменте кода показан этот шаблон.</target>       </trans-unit>
        <trans-unit id="173" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Threading.Monitor">
          <source>This facility is typically used to synchronize access to a static or instance method of a class.</source>
          <target state="translated">Это средство обычно используется для синхронизации доступа к статический метод или метод экземпляра класса.</target>       </trans-unit>
        <trans-unit id="174" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Threading.Monitor">
          <source>If a critical section spans an entire method, the locking facility can be achieved by placing the <ph id="ph1">&lt;xref:System.Runtime.CompilerServices.MethodImplAttribute?displayProperty=nameWithType&gt;</ph> on the method, and specifying the <ph id="ph2">&lt;xref:System.Runtime.CompilerServices.MethodImplOptions.Synchronized&gt;</ph> value in the constructor of <ph id="ph3">&lt;xref:System.Runtime.CompilerServices.MethodImplAttribute?displayProperty=nameWithType&gt;</ph>.</source>
          <target state="translated">Если критический раздел распространяется на весь метод, средство блокировки может осуществляться путем размещения <ph id="ph1">&lt;xref:System.Runtime.CompilerServices.MethodImplAttribute?displayProperty=nameWithType&gt;</ph> в методе и указав <ph id="ph2">&lt;xref:System.Runtime.CompilerServices.MethodImplOptions.Synchronized&gt;</ph> значение в конструкторе <ph id="ph3">&lt;xref:System.Runtime.CompilerServices.MethodImplAttribute?displayProperty=nameWithType&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="175" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Threading.Monitor">
          <source>When you use this attribute, the <ph id="ph1">&lt;xref:System.Threading.Monitor.Enter%2A&gt;</ph> and <ph id="ph2">&lt;xref:System.Threading.Monitor.Exit%2A&gt;</ph> method calls are not needed.</source>
          <target state="translated">При использовании этого атрибута <ph id="ph1">&lt;xref:System.Threading.Monitor.Enter%2A&gt;</ph> и <ph id="ph2">&lt;xref:System.Threading.Monitor.Exit%2A&gt;</ph> вызовы методов не требуются.</target>       </trans-unit>
        <trans-unit id="176" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Threading.Monitor">
          <source>The following code fragment illustrates this pattern:</source>
          <target state="translated">В следующем фрагменте кода показан этот шаблон:</target>       </trans-unit>
        <trans-unit id="177" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Threading.Monitor">
          <source>Note that the attribute causes the current thread to hold the lock until the method returns; if the lock can be released sooner, use the <ph id="ph1">&lt;xref:System.Threading.Monitor&gt;</ph> class, the C# <bpt id="p1">[</bpt>lock<ept id="p1">](~/docs/csharp/language-reference/keywords/lock-statement.md)</ept> statement, or the Visual Basic <bpt id="p2">[</bpt>SyncLock<ept id="p2">](~/docs/visual-basic/language-reference/statements/synclock-statement.md)</ept> statement inside of the method instead of the attribute.</source>
          <target state="translated">Обратите внимание, что данный атрибут приводит текущего потока для хранения блокировки до выполнения метода; Если блокировка может быть освобождена раньше, используйте <ph id="ph1">&lt;xref:System.Threading.Monitor&gt;</ph> класса C# <bpt id="p1">[</bpt>блокировки<ept id="p1">](~/docs/csharp/language-reference/keywords/lock-statement.md)</ept> инструкции или Visual Basic <bpt id="p2">[</bpt>SyncLock<ept id="p2">](~/docs/visual-basic/language-reference/statements/synclock-statement.md)</ept> оператора в методе вместо атрибута.</target>       </trans-unit>
        <trans-unit id="178" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Threading.Monitor">
          <source>While it is possible for the <ph id="ph1">&lt;xref:System.Threading.Monitor.Enter%2A&gt;</ph> and <ph id="ph2">&lt;xref:System.Threading.Monitor.Exit%2A&gt;</ph> statements that lock and release a given object to cross member or class boundaries or both, this practice is not recommended.</source>
          <target state="translated">Хотя возможна для <ph id="ph1">&lt;xref:System.Threading.Monitor.Enter%2A&gt;</ph> и <ph id="ph2">&lt;xref:System.Threading.Monitor.Exit%2A&gt;</ph> инструкций, блокировки и освобождения данный объект для кросс-член класса границы и/или, это не рекомендуется.</target>       </trans-unit>
        <trans-unit id="179" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Threading.Monitor">
          <source>Pulse, PulseAll, and Wait</source>
          <target state="translated">Pulse, PulseAll и ожидания</target>       </trans-unit>
        <trans-unit id="180" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Threading.Monitor">
          <source>Once a thread owns the lock and has entered the critical section that the lock protects, it can call the <ph id="ph1">&lt;xref:System.Threading.Monitor.Wait%2A?displayProperty=nameWithType&gt;</ph>, <ph id="ph2">&lt;xref:System.Threading.Monitor.Pulse%2A?displayProperty=nameWithType&gt;</ph>, and <ph id="ph3">&lt;xref:System.Threading.Monitor.PulseAll%2A?displayProperty=nameWithType&gt;</ph> methods.</source>
          <target state="translated">Когда поток владеет блокировкой и он перешел критическую секцию, которая защищает блокировку, он может вызвать <ph id="ph1">&lt;xref:System.Threading.Monitor.Wait%2A?displayProperty=nameWithType&gt;</ph>, <ph id="ph2">&lt;xref:System.Threading.Monitor.Pulse%2A?displayProperty=nameWithType&gt;</ph>, и <ph id="ph3">&lt;xref:System.Threading.Monitor.PulseAll%2A?displayProperty=nameWithType&gt;</ph> методы.</target>       </trans-unit>
        <trans-unit id="181" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Threading.Monitor">
          <source><ph id="ph1">&lt;xref:System.Threading.Monitor.Wait%2A&gt;</ph> releases the lock if it is held, allows a waiting thread or threads to obtain the lock and enter the critical section,   and waits to be notified by a call to the <ph id="ph2">&lt;xref:System.Threading.Monitor.Pulse%2A?displayProperty=nameWithType&gt;</ph> or <ph id="ph3">&lt;xref:System.Threading.Monitor.PulseAll%2A?displayProperty=nameWithType&gt;</ph> method.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Threading.Monitor.Wait%2A&gt;</ph> снимает блокировку, если удерживается, позволяет ожидающий поток или потоков, чтобы получить блокировку и входа в критический раздел и ожидает уведомления путем вызова <ph id="ph2">&lt;xref:System.Threading.Monitor.Pulse%2A?displayProperty=nameWithType&gt;</ph> или <ph id="ph3">&lt;xref:System.Threading.Monitor.PulseAll%2A?displayProperty=nameWithType&gt;</ph> метод.</target>       </trans-unit>
        <trans-unit id="182" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Threading.Monitor">
          <source>When <ph id="ph1">&lt;xref:System.Threading.Monitor.Wait%2A&gt;</ph> is notified, it returns and obtains the lock again.</source>
          <target state="translated">Когда <ph id="ph1">&lt;xref:System.Threading.Monitor.Wait%2A&gt;</ph> уведомляется, он возвращает значение и снова получает блокировку.</target>       </trans-unit>
        <trans-unit id="183" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Threading.Monitor">
          <source>Both <ph id="ph1">&lt;xref:System.Threading.Monitor.Pulse%2A&gt;</ph> and <ph id="ph2">&lt;xref:System.Threading.Monitor.PulseAll%2A&gt;</ph> signal for the next thread in the wait queue to proceed.</source>
          <target state="translated">Как <ph id="ph1">&lt;xref:System.Threading.Monitor.Pulse%2A&gt;</ph>, так и <ph id="ph2">&lt;xref:System.Threading.Monitor.PulseAll%2A&gt;</ph> сигнализируют следующему потоку в очереди ожидания о том, что можно продолжать работу.</target>       </trans-unit>
        <trans-unit id="184" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Threading.Monitor">
          <source>Monitors and wait handles</source>
          <target state="translated">Мониторы и дескрипторы ожидания</target>       </trans-unit>
        <trans-unit id="185" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Threading.Monitor">
          <source>It is important to note the distinction between the use of the <ph id="ph1">&lt;xref:System.Threading.Monitor&gt;</ph> class and <ph id="ph2">&lt;xref:System.Threading.WaitHandle&gt;</ph> objects.</source>
          <target state="translated">Важно отметить различия между использованием объектов <ph id="ph1">&lt;xref:System.Threading.Monitor&gt;</ph> класса и <ph id="ph2">&lt;xref:System.Threading.WaitHandle&gt;</ph> объектов.</target>       </trans-unit>
        <trans-unit id="186" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Threading.Monitor">
          <source>The <ph id="ph1">&lt;xref:System.Threading.Monitor&gt;</ph> class is purely managed, fully portable, and might be more efficient in terms of operating-system resource requirements.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Threading.Monitor&gt;</ph> Класс полностью управляемые и полностью переносимые, а также могут оказаться эффективными в плане использования ресурсов операционной системы.</target>       </trans-unit>
        <trans-unit id="187" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Threading.Monitor">
          <source><ph id="ph1">&lt;xref:System.Threading.WaitHandle&gt;</ph> objects represent operating-system waitable objects, are useful for synchronizing between managed and unmanaged code, and expose some advanced operating-system features like the ability to wait on many objects at once.</source>
          <target state="translated">Объекты <ph id="ph1">&lt;xref:System.Threading.WaitHandle&gt;</ph> представляют объекты ожидания операционной системы, удобны для синхронизации между управляемым и неуправляемым кодом и предоставляют некоторые расширенные функции операционной системы, например возможность ожидания сразу нескольких объектов.</target>       </trans-unit>
        <trans-unit id="188" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Threading.Monitor">
          <source>The following example uses the <ph id="ph1">&lt;xref:System.Threading.Monitor&gt;</ph> class to synchronize access to a single instance of a random number generator represented by the <ph id="ph2">&lt;xref:System.Random&gt;</ph> class.</source>
          <target state="translated">В следующем примере используется <ph id="ph1">&lt;xref:System.Threading.Monitor&gt;</ph> класса для синхронизации доступа к одному экземпляру генератора случайных чисел, представленного <ph id="ph2">&lt;xref:System.Random&gt;</ph> класса.</target>       </trans-unit>
        <trans-unit id="189" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Threading.Monitor">
          <source>The example creates ten tasks, each of which executes asynchronously on a thread pool thread.</source>
          <target state="translated">В примере создается десять задач, каждая из которых выполняется асинхронно в потоке пула потоков.</target>       </trans-unit>
        <trans-unit id="190" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Threading.Monitor">
          <source>Each task generates 10,000 random numbers, calculates their average, and updates two procedure-level variables that maintain a running total of the number of random numbers generated and their sum.</source>
          <target state="translated">Каждая задача создает 10 000 случайных чисел, вычисляет их среднее значение и обновляет две переменные уровня процедуры поддержки, общее число случайных чисел и их суммы.</target>       </trans-unit>
        <trans-unit id="191" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Threading.Monitor">
          <source>After all tasks have executed, these two values are then used to calculate the overall mean.</source>
          <target state="translated">После выполнения всех задач, эти два значения затем используются для вычисления общего среднего значения.</target>       </trans-unit>
        <trans-unit id="192" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Threading.Monitor">
          <source>Because they can be accessed from any task running on a thread pool thread, access to the variables <ph id="ph1">`total`</ph> and <ph id="ph2">`n`</ph> must also be synchronized.</source>
          <target state="translated">Так как они могли быть доступны из любой задачи, выполняемой в потоке пула потоков, доступ к переменным <ph id="ph1">`total`</ph> и <ph id="ph2">`n`</ph> также должна быть синхронизирована.</target>       </trans-unit>
        <trans-unit id="193" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Threading.Monitor">
          <source>The <ph id="ph1">&lt;xref:System.Threading.Interlocked.Add%2A?displayProperty=nameWithType&gt;</ph> method is used for this purpose.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Threading.Interlocked.Add%2A?displayProperty=nameWithType&gt;</ph> Метод используется для этой цели.</target>       </trans-unit>
        <trans-unit id="194" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Threading.Monitor">
          <source>The following example demonstrates the combined use of the <ph id="ph1">&lt;xref:System.Threading.Monitor&gt;</ph> class (implemented with the <ph id="ph2">`lock`</ph> or <ph id="ph3">`SyncLock`</ph> language construct), the <ph id="ph4">&lt;xref:System.Threading.Interlocked&gt;</ph> class, and the <ph id="ph5">&lt;xref:System.Threading.AutoResetEvent&gt;</ph> class.</source>
          <target state="translated">В следующем примере показано совместное использование <ph id="ph1">&lt;xref:System.Threading.Monitor&gt;</ph> класса (реализуется с помощью <ph id="ph2">`lock`</ph> или <ph id="ph3">`SyncLock`</ph> конструкция языка), <ph id="ph4">&lt;xref:System.Threading.Interlocked&gt;</ph> класса и <ph id="ph5">&lt;xref:System.Threading.AutoResetEvent&gt;</ph> класса.</target>       </trans-unit>
        <trans-unit id="195" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Threading.Monitor">
          <source>It defines two <ph id="ph1">`internal`</ph> (in C#) or <ph id="ph2">`Friend`</ph> (in Visual Basic) classes, <ph id="ph3">`SyncResource`</ph> and <ph id="ph4">`UnSyncResource`</ph>, that respectively provide synchronized and unsynchronized access to a resource.</source>
          <target state="translated">Он определяет два <ph id="ph1">`internal`</ph> (в C#) или <ph id="ph2">`Friend`</ph> (в Visual Basic) классы, <ph id="ph3">`SyncResource`</ph> и <ph id="ph4">`UnSyncResource`</ph>, которые соответственно предоставляют синхронизированный и несинхронизированный доступ к ресурсу.</target>       </trans-unit>
        <trans-unit id="196" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Threading.Monitor">
          <source>To ensure that the example illustrates the difference between the synchronized and unsynchronized access (which could be the case if each method call completes rapidly), the method includes a random delay: for threads whose <ph id="ph1">&lt;xref:System.Threading.Thread.ManagedThreadId%2A?displayProperty=nameWithType&gt;</ph> property is even, the method calls <ph id="ph2">&lt;xref:System.Threading.Thread.Sleep%2A?displayProperty=nameWithType&gt;</ph> to introduce a delay of 2,000 milliseconds.</source>
          <target state="translated">Чтобы убедиться, что в примере демонстрируется различие между синхронизированным и несинхронизированным доступом (что может случиться, если каждый вызов метода завершается быстро), метод включает случайную задержку: для потоков, <ph id="ph1">&lt;xref:System.Threading.Thread.ManagedThreadId%2A?displayProperty=nameWithType&gt;</ph> свойство является четным, вызовы метода <ph id="ph2">&lt;xref:System.Threading.Thread.Sleep%2A?displayProperty=nameWithType&gt;</ph> для введения задержки в 2 000 миллисекунд.</target>       </trans-unit>
        <trans-unit id="197" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Threading.Monitor">
          <source>Note that, because the <ph id="ph1">`SyncResource`</ph> class is not public, none of the client code takes a lock on the synchronized resource; the internal class itself takes the lock.</source>
          <target state="translated">Обратите внимание, что, поскольку <ph id="ph1">`SyncResource`</ph> класса не является общим, ни один клиентский код не выполняет блокировку в синхронизированном ресурсе; внутренний класс сам выполняет блокировку.</target>       </trans-unit>
        <trans-unit id="198" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Threading.Monitor">
          <source>This prevents malicious code from taking a lock on a public object.</source>
          <target state="translated">Это предотвращает блокировка общедоступного объекта вредоносным кодом.</target>       </trans-unit>
        <trans-unit id="199" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Threading.Monitor">
          <source>The example defines a variable, <ph id="ph1">`numOps`</ph>, that defines the number of threads that will attempt to access the resource.</source>
          <target state="translated">В примере определяется переменная <ph id="ph1">`numOps`</ph>, которое определяет число потоков, которые будут пытаться получить доступ к ресурсу.</target>       </trans-unit>
        <trans-unit id="200" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Threading.Monitor">
          <source>The application thread calls the <ph id="ph1">&lt;xref:System.Threading.ThreadPool.QueueUserWorkItem%28System.Threading.WaitCallback%29?displayProperty=nameWithType&gt;</ph> method for synchronized and unsynchronized access five times each.</source>
          <target state="translated">Поток приложения вызывает <ph id="ph1">&lt;xref:System.Threading.ThreadPool.QueueUserWorkItem%28System.Threading.WaitCallback%29?displayProperty=nameWithType&gt;</ph> метод для синхронизированного и несинхронизированного доступа по пять раз.</target>       </trans-unit>
        <trans-unit id="201" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Threading.Monitor">
          <source>The <ph id="ph1">&lt;xref:System.Threading.ThreadPool.QueueUserWorkItem%28System.Threading.WaitCallback%29?displayProperty=nameWithType&gt;</ph> method has a single parameter, a delegate that accepts no parameters and returns no value.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Threading.ThreadPool.QueueUserWorkItem%28System.Threading.WaitCallback%29?displayProperty=nameWithType&gt;</ph> Метод принимает один параметр, делегат, который не принимает параметры и не возвращает значений.</target>       </trans-unit>
        <trans-unit id="202" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Threading.Monitor">
          <source>For synchronized access, it invokes the <ph id="ph1">`SyncUpdateResource`</ph> method; for unsynchronized access, it invokes the <ph id="ph2">`UnSyncUpdateResource`</ph> method.</source>
          <target state="translated">Для синхронизированного доступа он вызывает <ph id="ph1">`SyncUpdateResource`</ph> метода; для несинхронизированного доступа он вызывает <ph id="ph2">`UnSyncUpdateResource`</ph> метод.</target>       </trans-unit>
        <trans-unit id="203" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Threading.Monitor">
          <source>After each set of method calls, the application thread calls the <bpt id="p1">[</bpt>AutoResetEvent.WaitOne<ept id="p1">](xref:System.Threading.WaitHandle.WaitOne*)</ept> method so that it blocks until the <ph id="ph1">&lt;xref:System.Threading.AutoResetEvent&gt;</ph> instance is signaled.</source>
          <target state="translated">После каждого ряда вызовов метода поток приложения вызывает <bpt id="p1">[</bpt>AutoResetEvent.WaitOne<ept id="p1">](xref:System.Threading.WaitHandle.WaitOne*)</ept> метода, так что он блокируется до <ph id="ph1">&lt;xref:System.Threading.AutoResetEvent&gt;</ph> экземпляр получает сигнал.</target>       </trans-unit>
        <trans-unit id="204" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Threading.Monitor">
          <source>Each call to the <ph id="ph1">`SyncUpdateResource`</ph> method calls the internal <ph id="ph2">`SyncResource.Access`</ph> method and then calls the <ph id="ph3">&lt;xref:System.Threading.Interlocked.Decrement%2A?displayProperty=nameWithType&gt;</ph> method to decrement the <ph id="ph4">`numOps`</ph> counter.</source>
          <target state="translated">Каждый вызов <ph id="ph1">`SyncUpdateResource`</ph> вызывает внутренний метод <ph id="ph2">`SyncResource.Access`</ph> метода, а затем вызывает метод <ph id="ph3">&lt;xref:System.Threading.Interlocked.Decrement%2A?displayProperty=nameWithType&gt;</ph> способ уменьшения <ph id="ph4">`numOps`</ph> счетчика.</target>       </trans-unit>
        <trans-unit id="205" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Threading.Monitor">
          <source>The <ph id="ph1">&lt;xref:System.Threading.Interlocked.Decrement%2A?displayProperty=nameWithType&gt;</ph> method Is used to decrement the counter, because otherwise you cannot be certain that a second thread will access the value before a first thread's decremented value has been stored in the variable.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Threading.Interlocked.Decrement%2A?displayProperty=nameWithType&gt;</ph> Метод используется для уменьшения счетчика, так как в противном случае нельзя быть уверенным, что второй поток получит доступ к значение прежде, чем первый поток уменьшенное значение будет сохранено в переменной.</target>       </trans-unit>
        <trans-unit id="206" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Threading.Monitor">
          <source>When the last synchronized worker thread decrements the counter to zero, indicating that all synchronized threads have completed accessing the resource, the <ph id="ph1">`SyncUpdateResource`</ph> method calls the <ph id="ph2">&lt;xref:System.Threading.EventWaitHandle.Set%2A?displayProperty=nameWithType&gt;</ph> method, which signals the main thread to continue execution.</source>
          <target state="translated">Когда последний синхронизированный рабочий поток уменьшит счетчик до нуля, указывая, что все синхронизированные потоки завершили доступ к ресурсу, <ph id="ph1">`SyncUpdateResource`</ph> вызовы метода <ph id="ph2">&lt;xref:System.Threading.EventWaitHandle.Set%2A?displayProperty=nameWithType&gt;</ph> метод, который сигнализирует основному потоку продолжить выполнение.</target>       </trans-unit>
        <trans-unit id="207" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Threading.Monitor">
          <source>Each call to the <ph id="ph1">`UnSyncUpdateResource`</ph> method calls the internal <ph id="ph2">`UnSyncResource.Access`</ph> method and then calls the <ph id="ph3">&lt;xref:System.Threading.Interlocked.Decrement%2A?displayProperty=nameWithType&gt;</ph> method to decrement the <ph id="ph4">`numOps`</ph> counter.</source>
          <target state="translated">Каждый вызов <ph id="ph1">`UnSyncUpdateResource`</ph> вызывает внутренний метод <ph id="ph2">`UnSyncResource.Access`</ph> метода, а затем вызывает метод <ph id="ph3">&lt;xref:System.Threading.Interlocked.Decrement%2A?displayProperty=nameWithType&gt;</ph> способ уменьшения <ph id="ph4">`numOps`</ph> счетчика.</target>       </trans-unit>
        <trans-unit id="208" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Threading.Monitor">
          <source>Once again, the <ph id="ph1">&lt;xref:System.Threading.Interlocked.Decrement%2A?displayProperty=nameWithType&gt;</ph> method Is used to decrement the counter to ensure that a second thread does not access the value before a first thread's decremented value has been assigned to the variable.</source>
          <target state="translated">Опять же <ph id="ph1">&lt;xref:System.Threading.Interlocked.Decrement%2A?displayProperty=nameWithType&gt;</ph> метод используется для уменьшения счетчика, чтобы второй поток не обращаться к значение перед уменьшенное значение первого потока был назначен переменной.</target>       </trans-unit>
        <trans-unit id="209" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Threading.Monitor">
          <source>When the last unsynchronized worker thread decrements the counter to zero, indicating that no more unsynchronized threads need to access the resource, the <ph id="ph1">`UnSyncUpdateResource`</ph> method calls the <ph id="ph2">&lt;xref:System.Threading.EventWaitHandle.Set%2A?displayProperty=nameWithType&gt;</ph> method, which signals the main thread to continue execution.</source>
          <target state="translated">Когда последний синхронизированный рабочий поток уменьшит счетчик до нуля, указывающее, что больше нет синхронизированных потоков требуется доступ к ресурсу, <ph id="ph1">`UnSyncUpdateResource`</ph> вызовы метода <ph id="ph2">&lt;xref:System.Threading.EventWaitHandle.Set%2A?displayProperty=nameWithType&gt;</ph> метод, который сигнализирует основному потоку продолжить выполнение .</target>       </trans-unit>
        <trans-unit id="210" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Threading.Monitor">
          <source>As the output from  the example shows, synchronized access ensures that the calling thread exits the protected resource before another thread can access it; each thread waits on its predecessor.</source>
          <target state="translated">Как показывает результат этого примера, синхронизированный доступ обеспечивает, что вызывающий поток выходит из защищенного ресурса до того, как другой поток получит доступ к этому ресурсу; каждый поток ожидает своего предшественника.</target>       </trans-unit>
        <trans-unit id="211" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Threading.Monitor">
          <source>On the other hand, without the lock, the <ph id="ph1">`UnSyncResource.Access`</ph> method is called in the order in which threads reach it.</source>
          <target state="translated">С другой стороны, без блокировки <ph id="ph1">`UnSyncResource.Access`</ph> метод вызывается в том порядке, в котором потоки получают к нему доступ.</target>       </trans-unit>
        <trans-unit id="212" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Threading.Monitor">
          <source>This type is thread safe.</source>
          <target state="translated">Данный тип потокобезопасен.</target>       </trans-unit>
        <trans-unit id="213" translate="yes" xml:space="preserve" uid="T:System.Threading.Monitor">
          <source>Acquires an exclusive lock on a specified object.</source>
          <target state="translated">Получает монопольную блокировку указанного объекта.</target>       </trans-unit>
        <trans-unit id="214" translate="yes" xml:space="preserve" uid="M:System.Threading.Monitor.Enter(System.Object)">
          <source>The object on which to acquire the monitor lock.</source>
          <target state="translated">Объект, для которого получается блокировка монитора.</target>       </trans-unit>
        <trans-unit id="215" translate="yes" xml:space="preserve" uid="M:System.Threading.Monitor.Enter(System.Object)">
          <source>Acquires an exclusive lock on the specified object.</source>
          <target state="translated">Получает эксклюзивную блокировку указанного объекта.</target>       </trans-unit>
        <trans-unit id="216" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Monitor.Enter(System.Object)">
          <source>Use <ph id="ph1">`Enter`</ph> to acquire the <ph id="ph2">&lt;xref:System.Threading.Monitor&gt;</ph> on the object passed as the parameter.</source>
          <target state="translated">Используйте <ph id="ph1">`Enter`</ph> получения <ph id="ph2">&lt;xref:System.Threading.Monitor&gt;</ph> для объекта, переданного в качестве параметра.</target>       </trans-unit>
        <trans-unit id="217" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Monitor.Enter(System.Object)">
          <source>If another thread has executed an <ph id="ph1">`Enter`</ph> on the object but has not yet executed the corresponding <ph id="ph2">&lt;xref:System.Threading.Monitor.Exit%2A&gt;</ph>, the current thread will block until the other thread releases the object.</source>
          <target state="translated">Если другой поток выполнил <ph id="ph1">`Enter`</ph> в объекте, но еще не выполнен соответствующий <ph id="ph2">&lt;xref:System.Threading.Monitor.Exit%2A&gt;</ph>, текущий поток будет заблокирован до другой поток освободит объект.</target>       </trans-unit>
        <trans-unit id="218" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Monitor.Enter(System.Object)">
          <source>It is legal for the same thread to invoke <ph id="ph1">`Enter`</ph> more than once without it blocking; however, an equal number of <ph id="ph2">`Exit`</ph> calls must be invoked before other threads waiting on the object will unblock.</source>
          <target state="translated">Допустимо для одного потока для вызова <ph id="ph1">`Enter`</ph> более одного раза без их блокировки, однако совпадает с числом <ph id="ph2">`Exit`</ph> должно быть вызвано перед разблокирует других потоков, ожидающих в объекте.</target>       </trans-unit>
        <trans-unit id="219" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Monitor.Enter(System.Object)">
          <source>Use <ph id="ph1">&lt;xref:System.Threading.Monitor&gt;</ph> to lock objects (that is, reference types), not value types.</source>
          <target state="translated">Используйте <ph id="ph1">&lt;xref:System.Threading.Monitor&gt;</ph> блокирует объекты (то есть ссылочные типы), не типы значений.</target>       </trans-unit>
        <trans-unit id="220" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Monitor.Enter(System.Object)">
          <source>When you pass a value type variable to <ph id="ph1">`Enter`</ph>, it is boxed as an object.</source>
          <target state="translated">При передаче переменной типа значения для <ph id="ph1">`Enter`</ph>, она трактуется как объект.</target>       </trans-unit>
        <trans-unit id="221" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Monitor.Enter(System.Object)">
          <source>If you pass the same variable to <ph id="ph1">`Enter`</ph> again, it is boxed as a separate object, and the thread does not block.</source>
          <target state="translated">Если передать ту же переменную для <ph id="ph1">`Enter`</ph> снова, она трактуется как отдельный объект, и поток не блокируется.</target>       </trans-unit>
        <trans-unit id="222" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Monitor.Enter(System.Object)">
          <source>In this case, the code that <ph id="ph1">`Monitor`</ph> is supposedly protecting is not protected.</source>
          <target state="translated">В этом случае код, <ph id="ph1">`Monitor`</ph> — защищается не защищен.</target>       </trans-unit>
        <trans-unit id="223" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Monitor.Enter(System.Object)">
          <source>Furthermore, when you pass the variable to <ph id="ph1">`Exit`</ph>, still another separate object is created.</source>
          <target state="translated">Кроме того, если передать переменную <ph id="ph1">`Exit`</ph>, создается другой, отдельный объект.</target>       </trans-unit>
        <trans-unit id="224" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Monitor.Enter(System.Object)">
          <source>Because the object passed to <ph id="ph1">`Exit`</ph> is different from the object passed to <ph id="ph2">`Enter`</ph>, <ph id="ph3">`Monitor`</ph> throws <ph id="ph4">&lt;xref:System.Threading.SynchronizationLockException&gt;</ph>.</source>
          <target state="translated">Так как объект, переданный в <ph id="ph1">`Exit`</ph> отличается от объекта, переданного в <ph id="ph2">`Enter`</ph>, <ph id="ph3">`Monitor`</ph> вызывает <ph id="ph4">&lt;xref:System.Threading.SynchronizationLockException&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="225" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Monitor.Enter(System.Object)">
          <source>For more information, see the conceptual topic <bpt id="p1">[</bpt>Monitors<ept id="p1">](xref:System.Threading.Monitor)</ept>.</source>
          <target state="translated">Дополнительные сведения см. в разделе концептуальной <bpt id="p1">[</bpt>мониторы<ept id="p1">](xref:System.Threading.Monitor)</ept>.</target>       </trans-unit>
        <trans-unit id="226" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Monitor.Enter(System.Object)">
          <source><ph id="ph1">&lt;xref:System.Threading.Thread.Interrupt%2A&gt;</ph> can interrupt threads that are waiting to enter a <ph id="ph2">`Monitor`</ph> on an object.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Threading.Thread.Interrupt%2A&gt;</ph> можно прервать потоков, ожидающих входа <ph id="ph2">`Monitor`</ph> на объект.</target>       </trans-unit>
        <trans-unit id="227" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Monitor.Enter(System.Object)">
          <source>A <ph id="ph1">&lt;xref:System.Threading.ThreadInterruptedException&gt;</ph> will be thrown.</source>
          <target state="translated">Объект <ph id="ph1">&lt;xref:System.Threading.ThreadInterruptedException&gt;</ph> будет создано.</target>       </trans-unit>
        <trans-unit id="228" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Monitor.Enter(System.Object)">
          <source>Use a C# <ph id="ph1">`try`</ph>…<ph id="ph2">`finally`</ph></source>
          <target state="translated">С помощью C# <ph id="ph1">`try`</ph>...<ph id="ph2">`finally`</ph></target>       </trans-unit>
        <trans-unit id="229" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Monitor.Enter(System.Object)">
          <source>block (<ph id="ph1">`Try`</ph>…<ph id="ph2">`Finally`</ph></source>
          <target state="translated">блок (<ph id="ph1">`Try`</ph>...<ph id="ph2">`Finally`</ph></target>       </trans-unit>
        <trans-unit id="230" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Monitor.Enter(System.Object)">
          <source>in Visual Basic) to ensure that you release the monitor, or use the C# <ph id="ph1">`lock`</ph> statement (<ph id="ph2">`SyncLock`</ph> statement in Visual Basic), which wraps the <ph id="ph3">&lt;xref:System.Threading.Monitor.Enter%2A&gt;</ph> and <ph id="ph4">&lt;xref:System.Threading.Monitor.Exit%2A&gt;</ph> methods in a <ph id="ph5">`try`</ph>…<ph id="ph6">`finally`</ph></source>
          <target state="translated">в Visual Basic), чтобы убедитесь, что монитор выпуска или с помощью C# <ph id="ph1">`lock`</ph> инструкции (<ph id="ph2">`SyncLock`</ph> инструкции на языке Visual Basic), который является оболочкой для <ph id="ph3">&lt;xref:System.Threading.Monitor.Enter%2A&gt;</ph> и <ph id="ph4">&lt;xref:System.Threading.Monitor.Exit%2A&gt;</ph> методы в <ph id="ph5">`try`</ph>...<ph id="ph6">`finally`</ph></target>       </trans-unit>
        <trans-unit id="231" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Monitor.Enter(System.Object)">
          <source>block.</source>
          <target state="translated">блок.</target>       </trans-unit>
        <trans-unit id="232" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Monitor.Enter(System.Object)">
          <source>The following example demonstrates how to use the <ph id="ph1">`Enter`</ph> method.</source>
          <target state="translated">В следующем примере показано использование метода <ph id="ph1">`Enter`</ph>.</target>       </trans-unit>
        <trans-unit id="233" translate="yes" xml:space="preserve" uid="M:System.Threading.Monitor.Enter(System.Object)">
          <source>The <ph id="ph1">&lt;paramref name="obj" /&gt;</ph> parameter is <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated">Параметр <ph id="ph1">&lt;paramref name="obj" /&gt;</ph> имеет значение <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="234" translate="yes" xml:space="preserve" uid="M:System.Threading.Monitor.Enter(System.Object,System.Boolean@)">
          <source>The object on which to wait.</source>
          <target state="translated">Объект, в котором следует ожидать.</target>       </trans-unit>
        <trans-unit id="235" translate="yes" xml:space="preserve" uid="M:System.Threading.Monitor.Enter(System.Object,System.Boolean@)">
          <source>The result of the attempt to acquire the lock, passed by reference.</source>
          <target state="translated">Результат попытки получить блокировку, переданную по ссылке.</target>       </trans-unit>
        <trans-unit id="236" translate="yes" xml:space="preserve" uid="M:System.Threading.Monitor.Enter(System.Object,System.Boolean@)">
          <source>The input must be <ph id="ph1">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated">Входное значение должно равняться <ph id="ph1">&lt;see langword="false" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="237" translate="yes" xml:space="preserve" uid="M:System.Threading.Monitor.Enter(System.Object,System.Boolean@)">
          <source>The output is <ph id="ph1">&lt;see langword="true" /&gt;</ph> if the lock is acquired; otherwise, the output is <ph id="ph2">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated">Выходное значение <ph id="ph1">&lt;see langword="true" /&gt;</ph>, если блокировка получена; в противном случае — выходное значение <ph id="ph2">&lt;see langword="false" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="238" translate="yes" xml:space="preserve" uid="M:System.Threading.Monitor.Enter(System.Object,System.Boolean@)">
          <source>The output is set even if an exception occurs during the attempt to acquire the lock.</source>
          <target state="translated">Выходное значение задается, даже если при попытке получить блокировку возникает исключение.</target>       </trans-unit>
        <trans-unit id="239" translate="yes" xml:space="preserve" uid="M:System.Threading.Monitor.Enter(System.Object,System.Boolean@)">
          <source>Note   If no exception occurs, the output of this method is always <ph id="ph1">&lt;see langword="true" /&gt;</ph>.</source>
          <target state="translated">Примечание. Если исключение не возникает, выходное значение этого метода всегда равно <ph id="ph1">&lt;see langword="true" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="240" translate="yes" xml:space="preserve" uid="M:System.Threading.Monitor.Enter(System.Object,System.Boolean@)">
          <source>Acquires an exclusive lock on the specified object, and atomically sets a value that indicates whether the lock was taken.</source>
          <target state="translated">Получает монопольную блокировку указанного объекта и единым блоком задает значение, указывающее, была ли выполнена блокировка.</target>       </trans-unit>
        <trans-unit id="241" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Monitor.Enter(System.Object,System.Boolean@)">
          <source>Use <ph id="ph1">`Enter`</ph> to acquire the <ph id="ph2">&lt;xref:System.Threading.Monitor&gt;</ph> on the object passed as the <ph id="ph3">`obj`</ph> parameter.</source>
          <target state="translated">Используйте <ph id="ph1">`Enter`</ph> получения <ph id="ph2">&lt;xref:System.Threading.Monitor&gt;</ph> для объекта, переданного в качестве <ph id="ph3">`obj`</ph> параметра.</target>       </trans-unit>
        <trans-unit id="242" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Monitor.Enter(System.Object,System.Boolean@)">
          <source>If another thread has executed an <ph id="ph1">`Enter`</ph> on the object but has not yet executed the corresponding <ph id="ph2">&lt;xref:System.Threading.Monitor.Exit%2A&gt;</ph>, the current thread will block until the other thread releases the object.</source>
          <target state="translated">Если другой поток выполнил <ph id="ph1">`Enter`</ph> в объекте, но еще не выполнен соответствующий <ph id="ph2">&lt;xref:System.Threading.Monitor.Exit%2A&gt;</ph>, текущий поток будет заблокирован до другой поток освободит объект.</target>       </trans-unit>
        <trans-unit id="243" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Monitor.Enter(System.Object,System.Boolean@)">
          <source>It is legal for the same thread to invoke <ph id="ph1">`Enter`</ph> more than once without it blocking; however, an equal number of <ph id="ph2">`Exit`</ph> calls must be invoked before other threads waiting on the object will unblock.</source>
          <target state="translated">Допустимо для одного потока для вызова <ph id="ph1">`Enter`</ph> более одного раза без их блокировки, однако совпадает с числом <ph id="ph2">`Exit`</ph> должно быть вызвано перед разблокирует других потоков, ожидающих в объекте.</target>       </trans-unit>
        <trans-unit id="244" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Monitor.Enter(System.Object,System.Boolean@)">
          <source>If the lock was not taken because an exception was thrown, the variable specified for the <ph id="ph1">`lockTaken`</ph> parameter is <ph id="ph2">`false`</ph> after this method ends.</source>
          <target state="translated">Если блокировка не была сделана, поскольку возникло исключение, переменная, указанная для <ph id="ph1">`lockTaken`</ph> параметр <ph id="ph2">`false`</ph> после завершения этого метода.</target>       </trans-unit>
        <trans-unit id="245" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Monitor.Enter(System.Object,System.Boolean@)">
          <source>This allows the program to determine, in all cases, whether it is necessary to release the lock.</source>
          <target state="translated">Это позволяет приложению определить, во всех случаях необходимость для снятия блокировки.</target>       </trans-unit>
        <trans-unit id="246" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Monitor.Enter(System.Object,System.Boolean@)">
          <source>If this method returns without throwing an exception, the variable specified for the <ph id="ph1">`lockTaken`</ph> parameter is always <ph id="ph2">`true`</ph>, and there is no need to test it.</source>
          <target state="translated">Если этот метод возвращается без вызова исключения, переменная, указанная для <ph id="ph1">`lockTaken`</ph> всегда <ph id="ph2">`true`</ph>, и нет необходимости для его тестирования.</target>       </trans-unit>
        <trans-unit id="247" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Monitor.Enter(System.Object,System.Boolean@)">
          <source>Use <ph id="ph1">&lt;xref:System.Threading.Monitor&gt;</ph> to lock objects (that is, reference types), not value types.</source>
          <target state="translated">Используйте <ph id="ph1">&lt;xref:System.Threading.Monitor&gt;</ph> блокирует объекты (то есть ссылочные типы), не типы значений.</target>       </trans-unit>
        <trans-unit id="248" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Monitor.Enter(System.Object,System.Boolean@)">
          <source>When you pass a value type variable to <ph id="ph1">`Enter`</ph>, it is boxed as an object.</source>
          <target state="translated">При передаче переменной типа значения для <ph id="ph1">`Enter`</ph>, она трактуется как объект.</target>       </trans-unit>
        <trans-unit id="249" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Monitor.Enter(System.Object,System.Boolean@)">
          <source>If you pass the same variable to <ph id="ph1">`Enter`</ph> again, it is boxed as a separate object, and the thread does not block.</source>
          <target state="translated">Если передать ту же переменную для <ph id="ph1">`Enter`</ph> снова, она трактуется как отдельный объект, и поток не блокируется.</target>       </trans-unit>
        <trans-unit id="250" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Monitor.Enter(System.Object,System.Boolean@)">
          <source>In this case, the code that <ph id="ph1">`Monitor`</ph> is supposedly protecting is not protected.</source>
          <target state="translated">В этом случае код, <ph id="ph1">`Monitor`</ph> — защищается не защищен.</target>       </trans-unit>
        <trans-unit id="251" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Monitor.Enter(System.Object,System.Boolean@)">
          <source>Furthermore, when you pass the variable to <ph id="ph1">`Exit`</ph>, another separate object is created.</source>
          <target state="translated">Кроме того, если передать переменную <ph id="ph1">`Exit`</ph>, создается другой, отдельный объект.</target>       </trans-unit>
        <trans-unit id="252" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Monitor.Enter(System.Object,System.Boolean@)">
          <source>Because the object passed to <ph id="ph1">`Exit`</ph> is different from the object passed to <ph id="ph2">`Enter`</ph>, <ph id="ph3">`Monitor`</ph> throws <ph id="ph4">&lt;xref:System.Threading.SynchronizationLockException&gt;</ph>.</source>
          <target state="translated">Так как объект, переданный в <ph id="ph1">`Exit`</ph> отличается от объекта, переданного в <ph id="ph2">`Enter`</ph>, <ph id="ph3">`Monitor`</ph> вызывает <ph id="ph4">&lt;xref:System.Threading.SynchronizationLockException&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="253" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Monitor.Enter(System.Object,System.Boolean@)">
          <source>For more information, see the conceptual topic <bpt id="p1">[</bpt>Monitors<ept id="p1">](xref:System.Threading.Monitor)</ept>.</source>
          <target state="translated">Дополнительные сведения см. в разделе концептуальной <bpt id="p1">[</bpt>мониторы<ept id="p1">](xref:System.Threading.Monitor)</ept>.</target>       </trans-unit>
        <trans-unit id="254" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Monitor.Enter(System.Object,System.Boolean@)">
          <source><ph id="ph1">&lt;xref:System.Threading.Thread.Interrupt%2A&gt;</ph> can interrupt threads that are waiting to enter a <ph id="ph2">`Monitor`</ph> on an object.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Threading.Thread.Interrupt%2A&gt;</ph> можно прервать потоков, ожидающих входа <ph id="ph2">`Monitor`</ph> на объект.</target>       </trans-unit>
        <trans-unit id="255" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Monitor.Enter(System.Object,System.Boolean@)">
          <source>A <ph id="ph1">&lt;xref:System.Threading.ThreadInterruptedException&gt;</ph> will be thrown.</source>
          <target state="translated">Объект <ph id="ph1">&lt;xref:System.Threading.ThreadInterruptedException&gt;</ph> будет создано.</target>       </trans-unit>
        <trans-unit id="256" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Monitor.Enter(System.Object,System.Boolean@)">
          <source>The following code shows the basic pattern for using the <ph id="ph1">&lt;xref:System.Threading.Monitor.Enter%28System.Object%2CSystem.Boolean%40%29&gt;</ph> method overload.</source>
          <target state="translated">Ниже показан базовый шаблон для использования <ph id="ph1">&lt;xref:System.Threading.Monitor.Enter%28System.Object%2CSystem.Boolean%40%29&gt;</ph> перегрузки метода.</target>       </trans-unit>
        <trans-unit id="257" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Monitor.Enter(System.Object,System.Boolean@)">
          <source>This overload always sets the value of the variable that is passed to the <ph id="ph1">`ref`</ph> parameter (<ph id="ph2">`ByRef`</ph> in Visual Basic) <ph id="ph3">`lockTaken`</ph>, even if the method throws an exception, so the value of the variable is a reliable way to test whether the lock has to be released.</source>
          <target state="translated">Эта перегрузка всегда устанавливает значение, передаваемое переменной <ph id="ph1">`ref`</ph> параметра (<ph id="ph2">`ByRef`</ph> в Visual Basic) <ph id="ph3">`lockTaken`</ph>, даже если метод вызывает исключение, поэтому значение переменной является надежным способом для проверки блокировки должен быть выпущен.</target>       </trans-unit>
        <trans-unit id="258" translate="yes" xml:space="preserve" uid="M:System.Threading.Monitor.Enter(System.Object,System.Boolean@)">
          <source>The input to <ph id="ph1">&lt;paramref name="lockTaken" /&gt;</ph> is <ph id="ph2">&lt;see langword="true" /&gt;</ph>.</source>
          <target state="translated">Входные данные для <ph id="ph1">&lt;paramref name="lockTaken" /&gt;</ph> — <ph id="ph2">&lt;see langword="true" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="259" translate="yes" xml:space="preserve" uid="M:System.Threading.Monitor.Enter(System.Object,System.Boolean@)">
          <source>The <ph id="ph1">&lt;paramref name="obj" /&gt;</ph> parameter is <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated">Параметр <ph id="ph1">&lt;paramref name="obj" /&gt;</ph> имеет значение <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="260" translate="yes" xml:space="preserve" uid="M:System.Threading.Monitor.Exit(System.Object)">
          <source>The object on which to release the lock.</source>
          <target state="translated">Объект, блокировка которого освобождается.</target>       </trans-unit>
        <trans-unit id="261" translate="yes" xml:space="preserve" uid="M:System.Threading.Monitor.Exit(System.Object)">
          <source>Releases an exclusive lock on the specified object.</source>
          <target state="translated">Освобождает эксклюзивную блокировку указанного объекта.</target>       </trans-unit>
        <trans-unit id="262" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Monitor.Exit(System.Object)">
          <source>The calling thread must own the lock on the <ph id="ph1">`obj`</ph> parameter.</source>
          <target state="translated">Вызывающий поток должен владеть блокировкой <ph id="ph1">`obj`</ph> параметра.</target>       </trans-unit>
        <trans-unit id="263" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Monitor.Exit(System.Object)">
          <source>If the calling thread owns the lock on the specified object, and has made an equal number of <ph id="ph1">`Exit`</ph> and <ph id="ph2">&lt;xref:System.Threading.Monitor.Enter%2A&gt;</ph> calls for the object, then the lock is released.</source>
          <target state="translated">Если вызывающий поток владеет блокировкой для указанного объекта и он сделал одинаковое число <ph id="ph1">`Exit`</ph> и <ph id="ph2">&lt;xref:System.Threading.Monitor.Enter%2A&gt;</ph> вызывает для объекта, а затем снятия блокировки.</target>       </trans-unit>
        <trans-unit id="264" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Monitor.Exit(System.Object)">
          <source>If the calling thread has not invoked <ph id="ph1">`Exit`</ph> as many times as <ph id="ph2">`Enter`</ph>, the lock is not released.</source>
          <target state="translated">Если вызывающий поток не вызвал инструкцию <ph id="ph1">`Exit`</ph> столько раз, сколько <ph id="ph2">`Enter`</ph>, блокировка не освобождается.</target>       </trans-unit>
        <trans-unit id="265" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Monitor.Exit(System.Object)">
          <source>If the lock is released and other threads are in the ready queue for the object, one of the threads acquires the lock.</source>
          <target state="translated">Если блокировка освобождается и другие потоки находятся в очереди готовности для объекта, один из потоков блокировку.</target>       </trans-unit>
        <trans-unit id="266" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Monitor.Exit(System.Object)">
          <source>If other threads are in the waiting queue waiting to acquire the lock, they are not automatically moved to the ready queue when the owner of the lock calls <ph id="ph1">`Exit`</ph>.</source>
          <target state="translated">Если другие потоки находятся в очереди ожидания получения блокировки, они не перемещаются автоматически в очередь готовности, когда владелец блокировки вызывает <ph id="ph1">`Exit`</ph>.</target>       </trans-unit>
        <trans-unit id="267" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Monitor.Exit(System.Object)">
          <source>To move one or more waiting threads into the ready queue, call <ph id="ph1">&lt;xref:System.Threading.Monitor.Pulse%2A&gt;</ph> or <ph id="ph2">&lt;xref:System.Threading.Monitor.PulseAll%2A&gt;</ph> before invoking <ph id="ph3">`Exit`</ph>.</source>
          <target state="translated">Чтобы переместить один или более ожидающих потоков в очередь готовности, вызовите <ph id="ph1">&lt;xref:System.Threading.Monitor.Pulse%2A&gt;</ph> или <ph id="ph2">&lt;xref:System.Threading.Monitor.PulseAll%2A&gt;</ph> перед вызовом <ph id="ph3">`Exit`</ph>.</target>       </trans-unit>
        <trans-unit id="268" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Monitor.Exit(System.Object)">
          <source>The following example demonstrates how to use the <ph id="ph1">`Exit`</ph> method.</source>
          <target state="translated">В следующем примере показано использование метода <ph id="ph1">`Exit`</ph>.</target>       </trans-unit>
        <trans-unit id="269" translate="yes" xml:space="preserve" uid="M:System.Threading.Monitor.Exit(System.Object)">
          <source>The <ph id="ph1">&lt;paramref name="obj" /&gt;</ph> parameter is <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated">Параметр <ph id="ph1">&lt;paramref name="obj" /&gt;</ph> имеет значение <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="270" translate="yes" xml:space="preserve" uid="M:System.Threading.Monitor.Exit(System.Object)">
          <source>The current thread does not own the lock for the specified object.</source>
          <target state="translated">Данный поток не владеет блокировкой для указанного объекта.</target>       </trans-unit>
        <trans-unit id="271" translate="yes" xml:space="preserve" uid="M:System.Threading.Monitor.IsEntered(System.Object)">
          <source>The object to test.</source>
          <target state="translated">Объект для тестирования.</target>       </trans-unit>
        <trans-unit id="272" translate="yes" xml:space="preserve" uid="M:System.Threading.Monitor.IsEntered(System.Object)">
          <source>Determines whether the current thread holds the lock on the specified object.</source>
          <target state="translated">Определяет, содержит ли текущий поток блокировку указанного объекта.</target>       </trans-unit>
        <trans-unit id="273" translate="yes" xml:space="preserve" uid="M:System.Threading.Monitor.IsEntered(System.Object)">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph> if the current thread holds the lock on <ph id="ph2">&lt;paramref name="obj" /&gt;</ph>; otherwise, <ph id="ph3">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated">Значение <ph id="ph1">&lt;see langword="true" /&gt;</ph>, если текущий поток владеет блокировкой в <ph id="ph2">&lt;paramref name="obj" /&gt;</ph>; в противном случае — значение <ph id="ph3">&lt;see langword="false" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="274" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Monitor.IsEntered(System.Object)">
          <source>This method works only for locks that are acquired by using the methods of the <ph id="ph1">&lt;xref:System.Threading.Monitor&gt;</ph> class, or by using the C# <ph id="ph2">`lock`</ph> statement or the Visual Basic <ph id="ph3">`SyncLock`</ph> statement, which are implemented with <ph id="ph4">&lt;xref:System.Threading.Monitor&gt;</ph>.</source>
          <target state="translated">Этот метод работает только для блокировки, полученные с помощью методов класса <ph id="ph1">&lt;xref:System.Threading.Monitor&gt;</ph> класса или с помощью C# <ph id="ph2">`lock`</ph> инструкции или Visual Basic <ph id="ph3">`SyncLock`</ph> инструкцию, которая реализуются с помощью <ph id="ph4">&lt;xref:System.Threading.Monitor&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="275" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Monitor.IsEntered(System.Object)">
          <source>Use this method with diagnostic tools, such as the <ph id="ph1">&lt;xref:System.Diagnostics.Debug.Assert%2A&gt;</ph> method and the <ph id="ph2">&lt;xref:System.Diagnostics.Contracts.Contract&gt;</ph> class, to debug locking issues that involve the <ph id="ph3">&lt;xref:System.Threading.Monitor&gt;</ph> class.</source>
          <target state="translated">Используйте этот метод, с помощью диагностических средств, таких как <ph id="ph1">&lt;xref:System.Diagnostics.Debug.Assert%2A&gt;</ph> метод и <ph id="ph2">&lt;xref:System.Diagnostics.Contracts.Contract&gt;</ph> класса для отладки проблем с блокировкой, включающих <ph id="ph3">&lt;xref:System.Threading.Monitor&gt;</ph> класса.</target>       </trans-unit>
        <trans-unit id="276" translate="yes" xml:space="preserve" uid="M:System.Threading.Monitor.IsEntered(System.Object)">
          <source><ph id="ph1">&lt;paramref name="obj" /&gt;</ph> is <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated">Свойство <ph id="ph1">&lt;paramref name="obj" /&gt;</ph> имеет значение <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="277" translate="yes" xml:space="preserve" uid="M:System.Threading.Monitor.Pulse(System.Object)">
          <source>The object a thread is waiting for.</source>
          <target state="translated">Объект, ожидаемый потоком.</target>       </trans-unit>
        <trans-unit id="278" translate="yes" xml:space="preserve" uid="M:System.Threading.Monitor.Pulse(System.Object)">
          <source>Notifies a thread in the waiting queue of a change in the locked object's state.</source>
          <target state="translated">Уведомляет поток в очереди готовности об изменении состояния объекта с блокировкой.</target>       </trans-unit>
        <trans-unit id="279" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Monitor.Pulse(System.Object)">
          <source>Only the current owner of the lock can signal a waiting object using <ph id="ph1">`Pulse`</ph>.</source>
          <target state="translated">Только текущий владелец блокировки может подать сигнал ожидающему объекту, используя <ph id="ph1">`Pulse`</ph>.</target>       </trans-unit>
        <trans-unit id="280" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Monitor.Pulse(System.Object)">
          <source>The thread that currently owns the lock on the specified object invokes this method to signal the next thread in line for the lock.</source>
          <target state="translated">Поток, который в данный момент владеет блокировкой указанного объекта вызывает этот метод для обозначения следующему потоку в строку для блокировки.</target>       </trans-unit>
        <trans-unit id="281" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Monitor.Pulse(System.Object)">
          <source>Upon receiving the pulse, the waiting thread is moved to the ready queue.</source>
          <target state="translated">При получении импульса, ожидающий поток перемещается в очередь готовности.</target>       </trans-unit>
        <trans-unit id="282" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Monitor.Pulse(System.Object)">
          <source>When the thread that invoked <ph id="ph1">`Pulse`</ph> releases the lock, the next thread in the ready queue (which is not necessarily the thread that was pulsed) acquires the lock.</source>
          <target state="translated">Когда поток, вызвавший метод <ph id="ph1">`Pulse`</ph> освобождает блокировку, следующий поток в очереди готовности (который не обязательно является потоком, получившим импульс) получает блокировку.</target>       </trans-unit>
        <trans-unit id="283" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Monitor.Pulse(System.Object)">
          <source>The <ph id="ph1">&lt;xref:System.Threading.Monitor&gt;</ph> class does not maintain state indicating that the <ph id="ph2">&lt;xref:System.Threading.Monitor.Pulse%2A&gt;</ph> method has been called.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Threading.Monitor&gt;</ph> Класса не сохраняет состояние, указывающее, что <ph id="ph2">&lt;xref:System.Threading.Monitor.Pulse%2A&gt;</ph> был вызван метод.</target>       </trans-unit>
        <trans-unit id="284" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Monitor.Pulse(System.Object)">
          <source>Thus, if you call <ph id="ph1">&lt;xref:System.Threading.Monitor.Pulse%2A&gt;</ph> when no threads are waiting, the next thread that calls <ph id="ph2">&lt;xref:System.Threading.Monitor.Wait%2A&gt;</ph> blocks as if <ph id="ph3">&lt;xref:System.Threading.Monitor.Pulse%2A&gt;</ph> had never been called.</source>
          <target state="translated">Таким образом при вызове метода <ph id="ph1">&lt;xref:System.Threading.Monitor.Pulse%2A&gt;</ph> при отсутствии ожидающих потоков, следующий поток, который вызывает <ph id="ph2">&lt;xref:System.Threading.Monitor.Wait%2A&gt;</ph> блоки как если бы <ph id="ph3">&lt;xref:System.Threading.Monitor.Pulse%2A&gt;</ph> никогда не был вызван.</target>       </trans-unit>
        <trans-unit id="285" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Monitor.Pulse(System.Object)">
          <source>If two threads are using <ph id="ph1">&lt;xref:System.Threading.Monitor.Pulse%2A&gt;</ph> and <ph id="ph2">&lt;xref:System.Threading.Monitor.Wait%2A&gt;</ph> to interact, this could result in a deadlock.</source>
          <target state="translated">Если используется два потока <ph id="ph1">&lt;xref:System.Threading.Monitor.Pulse%2A&gt;</ph> и <ph id="ph2">&lt;xref:System.Threading.Monitor.Wait%2A&gt;</ph> для взаимодействия, это может привести к взаимоблокировке.</target>       </trans-unit>
        <trans-unit id="286" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Monitor.Pulse(System.Object)">
          <source>Contrast this with the behavior of the <ph id="ph1">&lt;xref:System.Threading.AutoResetEvent&gt;</ph> class: If you signal an <ph id="ph2">&lt;xref:System.Threading.AutoResetEvent&gt;</ph> by calling its <ph id="ph3">&lt;xref:System.Threading.EventWaitHandle.Set%2A&gt;</ph> method, and there are no threads waiting, the <ph id="ph4">&lt;xref:System.Threading.AutoResetEvent&gt;</ph> remains in a signaled state until a thread calls <ph id="ph5">&lt;xref:System.Threading.WaitHandle.WaitOne%2A&gt;</ph>, <ph id="ph6">&lt;xref:System.Threading.WaitHandle.WaitAny%2A&gt;</ph>, or <ph id="ph7">&lt;xref:System.Threading.WaitHandle.WaitAll%2A&gt;</ph>.</source>
          <target state="translated">Сравните это с поведением <ph id="ph1">&lt;xref:System.Threading.AutoResetEvent&gt;</ph> класса: Если сигнал <ph id="ph2">&lt;xref:System.Threading.AutoResetEvent&gt;</ph> путем вызова его <ph id="ph3">&lt;xref:System.Threading.EventWaitHandle.Set%2A&gt;</ph> метода и нет потоков, ожидающих, <ph id="ph4">&lt;xref:System.Threading.AutoResetEvent&gt;</ph> остается в состоянии получения сигнала, пока поток вызывает метод <ph id="ph5">&lt;xref:System.Threading.WaitHandle.WaitOne%2A&gt;</ph>, <ph id="ph6">&lt;xref:System.Threading.WaitHandle.WaitAny%2A&gt;</ph>, или <ph id="ph7">&lt;xref:System.Threading.WaitHandle.WaitAll%2A&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="287" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Monitor.Pulse(System.Object)">
          <source>The <ph id="ph1">&lt;xref:System.Threading.AutoResetEvent&gt;</ph> releases that thread and returns to the unsignaled state.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Threading.AutoResetEvent&gt;</ph> Освобождает этого потока и возвращает несигнальное состояние.</target>       </trans-unit>
        <trans-unit id="288" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Monitor.Pulse(System.Object)">
          <source>Note that a synchronized object holds several references, including a reference to the thread that currently holds the lock, a reference to the ready queue, which contains the threads that are ready to obtain the lock, and a reference to the waiting queue, which contains the threads that are waiting for notification of a change in the object's state.</source>
          <target state="translated">Обратите внимание, что синхронизированный объект имеет несколько ссылок, в том числе ссылку на поток, который в настоящее время удерживает блокировку, ссылку на очередь готовности, которая содержит потоки, готовые к получению блокировки, и ссылку на очередь ожидания, который содержит потоки, которые ожидают уведомления об изменении состояния объекта.</target>       </trans-unit>
        <trans-unit id="289" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Monitor.Pulse(System.Object)">
          <source>The <ph id="ph1">`Pulse`</ph>, <ph id="ph2">&lt;xref:System.Threading.Monitor.PulseAll%2A&gt;</ph>, and <ph id="ph3">&lt;xref:System.Threading.Monitor.Wait%2A&gt;</ph> methods must be invoked from within a synchronized block of code.</source>
          <target state="translated"><ph id="ph1">`Pulse`</ph>, <ph id="ph2">&lt;xref:System.Threading.Monitor.PulseAll%2A&gt;</ph>, И <ph id="ph3">&lt;xref:System.Threading.Monitor.Wait%2A&gt;</ph> методы должны быть вызваны из синхронизированного блока кода.</target>       </trans-unit>
        <trans-unit id="290" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Monitor.Pulse(System.Object)">
          <source>To signal multiple threads, use the <ph id="ph1">&lt;xref:System.Threading.Monitor.PulseAll%2A&gt;</ph> method.</source>
          <target state="translated">Для обозначения нескольких потоков используется <ph id="ph1">&lt;xref:System.Threading.Monitor.PulseAll%2A&gt;</ph> метод.</target>       </trans-unit>
        <trans-unit id="291" translate="yes" xml:space="preserve" uid="M:System.Threading.Monitor.Pulse(System.Object)">
          <source>The <ph id="ph1">&lt;paramref name="obj" /&gt;</ph> parameter is <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated">Параметр <ph id="ph1">&lt;paramref name="obj" /&gt;</ph> имеет значение <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="292" translate="yes" xml:space="preserve" uid="M:System.Threading.Monitor.Pulse(System.Object)">
          <source>The calling thread does not own the lock for the specified object.</source>
          <target state="translated">Вызывающий поток не владеет блокировкой для указанного объекта.</target>       </trans-unit>
        <trans-unit id="293" translate="yes" xml:space="preserve" uid="M:System.Threading.Monitor.PulseAll(System.Object)">
          <source>The object that sends the pulse.</source>
          <target state="translated">Объект, посылающий импульс.</target>       </trans-unit>
        <trans-unit id="294" translate="yes" xml:space="preserve" uid="M:System.Threading.Monitor.PulseAll(System.Object)">
          <source>Notifies all waiting threads of a change in the object's state.</source>
          <target state="translated">Уведомляет все ожидающие потоки об изменении состояния объекта.</target>       </trans-unit>
        <trans-unit id="295" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Monitor.PulseAll(System.Object)">
          <source>The thread that currently owns the lock on the specified object invokes this method to signal all threads waiting to acquire the lock on the object.</source>
          <target state="translated">Поток, который в данный момент владеет блокировкой указанного объекта вызывает этот метод для указания всех потоков, ожидающих получения блокировки на объект.</target>       </trans-unit>
        <trans-unit id="296" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Monitor.PulseAll(System.Object)">
          <source>After the signal is sent, the waiting threads are moved to the ready queue.</source>
          <target state="translated">После отправки сигнала, потоки перемещаются в очередь готовности.</target>       </trans-unit>
        <trans-unit id="297" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Monitor.PulseAll(System.Object)">
          <source>When the thread that invoked <ph id="ph1">`PulseAll`</ph> releases the lock, the next thread in the ready queue acquires the lock.</source>
          <target state="translated">Когда поток, вызвавший метод <ph id="ph1">`PulseAll`</ph> освобождает блокировку, следующий поток в очереди готовности получает блокировку.</target>       </trans-unit>
        <trans-unit id="298" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Monitor.PulseAll(System.Object)">
          <source>Note that a synchronized object holds several references, including a reference to the thread that currently holds the lock, a reference to the ready queue, which contains the threads that are ready to obtain the lock, and a reference to the waiting queue, which contains the threads that are waiting for notification of a change in the object's state.</source>
          <target state="translated">Обратите внимание, что синхронизированный объект имеет несколько ссылок, в том числе ссылку на поток, который в настоящее время удерживает блокировку, ссылку на очередь готовности, которая содержит потоки, готовые к получению блокировки, и ссылку на очередь ожидания, который содержит потоки, которые ожидают уведомления об изменении состояния объекта.</target>       </trans-unit>
        <trans-unit id="299" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Monitor.PulseAll(System.Object)">
          <source>The <ph id="ph1">&lt;xref:System.Threading.Monitor.Pulse%2A&gt;</ph>, <ph id="ph2">`PulseAll`</ph>, and <ph id="ph3">&lt;xref:System.Threading.Monitor.Wait%2A&gt;</ph> methods must be invoked from within a synchronized block of code.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Threading.Monitor.Pulse%2A&gt;</ph>, <ph id="ph2">`PulseAll`</ph>, И <ph id="ph3">&lt;xref:System.Threading.Monitor.Wait%2A&gt;</ph> методы должны быть вызваны из синхронизированного блока кода.</target>       </trans-unit>
        <trans-unit id="300" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Monitor.PulseAll(System.Object)">
          <source>The remarks for the <ph id="ph1">&lt;xref:System.Threading.Monitor.Pulse%2A&gt;</ph> method explain what happens if <ph id="ph2">&lt;xref:System.Threading.Monitor.Pulse%2A&gt;</ph> is called when no threads are waiting.</source>
          <target state="translated">Примечания для <ph id="ph1">&lt;xref:System.Threading.Monitor.Pulse%2A&gt;</ph> метод объясняется, что происходит при <ph id="ph2">&lt;xref:System.Threading.Monitor.Pulse%2A&gt;</ph> вызывается при отсутствии ожидающих потоков.</target>       </trans-unit>
        <trans-unit id="301" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Monitor.PulseAll(System.Object)">
          <source>To signal a single thread, use the <ph id="ph1">`Pulse`</ph> method.</source>
          <target state="translated">Для обозначения одного потока, используется <ph id="ph1">`Pulse`</ph> метод.</target>       </trans-unit>
        <trans-unit id="302" translate="yes" xml:space="preserve" uid="M:System.Threading.Monitor.PulseAll(System.Object)">
          <source>The <ph id="ph1">&lt;paramref name="obj" /&gt;</ph> parameter is <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated">Параметр <ph id="ph1">&lt;paramref name="obj" /&gt;</ph> имеет значение <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="303" translate="yes" xml:space="preserve" uid="M:System.Threading.Monitor.PulseAll(System.Object)">
          <source>The calling thread does not own the lock for the specified object.</source>
          <target state="translated">Вызывающий поток не владеет блокировкой для указанного объекта.</target>       </trans-unit>
        <trans-unit id="304" translate="yes" xml:space="preserve" uid="T:System.Threading.Monitor">
          <source>Attempts to acquire an exclusive lock on the specified object.</source>
          <target state="translated">Пытается получить эксклюзивную блокировку указанного объекта.</target>       </trans-unit>
        <trans-unit id="305" translate="yes" xml:space="preserve" uid="M:System.Threading.Monitor.TryEnter(System.Object)">
          <source>The object on which to acquire the lock.</source>
          <target state="translated">Объект, блокировка которого получается.</target>       </trans-unit>
        <trans-unit id="306" translate="yes" xml:space="preserve" uid="M:System.Threading.Monitor.TryEnter(System.Object)">
          <source>Attempts to acquire an exclusive lock on the specified object.</source>
          <target state="translated">Пытается получить эксклюзивную блокировку указанного объекта.</target>       </trans-unit>
        <trans-unit id="307" translate="yes" xml:space="preserve" uid="M:System.Threading.Monitor.TryEnter(System.Object)">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph> if the current thread acquires the lock; otherwise, <ph id="ph2">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated">Значение <ph id="ph1">&lt;see langword="true" /&gt;</ph>, если текущий поток получает блокировку; в противном случае — значение <ph id="ph2">&lt;see langword="false" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="308" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Monitor.TryEnter(System.Object)">
          <source>If successful, this method acquires an exclusive lock on the <ph id="ph1">`obj`</ph> parameter.</source>
          <target state="translated">Если успешно, этот метод получает эксклюзивную блокировку на <ph id="ph1">`obj`</ph> параметра.</target>       </trans-unit>
        <trans-unit id="309" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Monitor.TryEnter(System.Object)">
          <source>This method returns immediately, whether or not the lock is available.</source>
          <target state="translated">Этот метод немедленно, возвращает ли доступна блокировка.</target>       </trans-unit>
        <trans-unit id="310" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Monitor.TryEnter(System.Object)">
          <source>This method is similar to <ph id="ph1">&lt;xref:System.Threading.Monitor.Enter%2A&gt;</ph>, but it will never block the current thread.</source>
          <target state="translated">Этот метод аналогичен <ph id="ph1">&lt;xref:System.Threading.Monitor.Enter%2A&gt;</ph>, но никогда не заблокирует текущего потока.</target>       </trans-unit>
        <trans-unit id="311" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Monitor.TryEnter(System.Object)">
          <source>If the thread cannot enter without blocking, the method returns <ph id="ph1">`false,`</ph>.</source>
          <target state="translated">Если поток не может войти без блокировки, метод возвращает <ph id="ph1">`false,`</ph>.</target>       </trans-unit>
        <trans-unit id="312" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Monitor.TryEnter(System.Object)">
          <source>Use <ph id="ph1">&lt;xref:System.Threading.Monitor&gt;</ph> to lock objects (that is, reference types), not value types.</source>
          <target state="translated">Используйте <ph id="ph1">&lt;xref:System.Threading.Monitor&gt;</ph> блокирует объекты (то есть ссылочные типы), не типы значений.</target>       </trans-unit>
        <trans-unit id="313" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Monitor.TryEnter(System.Object)">
          <source>For details, see the <ph id="ph1">&lt;xref:System.Threading.Monitor&gt;</ph> article.</source>
          <target state="translated">Дополнительные сведения см. в разделе <ph id="ph1">&lt;xref:System.Threading.Monitor&gt;</ph> статьи.</target>       </trans-unit>
        <trans-unit id="314" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Monitor.TryEnter(System.Object)">
          <source>To ensure that the thread does not enter the critical section, you should examine the method's return value and  execute code in the critical section only if its return value is <ph id="ph1">`true`</ph>.</source>
          <target state="translated">Чтобы убедиться, что поток не войдет в критическую секцию, необходимо изучить возвращаемое значение метода и выполнения кода в критический раздел только в том случае, если возвращаемое значение не <ph id="ph1">`true`</ph>.</target>       </trans-unit>
        <trans-unit id="315" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Monitor.TryEnter(System.Object)">
          <source>The following code fragment shows the pattern used to call this method.</source>
          <target state="translated">В следующем фрагменте кода показан шаблон, используемый для вызова этого метода.</target>       </trans-unit>
        <trans-unit id="316" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Monitor.TryEnter(System.Object)">
          <source>Note that you should call <ph id="ph1">&lt;xref:System.Threading.Monitor.Exit%2A&gt;</ph> in a <ph id="ph2">`finally`</ph> block to ensure that the calling thread releases its lock on the critical section if an exception occurs.</source>
          <target state="translated">Обратите внимание, что необходимо вызвать <ph id="ph1">&lt;xref:System.Threading.Monitor.Exit%2A&gt;</ph> в <ph id="ph2">`finally`</ph> блок, чтобы убедиться, что вызывающий поток освобождает блокировку критической секции при возникновении исключения.</target>       </trans-unit>
        <trans-unit id="317" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Monitor.TryEnter(System.Object)">
          <source>The following code example demonstrates how to use the <ph id="ph1">`TryEnter`</ph> method.</source>
          <target state="translated">В следующем примере кода показано, как использовать метод <ph id="ph1">`TryEnter`</ph>.</target>       </trans-unit>
        <trans-unit id="318" translate="yes" xml:space="preserve" uid="M:System.Threading.Monitor.TryEnter(System.Object)">
          <source>The <ph id="ph1">&lt;paramref name="obj" /&gt;</ph> parameter is <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated">Параметр <ph id="ph1">&lt;paramref name="obj" /&gt;</ph> имеет значение <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="319" translate="yes" xml:space="preserve" uid="M:System.Threading.Monitor.TryEnter(System.Object,System.Boolean@)">
          <source>The object on which to acquire the lock.</source>
          <target state="translated">Объект, блокировка которого получается.</target>       </trans-unit>
        <trans-unit id="320" translate="yes" xml:space="preserve" uid="M:System.Threading.Monitor.TryEnter(System.Object,System.Boolean@)">
          <source>The result of the attempt to acquire the lock, passed by reference.</source>
          <target state="translated">Результат попытки получить блокировку, переданную по ссылке.</target>       </trans-unit>
        <trans-unit id="321" translate="yes" xml:space="preserve" uid="M:System.Threading.Monitor.TryEnter(System.Object,System.Boolean@)">
          <source>The input must be <ph id="ph1">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated">Входное значение должно равняться <ph id="ph1">&lt;see langword="false" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="322" translate="yes" xml:space="preserve" uid="M:System.Threading.Monitor.TryEnter(System.Object,System.Boolean@)">
          <source>The output is <ph id="ph1">&lt;see langword="true" /&gt;</ph> if the lock is acquired; otherwise, the output is <ph id="ph2">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated">Выходное значение <ph id="ph1">&lt;see langword="true" /&gt;</ph>, если блокировка получена; в противном случае — выходное значение <ph id="ph2">&lt;see langword="false" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="323" translate="yes" xml:space="preserve" uid="M:System.Threading.Monitor.TryEnter(System.Object,System.Boolean@)">
          <source>The output is set even if an exception occurs during the attempt to acquire the lock.</source>
          <target state="translated">Выходное значение задается, даже если при попытке получить блокировку возникает исключение.</target>       </trans-unit>
        <trans-unit id="324" translate="yes" xml:space="preserve" uid="M:System.Threading.Monitor.TryEnter(System.Object,System.Boolean@)">
          <source>Attempts to acquire an exclusive lock on the specified object, and atomically sets a value that indicates whether the lock was taken.</source>
          <target state="translated">Пытается получить монопольную блокировку указанного объекта и единым блоком задает значение, указывающее, была ли выполнена блокировка.</target>       </trans-unit>
        <trans-unit id="325" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Monitor.TryEnter(System.Object,System.Boolean@)">
          <source>If successful, this method acquires an exclusive lock on the <ph id="ph1">`obj`</ph> parameter.</source>
          <target state="translated">Если успешно, этот метод получает эксклюзивную блокировку на <ph id="ph1">`obj`</ph> параметра.</target>       </trans-unit>
        <trans-unit id="326" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Monitor.TryEnter(System.Object,System.Boolean@)">
          <source>This method returns immediately, whether or not the lock is available.</source>
          <target state="translated">Этот метод немедленно, возвращает ли доступна блокировка.</target>       </trans-unit>
        <trans-unit id="327" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Monitor.TryEnter(System.Object,System.Boolean@)">
          <source>If the lock was not taken because an exception was thrown, the variable specified for the <ph id="ph1">`lockTaken`</ph> parameter is <ph id="ph2">`false`</ph> after this method ends.</source>
          <target state="translated">Если блокировка не была сделана, поскольку возникло исключение, переменная, указанная для <ph id="ph1">`lockTaken`</ph> параметр <ph id="ph2">`false`</ph> после завершения этого метода.</target>       </trans-unit>
        <trans-unit id="328" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Monitor.TryEnter(System.Object,System.Boolean@)">
          <source>This allows the program to determine, in all cases, whether it is necessary to release the lock.</source>
          <target state="translated">Это позволяет приложению определить, во всех случаях необходимость для снятия блокировки.</target>       </trans-unit>
        <trans-unit id="329" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Monitor.TryEnter(System.Object,System.Boolean@)">
          <source>This method is similar to <ph id="ph1">&lt;xref:System.Threading.Monitor.Enter%28System.Object%2CSystem.Boolean%40%29&gt;</ph>, but it will never block the current thread.</source>
          <target state="translated">Этот метод аналогичен <ph id="ph1">&lt;xref:System.Threading.Monitor.Enter%28System.Object%2CSystem.Boolean%40%29&gt;</ph>, но никогда не заблокирует текущего потока.</target>       </trans-unit>
        <trans-unit id="330" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Monitor.TryEnter(System.Object,System.Boolean@)">
          <source>If the thread cannot enter without blocking, the <ph id="ph1">`lockTaken`</ph> argument is set to <ph id="ph2">`false`</ph> when the method returns.</source>
          <target state="translated">Если поток не может войти без блокировки, <ph id="ph1">`lockTaken`</ph> аргумента равно <ph id="ph2">`false`</ph> когда этот метод возвращает.</target>       </trans-unit>
        <trans-unit id="331" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Monitor.TryEnter(System.Object,System.Boolean@)">
          <source>Use <ph id="ph1">&lt;xref:System.Threading.Monitor&gt;</ph> to lock objects (that is, reference types), not value types.</source>
          <target state="translated">Используйте <ph id="ph1">&lt;xref:System.Threading.Monitor&gt;</ph> блокирует объекты (то есть ссылочные типы), не типы значений.</target>       </trans-unit>
        <trans-unit id="332" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Monitor.TryEnter(System.Object,System.Boolean@)">
          <source>For more information, see the <ph id="ph1">&lt;xref:System.Threading.Monitor&gt;</ph> article.</source>
          <target state="translated">Дополнительные сведения см. в разделе <ph id="ph1">&lt;xref:System.Threading.Monitor&gt;</ph> статьи.</target>       </trans-unit>
        <trans-unit id="333" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Monitor.TryEnter(System.Object,System.Boolean@)">
          <source>To ensure that the thread does not enter the critical section, you should examine the value of <ph id="ph1">`lockTaken`</ph> and  execute code in the critical section only if its value is <ph id="ph2">`true`</ph>.</source>
          <target state="translated">Чтобы убедиться, что поток не войдет в критическую секцию, необходимо проверить значение <ph id="ph1">`lockTaken`</ph> и выполнять код в критический раздел только в том случае, если его значение равно <ph id="ph2">`true`</ph>.</target>       </trans-unit>
        <trans-unit id="334" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Monitor.TryEnter(System.Object,System.Boolean@)">
          <source>The following code fragment shows the pattern used to call this method.</source>
          <target state="translated">В следующем фрагменте кода показан шаблон, используемый для вызова этого метода.</target>       </trans-unit>
        <trans-unit id="335" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Monitor.TryEnter(System.Object,System.Boolean@)">
          <source>Note that you should call <ph id="ph1">&lt;xref:System.Threading.Monitor.Exit%2A&gt;</ph> in a <ph id="ph2">`finally`</ph> block to ensure that the calling thread releases its lock on the critical section if an exception occurs.</source>
          <target state="translated">Обратите внимание, что необходимо вызвать <ph id="ph1">&lt;xref:System.Threading.Monitor.Exit%2A&gt;</ph> в <ph id="ph2">`finally`</ph> блок, чтобы убедиться, что вызывающий поток освобождает блокировку критической секции при возникновении исключения.</target>       </trans-unit>
        <trans-unit id="336" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Monitor.TryEnter(System.Object,System.Boolean@)">
          <source>The following code shows the basic pattern for using the <ph id="ph1">&lt;xref:System.Threading.Monitor.TryEnter%28System.Object%2CSystem.Boolean%40%29&gt;</ph> method overload.</source>
          <target state="translated">Ниже показан базовый шаблон для использования <ph id="ph1">&lt;xref:System.Threading.Monitor.TryEnter%28System.Object%2CSystem.Boolean%40%29&gt;</ph> перегрузки метода.</target>       </trans-unit>
        <trans-unit id="337" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Monitor.TryEnter(System.Object,System.Boolean@)">
          <source>This overload always sets the value of the variable that is passed to the <ph id="ph1">`ref`</ph> parameter (<ph id="ph2">`ByRef`</ph> in Visual Basic) <ph id="ph3">`lockTaken`</ph>, even if the method throws an exception, so the value of the variable is a reliable way to test whether the lock has to be released.</source>
          <target state="translated">Эта перегрузка всегда устанавливает значение, передаваемое переменной <ph id="ph1">`ref`</ph> параметра (<ph id="ph2">`ByRef`</ph> в Visual Basic) <ph id="ph3">`lockTaken`</ph>, даже если метод вызывает исключение, поэтому значение переменной является надежным способом для проверки блокировки должен быть выпущен.</target>       </trans-unit>
        <trans-unit id="338" translate="yes" xml:space="preserve" uid="M:System.Threading.Monitor.TryEnter(System.Object,System.Boolean@)">
          <source>The input to <ph id="ph1">&lt;paramref name="lockTaken" /&gt;</ph> is <ph id="ph2">&lt;see langword="true" /&gt;</ph>.</source>
          <target state="translated">Входные данные для <ph id="ph1">&lt;paramref name="lockTaken" /&gt;</ph> — <ph id="ph2">&lt;see langword="true" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="339" translate="yes" xml:space="preserve" uid="M:System.Threading.Monitor.TryEnter(System.Object,System.Boolean@)">
          <source>The <ph id="ph1">&lt;paramref name="obj" /&gt;</ph> parameter is <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated">Параметр <ph id="ph1">&lt;paramref name="obj" /&gt;</ph> имеет значение <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="340" translate="yes" xml:space="preserve" uid="M:System.Threading.Monitor.TryEnter(System.Object,System.Int32)">
          <source>The object on which to acquire the lock.</source>
          <target state="translated">Объект, блокировка которого получается.</target>       </trans-unit>
        <trans-unit id="341" translate="yes" xml:space="preserve" uid="M:System.Threading.Monitor.TryEnter(System.Object,System.Int32)">
          <source>The number of milliseconds to wait for the lock.</source>
          <target state="translated">Количество миллисекунд, в течение которых ожидать блокировку.</target>       </trans-unit>
        <trans-unit id="342" translate="yes" xml:space="preserve" uid="M:System.Threading.Monitor.TryEnter(System.Object,System.Int32)">
          <source>Attempts, for the specified number of milliseconds, to acquire an exclusive lock on the specified object.</source>
          <target state="translated">Пытается получить эксклюзивную блокировку указанного объекта на заданное количество миллисекунд.</target>       </trans-unit>
        <trans-unit id="343" translate="yes" xml:space="preserve" uid="M:System.Threading.Monitor.TryEnter(System.Object,System.Int32)">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph> if the current thread acquires the lock; otherwise, <ph id="ph2">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated">Значение <ph id="ph1">&lt;see langword="true" /&gt;</ph>, если текущий поток получает блокировку; в противном случае — значение <ph id="ph2">&lt;see langword="false" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="344" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Monitor.TryEnter(System.Object,System.Int32)">
          <source>If the <ph id="ph1">`millisecondsTimeout`</ph> parameter equals <ph id="ph2">&lt;xref:System.Threading.Timeout.Infinite&gt;</ph>, this method is equivalent to <ph id="ph3">&lt;xref:System.Threading.Monitor.Enter%2A&gt;</ph>.</source>
          <target state="translated">Если <ph id="ph1">`millisecondsTimeout`</ph> равняется <ph id="ph2">&lt;xref:System.Threading.Timeout.Infinite&gt;</ph>, этот метод эквивалентен методу <ph id="ph3">&lt;xref:System.Threading.Monitor.Enter%2A&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="345" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Monitor.TryEnter(System.Object,System.Int32)">
          <source>If <ph id="ph1">`millisecondsTimeout`</ph> equals 0, this method is equivalent to <ph id="ph2">&lt;xref:System.Threading.Monitor.TryEnter%2A&gt;</ph>.</source>
          <target state="translated">Если <ph id="ph1">`millisecondsTimeout`</ph> равно 0, то этот метод эквивалентен методу <ph id="ph2">&lt;xref:System.Threading.Monitor.TryEnter%2A&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="346" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Monitor.TryEnter(System.Object,System.Int32)">
          <source>Use <ph id="ph1">&lt;xref:System.Threading.Monitor&gt;</ph> to lock objects (that is, reference types), not value types.</source>
          <target state="translated">Используйте <ph id="ph1">&lt;xref:System.Threading.Monitor&gt;</ph> блокирует объекты (то есть ссылочные типы), не типы значений.</target>       </trans-unit>
        <trans-unit id="347" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Monitor.TryEnter(System.Object,System.Int32)">
          <source>For details, see the <ph id="ph1">&lt;xref:System.Threading.Monitor&gt;</ph> article.</source>
          <target state="translated">Дополнительные сведения см. в разделе <ph id="ph1">&lt;xref:System.Threading.Monitor&gt;</ph> статьи.</target>       </trans-unit>
        <trans-unit id="348" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Monitor.TryEnter(System.Object,System.Int32)">
          <source>To ensure that the thread does not enter the critical section, you should examine the method's return value and  execute code in the critical section only if its return value is <ph id="ph1">`true`</ph>.</source>
          <target state="translated">Чтобы убедиться, что поток не войдет в критическую секцию, необходимо изучить возвращаемое значение метода и выполнения кода в критический раздел только в том случае, если возвращаемое значение не <ph id="ph1">`true`</ph>.</target>       </trans-unit>
        <trans-unit id="349" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Monitor.TryEnter(System.Object,System.Int32)">
          <source>The following code fragment shows the pattern used to call this method.</source>
          <target state="translated">В следующем фрагменте кода показан шаблон, используемый для вызова этого метода.</target>       </trans-unit>
        <trans-unit id="350" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Monitor.TryEnter(System.Object,System.Int32)">
          <source>Note that you should call <ph id="ph1">&lt;xref:System.Threading.Monitor.Exit%2A&gt;</ph> in a <ph id="ph2">`finally`</ph> block to ensure that the calling thread releases its lock on the critical section if an exception occurs.</source>
          <target state="translated">Обратите внимание, что необходимо вызвать <ph id="ph1">&lt;xref:System.Threading.Monitor.Exit%2A&gt;</ph> в <ph id="ph2">`finally`</ph> блок, чтобы убедиться, что вызывающий поток освобождает блокировку критической секции при возникновении исключения.</target>       </trans-unit>
        <trans-unit id="351" translate="yes" xml:space="preserve" uid="M:System.Threading.Monitor.TryEnter(System.Object,System.Int32)">
          <source>The <ph id="ph1">&lt;paramref name="obj" /&gt;</ph> parameter is <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated">Параметр <ph id="ph1">&lt;paramref name="obj" /&gt;</ph> имеет значение <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="352" translate="yes" xml:space="preserve" uid="M:System.Threading.Monitor.TryEnter(System.Object,System.Int32)">
          <source><ph id="ph1">&lt;paramref name="millisecondsTimeout" /&gt;</ph> is negative, and not equal to <ph id="ph2">&lt;see cref="F:System.Threading.Timeout.Infinite" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="millisecondsTimeout" /&gt;</ph> является отрицательным числом и не равно <ph id="ph2">&lt;see cref="F:System.Threading.Timeout.Infinite" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="353" translate="yes" xml:space="preserve" uid="M:System.Threading.Monitor.TryEnter(System.Object,System.TimeSpan)">
          <source>The object on which to acquire the lock.</source>
          <target state="translated">Объект, блокировка которого получается.</target>       </trans-unit>
        <trans-unit id="354" translate="yes" xml:space="preserve" uid="M:System.Threading.Monitor.TryEnter(System.Object,System.TimeSpan)">
          <source>A <ph id="ph1">&lt;see cref="T:System.TimeSpan" /&gt;</ph> representing the amount of time to wait for the lock.</source>
          <target state="translated">Класс <ph id="ph1">&lt;see cref="T:System.TimeSpan" /&gt;</ph>, представляющий количество времени, в течение которого ожидается блокировка.</target>       </trans-unit>
        <trans-unit id="355" translate="yes" xml:space="preserve" uid="M:System.Threading.Monitor.TryEnter(System.Object,System.TimeSpan)">
          <source>A value of –1 millisecond specifies an infinite wait.</source>
          <target state="translated">Значение –1 миллисекунды обозначает бесконечное ожидание.</target>       </trans-unit>
        <trans-unit id="356" translate="yes" xml:space="preserve" uid="M:System.Threading.Monitor.TryEnter(System.Object,System.TimeSpan)">
          <source>Attempts, for the specified amount of time, to acquire an exclusive lock on the specified object.</source>
          <target state="translated">Пытается получить эксклюзивную блокировку указанного объекта в течение заданного количества времени.</target>       </trans-unit>
        <trans-unit id="357" translate="yes" xml:space="preserve" uid="M:System.Threading.Monitor.TryEnter(System.Object,System.TimeSpan)">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph> if the current thread acquires the lock; otherwise, <ph id="ph2">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated">Значение <ph id="ph1">&lt;see langword="true" /&gt;</ph>, если текущий поток получает блокировку; в противном случае — значение <ph id="ph2">&lt;see langword="false" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="358" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Monitor.TryEnter(System.Object,System.TimeSpan)">
          <source>If the value of the <ph id="ph1">`timeout`</ph> parameter converted to milliseconds equals –1, this method is equivalent to <ph id="ph2">&lt;xref:System.Threading.Monitor.Enter%2A&gt;</ph>.</source>
          <target state="translated">Если значение <ph id="ph1">`timeout`</ph> параметр преобразованы в миллисекундах равно – 1, то этот метод эквивалентен методу <ph id="ph2">&lt;xref:System.Threading.Monitor.Enter%2A&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="359" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Monitor.TryEnter(System.Object,System.TimeSpan)">
          <source>If the value of <ph id="ph1">`timeout`</ph> equals 0, this method is equivalent to <ph id="ph2">&lt;xref:System.Threading.Monitor.TryEnter%2A&gt;</ph>.</source>
          <target state="translated">Если значение <ph id="ph1">`timeout`</ph> равно 0, то этот метод эквивалентен методу <ph id="ph2">&lt;xref:System.Threading.Monitor.TryEnter%2A&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="360" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Monitor.TryEnter(System.Object,System.TimeSpan)">
          <source>Use <ph id="ph1">&lt;xref:System.Threading.Monitor&gt;</ph> to lock objects (that is, reference types), not value types.</source>
          <target state="translated">Используйте <ph id="ph1">&lt;xref:System.Threading.Monitor&gt;</ph> блокирует объекты (то есть ссылочные типы), не типы значений.</target>       </trans-unit>
        <trans-unit id="361" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Monitor.TryEnter(System.Object,System.TimeSpan)">
          <source>For details, see the <ph id="ph1">&lt;xref:System.Threading.Monitor&gt;</ph> class topic.</source>
          <target state="translated">Дополнительные сведения см. в разделе <ph id="ph1">&lt;xref:System.Threading.Monitor&gt;</ph> разделе, посвященном классу.</target>       </trans-unit>
        <trans-unit id="362" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Monitor.TryEnter(System.Object,System.TimeSpan)">
          <source>To ensure that the thread does not enter the critical section, you should examine the method's return value and  execute code in the critical section only if its return value is <ph id="ph1">`true`</ph>.</source>
          <target state="translated">Чтобы убедиться, что поток не войдет в критическую секцию, необходимо изучить возвращаемое значение метода и выполнения кода в критический раздел только в том случае, если возвращаемое значение не <ph id="ph1">`true`</ph>.</target>       </trans-unit>
        <trans-unit id="363" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Monitor.TryEnter(System.Object,System.TimeSpan)">
          <source>The following code fragment shows the pattern used to call this method.</source>
          <target state="translated">В следующем фрагменте кода показан шаблон, используемый для вызова этого метода.</target>       </trans-unit>
        <trans-unit id="364" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Monitor.TryEnter(System.Object,System.TimeSpan)">
          <source>Note that you should call <ph id="ph1">&lt;xref:System.Threading.Monitor.Exit%2A&gt;</ph> in a <ph id="ph2">`finally`</ph> block to ensure that the calling thread releases its lock on the critical section if an exception occurs.</source>
          <target state="translated">Обратите внимание, что необходимо вызвать <ph id="ph1">&lt;xref:System.Threading.Monitor.Exit%2A&gt;</ph> в <ph id="ph2">`finally`</ph> блок, чтобы убедиться, что вызывающий поток освобождает блокировку критической секции при возникновении исключения.</target>       </trans-unit>
        <trans-unit id="365" translate="yes" xml:space="preserve" uid="M:System.Threading.Monitor.TryEnter(System.Object,System.TimeSpan)">
          <source>The <ph id="ph1">&lt;paramref name="obj" /&gt;</ph> parameter is <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated">Параметр <ph id="ph1">&lt;paramref name="obj" /&gt;</ph> имеет значение <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="366" translate="yes" xml:space="preserve" uid="M:System.Threading.Monitor.TryEnter(System.Object,System.TimeSpan)">
          <source>The value of <ph id="ph1">&lt;paramref name="timeout" /&gt;</ph> in milliseconds is negative and is not equal to <ph id="ph2">&lt;see cref="F:System.Threading.Timeout.Infinite" /&gt;</ph> (–1 millisecond), or is greater than <ph id="ph3">&lt;see cref="F:System.Int32.MaxValue" /&gt;</ph>.</source>
          <target state="translated">Значение <ph id="ph1">&lt;paramref name="timeout" /&gt;</ph> (в миллисекундах) является отрицательным. Оно не равно <ph id="ph2">&lt;see cref="F:System.Threading.Timeout.Infinite" /&gt;</ph> (-1 миллисекунда) или больше <ph id="ph3">&lt;see cref="F:System.Int32.MaxValue" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="367" translate="yes" xml:space="preserve" uid="M:System.Threading.Monitor.TryEnter(System.Object,System.Int32,System.Boolean@)">
          <source>The object on which to acquire the lock.</source>
          <target state="translated">Объект, блокировка которого получается.</target>       </trans-unit>
        <trans-unit id="368" translate="yes" xml:space="preserve" uid="M:System.Threading.Monitor.TryEnter(System.Object,System.Int32,System.Boolean@)">
          <source>The number of milliseconds to wait for the lock.</source>
          <target state="translated">Количество миллисекунд, в течение которых ожидать блокировку.</target>       </trans-unit>
        <trans-unit id="369" translate="yes" xml:space="preserve" uid="M:System.Threading.Monitor.TryEnter(System.Object,System.Int32,System.Boolean@)">
          <source>The result of the attempt to acquire the lock, passed by reference.</source>
          <target state="translated">Результат попытки получить блокировку, переданную по ссылке.</target>       </trans-unit>
        <trans-unit id="370" translate="yes" xml:space="preserve" uid="M:System.Threading.Monitor.TryEnter(System.Object,System.Int32,System.Boolean@)">
          <source>The input must be <ph id="ph1">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated">Входное значение должно равняться <ph id="ph1">&lt;see langword="false" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="371" translate="yes" xml:space="preserve" uid="M:System.Threading.Monitor.TryEnter(System.Object,System.Int32,System.Boolean@)">
          <source>The output is <ph id="ph1">&lt;see langword="true" /&gt;</ph> if the lock is acquired; otherwise, the output is <ph id="ph2">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated">Выходное значение <ph id="ph1">&lt;see langword="true" /&gt;</ph>, если блокировка получена; в противном случае — выходное значение <ph id="ph2">&lt;see langword="false" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="372" translate="yes" xml:space="preserve" uid="M:System.Threading.Monitor.TryEnter(System.Object,System.Int32,System.Boolean@)">
          <source>The output is set even if an exception occurs during the attempt to acquire the lock.</source>
          <target state="translated">Выходное значение задается, даже если при попытке получить блокировку возникает исключение.</target>       </trans-unit>
        <trans-unit id="373" translate="yes" xml:space="preserve" uid="M:System.Threading.Monitor.TryEnter(System.Object,System.Int32,System.Boolean@)">
          <source>Attempts, for the specified number of milliseconds, to acquire an exclusive lock on the specified object, and atomically sets a value that indicates whether the lock was taken.</source>
          <target state="translated">В течение заданного количества миллисекунд пытается получить монопольную блокировку указанного объекта и единым блоком задает значение, указывающее, была ли выполнена блокировка.</target>       </trans-unit>
        <trans-unit id="374" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Monitor.TryEnter(System.Object,System.Int32,System.Boolean@)">
          <source>If the <ph id="ph1">`millisecondsTimeout`</ph> parameter equals <ph id="ph2">&lt;xref:System.Threading.Timeout.Infinite&gt;</ph>, this method is equivalent to <ph id="ph3">&lt;xref:System.Threading.Monitor.Enter%28System.Object%29&gt;</ph>.</source>
          <target state="translated">Если <ph id="ph1">`millisecondsTimeout`</ph> равняется <ph id="ph2">&lt;xref:System.Threading.Timeout.Infinite&gt;</ph>, этот метод эквивалентен методу <ph id="ph3">&lt;xref:System.Threading.Monitor.Enter%28System.Object%29&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="375" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Monitor.TryEnter(System.Object,System.Int32,System.Boolean@)">
          <source>If <ph id="ph1">`millisecondsTimeout`</ph> equals 0, this method is equivalent to <ph id="ph2">&lt;xref:System.Threading.Monitor.TryEnter%28System.Object%29&gt;</ph>.</source>
          <target state="translated">Если <ph id="ph1">`millisecondsTimeout`</ph> равно 0, то этот метод эквивалентен методу <ph id="ph2">&lt;xref:System.Threading.Monitor.TryEnter%28System.Object%29&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="376" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Monitor.TryEnter(System.Object,System.Int32,System.Boolean@)">
          <source>If the lock was not taken because an exception was thrown, the variable specified for the <ph id="ph1">`lockTaken`</ph> parameter is <ph id="ph2">`false`</ph> after this method ends.</source>
          <target state="translated">Если блокировка не была сделана, поскольку возникло исключение, переменная, указанная для <ph id="ph1">`lockTaken`</ph> параметр <ph id="ph2">`false`</ph> после завершения этого метода.</target>       </trans-unit>
        <trans-unit id="377" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Monitor.TryEnter(System.Object,System.Int32,System.Boolean@)">
          <source>This allows the program to determine, in all cases, whether it is necessary to release the lock.</source>
          <target state="translated">Это позволяет приложению определить, во всех случаях необходимость для снятия блокировки.</target>       </trans-unit>
        <trans-unit id="378" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Monitor.TryEnter(System.Object,System.Int32,System.Boolean@)">
          <source>Use <ph id="ph1">&lt;xref:System.Threading.Monitor&gt;</ph> to lock objects (that is, reference types), not value types.</source>
          <target state="translated">Используйте <ph id="ph1">&lt;xref:System.Threading.Monitor&gt;</ph> блокирует объекты (то есть ссылочные типы), не типы значений.</target>       </trans-unit>
        <trans-unit id="379" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Monitor.TryEnter(System.Object,System.Int32,System.Boolean@)">
          <source>For more information, see the <ph id="ph1">&lt;xref:System.Threading.Monitor&gt;</ph> class topic.</source>
          <target state="translated">Дополнительные сведения см. в разделе <ph id="ph1">&lt;xref:System.Threading.Monitor&gt;</ph> разделе, посвященном классу.</target>       </trans-unit>
        <trans-unit id="380" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Monitor.TryEnter(System.Object,System.Int32,System.Boolean@)">
          <source>To ensure that the thread does not enter the critical section, you should examine the value of <ph id="ph1">`lockTaken`</ph> and  execute code in the critical section only if its value is <ph id="ph2">`true`</ph>.</source>
          <target state="translated">Чтобы убедиться, что поток не войдет в критическую секцию, необходимо проверить значение <ph id="ph1">`lockTaken`</ph> и выполнять код в критический раздел только в том случае, если его значение равно <ph id="ph2">`true`</ph>.</target>       </trans-unit>
        <trans-unit id="381" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Monitor.TryEnter(System.Object,System.Int32,System.Boolean@)">
          <source>The following code fragment shows the pattern used to call this method.</source>
          <target state="translated">В следующем фрагменте кода показан шаблон, используемый для вызова этого метода.</target>       </trans-unit>
        <trans-unit id="382" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Monitor.TryEnter(System.Object,System.Int32,System.Boolean@)">
          <source>Note that you should call <ph id="ph1">&lt;xref:System.Threading.Monitor.Exit%2A&gt;</ph> in a <ph id="ph2">`finally`</ph> block to ensure that the calling thread releases its lock on the critical section if an exception occurs.</source>
          <target state="translated">Обратите внимание, что необходимо вызвать <ph id="ph1">&lt;xref:System.Threading.Monitor.Exit%2A&gt;</ph> в <ph id="ph2">`finally`</ph> блок, чтобы убедиться, что вызывающий поток освобождает блокировку критической секции при возникновении исключения.</target>       </trans-unit>
        <trans-unit id="383" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Monitor.TryEnter(System.Object,System.Int32,System.Boolean@)">
          <source>The following code shows the basic pattern for using the <ph id="ph1">&lt;xref:System.Threading.Monitor.TryEnter%28System.Object%2CSystem.Boolean%40%29&gt;</ph> method overload.</source>
          <target state="translated">Ниже показан базовый шаблон для использования <ph id="ph1">&lt;xref:System.Threading.Monitor.TryEnter%28System.Object%2CSystem.Boolean%40%29&gt;</ph> перегрузки метода.</target>       </trans-unit>
        <trans-unit id="384" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Monitor.TryEnter(System.Object,System.Int32,System.Boolean@)">
          <source>This overload always sets the value of the variable that is passed to the <ph id="ph1">`ref`</ph> parameter (<ph id="ph2">`ByRef`</ph> in Visual Basic) <ph id="ph3">`lockTaken`</ph>, even if the method throws an exception, so the value of the variable is a reliable way to test whether the lock has to be released.</source>
          <target state="translated">Эта перегрузка всегда устанавливает значение, передаваемое переменной <ph id="ph1">`ref`</ph> параметра (<ph id="ph2">`ByRef`</ph> в Visual Basic) <ph id="ph3">`lockTaken`</ph>, даже если метод вызывает исключение, поэтому значение переменной является надежным способом для проверки блокировки должен быть выпущен.</target>       </trans-unit>
        <trans-unit id="385" translate="yes" xml:space="preserve" uid="M:System.Threading.Monitor.TryEnter(System.Object,System.Int32,System.Boolean@)">
          <source>The input to <ph id="ph1">&lt;paramref name="lockTaken" /&gt;</ph> is <ph id="ph2">&lt;see langword="true" /&gt;</ph>.</source>
          <target state="translated">Входные данные для <ph id="ph1">&lt;paramref name="lockTaken" /&gt;</ph> — <ph id="ph2">&lt;see langword="true" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="386" translate="yes" xml:space="preserve" uid="M:System.Threading.Monitor.TryEnter(System.Object,System.Int32,System.Boolean@)">
          <source>The <ph id="ph1">&lt;paramref name="obj" /&gt;</ph> parameter is <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated">Параметр <ph id="ph1">&lt;paramref name="obj" /&gt;</ph> имеет значение <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="387" translate="yes" xml:space="preserve" uid="M:System.Threading.Monitor.TryEnter(System.Object,System.Int32,System.Boolean@)">
          <source><ph id="ph1">&lt;paramref name="millisecondsTimeout" /&gt;</ph> is negative, and not equal to <ph id="ph2">&lt;see cref="F:System.Threading.Timeout.Infinite" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="millisecondsTimeout" /&gt;</ph> является отрицательным числом и не равно <ph id="ph2">&lt;see cref="F:System.Threading.Timeout.Infinite" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="388" translate="yes" xml:space="preserve" uid="M:System.Threading.Monitor.TryEnter(System.Object,System.TimeSpan,System.Boolean@)">
          <source>The object on which to acquire the lock.</source>
          <target state="translated">Объект, блокировка которого получается.</target>       </trans-unit>
        <trans-unit id="389" translate="yes" xml:space="preserve" uid="M:System.Threading.Monitor.TryEnter(System.Object,System.TimeSpan,System.Boolean@)">
          <source>The amount of time to wait for the lock.</source>
          <target state="translated">Период времени, в течение которого ожидается блокировка.</target>       </trans-unit>
        <trans-unit id="390" translate="yes" xml:space="preserve" uid="M:System.Threading.Monitor.TryEnter(System.Object,System.TimeSpan,System.Boolean@)">
          <source>A value of –1 millisecond specifies an infinite wait.</source>
          <target state="translated">Значение –1 миллисекунды обозначает бесконечное ожидание.</target>       </trans-unit>
        <trans-unit id="391" translate="yes" xml:space="preserve" uid="M:System.Threading.Monitor.TryEnter(System.Object,System.TimeSpan,System.Boolean@)">
          <source>The result of the attempt to acquire the lock, passed by reference.</source>
          <target state="translated">Результат попытки получить блокировку, переданную по ссылке.</target>       </trans-unit>
        <trans-unit id="392" translate="yes" xml:space="preserve" uid="M:System.Threading.Monitor.TryEnter(System.Object,System.TimeSpan,System.Boolean@)">
          <source>The input must be <ph id="ph1">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated">Входное значение должно равняться <ph id="ph1">&lt;see langword="false" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="393" translate="yes" xml:space="preserve" uid="M:System.Threading.Monitor.TryEnter(System.Object,System.TimeSpan,System.Boolean@)">
          <source>The output is <ph id="ph1">&lt;see langword="true" /&gt;</ph> if the lock is acquired; otherwise, the output is <ph id="ph2">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated">Выходное значение <ph id="ph1">&lt;see langword="true" /&gt;</ph>, если блокировка получена; в противном случае — выходное значение <ph id="ph2">&lt;see langword="false" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="394" translate="yes" xml:space="preserve" uid="M:System.Threading.Monitor.TryEnter(System.Object,System.TimeSpan,System.Boolean@)">
          <source>The output is set even if an exception occurs during the attempt to acquire the lock.</source>
          <target state="translated">Выходное значение задается, даже если при попытке получить блокировку возникает исключение.</target>       </trans-unit>
        <trans-unit id="395" translate="yes" xml:space="preserve" uid="M:System.Threading.Monitor.TryEnter(System.Object,System.TimeSpan,System.Boolean@)">
          <source>Attempts, for the specified amount of time, to acquire an exclusive lock on the specified object, and atomically sets a value that indicates whether the lock was taken.</source>
          <target state="translated">В течение заданного периода времени пытается получить монопольную блокировку указанного объекта и единым блоком задает значение, указывающее, была ли выполнена блокировка.</target>       </trans-unit>
        <trans-unit id="396" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Monitor.TryEnter(System.Object,System.TimeSpan,System.Boolean@)">
          <source>If the value of the <ph id="ph1">`timeout`</ph> parameter converted to milliseconds equals –1, this method is equivalent to <ph id="ph2">&lt;xref:System.Threading.Monitor.Enter%28System.Object%29&gt;</ph>.</source>
          <target state="translated">Если значение <ph id="ph1">`timeout`</ph> параметр преобразованы в миллисекундах равно – 1, то этот метод эквивалентен методу <ph id="ph2">&lt;xref:System.Threading.Monitor.Enter%28System.Object%29&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="397" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Monitor.TryEnter(System.Object,System.TimeSpan,System.Boolean@)">
          <source>If the value of <ph id="ph1">`timeout`</ph> equals 0, this method is equivalent to <ph id="ph2">&lt;xref:System.Threading.Monitor.TryEnter%28System.Object%29&gt;</ph>.</source>
          <target state="translated">Если значение <ph id="ph1">`timeout`</ph> равно 0, то этот метод эквивалентен методу <ph id="ph2">&lt;xref:System.Threading.Monitor.TryEnter%28System.Object%29&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="398" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Monitor.TryEnter(System.Object,System.TimeSpan,System.Boolean@)">
          <source>If the lock was not taken because an exception was thrown, the variable specified for the <ph id="ph1">`lockTaken`</ph> parameter is <ph id="ph2">`false`</ph> after this method ends.</source>
          <target state="translated">Если блокировка не была сделана, поскольку возникло исключение, переменная, указанная для <ph id="ph1">`lockTaken`</ph> параметр <ph id="ph2">`false`</ph> после завершения этого метода.</target>       </trans-unit>
        <trans-unit id="399" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Monitor.TryEnter(System.Object,System.TimeSpan,System.Boolean@)">
          <source>This allows the program to determine, in all cases, whether it is necessary to release the lock.</source>
          <target state="translated">Это позволяет приложению определить, во всех случаях необходимость для снятия блокировки.</target>       </trans-unit>
        <trans-unit id="400" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Monitor.TryEnter(System.Object,System.TimeSpan,System.Boolean@)">
          <source>Use <ph id="ph1">&lt;xref:System.Threading.Monitor&gt;</ph> to lock objects (that is, reference types), not value types.</source>
          <target state="translated">Используйте <ph id="ph1">&lt;xref:System.Threading.Monitor&gt;</ph> блокирует объекты (то есть ссылочные типы), не типы значений.</target>       </trans-unit>
        <trans-unit id="401" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Monitor.TryEnter(System.Object,System.TimeSpan,System.Boolean@)">
          <source>For more information, see the <ph id="ph1">&lt;xref:System.Threading.Monitor&gt;</ph> class topic.</source>
          <target state="translated">Дополнительные сведения см. в разделе <ph id="ph1">&lt;xref:System.Threading.Monitor&gt;</ph> разделе, посвященном классу.</target>       </trans-unit>
        <trans-unit id="402" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Monitor.TryEnter(System.Object,System.TimeSpan,System.Boolean@)">
          <source>To ensure that the thread does not enter the critical section, you should examine the value of <ph id="ph1">`lockTaken`</ph> and  execute code in the critical section only if its value is <ph id="ph2">`true`</ph>.</source>
          <target state="translated">Чтобы убедиться, что поток не войдет в критическую секцию, необходимо проверить значение <ph id="ph1">`lockTaken`</ph> и выполнять код в критический раздел только в том случае, если его значение равно <ph id="ph2">`true`</ph>.</target>       </trans-unit>
        <trans-unit id="403" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Monitor.TryEnter(System.Object,System.TimeSpan,System.Boolean@)">
          <source>The following code fragment shows the pattern used to call this method.</source>
          <target state="translated">В следующем фрагменте кода показан шаблон, используемый для вызова этого метода.</target>       </trans-unit>
        <trans-unit id="404" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Monitor.TryEnter(System.Object,System.TimeSpan,System.Boolean@)">
          <source>Note that you should call <ph id="ph1">&lt;xref:System.Threading.Monitor.Exit%2A&gt;</ph> in a <ph id="ph2">`finally`</ph> block to ensure that the calling thread releases its lock on the critical section if an exception occurs.</source>
          <target state="translated">Обратите внимание, что необходимо вызвать <ph id="ph1">&lt;xref:System.Threading.Monitor.Exit%2A&gt;</ph> в <ph id="ph2">`finally`</ph> блок, чтобы убедиться, что вызывающий поток освобождает блокировку критической секции при возникновении исключения.</target>       </trans-unit>
        <trans-unit id="405" translate="yes" xml:space="preserve" uid="M:System.Threading.Monitor.TryEnter(System.Object,System.TimeSpan,System.Boolean@)">
          <source>The input to <ph id="ph1">&lt;paramref name="lockTaken" /&gt;</ph> is <ph id="ph2">&lt;see langword="true" /&gt;</ph>.</source>
          <target state="translated">Входные данные для <ph id="ph1">&lt;paramref name="lockTaken" /&gt;</ph> — <ph id="ph2">&lt;see langword="true" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="406" translate="yes" xml:space="preserve" uid="M:System.Threading.Monitor.TryEnter(System.Object,System.TimeSpan,System.Boolean@)">
          <source>The <ph id="ph1">&lt;paramref name="obj" /&gt;</ph> parameter is <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated">Параметр <ph id="ph1">&lt;paramref name="obj" /&gt;</ph> имеет значение <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="407" translate="yes" xml:space="preserve" uid="M:System.Threading.Monitor.TryEnter(System.Object,System.TimeSpan,System.Boolean@)">
          <source>The value of <ph id="ph1">&lt;paramref name="timeout" /&gt;</ph> in milliseconds is negative and is not equal to <ph id="ph2">&lt;see cref="F:System.Threading.Timeout.Infinite" /&gt;</ph> (–1 millisecond), or is greater than <ph id="ph3">&lt;see cref="F:System.Int32.MaxValue" /&gt;</ph>.</source>
          <target state="translated">Значение <ph id="ph1">&lt;paramref name="timeout" /&gt;</ph> (в миллисекундах) является отрицательным. Оно не равно <ph id="ph2">&lt;see cref="F:System.Threading.Timeout.Infinite" /&gt;</ph> (-1 миллисекунда) или больше <ph id="ph3">&lt;see cref="F:System.Int32.MaxValue" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="408" translate="yes" xml:space="preserve" uid="T:System.Threading.Monitor">
          <source>Releases the lock on an object and blocks the current thread until it reacquires the lock.</source>
          <target state="translated">Освобождает блокировку объекта и блокирует текущий поток до тех пор, пока тот не получит блокировку снова.</target>       </trans-unit>
        <trans-unit id="409" translate="yes" xml:space="preserve" uid="M:System.Threading.Monitor.Wait(System.Object)">
          <source>The object on which to wait.</source>
          <target state="translated">Объект, в котором следует ожидать.</target>       </trans-unit>
        <trans-unit id="410" translate="yes" xml:space="preserve" uid="M:System.Threading.Monitor.Wait(System.Object)">
          <source>Releases the lock on an object and blocks the current thread until it reacquires the lock.</source>
          <target state="translated">Освобождает блокировку объекта и блокирует текущий поток до тех пор, пока тот не получит блокировку снова.</target>       </trans-unit>
        <trans-unit id="411" translate="yes" xml:space="preserve" uid="M:System.Threading.Monitor.Wait(System.Object)">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph> if the call returned because the caller reacquired the lock for the specified object.</source>
          <target state="translated">Значение <ph id="ph1">&lt;see langword="true" /&gt;</ph>, если вызов осуществил возврат из-за того, что вызывающий поток заново получил блокировку заданного объекта.</target>       </trans-unit>
        <trans-unit id="412" translate="yes" xml:space="preserve" uid="M:System.Threading.Monitor.Wait(System.Object)">
          <source>This method does not return if the lock is not reacquired.</source>
          <target state="translated">Этот метод не осуществляет возврат, если блокировка вновь не получена.</target>       </trans-unit>
        <trans-unit id="413" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Monitor.Wait(System.Object)">
          <source>The thread that currently owns the lock on the specified object invokes this method in order to release the object so that another thread can access it.</source>
          <target state="translated">Поток, который в данный момент владеет блокировкой указанного объекта вызывает этот метод, чтобы освободить объект доступа к ней другим потоком.</target>       </trans-unit>
        <trans-unit id="414" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Monitor.Wait(System.Object)">
          <source>The caller is blocked while waiting to reacquire the lock.</source>
          <target state="translated">Вызывающий поток блокируется, ожидая получения блокировки.</target>       </trans-unit>
        <trans-unit id="415" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Monitor.Wait(System.Object)">
          <source>This method is called when the caller needs to wait for a state change that will occur as a result of another thread's operations.</source>
          <target state="translated">Этот метод вызывается, когда вызывающий объект должен ожидать изменения состояния, которая может произойти в результате операций другого потока.</target>       </trans-unit>
        <trans-unit id="416" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Monitor.Wait(System.Object)">
          <source>When a thread calls <ph id="ph1">`Wait`</ph>, it releases the lock on the object and enters the object's waiting queue.</source>
          <target state="translated">Если поток вызывает <ph id="ph1">`Wait`</ph>, он освобождает блокировку объекта и входит в очередь ожидания объекта.</target>       </trans-unit>
        <trans-unit id="417" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Monitor.Wait(System.Object)">
          <source>The next thread in the object's ready queue (if there is one) acquires the lock and has exclusive use of the object.</source>
          <target state="translated">Следующий поток в очереди готовности объекта (если есть) получает блокировку и эксклюзивное использование объекта.</target>       </trans-unit>
        <trans-unit id="418" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Monitor.Wait(System.Object)">
          <source>All threads that call <ph id="ph1">`Wait`</ph> remain in the waiting queue until they receive a signal from <ph id="ph2">&lt;xref:System.Threading.Monitor.Pulse%2A&gt;</ph> or <ph id="ph3">&lt;xref:System.Threading.Monitor.PulseAll%2A&gt;</ph>, sent by the owner of the lock.</source>
          <target state="translated">Все потоки, которые вызывают <ph id="ph1">`Wait`</ph> остаются в очереди ожидания до получения сигнала от <ph id="ph2">&lt;xref:System.Threading.Monitor.Pulse%2A&gt;</ph> или <ph id="ph3">&lt;xref:System.Threading.Monitor.PulseAll%2A&gt;</ph>, отправленные владельцем блокировки.</target>       </trans-unit>
        <trans-unit id="419" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Monitor.Wait(System.Object)">
          <source>If <ph id="ph1">`Pulse`</ph> is sent, only the thread at the head of the waiting queue is affected.</source>
          <target state="translated">Если <ph id="ph1">`Pulse`</ph> отправлен, затрагивается только поток в начало очереди ожидания.</target>       </trans-unit>
        <trans-unit id="420" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Monitor.Wait(System.Object)">
          <source>If <ph id="ph1">`PulseAll`</ph> is sent, all threads that are waiting for the object are affected.</source>
          <target state="translated">Если <ph id="ph1">`PulseAll`</ph> отправляется, затрагиваются все потоки, которые ожидают объекта.</target>       </trans-unit>
        <trans-unit id="421" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Monitor.Wait(System.Object)">
          <source>When the signal is received, one or more threads leave the waiting queue and enter the ready queue.</source>
          <target state="translated">При получении сигнала один или несколько потоков оставляют очередь ожидания и входят в очередь готовности.</target>       </trans-unit>
        <trans-unit id="422" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Monitor.Wait(System.Object)">
          <source>A thread in the ready queue is permitted to reacquire the lock.</source>
          <target state="translated">Поток в очереди готовности может повторно получить блокировку.</target>       </trans-unit>
        <trans-unit id="423" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Monitor.Wait(System.Object)">
          <source>This method returns when the calling thread reacquires the lock on the object.</source>
          <target state="translated">Этот метод возвращает, если вызывающий поток снова получает блокировку объекта.</target>       </trans-unit>
        <trans-unit id="424" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Monitor.Wait(System.Object)">
          <source>Note that this method blocks indefinitely if the holder of the lock does not call <ph id="ph1">`Pulse`</ph> or <ph id="ph2">`PulseAll`</ph>.</source>
          <target state="translated">Обратите внимание, что этот метод неограниченно блокируется, если владелец блокировки не вызывает <ph id="ph1">`Pulse`</ph> или <ph id="ph2">`PulseAll`</ph>.</target>       </trans-unit>
        <trans-unit id="425" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Monitor.Wait(System.Object)">
          <source>The caller executes <ph id="ph1">`Wait`</ph> once, regardless of the number of times <ph id="ph2">&lt;xref:System.Threading.Monitor.Enter%2A&gt;</ph> has been invoked for the specified object.</source>
          <target state="translated">Вызывающий поток выполняет <ph id="ph1">`Wait`</ph> один раз, независимо от того, сколько раз <ph id="ph2">&lt;xref:System.Threading.Monitor.Enter%2A&gt;</ph> был вызван для указанного объекта.</target>       </trans-unit>
        <trans-unit id="426" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Monitor.Wait(System.Object)">
          <source>Conceptually, the <ph id="ph1">`Wait`</ph> method stores the number of times the caller invoked <ph id="ph2">`Enter`</ph> on the object and invokes <ph id="ph3">`Exit`</ph> as many times as necessary to fully release the locked object.</source>
          <target state="translated">По существу <ph id="ph1">`Wait`</ph> метод хранит количество раз, вызывающий инструкцию <ph id="ph2">`Enter`</ph> в объекте и вызывает <ph id="ph3">`Exit`</ph> столько раз, сколько нужно, чтобы полностью освободить объект с блокировкой.</target>       </trans-unit>
        <trans-unit id="427" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Monitor.Wait(System.Object)">
          <source>The caller then blocks while waiting to reacquire the object.</source>
          <target state="translated">Затем код, вызывающий блокируется, ожидая получения объекта.</target>       </trans-unit>
        <trans-unit id="428" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Monitor.Wait(System.Object)">
          <source>When the caller reacquires the lock, the system calls <ph id="ph1">`Enter`</ph> as many times as necessary to restore the saved <ph id="ph2">`Enter`</ph> count for the caller.</source>
          <target state="translated">Если вызывающий поток заново получает блокировку, система вызывает <ph id="ph1">`Enter`</ph> столько раз, сколько необходимо для восстановления сохраненного <ph id="ph2">`Enter`</ph> числа.</target>       </trans-unit>
        <trans-unit id="429" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Monitor.Wait(System.Object)">
          <source>Calling <ph id="ph1">`Wait`</ph> releases the lock for the specified object only; if the caller is the owner of locks on other objects, these locks are not released.</source>
          <target state="translated">Вызов <ph id="ph1">`Wait`</ph> снимает блокировку указанного объекта; если вызывающий объект является владельцем блокировок других объектов, они не освобождаются.</target>       </trans-unit>
        <trans-unit id="430" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Monitor.Wait(System.Object)">
          <source>Note that a synchronized object holds several references, including a reference to the thread that currently holds the lock, a reference to the ready queue, which contains the threads that are ready to obtain the lock, and a reference to the waiting queue, which contains the threads that are waiting for notification of a change in the object's state.</source>
          <target state="translated">Обратите внимание, что синхронизированный объект имеет несколько ссылок, в том числе ссылку на поток, который в настоящее время удерживает блокировку, ссылку на очередь готовности, которая содержит потоки, готовые к получению блокировки, и ссылку на очередь ожидания, который содержит потоки, которые ожидают уведомления об изменении состояния объекта.</target>       </trans-unit>
        <trans-unit id="431" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Monitor.Wait(System.Object)">
          <source>The <ph id="ph1">&lt;xref:System.Threading.Monitor.Pulse%2A&gt;</ph>, <ph id="ph2">&lt;xref:System.Threading.Monitor.PulseAll%2A&gt;</ph>, and <ph id="ph3">`Wait`</ph> methods must be invoked from within a synchronized block of code.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Threading.Monitor.Pulse%2A&gt;</ph>, <ph id="ph2">&lt;xref:System.Threading.Monitor.PulseAll%2A&gt;</ph>, И <ph id="ph3">`Wait`</ph> методы должны быть вызваны из синхронизированного блока кода.</target>       </trans-unit>
        <trans-unit id="432" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Monitor.Wait(System.Object)">
          <source>The remarks for the <ph id="ph1">&lt;xref:System.Threading.Monitor.Pulse%2A&gt;</ph> method explain what happens if <ph id="ph2">&lt;xref:System.Threading.Monitor.Pulse%2A&gt;</ph> is called when no threads are waiting.</source>
          <target state="translated">Примечания для <ph id="ph1">&lt;xref:System.Threading.Monitor.Pulse%2A&gt;</ph> метод объясняется, что происходит при <ph id="ph2">&lt;xref:System.Threading.Monitor.Pulse%2A&gt;</ph> вызывается при отсутствии ожидающих потоков.</target>       </trans-unit>
        <trans-unit id="433" translate="yes" xml:space="preserve" uid="M:System.Threading.Monitor.Wait(System.Object)">
          <source>The <ph id="ph1">&lt;paramref name="obj" /&gt;</ph> parameter is <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated">Параметр <ph id="ph1">&lt;paramref name="obj" /&gt;</ph> имеет значение <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="434" translate="yes" xml:space="preserve" uid="M:System.Threading.Monitor.Wait(System.Object)">
          <source>The calling thread does not own the lock for the specified object.</source>
          <target state="translated">Вызывающий поток не владеет блокировкой для указанного объекта.</target>       </trans-unit>
        <trans-unit id="435" translate="yes" xml:space="preserve" uid="M:System.Threading.Monitor.Wait(System.Object)">
          <source>The thread that invokes <ph id="ph1">&lt;see langword="Wait" /&gt;</ph> is later interrupted from the waiting state.</source>
          <target state="translated">Поток, который вызывает <ph id="ph1">&lt;see langword="Wait" /&gt;</ph>, позже прерывается из состояния ожидания.</target>       </trans-unit>
        <trans-unit id="436" translate="yes" xml:space="preserve" uid="M:System.Threading.Monitor.Wait(System.Object)">
          <source>This happens when another thread calls this thread's <ph id="ph1">&lt;see cref="M:System.Threading.Thread.Interrupt" /&gt;</ph> method.</source>
          <target state="translated">Это происходит, когда другой поток вызывает метод <ph id="ph1">&lt;see cref="M:System.Threading.Thread.Interrupt" /&gt;</ph> этого потока.</target>       </trans-unit>
        <trans-unit id="437" translate="yes" xml:space="preserve" uid="M:System.Threading.Monitor.Wait(System.Object,System.Int32)">
          <source>The object on which to wait.</source>
          <target state="translated">Объект, в котором следует ожидать.</target>       </trans-unit>
        <trans-unit id="438" translate="yes" xml:space="preserve" uid="M:System.Threading.Monitor.Wait(System.Object,System.Int32)">
          <source>The number of milliseconds to wait before the thread enters the ready queue.</source>
          <target state="translated">Количество миллисекунд для ожидания постановки в очередь готовности.</target>       </trans-unit>
        <trans-unit id="439" translate="yes" xml:space="preserve" uid="M:System.Threading.Monitor.Wait(System.Object,System.Int32)">
          <source>Releases the lock on an object and blocks the current thread until it reacquires the lock.</source>
          <target state="translated">Освобождает блокировку объекта и блокирует текущий поток до тех пор, пока тот не получит блокировку снова.</target>       </trans-unit>
        <trans-unit id="440" translate="yes" xml:space="preserve" uid="M:System.Threading.Monitor.Wait(System.Object,System.Int32)">
          <source>If the specified time-out interval elapses, the thread enters the ready queue.</source>
          <target state="translated">Если указанные временные интервалы истекают, поток встает в очередь готовности.</target>       </trans-unit>
        <trans-unit id="441" translate="yes" xml:space="preserve" uid="M:System.Threading.Monitor.Wait(System.Object,System.Int32)">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph> if the lock was reacquired before the specified time elapsed; <ph id="ph2">&lt;see langword="false" /&gt;</ph> if the lock was reacquired after the specified time elapsed.</source>
          <target state="translated">Значение <ph id="ph1">&lt;see langword="true" /&gt;</ph>, если блокировка была получена заново до истечения заданного времени; значение <ph id="ph2">&lt;see langword="false" /&gt;</ph>, если блокировка была получена заново по истечении заданного времени.</target>       </trans-unit>
        <trans-unit id="442" translate="yes" xml:space="preserve" uid="M:System.Threading.Monitor.Wait(System.Object,System.Int32)">
          <source>The method does not return until the lock is reacquired.</source>
          <target state="translated">Этот метод не осуществляет возврат, если блокировка не была получена.</target>       </trans-unit>
        <trans-unit id="443" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Monitor.Wait(System.Object,System.Int32)">
          <source>This method does not return until it reacquires an exclusive lock on the <ph id="ph1">`obj`</ph> parameter.</source>
          <target state="translated">Этот метод не возвращает до получения монопольной блокировки на <ph id="ph1">`obj`</ph> параметра.</target>       </trans-unit>
        <trans-unit id="444" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Monitor.Wait(System.Object,System.Int32)">
          <source>The thread that currently owns the lock on the specified object invokes this method in order to release the object so that another thread can access it.</source>
          <target state="translated">Поток, который в данный момент владеет блокировкой указанного объекта вызывает этот метод, чтобы освободить объект доступа к ней другим потоком.</target>       </trans-unit>
        <trans-unit id="445" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Monitor.Wait(System.Object,System.Int32)">
          <source>The caller is blocked while waiting to reacquire the lock.</source>
          <target state="translated">Вызывающий поток блокируется, ожидая получения блокировки.</target>       </trans-unit>
        <trans-unit id="446" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Monitor.Wait(System.Object,System.Int32)">
          <source>This method is called when the caller needs to wait for a state change that will occur as a result of another thread's operations.</source>
          <target state="translated">Этот метод вызывается, когда вызывающий объект должен ожидать изменения состояния, которая может произойти в результате операций другого потока.</target>       </trans-unit>
        <trans-unit id="447" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Monitor.Wait(System.Object,System.Int32)">
          <source>The time-out ensures that the current thread does not block indefinitely if another thread releases the lock without first calling the <ph id="ph1">&lt;xref:System.Threading.Monitor.Pulse%2A&gt;</ph> or <ph id="ph2">&lt;xref:System.Threading.Monitor.PulseAll%2A&gt;</ph> method.</source>
          <target state="translated">Время ожидания гарантирует, что текущий поток не блокируется неограниченно, если другой поток освобождает блокировку без предварительного вызова функции <ph id="ph1">&lt;xref:System.Threading.Monitor.Pulse%2A&gt;</ph> или <ph id="ph2">&lt;xref:System.Threading.Monitor.PulseAll%2A&gt;</ph> метод.</target>       </trans-unit>
        <trans-unit id="448" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Monitor.Wait(System.Object,System.Int32)">
          <source>It also moves the thread to the ready queue, bypassing other threads ahead of it in the wait queue, so that it can reacquire the lock sooner.</source>
          <target state="translated">Он также перемещает поток в очередь готовности, минуя другие потоки опережать в очереди ожидания, чтобы быстрее получения блокировки.</target>       </trans-unit>
        <trans-unit id="449" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Monitor.Wait(System.Object,System.Int32)">
          <source>The thread can test the return value of the <ph id="ph1">&lt;xref:System.Threading.Monitor.Wait%2A&gt;</ph> method to determine whether it reacquired the lock prior to the time-out. The thread can evaluate the conditions that caused it to enter the wait, and if necessary call the <ph id="ph2">&lt;xref:System.Threading.Monitor.Wait%2A&gt;</ph> method again.</source>
          <target state="translated">Поток можно проверить возвращаемое значение <ph id="ph1">&lt;xref:System.Threading.Monitor.Wait%2A&gt;</ph> метод, чтобы определить, является ли была получена блокировка до истечения времени ожидания. Поток может вычислять условия, которые привело к введите время ожидания и, если требуется вызов <ph id="ph2">&lt;xref:System.Threading.Monitor.Wait%2A&gt;</ph> метод снова.</target>       </trans-unit>
        <trans-unit id="450" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Monitor.Wait(System.Object,System.Int32)">
          <source>When a thread calls <ph id="ph1">`Wait`</ph>, it releases the lock on the object and enters the object's waiting queue.</source>
          <target state="translated">Если поток вызывает <ph id="ph1">`Wait`</ph>, он освобождает блокировку объекта и входит в очередь ожидания объекта.</target>       </trans-unit>
        <trans-unit id="451" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Monitor.Wait(System.Object,System.Int32)">
          <source>The next thread in the object's ready queue (if there is one) acquires the lock and has exclusive use of the object.</source>
          <target state="translated">Следующий поток в очереди готовности объекта (если есть) получает блокировку и эксклюзивное использование объекта.</target>       </trans-unit>
        <trans-unit id="452" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Monitor.Wait(System.Object,System.Int32)">
          <source>The thread that invoked <ph id="ph1">`Wait`</ph> remains in the waiting queue until either a thread that holds the lock invokes <ph id="ph2">&lt;xref:System.Threading.Monitor.PulseAll%2A&gt;</ph>, or it is the next in the queue and a thread that holds the lock invokes <ph id="ph3">&lt;xref:System.Threading.Monitor.Pulse%2A&gt;</ph>.</source>
          <target state="translated">Поток, вызвавший <ph id="ph1">`Wait`</ph> вызывающий поток, удерживающий блокировку остается в очереди ожидания, пока не будет <ph id="ph2">&lt;xref:System.Threading.Monitor.PulseAll%2A&gt;</ph>, или он является следующим в очереди, и поток, который владеет блокировкой вызывает <ph id="ph3">&lt;xref:System.Threading.Monitor.Pulse%2A&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="453" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Monitor.Wait(System.Object,System.Int32)">
          <source>However, if <ph id="ph1">`millisecondsTimeout`</ph> elapses before another thread invokes this object's <ph id="ph2">&lt;xref:System.Threading.Monitor.Pulse%2A&gt;</ph> or <ph id="ph3">&lt;xref:System.Threading.Monitor.PulseAll%2A&gt;</ph> method, the original thread is moved to the ready queue in order to regain the lock.</source>
          <target state="translated">Однако если <ph id="ph1">`millisecondsTimeout`</ph> истечет раньше, чем другой поток вызывает этот объект <ph id="ph2">&lt;xref:System.Threading.Monitor.Pulse%2A&gt;</ph> или <ph id="ph3">&lt;xref:System.Threading.Monitor.PulseAll%2A&gt;</ph> метод исходный поток перемещается в очередь готовности, чтобы снова получить блокировку.</target>       </trans-unit>
        <trans-unit id="454" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Monitor.Wait(System.Object,System.Int32)">
          <source>If <ph id="ph1">&lt;xref:System.Threading.Timeout.Infinite&gt;</ph> is specified for the <ph id="ph2">`millisecondsTimeout`</ph> parameter, this method blocks indefinitely unless the holder of the lock calls <ph id="ph3">&lt;xref:System.Threading.Monitor.Pulse%2A&gt;</ph> or <ph id="ph4">&lt;xref:System.Threading.Monitor.PulseAll%2A&gt;</ph>.</source>
          <target state="translated">Если <ph id="ph1">&lt;xref:System.Threading.Timeout.Infinite&gt;</ph> указан для <ph id="ph2">`millisecondsTimeout`</ph> параметра, этот метод неограниченно блокируется, если владелец блокировки вызывает <ph id="ph3">&lt;xref:System.Threading.Monitor.Pulse%2A&gt;</ph> или <ph id="ph4">&lt;xref:System.Threading.Monitor.PulseAll%2A&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="455" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Monitor.Wait(System.Object,System.Int32)">
          <source>If <ph id="ph1">`millisecondsTimeout`</ph> equals 0, the thread that calls <ph id="ph2">`Wait`</ph> releases the lock and then immediately enters the ready queue in order to regain the lock.</source>
          <target state="translated">Если <ph id="ph1">`millisecondsTimeout`</ph> равно 0, поток, который вызывает <ph id="ph2">`Wait`</ph> освобождает блокировку и немедленно входит в очередь готовности, чтобы снова получить блокировку.</target>       </trans-unit>
        <trans-unit id="456" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Monitor.Wait(System.Object,System.Int32)">
          <source>The caller executes <ph id="ph1">`Wait`</ph> once, regardless of the number of times <ph id="ph2">&lt;xref:System.Threading.Monitor.Enter%2A&gt;</ph> has been invoked for the specified object.</source>
          <target state="translated">Вызывающий поток выполняет <ph id="ph1">`Wait`</ph> один раз, независимо от того, сколько раз <ph id="ph2">&lt;xref:System.Threading.Monitor.Enter%2A&gt;</ph> был вызван для указанного объекта.</target>       </trans-unit>
        <trans-unit id="457" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Monitor.Wait(System.Object,System.Int32)">
          <source>Conceptually, the <ph id="ph1">`Wait`</ph> method stores the number of times the caller invoked <ph id="ph2">&lt;xref:System.Threading.Monitor.Enter%2A&gt;</ph> on the object and invokes <ph id="ph3">&lt;xref:System.Threading.Monitor.Exit%2A&gt;</ph> as many times as necessary to fully release the locked object.</source>
          <target state="translated">По существу <ph id="ph1">`Wait`</ph> метод хранит количество раз, вызывающий инструкцию <ph id="ph2">&lt;xref:System.Threading.Monitor.Enter%2A&gt;</ph> в объекте и вызывает <ph id="ph3">&lt;xref:System.Threading.Monitor.Exit%2A&gt;</ph> столько раз, сколько нужно, чтобы полностью освободить объект с блокировкой.</target>       </trans-unit>
        <trans-unit id="458" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Monitor.Wait(System.Object,System.Int32)">
          <source>The caller then blocks while waiting to reacquire the object.</source>
          <target state="translated">Затем код, вызывающий блокируется, ожидая получения объекта.</target>       </trans-unit>
        <trans-unit id="459" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Monitor.Wait(System.Object,System.Int32)">
          <source>When the caller reacquires the lock, the system calls <ph id="ph1">&lt;xref:System.Threading.Monitor.Enter%2A&gt;</ph> as many times as necessary to restore the saved <ph id="ph2">&lt;xref:System.Threading.Monitor.Enter%2A&gt;</ph> count for the caller.</source>
          <target state="translated">Если вызывающий поток заново получает блокировку, система вызывает <ph id="ph1">&lt;xref:System.Threading.Monitor.Enter%2A&gt;</ph> столько раз, сколько необходимо для восстановления сохраненного <ph id="ph2">&lt;xref:System.Threading.Monitor.Enter%2A&gt;</ph> числа.</target>       </trans-unit>
        <trans-unit id="460" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Monitor.Wait(System.Object,System.Int32)">
          <source>Calling <ph id="ph1">`Wait`</ph> releases the lock for the specified object only; if the caller is the owner of locks on other objects, these locks are not released.</source>
          <target state="translated">Вызов <ph id="ph1">`Wait`</ph> снимает блокировку указанного объекта; если вызывающий объект является владельцем блокировок других объектов, они не освобождаются.</target>       </trans-unit>
        <trans-unit id="461" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Monitor.Wait(System.Object,System.Int32)">
          <source>A synchronized object holds several references, including a reference to the thread that currently holds the lock, a reference to the ready queue, which contains the threads that are ready to obtain the lock, and a reference to the waiting queue, which contains the threads that are waiting for notification of a change in the object's state.</source>
          <target state="translated">Синхронизированный объект имеет несколько ссылок, в том числе ссылку на поток, который в настоящее время удерживает блокировку, ссылку на очередь готовности, которая содержит потоки, готовые к получению блокировки, и ссылку на очередь ожидания, в которой содержится потоки, которые ожидают уведомления об изменении состояния объекта.</target>       </trans-unit>
        <trans-unit id="462" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Monitor.Wait(System.Object,System.Int32)">
          <source>The <ph id="ph1">&lt;xref:System.Threading.Monitor.Pulse%2A&gt;</ph>, <ph id="ph2">&lt;xref:System.Threading.Monitor.PulseAll%2A&gt;</ph>, and <ph id="ph3">`Wait`</ph> methods must be invoked from within a synchronized block of code.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Threading.Monitor.Pulse%2A&gt;</ph>, <ph id="ph2">&lt;xref:System.Threading.Monitor.PulseAll%2A&gt;</ph>, И <ph id="ph3">`Wait`</ph> методы должны быть вызваны из синхронизированного блока кода.</target>       </trans-unit>
        <trans-unit id="463" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Monitor.Wait(System.Object,System.Int32)">
          <source>The remarks for the <ph id="ph1">&lt;xref:System.Threading.Monitor.Pulse%2A&gt;</ph> method explain what happens if <ph id="ph2">&lt;xref:System.Threading.Monitor.Pulse%2A&gt;</ph> is called when no threads are waiting.</source>
          <target state="translated">Примечания для <ph id="ph1">&lt;xref:System.Threading.Monitor.Pulse%2A&gt;</ph> метод объясняется, что происходит при <ph id="ph2">&lt;xref:System.Threading.Monitor.Pulse%2A&gt;</ph> вызывается при отсутствии ожидающих потоков.</target>       </trans-unit>
        <trans-unit id="464" translate="yes" xml:space="preserve" uid="M:System.Threading.Monitor.Wait(System.Object,System.Int32)">
          <source>The <ph id="ph1">&lt;paramref name="obj" /&gt;</ph> parameter is <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated">Параметр <ph id="ph1">&lt;paramref name="obj" /&gt;</ph> имеет значение <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="465" translate="yes" xml:space="preserve" uid="M:System.Threading.Monitor.Wait(System.Object,System.Int32)">
          <source>The calling thread does not own the lock for the specified object.</source>
          <target state="translated">Вызывающий поток не владеет блокировкой для указанного объекта.</target>       </trans-unit>
        <trans-unit id="466" translate="yes" xml:space="preserve" uid="M:System.Threading.Monitor.Wait(System.Object,System.Int32)">
          <source>The thread that invokes <ph id="ph1">&lt;see langword="Wait" /&gt;</ph> is later interrupted from the waiting state.</source>
          <target state="translated">Поток, который вызывает <ph id="ph1">&lt;see langword="Wait" /&gt;</ph>, позже прерывается из состояния ожидания.</target>       </trans-unit>
        <trans-unit id="467" translate="yes" xml:space="preserve" uid="M:System.Threading.Monitor.Wait(System.Object,System.Int32)">
          <source>This happens when another thread calls this thread's <ph id="ph1">&lt;see cref="M:System.Threading.Thread.Interrupt" /&gt;</ph> method.</source>
          <target state="translated">Это происходит, когда другой поток вызывает метод <ph id="ph1">&lt;see cref="M:System.Threading.Thread.Interrupt" /&gt;</ph> этого потока.</target>       </trans-unit>
        <trans-unit id="468" translate="yes" xml:space="preserve" uid="M:System.Threading.Monitor.Wait(System.Object,System.Int32)">
          <source>The value of the <ph id="ph1">&lt;paramref name="millisecondsTimeout" /&gt;</ph> parameter is negative, and is not equal to <ph id="ph2">&lt;see cref="F:System.Threading.Timeout.Infinite" /&gt;</ph>.</source>
          <target state="translated">Значение параметра <ph id="ph1">&lt;paramref name="millisecondsTimeout" /&gt;</ph> отрицательно и не равно <ph id="ph2">&lt;see cref="F:System.Threading.Timeout.Infinite" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="469" translate="yes" xml:space="preserve" uid="M:System.Threading.Monitor.Wait(System.Object,System.TimeSpan)">
          <source>The object on which to wait.</source>
          <target state="translated">Объект, в котором следует ожидать.</target>       </trans-unit>
        <trans-unit id="470" translate="yes" xml:space="preserve" uid="M:System.Threading.Monitor.Wait(System.Object,System.TimeSpan)">
          <source>A <ph id="ph1">&lt;see cref="T:System.TimeSpan" /&gt;</ph> representing the amount of time to wait before the thread enters the ready queue.</source>
          <target state="translated">Класс <ph id="ph1">&lt;see cref="T:System.TimeSpan" /&gt;</ph>, представляющий количество времени, до истечения которого поток поступает в очередь ожидания.</target>       </trans-unit>
        <trans-unit id="471" translate="yes" xml:space="preserve" uid="M:System.Threading.Monitor.Wait(System.Object,System.TimeSpan)">
          <source>Releases the lock on an object and blocks the current thread until it reacquires the lock.</source>
          <target state="translated">Освобождает блокировку объекта и блокирует текущий поток до тех пор, пока тот не получит блокировку снова.</target>       </trans-unit>
        <trans-unit id="472" translate="yes" xml:space="preserve" uid="M:System.Threading.Monitor.Wait(System.Object,System.TimeSpan)">
          <source>If the specified time-out interval elapses, the thread enters the ready queue.</source>
          <target state="translated">Если указанные временные интервалы истекают, поток встает в очередь готовности.</target>       </trans-unit>
        <trans-unit id="473" translate="yes" xml:space="preserve" uid="M:System.Threading.Monitor.Wait(System.Object,System.TimeSpan)">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph> if the lock was reacquired before the specified time elapsed; <ph id="ph2">&lt;see langword="false" /&gt;</ph> if the lock was reacquired after the specified time elapsed.</source>
          <target state="translated">Значение <ph id="ph1">&lt;see langword="true" /&gt;</ph>, если блокировка была получена заново до истечения заданного времени; значение <ph id="ph2">&lt;see langword="false" /&gt;</ph>, если блокировка была получена заново по истечении заданного времени.</target>       </trans-unit>
        <trans-unit id="474" translate="yes" xml:space="preserve" uid="M:System.Threading.Monitor.Wait(System.Object,System.TimeSpan)">
          <source>The method does not return until the lock is reacquired.</source>
          <target state="translated">Этот метод не осуществляет возврат, если блокировка не была получена.</target>       </trans-unit>
        <trans-unit id="475" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Monitor.Wait(System.Object,System.TimeSpan)">
          <source>This method does not return until it reacquires an exclusive lock on the <ph id="ph1">`obj`</ph> parameter.</source>
          <target state="translated">Этот метод не возвращает до получения монопольной блокировки на <ph id="ph1">`obj`</ph> параметра.</target>       </trans-unit>
        <trans-unit id="476" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Monitor.Wait(System.Object,System.TimeSpan)">
          <source>The thread that currently owns the lock on the specified object invokes this method in order to release the object so that another thread can access it.</source>
          <target state="translated">Поток, который в данный момент владеет блокировкой указанного объекта вызывает этот метод, чтобы освободить объект доступа к ней другим потоком.</target>       </trans-unit>
        <trans-unit id="477" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Monitor.Wait(System.Object,System.TimeSpan)">
          <source>The caller is blocked while waiting to reacquire the lock.</source>
          <target state="translated">Вызывающий поток блокируется, ожидая получения блокировки.</target>       </trans-unit>
        <trans-unit id="478" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Monitor.Wait(System.Object,System.TimeSpan)">
          <source>This method is called when the caller needs to wait for a state change that will occur as a result of another thread's operations.</source>
          <target state="translated">Этот метод вызывается, когда вызывающий объект должен ожидать изменения состояния, которая может произойти в результате операций другого потока.</target>       </trans-unit>
        <trans-unit id="479" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Monitor.Wait(System.Object,System.TimeSpan)">
          <source>The time-out ensures that the current thread does not block indefinitely if another thread releases the lock without first calling the <ph id="ph1">&lt;xref:System.Threading.Monitor.Pulse%2A&gt;</ph> or <ph id="ph2">&lt;xref:System.Threading.Monitor.PulseAll%2A&gt;</ph> method.</source>
          <target state="translated">Время ожидания гарантирует, что текущий поток не блокируется неограниченно, если другой поток освобождает блокировку без предварительного вызова функции <ph id="ph1">&lt;xref:System.Threading.Monitor.Pulse%2A&gt;</ph> или <ph id="ph2">&lt;xref:System.Threading.Monitor.PulseAll%2A&gt;</ph> метод.</target>       </trans-unit>
        <trans-unit id="480" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Monitor.Wait(System.Object,System.TimeSpan)">
          <source>It also moves the thread to the ready queue, bypassing other threads ahead of it in the wait queue, so that it can reacquire the lock sooner.</source>
          <target state="translated">Он также перемещает поток в очередь готовности, минуя другие потоки опережать в очереди ожидания, чтобы быстрее получения блокировки.</target>       </trans-unit>
        <trans-unit id="481" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Monitor.Wait(System.Object,System.TimeSpan)">
          <source>The thread can test the return value of the <ph id="ph1">&lt;xref:System.Threading.Monitor.Wait%2A&gt;</ph> method to determine whether it reacquired the lock prior to the time-out. The thread can evaluate the conditions that caused it to enter the wait, and if necessary call the <ph id="ph2">&lt;xref:System.Threading.Monitor.Wait%2A&gt;</ph> method again.</source>
          <target state="translated">Поток можно проверить возвращаемое значение <ph id="ph1">&lt;xref:System.Threading.Monitor.Wait%2A&gt;</ph> метод, чтобы определить, является ли была получена блокировка до истечения времени ожидания. Поток может вычислять условия, которые привело к введите время ожидания и, если требуется вызов <ph id="ph2">&lt;xref:System.Threading.Monitor.Wait%2A&gt;</ph> метод снова.</target>       </trans-unit>
        <trans-unit id="482" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Monitor.Wait(System.Object,System.TimeSpan)">
          <source>When a thread calls <ph id="ph1">`Wait`</ph>, it releases the lock on the object and enters the object's waiting queue.</source>
          <target state="translated">Если поток вызывает <ph id="ph1">`Wait`</ph>, он освобождает блокировку объекта и входит в очередь ожидания объекта.</target>       </trans-unit>
        <trans-unit id="483" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Monitor.Wait(System.Object,System.TimeSpan)">
          <source>The next thread in the object's ready queue (if there is one) acquires the lock and has exclusive use of the object.</source>
          <target state="translated">Следующий поток в очереди готовности объекта (если есть) получает блокировку и эксклюзивное использование объекта.</target>       </trans-unit>
        <trans-unit id="484" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Monitor.Wait(System.Object,System.TimeSpan)">
          <source>The thread that invoked <ph id="ph1">`Wait`</ph> remains in the waiting queue until either a thread that holds the lock invokes <ph id="ph2">&lt;xref:System.Threading.Monitor.PulseAll%2A&gt;</ph>, or it is the next in the queue and a thread that holds the lock invokes <ph id="ph3">&lt;xref:System.Threading.Monitor.Pulse%2A&gt;</ph>.</source>
          <target state="translated">Поток, вызвавший <ph id="ph1">`Wait`</ph> вызывающий поток, удерживающий блокировку остается в очереди ожидания, пока не будет <ph id="ph2">&lt;xref:System.Threading.Monitor.PulseAll%2A&gt;</ph>, или он является следующим в очереди, и поток, который владеет блокировкой вызывает <ph id="ph3">&lt;xref:System.Threading.Monitor.Pulse%2A&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="485" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Monitor.Wait(System.Object,System.TimeSpan)">
          <source>However, if <ph id="ph1">`timeout`</ph> elapses before another thread invokes this object's <ph id="ph2">&lt;xref:System.Threading.Monitor.Pulse%2A&gt;</ph> or <ph id="ph3">&lt;xref:System.Threading.Monitor.PulseAll%2A&gt;</ph> method, the original thread is moved to the ready queue in order to regain the lock.</source>
          <target state="translated">Однако если <ph id="ph1">`timeout`</ph> истечет раньше, чем другой поток вызывает этот объект <ph id="ph2">&lt;xref:System.Threading.Monitor.Pulse%2A&gt;</ph> или <ph id="ph3">&lt;xref:System.Threading.Monitor.PulseAll%2A&gt;</ph> метод исходный поток перемещается в очередь готовности, чтобы снова получить блокировку.</target>       </trans-unit>
        <trans-unit id="486" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Monitor.Wait(System.Object,System.TimeSpan)">
          <source>If a <ph id="ph1">&lt;xref:System.TimeSpan&gt;</ph> representing –1 millisecond is specified for the <ph id="ph2">`timeout`</ph> parameter, this method blocks indefinitely unless the holder of the lock calls <ph id="ph3">&lt;xref:System.Threading.Monitor.Pulse%2A&gt;</ph> or <ph id="ph4">&lt;xref:System.Threading.Monitor.PulseAll%2A&gt;</ph>.</source>
          <target state="translated">Если <ph id="ph1">&lt;xref:System.TimeSpan&gt;</ph> представляющий-1 обозначает указан для <ph id="ph2">`timeout`</ph> параметра, этот метод неограниченно блокируется, если владелец блокировки вызывает <ph id="ph3">&lt;xref:System.Threading.Monitor.Pulse%2A&gt;</ph> или <ph id="ph4">&lt;xref:System.Threading.Monitor.PulseAll%2A&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="487" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Monitor.Wait(System.Object,System.TimeSpan)">
          <source>If <ph id="ph1">`timeout`</ph> is 0 milliseconds, the thread that calls <ph id="ph2">`Wait`</ph> releases the lock and then immediately enters the ready queue in order to regain the lock.</source>
          <target state="translated">Если <ph id="ph1">`timeout`</ph> равно 0, поток, который вызывает <ph id="ph2">`Wait`</ph> освобождает блокировку и немедленно входит в очередь готовности, чтобы снова получить блокировку.</target>       </trans-unit>
        <trans-unit id="488" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Monitor.Wait(System.Object,System.TimeSpan)">
          <source>The caller executes <ph id="ph1">`Wait`</ph> once, regardless of the number of times <ph id="ph2">&lt;xref:System.Threading.Monitor.Enter%2A&gt;</ph> has been invoked for the specified object.</source>
          <target state="translated">Вызывающий поток выполняет <ph id="ph1">`Wait`</ph> один раз, независимо от того, сколько раз <ph id="ph2">&lt;xref:System.Threading.Monitor.Enter%2A&gt;</ph> был вызван для указанного объекта.</target>       </trans-unit>
        <trans-unit id="489" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Monitor.Wait(System.Object,System.TimeSpan)">
          <source>Conceptually, the <ph id="ph1">`Wait`</ph> method stores the number of times the caller invoked <ph id="ph2">&lt;xref:System.Threading.Monitor.Enter%2A&gt;</ph> on the object and invokes <ph id="ph3">&lt;xref:System.Threading.Monitor.Exit%2A&gt;</ph> as many times as necessary to fully release the locked object.</source>
          <target state="translated">По существу <ph id="ph1">`Wait`</ph> метод хранит количество раз, вызывающий инструкцию <ph id="ph2">&lt;xref:System.Threading.Monitor.Enter%2A&gt;</ph> в объекте и вызывает <ph id="ph3">&lt;xref:System.Threading.Monitor.Exit%2A&gt;</ph> столько раз, сколько нужно, чтобы полностью освободить объект с блокировкой.</target>       </trans-unit>
        <trans-unit id="490" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Monitor.Wait(System.Object,System.TimeSpan)">
          <source>The caller then blocks while waiting to reacquire the object.</source>
          <target state="translated">Затем код, вызывающий блокируется, ожидая получения объекта.</target>       </trans-unit>
        <trans-unit id="491" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Monitor.Wait(System.Object,System.TimeSpan)">
          <source>When the caller reacquires the lock, the system calls <ph id="ph1">&lt;xref:System.Threading.Monitor.Enter%2A&gt;</ph> as many times as necessary to restore the saved <ph id="ph2">&lt;xref:System.Threading.Monitor.Enter%2A&gt;</ph> count for the caller.</source>
          <target state="translated">Если вызывающий поток заново получает блокировку, система вызывает <ph id="ph1">&lt;xref:System.Threading.Monitor.Enter%2A&gt;</ph> столько раз, сколько необходимо для восстановления сохраненного <ph id="ph2">&lt;xref:System.Threading.Monitor.Enter%2A&gt;</ph> числа.</target>       </trans-unit>
        <trans-unit id="492" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Monitor.Wait(System.Object,System.TimeSpan)">
          <source>Calling <ph id="ph1">`Wait`</ph> releases the lock for the specified object only; if the caller is the owner of locks on other objects, these locks are not released.</source>
          <target state="translated">Вызов <ph id="ph1">`Wait`</ph> снимает блокировку указанного объекта; если вызывающий объект является владельцем блокировок других объектов, они не освобождаются.</target>       </trans-unit>
        <trans-unit id="493" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Monitor.Wait(System.Object,System.TimeSpan)">
          <source>A synchronized object holds several references, including a reference to the thread that currently holds the lock, a reference to the ready queue, which contains the threads that are ready to obtain the lock, and a reference to the waiting queue, which contains the threads that are waiting for notification of a change in the object's state.</source>
          <target state="translated">Синхронизированный объект имеет несколько ссылок, в том числе ссылку на поток, который в настоящее время удерживает блокировку, ссылку на очередь готовности, которая содержит потоки, готовые к получению блокировки, и ссылку на очередь ожидания, в которой содержится потоки, которые ожидают уведомления об изменении состояния объекта.</target>       </trans-unit>
        <trans-unit id="494" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Monitor.Wait(System.Object,System.TimeSpan)">
          <source>The <ph id="ph1">&lt;xref:System.Threading.Monitor.Pulse%2A&gt;</ph>, <ph id="ph2">&lt;xref:System.Threading.Monitor.PulseAll%2A&gt;</ph>, and <ph id="ph3">`Wait`</ph> methods must be invoked from within a synchronized block of code.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Threading.Monitor.Pulse%2A&gt;</ph>, <ph id="ph2">&lt;xref:System.Threading.Monitor.PulseAll%2A&gt;</ph>, И <ph id="ph3">`Wait`</ph> методы должны быть вызваны из синхронизированного блока кода.</target>       </trans-unit>
        <trans-unit id="495" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Monitor.Wait(System.Object,System.TimeSpan)">
          <source>The remarks for the <ph id="ph1">&lt;xref:System.Threading.Monitor.Pulse%2A&gt;</ph> method explain what happens if <ph id="ph2">&lt;xref:System.Threading.Monitor.Pulse%2A&gt;</ph> is called when no threads are waiting.</source>
          <target state="translated">Примечания для <ph id="ph1">&lt;xref:System.Threading.Monitor.Pulse%2A&gt;</ph> метод объясняется, что происходит при <ph id="ph2">&lt;xref:System.Threading.Monitor.Pulse%2A&gt;</ph> вызывается при отсутствии ожидающих потоков.</target>       </trans-unit>
        <trans-unit id="496" translate="yes" xml:space="preserve" uid="M:System.Threading.Monitor.Wait(System.Object,System.TimeSpan)">
          <source>The <ph id="ph1">&lt;paramref name="obj" /&gt;</ph> parameter is <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated">Параметр <ph id="ph1">&lt;paramref name="obj" /&gt;</ph> имеет значение <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="497" translate="yes" xml:space="preserve" uid="M:System.Threading.Monitor.Wait(System.Object,System.TimeSpan)">
          <source>The calling thread does not own the lock for the specified object.</source>
          <target state="translated">Вызывающий поток не владеет блокировкой для указанного объекта.</target>       </trans-unit>
        <trans-unit id="498" translate="yes" xml:space="preserve" uid="M:System.Threading.Monitor.Wait(System.Object,System.TimeSpan)">
          <source>The thread that invokes <ph id="ph1">&lt;see langword="Wait" /&gt;</ph> is later interrupted from the waiting state.</source>
          <target state="translated">Поток, который вызывает <ph id="ph1">&lt;see langword="Wait" /&gt;</ph>, позже прерывается из состояния ожидания.</target>       </trans-unit>
        <trans-unit id="499" translate="yes" xml:space="preserve" uid="M:System.Threading.Monitor.Wait(System.Object,System.TimeSpan)">
          <source>This happens when another thread calls this thread's <ph id="ph1">&lt;see cref="M:System.Threading.Thread.Interrupt" /&gt;</ph> method.</source>
          <target state="translated">Это происходит, когда другой поток вызывает метод <ph id="ph1">&lt;see cref="M:System.Threading.Thread.Interrupt" /&gt;</ph> этого потока.</target>       </trans-unit>
        <trans-unit id="500" translate="yes" xml:space="preserve" uid="M:System.Threading.Monitor.Wait(System.Object,System.TimeSpan)">
          <source>The value of the <ph id="ph1">&lt;paramref name="timeout" /&gt;</ph> parameter in milliseconds is negative and does not represent <ph id="ph2">&lt;see cref="F:System.Threading.Timeout.Infinite" /&gt;</ph> (–1 millisecond), or is greater than <ph id="ph3">&lt;see cref="F:System.Int32.MaxValue" /&gt;</ph>.</source>
          <target state="translated">Значение параметра <ph id="ph1">&lt;paramref name="timeout" /&gt;</ph> в миллисекундах отрицательно и не равно <ph id="ph2">&lt;see cref="F:System.Threading.Timeout.Infinite" /&gt;</ph> (–1 миллисекунда), или больше чем <ph id="ph3">&lt;see cref="F:System.Int32.MaxValue" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="501" translate="yes" xml:space="preserve" uid="M:System.Threading.Monitor.Wait(System.Object,System.Int32,System.Boolean)">
          <source>The object on which to wait.</source>
          <target state="translated">Объект, в котором следует ожидать.</target>       </trans-unit>
        <trans-unit id="502" translate="yes" xml:space="preserve" uid="M:System.Threading.Monitor.Wait(System.Object,System.Int32,System.Boolean)">
          <source>The number of milliseconds to wait before the thread enters the ready queue.</source>
          <target state="translated">Количество миллисекунд для ожидания постановки в очередь готовности.</target>       </trans-unit>
        <trans-unit id="503" translate="yes" xml:space="preserve" uid="M:System.Threading.Monitor.Wait(System.Object,System.Int32,System.Boolean)">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph> to exit and reacquire the synchronization domain for the context (if in a synchronized context) before the wait; otherwise, <ph id="ph2">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated">Значение <ph id="ph1">&lt;see langword="true" /&gt;</ph> для выхода из домена синхронизации в текущем контексте перед ожиданием (в синхронизированном контексте) с его последующим повторным получением; в противном случае — значение <ph id="ph2">&lt;see langword="false" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="504" translate="yes" xml:space="preserve" uid="M:System.Threading.Monitor.Wait(System.Object,System.Int32,System.Boolean)">
          <source>Releases the lock on an object and blocks the current thread until it reacquires the lock.</source>
          <target state="translated">Освобождает блокировку объекта и блокирует текущий поток до тех пор, пока тот не получит блокировку снова.</target>       </trans-unit>
        <trans-unit id="505" translate="yes" xml:space="preserve" uid="M:System.Threading.Monitor.Wait(System.Object,System.Int32,System.Boolean)">
          <source>If the specified time-out interval elapses, the thread enters the ready queue.</source>
          <target state="translated">Если указанные временные интервалы истекают, поток встает в очередь готовности.</target>       </trans-unit>
        <trans-unit id="506" translate="yes" xml:space="preserve" uid="M:System.Threading.Monitor.Wait(System.Object,System.Int32,System.Boolean)">
          <source>This method also specifies whether the synchronization domain for the context (if in a synchronized context) is exited before the wait and reacquired afterward.</source>
          <target state="translated">Этот метод также указывает на выход из области синхронизации для контекста (если она находится в синхронизированном контексте) до ожидания и ее повторное получение впоследствии.</target>       </trans-unit>
        <trans-unit id="507" translate="yes" xml:space="preserve" uid="M:System.Threading.Monitor.Wait(System.Object,System.Int32,System.Boolean)">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph> if the lock was reacquired before the specified time elapsed; <ph id="ph2">&lt;see langword="false" /&gt;</ph> if the lock was reacquired after the specified time elapsed.</source>
          <target state="translated">Значение <ph id="ph1">&lt;see langword="true" /&gt;</ph>, если блокировка была получена заново до истечения заданного времени; значение <ph id="ph2">&lt;see langword="false" /&gt;</ph>, если блокировка была получена заново по истечении заданного времени.</target>       </trans-unit>
        <trans-unit id="508" translate="yes" xml:space="preserve" uid="M:System.Threading.Monitor.Wait(System.Object,System.Int32,System.Boolean)">
          <source>The method does not return until the lock is reacquired.</source>
          <target state="translated">Этот метод не осуществляет возврат, если блокировка не была получена.</target>       </trans-unit>
        <trans-unit id="509" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Monitor.Wait(System.Object,System.Int32,System.Boolean)">
          <source>This method does not return until it reacquires an exclusive lock on the <ph id="ph1">`obj`</ph> parameter.</source>
          <target state="translated">Этот метод не возвращает до получения монопольной блокировки на <ph id="ph1">`obj`</ph> параметра.</target>       </trans-unit>
        <trans-unit id="510" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Monitor.Wait(System.Object,System.Int32,System.Boolean)">
          <source>The thread that currently owns the lock on the specified object invokes this method in order to release the object so that another thread can access it.</source>
          <target state="translated">Поток, который в данный момент владеет блокировкой указанного объекта вызывает этот метод, чтобы освободить объект доступа к ней другим потоком.</target>       </trans-unit>
        <trans-unit id="511" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Monitor.Wait(System.Object,System.Int32,System.Boolean)">
          <source>The caller is blocked while waiting to reacquire the lock.</source>
          <target state="translated">Вызывающий поток блокируется, ожидая получения блокировки.</target>       </trans-unit>
        <trans-unit id="512" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Monitor.Wait(System.Object,System.Int32,System.Boolean)">
          <source>This method is called when the caller needs to wait for a state change that will occur as a result of another thread's operations.</source>
          <target state="translated">Этот метод вызывается, когда вызывающий объект должен ожидать изменения состояния, которая может произойти в результате операций другого потока.</target>       </trans-unit>
        <trans-unit id="513" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Monitor.Wait(System.Object,System.Int32,System.Boolean)">
          <source>The time-out ensures that the current thread does not block indefinitely if another thread releases the lock without first calling the <ph id="ph1">&lt;xref:System.Threading.Monitor.Pulse%2A&gt;</ph> or <ph id="ph2">&lt;xref:System.Threading.Monitor.PulseAll%2A&gt;</ph> method.</source>
          <target state="translated">Время ожидания гарантирует, что текущий поток не блокируется неограниченно, если другой поток освобождает блокировку без предварительного вызова функции <ph id="ph1">&lt;xref:System.Threading.Monitor.Pulse%2A&gt;</ph> или <ph id="ph2">&lt;xref:System.Threading.Monitor.PulseAll%2A&gt;</ph> метод.</target>       </trans-unit>
        <trans-unit id="514" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Monitor.Wait(System.Object,System.Int32,System.Boolean)">
          <source>It also moves the thread to the ready queue, bypassing other threads ahead of it in the wait queue, so that it can reacquire the lock sooner.</source>
          <target state="translated">Он также перемещает поток в очередь готовности, минуя другие потоки опережать в очереди ожидания, чтобы быстрее получения блокировки.</target>       </trans-unit>
        <trans-unit id="515" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Monitor.Wait(System.Object,System.Int32,System.Boolean)">
          <source>The thread can test the return value of the <ph id="ph1">&lt;xref:System.Threading.Monitor.Wait%2A&gt;</ph> method to determine whether it reacquired the lock prior to the time-out. The thread can evaluate the conditions that caused it to enter the wait, and if necessary call the <ph id="ph2">&lt;xref:System.Threading.Monitor.Wait%2A&gt;</ph> method again.</source>
          <target state="translated">Поток можно проверить возвращаемое значение <ph id="ph1">&lt;xref:System.Threading.Monitor.Wait%2A&gt;</ph> метод, чтобы определить, является ли была получена блокировка до истечения времени ожидания. Поток может вычислять условия, которые привело к введите время ожидания и, если требуется вызов <ph id="ph2">&lt;xref:System.Threading.Monitor.Wait%2A&gt;</ph> метод снова.</target>       </trans-unit>
        <trans-unit id="516" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Monitor.Wait(System.Object,System.Int32,System.Boolean)">
          <source>When a thread calls <ph id="ph1">`Wait`</ph>, it releases the lock and enters the waiting queue.</source>
          <target state="translated">Если поток вызывает <ph id="ph1">`Wait`</ph>, он освобождает блокировку и входит в очередь ожидания.</target>       </trans-unit>
        <trans-unit id="517" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Monitor.Wait(System.Object,System.Int32,System.Boolean)">
          <source>At this point, the next thread in the ready queue (if there is one) is allowed to take control of the lock.</source>
          <target state="translated">На этом этапе следующему потоку в очереди готовности (если есть) может контролировать блокировки.</target>       </trans-unit>
        <trans-unit id="518" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Monitor.Wait(System.Object,System.Int32,System.Boolean)">
          <source>The thread that invoked <ph id="ph1">`Wait`</ph> remains in the waiting queue until either a thread that holds the lock invokes <ph id="ph2">&lt;xref:System.Threading.Monitor.PulseAll%2A&gt;</ph>, or it is the next in the queue and a thread that holds the lock invokes <ph id="ph3">&lt;xref:System.Threading.Monitor.Pulse%2A&gt;</ph>.</source>
          <target state="translated">Поток, вызвавший <ph id="ph1">`Wait`</ph> вызывающий поток, удерживающий блокировку остается в очереди ожидания, пока не будет <ph id="ph2">&lt;xref:System.Threading.Monitor.PulseAll%2A&gt;</ph>, или он является следующим в очереди, и поток, который владеет блокировкой вызывает <ph id="ph3">&lt;xref:System.Threading.Monitor.Pulse%2A&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="519" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Monitor.Wait(System.Object,System.Int32,System.Boolean)">
          <source>However, if <ph id="ph1">`millisecondsTimeout`</ph> elapses before another thread invokes this object's <ph id="ph2">&lt;xref:System.Threading.Monitor.Pulse%2A&gt;</ph> or <ph id="ph3">&lt;xref:System.Threading.Monitor.PulseAll%2A&gt;</ph> method, the original thread is moved to the ready queue in order to regain the lock.</source>
          <target state="translated">Однако если <ph id="ph1">`millisecondsTimeout`</ph> истечет раньше, чем другой поток вызывает этот объект <ph id="ph2">&lt;xref:System.Threading.Monitor.Pulse%2A&gt;</ph> или <ph id="ph3">&lt;xref:System.Threading.Monitor.PulseAll%2A&gt;</ph> метод исходный поток перемещается в очередь готовности, чтобы снова получить блокировку.</target>       </trans-unit>
        <trans-unit id="520" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Monitor.Wait(System.Object,System.Int32,System.Boolean)">
          <source>If <ph id="ph1">&lt;xref:System.Threading.Timeout.Infinite&gt;</ph> is specified for the <ph id="ph2">`millisecondsTimeout`</ph> parameter, this method blocks indefinitely unless the holder of the lock calls <ph id="ph3">&lt;xref:System.Threading.Monitor.Pulse%2A&gt;</ph> or <ph id="ph4">&lt;xref:System.Threading.Monitor.PulseAll%2A&gt;</ph>.</source>
          <target state="translated">Если <ph id="ph1">&lt;xref:System.Threading.Timeout.Infinite&gt;</ph> указан для <ph id="ph2">`millisecondsTimeout`</ph> параметра, этот метод неограниченно блокируется, если владелец блокировки вызывает <ph id="ph3">&lt;xref:System.Threading.Monitor.Pulse%2A&gt;</ph> или <ph id="ph4">&lt;xref:System.Threading.Monitor.PulseAll%2A&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="521" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Monitor.Wait(System.Object,System.Int32,System.Boolean)">
          <source>If <ph id="ph1">`millisecondsTimeout`</ph> equals 0, the thread that calls <ph id="ph2">`Wait`</ph> releases the lock and then immediately enters the ready queue in order to regain the lock.</source>
          <target state="translated">Если <ph id="ph1">`millisecondsTimeout`</ph> равно 0, поток, который вызывает <ph id="ph2">`Wait`</ph> освобождает блокировку и немедленно входит в очередь готовности, чтобы снова получить блокировку.</target>       </trans-unit>
        <trans-unit id="522" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Monitor.Wait(System.Object,System.Int32,System.Boolean)">
          <source>The caller executes <ph id="ph1">`Wait`</ph> once, regardless of the number of times <ph id="ph2">&lt;xref:System.Threading.Monitor.Enter%2A&gt;</ph> has been invoked for the specified object.</source>
          <target state="translated">Вызывающий поток выполняет <ph id="ph1">`Wait`</ph> один раз, независимо от того, сколько раз <ph id="ph2">&lt;xref:System.Threading.Monitor.Enter%2A&gt;</ph> был вызван для указанного объекта.</target>       </trans-unit>
        <trans-unit id="523" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Monitor.Wait(System.Object,System.Int32,System.Boolean)">
          <source>Conceptually, the <ph id="ph1">`Wait`</ph> method stores the number of times the caller invoked <ph id="ph2">&lt;xref:System.Threading.Monitor.Enter%2A&gt;</ph> on the object and invokes <ph id="ph3">&lt;xref:System.Threading.Monitor.Exit%2A&gt;</ph> as many times as necessary to fully release the locked object.</source>
          <target state="translated">По существу <ph id="ph1">`Wait`</ph> метод хранит количество раз, вызывающий инструкцию <ph id="ph2">&lt;xref:System.Threading.Monitor.Enter%2A&gt;</ph> в объекте и вызывает <ph id="ph3">&lt;xref:System.Threading.Monitor.Exit%2A&gt;</ph> столько раз, сколько нужно, чтобы полностью освободить объект с блокировкой.</target>       </trans-unit>
        <trans-unit id="524" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Monitor.Wait(System.Object,System.Int32,System.Boolean)">
          <source>The caller then blocks while waiting to reacquire the object.</source>
          <target state="translated">Затем код, вызывающий блокируется, ожидая получения объекта.</target>       </trans-unit>
        <trans-unit id="525" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Monitor.Wait(System.Object,System.Int32,System.Boolean)">
          <source>When the caller reacquires the lock, the system calls <ph id="ph1">&lt;xref:System.Threading.Monitor.Enter%2A&gt;</ph> as many times as necessary to restore the saved <ph id="ph2">&lt;xref:System.Threading.Monitor.Enter%2A&gt;</ph> count for the caller.</source>
          <target state="translated">Если вызывающий поток заново получает блокировку, система вызывает <ph id="ph1">&lt;xref:System.Threading.Monitor.Enter%2A&gt;</ph> столько раз, сколько необходимо для восстановления сохраненного <ph id="ph2">&lt;xref:System.Threading.Monitor.Enter%2A&gt;</ph> числа.</target>       </trans-unit>
        <trans-unit id="526" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Monitor.Wait(System.Object,System.Int32,System.Boolean)">
          <source>Calling <ph id="ph1">`Wait`</ph> releases the lock for the specified object only; if the caller is the owner of locks on other objects, these locks are not released.</source>
          <target state="translated">Вызов <ph id="ph1">`Wait`</ph> снимает блокировку указанного объекта; если вызывающий объект является владельцем блокировок других объектов, они не освобождаются.</target>       </trans-unit>
        <trans-unit id="527" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Monitor.Wait(System.Object,System.Int32,System.Boolean)">
          <source>A synchronized object holds several references, including a reference to the thread that currently holds the lock, a reference to the ready queue, which contains the threads that are ready to obtain the lock, and a reference to the waiting queue, which contains the threads that are waiting for notification of a change in the object's state.</source>
          <target state="translated">Синхронизированный объект имеет несколько ссылок, в том числе ссылку на поток, который в настоящее время удерживает блокировку, ссылку на очередь готовности, которая содержит потоки, готовые к получению блокировки, и ссылку на очередь ожидания, в которой содержится потоки, которые ожидают уведомления об изменении состояния объекта.</target>       </trans-unit>
        <trans-unit id="528" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Monitor.Wait(System.Object,System.Int32,System.Boolean)">
          <source>The <ph id="ph1">&lt;xref:System.Threading.Monitor.Pulse%2A&gt;</ph>, <ph id="ph2">&lt;xref:System.Threading.Monitor.PulseAll%2A&gt;</ph>, and <ph id="ph3">`Wait`</ph> methods must be invoked from within a synchronized block of code.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Threading.Monitor.Pulse%2A&gt;</ph>, <ph id="ph2">&lt;xref:System.Threading.Monitor.PulseAll%2A&gt;</ph>, И <ph id="ph3">`Wait`</ph> методы должны быть вызваны из синхронизированного блока кода.</target>       </trans-unit>
        <trans-unit id="529" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Monitor.Wait(System.Object,System.Int32,System.Boolean)">
          <source>The remarks for the <ph id="ph1">&lt;xref:System.Threading.Monitor.Pulse%2A&gt;</ph> method explain what happens if <ph id="ph2">&lt;xref:System.Threading.Monitor.Pulse%2A&gt;</ph> is called when no threads are waiting.</source>
          <target state="translated">Примечания для <ph id="ph1">&lt;xref:System.Threading.Monitor.Pulse%2A&gt;</ph> метод объясняется, что происходит при <ph id="ph2">&lt;xref:System.Threading.Monitor.Pulse%2A&gt;</ph> вызывается при отсутствии ожидающих потоков.</target>       </trans-unit>
        <trans-unit id="530" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Monitor.Wait(System.Object,System.Int32,System.Boolean)">
          <source>Notes on Exiting the Context</source>
          <target state="translated">Примечания о выходе из контекста</target>       </trans-unit>
        <trans-unit id="531" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Monitor.Wait(System.Object,System.Int32,System.Boolean)">
          <source>The<ph id="ph1">`exitContext`</ph> parameter has no effect unless the <ph id="ph2">&lt;xref:System.Threading.Monitor.Wait%2A&gt;</ph> method is called from inside a nondefault managed context.</source>
          <target state="translated"><ph id="ph1">`exitContext`</ph> Параметр действует только <ph id="ph2">&lt;xref:System.Threading.Monitor.Wait%2A&gt;</ph> метод вызывается из внутри управляемого контекста не по умолчанию.</target>       </trans-unit>
        <trans-unit id="532" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Monitor.Wait(System.Object,System.Int32,System.Boolean)">
          <source>This can happen if your thread is inside a call to an instance of a class derived from <ph id="ph1">&lt;xref:System.ContextBoundObject&gt;</ph>.</source>
          <target state="translated">Это может произойти, если ваш поток находится внутри вызова к экземпляру класса, производного от <ph id="ph1">&lt;xref:System.ContextBoundObject&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="533" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Monitor.Wait(System.Object,System.Int32,System.Boolean)">
          <source>Even if you are currently executing a method on a class that is not derived from <ph id="ph1">&lt;xref:System.ContextBoundObject&gt;</ph>, like <ph id="ph2">&lt;xref:System.String&gt;</ph>, you can be in a nondefault context if a <ph id="ph3">&lt;xref:System.ContextBoundObject&gt;</ph> is on your stack in the current application domain.</source>
          <target state="translated">Даже если в настоящее время выполняется метод в классе, который не является производным от <ph id="ph1">&lt;xref:System.ContextBoundObject&gt;</ph>, таких как <ph id="ph2">&lt;xref:System.String&gt;</ph>, может быть в контексте не по умолчанию если <ph id="ph3">&lt;xref:System.ContextBoundObject&gt;</ph> стеке в текущем домене приложения.</target>       </trans-unit>
        <trans-unit id="534" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Monitor.Wait(System.Object,System.Int32,System.Boolean)">
          <source>When your code is executing in a nondefault context, specifying <ph id="ph1">`true`</ph> for <ph id="ph2">`exitContext`</ph> causes the thread to exit the nondefault managed context (that is, to transition to the default context) before executing the <ph id="ph3">&lt;xref:System.Threading.Monitor.Wait%2A&gt;</ph> method.</source>
          <target state="translated">Если ваш код выполняется в контексте не по умолчанию, указав <ph id="ph1">`true`</ph> для <ph id="ph2">`exitContext`</ph> вызывающий поток выйти из управляемого контекста не по умолчанию (то есть переход в контекст по умолчанию) перед выполнением <ph id="ph3">&lt;xref:System.Threading.Monitor.Wait%2A&gt;</ph> метод.</target>       </trans-unit>
        <trans-unit id="535" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Monitor.Wait(System.Object,System.Int32,System.Boolean)">
          <source>It returns to the original nondefault context after the call to the <ph id="ph1">&lt;xref:System.Threading.Monitor.Wait%2A&gt;</ph> method completes.</source>
          <target state="translated">Возвращается к исходному контексту не по умолчанию после вызова <ph id="ph1">&lt;xref:System.Threading.Monitor.Wait%2A&gt;</ph> метод завершения.</target>       </trans-unit>
        <trans-unit id="536" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Monitor.Wait(System.Object,System.Int32,System.Boolean)">
          <source>This can be useful when the context-bound class has the <ph id="ph1">&lt;xref:System.Runtime.Remoting.Contexts.SynchronizationAttribute&gt;</ph> attribute applied.</source>
          <target state="translated">Это может быть полезно, если привязанные к контексту класс имеет <ph id="ph1">&lt;xref:System.Runtime.Remoting.Contexts.SynchronizationAttribute&gt;</ph> применен атрибут.</target>       </trans-unit>
        <trans-unit id="537" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Monitor.Wait(System.Object,System.Int32,System.Boolean)">
          <source>In that case, all calls to members of the class are automatically synchronized, and the synchronization domain is the entire body of code for the class.</source>
          <target state="translated">В этом случае все вызовы к членам класса автоматически синхронизируются, и области синхронизации находится в теле кода для класса.</target>       </trans-unit>
        <trans-unit id="538" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Monitor.Wait(System.Object,System.Int32,System.Boolean)">
          <source>If code in the call stack of a member calls the <ph id="ph1">&lt;xref:System.Threading.Monitor.Wait%2A&gt;</ph> method and specifies <ph id="ph2">`true`</ph> for <ph id="ph3">`exitContext`</ph>, the thread exits the synchronization domain, allowing a thread that is blocked on a call to any member of the object to proceed.</source>
          <target state="translated">Если код в стеке вызовов члена вызывает <ph id="ph1">&lt;xref:System.Threading.Monitor.Wait%2A&gt;</ph> метод и указывает <ph id="ph2">`true`</ph> для <ph id="ph3">`exitContext`</ph>, поток выходит из области синхронизации, что поток, который блокируется во время вызова любого члена объекта для продолжения.</target>       </trans-unit>
        <trans-unit id="539" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Monitor.Wait(System.Object,System.Int32,System.Boolean)">
          <source>When the <ph id="ph1">&lt;xref:System.Threading.Monitor.Wait%2A&gt;</ph> method returns, the thread that made the call must wait to reenter the synchronization domain.</source>
          <target state="translated">Когда <ph id="ph1">&lt;xref:System.Threading.Monitor.Wait%2A&gt;</ph> метод возвращает поток, в которой был сделан вызов необходимо подождать для повторного ввода области синхронизации.</target>       </trans-unit>
        <trans-unit id="540" translate="yes" xml:space="preserve" uid="M:System.Threading.Monitor.Wait(System.Object,System.Int32,System.Boolean)">
          <source>The <ph id="ph1">&lt;paramref name="obj" /&gt;</ph> parameter is <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated">Параметр <ph id="ph1">&lt;paramref name="obj" /&gt;</ph> имеет значение <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="541" translate="yes" xml:space="preserve" uid="M:System.Threading.Monitor.Wait(System.Object,System.Int32,System.Boolean)">
          <source><ph id="ph1">&lt;see langword="Wait" /&gt;</ph> is not invoked from within a synchronized block of code.</source>
          <target state="translated"><ph id="ph1">&lt;see langword="Wait" /&gt;</ph> — не вызывается из синхронизированного блока кода.</target>       </trans-unit>
        <trans-unit id="542" translate="yes" xml:space="preserve" uid="M:System.Threading.Monitor.Wait(System.Object,System.Int32,System.Boolean)">
          <source>The thread that invokes <ph id="ph1">&lt;see langword="Wait" /&gt;</ph> is later interrupted from the waiting state.</source>
          <target state="translated">Поток, который вызывает <ph id="ph1">&lt;see langword="Wait" /&gt;</ph>, позже прерывается из состояния ожидания.</target>       </trans-unit>
        <trans-unit id="543" translate="yes" xml:space="preserve" uid="M:System.Threading.Monitor.Wait(System.Object,System.Int32,System.Boolean)">
          <source>This happens when another thread calls this thread's <ph id="ph1">&lt;see cref="M:System.Threading.Thread.Interrupt" /&gt;</ph> method.</source>
          <target state="translated">Это происходит, когда другой поток вызывает метод <ph id="ph1">&lt;see cref="M:System.Threading.Thread.Interrupt" /&gt;</ph> этого потока.</target>       </trans-unit>
        <trans-unit id="544" translate="yes" xml:space="preserve" uid="M:System.Threading.Monitor.Wait(System.Object,System.Int32,System.Boolean)">
          <source>The value of the <ph id="ph1">&lt;paramref name="millisecondsTimeout" /&gt;</ph> parameter is negative, and is not equal to <ph id="ph2">&lt;see cref="F:System.Threading.Timeout.Infinite" /&gt;</ph>.</source>
          <target state="translated">Значение параметра <ph id="ph1">&lt;paramref name="millisecondsTimeout" /&gt;</ph> отрицательно и не равно <ph id="ph2">&lt;see cref="F:System.Threading.Timeout.Infinite" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="545" translate="yes" xml:space="preserve" uid="M:System.Threading.Monitor.Wait(System.Object,System.TimeSpan,System.Boolean)">
          <source>The object on which to wait.</source>
          <target state="translated">Объект, в котором следует ожидать.</target>       </trans-unit>
        <trans-unit id="546" translate="yes" xml:space="preserve" uid="M:System.Threading.Monitor.Wait(System.Object,System.TimeSpan,System.Boolean)">
          <source>A <ph id="ph1">&lt;see cref="T:System.TimeSpan" /&gt;</ph> representing the amount of time to wait before the thread enters the ready queue.</source>
          <target state="translated">Класс <ph id="ph1">&lt;see cref="T:System.TimeSpan" /&gt;</ph>, представляющий количество времени, до истечения которого поток поступает в очередь ожидания.</target>       </trans-unit>
        <trans-unit id="547" translate="yes" xml:space="preserve" uid="M:System.Threading.Monitor.Wait(System.Object,System.TimeSpan,System.Boolean)">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph> to exit and reacquire the synchronization domain for the context (if in a synchronized context) before the wait; otherwise, <ph id="ph2">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated">Значение <ph id="ph1">&lt;see langword="true" /&gt;</ph> для выхода из домена синхронизации в текущем контексте перед ожиданием (в синхронизированном контексте) с его последующим повторным получением; в противном случае — значение <ph id="ph2">&lt;see langword="false" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="548" translate="yes" xml:space="preserve" uid="M:System.Threading.Monitor.Wait(System.Object,System.TimeSpan,System.Boolean)">
          <source>Releases the lock on an object and blocks the current thread until it reacquires the lock.</source>
          <target state="translated">Освобождает блокировку объекта и блокирует текущий поток до тех пор, пока тот не получит блокировку снова.</target>       </trans-unit>
        <trans-unit id="549" translate="yes" xml:space="preserve" uid="M:System.Threading.Monitor.Wait(System.Object,System.TimeSpan,System.Boolean)">
          <source>If the specified time-out interval elapses, the thread enters the ready queue.</source>
          <target state="translated">Если указанные временные интервалы истекают, поток встает в очередь готовности.</target>       </trans-unit>
        <trans-unit id="550" translate="yes" xml:space="preserve" uid="M:System.Threading.Monitor.Wait(System.Object,System.TimeSpan,System.Boolean)">
          <source>Optionally exits the synchronization domain for the synchronized context before the wait and reacquires the domain afterward.</source>
          <target state="translated">Дополнительно выходит из синхронизированного домена для синхронизации контекста до ожидания и получает домен впоследствии.</target>       </trans-unit>
        <trans-unit id="551" translate="yes" xml:space="preserve" uid="M:System.Threading.Monitor.Wait(System.Object,System.TimeSpan,System.Boolean)">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph> if the lock was reacquired before the specified time elapsed; <ph id="ph2">&lt;see langword="false" /&gt;</ph> if the lock was reacquired after the specified time elapsed.</source>
          <target state="translated">Значение <ph id="ph1">&lt;see langword="true" /&gt;</ph>, если блокировка была получена заново до истечения заданного времени; значение <ph id="ph2">&lt;see langword="false" /&gt;</ph>, если блокировка была получена заново по истечении заданного времени.</target>       </trans-unit>
        <trans-unit id="552" translate="yes" xml:space="preserve" uid="M:System.Threading.Monitor.Wait(System.Object,System.TimeSpan,System.Boolean)">
          <source>The method does not return until the lock is reacquired.</source>
          <target state="translated">Этот метод не осуществляет возврат, если блокировка не была получена.</target>       </trans-unit>
        <trans-unit id="553" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Monitor.Wait(System.Object,System.TimeSpan,System.Boolean)">
          <source>This method does not return until it reacquires an exclusive lock on the <ph id="ph1">`obj`</ph> parameter.</source>
          <target state="translated">Этот метод не возвращает до получения монопольной блокировки на <ph id="ph1">`obj`</ph> параметра.</target>       </trans-unit>
        <trans-unit id="554" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Monitor.Wait(System.Object,System.TimeSpan,System.Boolean)">
          <source>The thread that currently owns the lock on the specified object invokes this method in order to release the object so that another thread can access it.</source>
          <target state="translated">Поток, который в данный момент владеет блокировкой указанного объекта вызывает этот метод, чтобы освободить объект доступа к ней другим потоком.</target>       </trans-unit>
        <trans-unit id="555" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Monitor.Wait(System.Object,System.TimeSpan,System.Boolean)">
          <source>The caller is blocked while waiting to reacquire the lock.</source>
          <target state="translated">Вызывающий поток блокируется, ожидая получения блокировки.</target>       </trans-unit>
        <trans-unit id="556" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Monitor.Wait(System.Object,System.TimeSpan,System.Boolean)">
          <source>This method is called when the caller needs to wait for a state change that will occur as a result of another thread's operations.</source>
          <target state="translated">Этот метод вызывается, когда вызывающий объект должен ожидать изменения состояния, которая может произойти в результате операций другого потока.</target>       </trans-unit>
        <trans-unit id="557" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Monitor.Wait(System.Object,System.TimeSpan,System.Boolean)">
          <source>The time-out ensures that the current thread does not block indefinitely if another thread releases the lock without first calling the <ph id="ph1">&lt;xref:System.Threading.Monitor.Pulse%2A&gt;</ph> or <ph id="ph2">&lt;xref:System.Threading.Monitor.PulseAll%2A&gt;</ph> method.</source>
          <target state="translated">Время ожидания гарантирует, что текущий поток не блокируется неограниченно, если другой поток освобождает блокировку без предварительного вызова функции <ph id="ph1">&lt;xref:System.Threading.Monitor.Pulse%2A&gt;</ph> или <ph id="ph2">&lt;xref:System.Threading.Monitor.PulseAll%2A&gt;</ph> метод.</target>       </trans-unit>
        <trans-unit id="558" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Monitor.Wait(System.Object,System.TimeSpan,System.Boolean)">
          <source>It also moves the thread to the ready queue, bypassing other threads ahead of it in the wait queue, so that it can reacquire the lock sooner.</source>
          <target state="translated">Он также перемещает поток в очередь готовности, минуя другие потоки опережать в очереди ожидания, чтобы быстрее получения блокировки.</target>       </trans-unit>
        <trans-unit id="559" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Monitor.Wait(System.Object,System.TimeSpan,System.Boolean)">
          <source>The thread can test the return value of the <ph id="ph1">&lt;xref:System.Threading.Monitor.Wait%2A&gt;</ph> method to determine whether it reacquired the lock prior to the time-out. The thread can evaluate the conditions that caused it to enter the wait, and if necessary call the <ph id="ph2">&lt;xref:System.Threading.Monitor.Wait%2A&gt;</ph> method again.</source>
          <target state="translated">Поток можно проверить возвращаемое значение <ph id="ph1">&lt;xref:System.Threading.Monitor.Wait%2A&gt;</ph> метод, чтобы определить, является ли была получена блокировка до истечения времени ожидания. Поток может вычислять условия, которые привело к введите время ожидания и, если требуется вызов <ph id="ph2">&lt;xref:System.Threading.Monitor.Wait%2A&gt;</ph> метод снова.</target>       </trans-unit>
        <trans-unit id="560" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Monitor.Wait(System.Object,System.TimeSpan,System.Boolean)">
          <source>When a thread calls <ph id="ph1">`Wait`</ph>, it releases the lock and enters the waiting queue.</source>
          <target state="translated">Если поток вызывает <ph id="ph1">`Wait`</ph>, он освобождает блокировку и входит в очередь ожидания.</target>       </trans-unit>
        <trans-unit id="561" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Monitor.Wait(System.Object,System.TimeSpan,System.Boolean)">
          <source>At this point, the next thread in the ready queue (if there is one) is allowed to take control of the lock.</source>
          <target state="translated">На этом этапе следующему потоку в очереди готовности (если есть) может контролировать блокировки.</target>       </trans-unit>
        <trans-unit id="562" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Monitor.Wait(System.Object,System.TimeSpan,System.Boolean)">
          <source>The thread that invoked <ph id="ph1">`Wait`</ph> remains in the waiting queue until either a thread that holds the lock invokes <ph id="ph2">&lt;xref:System.Threading.Monitor.PulseAll%2A&gt;</ph>, or it is the next in the queue and a thread that holds the lock invokes <ph id="ph3">&lt;xref:System.Threading.Monitor.Pulse%2A&gt;</ph>.</source>
          <target state="translated">Поток, вызвавший <ph id="ph1">`Wait`</ph> вызывающий поток, удерживающий блокировку остается в очереди ожидания, пока не будет <ph id="ph2">&lt;xref:System.Threading.Monitor.PulseAll%2A&gt;</ph>, или он является следующим в очереди, и поток, который владеет блокировкой вызывает <ph id="ph3">&lt;xref:System.Threading.Monitor.Pulse%2A&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="563" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Monitor.Wait(System.Object,System.TimeSpan,System.Boolean)">
          <source>However, if <ph id="ph1">`timeout`</ph> milliseconds elapse before another thread invokes this object's <ph id="ph2">&lt;xref:System.Threading.Monitor.Pulse%2A&gt;</ph> or <ph id="ph3">&lt;xref:System.Threading.Monitor.PulseAll%2A&gt;</ph> method, the original thread is moved to the ready queue in order to regain the lock.</source>
          <target state="translated">Однако если <ph id="ph1">`timeout`</ph> пройдет, прежде чем другой поток вызывает этот объект <ph id="ph2">&lt;xref:System.Threading.Monitor.Pulse%2A&gt;</ph> или <ph id="ph3">&lt;xref:System.Threading.Monitor.PulseAll%2A&gt;</ph> метод исходный поток перемещается в очередь готовности, чтобы снова получить блокировку.</target>       </trans-unit>
        <trans-unit id="564" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Monitor.Wait(System.Object,System.TimeSpan,System.Boolean)">
          <source>If a <ph id="ph1">&lt;xref:System.TimeSpan&gt;</ph> representing -1 millisecond is specified for the <ph id="ph2">`timeout`</ph> parameter, this method blocks indefinitely unless the holder of the lock calls <ph id="ph3">&lt;xref:System.Threading.Monitor.Pulse%2A&gt;</ph> or <ph id="ph4">&lt;xref:System.Threading.Monitor.PulseAll%2A&gt;</ph>.</source>
          <target state="translated">Если <ph id="ph1">&lt;xref:System.TimeSpan&gt;</ph> представляющий-1 миллисекунды указан для <ph id="ph2">`timeout`</ph> параметра, этот метод неограниченно блокируется, если владелец блокировки вызывает <ph id="ph3">&lt;xref:System.Threading.Monitor.Pulse%2A&gt;</ph> или <ph id="ph4">&lt;xref:System.Threading.Monitor.PulseAll%2A&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="565" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Monitor.Wait(System.Object,System.TimeSpan,System.Boolean)">
          <source>If <ph id="ph1">`timeout`</ph> is 0 milliseconds, the thread that calls <ph id="ph2">`Wait`</ph> releases the lock and then immediately enters the ready queue in order to regain the lock.</source>
          <target state="translated">Если <ph id="ph1">`timeout`</ph> равно 0, поток, который вызывает <ph id="ph2">`Wait`</ph> освобождает блокировку и немедленно входит в очередь готовности, чтобы снова получить блокировку.</target>       </trans-unit>
        <trans-unit id="566" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Monitor.Wait(System.Object,System.TimeSpan,System.Boolean)">
          <source>The caller executes <ph id="ph1">`Wait`</ph> once, regardless of the number of times <ph id="ph2">&lt;xref:System.Threading.Monitor.Enter%2A&gt;</ph> has been invoked for the specified object.</source>
          <target state="translated">Вызывающий поток выполняет <ph id="ph1">`Wait`</ph> один раз, независимо от того, сколько раз <ph id="ph2">&lt;xref:System.Threading.Monitor.Enter%2A&gt;</ph> был вызван для указанного объекта.</target>       </trans-unit>
        <trans-unit id="567" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Monitor.Wait(System.Object,System.TimeSpan,System.Boolean)">
          <source>Conceptually, the <ph id="ph1">`Wait`</ph> method stores the number of times the caller invoked <ph id="ph2">&lt;xref:System.Threading.Monitor.Enter%2A&gt;</ph> on the object and invokes <ph id="ph3">&lt;xref:System.Threading.Monitor.Exit%2A&gt;</ph> as many times as necessary to fully release the locked object.</source>
          <target state="translated">По существу <ph id="ph1">`Wait`</ph> метод хранит количество раз, вызывающий инструкцию <ph id="ph2">&lt;xref:System.Threading.Monitor.Enter%2A&gt;</ph> в объекте и вызывает <ph id="ph3">&lt;xref:System.Threading.Monitor.Exit%2A&gt;</ph> столько раз, сколько нужно, чтобы полностью освободить объект с блокировкой.</target>       </trans-unit>
        <trans-unit id="568" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Monitor.Wait(System.Object,System.TimeSpan,System.Boolean)">
          <source>The caller then blocks while waiting to reacquire the object.</source>
          <target state="translated">Затем код, вызывающий блокируется, ожидая получения объекта.</target>       </trans-unit>
        <trans-unit id="569" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Monitor.Wait(System.Object,System.TimeSpan,System.Boolean)">
          <source>When the caller reacquires the lock, the system calls <ph id="ph1">&lt;xref:System.Threading.Monitor.Enter%2A&gt;</ph> as many times as necessary to restore the saved <ph id="ph2">&lt;xref:System.Threading.Monitor.Enter%2A&gt;</ph> count for the caller.</source>
          <target state="translated">Если вызывающий поток заново получает блокировку, система вызывает <ph id="ph1">&lt;xref:System.Threading.Monitor.Enter%2A&gt;</ph> столько раз, сколько необходимо для восстановления сохраненного <ph id="ph2">&lt;xref:System.Threading.Monitor.Enter%2A&gt;</ph> числа.</target>       </trans-unit>
        <trans-unit id="570" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Monitor.Wait(System.Object,System.TimeSpan,System.Boolean)">
          <source>Calling <ph id="ph1">`Wait`</ph> releases the lock for the specified object only; if the caller is the owner of locks on other objects, these locks are not released.</source>
          <target state="translated">Вызов <ph id="ph1">`Wait`</ph> снимает блокировку указанного объекта; если вызывающий объект является владельцем блокировок других объектов, они не освобождаются.</target>       </trans-unit>
        <trans-unit id="571" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Monitor.Wait(System.Object,System.TimeSpan,System.Boolean)">
          <source>A synchronized object holds several references, including a reference to the thread that currently holds the lock, a reference to the ready queue, which contains the threads that are ready to obtain the lock, and a reference to the waiting queue, which contains the threads that are waiting for notification of a change in the object's state.</source>
          <target state="translated">Синхронизированный объект имеет несколько ссылок, в том числе ссылку на поток, который в настоящее время удерживает блокировку, ссылку на очередь готовности, которая содержит потоки, готовые к получению блокировки, и ссылку на очередь ожидания, в которой содержится потоки, которые ожидают уведомления об изменении состояния объекта.</target>       </trans-unit>
        <trans-unit id="572" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Monitor.Wait(System.Object,System.TimeSpan,System.Boolean)">
          <source>The <ph id="ph1">&lt;xref:System.Threading.Monitor.Pulse%2A&gt;</ph>, <ph id="ph2">&lt;xref:System.Threading.Monitor.PulseAll%2A&gt;</ph>, and <ph id="ph3">`Wait`</ph> methods must be invoked from within a synchronized block of code.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Threading.Monitor.Pulse%2A&gt;</ph>, <ph id="ph2">&lt;xref:System.Threading.Monitor.PulseAll%2A&gt;</ph>, И <ph id="ph3">`Wait`</ph> методы должны быть вызваны из синхронизированного блока кода.</target>       </trans-unit>
        <trans-unit id="573" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Monitor.Wait(System.Object,System.TimeSpan,System.Boolean)">
          <source>The remarks for the <ph id="ph1">&lt;xref:System.Threading.Monitor.Pulse%2A&gt;</ph> method explain what happens if <ph id="ph2">&lt;xref:System.Threading.Monitor.Pulse%2A&gt;</ph> is called when no threads are waiting.</source>
          <target state="translated">Примечания для <ph id="ph1">&lt;xref:System.Threading.Monitor.Pulse%2A&gt;</ph> метод объясняется, что происходит при <ph id="ph2">&lt;xref:System.Threading.Monitor.Pulse%2A&gt;</ph> вызывается при отсутствии ожидающих потоков.</target>       </trans-unit>
        <trans-unit id="574" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Monitor.Wait(System.Object,System.TimeSpan,System.Boolean)">
          <source>Notes on Exiting the Context</source>
          <target state="translated">Примечания о выходе из контекста</target>       </trans-unit>
        <trans-unit id="575" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Monitor.Wait(System.Object,System.TimeSpan,System.Boolean)">
          <source>The<ph id="ph1">`exitContext`</ph> parameter has no effect unless the <ph id="ph2">&lt;xref:System.Threading.Monitor.Wait%2A&gt;</ph> method is called from inside a nondefault managed context.</source>
          <target state="translated"><ph id="ph1">`exitContext`</ph> Параметр действует только <ph id="ph2">&lt;xref:System.Threading.Monitor.Wait%2A&gt;</ph> метод вызывается из внутри управляемого контекста не по умолчанию.</target>       </trans-unit>
        <trans-unit id="576" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Monitor.Wait(System.Object,System.TimeSpan,System.Boolean)">
          <source>This can happen if your thread is inside a call to an instance of a class derived from <ph id="ph1">&lt;xref:System.ContextBoundObject&gt;</ph>.</source>
          <target state="translated">Это может произойти, если ваш поток находится внутри вызова к экземпляру класса, производного от <ph id="ph1">&lt;xref:System.ContextBoundObject&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="577" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Monitor.Wait(System.Object,System.TimeSpan,System.Boolean)">
          <source>Even if you are currently executing a method on a class that is not derived from <ph id="ph1">&lt;xref:System.ContextBoundObject&gt;</ph>, like <ph id="ph2">&lt;xref:System.String&gt;</ph>, you can be in a nondefault context if a <ph id="ph3">&lt;xref:System.ContextBoundObject&gt;</ph> is on your stack in the current application domain.</source>
          <target state="translated">Даже если в настоящее время выполняется метод в классе, который не является производным от <ph id="ph1">&lt;xref:System.ContextBoundObject&gt;</ph>, таких как <ph id="ph2">&lt;xref:System.String&gt;</ph>, может быть в контексте не по умолчанию если <ph id="ph3">&lt;xref:System.ContextBoundObject&gt;</ph> стеке в текущем домене приложения.</target>       </trans-unit>
        <trans-unit id="578" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Monitor.Wait(System.Object,System.TimeSpan,System.Boolean)">
          <source>When your code is executing in a nondefault context, specifying <ph id="ph1">`true`</ph> for <ph id="ph2">`exitContext`</ph> causes the thread to exit the nondefault managed context (that is, to transition to the default context) before executing the <ph id="ph3">&lt;xref:System.Threading.Monitor.Wait%2A&gt;</ph> method.</source>
          <target state="translated">Если ваш код выполняется в контексте не по умолчанию, указав <ph id="ph1">`true`</ph> для <ph id="ph2">`exitContext`</ph> вызывающий поток выйти из управляемого контекста не по умолчанию (то есть переход в контекст по умолчанию) перед выполнением <ph id="ph3">&lt;xref:System.Threading.Monitor.Wait%2A&gt;</ph> метод.</target>       </trans-unit>
        <trans-unit id="579" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Monitor.Wait(System.Object,System.TimeSpan,System.Boolean)">
          <source>It returns to the original nondefault context after the call to the <ph id="ph1">&lt;xref:System.Threading.Monitor.Wait%2A&gt;</ph> method completes.</source>
          <target state="translated">Возвращается к исходному контексту не по умолчанию после вызова <ph id="ph1">&lt;xref:System.Threading.Monitor.Wait%2A&gt;</ph> метод завершения.</target>       </trans-unit>
        <trans-unit id="580" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Monitor.Wait(System.Object,System.TimeSpan,System.Boolean)">
          <source>This can be useful when the context-bound class has the <ph id="ph1">&lt;xref:System.Runtime.Remoting.Contexts.SynchronizationAttribute&gt;</ph> attribute applied.</source>
          <target state="translated">Это может быть полезно, если привязанные к контексту класс имеет <ph id="ph1">&lt;xref:System.Runtime.Remoting.Contexts.SynchronizationAttribute&gt;</ph> применен атрибут.</target>       </trans-unit>
        <trans-unit id="581" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Monitor.Wait(System.Object,System.TimeSpan,System.Boolean)">
          <source>In that case, all calls to members of the class are automatically synchronized, and the synchronization domain is the entire body of code for the class.</source>
          <target state="translated">В этом случае все вызовы к членам класса автоматически синхронизируются, и области синхронизации находится в теле кода для класса.</target>       </trans-unit>
        <trans-unit id="582" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Monitor.Wait(System.Object,System.TimeSpan,System.Boolean)">
          <source>If code in the call stack of a member calls the <ph id="ph1">&lt;xref:System.Threading.Monitor.Wait%2A&gt;</ph> method and specifies <ph id="ph2">`true`</ph> for <ph id="ph3">`exitContext`</ph>, the thread exits the synchronization domain, allowing a thread that is blocked on a call to any member of the object to proceed.</source>
          <target state="translated">Если код в стеке вызовов члена вызывает <ph id="ph1">&lt;xref:System.Threading.Monitor.Wait%2A&gt;</ph> метод и указывает <ph id="ph2">`true`</ph> для <ph id="ph3">`exitContext`</ph>, поток выходит из области синхронизации, что поток, который блокируется во время вызова любого члена объекта для продолжения.</target>       </trans-unit>
        <trans-unit id="583" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Monitor.Wait(System.Object,System.TimeSpan,System.Boolean)">
          <source>When the <ph id="ph1">&lt;xref:System.Threading.Monitor.Wait%2A&gt;</ph> method returns, the thread that made the call must wait to reenter the synchronization domain.</source>
          <target state="translated">Когда <ph id="ph1">&lt;xref:System.Threading.Monitor.Wait%2A&gt;</ph> метод возвращает поток, в которой был сделан вызов необходимо подождать для повторного ввода области синхронизации.</target>       </trans-unit>
        <trans-unit id="584" translate="yes" xml:space="preserve" uid="M:System.Threading.Monitor.Wait(System.Object,System.TimeSpan,System.Boolean)">
          <source>The <ph id="ph1">&lt;paramref name="obj" /&gt;</ph> parameter is <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated">Параметр <ph id="ph1">&lt;paramref name="obj" /&gt;</ph> имеет значение <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="585" translate="yes" xml:space="preserve" uid="M:System.Threading.Monitor.Wait(System.Object,System.TimeSpan,System.Boolean)">
          <source><ph id="ph1">&lt;see langword="Wait" /&gt;</ph> is not invoked from within a synchronized block of code.</source>
          <target state="translated"><ph id="ph1">&lt;see langword="Wait" /&gt;</ph> — не вызывается из синхронизированного блока кода.</target>       </trans-unit>
        <trans-unit id="586" translate="yes" xml:space="preserve" uid="M:System.Threading.Monitor.Wait(System.Object,System.TimeSpan,System.Boolean)">
          <source>The thread that invokes Wait is later interrupted from the waiting state.</source>
          <target state="translated">Для потока, который вызывает Wait, состояние ожидания позже прерывается.</target>       </trans-unit>
        <trans-unit id="587" translate="yes" xml:space="preserve" uid="M:System.Threading.Monitor.Wait(System.Object,System.TimeSpan,System.Boolean)">
          <source>This happens when another thread calls this thread's <ph id="ph1">&lt;see cref="M:System.Threading.Thread.Interrupt" /&gt;</ph> method.</source>
          <target state="translated">Это происходит, когда другой поток вызывает метод <ph id="ph1">&lt;see cref="M:System.Threading.Thread.Interrupt" /&gt;</ph> этого потока.</target>       </trans-unit>
        <trans-unit id="588" translate="yes" xml:space="preserve" uid="M:System.Threading.Monitor.Wait(System.Object,System.TimeSpan,System.Boolean)">
          <source>The <ph id="ph1">&lt;paramref name="timeout" /&gt;</ph> parameter is negative and does not represent <ph id="ph2">&lt;see cref="F:System.Threading.Timeout.Infinite" /&gt;</ph> (–1 millisecond), or is greater than <ph id="ph3">&lt;see cref="F:System.Int32.MaxValue" /&gt;</ph>.</source>
          <target state="translated">Параметр <ph id="ph1">&lt;paramref name="timeout" /&gt;</ph> имеет отрицательное значение и не представляет <ph id="ph2">&lt;see cref="F:System.Threading.Timeout.Infinite" /&gt;</ph> (-1 миллисекунда) или больше, чем <ph id="ph3">&lt;see cref="F:System.Int32.MaxValue" /&gt;</ph>.</target>       </trans-unit>
      </group>
    </body>
  </file>
</xliff>