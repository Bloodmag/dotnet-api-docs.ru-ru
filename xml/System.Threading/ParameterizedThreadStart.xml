<Type Name="ParameterizedThreadStart" FullName="System.Threading.ParameterizedThreadStart">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="1f89ab27a5d48225389ff0ad41c3bbc265121c09" />
    <Meta Name="ms.sourcegitcommit" Value="d31dc2ede16f6f7bc64e90d9f897ff54c4e3869b" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="ru-RU" />
    <Meta Name="ms.lasthandoff" Value="04/03/2018" />
    <Meta Name="ms.locfileid" Value="30528068" />
  </Metadata>
  <TypeSignature Language="C#" Value="public delegate void ParameterizedThreadStart(object obj);" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed ParameterizedThreadStart extends System.MulticastDelegate" />
  <TypeSignature Language="DocId" Value="T:System.Threading.ParameterizedThreadStart" />
  <TypeSignature Language="VB.NET" Value="Public Delegate Sub ParameterizedThreadStart(obj As Object)" />
  <TypeSignature Language="C++ CLI" Value="public delegate void ParameterizedThreadStart(System::Object ^ obj);" />
  <AssemblyInfo>
    <AssemblyName>System.Threading.Thread</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.1.0.0</AssemblyVersion>
    <AssemblyVersion>4.1.1.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>mscorlib</AssemblyName>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Delegate</BaseTypeName>
  </Base>
  <Attributes>
    <Attribute>
      <AttributeName>System.Runtime.InteropServices.ComVisible(false)</AttributeName>
    </Attribute>
  </Attributes>
  <Parameters>
    <Parameter Name="obj" Type="System.Object" />
  </Parameters>
  <ReturnValue>
    <ReturnType>System.Void</ReturnType>
  </ReturnValue>
  <Docs>
    <param name="obj">Объект, содержащий данные потоковой процедуры.</param>
    <summary>Представляет метод, который выполняется в отношении <see cref="T:System.Threading.Thread" />.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 При создании управляемого потока, представленного метод, который выполняется в потоке:  
  
-   Объект <xref:System.Threading.ThreadStart> делегат, который передается <xref:System.Threading.Thread.%23ctor%28System.Threading.ThreadStart%29?displayProperty=nameWithType> конструктор.  Любой метод, который не имеет параметров и возвращает `void` в C#, или `Sub` процедуры на языке Visual Basic может представлять делегат.  
  
-   Объект <xref:System.Threading.ParameterizedThreadStart> делегат, который передается <xref:System.Threading.Thread.%23ctor%28System.Threading.ParameterizedThreadStart%29?displayProperty=nameWithType> конструктор. Любой метод, который принимает один параметр типа <xref:System.Object> , возвращает значение void в C# или процедуру Sub в Visual Basic может представлять делегат.  
  
 Поток не запускается до <xref:System.Threading.Thread.Start%2A?displayProperty=nameWithType> вызывается метод. <xref:System.Threading.ThreadStart> Или <xref:System.Threading.ParameterizedThreadStart> вызове делегата в потоке, и начинается выполнение в первой строке метода, представленному делегатом. В случае использования <xref:System.Threading.ParameterizedThreadStart> делегат, передаваемый объект <xref:System.Threading.Thread.Start%28System.Object%29> методу передается в делегат.  
  
> [!NOTE]
>  Пользователи Visual Basic и C# можно опустить <xref:System.Threading.ThreadStart> или <xref:System.Threading.ParameterizedThreadStart> конструктора делегата при создании потока. В Visual Basic, используйте `AddressOf` оператор при передаче в метод <xref:System.Threading.Thread.%23ctor%2A> конструктор, например `Dim t As New Thread(AddressOf ThreadProc)`. В C# просто укажите имя процедуры потока. Компилятор выбирает соответствующий конструктор делегата.  
  
> [!NOTE]
>  При создании <xref:System.Threading.ParameterizedThreadStart> делегат для метода экземпляра в C++, первый параметр конструктора — переменной экземпляра. Для статического метода первый параметр конструктора равно нулю. Для статического метода, конструктора делегата требуется только один параметр: адрес метода обратного вызова, дополненное имя класса.  
  
 <xref:System.Threading.ParameterizedThreadStart> Делегата и <xref:System.Threading.Thread.Start%28System.Object%29?displayProperty=nameWithType> перегрузка метода позволяют легко передать процедуре потока данных, но этот метод не является типобезопасным, потому что можно передать любой объект <xref:System.Threading.Thread.Start%28System.Object%29?displayProperty=nameWithType>. Для размещения процедуры потока и полей данных в рабочий объект является более надежным способом передачи данных в процедуре потока. Дополнительные сведения см. в разделе [создание потоков и передача данных во время запуска](~/docs/standard/threading/creating-threads-and-passing-data-at-start-time.md).  
  
 <xref:System.Threading.ParameterizedThreadStart> Делегат поддерживает только один параметр. Можно передать несколько элементов данных для <xref:System.Threading.ParameterizedThreadStart> , делая этого параметра, один из следующих:  
  
-   Массив.  
  
-   Тип коллекции, если все элементы данных того же типа.  
  
-   Тип кортежа, например <xref:System.Tuple%602> или <xref:System.Tuple%604>.  
  
   
  
## Examples  
 Следующий пример кода использует <xref:System.Threading.ParameterizedThreadStart> делегат для выполнения статический метод и метод экземпляра. Первый <xref:System.Threading.ParameterizedThreadStart> делегата, представленный статический `DoWork` , а второй метод представленный экземпляром `DoMoreWork` метод. Оба метода соответствует <xref:System.Threading.ParameterizedThreadStart> сигнатура делегата; то есть они имеют один параметр типа <xref:System.Object> и не возвращает значений.  
  
> [!NOTE]
>  Компиляторы Visual Basic и C# определяют <xref:System.Threading.ParameterizedThreadStart> делегата из сигнатуры `DoWork` и `DoMoreWork` методы и вызов надлежащего конструктора. Таким образом нет отсутствует явный вызов конструктора в коде.  
  
 [!code-cpp[System.Threading.ParameterizedThreadStart#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Threading.ParameterizedThreadStart/CPP/source.cpp#1)]
 [!code-csharp[System.Threading.ParameterizedThreadStart#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Threading.ParameterizedThreadStart/CS/source.cs#1)]
 [!code-vb[System.Threading.ParameterizedThreadStart#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Threading.ParameterizedThreadStart/VB/source.vb#1)]  
  
 ]]></format>
    </remarks>
    <altmember cref="T:System.Threading.ThreadStart" />
    <altmember cref="T:System.Threading.Thread" />
    <altmember cref="Overload:System.Threading.Thread.Start" />
    <altmember cref="T:System.AppDomain" />
  </Docs>
</Type>