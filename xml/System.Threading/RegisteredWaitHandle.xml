<Type Name="RegisteredWaitHandle" FullName="System.Threading.RegisteredWaitHandle">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="2981c0c3b50f02094deaf940943c288896ef2787" />
    <Meta Name="ms.sourcegitcommit" Value="d31dc2ede16f6f7bc64e90d9f897ff54c4e3869b" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="ru-RU" />
    <Meta Name="ms.lasthandoff" Value="04/03/2018" />
    <Meta Name="ms.locfileid" Value="30529108" />
  </Metadata>
  <TypeSignature Language="C#" Value="public sealed class RegisteredWaitHandle : MarshalByRefObject" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed beforefieldinit RegisteredWaitHandle extends System.MarshalByRefObject" />
  <TypeSignature Language="DocId" Value="T:System.Threading.RegisteredWaitHandle" />
  <TypeSignature Language="VB.NET" Value="Public NotInheritable Class RegisteredWaitHandle&#xA;Inherits MarshalByRefObject" />
  <TypeSignature Language="C++ CLI" Value="public ref class RegisteredWaitHandle sealed : MarshalByRefObject" />
  <AssemblyInfo>
    <AssemblyName>System.Threading.ThreadPool</AssemblyName>
    <AssemblyVersion>4.0.10.0</AssemblyVersion>
    <AssemblyVersion>4.1.0.0</AssemblyVersion>
    <AssemblyVersion>4.1.1.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>mscorlib</AssemblyName>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
    <BaseTypeName FrameworkAlternate="netframework-4.5">System.MarshalByRefObject</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute>
      <AttributeName>System.Runtime.InteropServices.ComVisible(true)</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>Представляет дескриптор, который регистрируется при вызове метода <see cref="M:System.Threading.ThreadPool.RegisterWaitForSingleObject(System.Threading.WaitHandle,System.Threading.WaitOrTimerCallback,System.Object,System.UInt32,System.Boolean)" />. Этот класс не наследуется.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Examples  
 В следующем примере показано, как использовать <xref:System.Threading.RegisteredWaitHandle> чтобы определить, почему вызывается метод обратного вызова и отмены регистрации задачи, если происходит обратный вызов дескриптором ожидания.  
  
 В примере также показано использование <xref:System.Threading.ThreadPool.RegisterWaitForSingleObject%2A> для выполнения указанный метод обратного вызова, когда сигнал дескриптор ожидания, указанного метода. В этом примере метод обратного вызова является `WaitProc`, и дескриптора ожидания <xref:System.Threading.AutoResetEvent>.  
  
 В примере определяется `TaskInfo` класс для хранения информации, который передается функции обратного вызова при его выполнении. В примере создается `TaskInfo` объекта и присваивает его некоторых строковых данных. <xref:System.Threading.RegisteredWaitHandle> , Возвращаемый <xref:System.Threading.ThreadPool.RegisterWaitForSingleObject%2A> назначен метод `Handle` поле `TaskInfo` таким образом, метод обратного вызова имеет доступ к <xref:System.Threading.RegisteredWaitHandle>.  
  
 Помимо указания `TaskInfo` как объект, передаваемый в метод обратного вызова, вызов <xref:System.Threading.ThreadPool.RegisterWaitForSingleObject%2A> указывает метод <xref:System.Threading.AutoResetEvent> , задача будет ожидать, <xref:System.Threading.WaitOrTimerCallback> делегат, который представляет `WaitProc` метод обратного вызова интервал времени ожидания в одну секунду и нескольких обратных вызовов.  
  
 Когда главный поток сигнализирует <xref:System.Threading.AutoResetEvent> путем вызова его <xref:System.Threading.EventWaitHandle.Set%2A> метод, <xref:System.Threading.WaitOrTimerCallback> вызове делегата. `WaitProc` Тесты метод <xref:System.Threading.RegisteredWaitHandle> для определения, является ли время ожидания истекло. Если был вызван обратный вызов был сигнал дескриптору ожидания, `WaitProc` отменяет регистрацию метод <xref:System.Threading.RegisteredWaitHandle>, остановка дополнительные обратные вызовы. В случае тайм-аут задача будет продолжать ожидать. `WaitProc` Метод завершает сообщение в окно консоли.  
  
 [!code-cpp[System.Threading.ThreadPool RegisterWaitForSingleObject0#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Threading.ThreadPool RegisterWaitForSingleObject0/CPP/source.cpp#1)]
 [!code-csharp[System.Threading.ThreadPool RegisterWaitForSingleObject0#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Threading.ThreadPool RegisterWaitForSingleObject0/CS/source.cs#1)]
 [!code-vb[System.Threading.ThreadPool RegisterWaitForSingleObject0#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Threading.ThreadPool RegisterWaitForSingleObject0/VB/source.vb#1)]  
  
 ]]></format>
    </remarks>
    <threadsafe>Данный тип потокобезопасен.</threadsafe>
  </Docs>
  <Members>
    <Member MemberName="Unregister">
      <MemberSignature Language="C#" Value="public bool Unregister (System.Threading.WaitHandle waitObject);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool Unregister(class System.Threading.WaitHandle waitObject) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.RegisteredWaitHandle.Unregister(System.Threading.WaitHandle)" />
      <MemberSignature Language="VB.NET" Value="Public Function Unregister (waitObject As WaitHandle) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool Unregister(System::Threading::WaitHandle ^ waitObject);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.ThreadPool</AssemblyName>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.ComVisible(true)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="waitObject" Type="System.Threading.WaitHandle" />
      </Parameters>
      <Docs>
        <param name="waitObject">Объект <see cref="T:System.Threading.WaitHandle" />, которому посылается сигнал.</param>
        <summary>Отменяет зарегистрированную операцию ожидания, вызванную методом <see cref="M:System.Threading.ThreadPool.RegisterWaitForSingleObject(System.Threading.WaitHandle,System.Threading.WaitOrTimerCallback,System.Object,System.UInt32,System.Boolean)" />.</summary>
        <returns>
          <see langword="true" />, если функция выполнилась успешно; в противном случае — <see langword="false" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Если `waitObject` указан, он получает сигнал только в том случае, если <xref:System.Threading.RegisteredWaitHandle> успешного удаления регистрации. Если метод обратного вызова выполняется при <xref:System.Threading.RegisteredWaitHandle.Unregister%2A> выполняет, `waitObject` не получил сигнал до завершения выполнения метода обратного вызова. В частности, если выполняется метод <xref:System.Threading.RegisteredWaitHandle.Unregister%2A>, `waitObject` не получил сигнал до завершения этого метода обратного вызова.  
  
   
  
## Examples  
 В следующем примере показано, как использовать <xref:System.Threading.RegisteredWaitHandle.Unregister%2A> метод отмены регистрации задачи, если происходит обратный вызов дескриптором ожидания.  
  
 В примере также показано использование <xref:System.Threading.ThreadPool.RegisterWaitForSingleObject%2A> для выполнения указанный метод обратного вызова, когда сигнал дескриптор ожидания, указанного метода. В этом примере метод обратного вызова является `WaitProc`, и дескриптора ожидания <xref:System.Threading.AutoResetEvent>.  
  
 В примере определяется `TaskInfo` класс для хранения информации, который передается функции обратного вызова при его выполнении. В примере создается `TaskInfo` объекта и присваивает его некоторых строковых данных. <xref:System.Threading.RegisteredWaitHandle> , Возвращаемый <xref:System.Threading.ThreadPool.RegisterWaitForSingleObject%2A> назначен метод `Handle` поле `TaskInfo` таким образом, метод обратного вызова имеет доступ к <xref:System.Threading.RegisteredWaitHandle>.  
  
 Помимо указания `TaskInfo` как объект, передаваемый в метод обратного вызова, вызов <xref:System.Threading.ThreadPool.RegisterWaitForSingleObject%2A> указывает метод <xref:System.Threading.AutoResetEvent> , задача будет ожидать, <xref:System.Threading.WaitOrTimerCallback> делегат, который представляет `WaitProc` метод обратного вызова интервал времени ожидания в одну секунду и нескольких обратных вызовов.  
  
 Когда главный поток сигнализирует <xref:System.Threading.AutoResetEvent> путем вызова его <xref:System.Threading.EventWaitHandle.Set%2A> метод, <xref:System.Threading.WaitOrTimerCallback> вызове делегата. `WaitProc` Тесты метод <xref:System.Threading.RegisteredWaitHandle> для определения, является ли время ожидания истекло. Если был вызван обратный вызов был сигнал дескриптору ожидания, `WaitProc` отменяет регистрацию метод <xref:System.Threading.RegisteredWaitHandle>, остановка дополнительные обратные вызовы. В случае тайм-аут задача будет продолжать ожидать. `WaitProc` Метод завершает сообщение в окно консоли.  
  
 [!code-cpp[System.Threading.ThreadPool RegisterWaitForSingleObject0#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Threading.ThreadPool RegisterWaitForSingleObject0/CPP/source.cpp#1)]
 [!code-csharp[System.Threading.ThreadPool RegisterWaitForSingleObject0#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Threading.ThreadPool RegisterWaitForSingleObject0/CS/source.cs#1)]
 [!code-vb[System.Threading.ThreadPool RegisterWaitForSingleObject0#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Threading.ThreadPool RegisterWaitForSingleObject0/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>