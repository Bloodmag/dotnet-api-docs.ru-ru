<Type Name="Semaphore" FullName="System.Threading.Semaphore">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="312a73b1d0f299dfb59a7dcba73d3cf9dbc2bb2c" />
    <Meta Name="ms.sourcegitcommit" Value="5a49536d99d2d0b54e4cb7280870903e043272df" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="ru-RU" />
    <Meta Name="ms.lasthandoff" Value="07/03/2018" />
    <Meta Name="ms.locfileid" Value="37609200" />
  </Metadata>
  <TypeSignature Language="C#" Value="public sealed class Semaphore : System.Threading.WaitHandle" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed beforefieldinit Semaphore extends System.Threading.WaitHandle" />
  <TypeSignature Language="DocId" Value="T:System.Threading.Semaphore" />
  <TypeSignature Language="VB.NET" Value="Public NotInheritable Class Semaphore&#xA;Inherits WaitHandle" />
  <TypeSignature Language="C++ CLI" Value="public ref class Semaphore sealed : System::Threading::WaitHandle" />
  <TypeSignature Language="F#" Value="type Semaphore = class&#xA;    inherit WaitHandle" />
  <AssemblyInfo>
    <AssemblyName>System.Threading</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.10.0</AssemblyVersion>
    <AssemblyVersion>4.1.0.0</AssemblyVersion>
    <AssemblyVersion>4.1.1.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>System</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Threading.WaitHandle</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute>
      <AttributeName>System.Runtime.InteropServices.ComVisible(false)</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>
      <span data-ttu-id="35108-101">Limits the number of threads that can access a resource or pool of resources concurrently.</span>
      <span class="sxs-lookup">
        <span data-stu-id="35108-101">Limits the number of threads that can access a resource or pool of resources concurrently.</span>
      </span>
    </summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="35108-102">Используйте <xref:System.Threading.Semaphore> класс для управления доступом к пулу ресурсов.</span><span class="sxs-lookup"><span data-stu-id="35108-102">Use the <xref:System.Threading.Semaphore> class to control access to a pool of resources.</span></span> <span data-ttu-id="35108-103">Потоков в семафор посредством вызова <xref:System.Threading.WaitHandle.WaitOne%2A> метод, который наследуется от <xref:System.Threading.WaitHandle> класса и освобождают семафор посредством вызова <xref:System.Threading.Semaphore.Release%2A> метод.</span><span class="sxs-lookup"><span data-stu-id="35108-103">Threads enter the semaphore by calling the <xref:System.Threading.WaitHandle.WaitOne%2A> method, which is inherited from the <xref:System.Threading.WaitHandle> class, and release the semaphore by calling the <xref:System.Threading.Semaphore.Release%2A> method.</span></span>  
  
 <span data-ttu-id="35108-104">Счетчик на семафоре уменьшается на единицу каждый раз поток входит в семафор и значение счетчика увеличивается, когда поток выходит из семафора.</span><span class="sxs-lookup"><span data-stu-id="35108-104">The count on a semaphore is decremented each time a thread enters the semaphore, and incremented when a thread releases the semaphore.</span></span> <span data-ttu-id="35108-105">Если счетчик равен нулю, последующие запросы блокируются, пока другие потоки освобождают семафор.</span><span class="sxs-lookup"><span data-stu-id="35108-105">When the count is zero, subsequent requests block until other threads release the semaphore.</span></span> <span data-ttu-id="35108-106">При всех потоков выпустили семафора, счетчик максимальное значение указывается при создании семафора.</span><span class="sxs-lookup"><span data-stu-id="35108-106">When all threads have released the semaphore, the count is at the maximum value specified when the semaphore was created.</span></span>  
  
 <span data-ttu-id="35108-107">Нет гарантированного порядка, например FIFO, LIFO, в котором заблокированных потоков в семафор.</span><span class="sxs-lookup"><span data-stu-id="35108-107">There is no guaranteed order, such as FIFO or LIFO, in which blocked threads enter the semaphore.</span></span>  
  
 <span data-ttu-id="35108-108">Поток может войти в семафор несколько раз, путем вызова <xref:System.Threading.WaitHandle.WaitOne%2A> метод несколько раз.</span><span class="sxs-lookup"><span data-stu-id="35108-108">A thread can enter the semaphore multiple times, by calling the <xref:System.Threading.WaitHandle.WaitOne%2A> method repeatedly.</span></span> <span data-ttu-id="35108-109">Чтобы освободить некоторые или все эти записи, можно вызвать без параметров потока <xref:System.Threading.Semaphore.Release> несколько раз, или его можно вызвать перегрузку метода <xref:System.Threading.Semaphore.Release%28System.Int32%29> перегрузку метода, которая указывает количество освобождаемых записей.</span><span class="sxs-lookup"><span data-stu-id="35108-109">To release some or all of these entries, the thread can call the parameterless <xref:System.Threading.Semaphore.Release> method overload multiple times, or it can call the <xref:System.Threading.Semaphore.Release%28System.Int32%29> method overload that specifies the number of entries to be released.</span></span>  
  
 <span data-ttu-id="35108-110"><xref:System.Threading.Semaphore> Класс не обеспечивают идентификацию потоков при вызовах метода <xref:System.Threading.WaitHandle.WaitOne%2A> или <xref:System.Threading.Semaphore.Release%2A>.</span><span class="sxs-lookup"><span data-stu-id="35108-110">The <xref:System.Threading.Semaphore> class does not enforce thread identity on calls to <xref:System.Threading.WaitHandle.WaitOne%2A> or <xref:System.Threading.Semaphore.Release%2A>.</span></span> <span data-ttu-id="35108-111">Это программист должен убедиться, что потоки не освобождают семафор слишком много раз.</span><span class="sxs-lookup"><span data-stu-id="35108-111">It is the programmer's responsibility to ensure that threads do not release the semaphore too many times.</span></span> <span data-ttu-id="35108-112">Например предположим, что семафор имеет максимальное значение счетчика равное двум, а два потока A и B входят в семафор.</span><span class="sxs-lookup"><span data-stu-id="35108-112">For example, suppose a semaphore has a maximum count of two, and that thread A and thread B both enter the semaphore.</span></span> <span data-ttu-id="35108-113">Если ошибка программирования в потоке B заставляет его вызывать метод <xref:System.Threading.Semaphore.Release%2A> дважды, оба вызова оканчиваются успешно.</span><span class="sxs-lookup"><span data-stu-id="35108-113">If a programming error in thread B causes it to call <xref:System.Threading.Semaphore.Release%2A> twice, both calls succeed.</span></span> <span data-ttu-id="35108-114">Счетчик на семафоре переполнен, и если поток A вызывает <xref:System.Threading.Semaphore.Release%2A>, <xref:System.Threading.SemaphoreFullException> создается исключение.</span><span class="sxs-lookup"><span data-stu-id="35108-114">The count on the semaphore is full, and when thread A eventually calls <xref:System.Threading.Semaphore.Release%2A>, a <xref:System.Threading.SemaphoreFullException> is thrown.</span></span>  
  
 <span data-ttu-id="35108-115">Семафоры бывают двух типов: локальные семафоры и именованных системных семафоров.</span><span class="sxs-lookup"><span data-stu-id="35108-115">Semaphores are of two types: local semaphores and named system semaphores.</span></span> <span data-ttu-id="35108-116">Если вы создаете <xref:System.Threading.Semaphore> с помощью конструктора, который принимает имя, она будет связана с данное имя семафором операционной системы.</span><span class="sxs-lookup"><span data-stu-id="35108-116">If you create a <xref:System.Threading.Semaphore> object using a constructor that accepts a name, it is associated with an operating-system semaphore of that name.</span></span> <span data-ttu-id="35108-117">Именованных системных семафоров доступны во всей операционной системы и может использоваться для синхронизации действий процессов.</span><span class="sxs-lookup"><span data-stu-id="35108-117">Named system semaphores are visible throughout the operating system, and can be used to synchronize the activities of processes.</span></span> <span data-ttu-id="35108-118">Вы можете создать несколько <xref:System.Threading.Semaphore> объекты, представляющие же именованный семафор, и можно использовать <xref:System.Threading.Semaphore.OpenExisting%2A> метод, чтобы открыть существующий именованный семафор.</span><span class="sxs-lookup"><span data-stu-id="35108-118">You can create multiple <xref:System.Threading.Semaphore> objects that represent the same named system semaphore, and you can use the <xref:System.Threading.Semaphore.OpenExisting%2A> method to open an existing named system semaphore.</span></span>  
  
 <span data-ttu-id="35108-119">Локальный семафор существует только внутри процесса.</span><span class="sxs-lookup"><span data-stu-id="35108-119">A local semaphore exists only within your process.</span></span> <span data-ttu-id="35108-120">Его может использовать любой поток в вашем процессе, имеющий ссылку на локальный объект <xref:System.Threading.Semaphore>.</span><span class="sxs-lookup"><span data-stu-id="35108-120">It can be used by any thread in your process that has a reference to the local <xref:System.Threading.Semaphore> object.</span></span> <span data-ttu-id="35108-121">Каждый <xref:System.Threading.Semaphore> объект — это отдельный локальный семафор.</span><span class="sxs-lookup"><span data-stu-id="35108-121">Each <xref:System.Threading.Semaphore> object is a separate local semaphore.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="35108-122">В следующем примере кода создается семафор с максимум из трех и начальное число ноль.</span><span class="sxs-lookup"><span data-stu-id="35108-122">The following code example creates a semaphore with a maximum count of three and an initial count of zero.</span></span> <span data-ttu-id="35108-123">В примере запускается пять потоков, которые блокируют ожидание семафора.</span><span class="sxs-lookup"><span data-stu-id="35108-123">The example starts five threads, which block waiting for the semaphore.</span></span> <span data-ttu-id="35108-124">Основной поток использует <xref:System.Threading.Semaphore.Release%28System.Int32%29> перегруженный метод, чтобы увеличить счетчик семафора максимальное значение ограничения, позволяя трех потоков в семафор.</span><span class="sxs-lookup"><span data-stu-id="35108-124">The main thread uses the <xref:System.Threading.Semaphore.Release%28System.Int32%29> method overload to increase the semaphore count to its maximum, allowing three threads to enter the semaphore.</span></span> <span data-ttu-id="35108-125">Каждый поток использует <xref:System.Threading.Thread.Sleep%2A?displayProperty=nameWithType> метод для ожидания в течение одной секунды для имитации работы, а затем вызывает <xref:System.Threading.Semaphore.Release> перегруженный метод, чтобы освободить семафор.</span><span class="sxs-lookup"><span data-stu-id="35108-125">Each thread uses the <xref:System.Threading.Thread.Sleep%2A?displayProperty=nameWithType> method to wait for one second, to simulate work, and then calls the <xref:System.Threading.Semaphore.Release> method overload to release the semaphore.</span></span> <span data-ttu-id="35108-126">Каждый раз, когда выпускается семафора, счетчик семафора предыдущих отображается.</span><span class="sxs-lookup"><span data-stu-id="35108-126">Each time the semaphore is released, the previous semaphore count is displayed.</span></span> <span data-ttu-id="35108-127">Консоль сообщения отслеживать использование семафора.</span><span class="sxs-lookup"><span data-stu-id="35108-127">Console messages track semaphore use.</span></span> <span data-ttu-id="35108-128">Интервал имитирующей работу немного увеличивается для каждого потока, чтобы облегчить чтение выходных данных.</span><span class="sxs-lookup"><span data-stu-id="35108-128">The simulated work interval is increased slightly for each thread, to make the output easier to read.</span></span>  
  
 [!code-cpp[System.Threading.Semaphore2#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Threading.Semaphore2/CPP/source.cpp#1)]
 [!code-csharp[System.Threading.Semaphore2#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Threading.Semaphore2/CS/source.cs#1)]
 [!code-vb[System.Threading.Semaphore2#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Threading.Semaphore2/VB/source.vb#1)]  
  
 ]]></format>
    </remarks>
    <threadsafe>
      <span data-ttu-id="35108-129">Данный тип потокобезопасен.</span>
      <span class="sxs-lookup">
        <span data-stu-id="35108-129">This type is thread safe.</span>
      </span>
    </threadsafe>
  </Docs>
  <Members>
    <MemberGroup MemberName=".ctor">
      <AssemblyInfo>
        <AssemblyName>System.Threading</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="35108-130">Initializes a new instance of the <see cref="T:System.Threading.Semaphore" /> class.</span>
          <span class="sxs-lookup">
            <span data-stu-id="35108-130">Initializes a new instance of the <see cref="T:System.Threading.Semaphore" /> class.</span>
          </span>
        </summary>
      </Docs>
    </MemberGroup>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public Semaphore (int initialCount, int maximumCount);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(int32 initialCount, int32 maximumCount) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Semaphore.#ctor(System.Int32,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (initialCount As Integer, maximumCount As Integer)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; Semaphore(int initialCount, int maximumCount);" />
      <MemberSignature Language="F#" Value="new System.Threading.Semaphore : int * int -&gt; System.Threading.Semaphore" Usage="new System.Threading.Semaphore (initialCount, maximumCount)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters>
        <Parameter Name="initialCount" Type="System.Int32" />
        <Parameter Name="maximumCount" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="initialCount">
          <span data-ttu-id="35108-131">The initial number of requests for the semaphore that can be granted concurrently.</span>
          <span class="sxs-lookup">
            <span data-stu-id="35108-131">The initial number of requests for the semaphore that can be granted concurrently.</span>
          </span>
        </param>
        <param name="maximumCount">
          <span data-ttu-id="35108-132">The maximum number of requests for the semaphore that can be granted concurrently.</span>
          <span class="sxs-lookup">
            <span data-stu-id="35108-132">The maximum number of requests for the semaphore that can be granted concurrently.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="35108-133">Initializes a new instance of the <see cref="T:System.Threading.Semaphore" /> class, specifying the initial number of entries and the maximum number of concurrent entries.</span>
          <span class="sxs-lookup">
            <span data-stu-id="35108-133">Initializes a new instance of the <see cref="T:System.Threading.Semaphore" /> class, specifying the initial number of entries and the maximum number of concurrent entries.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="35108-134">Этот конструктор инициализирует неименованный семафор.</span><span class="sxs-lookup"><span data-stu-id="35108-134">This constructor initializes an unnamed semaphore.</span></span> <span data-ttu-id="35108-135">Все потоки, использующие экземпляр такого семафора должен иметь ссылки на экземпляр.</span><span class="sxs-lookup"><span data-stu-id="35108-135">All threads that use an instance of such a semaphore must have references to the instance.</span></span>  
  
 <span data-ttu-id="35108-136">Если `initialCount` — меньше, чем `maximumCount`, действует так же, как если бы метод текущего потока <xref:System.Threading.WaitHandle.WaitOne%2A> (`maximumCount` минус `initialCount`) раз.</span><span class="sxs-lookup"><span data-stu-id="35108-136">If `initialCount` is less than `maximumCount`, the effect is the same as if the current thread had called <xref:System.Threading.WaitHandle.WaitOne%2A> (`maximumCount` minus `initialCount`) times.</span></span> <span data-ttu-id="35108-137">Если вы не хотите зарезервировать все записи потока, который создает семафора, используйте один и тот же номер для `maximumCount` и `initialCount`.</span><span class="sxs-lookup"><span data-stu-id="35108-137">If you do not want to reserve any entries for the thread that creates the semaphore, use the same number for `maximumCount` and `initialCount`.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="35108-138">В следующем примере создается семафор с максимальным значением счетчика из трех и начальное число ноль.</span><span class="sxs-lookup"><span data-stu-id="35108-138">The following example creates a semaphore with a maximum count of three and an initial count of zero.</span></span> <span data-ttu-id="35108-139">В примере запускается пять потоков, которые блокируют ожидание семафора.</span><span class="sxs-lookup"><span data-stu-id="35108-139">The example starts five threads, which block waiting for the semaphore.</span></span> <span data-ttu-id="35108-140">Основной поток использует <xref:System.Threading.Semaphore.Release%28System.Int32%29> перегруженный метод, чтобы увеличить счетчик семафора максимальное значение ограничения, позволяя трех потоков в семафор.</span><span class="sxs-lookup"><span data-stu-id="35108-140">The main thread uses the <xref:System.Threading.Semaphore.Release%28System.Int32%29> method overload to increase the semaphore count to its maximum, allowing three threads to enter the semaphore.</span></span> <span data-ttu-id="35108-141">Каждый поток использует <xref:System.Threading.Thread.Sleep%2A?displayProperty=nameWithType> метод для ожидания в течение одной секунды для имитации работы, а затем вызывает <xref:System.Threading.Semaphore.Release> перегруженный метод, чтобы освободить семафор.</span><span class="sxs-lookup"><span data-stu-id="35108-141">Each thread uses the <xref:System.Threading.Thread.Sleep%2A?displayProperty=nameWithType> method to wait for one second, to simulate work, and then calls the <xref:System.Threading.Semaphore.Release> method overload to release the semaphore.</span></span> <span data-ttu-id="35108-142">Каждый раз, когда выпускается семафора, счетчик семафора предыдущих отображается.</span><span class="sxs-lookup"><span data-stu-id="35108-142">Each time the semaphore is released, the previous semaphore count is displayed.</span></span> <span data-ttu-id="35108-143">Консоль сообщения отслеживать использование семафора.</span><span class="sxs-lookup"><span data-stu-id="35108-143">Console messages track semaphore use.</span></span> <span data-ttu-id="35108-144">Интервал имитирующей работу немного увеличивается для каждого потока, чтобы облегчить чтение выходных данных.</span><span class="sxs-lookup"><span data-stu-id="35108-144">The simulated work interval is increased slightly for each thread, to make the output easier to read.</span></span>  
  
 [!code-cpp[System.Threading.Semaphore2#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Threading.Semaphore2/CPP/source.cpp#1)]
 [!code-csharp[System.Threading.Semaphore2#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Threading.Semaphore2/CS/source.cs#1)]
 [!code-vb[System.Threading.Semaphore2#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Threading.Semaphore2/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="35108-145">
            <paramref name="initialCount" /> is greater than <paramref name="maximumCount" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="35108-145">
              <paramref name="initialCount" /> is greater than <paramref name="maximumCount" />.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <span data-ttu-id="35108-146">
            <paramref name="maximumCount" /> is less than 1.</span>
          <span class="sxs-lookup">
            <span data-stu-id="35108-146">
              <paramref name="maximumCount" /> is less than 1.</span>
          </span>
          <span data-ttu-id="35108-147">-or-  <paramref name="initialCount" /> is less than 0.</span>
          <span class="sxs-lookup">
            <span data-stu-id="35108-147">-or-  <paramref name="initialCount" /> is less than 0.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public Semaphore (int initialCount, int maximumCount, string name);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(int32 initialCount, int32 maximumCount, string name) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Semaphore.#ctor(System.Int32,System.Int32,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (initialCount As Integer, maximumCount As Integer, name As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; Semaphore(int initialCount, int maximumCount, System::String ^ name);" />
      <MemberSignature Language="F#" Value="new System.Threading.Semaphore : int * int * string -&gt; System.Threading.Semaphore" Usage="new System.Threading.Semaphore (initialCount, maximumCount, name)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="initialCount" Type="System.Int32" />
        <Parameter Name="maximumCount" Type="System.Int32" />
        <Parameter Name="name" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="initialCount">
          <span data-ttu-id="35108-148">The initial number of requests for the semaphore that can be granted concurrently.</span>
          <span class="sxs-lookup">
            <span data-stu-id="35108-148">The initial number of requests for the semaphore that can be granted concurrently.</span>
          </span>
        </param>
        <param name="maximumCount">
          <span data-ttu-id="35108-149">The maximum number of requests for the semaphore that can be granted concurrently.</span>
          <span class="sxs-lookup">
            <span data-stu-id="35108-149">The maximum number of requests for the semaphore that can be granted concurrently.</span>
          </span>
        </param>
        <param name="name">
          <span data-ttu-id="35108-150">The name of a named system semaphore object.</span>
          <span class="sxs-lookup">
            <span data-stu-id="35108-150">The name of a named system semaphore object.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="35108-151">Initializes a new instance of the <see cref="T:System.Threading.Semaphore" /> class, specifying the initial number of entries and the maximum number of concurrent entries, and optionally specifying the name of a system semaphore object.</span>
          <span class="sxs-lookup">
            <span data-stu-id="35108-151">Initializes a new instance of the <see cref="T:System.Threading.Semaphore" /> class, specifying the initial number of entries and the maximum number of concurrent entries, and optionally specifying the name of a system semaphore object.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="35108-152">Этот конструктор инициализирует <xref:System.Threading.Semaphore> , представляющий именованный системный семафор.</span><span class="sxs-lookup"><span data-stu-id="35108-152">This constructor initializes a <xref:System.Threading.Semaphore> object that represents a named system semaphore.</span></span> <span data-ttu-id="35108-153">Вы можете создать несколько <xref:System.Threading.Semaphore> объекты, представляющие же именованный семафор.</span><span class="sxs-lookup"><span data-stu-id="35108-153">You can create multiple <xref:System.Threading.Semaphore> objects that represent the same named system semaphore.</span></span>  
  
 <span data-ttu-id="35108-154">Если именованный системный семафор не существует, он создается с начальным и максимальное значение, определяемое `initialCount` и `maximumCount`.</span><span class="sxs-lookup"><span data-stu-id="35108-154">If the named system semaphore does not exist, it is created with the initial count and maximum count specified by `initialCount` and `maximumCount`.</span></span> <span data-ttu-id="35108-155">Если именованный системный семафор уже существует, `initialCount` и `maximumCount` не используются, несмотря на то, что недопустимые значения по-прежнему вызывать исключения.</span><span class="sxs-lookup"><span data-stu-id="35108-155">If the named system semaphore already exists, `initialCount` and `maximumCount` are not used, although invalid values still cause exceptions.</span></span> <span data-ttu-id="35108-156">Если вам нужно определить ли именованный системный семафор был создан, используйте <xref:System.Threading.Semaphore.%23ctor%28System.Int32%2CSystem.Int32%2CSystem.String%2CSystem.Boolean%40%29> вместо перегрузки конструктора.</span><span class="sxs-lookup"><span data-stu-id="35108-156">If you need to determine whether or not a named system semaphore was created, use the <xref:System.Threading.Semaphore.%23ctor%28System.Int32%2CSystem.Int32%2CSystem.String%2CSystem.Boolean%40%29> constructor overload instead.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="35108-157">Если вы используете эту перегрузку конструктора, рекомендуется указывать один и тот же номер для `initialCount` и `maximumCount`.</span><span class="sxs-lookup"><span data-stu-id="35108-157">When you use this constructor overload, the recommended practice is to specify the same number for `initialCount` and `maximumCount`.</span></span> <span data-ttu-id="35108-158">Если `initialCount` — меньше, чем `maximumCount`и создается именованный системный семафор, действует так же, как если бы метод текущего потока <xref:System.Threading.WaitHandle.WaitOne%2A> (`maximumCount` минус `initialCount`) раз.</span><span class="sxs-lookup"><span data-stu-id="35108-158">If `initialCount` is less than `maximumCount`, and a named system semaphore is created, the effect is the same as if the current thread had called <xref:System.Threading.WaitHandle.WaitOne%2A> (`maximumCount` minus `initialCount`) times.</span></span> <span data-ttu-id="35108-159">Тем не менее с помощью этой перегрузки конструктора нет способа определить, был ли создан именованный системный семафор.</span><span class="sxs-lookup"><span data-stu-id="35108-159">However, with this constructor overload there is no way to determine whether a named system semaphore was created.</span></span>  
  
 <span data-ttu-id="35108-160">Если указать `null` или пустую строку для `name`, создан локальный семафор, как если бы Вы вызвали <xref:System.Threading.Semaphore.%23ctor%28System.Int32%2CSystem.Int32%29> перегрузку конструктора.</span><span class="sxs-lookup"><span data-stu-id="35108-160">If you specify `null` or an empty string for `name`, a local semaphore is created, as if you had called the <xref:System.Threading.Semaphore.%23ctor%28System.Int32%2CSystem.Int32%29> constructor overload.</span></span>  
  
 <span data-ttu-id="35108-161">Так как именованные семафоры относятся видимой во всей операционной системы, они могут использоваться для координирования использования ресурсов через границы процессов.</span><span class="sxs-lookup"><span data-stu-id="35108-161">Because named semaphores are visible throughout the operating system, they can be used to coordinate resource use across process boundaries.</span></span>  
  
 <span data-ttu-id="35108-162">Если вы хотите узнать, существует ли именованный системный семафор, используйте <xref:System.Threading.Semaphore.OpenExisting%2A> метод.</span><span class="sxs-lookup"><span data-stu-id="35108-162">If you want to find out whether a named system semaphore exists, use the <xref:System.Threading.Semaphore.OpenExisting%2A> method.</span></span> <span data-ttu-id="35108-163"><xref:System.Threading.Semaphore.OpenExisting%2A> Метод пытается открыть существующий именованный семафор и создает исключение, если системный семафор не существует.</span><span class="sxs-lookup"><span data-stu-id="35108-163">The <xref:System.Threading.Semaphore.OpenExisting%2A> method attempts to open an existing named semaphore, and throws an exception if the system semaphore does not exist.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="35108-164">В следующем примере кода демонстрируется поведение между процессами именованного семафора.</span><span class="sxs-lookup"><span data-stu-id="35108-164">The following code example demonstrates the cross-process behavior of a named semaphore.</span></span> <span data-ttu-id="35108-165">В примере создается именованный семафор с максимум 5 и исходным значением счетчика до пяти.</span><span class="sxs-lookup"><span data-stu-id="35108-165">The example creates a named semaphore with a maximum count of five and an initial count of five.</span></span> <span data-ttu-id="35108-166">Программа выполняет три вызова <xref:System.Threading.WaitHandle.WaitOne%2A> метод.</span><span class="sxs-lookup"><span data-stu-id="35108-166">The program makes three calls to the <xref:System.Threading.WaitHandle.WaitOne%2A> method.</span></span> <span data-ttu-id="35108-167">Таким образом, если скомпилированный пример запускается из два командных окна, вторую копию заблокирует на третий вызов <xref:System.Threading.WaitHandle.WaitOne%2A>.</span><span class="sxs-lookup"><span data-stu-id="35108-167">Thus, if you run the compiled example from two command windows, the second copy will block on the third call to <xref:System.Threading.WaitHandle.WaitOne%2A>.</span></span> <span data-ttu-id="35108-168">Освободить один или несколько записей в первую копию сообщения программы, чтобы разблокировать второй.</span><span class="sxs-lookup"><span data-stu-id="35108-168">Release one or more entries in the first copy of the program to unblock the second.</span></span>  
  
 [!code-cpp[System.Threading.Semaphore.ctor named 3#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Threading.Semaphore.ctor named 3/CPP/source.cpp#1)]
 [!code-csharp[System.Threading.Semaphore.ctor named 3#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Threading.Semaphore.ctor named 3/CS/source.cs#1)]
 [!code-vb[System.Threading.Semaphore.ctor named 3#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Threading.Semaphore.ctor named 3/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="35108-169">
            <paramref name="initialCount" /> is greater than <paramref name="maximumCount" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="35108-169">
              <paramref name="initialCount" /> is greater than <paramref name="maximumCount" />.</span>
          </span>
          <span data-ttu-id="35108-170">-or-  <paramref name="name" /> is longer than 260 characters.</span>
          <span class="sxs-lookup">
            <span data-stu-id="35108-170">-or-  <paramref name="name" /> is longer than 260 characters.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <span data-ttu-id="35108-171">
            <paramref name="maximumCount" /> is less than 1.</span>
          <span class="sxs-lookup">
            <span data-stu-id="35108-171">
              <paramref name="maximumCount" /> is less than 1.</span>
          </span>
          <span data-ttu-id="35108-172">-or-  <paramref name="initialCount" /> is less than 0.</span>
          <span class="sxs-lookup">
            <span data-stu-id="35108-172">-or-  <paramref name="initialCount" /> is less than 0.</span>
          </span>
        </exception>
        <exception cref="T:System.IO.IOException">
          <span data-ttu-id="35108-173">A Win32 error occurred.</span>
          <span class="sxs-lookup">
            <span data-stu-id="35108-173">A Win32 error occurred.</span>
          </span>
        </exception>
        <exception cref="T:System.UnauthorizedAccessException">
          <span data-ttu-id="35108-174">The named semaphore exists and has access control security, and the user does not have <see cref="F:System.Security.AccessControl.SemaphoreRights.FullControl" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="35108-174">The named semaphore exists and has access control security, and the user does not have <see cref="F:System.Security.AccessControl.SemaphoreRights.FullControl" />.</span>
          </span>
        </exception>
        <exception cref="T:System.Threading.WaitHandleCannotBeOpenedException">
          <span data-ttu-id="35108-175">The named semaphore cannot be created, perhaps because a wait handle of a different type has the same name.</span>
          <span class="sxs-lookup">
            <span data-stu-id="35108-175">The named semaphore cannot be created, perhaps because a wait handle of a different type has the same name.</span>
          </span>
        </exception>
        <permission cref="T:System.Security.Permissions.SecurityPermission">
          <span data-ttu-id="35108-176">для вызова неуправляемого кода для создания именованного системного семафора.</span>
          <span class="sxs-lookup">
            <span data-stu-id="35108-176">for calling unmanaged code to create a named system semaphore.</span>
          </span>
          <span data-ttu-id="35108-177">Связанное перечисление: <see cref="F:System.Security.Permissions.SecurityPermissionFlag.UnmanagedCode" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="35108-177">Associated enumeration: <see cref="F:System.Security.Permissions.SecurityPermissionFlag.UnmanagedCode" />.</span>
          </span>
          <span data-ttu-id="35108-178">Если не удается найти <see cref="F:System.Security.Permissions.SecurityAction.LinkDemand" />, он проходит по иерархии класса, пока не найдет типом-примитивом.</span>
          <span class="sxs-lookup">
            <span data-stu-id="35108-178">Security action: <see cref="F:System.Security.Permissions.SecurityAction.LinkDemand" />.</span>
          </span>
        </permission>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public Semaphore (int initialCount, int maximumCount, string name, out bool createdNew);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(int32 initialCount, int32 maximumCount, string name, [out] bool&amp; createdNew) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Semaphore.#ctor(System.Int32,System.Int32,System.String,System.Boolean@)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (initialCount As Integer, maximumCount As Integer, name As String, ByRef createdNew As Boolean)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; Semaphore(int initialCount, int maximumCount, System::String ^ name, [Runtime::InteropServices::Out] bool % createdNew);" />
      <MemberSignature Language="F#" Value="new System.Threading.Semaphore : int * int * string *  -&gt; System.Threading.Semaphore" Usage="new System.Threading.Semaphore (initialCount, maximumCount, name, createdNew)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="initialCount" Type="System.Int32" />
        <Parameter Name="maximumCount" Type="System.Int32" />
        <Parameter Name="name" Type="System.String" />
        <Parameter Name="createdNew" Type="System.Boolean&amp;" RefType="out" />
      </Parameters>
      <Docs>
        <param name="initialCount">
          <span data-ttu-id="35108-179">The initial number of requests for the semaphore that can be satisfied concurrently.</span>
          <span class="sxs-lookup">
            <span data-stu-id="35108-179">The initial number of requests for the semaphore that can be satisfied concurrently.</span>
          </span>
        </param>
        <param name="maximumCount">
          <span data-ttu-id="35108-180">The maximum number of requests for the semaphore that can be satisfied concurrently.</span>
          <span class="sxs-lookup">
            <span data-stu-id="35108-180">The maximum number of requests for the semaphore that can be satisfied concurrently.</span>
          </span>
        </param>
        <param name="name">
          <span data-ttu-id="35108-181">The name of a named system semaphore object.</span>
          <span class="sxs-lookup">
            <span data-stu-id="35108-181">The name of a named system semaphore object.</span>
          </span>
        </param>
        <param name="createdNew">
          <span data-ttu-id="35108-182">When this method returns, contains <see langword="true" /> if a local semaphore was created (that is, if <c>name</c> is <see langword="null" /> or an empty string) or if the specified named system semaphore was created; <see langword="false" /> if the specified named system semaphore already existed.</span>
          <span class="sxs-lookup">
            <span data-stu-id="35108-182">When this method returns, contains <see langword="true" /> if a local semaphore was created (that is, if <c>name</c> is <see langword="null" /> or an empty string) or if the specified named system semaphore was created; <see langword="false" /> if the specified named system semaphore already existed.</span>
          </span>
          <span data-ttu-id="35108-183">This parameter is passed uninitialized.</span>
          <span class="sxs-lookup">
            <span data-stu-id="35108-183">This parameter is passed uninitialized.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="35108-184">Initializes a new instance of the <see cref="T:System.Threading.Semaphore" /> class, specifying the initial number of entries and the maximum number of concurrent entries, optionally specifying the name of a system semaphore object, and specifying a variable that receives a value indicating whether a new system semaphore was created.</span>
          <span class="sxs-lookup">
            <span data-stu-id="35108-184">Initializes a new instance of the <see cref="T:System.Threading.Semaphore" /> class, specifying the initial number of entries and the maximum number of concurrent entries, optionally specifying the name of a system semaphore object, and specifying a variable that receives a value indicating whether a new system semaphore was created.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="35108-185">Этот конструктор инициализирует <xref:System.Threading.Semaphore> , представляющий именованный системный семафор.</span><span class="sxs-lookup"><span data-stu-id="35108-185">This constructor initializes a <xref:System.Threading.Semaphore> object that represents a named system semaphore.</span></span> <span data-ttu-id="35108-186">Вы можете создать несколько <xref:System.Threading.Semaphore> объекты, представляющие же именованный семафор.</span><span class="sxs-lookup"><span data-stu-id="35108-186">You can create multiple <xref:System.Threading.Semaphore> objects that represent the same named system semaphore.</span></span>  
  
 <span data-ttu-id="35108-187">Если именованный системный семафор не существует, он создается с начальным и максимальное значение, определяемое `initialCount` и `maximumCount`.</span><span class="sxs-lookup"><span data-stu-id="35108-187">If the named system semaphore does not exist, it is created with the initial count and maximum count specified by `initialCount` and `maximumCount`.</span></span> <span data-ttu-id="35108-188">Если именованный системный семафор уже существует, `initialCount` и `maximumCount` не используются, несмотря на то, что недопустимые значения по-прежнему вызывать исключения.</span><span class="sxs-lookup"><span data-stu-id="35108-188">If the named system semaphore already exists, `initialCount` and `maximumCount` are not used, although invalid values still cause exceptions.</span></span> <span data-ttu-id="35108-189">Используйте `createdNew` для определения, был ли создан системный семафор.</span><span class="sxs-lookup"><span data-stu-id="35108-189">Use `createdNew` to determine whether the system semaphore was created.</span></span>  
  
 <span data-ttu-id="35108-190">Если `initialCount` — меньше, чем `maximumCount`, и `createdNew` — `true`, действует так же, как если бы метод текущего потока <xref:System.Threading.WaitHandle.WaitOne%2A> (`maximumCount` минус `initialCount`) раз.</span><span class="sxs-lookup"><span data-stu-id="35108-190">If `initialCount` is less than `maximumCount`, and `createdNew` is `true`, the effect is the same as if the current thread had called <xref:System.Threading.WaitHandle.WaitOne%2A> (`maximumCount` minus `initialCount`) times.</span></span>  
  
 <span data-ttu-id="35108-191">Если указать `null` или пустую строку для `name`, создан локальный семафор, как если бы Вы вызвали <xref:System.Threading.Semaphore.%23ctor%28System.Int32%2CSystem.Int32%29> перегрузку конструктора.</span><span class="sxs-lookup"><span data-stu-id="35108-191">If you specify `null` or an empty string for `name`, a local semaphore is created, as if you had called the <xref:System.Threading.Semaphore.%23ctor%28System.Int32%2CSystem.Int32%29> constructor overload.</span></span> <span data-ttu-id="35108-192">В этом случае `createdNew` всегда `true`.</span><span class="sxs-lookup"><span data-stu-id="35108-192">In this case, `createdNew` is always `true`.</span></span>  
  
 <span data-ttu-id="35108-193">Так как именованные семафоры относятся видимой во всей операционной системы, они могут использоваться для координирования использования ресурсов через границы процессов.</span><span class="sxs-lookup"><span data-stu-id="35108-193">Because named semaphores are visible throughout the operating system, they can be used to coordinate resource use across process boundaries.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="35108-194">В следующем примере кода демонстрируется поведение между процессами именованного семафора.</span><span class="sxs-lookup"><span data-stu-id="35108-194">The following code example demonstrates the cross-process behavior of a named semaphore.</span></span> <span data-ttu-id="35108-195">В примере создается именованный семафор с максимум 5 и начальное число 2.</span><span class="sxs-lookup"><span data-stu-id="35108-195">The example creates a named semaphore with a maximum count of five and an initial count of two.</span></span> <span data-ttu-id="35108-196">То есть она способна резервировать три записи для потока, который вызывает конструктор.</span><span class="sxs-lookup"><span data-stu-id="35108-196">That is, it reserves three entries for the thread that calls the constructor.</span></span> <span data-ttu-id="35108-197">Если `createNew` — `false`, программа выполняет три вызова <xref:System.Threading.WaitHandle.WaitOne%2A> метод.</span><span class="sxs-lookup"><span data-stu-id="35108-197">If `createNew` is `false`, the program makes three calls to the <xref:System.Threading.WaitHandle.WaitOne%2A> method.</span></span> <span data-ttu-id="35108-198">Таким образом, если скомпилированный пример запускается из два командных окна, вторую копию заблокирует на третий вызов <xref:System.Threading.WaitHandle.WaitOne%2A>.</span><span class="sxs-lookup"><span data-stu-id="35108-198">Thus, if you run the compiled example from two command windows, the second copy will block on the third call to <xref:System.Threading.WaitHandle.WaitOne%2A>.</span></span> <span data-ttu-id="35108-199">Освободить один или несколько записей в первую копию сообщения программы, чтобы разблокировать второй.</span><span class="sxs-lookup"><span data-stu-id="35108-199">Release one or more entries in the first copy of the program to unblock the second.</span></span>  
  
 [!code-cpp[System.Threading.Semaphore.ctor named 4#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Threading.Semaphore.ctor named 4/CPP/source.cpp#1)]
 [!code-csharp[System.Threading.Semaphore.ctor named 4#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Threading.Semaphore.ctor named 4/CS/source.cs#1)]
 [!code-vb[System.Threading.Semaphore.ctor named 4#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Threading.Semaphore.ctor named 4/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="35108-200">
            <paramref name="initialCount" /> is greater than <paramref name="maximumCount" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="35108-200">
              <paramref name="initialCount" /> is greater than <paramref name="maximumCount" />.</span>
          </span>
          <span data-ttu-id="35108-201">-or-  <paramref name="name" /> is longer than 260 characters.</span>
          <span class="sxs-lookup">
            <span data-stu-id="35108-201">-or-  <paramref name="name" /> is longer than 260 characters.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <span data-ttu-id="35108-202">
            <paramref name="maximumCount" /> is less than 1.</span>
          <span class="sxs-lookup">
            <span data-stu-id="35108-202">
              <paramref name="maximumCount" /> is less than 1.</span>
          </span>
          <span data-ttu-id="35108-203">-or-  <paramref name="initialCount" /> is less than 0.</span>
          <span class="sxs-lookup">
            <span data-stu-id="35108-203">-or-  <paramref name="initialCount" /> is less than 0.</span>
          </span>
        </exception>
        <exception cref="T:System.IO.IOException">
          <span data-ttu-id="35108-204">A Win32 error occurred.</span>
          <span class="sxs-lookup">
            <span data-stu-id="35108-204">A Win32 error occurred.</span>
          </span>
        </exception>
        <exception cref="T:System.UnauthorizedAccessException">
          <span data-ttu-id="35108-205">The named semaphore exists and has access control security, and the user does not have <see cref="F:System.Security.AccessControl.SemaphoreRights.FullControl" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="35108-205">The named semaphore exists and has access control security, and the user does not have <see cref="F:System.Security.AccessControl.SemaphoreRights.FullControl" />.</span>
          </span>
        </exception>
        <exception cref="T:System.Threading.WaitHandleCannotBeOpenedException">
          <span data-ttu-id="35108-206">The named semaphore cannot be created, perhaps because a wait handle of a different type has the same name.</span>
          <span class="sxs-lookup">
            <span data-stu-id="35108-206">The named semaphore cannot be created, perhaps because a wait handle of a different type has the same name.</span>
          </span>
        </exception>
        <permission cref="T:System.Security.Permissions.SecurityPermission">
          <span data-ttu-id="35108-207">для вызова неуправляемого кода для создания именованного системного семафора.</span>
          <span class="sxs-lookup">
            <span data-stu-id="35108-207">for calling unmanaged code to create a named system semaphore.</span>
          </span>
          <span data-ttu-id="35108-208">Связанное перечисление: <see cref="F:System.Security.Permissions.SecurityPermissionFlag.UnmanagedCode" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="35108-208">Associated enumeration: <see cref="F:System.Security.Permissions.SecurityPermissionFlag.UnmanagedCode" />.</span>
          </span>
          <span data-ttu-id="35108-209">Если не удается найти <see cref="F:System.Security.Permissions.SecurityAction.LinkDemand" />, он проходит по иерархии класса, пока не найдет типом-примитивом.</span>
          <span class="sxs-lookup">
            <span data-stu-id="35108-209">Security action: <see cref="F:System.Security.Permissions.SecurityAction.LinkDemand" />.</span>
          </span>
        </permission>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public Semaphore (int initialCount, int maximumCount, string name, out bool createdNew, System.Security.AccessControl.SemaphoreSecurity semaphoreSecurity);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(int32 initialCount, int32 maximumCount, string name, [out] bool&amp; createdNew, class System.Security.AccessControl.SemaphoreSecurity semaphoreSecurity) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Semaphore.#ctor(System.Int32,System.Int32,System.String,System.Boolean@,System.Security.AccessControl.SemaphoreSecurity)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; Semaphore(int initialCount, int maximumCount, System::String ^ name, [Runtime::InteropServices::Out] bool % createdNew, System::Security::AccessControl::SemaphoreSecurity ^ semaphoreSecurity);" />
      <MemberSignature Language="F#" Value="new System.Threading.Semaphore : int * int * string *  * System.Security.AccessControl.SemaphoreSecurity -&gt; System.Threading.Semaphore" Usage="new System.Threading.Semaphore (initialCount, maximumCount, name, createdNew, semaphoreSecurity)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="initialCount" Type="System.Int32" />
        <Parameter Name="maximumCount" Type="System.Int32" />
        <Parameter Name="name" Type="System.String" />
        <Parameter Name="createdNew" Type="System.Boolean&amp;" RefType="out" />
        <Parameter Name="semaphoreSecurity" Type="System.Security.AccessControl.SemaphoreSecurity" />
      </Parameters>
      <Docs>
        <param name="initialCount">
          <span data-ttu-id="35108-210">The initial number of requests for the semaphore that can be satisfied concurrently.</span>
          <span class="sxs-lookup">
            <span data-stu-id="35108-210">The initial number of requests for the semaphore that can be satisfied concurrently.</span>
          </span>
        </param>
        <param name="maximumCount">
          <span data-ttu-id="35108-211">The maximum number of requests for the semaphore that can be satisfied concurrently.</span>
          <span class="sxs-lookup">
            <span data-stu-id="35108-211">The maximum number of requests for the semaphore that can be satisfied concurrently.</span>
          </span>
        </param>
        <param name="name">
          <span data-ttu-id="35108-212">The name of a named system semaphore object.</span>
          <span class="sxs-lookup">
            <span data-stu-id="35108-212">The name of a named system semaphore object.</span>
          </span>
        </param>
        <param name="createdNew">
          <span data-ttu-id="35108-213">When this method returns, contains <see langword="true" /> if a local semaphore was created (that is, if <c>name</c> is <see langword="null" /> or an empty string) or if the specified named system semaphore was created; <see langword="false" /> if the specified named system semaphore already existed.</span>
          <span class="sxs-lookup">
            <span data-stu-id="35108-213">When this method returns, contains <see langword="true" /> if a local semaphore was created (that is, if <c>name</c> is <see langword="null" /> or an empty string) or if the specified named system semaphore was created; <see langword="false" /> if the specified named system semaphore already existed.</span>
          </span>
          <span data-ttu-id="35108-214">This parameter is passed uninitialized.</span>
          <span class="sxs-lookup">
            <span data-stu-id="35108-214">This parameter is passed uninitialized.</span>
          </span>
        </param>
        <param name="semaphoreSecurity">
          <span data-ttu-id="35108-215">A <see cref="T:System.Security.AccessControl.SemaphoreSecurity" /> object that represents the access control security to be applied to the named system semaphore.</span>
          <span class="sxs-lookup">
            <span data-stu-id="35108-215">A <see cref="T:System.Security.AccessControl.SemaphoreSecurity" /> object that represents the access control security to be applied to the named system semaphore.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="35108-216">Initializes a new instance of the <see cref="T:System.Threading.Semaphore" /> class, specifying the initial number of entries and the maximum number of concurrent entries, optionally specifying the name of a system semaphore object, specifying a variable that receives a value indicating whether a new system semaphore was created, and specifying security access control for the system semaphore.</span>
          <span class="sxs-lookup">
            <span data-stu-id="35108-216">Initializes a new instance of the <see cref="T:System.Threading.Semaphore" /> class, specifying the initial number of entries and the maximum number of concurrent entries, optionally specifying the name of a system semaphore object, specifying a variable that receives a value indicating whether a new system semaphore was created, and specifying security access control for the system semaphore.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="35108-217">Этот конструктор используется для применения управления доступом для именованного системного семафора, при его создании, чтобы предотвратить возможность управления семафора другого кода.</span><span class="sxs-lookup"><span data-stu-id="35108-217">Use this constructor to apply access control security to a named system semaphore when it is created, preventing other code from taking control of the semaphore.</span></span>  
  
 <span data-ttu-id="35108-218">Этот конструктор инициализирует <xref:System.Threading.Semaphore> , представляющий именованный системный семафор.</span><span class="sxs-lookup"><span data-stu-id="35108-218">This constructor initializes a <xref:System.Threading.Semaphore> object that represents a named system semaphore.</span></span> <span data-ttu-id="35108-219">Вы можете создать несколько <xref:System.Threading.Semaphore> объекты, представляющие же именованный семафор.</span><span class="sxs-lookup"><span data-stu-id="35108-219">You can create multiple <xref:System.Threading.Semaphore> objects that represent the same named system semaphore.</span></span>  
  
 <span data-ttu-id="35108-220">Если именованный системный семафор не существует, он создается с указанного элемента управления доступом.</span><span class="sxs-lookup"><span data-stu-id="35108-220">If the named system semaphore does not exist, it is created with the specified access control security.</span></span> <span data-ttu-id="35108-221">Если именованный семафор существует, указанный управления доступом учитывается.</span><span class="sxs-lookup"><span data-stu-id="35108-221">If the named semaphore exists, the specified access control security is ignored.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="35108-222">Вызывающий объект имеет полный контроль над только что созданный <xref:System.Threading.Semaphore> объект, даже если `semaphoreSecurity` запрещает или не удалось предоставить некоторые права доступа для текущего пользователя.</span><span class="sxs-lookup"><span data-stu-id="35108-222">The caller has full control over the newly created <xref:System.Threading.Semaphore> object even if `semaphoreSecurity` denies or fails to grant some access rights to the current user.</span></span> <span data-ttu-id="35108-223">Тем не менее если текущий пользователь пытается получить другой <xref:System.Threading.Semaphore> объекта для представления же именованный семафор, с помощью конструктора или <xref:System.Threading.Semaphore.OpenExisting%2A> метод применения управления доступом Windows.</span><span class="sxs-lookup"><span data-stu-id="35108-223">However, if the current user attempts to get another <xref:System.Threading.Semaphore> object to represent the same named semaphore, using either a constructor or the <xref:System.Threading.Semaphore.OpenExisting%2A> method, Windows access control security is applied.</span></span>  
  
 <span data-ttu-id="35108-224">Если именованный системный семафор не существует, он создается с начальным и максимальное значение, определяемое `initialCount` и `maximumCount`.</span><span class="sxs-lookup"><span data-stu-id="35108-224">If the named system semaphore does not exist, it is created with the initial count and maximum count specified by `initialCount` and `maximumCount`.</span></span> <span data-ttu-id="35108-225">Если именованный системный семафор уже существует, `initialCount` и `maximumCount` не используются, несмотря на то, что недопустимые значения по-прежнему вызывать исключения.</span><span class="sxs-lookup"><span data-stu-id="35108-225">If the named system semaphore already exists, `initialCount` and `maximumCount` are not used, although invalid values still cause exceptions.</span></span> <span data-ttu-id="35108-226">Используйте `createdNew` параметр, чтобы определить, был ли создан системный семафор этим конструктором.</span><span class="sxs-lookup"><span data-stu-id="35108-226">Use the `createdNew` parameter to determine whether the system semaphore was created by this constructor.</span></span>  
  
 <span data-ttu-id="35108-227">Если `initialCount` — меньше, чем `maximumCount`, и `createdNew` — `true`, действует так же, как если бы метод текущего потока <xref:System.Threading.WaitHandle.WaitOne%2A> (`maximumCount` минус `initialCount`) раз.</span><span class="sxs-lookup"><span data-stu-id="35108-227">If `initialCount` is less than `maximumCount`, and `createdNew` is `true`, the effect is the same as if the current thread had called <xref:System.Threading.WaitHandle.WaitOne%2A> (`maximumCount` minus `initialCount`) times.</span></span>  
  
 <span data-ttu-id="35108-228">Если указать `null` или пустую строку для `name`, создан локальный семафор, как если бы Вы вызвали <xref:System.Threading.Semaphore.%23ctor%28System.Int32%2CSystem.Int32%29> перегрузку конструктора.</span><span class="sxs-lookup"><span data-stu-id="35108-228">If you specify `null` or an empty string for `name`, a local semaphore is created, as if you had called the <xref:System.Threading.Semaphore.%23ctor%28System.Int32%2CSystem.Int32%29> constructor overload.</span></span> <span data-ttu-id="35108-229">В этом случае `createdNew` всегда `true`.</span><span class="sxs-lookup"><span data-stu-id="35108-229">In this case, `createdNew` is always `true`.</span></span>  
  
 <span data-ttu-id="35108-230">Так как именованные семафоры относятся видимой во всей операционной системы, они могут использоваться для координирования использования ресурсов через границы процессов.</span><span class="sxs-lookup"><span data-stu-id="35108-230">Because named semaphores are visible throughout the operating system, they can be used to coordinate resource use across process boundaries.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="35108-231">В следующем примере кода демонстрируется поведение между процессами именованного семафора с безопасность управления доступом.</span><span class="sxs-lookup"><span data-stu-id="35108-231">The following code example demonstrates the cross-process behavior of a named semaphore with access control security.</span></span> <span data-ttu-id="35108-232">В примере используется <xref:System.Threading.Semaphore.OpenExisting%28System.String%29> перегруженный метод для проверки на существование именованного семафора.</span><span class="sxs-lookup"><span data-stu-id="35108-232">The example uses the <xref:System.Threading.Semaphore.OpenExisting%28System.String%29> method overload to test for the existence of a named semaphore.</span></span> <span data-ttu-id="35108-233">Если семафор не существует, он создается с максимальное число 2 и управления доступом, которые запрещают текущему пользователю использовать семафор, но не дает право на чтение и изменение разрешений семафора.</span><span class="sxs-lookup"><span data-stu-id="35108-233">If the semaphore does not exist, it is created with a maximum count of two and with access control security that denies the current user the right to use the semaphore but grants the right to read and change permissions on the semaphore.</span></span> <span data-ttu-id="35108-234">Если запустить скомпилированный пример два командных окна, вторую копию вызовет нарушение прав доступа при вызове <xref:System.Threading.Semaphore.OpenExisting%28System.String%29> метод.</span><span class="sxs-lookup"><span data-stu-id="35108-234">If you run the compiled example from two command windows, the second copy will throw an access violation exception on the call to the <xref:System.Threading.Semaphore.OpenExisting%28System.String%29> method.</span></span> <span data-ttu-id="35108-235">Порождено исключение, и в примере используется <xref:System.Threading.Semaphore.OpenExisting%28System.String%2CSystem.Security.AccessControl.SemaphoreRights%29> перегрузку метода открыть семафор с прав, необходимых для чтения и изменения разрешений.</span><span class="sxs-lookup"><span data-stu-id="35108-235">The exception is caught, and the example uses the <xref:System.Threading.Semaphore.OpenExisting%28System.String%2CSystem.Security.AccessControl.SemaphoreRights%29> method overload to open the semaphore with the rights needed to read and change the permissions.</span></span>  
  
 <span data-ttu-id="35108-236">После изменения разрешений, семафор открывается с права, необходимые для ввода и выпуска.</span><span class="sxs-lookup"><span data-stu-id="35108-236">After the permissions are changed, the semaphore is opened with the rights required to enter and release.</span></span> <span data-ttu-id="35108-237">При запуске скомпилированный пример третий окно командной строки, он выполняется, под новые разрешения.</span><span class="sxs-lookup"><span data-stu-id="35108-237">If you run the compiled example from a third command window, it runs using the new permissions.</span></span>  
  
 [!code-cpp[System.Threading.Semaphore.ctor named 5a#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Threading.Semaphore.ctor named 5a/CPP/source.cpp#1)]
 [!code-csharp[System.Threading.Semaphore.ctor named 5a#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Threading.Semaphore.ctor named 5a/CS/source.cs#1)]
 [!code-vb[System.Threading.Semaphore.ctor named 5a#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Threading.Semaphore.ctor named 5a/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="35108-238">
            <paramref name="initialCount" /> is greater than <paramref name="maximumCount" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="35108-238">
              <paramref name="initialCount" /> is greater than <paramref name="maximumCount" />.</span>
          </span>
          <span data-ttu-id="35108-239">-or-  <paramref name="name" /> is longer than 260 characters.</span>
          <span class="sxs-lookup">
            <span data-stu-id="35108-239">-or-  <paramref name="name" /> is longer than 260 characters.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <span data-ttu-id="35108-240">
            <paramref name="maximumCount" /> is less than 1.</span>
          <span class="sxs-lookup">
            <span data-stu-id="35108-240">
              <paramref name="maximumCount" /> is less than 1.</span>
          </span>
          <span data-ttu-id="35108-241">-or-  <paramref name="initialCount" /> is less than 0.</span>
          <span class="sxs-lookup">
            <span data-stu-id="35108-241">-or-  <paramref name="initialCount" /> is less than 0.</span>
          </span>
        </exception>
        <exception cref="T:System.UnauthorizedAccessException">
          <span data-ttu-id="35108-242">The named semaphore exists and has access control security, and the user does not have <see cref="F:System.Security.AccessControl.SemaphoreRights.FullControl" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="35108-242">The named semaphore exists and has access control security, and the user does not have <see cref="F:System.Security.AccessControl.SemaphoreRights.FullControl" />.</span>
          </span>
        </exception>
        <exception cref="T:System.IO.IOException">
          <span data-ttu-id="35108-243">A Win32 error occurred.</span>
          <span class="sxs-lookup">
            <span data-stu-id="35108-243">A Win32 error occurred.</span>
          </span>
        </exception>
        <exception cref="T:System.Threading.WaitHandleCannotBeOpenedException">
          <span data-ttu-id="35108-244">The named semaphore cannot be created, perhaps because a wait handle of a different type has the same name.</span>
          <span class="sxs-lookup">
            <span data-stu-id="35108-244">The named semaphore cannot be created, perhaps because a wait handle of a different type has the same name.</span>
          </span>
        </exception>
        <permission cref="T:System.Security.Permissions.SecurityPermission">
          <span data-ttu-id="35108-245">для вызова неуправляемого кода для создания именованного системного семафора.</span>
          <span class="sxs-lookup">
            <span data-stu-id="35108-245">for calling unmanaged code to create a named system semaphore.</span>
          </span>
          <span data-ttu-id="35108-246">Связанное перечисление: <see cref="F:System.Security.Permissions.SecurityPermissionFlag.UnmanagedCode" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="35108-246">Associated enumeration: <see cref="F:System.Security.Permissions.SecurityPermissionFlag.UnmanagedCode" />.</span>
          </span>
          <span data-ttu-id="35108-247">Если не удается найти <see cref="F:System.Security.Permissions.SecurityAction.LinkDemand" />, он проходит по иерархии класса, пока не найдет типом-примитивом.</span>
          <span class="sxs-lookup">
            <span data-stu-id="35108-247">Security action: <see cref="F:System.Security.Permissions.SecurityAction.LinkDemand" />.</span>
          </span>
        </permission>
      </Docs>
    </Member>
    <Member MemberName="GetAccessControl">
      <MemberSignature Language="C#" Value="public System.Security.AccessControl.SemaphoreSecurity GetAccessControl ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Security.AccessControl.SemaphoreSecurity GetAccessControl() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Semaphore.GetAccessControl" />
      <MemberSignature Language="VB.NET" Value="Public Function GetAccessControl () As SemaphoreSecurity" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Security::AccessControl::SemaphoreSecurity ^ GetAccessControl();" />
      <MemberSignature Language="F#" Value="member this.GetAccessControl : unit -&gt; System.Security.AccessControl.SemaphoreSecurity" Usage="semaphore.GetAccessControl " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Security.AccessControl.SemaphoreSecurity</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="35108-248">Gets the access control security for a named system semaphore.</span>
          <span class="sxs-lookup">
            <span data-stu-id="35108-248">Gets the access control security for a named system semaphore.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="35108-249">A <see cref="T:System.Security.AccessControl.SemaphoreSecurity" /> object that represents the access control security for the named system semaphore.</span>
          <span class="sxs-lookup">
            <span data-stu-id="35108-249">A <see cref="T:System.Security.AccessControl.SemaphoreSecurity" /> object that represents the access control security for the named system semaphore.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="35108-250"><xref:System.Threading.Semaphore.GetAccessControl%2A> Методе используется комбинация флагов (в сочетании с помощью побитовой операции OR) для поиска для разрешения: <xref:System.Security.AccessControl.AccessControlSections.Access?displayProperty=nameWithType>, <xref:System.Security.AccessControl.AccessControlSections.Owner?displayProperty=nameWithType>, и <xref:System.Security.AccessControl.AccessControlSections.Group?displayProperty=nameWithType>.</span><span class="sxs-lookup"><span data-stu-id="35108-250">The <xref:System.Threading.Semaphore.GetAccessControl%2A> method uses the following combination of flags (combined using the bitwise OR operation) to search for permissions: <xref:System.Security.AccessControl.AccessControlSections.Access?displayProperty=nameWithType>, <xref:System.Security.AccessControl.AccessControlSections.Owner?displayProperty=nameWithType>, and <xref:System.Security.AccessControl.AccessControlSections.Group?displayProperty=nameWithType>.</span></span>  
  
 <span data-ttu-id="35108-251">Пользователь должен иметь <xref:System.Security.AccessControl.SemaphoreRights.ReadPermissions?displayProperty=nameWithType> права для вызова этого метода и семафора должен быть открыт с <xref:System.Security.AccessControl.SemaphoreRights.ReadPermissions?displayProperty=nameWithType> права.</span><span class="sxs-lookup"><span data-stu-id="35108-251">The user must have <xref:System.Security.AccessControl.SemaphoreRights.ReadPermissions?displayProperty=nameWithType> rights to call this method, and the semaphore must have been opened with <xref:System.Security.AccessControl.SemaphoreRights.ReadPermissions?displayProperty=nameWithType> rights.</span></span>  
  
 <span data-ttu-id="35108-252">На локальный семафор управления доступом не имеет значения.</span><span class="sxs-lookup"><span data-stu-id="35108-252">On a local semaphore, access control security is irrelevant.</span></span> <span data-ttu-id="35108-253">Если <xref:System.Threading.Semaphore> объект не представляет именованный системный семафор, этот метод возвращает <xref:System.Security.AccessControl.SemaphoreSecurity> объект, который предоставляет все права всем пользователям.</span><span class="sxs-lookup"><span data-stu-id="35108-253">If the <xref:System.Threading.Semaphore> object does not represent a named system semaphore, this method returns a <xref:System.Security.AccessControl.SemaphoreSecurity> object that grants all rights to any user.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="35108-254">В следующем примере кода демонстрируется поведение между процессами именованного семафора с безопасность управления доступом.</span><span class="sxs-lookup"><span data-stu-id="35108-254">The following code example demonstrates the cross-process behavior of a named semaphore with access control security.</span></span> <span data-ttu-id="35108-255">В примере используется <xref:System.Threading.Semaphore.OpenExisting%28System.String%29> перегруженный метод для проверки на существование именованного семафора.</span><span class="sxs-lookup"><span data-stu-id="35108-255">The example uses the <xref:System.Threading.Semaphore.OpenExisting%28System.String%29> method overload to test for the existence of a named semaphore.</span></span>  
  
 <span data-ttu-id="35108-256">Если семафор не существует, он создается с максимальное число 2 и управления доступом, который запрещает текущий пользователь право использовать семафор, но не дает право на чтение и изменение разрешений семафора.</span><span class="sxs-lookup"><span data-stu-id="35108-256">If the semaphore does not exist, it is created with a maximum count of two and with access control security that denies the current user the right to use the semaphore, but grants the right to read and change permissions on the semaphore.</span></span>  
  
 <span data-ttu-id="35108-257">Если запустить скомпилированный пример два командных окна, вторую копию вызовет нарушение прав доступа при вызове <xref:System.Threading.Semaphore.OpenExisting%28System.String%29> метод.</span><span class="sxs-lookup"><span data-stu-id="35108-257">If you run the compiled example from two command windows, the second copy will throw an access violation exception on the call to the <xref:System.Threading.Semaphore.OpenExisting%28System.String%29> method.</span></span> <span data-ttu-id="35108-258">Порождено исключение, и в примере используется <xref:System.Threading.Semaphore.OpenExisting%28System.String%2CSystem.Security.AccessControl.SemaphoreRights%29> перегрузку метода открыть семафор с прав, необходимых для чтения и изменения разрешений.</span><span class="sxs-lookup"><span data-stu-id="35108-258">The exception is caught, and the example uses the <xref:System.Threading.Semaphore.OpenExisting%28System.String%2CSystem.Security.AccessControl.SemaphoreRights%29> method overload to open the semaphore with the rights needed to read and change the permissions.</span></span> <span data-ttu-id="35108-259">Безопасность управления доступом для системного семафора получается с помощью <xref:System.Threading.Semaphore.GetAccessControl%2A> метод.</span><span class="sxs-lookup"><span data-stu-id="35108-259">The access control security for the system semaphore is obtained using the <xref:System.Threading.Semaphore.GetAccessControl%2A> method.</span></span>  
  
 <span data-ttu-id="35108-260">После изменения разрешений, семафор открывается с права, необходимые для ввода и выпуска.</span><span class="sxs-lookup"><span data-stu-id="35108-260">After the permissions are changed, the semaphore is opened with the rights required to enter and release.</span></span> <span data-ttu-id="35108-261">При запуске скомпилированный пример третий окно командной строки, он выполняется, под новые разрешения.</span><span class="sxs-lookup"><span data-stu-id="35108-261">If you run the compiled example from a third command window, it runs using the new permissions.</span></span>  
  
 [!code-cpp[System.Threading.Semaphore.ctor named 5a#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Threading.Semaphore.ctor named 5a/CPP/source.cpp#1)]
 [!code-csharp[System.Threading.Semaphore.ctor named 5a#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Threading.Semaphore.ctor named 5a/CS/source.cs#1)]
 [!code-vb[System.Threading.Semaphore.ctor named 5a#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Threading.Semaphore.ctor named 5a/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.UnauthorizedAccessException">
          <span data-ttu-id="35108-262">The current <see cref="T:System.Threading.Semaphore" /> object represents a named system semaphore, and the user does not have <see cref="F:System.Security.AccessControl.SemaphoreRights.ReadPermissions" /> rights.</span>
          <span class="sxs-lookup">
            <span data-stu-id="35108-262">The current <see cref="T:System.Threading.Semaphore" /> object represents a named system semaphore, and the user does not have <see cref="F:System.Security.AccessControl.SemaphoreRights.ReadPermissions" /> rights.</span>
          </span>
          <span data-ttu-id="35108-263">-or-  The current <see cref="T:System.Threading.Semaphore" /> object represents a named system semaphore and was not opened with <see cref="F:System.Security.AccessControl.SemaphoreRights.ReadPermissions" /> rights.</span>
          <span class="sxs-lookup">
            <span data-stu-id="35108-263">-or-  The current <see cref="T:System.Threading.Semaphore" /> object represents a named system semaphore and was not opened with <see cref="F:System.Security.AccessControl.SemaphoreRights.ReadPermissions" /> rights.</span>
          </span>
        </exception>
        <exception cref="T:System.NotSupportedException">
          <span data-ttu-id="35108-264">Not supported for Windows 98 or Windows Millennium Edition.</span>
          <span class="sxs-lookup">
            <span data-stu-id="35108-264">Not supported for Windows 98 or Windows Millennium Edition.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <MemberGroup MemberName="OpenExisting">
      <AssemblyInfo>
        <AssemblyName>System.Threading</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="35108-265">Opens a specified named semaphore, if it already exists.</span>
          <span class="sxs-lookup">
            <span data-stu-id="35108-265">Opens a specified named semaphore, if it already exists.</span>
          </span>
        </summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="OpenExisting">
      <MemberSignature Language="C#" Value="public static System.Threading.Semaphore OpenExisting (string name);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Threading.Semaphore OpenExisting(string name) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Semaphore.OpenExisting(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function OpenExisting (name As String) As Semaphore" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Threading::Semaphore ^ OpenExisting(System::String ^ name);" />
      <MemberSignature Language="F#" Value="static member OpenExisting : string -&gt; System.Threading.Semaphore" Usage="System.Threading.Semaphore.OpenExisting name" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Semaphore</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="name">
          <span data-ttu-id="35108-266">The name of the system semaphore to open.</span>
          <span class="sxs-lookup">
            <span data-stu-id="35108-266">The name of the system semaphore to open.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="35108-267">Opens the specified named semaphore, if it already exists.</span>
          <span class="sxs-lookup">
            <span data-stu-id="35108-267">Opens the specified named semaphore, if it already exists.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="35108-268">An object that represents the named system semaphore.</span>
          <span class="sxs-lookup">
            <span data-stu-id="35108-268">An object that represents the named system semaphore.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="35108-269"><xref:System.Threading.Semaphore.OpenExisting%2A> Метод пытается открыть указанный именованный семафор.</span><span class="sxs-lookup"><span data-stu-id="35108-269">The <xref:System.Threading.Semaphore.OpenExisting%2A> method tries to open the specified named semaphore.</span></span> <span data-ttu-id="35108-270">Если системный семафор не существует, этот метод выдает исключение вместо создания системного семафора.</span><span class="sxs-lookup"><span data-stu-id="35108-270">If the system semaphore does not exist, this method throws an exception instead of creating the system semaphore.</span></span> <span data-ttu-id="35108-271">Чтобы создать системный семафор, если он еще не существует, используйте один из <xref:System.Threading.Semaphore.%23ctor%2A> конструкторы, которые имеет `name` параметра.</span><span class="sxs-lookup"><span data-stu-id="35108-271">To create the system semaphore when it does not already exist, use one of the <xref:System.Threading.Semaphore.%23ctor%2A> constructors that has a `name` parameter.</span></span>  
  
 <span data-ttu-id="35108-272">Несколько вызовов этого метода, используйте то же значение для `name` не возвращают обязательно же <xref:System.Threading.Semaphore> объекта, несмотря на то, что объекты, возвращаемые представляют же именованный семафор.</span><span class="sxs-lookup"><span data-stu-id="35108-272">Multiple calls to this method that use the same value for `name` do not necessarily return the same <xref:System.Threading.Semaphore> object, even though the objects that are returned represent the same named system semaphore.</span></span>  
  
 <span data-ttu-id="35108-273">Эта перегрузка метода эквивалентен вызову <xref:System.Threading.Semaphore.OpenExisting%2A> перегрузку метода с указанием <xref:System.Security.AccessControl.SemaphoreRights.Synchronize?displayProperty=nameWithType> и <xref:System.Security.AccessControl.SemaphoreRights.Modify?displayProperty=nameWithType> права, объединяются с помощью побитовой операции или.</span><span class="sxs-lookup"><span data-stu-id="35108-273">This method overload is equivalent to calling the <xref:System.Threading.Semaphore.OpenExisting%2A> method overload and specifying <xref:System.Security.AccessControl.SemaphoreRights.Synchronize?displayProperty=nameWithType> and <xref:System.Security.AccessControl.SemaphoreRights.Modify?displayProperty=nameWithType> rights, combined by using the bitwise OR operation.</span></span>  
  
 <span data-ttu-id="35108-274">Указание <xref:System.Security.AccessControl.SemaphoreRights.Synchronize?displayProperty=nameWithType> флаг позволяет потоку в семафор и указав <xref:System.Security.AccessControl.SemaphoreRights.Modify?displayProperty=nameWithType> флаг позволяет потоку на вызов метода <xref:System.Threading.Semaphore.Release%2A> метод.</span><span class="sxs-lookup"><span data-stu-id="35108-274">Specifying the <xref:System.Security.AccessControl.SemaphoreRights.Synchronize?displayProperty=nameWithType> flag allows a thread to enter the semaphore, and specifying the <xref:System.Security.AccessControl.SemaphoreRights.Modify?displayProperty=nameWithType> flag allows a thread to call the <xref:System.Threading.Semaphore.Release%2A> method.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="35108-275">В следующем примере кода демонстрируется поведение между процессами именованного семафора с безопасность управления доступом.</span><span class="sxs-lookup"><span data-stu-id="35108-275">The following code example demonstrates the cross-process behavior of a named semaphore with access control security.</span></span> <span data-ttu-id="35108-276">В примере используется <xref:System.Threading.Semaphore.OpenExisting%28System.String%29> перегруженный метод для проверки на существование именованного семафора.</span><span class="sxs-lookup"><span data-stu-id="35108-276">The example uses the <xref:System.Threading.Semaphore.OpenExisting%28System.String%29> method overload to test for the existence of a named semaphore.</span></span>  
  
 <span data-ttu-id="35108-277">Если семафор не существует, он создается с максимальное число 2 и безопасность управления доступом, которая запрещает текущий пользователь право на использование семафора, но предоставляют право на чтение и изменение разрешений семафора.</span><span class="sxs-lookup"><span data-stu-id="35108-277">If the semaphore does not exist, it is created with a maximum count of two and with access control security that denies the current user the right to use the semaphore, but which grants the right to read and change permissions on the semaphore.</span></span>  
  
 <span data-ttu-id="35108-278">Если запустить скомпилированный пример два командных окна, вторую копию вызовет нарушение прав доступа при вызове <xref:System.Threading.Semaphore.OpenExisting%28System.String%29> перегрузки метода.</span><span class="sxs-lookup"><span data-stu-id="35108-278">If you run the compiled example from two command windows, the second copy will throw an access violation exception on the call to the <xref:System.Threading.Semaphore.OpenExisting%28System.String%29> method overload.</span></span> <span data-ttu-id="35108-279">Порождено исключение, и в примере используется <xref:System.Threading.Semaphore.OpenExisting%28System.String%2CSystem.Security.AccessControl.SemaphoreRights%29> перегрузку метода открыть семафор с прав, необходимых для чтения и изменения разрешений.</span><span class="sxs-lookup"><span data-stu-id="35108-279">The exception is caught, and the example uses the <xref:System.Threading.Semaphore.OpenExisting%28System.String%2CSystem.Security.AccessControl.SemaphoreRights%29> method overload to open the semaphore with the rights needed to read and change the permissions.</span></span>  
  
 <span data-ttu-id="35108-280">После изменения разрешений, семафор открывается с права, необходимые для ввода и освободите его.</span><span class="sxs-lookup"><span data-stu-id="35108-280">After the permissions are changed, the semaphore is opened with the rights required to enter and release it.</span></span> <span data-ttu-id="35108-281">При запуске скомпилированный пример третий окно командной строки, он выполняется, под новые разрешения.</span><span class="sxs-lookup"><span data-stu-id="35108-281">If you run the compiled example from a third command window, it runs using the new permissions.</span></span>  
  
 [!code-cpp[System.Threading.Semaphore.ctor named 5a#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Threading.Semaphore.ctor named 5a/CPP/source.cpp#1)]
 [!code-csharp[System.Threading.Semaphore.ctor named 5a#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Threading.Semaphore.ctor named 5a/CS/source.cs#1)]
 [!code-vb[System.Threading.Semaphore.ctor named 5a#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Threading.Semaphore.ctor named 5a/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="35108-282">
            <paramref name="name" /> is an empty string.</span>
          <span class="sxs-lookup">
            <span data-stu-id="35108-282">
              <paramref name="name" /> is an empty string.</span>
          </span>
          <span data-ttu-id="35108-283">-or-  <paramref name="name" /> is longer than 260 characters.</span>
          <span class="sxs-lookup">
            <span data-stu-id="35108-283">-or-  <paramref name="name" /> is longer than 260 characters.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="35108-284">
            <paramref name="name" /> is <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="35108-284">
              <paramref name="name" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.Threading.WaitHandleCannotBeOpenedException">
          <span data-ttu-id="35108-285">The named semaphore does not exist.</span>
          <span class="sxs-lookup">
            <span data-stu-id="35108-285">The named semaphore does not exist.</span>
          </span>
        </exception>
        <exception cref="T:System.IO.IOException">
          <span data-ttu-id="35108-286">A Win32 error occurred.</span>
          <span class="sxs-lookup">
            <span data-stu-id="35108-286">A Win32 error occurred.</span>
          </span>
        </exception>
        <exception cref="T:System.UnauthorizedAccessException">
          <span data-ttu-id="35108-287">The named semaphore exists, but the user does not have the security access required to use it.</span>
          <span class="sxs-lookup">
            <span data-stu-id="35108-287">The named semaphore exists, but the user does not have the security access required to use it.</span>
          </span>
        </exception>
        <permission cref="T:System.Security.Permissions.SecurityPermission">
          <span data-ttu-id="35108-288">для вызова неуправляемого кода, чтобы открыть именованный системный семафор.</span>
          <span class="sxs-lookup">
            <span data-stu-id="35108-288">for calling unmanaged code to open a named system semaphore.</span>
          </span>
          <span data-ttu-id="35108-289">Связанное перечисление: <see cref="F:System.Security.Permissions.SecurityPermissionFlag.UnmanagedCode" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="35108-289">Associated enumeration: <see cref="F:System.Security.Permissions.SecurityPermissionFlag.UnmanagedCode" />.</span>
          </span>
          <span data-ttu-id="35108-290">Если не удается найти <see cref="F:System.Security.Permissions.SecurityAction.LinkDemand" />, он проходит по иерархии класса, пока не найдет типом-примитивом.</span>
          <span class="sxs-lookup">
            <span data-stu-id="35108-290">Security action: <see cref="F:System.Security.Permissions.SecurityAction.LinkDemand" />.</span>
          </span>
        </permission>
      </Docs>
    </Member>
    <Member MemberName="OpenExisting">
      <MemberSignature Language="C#" Value="public static System.Threading.Semaphore OpenExisting (string name, System.Security.AccessControl.SemaphoreRights rights);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Threading.Semaphore OpenExisting(string name, valuetype System.Security.AccessControl.SemaphoreRights rights) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Semaphore.OpenExisting(System.String,System.Security.AccessControl.SemaphoreRights)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function OpenExisting (name As String, rights As SemaphoreRights) As Semaphore" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Threading::Semaphore ^ OpenExisting(System::String ^ name, System::Security::AccessControl::SemaphoreRights rights);" />
      <MemberSignature Language="F#" Value="static member OpenExisting : string * System.Security.AccessControl.SemaphoreRights -&gt; System.Threading.Semaphore" Usage="System.Threading.Semaphore.OpenExisting (name, rights)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Semaphore</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
        <Parameter Name="rights" Type="System.Security.AccessControl.SemaphoreRights" />
      </Parameters>
      <Docs>
        <param name="name">
          <span data-ttu-id="35108-291">The name of the system semaphore to open.</span>
          <span class="sxs-lookup">
            <span data-stu-id="35108-291">The name of the system semaphore to open.</span>
          </span>
        </param>
        <param name="rights">
          <span data-ttu-id="35108-292">A bitwise combination of the enumeration values that represent the desired security access.</span>
          <span class="sxs-lookup">
            <span data-stu-id="35108-292">A bitwise combination of the enumeration values that represent the desired security access.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="35108-293">Opens the specified named semaphore, if it already exists, with the desired security access.</span>
          <span class="sxs-lookup">
            <span data-stu-id="35108-293">Opens the specified named semaphore, if it already exists, with the desired security access.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="35108-294">An object that represents the named system semaphore.</span>
          <span class="sxs-lookup">
            <span data-stu-id="35108-294">An object that represents the named system semaphore.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="35108-295">`rights` Параметр должен содержать <xref:System.Security.AccessControl.SemaphoreRights.Synchronize?displayProperty=nameWithType> флаг, чтобы разрешить потоков в семафор и <xref:System.Security.AccessControl.SemaphoreRights.Modify?displayProperty=nameWithType> флаг, чтобы разрешить потокам вызывать <xref:System.Threading.Semaphore.Release%2A> метод.</span><span class="sxs-lookup"><span data-stu-id="35108-295">The `rights` parameter must include the <xref:System.Security.AccessControl.SemaphoreRights.Synchronize?displayProperty=nameWithType> flag to allow threads to enter the semaphore, and the <xref:System.Security.AccessControl.SemaphoreRights.Modify?displayProperty=nameWithType> flag to allow threads to call the <xref:System.Threading.Semaphore.Release%2A> method.</span></span>  
  
 <span data-ttu-id="35108-296"><xref:System.Threading.Semaphore.OpenExisting%2A> Метод пытается открыть существующий именованный семафор.</span><span class="sxs-lookup"><span data-stu-id="35108-296">The <xref:System.Threading.Semaphore.OpenExisting%2A> method tries to open an existing named semaphore.</span></span> <span data-ttu-id="35108-297">Если системный семафор не существует, этот метод выдает исключение вместо создания системного семафора.</span><span class="sxs-lookup"><span data-stu-id="35108-297">If the system semaphore does not exist, this method throws an exception instead of creating the system semaphore.</span></span> <span data-ttu-id="35108-298">Чтобы создать системный семафор, если он еще не существует, используйте один из <xref:System.Threading.Semaphore.%23ctor%2A> конструкторы, которые имеет `name` параметра.</span><span class="sxs-lookup"><span data-stu-id="35108-298">To create the system semaphore when it does not already exist, use one of the <xref:System.Threading.Semaphore.%23ctor%2A> constructors that has a `name` parameter.</span></span>  
  
 <span data-ttu-id="35108-299">Несколько вызовов этого метода, используйте то же значение для `name` не возвращают обязательно же <xref:System.Threading.Semaphore> объекта, несмотря на то, что объекты, возвращаемые представляют же именованный семафор.</span><span class="sxs-lookup"><span data-stu-id="35108-299">Multiple calls to this method that use the same value for `name` do not necessarily return the same <xref:System.Threading.Semaphore> object, even though the objects that are returned represent the same named system semaphore.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="35108-300">В следующем примере кода демонстрируется поведение между процессами именованного семафора с безопасность управления доступом.</span><span class="sxs-lookup"><span data-stu-id="35108-300">The following code example demonstrates the cross-process behavior of a named semaphore with access control security.</span></span> <span data-ttu-id="35108-301">В примере используется <xref:System.Threading.Semaphore.OpenExisting%28System.String%29> перегруженный метод для проверки на существование именованного семафора.</span><span class="sxs-lookup"><span data-stu-id="35108-301">The example uses the <xref:System.Threading.Semaphore.OpenExisting%28System.String%29> method overload to test for the existence of a named semaphore.</span></span>  
  
 <span data-ttu-id="35108-302">Если семафор не существует, он создается с максимальное число 2 и управления доступом, который запрещает текущий пользователь право использовать семафор, но не дает право на чтение и изменение разрешений семафора.</span><span class="sxs-lookup"><span data-stu-id="35108-302">If the semaphore does not exist, it is created with a maximum count of two and with access control security that denies the current user the right to use the semaphore, but grants the right to read and change permissions on the semaphore.</span></span>  
  
 <span data-ttu-id="35108-303">Если запустить скомпилированный пример два командных окна, вторую копию вызовет нарушение прав доступа при вызове <xref:System.Threading.Semaphore.OpenExisting%28System.String%29> метод.</span><span class="sxs-lookup"><span data-stu-id="35108-303">If you run the compiled example from two command windows, the second copy will throw an access violation exception on the call to the <xref:System.Threading.Semaphore.OpenExisting%28System.String%29> method.</span></span> <span data-ttu-id="35108-304">Порождено исключение, и в примере используется <xref:System.Threading.Semaphore.OpenExisting%28System.String%2CSystem.Security.AccessControl.SemaphoreRights%29> перегрузку метода открыть семафор с прав, необходимых для чтения и изменения разрешений.</span><span class="sxs-lookup"><span data-stu-id="35108-304">The exception is caught, and the example uses the <xref:System.Threading.Semaphore.OpenExisting%28System.String%2CSystem.Security.AccessControl.SemaphoreRights%29> method overload to open the semaphore with the rights needed to read and change the permissions.</span></span>  
  
 <span data-ttu-id="35108-305">После изменения разрешений, семафор открывается с права, необходимые для ввода и освободите его.</span><span class="sxs-lookup"><span data-stu-id="35108-305">After the permissions are changed, the semaphore is opened with the rights required to enter and release it.</span></span> <span data-ttu-id="35108-306">При запуске скомпилированный пример третий окно командной строки, он выполняется, под новые разрешения.</span><span class="sxs-lookup"><span data-stu-id="35108-306">If you run the compiled example from a third command window, it runs using the new permissions.</span></span>  
  
 [!code-cpp[System.Threading.Semaphore.ctor named 5a#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Threading.Semaphore.ctor named 5a/CPP/source.cpp#1)]
 [!code-csharp[System.Threading.Semaphore.ctor named 5a#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Threading.Semaphore.ctor named 5a/CS/source.cs#1)]
 [!code-vb[System.Threading.Semaphore.ctor named 5a#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Threading.Semaphore.ctor named 5a/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="35108-307">
            <paramref name="name" /> is an empty string.</span>
          <span class="sxs-lookup">
            <span data-stu-id="35108-307">
              <paramref name="name" /> is an empty string.</span>
          </span>
          <span data-ttu-id="35108-308">-or-  <paramref name="name" /> is longer than 260 characters.</span>
          <span class="sxs-lookup">
            <span data-stu-id="35108-308">-or-  <paramref name="name" /> is longer than 260 characters.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="35108-309">
            <paramref name="name" /> is <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="35108-309">
              <paramref name="name" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.Threading.WaitHandleCannotBeOpenedException">
          <span data-ttu-id="35108-310">The named semaphore does not exist.</span>
          <span class="sxs-lookup">
            <span data-stu-id="35108-310">The named semaphore does not exist.</span>
          </span>
        </exception>
        <exception cref="T:System.IO.IOException">
          <span data-ttu-id="35108-311">A Win32 error occurred.</span>
          <span class="sxs-lookup">
            <span data-stu-id="35108-311">A Win32 error occurred.</span>
          </span>
        </exception>
        <exception cref="T:System.UnauthorizedAccessException">
          <span data-ttu-id="35108-312">The named semaphore exists, but the user does not have the desired security access rights.</span>
          <span class="sxs-lookup">
            <span data-stu-id="35108-312">The named semaphore exists, but the user does not have the desired security access rights.</span>
          </span>
        </exception>
        <permission cref="T:System.Security.Permissions.SecurityPermission">
          <span data-ttu-id="35108-313">для вызова неуправляемого кода для создания именованного системного семафора.</span>
          <span class="sxs-lookup">
            <span data-stu-id="35108-313">for calling unmanaged code to create a named system semaphore.</span>
          </span>
          <span data-ttu-id="35108-314">Связанное перечисление: <see cref="F:System.Security.Permissions.SecurityPermissionFlag.UnmanagedCode" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="35108-314">Associated enumeration: <see cref="F:System.Security.Permissions.SecurityPermissionFlag.UnmanagedCode" />.</span>
          </span>
          <span data-ttu-id="35108-315">Если не удается найти <see cref="F:System.Security.Permissions.SecurityAction.LinkDemand" />, он проходит по иерархии класса, пока не найдет типом-примитивом.</span>
          <span class="sxs-lookup">
            <span data-stu-id="35108-315">Security action: <see cref="F:System.Security.Permissions.SecurityAction.LinkDemand" />.</span>
          </span>
        </permission>
      </Docs>
    </Member>
    <MemberGroup MemberName="Release">
      <AssemblyInfo>
        <AssemblyName>System.Threading</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="35108-316">Exits the semaphore.</span>
          <span class="sxs-lookup">
            <span data-stu-id="35108-316">Exits the semaphore.</span>
          </span>
        </summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Release">
      <MemberSignature Language="C#" Value="public int Release ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance int32 Release() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Semaphore.Release" />
      <MemberSignature Language="VB.NET" Value="Public Function Release () As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; int Release();" />
      <MemberSignature Language="F#" Value="member this.Release : unit -&gt; int" Usage="semaphore.Release " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.ConstrainedExecution.PrePrepareMethod</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Runtime.ConstrainedExecution.ReliabilityContract(System.Runtime.ConstrainedExecution.Consistency.WillNotCorruptState, System.Runtime.ConstrainedExecution.Cer.Success)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="35108-317">Exits the semaphore and returns the previous count.</span>
          <span class="sxs-lookup">
            <span data-stu-id="35108-317">Exits the semaphore and returns the previous count.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="35108-318">The count on the semaphore before the <see cref="Overload:System.Threading.Semaphore.Release" /> method was called.</span>
          <span class="sxs-lookup">
            <span data-stu-id="35108-318">The count on the semaphore before the <see cref="Overload:System.Threading.Semaphore.Release" /> method was called.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="35108-319">Потоки обычно используют <xref:System.Threading.WaitHandle.WaitOne%2A> метод ввести семафор и они обычно данная перегрузка метода для выхода.</span><span class="sxs-lookup"><span data-stu-id="35108-319">Threads typically use the <xref:System.Threading.WaitHandle.WaitOne%2A> method to enter the semaphore, and they typically use this method overload to exit.</span></span>  
  
 <span data-ttu-id="35108-320">Если <xref:System.Threading.SemaphoreFullException> вызывается <xref:System.Threading.Semaphore.Release%2A> метод, он не обязательно на проблему с вызывающего потока.</span><span class="sxs-lookup"><span data-stu-id="35108-320">If a <xref:System.Threading.SemaphoreFullException> is thrown by the <xref:System.Threading.Semaphore.Release%2A> method, it does not necessarily indicate a problem with the calling thread.</span></span> <span data-ttu-id="35108-321">Программная ошибка в другом потоке вызвавшую этот поток из семафора больше раз, чем вход в него.</span><span class="sxs-lookup"><span data-stu-id="35108-321">A programming error in another thread might have caused that thread to exit the semaphore more times than it entered.</span></span>  
  
 <span data-ttu-id="35108-322">Если текущий <xref:System.Threading.Semaphore> представляет именованный системный семафор, пользователь должен иметь <xref:System.Security.AccessControl.SemaphoreRights.Modify?displayProperty=nameWithType> права и семафора должен быть открыт с <xref:System.Security.AccessControl.SemaphoreRights.Modify?displayProperty=nameWithType> права.</span><span class="sxs-lookup"><span data-stu-id="35108-322">If the current <xref:System.Threading.Semaphore> object represents a named system semaphore, the user must have <xref:System.Security.AccessControl.SemaphoreRights.Modify?displayProperty=nameWithType> rights and the semaphore must have been opened with <xref:System.Security.AccessControl.SemaphoreRights.Modify?displayProperty=nameWithType> rights.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="35108-323">В следующем примере кода создается семафор с максимум из трех и начальное число ноль.</span><span class="sxs-lookup"><span data-stu-id="35108-323">The following code example creates a semaphore with a maximum count of three and an initial count of zero.</span></span> <span data-ttu-id="35108-324">В примере запускается пять потоков, которые блокируют ожидание семафора.</span><span class="sxs-lookup"><span data-stu-id="35108-324">The example starts five threads, which block waiting for the semaphore.</span></span> <span data-ttu-id="35108-325">Основной поток использует <xref:System.Threading.Semaphore.Release%28System.Int32%29> перегруженный метод, чтобы увеличить счетчик семафора максимальное значение ограничения, позволяя трех потоков в семафор.</span><span class="sxs-lookup"><span data-stu-id="35108-325">The main thread uses the <xref:System.Threading.Semaphore.Release%28System.Int32%29> method overload to increase the semaphore count to its maximum, allowing three threads to enter the semaphore.</span></span> <span data-ttu-id="35108-326">Каждый поток использует <xref:System.Threading.Thread.Sleep%2A?displayProperty=nameWithType> метод для ожидания в течение одной секунды для имитации работы, а затем вызывает <xref:System.Threading.Semaphore.Release> перегруженный метод, чтобы освободить семафор.</span><span class="sxs-lookup"><span data-stu-id="35108-326">Each thread uses the <xref:System.Threading.Thread.Sleep%2A?displayProperty=nameWithType> method to wait for one second, to simulate work, and then calls the <xref:System.Threading.Semaphore.Release> method overload to release the semaphore.</span></span>  
  
 <span data-ttu-id="35108-327">Каждый раз, когда выпускается семафора, счетчик семафора предыдущих отображается.</span><span class="sxs-lookup"><span data-stu-id="35108-327">Each time the semaphore is released, the previous semaphore count is displayed.</span></span> <span data-ttu-id="35108-328">Консоль сообщения отслеживать использование семафора.</span><span class="sxs-lookup"><span data-stu-id="35108-328">Console messages track semaphore use.</span></span> <span data-ttu-id="35108-329">Интервал имитирующей работу немного увеличивается для каждого потока, чтобы облегчить чтение выходных данных.</span><span class="sxs-lookup"><span data-stu-id="35108-329">The simulated work interval is increased slightly for each thread, to make the output easier to read.</span></span>  
  
 [!code-cpp[System.Threading.Semaphore2#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Threading.Semaphore2/CPP/source.cpp#1)]
 [!code-csharp[System.Threading.Semaphore2#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Threading.Semaphore2/CS/source.cs#1)]
 [!code-vb[System.Threading.Semaphore2#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Threading.Semaphore2/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Threading.SemaphoreFullException">
          <span data-ttu-id="35108-330">The semaphore count is already at the maximum value.</span>
          <span class="sxs-lookup">
            <span data-stu-id="35108-330">The semaphore count is already at the maximum value.</span>
          </span>
        </exception>
        <exception cref="T:System.IO.IOException">
          <span data-ttu-id="35108-331">A Win32 error occurred with a named semaphore.</span>
          <span class="sxs-lookup">
            <span data-stu-id="35108-331">A Win32 error occurred with a named semaphore.</span>
          </span>
        </exception>
        <exception cref="T:System.UnauthorizedAccessException">
          <span data-ttu-id="35108-332">The current semaphore represents a named system semaphore, but the user does not have <see cref="F:System.Security.AccessControl.SemaphoreRights.Modify" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="35108-332">The current semaphore represents a named system semaphore, but the user does not have <see cref="F:System.Security.AccessControl.SemaphoreRights.Modify" />.</span>
          </span>
          <span data-ttu-id="35108-333">-or-  The current semaphore represents a named system semaphore, but it was not opened with <see cref="F:System.Security.AccessControl.SemaphoreRights.Modify" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="35108-333">-or-  The current semaphore represents a named system semaphore, but it was not opened with <see cref="F:System.Security.AccessControl.SemaphoreRights.Modify" />.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="Release">
      <MemberSignature Language="C#" Value="public int Release (int releaseCount);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance int32 Release(int32 releaseCount) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Semaphore.Release(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Function Release (releaseCount As Integer) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; int Release(int releaseCount);" />
      <MemberSignature Language="F#" Value="member this.Release : int -&gt; int" Usage="semaphore.Release releaseCount" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.ConstrainedExecution.ReliabilityContract(System.Runtime.ConstrainedExecution.Consistency.WillNotCorruptState, System.Runtime.ConstrainedExecution.Cer.Success)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="releaseCount" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="releaseCount">
          <span data-ttu-id="35108-334">The number of times to exit the semaphore.</span>
          <span class="sxs-lookup">
            <span data-stu-id="35108-334">The number of times to exit the semaphore.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="35108-335">Exits the semaphore a specified number of times and returns the previous count.</span>
          <span class="sxs-lookup">
            <span data-stu-id="35108-335">Exits the semaphore a specified number of times and returns the previous count.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="35108-336">The count on the semaphore before the <see cref="Overload:System.Threading.Semaphore.Release" /> method was called.</span>
          <span class="sxs-lookup">
            <span data-stu-id="35108-336">The count on the semaphore before the <see cref="Overload:System.Threading.Semaphore.Release" /> method was called.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="35108-337">Если поток вошел в семафор несколько раз, перегрузка метода позволяет счетчик семафора для восстановления с помощью одного вызова.</span><span class="sxs-lookup"><span data-stu-id="35108-337">If a thread has entered the semaphore multiple times, this method overload allows the entire semaphore count to be restored with one call.</span></span>  
  
 <span data-ttu-id="35108-338">Если <xref:System.Threading.SemaphoreFullException> вызывается <xref:System.Threading.Semaphore.Release%2A> метод, он не обязательно на проблему с вызывающего потока.</span><span class="sxs-lookup"><span data-stu-id="35108-338">If a <xref:System.Threading.SemaphoreFullException> is thrown by the <xref:System.Threading.Semaphore.Release%2A> method, it does not necessarily indicate a problem with the calling thread.</span></span> <span data-ttu-id="35108-339">Программная ошибка в другом потоке вызвавшую этот поток из семафора больше раз, чем вход в него.</span><span class="sxs-lookup"><span data-stu-id="35108-339">A programming error in another thread might have caused that thread to exit the semaphore more times than it entered.</span></span>  
  
 <span data-ttu-id="35108-340">Если текущий <xref:System.Threading.Semaphore> представляет именованный системный семафор, пользователь должен иметь <xref:System.Security.AccessControl.SemaphoreRights.Modify?displayProperty=nameWithType> права и семафора должен быть открыт с <xref:System.Security.AccessControl.SemaphoreRights.Modify?displayProperty=nameWithType> права.</span><span class="sxs-lookup"><span data-stu-id="35108-340">If the current <xref:System.Threading.Semaphore> object represents a named system semaphore, the user must have <xref:System.Security.AccessControl.SemaphoreRights.Modify?displayProperty=nameWithType> rights and the semaphore must have been opened with <xref:System.Security.AccessControl.SemaphoreRights.Modify?displayProperty=nameWithType> rights.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="35108-341">В следующем примере кода создается семафор с максимум из трех и начальное число ноль.</span><span class="sxs-lookup"><span data-stu-id="35108-341">The following code example creates a semaphore with a maximum count of three and an initial count of zero.</span></span> <span data-ttu-id="35108-342">В примере запускается пять потоков, которые блокируют ожидание семафора.</span><span class="sxs-lookup"><span data-stu-id="35108-342">The example starts five threads, which block waiting for the semaphore.</span></span> <span data-ttu-id="35108-343">Основной поток использует <xref:System.Threading.Semaphore.Release%28System.Int32%29> перегруженный метод, чтобы увеличить счетчик семафора максимальное значение ограничения, позволяя трех потоков в семафор.</span><span class="sxs-lookup"><span data-stu-id="35108-343">The main thread uses the <xref:System.Threading.Semaphore.Release%28System.Int32%29> method overload to increase the semaphore count to its maximum, allowing three threads to enter the semaphore.</span></span> <span data-ttu-id="35108-344">Каждый поток использует <xref:System.Threading.Thread.Sleep%2A?displayProperty=nameWithType> метод для ожидания в течение одной секунды для имитации работы, а затем вызывает <xref:System.Threading.Semaphore.Release> перегруженный метод, чтобы освободить семафор.</span><span class="sxs-lookup"><span data-stu-id="35108-344">Each thread uses the <xref:System.Threading.Thread.Sleep%2A?displayProperty=nameWithType> method to wait for one second, to simulate work, and then calls the <xref:System.Threading.Semaphore.Release> method overload to release the semaphore.</span></span>  
  
 <span data-ttu-id="35108-345">Каждый раз, когда выпускается семафора, счетчик семафора предыдущих отображается.</span><span class="sxs-lookup"><span data-stu-id="35108-345">Each time the semaphore is released, the previous semaphore count is displayed.</span></span> <span data-ttu-id="35108-346">Консоль сообщения отслеживать использование семафора.</span><span class="sxs-lookup"><span data-stu-id="35108-346">Console messages track semaphore use.</span></span> <span data-ttu-id="35108-347">Интервал имитирующей работу немного увеличивается для каждого потока, чтобы облегчить чтение выходных данных.</span><span class="sxs-lookup"><span data-stu-id="35108-347">The simulated work interval is increased slightly for each thread, to make the output easier to read.</span></span>  
  
 [!code-cpp[System.Threading.Semaphore2#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Threading.Semaphore2/CPP/source.cpp#1)]
 [!code-csharp[System.Threading.Semaphore2#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Threading.Semaphore2/CS/source.cs#1)]
 [!code-vb[System.Threading.Semaphore2#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Threading.Semaphore2/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <span data-ttu-id="35108-348">
            <paramref name="releaseCount" /> is less than 1.</span>
          <span class="sxs-lookup">
            <span data-stu-id="35108-348">
              <paramref name="releaseCount" /> is less than 1.</span>
          </span>
        </exception>
        <exception cref="T:System.Threading.SemaphoreFullException">
          <span data-ttu-id="35108-349">The semaphore count is already at the maximum value.</span>
          <span class="sxs-lookup">
            <span data-stu-id="35108-349">The semaphore count is already at the maximum value.</span>
          </span>
        </exception>
        <exception cref="T:System.IO.IOException">
          <span data-ttu-id="35108-350">A Win32 error occurred with a named semaphore.</span>
          <span class="sxs-lookup">
            <span data-stu-id="35108-350">A Win32 error occurred with a named semaphore.</span>
          </span>
        </exception>
        <exception cref="T:System.UnauthorizedAccessException">
          <span data-ttu-id="35108-351">The current semaphore represents a named system semaphore, but the user does not have <see cref="F:System.Security.AccessControl.SemaphoreRights.Modify" /> rights.</span>
          <span class="sxs-lookup">
            <span data-stu-id="35108-351">The current semaphore represents a named system semaphore, but the user does not have <see cref="F:System.Security.AccessControl.SemaphoreRights.Modify" /> rights.</span>
          </span>
          <span data-ttu-id="35108-352">-or-  The current semaphore represents a named system semaphore, but it was not opened with <see cref="F:System.Security.AccessControl.SemaphoreRights.Modify" /> rights.</span>
          <span class="sxs-lookup">
            <span data-stu-id="35108-352">-or-  The current semaphore represents a named system semaphore, but it was not opened with <see cref="F:System.Security.AccessControl.SemaphoreRights.Modify" /> rights.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="SetAccessControl">
      <MemberSignature Language="C#" Value="public void SetAccessControl (System.Security.AccessControl.SemaphoreSecurity semaphoreSecurity);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void SetAccessControl(class System.Security.AccessControl.SemaphoreSecurity semaphoreSecurity) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Semaphore.SetAccessControl(System.Security.AccessControl.SemaphoreSecurity)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void SetAccessControl(System::Security::AccessControl::SemaphoreSecurity ^ semaphoreSecurity);" />
      <MemberSignature Language="F#" Value="member this.SetAccessControl : System.Security.AccessControl.SemaphoreSecurity -&gt; unit" Usage="semaphore.SetAccessControl semaphoreSecurity" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="semaphoreSecurity" Type="System.Security.AccessControl.SemaphoreSecurity" />
      </Parameters>
      <Docs>
        <param name="semaphoreSecurity">
          <span data-ttu-id="35108-353">A <see cref="T:System.Security.AccessControl.SemaphoreSecurity" /> object that represents the access control security to be applied to the named system semaphore.</span>
          <span class="sxs-lookup">
            <span data-stu-id="35108-353">A <see cref="T:System.Security.AccessControl.SemaphoreSecurity" /> object that represents the access control security to be applied to the named system semaphore.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="35108-354">Sets the access control security for a named system semaphore.</span>
          <span class="sxs-lookup">
            <span data-stu-id="35108-354">Sets the access control security for a named system semaphore.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="35108-355">Безопасность управления доступом можно установить только на <xref:System.Threading.Semaphore> объекты, представляющие именованных системных семафоров.</span><span class="sxs-lookup"><span data-stu-id="35108-355">You can set access control security only on <xref:System.Threading.Semaphore> objects that represent named system semaphores.</span></span>  
  
 <span data-ttu-id="35108-356">Пользователь должен иметь <xref:System.Security.AccessControl.SemaphoreRights.ChangePermissions?displayProperty=nameWithType> права для вызова этого метода и семафора должен быть открыт с <xref:System.Security.AccessControl.SemaphoreRights.ChangePermissions?displayProperty=nameWithType> права.</span><span class="sxs-lookup"><span data-stu-id="35108-356">The user must have <xref:System.Security.AccessControl.SemaphoreRights.ChangePermissions?displayProperty=nameWithType> rights to call this method, and the semaphore must have been opened with <xref:System.Security.AccessControl.SemaphoreRights.ChangePermissions?displayProperty=nameWithType> rights.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="35108-357">В следующем примере кода демонстрируется поведение между процессами именованного семафора с безопасность управления доступом.</span><span class="sxs-lookup"><span data-stu-id="35108-357">The following code example demonstrates the cross-process behavior of a named semaphore with access control security.</span></span> <span data-ttu-id="35108-358">В примере используется <xref:System.Threading.Semaphore.OpenExisting%28System.String%29> перегруженный метод для проверки на существование именованного семафора.</span><span class="sxs-lookup"><span data-stu-id="35108-358">The example uses the <xref:System.Threading.Semaphore.OpenExisting%28System.String%29> method overload to test for the existence of a named semaphore.</span></span>  
  
 <span data-ttu-id="35108-359">Если семафор не существует, он создается с максимальное число 2 и управления доступом, которые запрещают текущему пользователю использовать семафор, но не дает право на чтение и изменение разрешений семафора.</span><span class="sxs-lookup"><span data-stu-id="35108-359">If the semaphore does not exist, it is created with a maximum count of two and with access control security that denies the current user the right to use the semaphore but grants the right to read and change permissions on the semaphore.</span></span>  
  
 <span data-ttu-id="35108-360">Если запустить скомпилированный пример два командных окна, вторую копию вызовет нарушение прав доступа при вызове <xref:System.Threading.Semaphore.OpenExisting%28System.String%29> метод.</span><span class="sxs-lookup"><span data-stu-id="35108-360">If you run the compiled example from two command windows, the second copy will throw an access violation exception on the call to the <xref:System.Threading.Semaphore.OpenExisting%28System.String%29> method.</span></span> <span data-ttu-id="35108-361">Порождено исключение, и в примере используется <xref:System.Threading.Semaphore.OpenExisting%28System.String%2CSystem.Security.AccessControl.SemaphoreRights%29> перегрузку метода открыть семафор с прав, необходимых для чтения и изменения разрешений.</span><span class="sxs-lookup"><span data-stu-id="35108-361">The exception is caught, and the example uses the <xref:System.Threading.Semaphore.OpenExisting%28System.String%2CSystem.Security.AccessControl.SemaphoreRights%29> method overload to open the semaphore with the rights needed to read and change the permissions.</span></span>  
  
 <span data-ttu-id="35108-362">После изменения разрешений, с помощью <xref:System.Threading.Semaphore.SetAccessControl%2A> метод семафора открыт с помощью права, необходимые для ввода и выпуска.</span><span class="sxs-lookup"><span data-stu-id="35108-362">After the permissions are changed, using the <xref:System.Threading.Semaphore.SetAccessControl%2A> method, the semaphore is opened with the rights required to enter and release.</span></span> <span data-ttu-id="35108-363">При запуске скомпилированный пример третий окно командной строки, он выполняется, под новые разрешения.</span><span class="sxs-lookup"><span data-stu-id="35108-363">If you run the compiled example from a third command window, it runs using the new permissions.</span></span>  
  
 [!code-cpp[System.Threading.Semaphore.ctor named 5a#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Threading.Semaphore.ctor named 5a/CPP/source.cpp#1)]
 [!code-csharp[System.Threading.Semaphore.ctor named 5a#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Threading.Semaphore.ctor named 5a/CS/source.cs#1)]
 [!code-vb[System.Threading.Semaphore.ctor named 5a#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Threading.Semaphore.ctor named 5a/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="35108-364">
            <paramref name="semaphoreSecurity" /> is <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="35108-364">
              <paramref name="semaphoreSecurity" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.UnauthorizedAccessException">
          <span data-ttu-id="35108-365">The user does not have <see cref="F:System.Security.AccessControl.SemaphoreRights.ChangePermissions" /> rights.</span>
          <span class="sxs-lookup">
            <span data-stu-id="35108-365">The user does not have <see cref="F:System.Security.AccessControl.SemaphoreRights.ChangePermissions" /> rights.</span>
          </span>
          <span data-ttu-id="35108-366">-or-  The semaphore was not opened with <see cref="F:System.Security.AccessControl.SemaphoreRights.ChangePermissions" /> rights.</span>
          <span class="sxs-lookup">
            <span data-stu-id="35108-366">-or-  The semaphore was not opened with <see cref="F:System.Security.AccessControl.SemaphoreRights.ChangePermissions" /> rights.</span>
          </span>
        </exception>
        <exception cref="T:System.NotSupportedException">
          <span data-ttu-id="35108-367">The current <see cref="T:System.Threading.Semaphore" /> object does not represent a named system semaphore.</span>
          <span class="sxs-lookup">
            <span data-stu-id="35108-367">The current <see cref="T:System.Threading.Semaphore" /> object does not represent a named system semaphore.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <MemberGroup MemberName="TryOpenExisting">
      <AssemblyInfo>
        <AssemblyName>System.Threading</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="35108-368">Opens a specified named semaphore, if it already exists, and returns a value that indicates whether the operation succeeded.</span>
          <span class="sxs-lookup">
            <span data-stu-id="35108-368">Opens a specified named semaphore, if it already exists, and returns a value that indicates whether the operation succeeded.</span>
          </span>
        </summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="TryOpenExisting">
      <MemberSignature Language="C#" Value="public static bool TryOpenExisting (string name, out System.Threading.Semaphore result);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool TryOpenExisting(string name, [out] class System.Threading.Semaphore&amp; result) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Semaphore.TryOpenExisting(System.String,System.Threading.Semaphore@)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function TryOpenExisting (name As String, ByRef result As Semaphore) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool TryOpenExisting(System::String ^ name, [Runtime::InteropServices::Out] System::Threading::Semaphore ^ % result);" />
      <MemberSignature Language="F#" Value="static member TryOpenExisting : string *  -&gt; bool" Usage="System.Threading.Semaphore.TryOpenExisting (name, result)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
        <Parameter Name="result" Type="System.Threading.Semaphore&amp;" RefType="out" />
      </Parameters>
      <Docs>
        <param name="name">
          <span data-ttu-id="35108-369">The name of the system semaphore to open.</span>
          <span class="sxs-lookup">
            <span data-stu-id="35108-369">The name of the system semaphore to open.</span>
          </span>
        </param>
        <param name="result">
          <span data-ttu-id="35108-370">When this method returns, contains a <see cref="T:System.Threading.Semaphore" /> object that represents the named semaphore if the call succeeded, or <see langword="null" /> if the call failed.</span>
          <span class="sxs-lookup">
            <span data-stu-id="35108-370">When this method returns, contains a <see cref="T:System.Threading.Semaphore" /> object that represents the named semaphore if the call succeeded, or <see langword="null" /> if the call failed.</span>
          </span>
          <span data-ttu-id="35108-371">This parameter is treated as uninitialized.</span>
          <span class="sxs-lookup">
            <span data-stu-id="35108-371">This parameter is treated as uninitialized.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="35108-372">Opens the specified named semaphore, if it already exists, and returns a value that indicates whether the operation succeeded.</span>
          <span class="sxs-lookup">
            <span data-stu-id="35108-372">Opens the specified named semaphore, if it already exists, and returns a value that indicates whether the operation succeeded.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="35108-373">
            <see langword="true" /> if the named semaphore was opened successfully; otherwise, <see langword="false" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="35108-373">
              <see langword="true" /> if the named semaphore was opened successfully; otherwise, <see langword="false" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="35108-374">Если именованный семафор существует, этот метод не создает его.</span><span class="sxs-lookup"><span data-stu-id="35108-374">If the named semaphore does not exist, this method does not create it.</span></span> <span data-ttu-id="35108-375">Чтобы создать системный семафор, если он еще не существует, используйте один из <xref:System.Threading.Semaphore.%23ctor%2A> конструкторы, которые имеет `name` параметра.</span><span class="sxs-lookup"><span data-stu-id="35108-375">To create the system semaphore when it does not already exist, use one of the <xref:System.Threading.Semaphore.%23ctor%2A> constructors that has a `name` parameter.</span></span>  
  
 <span data-ttu-id="35108-376">Если вы не уверены, является ли именованный семафор существует, используйте эту перегрузку метода вместо <xref:System.Threading.Semaphore.OpenExisting%28System.String%29> перегрузку метода, который создает исключение, если семафор не существует.</span><span class="sxs-lookup"><span data-stu-id="35108-376">If you are uncertain whether a named semaphore exists, use this method overload instead of the <xref:System.Threading.Semaphore.OpenExisting%28System.String%29> method overload, which throws an exception if the semaphore does not exist.</span></span>  
  
 <span data-ttu-id="35108-377">Эта перегрузка метода эквивалентен вызову <xref:System.Threading.Semaphore.TryOpenExisting%2A> перегрузку метода с указанием <xref:System.Security.AccessControl.SemaphoreRights.Synchronize?displayProperty=nameWithType> и <xref:System.Security.AccessControl.SemaphoreRights.Modify?displayProperty=nameWithType> права, объединяются с помощью побитовой операции или.</span><span class="sxs-lookup"><span data-stu-id="35108-377">This method overload is equivalent to calling the <xref:System.Threading.Semaphore.TryOpenExisting%2A> method overload and specifying <xref:System.Security.AccessControl.SemaphoreRights.Synchronize?displayProperty=nameWithType> and <xref:System.Security.AccessControl.SemaphoreRights.Modify?displayProperty=nameWithType> rights, combined by using the bitwise OR operation.</span></span> <span data-ttu-id="35108-378">Указание <xref:System.Security.AccessControl.SemaphoreRights.Synchronize?displayProperty=nameWithType> флаг позволяет потоку в семафор и указав <xref:System.Security.AccessControl.SemaphoreRights.Modify?displayProperty=nameWithType> флаг позволяет потоку на вызов метода <xref:System.Threading.Semaphore.Release%2A> метод.</span><span class="sxs-lookup"><span data-stu-id="35108-378">Specifying the <xref:System.Security.AccessControl.SemaphoreRights.Synchronize?displayProperty=nameWithType> flag allows a thread to enter the semaphore, and specifying the   <xref:System.Security.AccessControl.SemaphoreRights.Modify?displayProperty=nameWithType> flag allows a thread to call the <xref:System.Threading.Semaphore.Release%2A> method.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="35108-379">
            <paramref name="name" /> is an empty string.</span>
          <span class="sxs-lookup">
            <span data-stu-id="35108-379">
              <paramref name="name" /> is an empty string.</span>
          </span>
          <span data-ttu-id="35108-380">-or-  <paramref name="name" /> is longer than 260 characters.</span>
          <span class="sxs-lookup">
            <span data-stu-id="35108-380">-or-  <paramref name="name" /> is longer than 260 characters.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="35108-381">
            <paramref name="name" /> is <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="35108-381">
              <paramref name="name" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.IO.IOException">
          <span data-ttu-id="35108-382">A Win32 error occurred.</span>
          <span class="sxs-lookup">
            <span data-stu-id="35108-382">A Win32 error occurred.</span>
          </span>
        </exception>
        <exception cref="T:System.UnauthorizedAccessException">
          <span data-ttu-id="35108-383">The named semaphore exists, but the user does not have the security access required to use it.</span>
          <span class="sxs-lookup">
            <span data-stu-id="35108-383">The named semaphore exists, but the user does not have the security access required to use it.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="TryOpenExisting">
      <MemberSignature Language="C#" Value="public static bool TryOpenExisting (string name, System.Security.AccessControl.SemaphoreRights rights, out System.Threading.Semaphore result);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool TryOpenExisting(string name, valuetype System.Security.AccessControl.SemaphoreRights rights, [out] class System.Threading.Semaphore&amp; result) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Semaphore.TryOpenExisting(System.String,System.Security.AccessControl.SemaphoreRights,System.Threading.Semaphore@)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function TryOpenExisting (name As String, rights As SemaphoreRights, ByRef result As Semaphore) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool TryOpenExisting(System::String ^ name, System::Security::AccessControl::SemaphoreRights rights, [Runtime::InteropServices::Out] System::Threading::Semaphore ^ % result);" />
      <MemberSignature Language="F#" Value="static member TryOpenExisting : string * System.Security.AccessControl.SemaphoreRights *  -&gt; bool" Usage="System.Threading.Semaphore.TryOpenExisting (name, rights, result)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
        <Parameter Name="rights" Type="System.Security.AccessControl.SemaphoreRights" />
        <Parameter Name="result" Type="System.Threading.Semaphore&amp;" RefType="out" />
      </Parameters>
      <Docs>
        <param name="name">
          <span data-ttu-id="35108-384">The name of the system semaphore to open.</span>
          <span class="sxs-lookup">
            <span data-stu-id="35108-384">The name of the system semaphore to open.</span>
          </span>
        </param>
        <param name="rights">
          <span data-ttu-id="35108-385">A bitwise combination of the enumeration values that represent the desired security access.</span>
          <span class="sxs-lookup">
            <span data-stu-id="35108-385">A bitwise combination of the enumeration values that represent the desired security access.</span>
          </span>
        </param>
        <param name="result">
          <span data-ttu-id="35108-386">When this method returns, contains a <see cref="T:System.Threading.Semaphore" /> object that represents the named semaphore if the call succeeded, or <see langword="null" /> if the call failed.</span>
          <span class="sxs-lookup">
            <span data-stu-id="35108-386">When this method returns, contains a <see cref="T:System.Threading.Semaphore" /> object that represents the named semaphore if the call succeeded, or <see langword="null" /> if the call failed.</span>
          </span>
          <span data-ttu-id="35108-387">This parameter is treated as uninitialized.</span>
          <span class="sxs-lookup">
            <span data-stu-id="35108-387">This parameter is treated as uninitialized.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="35108-388">Opens the specified named semaphore, if it already exists, with the desired security access, and returns a value that indicates whether the operation succeeded.</span>
          <span class="sxs-lookup">
            <span data-stu-id="35108-388">Opens the specified named semaphore, if it already exists, with the desired security access, and returns a value that indicates whether the operation succeeded.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="35108-389">
            <see langword="true" /> if the named semaphore was opened successfully; otherwise, <see langword="false" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="35108-389">
              <see langword="true" /> if the named semaphore was opened successfully; otherwise, <see langword="false" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="35108-390">Если именованный семафор существует, этот метод не создает его.</span><span class="sxs-lookup"><span data-stu-id="35108-390">If the named semaphore does not exist, this method does not create it.</span></span> <span data-ttu-id="35108-391">Чтобы создать системный семафор, если он еще не существует, используйте один из <xref:System.Threading.Semaphore.%23ctor%2A> конструкторы, которые имеет `name` параметра.</span><span class="sxs-lookup"><span data-stu-id="35108-391">To create the system semaphore when it does not already exist, use one of the <xref:System.Threading.Semaphore.%23ctor%2A> constructors that has a `name` parameter.</span></span>  
  
 <span data-ttu-id="35108-392">Если вы не уверены, является ли именованный семафор существует, используйте эту перегрузку метода вместо <xref:System.Threading.Semaphore.OpenExisting%28System.String%2CSystem.Security.AccessControl.SemaphoreRights%29> перегрузку метода, который создает исключение, если семафор не существует.</span><span class="sxs-lookup"><span data-stu-id="35108-392">If you are uncertain whether a named semaphore exists, use this method overload instead of the <xref:System.Threading.Semaphore.OpenExisting%28System.String%2CSystem.Security.AccessControl.SemaphoreRights%29> method overload, which throws an exception if the semaphore does not exist.</span></span>  
  
 <span data-ttu-id="35108-393">`rights` Параметр должен содержать <xref:System.Security.AccessControl.SemaphoreRights.Synchronize?displayProperty=nameWithType> флаг, чтобы разрешить потоков в семафор и <xref:System.Security.AccessControl.SemaphoreRights.Modify?displayProperty=nameWithType> флаг, чтобы разрешить потокам вызывать <xref:System.Threading.Semaphore.Release%2A> метод.</span><span class="sxs-lookup"><span data-stu-id="35108-393">The `rights` parameter must include the <xref:System.Security.AccessControl.SemaphoreRights.Synchronize?displayProperty=nameWithType> flag to allow threads to enter the semaphore, and the <xref:System.Security.AccessControl.SemaphoreRights.Modify?displayProperty=nameWithType> flag to allow threads to call the <xref:System.Threading.Semaphore.Release%2A> method.</span></span>  
  
 <span data-ttu-id="35108-394">Несколько вызовов этого метода, используйте то же значение для `name` не возвращают обязательно же <xref:System.Threading.Semaphore> объекта, несмотря на то, что объекты, возвращаемые представляют же именованный семафор.</span><span class="sxs-lookup"><span data-stu-id="35108-394">Multiple calls to this method that use the same value for `name` do not necessarily return the same <xref:System.Threading.Semaphore> object, even though the objects that are returned represent the same named system semaphore.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="35108-395">
            <paramref name="name" /> is an empty string.</span>
          <span class="sxs-lookup">
            <span data-stu-id="35108-395">
              <paramref name="name" /> is an empty string.</span>
          </span>
          <span data-ttu-id="35108-396">-or-  <paramref name="name" /> is longer than 260 characters.</span>
          <span class="sxs-lookup">
            <span data-stu-id="35108-396">-or-  <paramref name="name" /> is longer than 260 characters.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="35108-397">
            <paramref name="name" /> is <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="35108-397">
              <paramref name="name" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.IO.IOException">
          <span data-ttu-id="35108-398">A Win32 error occurred.</span>
          <span class="sxs-lookup">
            <span data-stu-id="35108-398">A Win32 error occurred.</span>
          </span>
        </exception>
        <exception cref="T:System.UnauthorizedAccessException">
          <span data-ttu-id="35108-399">The named semaphore exists, but the user does not have the security access required to use it.</span>
          <span class="sxs-lookup">
            <span data-stu-id="35108-399">The named semaphore exists, but the user does not have the security access required to use it.</span>
          </span>
        </exception>
      </Docs>
    </Member>
  </Members>
</Type>