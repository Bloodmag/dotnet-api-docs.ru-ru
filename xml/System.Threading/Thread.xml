<Type Name="Thread" FullName="System.Threading.Thread">
  <TypeSignature Language="C#" Value="public sealed class Thread : System.Runtime.ConstrainedExecution.CriticalFinalizerObject, System.Runtime.InteropServices._Thread" />
  <TypeSignature Language="ILAsm" Value=".class public sequential ansi sealed beforefieldinit Thread extends System.Runtime.ConstrainedExecution.CriticalFinalizerObject implements class System.Runtime.InteropServices._Thread" />
  <TypeSignature Language="DocId" Value="T:System.Threading.Thread" />
  <TypeSignature Language="VB.NET" Value="Public NotInheritable Class Thread&#xA;Inherits CriticalFinalizerObject&#xA;Implements _Thread" />
  <TypeSignature Language="C++ CLI" Value="public ref class Thread sealed : System::Runtime::ConstrainedExecution::CriticalFinalizerObject, System::Runtime::InteropServices::_Thread" />
  <AssemblyInfo>
    <AssemblyName>System.Threading.Thread</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.1.0.0</AssemblyVersion>
    <AssemblyVersion>4.1.1.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>mscorlib</AssemblyName>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
    <BaseTypeName FrameworkAlternate="netframework-4.5">System.Runtime.ConstrainedExecution.CriticalFinalizerObject</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>System.Runtime.InteropServices._Thread</InterfaceName>
    </Interface>
  </Interfaces>
  <Attributes>
    <Attribute>
      <AttributeName>System.Runtime.InteropServices.ClassInterface(System.Runtime.InteropServices.ClassInterfaceType.None)</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName>System.Runtime.InteropServices.ComDefaultInterface(typeof(System.Runtime.InteropServices._Thread))</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName>System.Runtime.InteropServices.ComVisible(true)</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary><span data-ttu-id="91365-101">Создает и контролирует поток, задает приоритет и возвращает статус.</span><span class="sxs-lookup"><span data-stu-id="91365-101">Creates and controls a thread, sets its priority, and gets its status.</span></span></summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="91365-102">При запуске процесса, общеязыковая среда выполнения автоматически создает один основной поток для выполнения кода приложения.</span><span class="sxs-lookup"><span data-stu-id="91365-102">When a process starts, the common language runtime automatically creates a single foreground thread to execute application code.</span></span> <span data-ttu-id="91365-103">Вместе с этой главной основного потока процесса можно создать один или несколько потоков для выполнения частей программного кода, связанные с процессом.</span><span class="sxs-lookup"><span data-stu-id="91365-103">Along with this main foreground thread, a process can create one or more threads to execute a portion of the program code associated with the process.</span></span> <span data-ttu-id="91365-104">Эти потоки могут выполнять на переднем плане или в фоновом режиме.</span><span class="sxs-lookup"><span data-stu-id="91365-104">These threads can execute either in the foreground or in the background.</span></span> <span data-ttu-id="91365-105">Кроме того, можно использовать <xref:System.Threading.ThreadPool> класса для выполнения кода на рабочих потоков, которые управляются общеязыковая среда выполнения.</span><span class="sxs-lookup"><span data-stu-id="91365-105">In addition, you can use the <xref:System.Threading.ThreadPool> class to execute code on worker threads that are managed by the common language runtime.</span></span>  
  
 <span data-ttu-id="91365-106">Содержание раздела</span><span class="sxs-lookup"><span data-stu-id="91365-106">In this section</span></span>  
  
 <span data-ttu-id="91365-107">[Запуск потока](#Starting) </span><span class="sxs-lookup"><span data-stu-id="91365-107">[Starting a thread](#Starting) </span></span>  
 <span data-ttu-id="91365-108">[Получение потока объектов](#Retrieving) </span><span class="sxs-lookup"><span data-stu-id="91365-108">[Retrieving Thread objects](#Retrieving) </span></span>  
 <span data-ttu-id="91365-109">[Потоки переднего плана и фона](#Foreground) </span><span class="sxs-lookup"><span data-stu-id="91365-109">[Foreground and background threads](#Foreground) </span></span>  
 <span data-ttu-id="91365-110">[Язык и региональные параметры и потоков](#Culture) </span><span class="sxs-lookup"><span data-stu-id="91365-110">[Culture and threads](#Culture) </span></span>  
 [<span data-ttu-id="91365-111">Получение сведений о и управление потоками</span><span class="sxs-lookup"><span data-stu-id="91365-111">Getting information about and controlling threads</span></span>](#Properties)   
   
<a name="Starting"></a>   
## <a name="starting-a-thread"></a><span data-ttu-id="91365-112">Запуск потока</span><span class="sxs-lookup"><span data-stu-id="91365-112">Starting a thread</span></span>  
 <span data-ttu-id="91365-113">Запустить поток, указав делегат, который представляет метод, поток будет выполнена в конструкторе класса.</span><span class="sxs-lookup"><span data-stu-id="91365-113">You start a thread by supplying a delegate that represents the method the thread is to execute in its class constructor.</span></span> <span data-ttu-id="91365-114">Затем вызовите <xref:System.Threading.Thread.Start%2A> метод, чтобы начать выполнение.</span><span class="sxs-lookup"><span data-stu-id="91365-114">You then call the <xref:System.Threading.Thread.Start%2A> method to begin execution.</span></span>  
  
 <span data-ttu-id="91365-115"><xref:System.Threading.Thread> Конструкторы могут принимать одно из двух делегатов типов, в зависимости от того, можно ли передать аргумент метода для выполнения:</span><span class="sxs-lookup"><span data-stu-id="91365-115">The <xref:System.Threading.Thread> constructors can take either of two delegate types, depending on whether you can pass an argument to the method to be executed:</span></span>  
  
-   <span data-ttu-id="91365-116">Если метод не имеет аргументов, то можно передать <xref:System.Threading.ThreadStart> делегат в конструктор.</span><span class="sxs-lookup"><span data-stu-id="91365-116">If the method has no arguments, you pass a <xref:System.Threading.ThreadStart> delegate to  the constructor.</span></span> <span data-ttu-id="91365-117">Он имеет сигнатуру:</span><span class="sxs-lookup"><span data-stu-id="91365-117">It has the signature:</span></span>  
  
    ```csharp  
    public delegate void ThreadStart()  
    ```  
  
    ```vb  
    Public Delegate Sub ThreadStart()  
    ```  
  
     <span data-ttu-id="91365-118">Следующий пример создает и запускает поток, который выполняет `ExecuteInForeground` метод.</span><span class="sxs-lookup"><span data-stu-id="91365-118">The following example creates and starts a thread that executes the `ExecuteInForeground` method.</span></span> <span data-ttu-id="91365-119">Метод отображает сведения о некоторых свойств потока, а затем выполняет цикл, в котором он приостанавливает полсекунды и отображает затраченное время в секундах.</span><span class="sxs-lookup"><span data-stu-id="91365-119">The method displays  information about some thread properties, then executes a loop in which it pauses for half a second and displays the elapsed number of seconds.</span></span> <span data-ttu-id="91365-120">При выполнении потока по крайней мере пять секунд, цикл завершается и поток завершает выполнение.</span><span class="sxs-lookup"><span data-stu-id="91365-120">When the thread has executed for at least five seconds, the loop ends and the thread terminates execution.</span></span>  
  
     [!code-csharp[System.Threading.Thread#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/System.Threading.Thread/cs/ThreadStart1.cs#1)]
     [!code-vb[System.Threading.Thread#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/System.Threading.Thread/vb/ThreadStart1.vb#1)]  
  
-   <span data-ttu-id="91365-121">Если метод имеет аргумент, передайте <xref:System.Threading.ParameterizedThreadStart> делегат в конструктор.</span><span class="sxs-lookup"><span data-stu-id="91365-121">If the method has an argument, you pass a <xref:System.Threading.ParameterizedThreadStart> delegate to the constructor.</span></span> <span data-ttu-id="91365-122">Он имеет сигнатуру:</span><span class="sxs-lookup"><span data-stu-id="91365-122">It has the signature:</span></span>  
  
    ```csharp  
    public delegate void ParameterizedThreadStart(object obj)  
    ```  
  
    ```vb  
    Public Delegate Sub ParameterizedThreadStart(obj As Object)  
    ```  
  
     <span data-ttu-id="91365-123">Метод, выполняемый по делегату можно затем приведите (в C#) или преобразуйте (в Visual Basic) параметр к соответствующему типу.</span><span class="sxs-lookup"><span data-stu-id="91365-123">The method executed by the delegate can then cast (in C#) or convert (in Visual Basic) the parameter to the appropriate type.</span></span>  
  
     <span data-ttu-id="91365-124">Следующий пример идентичен предыдущему, за исключением того, он вызывает <xref:System.Threading.Thread.%23ctor%28System.Threading.ParameterizedThreadStart%29> конструктор.</span><span class="sxs-lookup"><span data-stu-id="91365-124">The following example is identical to the previous one, except that it calls the <xref:System.Threading.Thread.%23ctor%28System.Threading.ParameterizedThreadStart%29> constructor.</span></span> <span data-ttu-id="91365-125">Эта версия `ExecuteInForeground` метод принимает один параметр, который представляет приблизительное число миллисекунд, является выполнение цикла.</span><span class="sxs-lookup"><span data-stu-id="91365-125">This version of the `ExecuteInForeground` method has a single parameter that represents the approximate number of milliseconds the loop is to execute.</span></span>  
  
     [!code-csharp[System.Threading.Thread#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/System.Threading.Thread/cs/ThreadStart2.cs#2)]
     [!code-vb[System.Threading.Thread#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/System.Threading.Thread/vb/ThreadStart2.vb#2)]  
  
 <span data-ttu-id="91365-126">Нет необходимости сохранять ссылку на <xref:System.Threading.Thread> объекта после запуска потока.</span><span class="sxs-lookup"><span data-stu-id="91365-126">It is not necessary to retain a reference to a <xref:System.Threading.Thread> object once you have started the thread.</span></span> <span data-ttu-id="91365-127">Поток продолжает выполняться, пока не выполнена процедура потока.</span><span class="sxs-lookup"><span data-stu-id="91365-127">The thread continues to execute until the thread procedure is complete.</span></span>  
  
<a name="Retrieving"></a>   
## <a name="retrieving-thread-objects"></a><span data-ttu-id="91365-128">Получение потока объектов</span><span class="sxs-lookup"><span data-stu-id="91365-128">Retrieving Thread objects</span></span>  
 <span data-ttu-id="91365-129">Можно использовать статический (`Shared` в Visual Basic) <xref:System.Threading.Thread.CurrentThread%2A> свойство, чтобы получить ссылку на текущий выполняемый поток из кода, который выполняется поток.</span><span class="sxs-lookup"><span data-stu-id="91365-129">You can use the static (`Shared` in Visual Basic)  <xref:System.Threading.Thread.CurrentThread%2A> property to retrieve a reference to the currently executing thread from the code that the thread is executing.</span></span> <span data-ttu-id="91365-130">В следующем примере используется <xref:System.Threading.Thread.CurrentThread%2A> свойство для отображения сведений о основного потока приложения, другой поток переднего плана, в фоновом потоке и поток из пула потоков.</span><span class="sxs-lookup"><span data-stu-id="91365-130">The following example uses the <xref:System.Threading.Thread.CurrentThread%2A> property to display information about the main application thread, another foreground thread, a background thread, and a thread pool thread.</span></span>  
  
 [!code-csharp[System.Threading.Thread#4](~/samples/snippets/csharp/VS_Snippets_CLR_System/System.Threading.Thread/cs/Instance1.cs#4)]
 [!code-vb[System.Threading.Thread#4](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/System.Threading.Thread/vb/Instance1.vb#4)]  
  
<a name="Foreground"></a>   
## <a name="foreground-and-background-threads"></a><span data-ttu-id="91365-131">Потоки переднего плана и фона</span><span class="sxs-lookup"><span data-stu-id="91365-131">Foreground and background threads</span></span>  
 <span data-ttu-id="91365-132">Экземпляры <xref:System.Threading.Thread> класс представляют основные потоки или фоновые потоки.</span><span class="sxs-lookup"><span data-stu-id="91365-132">Instances of the <xref:System.Threading.Thread> class represent either foreground threads or background threads.</span></span> <span data-ttu-id="91365-133">Фоновые потоки идентичны основные потоки с одним исключением: в фоновом потоке не сохраняется процесс, выполняемый, если все основные потоки завершились.</span><span class="sxs-lookup"><span data-stu-id="91365-133">Background threads are identical to foreground threads with one exception: a background thread does not keep a process running if all foreground threads have terminated.</span></span> <span data-ttu-id="91365-134">После были остановлены все основные потоки, среда выполнения останавливает все фоновые потоки и завершает работу.</span><span class="sxs-lookup"><span data-stu-id="91365-134">Once all foreground threads have been stopped, the runtime stops all background threads and shuts down.</span></span>  
  
 <span data-ttu-id="91365-135">По умолчанию перечисленных ниже потоков выполняются на переднем плане:</span><span class="sxs-lookup"><span data-stu-id="91365-135">By default, the following threads execute in the foreground:</span></span>  
  
-   <span data-ttu-id="91365-136">Основного потока приложения.</span><span class="sxs-lookup"><span data-stu-id="91365-136">The main application thread.</span></span>  
  
-   <span data-ttu-id="91365-137">Все потоки, созданные путем вызова <xref:System.Threading.Thread> конструктора класса.</span><span class="sxs-lookup"><span data-stu-id="91365-137">All threads created by calling a <xref:System.Threading.Thread> class constructor.</span></span>  
  
 <span data-ttu-id="91365-138">По умолчанию в фоновом режиме выполняются следующие потоков:</span><span class="sxs-lookup"><span data-stu-id="91365-138">The following threads execute in the background by default:</span></span>  
  
-   <span data-ttu-id="91365-139">Поток из пула потоков, которые являются пула рабочих потоков, которые поддерживаются средой выполнения.</span><span class="sxs-lookup"><span data-stu-id="91365-139">Thread pool threads, which are a pool of worker threads maintained by the runtime.</span></span>  <span data-ttu-id="91365-140">Работа потоков пула и расписание можно настроить в потоках из пула потоков с помощью <xref:System.Threading.ThreadPool> класса.</span><span class="sxs-lookup"><span data-stu-id="91365-140">You can configure the thread pool and schedule work on thread pool threads by using the <xref:System.Threading.ThreadPool> class.</span></span>  
  
    > [!NOTE]
    >  <span data-ttu-id="91365-141">На основе задач асинхронных операций выполняются в потоках из пула потоков.</span><span class="sxs-lookup"><span data-stu-id="91365-141">Task-based asynchronous operations automatically execute on thread pool threads.</span></span> <span data-ttu-id="91365-142">Использование асинхронных операций на основе задач <xref:System.Threading.Tasks.Task> и <xref:System.Threading.Tasks.Task%601> классов для реализации [асинхронная модель на основе задач](~/docs/standard/asynchronous-programming-patterns/task-based-asynchronous-pattern-tap.md).</span><span class="sxs-lookup"><span data-stu-id="91365-142">Task-based asynchronous operations use the <xref:System.Threading.Tasks.Task> and <xref:System.Threading.Tasks.Task%601> classes to implement the [task-based asynchronous pattern](~/docs/standard/asynchronous-programming-patterns/task-based-asynchronous-pattern-tap.md).</span></span>  
  
-   <span data-ttu-id="91365-143">Все потоки, которые входят в управляемую среду выполнения из неуправляемого кода.</span><span class="sxs-lookup"><span data-stu-id="91365-143">All threads that enter the managed execution environment from unmanaged code.</span></span>  
  
 <span data-ttu-id="91365-144">Вы можете изменить поток для выполнения в фоновом режиме, путем установки <xref:System.Threading.Thread.IsBackground%2A> свойство в любое время.</span><span class="sxs-lookup"><span data-stu-id="91365-144">You can change a thread to execute in the background by setting the <xref:System.Threading.Thread.IsBackground%2A> property at any time.</span></span>  <span data-ttu-id="91365-145">Фоновые потоки полезны для любой операции, следует продолжить до тех пор, пока приложение выполняется, но не предотвращения завершения работы, таких как мониторинг изменений в файловой системе или входящие подключения к сокетам приложения.</span><span class="sxs-lookup"><span data-stu-id="91365-145">Background threads are useful for any operation that should continue as long as an application is running but should not prevent the application from terminating, such as monitoring file system changes or incoming socket connections.</span></span>  
  
 <span data-ttu-id="91365-146">В следующем примере показано различие между потоками переднего плана и фона.</span><span class="sxs-lookup"><span data-stu-id="91365-146">The following example illustrates the difference between foreground and background threads.</span></span> <span data-ttu-id="91365-147">Как и в первом примере, это [запуска потока](#Starting) статьи, за исключением того, он задает выполнение в фоновом режиме, перед его началом потока.</span><span class="sxs-lookup"><span data-stu-id="91365-147">It is like the first example in the [Starting a thread](#Starting) section, except that it sets the thread to execute in the background before starting it.</span></span> <span data-ttu-id="91365-148">Как показывает вывод, цикл прерывается до его выполнения в течение пяти секунд.</span><span class="sxs-lookup"><span data-stu-id="91365-148">As the output shows, the loop is interrupted before it executes for five seconds.</span></span>  
  
 [!code-csharp[System.Threading.Thread#3](~/samples/snippets/csharp/VS_Snippets_CLR_System/System.Threading.Thread/cs/BackgroundEx1.cs#3)]
 [!code-vb[System.Threading.Thread#3](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/System.Threading.Thread/vb/BackgroundEx1.vb#3)]  
  
<a name="Culture"></a>   
## <a name="culture-and-threads"></a><span data-ttu-id="91365-149">Язык и региональные параметры и потоков</span><span class="sxs-lookup"><span data-stu-id="91365-149">Culture and threads</span></span>  
 <span data-ttu-id="91365-150">Каждый поток имеет языка и региональных параметров, представленных <xref:System.Threading.Thread.CurrentCulture%2A> свойство и языка и региональных параметров пользовательского интерфейса, представленного <xref:System.Threading.Thread.CurrentUICulture%2A> свойство.</span><span class="sxs-lookup"><span data-stu-id="91365-150">Each thread has a culture, represented by the <xref:System.Threading.Thread.CurrentCulture%2A> property, and a UI culture, represented by the <xref:System.Threading.Thread.CurrentUICulture%2A> property.</span></span>  <span data-ttu-id="91365-151">Текущий язык и региональные параметры поддерживает такие операции, зависящие от культуры как синтаксического анализа и форматирования, сравнение и сортировка строк и также определяет систему письма и календарь, используемый в потоке.</span><span class="sxs-lookup"><span data-stu-id="91365-151">The current culture supports such culture-sensitive  operations as parsing and formatting, string comparison and sorting, and also controls the writing system and calendar used by a thread.</span></span> <span data-ttu-id="91365-152">Текущий язык и региональные параметры пользовательского интерфейса предоставляет язык и региональные параметры извлечения ресурсов в файлах ресурсов.</span><span class="sxs-lookup"><span data-stu-id="91365-152">The current UI culture provides for culture-sensitive retrieval of resources in resource files.</span></span>  
  
 <span data-ttu-id="91365-153">При создании нового потока его язык и региональные параметры пользовательского интерфейса определяются текущей культурой и языком и региональными параметрами пользовательского интерфейса, а не язык и региональные параметры пользовательского интерфейса потока, из которого создается новый поток.</span><span class="sxs-lookup"><span data-stu-id="91365-153">When a new thread is instantiated, its culture and UI culture are defined by the current system culture and UI culture, and not by the culture and UI culture of the thread from which the new thread is created.</span></span> <span data-ttu-id="91365-154">Это означает, например, что если текущую культуру системы является английский (США) и текущий язык и региональные параметры потока основного приложения — французский (Франция) языка и региональных параметров, созданных вызывающими нового потока <xref:System.Threading.Thread.%23ctor%28System.Threading.ParameterizedThreadStart%29> конструктора из основного потока является английский (США) и французского (Франция).</span><span class="sxs-lookup"><span data-stu-id="91365-154">This means, for example, that if the current system culture is English (United States) and the current culture of the primary application thread is French (France), the culture of a new thread created by calling the   <xref:System.Threading.Thread.%23ctor%28System.Threading.ParameterizedThreadStart%29> constructor from the primary thread is English (United States), and not French (France).</span></span> <span data-ttu-id="91365-155">Дополнительные сведения см. в разделе «Язык и региональные параметры и потоки» из <xref:System.Globalization.CultureInfo> разделе, посвященном классу.</span><span class="sxs-lookup"><span data-stu-id="91365-155">For more information, see the "Culture and threads" section of the <xref:System.Globalization.CultureInfo> class topic.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="91365-156">Это не относится потоков, выполняющих асинхронных операций для приложений, ориентированных на [!INCLUDE[net_v46](~/includes/net-v46-md.md)] и более поздних версиях, в данном случае, язык и региональные параметры пользовательского интерфейса является частью асинхронную контекста операций; поток, в котором асинхронной операции выполняет по умолчанию наследует язык и региональные параметры пользовательского интерфейса потока, из которого была запущена асинхронной операции.</span><span class="sxs-lookup"><span data-stu-id="91365-156">This is not true of threads that execute asynchronous operations for apps that target the [!INCLUDE[net_v46](~/includes/net-v46-md.md)] and later versions, In this case, the culture and UI culture is part of an asynchronous operations' context; the thread on which an asynchronous operation executes by default inherits the culture and UI culture of the thread from which the asynchronous operation was launched.</span></span> <span data-ttu-id="91365-157">Дополнительные сведения см. в подразделе "Язык и региональные параметры в асинхронных операциях на основе задач" раздела, посвященного классу <xref:System.Globalization.CultureInfo>.</span><span class="sxs-lookup"><span data-stu-id="91365-157">For more information, see the "Culture and task-based asynchronous operations" section of the <xref:System.Globalization.CultureInfo> class topic.</span></span>  
  
 <span data-ttu-id="91365-158">Можно выполнить одно из следующих действий, чтобы гарантировать, что все потоки выполнение в приложении совместно использовать же язык и региональные параметры пользовательского интерфейса:</span><span class="sxs-lookup"><span data-stu-id="91365-158">You can do either of the following to ensure that all of the threads executing in an application share the same culture and UI culture:</span></span>  
  
-   <span data-ttu-id="91365-159">Можно передать <xref:System.Globalization.CultureInfo> объект, представляющий этот язык для <xref:System.Threading.ParameterizedThreadStart> делегата или <xref:System.Threading.ThreadPool.QueueUserWorkItem%28System.Threading.WaitCallback%2CSystem.Object%29?displayProperty=nameWithType> метод.</span><span class="sxs-lookup"><span data-stu-id="91365-159">You can pass a <xref:System.Globalization.CultureInfo> object that represents that culture to the <xref:System.Threading.ParameterizedThreadStart> delegate or the <xref:System.Threading.ThreadPool.QueueUserWorkItem%28System.Threading.WaitCallback%2CSystem.Object%29?displayProperty=nameWithType> method.</span></span>  
  
-   <span data-ttu-id="91365-160">Для приложений, выполняющихся [!INCLUDE[net_v45](~/includes/net-v45-md.md)] и более поздних версиях можно определить язык и региональные параметры пользовательского интерфейса, необходимо назначить для всех потоков, созданных в домене приложения, задав значение <xref:System.Globalization.CultureInfo.DefaultThreadCurrentCulture%2A?displayProperty=nameWithType> и <xref:System.Globalization.CultureInfo.DefaultThreadCurrentUICulture%2A?displayProperty=nameWithType> свойства.</span><span class="sxs-lookup"><span data-stu-id="91365-160">For apps running on the [!INCLUDE[net_v45](~/includes/net-v45-md.md)] and later versions, you can define the culture and UI culture that is to be assigned to all threads created in an application domain by setting the value of the <xref:System.Globalization.CultureInfo.DefaultThreadCurrentCulture%2A?displayProperty=nameWithType> and <xref:System.Globalization.CultureInfo.DefaultThreadCurrentUICulture%2A?displayProperty=nameWithType> properties.</span></span> <span data-ttu-id="91365-161">Обратите внимание, что это параметр на уровне домена приложения.</span><span class="sxs-lookup"><span data-stu-id="91365-161">Note that this is a per-application domain setting.</span></span>  
  
 <span data-ttu-id="91365-162">Дополнительные сведения и примеры см. раздел «Язык и региональные параметры и потоки» <xref:System.Globalization.CultureInfo> разделе, посвященном классу.</span><span class="sxs-lookup"><span data-stu-id="91365-162">For more information and examples, see the "Culture and threads" section of the <xref:System.Globalization.CultureInfo> class topic.</span></span>  
  
<a name="Properties"></a>   
## <a name="getting-information-about-and-controlling-threads"></a><span data-ttu-id="91365-163">Получение сведений о и управление потоками</span><span class="sxs-lookup"><span data-stu-id="91365-163">Getting information about and controlling threads</span></span>  
 <span data-ttu-id="91365-164">Вы можете получать ряд значений свойств, которые предоставляют сведения о потоке.</span><span class="sxs-lookup"><span data-stu-id="91365-164">You can retrieve a number of property values that provide information about a thread.</span></span> <span data-ttu-id="91365-165">В некоторых случаях можно также задать значения этих свойств для управления ее работой потока.</span><span class="sxs-lookup"><span data-stu-id="91365-165">In some cases, you can also set these property values to control the operation of the thread.</span></span> <span data-ttu-id="91365-166">Эти свойства потока:</span><span class="sxs-lookup"><span data-stu-id="91365-166">These thread properties include:</span></span>  
  
-   <span data-ttu-id="91365-167">Имя.</span><span class="sxs-lookup"><span data-stu-id="91365-167">A name.</span></span> <span data-ttu-id="91365-168"><xref:System.Threading.Thread.Name%2A> выполняет запись — один раз свойство, которое можно использовать для идентификации потока.</span><span class="sxs-lookup"><span data-stu-id="91365-168"><xref:System.Threading.Thread.Name%2A> is a write-once property that you can use to identify a thread.</span></span>  <span data-ttu-id="91365-169">Значением по умолчанию является `null`.</span><span class="sxs-lookup"><span data-stu-id="91365-169">Its default value is `null`.</span></span>  
  
-   <span data-ttu-id="91365-170">Хэш-код, который можно получить, вызвав <xref:System.Threading.Thread.GetHashCode%2A> метод.</span><span class="sxs-lookup"><span data-stu-id="91365-170">A hash code, which you can retrieve by calling the <xref:System.Threading.Thread.GetHashCode%2A> method.</span></span> <span data-ttu-id="91365-171">Хэш-код можно использовать для уникальной идентификации поток; в течение времени существования вашего потока ее хэш-код не будет конфликтовать со значением из любого другого потока независимо от домена приложения, из которого получается значение.</span><span class="sxs-lookup"><span data-stu-id="91365-171">The hash code can be used to uniquely identify a thread; for the lifetime of your thread, its hash code will not collide with the value from any other thread, regardless of the application domain from which you obtain the value.</span></span>  
  
-   <span data-ttu-id="91365-172">Является идентификатором потока.</span><span class="sxs-lookup"><span data-stu-id="91365-172">A thread ID.</span></span> <span data-ttu-id="91365-173">Значение только для чтения <xref:System.Threading.Thread.ManagedThreadId%2A> свойство назначается средой выполнения и однозначно определяет поток внутри своего процесса.</span><span class="sxs-lookup"><span data-stu-id="91365-173">The value of the read-only <xref:System.Threading.Thread.ManagedThreadId%2A> property is assigned by the runtime and uniquely identifies a thread within its process.</span></span>  
  
    > [!NOTE]
    >  <span data-ttu-id="91365-174">[ThreadId](https://msdn.microsoft.com/library/windows/desktop/ms683233.aspx) операционной системы не имеет фиксированного отношения с управляемым потоком, так как неуправляемый узел может управлять отношением между управляемым и неуправляемым потоками.</span><span class="sxs-lookup"><span data-stu-id="91365-174">An operating-system [ThreadId](https://msdn.microsoft.com/library/windows/desktop/ms683233.aspx) has no fixed relationship to a managed thread, because an unmanaged host can control the relationship between managed and unmanaged threads.</span></span> <span data-ttu-id="91365-175">В частности, более сложный узел может использовать [API размещения среды CLR](https://msdn.microsoft.com/library/ms404385.aspx) спланировать нескольких управляемых потоков для одного потока операционной системы или перемещать управляемый поток между различными потоками операционной системы.</span><span class="sxs-lookup"><span data-stu-id="91365-175">Specifically, a sophisticated host can use the [CLR Hosting API](https://msdn.microsoft.com/library/ms404385.aspx) to schedule many managed threads against the same operating system thread, or to move a managed thread between different operating system threads.</span></span>  
  
-   <span data-ttu-id="91365-176">Текущее состояние потока.</span><span class="sxs-lookup"><span data-stu-id="91365-176">The thread's current state.</span></span> <span data-ttu-id="91365-177">В течение своего существования поток всегда находится в один или несколько состояний, которые определены по <xref:System.Threading.ThreadState> свойство.</span><span class="sxs-lookup"><span data-stu-id="91365-177">For the duration of its existence, a thread is always in one or more of the states defined by the <xref:System.Threading.ThreadState> property.</span></span>  
  
-   <span data-ttu-id="91365-178">Планирование уровня приоритета, который определяется с <xref:System.Threading.ThreadPriority> свойство.</span><span class="sxs-lookup"><span data-stu-id="91365-178">A scheduling priority level, which is defined by the <xref:System.Threading.ThreadPriority> property.</span></span> <span data-ttu-id="91365-179">Несмотря на то, что это значение для запроса приоритет потока, не гарантируется соблюдаться операционной системой.</span><span class="sxs-lookup"><span data-stu-id="91365-179">Although you can set this value to request a thread's priority, it is not guaranteed to be honored by the operating system.</span></span>  
  
-   <span data-ttu-id="91365-180">Только для чтения <xref:System.Threading.Thread.IsThreadPoolThread%2A> свойство, которое указывает, является ли поток в поток из пула потоков.</span><span class="sxs-lookup"><span data-stu-id="91365-180">The read-only <xref:System.Threading.Thread.IsThreadPoolThread%2A> property, which indicates whether a thread is  a thread pool thread.</span></span>  
  
-   <span data-ttu-id="91365-181">Свойство <xref:System.Threading.Thread.IsBackground%2A>.</span><span class="sxs-lookup"><span data-stu-id="91365-181">The <xref:System.Threading.Thread.IsBackground%2A> property.</span></span> <span data-ttu-id="91365-182">Дополнительные сведения см. в разделе [потоки переднего плана и фона](#Foreground) раздела.</span><span class="sxs-lookup"><span data-stu-id="91365-182">For more information, see the [Foreground and background threads](#Foreground) section.</span></span>  
  
## Examples  
 <span data-ttu-id="91365-183">В следующем примере показано простое потоковой функции.</span><span class="sxs-lookup"><span data-stu-id="91365-183">The following example demonstrates simple threading functionality.</span></span>  
  
 [!code-cpp[Classic Thread Example#1](~/samples/snippets/cpp/VS_Snippets_CLR_Classic/classic Thread Example/CPP/source.cpp#1)]
 [!code-csharp[Classic Thread Example#1](~/samples/snippets/csharp/VS_Snippets_CLR_Classic/classic Thread Example/CS/source.cs#1)]
 [!code-vb[Classic Thread Example#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_Classic/classic Thread Example/VB/source.vb#1)]  
  
 <span data-ttu-id="91365-184">Этот код выводит выходные данные, аналогичные следующим:</span><span class="sxs-lookup"><span data-stu-id="91365-184">This code produces output similar to the following:</span></span>  
  
```  
[VB, C++, C#]  
Main thread: Start a second thread.  
Main thread: Do some work.  
ThreadProc: 0  
Main thread: Do some work.  
ThreadProc: 1  
Main thread: Do some work.  
ThreadProc: 2  
Main thread: Do some work.  
ThreadProc: 3  
Main thread: Call Join(), to wait until ThreadProc ends.  
ThreadProc: 4  
ThreadProc: 5  
ThreadProc: 6  
ThreadProc: 7  
ThreadProc: 8  
ThreadProc: 9  
Main thread: ThreadProc.Join has returned.  Press Enter to end program.  
```  
  
 ]]></format>
    </remarks>
    <threadsafe><span data-ttu-id="91365-185">Данный тип потокобезопасен.</span><span class="sxs-lookup"><span data-stu-id="91365-185">This type is thread safe.</span></span></threadsafe>
  </Docs>
  <Members>
    <MemberGroup MemberName=".ctor">
      <AssemblyInfo>
        <AssemblyName>System.Threading.Thread</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="91365-186">Инициализирует новый экземпляр класса <see cref="T:System.Threading.Thread" />.</span><span class="sxs-lookup"><span data-stu-id="91365-186">Initializes a new instance of the <see cref="T:System.Threading.Thread" /> class.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public Thread (System.Threading.ParameterizedThreadStart start);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.Threading.ParameterizedThreadStart start) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Thread.#ctor(System.Threading.ParameterizedThreadStart)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (start As ParameterizedThreadStart)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; Thread(System::Threading::ParameterizedThreadStart ^ start);" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Thread</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters>
        <Parameter Name="start" Type="System.Threading.ParameterizedThreadStart" />
      </Parameters>
      <Docs>
        <param name="start"><span data-ttu-id="91365-187">Делегат, указывающий на методы, которые вызываются при запуске потока.</span><span class="sxs-lookup"><span data-stu-id="91365-187">A delegate that represents the methods to be invoked when this thread begins executing.</span></span></param>
        <summary><span data-ttu-id="91365-188">Инициализирует новый экземпляр класса <see cref="T:System.Threading.Thread" />, при этом указывается делегат, позволяющий объекту быть переданным в поток при запуске потока.</span><span class="sxs-lookup"><span data-stu-id="91365-188">Initializes a new instance of the <see cref="T:System.Threading.Thread" /> class, specifying a delegate that allows an object to be passed to the thread when the thread is started.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="91365-189">Поток не запускается при его создании.</span><span class="sxs-lookup"><span data-stu-id="91365-189">A thread does not begin executing when it is created.</span></span> <span data-ttu-id="91365-190">Чтобы запланировать для выполнения потока, вызовите <xref:System.Threading.Thread.Start%2A> метод.</span><span class="sxs-lookup"><span data-stu-id="91365-190">To schedule the thread for execution, call the <xref:System.Threading.Thread.Start%2A> method.</span></span> <span data-ttu-id="91365-191">Чтобы передать объект данных в поток, используйте <xref:System.Threading.Thread.Start%28System.Object%29> перегрузки метода.</span><span class="sxs-lookup"><span data-stu-id="91365-191">To pass a data object to the thread, use the <xref:System.Threading.Thread.Start%28System.Object%29> method overload.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="91365-192">Пользователи Visual Basic могут опускать <xref:System.Threading.ThreadStart> конструктор при создании потока.</span><span class="sxs-lookup"><span data-stu-id="91365-192">Visual Basic users can omit the <xref:System.Threading.ThreadStart> constructor when creating a thread.</span></span> <span data-ttu-id="91365-193">Используйте `AddressOf` оператор при передаче в метод, например `Dim t As New Thread(AddressOf ThreadProc)`.</span><span class="sxs-lookup"><span data-stu-id="91365-193">Use the `AddressOf` operator when passing your method, for example `Dim t As New Thread(AddressOf ThreadProc)`.</span></span> <span data-ttu-id="91365-194">Visual Basic автоматически вызывает <xref:System.Threading.ThreadStart> конструктор.</span><span class="sxs-lookup"><span data-stu-id="91365-194">Visual Basic automatically calls the <xref:System.Threading.ThreadStart> constructor.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="91365-195">В примере показан синтаксис для создания и использования <xref:System.Threading.ParameterizedThreadStart> делегат со статическим методом и методом экземпляра.</span><span class="sxs-lookup"><span data-stu-id="91365-195">The following example shows the syntax for creating and using a <xref:System.Threading.ParameterizedThreadStart> delegate with a static method and an instance method.</span></span>  
  
 [!code-cpp[System.Threading.ParameterizedThreadStart#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Threading.ParameterizedThreadStart/CPP/source.cpp#1)]
 [!code-csharp[System.Threading.ParameterizedThreadStart#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Threading.ParameterizedThreadStart/CS/source.cs#1)]
 [!code-vb[System.Threading.ParameterizedThreadStart#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Threading.ParameterizedThreadStart/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="91365-196">Свойство <paramref name="start" /> имеет значение <see langword="null" />.</span><span class="sxs-lookup"><span data-stu-id="91365-196"><paramref name="start" /> is <see langword="null" />.</span></span></exception>
        <altmember cref="T:System.Threading.ParameterizedThreadStart" />
        <altmember cref="Overload:System.Threading.Thread.Start" />
        <altmember cref="T:System.AppDomain" />
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public Thread (System.Threading.ThreadStart start);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.Threading.ThreadStart start) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Thread.#ctor(System.Threading.ThreadStart)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (start As ThreadStart)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; Thread(System::Threading::ThreadStart ^ start);" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Thread</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters>
        <Parameter Name="start" Type="System.Threading.ThreadStart" />
      </Parameters>
      <Docs>
        <param name="start"><span data-ttu-id="91365-197">Делегат <see cref="T:System.Threading.ThreadStart" />, указывающий на методы, которые вызываются при запуске потока.</span><span class="sxs-lookup"><span data-stu-id="91365-197">A <see cref="T:System.Threading.ThreadStart" /> delegate that represents the methods to be invoked when this thread begins executing.</span></span></param>
        <summary><span data-ttu-id="91365-198">Инициализирует новый экземпляр класса <see cref="T:System.Threading.Thread" />.</span><span class="sxs-lookup"><span data-stu-id="91365-198">Initializes a new instance of the <see cref="T:System.Threading.Thread" /> class.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="91365-199">Поток не запускается при его создании.</span><span class="sxs-lookup"><span data-stu-id="91365-199">A thread does not begin executing when it is created.</span></span> <span data-ttu-id="91365-200">Чтобы запланировать для выполнения потока, вызовите <xref:System.Threading.Thread.Start%2A> метод.</span><span class="sxs-lookup"><span data-stu-id="91365-200">To schedule the thread for execution, call the <xref:System.Threading.Thread.Start%2A> method.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="91365-201">Пользователи Visual Basic могут опускать <xref:System.Threading.ThreadStart> конструктор при создании потока.</span><span class="sxs-lookup"><span data-stu-id="91365-201">Visual Basic users can omit the <xref:System.Threading.ThreadStart> constructor when creating a thread.</span></span> <span data-ttu-id="91365-202">Используйте `AddressOf` оператор при передаче методе, например `Dim t As New Thread(AddressOf ThreadProc)`.</span><span class="sxs-lookup"><span data-stu-id="91365-202">Use the `AddressOf` operator when passing your method for example `Dim t As New Thread(AddressOf ThreadProc)`.</span></span> <span data-ttu-id="91365-203">Visual Basic автоматически вызывает <xref:System.Threading.ThreadStart> конструктор.</span><span class="sxs-lookup"><span data-stu-id="91365-203">Visual Basic automatically calls the <xref:System.Threading.ThreadStart> constructor.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="91365-204">В следующем примере кода демонстрируется создание потока, выполняющего статический метод.</span><span class="sxs-lookup"><span data-stu-id="91365-204">The following code example shows how to create a thread that executes a static method.</span></span>  
  
 [!code-cpp[System.Threading.Thread.ctor#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Threading.Thread.ctor/CPP/source.cpp#1)]
 [!code-csharp[System.Threading.Thread.ctor#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Threading.Thread.ctor/CS/source.cs#1)]
 [!code-vb[System.Threading.Thread.ctor#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Threading.Thread.ctor/VB/source.vb#1)]  
  
 <span data-ttu-id="91365-205">В следующем примере кода демонстрируется создание потока, выполняющего метод экземпляра.</span><span class="sxs-lookup"><span data-stu-id="91365-205">The following code example shows how to create a thread that executes an instance method.</span></span>  
  
 [!code-cpp[System.Threading.Thread.ctor2#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Threading.Thread.ctor2/CPP/source.cpp#1)]
 [!code-csharp[System.Threading.Thread.ctor2#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Threading.Thread.ctor2/CS/source.cs#1)]
 [!code-vb[System.Threading.Thread.ctor2#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Threading.Thread.ctor2/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="91365-206">Параметр <paramref name="start" /> имеет значение <see langword="null" />.</span><span class="sxs-lookup"><span data-stu-id="91365-206">The <paramref name="start" /> parameter is <see langword="null" />.</span></span></exception>
        <altmember cref="T:System.Threading.ThreadStart" />
        <altmember cref="Overload:System.Threading.Thread.Start" />
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public Thread (System.Threading.ParameterizedThreadStart start, int maxStackSize);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.Threading.ParameterizedThreadStart start, int32 maxStackSize) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Thread.#ctor(System.Threading.ParameterizedThreadStart,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (start As ParameterizedThreadStart, maxStackSize As Integer)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; Thread(System::Threading::ParameterizedThreadStart ^ start, int maxStackSize);" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Thread</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters>
        <Parameter Name="start" Type="System.Threading.ParameterizedThreadStart" />
        <Parameter Name="maxStackSize" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="start"><span data-ttu-id="91365-207">Делегат <see cref="T:System.Threading.ParameterizedThreadStart" />, указывающий на методы, которые вызываются при запуске потока.</span><span class="sxs-lookup"><span data-stu-id="91365-207">A <see cref="T:System.Threading.ParameterizedThreadStart" /> delegate that represents the methods to be invoked when this thread begins executing.</span></span></param>
        <param name="maxStackSize"><span data-ttu-id="91365-208">Максимальный размер стека в байтах, используемый потоком, или же 0 для использования максимального размера по умолчанию, указывается в заголовке исполняемого файла.</span><span class="sxs-lookup"><span data-stu-id="91365-208">The maximum stack size, in bytes, to be used by the thread, or 0 to use the default maximum stack size specified in the header for the executable.</span></span>  
  
 <span data-ttu-id="91365-209">Внимание! Для частично доверенного кода значение параметра <c>maxStackSize</c> игнорируется, если оно превышает размер стека по умолчанию.</span><span class="sxs-lookup"><span data-stu-id="91365-209">Important   For partially trusted code, <c>maxStackSize</c> is ignored if it is greater than the default stack size.</span></span> <span data-ttu-id="91365-210">Исключение не возникает.</span><span class="sxs-lookup"><span data-stu-id="91365-210">No exception is thrown.</span></span></param>
        <summary><span data-ttu-id="91365-211">Инициализирует новый экземпляр класса <see cref="T:System.Threading.Thread" />, при этом указывается делегат, позволяющий объекту быть переданным в поток при запуске потока с указанием максимального размера стека для потока.</span><span class="sxs-lookup"><span data-stu-id="91365-211">Initializes a new instance of the <see cref="T:System.Threading.Thread" /> class, specifying a delegate that allows an object to be passed to the thread when the thread is started and specifying the maximum stack size for the thread.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="91365-212">Старайтесь не использовать эту перегрузку конструктора.</span><span class="sxs-lookup"><span data-stu-id="91365-212">Avoid using this constructor overload.</span></span> <span data-ttu-id="91365-213">Размер стека по умолчанию, используемые <xref:System.Threading.Thread.%23ctor%28System.Threading.ParameterizedThreadStart%29> перегрузку конструктора — это размер стека, рекомендуемые для потоков.</span><span class="sxs-lookup"><span data-stu-id="91365-213">The default stack size used by the <xref:System.Threading.Thread.%23ctor%28System.Threading.ParameterizedThreadStart%29> constructor overload is the recommended stack size for threads.</span></span> <span data-ttu-id="91365-214">Если поток имеет проблем с памятью, наиболее вероятной причиной является программирования ошибка, например бесконечной рекурсии.</span><span class="sxs-lookup"><span data-stu-id="91365-214">If a thread has memory problems, the most likely cause is programming error, such as infinite recursion.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="91365-215">Начиная с версии [!INCLUDE[net_v40_long](~/includes/net-v40-long-md.md)], только полностью доверенный код может установить `maxStackSize` значение которого больше, чем размер стека по умолчанию (1 МБ).</span><span class="sxs-lookup"><span data-stu-id="91365-215">Beginning with the [!INCLUDE[net_v40_long](~/includes/net-v40-long-md.md)], only fully trusted code can set `maxStackSize` to a value that is greater than the default stack size (1 megabyte).</span></span> <span data-ttu-id="91365-216">Если указано большее значение для `maxStackSize` при выполнении кода с частичным доверием `maxStackSize` игнорируется и используется размер стека по умолчанию.</span><span class="sxs-lookup"><span data-stu-id="91365-216">If a larger value is specified for `maxStackSize` when code is running with partial trust, `maxStackSize` is ignored and the default stack size is used.</span></span> <span data-ttu-id="91365-217">Исключение не возникает.</span><span class="sxs-lookup"><span data-stu-id="91365-217">No exception is thrown.</span></span> <span data-ttu-id="91365-218">Код на любом уровне доверия, может установить `maxStackSize` значение которого меньше, чем размер стека по умолчанию.</span><span class="sxs-lookup"><span data-stu-id="91365-218">Code at any trust level can set `maxStackSize` to a value that is less than the default stack size.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="91365-219">Если вы разрабатываете полностью доверенной библиотеки, который будет использоваться частично доверенным кодом, и необходимо запустить поток, требует большого стека, перед созданием потока должно подтвердить полное доверие или размер стека по умолчанию будет использоваться.</span><span class="sxs-lookup"><span data-stu-id="91365-219">If you are developing a fully trusted library that will be used by partially trusted code, and you need to start a thread that requires a large stack, you must assert full trust before creating the thread, or the default stack size will be used.</span></span> <span data-ttu-id="91365-220">Не делайте этого, если вы полностью управления кодом, который выполняется в потоке.</span><span class="sxs-lookup"><span data-stu-id="91365-220">Do not do this unless you fully control the code that runs on the thread.</span></span>  
  
 <span data-ttu-id="91365-221">Если `maxStackSize` меньше, чем минимальный размер стека, используется минимальный размер стека.</span><span class="sxs-lookup"><span data-stu-id="91365-221">If `maxStackSize` is less than the minimum stack size, the minimum stack size is used.</span></span> <span data-ttu-id="91365-222">Если `maxStackSize` не кратному размеру страницы, оно округляется до следующего большего кратной размеру страницы.</span><span class="sxs-lookup"><span data-stu-id="91365-222">If `maxStackSize` is not a multiple of the page size, it is rounded to the next larger multiple of the page size.</span></span> <span data-ttu-id="91365-223">Например при использовании .NET Framework версии 2.0 в Windows Vista 256 КБ (262 144 байт) является минимальным размером стека, а размер страницы равен 64 КБ (65 536 байт).</span><span class="sxs-lookup"><span data-stu-id="91365-223">For example, if you are using the .NET Framework version 2.0 on Windows Vista, 256KB (262,144 bytes) is the minimum stack size, and the page size is 64KB (65,536 bytes).</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="91365-224">В версиях Microsoft Windows до Windows XP и Windows Server 2003 `maxStackSize` игнорируется, и используется размер стека, указанный в заголовке исполняемого.</span><span class="sxs-lookup"><span data-stu-id="91365-224">On versions of Microsoft Windows prior to Windows XP and Windows Server 2003, `maxStackSize` is ignored, and the stack size specified in the executable header is used.</span></span>  
  
 <span data-ttu-id="91365-225">При указании очень малого размера стека, может потребоваться отключить проверки на переполнение стека.</span><span class="sxs-lookup"><span data-stu-id="91365-225">If you specify a very small stack size, you might need to disable stack-overflow probing.</span></span> <span data-ttu-id="91365-226">Если стек строго ограничивается, проверка сама может вызвать переполнение стека.</span><span class="sxs-lookup"><span data-stu-id="91365-226">When the stack is severely constrained, the probing can itself cause a stack overflow.</span></span> <span data-ttu-id="91365-227">Чтобы отключить проверку переполнения стека, добавьте следующий файл конфигурации приложения.</span><span class="sxs-lookup"><span data-stu-id="91365-227">To disable stack overflow probing, add the following to your application configuration file.</span></span>  
  
```xml  
<configuration>  
  <runtime>  
    <disableStackOverflowProbing enabled="true"/>  
  </runtime>  
</configuration>  
```  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="91365-228">Свойство <paramref name="start" /> имеет значение <see langword="null" />.</span><span class="sxs-lookup"><span data-stu-id="91365-228"><paramref name="start" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <span data-ttu-id="91365-229">Значение параметра <paramref name="maxStackSize" /> меньше нуля.</span><span class="sxs-lookup"><span data-stu-id="91365-229"><paramref name="maxStackSize" /> is less than zero.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public Thread (System.Threading.ThreadStart start, int maxStackSize);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.Threading.ThreadStart start, int32 maxStackSize) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Thread.#ctor(System.Threading.ThreadStart,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (start As ThreadStart, maxStackSize As Integer)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; Thread(System::Threading::ThreadStart ^ start, int maxStackSize);" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Thread</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters>
        <Parameter Name="start" Type="System.Threading.ThreadStart" />
        <Parameter Name="maxStackSize" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="start"><span data-ttu-id="91365-230">Делегат <see cref="T:System.Threading.ThreadStart" />, указывающий на методы, которые вызываются при запуске потока.</span><span class="sxs-lookup"><span data-stu-id="91365-230">A <see cref="T:System.Threading.ThreadStart" /> delegate that represents the methods to be invoked when this thread begins executing.</span></span></param>
        <param name="maxStackSize"><span data-ttu-id="91365-231">Максимальный размер стека в байтах, используемый потоком, или же 0 для использования максимального размера по умолчанию, указывается в заголовке исполняемого файла.</span><span class="sxs-lookup"><span data-stu-id="91365-231">The maximum stack size, in bytes, to be used by the thread, or 0 to use the default maximum stack size specified in the header for the executable.</span></span>  
  
 <span data-ttu-id="91365-232">Внимание! Для частично доверенного кода значение параметра <c>maxStackSize</c> игнорируется, если оно превышает размер стека по умолчанию.</span><span class="sxs-lookup"><span data-stu-id="91365-232">Important   For partially trusted code, <c>maxStackSize</c> is ignored if it is greater than the default stack size.</span></span> <span data-ttu-id="91365-233">Исключение не возникает.</span><span class="sxs-lookup"><span data-stu-id="91365-233">No exception is thrown.</span></span></param>
        <summary><span data-ttu-id="91365-234">Инициализирует новый экземпляр класса <see cref="T:System.Threading.Thread" />, указывая максимальный размер стека для потока.</span><span class="sxs-lookup"><span data-stu-id="91365-234">Initializes a new instance of the <see cref="T:System.Threading.Thread" /> class, specifying the maximum stack size for the thread.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="91365-235">Старайтесь не использовать эту перегрузку конструктора.</span><span class="sxs-lookup"><span data-stu-id="91365-235">Avoid using this constructor overload.</span></span> <span data-ttu-id="91365-236">Размер стека по умолчанию, используемые <xref:System.Threading.Thread.%23ctor%28System.Threading.ThreadStart%29> перегрузку конструктора — это размер стека, рекомендуемые для потоков.</span><span class="sxs-lookup"><span data-stu-id="91365-236">The default stack size used by the <xref:System.Threading.Thread.%23ctor%28System.Threading.ThreadStart%29> constructor overload is the recommended stack size for threads.</span></span> <span data-ttu-id="91365-237">Если поток имеет проблем с памятью, наиболее вероятной причиной является программирования ошибка, например бесконечной рекурсии.</span><span class="sxs-lookup"><span data-stu-id="91365-237">If a thread has memory problems, the most likely cause is programming error, such as infinite recursion.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="91365-238">Начиная с версии [!INCLUDE[net_v40_long](~/includes/net-v40-long-md.md)], только полностью доверенный код может установить `maxStackSize` значение которого больше, чем размер стека по умолчанию (1 МБ).</span><span class="sxs-lookup"><span data-stu-id="91365-238">Beginning with the [!INCLUDE[net_v40_long](~/includes/net-v40-long-md.md)], only fully trusted code can set `maxStackSize` to a value that is greater than the default stack size (1 megabyte).</span></span> <span data-ttu-id="91365-239">Если указано большее значение для `maxStackSize` при выполнении кода с частичным доверием `maxStackSize` игнорируется и используется размер стека по умолчанию.</span><span class="sxs-lookup"><span data-stu-id="91365-239">If a larger value is specified for `maxStackSize` when code is running with partial trust, `maxStackSize` is ignored and the default stack size is used.</span></span> <span data-ttu-id="91365-240">Исключение не возникает.</span><span class="sxs-lookup"><span data-stu-id="91365-240">No exception is thrown.</span></span> <span data-ttu-id="91365-241">Код на любом уровне доверия, может установить `maxStackSize` значение которого меньше, чем размер стека по умолчанию.</span><span class="sxs-lookup"><span data-stu-id="91365-241">Code at any trust level can set `maxStackSize` to a value that is less than the default stack size.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="91365-242">Если вы разрабатываете полностью доверенной библиотеки, который будет использоваться частично доверенным кодом, и необходимо запустить поток, требует большого стека, перед созданием потока должно подтвердить полное доверие или размер стека по умолчанию будет использоваться.</span><span class="sxs-lookup"><span data-stu-id="91365-242">If you are developing a fully trusted library that will be used by partially trusted code, and you need to start a thread that requires a large stack, you must assert full trust before creating the thread, or the default stack size will be used.</span></span> <span data-ttu-id="91365-243">Не делайте этого, если вы полностью управления кодом, который выполняется в потоке.</span><span class="sxs-lookup"><span data-stu-id="91365-243">Do not do this unless you fully control the code that runs on the thread.</span></span>  
  
 <span data-ttu-id="91365-244">Если `maxStackSize` меньше, чем минимальный размер стека, используется минимальный размер стека.</span><span class="sxs-lookup"><span data-stu-id="91365-244">If `maxStackSize` is less than the minimum stack size, the minimum stack size is used.</span></span> <span data-ttu-id="91365-245">Если `maxStackSize` не кратному размеру страницы, оно округляется до следующего большего кратной размеру страницы.</span><span class="sxs-lookup"><span data-stu-id="91365-245">If `maxStackSize` is not a multiple of the page size, it is rounded to the next larger multiple of the page size.</span></span> <span data-ttu-id="91365-246">Например при использовании .NET Framework версии 2.0 в Windows Vista 256 КБ (262 144 байт) является минимальным размером стека, а размер страницы равен 64 КБ (65 536 байт).</span><span class="sxs-lookup"><span data-stu-id="91365-246">For example, if you are using the .NET Framework version 2.0 on Windows Vista, 256KB (262,144 bytes) is the minimum stack size, and the page size is 64KB (65,536 bytes).</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="91365-247">В версиях Microsoft Windows до Windows XP и Windows Server 2003 `maxStackSize` игнорируется, и используется размер стека, указанный в заголовке исполняемого.</span><span class="sxs-lookup"><span data-stu-id="91365-247">On versions of Microsoft Windows prior to Windows XP and Windows Server 2003, `maxStackSize` is ignored, and the stack size specified in the executable header is used.</span></span>  
  
 <span data-ttu-id="91365-248">При указании очень малого размера стека, может потребоваться отключить проверки на переполнение стека.</span><span class="sxs-lookup"><span data-stu-id="91365-248">If you specify a very small stack size, you might need to disable stack-overflow probing.</span></span> <span data-ttu-id="91365-249">Если стек строго ограничивается, проверка сама может вызвать переполнение стека.</span><span class="sxs-lookup"><span data-stu-id="91365-249">When the stack is severely constrained, the probing can itself cause a stack overflow.</span></span> <span data-ttu-id="91365-250">Чтобы отключить проверку переполнения стека, добавьте следующий файл конфигурации приложения.</span><span class="sxs-lookup"><span data-stu-id="91365-250">To disable stack overflow probing, add the following to your application configuration file.</span></span>  
  
```xml  
<configuration>  
  <runtime>  
    <disableStackOverflowProbing enabled="true"/>  
  </runtime>  
</configuration>  
```  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="91365-251">Свойство <paramref name="start" /> имеет значение <see langword="null" />.</span><span class="sxs-lookup"><span data-stu-id="91365-251"><paramref name="start" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <span data-ttu-id="91365-252">Значение параметра <paramref name="maxStackSize" /> меньше нуля.</span><span class="sxs-lookup"><span data-stu-id="91365-252"><paramref name="maxStackSize" /> is less than zero.</span></span></exception>
      </Docs>
    </Member>
    <MemberGroup MemberName="Abort">
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="91365-253">Вызывает исключение <see cref="T:System.Threading.ThreadAbortException" /> в вызвавшем его потоке для того, чтобы начать процесс завершения потока.</span><span class="sxs-lookup"><span data-stu-id="91365-253">Raises a <see cref="T:System.Threading.ThreadAbortException" /> in the thread on which it is invoked, to begin the process of terminating the thread.</span></span> <span data-ttu-id="91365-254">Вызов данного метода обычно завершает поток.</span><span class="sxs-lookup"><span data-stu-id="91365-254">Calling this method usually terminates the thread.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Abort">
      <MemberSignature Language="C#" Value="public void Abort ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Abort() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Thread.Abort" />
      <MemberSignature Language="VB.NET" Value="Public Sub Abort ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Abort();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Thread</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="91365-255">Вызывает исключение <see cref="T:System.Threading.ThreadAbortException" /> в вызвавшем его потоке для того, чтобы начать процесс завершения потока.</span><span class="sxs-lookup"><span data-stu-id="91365-255">Raises a <see cref="T:System.Threading.ThreadAbortException" /> in the thread on which it is invoked, to begin the process of terminating the thread.</span></span> <span data-ttu-id="91365-256">Вызов данного метода обычно завершает поток.</span><span class="sxs-lookup"><span data-stu-id="91365-256">Calling this method usually terminates the thread.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="91365-257">Если этот метод вызывается в потоке, система создает <xref:System.Threading.ThreadAbortException> в потоке для аварийного завершения.</span><span class="sxs-lookup"><span data-stu-id="91365-257">When this method is invoked on a thread, the system throws a <xref:System.Threading.ThreadAbortException> in the thread to abort it.</span></span> <span data-ttu-id="91365-258">`ThreadAbortException` — специальное исключение, которое может перехватываться кодом приложения, но вызывается повторно в конце `catch` блокируется пока <xref:System.Threading.Thread.ResetAbort%2A> вызывается.</span><span class="sxs-lookup"><span data-stu-id="91365-258">`ThreadAbortException` is a special exception that can be caught by application code, but is re-thrown at the end of the `catch` block unless <xref:System.Threading.Thread.ResetAbort%2A> is called.</span></span> <span data-ttu-id="91365-259">`ResetAbort` Отменяет запрос на аварийное завершение и предотвращает `ThreadAbortException` от завершения потока.</span><span class="sxs-lookup"><span data-stu-id="91365-259">`ResetAbort` cancels the request to abort, and prevents the `ThreadAbortException` from terminating the thread.</span></span> <span data-ttu-id="91365-260">Невыполненные `finally` блоки выполняются перед поток прерван.</span><span class="sxs-lookup"><span data-stu-id="91365-260">Unexecuted `finally` blocks are executed before the thread is aborted.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="91365-261">Если поток вызывает `Abort` для себя, действует аналогично исключение; <xref:System.Threading.ThreadAbortException> произойдет немедленно, и результат является предсказуемым.</span><span class="sxs-lookup"><span data-stu-id="91365-261">When a thread calls `Abort` on itself, the effect is similar to throwing an exception; the <xref:System.Threading.ThreadAbortException> happens immediately, and the result is predictable.</span></span> <span data-ttu-id="91365-262">Тем не менее если один поток вызывает `Abort` в другом потоке, аварийное завершение прерывает любой выполняющийся код.</span><span class="sxs-lookup"><span data-stu-id="91365-262">However, if one thread calls `Abort` on another thread, the abort interrupts whatever code is running.</span></span> <span data-ttu-id="91365-263">Имеется также вероятно аварийное завершение статического конструктора.</span><span class="sxs-lookup"><span data-stu-id="91365-263">There is also a chance that a static constructor could be aborted.</span></span> <span data-ttu-id="91365-264">В редких случаях это может препятствовать экземпляры этого класса в данном домене приложения.</span><span class="sxs-lookup"><span data-stu-id="91365-264">In rare cases, this might prevent instances of that class from being created in that application domain.</span></span> <span data-ttu-id="91365-265">В .NET Framework версий 1.0 и 1.1, есть вероятность, поток может прервать пока `finally` блок выполняется, в этом случае `finally` блок прерывается.</span><span class="sxs-lookup"><span data-stu-id="91365-265">In the .NET Framework versions 1.0 and 1.1, there is a chance the thread could abort while a `finally` block is running, in which case the `finally` block is aborted.</span></span>  
  
 <span data-ttu-id="91365-266">Не гарантируется, что поток прервется немедленно или вообще.</span><span class="sxs-lookup"><span data-stu-id="91365-266">The thread is not guaranteed to abort immediately, or at all.</span></span> <span data-ttu-id="91365-267">Такая ситуация может возникнуть, если поток выполняет неограниченное количество вычислений в `finally` блоки, которые вызываются как часть процедуры прерывания, откладывая аварийное завершение тем самым неопределенное время.</span><span class="sxs-lookup"><span data-stu-id="91365-267">This situation can occur if a thread does an unbounded amount of computation in the `finally` blocks that are called as part of the abort procedure, thereby indefinitely delaying the abort.</span></span> <span data-ttu-id="91365-268">Подождать, пока поток был прерван, можно вызвать <xref:System.Threading.Thread.Join%2A> метод в потоке после вызова <xref:System.Threading.Thread.Abort%2A> метода, но нет никакой гарантии, истекает время ожидания.</span><span class="sxs-lookup"><span data-stu-id="91365-268">To wait until a thread has aborted, you can call the <xref:System.Threading.Thread.Join%2A> method on the thread after calling the <xref:System.Threading.Thread.Abort%2A> method, but there is no guarantee the wait will end.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="91365-269">Поток, который вызывает <xref:System.Threading.Thread.Abort%2A> может блокироваться, если поток, который прерывается находится в защищенной области кода, такие как `catch` блока `finally` блока или области ограниченного выполнения.</span><span class="sxs-lookup"><span data-stu-id="91365-269">The thread that calls <xref:System.Threading.Thread.Abort%2A> might block if the thread that is being aborted is in a protected region of code, such as a `catch` block, `finally` block, or constrained execution region.</span></span> <span data-ttu-id="91365-270">Если поток, вызывающий <xref:System.Threading.Thread.Abort%2A> удерживает блокировку, требуемую прерванным потоком, может произойти взаимоблокировка.</span><span class="sxs-lookup"><span data-stu-id="91365-270">If the thread that calls <xref:System.Threading.Thread.Abort%2A> holds a lock that the aborted thread requires, a deadlock can occur.</span></span>  
  
 <span data-ttu-id="91365-271">Если `Abort` вызывается в потоке, который не был запущен, поток будет прервана, когда <xref:System.Threading.Thread.Start%2A> вызывается.</span><span class="sxs-lookup"><span data-stu-id="91365-271">If `Abort` is called on a thread that has not been started, the thread will abort when <xref:System.Threading.Thread.Start%2A> is called.</span></span> <span data-ttu-id="91365-272">Если `Abort` вызывается в потоке, который заблокирован или находится в спящем режиме, поток прерывается и затем прервана.</span><span class="sxs-lookup"><span data-stu-id="91365-272">If `Abort` is called on a thread that is blocked or is sleeping, the thread is interrupted and then aborted.</span></span>  
  
 <span data-ttu-id="91365-273">Если `Abort` вызывается в потоке, который был приостановлен, <xref:System.Threading.ThreadStateException> исключение в потоке, который вызвал <xref:System.Threading.Thread.Abort%2A>, и <xref:System.Threading.ThreadState.AbortRequested> добавляется <xref:System.Threading.Thread.ThreadState%2A> свойство аварийно завершающимся потоком.</span><span class="sxs-lookup"><span data-stu-id="91365-273">If `Abort` is called on a thread that has been suspended, a <xref:System.Threading.ThreadStateException> is thrown in the thread that called <xref:System.Threading.Thread.Abort%2A>, and <xref:System.Threading.ThreadState.AbortRequested> is added to the <xref:System.Threading.Thread.ThreadState%2A> property of the thread being aborted.</span></span> <span data-ttu-id="91365-274">Объект <xref:System.Threading.ThreadAbortException> не вызывается в приостановленном потоке до <xref:System.Threading.Thread.Resume%2A> вызывается.</span><span class="sxs-lookup"><span data-stu-id="91365-274">A <xref:System.Threading.ThreadAbortException> is not thrown in the suspended thread until <xref:System.Threading.Thread.Resume%2A> is called.</span></span>  
  
 <span data-ttu-id="91365-275">Если `Abort` вызывается в управляемом потоке при выполнении неуправляемого кода `ThreadAbortException` не выдается до возвращения потока в управляемом коде.</span><span class="sxs-lookup"><span data-stu-id="91365-275">If `Abort` is called on a managed thread while it is executing unmanaged code, a `ThreadAbortException` is not thrown until the thread returns to managed code.</span></span>  
  
 <span data-ttu-id="91365-276">Если два вызова к `Abort` поступать одновременно, возможно, что один вызов для установки сведений о состоянии и вызов на выполнение `Abort`.</span><span class="sxs-lookup"><span data-stu-id="91365-276">If two calls to `Abort` come at the same time, it is possible for one call to set the state information and the other call to execute the `Abort`.</span></span> <span data-ttu-id="91365-277">Однако приложение не может определить ситуацию.</span><span class="sxs-lookup"><span data-stu-id="91365-277">However, an application cannot detect this situation.</span></span>  
  
 <span data-ttu-id="91365-278">После `Abort` вызывается в потоке, который содержит состояние потока <xref:System.Threading.ThreadState.AbortRequested>.</span><span class="sxs-lookup"><span data-stu-id="91365-278">After `Abort` is invoked on a thread, the state of the thread includes <xref:System.Threading.ThreadState.AbortRequested>.</span></span> <span data-ttu-id="91365-279">После завершения потока в результате успешного вызова `Abort`, состояние потока изменяется на <xref:System.Threading.ThreadState.Stopped>.</span><span class="sxs-lookup"><span data-stu-id="91365-279">After the thread has terminated as a result of a successful call to `Abort`, the state of the thread is changed to <xref:System.Threading.ThreadState.Stopped>.</span></span> <span data-ttu-id="91365-280">С достаточными разрешениями поток, который является целевым объектом `Abort` можно отменить аварийное завершение, используя `ResetAbort` метод.</span><span class="sxs-lookup"><span data-stu-id="91365-280">With sufficient permissions, a thread that is the target of an `Abort` can cancel the abort using the `ResetAbort` method.</span></span> <span data-ttu-id="91365-281">Пример, демонстрирующий вызов `ResetAbort` метода, в разделе `ThreadAbortException` класса.</span><span class="sxs-lookup"><span data-stu-id="91365-281">For an example that demonstrates calling the `ResetAbort` method, see the `ThreadAbortException` class.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.PlatformNotSupportedException"><span data-ttu-id="91365-282">Только в .NET Core: этот элемент не поддерживается.</span><span class="sxs-lookup"><span data-stu-id="91365-282">.NET Core only: This member is not supported.</span></span></exception>
        <exception cref="T:System.Security.SecurityException"><span data-ttu-id="91365-283">У вызывающего объекта отсутствует необходимое разрешение.</span><span class="sxs-lookup"><span data-stu-id="91365-283">The caller does not have the required permission.</span></span></exception>
        <exception cref="T:System.Threading.ThreadStateException"><span data-ttu-id="91365-284">Поток, который прерывается, в настоящий момент приостановлен.</span><span class="sxs-lookup"><span data-stu-id="91365-284">The thread that is being aborted is currently suspended.</span></span></exception>
        <permission cref="T:System.Security.Permissions.SecurityPermission"><span data-ttu-id="91365-285">для дополнительных операций над потоками.</span><span class="sxs-lookup"><span data-stu-id="91365-285">for advanced operations on threads.</span></span> <span data-ttu-id="91365-286">Связанное перечисление: <see cref="F:System.Security.Permissions.SecurityPermissionFlag.ControlThread" />.</span><span class="sxs-lookup"><span data-stu-id="91365-286">Associated enumeration: <see cref="F:System.Security.Permissions.SecurityPermissionFlag.ControlThread" />.</span></span></permission>
        <altmember cref="T:System.Threading.ThreadAbortException" />
        <altmember cref="F:System.Threading.ThreadState.Aborted" />
        <altmember cref="F:System.Threading.ThreadState.AbortRequested" />
      </Docs>
    </Member>
    <Member MemberName="Abort">
      <MemberSignature Language="C#" Value="public void Abort (object stateInfo);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Abort(object stateInfo) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Thread.Abort(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Abort (stateInfo As Object)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Abort(System::Object ^ stateInfo);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Thread</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="stateInfo" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="stateInfo"><span data-ttu-id="91365-287">Объект, который содержит информацию об определенном приложении, например состояние, которое может использоваться аварийно завершающимся потоком.</span><span class="sxs-lookup"><span data-stu-id="91365-287">An object that contains application-specific information, such as state, which can be used by the thread being aborted.</span></span></param>
        <summary><span data-ttu-id="91365-288">Вызывает исключение <see cref="T:System.Threading.ThreadAbortException" /> в вызвавшем его потоке для того, чтобы начать процесс завершения потока, в то же время предоставляя сведения об исключении касательно исключения завершения потока.</span><span class="sxs-lookup"><span data-stu-id="91365-288">Raises a <see cref="T:System.Threading.ThreadAbortException" /> in the thread on which it is invoked, to begin the process of terminating the thread while also providing exception information about the thread termination.</span></span> <span data-ttu-id="91365-289">Вызов данного метода обычно завершает поток.</span><span class="sxs-lookup"><span data-stu-id="91365-289">Calling this method usually terminates the thread.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="91365-290">Если этот метод вызывается в потоке, система создает <xref:System.Threading.ThreadAbortException> в потоке для аварийного завершения.</span><span class="sxs-lookup"><span data-stu-id="91365-290">When this method is invoked on a thread, the system throws a <xref:System.Threading.ThreadAbortException> in the thread to abort it.</span></span> <span data-ttu-id="91365-291">`ThreadAbortException` — специальное исключение, которое может перехватываться кодом приложения, но вызывается повторно в конце `catch` блокируется пока <xref:System.Threading.Thread.ResetAbort%2A> вызывается.</span><span class="sxs-lookup"><span data-stu-id="91365-291">`ThreadAbortException` is a special exception that can be caught by application code, but is re-thrown at the end of the `catch` block unless <xref:System.Threading.Thread.ResetAbort%2A> is called.</span></span> <span data-ttu-id="91365-292">`ResetAbort` Отменяет запрос на аварийное завершение и предотвращает `ThreadAbortException` от завершения потока.</span><span class="sxs-lookup"><span data-stu-id="91365-292">`ResetAbort` cancels the request to abort, and prevents the `ThreadAbortException` from terminating the thread.</span></span> <span data-ttu-id="91365-293">Невыполненные `finally` блоки выполняются перед поток прерван.</span><span class="sxs-lookup"><span data-stu-id="91365-293">Unexecuted `finally` blocks are executed before the thread is aborted.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="91365-294">Если поток вызывает `Abort` для себя, действует аналогично исключение; <xref:System.Threading.ThreadAbortException> произойдет немедленно, и результат является предсказуемым.</span><span class="sxs-lookup"><span data-stu-id="91365-294">When a thread calls `Abort` on itself, the effect is similar to throwing an exception; the <xref:System.Threading.ThreadAbortException> happens immediately, and the result is predictable.</span></span> <span data-ttu-id="91365-295">Тем не менее если один поток вызывает `Abort` в другом потоке, аварийное завершение прерывает любой выполняющийся код.</span><span class="sxs-lookup"><span data-stu-id="91365-295">However, if one thread calls `Abort` on another thread, the abort interrupts whatever code is running.</span></span> <span data-ttu-id="91365-296">Есть вероятность, что статический конструктор может прервана.</span><span class="sxs-lookup"><span data-stu-id="91365-296">There is a chance that a static constructor could be aborted.</span></span> <span data-ttu-id="91365-297">В редких случаях это может препятствовать экземпляры этого класса в данном домене приложения.</span><span class="sxs-lookup"><span data-stu-id="91365-297">In rare cases, this might prevent instances of that class from being created in that application domain.</span></span> <span data-ttu-id="91365-298">В .NET Framework версий 1.0 и 1.1, есть вероятность, поток может прервать пока `finally` блок выполняется, в этом случае `finally` блок прерывается.</span><span class="sxs-lookup"><span data-stu-id="91365-298">In the .NET Framework versions 1.0 and 1.1, there is a chance the thread could abort while a `finally` block is running, in which case the `finally` block is aborted.</span></span>  
  
 <span data-ttu-id="91365-299">Не гарантируется, что поток прервется немедленно или вообще.</span><span class="sxs-lookup"><span data-stu-id="91365-299">The thread is not guaranteed to abort immediately, or at all.</span></span> <span data-ttu-id="91365-300">Такая ситуация может возникнуть, если поток выполняет неограниченное количество вычислений в `finally` блоки, которые вызываются как часть процедуры прерывания, откладывая аварийное завершение тем самым неопределенное время.</span><span class="sxs-lookup"><span data-stu-id="91365-300">This situation can occur if a thread does an unbounded amount of computation in the `finally` blocks that are called as part of the abort procedure, thereby indefinitely delaying the abort.</span></span> <span data-ttu-id="91365-301">Подождать, пока поток был прерван, можно вызвать <xref:System.Threading.Thread.Join%2A> метод в потоке после вызова <xref:System.Threading.Thread.Abort%2A> метода, но нет никакой гарантии, что Ожидание завершится.</span><span class="sxs-lookup"><span data-stu-id="91365-301">To wait until a thread has aborted, you can call the <xref:System.Threading.Thread.Join%2A> method on the thread after calling the <xref:System.Threading.Thread.Abort%2A> method, but there is no guarantee that the wait will end.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="91365-302">Поток, который вызывает <xref:System.Threading.Thread.Abort%2A> может блокироваться, если поток, который прерывается находится в защищенной области кода, такие как `catch` блока `finally` блока или области ограниченного выполнения.</span><span class="sxs-lookup"><span data-stu-id="91365-302">The thread that calls <xref:System.Threading.Thread.Abort%2A> might block if the thread that is being aborted is in a protected region of code, such as a `catch` block, `finally` block, or constrained execution region.</span></span> <span data-ttu-id="91365-303">Если поток, вызывающий <xref:System.Threading.Thread.Abort%2A> удерживает блокировку, требуемую прерванным потоком, может произойти взаимоблокировка.</span><span class="sxs-lookup"><span data-stu-id="91365-303">If the thread that calls <xref:System.Threading.Thread.Abort%2A> holds a lock that the aborted thread requires, a deadlock can occur.</span></span>  
  
 <span data-ttu-id="91365-304">Если `Abort` вызывается в потоке, который не был запущен, поток будет прервана, когда <xref:System.Threading.Thread.Start%2A> вызывается.</span><span class="sxs-lookup"><span data-stu-id="91365-304">If `Abort` is called on a thread that has not been started, the thread will abort when <xref:System.Threading.Thread.Start%2A> is called.</span></span> <span data-ttu-id="91365-305">Если `Abort` вызывается в потоке, который заблокирован или находится в спящем режиме, поток прерывается и затем прервана.</span><span class="sxs-lookup"><span data-stu-id="91365-305">If `Abort` is called on a thread that is blocked or is sleeping, the thread is interrupted and then aborted.</span></span>  
  
 <span data-ttu-id="91365-306">Если `Abort` вызывается в потоке, который был приостановлен, <xref:System.Threading.ThreadStateException> исключение в потоке, который вызвал <xref:System.Threading.Thread.Abort%2A>, и <xref:System.Threading.ThreadState.AbortRequested> добавляется <xref:System.Threading.Thread.ThreadState%2A> свойство аварийно завершающимся потоком.</span><span class="sxs-lookup"><span data-stu-id="91365-306">If `Abort` is called on a thread that has been suspended, a <xref:System.Threading.ThreadStateException> is thrown in the thread that called <xref:System.Threading.Thread.Abort%2A>, and <xref:System.Threading.ThreadState.AbortRequested> is added to the <xref:System.Threading.Thread.ThreadState%2A> property of the thread being aborted.</span></span> <span data-ttu-id="91365-307">Объект <xref:System.Threading.ThreadAbortException> не вызывается в приостановленном потоке до <xref:System.Threading.Thread.Resume%2A> вызывается.</span><span class="sxs-lookup"><span data-stu-id="91365-307">A <xref:System.Threading.ThreadAbortException> is not thrown in the suspended thread until <xref:System.Threading.Thread.Resume%2A> is called.</span></span>  
  
 <span data-ttu-id="91365-308">Если `Abort` вызывается в управляемом потоке при выполнении неуправляемого кода `ThreadAbortException` не выдается до возвращения потока в управляемом коде.</span><span class="sxs-lookup"><span data-stu-id="91365-308">If `Abort` is called on a managed thread while it is executing unmanaged code, a `ThreadAbortException` is not thrown until the thread returns to managed code.</span></span>  
  
 <span data-ttu-id="91365-309">Если два вызова к `Abort` поступать одновременно, возможно, что один вызов для установки сведений о состоянии и вызов на выполнение `Abort`.</span><span class="sxs-lookup"><span data-stu-id="91365-309">If two calls to `Abort` come at the same time, it is possible for one call to set the state information and the other call to execute the `Abort`.</span></span> <span data-ttu-id="91365-310">Однако приложение не может определить ситуацию.</span><span class="sxs-lookup"><span data-stu-id="91365-310">However, an application cannot detect this situation.</span></span>  
  
 <span data-ttu-id="91365-311">После `Abort` вызывается в потоке, который содержит состояние потока <xref:System.Threading.ThreadState.AbortRequested>.</span><span class="sxs-lookup"><span data-stu-id="91365-311">After `Abort` is invoked on a thread, the state of the thread includes <xref:System.Threading.ThreadState.AbortRequested>.</span></span> <span data-ttu-id="91365-312">После завершения потока в результате успешного вызова `Abort`, состояние потока изменяется на <xref:System.Threading.ThreadState.Stopped>.</span><span class="sxs-lookup"><span data-stu-id="91365-312">After the thread has terminated as a result of a successful call to `Abort`, the state of the thread is changed to <xref:System.Threading.ThreadState.Stopped>.</span></span> <span data-ttu-id="91365-313">С достаточными разрешениями поток, который является целевым объектом `Abort` можно отменить аварийное завершение, используя `ResetAbort` метод.</span><span class="sxs-lookup"><span data-stu-id="91365-313">With sufficient permissions, a thread that is the target of an `Abort` can cancel the abort using the `ResetAbort` method.</span></span> <span data-ttu-id="91365-314">Пример, демонстрирующий вызов `ResetAbort` метода, в разделе `ThreadAbortException` класса.</span><span class="sxs-lookup"><span data-stu-id="91365-314">For an example that demonstrates calling the `ResetAbort` method, see the `ThreadAbortException` class.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="91365-315">В следующем примере кода показано, как для передачи данных в поток, который прерывается.</span><span class="sxs-lookup"><span data-stu-id="91365-315">The following code example shows how to pass information to a thread that is being aborted.</span></span>  
  
 [!code-cpp[System.Threading.Thread.Abort2#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Threading.Thread.Abort2/CPP/source.cpp#1)]
 [!code-csharp[System.Threading.Thread.Abort2#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Threading.Thread.Abort2/CS/source.cs#1)]
 [!code-vb[System.Threading.Thread.Abort2#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Threading.Thread.Abort2/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.PlatformNotSupportedException"><span data-ttu-id="91365-316">Только в .NET Core: этот элемент не поддерживается.</span><span class="sxs-lookup"><span data-stu-id="91365-316">.NET Core only: This member is not supported.</span></span></exception>
        <exception cref="T:System.Security.SecurityException"><span data-ttu-id="91365-317">У вызывающего объекта отсутствует необходимое разрешение.</span><span class="sxs-lookup"><span data-stu-id="91365-317">The caller does not have the required permission.</span></span></exception>
        <exception cref="T:System.Threading.ThreadStateException"><span data-ttu-id="91365-318">Поток, который прерывается, в настоящий момент приостановлен.</span><span class="sxs-lookup"><span data-stu-id="91365-318">The thread that is being aborted is currently suspended.</span></span></exception>
        <permission cref="T:System.Security.Permissions.SecurityPermission"><span data-ttu-id="91365-319">для дополнительных операций над потоками.</span><span class="sxs-lookup"><span data-stu-id="91365-319">for advanced operations on threads.</span></span> <span data-ttu-id="91365-320">Связанное перечисление: <see cref="F:System.Security.Permissions.SecurityPermissionFlag.ControlThread" />.</span><span class="sxs-lookup"><span data-stu-id="91365-320">Associated enumeration: <see cref="F:System.Security.Permissions.SecurityPermissionFlag.ControlThread" />.</span></span></permission>
        <altmember cref="T:System.Threading.ThreadAbortException" />
        <altmember cref="F:System.Threading.ThreadState.Aborted" />
        <altmember cref="F:System.Threading.ThreadState.AbortRequested" />
      </Docs>
    </Member>
    <Member MemberName="AllocateDataSlot">
      <MemberSignature Language="C#" Value="public static LocalDataStoreSlot AllocateDataSlot ();" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.LocalDataStoreSlot AllocateDataSlot() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Thread.AllocateDataSlot" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function AllocateDataSlot () As LocalDataStoreSlot" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static LocalDataStoreSlot ^ AllocateDataSlot();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Thread</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.LocalDataStoreSlot</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="91365-321">Выделяет неименованную область данных всем потокам.</span><span class="sxs-lookup"><span data-stu-id="91365-321">Allocates an unnamed data slot on all the threads.</span></span> <span data-ttu-id="91365-322">Для улучшения производительности используйте поля, отмеченные атрибутом <see cref="T:System.ThreadStaticAttribute" />.</span><span class="sxs-lookup"><span data-stu-id="91365-322">For better performance, use fields that are marked with the <see cref="T:System.ThreadStaticAttribute" /> attribute instead.</span></span></summary>
        <returns><span data-ttu-id="91365-323">Выделенная именованная область данных всем потокам.</span><span class="sxs-lookup"><span data-stu-id="91365-323">The allocated named data slot on all threads.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
> [!IMPORTANT]
>  <span data-ttu-id="91365-324">Платформа .NET Framework предоставляет два механизма для использования локальное хранилище потока (TLS): статические поля потока (то есть поля, отмеченные <xref:System.ThreadStaticAttribute> атрибут) и области данных.</span><span class="sxs-lookup"><span data-stu-id="91365-324">The .NET Framework provides two mechanisms for using thread local storage (TLS): thread-relative static fields (that is, fields that are marked with the <xref:System.ThreadStaticAttribute> attribute) and data slots.</span></span> <span data-ttu-id="91365-325">Статические поля потока предоставляют гораздо более высокую производительность, чем области данных и включить проверку типов во время компиляции.</span><span class="sxs-lookup"><span data-stu-id="91365-325">Thread-relative static fields provide much better performance than data slots, and enable compile-time type checking.</span></span> <span data-ttu-id="91365-326">Дополнительные сведения об использовании TLS см. в разделе [локальное хранилище потока: статические поля потока и области данных](~/docs/standard/threading/thread-local-storage-thread-relative-static-fields-and-data-slots.md).</span><span class="sxs-lookup"><span data-stu-id="91365-326">For more information about using TLS, see [Thread Local Storage: Thread-Relative Static Fields and Data Slots](~/docs/standard/threading/thread-local-storage-thread-relative-static-fields-and-data-slots.md).</span></span>  
  
 <span data-ttu-id="91365-327">Область данных выделяется во всех потоках.</span><span class="sxs-lookup"><span data-stu-id="91365-327">The slot is allocated on all threads.</span></span>  
  
 <span data-ttu-id="91365-328">Потоки используют механизм локального хранилища памяти для хранения данных определенного потока.</span><span class="sxs-lookup"><span data-stu-id="91365-328">Threads use a local store memory mechanism to store thread-specific data.</span></span> <span data-ttu-id="91365-329">Общеязыковая среда выполнения выделяет массив хранения данных несколькими разъемами для каждого процесса при его создании.</span><span class="sxs-lookup"><span data-stu-id="91365-329">The common language runtime allocates a multi-slot data store array to each process when it is created.</span></span> <span data-ttu-id="91365-330">Поток может выделить область данных в хранилище данных, хранилище и получения данных значение в слоте и освободить эту область для повторного использования после истечения срока действия потока.</span><span class="sxs-lookup"><span data-stu-id="91365-330">The thread can allocate a data slot in the data store, store and retrieve a data value in the slot, and free the slot for reuse after the thread expires.</span></span> <span data-ttu-id="91365-331">Области данных являются уникальными для каждого потока.</span><span class="sxs-lookup"><span data-stu-id="91365-331">Data slots are unique per thread.</span></span> <span data-ttu-id="91365-332">Ни один поток (даже дочерний поток) можно получить эти данные.</span><span class="sxs-lookup"><span data-stu-id="91365-332">No other thread (not even a child thread) can get that data.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="91365-333">Этот раздел содержит два примера кода.</span><span class="sxs-lookup"><span data-stu-id="91365-333">This section contains two code examples.</span></span> <span data-ttu-id="91365-334">Первый пример показано, как использовать поле, отмеченный атрибутом <xref:System.ThreadStaticAttribute> атрибут для хранения информации о потоках.</span><span class="sxs-lookup"><span data-stu-id="91365-334">The first example shows how to use a field that is marked with the <xref:System.ThreadStaticAttribute> attribute to hold thread-specific information.</span></span> <span data-ttu-id="91365-335">Во втором примере показано, как использовать область данных сделать то же самое.</span><span class="sxs-lookup"><span data-stu-id="91365-335">The second example shows how to use a data slot to do the same thing.</span></span>  
  
 <span data-ttu-id="91365-336">**В первом примере**</span><span class="sxs-lookup"><span data-stu-id="91365-336">**First Example**</span></span>  
  
 <span data-ttu-id="91365-337">Приведенный ниже показано, как использовать поле, отмеченный атрибутом <xref:System.ThreadStaticAttribute> для хранения информации о потоках.</span><span class="sxs-lookup"><span data-stu-id="91365-337">The following example shows how to use a field that is marked with <xref:System.ThreadStaticAttribute> to hold thread-specific information.</span></span> <span data-ttu-id="91365-338">Этот метод обеспечивает лучшую производительность, чем метод, который отображается во втором примере.</span><span class="sxs-lookup"><span data-stu-id="91365-338">This technique provides better performance than the technique that is shown in the second example.</span></span>  
  
 [!code-cpp[System.Threading.Thread.DoNotUseDataSlots#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Threading.Thread.DoNotUseDataSlots/CPP/source.cpp#1)]
 [!code-csharp[System.Threading.Thread.DoNotUseDataSlots#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Threading.Thread.DoNotUseDataSlots/CS/source.cs#1)]
 [!code-vb[System.Threading.Thread.DoNotUseDataSlots#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Threading.Thread.DoNotUseDataSlots/vb/source.vb#1)]  
  
 <span data-ttu-id="91365-339">**Во втором примере**</span><span class="sxs-lookup"><span data-stu-id="91365-339">**Second Example**</span></span>  
  
 <span data-ttu-id="91365-340">В следующем примере кода демонстрируется использование области данных для хранения информации о потоках.</span><span class="sxs-lookup"><span data-stu-id="91365-340">The following code example demonstrates how to use a data slot to store thread-specific information.</span></span>  
  
 [!code-cpp[System.Threading.Thread.DataSlot#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Threading.Thread.DataSlot/CPP/source.cpp#1)]
 [!code-csharp[System.Threading.Thread.DataSlot#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Threading.Thread.DataSlot/CS/source.cs#1)]
 [!code-vb[System.Threading.Thread.DataSlot#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Threading.Thread.DataSlot/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="AllocateNamedDataSlot">
      <MemberSignature Language="C#" Value="public static LocalDataStoreSlot AllocateNamedDataSlot (string name);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.LocalDataStoreSlot AllocateNamedDataSlot(string name) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Thread.AllocateNamedDataSlot(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function AllocateNamedDataSlot (name As String) As LocalDataStoreSlot" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static LocalDataStoreSlot ^ AllocateNamedDataSlot(System::String ^ name);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Thread</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.LocalDataStoreSlot</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="name"><span data-ttu-id="91365-341">Имя выделяемой области данных.</span><span class="sxs-lookup"><span data-stu-id="91365-341">The name of the data slot to be allocated.</span></span></param>
        <summary><span data-ttu-id="91365-342">Выделяет именованную область данных всем потокам.</span><span class="sxs-lookup"><span data-stu-id="91365-342">Allocates a named data slot on all threads.</span></span> <span data-ttu-id="91365-343">Для улучшения производительности используйте поля, отмеченные атрибутом <see cref="T:System.ThreadStaticAttribute" />.</span><span class="sxs-lookup"><span data-stu-id="91365-343">For better performance, use fields that are marked with the <see cref="T:System.ThreadStaticAttribute" /> attribute instead.</span></span></summary>
        <returns><span data-ttu-id="91365-344">Выделенная именованная область данных всем потокам.</span><span class="sxs-lookup"><span data-stu-id="91365-344">The allocated named data slot on all threads.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
> [!IMPORTANT]
>  <span data-ttu-id="91365-345">Платформа .NET Framework предоставляет два механизма для использования локальное хранилище потока (TLS): статические поля потока (то есть поля, отмеченные <xref:System.ThreadStaticAttribute> атрибут) и области данных.</span><span class="sxs-lookup"><span data-stu-id="91365-345">The .NET Framework provides two mechanisms for using thread local storage (TLS): thread-relative static fields (that is, fields that are marked with the <xref:System.ThreadStaticAttribute> attribute) and data slots.</span></span> <span data-ttu-id="91365-346">Статические поля потока предоставляют гораздо более высокую производительность, чем области данных и включить проверку типов во время компиляции.</span><span class="sxs-lookup"><span data-stu-id="91365-346">Thread-relative static fields provide much better performance than data slots, and enable compile-time type checking.</span></span> <span data-ttu-id="91365-347">Дополнительные сведения об использовании TLS см. в разделе [локальное хранилище потока: статические поля потока и области данных](~/docs/standard/threading/thread-local-storage-thread-relative-static-fields-and-data-slots.md).</span><span class="sxs-lookup"><span data-stu-id="91365-347">For more information about using TLS, see [Thread Local Storage: Thread-Relative Static Fields and Data Slots](~/docs/standard/threading/thread-local-storage-thread-relative-static-fields-and-data-slots.md).</span></span>  
  
 <span data-ttu-id="91365-348">Потоки используют механизм локального хранилища памяти для хранения данных определенного потока.</span><span class="sxs-lookup"><span data-stu-id="91365-348">Threads use a local store memory mechanism to store thread-specific data.</span></span> <span data-ttu-id="91365-349">Общеязыковая среда выполнения выделяет массив хранения данных несколькими разъемами для каждого процесса при его создании.</span><span class="sxs-lookup"><span data-stu-id="91365-349">The common language runtime allocates a multi-slot data store array to each process when it is created.</span></span> <span data-ttu-id="91365-350">Поток может выделить область данных в хранилище данных, хранилище и получения данных значение в слоте и освободить эту область для повторного использования после истечения срока действия потока.</span><span class="sxs-lookup"><span data-stu-id="91365-350">The thread can allocate a data slot in the data store, store and retrieve a data value in the slot, and free the slot for reuse after the thread expires.</span></span> <span data-ttu-id="91365-351">Области данных являются уникальными для каждого потока.</span><span class="sxs-lookup"><span data-stu-id="91365-351">Data slots are unique per thread.</span></span> <span data-ttu-id="91365-352">Ни один поток (даже дочерний поток) можно получить эти данные.</span><span class="sxs-lookup"><span data-stu-id="91365-352">No other thread (not even a child thread) can get that data.</span></span>  
  
 <span data-ttu-id="91365-353">Нет необходимости использовать <xref:System.Threading.Thread.AllocateNamedDataSlot%2A> метод, чтобы выделить именованную область данных, так как <xref:System.Threading.Thread.GetNamedDataSlot%2A> метод выделяет область, если он уже не была выделена.</span><span class="sxs-lookup"><span data-stu-id="91365-353">It is not necessary to use the <xref:System.Threading.Thread.AllocateNamedDataSlot%2A> method to allocate a named data slot, because the <xref:System.Threading.Thread.GetNamedDataSlot%2A> method allocates the slot if it has not already been allocated.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="91365-354">Если <xref:System.Threading.Thread.AllocateNamedDataSlot%2A> метод используется, он должен вызываться в основном потоке при запуске программы, так как он вызывает исключение, если область с указанным именем уже был выделен.</span><span class="sxs-lookup"><span data-stu-id="91365-354">If the <xref:System.Threading.Thread.AllocateNamedDataSlot%2A> method is used, it should be called in the main thread at program startup, because it throws an exception if a slot with the specified name has already been allocated.</span></span> <span data-ttu-id="91365-355">Нет возможности проверить ли уже выделена слот.</span><span class="sxs-lookup"><span data-stu-id="91365-355">There is no way to test whether a slot has already been allocated.</span></span>  
  
 <span data-ttu-id="91365-356">Слоты, выделенных с помощью этого метода должны быть освобождены вызовом <xref:System.Threading.Thread.FreeNamedDataSlot%2A>.</span><span class="sxs-lookup"><span data-stu-id="91365-356">Slots allocated with this method must be freed with <xref:System.Threading.Thread.FreeNamedDataSlot%2A>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="91365-357">Этот раздел содержит два примера кода.</span><span class="sxs-lookup"><span data-stu-id="91365-357">This section contains two code examples.</span></span> <span data-ttu-id="91365-358">Первый пример показано, как использовать поле, отмеченный атрибутом <xref:System.ThreadStaticAttribute> атрибут для хранения информации о потоках.</span><span class="sxs-lookup"><span data-stu-id="91365-358">The first example shows how to use a field that is marked with the <xref:System.ThreadStaticAttribute> attribute to hold thread-specific information.</span></span> <span data-ttu-id="91365-359">Во втором примере показано, как использовать область данных сделать то же самое.</span><span class="sxs-lookup"><span data-stu-id="91365-359">The second example shows how to use a data slot to do the same thing.</span></span>  
  
 <span data-ttu-id="91365-360">**В первом примере**</span><span class="sxs-lookup"><span data-stu-id="91365-360">**First Example**</span></span>  
  
 <span data-ttu-id="91365-361">Приведенный ниже показано, как использовать поле, отмеченный атрибутом <xref:System.ThreadStaticAttribute> для хранения информации о потоках.</span><span class="sxs-lookup"><span data-stu-id="91365-361">The following example shows how to use a field that is marked with <xref:System.ThreadStaticAttribute> to hold thread-specific information.</span></span> <span data-ttu-id="91365-362">Этот метод обеспечивает лучшую производительность, чем метод, который отображается во втором примере.</span><span class="sxs-lookup"><span data-stu-id="91365-362">This technique provides better performance than the technique that is shown in the second example.</span></span>  
  
 [!code-cpp[System.Threading.Thread.DoNotUseDataSlots#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Threading.Thread.DoNotUseDataSlots/CPP/source.cpp#1)]
 [!code-csharp[System.Threading.Thread.DoNotUseDataSlots#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Threading.Thread.DoNotUseDataSlots/CS/source.cs#1)]
 [!code-vb[System.Threading.Thread.DoNotUseDataSlots#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Threading.Thread.DoNotUseDataSlots/vb/source.vb#1)]  
  
 <span data-ttu-id="91365-363">**Во втором примере**</span><span class="sxs-lookup"><span data-stu-id="91365-363">**Second Example**</span></span>  
  
 <span data-ttu-id="91365-364">Следующий пример демонстрирует использование именованную область данных для хранения информации о потоках.</span><span class="sxs-lookup"><span data-stu-id="91365-364">The following example demonstrates how to use a named data slot to store thread-specific information.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="91365-365">В примере кода не используйте <xref:System.Threading.Thread.AllocateNamedDataSlot%2A> метода, так как <xref:System.Threading.Thread.GetNamedDataSlot%2A> метод выделяет область, если он уже не была выделена.</span><span class="sxs-lookup"><span data-stu-id="91365-365">The example code does not use the <xref:System.Threading.Thread.AllocateNamedDataSlot%2A> method, because the <xref:System.Threading.Thread.GetNamedDataSlot%2A> method allocates the slot if it has not already been allocated.</span></span> <span data-ttu-id="91365-366">Если <xref:System.Threading.Thread.AllocateNamedDataSlot%2A> метод используется, он должен вызываться в основном потоке при запуске программы.</span><span class="sxs-lookup"><span data-stu-id="91365-366">If the <xref:System.Threading.Thread.AllocateNamedDataSlot%2A> method is used, it should be called in the main thread at program startup.</span></span>  
  
 [!code-cpp[System.Threading.Thread.NamedDataSlot#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Threading.Thread.NamedDataSlot/CPP/source.cpp#1)]
 [!code-csharp[System.Threading.Thread.NamedDataSlot#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Threading.Thread.NamedDataSlot/CS/source.cs#1)]
 [!code-vb[System.Threading.Thread.NamedDataSlot#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Threading.Thread.NamedDataSlot/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="91365-367">Именованная область данных с указанным именем уже существует.</span><span class="sxs-lookup"><span data-stu-id="91365-367">A named data slot with the specified name already exists.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="ApartmentState">
      <MemberSignature Language="C#" Value="public System.Threading.ApartmentState ApartmentState { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Threading.ApartmentState ApartmentState" />
      <MemberSignature Language="DocId" Value="P:System.Threading.Thread.ApartmentState" />
      <MemberSignature Language="VB.NET" Value="Public Property ApartmentState As ApartmentState" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Threading::ApartmentState ApartmentState { System::Threading::ApartmentState get(); void set(System::Threading::ApartmentState value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Thread</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Obsolete("Deprecated in favor of GetApartmentState, SetApartmentState and TrySetApartmentState.")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Threading.ApartmentState</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="91365-368">Возвращает или задает модель "apartment" для данного потока.</span><span class="sxs-lookup"><span data-stu-id="91365-368">Gets or sets the apartment state of this thread.</span></span></summary>
        <value><span data-ttu-id="91365-369">Одно из значений перечисления <see cref="T:System.Threading.ApartmentState" />.</span><span class="sxs-lookup"><span data-stu-id="91365-369">One of the <see cref="T:System.Threading.ApartmentState" /> values.</span></span> <span data-ttu-id="91365-370">Начальное значение — <see langword="Unknown" />.</span><span class="sxs-lookup"><span data-stu-id="91365-370">The initial value is <see langword="Unknown" />.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="91365-371">**<xref:System.Threading.Thread.ApartmentState%2A> Свойство устарело.**</span><span class="sxs-lookup"><span data-stu-id="91365-371">**The <xref:System.Threading.Thread.ApartmentState%2A> property is obsolete.**</span></span>  <span data-ttu-id="91365-372">Альтернативы устаревшему <xref:System.Threading.Thread.GetApartmentState%2A> метод для извлечения состояние апартамента и <xref:System.Threading.Thread.SetApartmentState%2A> метод, чтобы задать состояние апартамента.</span><span class="sxs-lookup"><span data-stu-id="91365-372">The non-obsolete alternatives are the <xref:System.Threading.Thread.GetApartmentState%2A> method to retrieve the apartment state and the   <xref:System.Threading.Thread.SetApartmentState%2A> method to set the apartment state.</span></span>  
  
 <span data-ttu-id="91365-373">В .NET Framework версий 1.0 и 1.1 `ApartmentState` свойство отмечает поток, чтобы показать, что он будет выполняться в однопотоковый или многопотокового подразделения.</span><span class="sxs-lookup"><span data-stu-id="91365-373">In the .NET Framework versions 1.0 and 1.1, the `ApartmentState` property marks a thread to indicate that it will execute in a single-threaded or multithreaded apartment.</span></span> <span data-ttu-id="91365-374">Это свойство можно задать, если поток находится в `Unstarted` или `Running` состоянии; тем не менее, оно может быть задано только один раз для потока.</span><span class="sxs-lookup"><span data-stu-id="91365-374">This property can be set when the thread is in the `Unstarted` or `Running` thread state; however, it can be set only once for a thread.</span></span> <span data-ttu-id="91365-375">Если свойство не было задано, возвращается `Unknown`.</span><span class="sxs-lookup"><span data-stu-id="91365-375">If the property has not been set, it returns `Unknown`.</span></span>  
  
 <span data-ttu-id="91365-376">Попытка использовать <xref:System.Threading.Thread.ApartmentState%2A> свойство, чтобы задать состояние подразделения потока состояние подразделения которого уже задано учитывается.</span><span class="sxs-lookup"><span data-stu-id="91365-376">An attempt to use the <xref:System.Threading.Thread.ApartmentState%2A> property to set the apartment state of a thread whose apartment state has already been set is ignored.</span></span> <span data-ttu-id="91365-377">Тем не менее <xref:System.Threading.Thread.SetApartmentState%2A> вызывает исключение <xref:System.InvalidOperationException> в этом случае.</span><span class="sxs-lookup"><span data-stu-id="91365-377">However, the <xref:System.Threading.Thread.SetApartmentState%2A> method throws a <xref:System.InvalidOperationException> in this case.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="91365-378">В платформе .NET Framework версии 2.0 новых потоков инициализируются как <xref:System.Threading.ApartmentState.MTA?displayProperty=nameWithType> если их состояние подразделения не задано до их запуска.</span><span class="sxs-lookup"><span data-stu-id="91365-378">In the .NET Framework version 2.0, new threads are initialized as <xref:System.Threading.ApartmentState.MTA?displayProperty=nameWithType> if their apartment state has not been set before they are started.</span></span> <span data-ttu-id="91365-379">Основной поток приложения инициализируется <xref:System.Threading.ApartmentState.MTA?displayProperty=nameWithType> по умолчанию.</span><span class="sxs-lookup"><span data-stu-id="91365-379">The main application thread is initialized to <xref:System.Threading.ApartmentState.MTA?displayProperty=nameWithType> by default.</span></span> <span data-ttu-id="91365-380">Основной поток приложения могут больше не устанавливаются в <xref:System.Threading.ApartmentState.STA?displayProperty=nameWithType> , установив <xref:System.Threading.ApartmentState?displayProperty=nameWithType> свойство в первой строке кода.</span><span class="sxs-lookup"><span data-stu-id="91365-380">You can no longer set the main application thread to <xref:System.Threading.ApartmentState.STA?displayProperty=nameWithType> by setting the <xref:System.Threading.ApartmentState?displayProperty=nameWithType> property on the first line of code.</span></span> <span data-ttu-id="91365-381">Используйте <xref:System.STAThreadAttribute> вместо него.</span><span class="sxs-lookup"><span data-stu-id="91365-381">Use the <xref:System.STAThreadAttribute> instead.</span></span>  
  
 <span data-ttu-id="91365-382">В .NET Framework версии 2.0, можно указать потоковой моделью COM для приложения C++ с помощью [/CLRTHREADATTRIBUTE (установить атрибут потока среды CLR)](http://msdn.microsoft.com/library/4907e9ef-5031-446c-aecf-0a0b32fae1e8) компоновщика.</span><span class="sxs-lookup"><span data-stu-id="91365-382">In the .NET Framework version 2.0, you can specify the COM threading model for a C++ application using the [/CLRTHREADATTRIBUTE (Set CLR Thread Attribute)](http://msdn.microsoft.com/library/4907e9ef-5031-446c-aecf-0a0b32fae1e8) linker option.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="91365-383">В следующем примере кода показано, как задать состояние подразделения потока.</span><span class="sxs-lookup"><span data-stu-id="91365-383">The following code example demonstrates how to set the apartment state of a thread.</span></span>  
  
 [!code-cpp[System.Threading.Thread.ApartmentState#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Threading.Thread.ApartmentState/CPP/source.cpp#1)]
 [!code-csharp[System.Threading.Thread.ApartmentState#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Threading.Thread.ApartmentState/CS/source.cs#1)]
 [!code-vb[System.Threading.Thread.ApartmentState#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Threading.Thread.ApartmentState/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="91365-384">Предпринята попытка задать в этом свойстве состояние, которое не является допустимым состоянием подразделения (состояние, отличное от однопотокового подразделения (<see langword="STA" />) или многопотокового подразделения (<see langword="MTA" />)).</span><span class="sxs-lookup"><span data-stu-id="91365-384">An attempt is made to set this property to a state that is not a valid apartment state (a state other than single-threaded apartment (<see langword="STA" />) or multithreaded apartment (<see langword="MTA" />)).</span></span></exception>
        <altmember cref="T:System.Threading.ThreadState" />
        <altmember cref="M:System.Threading.Thread.GetApartmentState" />
        <altmember cref="M:System.Threading.Thread.SetApartmentState(System.Threading.ApartmentState)" />
      </Docs>
    </Member>
    <Member MemberName="BeginCriticalRegion">
      <MemberSignature Language="C#" Value="public static void BeginCriticalRegion ();" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void BeginCriticalRegion() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Thread.BeginCriticalRegion" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub BeginCriticalRegion ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void BeginCriticalRegion();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Thread</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.ConstrainedExecution.ReliabilityContract(System.Runtime.ConstrainedExecution.Consistency.WillNotCorruptState, System.Runtime.ConstrainedExecution.Cer.MayFail)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="91365-385">Уведомляет узел, что выполнение близится ко входу в область кода, в которой эффекты прерывания выполнения или неуправляемого выполнения могут повлиять на другие задачи в домене приложения.</span><span class="sxs-lookup"><span data-stu-id="91365-385">Notifies a host that execution is about to enter a region of code in which the effects of a thread abort or unhandled exception might jeopardize other tasks in the application domain.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="91365-386">Узлы среды выполнения (CLR), например Microsoft SQL Server 2005, могут устанавливать различные политики для сбоев в критические и некритические областей кода.</span><span class="sxs-lookup"><span data-stu-id="91365-386">Hosts of the common language runtime (CLR), such as Microsoft SQL Server 2005, can establish different policies for failures in critical and non-critical regions of code.</span></span> <span data-ttu-id="91365-387">Критической области — один, в которой эффекты прерывания выполнения или необработанное исключение не могут быть ограничены текущей задачей.</span><span class="sxs-lookup"><span data-stu-id="91365-387">A critical region is one in which the effects of a thread abort or an unhandled exception might not be limited to the current task.</span></span> <span data-ttu-id="91365-388">Напротив прерывание или сбой в некритической области кода влияет только задачи, в котором произошла ошибка.</span><span class="sxs-lookup"><span data-stu-id="91365-388">By contrast, an abort or failure in a non-critical region of code affects only the task in which the error occurs.</span></span>  
  
 <span data-ttu-id="91365-389">Например рассмотрим задачу, которая пытается выделить память при блокировке.</span><span class="sxs-lookup"><span data-stu-id="91365-389">For example, consider a task that attempts to allocate memory while holding a lock.</span></span> <span data-ttu-id="91365-390">Если происходит сбой выделения памяти, прерывания текущей задачи недостаточно для обеспечения стабильности <xref:System.AppDomain>, так как может существовать другие задачи в домене, ожидающих блокировки.</span><span class="sxs-lookup"><span data-stu-id="91365-390">If the memory allocation fails, aborting the current task is not sufficient to ensure stability of the <xref:System.AppDomain>, because there can be other tasks in the domain waiting for the same lock.</span></span> <span data-ttu-id="91365-391">При прерывании выполнения текущей задачи, другие задачи могут взаимно блокироваться.</span><span class="sxs-lookup"><span data-stu-id="91365-391">If the current task is terminated, other tasks could be deadlocked.</span></span>  
  
 <span data-ttu-id="91365-392">При возникновении сбоя в критической области, узел может потребоваться выгрузить весь <xref:System.AppDomain> , а не рисковать и продолжения выполнения потенциально нестабильно.</span><span class="sxs-lookup"><span data-stu-id="91365-392">When a failure occurs in a critical region, the host might decide to unload the entire <xref:System.AppDomain> rather than take the risk of continuing execution in a potentially unstable state.</span></span> <span data-ttu-id="91365-393">Для информирования основного, код переходит в критической области, вызовите <xref:System.Threading.Thread.BeginCriticalRegion%2A>.</span><span class="sxs-lookup"><span data-stu-id="91365-393">To inform the host that your code is entering a critical region, call <xref:System.Threading.Thread.BeginCriticalRegion%2A>.</span></span> <span data-ttu-id="91365-394">Вызовите <xref:System.Threading.Thread.EndCriticalRegion%2A> когда выполнение возвращается некритической области кода.</span><span class="sxs-lookup"><span data-stu-id="91365-394">Call <xref:System.Threading.Thread.EndCriticalRegion%2A> when execution returns to a non-critical region of code.</span></span>  
  
 <span data-ttu-id="91365-395">С помощью этого метода в коде, выполняемом в SQL Server 2005 требуется код для выполнения на высоком уровне защиты узла.</span><span class="sxs-lookup"><span data-stu-id="91365-395">Using this method in code that runs under SQL Server 2005 requires the code to be run at the highest host protection level.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="91365-396">В следующем примере показано использование <xref:System.Threading.Thread.BeginCriticalRegion%2A> и <xref:System.Threading.Thread.EndCriticalRegion%2A> методы разделить критические и некритические области блока кода.</span><span class="sxs-lookup"><span data-stu-id="91365-396">The following example demonstrates the use of the <xref:System.Threading.Thread.BeginCriticalRegion%2A> and <xref:System.Threading.Thread.EndCriticalRegion%2A> methods to divide a block of code into critical and non-critical regions.</span></span>  
  
 [!code-cpp[System.Threading.Thread.BeginCriticalRegion#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Threading.Thread.BeginCriticalRegion/CPP/source.cpp#1)]
 [!code-csharp[System.Threading.Thread.BeginCriticalRegion#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Threading.Thread.BeginCriticalRegion/CS/source.cs#1)]
 [!code-vb[System.Threading.Thread.BeginCriticalRegion#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Threading.Thread.BeginCriticalRegion/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Threading.Thread.EndCriticalRegion" />
      </Docs>
    </Member>
    <Member MemberName="BeginThreadAffinity">
      <MemberSignature Language="C#" Value="public static void BeginThreadAffinity ();" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void BeginThreadAffinity() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Thread.BeginThreadAffinity" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub BeginThreadAffinity ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void BeginThreadAffinity();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Thread</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.ConstrainedExecution.ReliabilityContract(System.Runtime.ConstrainedExecution.Consistency.WillNotCorruptState, System.Runtime.ConstrainedExecution.Cer.MayFail)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="91365-397">Уведомляет узел, что управляемый код близок к выполнению инструкций, зависящих от идентификации текущего потока операционной системы.</span><span class="sxs-lookup"><span data-stu-id="91365-397">Notifies a host that managed code is about to execute instructions that depend on the identity of the current physical operating system thread.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="91365-398">Некоторые узлы CLR, например Microsoft SQL Server 2005, обеспечивают самостоятельное управление потоками.</span><span class="sxs-lookup"><span data-stu-id="91365-398">Some hosts of the common language runtime, such as Microsoft SQL Server 2005, provide their own thread management.</span></span> <span data-ttu-id="91365-399">Узел, который предоставляет собственный поток управления можно переместить выполняющуюся задачу из одного потока операционной системы в другую в любое время.</span><span class="sxs-lookup"><span data-stu-id="91365-399">A host that provides its own thread management can move an executing task from one physical operating system thread to another at any time.</span></span> <span data-ttu-id="91365-400">Большинство задач с помощью этого переключения не затрагиваются.</span><span class="sxs-lookup"><span data-stu-id="91365-400">Most tasks are not affected by this switching.</span></span> <span data-ttu-id="91365-401">Тем не менее некоторые задачи поддерживают сходство потоков: то есть они зависят от идентификатора потока операционной системы.</span><span class="sxs-lookup"><span data-stu-id="91365-401">However, some tasks have thread affinity - that is, they depend on the identity of a physical operating system thread.</span></span> <span data-ttu-id="91365-402">Эти задачи необходимо проинформировать узел выполняемого кода, не будут перенаправлены.</span><span class="sxs-lookup"><span data-stu-id="91365-402">These tasks must inform the host when they execute code that should not be switched.</span></span>  
  
 <span data-ttu-id="91365-403">Например, если приложение вызывает API системы для получения операционной системой блокировки, сходство потоков, например Win32 CRITICAL_SECTION, необходимо вызвать <xref:System.Threading.Thread.BeginThreadAffinity%2A> до запроса на блокировку и <xref:System.Threading.Thread.EndThreadAffinity%2A> после освобождения блокировки.</span><span class="sxs-lookup"><span data-stu-id="91365-403">For example, if your application calls a system API to acquire an operating system lock that has thread affinity, such as a Win32 CRITICAL_SECTION, you must call <xref:System.Threading.Thread.BeginThreadAffinity%2A> before acquiring the lock, and <xref:System.Threading.Thread.EndThreadAffinity%2A> after releasing the lock.</span></span>  
  
 <span data-ttu-id="91365-404">С помощью этого метода в коде, выполняемом в SQL Server 2005 требуется код для выполнения на высоком уровне защиты узла.</span><span class="sxs-lookup"><span data-stu-id="91365-404">Using this method in code that runs under SQL Server 2005 requires the code to be run at the highest host protection level.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="91365-405">В следующем примере показано использование <xref:System.Threading.Thread.BeginThreadAffinity%2A> и <xref:System.Threading.Thread.EndThreadAffinity%2A> методы для уведомления узла, блок кода, зависящего от идентификатор потока операционной системы.</span><span class="sxs-lookup"><span data-stu-id="91365-405">The following example demonstrates the use of the <xref:System.Threading.Thread.BeginThreadAffinity%2A> and <xref:System.Threading.Thread.EndThreadAffinity%2A> methods to notify a host that a block of code depends on the identity of a physical operating system thread.</span></span>  
  
 [!code-cpp[System.Threading.Thread.BeginThreadAffinity#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Threading.Thread.BeginThreadAffinity/CPP/source.cpp#1)]
 [!code-csharp[System.Threading.Thread.BeginThreadAffinity#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Threading.Thread.BeginThreadAffinity/CS/source.cs#1)]
 [!code-vb[System.Threading.Thread.BeginThreadAffinity#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Threading.Thread.BeginThreadAffinity/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Security.SecurityException"><span data-ttu-id="91365-406">У вызывающего объекта отсутствует необходимое разрешение.</span><span class="sxs-lookup"><span data-stu-id="91365-406">The caller does not have the required permission.</span></span></exception>
        <permission cref="T:System.Security.SecurityCriticalAttribute"><span data-ttu-id="91365-407">требуется полное доверие для непосредственно вызывающего метода.</span><span class="sxs-lookup"><span data-stu-id="91365-407">Requires full trust for the immediate caller.</span></span> <span data-ttu-id="91365-408">Этот член не может использоваться частично доверенным или прозрачным кодом.</span><span class="sxs-lookup"><span data-stu-id="91365-408">This member cannot be used by partially trusted or transparent code.</span></span></permission>
        <altmember cref="M:System.Threading.Thread.EndThreadAffinity" />
      </Docs>
    </Member>
    <Member MemberName="CurrentContext">
      <MemberSignature Language="C#" Value="public static System.Runtime.Remoting.Contexts.Context CurrentContext { get; }" />
      <MemberSignature Language="ILAsm" Value=".property class System.Runtime.Remoting.Contexts.Context CurrentContext" />
      <MemberSignature Language="DocId" Value="P:System.Threading.Thread.CurrentContext" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Property CurrentContext As Context" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static property System::Runtime::Remoting::Contexts::Context ^ CurrentContext { System::Runtime::Remoting::Contexts::Context ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Runtime.Remoting.Contexts.Context</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="91365-409">Возвращает текущий контекст, в котором выполняется поток.</span><span class="sxs-lookup"><span data-stu-id="91365-409">Gets the current context in which the thread is executing.</span></span></summary>
        <value><span data-ttu-id="91365-410">Класс <see cref="T:System.Runtime.Remoting.Contexts.Context" />, представляющий текущий контекст потока.</span><span class="sxs-lookup"><span data-stu-id="91365-410">A <see cref="T:System.Runtime.Remoting.Contexts.Context" /> representing the current thread context.</span></span></value>
        <remarks>To be added.</remarks>
        <exception cref="T:System.Security.SecurityException"><span data-ttu-id="91365-411">У вызывающего объекта отсутствует необходимое разрешение.</span><span class="sxs-lookup"><span data-stu-id="91365-411">The caller does not have the required permission.</span></span></exception>
        <permission cref="T:System.Security.SecurityCriticalAttribute"><span data-ttu-id="91365-412">требуется полное доверие для непосредственно вызывающего метода.</span><span class="sxs-lookup"><span data-stu-id="91365-412">Requires full trust for the immediate caller.</span></span> <span data-ttu-id="91365-413">Этот член не может использоваться частично доверенным или прозрачным кодом.</span><span class="sxs-lookup"><span data-stu-id="91365-413">This member cannot be used by partially trusted or transparent code.</span></span></permission>
      </Docs>
    </Member>
    <Member MemberName="CurrentCulture">
      <MemberSignature Language="C#" Value="public System.Globalization.CultureInfo CurrentCulture { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Globalization.CultureInfo CurrentCulture" />
      <MemberSignature Language="DocId" Value="P:System.Threading.Thread.CurrentCulture" />
      <MemberSignature Language="VB.NET" Value="Public Property CurrentCulture As CultureInfo" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Globalization::CultureInfo ^ CurrentCulture { System::Globalization::CultureInfo ^ get(); void set(System::Globalization::CultureInfo ^ value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Thread</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>set: System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Globalization.CultureInfo</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="91365-414">Возвращает или задает язык и региональные параметры для текущего потока.</span><span class="sxs-lookup"><span data-stu-id="91365-414">Gets or sets the culture for the current thread.</span></span></summary>
        <value><span data-ttu-id="91365-415">Объект, представляющий язык и региональные параметры, используемые текущим потоком.</span><span class="sxs-lookup"><span data-stu-id="91365-415">An object that represents the culture for the current thread.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="91365-416"><xref:System.Globalization.CultureInfo> Объект, возвращаемый этим свойством, а также связанных с ним объектов, определяют форматом по умолчанию для дат, времени, чисел, денежных значений, текст порядка сортировки, регистр соглашения и операции сравнения строк.</span><span class="sxs-lookup"><span data-stu-id="91365-416">The <xref:System.Globalization.CultureInfo> object that is returned by this property, together with its associated objects, determine the default format for dates, times, numbers, currency values, the sorting order of text, casing conventions, and string comparisons.</span></span> <span data-ttu-id="91365-417">В разделе <xref:System.Globalization.CultureInfo> класса для изучения языка и региональных параметров имена и идентификаторы, различия между инвариантным, нейтральные и конкретные языки и региональные параметры, и сведения о культуре способом влияет потоков и доменов приложений.</span><span class="sxs-lookup"><span data-stu-id="91365-417">See the <xref:System.Globalization.CultureInfo> class to learn about culture names and identifiers, the differences between invariant, neutral, and specific cultures, and the way culture information affects threads and application domains.</span></span> <span data-ttu-id="91365-418">В разделе <xref:System.Globalization.CultureInfo.CurrentCulture%2A?displayProperty=nameWithType> свойство, чтобы узнать, как определяется язык и региональные параметры потока по умолчанию и как пользователи задать сведения о культуре для их компьютеров.</span><span class="sxs-lookup"><span data-stu-id="91365-418">See the <xref:System.Globalization.CultureInfo.CurrentCulture%2A?displayProperty=nameWithType> property to learn how a thread's default culture is determined, and how users set culture information for their computers.</span></span>  
  
 <span data-ttu-id="91365-419">Начиная с версии [!INCLUDE[net_v40_long](~/includes/net-v40-long-md.md)], можно задать <xref:System.Threading.Thread.CurrentCulture%2A> свойство для нейтрального языка и региональных параметров.</span><span class="sxs-lookup"><span data-stu-id="91365-419">Beginning with the [!INCLUDE[net_v40_long](~/includes/net-v40-long-md.md)], you can set the <xref:System.Threading.Thread.CurrentCulture%2A> property to a neutral culture.</span></span> <span data-ttu-id="91365-420">Это, поскольку поведение <xref:System.Globalization.CultureInfo> класс был изменен: когда он представляет нейтральной культуре значения его свойств (в частности, <xref:System.Globalization.CultureInfo.Calendar%2A>, <xref:System.Globalization.CultureInfo.CompareInfo%2A>, <xref:System.Globalization.CultureInfo.DateTimeFormat%2A>, <xref:System.Globalization.CultureInfo.NumberFormat%2A>, и <xref:System.Globalization.CultureInfo.TextInfo%2A> свойства) теперь отразить заданных региональных параметров, который связан с нейтральным языком и региональными параметрами.</span><span class="sxs-lookup"><span data-stu-id="91365-420">This is because the behavior of the <xref:System.Globalization.CultureInfo> class has changed: When it represents a neutral culture, its property values (in particular, the <xref:System.Globalization.CultureInfo.Calendar%2A>, <xref:System.Globalization.CultureInfo.CompareInfo%2A>, <xref:System.Globalization.CultureInfo.DateTimeFormat%2A>, <xref:System.Globalization.CultureInfo.NumberFormat%2A>, and <xref:System.Globalization.CultureInfo.TextInfo%2A> properties) now reflect the specific culture that is associated with the neutral culture.</span></span> <span data-ttu-id="91365-421">В более ранних версиях платформы .NET Framework <xref:System.Threading.Thread.CurrentCulture%2A> вызвал свойство <xref:System.NotSupportedException> исключения, когда был назначен нейтрального языка и региональных параметров.</span><span class="sxs-lookup"><span data-stu-id="91365-421">In earlier versions of the .NET Framework, the <xref:System.Threading.Thread.CurrentCulture%2A> property threw a <xref:System.NotSupportedException> exception when a neutral culture was assigned.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="91365-422">В следующем примере кода показан потоковый оператор, который позволяет пользовательскому интерфейсу Windows Forms для отображения в языка и региональных параметров, который задан в панели управления.</span><span class="sxs-lookup"><span data-stu-id="91365-422">The following code example shows the threading statement that allows the user interface of a Windows Forms to display in the culture that is set in Control Panel.</span></span> <span data-ttu-id="91365-423">Требуется дополнительный код.</span><span class="sxs-lookup"><span data-stu-id="91365-423">Additional code is needed.</span></span>  
  
 [!code-cpp[System.Threading.Thread.Culture#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Threading.Thread.Culture/CPP/source.cpp#1)]
 [!code-csharp[System.Threading.Thread.Culture#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Threading.Thread.Culture/CS/source.cs#1)]
 [!code-vb[System.Threading.Thread.Culture#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Threading.Thread.Culture/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="91365-424">Для свойства задано значение <see langword="null" />.</span><span class="sxs-lookup"><span data-stu-id="91365-424">The property is set to <see langword="null" />.</span></span></exception>
        <permission cref="T:System.Security.Permissions.SecurityPermission"><span data-ttu-id="91365-425">для задания этого свойства.</span><span class="sxs-lookup"><span data-stu-id="91365-425">for setting the property.</span></span> <span data-ttu-id="91365-426">Связанное перечисление: <see cref="F:System.Security.Permissions.SecurityPermissionFlag.ControlThread" /></span><span class="sxs-lookup"><span data-stu-id="91365-426">Associated enumeration: <see cref="F:System.Security.Permissions.SecurityPermissionFlag.ControlThread" /></span></span></permission>
      </Docs>
    </Member>
    <Member MemberName="CurrentPrincipal">
      <MemberSignature Language="C#" Value="public static System.Security.Principal.IPrincipal CurrentPrincipal { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property class System.Security.Principal.IPrincipal CurrentPrincipal" />
      <MemberSignature Language="DocId" Value="P:System.Threading.Thread.CurrentPrincipal" />
      <MemberSignature Language="VB.NET" Value="Public Shared Property CurrentPrincipal As IPrincipal" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static property System::Security::Principal::IPrincipal ^ CurrentPrincipal { System::Security::Principal::IPrincipal ^ get(); void set(System::Security::Principal::IPrincipal ^ value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Thread</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Security.Principal.IPrincipal</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="91365-427">Возвращает или задает текущего участника потока (для безопасности на основе ролей).</span><span class="sxs-lookup"><span data-stu-id="91365-427">Gets or sets the thread's current principal (for role-based security).</span></span></summary>
        <value><span data-ttu-id="91365-428">Значение <see cref="T:System.Security.Principal.IPrincipal" />, представляющее контекст безопасности.</span><span class="sxs-lookup"><span data-stu-id="91365-428">An <see cref="T:System.Security.Principal.IPrincipal" /> value representing the security context.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 <span data-ttu-id="91365-429">В следующем примере кода показано, как задать и вернуть участника потока.</span><span class="sxs-lookup"><span data-stu-id="91365-429">The following code example shows how to set and retrieve the principal of a thread.</span></span>  
  
 [!code-cpp[System.Threading.Thread.CurrentPrincipal#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Threading.Thread.CurrentPrincipal/CPP/source.cpp#1)]
 [!code-csharp[System.Threading.Thread.CurrentPrincipal#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Threading.Thread.CurrentPrincipal/CS/source.cs#1)]
 [!code-vb[System.Threading.Thread.CurrentPrincipal#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Threading.Thread.CurrentPrincipal/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Security.SecurityException"><span data-ttu-id="91365-430">Вызывающий объект не имеет разрешений, необходимых для задания участника.</span><span class="sxs-lookup"><span data-stu-id="91365-430">The caller does not have the permission required to set the principal.</span></span></exception>
        <permission cref="T:System.Security.Permissions.SecurityPermission"><span data-ttu-id="91365-431">для управления объектом-участником.</span><span class="sxs-lookup"><span data-stu-id="91365-431">to manipulate the principal object.</span></span> <span data-ttu-id="91365-432">Связанное перечисление: <see cref="F:System.Security.Permissions.SecurityPermissionFlag.ControlPrincipal" />.</span><span class="sxs-lookup"><span data-stu-id="91365-432">Associated enumeration: <see cref="F:System.Security.Permissions.SecurityPermissionFlag.ControlPrincipal" />.</span></span></permission>
      </Docs>
    </Member>
    <Member MemberName="CurrentThread">
      <MemberSignature Language="C#" Value="public static System.Threading.Thread CurrentThread { get; }" />
      <MemberSignature Language="ILAsm" Value=".property class System.Threading.Thread CurrentThread" />
      <MemberSignature Language="DocId" Value="P:System.Threading.Thread.CurrentThread" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Property CurrentThread As Thread" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static property System::Threading::Thread ^ CurrentThread { System::Threading::Thread ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Thread</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>get: System.Runtime.ConstrainedExecution.ReliabilityContract(System.Runtime.ConstrainedExecution.Consistency.WillNotCorruptState, System.Runtime.ConstrainedExecution.Cer.MayFail)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Threading.Thread</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="91365-433">Возвращает выполняющийся в данный момент поток.</span><span class="sxs-lookup"><span data-stu-id="91365-433">Gets the currently running thread.</span></span></summary>
        <value><span data-ttu-id="91365-434">Объект <see cref="T:System.Threading.Thread" />, представляющий собой выполняющийся в данный момент поток.</span><span class="sxs-lookup"><span data-stu-id="91365-434">A <see cref="T:System.Threading.Thread" /> that is the representation of the currently running thread.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 <span data-ttu-id="91365-435">Следующий пример создает задачу, которая в свою очередь порождает 20 дочерних задач.</span><span class="sxs-lookup"><span data-stu-id="91365-435">The following example creates a task that in turn creates 20 child tasks.</span></span> <span data-ttu-id="91365-436">Само приложение, как хорошо каждая задача вызывает `ShowThreadInformation` метод, который использует <xref:System.Threading.Thread.CurrentThread%2A> свойство для отображения сведений о потоке, на котором он выполняется.</span><span class="sxs-lookup"><span data-stu-id="91365-436">The application itself, as well as each task, calls the `ShowThreadInformation` method, which uses the <xref:System.Threading.Thread.CurrentThread%2A> property  to display information about the thread on which it is running.</span></span>  
  
 [!code-csharp[System.Threading.Thread.CurrentThread#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.threading.thread.currentthread/cs/currentthread2.cs#1)]
 [!code-vb[System.Threading.Thread.CurrentThread#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.threading.thread.currentthread/vb/currentthread2.vb#1)]  
  
 <span data-ttu-id="91365-437">Каждая дочерняя задача создает 1 миллион случайных чисел от 1 до 1 миллион и возвращает среднего.</span><span class="sxs-lookup"><span data-stu-id="91365-437">Each child task generates 1 million random numbers between 1 and 1 million and returns their mean.</span></span> <span data-ttu-id="91365-438">Родительские задачи вызовы <xref:System.Threading.Tasks.Task.WaitAll%2A?displayProperty=nameWithType> метод, чтобы гарантировать завершение дочерних задач перед отображением среднего значения, возвращаемые каждой задачи и вычисление среднего значения означает.</span><span class="sxs-lookup"><span data-stu-id="91365-438">The parent task calls the <xref:System.Threading.Tasks.Task.WaitAll%2A?displayProperty=nameWithType> method to ensure that the child tasks have completed before displaying the mean returned by each task and calculating the mean of means.</span></span>  
  
 <span data-ttu-id="91365-439">Обратите внимание, что во время выполнения приложения в потоке переднего плана, каждая задача выполнялась в потоке пула потоков.</span><span class="sxs-lookup"><span data-stu-id="91365-439">Note that while the application runs on a foreground thread, each task runs on a thread pool thread.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="CurrentUICulture">
      <MemberSignature Language="C#" Value="public System.Globalization.CultureInfo CurrentUICulture { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Globalization.CultureInfo CurrentUICulture" />
      <MemberSignature Language="DocId" Value="P:System.Threading.Thread.CurrentUICulture" />
      <MemberSignature Language="VB.NET" Value="Public Property CurrentUICulture As CultureInfo" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Globalization::CultureInfo ^ CurrentUICulture { System::Globalization::CultureInfo ^ get(); void set(System::Globalization::CultureInfo ^ value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Thread</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>set: System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Globalization.CultureInfo</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="91365-440">Возвращает или задает текущие язык и региональные параметры, используемые диспетчером ресурсов для поиска ресурсов, связанных с языком и региональными параметрами, во время выполнения.</span><span class="sxs-lookup"><span data-stu-id="91365-440">Gets or sets the current culture used by the Resource Manager to look up culture-specific resources at run time.</span></span></summary>
        <value><span data-ttu-id="91365-441">Объект, представляющий текущие языковые стандарты.</span><span class="sxs-lookup"><span data-stu-id="91365-441">An object that represents the current culture.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="91365-442">Язык и региональные параметры пользовательского интерфейса указывает ресурсы, приложение должно поддерживать пользовательского ввода и вывода и по умолчанию является таким же, как язык и региональные параметры операционной системы.</span><span class="sxs-lookup"><span data-stu-id="91365-442">The UI culture specifies the resources an application needs to support user input and output, and by default is the same as the operating system culture.</span></span> <span data-ttu-id="91365-443">В разделе <xref:System.Globalization.CultureInfo> класса для изучения языка и региональных параметров имена и идентификаторы, различия между инвариантным, нейтральные и конкретные языки и региональные параметры, и сведения о культуре способом влияет потоков и доменов приложений.</span><span class="sxs-lookup"><span data-stu-id="91365-443">See the <xref:System.Globalization.CultureInfo> class to learn about culture names and identifiers, the differences between invariant, neutral, and specific cultures, and the way culture information affects threads and application domains.</span></span> <span data-ttu-id="91365-444">В разделе <xref:System.Globalization.CultureInfo.CurrentUICulture%2A?displayProperty=nameWithType> свойство, чтобы узнать, как определяется языка пользовательского интерфейса по умолчанию.</span><span class="sxs-lookup"><span data-stu-id="91365-444">See the <xref:System.Globalization.CultureInfo.CurrentUICulture%2A?displayProperty=nameWithType> property to learn how a thread's default UI culture is determined.</span></span>  
  
 <span data-ttu-id="91365-445"><xref:System.Globalization.CultureInfo> Это свойство может быть нейтрального языка и региональных параметров.</span><span class="sxs-lookup"><span data-stu-id="91365-445">The <xref:System.Globalization.CultureInfo> returned by this property can be a neutral culture.</span></span> <span data-ttu-id="91365-446">Нейтральные языки и региональные параметры не должны использоваться с форматированием методы, такие как <xref:System.String.Format%28System.IFormatProvider%2CSystem.String%2CSystem.Object%5B%5D%29?displayProperty=nameWithType>, <xref:System.DateTime.ToString%28System.String%2CSystem.IFormatProvider%29?displayProperty=nameWithType>, и <xref:System.Convert.ToString%28System.Char%2CSystem.IFormatProvider%29?displayProperty=nameWithType>.</span><span class="sxs-lookup"><span data-stu-id="91365-446">Neutral cultures should not be used with formatting methods such as <xref:System.String.Format%28System.IFormatProvider%2CSystem.String%2CSystem.Object%5B%5D%29?displayProperty=nameWithType>, <xref:System.DateTime.ToString%28System.String%2CSystem.IFormatProvider%29?displayProperty=nameWithType>, and <xref:System.Convert.ToString%28System.Char%2CSystem.IFormatProvider%29?displayProperty=nameWithType>.</span></span> <span data-ttu-id="91365-447">Используйте <xref:System.Globalization.CultureInfo.CreateSpecificCulture%2A?displayProperty=nameWithType> метод определенного языка и региональных параметров, или воспользоваться <xref:System.Threading.Thread.CurrentCulture%2A> свойство.</span><span class="sxs-lookup"><span data-stu-id="91365-447">Use the <xref:System.Globalization.CultureInfo.CreateSpecificCulture%2A?displayProperty=nameWithType> method to get a specific culture, or use the <xref:System.Threading.Thread.CurrentCulture%2A> property.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="91365-448"><xref:System.Globalization.CultureInfo.CreateSpecificCulture%2A?displayProperty=nameWithType> Вызывает исключение <xref:System.ArgumentException> нейтральные языки и региональные параметры «zh-Hant» («zh-CHT») и «zh-Hans» («zh-CHS»).</span><span class="sxs-lookup"><span data-stu-id="91365-448">The <xref:System.Globalization.CultureInfo.CreateSpecificCulture%2A?displayProperty=nameWithType> method throws <xref:System.ArgumentException> for the neutral cultures "zh-Hant" ("zh-CHT") and "zh-Hans" ("zh-CHS").</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="91365-449">В следующем примере определяется ли французский язык, языка и региональных параметров текущего потока пользовательского интерфейса.</span><span class="sxs-lookup"><span data-stu-id="91365-449">The following example determines whether the language of the current thread's UI culture is French.</span></span> <span data-ttu-id="91365-450">Если это не так, он задает язык и региональные параметры пользовательского интерфейса текущего потока английский (США).</span><span class="sxs-lookup"><span data-stu-id="91365-450">If it is not, it sets the UI culture of the current thread to English (United States).</span></span>  
  
 [!code-csharp[System.Threading.Thread.CurrentUICulture#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/System.Threading.Thread.CurrentUICulture/cs/CurrentUICulture1.cs#1)]
 [!code-vb[System.Threading.Thread.CurrentUICulture#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/System.Threading.Thread.CurrentUICulture/vb/CurrentUICulture1.vb#1)]  
  
 <span data-ttu-id="91365-451">В следующем примере кода показан потоковый оператор, который позволяет пользовательскому интерфейсу Windows Forms для отображения в языка и региональных параметров, который задан в панели управления.</span><span class="sxs-lookup"><span data-stu-id="91365-451">The following code example shows the threading statement that allows the user interface of a Windows Forms to display in the culture that is set in Control Panel.</span></span> <span data-ttu-id="91365-452">Требуется дополнительный код.</span><span class="sxs-lookup"><span data-stu-id="91365-452">Additional code is needed.</span></span>  
  
 [!code-cpp[System.Threading.Thread.Culture#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Threading.Thread.Culture/CPP/source.cpp#1)]
 [!code-csharp[System.Threading.Thread.Culture#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Threading.Thread.Culture/CS/source.cs#1)]
 [!code-vb[System.Threading.Thread.Culture#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Threading.Thread.Culture/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="91365-453">Для свойства задано значение <see langword="null" />.</span><span class="sxs-lookup"><span data-stu-id="91365-453">The property is set to <see langword="null" />.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="91365-454">Свойству присвоено имя языка и региональных параметров, которое не может использоваться для нахождения файла ресурсов.</span><span class="sxs-lookup"><span data-stu-id="91365-454">The property is set to a culture name that cannot be used to locate a resource file.</span></span> <span data-ttu-id="91365-455">Имена файлов ресурсов могут содержать только буквы, цифры, дефисы или символы подчеркивания.</span><span class="sxs-lookup"><span data-stu-id="91365-455">Resource filenames must include only letters, numbers, hyphens or underscores.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="DisableComObjectEagerCleanup">
      <MemberSignature Language="C#" Value="public void DisableComObjectEagerCleanup ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void DisableComObjectEagerCleanup() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Thread.DisableComObjectEagerCleanup" />
      <MemberSignature Language="VB.NET" Value="Public Sub DisableComObjectEagerCleanup ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void DisableComObjectEagerCleanup();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Thread</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="91365-456">Отключает автоматическую очистку вызываемых оболочек времени выполнения (RCW) для текущего потока.</span><span class="sxs-lookup"><span data-stu-id="91365-456">Turns off automatic cleanup of runtime callable wrappers (RCW) for the current thread.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="91365-457">По умолчанию общеязыковой среды выполнения (CLR) производит очистку вызываемых оболочек времени выполнения автоматически.</span><span class="sxs-lookup"><span data-stu-id="91365-457">By default, the common language runtime (CLR) cleans up runtime callable wrappers automatically.</span></span> <span data-ttu-id="91365-458">Загружает сообщения во время очистки, что может привести к проблемам повторный вход для нескольких приложений, удовлетворяющих следующим необычным условиям:</span><span class="sxs-lookup"><span data-stu-id="91365-458">The CLR pumps messages during the cleanup, which might cause reentrancy problems for a few applications that meet the following unusual criteria:</span></span>  
  
-   <span data-ttu-id="91365-459">Приложение выполняет собственную загрузку сообщения.</span><span class="sxs-lookup"><span data-stu-id="91365-459">The application does its own message pumping.</span></span>  
  
-   <span data-ttu-id="91365-460">Приложению для управления точно при загрузке сообщения.</span><span class="sxs-lookup"><span data-stu-id="91365-460">The application needs to control precisely when message pumping occurs.</span></span>  
  
 <span data-ttu-id="91365-461">Такие приложения могут использовать <xref:System.Threading.Thread.DisableComObjectEagerCleanup%2A> метод, чтобы предотвратить это автоматическое освобождение среды выполнения с помощью вызываемых оболочек среды CLR.</span><span class="sxs-lookup"><span data-stu-id="91365-461">Such applications can use the <xref:System.Threading.Thread.DisableComObjectEagerCleanup%2A> method to prevent the CLR from doing automatic reclamation of runtime callable wrappers.</span></span>  
  
 <span data-ttu-id="91365-462">При вызове этого метода в потоке автоматической очистки не может быть включена для этого потока.</span><span class="sxs-lookup"><span data-stu-id="91365-462">When this method has been called on a thread, automatic cleanup cannot be re-enabled for that thread.</span></span> <span data-ttu-id="91365-463">Когда приложение будет готово для очистки вызываемые оболочки времени выполнения, используйте <xref:System.Runtime.InteropServices.Marshal.CleanupUnusedObjectsInCurrentContext%2A?displayProperty=nameWithType> метод, чтобы заставить среду выполнения, чтобы очистить все вызываемые оболочки времени выполнения в текущем контексте.</span><span class="sxs-lookup"><span data-stu-id="91365-463">When your application is ready to clean up runtime callable wrappers, use the <xref:System.Runtime.InteropServices.Marshal.CleanupUnusedObjectsInCurrentContext%2A?displayProperty=nameWithType> method to instruct the runtime to clean up all runtime callable wrappers in the current context.</span></span> <span data-ttu-id="91365-464">Выдачи сообщений происходит во время выполнения метода.</span><span class="sxs-lookup"><span data-stu-id="91365-464">Message pumping occurs while the method executes.</span></span>  
  
 ]]></format>
        </remarks>
        <permission cref="T:System.Security.SecurityCriticalAttribute"><span data-ttu-id="91365-465">требуется полное доверие для непосредственно вызывающего метода.</span><span class="sxs-lookup"><span data-stu-id="91365-465">Requires full trust for the immediate caller.</span></span> <span data-ttu-id="91365-466">Этот член не может использоваться частично доверенным или прозрачным кодом.</span><span class="sxs-lookup"><span data-stu-id="91365-466">This member cannot be used by partially trusted or transparent code.</span></span></permission>
      </Docs>
    </Member>
    <Member MemberName="EndCriticalRegion">
      <MemberSignature Language="C#" Value="public static void EndCriticalRegion ();" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void EndCriticalRegion() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Thread.EndCriticalRegion" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub EndCriticalRegion ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void EndCriticalRegion();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Thread</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.ConstrainedExecution.ReliabilityContract(System.Runtime.ConstrainedExecution.Consistency.WillNotCorruptState, System.Runtime.ConstrainedExecution.Cer.Success)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="91365-467">Уведомляет узел, что выполнение близится ко входу в область кода, в которой эффекты прерывания выполнения или неуправляемой ошибки ограничены текущей задачей.</span><span class="sxs-lookup"><span data-stu-id="91365-467">Notifies a host that execution is about to enter a region of code in which the effects of a thread abort or unhandled exception are limited to the current task.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="91365-468">Узлы среды выполнения (CLR), например Microsoft SQL Server 2005, могут устанавливать различные политики для сбоев в критические и некритические областей кода.</span><span class="sxs-lookup"><span data-stu-id="91365-468">Hosts of the common language runtime (CLR), such as Microsoft SQL Server 2005, can establish different policies for failures in critical and non-critical regions of code.</span></span> <span data-ttu-id="91365-469">Критической области — один, в которой эффекты прерывания выполнения или необработанное исключение не могут быть ограничены текущей задачей.</span><span class="sxs-lookup"><span data-stu-id="91365-469">A critical region is one in which the effects of a thread abort or an unhandled exception might not be limited to the current task.</span></span> <span data-ttu-id="91365-470">Напротив прерывание или сбой в некритической области кода влияет только задачи, в котором произошла ошибка.</span><span class="sxs-lookup"><span data-stu-id="91365-470">By contrast, an abort or failure in a non-critical region of code affects only the task in which the error occurs.</span></span>  
  
 <span data-ttu-id="91365-471">Например рассмотрим задачу, которая пытается выделить память при блокировке.</span><span class="sxs-lookup"><span data-stu-id="91365-471">For example, consider a task that attempts to allocate memory while holding a lock.</span></span> <span data-ttu-id="91365-472">Если происходит сбой выделения памяти, прерывания текущей задачи недостаточно для обеспечения стабильности <xref:System.AppDomain>, так как может существовать другие задачи в домене, ожидающих блокировки.</span><span class="sxs-lookup"><span data-stu-id="91365-472">If the memory allocation fails, aborting the current task is not sufficient to ensure stability of the <xref:System.AppDomain>, because there can be other tasks in the domain waiting for the same lock.</span></span> <span data-ttu-id="91365-473">При прерывании выполнения текущей задачи, другие задачи могут взаимно блокироваться.</span><span class="sxs-lookup"><span data-stu-id="91365-473">If the current task is terminated, other tasks could be deadlocked.</span></span>  
  
 <span data-ttu-id="91365-474">При возникновении сбоя в критической области, узел может потребоваться выгрузить весь <xref:System.AppDomain> , а не рисковать и продолжения выполнения потенциально нестабильно.</span><span class="sxs-lookup"><span data-stu-id="91365-474">When a failure occurs in a critical region, the host might decide to unload the entire <xref:System.AppDomain> rather than take the risk of continuing execution in a potentially unstable state.</span></span> <span data-ttu-id="91365-475">Для информирования основного, код переходит в критической области, вызовите <xref:System.Threading.Thread.BeginCriticalRegion%2A>.</span><span class="sxs-lookup"><span data-stu-id="91365-475">To inform the host that your code is entering a critical region, call <xref:System.Threading.Thread.BeginCriticalRegion%2A>.</span></span> <span data-ttu-id="91365-476">Вызовите <xref:System.Threading.Thread.EndCriticalRegion%2A> когда выполнение возвращается некритической области кода.</span><span class="sxs-lookup"><span data-stu-id="91365-476">Call <xref:System.Threading.Thread.EndCriticalRegion%2A> when execution returns to a non-critical region of code.</span></span>  
  
 <span data-ttu-id="91365-477">С помощью этого метода в коде, выполняемом в SQL Server 2005 требуется код для выполнения на высоком уровне защиты узла.</span><span class="sxs-lookup"><span data-stu-id="91365-477">Using this method in code that runs under SQL Server 2005 requires the code to be run at the highest host protection level.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="91365-478">В следующем примере показано использование <xref:System.Threading.Thread.BeginCriticalRegion%2A> и <xref:System.Threading.Thread.EndCriticalRegion%2A> методы разделить критические и некритические области блока кода.</span><span class="sxs-lookup"><span data-stu-id="91365-478">The following example demonstrates the use of the <xref:System.Threading.Thread.BeginCriticalRegion%2A> and <xref:System.Threading.Thread.EndCriticalRegion%2A> methods to divide a block of code into critical and non-critical regions.</span></span>  
  
 [!code-cpp[System.Threading.Thread.BeginCriticalRegion#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Threading.Thread.BeginCriticalRegion/CPP/source.cpp#1)]
 [!code-csharp[System.Threading.Thread.BeginCriticalRegion#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Threading.Thread.BeginCriticalRegion/CS/source.cs#1)]
 [!code-vb[System.Threading.Thread.BeginCriticalRegion#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Threading.Thread.BeginCriticalRegion/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Threading.Thread.BeginCriticalRegion" />
      </Docs>
    </Member>
    <Member MemberName="EndThreadAffinity">
      <MemberSignature Language="C#" Value="public static void EndThreadAffinity ();" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void EndThreadAffinity() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Thread.EndThreadAffinity" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub EndThreadAffinity ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void EndThreadAffinity();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Thread</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.ConstrainedExecution.ReliabilityContract(System.Runtime.ConstrainedExecution.Consistency.WillNotCorruptState, System.Runtime.ConstrainedExecution.Cer.MayFail)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="91365-479">Уведомляет узел об окончании выполнения кодом инструкций, которые зависят от идентификатора текущего потока в операционной системе.</span><span class="sxs-lookup"><span data-stu-id="91365-479">Notifies a host that managed code has finished executing instructions that depend on the identity of the current physical operating system thread.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="91365-480">Некоторые узлы CLR, например Microsoft SQL Server 2005, обеспечивают самостоятельное управление потоками.</span><span class="sxs-lookup"><span data-stu-id="91365-480">Some hosts of the common language runtime, such as Microsoft SQL Server 2005, provide their own thread management.</span></span> <span data-ttu-id="91365-481">Узел, который предоставляет собственный поток управления можно переместить выполняющуюся задачу из одного потока операционной системы в другую в любое время.</span><span class="sxs-lookup"><span data-stu-id="91365-481">A host that provides its own thread management can move an executing task from one physical operating system thread to another at any time.</span></span> <span data-ttu-id="91365-482">Большинство задач с помощью этого переключения не затрагиваются.</span><span class="sxs-lookup"><span data-stu-id="91365-482">Most tasks are not affected by this switching.</span></span> <span data-ttu-id="91365-483">Тем не менее некоторые задачи поддерживают сходство потоков: то есть они зависят от идентификатора потока операционной системы.</span><span class="sxs-lookup"><span data-stu-id="91365-483">However, some tasks have thread affinity - that is, they depend on the identity of a physical operating system thread.</span></span> <span data-ttu-id="91365-484">Эти задачи необходимо проинформировать узел выполняемого кода, не будут перенаправлены.</span><span class="sxs-lookup"><span data-stu-id="91365-484">These tasks must inform the host when they execute code that should not be switched.</span></span>  
  
 <span data-ttu-id="91365-485">Например, если приложение вызывает API системы для получения операционной системой блокировки, сходство потоков, например Win32 CRITICAL_SECTION, необходимо вызвать <xref:System.Threading.Thread.BeginThreadAffinity%2A> до запроса на блокировку и <xref:System.Threading.Thread.EndThreadAffinity%2A> после освобождения блокировки.</span><span class="sxs-lookup"><span data-stu-id="91365-485">For example, if your application calls a system API to acquire an operating system lock that has thread affinity, such as a Win32 CRITICAL_SECTION, you must call <xref:System.Threading.Thread.BeginThreadAffinity%2A> before acquiring the lock, and <xref:System.Threading.Thread.EndThreadAffinity%2A> after releasing the lock.</span></span>  
  
 <span data-ttu-id="91365-486">С помощью этого метода в коде, выполняемом в SQL Server 2005 требуется код для выполнения на высоком уровне защиты узла.</span><span class="sxs-lookup"><span data-stu-id="91365-486">Using this method in code that runs under SQL Server 2005 requires the code to be run at the highest host protection level.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="91365-487">В следующем примере показано использование <xref:System.Threading.Thread.BeginThreadAffinity%2A> и <xref:System.Threading.Thread.EndThreadAffinity%2A> методы для уведомления узла, блок кода, зависящего от идентификатор потока операционной системы.</span><span class="sxs-lookup"><span data-stu-id="91365-487">The following example demonstrates the use of the <xref:System.Threading.Thread.BeginThreadAffinity%2A> and <xref:System.Threading.Thread.EndThreadAffinity%2A> methods to notify a host that a block of code depends on the identity of a physical operating system thread.</span></span>  
  
 [!code-cpp[System.Threading.Thread.BeginThreadAffinity#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Threading.Thread.BeginThreadAffinity/CPP/source.cpp#1)]
 [!code-csharp[System.Threading.Thread.BeginThreadAffinity#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Threading.Thread.BeginThreadAffinity/CS/source.cs#1)]
 [!code-vb[System.Threading.Thread.BeginThreadAffinity#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Threading.Thread.BeginThreadAffinity/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Security.SecurityException"><span data-ttu-id="91365-488">У вызывающего объекта отсутствует необходимое разрешение.</span><span class="sxs-lookup"><span data-stu-id="91365-488">The caller does not have the required permission.</span></span></exception>
        <permission cref="T:System.Security.SecurityCriticalAttribute"><span data-ttu-id="91365-489">требуется полное доверие для непосредственно вызывающего метода.</span><span class="sxs-lookup"><span data-stu-id="91365-489">Requires full trust for the immediate caller.</span></span> <span data-ttu-id="91365-490">Этот член не может использоваться частично доверенным или прозрачным кодом.</span><span class="sxs-lookup"><span data-stu-id="91365-490">This member cannot be used by partially trusted or transparent code.</span></span></permission>
        <altmember cref="M:System.Threading.Thread.BeginThreadAffinity" />
      </Docs>
    </Member>
    <Member MemberName="ExecutionContext">
      <MemberSignature Language="C#" Value="public System.Threading.ExecutionContext ExecutionContext { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Threading.ExecutionContext ExecutionContext" />
      <MemberSignature Language="DocId" Value="P:System.Threading.Thread.ExecutionContext" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property ExecutionContext As ExecutionContext" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Threading::ExecutionContext ^ ExecutionContext { System::Threading::ExecutionContext ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Thread</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>get: System.Runtime.ConstrainedExecution.ReliabilityContract(System.Runtime.ConstrainedExecution.Consistency.WillNotCorruptState, System.Runtime.ConstrainedExecution.Cer.MayFail)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>get: System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Threading.ExecutionContext</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="91365-491">Возвращает объект <see cref="T:System.Threading.ExecutionContext" />, содержащий сведения о различных контекстах текущего потока.</span><span class="sxs-lookup"><span data-stu-id="91365-491">Gets an <see cref="T:System.Threading.ExecutionContext" /> object that contains information about the various contexts of the current thread.</span></span></summary>
        <value><span data-ttu-id="91365-492">Объект <see cref="T:System.Threading.ExecutionContext" />, содержащий консолидированную информацию о контекстах текущего потока.</span><span class="sxs-lookup"><span data-stu-id="91365-492">An <see cref="T:System.Threading.ExecutionContext" /> object that consolidates context information for the current thread.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="91365-493"><xref:System.Threading.ExecutionContext> Класс предоставляет один контейнер для все сведения, относящиеся к логический поток выполнения.</span><span class="sxs-lookup"><span data-stu-id="91365-493">The <xref:System.Threading.ExecutionContext> class provides a single container for all information relevant to a logical thread of execution.</span></span> <span data-ttu-id="91365-494">Это включает в себя контекст безопасности, контекст вызовов, контекст синхронизации, контекст локализации и контекст транзакции.</span><span class="sxs-lookup"><span data-stu-id="91365-494">This includes security context, call context, synchronization context, localization context, and transaction context.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Finalize">
      <MemberSignature Language="C#" Value="~Thread ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance void Finalize() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Thread.Finalize" />
      <MemberSignature Language="VB.NET" Value="Finalize ()" />
      <MemberSignature Language="C++ CLI" Value="!Thread ()" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Thread</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.ConstrainedExecution.ReliabilityContract(System.Runtime.ConstrainedExecution.Consistency.WillNotCorruptState, System.Runtime.ConstrainedExecution.Cer.Success)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="91365-495">Обеспечивает освобождение ресурсов и выполнение других завершающих операций, когда сборщик мусора восстанавливает объект <see cref="T:System.Threading.Thread" />.</span><span class="sxs-lookup"><span data-stu-id="91365-495">Ensures that resources are freed and other cleanup operations are performed when the garbage collector reclaims the <see cref="T:System.Threading.Thread" /> object.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="91365-496">Сборщик мусора вызывает <xref:System.Threading.Thread.Finalize%2A> когда текущий объект готов к завершению.</span><span class="sxs-lookup"><span data-stu-id="91365-496">The garbage collector calls <xref:System.Threading.Thread.Finalize%2A> when the current object is ready to be finalized.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="FreeNamedDataSlot">
      <MemberSignature Language="C#" Value="public static void FreeNamedDataSlot (string name);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void FreeNamedDataSlot(string name) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Thread.FreeNamedDataSlot(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub FreeNamedDataSlot (name As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void FreeNamedDataSlot(System::String ^ name);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Thread</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="name"><span data-ttu-id="91365-497">Имя освобождаемой области данных.</span><span class="sxs-lookup"><span data-stu-id="91365-497">The name of the data slot to be freed.</span></span></param>
        <summary><span data-ttu-id="91365-498">Удаляет связь между названием и областью для всех потоков в процессе.</span><span class="sxs-lookup"><span data-stu-id="91365-498">Eliminates the association between a name and a slot, for all threads in the process.</span></span> <span data-ttu-id="91365-499">Для улучшения производительности используйте поля, отмеченные атрибутом <see cref="T:System.ThreadStaticAttribute" />.</span><span class="sxs-lookup"><span data-stu-id="91365-499">For better performance, use fields that are marked with the <see cref="T:System.ThreadStaticAttribute" /> attribute instead.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
> [!IMPORTANT]
>  <span data-ttu-id="91365-500">Платформа .NET Framework предоставляет два механизма для использования локальное хранилище потока (TLS): статические поля потока (то есть поля, отмеченные <xref:System.ThreadStaticAttribute> атрибут) и области данных.</span><span class="sxs-lookup"><span data-stu-id="91365-500">The .NET Framework provides two mechanisms for using thread local storage (TLS): thread-relative static fields (that is, fields that are marked with the <xref:System.ThreadStaticAttribute> attribute) and data slots.</span></span> <span data-ttu-id="91365-501">Статические поля потока предоставляют гораздо более высокую производительность, чем области данных и включить проверку типов во время компиляции.</span><span class="sxs-lookup"><span data-stu-id="91365-501">Thread-relative static fields provide much better performance than data slots, and enable compile-time type checking.</span></span> <span data-ttu-id="91365-502">Дополнительные сведения об использовании TLS см. в разделе [локальное хранилище потока: статические поля потока и области данных](~/docs/standard/threading/thread-local-storage-thread-relative-static-fields-and-data-slots.md).</span><span class="sxs-lookup"><span data-stu-id="91365-502">For more information about using TLS, see [Thread Local Storage: Thread-Relative Static Fields and Data Slots](~/docs/standard/threading/thread-local-storage-thread-relative-static-fields-and-data-slots.md).</span></span>  
  
 <span data-ttu-id="91365-503">После какой-либо поток вызывает `FreeNamedDataSlot`, поток, который вызывает <xref:System.Threading.Thread.GetNamedDataSlot%2A> с тем же именем приведет к выделению новую ячейку, связанный с именем.</span><span class="sxs-lookup"><span data-stu-id="91365-503">After any thread calls `FreeNamedDataSlot`, any other thread that calls <xref:System.Threading.Thread.GetNamedDataSlot%2A> with the same name will allocate a new slot associated with the name.</span></span> <span data-ttu-id="91365-504">Последующие вызовы `GetNamedDataSlot` любым потоком будут возвращать новую область.</span><span class="sxs-lookup"><span data-stu-id="91365-504">Subsequent calls to `GetNamedDataSlot` by any thread will return the new slot.</span></span> <span data-ttu-id="91365-505">Тем не менее, любой поток, по-прежнему содержит <xref:System.LocalDataStoreSlot?displayProperty=nameWithType> возвращенные предыдущими вызовами метода `GetNamedDataSlot` можно продолжать использовать старую область.</span><span class="sxs-lookup"><span data-stu-id="91365-505">However, any thread that still has a <xref:System.LocalDataStoreSlot?displayProperty=nameWithType> returned by an earlier call to `GetNamedDataSlot` can continue to use the old slot.</span></span>  
  
 <span data-ttu-id="91365-506">Область, связанный с именем, будет освобождена только тогда, когда каждый `LocalDataStoreSlot` , полученные до вызова метода `FreeNamedDataSlot` были освобождены и сбора мусора.</span><span class="sxs-lookup"><span data-stu-id="91365-506">A slot that has been associated with a name is released only when every `LocalDataStoreSlot` that was obtained prior to the call to `FreeNamedDataSlot` has been released and garbage-collected.</span></span>  
  
 <span data-ttu-id="91365-507">Потоки используют механизм локального хранилища памяти для хранения данных определенного потока.</span><span class="sxs-lookup"><span data-stu-id="91365-507">Threads use a local store memory mechanism to store thread-specific data.</span></span> <span data-ttu-id="91365-508">Общеязыковая среда выполнения выделяет массив хранения данных несколькими разъемами для каждого процесса при его создании.</span><span class="sxs-lookup"><span data-stu-id="91365-508">The common language runtime allocates a multi-slot data store array to each process when it is created.</span></span> <span data-ttu-id="91365-509">Поток может выделить область данных в хранилище данных, хранилище и получения данных значение в слоте и освободить эту область для повторного использования после истечения срока действия потока.</span><span class="sxs-lookup"><span data-stu-id="91365-509">The thread can allocate a data slot in the data store, store and retrieve a data value in the slot, and free the slot for reuse after the thread expires.</span></span> <span data-ttu-id="91365-510">Области данных являются уникальными для каждого потока.</span><span class="sxs-lookup"><span data-stu-id="91365-510">Data slots are unique per thread.</span></span> <span data-ttu-id="91365-511">Ни один поток (даже дочерний поток) можно получить эти данные.</span><span class="sxs-lookup"><span data-stu-id="91365-511">No other thread (not even a child thread) can get that data.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="91365-512">Этот раздел содержит два примера кода.</span><span class="sxs-lookup"><span data-stu-id="91365-512">This section contains two code examples.</span></span> <span data-ttu-id="91365-513">Первый пример показано, как использовать поле, отмеченный атрибутом <xref:System.ThreadStaticAttribute> атрибут для хранения информации о потоках.</span><span class="sxs-lookup"><span data-stu-id="91365-513">The first example shows how to use a field that is marked with the <xref:System.ThreadStaticAttribute> attribute to hold thread-specific information.</span></span> <span data-ttu-id="91365-514">Во втором примере показано, как использовать область данных сделать то же самое.</span><span class="sxs-lookup"><span data-stu-id="91365-514">The second example shows how to use a data slot to do the same thing.</span></span>  
  
 <span data-ttu-id="91365-515">**В первом примере**</span><span class="sxs-lookup"><span data-stu-id="91365-515">**First Example**</span></span>  
  
 <span data-ttu-id="91365-516">Приведенный ниже показано, как использовать поле, отмеченный атрибутом <xref:System.ThreadStaticAttribute> для хранения информации о потоках.</span><span class="sxs-lookup"><span data-stu-id="91365-516">The following example shows how to use a field that is marked with <xref:System.ThreadStaticAttribute> to hold thread-specific information.</span></span> <span data-ttu-id="91365-517">Этот метод обеспечивает лучшую производительность, чем метод, который отображается во втором примере.</span><span class="sxs-lookup"><span data-stu-id="91365-517">This technique provides better performance than the technique that is shown in the second example.</span></span>  
  
 [!code-cpp[System.Threading.Thread.DoNotUseDataSlots#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Threading.Thread.DoNotUseDataSlots/CPP/source.cpp#1)]
 [!code-csharp[System.Threading.Thread.DoNotUseDataSlots#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Threading.Thread.DoNotUseDataSlots/CS/source.cs#1)]
 [!code-vb[System.Threading.Thread.DoNotUseDataSlots#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Threading.Thread.DoNotUseDataSlots/vb/source.vb#1)]  
  
 <span data-ttu-id="91365-518">**Во втором примере**</span><span class="sxs-lookup"><span data-stu-id="91365-518">**Second Example**</span></span>  
  
 <span data-ttu-id="91365-519">Следующий пример демонстрирует использование именованную область данных для хранения информации о потоках.</span><span class="sxs-lookup"><span data-stu-id="91365-519">The following example demonstrates how to use a named data slot to store thread-specific information.</span></span>  
  
 [!code-cpp[System.Threading.Thread.NamedDataSlot#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Threading.Thread.NamedDataSlot/CPP/source.cpp#1)]
 [!code-csharp[System.Threading.Thread.NamedDataSlot#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Threading.Thread.NamedDataSlot/CS/source.cs#1)]
 [!code-vb[System.Threading.Thread.NamedDataSlot#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Threading.Thread.NamedDataSlot/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetApartmentState">
      <MemberSignature Language="C#" Value="public System.Threading.ApartmentState GetApartmentState ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype System.Threading.ApartmentState GetApartmentState() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Thread.GetApartmentState" />
      <MemberSignature Language="VB.NET" Value="Public Function GetApartmentState () As ApartmentState" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Threading::ApartmentState GetApartmentState();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Thread</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.ApartmentState</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="91365-520">Возвращает значение типа <see cref="T:System.Threading.ApartmentState" />, показывающее состояние апартамента.</span><span class="sxs-lookup"><span data-stu-id="91365-520">Returns an <see cref="T:System.Threading.ApartmentState" /> value indicating the apartment state.</span></span></summary>
        <returns><span data-ttu-id="91365-521">Одно из значений <see cref="T:System.Threading.ApartmentState" />, показывающее состояние подразделения управляемого потока.</span><span class="sxs-lookup"><span data-stu-id="91365-521">One of the <see cref="T:System.Threading.ApartmentState" /> values indicating the apartment state of the managed thread.</span></span> <span data-ttu-id="91365-522">Значение по умолчанию: <see cref="F:System.Threading.ApartmentState.Unknown" />.</span><span class="sxs-lookup"><span data-stu-id="91365-522">The default is <see cref="F:System.Threading.ApartmentState.Unknown" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="91365-523">Этот метод вместе с <xref:System.Threading.Thread.SetApartmentState%2A> метод и <xref:System.Threading.Thread.TrySetApartmentState%2A> заменяет метод, <xref:System.Threading.Thread.ApartmentState%2A> свойство.</span><span class="sxs-lookup"><span data-stu-id="91365-523">This method, along with the <xref:System.Threading.Thread.SetApartmentState%2A> method and the <xref:System.Threading.Thread.TrySetApartmentState%2A> method, replaces the <xref:System.Threading.Thread.ApartmentState%2A> property.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="91365-524">В следующем примере кода показано <xref:System.Threading.Thread.GetApartmentState%2A>, <xref:System.Threading.Thread.SetApartmentState%2A>, и <xref:System.Threading.Thread.TrySetApartmentState%2A> методы.</span><span class="sxs-lookup"><span data-stu-id="91365-524">The following code example demonstrates the <xref:System.Threading.Thread.GetApartmentState%2A>, <xref:System.Threading.Thread.SetApartmentState%2A>, and <xref:System.Threading.Thread.TrySetApartmentState%2A> methods.</span></span> <span data-ttu-id="91365-525">В примере кода создается поток.</span><span class="sxs-lookup"><span data-stu-id="91365-525">The code example creates a thread.</span></span> <span data-ttu-id="91365-526">До запуска потока <xref:System.Threading.Thread.GetApartmentState%2A> отображает начальный <xref:System.Threading.ApartmentState.Unknown?displayProperty=nameWithType> состояние и <xref:System.Threading.Thread.SetApartmentState%2A> изменяет состояние на <xref:System.Threading.ApartmentState.STA?displayProperty=nameWithType>.</span><span class="sxs-lookup"><span data-stu-id="91365-526">Before the thread is started, <xref:System.Threading.Thread.GetApartmentState%2A> displays the initial <xref:System.Threading.ApartmentState.Unknown?displayProperty=nameWithType> state and <xref:System.Threading.Thread.SetApartmentState%2A> changes the state to <xref:System.Threading.ApartmentState.STA?displayProperty=nameWithType>.</span></span> <span data-ttu-id="91365-527"><xref:System.Threading.Thread.TrySetApartmentState%2A> Метод затем возвращает `false` при попытке изменить состояние на <xref:System.Threading.ApartmentState.MTA?displayProperty=nameWithType> , так как состояние подразделения уже задано.</span><span class="sxs-lookup"><span data-stu-id="91365-527">The <xref:System.Threading.Thread.TrySetApartmentState%2A> method then returns `false` when attempting to change the state to <xref:System.Threading.ApartmentState.MTA?displayProperty=nameWithType> because the apartment state is already set.</span></span> <span data-ttu-id="91365-528">Если попыток одной операции с <xref:System.Threading.Thread.SetApartmentState%2A>, <xref:System.InvalidOperationException> бы исключение.</span><span class="sxs-lookup"><span data-stu-id="91365-528">If the same operation had been attempted with <xref:System.Threading.Thread.SetApartmentState%2A>, <xref:System.InvalidOperationException> would have been thrown.</span></span>  
  
 <span data-ttu-id="91365-529">После запуска потока <xref:System.Threading.Thread.TrySetApartmentState%2A> используется метод.</span><span class="sxs-lookup"><span data-stu-id="91365-529">After the thread is started, the <xref:System.Threading.Thread.TrySetApartmentState%2A> method is used again.</span></span> <span data-ttu-id="91365-530">Это время, создается исключение <xref:System.Threading.ThreadStateException> поскольку поток уже запущен.</span><span class="sxs-lookup"><span data-stu-id="91365-530">This time it throws <xref:System.Threading.ThreadStateException> because the thread has already been started.</span></span>  
  
 [!code-cpp[Thread.GetSetTrySetApartmentState#1](~/samples/snippets/cpp/VS_Snippets_CLR/Thread.GetSetTrySetApartmentState/cpp/source.cpp#1)]
 [!code-csharp[Thread.GetSetTrySetApartmentState#1](~/samples/snippets/csharp/VS_Snippets_CLR/Thread.GetSetTrySetApartmentState/cs/source.cs#1)]
 [!code-vb[Thread.GetSetTrySetApartmentState#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/Thread.GetSetTrySetApartmentState/vb/source.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetCompressedStack">
      <MemberSignature Language="C#" Value="public System.Threading.CompressedStack GetCompressedStack ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.CompressedStack GetCompressedStack() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Thread.GetCompressedStack" />
      <MemberSignature Language="VB.NET" Value="Public Function GetCompressedStack () As CompressedStack" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Threading::CompressedStack ^ GetCompressedStack();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Thread</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Obsolete("Thread.GetCompressedStack is no longer supported. Please use the System.Threading.CompressedStack class")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Security.SecurityCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Threading.CompressedStack</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="91365-531">Возвращает объект <see cref="T:System.Threading.CompressedStack" />, который может быть использован для записи стека текущего потока.</span><span class="sxs-lookup"><span data-stu-id="91365-531">Returns a <see cref="T:System.Threading.CompressedStack" /> object that can be used to capture the stack for the current thread.</span></span></summary>
        <returns><span data-ttu-id="91365-532">Отсутствует.</span><span class="sxs-lookup"><span data-stu-id="91365-532">None.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="91365-533">Этот метод больше не поддерживается.</span><span class="sxs-lookup"><span data-stu-id="91365-533">This method is no longer supported.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="91365-534">Во всех случаях.</span><span class="sxs-lookup"><span data-stu-id="91365-534">In all cases.</span></span></exception>
        <permission cref="T:System.Security.SecurityCriticalAttribute"><span data-ttu-id="91365-535">требуется полное доверие для непосредственно вызывающего метода.</span><span class="sxs-lookup"><span data-stu-id="91365-535">Requires full trust for the immediate caller.</span></span> <span data-ttu-id="91365-536">Этот член не может использоваться частично доверенным или прозрачным кодом.</span><span class="sxs-lookup"><span data-stu-id="91365-536">This member cannot be used by partially trusted or transparent code.</span></span></permission>
      </Docs>
    </Member>
    <Member MemberName="GetCurrentProcessorId">
      <MemberSignature Language="C#" Value="public static int GetCurrentProcessorId ();" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig int32 GetCurrentProcessorId() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Thread.GetCurrentProcessorId" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function GetCurrentProcessorId () As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static int GetCurrentProcessorId();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Thread</AssemblyName>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetData">
      <MemberSignature Language="C#" Value="public static object GetData (LocalDataStoreSlot slot);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig object GetData(class System.LocalDataStoreSlot slot) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Thread.GetData(System.LocalDataStoreSlot)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function GetData (slot As LocalDataStoreSlot) As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Object ^ GetData(LocalDataStoreSlot ^ slot);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Thread</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="slot" Type="System.LocalDataStoreSlot" />
      </Parameters>
      <Docs>
        <param name="slot"><span data-ttu-id="91365-537">Объект <see cref="T:System.LocalDataStoreSlot" />, из которого возвращается значение.</span><span class="sxs-lookup"><span data-stu-id="91365-537">The <see cref="T:System.LocalDataStoreSlot" /> from which to get the value.</span></span></param>
        <summary><span data-ttu-id="91365-538">Извлекает значение из заданной области текущего потока, внутри текущей области текущего потока.</span><span class="sxs-lookup"><span data-stu-id="91365-538">Retrieves the value from the specified slot on the current thread, within the current thread's current domain.</span></span> <span data-ttu-id="91365-539">Для улучшения производительности используйте поля, отмеченные атрибутом <see cref="T:System.ThreadStaticAttribute" />.</span><span class="sxs-lookup"><span data-stu-id="91365-539">For better performance, use fields that are marked with the <see cref="T:System.ThreadStaticAttribute" /> attribute instead.</span></span></summary>
        <returns><span data-ttu-id="91365-540">Извлекаемое значение.</span><span class="sxs-lookup"><span data-stu-id="91365-540">The retrieved value.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
> [!IMPORTANT]
>  <span data-ttu-id="91365-541">Платформа .NET Framework предоставляет два механизма для использования локальное хранилище потока (TLS): статические поля потока (то есть поля, отмеченные <xref:System.ThreadStaticAttribute> атрибут) и области данных.</span><span class="sxs-lookup"><span data-stu-id="91365-541">The .NET Framework provides two mechanisms for using thread local storage (TLS): thread-relative static fields (that is, fields that are marked with the <xref:System.ThreadStaticAttribute> attribute) and data slots.</span></span> <span data-ttu-id="91365-542">Статические поля потока предоставляют гораздо более высокую производительность, чем области данных и включить проверку типов во время компиляции.</span><span class="sxs-lookup"><span data-stu-id="91365-542">Thread-relative static fields provide much better performance than data slots, and enable compile-time type checking.</span></span> <span data-ttu-id="91365-543">Дополнительные сведения об использовании TLS см. в разделе [локальное хранилище потока: статические поля потока и области данных](~/docs/standard/threading/thread-local-storage-thread-relative-static-fields-and-data-slots.md).</span><span class="sxs-lookup"><span data-stu-id="91365-543">For more information about using TLS, see [Thread Local Storage: Thread-Relative Static Fields and Data Slots](~/docs/standard/threading/thread-local-storage-thread-relative-static-fields-and-data-slots.md).</span></span>  
  
 <span data-ttu-id="91365-544">Потоки используют механизм локального хранилища памяти для хранения данных определенного потока.</span><span class="sxs-lookup"><span data-stu-id="91365-544">Threads use a local store memory mechanism to store thread-specific data.</span></span> <span data-ttu-id="91365-545">Общеязыковая среда выполнения выделяет массив хранения данных несколькими разъемами для каждого процесса при его создании.</span><span class="sxs-lookup"><span data-stu-id="91365-545">The common language runtime allocates a multi-slot data store array to each process when it is created.</span></span> <span data-ttu-id="91365-546">Поток может выделить область данных в хранилище данных, хранилище и получения данных значение в слоте и освободить эту область для повторного использования после истечения срока действия потока.</span><span class="sxs-lookup"><span data-stu-id="91365-546">The thread can allocate a data slot in the data store, store and retrieve a data value in the slot, and free the slot for reuse after the thread expires.</span></span> <span data-ttu-id="91365-547">Области данных являются уникальными для каждого потока.</span><span class="sxs-lookup"><span data-stu-id="91365-547">Data slots are unique per thread.</span></span> <span data-ttu-id="91365-548">Ни один поток (даже дочерний поток) можно получить эти данные.</span><span class="sxs-lookup"><span data-stu-id="91365-548">No other thread (not even a child thread) can get that data.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="91365-549"><xref:System.Threading.Thread.GetData%2A> — `Shared` метод, который всегда применяется к потоку выполняться в данный момент, даже при вызове с помощью переменной, которая ссылается на другой поток.</span><span class="sxs-lookup"><span data-stu-id="91365-549"><xref:System.Threading.Thread.GetData%2A> is a `Shared` method that always applies to the currently executing thread, even if you call it using a variable that refers to another thread.</span></span> <span data-ttu-id="91365-550">Чтобы избежать путаницы, используйте имя класса при вызове `Shared` методы: `Dim test As Object = Thread.GetData(testSlot)`.</span><span class="sxs-lookup"><span data-stu-id="91365-550">To avoid confusion, use the class name when calling `Shared` methods: `Dim test As Object = Thread.GetData(testSlot)`.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="91365-551">Этот раздел содержит два примера кода.</span><span class="sxs-lookup"><span data-stu-id="91365-551">This section contains two code examples.</span></span> <span data-ttu-id="91365-552">Первый пример показано, как использовать поле, отмеченный атрибутом <xref:System.ThreadStaticAttribute> атрибут для хранения информации о потоках.</span><span class="sxs-lookup"><span data-stu-id="91365-552">The first example shows how to use a field that is marked with the <xref:System.ThreadStaticAttribute> attribute to hold thread-specific information.</span></span> <span data-ttu-id="91365-553">Во втором примере показано, как использовать область данных сделать то же самое.</span><span class="sxs-lookup"><span data-stu-id="91365-553">The second example shows how to use a data slot to do the same thing.</span></span>  
  
 <span data-ttu-id="91365-554">**В первом примере**</span><span class="sxs-lookup"><span data-stu-id="91365-554">**First Example**</span></span>  
  
 <span data-ttu-id="91365-555">Приведенный ниже показано, как использовать поле, отмеченный атрибутом <xref:System.ThreadStaticAttribute> для хранения информации о потоках.</span><span class="sxs-lookup"><span data-stu-id="91365-555">The following example shows how to use a field that is marked with <xref:System.ThreadStaticAttribute> to hold thread-specific information.</span></span> <span data-ttu-id="91365-556">Этот метод обеспечивает лучшую производительность, чем метод, который отображается во втором примере.</span><span class="sxs-lookup"><span data-stu-id="91365-556">This technique provides better performance than the technique that is shown in the second example.</span></span>  
  
 [!code-cpp[System.Threading.Thread.DoNotUseDataSlots#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Threading.Thread.DoNotUseDataSlots/CPP/source.cpp#1)]
 [!code-csharp[System.Threading.Thread.DoNotUseDataSlots#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Threading.Thread.DoNotUseDataSlots/CS/source.cs#1)]
 [!code-vb[System.Threading.Thread.DoNotUseDataSlots#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Threading.Thread.DoNotUseDataSlots/vb/source.vb#1)]  
  
 <span data-ttu-id="91365-557">**Во втором примере**</span><span class="sxs-lookup"><span data-stu-id="91365-557">**Second Example**</span></span>  
  
 <span data-ttu-id="91365-558">Следующий пример демонстрирует использование области данных для хранения информации о потоках.</span><span class="sxs-lookup"><span data-stu-id="91365-558">The following example demonstrates how to use a data slot to store thread-specific information.</span></span>  
  
 [!code-cpp[System.Threading.Thread.DataSlot#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Threading.Thread.DataSlot/CPP/source.cpp#1)]
 [!code-csharp[System.Threading.Thread.DataSlot#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Threading.Thread.DataSlot/CS/source.cs#1)]
 [!code-vb[System.Threading.Thread.DataSlot#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Threading.Thread.DataSlot/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Threading.Thread.SetData(System.LocalDataStoreSlot,System.Object)" />
      </Docs>
    </Member>
    <Member MemberName="GetDomain">
      <MemberSignature Language="C#" Value="public static AppDomain GetDomain ();" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.AppDomain GetDomain() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Thread.GetDomain" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function GetDomain () As AppDomain" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static AppDomain ^ GetDomain();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Thread</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.AppDomain</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="91365-559">Возвращает текущую область, в которой выполняется текущий поток.</span><span class="sxs-lookup"><span data-stu-id="91365-559">Returns the current domain in which the current thread is running.</span></span></summary>
        <returns><span data-ttu-id="91365-560">Объект <see cref="T:System.AppDomain" />, представляющий собой текущий домен приложения выполняющегося потока.</span><span class="sxs-lookup"><span data-stu-id="91365-560">An <see cref="T:System.AppDomain" /> representing the current application domain of the running thread.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 <span data-ttu-id="91365-561">В следующем примере кода показано, как получить имя и идентификатор `AppDomain` , в котором выполняется поток.</span><span class="sxs-lookup"><span data-stu-id="91365-561">The following code example shows how to retrieve the name and ID of the `AppDomain` in which the thread is running.</span></span>  
  
 [!code-cpp[System.Threading.Thread.Domain#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Threading.Thread.Domain/CPP/source.cpp#1)]
 [!code-csharp[System.Threading.Thread.Domain#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Threading.Thread.Domain/CS/source.cs#1)]
 [!code-vb[System.Threading.Thread.Domain#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Threading.Thread.Domain/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetDomainID">
      <MemberSignature Language="C#" Value="public static int GetDomainID ();" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig int32 GetDomainID() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Thread.GetDomainID" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function GetDomainID () As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static int GetDomainID();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Thread</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="91365-562">Возвращает уникальный идентификатор домена приложения.</span><span class="sxs-lookup"><span data-stu-id="91365-562">Returns a unique application domain identifier.</span></span></summary>
        <returns><span data-ttu-id="91365-563">32-разрядное знаковое целое число, однозначно определяющее домен приложения.</span><span class="sxs-lookup"><span data-stu-id="91365-563">A 32-bit signed integer uniquely identifying the application domain.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 <span data-ttu-id="91365-564">В следующем примере кода показано, как получить имя и идентификатор `AppDomain` , в котором выполняется поток.</span><span class="sxs-lookup"><span data-stu-id="91365-564">The following code example shows how to retrieve the name and ID of the `AppDomain` in which the thread is running.</span></span>  
  
 [!code-cpp[System.Threading.Thread.Domain#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Threading.Thread.Domain/CPP/source.cpp#1)]
 [!code-csharp[System.Threading.Thread.Domain#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Threading.Thread.Domain/CS/source.cs#1)]
 [!code-vb[System.Threading.Thread.Domain#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Threading.Thread.Domain/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetHashCode">
      <MemberSignature Language="C#" Value="public override int GetHashCode ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance int32 GetHashCode() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Thread.GetHashCode" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function GetHashCode () As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override int GetHashCode();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Thread</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.ComVisible(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="91365-565">Возвращает хэш-код текущего потока.</span><span class="sxs-lookup"><span data-stu-id="91365-565">Returns a hash code for the current thread.</span></span></summary>
        <returns><span data-ttu-id="91365-566">Целочисленное значение хэш-кода.</span><span class="sxs-lookup"><span data-stu-id="91365-566">An integer hash code value.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="91365-567">Хэш-код не гарантированно уникален.</span><span class="sxs-lookup"><span data-stu-id="91365-567">The hash code is not guaranteed to be unique.</span></span> <span data-ttu-id="91365-568">Используйте <xref:System.Threading.Thread.ManagedThreadId%2A> свойство, если требуется уникальный идентификатор управляемого потока.</span><span class="sxs-lookup"><span data-stu-id="91365-568">Use the <xref:System.Threading.Thread.ManagedThreadId%2A> property if you need a unique identifier for a managed thread.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetNamedDataSlot">
      <MemberSignature Language="C#" Value="public static LocalDataStoreSlot GetNamedDataSlot (string name);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.LocalDataStoreSlot GetNamedDataSlot(string name) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Thread.GetNamedDataSlot(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function GetNamedDataSlot (name As String) As LocalDataStoreSlot" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static LocalDataStoreSlot ^ GetNamedDataSlot(System::String ^ name);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Thread</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.LocalDataStoreSlot</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="name"><span data-ttu-id="91365-569">Имя локальной области данных.</span><span class="sxs-lookup"><span data-stu-id="91365-569">The name of the local data slot.</span></span></param>
        <summary><span data-ttu-id="91365-570">Ищет именованную область данных.</span><span class="sxs-lookup"><span data-stu-id="91365-570">Looks up a named data slot.</span></span> <span data-ttu-id="91365-571">Для улучшения производительности используйте поля, отмеченные атрибутом <see cref="T:System.ThreadStaticAttribute" />.</span><span class="sxs-lookup"><span data-stu-id="91365-571">For better performance, use fields that are marked with the <see cref="T:System.ThreadStaticAttribute" /> attribute instead.</span></span></summary>
        <returns><span data-ttu-id="91365-572">Объект <see cref="T:System.LocalDataStoreSlot" />, выделенный для данного потока.</span><span class="sxs-lookup"><span data-stu-id="91365-572">A <see cref="T:System.LocalDataStoreSlot" /> allocated for this thread.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
> [!IMPORTANT]
>  <span data-ttu-id="91365-573">Платформа .NET Framework предоставляет два механизма для использования локальное хранилище потока (TLS): статические поля потока (то есть поля, отмеченные <xref:System.ThreadStaticAttribute> атрибут) и области данных.</span><span class="sxs-lookup"><span data-stu-id="91365-573">The .NET Framework provides two mechanisms for using thread local storage (TLS): thread-relative static fields (that is, fields that are marked with the <xref:System.ThreadStaticAttribute> attribute) and data slots.</span></span> <span data-ttu-id="91365-574">Статические поля потока предоставляют гораздо более высокую производительность, чем области данных и включить проверку типов во время компиляции.</span><span class="sxs-lookup"><span data-stu-id="91365-574">Thread-relative static fields provide much better performance than data slots, and enable compile-time type checking.</span></span> <span data-ttu-id="91365-575">Дополнительные сведения об использовании TLS см. в разделе [локальное хранилище потока: статические поля потока и области данных](~/docs/standard/threading/thread-local-storage-thread-relative-static-fields-and-data-slots.md).</span><span class="sxs-lookup"><span data-stu-id="91365-575">For more information about using TLS, see [Thread Local Storage: Thread-Relative Static Fields and Data Slots](~/docs/standard/threading/thread-local-storage-thread-relative-static-fields-and-data-slots.md).</span></span>  
  
 <span data-ttu-id="91365-576">Потоки используют механизм локального хранилища памяти для хранения данных определенного потока.</span><span class="sxs-lookup"><span data-stu-id="91365-576">Threads use a local store memory mechanism to store thread-specific data.</span></span> <span data-ttu-id="91365-577">Общеязыковая среда выполнения выделяет массив хранения данных несколькими разъемами для каждого процесса при его создании.</span><span class="sxs-lookup"><span data-stu-id="91365-577">The common language runtime allocates a multi-slot data store array to each process when it is created.</span></span> <span data-ttu-id="91365-578">Поток может выделить область данных в хранилище данных, хранилище и получения данных значение в слоте и освободить эту область для повторного использования после истечения срока действия потока.</span><span class="sxs-lookup"><span data-stu-id="91365-578">The thread can allocate a data slot in the data store, store and retrieve a data value in the slot, and free the slot for reuse after the thread expires.</span></span> <span data-ttu-id="91365-579">Области данных являются уникальными для каждого потока.</span><span class="sxs-lookup"><span data-stu-id="91365-579">Data slots are unique per thread.</span></span> <span data-ttu-id="91365-580">Ни один поток (даже дочерний поток) можно получить эти данные.</span><span class="sxs-lookup"><span data-stu-id="91365-580">No other thread (not even a child thread) can get that data.</span></span>  
  
 <span data-ttu-id="91365-581">Если Именованная область не существует, выделяется новая область.</span><span class="sxs-lookup"><span data-stu-id="91365-581">If the named slot does not exist, a new slot is allocated.</span></span> <span data-ttu-id="91365-582">Именованные области данных являются открытыми и может использоваться кем.</span><span class="sxs-lookup"><span data-stu-id="91365-582">Named data slots are public and can be manipulated by anyone.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="91365-583">Этот раздел содержит два примера кода.</span><span class="sxs-lookup"><span data-stu-id="91365-583">This section contains two code examples.</span></span> <span data-ttu-id="91365-584">Первый пример показано, как использовать поле, отмеченный атрибутом <xref:System.ThreadStaticAttribute> атрибут для хранения информации о потоках.</span><span class="sxs-lookup"><span data-stu-id="91365-584">The first example shows how to use a field that is marked with the <xref:System.ThreadStaticAttribute> attribute to hold thread-specific information.</span></span> <span data-ttu-id="91365-585">Во втором примере показано, как использовать область данных сделать то же самое.</span><span class="sxs-lookup"><span data-stu-id="91365-585">The second example shows how to use a data slot to do the same thing.</span></span>  
  
 <span data-ttu-id="91365-586">**В первом примере**</span><span class="sxs-lookup"><span data-stu-id="91365-586">**First Example**</span></span>  
  
 <span data-ttu-id="91365-587">Приведенный ниже показано, как использовать поле, отмеченный атрибутом <xref:System.ThreadStaticAttribute> для хранения информации о потоках.</span><span class="sxs-lookup"><span data-stu-id="91365-587">The following example shows how to use a field that is marked with <xref:System.ThreadStaticAttribute> to hold thread-specific information.</span></span> <span data-ttu-id="91365-588">Этот метод обеспечивает лучшую производительность, чем метод, который отображается во втором примере.</span><span class="sxs-lookup"><span data-stu-id="91365-588">This technique provides better performance than the technique that is shown in the second example.</span></span>  
  
 [!code-cpp[System.Threading.Thread.DoNotUseDataSlots#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Threading.Thread.DoNotUseDataSlots/CPP/source.cpp#1)]
 [!code-csharp[System.Threading.Thread.DoNotUseDataSlots#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Threading.Thread.DoNotUseDataSlots/CS/source.cs#1)]
 [!code-vb[System.Threading.Thread.DoNotUseDataSlots#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Threading.Thread.DoNotUseDataSlots/vb/source.vb#1)]  
  
 <span data-ttu-id="91365-589">**Во втором примере**</span><span class="sxs-lookup"><span data-stu-id="91365-589">**Second Example**</span></span>  
  
 <span data-ttu-id="91365-590">Следующий пример демонстрирует использование именованную область данных для хранения информации о потоках.</span><span class="sxs-lookup"><span data-stu-id="91365-590">The following example demonstrates how to use a named data slot to store thread-specific information.</span></span>  
  
 [!code-cpp[System.Threading.Thread.NamedDataSlot#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Threading.Thread.NamedDataSlot/CPP/source.cpp#1)]
 [!code-csharp[System.Threading.Thread.NamedDataSlot#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Threading.Thread.NamedDataSlot/CS/source.cs#1)]
 [!code-vb[System.Threading.Thread.NamedDataSlot#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Threading.Thread.NamedDataSlot/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Interrupt">
      <MemberSignature Language="C#" Value="public void Interrupt ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Interrupt() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Thread.Interrupt" />
      <MemberSignature Language="VB.NET" Value="Public Sub Interrupt ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Interrupt();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Thread</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="91365-591">Прерывает работу потока, находящегося в состоянии <see langword="WaitSleepJoin" />.</span><span class="sxs-lookup"><span data-stu-id="91365-591">Interrupts a thread that is in the <see langword="WaitSleepJoin" /> thread state.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="91365-592">Если этот поток не заблокирован в настоящее время ожидания, спящего режима или состояние соединения, он будет прервана, когда он начнет блокироваться.</span><span class="sxs-lookup"><span data-stu-id="91365-592">If this thread is not currently blocked in a wait, sleep, or join state, it will be interrupted when it next begins to block.</span></span>  
  
 <span data-ttu-id="91365-593"><xref:System.Threading.ThreadInterruptedException> возникает в прерванного потока, но только поток блокируется.</span><span class="sxs-lookup"><span data-stu-id="91365-593"><xref:System.Threading.ThreadInterruptedException> is thrown in the interrupted thread, but not until the thread blocks.</span></span> <span data-ttu-id="91365-594">Если поток никогда не блокируется, исключение никогда не создается, и таким образом, поток может завершить не будучи прерванным.</span><span class="sxs-lookup"><span data-stu-id="91365-594">If the thread never blocks, the exception is never thrown, and thus the thread might complete without ever being interrupted.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="91365-595">В следующем примере кода показано поведение выполняющийся поток, когда он прерывается и впоследствии блокируется.</span><span class="sxs-lookup"><span data-stu-id="91365-595">The following code example shows the behavior of a running thread when it is interrupted and subsequently gets blocked.</span></span>  
  
 [!code-cpp[System.Threading.Thread.Interrupt#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Threading.Thread.Interrupt/CPP/source.cpp#1)]
 [!code-csharp[System.Threading.Thread.Interrupt#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Threading.Thread.Interrupt/CS/source.cs#1)]
 [!code-vb[System.Threading.Thread.Interrupt#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Threading.Thread.Interrupt/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Security.SecurityException"><span data-ttu-id="91365-596">Вызывающий поток не имеет соответствующего разрешения <see cref="T:System.Security.Permissions.SecurityPermission" />.</span><span class="sxs-lookup"><span data-stu-id="91365-596">The caller does not have the appropriate <see cref="T:System.Security.Permissions.SecurityPermission" />.</span></span></exception>
        <permission cref="T:System.Security.Permissions.SecurityPermission"><span data-ttu-id="91365-597">для дополнительных операций над потоками.</span><span class="sxs-lookup"><span data-stu-id="91365-597">for advanced operations on threads.</span></span> <span data-ttu-id="91365-598">Связанное перечисление: <see cref="F:System.Security.Permissions.SecurityPermissionFlag.ControlThread" />.</span><span class="sxs-lookup"><span data-stu-id="91365-598">Associated enumeration: <see cref="F:System.Security.Permissions.SecurityPermissionFlag.ControlThread" />.</span></span></permission>
        <altmember cref="T:System.Threading.ThreadState" />
      </Docs>
    </Member>
    <Member MemberName="IsAlive">
      <MemberSignature Language="C#" Value="public bool IsAlive { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsAlive" />
      <MemberSignature Language="DocId" Value="P:System.Threading.Thread.IsAlive" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsAlive As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsAlive { bool get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Thread</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="91365-599">Возвращает значение, показывающее статус выполнения текущего потока.</span><span class="sxs-lookup"><span data-stu-id="91365-599">Gets a value indicating the execution status of the current thread.</span></span></summary>
        <value>
          <span data-ttu-id="91365-600">Значение <see langword="true" />, если этот поток был запущен и не был завершен нормально, либо был прерван; в противном случае — значение <see langword="false" />.</span><span class="sxs-lookup"><span data-stu-id="91365-600"><see langword="true" /> if this thread has been started and has not terminated normally or aborted; otherwise, <see langword="false" />.</span></span></value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="IsBackground">
      <MemberSignature Language="C#" Value="public bool IsBackground { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsBackground" />
      <MemberSignature Language="DocId" Value="P:System.Threading.Thread.IsBackground" />
      <MemberSignature Language="VB.NET" Value="Public Property IsBackground As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsBackground { bool get(); void set(bool value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Thread</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="91365-601">Возвращает или задает значение, показывающее, является ли поток фоновым.</span><span class="sxs-lookup"><span data-stu-id="91365-601">Gets or sets a value indicating whether or not a thread is a background thread.</span></span></summary>
        <value>
          <span data-ttu-id="91365-602">Значение <see langword="true" />, если этот поток является или станет фоновым потоком; в противном случае — значение <see langword="false" />.</span><span class="sxs-lookup"><span data-stu-id="91365-602"><see langword="true" /> if this thread is or is to become a background thread; otherwise, <see langword="false" />.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="91365-603">Поток находится в фоновом потоке или основной поток.</span><span class="sxs-lookup"><span data-stu-id="91365-603">A thread is either a background thread or a foreground thread.</span></span> <span data-ttu-id="91365-604">Фоновые потоки идентичны основные потоки, за исключением того, что фоновые потоки не предотвращают завершение процесса.</span><span class="sxs-lookup"><span data-stu-id="91365-604">Background threads are identical to foreground threads, except that background threads do not prevent a process from terminating.</span></span> <span data-ttu-id="91365-605">Когда все основные потоки, принадлежащие процессу, завершились, общеязыковая среда выполнения завершает процесс.</span><span class="sxs-lookup"><span data-stu-id="91365-605">Once all foreground threads belonging to a process have terminated, the common language runtime ends the process.</span></span> <span data-ttu-id="91365-606">Все оставшиеся фоновые потоки останавливаются и не завершаются.</span><span class="sxs-lookup"><span data-stu-id="91365-606">Any remaining background threads are stopped and do not complete.</span></span>  
  
 <span data-ttu-id="91365-607">По умолчанию, перечисленных ниже потоков выполняются на переднем плане (то есть их <xref:System.Threading.Thread.IsBackground%2A> возвращает `false`):</span><span class="sxs-lookup"><span data-stu-id="91365-607">By default, the following threads execute in the foreground (that is, their <xref:System.Threading.Thread.IsBackground%2A> property returns `false`):</span></span>  
  
-   <span data-ttu-id="91365-608">Основной поток (или основного потока приложения).</span><span class="sxs-lookup"><span data-stu-id="91365-608">The primary thread (or main application thread).</span></span>  
  
-   <span data-ttu-id="91365-609">Все потоки, созданные путем вызова <xref:System.Threading.Thread> конструктора класса.</span><span class="sxs-lookup"><span data-stu-id="91365-609">All threads created by calling a <xref:System.Threading.Thread> class constructor.</span></span>  
  
 <span data-ttu-id="91365-610">По умолчанию, перечисленных ниже потоков выполняются в фоновом режиме (то есть их <xref:System.Threading.Thread.IsBackground%2A> возвращает `true`):</span><span class="sxs-lookup"><span data-stu-id="91365-610">By default, the following threads execute in the background  (that is, their <xref:System.Threading.Thread.IsBackground%2A> property returns `true`):</span></span>  
  
-   <span data-ttu-id="91365-611">Поток из пула потоков, которые являются пула рабочих потоков, которые поддерживаются средой выполнения.</span><span class="sxs-lookup"><span data-stu-id="91365-611">Thread pool threads, which are a pool of worker threads maintained by the runtime.</span></span> <span data-ttu-id="91365-612">Работа потоков пула и расписание можно настроить в потоках из пула потоков с помощью <xref:System.Threading.ThreadPool> класса.</span><span class="sxs-lookup"><span data-stu-id="91365-612">You can configure the thread pool and schedule work on thread pool threads by using the <xref:System.Threading.ThreadPool> class.</span></span>  
  
    > [!NOTE]
    >  <span data-ttu-id="91365-613">На основе задач асинхронных операций выполняются в потоках из пула потоков.</span><span class="sxs-lookup"><span data-stu-id="91365-613">Task-based asynchronous operations automatically execute on thread pool threads.</span></span>  
  
-   <span data-ttu-id="91365-614">Все потоки, которые входят в управляемую среду выполнения из неуправляемого кода.</span><span class="sxs-lookup"><span data-stu-id="91365-614">All threads that enter the managed execution environment from unmanaged code.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="91365-615">В следующем примере показана работа потоки переднего плана и фона.</span><span class="sxs-lookup"><span data-stu-id="91365-615">The following example contrasts the behavior of foreground and background threads.</span></span> <span data-ttu-id="91365-616">Он создает поток переднего плана и фонового потока.</span><span class="sxs-lookup"><span data-stu-id="91365-616">It creates a foreground thread and a background thread.</span></span> <span data-ttu-id="91365-617">Основной поток удерживает процесс до завершения его `for` цикл и прекращает работу.</span><span class="sxs-lookup"><span data-stu-id="91365-617">The foreground thread keeps the process running until completes its `for` loop and terminates.</span></span> <span data-ttu-id="91365-618">Тем не менее как показывает вывод примера, поскольку основной поток завершения выполнения, процесс завершается до завершения выполнения фонового потока.</span><span class="sxs-lookup"><span data-stu-id="91365-618">However, as the output from the example shows, because the foreground thread has finished execution, the process is terminated before the background thread has completed execution.</span></span>  
  
 [!code-cpp[System.Threading.Thread.IsBackground#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Threading.Thread.IsBackground/CPP/source.cpp#1)]
 [!code-csharp[System.Threading.Thread.IsBackground#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Threading.Thread.IsBackground/CS/source.cs#1)]
 [!code-vb[System.Threading.Thread.IsBackground#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Threading.Thread.IsBackground/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Threading.ThreadStateException"><span data-ttu-id="91365-619">Поток не работает.</span><span class="sxs-lookup"><span data-stu-id="91365-619">The thread is dead.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="IsThreadPoolThread">
      <MemberSignature Language="C#" Value="public bool IsThreadPoolThread { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsThreadPoolThread" />
      <MemberSignature Language="DocId" Value="P:System.Threading.Thread.IsThreadPoolThread" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsThreadPoolThread As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsThreadPoolThread { bool get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Thread</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="91365-620">Возвращает значение, показывающее, принадлежит ли поток к группе управляемых потоков.</span><span class="sxs-lookup"><span data-stu-id="91365-620">Gets a value indicating whether or not a thread belongs to the managed thread pool.</span></span></summary>
        <value>
          <span data-ttu-id="91365-621">Значение <see langword="true" />, если этот поток принадлежит группе управляемых потоков; в противном случае — значение <see langword="false" />.</span><span class="sxs-lookup"><span data-stu-id="91365-621"><see langword="true" /> if this thread belongs to the managed thread pool; otherwise, <see langword="false" />.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="91365-622">Дополнительные сведения см. [управляемых потоков пула](~/docs/standard/threading/the-managed-thread-pool.md).</span><span class="sxs-lookup"><span data-stu-id="91365-622">For more information see [The Managed Thread Pool](~/docs/standard/threading/the-managed-thread-pool.md).</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="91365-623">В следующем примере кода показано, как определить, является ли поток из пула потоков.</span><span class="sxs-lookup"><span data-stu-id="91365-623">The following code example shows how to determine whether a thread is from the thread pool.</span></span>  
  
 [!code-cpp[System.Threading.Thread.IsThreadPoolThread#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Threading.Thread.IsThreadPoolThread/CPP/source.cpp#1)]
 [!code-csharp[System.Threading.Thread.IsThreadPoolThread#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Threading.Thread.IsThreadPoolThread/CS/source.cs#1)]
 [!code-vb[System.Threading.Thread.IsThreadPoolThread#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Threading.Thread.IsThreadPoolThread/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Threading.ThreadPool" />
      </Docs>
    </Member>
    <MemberGroup MemberName="Join">
      <AssemblyInfo>
        <AssemblyName>System.Threading.Thread</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="91365-624">Блокирует вызывающий поток до завершения потока, представленного этим экземпляром.</span><span class="sxs-lookup"><span data-stu-id="91365-624">Blocks the calling thread until the thread represented by this instance terminates.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Join">
      <MemberSignature Language="C#" Value="public void Join ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Join() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Thread.Join" />
      <MemberSignature Language="VB.NET" Value="Public Sub Join ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Join();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Thread</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="91365-625">Блокирует вызывающий поток до завершения потока, представленного экземпляром, продолжая отправлять стандартные сообщения COM и <see langword="SendMessage" />.</span><span class="sxs-lookup"><span data-stu-id="91365-625">Blocks the calling thread until the thread represented by this instance terminates, while continuing to perform standard COM and <see langword="SendMessage" /> pumping.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="91365-626"><xref:System.Threading.Thread.Join%2A> метод синхронизации, который блокирует вызывающий поток (поток, вызывающий метод) до поток которого <xref:System.Threading.Thread.Join%2A> вызывается метод завершения.</span><span class="sxs-lookup"><span data-stu-id="91365-626"><xref:System.Threading.Thread.Join%2A> is a synchronization method that blocks the calling thread (that is, the thread that calls the method) until the thread whose <xref:System.Threading.Thread.Join%2A> method is called has completed.</span></span> <span data-ttu-id="91365-627">Используйте этот метод, чтобы убедиться, что поток завершен.</span><span class="sxs-lookup"><span data-stu-id="91365-627">Use this method to ensure that a thread has been terminated.</span></span> <span data-ttu-id="91365-628">Вызывающий объект будет выполняться бесконечно, если поток не завершился.</span><span class="sxs-lookup"><span data-stu-id="91365-628">The caller will block indefinitely if the thread does not terminate.</span></span> <span data-ttu-id="91365-629">В следующем примере `Thread1` поток вызывает метод <xref:System.Threading.Thread.Join> метод `Thread2`, чего `Thread1` блок до `Thread2` завершена.</span><span class="sxs-lookup"><span data-stu-id="91365-629">In the following example, the `Thread1` thread calls the <xref:System.Threading.Thread.Join> method of `Thread2`, which causes `Thread1` to block until `Thread2` has completed.</span></span>  
  
 [!code-csharp[System.Threading.Thread.Join#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.threading.thread.join/cs/join1a.cs#1)]
 [!code-vb[System.Threading.Thread.Join#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.threading.thread.join/vb/join1a.vb#1)]  
  
 <span data-ttu-id="91365-630">Если поток завершился уже при <xref:System.Threading.Thread.Join%2A> вызывается метод возвращается немедленно.</span><span class="sxs-lookup"><span data-stu-id="91365-630">If the thread has already terminated when <xref:System.Threading.Thread.Join%2A> is called, the method returns immediately.</span></span>  
  
> [!WARNING]
>  <span data-ttu-id="91365-631">Никогда не должен вызывать <xref:System.Threading.Thread.Join%2A> метод <xref:System.Threading.Thread> , представляющий текущий поток из текущего потока.</span><span class="sxs-lookup"><span data-stu-id="91365-631">You should never call the <xref:System.Threading.Thread.Join%2A> method of the <xref:System.Threading.Thread> object that represents the current thread from the current thread.</span></span> <span data-ttu-id="91365-632">В результате приложение зависает, так как текущий поток ждет от самой себя неопределенно долгое время,</span><span class="sxs-lookup"><span data-stu-id="91365-632">This causes your app to hang because the current thread waits upon itself indefinitely,</span></span>  
  
 <span data-ttu-id="91365-633">Этот метод изменяет состояние вызывающего потока для включения <xref:System.Threading.ThreadState.WaitSleepJoin?displayProperty=nameWithType>.</span><span class="sxs-lookup"><span data-stu-id="91365-633">This method changes the state of the calling thread to include <xref:System.Threading.ThreadState.WaitSleepJoin?displayProperty=nameWithType>.</span></span> <span data-ttu-id="91365-634">Невозможно вызвать `Join` в потоке, который находится в <xref:System.Threading.ThreadState.Unstarted?displayProperty=nameWithType> состояние.</span><span class="sxs-lookup"><span data-stu-id="91365-634">You cannot invoke `Join` on a thread that is in the <xref:System.Threading.ThreadState.Unstarted?displayProperty=nameWithType> state.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Threading.ThreadStateException"><span data-ttu-id="91365-635">Вызывающая сторона пыталась присоединиться к потоку, который находится в состоянии <see cref="F:System.Threading.ThreadState.Unstarted" />.</span><span class="sxs-lookup"><span data-stu-id="91365-635">The caller attempted to join a thread that is in the <see cref="F:System.Threading.ThreadState.Unstarted" /> state.</span></span></exception>
        <exception cref="T:System.Threading.ThreadInterruptedException"><span data-ttu-id="91365-636">Выполнение потока прервано во время ожидания.</span><span class="sxs-lookup"><span data-stu-id="91365-636">The thread is interrupted while waiting.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="Join">
      <MemberSignature Language="C#" Value="public bool Join (int millisecondsTimeout);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool Join(int32 millisecondsTimeout) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Thread.Join(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Function Join (millisecondsTimeout As Integer) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool Join(int millisecondsTimeout);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Thread</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="millisecondsTimeout" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="millisecondsTimeout"><span data-ttu-id="91365-637">Количество миллисекунд ожидания завершения потока.</span><span class="sxs-lookup"><span data-stu-id="91365-637">The number of milliseconds to wait for the thread to terminate.</span></span></param>
        <summary><span data-ttu-id="91365-638">Блокирует вызывающий поток до завершения потока, представленного экземпляром, или истечения указанного времени, продолжая отправлять стандартные сообщения COM и SendMessage.</span><span class="sxs-lookup"><span data-stu-id="91365-638">Blocks the calling thread until the thread represented by this instance terminates or the specified time elapses, while continuing to perform standard COM and SendMessage pumping.</span></span></summary>
        <returns>
          <span data-ttu-id="91365-639">Значение <see langword="true" />, если поток завершился; значение <see langword="false" />, если поток не завершился по истечении количества времени, заданного параметром <paramref name="millisecondsTimeout" />.</span><span class="sxs-lookup"><span data-stu-id="91365-639"><see langword="true" /> if the thread has terminated; <see langword="false" /> if the thread has not terminated after the amount of time specified by the <paramref name="millisecondsTimeout" /> parameter has elapsed.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="91365-640"><xref:System.Threading.Thread.Join%28System.Int32%29> метод синхронизации, который блокирует вызывающий поток (поток, вызывающий метод) до любой поток которого <xref:System.Threading.Thread.Join%2A> вызывается метод завершения или истечения заданного интервала времени ожидания.</span><span class="sxs-lookup"><span data-stu-id="91365-640"><xref:System.Threading.Thread.Join%28System.Int32%29> is a synchronization method that blocks the calling thread (that is, the thread that calls the method) until either the thread whose <xref:System.Threading.Thread.Join%2A> method is called has completed or the time-out interval has elapsed.</span></span> <span data-ttu-id="91365-641">В следующем примере `Thread1` поток вызывает метод <xref:System.Threading.Thread.Join> метод `Thread2`, чего `Thread1` тех пор, пока блокировка `Thread2` завершения или по истечении 2 секунды.</span><span class="sxs-lookup"><span data-stu-id="91365-641">In the following example, the `Thread1` thread calls the <xref:System.Threading.Thread.Join> method of `Thread2`, which causes `Thread1` to block either until `Thread2` has completed or 2 seconds have elapsed.</span></span>  
  
 [!code-csharp[System.Threading.Thread.Join#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.threading.thread.join/cs/join1b.cs#2)]
 [!code-vb[System.Threading.Thread.Join#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.threading.thread.join/vb/join1b.vb#2)]  
  
 <span data-ttu-id="91365-642">Если <xref:System.Threading.Timeout.Infinite?displayProperty=nameWithType> указан для `millisecondsTimeout` параметра, этот метод работает идентично <xref:System.Threading.Thread.Join> перегрузка метода, за исключением возвращаемого значения.</span><span class="sxs-lookup"><span data-stu-id="91365-642">If <xref:System.Threading.Timeout.Infinite?displayProperty=nameWithType> is specified for the `millisecondsTimeout` parameter, this method behaves identically to the <xref:System.Threading.Thread.Join> method overload, except for the return value.</span></span>  
  
 <span data-ttu-id="91365-643">Если поток завершился уже при <xref:System.Threading.Thread.Join%2A> вызывается метод возвращается немедленно.</span><span class="sxs-lookup"><span data-stu-id="91365-643">If the thread has already terminated when <xref:System.Threading.Thread.Join%2A> is called, the method returns immediately.</span></span>  
  
 <span data-ttu-id="91365-644">Этот метод изменяет состояние вызывающего потока для включения <xref:System.Threading.ThreadState.WaitSleepJoin?displayProperty=nameWithType>.</span><span class="sxs-lookup"><span data-stu-id="91365-644">This method changes the state of the calling thread to include <xref:System.Threading.ThreadState.WaitSleepJoin?displayProperty=nameWithType>.</span></span> <span data-ttu-id="91365-645">Невозможно вызвать `Join` в потоке, который находится в <xref:System.Threading.ThreadState.Unstarted?displayProperty=nameWithType> состояние.</span><span class="sxs-lookup"><span data-stu-id="91365-645">You cannot invoke `Join` on a thread that is in the <xref:System.Threading.ThreadState.Unstarted?displayProperty=nameWithType> state.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException"><span data-ttu-id="91365-646">Значение <paramref name="millisecondsTimeout" /> является отрицательным и не равно <see cref="F:System.Threading.Timeout.Infinite" /> (в миллисекундах).</span><span class="sxs-lookup"><span data-stu-id="91365-646">The value of <paramref name="millisecondsTimeout" /> is negative and is not equal to <see cref="F:System.Threading.Timeout.Infinite" /> in milliseconds.</span></span></exception>
        <exception cref="T:System.Threading.ThreadStateException"><span data-ttu-id="91365-647">Поток не запущен.</span><span class="sxs-lookup"><span data-stu-id="91365-647">The thread has not been started.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="Join">
      <MemberSignature Language="C#" Value="public bool Join (TimeSpan timeout);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool Join(valuetype System.TimeSpan timeout) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Thread.Join(System.TimeSpan)" />
      <MemberSignature Language="VB.NET" Value="Public Function Join (timeout As TimeSpan) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool Join(TimeSpan timeout);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Thread</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="timeout" Type="System.TimeSpan" />
      </Parameters>
      <Docs>
        <param name="timeout"><span data-ttu-id="91365-648">Объект <see cref="T:System.TimeSpan" />, в качестве значения которого задано время ожидания завершения процесса.</span><span class="sxs-lookup"><span data-stu-id="91365-648">A <see cref="T:System.TimeSpan" /> set to the amount of time to wait for the thread to terminate.</span></span></param>
        <summary><span data-ttu-id="91365-649">Блокирует вызывающий поток до завершения потока, представленного экземпляром, или истечения указанного времени, продолжая отправлять стандартные сообщения COM и SendMessage.</span><span class="sxs-lookup"><span data-stu-id="91365-649">Blocks the calling thread until the thread represented by this instance terminates or the specified time elapses, while continuing to perform standard COM and SendMessage pumping.</span></span></summary>
        <returns>
          <span data-ttu-id="91365-650">Значение <see langword="true" />, если поток завершился; <see langword="false" />, если поток не завершился по истечении количества времени, заданного параметром <paramref name="timeout" />.</span><span class="sxs-lookup"><span data-stu-id="91365-650"><see langword="true" /> if the thread terminated; <see langword="false" /> if the thread has not terminated after the amount of time specified by the <paramref name="timeout" /> parameter has elapsed.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="91365-651"><xref:System.Threading.Thread.Join%28System.TimeSpan%29> метод синхронизации, который блокирует вызывающий поток (поток, вызывающий метод) до любой поток которого <xref:System.Threading.Thread.Join%2A> вызывается метод завершения или истечения заданного интервала времени ожидания.</span><span class="sxs-lookup"><span data-stu-id="91365-651"><xref:System.Threading.Thread.Join%28System.TimeSpan%29> is a synchronization method that blocks the calling thread (that is, the thread that calls the method) until either the thread whose <xref:System.Threading.Thread.Join%2A> method is called has completed or the time-out interval has elapsed.</span></span> <span data-ttu-id="91365-652">В следующем примере `Thread1` поток вызывает метод <xref:System.Threading.Thread.Join> метод `Thread2`, чего `Thread1` тех пор, пока блокировка `Thread2` завершения или по истечении 2 секунды.</span><span class="sxs-lookup"><span data-stu-id="91365-652">In the following example, the `Thread1` thread calls the <xref:System.Threading.Thread.Join> method of `Thread2`, which causes `Thread1` to block either until `Thread2` has completed or 2 seconds have elapsed.</span></span>  
  
 [!code-csharp[System.Threading.Thread.Join#3](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.threading.thread.join/cs/join1c.cs#3)]
 [!code-vb[System.Threading.Thread.Join#3](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.threading.thread.join/vb/join1c.vb#3)]  
  
 <span data-ttu-id="91365-653">Если <xref:System.Threading.Timeout.Infinite?displayProperty=nameWithType> указан для `timeout`, этот метод работает идентично <xref:System.Threading.Thread.Join> перегрузка метода, за исключением возвращаемого значения.</span><span class="sxs-lookup"><span data-stu-id="91365-653">If <xref:System.Threading.Timeout.Infinite?displayProperty=nameWithType> is specified for `timeout`, this method behaves identically to the <xref:System.Threading.Thread.Join> method overload, except for the return value.</span></span>  
  
 <span data-ttu-id="91365-654">Если поток завершился уже при <xref:System.Threading.Thread.Join%2A> вызывается метод возвращается немедленно.</span><span class="sxs-lookup"><span data-stu-id="91365-654">If the thread has already terminated when <xref:System.Threading.Thread.Join%2A> is called, the method returns immediately.</span></span>  
  
 <span data-ttu-id="91365-655">Этот метод изменяет состояние текущего потока для включения <xref:System.Threading.ThreadState.WaitSleepJoin>.</span><span class="sxs-lookup"><span data-stu-id="91365-655">This method changes the state of the current thread to include <xref:System.Threading.ThreadState.WaitSleepJoin>.</span></span> <span data-ttu-id="91365-656">Невозможно вызвать `Join` в потоке, который находится в <xref:System.Threading.ThreadState.Unstarted?displayProperty=nameWithType> состояние.</span><span class="sxs-lookup"><span data-stu-id="91365-656">You cannot invoke `Join` on a thread that is in the <xref:System.Threading.ThreadState.Unstarted?displayProperty=nameWithType> state.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="91365-657">В следующем примере кода демонстрируется использование `TimeSpan` значение с `Join` метод.</span><span class="sxs-lookup"><span data-stu-id="91365-657">The following code example demonstrates how to use a `TimeSpan` value with the `Join` method.</span></span>  
  
 [!code-cpp[System.Threading.Thread.Timespan#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Threading.Thread.Timespan/CPP/source.cpp#1)]
 [!code-csharp[System.Threading.Thread.Timespan#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Threading.Thread.Timespan/CS/source.cs#1)]
 [!code-vb[System.Threading.Thread.Timespan#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Threading.Thread.Timespan/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException"><span data-ttu-id="91365-658">Значение <paramref name="timeout" /> является отрицательным и не равно <see cref="F:System.Threading.Timeout.Infinite" /> (в миллисекундах) или больше <see cref="F:System.Int32.MaxValue" /> миллисекунд.</span><span class="sxs-lookup"><span data-stu-id="91365-658">The value of <paramref name="timeout" /> is negative and is not equal to <see cref="F:System.Threading.Timeout.Infinite" /> in milliseconds, or is greater than <see cref="F:System.Int32.MaxValue" /> milliseconds.</span></span></exception>
        <exception cref="T:System.Threading.ThreadStateException"><span data-ttu-id="91365-659">Вызывающая сторона пыталась присоединиться к потоку, который находится в состоянии <see cref="F:System.Threading.ThreadState.Unstarted" />.</span><span class="sxs-lookup"><span data-stu-id="91365-659">The caller attempted to join a thread that is in the <see cref="F:System.Threading.ThreadState.Unstarted" /> state.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="ManagedThreadId">
      <MemberSignature Language="C#" Value="public int ManagedThreadId { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 ManagedThreadId" />
      <MemberSignature Language="DocId" Value="P:System.Threading.Thread.ManagedThreadId" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property ManagedThreadId As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property int ManagedThreadId { int get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Thread</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>get: System.Runtime.ConstrainedExecution.ReliabilityContract(System.Runtime.ConstrainedExecution.Consistency.WillNotCorruptState, System.Runtime.ConstrainedExecution.Cer.Success)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="91365-660">Возвращает уникальный идентификатор текущего управляемого потока.</span><span class="sxs-lookup"><span data-stu-id="91365-660">Gets a unique identifier for the current managed thread.</span></span></summary>
        <value><span data-ttu-id="91365-661">Целочисленное значение, представляющее уникальный идентификатор для этого управляемого потока.</span><span class="sxs-lookup"><span data-stu-id="91365-661">An integer that represents a unique identifier for this managed thread.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="91365-662">Поток <xref:System.Threading.Thread.ManagedThreadId%2A> значение свойства служит для уникальной идентификации этого потока, внутри своего процесса.</span><span class="sxs-lookup"><span data-stu-id="91365-662">A thread's <xref:System.Threading.Thread.ManagedThreadId%2A> property value serves to uniquely identify that thread within its process.</span></span>  
  
 <span data-ttu-id="91365-663">Значение <xref:System.Threading.Thread.ManagedThreadId%2A> свойства не изменяется со временем, даже если неуправляемый код, на котором размещается общеязыковая среда выполнения реализует поток как волокно.</span><span class="sxs-lookup"><span data-stu-id="91365-663">The value of the <xref:System.Threading.Thread.ManagedThreadId%2A> property does not vary over time, even if unmanaged code that hosts the common language runtime implements the thread as a fiber.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="MemoryBarrier">
      <MemberSignature Language="C#" Value="public static void MemoryBarrier ();" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void MemoryBarrier() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Thread.MemoryBarrier" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub MemoryBarrier ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void MemoryBarrier();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Thread</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="91365-664">Синхронизирует доступ к памяти следующим образом: процессор, выполняющий текущий поток, не способен упорядочить инструкции так, чтобы обращения к памяти до вызова метода <see cref="M:System.Threading.Thread.MemoryBarrier" /> выполнялись после обращений к памяти, следующих за вызовом метода <see cref="M:System.Threading.Thread.MemoryBarrier" />.</span><span class="sxs-lookup"><span data-stu-id="91365-664">Synchronizes memory access as follows: The processor executing the current thread cannot reorder instructions in such a way that memory accesses prior to the call to <see cref="M:System.Threading.Thread.MemoryBarrier" /> execute after memory accesses that follow the call to <see cref="M:System.Threading.Thread.MemoryBarrier" />.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="91365-665"><xref:System.Threading.Thread.MemoryBarrier%2A> требуется только на мультипроцессорных системах со слабой организацией памяти (например, система, использующая несколько процессоров Intel Itanium).</span><span class="sxs-lookup"><span data-stu-id="91365-665"><xref:System.Threading.Thread.MemoryBarrier%2A> is required only on multiprocessor systems with weak memory ordering (for example, a system employing multiple Intel Itanium processors).</span></span>  
  
 <span data-ttu-id="91365-666">Для большинства целей, C# `lock` оператор, Visual Basic `SyncLock` инструкции или <xref:System.Threading.Monitor> класса предоставляют более простые способы синхронизации данных.</span><span class="sxs-lookup"><span data-stu-id="91365-666">For most purposes, the C# `lock` statement, the Visual Basic `SyncLock` statement, or the <xref:System.Threading.Monitor> class provide easier ways to synchronize data.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Name">
      <MemberSignature Language="C#" Value="public string Name { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string Name" />
      <MemberSignature Language="DocId" Value="P:System.Threading.Thread.Name" />
      <MemberSignature Language="VB.NET" Value="Public Property Name As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ Name { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Thread</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="91365-667">Получает или задает имя потока.</span><span class="sxs-lookup"><span data-stu-id="91365-667">Gets or sets the name of the thread.</span></span></summary>
        <value><span data-ttu-id="91365-668">Строка, содержащая имя потока или <see langword="null" />, если имя не задано.</span><span class="sxs-lookup"><span data-stu-id="91365-668">A string containing the name of the thread, or <see langword="null" /> if no name was set.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="91365-669">Это свойство доступно для записи — после.</span><span class="sxs-lookup"><span data-stu-id="91365-669">This property is write-once.</span></span> <span data-ttu-id="91365-670">Так как значение по умолчанию для потока <xref:System.Threading.Thread.Name%2A> свойство `null`, можно определить, является ли имя уже явно присвоен в поток, сравнивая его с `null`.</span><span class="sxs-lookup"><span data-stu-id="91365-670">Because the default value of a thread's <xref:System.Threading.Thread.Name%2A> property is `null`, you can determine whether a name has already been explicitly assigned to the thread by comparing it with `null`.</span></span>  
  
 <span data-ttu-id="91365-671">Строка, присвоенная <xref:System.Threading.Thread.Name%2A> свойство может содержать любой символ Юникода.</span><span class="sxs-lookup"><span data-stu-id="91365-671">The string assigned to the <xref:System.Threading.Thread.Name%2A> property can include any Unicode character.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="91365-672">В следующем примере показано, как имя потока.</span><span class="sxs-lookup"><span data-stu-id="91365-672">The following example shows how to name a thread.</span></span>  
  
 [!code-cpp[System.Threading.Thread.Name#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Threading.Thread.Name/CPP/source.cpp#1)]
 [!code-csharp[System.Threading.Thread.Name#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Threading.Thread.Name/CS/source.cs#1)]
 [!code-vb[System.Threading.Thread.Name#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Threading.Thread.Name/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="91365-673">Запрошена операция задания, но свойство <see langword="Name" /> уже задано.</span><span class="sxs-lookup"><span data-stu-id="91365-673">A set operation was requested, but the <see langword="Name" /> property has already been set.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="Priority">
      <MemberSignature Language="C#" Value="public System.Threading.ThreadPriority Priority { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Threading.ThreadPriority Priority" />
      <MemberSignature Language="DocId" Value="P:System.Threading.Thread.Priority" />
      <MemberSignature Language="VB.NET" Value="Public Property Priority As ThreadPriority" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Threading::ThreadPriority Priority { System::Threading::ThreadPriority get(); void set(System::Threading::ThreadPriority value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Thread</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>get: System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>set: System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Threading.ThreadPriority</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="91365-674">Возвращает или задает значение, указывающее на планируемый приоритет потока.</span><span class="sxs-lookup"><span data-stu-id="91365-674">Gets or sets a value indicating the scheduling priority of a thread.</span></span></summary>
        <value><span data-ttu-id="91365-675">Одно из значений перечисления <see cref="T:System.Threading.ThreadPriority" />.</span><span class="sxs-lookup"><span data-stu-id="91365-675">One of the <see cref="T:System.Threading.ThreadPriority" /> values.</span></span> <span data-ttu-id="91365-676">Значение по умолчанию — <see cref="F:System.Threading.ThreadPriority.Normal" />.</span><span class="sxs-lookup"><span data-stu-id="91365-676">The default value is <see cref="F:System.Threading.ThreadPriority.Normal" />.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="91365-677">Поток можно назначить один из следующих приоритет <xref:System.Threading.ThreadPriority> значения:</span><span class="sxs-lookup"><span data-stu-id="91365-677">A thread can be assigned any one of the following priority <xref:System.Threading.ThreadPriority> values:</span></span>  
  
-   `Highest`  
  
-   `AboveNormal`  
  
-   `Normal`  
  
-   `BelowNormal`  
  
-   `Lowest`  
  
 <span data-ttu-id="91365-678">Операционные системы не требуются для предоставления приоритета потока.</span><span class="sxs-lookup"><span data-stu-id="91365-678">Operating systems are not required to honor the priority of a thread.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="91365-679">В следующем примере показано, в результате изменения приоритета потока.</span><span class="sxs-lookup"><span data-stu-id="91365-679">The following example shows the result of changing the priority of a thread.</span></span> <span data-ttu-id="91365-680">Создаются три потока, назначается приоритет одного потока <xref:System.Threading.ThreadPriority.BelowNormal?displayProperty=nameWithType>, и выберите значение приоритета второго <xref:System.Threading.ThreadPriority.AboveNormal?displayProperty=nameWithType>.</span><span class="sxs-lookup"><span data-stu-id="91365-680">Three threads are created, the priority of one thread is set to <xref:System.Threading.ThreadPriority.BelowNormal?displayProperty=nameWithType>, and the priority of a second is set to <xref:System.Threading.ThreadPriority.AboveNormal?displayProperty=nameWithType>.</span></span> <span data-ttu-id="91365-681">Каждый поток увеличивает значение переменной в `while` цикла и выполняется в течение заданного времени.</span><span class="sxs-lookup"><span data-stu-id="91365-681">Each thread increments a variable in a `while` loop and runs for a set time.</span></span>  
  
 [!code-csharp[System.Threading.ThreadPriority#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/System.Threading.ThreadPriority/cs/Example1.cs#1)]
 [!code-vb[System.Threading.ThreadPriority#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/System.Threading.ThreadPriority/vb/Example1.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Threading.ThreadStateException"><span data-ttu-id="91365-682">Поток достиг конечного состояния, например <see cref="F:System.Threading.ThreadState.Aborted" />.</span><span class="sxs-lookup"><span data-stu-id="91365-682">The thread has reached a final state, such as <see cref="F:System.Threading.ThreadState.Aborted" />.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="91365-683">Задаваемое значение не является правильным значением <see cref="T:System.Threading.ThreadPriority" />.</span><span class="sxs-lookup"><span data-stu-id="91365-683">The value specified for a set operation is not a valid <see cref="T:System.Threading.ThreadPriority" /> value.</span></span></exception>
        <altmember cref="T:System.Threading.ThreadPriority" />
      </Docs>
    </Member>
    <Member MemberName="ResetAbort">
      <MemberSignature Language="C#" Value="public static void ResetAbort ();" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void ResetAbort() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Thread.ResetAbort" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub ResetAbort ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void ResetAbort();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Thread</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="91365-684">Отменяет метод <see cref="M:System.Threading.Thread.Abort(System.Object)" />, запрошенный для текущего потока.</span><span class="sxs-lookup"><span data-stu-id="91365-684">Cancels an <see cref="M:System.Threading.Thread.Abort(System.Object)" /> requested for the current thread.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="91365-685">Этот метод может вызываться только кодом с соответствующими разрешениями.</span><span class="sxs-lookup"><span data-stu-id="91365-685">This method can only be called by code with the proper permissions.</span></span>  
  
 <span data-ttu-id="91365-686">Когда выполняется вызов для `Abort` завершить поток, система создает <xref:System.Threading.ThreadAbortException>.</span><span class="sxs-lookup"><span data-stu-id="91365-686">When a call is made to `Abort` to terminate a thread, the system throws a <xref:System.Threading.ThreadAbortException>.</span></span> <span data-ttu-id="91365-687">`ThreadAbortException` — специальное исключение, которое может быть зафиксировано кодом приложения, но повторно в конце блока catch, если `ResetAbort` вызывается.</span><span class="sxs-lookup"><span data-stu-id="91365-687">`ThreadAbortException` is a special exception that can be caught by application code, but is rethrown at the end of the catch block unless `ResetAbort` is called.</span></span> <span data-ttu-id="91365-688">`ResetAbort` Отменяет запрос на аварийное завершение и предотвращает `ThreadAbortException` от завершения потока.</span><span class="sxs-lookup"><span data-stu-id="91365-688">`ResetAbort` cancels the request to abort, and prevents the `ThreadAbortException` from terminating the thread.</span></span>  
  
 <span data-ttu-id="91365-689">В разделе <xref:System.Threading.ThreadAbortException> пример, демонстрирующий вызов `ResetAbort` метод.</span><span class="sxs-lookup"><span data-stu-id="91365-689">See <xref:System.Threading.ThreadAbortException> for an example that demonstrates calling the `ResetAbort` method.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.PlatformNotSupportedException"><span data-ttu-id="91365-690">Только в .NET Core: этот элемент не поддерживается.</span><span class="sxs-lookup"><span data-stu-id="91365-690">.NET Core only: This member is not supported.</span></span></exception>
        <exception cref="T:System.Threading.ThreadStateException">
          <span data-ttu-id="91365-691"><see langword="Abort" /> не был вызван для текущего потока.</span><span class="sxs-lookup"><span data-stu-id="91365-691"><see langword="Abort" /> was not invoked on the current thread.</span></span></exception>
        <exception cref="T:System.Security.SecurityException"><span data-ttu-id="91365-692">Вызывающая сторона не имеет требуемого разрешения безопасности для текущего потока.</span><span class="sxs-lookup"><span data-stu-id="91365-692">The caller does not have the required security permission for the current thread.</span></span></exception>
        <permission cref="T:System.Security.Permissions.SecurityPermission"><span data-ttu-id="91365-693">для дополнительных операций над потоками.</span><span class="sxs-lookup"><span data-stu-id="91365-693">for advanced operations on threads.</span></span> <span data-ttu-id="91365-694">Связанное перечисление: <see cref="F:System.Security.Permissions.SecurityPermissionFlag.ControlThread" />.</span><span class="sxs-lookup"><span data-stu-id="91365-694">Associated enumeration: <see cref="F:System.Security.Permissions.SecurityPermissionFlag.ControlThread" />.</span></span></permission>
      </Docs>
    </Member>
    <Member MemberName="Resume">
      <MemberSignature Language="C#" Value="public void Resume ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Resume() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Thread.Resume" />
      <MemberSignature Language="VB.NET" Value="Public Sub Resume ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Resume();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Thread</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Obsolete("Thread.Resume has been deprecated.  Please use other classes in System.Threading, such as Monitor, Mutex, Event, and Semaphore, to synchronize Threads or protect resources.  http://go.microsoft.com/fwlink/?linkid=14202", false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="91365-695">Возобновляет приостановленную работу потока.</span><span class="sxs-lookup"><span data-stu-id="91365-695">Resumes a thread that has been suspended.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
> [!CAUTION]
>  <span data-ttu-id="91365-696">Не используйте <xref:System.Threading.Thread.Suspend%2A> и <xref:System.Threading.Thread.Resume%2A> методы для синхронизации действий потоков.</span><span class="sxs-lookup"><span data-stu-id="91365-696">Do not use the <xref:System.Threading.Thread.Suspend%2A> and <xref:System.Threading.Thread.Resume%2A> methods to synchronize the activities of threads.</span></span> <span data-ttu-id="91365-697">У вас нет возможности узнать, какой код поток выполняется в том случае, когда он приостановлен.</span><span class="sxs-lookup"><span data-stu-id="91365-697">You have no way of knowing what code a thread is executing when you suspend it.</span></span> <span data-ttu-id="91365-698">Если поток приостановлен во время удержания блокировок во время оценки разрешений безопасности, другие потоки в <xref:System.AppDomain> может быть заблокирован.</span><span class="sxs-lookup"><span data-stu-id="91365-698">If you suspend a thread while it holds locks during a security permission evaluation, other threads in the <xref:System.AppDomain> might be blocked.</span></span> <span data-ttu-id="91365-699">Если приостановить поток при выполнении конструктора класса, другие потоки в <xref:System.AppDomain> , попытка использовать, что класс заблокированы.</span><span class="sxs-lookup"><span data-stu-id="91365-699">If you suspend a thread while it is executing a class constructor, other threads in the <xref:System.AppDomain> that attempt to use that class are blocked.</span></span> <span data-ttu-id="91365-700">Очень легко может вызвать взаимоблокировку.</span><span class="sxs-lookup"><span data-stu-id="91365-700">Deadlocks can occur very easily.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.PlatformNotSupportedException"><span data-ttu-id="91365-701">Только в .NET Core: этот элемент не поддерживается.</span><span class="sxs-lookup"><span data-stu-id="91365-701">.NET Core only: This member is not supported.</span></span></exception>
        <exception cref="T:System.Threading.ThreadStateException"><span data-ttu-id="91365-702">Поток не был запущен, бездействует или не находится в приостановленном состоянии.</span><span class="sxs-lookup"><span data-stu-id="91365-702">The thread has not been started, is dead, or is not in the suspended state.</span></span></exception>
        <exception cref="T:System.Security.SecurityException"><span data-ttu-id="91365-703">Вызывающий поток не имеет соответствующего разрешения <see cref="T:System.Security.Permissions.SecurityPermission" />.</span><span class="sxs-lookup"><span data-stu-id="91365-703">The caller does not have the appropriate <see cref="T:System.Security.Permissions.SecurityPermission" />.</span></span></exception>
        <permission cref="T:System.Security.Permissions.SecurityPermission"><span data-ttu-id="91365-704">для дополнительных операций над потоками.</span><span class="sxs-lookup"><span data-stu-id="91365-704">for advanced operations on threads.</span></span> <span data-ttu-id="91365-705">Связанное перечисление: <see cref="F:System.Security.Permissions.SecurityPermissionFlag.ControlThread" /></span><span class="sxs-lookup"><span data-stu-id="91365-705">Associated enumeration: <see cref="F:System.Security.Permissions.SecurityPermissionFlag.ControlThread" /></span></span></permission>
      </Docs>
    </Member>
    <Member MemberName="SetApartmentState">
      <MemberSignature Language="C#" Value="public void SetApartmentState (System.Threading.ApartmentState state);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void SetApartmentState(valuetype System.Threading.ApartmentState state) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Thread.SetApartmentState(System.Threading.ApartmentState)" />
      <MemberSignature Language="VB.NET" Value="Public Sub SetApartmentState (state As ApartmentState)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void SetApartmentState(System::Threading::ApartmentState state);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Thread</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="state" Type="System.Threading.ApartmentState" />
      </Parameters>
      <Docs>
        <param name="state"><span data-ttu-id="91365-706">Новая модель "apartment".</span><span class="sxs-lookup"><span data-stu-id="91365-706">The new apartment state.</span></span></param>
        <summary><span data-ttu-id="91365-707">Задает модель "apartment" для потока до его запуска.</span><span class="sxs-lookup"><span data-stu-id="91365-707">Sets the apartment state of a thread before it is started.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="91365-708">Новые потоки инициализируются как <xref:System.Threading.ApartmentState.MTA?displayProperty=nameWithType> если их состояние подразделения не задано до их запуска.</span><span class="sxs-lookup"><span data-stu-id="91365-708">New threads are initialized as <xref:System.Threading.ApartmentState.MTA?displayProperty=nameWithType> if their apartment state has not been set before they are started.</span></span> <span data-ttu-id="91365-709">Необходимо задать состояние подразделения, до начала потока.</span><span class="sxs-lookup"><span data-stu-id="91365-709">Apartment state must be set before a thread is started.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="91365-710">Основной поток приложения инициализируется <xref:System.Threading.ApartmentState.MTA?displayProperty=nameWithType> по умолчанию.</span><span class="sxs-lookup"><span data-stu-id="91365-710">The main application thread is initialized to <xref:System.Threading.ApartmentState.MTA?displayProperty=nameWithType> by default.</span></span> <span data-ttu-id="91365-711">Единственный способ задать состояние подразделения потока основного приложения для <xref:System.Threading.ApartmentState.STA?displayProperty=nameWithType> заключается в применении <xref:System.STAThreadAttribute> атрибут к методу точки входа.</span><span class="sxs-lookup"><span data-stu-id="91365-711">The only way to set the apartment state of the main application thread to <xref:System.Threading.ApartmentState.STA?displayProperty=nameWithType> is to apply the <xref:System.STAThreadAttribute> attribute to the entry point method.</span></span>  
  
 <span data-ttu-id="91365-712"><xref:System.Threading.Thread.SetApartmentState%2A> Метод, вместе с <xref:System.Threading.Thread.GetApartmentState%2A> метод и <xref:System.Threading.Thread.TrySetApartmentState%2A> заменяет метод, <xref:System.Threading.Thread.ApartmentState%2A> свойство.</span><span class="sxs-lookup"><span data-stu-id="91365-712">The <xref:System.Threading.Thread.SetApartmentState%2A> method, along with the <xref:System.Threading.Thread.GetApartmentState%2A> method and the <xref:System.Threading.Thread.TrySetApartmentState%2A> method, replaces the <xref:System.Threading.Thread.ApartmentState%2A> property.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="91365-713">В следующем примере кода показано <xref:System.Threading.Thread.GetApartmentState%2A>, <xref:System.Threading.Thread.SetApartmentState%2A>, и <xref:System.Threading.Thread.TrySetApartmentState%2A> методы.</span><span class="sxs-lookup"><span data-stu-id="91365-713">The following code example demonstrates the <xref:System.Threading.Thread.GetApartmentState%2A>, <xref:System.Threading.Thread.SetApartmentState%2A>, and <xref:System.Threading.Thread.TrySetApartmentState%2A> methods.</span></span> <span data-ttu-id="91365-714">В примере кода создается поток.</span><span class="sxs-lookup"><span data-stu-id="91365-714">The code example creates a thread.</span></span> <span data-ttu-id="91365-715">До запуска потока <xref:System.Threading.Thread.GetApartmentState%2A> отображает начальный <xref:System.Threading.ApartmentState.Unknown?displayProperty=nameWithType> состояние и <xref:System.Threading.Thread.SetApartmentState%2A> изменяет состояние на <xref:System.Threading.ApartmentState.STA?displayProperty=nameWithType>.</span><span class="sxs-lookup"><span data-stu-id="91365-715">Before the thread is started, <xref:System.Threading.Thread.GetApartmentState%2A> displays the initial <xref:System.Threading.ApartmentState.Unknown?displayProperty=nameWithType> state and <xref:System.Threading.Thread.SetApartmentState%2A> changes the state to <xref:System.Threading.ApartmentState.STA?displayProperty=nameWithType>.</span></span> <span data-ttu-id="91365-716"><xref:System.Threading.Thread.TrySetApartmentState%2A> Метод затем возвращает `false` при попытке изменить состояние на <xref:System.Threading.ApartmentState.MTA?displayProperty=nameWithType> , так как состояние подразделения уже задано.</span><span class="sxs-lookup"><span data-stu-id="91365-716">The <xref:System.Threading.Thread.TrySetApartmentState%2A> method then returns `false` when attempting to change the state to <xref:System.Threading.ApartmentState.MTA?displayProperty=nameWithType> because the apartment state is already set.</span></span> <span data-ttu-id="91365-717">Если попыток одной операции с <xref:System.Threading.Thread.SetApartmentState%2A>, <xref:System.InvalidOperationException> бы исключение.</span><span class="sxs-lookup"><span data-stu-id="91365-717">If the same operation had been attempted with <xref:System.Threading.Thread.SetApartmentState%2A>, <xref:System.InvalidOperationException> would have been thrown.</span></span>  
  
 <span data-ttu-id="91365-718">После запуска потока <xref:System.Threading.Thread.TrySetApartmentState%2A> используется метод.</span><span class="sxs-lookup"><span data-stu-id="91365-718">After the thread is started, the <xref:System.Threading.Thread.TrySetApartmentState%2A> method is used again.</span></span> <span data-ttu-id="91365-719">Это время, создается исключение <xref:System.Threading.ThreadStateException> поскольку поток уже запущен.</span><span class="sxs-lookup"><span data-stu-id="91365-719">This time it throws <xref:System.Threading.ThreadStateException> because the thread has already been started.</span></span>  
  
 [!code-cpp[Thread.GetSetTrySetApartmentState#1](~/samples/snippets/cpp/VS_Snippets_CLR/Thread.GetSetTrySetApartmentState/cpp/source.cpp#1)]
 [!code-csharp[Thread.GetSetTrySetApartmentState#1](~/samples/snippets/csharp/VS_Snippets_CLR/Thread.GetSetTrySetApartmentState/cs/source.cs#1)]
 [!code-vb[Thread.GetSetTrySetApartmentState#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/Thread.GetSetTrySetApartmentState/vb/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.PlatformNotSupportedException"><span data-ttu-id="91365-720">Только в .NET Core: этот элемент не поддерживается на платформах Linux и macOS.</span><span class="sxs-lookup"><span data-stu-id="91365-720">.NET Core only: This member is not supported on the macOS and Linux platforms.</span></span></exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="91365-721"><paramref name="state" /> не является действительным состоянием апартамента.</span><span class="sxs-lookup"><span data-stu-id="91365-721"><paramref name="state" /> is not a valid apartment state.</span></span></exception>
        <exception cref="T:System.Threading.ThreadStateException"><span data-ttu-id="91365-722">Поток уже запущен.</span><span class="sxs-lookup"><span data-stu-id="91365-722">The thread has already been started.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="91365-723">Состояние подразделения уже инициализировано.</span><span class="sxs-lookup"><span data-stu-id="91365-723">The apartment state has already been initialized.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="SetCompressedStack">
      <MemberSignature Language="C#" Value="public void SetCompressedStack (System.Threading.CompressedStack stack);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void SetCompressedStack(class System.Threading.CompressedStack stack) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Thread.SetCompressedStack(System.Threading.CompressedStack)" />
      <MemberSignature Language="VB.NET" Value="Public Sub SetCompressedStack (stack As CompressedStack)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void SetCompressedStack(System::Threading::CompressedStack ^ stack);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Thread</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Obsolete("Thread.SetCompressedStack is no longer supported. Please use the System.Threading.CompressedStack class")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Security.SecurityCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="stack" Type="System.Threading.CompressedStack" />
      </Parameters>
      <Docs>
        <param name="stack"><span data-ttu-id="91365-724">Объект <see cref="T:System.Threading.CompressedStack" />, который будет применен к текущему потоку.</span><span class="sxs-lookup"><span data-stu-id="91365-724">The <see cref="T:System.Threading.CompressedStack" /> object to be applied to the current thread.</span></span></param>
        <summary><span data-ttu-id="91365-725">Применяет записанное значение <see cref="T:System.Threading.CompressedStack" /> к текущему потоку.</span><span class="sxs-lookup"><span data-stu-id="91365-725">Applies a captured <see cref="T:System.Threading.CompressedStack" /> to the current thread.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="91365-726">Этот метод больше не поддерживается.</span><span class="sxs-lookup"><span data-stu-id="91365-726">This method is no longer supported.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="91365-727">Во всех случаях.</span><span class="sxs-lookup"><span data-stu-id="91365-727">In all cases.</span></span></exception>
        <permission cref="T:System.Security.SecurityCriticalAttribute"><span data-ttu-id="91365-728">требуется полное доверие для непосредственно вызывающего метода.</span><span class="sxs-lookup"><span data-stu-id="91365-728">Requires full trust for the immediate caller.</span></span> <span data-ttu-id="91365-729">Этот член не может использоваться частично доверенным или прозрачным кодом.</span><span class="sxs-lookup"><span data-stu-id="91365-729">This member cannot be used by partially trusted or transparent code.</span></span></permission>
      </Docs>
    </Member>
    <Member MemberName="SetData">
      <MemberSignature Language="C#" Value="public static void SetData (LocalDataStoreSlot slot, object data);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void SetData(class System.LocalDataStoreSlot slot, object data) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Thread.SetData(System.LocalDataStoreSlot,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub SetData (slot As LocalDataStoreSlot, data As Object)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void SetData(LocalDataStoreSlot ^ slot, System::Object ^ data);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Thread</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="slot" Type="System.LocalDataStoreSlot" />
        <Parameter Name="data" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="slot"><span data-ttu-id="91365-730">Объект <see cref="T:System.LocalDataStoreSlot" />, для которого задается значение.</span><span class="sxs-lookup"><span data-stu-id="91365-730">The <see cref="T:System.LocalDataStoreSlot" /> in which to set the value.</span></span></param>
        <param name="data"><span data-ttu-id="91365-731">Задаваемое значение.</span><span class="sxs-lookup"><span data-stu-id="91365-731">The value to be set.</span></span></param>
        <summary><span data-ttu-id="91365-732">Задает данные в указанной области для текущей области потока, выполняющегося в данный момент.</span><span class="sxs-lookup"><span data-stu-id="91365-732">Sets the data in the specified slot on the currently running thread, for that thread's current domain.</span></span> <span data-ttu-id="91365-733">Для улучшения производительности используйте поля, отмеченные атрибутом <see cref="T:System.ThreadStaticAttribute" />.</span><span class="sxs-lookup"><span data-stu-id="91365-733">For better performance, use fields marked with the <see cref="T:System.ThreadStaticAttribute" /> attribute instead.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
> [!IMPORTANT]
>  <span data-ttu-id="91365-734">Платформа .NET Framework предоставляет два механизма для использования локальное хранилище потока (TLS): статические поля потока (то есть поля, отмеченные <xref:System.ThreadStaticAttribute> атрибут) и области данных.</span><span class="sxs-lookup"><span data-stu-id="91365-734">The .NET Framework provides two mechanisms for using thread local storage (TLS): thread-relative static fields (that is, fields that are marked with the <xref:System.ThreadStaticAttribute> attribute) and data slots.</span></span> <span data-ttu-id="91365-735">Статические поля потока предоставляют гораздо более высокую производительность, чем области данных и включить проверку типов во время компиляции.</span><span class="sxs-lookup"><span data-stu-id="91365-735">Thread-relative static fields provide much better performance than data slots, and enable compile-time type checking.</span></span> <span data-ttu-id="91365-736">Дополнительные сведения об использовании TLS см. в разделе [локальное хранилище потока: статические поля потока и области данных](~/docs/standard/threading/thread-local-storage-thread-relative-static-fields-and-data-slots.md).</span><span class="sxs-lookup"><span data-stu-id="91365-736">For more information about using TLS, see [Thread Local Storage: Thread-Relative Static Fields and Data Slots](~/docs/standard/threading/thread-local-storage-thread-relative-static-fields-and-data-slots.md).</span></span>  
  
 <span data-ttu-id="91365-737">Потоки используют механизм локального хранилища памяти для хранения данных определенного потока.</span><span class="sxs-lookup"><span data-stu-id="91365-737">Threads use a local store memory mechanism to store thread-specific data.</span></span> <span data-ttu-id="91365-738">Общеязыковая среда выполнения выделяет массив хранения данных несколькими разъемами для каждого процесса при его создании.</span><span class="sxs-lookup"><span data-stu-id="91365-738">The common language runtime allocates a multi-slot data store array to each process when it is created.</span></span> <span data-ttu-id="91365-739">Поток может выделить область данных в хранилище данных, хранилище и получения данных значения в слоте и освободить эту область для повторного использования после завершения процедуры потока и <xref:System.Threading.Thread> объект уничтожен сборщиком мусора.</span><span class="sxs-lookup"><span data-stu-id="91365-739">The thread can allocate a data slot in the data store, store and retrieve a data value in the slot, and free the slot for reuse after the thread procedure ends and the <xref:System.Threading.Thread> object has been reclaimed by garbage collection.</span></span> <span data-ttu-id="91365-740">Области данных являются уникальными для каждого потока.</span><span class="sxs-lookup"><span data-stu-id="91365-740">Data slots are unique per thread.</span></span> <span data-ttu-id="91365-741">Ни один поток (даже дочерний поток) можно получить эти данные.</span><span class="sxs-lookup"><span data-stu-id="91365-741">No other thread (not even a child thread) can get that data.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="91365-742"><xref:System.Threading.Thread.SetData%2A> — `Shared` метод, который всегда применяется к потоку выполняться в данный момент, даже при вызове с помощью переменной, которая ссылается на другой поток.</span><span class="sxs-lookup"><span data-stu-id="91365-742"><xref:System.Threading.Thread.SetData%2A> is a `Shared` method that always applies to the currently executing thread, even if you call it using a variable that refers to another thread.</span></span> <span data-ttu-id="91365-743">Чтобы избежать путаницы, используйте имя класса при вызове `Shared` методы: `Thread.SetData(testSlot, "test data")`.</span><span class="sxs-lookup"><span data-stu-id="91365-743">To avoid confusion, use the class name when calling `Shared` methods: `Thread.SetData(testSlot, "test data")`.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="91365-744">Этот раздел содержит два примера кода.</span><span class="sxs-lookup"><span data-stu-id="91365-744">This section contains two code examples.</span></span> <span data-ttu-id="91365-745">Первый пример показано, как использовать поле, отмеченный атрибутом <xref:System.ThreadStaticAttribute> атрибут для хранения информации о потоках.</span><span class="sxs-lookup"><span data-stu-id="91365-745">The first example shows how to use a field that is marked with the <xref:System.ThreadStaticAttribute> attribute to hold thread-specific information.</span></span> <span data-ttu-id="91365-746">Во втором примере показано, как использовать область данных сделать то же самое.</span><span class="sxs-lookup"><span data-stu-id="91365-746">The second example shows how to use a data slot to do the same thing.</span></span>  
  
 <span data-ttu-id="91365-747">**В первом примере**</span><span class="sxs-lookup"><span data-stu-id="91365-747">**First Example**</span></span>  
  
 <span data-ttu-id="91365-748">Приведенный ниже показано, как использовать поле, отмеченный атрибутом <xref:System.ThreadStaticAttribute> для хранения информации о потоках.</span><span class="sxs-lookup"><span data-stu-id="91365-748">The following example shows how to use a field that is marked with <xref:System.ThreadStaticAttribute> to hold thread-specific information.</span></span> <span data-ttu-id="91365-749">Этот метод обеспечивает лучшую производительность, чем метод, который отображается во втором примере.</span><span class="sxs-lookup"><span data-stu-id="91365-749">This technique provides better performance than the technique that is shown in the second example.</span></span>  
  
 [!code-cpp[System.Threading.Thread.DoNotUseDataSlots#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Threading.Thread.DoNotUseDataSlots/CPP/source.cpp#1)]
 [!code-csharp[System.Threading.Thread.DoNotUseDataSlots#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Threading.Thread.DoNotUseDataSlots/CS/source.cs#1)]
 [!code-vb[System.Threading.Thread.DoNotUseDataSlots#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Threading.Thread.DoNotUseDataSlots/vb/source.vb#1)]  
  
 <span data-ttu-id="91365-750">**Во втором примере**</span><span class="sxs-lookup"><span data-stu-id="91365-750">**Second Example**</span></span>  
  
 <span data-ttu-id="91365-751">Следующий пример демонстрирует использование именованную область данных для хранения информации о потоках.</span><span class="sxs-lookup"><span data-stu-id="91365-751">The following example demonstrates how to use a named data slot to store thread-specific information.</span></span>  
  
 [!code-cpp[System.Threading.Thread.NamedDataSlot#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Threading.Thread.NamedDataSlot/CPP/source.cpp#1)]
 [!code-csharp[System.Threading.Thread.NamedDataSlot#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Threading.Thread.NamedDataSlot/CS/source.cs#1)]
 [!code-vb[System.Threading.Thread.NamedDataSlot#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Threading.Thread.NamedDataSlot/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Threading.Thread.GetData(System.LocalDataStoreSlot)" />
      </Docs>
    </Member>
    <MemberGroup MemberName="Sleep">
      <AssemblyInfo>
        <AssemblyName>System.Threading.Thread</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="91365-752">Приостанавливает текущий поток на заданное время.</span><span class="sxs-lookup"><span data-stu-id="91365-752">Suspends the current thread for the specified amount of time.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Sleep">
      <MemberSignature Language="C#" Value="public static void Sleep (int millisecondsTimeout);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void Sleep(int32 millisecondsTimeout) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Thread.Sleep(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub Sleep (millisecondsTimeout As Integer)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void Sleep(int millisecondsTimeout);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Thread</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="millisecondsTimeout" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="millisecondsTimeout"><span data-ttu-id="91365-753">Количество миллисекунд, на которое приостанавливается поток.</span><span class="sxs-lookup"><span data-stu-id="91365-753">The number of milliseconds for which the thread is suspended.</span></span> <span data-ttu-id="91365-754">Если значение аргумента <c>millisecondsTimeout</c> равно нулю, поток освобождает оставшуюся часть своего интервала времени для любого потока с таким же приоритетом, готовым к выполнению.</span><span class="sxs-lookup"><span data-stu-id="91365-754">If the value of the <c>millisecondsTimeout</c> argument is zero, the thread relinquishes the remainder of its time slice to any thread of equal priority that is ready to run.</span></span> <span data-ttu-id="91365-755">Если других готовых к выполнению потоков с таким же приоритетом нет, выполнение текущего потока не приостанавливается.</span><span class="sxs-lookup"><span data-stu-id="91365-755">If there are no other threads of equal priority that are ready to run, execution of the current thread is not suspended.</span></span></param>
        <summary><span data-ttu-id="91365-756">Приостанавливает текущий поток на заданное количество миллисекунд.</span><span class="sxs-lookup"><span data-stu-id="91365-756">Suspends the current thread for the specified number of milliseconds.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="91365-757">Поток не планируется для выполнения в операционной системе на указанный период времени.</span><span class="sxs-lookup"><span data-stu-id="91365-757">The thread will not be scheduled for execution by the operating system for the amount of time specified.</span></span> <span data-ttu-id="91365-758">Этот метод изменяет состояние потока для включения <xref:System.Threading.ThreadState.WaitSleepJoin>.</span><span class="sxs-lookup"><span data-stu-id="91365-758">This method changes the state of the thread to include <xref:System.Threading.ThreadState.WaitSleepJoin>.</span></span>  
  
 <span data-ttu-id="91365-759">Можно указать <xref:System.Threading.Timeout.Infinite?displayProperty=nameWithType> для `millisecondsTimeout` параметра на приостановку потока бесконечно.</span><span class="sxs-lookup"><span data-stu-id="91365-759">You can specify <xref:System.Threading.Timeout.Infinite?displayProperty=nameWithType> for the `millisecondsTimeout` parameter to suspend the thread indefinitely.</span></span> <span data-ttu-id="91365-760">Тем не менее, рекомендуется использовать другие <xref:System.Threading?displayProperty=nameWithType> классы, такие как <xref:System.Threading.Mutex>, <xref:System.Threading.Monitor>, <xref:System.Threading.EventWaitHandle>, или <xref:System.Threading.Semaphore> вместо синхронизировать потоков или управление ресурсами.</span><span class="sxs-lookup"><span data-stu-id="91365-760">However, we recommend that you use other <xref:System.Threading?displayProperty=nameWithType> classes such as <xref:System.Threading.Mutex>, <xref:System.Threading.Monitor>, <xref:System.Threading.EventWaitHandle>, or <xref:System.Threading.Semaphore> instead to sychronize threads or manage resources.</span></span>  
  
 <span data-ttu-id="91365-761">Тактов системы с определенной скоростью вызывается разрешение часов.</span><span class="sxs-lookup"><span data-stu-id="91365-761">The system clock ticks at a specific rate called the clock resolution.</span></span> <span data-ttu-id="91365-762">Фактическое время ожидания может быть точно заданное время ожидания, поскольку заданное время ожидания будет впоследствии скорректирована совпадают с тактов.</span><span class="sxs-lookup"><span data-stu-id="91365-762">The actual timeout might not be exactly the specified timeout, because the specified timeout will be adjusted to coincide with clock ticks.</span></span> <span data-ttu-id="91365-763">Дополнительные сведения о времени разрешения и время ожидания см. в разделе [спящий режим функция](http://msdn.microsoft.com/library/windows/desktop/ms686298.aspx) раздела.</span><span class="sxs-lookup"><span data-stu-id="91365-763">For more information on clock resolution and the waiting time, see the [Sleep function](http://msdn.microsoft.com/library/windows/desktop/ms686298.aspx) topic.</span></span> <span data-ttu-id="91365-764">Этот метод вызывает метод [спящий режим функция](http://msdn.microsoft.com/library/windows/desktop/ms686298.aspx) из API системы Windows.</span><span class="sxs-lookup"><span data-stu-id="91365-764">This method calls the [Sleep function](http://msdn.microsoft.com/library/windows/desktop/ms686298.aspx) from the Windows system APIs.</span></span>  
  
 <span data-ttu-id="91365-765">Этот метод не выполняет стандартные COM и SendMessage.</span><span class="sxs-lookup"><span data-stu-id="91365-765">This method does not perform standard COM and SendMessage pumping.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="91365-766">Необходимо перейти в состояние сна в потоке, который имеет <xref:System.STAThreadAttribute>, но вы хотите выполнять стандартные COM и SendMessage, используйте одну из перегрузок <xref:System.Threading.Thread.Join%2A> метод, который задает интервал времени ожидания.</span><span class="sxs-lookup"><span data-stu-id="91365-766">If you need to sleep on a thread that has <xref:System.STAThreadAttribute>, but you want to perform standard COM and SendMessage pumping, consider using one of the overloads of the <xref:System.Threading.Thread.Join%2A> method that specifies a timeout interval.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="91365-767">В следующем примере используется <xref:System.Threading.Thread.Sleep%2A> метод для блокирования основного потока приложения.</span><span class="sxs-lookup"><span data-stu-id="91365-767">The following example uses the <xref:System.Threading.Thread.Sleep%2A> method to block the application's main thread.</span></span>  
  
 [!code-cpp[Thread.Sleep#1](~/samples/snippets/cpp/VS_Snippets_CLR/thread.sleep/cpp/example.cpp#1)]
 [!code-csharp[Thread.Sleep#1](~/samples/snippets/csharp/VS_Snippets_CLR/thread.sleep/cs/example.cs#1)]
 [!code-vb[Thread.Sleep#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/thread.sleep/vb/example.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException"><span data-ttu-id="91365-768">Значение времени ожидания является отрицательной величиной и не равно <see cref="F:System.Threading.Timeout.Infinite" />.</span><span class="sxs-lookup"><span data-stu-id="91365-768">The time-out value is negative and is not equal to <see cref="F:System.Threading.Timeout.Infinite" />.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="Sleep">
      <MemberSignature Language="C#" Value="public static void Sleep (TimeSpan timeout);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void Sleep(valuetype System.TimeSpan timeout) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Thread.Sleep(System.TimeSpan)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub Sleep (timeout As TimeSpan)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void Sleep(TimeSpan timeout);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Thread</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="timeout" Type="System.TimeSpan" />
      </Parameters>
      <Docs>
        <param name="timeout"><span data-ttu-id="91365-769">Время, на которое приостанавливается поток.</span><span class="sxs-lookup"><span data-stu-id="91365-769">The amount of time for which the thread is suspended.</span></span> <span data-ttu-id="91365-770">Если значение аргумента <c>millisecondsTimeout</c> равно <see cref="F:System.TimeSpan.Zero" />, поток освобождает оставшуюся часть своего интервала времени для любого потока с таким же приоритетом, готовым к выполнению.</span><span class="sxs-lookup"><span data-stu-id="91365-770">If the value of the <c>millisecondsTimeout</c> argument is <see cref="F:System.TimeSpan.Zero" />, the thread relinquishes the remainder of its time slice to any thread of equal priority that is ready to run.</span></span> <span data-ttu-id="91365-771">Если других готовых к выполнению потоков с таким же приоритетом нет, выполнение текущего потока не приостанавливается.</span><span class="sxs-lookup"><span data-stu-id="91365-771">If there are no other threads of equal priority that are ready to run, execution of the current thread is not suspended.</span></span></param>
        <summary><span data-ttu-id="91365-772">Приостанавливает текущий поток на заданное время.</span><span class="sxs-lookup"><span data-stu-id="91365-772">Suspends the current thread for the specified amount of time.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="91365-773">Поток не планируется для выполнения в операционной системе на указанный период времени.</span><span class="sxs-lookup"><span data-stu-id="91365-773">The thread will not be scheduled for execution by the operating system for the amount of time specified.</span></span> <span data-ttu-id="91365-774">Этот метод изменяет состояние потока для включения <xref:System.Threading.ThreadState.WaitSleepJoin>.</span><span class="sxs-lookup"><span data-stu-id="91365-774">This method changes the state of the thread to include <xref:System.Threading.ThreadState.WaitSleepJoin>.</span></span>  
  
 <span data-ttu-id="91365-775">Можно указать <xref:System.Threading.Timeout.InfiniteTimeSpan?displayProperty=nameWithType> для `timeout` параметра на приостановку потока бесконечно.</span><span class="sxs-lookup"><span data-stu-id="91365-775">You can specify <xref:System.Threading.Timeout.InfiniteTimeSpan?displayProperty=nameWithType> for the `timeout` parameter to suspend the thread indefinitely.</span></span> <span data-ttu-id="91365-776">Тем не менее, рекомендуется использовать другие <xref:System.Threading?displayProperty=nameWithType> классы, такие как <xref:System.Threading.Mutex>, <xref:System.Threading.Monitor>, <xref:System.Threading.EventWaitHandle>, или <xref:System.Threading.Semaphore> вместо синхронизировать потоков или управление ресурсами.</span><span class="sxs-lookup"><span data-stu-id="91365-776">However, we recommend that you use other <xref:System.Threading?displayProperty=nameWithType> classes such as <xref:System.Threading.Mutex>, <xref:System.Threading.Monitor>, <xref:System.Threading.EventWaitHandle>, or <xref:System.Threading.Semaphore> instead to sychronize threads or manage resources.</span></span>  
  
 <span data-ttu-id="91365-777">Эта перегрузка <xref:System.Threading.Thread.Sleep%2A> использует общее количество миллисекунд в `timeout`.</span><span class="sxs-lookup"><span data-stu-id="91365-777">This overload of <xref:System.Threading.Thread.Sleep%2A> uses the total number of whole milliseconds in `timeout`.</span></span> <span data-ttu-id="91365-778">Дробное количество миллисекунд, отбрасываются.</span><span class="sxs-lookup"><span data-stu-id="91365-778">Fractional milliseconds are discarded.</span></span>  
  
 <span data-ttu-id="91365-779">Этот метод не выполняет стандартные COM и SendMessage.</span><span class="sxs-lookup"><span data-stu-id="91365-779">This method does not perform standard COM and SendMessage pumping.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="91365-780">Необходимо перейти в состояние сна в потоке, который имеет <xref:System.STAThreadAttribute>, но вы хотите выполнять стандартные COM и SendMessage, используйте одну из перегрузок <xref:System.Threading.Thread.Join%2A> метод, который задает интервал времени ожидания.</span><span class="sxs-lookup"><span data-stu-id="91365-780">If you need to sleep on a thread that has <xref:System.STAThreadAttribute>, but you want to perform standard COM and SendMessage pumping, consider using one of the overloads of the <xref:System.Threading.Thread.Join%2A> method that specifies a timeout interval.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="91365-781">В следующем примере используется <xref:System.Threading.Thread.Sleep%28System.TimeSpan%29> перегрузка метода для блокирования основного потока приложения пять раз для двух секунд каждый раз.</span><span class="sxs-lookup"><span data-stu-id="91365-781">The following example uses the <xref:System.Threading.Thread.Sleep%28System.TimeSpan%29> method overload to block the application's main thread five times, for two seconds each time.</span></span>  
  
 [!code-cpp[Thread.Sleep_TimeSpan#1](~/samples/snippets/cpp/VS_Snippets_CLR/thread.sleep_timespan/cpp/example.cpp#1)]
 [!code-csharp[Thread.Sleep_TimeSpan#1](~/samples/snippets/csharp/VS_Snippets_CLR/thread.sleep_timespan/cs/example.cs#1)]
 [!code-vb[Thread.Sleep_TimeSpan#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/thread.sleep_timespan/vb/example.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException"><span data-ttu-id="91365-782">Значение <paramref name="timeout" /> является отрицательным и не равно <see cref="F:System.Threading.Timeout.Infinite" /> (в миллисекундах) или больше <see cref="F:System.Int32.MaxValue" /> миллисекунд.</span><span class="sxs-lookup"><span data-stu-id="91365-782">The value of <paramref name="timeout" /> is negative and is not equal to <see cref="F:System.Threading.Timeout.Infinite" /> in milliseconds, or is greater than <see cref="F:System.Int32.MaxValue" /> milliseconds.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="SpinWait">
      <MemberSignature Language="C#" Value="public static void SpinWait (int iterations);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void SpinWait(int32 iterations) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Thread.SpinWait(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub SpinWait (iterations As Integer)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void SpinWait(int iterations);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Thread</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.ConstrainedExecution.ReliabilityContract(System.Runtime.ConstrainedExecution.Consistency.WillNotCorruptState, System.Runtime.ConstrainedExecution.Cer.Success)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="iterations" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="iterations"><span data-ttu-id="91365-783">32-разрядное знаковое целое число, определяющее, как долго потоку ожидать.</span><span class="sxs-lookup"><span data-stu-id="91365-783">A 32-bit signed integer that defines how long a thread is to wait.</span></span></param>
        <summary><span data-ttu-id="91365-784">Вынуждает поток выполнять ожидание столько раз, сколько определено параметром <paramref name="iterations" />.</span><span class="sxs-lookup"><span data-stu-id="91365-784">Causes a thread to wait the number of times defined by the <paramref name="iterations" /> parameter.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="91365-785"><xref:System.Threading.Thread.SpinWait%2A> Метод полезен для реализации блокировки.</span><span class="sxs-lookup"><span data-stu-id="91365-785">The <xref:System.Threading.Thread.SpinWait%2A> method is useful for implementing locks.</span></span> <span data-ttu-id="91365-786">Классы в .NET Framework, такие как <xref:System.Threading.Monitor> и <xref:System.Threading.ReaderWriterLock>, для внутреннего использования этого метода.</span><span class="sxs-lookup"><span data-stu-id="91365-786">Classes in the .NET Framework, such as <xref:System.Threading.Monitor> and <xref:System.Threading.ReaderWriterLock>, use this method internally.</span></span> <span data-ttu-id="91365-787"><xref:System.Threading.Thread.SpinWait%2A> по существу помещает процессора в цикле тесной со счетчика цикла, заданные `iterations` параметра.</span><span class="sxs-lookup"><span data-stu-id="91365-787"><xref:System.Threading.Thread.SpinWait%2A> essentially puts the processor into a very tight loop, with the loop count specified by the `iterations` parameter.</span></span> <span data-ttu-id="91365-788">Таким образом, длительность ожидания зависит от скорости процессора.</span><span class="sxs-lookup"><span data-stu-id="91365-788">The duration of the wait therefore depends on the speed of the processor.</span></span>  
  
 <span data-ttu-id="91365-789">Сравните это с <xref:System.Threading.Thread.Sleep%2A> метод.</span><span class="sxs-lookup"><span data-stu-id="91365-789">Contrast this with the <xref:System.Threading.Thread.Sleep%2A> method.</span></span> <span data-ttu-id="91365-790">Поток, который вызывает <xref:System.Threading.Thread.Sleep%2A> дает остальная часть своего текущего интервала времени процессора, даже если за определенный интервал времени равна нулю.</span><span class="sxs-lookup"><span data-stu-id="91365-790">A thread that calls <xref:System.Threading.Thread.Sleep%2A> yields the rest of its current slice of processor time, even if the specified interval is zero.</span></span> <span data-ttu-id="91365-791">Указание ненулевой интервал <xref:System.Threading.Thread.Sleep%2A> удаляет поток из рассмотрения планировщиком потоков до истечения интервала времени.</span><span class="sxs-lookup"><span data-stu-id="91365-791">Specifying a non-zero interval for <xref:System.Threading.Thread.Sleep%2A> removes the thread from consideration by the thread scheduler until the time interval has elapsed.</span></span>  
  
 <span data-ttu-id="91365-792"><xref:System.Threading.Thread.SpinWait%2A> обычно не имеет смысла для обычных приложений.</span><span class="sxs-lookup"><span data-stu-id="91365-792"><xref:System.Threading.Thread.SpinWait%2A> is not generally useful for ordinary applications.</span></span> <span data-ttu-id="91365-793">В большинстве случаев следует использовать классы синхронизации, предоставляемые платформой .NET Framework; Например, вызов <xref:System.Threading.Monitor.Enter%2A?displayProperty=nameWithType> или инструкцию, которая служит оболочкой для <xref:System.Threading.Monitor.Enter%2A?displayProperty=nameWithType> (`lock` в C# или `SyncLock` в Visual Basic).</span><span class="sxs-lookup"><span data-stu-id="91365-793">In most cases, you should use the synchronization classes provided by the .NET Framework; for example, call <xref:System.Threading.Monitor.Enter%2A?displayProperty=nameWithType> or a statement that wraps <xref:System.Threading.Monitor.Enter%2A?displayProperty=nameWithType> (`lock` in C# or `SyncLock` in Visual Basic).</span></span>  
  
> [!CAUTION]
>  <span data-ttu-id="91365-794">В редких случаях, где предпочтительнее избежать переключение контекста, например, если известно, что изменение состояния приближается вызвать <xref:System.Threading.Thread.SpinWait%2A> метод в цикле.</span><span class="sxs-lookup"><span data-stu-id="91365-794">In the rare case where it is advantageous to avoid a context switch, such as when you know that a state change is imminent, make a call to the <xref:System.Threading.Thread.SpinWait%2A> method in your loop.</span></span> <span data-ttu-id="91365-795">Код <xref:System.Threading.Thread.SpinWait%2A> выполняет предназначен для предотвращения проблем, возникающих на компьютерах с несколькими процессорами.</span><span class="sxs-lookup"><span data-stu-id="91365-795">The code <xref:System.Threading.Thread.SpinWait%2A> executes is designed to prevent problems that can occur on computers with multiple processors.</span></span> <span data-ttu-id="91365-796">Например, на компьютерах с несколькими процессорами Intel с применением технологии Hyper-Threading <xref:System.Threading.Thread.SpinWait%2A> предотвращает нехватку ресурсов процессора в определенных ситуациях.</span><span class="sxs-lookup"><span data-stu-id="91365-796">For example, on computers with multiple Intel processors employing Hyper-Threading technology, <xref:System.Threading.Thread.SpinWait%2A> prevents processor starvation in certain situations.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="Start">
      <AssemblyInfo>
        <AssemblyName>System.Threading.Thread</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="91365-797">Позволяет планировать выполнение потока.</span><span class="sxs-lookup"><span data-stu-id="91365-797">Causes a thread to be scheduled for execution.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Start">
      <MemberSignature Language="C#" Value="public void Start ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Start() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Thread.Start" />
      <MemberSignature Language="VB.NET" Value="Public Sub Start ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Start();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Thread</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="91365-798">Вынуждает операционную систему изменить состояние текущего экземпляра на <see cref="F:System.Threading.ThreadState.Running" />.</span><span class="sxs-lookup"><span data-stu-id="91365-798">Causes the operating system to change the state of the current instance to <see cref="F:System.Threading.ThreadState.Running" />.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="91365-799">Когда поток находится в <xref:System.Threading.ThreadState.Running?displayProperty=nameWithType> состояние операционной системы можно запланировать его выполнение.</span><span class="sxs-lookup"><span data-stu-id="91365-799">Once a thread is in the <xref:System.Threading.ThreadState.Running?displayProperty=nameWithType> state, the operating system can schedule it for execution.</span></span> <span data-ttu-id="91365-800">Поток начинает выполнение на первой строке метода, представленного <xref:System.Threading.ThreadStart> или <xref:System.Threading.ParameterizedThreadStart> делегат, переданное в конструктор потока.</span><span class="sxs-lookup"><span data-stu-id="91365-800">The thread begins executing at the first line of the method represented by the <xref:System.Threading.ThreadStart> or <xref:System.Threading.ParameterizedThreadStart> delegate supplied to the thread constructor.</span></span> <span data-ttu-id="91365-801">Обратите внимание, что вызов <xref:System.Threading.Thread.Start%2A> не блокирует вызывающий поток.</span><span class="sxs-lookup"><span data-stu-id="91365-801">Note that the call to <xref:System.Threading.Thread.Start%2A> does not block the calling thread.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="91365-802">Если эта перегрузка используется с потоком, созданные с помощью <xref:System.Threading.ParameterizedThreadStart> делегировать, `null` передается в метод, выполняемый в потоке.</span><span class="sxs-lookup"><span data-stu-id="91365-802">If this overload is used with a thread created using a <xref:System.Threading.ParameterizedThreadStart> delegate, `null` is passed to the method executed by the thread.</span></span>  
  
 <span data-ttu-id="91365-803">Если поток завершился, его невозможно перезапустить другим вызовом `Start`.</span><span class="sxs-lookup"><span data-stu-id="91365-803">Once the thread terminates, it cannot be restarted with another call to `Start`.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="91365-804">Следующий пример создает и запускает поток.</span><span class="sxs-lookup"><span data-stu-id="91365-804">The following example creates and starts a thread.</span></span>  
  
 [!code-cpp[ThreadStart#1](~/samples/snippets/cpp/VS_Snippets_CLR/ThreadStart/CPP/threadstart.cpp#1)]
 [!code-csharp[ThreadStart#1](~/samples/snippets/csharp/VS_Snippets_CLR/ThreadStart/CS/threadstart.cs#1)]
 [!code-vb[ThreadStart#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/ThreadStart/VB/threadstart.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Threading.ThreadStateException"><span data-ttu-id="91365-805">Поток уже запущен.</span><span class="sxs-lookup"><span data-stu-id="91365-805">The thread has already been started.</span></span></exception>
        <exception cref="T:System.OutOfMemoryException"><span data-ttu-id="91365-806">Недостаточно памяти для запуска этого потока.</span><span class="sxs-lookup"><span data-stu-id="91365-806">There is not enough memory available to start this thread.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="Start">
      <MemberSignature Language="C#" Value="public void Start (object parameter);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Start(object parameter) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Thread.Start(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Start (parameter As Object)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Start(System::Object ^ parameter);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Thread</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="parameter" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="parameter"><span data-ttu-id="91365-807">Объект, содержащий данные, используемые методом, который выполняется потоком.</span><span class="sxs-lookup"><span data-stu-id="91365-807">An object that contains data to be used by the method the thread executes.</span></span></param>
        <summary><span data-ttu-id="91365-808">Заставляет операционную систему изменить состояние текущего экземпляра на <see cref="F:System.Threading.ThreadState.Running" />, а также (необязательно) передает объект с данными, используемыми методом в потоке.</span><span class="sxs-lookup"><span data-stu-id="91365-808">Causes the operating system to change the state of the current instance to <see cref="F:System.Threading.ThreadState.Running" />, and optionally supplies an object containing data to be used by the method the thread executes.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="91365-809">Когда поток находится в <xref:System.Threading.ThreadState.Running?displayProperty=nameWithType> состояние операционной системы можно запланировать его выполнение.</span><span class="sxs-lookup"><span data-stu-id="91365-809">Once a thread is in the <xref:System.Threading.ThreadState.Running?displayProperty=nameWithType> state, the operating system can schedule it for execution.</span></span> <span data-ttu-id="91365-810">Поток начинает выполнение на первой строке метода, представленного <xref:System.Threading.ThreadStart> или <xref:System.Threading.ParameterizedThreadStart> делегат, переданное в конструктор потока.</span><span class="sxs-lookup"><span data-stu-id="91365-810">The thread begins executing at the first line of the method represented by the <xref:System.Threading.ThreadStart> or <xref:System.Threading.ParameterizedThreadStart> delegate supplied to the thread constructor.</span></span> <span data-ttu-id="91365-811">Обратите внимание, что вызов <xref:System.Threading.Thread.Start%2A> не блокирует вызывающий поток.</span><span class="sxs-lookup"><span data-stu-id="91365-811">Note that the call to <xref:System.Threading.Thread.Start%2A> does not block the calling thread.</span></span>  
  
 <span data-ttu-id="91365-812">Если поток завершился, его невозможно перезапустить другим вызовом `Start`.</span><span class="sxs-lookup"><span data-stu-id="91365-812">Once the thread terminates, it cannot be restarted with another call to `Start`.</span></span>  
  
 <span data-ttu-id="91365-813">Эта перегрузка и <xref:System.Threading.ParameterizedThreadStart> делегат позволяют легко передать процедуре потока данных, но метод не является типобезопасным, потому что эта перегрузка может передаваться все объекты.</span><span class="sxs-lookup"><span data-stu-id="91365-813">This overload and the <xref:System.Threading.ParameterizedThreadStart> delegate make it easy to pass data to a thread procedure, but the technique is not type safe because any object can be passed to this overload.</span></span> <span data-ttu-id="91365-814">Для размещения процедуры потока и полей данных в рабочий объект является более надежным способом передачи данных в процедуре потока.</span><span class="sxs-lookup"><span data-stu-id="91365-814">A more robust way to pass data to a thread procedure is to put both the thread procedure and the data fields into a worker object.</span></span> <span data-ttu-id="91365-815">Дополнительные сведения см. в разделе [создание потоков и передача данных во время запуска](~/docs/standard/threading/creating-threads-and-passing-data-at-start-time.md).</span><span class="sxs-lookup"><span data-stu-id="91365-815">For more information, see [Creating Threads and Passing Data at Start Time](~/docs/standard/threading/creating-threads-and-passing-data-at-start-time.md).</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="91365-816">В следующем примере создается <xref:System.Threading.ParameterizedThreadStart> делегат со статическим методом и методом экземпляра.</span><span class="sxs-lookup"><span data-stu-id="91365-816">The following example creates a <xref:System.Threading.ParameterizedThreadStart> delegate with a static method and an instance method.</span></span>  
  
 [!code-cpp[System.Threading.ParameterizedThreadStart#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Threading.ParameterizedThreadStart/CPP/source.cpp#1)]
 [!code-csharp[System.Threading.ParameterizedThreadStart#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Threading.ParameterizedThreadStart/CS/source.cs#1)]
 [!code-vb[System.Threading.ParameterizedThreadStart#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Threading.ParameterizedThreadStart/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Threading.ThreadStateException"><span data-ttu-id="91365-817">Поток уже запущен.</span><span class="sxs-lookup"><span data-stu-id="91365-817">The thread has already been started.</span></span></exception>
        <exception cref="T:System.OutOfMemoryException"><span data-ttu-id="91365-818">Недостаточно памяти для запуска этого потока.</span><span class="sxs-lookup"><span data-stu-id="91365-818">There is not enough memory available to start this thread.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="91365-819">Этот поток был создан с помощью делегата <see cref="T:System.Threading.ThreadStart" />, а не делегата <see cref="T:System.Threading.ParameterizedThreadStart" />.</span><span class="sxs-lookup"><span data-stu-id="91365-819">This thread was created using a <see cref="T:System.Threading.ThreadStart" /> delegate instead of a <see cref="T:System.Threading.ParameterizedThreadStart" /> delegate.</span></span></exception>
        <altmember cref="T:System.Threading.ParameterizedThreadStart" />
        <altmember cref="T:System.AppDomain" />
      </Docs>
    </Member>
    <Member MemberName="Suspend">
      <MemberSignature Language="C#" Value="public void Suspend ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Suspend() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Thread.Suspend" />
      <MemberSignature Language="VB.NET" Value="Public Sub Suspend ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Suspend();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Thread</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Obsolete("Thread.Suspend has been deprecated.  Please use other classes in System.Threading, such as Monitor, Mutex, Event, and Semaphore, to synchronize Threads or protect resources.  http://go.microsoft.com/fwlink/?linkid=14202", false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="91365-820">Приостанавливает работу потока; если работа потока уже приостановлена, не оказывает влияния.</span><span class="sxs-lookup"><span data-stu-id="91365-820">Either suspends the thread, or if the thread is already suspended, has no effect.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="91365-821">Если работа потока уже приостановлена, этот метод не оказывает влияния.</span><span class="sxs-lookup"><span data-stu-id="91365-821">If the thread is already suspended, this method has no effect.</span></span>  
  
> [!CAUTION]
>  <span data-ttu-id="91365-822">Не используйте <xref:System.Threading.Thread.Suspend%2A> и <xref:System.Threading.Thread.Resume%2A> методы для синхронизации действий потоков.</span><span class="sxs-lookup"><span data-stu-id="91365-822">Do not use the <xref:System.Threading.Thread.Suspend%2A> and <xref:System.Threading.Thread.Resume%2A> methods to synchronize the activities of threads.</span></span> <span data-ttu-id="91365-823">У вас нет возможности узнать, какой код поток выполняется в том случае, когда он приостановлен.</span><span class="sxs-lookup"><span data-stu-id="91365-823">You have no way of knowing what code a thread is executing when you suspend it.</span></span> <span data-ttu-id="91365-824">Если поток приостановлен во время удержания блокировок во время оценки разрешений безопасности, другие потоки в <xref:System.AppDomain> может быть заблокирован.</span><span class="sxs-lookup"><span data-stu-id="91365-824">If you suspend a thread while it holds locks during a security permission evaluation, other threads in the <xref:System.AppDomain> might be blocked.</span></span> <span data-ttu-id="91365-825">Если приостановить поток при выполнении конструктора класса, другие потоки в <xref:System.AppDomain> , попытка использовать, что класс заблокированы.</span><span class="sxs-lookup"><span data-stu-id="91365-825">If you suspend a thread while it is executing a class constructor, other threads in the <xref:System.AppDomain> that attempt to use that class are blocked.</span></span> <span data-ttu-id="91365-826">Очень легко может вызвать взаимоблокировку.</span><span class="sxs-lookup"><span data-stu-id="91365-826">Deadlocks can occur very easily.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.PlatformNotSupportedException"><span data-ttu-id="91365-827">Только в .NET Core: этот элемент не поддерживается.</span><span class="sxs-lookup"><span data-stu-id="91365-827">.NET Core only: This member is not supported.</span></span></exception>
        <exception cref="T:System.Threading.ThreadStateException"><span data-ttu-id="91365-828">Поток не запущен или удален.</span><span class="sxs-lookup"><span data-stu-id="91365-828">The thread has not been started or is dead.</span></span></exception>
        <exception cref="T:System.Security.SecurityException"><span data-ttu-id="91365-829">Вызывающий поток не имеет соответствующего разрешения <see cref="T:System.Security.Permissions.SecurityPermission" />.</span><span class="sxs-lookup"><span data-stu-id="91365-829">The caller does not have the appropriate <see cref="T:System.Security.Permissions.SecurityPermission" />.</span></span></exception>
        <permission cref="T:System.Security.Permissions.SecurityPermission"><span data-ttu-id="91365-830">для дополнительных операций над потоками.</span><span class="sxs-lookup"><span data-stu-id="91365-830">for advanced operations on threads.</span></span> <span data-ttu-id="91365-831">Связанное перечисление: <see cref="F:System.Security.Permissions.SecurityPermissionFlag.ControlThread" />.</span><span class="sxs-lookup"><span data-stu-id="91365-831">Associated enumeration: <see cref="F:System.Security.Permissions.SecurityPermissionFlag.ControlThread" />.</span></span></permission>
      </Docs>
    </Member>
    <Member MemberName="System.Runtime.InteropServices._Thread.GetIDsOfNames">
      <MemberSignature Language="C#" Value="void _Thread.GetIDsOfNames (ref Guid riid, IntPtr rgszNames, uint cNames, uint lcid, IntPtr rgDispId);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance void System.Runtime.InteropServices._Thread.GetIDsOfNames([in]valuetype System.Guid&amp; riid, native int rgszNames, unsigned int32 cNames, unsigned int32 lcid, native int rgDispId) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Thread.System#Runtime#InteropServices#_Thread#GetIDsOfNames(System.Guid@,System.IntPtr,System.UInt32,System.UInt32,System.IntPtr)" />
      <MemberSignature Language="VB.NET" Value="Sub GetIDsOfNames (ByRef riid As Guid, rgszNames As IntPtr, cNames As UInteger, lcid As UInteger, rgDispId As IntPtr) Implements _Thread.GetIDsOfNames" />
      <MemberSignature Language="C++ CLI" Value=" virtual void System.Runtime.InteropServices._Thread.GetIDsOfNames(Guid % riid, IntPtr rgszNames, System::UInt32 cNames, System::UInt32 lcid, IntPtr rgDispId) = System::Runtime::InteropServices::_Thread::GetIDsOfNames;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Runtime.InteropServices._Thread.GetIDsOfNames(System.Guid@,System.IntPtr,System.UInt32,System.UInt32,System.IntPtr)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="riid" Type="System.Guid&amp;" RefType="ref" />
        <Parameter Name="rgszNames" Type="System.IntPtr" />
        <Parameter Name="cNames" Type="System.UInt32" />
        <Parameter Name="lcid" Type="System.UInt32" />
        <Parameter Name="rgDispId" Type="System.IntPtr" />
      </Parameters>
      <Docs>
        <param name="riid"><span data-ttu-id="91365-832">Зарезервировано для будущего использования.</span><span class="sxs-lookup"><span data-stu-id="91365-832">Reserved for future use.</span></span> <span data-ttu-id="91365-833">Должно быть равным IID_NULL.</span><span class="sxs-lookup"><span data-stu-id="91365-833">Must be IID_NULL.</span></span></param>
        <param name="rgszNames"><span data-ttu-id="91365-834">Переданный массив имен, которые необходимо сопоставить.</span><span class="sxs-lookup"><span data-stu-id="91365-834">Passed-in array of names to be mapped.</span></span></param>
        <param name="cNames"><span data-ttu-id="91365-835">Количество сопоставляемых имен.</span><span class="sxs-lookup"><span data-stu-id="91365-835">Count of the names to be mapped.</span></span></param>
        <param name="lcid"><span data-ttu-id="91365-836">Контекст языкового стандарта для интерпретации имен.</span><span class="sxs-lookup"><span data-stu-id="91365-836">The locale context in which to interpret the names.</span></span></param>
        <param name="rgDispId"><span data-ttu-id="91365-837">Массив, зарезервированный вызывающим объектом, куда помещаются идентификаторы, соответствующие именам.</span><span class="sxs-lookup"><span data-stu-id="91365-837">Caller-allocated array which receives the IDs corresponding to the names.</span></span></param>
        <summary><span data-ttu-id="91365-838">Сопоставляет набор имен соответствующему набору идентификаторов диспетчеризации.</span><span class="sxs-lookup"><span data-stu-id="91365-838">Maps a set of names to a corresponding set of dispatch identifiers.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="91365-839">Этот метод предназначен для обеспечения доступа к управляемым классам из неуправляемого кода и не должен вызываться из управляемого кода.</span><span class="sxs-lookup"><span data-stu-id="91365-839">This method is for access to managed classes from unmanaged code, and should not be called from managed code.</span></span> <span data-ttu-id="91365-840">Дополнительные сведения о `IDispatch::GetIDsOfNames`, см. в библиотеке MSDN.</span><span class="sxs-lookup"><span data-stu-id="91365-840">For more information about `IDispatch::GetIDsOfNames`, see the MSDN Library.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.NotImplementedException"><span data-ttu-id="91365-841">Доступ с поздним связыванием с помощью COM-интерфейса <c>IDispatch</c> не поддерживается.</span><span class="sxs-lookup"><span data-stu-id="91365-841">Late-bound access using the COM <c>IDispatch</c> interface is not supported.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="System.Runtime.InteropServices._Thread.GetTypeInfo">
      <MemberSignature Language="C#" Value="void _Thread.GetTypeInfo (uint iTInfo, uint lcid, IntPtr ppTInfo);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance void System.Runtime.InteropServices._Thread.GetTypeInfo(unsigned int32 iTInfo, unsigned int32 lcid, native int ppTInfo) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Thread.System#Runtime#InteropServices#_Thread#GetTypeInfo(System.UInt32,System.UInt32,System.IntPtr)" />
      <MemberSignature Language="VB.NET" Value="Sub GetTypeInfo (iTInfo As UInteger, lcid As UInteger, ppTInfo As IntPtr) Implements _Thread.GetTypeInfo" />
      <MemberSignature Language="C++ CLI" Value=" virtual void System.Runtime.InteropServices._Thread.GetTypeInfo(System::UInt32 iTInfo, System::UInt32 lcid, IntPtr ppTInfo) = System::Runtime::InteropServices::_Thread::GetTypeInfo;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Runtime.InteropServices._Thread.GetTypeInfo(System.UInt32,System.UInt32,System.IntPtr)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="iTInfo" Type="System.UInt32" />
        <Parameter Name="lcid" Type="System.UInt32" />
        <Parameter Name="ppTInfo" Type="System.IntPtr" />
      </Parameters>
      <Docs>
        <param name="iTInfo"><span data-ttu-id="91365-842">Возвращаемые сведения о типе.</span><span class="sxs-lookup"><span data-stu-id="91365-842">The type information to return.</span></span></param>
        <param name="lcid"><span data-ttu-id="91365-843">Идентификатор языкового стандарта для сведений о типе.</span><span class="sxs-lookup"><span data-stu-id="91365-843">The locale identifier for the type information.</span></span></param>
        <param name="ppTInfo"><span data-ttu-id="91365-844">Получает указатель на объект с запрошенными сведениями о типе.</span><span class="sxs-lookup"><span data-stu-id="91365-844">Receives a pointer to the requested type information object.</span></span></param>
        <summary><span data-ttu-id="91365-845">Возвращает сведения о типе объекта, которые затем могут использоваться для получения сведений о типе интерфейса.</span><span class="sxs-lookup"><span data-stu-id="91365-845">Retrieves the type information for an object, which can then be used to get the type information for an interface.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="91365-846">Этот метод предназначен для обеспечения доступа к управляемым классам из неуправляемого кода и не должен вызываться из управляемого кода.</span><span class="sxs-lookup"><span data-stu-id="91365-846">This method is for access to managed classes from unmanaged code, and should not be called from managed code.</span></span> <span data-ttu-id="91365-847">Дополнительные сведения о `IDispatch::GetTypeInfo`, см. в библиотеке MSDN.</span><span class="sxs-lookup"><span data-stu-id="91365-847">For more information about `IDispatch::GetTypeInfo`, see the MSDN Library.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.NotImplementedException"><span data-ttu-id="91365-848">Доступ с поздним связыванием с помощью COM-интерфейса <c>IDispatch</c> не поддерживается.</span><span class="sxs-lookup"><span data-stu-id="91365-848">Late-bound access using the COM <c>IDispatch</c> interface is not supported.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="System.Runtime.InteropServices._Thread.GetTypeInfoCount">
      <MemberSignature Language="C#" Value="void _Thread.GetTypeInfoCount (out uint pcTInfo);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance void System.Runtime.InteropServices._Thread.GetTypeInfoCount([out] unsigned int32&amp; pcTInfo) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Thread.System#Runtime#InteropServices#_Thread#GetTypeInfoCount(System.UInt32@)" />
      <MemberSignature Language="VB.NET" Value="Sub GetTypeInfoCount (ByRef pcTInfo As UInteger) Implements _Thread.GetTypeInfoCount" />
      <MemberSignature Language="C++ CLI" Value=" virtual void System.Runtime.InteropServices._Thread.GetTypeInfoCount([Runtime::InteropServices::Out] System::UInt32 % pcTInfo) = System::Runtime::InteropServices::_Thread::GetTypeInfoCount;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Runtime.InteropServices._Thread.GetTypeInfoCount(System.UInt32@)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="pcTInfo" Type="System.UInt32&amp;" RefType="out" />
      </Parameters>
      <Docs>
        <param name="pcTInfo"><span data-ttu-id="91365-849">Указатель, по которому записывается число предоставляемых объектом интерфейсов, предназначенных для получения сведений о типе.</span><span class="sxs-lookup"><span data-stu-id="91365-849">Points to a location that receives the number of type information interfaces provided by the object.</span></span></param>
        <summary><span data-ttu-id="91365-850">Возвращает количество предоставляемых объектом интерфейсов для доступа к сведениям о типе (0 или 1).</span><span class="sxs-lookup"><span data-stu-id="91365-850">Retrieves the number of type information interfaces that an object provides (either 0 or 1).</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="91365-851">Этот метод предназначен для обеспечения доступа к управляемым классам из неуправляемого кода и не должен вызываться из управляемого кода.</span><span class="sxs-lookup"><span data-stu-id="91365-851">This method is for access to managed classes from unmanaged code, and should not be called from managed code.</span></span> <span data-ttu-id="91365-852">Дополнительные сведения о `IDispatch::GetTypeInfoCount`, см. в библиотеке MSDN.</span><span class="sxs-lookup"><span data-stu-id="91365-852">For more information about `IDispatch::GetTypeInfoCount`, see the MSDN Library.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.NotImplementedException"><span data-ttu-id="91365-853">Доступ с поздним связыванием с помощью COM-интерфейса <c>IDispatch</c> не поддерживается.</span><span class="sxs-lookup"><span data-stu-id="91365-853">Late-bound access using the COM <c>IDispatch</c> interface is not supported.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="System.Runtime.InteropServices._Thread.Invoke">
      <MemberSignature Language="C#" Value="void _Thread.Invoke (uint dispIdMember, ref Guid riid, uint lcid, short wFlags, IntPtr pDispParams, IntPtr pVarResult, IntPtr pExcepInfo, IntPtr puArgErr);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance void System.Runtime.InteropServices._Thread.Invoke(unsigned int32 dispIdMember, [in]valuetype System.Guid&amp; riid, unsigned int32 lcid, int16 wFlags, native int pDispParams, native int pVarResult, native int pExcepInfo, native int puArgErr) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Thread.System#Runtime#InteropServices#_Thread#Invoke(System.UInt32,System.Guid@,System.UInt32,System.Int16,System.IntPtr,System.IntPtr,System.IntPtr,System.IntPtr)" />
      <MemberSignature Language="VB.NET" Value="Sub Invoke (dispIdMember As UInteger, ByRef riid As Guid, lcid As UInteger, wFlags As Short, pDispParams As IntPtr, pVarResult As IntPtr, pExcepInfo As IntPtr, puArgErr As IntPtr) Implements _Thread.Invoke" />
      <MemberSignature Language="C++ CLI" Value=" virtual void System.Runtime.InteropServices._Thread.Invoke(System::UInt32 dispIdMember, Guid % riid, System::UInt32 lcid, short wFlags, IntPtr pDispParams, IntPtr pVarResult, IntPtr pExcepInfo, IntPtr puArgErr) = System::Runtime::InteropServices::_Thread::Invoke;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Runtime.InteropServices._Thread.Invoke(System.UInt32,System.Guid@,System.UInt32,System.Int16,System.IntPtr,System.IntPtr,System.IntPtr,System.IntPtr)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="dispIdMember" Type="System.UInt32" />
        <Parameter Name="riid" Type="System.Guid&amp;" RefType="ref" />
        <Parameter Name="lcid" Type="System.UInt32" />
        <Parameter Name="wFlags" Type="System.Int16" />
        <Parameter Name="pDispParams" Type="System.IntPtr" />
        <Parameter Name="pVarResult" Type="System.IntPtr" />
        <Parameter Name="pExcepInfo" Type="System.IntPtr" />
        <Parameter Name="puArgErr" Type="System.IntPtr" />
      </Parameters>
      <Docs>
        <param name="dispIdMember"><span data-ttu-id="91365-854">Идентифицирует член.</span><span class="sxs-lookup"><span data-stu-id="91365-854">Identifies the member.</span></span></param>
        <param name="riid"><span data-ttu-id="91365-855">Зарезервировано для будущего использования.</span><span class="sxs-lookup"><span data-stu-id="91365-855">Reserved for future use.</span></span> <span data-ttu-id="91365-856">Должно быть равным IID_NULL.</span><span class="sxs-lookup"><span data-stu-id="91365-856">Must be IID_NULL.</span></span></param>
        <param name="lcid"><span data-ttu-id="91365-857">Контекст языкового стандарта, в котором следует интерпретировать аргументы.</span><span class="sxs-lookup"><span data-stu-id="91365-857">The locale context in which to interpret arguments.</span></span></param>
        <param name="wFlags"><span data-ttu-id="91365-858">Флаги, описывающие контекст вызова.</span><span class="sxs-lookup"><span data-stu-id="91365-858">Flags describing the context of the call.</span></span></param>
        <param name="pDispParams"><span data-ttu-id="91365-859">Указатель на структуру, содержащую массив аргументов, массив DISPID для именованных аргументов, а также счетчики количества элементов в массивах.</span><span class="sxs-lookup"><span data-stu-id="91365-859">Pointer to a structure containing an array of arguments, an array of argument DISPIDs for named arguments, and counts for the number of elements in the arrays.</span></span></param>
        <param name="pVarResult"><span data-ttu-id="91365-860">Указатель, по которому будет сохранен результат.</span><span class="sxs-lookup"><span data-stu-id="91365-860">Pointer to the location where the result is to be stored.</span></span></param>
        <param name="pExcepInfo"><span data-ttu-id="91365-861">Указатель на структуру, содержащую сведения об исключении.</span><span class="sxs-lookup"><span data-stu-id="91365-861">Pointer to a structure that contains exception information.</span></span></param>
        <param name="puArgErr"><span data-ttu-id="91365-862">Индекс первого аргумента, вызвавшего ошибку.</span><span class="sxs-lookup"><span data-stu-id="91365-862">The index of the first argument that has an error.</span></span></param>
        <summary><span data-ttu-id="91365-863">Предоставляет доступ к открытым свойствам и методам объекта.</span><span class="sxs-lookup"><span data-stu-id="91365-863">Provides access to properties and methods exposed by an object.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="91365-864">Этот метод предназначен для обеспечения доступа к управляемым классам из неуправляемого кода и не должен вызываться из управляемого кода.</span><span class="sxs-lookup"><span data-stu-id="91365-864">This method is for access to managed classes from unmanaged code, and should not be called from managed code.</span></span> <span data-ttu-id="91365-865">Дополнительные сведения о `IDispatch::Invoke`, см. в библиотеке MSDN.</span><span class="sxs-lookup"><span data-stu-id="91365-865">For more information about `IDispatch::Invoke`, see the MSDN Library.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.NotImplementedException"><span data-ttu-id="91365-866">Доступ с поздним связыванием с помощью COM-интерфейса <c>IDispatch</c> не поддерживается.</span><span class="sxs-lookup"><span data-stu-id="91365-866">Late-bound access using the COM <c>IDispatch</c> interface is not supported.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="ThreadState">
      <MemberSignature Language="C#" Value="public System.Threading.ThreadState ThreadState { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Threading.ThreadState ThreadState" />
      <MemberSignature Language="DocId" Value="P:System.Threading.Thread.ThreadState" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property ThreadState As ThreadState" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Threading::ThreadState ThreadState { System::Threading::ThreadState get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Thread</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.ThreadState</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="91365-867">Возвращает значение, содержащее состояния текущего потока.</span><span class="sxs-lookup"><span data-stu-id="91365-867">Gets a value containing the states of the current thread.</span></span></summary>
        <value><span data-ttu-id="91365-868">Одно из значений <see cref="T:System.Threading.ThreadState" />, показывающее состояние текущего потока.</span><span class="sxs-lookup"><span data-stu-id="91365-868">One of the <see cref="T:System.Threading.ThreadState" /> values indicating the state of the current thread.</span></span> <span data-ttu-id="91365-869">Начальное значение — <see langword="Unstarted" />.</span><span class="sxs-lookup"><span data-stu-id="91365-869">The initial value is <see langword="Unstarted" />.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="91365-870"><xref:System.Threading.Thread.ThreadState%2A> Более конкретные сведения о чем <xref:System.Threading.Thread.IsAlive%2A> свойство.</span><span class="sxs-lookup"><span data-stu-id="91365-870">The <xref:System.Threading.Thread.ThreadState%2A> property provides more specific information than the <xref:System.Threading.Thread.IsAlive%2A> property.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="91365-871">Состояние потока используется только в сценариях отладки.</span><span class="sxs-lookup"><span data-stu-id="91365-871">Thread state is only of interest in debugging scenarios.</span></span> <span data-ttu-id="91365-872">Не используйте в коде состояния потоков для синхронизации действий потоков.</span><span class="sxs-lookup"><span data-stu-id="91365-872">Your code should never use thread state to synchronize the activities of threads.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="91365-873">В следующем примере кода показано обращение к `ThreadState` потока.</span><span class="sxs-lookup"><span data-stu-id="91365-873">The following code example demonstrates accessing the `ThreadState` of a thread.</span></span>  
  
 [!code-cpp[System.Threading.Thread.ThreadState#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.threading.thread.threadstate/cpp/source.cpp#1)]
 [!code-csharp[System.Threading.Thread.ThreadState#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.threading.thread.threadstate/cs/source.cs#1)]
 [!code-vb[System.Threading.Thread.ThreadState#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.threading.thread.threadstate/vb/source.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="TrySetApartmentState">
      <MemberSignature Language="C#" Value="public bool TrySetApartmentState (System.Threading.ApartmentState state);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool TrySetApartmentState(valuetype System.Threading.ApartmentState state) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Thread.TrySetApartmentState(System.Threading.ApartmentState)" />
      <MemberSignature Language="VB.NET" Value="Public Function TrySetApartmentState (state As ApartmentState) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool TrySetApartmentState(System::Threading::ApartmentState state);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Thread</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="state" Type="System.Threading.ApartmentState" />
      </Parameters>
      <Docs>
        <param name="state"><span data-ttu-id="91365-874">Новая модель "apartment".</span><span class="sxs-lookup"><span data-stu-id="91365-874">The new apartment state.</span></span></param>
        <summary><span data-ttu-id="91365-875">Задает модель "apartment" для потока до его запуска.</span><span class="sxs-lookup"><span data-stu-id="91365-875">Sets the apartment state of a thread before it is started.</span></span></summary>
        <returns>
          <span data-ttu-id="91365-876">Значение <see langword="true" />, если задана модель "apartment"; в противном случае — значение <see langword="false" />.</span><span class="sxs-lookup"><span data-stu-id="91365-876"><see langword="true" /> if the apartment state is set; otherwise, <see langword="false" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="91365-877">Новые потоки инициализируются как <xref:System.Threading.ApartmentState.MTA?displayProperty=nameWithType> если их состояние подразделения не задано до их запуска.</span><span class="sxs-lookup"><span data-stu-id="91365-877">New threads are initialized as <xref:System.Threading.ApartmentState.MTA?displayProperty=nameWithType> if their apartment state has not been set before they are started.</span></span> <span data-ttu-id="91365-878">Необходимо задать состояние подразделения, до начала потока.</span><span class="sxs-lookup"><span data-stu-id="91365-878">Apartment state must be set before a thread is started.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="91365-879">Основной поток приложения инициализируется <xref:System.Threading.ApartmentState.MTA?displayProperty=nameWithType> по умолчанию.</span><span class="sxs-lookup"><span data-stu-id="91365-879">The main application thread is initialized to <xref:System.Threading.ApartmentState.MTA?displayProperty=nameWithType> by default.</span></span> <span data-ttu-id="91365-880">Единственный способ задать состояние подразделения потока основного приложения для <xref:System.Threading.ApartmentState.STA?displayProperty=nameWithType> заключается в применении <xref:System.STAThreadAttribute> атрибут к методу точки входа.</span><span class="sxs-lookup"><span data-stu-id="91365-880">The only way to set the apartment state of the main application thread to <xref:System.Threading.ApartmentState.STA?displayProperty=nameWithType> is to apply the <xref:System.STAThreadAttribute> attribute to the entry point method.</span></span>  
  
 <span data-ttu-id="91365-881"><xref:System.Threading.Thread.TrySetApartmentState%2A> Метод, вместе с <xref:System.Threading.Thread.GetApartmentState%2A> метод и <xref:System.Threading.Thread.SetApartmentState%2A> заменяет метод, <xref:System.Threading.Thread.ApartmentState%2A> свойство.</span><span class="sxs-lookup"><span data-stu-id="91365-881">The <xref:System.Threading.Thread.TrySetApartmentState%2A> method, along with the <xref:System.Threading.Thread.GetApartmentState%2A> method and the <xref:System.Threading.Thread.SetApartmentState%2A> method, replaces the <xref:System.Threading.Thread.ApartmentState%2A> property.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="91365-882">В следующем примере кода показано <xref:System.Threading.Thread.GetApartmentState%2A>, <xref:System.Threading.Thread.SetApartmentState%2A>, и <xref:System.Threading.Thread.TrySetApartmentState%2A> методы.</span><span class="sxs-lookup"><span data-stu-id="91365-882">The following code example demonstrates the <xref:System.Threading.Thread.GetApartmentState%2A>, <xref:System.Threading.Thread.SetApartmentState%2A>, and <xref:System.Threading.Thread.TrySetApartmentState%2A> methods.</span></span> <span data-ttu-id="91365-883">В примере кода создается поток.</span><span class="sxs-lookup"><span data-stu-id="91365-883">The code example creates a thread.</span></span> <span data-ttu-id="91365-884">До запуска потока <xref:System.Threading.Thread.GetApartmentState%2A> отображает начальный <xref:System.Threading.ApartmentState.Unknown?displayProperty=nameWithType> состояние и <xref:System.Threading.Thread.SetApartmentState%2A> изменяет состояние на <xref:System.Threading.ApartmentState.STA?displayProperty=nameWithType>.</span><span class="sxs-lookup"><span data-stu-id="91365-884">Before the thread is started, <xref:System.Threading.Thread.GetApartmentState%2A> displays the initial <xref:System.Threading.ApartmentState.Unknown?displayProperty=nameWithType> state and <xref:System.Threading.Thread.SetApartmentState%2A> changes the state to <xref:System.Threading.ApartmentState.STA?displayProperty=nameWithType>.</span></span> <span data-ttu-id="91365-885"><xref:System.Threading.Thread.TrySetApartmentState%2A> Метод затем возвращает `false` при попытке изменить состояние на <xref:System.Threading.ApartmentState.MTA?displayProperty=nameWithType> , так как состояние подразделения уже задано.</span><span class="sxs-lookup"><span data-stu-id="91365-885">The <xref:System.Threading.Thread.TrySetApartmentState%2A> method then returns `false` when attempting to change the state to <xref:System.Threading.ApartmentState.MTA?displayProperty=nameWithType> because the apartment state is already set.</span></span> <span data-ttu-id="91365-886">Если попыток одной операции с <xref:System.Threading.Thread.SetApartmentState%2A>, <xref:System.InvalidOperationException> бы исключение.</span><span class="sxs-lookup"><span data-stu-id="91365-886">If the same operation had been attempted with <xref:System.Threading.Thread.SetApartmentState%2A>, <xref:System.InvalidOperationException> would have been thrown.</span></span>  
  
 <span data-ttu-id="91365-887">После запуска потока <xref:System.Threading.Thread.TrySetApartmentState%2A> используется метод.</span><span class="sxs-lookup"><span data-stu-id="91365-887">After the thread is started, the <xref:System.Threading.Thread.TrySetApartmentState%2A> method is used again.</span></span> <span data-ttu-id="91365-888">Это время, создается исключение <xref:System.Threading.ThreadStateException> поскольку поток уже запущен.</span><span class="sxs-lookup"><span data-stu-id="91365-888">This time it throws <xref:System.Threading.ThreadStateException> because the thread has already been started.</span></span>  
  
 [!code-cpp[Thread.GetSetTrySetApartmentState#1](~/samples/snippets/cpp/VS_Snippets_CLR/Thread.GetSetTrySetApartmentState/cpp/source.cpp#1)]
 [!code-csharp[Thread.GetSetTrySetApartmentState#1](~/samples/snippets/csharp/VS_Snippets_CLR/Thread.GetSetTrySetApartmentState/cs/source.cs#1)]
 [!code-vb[Thread.GetSetTrySetApartmentState#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/Thread.GetSetTrySetApartmentState/vb/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="91365-889"><paramref name="state" /> не является действительным состоянием апартамента.</span><span class="sxs-lookup"><span data-stu-id="91365-889"><paramref name="state" /> is not a valid apartment state.</span></span></exception>
        <exception cref="T:System.Threading.ThreadStateException"><span data-ttu-id="91365-890">Поток уже запущен.</span><span class="sxs-lookup"><span data-stu-id="91365-890">The thread has already been started.</span></span></exception>
      </Docs>
    </Member>
    <MemberGroup MemberName="VolatileRead">
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="91365-891">Считывает значение поля.</span><span class="sxs-lookup"><span data-stu-id="91365-891">Reads the value of a field.</span></span> <span data-ttu-id="91365-892">Это значение является последним записанным каким-либо из процессоров компьютера, независимо от количества процессоров и от состояния кэш-буфера процессоров.</span><span class="sxs-lookup"><span data-stu-id="91365-892">The value is the latest written by any processor in a computer, regardless of the number of processors or the state of processor cache.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="VolatileRead">
      <MemberSignature Language="C#" Value="public static byte VolatileRead (ref byte address);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig unsigned int8 VolatileRead(unsigned int8&amp; address) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Thread.VolatileRead(System.Byte@)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function VolatileRead (ByRef address As Byte) As Byte" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Byte VolatileRead(System::Byte % address);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Thread</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Byte</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="address" Type="System.Byte&amp;" RefType="ref" />
      </Parameters>
      <Docs>
        <param name="address"><span data-ttu-id="91365-893">Поле для чтения.</span><span class="sxs-lookup"><span data-stu-id="91365-893">The field to be read.</span></span></param>
        <summary><span data-ttu-id="91365-894">Считывает значение поля.</span><span class="sxs-lookup"><span data-stu-id="91365-894">Reads the value of a field.</span></span> <span data-ttu-id="91365-895">Это значение является последним записанным каким-либо из процессоров компьютера, независимо от количества процессоров и от состояния кэш-буфера процессоров.</span><span class="sxs-lookup"><span data-stu-id="91365-895">The value is the latest written by any processor in a computer, regardless of the number of processors or the state of processor cache.</span></span></summary>
        <returns><span data-ttu-id="91365-896">Последнее значение, записанное в поле любым процессором.</span><span class="sxs-lookup"><span data-stu-id="91365-896">The latest value written to the field by any processor.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="91365-897"><xref:System.Threading.Thread.VolatileRead%2A> и <xref:System.Threading.Thread.VolatileWrite%2A> предназначены для особых случаев синхронизации.</span><span class="sxs-lookup"><span data-stu-id="91365-897"><xref:System.Threading.Thread.VolatileRead%2A> and <xref:System.Threading.Thread.VolatileWrite%2A> are for special cases of synchronization.</span></span> <span data-ttu-id="91365-898">В обычных условиях C# `lock` оператор, Visual Basic `SyncLock` инструкции и <xref:System.Threading.Monitor> класса предоставляют более простые альтернативы.</span><span class="sxs-lookup"><span data-stu-id="91365-898">Under normal circumstances, the C# `lock` statement, the Visual Basic `SyncLock` statement, and the <xref:System.Threading.Monitor> class provide easier alternatives.</span></span>  
  
 <span data-ttu-id="91365-899">В многопроцессорной системе <xref:System.Threading.Thread.VolatileRead%2A> Получает самое последнее значение, записанное в ячейку памяти любым процессором.</span><span class="sxs-lookup"><span data-stu-id="91365-899">On a multiprocessor system, <xref:System.Threading.Thread.VolatileRead%2A> obtains the very latest value written to a memory location by any processor.</span></span> <span data-ttu-id="91365-900">Для этого может потребоваться сброс кэша процессора.</span><span class="sxs-lookup"><span data-stu-id="91365-900">This might require flushing processor caches.</span></span>  
  
 <span data-ttu-id="91365-901">Даже в системе однопроцессорный <xref:System.Threading.Thread.VolatileRead%2A> и <xref:System.Threading.Thread.VolatileWrite%2A> убедитесь, что значение чтения или записи в память и не кэшируются (например, в регистре процессора).</span><span class="sxs-lookup"><span data-stu-id="91365-901">Even on a uniprocessor system, <xref:System.Threading.Thread.VolatileRead%2A> and <xref:System.Threading.Thread.VolatileWrite%2A> ensure that a value is read or written to memory, and not cached (for example, in a processor register).</span></span> <span data-ttu-id="91365-902">Таким образом их можно использовать для синхронизации доступа к полю, которое может быть обновлено другим потоком, или оборудования.</span><span class="sxs-lookup"><span data-stu-id="91365-902">Thus, you can use them to synchronize access to a field that can be updated by another thread, or by hardware.</span></span>  
  
 <span data-ttu-id="91365-903">Вызов этого метода влияет только однократный доступ к памяти.</span><span class="sxs-lookup"><span data-stu-id="91365-903">Calling this method affects only a single memory access.</span></span> <span data-ttu-id="91365-904">Для предоставления эффективной синхронизации для поля, необходимо использовать весь доступ к полю <xref:System.Threading.Thread.VolatileRead%2A> или <xref:System.Threading.Thread.VolatileWrite%2A>.</span><span class="sxs-lookup"><span data-stu-id="91365-904">To provide effective synchronization for a field, all access to the field must use <xref:System.Threading.Thread.VolatileRead%2A> or <xref:System.Threading.Thread.VolatileWrite%2A>.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="91365-905">В C# с помощью `volatile` модификатор поля гарантирует, что весь доступ к этому полю использует <xref:System.Threading.Thread.VolatileRead%2A> или <xref:System.Threading.Thread.VolatileWrite%2A>.</span><span class="sxs-lookup"><span data-stu-id="91365-905">In C#, using the `volatile` modifier on a field guarantees that all access to that field uses <xref:System.Threading.Thread.VolatileRead%2A> or <xref:System.Threading.Thread.VolatileWrite%2A>.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="VolatileRead">
      <MemberSignature Language="C#" Value="public static double VolatileRead (ref double address);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig float64 VolatileRead(float64&amp; address) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Thread.VolatileRead(System.Double@)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function VolatileRead (ByRef address As Double) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static double VolatileRead(double % address);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Thread</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="address" Type="System.Double&amp;" RefType="ref" />
      </Parameters>
      <Docs>
        <param name="address"><span data-ttu-id="91365-906">Поле для чтения.</span><span class="sxs-lookup"><span data-stu-id="91365-906">The field to be read.</span></span></param>
        <summary><span data-ttu-id="91365-907">Считывает значение поля.</span><span class="sxs-lookup"><span data-stu-id="91365-907">Reads the value of a field.</span></span> <span data-ttu-id="91365-908">Это значение является последним записанным каким-либо из процессоров компьютера, независимо от количества процессоров и от состояния кэш-буфера процессоров.</span><span class="sxs-lookup"><span data-stu-id="91365-908">The value is the latest written by any processor in a computer, regardless of the number of processors or the state of processor cache.</span></span></summary>
        <returns><span data-ttu-id="91365-909">Последнее значение, записанное в поле любым процессором.</span><span class="sxs-lookup"><span data-stu-id="91365-909">The latest value written to the field by any processor.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="91365-910"><xref:System.Threading.Thread.VolatileRead%2A> и <xref:System.Threading.Thread.VolatileWrite%2A> предназначены для особых случаев синхронизации.</span><span class="sxs-lookup"><span data-stu-id="91365-910"><xref:System.Threading.Thread.VolatileRead%2A> and <xref:System.Threading.Thread.VolatileWrite%2A> are for special cases of synchronization.</span></span> <span data-ttu-id="91365-911">В обычных условиях C# `lock` оператор, Visual Basic `SyncLock` инструкции и <xref:System.Threading.Monitor> класса предоставляют более простые альтернативы.</span><span class="sxs-lookup"><span data-stu-id="91365-911">Under normal circumstances, the C# `lock` statement, the Visual Basic `SyncLock` statement, and the <xref:System.Threading.Monitor> class provide easier alternatives.</span></span>  
  
 <span data-ttu-id="91365-912">В многопроцессорной системе <xref:System.Threading.Thread.VolatileRead%2A> Получает самое последнее значение, записанное в ячейку памяти любым процессором.</span><span class="sxs-lookup"><span data-stu-id="91365-912">On a multiprocessor system, <xref:System.Threading.Thread.VolatileRead%2A> obtains the very latest value written to a memory location by any processor.</span></span> <span data-ttu-id="91365-913">Для этого может потребоваться сброс кэша процессора.</span><span class="sxs-lookup"><span data-stu-id="91365-913">This might require flushing processor caches.</span></span>  
  
 <span data-ttu-id="91365-914">Даже в системе однопроцессорный <xref:System.Threading.Thread.VolatileRead%2A> и <xref:System.Threading.Thread.VolatileWrite%2A> убедитесь, что значение чтения или записи в память и не кэшируются (например, в регистре процессора).</span><span class="sxs-lookup"><span data-stu-id="91365-914">Even on a uniprocessor system, <xref:System.Threading.Thread.VolatileRead%2A> and <xref:System.Threading.Thread.VolatileWrite%2A> ensure that a value is read or written to memory, and not cached (for example, in a processor register).</span></span> <span data-ttu-id="91365-915">Таким образом их можно использовать для синхронизации доступа к полю, которое может быть обновлено другим потоком, или оборудования.</span><span class="sxs-lookup"><span data-stu-id="91365-915">Thus, you can use them to synchronize access to a field that can be updated by another thread, or by hardware.</span></span>  
  
 <span data-ttu-id="91365-916">Вызов этого метода влияет только однократный доступ к памяти.</span><span class="sxs-lookup"><span data-stu-id="91365-916">Calling this method affects only a single memory access.</span></span> <span data-ttu-id="91365-917">Для предоставления эффективной синхронизации для поля, необходимо использовать весь доступ к полю <xref:System.Threading.Thread.VolatileRead%2A> или <xref:System.Threading.Thread.VolatileWrite%2A>.</span><span class="sxs-lookup"><span data-stu-id="91365-917">To provide effective synchronization for a field, all access to the field must use <xref:System.Threading.Thread.VolatileRead%2A> or <xref:System.Threading.Thread.VolatileWrite%2A>.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="91365-918">В C# с помощью `volatile` модификатор поля гарантирует, что весь доступ к этому полю использует <xref:System.Threading.Thread.VolatileRead%2A> или <xref:System.Threading.Thread.VolatileWrite%2A>.</span><span class="sxs-lookup"><span data-stu-id="91365-918">In C#, using the `volatile` modifier on a field guarantees that all access to that field uses <xref:System.Threading.Thread.VolatileRead%2A> or <xref:System.Threading.Thread.VolatileWrite%2A>.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="VolatileRead">
      <MemberSignature Language="C#" Value="public static short VolatileRead (ref short address);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig int16 VolatileRead(int16&amp; address) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Thread.VolatileRead(System.Int16@)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function VolatileRead (ByRef address As Short) As Short" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static short VolatileRead(short % address);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Thread</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int16</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="address" Type="System.Int16&amp;" RefType="ref" />
      </Parameters>
      <Docs>
        <param name="address"><span data-ttu-id="91365-919">Поле для чтения.</span><span class="sxs-lookup"><span data-stu-id="91365-919">The field to be read.</span></span></param>
        <summary><span data-ttu-id="91365-920">Считывает значение поля.</span><span class="sxs-lookup"><span data-stu-id="91365-920">Reads the value of a field.</span></span> <span data-ttu-id="91365-921">Это значение является последним записанным каким-либо из процессоров компьютера, независимо от количества процессоров и от состояния кэш-буфера процессоров.</span><span class="sxs-lookup"><span data-stu-id="91365-921">The value is the latest written by any processor in a computer, regardless of the number of processors or the state of processor cache.</span></span></summary>
        <returns><span data-ttu-id="91365-922">Последнее значение, записанное в поле любым процессором.</span><span class="sxs-lookup"><span data-stu-id="91365-922">The latest value written to the field by any processor.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="91365-923"><xref:System.Threading.Thread.VolatileRead%2A> и <xref:System.Threading.Thread.VolatileWrite%2A> предназначены для особых случаев синхронизации.</span><span class="sxs-lookup"><span data-stu-id="91365-923"><xref:System.Threading.Thread.VolatileRead%2A> and <xref:System.Threading.Thread.VolatileWrite%2A> are for special cases of synchronization.</span></span> <span data-ttu-id="91365-924">В обычных условиях C# `lock` оператор, Visual Basic `SyncLock` инструкции и <xref:System.Threading.Monitor> класса предоставляют более простые альтернативы.</span><span class="sxs-lookup"><span data-stu-id="91365-924">Under normal circumstances, the C# `lock` statement, the Visual Basic `SyncLock` statement, and the <xref:System.Threading.Monitor> class provide easier alternatives.</span></span>  
  
 <span data-ttu-id="91365-925">В многопроцессорной системе <xref:System.Threading.Thread.VolatileRead%2A> Получает самое последнее значение, записанное в ячейку памяти любым процессором.</span><span class="sxs-lookup"><span data-stu-id="91365-925">On a multiprocessor system, <xref:System.Threading.Thread.VolatileRead%2A> obtains the very latest value written to a memory location by any processor.</span></span> <span data-ttu-id="91365-926">Для этого может потребоваться сброс кэша процессора.</span><span class="sxs-lookup"><span data-stu-id="91365-926">This might require flushing processor caches.</span></span>  
  
 <span data-ttu-id="91365-927">Даже в системе однопроцессорный <xref:System.Threading.Thread.VolatileRead%2A> и <xref:System.Threading.Thread.VolatileWrite%2A> убедитесь, что значение чтения или записи в память и не кэшируются (например, в регистре процессора).</span><span class="sxs-lookup"><span data-stu-id="91365-927">Even on a uniprocessor system, <xref:System.Threading.Thread.VolatileRead%2A> and <xref:System.Threading.Thread.VolatileWrite%2A> ensure that a value is read or written to memory, and not cached (for example, in a processor register).</span></span> <span data-ttu-id="91365-928">Таким образом их можно использовать для синхронизации доступа к полю, которое может быть обновлено другим потоком, или оборудования.</span><span class="sxs-lookup"><span data-stu-id="91365-928">Thus, you can use them to synchronize access to a field that can be updated by another thread, or by hardware.</span></span>  
  
 <span data-ttu-id="91365-929">Вызов этого метода влияет только однократный доступ к памяти.</span><span class="sxs-lookup"><span data-stu-id="91365-929">Calling this method affects only a single memory access.</span></span> <span data-ttu-id="91365-930">Для предоставления эффективной синхронизации для поля, необходимо использовать весь доступ к полю <xref:System.Threading.Thread.VolatileRead%2A> или <xref:System.Threading.Thread.VolatileWrite%2A>.</span><span class="sxs-lookup"><span data-stu-id="91365-930">To provide effective synchronization for a field, all access to the field must use <xref:System.Threading.Thread.VolatileRead%2A> or <xref:System.Threading.Thread.VolatileWrite%2A>.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="91365-931">В C# с помощью `volatile` модификатор поля гарантирует, что весь доступ к этому полю использует <xref:System.Threading.Thread.VolatileRead%2A> или <xref:System.Threading.Thread.VolatileWrite%2A>.</span><span class="sxs-lookup"><span data-stu-id="91365-931">In C#, using the `volatile` modifier on a field guarantees that all access to that field uses <xref:System.Threading.Thread.VolatileRead%2A> or <xref:System.Threading.Thread.VolatileWrite%2A>.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="VolatileRead">
      <MemberSignature Language="C#" Value="public static int VolatileRead (ref int address);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig int32 VolatileRead(int32&amp; address) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Thread.VolatileRead(System.Int32@)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function VolatileRead (ByRef address As Integer) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static int VolatileRead(int % address);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Thread</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="address" Type="System.Int32&amp;" RefType="ref" />
      </Parameters>
      <Docs>
        <param name="address"><span data-ttu-id="91365-932">Поле для чтения.</span><span class="sxs-lookup"><span data-stu-id="91365-932">The field to be read.</span></span></param>
        <summary><span data-ttu-id="91365-933">Считывает значение поля.</span><span class="sxs-lookup"><span data-stu-id="91365-933">Reads the value of a field.</span></span> <span data-ttu-id="91365-934">Это значение является последним записанным каким-либо из процессоров компьютера, независимо от количества процессоров и от состояния кэш-буфера процессоров.</span><span class="sxs-lookup"><span data-stu-id="91365-934">The value is the latest written by any processor in a computer, regardless of the number of processors or the state of processor cache.</span></span></summary>
        <returns><span data-ttu-id="91365-935">Последнее значение, записанное в поле любым процессором.</span><span class="sxs-lookup"><span data-stu-id="91365-935">The latest value written to the field by any processor.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="91365-936"><xref:System.Threading.Thread.VolatileRead%2A> и <xref:System.Threading.Thread.VolatileWrite%2A> предназначены для особых случаев синхронизации.</span><span class="sxs-lookup"><span data-stu-id="91365-936"><xref:System.Threading.Thread.VolatileRead%2A> and <xref:System.Threading.Thread.VolatileWrite%2A> are for special cases of synchronization.</span></span> <span data-ttu-id="91365-937">В обычных условиях C# `lock` оператор, Visual Basic `SyncLock` инструкции и <xref:System.Threading.Monitor> класса предоставляют более простые альтернативы.</span><span class="sxs-lookup"><span data-stu-id="91365-937">Under normal circumstances, the C# `lock` statement, the Visual Basic `SyncLock` statement, and the <xref:System.Threading.Monitor> class provide easier alternatives.</span></span>  
  
 <span data-ttu-id="91365-938">В многопроцессорной системе <xref:System.Threading.Thread.VolatileRead%2A> Получает самое последнее значение, записанное в ячейку памяти любым процессором.</span><span class="sxs-lookup"><span data-stu-id="91365-938">On a multiprocessor system, <xref:System.Threading.Thread.VolatileRead%2A> obtains the very latest value written to a memory location by any processor.</span></span> <span data-ttu-id="91365-939">Для этого может потребоваться сброс кэша процессора.</span><span class="sxs-lookup"><span data-stu-id="91365-939">This might require flushing processor caches.</span></span>  
  
 <span data-ttu-id="91365-940">Даже в системе однопроцессорный <xref:System.Threading.Thread.VolatileRead%2A> и <xref:System.Threading.Thread.VolatileWrite%2A> убедитесь, что значение чтения или записи в память и не кэшируются (например, в регистре процессора).</span><span class="sxs-lookup"><span data-stu-id="91365-940">Even on a uniprocessor system, <xref:System.Threading.Thread.VolatileRead%2A> and <xref:System.Threading.Thread.VolatileWrite%2A> ensure that a value is read or written to memory, and not cached (for example, in a processor register).</span></span> <span data-ttu-id="91365-941">Таким образом их можно использовать для синхронизации доступа к полю, которое может быть обновлено другим потоком, или оборудования.</span><span class="sxs-lookup"><span data-stu-id="91365-941">Thus, you can use them to synchronize access to a field that can be updated by another thread, or by hardware.</span></span>  
  
 <span data-ttu-id="91365-942">Вызов этого метода влияет только однократный доступ к памяти.</span><span class="sxs-lookup"><span data-stu-id="91365-942">Calling this method affects only a single memory access.</span></span> <span data-ttu-id="91365-943">Для предоставления эффективной синхронизации для поля, необходимо использовать весь доступ к полю <xref:System.Threading.Thread.VolatileRead%2A> или <xref:System.Threading.Thread.VolatileWrite%2A>.</span><span class="sxs-lookup"><span data-stu-id="91365-943">To provide effective synchronization for a field, all access to the field must use <xref:System.Threading.Thread.VolatileRead%2A> or <xref:System.Threading.Thread.VolatileWrite%2A>.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="91365-944">В C# с помощью `volatile` модификатор поля гарантирует, что весь доступ к этому полю использует <xref:System.Threading.Thread.VolatileRead%2A> или <xref:System.Threading.Thread.VolatileWrite%2A>.</span><span class="sxs-lookup"><span data-stu-id="91365-944">In C#, using the `volatile` modifier on a field guarantees that all access to that field uses <xref:System.Threading.Thread.VolatileRead%2A> or <xref:System.Threading.Thread.VolatileWrite%2A>.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="VolatileRead">
      <MemberSignature Language="C#" Value="public static long VolatileRead (ref long address);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig int64 VolatileRead(int64&amp; address) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Thread.VolatileRead(System.Int64@)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function VolatileRead (ByRef address As Long) As Long" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static long VolatileRead(long % address);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Thread</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int64</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="address" Type="System.Int64&amp;" RefType="ref" />
      </Parameters>
      <Docs>
        <param name="address"><span data-ttu-id="91365-945">Поле для чтения.</span><span class="sxs-lookup"><span data-stu-id="91365-945">The field to be read.</span></span></param>
        <summary><span data-ttu-id="91365-946">Считывает значение поля.</span><span class="sxs-lookup"><span data-stu-id="91365-946">Reads the value of a field.</span></span> <span data-ttu-id="91365-947">Это значение является последним записанным каким-либо из процессоров компьютера, независимо от количества процессоров и от состояния кэш-буфера процессоров.</span><span class="sxs-lookup"><span data-stu-id="91365-947">The value is the latest written by any processor in a computer, regardless of the number of processors or the state of processor cache.</span></span></summary>
        <returns><span data-ttu-id="91365-948">Последнее значение, записанное в поле любым процессором.</span><span class="sxs-lookup"><span data-stu-id="91365-948">The latest value written to the field by any processor.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="91365-949"><xref:System.Threading.Thread.VolatileRead%2A> и <xref:System.Threading.Thread.VolatileWrite%2A> предназначены для особых случаев синхронизации.</span><span class="sxs-lookup"><span data-stu-id="91365-949"><xref:System.Threading.Thread.VolatileRead%2A> and <xref:System.Threading.Thread.VolatileWrite%2A> are for special cases of synchronization.</span></span> <span data-ttu-id="91365-950">В обычных условиях C# `lock` оператор, Visual Basic `SyncLock` инструкции и <xref:System.Threading.Monitor> класса предоставляют более простые альтернативы.</span><span class="sxs-lookup"><span data-stu-id="91365-950">Under normal circumstances, the C# `lock` statement, the Visual Basic `SyncLock` statement, and the <xref:System.Threading.Monitor> class provide easier alternatives.</span></span>  
  
 <span data-ttu-id="91365-951">В многопроцессорной системе <xref:System.Threading.Thread.VolatileRead%2A> Получает самое последнее значение, записанное в ячейку памяти любым процессором.</span><span class="sxs-lookup"><span data-stu-id="91365-951">On a multiprocessor system, <xref:System.Threading.Thread.VolatileRead%2A> obtains the very latest value written to a memory location by any processor.</span></span> <span data-ttu-id="91365-952">Для этого может потребоваться сброс кэша процессора.</span><span class="sxs-lookup"><span data-stu-id="91365-952">This might require flushing processor caches.</span></span>  
  
 <span data-ttu-id="91365-953">Даже в системе однопроцессорный <xref:System.Threading.Thread.VolatileRead%2A> и <xref:System.Threading.Thread.VolatileWrite%2A> убедитесь, что значение чтения или записи в память и не кэшируются (например, в регистре процессора).</span><span class="sxs-lookup"><span data-stu-id="91365-953">Even on a uniprocessor system, <xref:System.Threading.Thread.VolatileRead%2A> and <xref:System.Threading.Thread.VolatileWrite%2A> ensure that a value is read or written to memory, and not cached (for example, in a processor register).</span></span> <span data-ttu-id="91365-954">Таким образом их можно использовать для синхронизации доступа к полю, которое может быть обновлено другим потоком, или оборудования.</span><span class="sxs-lookup"><span data-stu-id="91365-954">Thus, you can use them to synchronize access to a field that can be updated by another thread, or by hardware.</span></span>  
  
 <span data-ttu-id="91365-955">Вызов этого метода влияет только однократный доступ к памяти.</span><span class="sxs-lookup"><span data-stu-id="91365-955">Calling this method affects only a single memory access.</span></span> <span data-ttu-id="91365-956">Для предоставления эффективной синхронизации для поля, необходимо использовать весь доступ к полю <xref:System.Threading.Thread.VolatileRead%2A> или <xref:System.Threading.Thread.VolatileWrite%2A>.</span><span class="sxs-lookup"><span data-stu-id="91365-956">To provide effective synchronization for a field, all access to the field must use <xref:System.Threading.Thread.VolatileRead%2A> or <xref:System.Threading.Thread.VolatileWrite%2A>.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="91365-957">В C# с помощью `volatile` модификатор поля гарантирует, что весь доступ к этому полю использует <xref:System.Threading.Thread.VolatileRead%2A> или <xref:System.Threading.Thread.VolatileWrite%2A>.</span><span class="sxs-lookup"><span data-stu-id="91365-957">In C#, using the `volatile` modifier on a field guarantees that all access to that field uses <xref:System.Threading.Thread.VolatileRead%2A> or <xref:System.Threading.Thread.VolatileWrite%2A>.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="VolatileRead">
      <MemberSignature Language="C#" Value="public static IntPtr VolatileRead (ref IntPtr address);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig native int VolatileRead(native int&amp; address) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Thread.VolatileRead(System.IntPtr@)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function VolatileRead (ByRef address As IntPtr) As IntPtr" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static IntPtr VolatileRead(IntPtr % address);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Thread</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IntPtr</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="address" Type="System.IntPtr&amp;" RefType="ref" />
      </Parameters>
      <Docs>
        <param name="address"><span data-ttu-id="91365-958">Поле для чтения.</span><span class="sxs-lookup"><span data-stu-id="91365-958">The field to be read.</span></span></param>
        <summary><span data-ttu-id="91365-959">Считывает значение поля.</span><span class="sxs-lookup"><span data-stu-id="91365-959">Reads the value of a field.</span></span> <span data-ttu-id="91365-960">Это значение является последним записанным каким-либо из процессоров компьютера, независимо от количества процессоров и от состояния кэш-буфера процессоров.</span><span class="sxs-lookup"><span data-stu-id="91365-960">The value is the latest written by any processor in a computer, regardless of the number of processors or the state of processor cache.</span></span></summary>
        <returns><span data-ttu-id="91365-961">Последнее значение, записанное в поле любым процессором.</span><span class="sxs-lookup"><span data-stu-id="91365-961">The latest value written to the field by any processor.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="91365-962"><xref:System.Threading.Thread.VolatileRead%2A> и <xref:System.Threading.Thread.VolatileWrite%2A> предназначены для особых случаев синхронизации.</span><span class="sxs-lookup"><span data-stu-id="91365-962"><xref:System.Threading.Thread.VolatileRead%2A> and <xref:System.Threading.Thread.VolatileWrite%2A> are for special cases of synchronization.</span></span> <span data-ttu-id="91365-963">В обычных условиях C# `lock` оператор, Visual Basic `SyncLock` инструкции и <xref:System.Threading.Monitor> класса предоставляют более простые альтернативы.</span><span class="sxs-lookup"><span data-stu-id="91365-963">Under normal circumstances, the C# `lock` statement, the Visual Basic `SyncLock` statement, and the <xref:System.Threading.Monitor> class provide easier alternatives.</span></span>  
  
 <span data-ttu-id="91365-964">В многопроцессорной системе <xref:System.Threading.Thread.VolatileRead%2A> Получает самое последнее значение, записанное в ячейку памяти любым процессором.</span><span class="sxs-lookup"><span data-stu-id="91365-964">On a multiprocessor system, <xref:System.Threading.Thread.VolatileRead%2A> obtains the very latest value written to a memory location by any processor.</span></span> <span data-ttu-id="91365-965">Для этого может потребоваться сброс кэша процессора.</span><span class="sxs-lookup"><span data-stu-id="91365-965">This might require flushing processor caches.</span></span>  
  
 <span data-ttu-id="91365-966">Даже в системе однопроцессорный <xref:System.Threading.Thread.VolatileRead%2A> и <xref:System.Threading.Thread.VolatileWrite%2A> убедитесь, что значение чтения или записи в память и не кэшируются (например, в регистре процессора).</span><span class="sxs-lookup"><span data-stu-id="91365-966">Even on a uniprocessor system, <xref:System.Threading.Thread.VolatileRead%2A> and <xref:System.Threading.Thread.VolatileWrite%2A> ensure that a value is read or written to memory, and not cached (for example, in a processor register).</span></span> <span data-ttu-id="91365-967">Таким образом их можно использовать для синхронизации доступа к полю, которое может быть обновлено другим потоком, или оборудования.</span><span class="sxs-lookup"><span data-stu-id="91365-967">Thus, you can use them to synchronize access to a field that can be updated by another thread, or by hardware.</span></span>  
  
 <span data-ttu-id="91365-968">Вызов этого метода влияет только однократный доступ к памяти.</span><span class="sxs-lookup"><span data-stu-id="91365-968">Calling this method affects only a single memory access.</span></span> <span data-ttu-id="91365-969">Для предоставления эффективной синхронизации для поля, необходимо использовать весь доступ к полю <xref:System.Threading.Thread.VolatileRead%2A> или <xref:System.Threading.Thread.VolatileWrite%2A>.</span><span class="sxs-lookup"><span data-stu-id="91365-969">To provide effective synchronization for a field, all access to the field must use <xref:System.Threading.Thread.VolatileRead%2A> or <xref:System.Threading.Thread.VolatileWrite%2A>.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="91365-970">В C# с помощью `volatile` модификатор поля гарантирует, что весь доступ к этому полю использует <xref:System.Threading.Thread.VolatileRead%2A> или <xref:System.Threading.Thread.VolatileWrite%2A>.</span><span class="sxs-lookup"><span data-stu-id="91365-970">In C#, using the `volatile` modifier on a field guarantees that all access to that field uses <xref:System.Threading.Thread.VolatileRead%2A> or <xref:System.Threading.Thread.VolatileWrite%2A>.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="VolatileRead">
      <MemberSignature Language="C#" Value="public static object VolatileRead (ref object address);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig object VolatileRead(object&amp; address) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Thread.VolatileRead(System.Object@)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function VolatileRead (ByRef address As Object) As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Object ^ VolatileRead(System::Object ^ % address);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Thread</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="address" Type="System.Object&amp;" RefType="ref" />
      </Parameters>
      <Docs>
        <param name="address"><span data-ttu-id="91365-971">Поле для чтения.</span><span class="sxs-lookup"><span data-stu-id="91365-971">The field to be read.</span></span></param>
        <summary><span data-ttu-id="91365-972">Считывает значение поля.</span><span class="sxs-lookup"><span data-stu-id="91365-972">Reads the value of a field.</span></span> <span data-ttu-id="91365-973">Это значение является последним записанным каким-либо из процессоров компьютера, независимо от количества процессоров и от состояния кэш-буфера процессоров.</span><span class="sxs-lookup"><span data-stu-id="91365-973">The value is the latest written by any processor in a computer, regardless of the number of processors or the state of processor cache.</span></span></summary>
        <returns><span data-ttu-id="91365-974">Последнее значение, записанное в поле любым процессором.</span><span class="sxs-lookup"><span data-stu-id="91365-974">The latest value written to the field by any processor.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="91365-975"><xref:System.Threading.Thread.VolatileRead%2A> и <xref:System.Threading.Thread.VolatileWrite%2A> предназначены для особых случаев синхронизации.</span><span class="sxs-lookup"><span data-stu-id="91365-975"><xref:System.Threading.Thread.VolatileRead%2A> and <xref:System.Threading.Thread.VolatileWrite%2A> are for special cases of synchronization.</span></span> <span data-ttu-id="91365-976">В обычных условиях C# `lock` оператор, Visual Basic `SyncLock` инструкции и <xref:System.Threading.Monitor> класса предоставляют более простые альтернативы.</span><span class="sxs-lookup"><span data-stu-id="91365-976">Under normal circumstances, the C# `lock` statement, the Visual Basic `SyncLock` statement, and the <xref:System.Threading.Monitor> class provide easier alternatives.</span></span>  
  
 <span data-ttu-id="91365-977">В многопроцессорной системе <xref:System.Threading.Thread.VolatileRead%2A> Получает самое последнее значение, записанное в ячейку памяти любым процессором.</span><span class="sxs-lookup"><span data-stu-id="91365-977">On a multiprocessor system, <xref:System.Threading.Thread.VolatileRead%2A> obtains the very latest value written to a memory location by any processor.</span></span> <span data-ttu-id="91365-978">Для этого может потребоваться сброс кэша процессора.</span><span class="sxs-lookup"><span data-stu-id="91365-978">This might require flushing processor caches.</span></span>  
  
 <span data-ttu-id="91365-979">Даже в системе однопроцессорный <xref:System.Threading.Thread.VolatileRead%2A> и <xref:System.Threading.Thread.VolatileWrite%2A> убедитесь, что значение чтения или записи в память и не кэшируются (например, в регистре процессора).</span><span class="sxs-lookup"><span data-stu-id="91365-979">Even on a uniprocessor system, <xref:System.Threading.Thread.VolatileRead%2A> and <xref:System.Threading.Thread.VolatileWrite%2A> ensure that a value is read or written to memory, and not cached (for example, in a processor register).</span></span> <span data-ttu-id="91365-980">Таким образом их можно использовать для синхронизации доступа к полю, которое может быть обновлено другим потоком, или оборудования.</span><span class="sxs-lookup"><span data-stu-id="91365-980">Thus, you can use them to synchronize access to a field that can be updated by another thread, or by hardware.</span></span>  
  
 <span data-ttu-id="91365-981">Вызов этого метода влияет только однократный доступ к памяти.</span><span class="sxs-lookup"><span data-stu-id="91365-981">Calling this method affects only a single memory access.</span></span> <span data-ttu-id="91365-982">Для предоставления эффективной синхронизации для поля, необходимо использовать весь доступ к полю <xref:System.Threading.Thread.VolatileRead%2A> или <xref:System.Threading.Thread.VolatileWrite%2A>.</span><span class="sxs-lookup"><span data-stu-id="91365-982">To provide effective synchronization for a field, all access to the field must use <xref:System.Threading.Thread.VolatileRead%2A> or <xref:System.Threading.Thread.VolatileWrite%2A>.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="91365-983">В C# с помощью `volatile` модификатор поля гарантирует, что весь доступ к этому полю использует <xref:System.Threading.Thread.VolatileRead%2A> или <xref:System.Threading.Thread.VolatileWrite%2A>.</span><span class="sxs-lookup"><span data-stu-id="91365-983">In C#, using the `volatile` modifier on a field guarantees that all access to that field uses <xref:System.Threading.Thread.VolatileRead%2A> or <xref:System.Threading.Thread.VolatileWrite%2A>.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="VolatileRead">
      <MemberSignature Language="C#" Value="public static sbyte VolatileRead (ref sbyte address);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig int8 VolatileRead(int8&amp; address) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Thread.VolatileRead(System.SByte@)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function VolatileRead (ByRef address As SByte) As SByte" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::SByte VolatileRead(System::SByte % address);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Thread</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.SByte</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="address" Type="System.SByte&amp;" RefType="ref" />
      </Parameters>
      <Docs>
        <param name="address"><span data-ttu-id="91365-984">Поле для чтения.</span><span class="sxs-lookup"><span data-stu-id="91365-984">The field to be read.</span></span></param>
        <summary><span data-ttu-id="91365-985">Считывает значение поля.</span><span class="sxs-lookup"><span data-stu-id="91365-985">Reads the value of a field.</span></span> <span data-ttu-id="91365-986">Это значение является последним записанным каким-либо из процессоров компьютера, независимо от количества процессоров и от состояния кэш-буфера процессоров.</span><span class="sxs-lookup"><span data-stu-id="91365-986">The value is the latest written by any processor in a computer, regardless of the number of processors or the state of processor cache.</span></span></summary>
        <returns><span data-ttu-id="91365-987">Последнее значение, записанное в поле любым процессором.</span><span class="sxs-lookup"><span data-stu-id="91365-987">The latest value written to the field by any processor.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="91365-988"><xref:System.Threading.Thread.VolatileRead%2A> и <xref:System.Threading.Thread.VolatileWrite%2A> предназначены для особых случаев синхронизации.</span><span class="sxs-lookup"><span data-stu-id="91365-988"><xref:System.Threading.Thread.VolatileRead%2A> and <xref:System.Threading.Thread.VolatileWrite%2A> are for special cases of synchronization.</span></span> <span data-ttu-id="91365-989">В обычных условиях C# `lock` оператор, Visual Basic `SyncLock` инструкции и <xref:System.Threading.Monitor> класса предоставляют более простые альтернативы.</span><span class="sxs-lookup"><span data-stu-id="91365-989">Under normal circumstances, the C# `lock` statement, the Visual Basic `SyncLock` statement, and the <xref:System.Threading.Monitor> class provide easier alternatives.</span></span>  
  
 <span data-ttu-id="91365-990">В многопроцессорной системе <xref:System.Threading.Thread.VolatileRead%2A> Получает самое последнее значение, записанное в ячейку памяти любым процессором.</span><span class="sxs-lookup"><span data-stu-id="91365-990">On a multiprocessor system, <xref:System.Threading.Thread.VolatileRead%2A> obtains the very latest value written to a memory location by any processor.</span></span> <span data-ttu-id="91365-991">Для этого может потребоваться сброс кэша процессора.</span><span class="sxs-lookup"><span data-stu-id="91365-991">This might require flushing processor caches.</span></span>  
  
 <span data-ttu-id="91365-992">Даже в системе однопроцессорный <xref:System.Threading.Thread.VolatileRead%2A> и <xref:System.Threading.Thread.VolatileWrite%2A> убедитесь, что значение чтения или записи в память и не кэшируются (например, в регистре процессора).</span><span class="sxs-lookup"><span data-stu-id="91365-992">Even on a uniprocessor system, <xref:System.Threading.Thread.VolatileRead%2A> and <xref:System.Threading.Thread.VolatileWrite%2A> ensure that a value is read or written to memory, and not cached (for example, in a processor register).</span></span> <span data-ttu-id="91365-993">Таким образом их можно использовать для синхронизации доступа к полю, которое может быть обновлено другим потоком, или оборудования.</span><span class="sxs-lookup"><span data-stu-id="91365-993">Thus, you can use them to synchronize access to a field that can be updated by another thread, or by hardware.</span></span>  
  
 <span data-ttu-id="91365-994">Вызов этого метода влияет только однократный доступ к памяти.</span><span class="sxs-lookup"><span data-stu-id="91365-994">Calling this method affects only a single memory access.</span></span> <span data-ttu-id="91365-995">Для предоставления эффективной синхронизации для поля, необходимо использовать весь доступ к полю <xref:System.Threading.Thread.VolatileRead%2A> или <xref:System.Threading.Thread.VolatileWrite%2A>.</span><span class="sxs-lookup"><span data-stu-id="91365-995">To provide effective synchronization for a field, all access to the field must use <xref:System.Threading.Thread.VolatileRead%2A> or <xref:System.Threading.Thread.VolatileWrite%2A>.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="91365-996">В C# с помощью `volatile` модификатор поля гарантирует, что весь доступ к этому полю использует <xref:System.Threading.Thread.VolatileRead%2A> или <xref:System.Threading.Thread.VolatileWrite%2A>.</span><span class="sxs-lookup"><span data-stu-id="91365-996">In C#, using the `volatile` modifier on a field guarantees that all access to that field uses <xref:System.Threading.Thread.VolatileRead%2A> or <xref:System.Threading.Thread.VolatileWrite%2A>.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="VolatileRead">
      <MemberSignature Language="C#" Value="public static float VolatileRead (ref float address);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig float32 VolatileRead(float32&amp; address) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Thread.VolatileRead(System.Single@)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function VolatileRead (ByRef address As Single) As Single" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static float VolatileRead(float % address);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Thread</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Single</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="address" Type="System.Single&amp;" RefType="ref" />
      </Parameters>
      <Docs>
        <param name="address"><span data-ttu-id="91365-997">Поле для чтения.</span><span class="sxs-lookup"><span data-stu-id="91365-997">The field to be read.</span></span></param>
        <summary><span data-ttu-id="91365-998">Считывает значение поля.</span><span class="sxs-lookup"><span data-stu-id="91365-998">Reads the value of a field.</span></span> <span data-ttu-id="91365-999">Это значение является последним записанным каким-либо из процессоров компьютера, независимо от количества процессоров и от состояния кэш-буфера процессоров.</span><span class="sxs-lookup"><span data-stu-id="91365-999">The value is the latest written by any processor in a computer, regardless of the number of processors or the state of processor cache.</span></span></summary>
        <returns><span data-ttu-id="91365-1000">Последнее значение, записанное в поле любым процессором.</span><span class="sxs-lookup"><span data-stu-id="91365-1000">The latest value written to the field by any processor.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="91365-1001"><xref:System.Threading.Thread.VolatileRead%2A> и <xref:System.Threading.Thread.VolatileWrite%2A> предназначены для особых случаев синхронизации.</span><span class="sxs-lookup"><span data-stu-id="91365-1001"><xref:System.Threading.Thread.VolatileRead%2A> and <xref:System.Threading.Thread.VolatileWrite%2A> are for special cases of synchronization.</span></span> <span data-ttu-id="91365-1002">В обычных условиях C# `lock` оператор, Visual Basic `SyncLock` инструкции и <xref:System.Threading.Monitor> класса предоставляют более простые альтернативы.</span><span class="sxs-lookup"><span data-stu-id="91365-1002">Under normal circumstances, the C# `lock` statement, the Visual Basic `SyncLock` statement, and the <xref:System.Threading.Monitor> class provide easier alternatives.</span></span>  
  
 <span data-ttu-id="91365-1003">В многопроцессорной системе <xref:System.Threading.Thread.VolatileRead%2A> Получает самое последнее значение, записанное в ячейку памяти любым процессором.</span><span class="sxs-lookup"><span data-stu-id="91365-1003">On a multiprocessor system, <xref:System.Threading.Thread.VolatileRead%2A> obtains the very latest value written to a memory location by any processor.</span></span> <span data-ttu-id="91365-1004">Для этого может потребоваться сброс кэша процессора.</span><span class="sxs-lookup"><span data-stu-id="91365-1004">This might require flushing processor caches.</span></span>  
  
 <span data-ttu-id="91365-1005">Даже в системе однопроцессорный <xref:System.Threading.Thread.VolatileRead%2A> и <xref:System.Threading.Thread.VolatileWrite%2A> убедитесь, что значение чтения или записи в память и не кэшируются (например, в регистре процессора).</span><span class="sxs-lookup"><span data-stu-id="91365-1005">Even on a uniprocessor system, <xref:System.Threading.Thread.VolatileRead%2A> and <xref:System.Threading.Thread.VolatileWrite%2A> ensure that a value is read or written to memory, and not cached (for example, in a processor register).</span></span> <span data-ttu-id="91365-1006">Таким образом их можно использовать для синхронизации доступа к полю, которое может быть обновлено другим потоком, или оборудования.</span><span class="sxs-lookup"><span data-stu-id="91365-1006">Thus, you can use them to synchronize access to a field that can be updated by another thread, or by hardware.</span></span>  
  
 <span data-ttu-id="91365-1007">Вызов этого метода влияет только однократный доступ к памяти.</span><span class="sxs-lookup"><span data-stu-id="91365-1007">Calling this method affects only a single memory access.</span></span> <span data-ttu-id="91365-1008">Для предоставления эффективной синхронизации для поля, необходимо использовать весь доступ к полю <xref:System.Threading.Thread.VolatileRead%2A> или <xref:System.Threading.Thread.VolatileWrite%2A>.</span><span class="sxs-lookup"><span data-stu-id="91365-1008">To provide effective synchronization for a field, all access to the field must use <xref:System.Threading.Thread.VolatileRead%2A> or <xref:System.Threading.Thread.VolatileWrite%2A>.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="91365-1009">В C# с помощью `volatile` модификатор поля гарантирует, что весь доступ к этому полю использует <xref:System.Threading.Thread.VolatileRead%2A> или <xref:System.Threading.Thread.VolatileWrite%2A>.</span><span class="sxs-lookup"><span data-stu-id="91365-1009">In C#, using the `volatile` modifier on a field guarantees that all access to that field uses <xref:System.Threading.Thread.VolatileRead%2A> or <xref:System.Threading.Thread.VolatileWrite%2A>.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="VolatileRead">
      <MemberSignature Language="C#" Value="public static ushort VolatileRead (ref ushort address);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig unsigned int16 VolatileRead(unsigned int16&amp; address) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Thread.VolatileRead(System.UInt16@)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function VolatileRead (ByRef address As UShort) As UShort" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::UInt16 VolatileRead(System::UInt16 % address);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Thread</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.UInt16</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="address" Type="System.UInt16&amp;" RefType="ref" />
      </Parameters>
      <Docs>
        <param name="address"><span data-ttu-id="91365-1010">Поле для чтения.</span><span class="sxs-lookup"><span data-stu-id="91365-1010">The field to be read.</span></span></param>
        <summary><span data-ttu-id="91365-1011">Считывает значение поля.</span><span class="sxs-lookup"><span data-stu-id="91365-1011">Reads the value of a field.</span></span> <span data-ttu-id="91365-1012">Это значение является последним записанным каким-либо из процессоров компьютера, независимо от количества процессоров и от состояния кэш-буфера процессоров.</span><span class="sxs-lookup"><span data-stu-id="91365-1012">The value is the latest written by any processor in a computer, regardless of the number of processors or the state of processor cache.</span></span></summary>
        <returns><span data-ttu-id="91365-1013">Последнее значение, записанное в поле любым процессором.</span><span class="sxs-lookup"><span data-stu-id="91365-1013">The latest value written to the field by any processor.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="91365-1014"><xref:System.Threading.Thread.VolatileRead%2A> и <xref:System.Threading.Thread.VolatileWrite%2A> предназначены для особых случаев синхронизации.</span><span class="sxs-lookup"><span data-stu-id="91365-1014"><xref:System.Threading.Thread.VolatileRead%2A> and <xref:System.Threading.Thread.VolatileWrite%2A> are for special cases of synchronization.</span></span> <span data-ttu-id="91365-1015">В обычных условиях C# `lock` оператор, Visual Basic `SyncLock` инструкции и <xref:System.Threading.Monitor> класса предоставляют более простые альтернативы.</span><span class="sxs-lookup"><span data-stu-id="91365-1015">Under normal circumstances, the C# `lock` statement, the Visual Basic `SyncLock` statement, and the <xref:System.Threading.Monitor> class provide easier alternatives.</span></span>  
  
 <span data-ttu-id="91365-1016">В многопроцессорной системе <xref:System.Threading.Thread.VolatileRead%2A> Получает самое последнее значение, записанное в ячейку памяти любым процессором.</span><span class="sxs-lookup"><span data-stu-id="91365-1016">On a multiprocessor system, <xref:System.Threading.Thread.VolatileRead%2A> obtains the very latest value written to a memory location by any processor.</span></span> <span data-ttu-id="91365-1017">Для этого может потребоваться сброс кэша процессора.</span><span class="sxs-lookup"><span data-stu-id="91365-1017">This might require flushing processor caches.</span></span>  
  
 <span data-ttu-id="91365-1018">Даже в системе однопроцессорный <xref:System.Threading.Thread.VolatileRead%2A> и <xref:System.Threading.Thread.VolatileWrite%2A> убедитесь, что значение чтения или записи в память и не кэшируются (например, в регистре процессора).</span><span class="sxs-lookup"><span data-stu-id="91365-1018">Even on a uniprocessor system, <xref:System.Threading.Thread.VolatileRead%2A> and <xref:System.Threading.Thread.VolatileWrite%2A> ensure that a value is read or written to memory, and not cached (for example, in a processor register).</span></span> <span data-ttu-id="91365-1019">Таким образом их можно использовать для синхронизации доступа к полю, которое может быть обновлено другим потоком, или оборудования.</span><span class="sxs-lookup"><span data-stu-id="91365-1019">Thus, you can use them to synchronize access to a field that can be updated by another thread, or by hardware.</span></span>  
  
 <span data-ttu-id="91365-1020">Вызов этого метода влияет только однократный доступ к памяти.</span><span class="sxs-lookup"><span data-stu-id="91365-1020">Calling this method affects only a single memory access.</span></span> <span data-ttu-id="91365-1021">Для предоставления эффективной синхронизации для поля, необходимо использовать весь доступ к полю <xref:System.Threading.Thread.VolatileRead%2A> или <xref:System.Threading.Thread.VolatileWrite%2A>.</span><span class="sxs-lookup"><span data-stu-id="91365-1021">To provide effective synchronization for a field, all access to the field must use <xref:System.Threading.Thread.VolatileRead%2A> or <xref:System.Threading.Thread.VolatileWrite%2A>.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="91365-1022">В C# с помощью `volatile` модификатор поля гарантирует, что весь доступ к этому полю использует <xref:System.Threading.Thread.VolatileRead%2A> или <xref:System.Threading.Thread.VolatileWrite%2A>.</span><span class="sxs-lookup"><span data-stu-id="91365-1022">In C#, using the `volatile` modifier on a field guarantees that all access to that field uses <xref:System.Threading.Thread.VolatileRead%2A> or <xref:System.Threading.Thread.VolatileWrite%2A>.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="VolatileRead">
      <MemberSignature Language="C#" Value="public static uint VolatileRead (ref uint address);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig unsigned int32 VolatileRead(unsigned int32&amp; address) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Thread.VolatileRead(System.UInt32@)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function VolatileRead (ByRef address As UInteger) As UInteger" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::UInt32 VolatileRead(System::UInt32 % address);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Thread</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.UInt32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="address" Type="System.UInt32&amp;" RefType="ref" />
      </Parameters>
      <Docs>
        <param name="address"><span data-ttu-id="91365-1023">Поле для чтения.</span><span class="sxs-lookup"><span data-stu-id="91365-1023">The field to be read.</span></span></param>
        <summary><span data-ttu-id="91365-1024">Считывает значение поля.</span><span class="sxs-lookup"><span data-stu-id="91365-1024">Reads the value of a field.</span></span> <span data-ttu-id="91365-1025">Это значение является последним записанным каким-либо из процессоров компьютера, независимо от количества процессоров и от состояния кэш-буфера процессоров.</span><span class="sxs-lookup"><span data-stu-id="91365-1025">The value is the latest written by any processor in a computer, regardless of the number of processors or the state of processor cache.</span></span></summary>
        <returns><span data-ttu-id="91365-1026">Последнее значение, записанное в поле любым процессором.</span><span class="sxs-lookup"><span data-stu-id="91365-1026">The latest value written to the field by any processor.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="91365-1027"><xref:System.Threading.Thread.VolatileRead%2A> и <xref:System.Threading.Thread.VolatileWrite%2A> предназначены для особых случаев синхронизации.</span><span class="sxs-lookup"><span data-stu-id="91365-1027"><xref:System.Threading.Thread.VolatileRead%2A> and <xref:System.Threading.Thread.VolatileWrite%2A> are for special cases of synchronization.</span></span> <span data-ttu-id="91365-1028">В обычных условиях C# `lock` оператор, Visual Basic `SyncLock` инструкции и <xref:System.Threading.Monitor> класса предоставляют более простые альтернативы.</span><span class="sxs-lookup"><span data-stu-id="91365-1028">Under normal circumstances, the C# `lock` statement, the Visual Basic `SyncLock` statement, and the <xref:System.Threading.Monitor> class provide easier alternatives.</span></span>  
  
 <span data-ttu-id="91365-1029">В многопроцессорной системе <xref:System.Threading.Thread.VolatileRead%2A> Получает самое последнее значение, записанное в ячейку памяти любым процессором.</span><span class="sxs-lookup"><span data-stu-id="91365-1029">On a multiprocessor system, <xref:System.Threading.Thread.VolatileRead%2A> obtains the very latest value written to a memory location by any processor.</span></span> <span data-ttu-id="91365-1030">Для этого может потребоваться сброс кэша процессора.</span><span class="sxs-lookup"><span data-stu-id="91365-1030">This might require flushing processor caches.</span></span>  
  
 <span data-ttu-id="91365-1031">Даже в системе однопроцессорный <xref:System.Threading.Thread.VolatileRead%2A> и <xref:System.Threading.Thread.VolatileWrite%2A> убедитесь, что значение чтения или записи в память и не кэшируются (например, в регистре процессора).</span><span class="sxs-lookup"><span data-stu-id="91365-1031">Even on a uniprocessor system, <xref:System.Threading.Thread.VolatileRead%2A> and <xref:System.Threading.Thread.VolatileWrite%2A> ensure that a value is read or written to memory, and not cached (for example, in a processor register).</span></span> <span data-ttu-id="91365-1032">Таким образом их можно использовать для синхронизации доступа к полю, которое может быть обновлено другим потоком, или оборудования.</span><span class="sxs-lookup"><span data-stu-id="91365-1032">Thus, you can use them to synchronize access to a field that can be updated by another thread, or by hardware.</span></span>  
  
 <span data-ttu-id="91365-1033">Вызов этого метода влияет только однократный доступ к памяти.</span><span class="sxs-lookup"><span data-stu-id="91365-1033">Calling this method affects only a single memory access.</span></span> <span data-ttu-id="91365-1034">Для предоставления эффективной синхронизации для поля, необходимо использовать весь доступ к полю <xref:System.Threading.Thread.VolatileRead%2A> или <xref:System.Threading.Thread.VolatileWrite%2A>.</span><span class="sxs-lookup"><span data-stu-id="91365-1034">To provide effective synchronization for a field, all access to the field must use <xref:System.Threading.Thread.VolatileRead%2A> or <xref:System.Threading.Thread.VolatileWrite%2A>.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="91365-1035">В C# с помощью `volatile` модификатор поля гарантирует, что весь доступ к этому полю использует <xref:System.Threading.Thread.VolatileRead%2A> или <xref:System.Threading.Thread.VolatileWrite%2A>.</span><span class="sxs-lookup"><span data-stu-id="91365-1035">In C#, using the `volatile` modifier on a field guarantees that all access to that field uses <xref:System.Threading.Thread.VolatileRead%2A> or <xref:System.Threading.Thread.VolatileWrite%2A>.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="VolatileRead">
      <MemberSignature Language="C#" Value="public static ulong VolatileRead (ref ulong address);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig unsigned int64 VolatileRead(unsigned int64&amp; address) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Thread.VolatileRead(System.UInt64@)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function VolatileRead (ByRef address As ULong) As ULong" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::UInt64 VolatileRead(System::UInt64 % address);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Thread</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.UInt64</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="address" Type="System.UInt64&amp;" RefType="ref" />
      </Parameters>
      <Docs>
        <param name="address"><span data-ttu-id="91365-1036">Поле для чтения.</span><span class="sxs-lookup"><span data-stu-id="91365-1036">The field to be read.</span></span></param>
        <summary><span data-ttu-id="91365-1037">Считывает значение поля.</span><span class="sxs-lookup"><span data-stu-id="91365-1037">Reads the value of a field.</span></span> <span data-ttu-id="91365-1038">Это значение является последним записанным каким-либо из процессоров компьютера, независимо от количества процессоров и от состояния кэш-буфера процессоров.</span><span class="sxs-lookup"><span data-stu-id="91365-1038">The value is the latest written by any processor in a computer, regardless of the number of processors or the state of processor cache.</span></span></summary>
        <returns><span data-ttu-id="91365-1039">Последнее значение, записанное в поле любым процессором.</span><span class="sxs-lookup"><span data-stu-id="91365-1039">The latest value written to the field by any processor.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="91365-1040"><xref:System.Threading.Thread.VolatileRead%2A> и <xref:System.Threading.Thread.VolatileWrite%2A> предназначены для особых случаев синхронизации.</span><span class="sxs-lookup"><span data-stu-id="91365-1040"><xref:System.Threading.Thread.VolatileRead%2A> and <xref:System.Threading.Thread.VolatileWrite%2A> are for special cases of synchronization.</span></span> <span data-ttu-id="91365-1041">В обычных условиях C# `lock` оператор, Visual Basic `SyncLock` инструкции и <xref:System.Threading.Monitor> класса предоставляют более простые альтернативы.</span><span class="sxs-lookup"><span data-stu-id="91365-1041">Under normal circumstances, the C# `lock` statement, the Visual Basic `SyncLock` statement, and the <xref:System.Threading.Monitor> class provide easier alternatives.</span></span>  
  
 <span data-ttu-id="91365-1042">В многопроцессорной системе <xref:System.Threading.Thread.VolatileRead%2A> Получает самое последнее значение, записанное в ячейку памяти любым процессором.</span><span class="sxs-lookup"><span data-stu-id="91365-1042">On a multiprocessor system, <xref:System.Threading.Thread.VolatileRead%2A> obtains the very latest value written to a memory location by any processor.</span></span> <span data-ttu-id="91365-1043">Для этого может потребоваться сброс кэша процессора.</span><span class="sxs-lookup"><span data-stu-id="91365-1043">This might require flushing processor caches.</span></span>  
  
 <span data-ttu-id="91365-1044">Даже в системе однопроцессорный <xref:System.Threading.Thread.VolatileRead%2A> и <xref:System.Threading.Thread.VolatileWrite%2A> убедитесь, что значение чтения или записи в память и не кэшируются (например, в регистре процессора).</span><span class="sxs-lookup"><span data-stu-id="91365-1044">Even on a uniprocessor system, <xref:System.Threading.Thread.VolatileRead%2A> and <xref:System.Threading.Thread.VolatileWrite%2A> ensure that a value is read or written to memory, and not cached (for example, in a processor register).</span></span> <span data-ttu-id="91365-1045">Таким образом их можно использовать для синхронизации доступа к полю, которое может быть обновлено другим потоком, или оборудования.</span><span class="sxs-lookup"><span data-stu-id="91365-1045">Thus, you can use them to synchronize access to a field that can be updated by another thread, or by hardware.</span></span>  
  
 <span data-ttu-id="91365-1046">Вызов этого метода влияет только однократный доступ к памяти.</span><span class="sxs-lookup"><span data-stu-id="91365-1046">Calling this method affects only a single memory access.</span></span> <span data-ttu-id="91365-1047">Для предоставления эффективной синхронизации для поля, необходимо использовать весь доступ к полю <xref:System.Threading.Thread.VolatileRead%2A> или <xref:System.Threading.Thread.VolatileWrite%2A>.</span><span class="sxs-lookup"><span data-stu-id="91365-1047">To provide effective synchronization for a field, all access to the field must use <xref:System.Threading.Thread.VolatileRead%2A> or <xref:System.Threading.Thread.VolatileWrite%2A>.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="91365-1048">В C# с помощью `volatile` модификатор поля гарантирует, что весь доступ к этому полю использует <xref:System.Threading.Thread.VolatileRead%2A> или <xref:System.Threading.Thread.VolatileWrite%2A>.</span><span class="sxs-lookup"><span data-stu-id="91365-1048">In C#, using the `volatile` modifier on a field guarantees that all access to that field uses <xref:System.Threading.Thread.VolatileRead%2A> or <xref:System.Threading.Thread.VolatileWrite%2A>.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="VolatileRead">
      <MemberSignature Language="C#" Value="public static UIntPtr VolatileRead (ref UIntPtr address);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig native unsigned int VolatileRead(native unsigned int&amp; address) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Thread.VolatileRead(System.UIntPtr@)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function VolatileRead (ByRef address As UIntPtr) As UIntPtr" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static UIntPtr VolatileRead(UIntPtr % address);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Thread</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.UIntPtr</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="address" Type="System.UIntPtr&amp;" RefType="ref" />
      </Parameters>
      <Docs>
        <param name="address"><span data-ttu-id="91365-1049">Поле для чтения.</span><span class="sxs-lookup"><span data-stu-id="91365-1049">The field to be read.</span></span></param>
        <summary><span data-ttu-id="91365-1050">Считывает значение поля.</span><span class="sxs-lookup"><span data-stu-id="91365-1050">Reads the value of a field.</span></span> <span data-ttu-id="91365-1051">Это значение является последним записанным каким-либо из процессоров компьютера, независимо от количества процессоров и от состояния кэш-буфера процессоров.</span><span class="sxs-lookup"><span data-stu-id="91365-1051">The value is the latest written by any processor in a computer, regardless of the number of processors or the state of processor cache.</span></span></summary>
        <returns><span data-ttu-id="91365-1052">Последнее значение, записанное в поле любым процессором.</span><span class="sxs-lookup"><span data-stu-id="91365-1052">The latest value written to the field by any processor.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="91365-1053"><xref:System.Threading.Thread.VolatileRead%2A> и <xref:System.Threading.Thread.VolatileWrite%2A> предназначены для особых случаев синхронизации.</span><span class="sxs-lookup"><span data-stu-id="91365-1053"><xref:System.Threading.Thread.VolatileRead%2A> and <xref:System.Threading.Thread.VolatileWrite%2A> are for special cases of synchronization.</span></span> <span data-ttu-id="91365-1054">В обычных условиях C# `lock` оператор, Visual Basic `SyncLock` инструкции и <xref:System.Threading.Monitor> класса предоставляют более простые альтернативы.</span><span class="sxs-lookup"><span data-stu-id="91365-1054">Under normal circumstances, the C# `lock` statement, the Visual Basic `SyncLock` statement, and the <xref:System.Threading.Monitor> class provide easier alternatives.</span></span>  
  
 <span data-ttu-id="91365-1055">В многопроцессорной системе <xref:System.Threading.Thread.VolatileRead%2A> Получает самое последнее значение, записанное в ячейку памяти любым процессором.</span><span class="sxs-lookup"><span data-stu-id="91365-1055">On a multiprocessor system, <xref:System.Threading.Thread.VolatileRead%2A> obtains the very latest value written to a memory location by any processor.</span></span> <span data-ttu-id="91365-1056">Для этого может потребоваться сброс кэша процессора.</span><span class="sxs-lookup"><span data-stu-id="91365-1056">This might require flushing processor caches.</span></span>  
  
 <span data-ttu-id="91365-1057">Даже в системе однопроцессорный <xref:System.Threading.Thread.VolatileRead%2A> и <xref:System.Threading.Thread.VolatileWrite%2A> убедитесь, что значение чтения или записи в память и не кэшируются (например, в регистре процессора).</span><span class="sxs-lookup"><span data-stu-id="91365-1057">Even on a uniprocessor system, <xref:System.Threading.Thread.VolatileRead%2A> and <xref:System.Threading.Thread.VolatileWrite%2A> ensure that a value is read or written to memory, and not cached (for example, in a processor register).</span></span> <span data-ttu-id="91365-1058">Таким образом их можно использовать для синхронизации доступа к полю, которое может быть обновлено другим потоком, или оборудования.</span><span class="sxs-lookup"><span data-stu-id="91365-1058">Thus, you can use them to synchronize access to a field that can be updated by another thread, or by hardware.</span></span>  
  
 <span data-ttu-id="91365-1059">Вызов этого метода влияет только однократный доступ к памяти.</span><span class="sxs-lookup"><span data-stu-id="91365-1059">Calling this method affects only a single memory access.</span></span> <span data-ttu-id="91365-1060">Для предоставления эффективной синхронизации для поля, необходимо использовать весь доступ к полю <xref:System.Threading.Thread.VolatileRead%2A> или <xref:System.Threading.Thread.VolatileWrite%2A>.</span><span class="sxs-lookup"><span data-stu-id="91365-1060">To provide effective synchronization for a field, all access to the field must use <xref:System.Threading.Thread.VolatileRead%2A> or <xref:System.Threading.Thread.VolatileWrite%2A>.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="91365-1061">В C# с помощью `volatile` модификатор поля гарантирует, что весь доступ к этому полю использует <xref:System.Threading.Thread.VolatileRead%2A> или <xref:System.Threading.Thread.VolatileWrite%2A>.</span><span class="sxs-lookup"><span data-stu-id="91365-1061">In C#, using the `volatile` modifier on a field guarantees that all access to that field uses <xref:System.Threading.Thread.VolatileRead%2A> or <xref:System.Threading.Thread.VolatileWrite%2A>.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="VolatileWrite">
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="91365-1062">Записывает значение непосредственно в поле, так что оно становится видимым для всех процессоров компьютера.</span><span class="sxs-lookup"><span data-stu-id="91365-1062">Writes a value to a field immediately, so that the value is visible to all processors in the computer.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="VolatileWrite">
      <MemberSignature Language="C#" Value="public static void VolatileWrite (ref byte address, byte value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void VolatileWrite(unsigned int8&amp; address, unsigned int8 value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Thread.VolatileWrite(System.Byte@,System.Byte)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub VolatileWrite (ByRef address As Byte, value As Byte)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void VolatileWrite(System::Byte % address, System::Byte value);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Thread</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="address" Type="System.Byte&amp;" RefType="ref" />
        <Parameter Name="value" Type="System.Byte" />
      </Parameters>
      <Docs>
        <param name="address"><span data-ttu-id="91365-1063">Поле, в которое требуется записать значение.</span><span class="sxs-lookup"><span data-stu-id="91365-1063">The field to which the value is to be written.</span></span></param>
        <param name="value"><span data-ttu-id="91365-1064">Записываемое значение.</span><span class="sxs-lookup"><span data-stu-id="91365-1064">The value to be written.</span></span></param>
        <summary><span data-ttu-id="91365-1065">Записывает значение непосредственно в поле, так что оно становится видимым для всех процессоров компьютера.</span><span class="sxs-lookup"><span data-stu-id="91365-1065">Writes a value to a field immediately, so that the value is visible to all processors in the computer.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="91365-1066"><xref:System.Threading.Thread.VolatileRead%2A> и <xref:System.Threading.Thread.VolatileWrite%2A> предназначены для особых случаев синхронизации.</span><span class="sxs-lookup"><span data-stu-id="91365-1066"><xref:System.Threading.Thread.VolatileRead%2A> and <xref:System.Threading.Thread.VolatileWrite%2A> are for special cases of synchronization.</span></span> <span data-ttu-id="91365-1067">В обычных условиях C# `lock` оператор, Visual Basic `SyncLock` инструкции и <xref:System.Threading.Monitor> класса предоставляют более простые альтернативы.</span><span class="sxs-lookup"><span data-stu-id="91365-1067">Under normal circumstances, the C# `lock` statement, the Visual Basic `SyncLock` statement, and the <xref:System.Threading.Monitor> class provide easier alternatives.</span></span>  
  
 <span data-ttu-id="91365-1068">В многопроцессорной системе <xref:System.Threading.Thread.VolatileWrite%2A> гарантирует, что значение, записанное в ячейку памяти будет видимым для всех процессоров.</span><span class="sxs-lookup"><span data-stu-id="91365-1068">On a multiprocessor system, <xref:System.Threading.Thread.VolatileWrite%2A> ensures that a value written to a memory location is immediately visible to all processors.</span></span> <span data-ttu-id="91365-1069">Для этого может потребоваться сброс кэша процессора.</span><span class="sxs-lookup"><span data-stu-id="91365-1069">This might require flushing processor caches.</span></span>  
  
 <span data-ttu-id="91365-1070">Даже в системе однопроцессорный <xref:System.Threading.Thread.VolatileRead%2A> и <xref:System.Threading.Thread.VolatileWrite%2A> убедитесь, что значение чтения или записи в память и не кэшируются (например, в регистре процессора).</span><span class="sxs-lookup"><span data-stu-id="91365-1070">Even on a uniprocessor system, <xref:System.Threading.Thread.VolatileRead%2A> and <xref:System.Threading.Thread.VolatileWrite%2A> ensure that a value is read or written to memory, and not cached (for example, in a processor register).</span></span> <span data-ttu-id="91365-1071">Таким образом их можно использовать для синхронизации доступа к полю, которое может быть обновлено другим потоком, или оборудования.</span><span class="sxs-lookup"><span data-stu-id="91365-1071">Thus, you can use them to synchronize access to a field that can be updated by another thread, or by hardware.</span></span>  
  
 <span data-ttu-id="91365-1072">Вызов этого метода влияет только однократный доступ к памяти.</span><span class="sxs-lookup"><span data-stu-id="91365-1072">Calling this method affects only a single memory access.</span></span> <span data-ttu-id="91365-1073">Для предоставления эффективной синхронизации для поля, необходимо использовать весь доступ к полю <xref:System.Threading.Thread.VolatileRead%2A> или <xref:System.Threading.Thread.VolatileWrite%2A>.</span><span class="sxs-lookup"><span data-stu-id="91365-1073">To provide effective synchronization for a field, all access to the field must use <xref:System.Threading.Thread.VolatileRead%2A> or <xref:System.Threading.Thread.VolatileWrite%2A>.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="91365-1074">В C# с помощью `volatile` модификатор поля гарантирует, что весь доступ к этому полю использует <xref:System.Threading.Thread.VolatileRead%2A> или <xref:System.Threading.Thread.VolatileWrite%2A>.</span><span class="sxs-lookup"><span data-stu-id="91365-1074">In C#, using the `volatile` modifier on a field guarantees that all access to that field uses <xref:System.Threading.Thread.VolatileRead%2A> or <xref:System.Threading.Thread.VolatileWrite%2A>.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="VolatileWrite">
      <MemberSignature Language="C#" Value="public static void VolatileWrite (ref double address, double value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void VolatileWrite(float64&amp; address, float64 value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Thread.VolatileWrite(System.Double@,System.Double)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub VolatileWrite (ByRef address As Double, value As Double)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void VolatileWrite(double % address, double value);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Thread</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="address" Type="System.Double&amp;" RefType="ref" />
        <Parameter Name="value" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="address"><span data-ttu-id="91365-1075">Поле, в которое требуется записать значение.</span><span class="sxs-lookup"><span data-stu-id="91365-1075">The field to which the value is to be written.</span></span></param>
        <param name="value"><span data-ttu-id="91365-1076">Записываемое значение.</span><span class="sxs-lookup"><span data-stu-id="91365-1076">The value to be written.</span></span></param>
        <summary><span data-ttu-id="91365-1077">Записывает значение непосредственно в поле, так что оно становится видимым для всех процессоров компьютера.</span><span class="sxs-lookup"><span data-stu-id="91365-1077">Writes a value to a field immediately, so that the value is visible to all processors in the computer.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="91365-1078"><xref:System.Threading.Thread.VolatileRead%2A> и <xref:System.Threading.Thread.VolatileWrite%2A> предназначены для особых случаев синхронизации.</span><span class="sxs-lookup"><span data-stu-id="91365-1078"><xref:System.Threading.Thread.VolatileRead%2A> and <xref:System.Threading.Thread.VolatileWrite%2A> are for special cases of synchronization.</span></span> <span data-ttu-id="91365-1079">В обычных условиях C# `lock` оператор, Visual Basic `SyncLock` инструкции и <xref:System.Threading.Monitor> класса предоставляют более простые альтернативы.</span><span class="sxs-lookup"><span data-stu-id="91365-1079">Under normal circumstances, the C# `lock` statement, the Visual Basic `SyncLock` statement, and the <xref:System.Threading.Monitor> class provide easier alternatives.</span></span>  
  
 <span data-ttu-id="91365-1080">В многопроцессорной системе <xref:System.Threading.Thread.VolatileWrite%2A> гарантирует, что значение, записанное в ячейку памяти будет видимым для всех процессоров.</span><span class="sxs-lookup"><span data-stu-id="91365-1080">On a multiprocessor system, <xref:System.Threading.Thread.VolatileWrite%2A> ensures that a value written to a memory location is immediately visible to all processors.</span></span> <span data-ttu-id="91365-1081">Для этого может потребоваться сброс кэша процессора.</span><span class="sxs-lookup"><span data-stu-id="91365-1081">This might require flushing processor caches.</span></span>  
  
 <span data-ttu-id="91365-1082">Даже в системе однопроцессорный <xref:System.Threading.Thread.VolatileRead%2A> и <xref:System.Threading.Thread.VolatileWrite%2A> убедитесь, что значение чтения или записи в память и не кэшируются (например, в регистре процессора).</span><span class="sxs-lookup"><span data-stu-id="91365-1082">Even on a uniprocessor system, <xref:System.Threading.Thread.VolatileRead%2A> and <xref:System.Threading.Thread.VolatileWrite%2A> ensure that a value is read or written to memory, and not cached (for example, in a processor register).</span></span> <span data-ttu-id="91365-1083">Таким образом их можно использовать для синхронизации доступа к полю, которое может быть обновлено другим потоком, или оборудования.</span><span class="sxs-lookup"><span data-stu-id="91365-1083">Thus, you can use them to synchronize access to a field that can be updated by another thread, or by hardware.</span></span>  
  
 <span data-ttu-id="91365-1084">Вызов этого метода влияет только однократный доступ к памяти.</span><span class="sxs-lookup"><span data-stu-id="91365-1084">Calling this method affects only a single memory access.</span></span> <span data-ttu-id="91365-1085">Для предоставления эффективной синхронизации для поля, необходимо использовать весь доступ к полю <xref:System.Threading.Thread.VolatileRead%2A> или <xref:System.Threading.Thread.VolatileWrite%2A>.</span><span class="sxs-lookup"><span data-stu-id="91365-1085">To provide effective synchronization for a field, all access to the field must use <xref:System.Threading.Thread.VolatileRead%2A> or <xref:System.Threading.Thread.VolatileWrite%2A>.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="91365-1086">В C# с помощью `volatile` модификатор поля гарантирует, что весь доступ к этому полю использует <xref:System.Threading.Thread.VolatileRead%2A> или <xref:System.Threading.Thread.VolatileWrite%2A>.</span><span class="sxs-lookup"><span data-stu-id="91365-1086">In C#, using the `volatile` modifier on a field guarantees that all access to that field uses <xref:System.Threading.Thread.VolatileRead%2A> or <xref:System.Threading.Thread.VolatileWrite%2A>.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="VolatileWrite">
      <MemberSignature Language="C#" Value="public static void VolatileWrite (ref short address, short value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void VolatileWrite(int16&amp; address, int16 value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Thread.VolatileWrite(System.Int16@,System.Int16)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub VolatileWrite (ByRef address As Short, value As Short)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void VolatileWrite(short % address, short value);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Thread</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="address" Type="System.Int16&amp;" RefType="ref" />
        <Parameter Name="value" Type="System.Int16" />
      </Parameters>
      <Docs>
        <param name="address"><span data-ttu-id="91365-1087">Поле, в которое требуется записать значение.</span><span class="sxs-lookup"><span data-stu-id="91365-1087">The field to which the value is to be written.</span></span></param>
        <param name="value"><span data-ttu-id="91365-1088">Записываемое значение.</span><span class="sxs-lookup"><span data-stu-id="91365-1088">The value to be written.</span></span></param>
        <summary><span data-ttu-id="91365-1089">Записывает значение непосредственно в поле, так что оно становится видимым для всех процессоров компьютера.</span><span class="sxs-lookup"><span data-stu-id="91365-1089">Writes a value to a field immediately, so that the value is visible to all processors in the computer.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="91365-1090"><xref:System.Threading.Thread.VolatileRead%2A> и <xref:System.Threading.Thread.VolatileWrite%2A> предназначены для особых случаев синхронизации.</span><span class="sxs-lookup"><span data-stu-id="91365-1090"><xref:System.Threading.Thread.VolatileRead%2A> and <xref:System.Threading.Thread.VolatileWrite%2A> are for special cases of synchronization.</span></span> <span data-ttu-id="91365-1091">В обычных условиях C# `lock` оператор, Visual Basic `SyncLock` инструкции и <xref:System.Threading.Monitor> класса предоставляют более простые альтернативы.</span><span class="sxs-lookup"><span data-stu-id="91365-1091">Under normal circumstances, the C# `lock` statement, the Visual Basic `SyncLock` statement, and the <xref:System.Threading.Monitor> class provide easier alternatives.</span></span>  
  
 <span data-ttu-id="91365-1092">В многопроцессорной системе <xref:System.Threading.Thread.VolatileWrite%2A> гарантирует, что значение, записанное в ячейку памяти будет видимым для всех процессоров.</span><span class="sxs-lookup"><span data-stu-id="91365-1092">On a multiprocessor system, <xref:System.Threading.Thread.VolatileWrite%2A> ensures that a value written to a memory location is immediately visible to all processors.</span></span> <span data-ttu-id="91365-1093">Для этого может потребоваться сброс кэша процессора.</span><span class="sxs-lookup"><span data-stu-id="91365-1093">This might require flushing processor caches.</span></span>  
  
 <span data-ttu-id="91365-1094">Даже в системе однопроцессорный <xref:System.Threading.Thread.VolatileRead%2A> и <xref:System.Threading.Thread.VolatileWrite%2A> убедитесь, что значение чтения или записи в память и не кэшируются (например, в регистре процессора).</span><span class="sxs-lookup"><span data-stu-id="91365-1094">Even on a uniprocessor system, <xref:System.Threading.Thread.VolatileRead%2A> and <xref:System.Threading.Thread.VolatileWrite%2A> ensure that a value is read or written to memory, and not cached (for example, in a processor register).</span></span> <span data-ttu-id="91365-1095">Таким образом их можно использовать для синхронизации доступа к полю, которое может быть обновлено другим потоком, или оборудования.</span><span class="sxs-lookup"><span data-stu-id="91365-1095">Thus, you can use them to synchronize access to a field that can be updated by another thread, or by hardware.</span></span>  
  
 <span data-ttu-id="91365-1096">Вызов этого метода влияет только однократный доступ к памяти.</span><span class="sxs-lookup"><span data-stu-id="91365-1096">Calling this method affects only a single memory access.</span></span> <span data-ttu-id="91365-1097">Для предоставления эффективной синхронизации для поля, необходимо использовать весь доступ к полю <xref:System.Threading.Thread.VolatileRead%2A> или <xref:System.Threading.Thread.VolatileWrite%2A>.</span><span class="sxs-lookup"><span data-stu-id="91365-1097">To provide effective synchronization for a field, all access to the field must use <xref:System.Threading.Thread.VolatileRead%2A> or <xref:System.Threading.Thread.VolatileWrite%2A>.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="91365-1098">В C# с помощью `volatile` модификатор поля гарантирует, что весь доступ к этому полю использует <xref:System.Threading.Thread.VolatileRead%2A> или <xref:System.Threading.Thread.VolatileWrite%2A>.</span><span class="sxs-lookup"><span data-stu-id="91365-1098">In C#, using the `volatile` modifier on a field guarantees that all access to that field uses <xref:System.Threading.Thread.VolatileRead%2A> or <xref:System.Threading.Thread.VolatileWrite%2A>.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="VolatileWrite">
      <MemberSignature Language="C#" Value="public static void VolatileWrite (ref int address, int value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void VolatileWrite(int32&amp; address, int32 value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Thread.VolatileWrite(System.Int32@,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub VolatileWrite (ByRef address As Integer, value As Integer)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void VolatileWrite(int % address, int value);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Thread</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="address" Type="System.Int32&amp;" RefType="ref" />
        <Parameter Name="value" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="address"><span data-ttu-id="91365-1099">Поле, в которое требуется записать значение.</span><span class="sxs-lookup"><span data-stu-id="91365-1099">The field to which the value is to be written.</span></span></param>
        <param name="value"><span data-ttu-id="91365-1100">Записываемое значение.</span><span class="sxs-lookup"><span data-stu-id="91365-1100">The value to be written.</span></span></param>
        <summary><span data-ttu-id="91365-1101">Записывает значение непосредственно в поле, так что оно становится видимым для всех процессоров компьютера.</span><span class="sxs-lookup"><span data-stu-id="91365-1101">Writes a value to a field immediately, so that the value is visible to all processors in the computer.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="91365-1102"><xref:System.Threading.Thread.VolatileRead%2A> и <xref:System.Threading.Thread.VolatileWrite%2A> предназначены для особых случаев синхронизации.</span><span class="sxs-lookup"><span data-stu-id="91365-1102"><xref:System.Threading.Thread.VolatileRead%2A> and <xref:System.Threading.Thread.VolatileWrite%2A> are for special cases of synchronization.</span></span> <span data-ttu-id="91365-1103">В обычных условиях C# `lock` оператор, Visual Basic `SyncLock` инструкции и <xref:System.Threading.Monitor> класса предоставляют более простые альтернативы.</span><span class="sxs-lookup"><span data-stu-id="91365-1103">Under normal circumstances, the C# `lock` statement, the Visual Basic `SyncLock` statement, and the <xref:System.Threading.Monitor> class provide easier alternatives.</span></span>  
  
 <span data-ttu-id="91365-1104">В многопроцессорной системе <xref:System.Threading.Thread.VolatileWrite%2A> гарантирует, что значение, записанное в ячейку памяти будет видимым для всех процессоров.</span><span class="sxs-lookup"><span data-stu-id="91365-1104">On a multiprocessor system, <xref:System.Threading.Thread.VolatileWrite%2A> ensures that a value written to a memory location is immediately visible to all processors.</span></span> <span data-ttu-id="91365-1105">Для этого может потребоваться сброс кэша процессора.</span><span class="sxs-lookup"><span data-stu-id="91365-1105">This might require flushing processor caches.</span></span>  
  
 <span data-ttu-id="91365-1106">Даже в системе однопроцессорный <xref:System.Threading.Thread.VolatileRead%2A> и <xref:System.Threading.Thread.VolatileWrite%2A> убедитесь, что значение чтения или записи в память и не кэшируются (например, в регистре процессора).</span><span class="sxs-lookup"><span data-stu-id="91365-1106">Even on a uniprocessor system, <xref:System.Threading.Thread.VolatileRead%2A> and <xref:System.Threading.Thread.VolatileWrite%2A> ensure that a value is read or written to memory, and not cached (for example, in a processor register).</span></span> <span data-ttu-id="91365-1107">Таким образом их можно использовать для синхронизации доступа к полю, которое может быть обновлено другим потоком, или оборудования.</span><span class="sxs-lookup"><span data-stu-id="91365-1107">Thus, you can use them to synchronize access to a field that can be updated by another thread, or by hardware.</span></span>  
  
 <span data-ttu-id="91365-1108">Вызов этого метода влияет только однократный доступ к памяти.</span><span class="sxs-lookup"><span data-stu-id="91365-1108">Calling this method affects only a single memory access.</span></span> <span data-ttu-id="91365-1109">Для предоставления эффективной синхронизации для поля, необходимо использовать весь доступ к полю <xref:System.Threading.Thread.VolatileRead%2A> или <xref:System.Threading.Thread.VolatileWrite%2A>.</span><span class="sxs-lookup"><span data-stu-id="91365-1109">To provide effective synchronization for a field, all access to the field must use <xref:System.Threading.Thread.VolatileRead%2A> or <xref:System.Threading.Thread.VolatileWrite%2A>.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="91365-1110">В C# с помощью `volatile` модификатор поля гарантирует, что весь доступ к этому полю использует <xref:System.Threading.Thread.VolatileRead%2A> или <xref:System.Threading.Thread.VolatileWrite%2A>.</span><span class="sxs-lookup"><span data-stu-id="91365-1110">In C#, using the `volatile` modifier on a field guarantees that all access to that field uses <xref:System.Threading.Thread.VolatileRead%2A> or <xref:System.Threading.Thread.VolatileWrite%2A>.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="VolatileWrite">
      <MemberSignature Language="C#" Value="public static void VolatileWrite (ref long address, long value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void VolatileWrite(int64&amp; address, int64 value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Thread.VolatileWrite(System.Int64@,System.Int64)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub VolatileWrite (ByRef address As Long, value As Long)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void VolatileWrite(long % address, long value);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Thread</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="address" Type="System.Int64&amp;" RefType="ref" />
        <Parameter Name="value" Type="System.Int64" />
      </Parameters>
      <Docs>
        <param name="address"><span data-ttu-id="91365-1111">Поле, в которое требуется записать значение.</span><span class="sxs-lookup"><span data-stu-id="91365-1111">The field to which the value is to be written.</span></span></param>
        <param name="value"><span data-ttu-id="91365-1112">Записываемое значение.</span><span class="sxs-lookup"><span data-stu-id="91365-1112">The value to be written.</span></span></param>
        <summary><span data-ttu-id="91365-1113">Записывает значение непосредственно в поле, так что оно становится видимым для всех процессоров компьютера.</span><span class="sxs-lookup"><span data-stu-id="91365-1113">Writes a value to a field immediately, so that the value is visible to all processors in the computer.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="91365-1114"><xref:System.Threading.Thread.VolatileRead%2A> и <xref:System.Threading.Thread.VolatileWrite%2A> предназначены для особых случаев синхронизации.</span><span class="sxs-lookup"><span data-stu-id="91365-1114"><xref:System.Threading.Thread.VolatileRead%2A> and <xref:System.Threading.Thread.VolatileWrite%2A> are for special cases of synchronization.</span></span> <span data-ttu-id="91365-1115">В обычных условиях C# `lock` оператор, Visual Basic `SyncLock` инструкции и <xref:System.Threading.Monitor> класса предоставляют более простые альтернативы.</span><span class="sxs-lookup"><span data-stu-id="91365-1115">Under normal circumstances, the C# `lock` statement, the Visual Basic `SyncLock` statement, and the <xref:System.Threading.Monitor> class provide easier alternatives.</span></span>  
  
 <span data-ttu-id="91365-1116">В многопроцессорной системе <xref:System.Threading.Thread.VolatileWrite%2A> гарантирует, что значение, записанное в ячейку памяти будет видимым для всех процессоров.</span><span class="sxs-lookup"><span data-stu-id="91365-1116">On a multiprocessor system, <xref:System.Threading.Thread.VolatileWrite%2A> ensures that a value written to a memory location is immediately visible to all processors.</span></span> <span data-ttu-id="91365-1117">Для этого может потребоваться сброс кэша процессора.</span><span class="sxs-lookup"><span data-stu-id="91365-1117">This might require flushing processor caches.</span></span>  
  
 <span data-ttu-id="91365-1118">Даже в системе однопроцессорный <xref:System.Threading.Thread.VolatileRead%2A> и <xref:System.Threading.Thread.VolatileWrite%2A> убедитесь, что значение чтения или записи в память и не кэшируются (например, в регистре процессора).</span><span class="sxs-lookup"><span data-stu-id="91365-1118">Even on a uniprocessor system, <xref:System.Threading.Thread.VolatileRead%2A> and <xref:System.Threading.Thread.VolatileWrite%2A> ensure that a value is read or written to memory, and not cached (for example, in a processor register).</span></span> <span data-ttu-id="91365-1119">Таким образом их можно использовать для синхронизации доступа к полю, которое может быть обновлено другим потоком, или оборудования.</span><span class="sxs-lookup"><span data-stu-id="91365-1119">Thus, you can use them to synchronize access to a field that can be updated by another thread, or by hardware.</span></span>  
  
 <span data-ttu-id="91365-1120">Вызов этого метода влияет только однократный доступ к памяти.</span><span class="sxs-lookup"><span data-stu-id="91365-1120">Calling this method affects only a single memory access.</span></span> <span data-ttu-id="91365-1121">Для предоставления эффективной синхронизации для поля, необходимо использовать весь доступ к полю <xref:System.Threading.Thread.VolatileRead%2A> или <xref:System.Threading.Thread.VolatileWrite%2A>.</span><span class="sxs-lookup"><span data-stu-id="91365-1121">To provide effective synchronization for a field, all access to the field must use <xref:System.Threading.Thread.VolatileRead%2A> or <xref:System.Threading.Thread.VolatileWrite%2A>.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="91365-1122">В C# с помощью `volatile` модификатор поля гарантирует, что весь доступ к этому полю использует <xref:System.Threading.Thread.VolatileRead%2A> или <xref:System.Threading.Thread.VolatileWrite%2A>.</span><span class="sxs-lookup"><span data-stu-id="91365-1122">In C#, using the `volatile` modifier on a field guarantees that all access to that field uses <xref:System.Threading.Thread.VolatileRead%2A> or <xref:System.Threading.Thread.VolatileWrite%2A>.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="VolatileWrite">
      <MemberSignature Language="C#" Value="public static void VolatileWrite (ref IntPtr address, IntPtr value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void VolatileWrite(native int&amp; address, native int value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Thread.VolatileWrite(System.IntPtr@,System.IntPtr)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub VolatileWrite (ByRef address As IntPtr, value As IntPtr)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void VolatileWrite(IntPtr % address, IntPtr value);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Thread</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="address" Type="System.IntPtr&amp;" RefType="ref" />
        <Parameter Name="value" Type="System.IntPtr" />
      </Parameters>
      <Docs>
        <param name="address"><span data-ttu-id="91365-1123">Поле, в которое требуется записать значение.</span><span class="sxs-lookup"><span data-stu-id="91365-1123">The field to which the value is to be written.</span></span></param>
        <param name="value"><span data-ttu-id="91365-1124">Записываемое значение.</span><span class="sxs-lookup"><span data-stu-id="91365-1124">The value to be written.</span></span></param>
        <summary><span data-ttu-id="91365-1125">Записывает значение непосредственно в поле, так что оно становится видимым для всех процессоров компьютера.</span><span class="sxs-lookup"><span data-stu-id="91365-1125">Writes a value to a field immediately, so that the value is visible to all processors in the computer.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="91365-1126"><xref:System.Threading.Thread.VolatileRead%2A> и <xref:System.Threading.Thread.VolatileWrite%2A> предназначены для особых случаев синхронизации.</span><span class="sxs-lookup"><span data-stu-id="91365-1126"><xref:System.Threading.Thread.VolatileRead%2A> and <xref:System.Threading.Thread.VolatileWrite%2A> are for special cases of synchronization.</span></span> <span data-ttu-id="91365-1127">В обычных условиях C# `lock` оператор, Visual Basic `SyncLock` инструкции и <xref:System.Threading.Monitor> класса предоставляют более простые альтернативы.</span><span class="sxs-lookup"><span data-stu-id="91365-1127">Under normal circumstances, the C# `lock` statement, the Visual Basic `SyncLock` statement, and the <xref:System.Threading.Monitor> class provide easier alternatives.</span></span>  
  
 <span data-ttu-id="91365-1128">В многопроцессорной системе <xref:System.Threading.Thread.VolatileWrite%2A> гарантирует, что значение, записанное в ячейку памяти будет видимым для всех процессоров.</span><span class="sxs-lookup"><span data-stu-id="91365-1128">On a multiprocessor system, <xref:System.Threading.Thread.VolatileWrite%2A> ensures that a value written to a memory location is immediately visible to all processors.</span></span> <span data-ttu-id="91365-1129">Для этого может потребоваться сброс кэша процессора.</span><span class="sxs-lookup"><span data-stu-id="91365-1129">This might require flushing processor caches.</span></span>  
  
 <span data-ttu-id="91365-1130">Даже в системе однопроцессорный <xref:System.Threading.Thread.VolatileRead%2A> и <xref:System.Threading.Thread.VolatileWrite%2A> убедитесь, что значение чтения или записи в память и не кэшируются (например, в регистре процессора).</span><span class="sxs-lookup"><span data-stu-id="91365-1130">Even on a uniprocessor system, <xref:System.Threading.Thread.VolatileRead%2A> and <xref:System.Threading.Thread.VolatileWrite%2A> ensure that a value is read or written to memory, and not cached (for example, in a processor register).</span></span> <span data-ttu-id="91365-1131">Таким образом их можно использовать для синхронизации доступа к полю, которое может быть обновлено другим потоком, или оборудования.</span><span class="sxs-lookup"><span data-stu-id="91365-1131">Thus, you can use them to synchronize access to a field that can be updated by another thread, or by hardware.</span></span>  
  
 <span data-ttu-id="91365-1132">Вызов этого метода влияет только однократный доступ к памяти.</span><span class="sxs-lookup"><span data-stu-id="91365-1132">Calling this method affects only a single memory access.</span></span> <span data-ttu-id="91365-1133">Для предоставления эффективной синхронизации для поля, необходимо использовать весь доступ к полю <xref:System.Threading.Thread.VolatileRead%2A> или <xref:System.Threading.Thread.VolatileWrite%2A>.</span><span class="sxs-lookup"><span data-stu-id="91365-1133">To provide effective synchronization for a field, all access to the field must use <xref:System.Threading.Thread.VolatileRead%2A> or <xref:System.Threading.Thread.VolatileWrite%2A>.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="91365-1134">В C# с помощью `volatile` модификатор поля гарантирует, что весь доступ к этому полю использует <xref:System.Threading.Thread.VolatileRead%2A> или <xref:System.Threading.Thread.VolatileWrite%2A>.</span><span class="sxs-lookup"><span data-stu-id="91365-1134">In C#, using the `volatile` modifier on a field guarantees that all access to that field uses <xref:System.Threading.Thread.VolatileRead%2A> or <xref:System.Threading.Thread.VolatileWrite%2A>.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="VolatileWrite">
      <MemberSignature Language="C#" Value="public static void VolatileWrite (ref object address, object value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void VolatileWrite(object&amp; address, object value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Thread.VolatileWrite(System.Object@,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub VolatileWrite (ByRef address As Object, value As Object)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void VolatileWrite(System::Object ^ % address, System::Object ^ value);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Thread</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="address" Type="System.Object&amp;" RefType="ref" />
        <Parameter Name="value" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="address"><span data-ttu-id="91365-1135">Поле, в которое требуется записать значение.</span><span class="sxs-lookup"><span data-stu-id="91365-1135">The field to which the value is to be written.</span></span></param>
        <param name="value"><span data-ttu-id="91365-1136">Записываемое значение.</span><span class="sxs-lookup"><span data-stu-id="91365-1136">The value to be written.</span></span></param>
        <summary><span data-ttu-id="91365-1137">Записывает значение непосредственно в поле, так что оно становится видимым для всех процессоров компьютера.</span><span class="sxs-lookup"><span data-stu-id="91365-1137">Writes a value to a field immediately, so that the value is visible to all processors in the computer.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="91365-1138"><xref:System.Threading.Thread.VolatileRead%2A> и <xref:System.Threading.Thread.VolatileWrite%2A> предназначены для особых случаев синхронизации.</span><span class="sxs-lookup"><span data-stu-id="91365-1138"><xref:System.Threading.Thread.VolatileRead%2A> and <xref:System.Threading.Thread.VolatileWrite%2A> are for special cases of synchronization.</span></span> <span data-ttu-id="91365-1139">В обычных условиях C# `lock` оператор, Visual Basic `SyncLock` инструкции и <xref:System.Threading.Monitor> класса предоставляют более простые альтернативы.</span><span class="sxs-lookup"><span data-stu-id="91365-1139">Under normal circumstances, the C# `lock` statement, the Visual Basic `SyncLock` statement, and the <xref:System.Threading.Monitor> class provide easier alternatives.</span></span>  
  
 <span data-ttu-id="91365-1140">В многопроцессорной системе <xref:System.Threading.Thread.VolatileWrite%2A> гарантирует, что значение, записанное в ячейку памяти будет видимым для всех процессоров.</span><span class="sxs-lookup"><span data-stu-id="91365-1140">On a multiprocessor system, <xref:System.Threading.Thread.VolatileWrite%2A> ensures that a value written to a memory location is immediately visible to all processors.</span></span> <span data-ttu-id="91365-1141">Для этого может потребоваться сброс кэша процессора.</span><span class="sxs-lookup"><span data-stu-id="91365-1141">This might require flushing processor caches.</span></span>  
  
 <span data-ttu-id="91365-1142">Даже в системе однопроцессорный <xref:System.Threading.Thread.VolatileRead%2A> и <xref:System.Threading.Thread.VolatileWrite%2A> убедитесь, что значение чтения или записи в память и не кэшируются (например, в регистре процессора).</span><span class="sxs-lookup"><span data-stu-id="91365-1142">Even on a uniprocessor system, <xref:System.Threading.Thread.VolatileRead%2A> and <xref:System.Threading.Thread.VolatileWrite%2A> ensure that a value is read or written to memory, and not cached (for example, in a processor register).</span></span> <span data-ttu-id="91365-1143">Таким образом их можно использовать для синхронизации доступа к полю, которое может быть обновлено другим потоком, или оборудования.</span><span class="sxs-lookup"><span data-stu-id="91365-1143">Thus, you can use them to synchronize access to a field that can be updated by another thread, or by hardware.</span></span>  
  
 <span data-ttu-id="91365-1144">Вызов этого метода влияет только однократный доступ к памяти.</span><span class="sxs-lookup"><span data-stu-id="91365-1144">Calling this method affects only a single memory access.</span></span> <span data-ttu-id="91365-1145">Для предоставления эффективной синхронизации для поля, необходимо использовать весь доступ к полю <xref:System.Threading.Thread.VolatileRead%2A> или <xref:System.Threading.Thread.VolatileWrite%2A>.</span><span class="sxs-lookup"><span data-stu-id="91365-1145">To provide effective synchronization for a field, all access to the field must use <xref:System.Threading.Thread.VolatileRead%2A> or <xref:System.Threading.Thread.VolatileWrite%2A>.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="91365-1146">В C# с помощью `volatile` модификатор поля гарантирует, что весь доступ к этому полю использует <xref:System.Threading.Thread.VolatileRead%2A> или <xref:System.Threading.Thread.VolatileWrite%2A>.</span><span class="sxs-lookup"><span data-stu-id="91365-1146">In C#, using the `volatile` modifier on a field guarantees that all access to that field uses <xref:System.Threading.Thread.VolatileRead%2A> or <xref:System.Threading.Thread.VolatileWrite%2A>.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="VolatileWrite">
      <MemberSignature Language="C#" Value="public static void VolatileWrite (ref sbyte address, sbyte value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void VolatileWrite(int8&amp; address, int8 value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Thread.VolatileWrite(System.SByte@,System.SByte)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub VolatileWrite (ByRef address As SByte, value As SByte)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void VolatileWrite(System::SByte % address, System::SByte value);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Thread</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="address" Type="System.SByte&amp;" RefType="ref" />
        <Parameter Name="value" Type="System.SByte" />
      </Parameters>
      <Docs>
        <param name="address"><span data-ttu-id="91365-1147">Поле, в которое требуется записать значение.</span><span class="sxs-lookup"><span data-stu-id="91365-1147">The field to which the value is to be written.</span></span></param>
        <param name="value"><span data-ttu-id="91365-1148">Записываемое значение.</span><span class="sxs-lookup"><span data-stu-id="91365-1148">The value to be written.</span></span></param>
        <summary><span data-ttu-id="91365-1149">Записывает значение непосредственно в поле, так что оно становится видимым для всех процессоров компьютера.</span><span class="sxs-lookup"><span data-stu-id="91365-1149">Writes a value to a field immediately, so that the value is visible to all processors in the computer.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="91365-1150"><xref:System.Threading.Thread.VolatileRead%2A> и <xref:System.Threading.Thread.VolatileWrite%2A> предназначены для особых случаев синхронизации.</span><span class="sxs-lookup"><span data-stu-id="91365-1150"><xref:System.Threading.Thread.VolatileRead%2A> and <xref:System.Threading.Thread.VolatileWrite%2A> are for special cases of synchronization.</span></span> <span data-ttu-id="91365-1151">В обычных условиях C# `lock` оператор, Visual Basic `SyncLock` инструкции и <xref:System.Threading.Monitor> класса предоставляют более простые альтернативы.</span><span class="sxs-lookup"><span data-stu-id="91365-1151">Under normal circumstances, the C# `lock` statement, the Visual Basic `SyncLock` statement, and the <xref:System.Threading.Monitor> class provide easier alternatives.</span></span>  
  
 <span data-ttu-id="91365-1152">В многопроцессорной системе <xref:System.Threading.Thread.VolatileWrite%2A> гарантирует, что значение, записанное в ячейку памяти будет видимым для всех процессоров.</span><span class="sxs-lookup"><span data-stu-id="91365-1152">On a multiprocessor system, <xref:System.Threading.Thread.VolatileWrite%2A> ensures that a value written to a memory location is immediately visible to all processors.</span></span> <span data-ttu-id="91365-1153">Для этого может потребоваться сброс кэша процессора.</span><span class="sxs-lookup"><span data-stu-id="91365-1153">This might require flushing processor caches.</span></span>  
  
 <span data-ttu-id="91365-1154">Даже в системе однопроцессорный <xref:System.Threading.Thread.VolatileRead%2A> и <xref:System.Threading.Thread.VolatileWrite%2A> убедитесь, что значение чтения или записи в память и не кэшируются (например, в регистре процессора).</span><span class="sxs-lookup"><span data-stu-id="91365-1154">Even on a uniprocessor system, <xref:System.Threading.Thread.VolatileRead%2A> and <xref:System.Threading.Thread.VolatileWrite%2A> ensure that a value is read or written to memory, and not cached (for example, in a processor register).</span></span> <span data-ttu-id="91365-1155">Таким образом их можно использовать для синхронизации доступа к полю, которое может быть обновлено другим потоком, или оборудования.</span><span class="sxs-lookup"><span data-stu-id="91365-1155">Thus, you can use them to synchronize access to a field that can be updated by another thread, or by hardware.</span></span>  
  
 <span data-ttu-id="91365-1156">Вызов этого метода влияет только однократный доступ к памяти.</span><span class="sxs-lookup"><span data-stu-id="91365-1156">Calling this method affects only a single memory access.</span></span> <span data-ttu-id="91365-1157">Для предоставления эффективной синхронизации для поля, необходимо использовать весь доступ к полю <xref:System.Threading.Thread.VolatileRead%2A> или <xref:System.Threading.Thread.VolatileWrite%2A>.</span><span class="sxs-lookup"><span data-stu-id="91365-1157">To provide effective synchronization for a field, all access to the field must use <xref:System.Threading.Thread.VolatileRead%2A> or <xref:System.Threading.Thread.VolatileWrite%2A>.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="91365-1158">В C# с помощью `volatile` модификатор поля гарантирует, что весь доступ к этому полю использует <xref:System.Threading.Thread.VolatileRead%2A> или <xref:System.Threading.Thread.VolatileWrite%2A>.</span><span class="sxs-lookup"><span data-stu-id="91365-1158">In C#, using the `volatile` modifier on a field guarantees that all access to that field uses <xref:System.Threading.Thread.VolatileRead%2A> or <xref:System.Threading.Thread.VolatileWrite%2A>.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="VolatileWrite">
      <MemberSignature Language="C#" Value="public static void VolatileWrite (ref float address, float value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void VolatileWrite(float32&amp; address, float32 value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Thread.VolatileWrite(System.Single@,System.Single)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub VolatileWrite (ByRef address As Single, value As Single)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void VolatileWrite(float % address, float value);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Thread</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="address" Type="System.Single&amp;" RefType="ref" />
        <Parameter Name="value" Type="System.Single" />
      </Parameters>
      <Docs>
        <param name="address"><span data-ttu-id="91365-1159">Поле, в которое требуется записать значение.</span><span class="sxs-lookup"><span data-stu-id="91365-1159">The field to which the value is to be written.</span></span></param>
        <param name="value"><span data-ttu-id="91365-1160">Записываемое значение.</span><span class="sxs-lookup"><span data-stu-id="91365-1160">The value to be written.</span></span></param>
        <summary><span data-ttu-id="91365-1161">Записывает значение непосредственно в поле, так что оно становится видимым для всех процессоров компьютера.</span><span class="sxs-lookup"><span data-stu-id="91365-1161">Writes a value to a field immediately, so that the value is visible to all processors in the computer.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="91365-1162"><xref:System.Threading.Thread.VolatileRead%2A> и <xref:System.Threading.Thread.VolatileWrite%2A> предназначены для особых случаев синхронизации.</span><span class="sxs-lookup"><span data-stu-id="91365-1162"><xref:System.Threading.Thread.VolatileRead%2A> and <xref:System.Threading.Thread.VolatileWrite%2A> are for special cases of synchronization.</span></span> <span data-ttu-id="91365-1163">В обычных условиях C# `lock` оператор, Visual Basic `SyncLock` инструкции и <xref:System.Threading.Monitor> класса предоставляют более простые альтернативы.</span><span class="sxs-lookup"><span data-stu-id="91365-1163">Under normal circumstances, the C# `lock` statement, the Visual Basic `SyncLock` statement, and the <xref:System.Threading.Monitor> class provide easier alternatives.</span></span>  
  
 <span data-ttu-id="91365-1164">В многопроцессорной системе <xref:System.Threading.Thread.VolatileWrite%2A> гарантирует, что значение, записанное в ячейку памяти будет видимым для всех процессоров.</span><span class="sxs-lookup"><span data-stu-id="91365-1164">On a multiprocessor system, <xref:System.Threading.Thread.VolatileWrite%2A> ensures that a value written to a memory location is immediately visible to all processors.</span></span> <span data-ttu-id="91365-1165">Для этого может потребоваться сброс кэша процессора.</span><span class="sxs-lookup"><span data-stu-id="91365-1165">This might require flushing processor caches.</span></span>  
  
 <span data-ttu-id="91365-1166">Даже в системе однопроцессорный <xref:System.Threading.Thread.VolatileRead%2A> и <xref:System.Threading.Thread.VolatileWrite%2A> убедитесь, что значение чтения или записи в память и не кэшируются (например, в регистре процессора).</span><span class="sxs-lookup"><span data-stu-id="91365-1166">Even on a uniprocessor system, <xref:System.Threading.Thread.VolatileRead%2A> and <xref:System.Threading.Thread.VolatileWrite%2A> ensure that a value is read or written to memory, and not cached (for example, in a processor register).</span></span> <span data-ttu-id="91365-1167">Таким образом их можно использовать для синхронизации доступа к полю, которое может быть обновлено другим потоком, или оборудования.</span><span class="sxs-lookup"><span data-stu-id="91365-1167">Thus, you can use them to synchronize access to a field that can be updated by another thread, or by hardware.</span></span>  
  
 <span data-ttu-id="91365-1168">Вызов этого метода влияет только однократный доступ к памяти.</span><span class="sxs-lookup"><span data-stu-id="91365-1168">Calling this method affects only a single memory access.</span></span> <span data-ttu-id="91365-1169">Для предоставления эффективной синхронизации для поля, необходимо использовать весь доступ к полю <xref:System.Threading.Thread.VolatileRead%2A> или <xref:System.Threading.Thread.VolatileWrite%2A>.</span><span class="sxs-lookup"><span data-stu-id="91365-1169">To provide effective synchronization for a field, all access to the field must use <xref:System.Threading.Thread.VolatileRead%2A> or <xref:System.Threading.Thread.VolatileWrite%2A>.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="91365-1170">В C# с помощью `volatile` модификатор поля гарантирует, что весь доступ к этому полю использует <xref:System.Threading.Thread.VolatileRead%2A> или <xref:System.Threading.Thread.VolatileWrite%2A>.</span><span class="sxs-lookup"><span data-stu-id="91365-1170">In C#, using the `volatile` modifier on a field guarantees that all access to that field uses <xref:System.Threading.Thread.VolatileRead%2A> or <xref:System.Threading.Thread.VolatileWrite%2A>.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="VolatileWrite">
      <MemberSignature Language="C#" Value="public static void VolatileWrite (ref ushort address, ushort value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void VolatileWrite(unsigned int16&amp; address, unsigned int16 value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Thread.VolatileWrite(System.UInt16@,System.UInt16)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub VolatileWrite (ByRef address As UShort, value As UShort)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void VolatileWrite(System::UInt16 % address, System::UInt16 value);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Thread</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="address" Type="System.UInt16&amp;" RefType="ref" />
        <Parameter Name="value" Type="System.UInt16" />
      </Parameters>
      <Docs>
        <param name="address"><span data-ttu-id="91365-1171">Поле, в которое требуется записать значение.</span><span class="sxs-lookup"><span data-stu-id="91365-1171">The field to which the value is to be written.</span></span></param>
        <param name="value"><span data-ttu-id="91365-1172">Записываемое значение.</span><span class="sxs-lookup"><span data-stu-id="91365-1172">The value to be written.</span></span></param>
        <summary><span data-ttu-id="91365-1173">Записывает значение непосредственно в поле, так что оно становится видимым для всех процессоров компьютера.</span><span class="sxs-lookup"><span data-stu-id="91365-1173">Writes a value to a field immediately, so that the value is visible to all processors in the computer.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="91365-1174"><xref:System.Threading.Thread.VolatileRead%2A> и <xref:System.Threading.Thread.VolatileWrite%2A> предназначены для особых случаев синхронизации.</span><span class="sxs-lookup"><span data-stu-id="91365-1174"><xref:System.Threading.Thread.VolatileRead%2A> and <xref:System.Threading.Thread.VolatileWrite%2A> are for special cases of synchronization.</span></span> <span data-ttu-id="91365-1175">В обычных условиях C# `lock` оператор, Visual Basic `SyncLock` инструкции и <xref:System.Threading.Monitor> класса предоставляют более простые альтернативы.</span><span class="sxs-lookup"><span data-stu-id="91365-1175">Under normal circumstances, the C# `lock` statement, the Visual Basic `SyncLock` statement, and the <xref:System.Threading.Monitor> class provide easier alternatives.</span></span>  
  
 <span data-ttu-id="91365-1176">В многопроцессорной системе <xref:System.Threading.Thread.VolatileWrite%2A> гарантирует, что значение, записанное в ячейку памяти будет видимым для всех процессоров.</span><span class="sxs-lookup"><span data-stu-id="91365-1176">On a multiprocessor system, <xref:System.Threading.Thread.VolatileWrite%2A> ensures that a value written to a memory location is immediately visible to all processors.</span></span> <span data-ttu-id="91365-1177">Для этого может потребоваться сброс кэша процессора.</span><span class="sxs-lookup"><span data-stu-id="91365-1177">This might require flushing processor caches.</span></span>  
  
 <span data-ttu-id="91365-1178">Даже в системе однопроцессорный <xref:System.Threading.Thread.VolatileRead%2A> и <xref:System.Threading.Thread.VolatileWrite%2A> убедитесь, что значение чтения или записи в память и не кэшируются (например, в регистре процессора).</span><span class="sxs-lookup"><span data-stu-id="91365-1178">Even on a uniprocessor system, <xref:System.Threading.Thread.VolatileRead%2A> and <xref:System.Threading.Thread.VolatileWrite%2A> ensure that a value is read or written to memory, and not cached (for example, in a processor register).</span></span> <span data-ttu-id="91365-1179">Таким образом их можно использовать для синхронизации доступа к полю, которое может быть обновлено другим потоком, или оборудования.</span><span class="sxs-lookup"><span data-stu-id="91365-1179">Thus, you can use them to synchronize access to a field that can be updated by another thread, or by hardware.</span></span>  
  
 <span data-ttu-id="91365-1180">Вызов этого метода влияет только однократный доступ к памяти.</span><span class="sxs-lookup"><span data-stu-id="91365-1180">Calling this method affects only a single memory access.</span></span> <span data-ttu-id="91365-1181">Для предоставления эффективной синхронизации для поля, необходимо использовать весь доступ к полю <xref:System.Threading.Thread.VolatileRead%2A> или <xref:System.Threading.Thread.VolatileWrite%2A>.</span><span class="sxs-lookup"><span data-stu-id="91365-1181">To provide effective synchronization for a field, all access to the field must use <xref:System.Threading.Thread.VolatileRead%2A> or <xref:System.Threading.Thread.VolatileWrite%2A>.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="91365-1182">В C# с помощью `volatile` модификатор поля гарантирует, что весь доступ к этому полю использует <xref:System.Threading.Thread.VolatileRead%2A> или <xref:System.Threading.Thread.VolatileWrite%2A>.</span><span class="sxs-lookup"><span data-stu-id="91365-1182">In C#, using the `volatile` modifier on a field guarantees that all access to that field uses <xref:System.Threading.Thread.VolatileRead%2A> or <xref:System.Threading.Thread.VolatileWrite%2A>.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="VolatileWrite">
      <MemberSignature Language="C#" Value="public static void VolatileWrite (ref uint address, uint value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void VolatileWrite(unsigned int32&amp; address, unsigned int32 value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Thread.VolatileWrite(System.UInt32@,System.UInt32)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub VolatileWrite (ByRef address As UInteger, value As UInteger)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void VolatileWrite(System::UInt32 % address, System::UInt32 value);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Thread</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="address" Type="System.UInt32&amp;" RefType="ref" />
        <Parameter Name="value" Type="System.UInt32" />
      </Parameters>
      <Docs>
        <param name="address"><span data-ttu-id="91365-1183">Поле, в которое требуется записать значение.</span><span class="sxs-lookup"><span data-stu-id="91365-1183">The field to which the value is to be written.</span></span></param>
        <param name="value"><span data-ttu-id="91365-1184">Записываемое значение.</span><span class="sxs-lookup"><span data-stu-id="91365-1184">The value to be written.</span></span></param>
        <summary><span data-ttu-id="91365-1185">Записывает значение непосредственно в поле, так что оно становится видимым для всех процессоров компьютера.</span><span class="sxs-lookup"><span data-stu-id="91365-1185">Writes a value to a field immediately, so that the value is visible to all processors in the computer.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="91365-1186"><xref:System.Threading.Thread.VolatileRead%2A> и <xref:System.Threading.Thread.VolatileWrite%2A> предназначены для особых случаев синхронизации.</span><span class="sxs-lookup"><span data-stu-id="91365-1186"><xref:System.Threading.Thread.VolatileRead%2A> and <xref:System.Threading.Thread.VolatileWrite%2A> are for special cases of synchronization.</span></span> <span data-ttu-id="91365-1187">В обычных условиях C# `lock` оператор, Visual Basic `SyncLock` инструкции и <xref:System.Threading.Monitor> класса предоставляют более простые альтернативы.</span><span class="sxs-lookup"><span data-stu-id="91365-1187">Under normal circumstances, the C# `lock` statement, the Visual Basic `SyncLock` statement, and the <xref:System.Threading.Monitor> class provide easier alternatives.</span></span>  
  
 <span data-ttu-id="91365-1188">В многопроцессорной системе <xref:System.Threading.Thread.VolatileWrite%2A> гарантирует, что значение, записанное в ячейку памяти будет видимым для всех процессоров.</span><span class="sxs-lookup"><span data-stu-id="91365-1188">On a multiprocessor system, <xref:System.Threading.Thread.VolatileWrite%2A> ensures that a value written to a memory location is immediately visible to all processors.</span></span> <span data-ttu-id="91365-1189">Для этого может потребоваться сброс кэша процессора.</span><span class="sxs-lookup"><span data-stu-id="91365-1189">This might require flushing processor caches.</span></span>  
  
 <span data-ttu-id="91365-1190">Даже в системе однопроцессорный <xref:System.Threading.Thread.VolatileRead%2A> и <xref:System.Threading.Thread.VolatileWrite%2A> убедитесь, что значение чтения или записи в память и не кэшируются (например, в регистре процессора).</span><span class="sxs-lookup"><span data-stu-id="91365-1190">Even on a uniprocessor system, <xref:System.Threading.Thread.VolatileRead%2A> and <xref:System.Threading.Thread.VolatileWrite%2A> ensure that a value is read or written to memory, and not cached (for example, in a processor register).</span></span> <span data-ttu-id="91365-1191">Таким образом их можно использовать для синхронизации доступа к полю, которое может быть обновлено другим потоком, или оборудования.</span><span class="sxs-lookup"><span data-stu-id="91365-1191">Thus, you can use them to synchronize access to a field that can be updated by another thread, or by hardware.</span></span>  
  
 <span data-ttu-id="91365-1192">Вызов этого метода влияет только однократный доступ к памяти.</span><span class="sxs-lookup"><span data-stu-id="91365-1192">Calling this method affects only a single memory access.</span></span> <span data-ttu-id="91365-1193">Для предоставления эффективной синхронизации для поля, необходимо использовать весь доступ к полю <xref:System.Threading.Thread.VolatileRead%2A> или <xref:System.Threading.Thread.VolatileWrite%2A>.</span><span class="sxs-lookup"><span data-stu-id="91365-1193">To provide effective synchronization for a field, all access to the field must use <xref:System.Threading.Thread.VolatileRead%2A> or <xref:System.Threading.Thread.VolatileWrite%2A>.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="91365-1194">В C# с помощью `volatile` модификатор поля гарантирует, что весь доступ к этому полю использует <xref:System.Threading.Thread.VolatileRead%2A> или <xref:System.Threading.Thread.VolatileWrite%2A>.</span><span class="sxs-lookup"><span data-stu-id="91365-1194">In C#, using the `volatile` modifier on a field guarantees that all access to that field uses <xref:System.Threading.Thread.VolatileRead%2A> or <xref:System.Threading.Thread.VolatileWrite%2A>.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="VolatileWrite">
      <MemberSignature Language="C#" Value="public static void VolatileWrite (ref ulong address, ulong value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void VolatileWrite(unsigned int64&amp; address, unsigned int64 value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Thread.VolatileWrite(System.UInt64@,System.UInt64)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub VolatileWrite (ByRef address As ULong, value As ULong)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void VolatileWrite(System::UInt64 % address, System::UInt64 value);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Thread</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="address" Type="System.UInt64&amp;" RefType="ref" />
        <Parameter Name="value" Type="System.UInt64" />
      </Parameters>
      <Docs>
        <param name="address"><span data-ttu-id="91365-1195">Поле, в которое требуется записать значение.</span><span class="sxs-lookup"><span data-stu-id="91365-1195">The field to which the value is to be written.</span></span></param>
        <param name="value"><span data-ttu-id="91365-1196">Записываемое значение.</span><span class="sxs-lookup"><span data-stu-id="91365-1196">The value to be written.</span></span></param>
        <summary><span data-ttu-id="91365-1197">Записывает значение непосредственно в поле, так что оно становится видимым для всех процессоров компьютера.</span><span class="sxs-lookup"><span data-stu-id="91365-1197">Writes a value to a field immediately, so that the value is visible to all processors in the computer.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="91365-1198"><xref:System.Threading.Thread.VolatileRead%2A> и <xref:System.Threading.Thread.VolatileWrite%2A> предназначены для особых случаев синхронизации.</span><span class="sxs-lookup"><span data-stu-id="91365-1198"><xref:System.Threading.Thread.VolatileRead%2A> and <xref:System.Threading.Thread.VolatileWrite%2A> are for special cases of synchronization.</span></span> <span data-ttu-id="91365-1199">В обычных условиях C# `lock` оператор, Visual Basic `SyncLock` инструкции и <xref:System.Threading.Monitor> класса предоставляют более простые альтернативы.</span><span class="sxs-lookup"><span data-stu-id="91365-1199">Under normal circumstances, the C# `lock` statement, the Visual Basic `SyncLock` statement, and the <xref:System.Threading.Monitor> class provide easier alternatives.</span></span>  
  
 <span data-ttu-id="91365-1200">В многопроцессорной системе <xref:System.Threading.Thread.VolatileWrite%2A> гарантирует, что значение, записанное в ячейку памяти будет видимым для всех процессоров.</span><span class="sxs-lookup"><span data-stu-id="91365-1200">On a multiprocessor system, <xref:System.Threading.Thread.VolatileWrite%2A> ensures that a value written to a memory location is immediately visible to all processors.</span></span> <span data-ttu-id="91365-1201">Для этого может потребоваться сброс кэша процессора.</span><span class="sxs-lookup"><span data-stu-id="91365-1201">This might require flushing processor caches.</span></span>  
  
 <span data-ttu-id="91365-1202">Даже в системе однопроцессорный <xref:System.Threading.Thread.VolatileRead%2A> и <xref:System.Threading.Thread.VolatileWrite%2A> убедитесь, что значение чтения или записи в память и не кэшируются (например, в регистре процессора).</span><span class="sxs-lookup"><span data-stu-id="91365-1202">Even on a uniprocessor system, <xref:System.Threading.Thread.VolatileRead%2A> and <xref:System.Threading.Thread.VolatileWrite%2A> ensure that a value is read or written to memory, and not cached (for example, in a processor register).</span></span> <span data-ttu-id="91365-1203">Таким образом их можно использовать для синхронизации доступа к полю, которое может быть обновлено другим потоком, или оборудования.</span><span class="sxs-lookup"><span data-stu-id="91365-1203">Thus, you can use them to synchronize access to a field that can be updated by another thread, or by hardware.</span></span>  
  
 <span data-ttu-id="91365-1204">Вызов этого метода влияет только однократный доступ к памяти.</span><span class="sxs-lookup"><span data-stu-id="91365-1204">Calling this method affects only a single memory access.</span></span> <span data-ttu-id="91365-1205">Для предоставления эффективной синхронизации для поля, необходимо использовать весь доступ к полю <xref:System.Threading.Thread.VolatileRead%2A> или <xref:System.Threading.Thread.VolatileWrite%2A>.</span><span class="sxs-lookup"><span data-stu-id="91365-1205">To provide effective synchronization for a field, all access to the field must use <xref:System.Threading.Thread.VolatileRead%2A> or <xref:System.Threading.Thread.VolatileWrite%2A>.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="91365-1206">В C# с помощью `volatile` модификатор поля гарантирует, что весь доступ к этому полю использует <xref:System.Threading.Thread.VolatileRead%2A> или <xref:System.Threading.Thread.VolatileWrite%2A>.</span><span class="sxs-lookup"><span data-stu-id="91365-1206">In C#, using the `volatile` modifier on a field guarantees that all access to that field uses <xref:System.Threading.Thread.VolatileRead%2A> or <xref:System.Threading.Thread.VolatileWrite%2A>.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="VolatileWrite">
      <MemberSignature Language="C#" Value="public static void VolatileWrite (ref UIntPtr address, UIntPtr value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void VolatileWrite(native unsigned int&amp; address, native unsigned int value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Thread.VolatileWrite(System.UIntPtr@,System.UIntPtr)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub VolatileWrite (ByRef address As UIntPtr, value As UIntPtr)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void VolatileWrite(UIntPtr % address, UIntPtr value);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Thread</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="address" Type="System.UIntPtr&amp;" RefType="ref" />
        <Parameter Name="value" Type="System.UIntPtr" />
      </Parameters>
      <Docs>
        <param name="address"><span data-ttu-id="91365-1207">Поле, в которое требуется записать значение.</span><span class="sxs-lookup"><span data-stu-id="91365-1207">The field to which the value is to be written.</span></span></param>
        <param name="value"><span data-ttu-id="91365-1208">Записываемое значение.</span><span class="sxs-lookup"><span data-stu-id="91365-1208">The value to be written.</span></span></param>
        <summary><span data-ttu-id="91365-1209">Записывает значение непосредственно в поле, так что оно становится видимым для всех процессоров компьютера.</span><span class="sxs-lookup"><span data-stu-id="91365-1209">Writes a value to a field immediately, so that the value is visible to all processors in the computer.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="91365-1210"><xref:System.Threading.Thread.VolatileRead%2A> и <xref:System.Threading.Thread.VolatileWrite%2A> предназначены для особых случаев синхронизации.</span><span class="sxs-lookup"><span data-stu-id="91365-1210"><xref:System.Threading.Thread.VolatileRead%2A> and <xref:System.Threading.Thread.VolatileWrite%2A> are for special cases of synchronization.</span></span> <span data-ttu-id="91365-1211">В обычных условиях C# `lock` оператор, Visual Basic `SyncLock` инструкции и <xref:System.Threading.Monitor> класса предоставляют более простые альтернативы.</span><span class="sxs-lookup"><span data-stu-id="91365-1211">Under normal circumstances, the C# `lock` statement, the Visual Basic `SyncLock` statement, and the <xref:System.Threading.Monitor> class provide easier alternatives.</span></span>  
  
 <span data-ttu-id="91365-1212">В многопроцессорной системе <xref:System.Threading.Thread.VolatileWrite%2A> гарантирует, что значение, записанное в ячейку памяти будет видимым для всех процессоров.</span><span class="sxs-lookup"><span data-stu-id="91365-1212">On a multiprocessor system, <xref:System.Threading.Thread.VolatileWrite%2A> ensures that a value written to a memory location is immediately visible to all processors.</span></span> <span data-ttu-id="91365-1213">Для этого может потребоваться сброс кэша процессора.</span><span class="sxs-lookup"><span data-stu-id="91365-1213">This might require flushing processor caches.</span></span>  
  
 <span data-ttu-id="91365-1214">Даже в системе однопроцессорный <xref:System.Threading.Thread.VolatileRead%2A> и <xref:System.Threading.Thread.VolatileWrite%2A> убедитесь, что значение чтения или записи в память и не кэшируются (например, в регистре процессора).</span><span class="sxs-lookup"><span data-stu-id="91365-1214">Even on a uniprocessor system, <xref:System.Threading.Thread.VolatileRead%2A> and <xref:System.Threading.Thread.VolatileWrite%2A> ensure that a value is read or written to memory, and not cached (for example, in a processor register).</span></span> <span data-ttu-id="91365-1215">Таким образом их можно использовать для синхронизации доступа к полю, которое может быть обновлено другим потоком, или оборудования.</span><span class="sxs-lookup"><span data-stu-id="91365-1215">Thus, you can use them to synchronize access to a field that can be updated by another thread, or by hardware.</span></span>  
  
 <span data-ttu-id="91365-1216">Вызов этого метода влияет только однократный доступ к памяти.</span><span class="sxs-lookup"><span data-stu-id="91365-1216">Calling this method affects only a single memory access.</span></span> <span data-ttu-id="91365-1217">Для предоставления эффективной синхронизации для поля, необходимо использовать весь доступ к полю <xref:System.Threading.Thread.VolatileRead%2A> или <xref:System.Threading.Thread.VolatileWrite%2A>.</span><span class="sxs-lookup"><span data-stu-id="91365-1217">To provide effective synchronization for a field, all access to the field must use <xref:System.Threading.Thread.VolatileRead%2A> or <xref:System.Threading.Thread.VolatileWrite%2A>.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="91365-1218">В C# с помощью `volatile` модификатор поля гарантирует, что весь доступ к этому полю использует <xref:System.Threading.Thread.VolatileRead%2A> или <xref:System.Threading.Thread.VolatileWrite%2A>.</span><span class="sxs-lookup"><span data-stu-id="91365-1218">In C#, using the `volatile` modifier on a field guarantees that all access to that field uses <xref:System.Threading.Thread.VolatileRead%2A> or <xref:System.Threading.Thread.VolatileWrite%2A>.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Yield">
      <MemberSignature Language="C#" Value="public static bool Yield ();" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool Yield() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Thread.Yield" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Yield () As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool Yield();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Thread</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.ConstrainedExecution.ReliabilityContract(System.Runtime.ConstrainedExecution.Consistency.WillNotCorruptState, System.Runtime.ConstrainedExecution.Cer.Success)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="91365-1219">Позволяет вызвавшему потоку передать выполнение другому потоку, готовому к использованию на текущем процессоре.</span><span class="sxs-lookup"><span data-stu-id="91365-1219">Causes the calling thread to yield execution to another thread that is ready to run on the current processor.</span></span> <span data-ttu-id="91365-1220">Операционная система выбирает, какому потоку передается выполнение.</span><span class="sxs-lookup"><span data-stu-id="91365-1220">The operating system selects the thread to yield to.</span></span></summary>
        <returns>
          <span data-ttu-id="91365-1221">Значение <see langword="true" />, если операционная система переключила выполнение на другой поток, в противном случае — значение <see langword="false" />.</span><span class="sxs-lookup"><span data-stu-id="91365-1221"><see langword="true" /> if the operating system switched execution to another thread; otherwise, <see langword="false" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="91365-1222">Если этот метод завершается успешно, получением остальная часть потока текущего интервала времени.</span><span class="sxs-lookup"><span data-stu-id="91365-1222">If this method succeeds, the rest of the thread's current time slice is yielded.</span></span> <span data-ttu-id="91365-1223">Операционная система планирует вызывающий поток для другого среза времени в соответствии с его приоритетом и состоянием других потоков, доступных для выполнения.</span><span class="sxs-lookup"><span data-stu-id="91365-1223">The operating system schedules the calling thread for another time slice, according to its priority and the status of other threads that are available to run.</span></span>  
  
 <span data-ttu-id="91365-1224">Выдача ограничена процессором, который выполняет вызывающий поток.</span><span class="sxs-lookup"><span data-stu-id="91365-1224">Yielding is limited to the processor that is executing the calling thread.</span></span> <span data-ttu-id="91365-1225">Операционная система не переключит выполнение на другой процессор даже в том случае, если процессор простаивает или выполняется поток с более низким приоритетом.</span><span class="sxs-lookup"><span data-stu-id="91365-1225">The operating system will not switch execution to another processor, even if that processor is idle or is running a thread of lower priority.</span></span> <span data-ttu-id="91365-1226">Если нет других потоков, которые готовы к выполнению на текущем процессоре, операционная система не дает выполнения, и этот метод возвращает `false`.</span><span class="sxs-lookup"><span data-stu-id="91365-1226">If there are no other threads that are ready to execute on the current processor, the operating system does not yield execution, and this method returns `false`.</span></span>  
  
 <span data-ttu-id="91365-1227">Этот метод эквивалентен методу вызове неуправляемого кода для вызова собственного Win32 `SwitchToThread` функции.</span><span class="sxs-lookup"><span data-stu-id="91365-1227">This method is equivalent to using platform invoke to call the native Win32 `SwitchToThread` function.</span></span> <span data-ttu-id="91365-1228">Необходимо вызвать <xref:System.Threading.Thread.Yield%2A> вызвать метод вместо использования платформы, так как неуправляемого кода обходит любое пользовательское потоковое поведение узел был запрошен.</span><span class="sxs-lookup"><span data-stu-id="91365-1228">You should call the <xref:System.Threading.Thread.Yield%2A> method instead of using platform invoke, because platform invoke bypasses any custom threading behavior the host has requested.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>