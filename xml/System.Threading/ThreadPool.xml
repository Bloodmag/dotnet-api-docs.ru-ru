<Type Name="ThreadPool" FullName="System.Threading.ThreadPool">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="50de54f2e0cde589b4af1c454e85fed39c9f40df" />
    <Meta Name="ms.sourcegitcommit" Value="d31dc2ede16f6f7bc64e90d9f897ff54c4e3869b" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="ru-RU" />
    <Meta Name="ms.lasthandoff" Value="04/03/2018" />
  </Metadata>
  <TypeSignature Language="C#" Value="public static class ThreadPool" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi abstract sealed beforefieldinit ThreadPool extends System.Object" />
  <TypeSignature Language="DocId" Value="T:System.Threading.ThreadPool" />
  <TypeSignature Language="VB.NET" Value="Public Class ThreadPool" />
  <TypeSignature Language="C++ CLI" Value="public ref class ThreadPool abstract sealed" />
  <AssemblyInfo>
    <AssemblyName>System.Threading.ThreadPool</AssemblyName>
    <AssemblyVersion>4.0.10.0</AssemblyVersion>
    <AssemblyVersion>4.1.0.0</AssemblyVersion>
    <AssemblyVersion>4.1.1.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>mscorlib</AssemblyName>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>
      <span data-ttu-id="3aad5-101">Предоставляет пул потоков, который можно использовать для выполнения задач, отправки рабочих элементов, обработки асинхронного ввода-вывода, ожидания от имени других потоков и обработки таймеров.</span>
      <span class="sxs-lookup">
        <span data-stu-id="3aad5-101">Provides a pool of threads that can be used to execute tasks, post work items, process asynchronous I/O, wait on behalf of other threads, and process timers.</span>
      </span>
    </summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="3aad5-102">Многие приложения создают потоки, которые проводят много времени в бездействующее состояние ожидания возникновения события.</span><span class="sxs-lookup"><span data-stu-id="3aad5-102">Many applications create threads that spend a great deal of time in the sleeping state, waiting for an event to occur.</span></span> <span data-ttu-id="3aad5-103">Другие потоки могут входить в бездействующее состояние только для периодически опрашивать для изменения или обновления сведений о состоянии.</span><span class="sxs-lookup"><span data-stu-id="3aad5-103">Other threads might enter a sleeping state only to be awakened periodically to poll for a change or update status information.</span></span> <span data-ttu-id="3aad5-104">Пул потоков позволяет более эффективно использовать потоки, предоставляя приложения с пулом рабочих потоков, управляемых системой.</span><span class="sxs-lookup"><span data-stu-id="3aad5-104">The thread pool enables you to use threads more efficiently by providing your application with a pool of worker threads that are managed by the system.</span></span> <span data-ttu-id="3aad5-105">Следующие примеры операций, которые используют пул потоков.</span><span class="sxs-lookup"><span data-stu-id="3aad5-105">Examples of operations that use thread pool threads include the following:</span></span>  
  
-   <span data-ttu-id="3aad5-106">При создании <xref:System.Threading.Tasks.Task> или <xref:System.Threading.Tasks.Task%601> объекта для выполнения некоторых задач асинхронно, по умолчанию, задача запланирована для выполнения в потоке пула потоков.</span><span class="sxs-lookup"><span data-stu-id="3aad5-106">When you create a <xref:System.Threading.Tasks.Task> or <xref:System.Threading.Tasks.Task%601> object to perform some task asynchronously, by default the task is scheduled to run on a thread pool thread.</span></span>  
  
-   <span data-ttu-id="3aad5-107">Асинхронные таймеры используют пул потоков.</span><span class="sxs-lookup"><span data-stu-id="3aad5-107">Asynchronous timers use the thread pool.</span></span> <span data-ttu-id="3aad5-108">Потоки из пула потоков выполнения обратных вызовов с <xref:System.Threading.Timer?displayProperty=nameWithType> класса и инициировать события из <xref:System.Timers.Timer?displayProperty=nameWithType> класса.</span><span class="sxs-lookup"><span data-stu-id="3aad5-108">Thread pool threads execute callbacks from the <xref:System.Threading.Timer?displayProperty=nameWithType> class and raise events from the <xref:System.Timers.Timer?displayProperty=nameWithType> class.</span></span>  
  
-   <span data-ttu-id="3aad5-109">При использовании дескрипторы ожидания зарегистрированного потока системы отслеживает состояние дескрипторов ожидания.</span><span class="sxs-lookup"><span data-stu-id="3aad5-109">When you use registered wait handles, a system thread monitors the status of the wait handles.</span></span> <span data-ttu-id="3aad5-110">По завершении операции ожидания рабочий поток из пула потоков выполняет соответствующую функцию обратного вызова.</span><span class="sxs-lookup"><span data-stu-id="3aad5-110">When a wait operation completes, a worker thread from the thread pool executes the corresponding callback function.</span></span>  
  
-   <span data-ttu-id="3aad5-111">При вызове <xref:System.Threading.ThreadPool.QueueUserWorkItem%2A> метод в очередь метод для выполнения в потоке пула потоков.</span><span class="sxs-lookup"><span data-stu-id="3aad5-111">When you call the <xref:System.Threading.ThreadPool.QueueUserWorkItem%2A> method to queue a method for execution on a thread pool thread.</span></span> <span data-ttu-id="3aad5-112">Это можно сделать, передав в метод <xref:System.Threading.WaitCallback> делегата.</span><span class="sxs-lookup"><span data-stu-id="3aad5-112">You do this by passing the method a <xref:System.Threading.WaitCallback> delegate.</span></span>   <span data-ttu-id="3aad5-113">Делегат имеет подпись</span><span class="sxs-lookup"><span data-stu-id="3aad5-113">The delegate has the signature</span></span>  
  
    ```csharp  
    void WaitCallback(Object state)  
    ```  
  
    ```vb  
    Sub WaitCallback(state As Object)  
    ```  
  
     <span data-ttu-id="3aad5-114">где `state` — это объект, содержащий данные для использования в делегат.</span><span class="sxs-lookup"><span data-stu-id="3aad5-114">where `state` is an object that contains data to be used by the delegate.</span></span> <span data-ttu-id="3aad5-115">Фактические данные могут передаваться делегата путем вызова <xref:System.Threading.ThreadPool.QueueUserWorkItem%28System.Threading.WaitCallback%2CSystem.Object%29> метод.</span><span class="sxs-lookup"><span data-stu-id="3aad5-115">The actual data can be passed to the delegate by calling the <xref:System.Threading.ThreadPool.QueueUserWorkItem%28System.Threading.WaitCallback%2CSystem.Object%29> method.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="3aad5-116">Потоки в пул управляемых потоков — это фоновые потоки.</span><span class="sxs-lookup"><span data-stu-id="3aad5-116">The threads in the managed thread pool are background threads.</span></span> <span data-ttu-id="3aad5-117">То есть их <xref:System.Threading.Thread.IsBackground%2A> свойства `true`.</span><span class="sxs-lookup"><span data-stu-id="3aad5-117">That is, their <xref:System.Threading.Thread.IsBackground%2A> properties are `true`.</span></span> <span data-ttu-id="3aad5-118">Это означает, что <xref:System.Threading.ThreadPool> поток не будет поддерживать выполнение приложения после все основные потоки вышли.</span><span class="sxs-lookup"><span data-stu-id="3aad5-118">This means that a <xref:System.Threading.ThreadPool> thread will not keep an application running after all foreground threads have exited.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="3aad5-119">Когда пул потоков повторно использует поток, не очищает данные в локальном хранилище потока или в поля, отмеченные <xref:System.ThreadStaticAttribute> атрибута.</span><span class="sxs-lookup"><span data-stu-id="3aad5-119">When the thread pool reuses a thread, it does not clear the data in thread local storage or in fields that are marked with the <xref:System.ThreadStaticAttribute> attribute.</span></span> <span data-ttu-id="3aad5-120">Таким образом, когда метод проверяет локальное хранилище потока или полей, отмеченные <xref:System.ThreadStaticAttribute> атрибут, находит значения может быть оставлено на более ранних использование пула потоков.</span><span class="sxs-lookup"><span data-stu-id="3aad5-120">Therefore, when a method examines thread local storage or fields that are marked with the <xref:System.ThreadStaticAttribute> attribute, the values it finds might be left over from an earlier use of the thread pool thread.</span></span>  
  
 <span data-ttu-id="3aad5-121">Можно также поместить в очередь рабочих элементов, которые не относятся к операции ожидания в пуле потоков.</span><span class="sxs-lookup"><span data-stu-id="3aad5-121">You can also queue work items that are not related to a wait operation to the thread pool.</span></span> <span data-ttu-id="3aad5-122">Для запроса, что рабочий элемент должен обрабатываться потоком в пуле потоков, вызовите <xref:System.Threading.ThreadPool.QueueUserWorkItem%2A> метод.</span><span class="sxs-lookup"><span data-stu-id="3aad5-122">To request that a work item be handled by a thread in the thread pool, call the <xref:System.Threading.ThreadPool.QueueUserWorkItem%2A> method.</span></span> <span data-ttu-id="3aad5-123">Этот метод принимает в качестве параметра ссылку на метод или делегат, который будет вызываться из потока из пула потоков.</span><span class="sxs-lookup"><span data-stu-id="3aad5-123">This method takes as a parameter a reference to the method or delegate that will be called by the thread selected from the thread pool.</span></span> <span data-ttu-id="3aad5-124">Нет возможности для отмены рабочего элемента после ее поставлен в очередь.</span><span class="sxs-lookup"><span data-stu-id="3aad5-124">There is no way to cancel a work item after it has been queued.</span></span>  
  
 <span data-ttu-id="3aad5-125">Таймеры очереди и зарегистрированные операции ожидания также используют пул потоков.</span><span class="sxs-lookup"><span data-stu-id="3aad5-125">Timer-queue timers and registered wait operations also use the thread pool.</span></span> <span data-ttu-id="3aad5-126">Их функции обратного вызова помещаются в очередь пула потоков.</span><span class="sxs-lookup"><span data-stu-id="3aad5-126">Their callback functions are queued to the thread pool.</span></span>  
  
 <span data-ttu-id="3aad5-127">Имеется один пул потоков для каждого процесса.</span><span class="sxs-lookup"><span data-stu-id="3aad5-127">There is one thread pool per process.</span></span> <span data-ttu-id="3aad5-128">Начиная с [!INCLUDE[net_v40_long](~/includes/net-v40-long-md.md)] размер по умолчанию пула потоков для процесса зависит от нескольких факторов, таких как размер виртуального адресного пространства.</span><span class="sxs-lookup"><span data-stu-id="3aad5-128">Beginning with the [!INCLUDE[net_v40_long](~/includes/net-v40-long-md.md)], the default size of the thread pool for a process depends on several factors, such as the size of the virtual address space.</span></span> <span data-ttu-id="3aad5-129">Процесс может вызвать метод <xref:System.Threading.ThreadPool.GetMaxThreads%2A> для определения количества потоков.</span><span class="sxs-lookup"><span data-stu-id="3aad5-129">A process can call the <xref:System.Threading.ThreadPool.GetMaxThreads%2A> method to determine the number of threads.</span></span> <span data-ttu-id="3aad5-130">Число потоков в пуле потоков может быть изменен с помощью <xref:System.Threading.ThreadPool.SetMaxThreads%2A> метод.</span><span class="sxs-lookup"><span data-stu-id="3aad5-130">The number of threads in the thread pool can be changed by using the <xref:System.Threading.ThreadPool.SetMaxThreads%2A> method.</span></span> <span data-ttu-id="3aad5-131">Каждый поток использует размер стека по умолчанию и запускается с приоритетом по умолчанию.</span><span class="sxs-lookup"><span data-stu-id="3aad5-131">Each thread uses the default stack size and runs at the default priority.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="3aad5-132">Неуправляемый код, на котором размещена .NET Framework можно изменить размер пула потоков с помощью `CorSetMaxThreads` функции, определенные в файле mscoree.h.</span><span class="sxs-lookup"><span data-stu-id="3aad5-132">Unmanaged code that hosts the .NET Framework can change the size of the thread pool by using the `CorSetMaxThreads` function, defined in the mscoree.h file.</span></span>  
  
 <span data-ttu-id="3aad5-133">Пул потоков предоставляет новые рабочие потоки или потоки завершения ввода-вывода по запросу, пока не достигнет минимум для каждой категории.</span><span class="sxs-lookup"><span data-stu-id="3aad5-133">The thread pool provides new worker threads or I/O completion threads on demand until it reaches the minimum for each category.</span></span> <span data-ttu-id="3aad5-134">При достижении минимума пул потоков может создавать дополнительные потоки в этой категории или ожидать завершения некоторых задач.</span><span class="sxs-lookup"><span data-stu-id="3aad5-134">When a minimum is reached, the thread pool can create additional threads in that category or wait until some tasks complete.</span></span> <span data-ttu-id="3aad5-135">Начиная с [!INCLUDE[net_v40_short](~/includes/net-v40-short-md.md)] пул потоков создает и уничтожает рабочие потоки в целях оптимизации пропускной способности, которая определяется как количество задач, завершаемых за единицу времени.</span><span class="sxs-lookup"><span data-stu-id="3aad5-135">Beginning with the [!INCLUDE[net_v40_short](~/includes/net-v40-short-md.md)], the thread pool creates and destroys worker threads in order to optimize throughput, which is defined as the number of tasks that complete per unit of time.</span></span> <span data-ttu-id="3aad5-136">Слишком малое количество потоков может препятствовать оптимальному использованию доступных ресурсов, тогда как слишком большое их количество может усиливать конкуренцию за ресурсы.</span><span class="sxs-lookup"><span data-stu-id="3aad5-136">Too few threads might not make optimal use of available resources, whereas too many threads could increase resource contention.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="3aad5-137">Если потребность низкая, фактическое количество потоков из пула потоков может быть ниже минимальных значений.</span><span class="sxs-lookup"><span data-stu-id="3aad5-137">When demand is low, the actual number of thread pool threads can fall below the minimum values.</span></span>  
  
 <span data-ttu-id="3aad5-138">Для получения этих минимальных значений можно использовать метод <xref:System.Threading.ThreadPool.GetMinThreads%2A>.</span><span class="sxs-lookup"><span data-stu-id="3aad5-138">You can use the <xref:System.Threading.ThreadPool.GetMinThreads%2A> method to obtain these minimum values.</span></span>  
  
> [!CAUTION]
>  <span data-ttu-id="3aad5-139">Можно использовать <xref:System.Threading.ThreadPool.SetMinThreads%2A> метод для увеличения минимального количества потоков.</span><span class="sxs-lookup"><span data-stu-id="3aad5-139">You can use the <xref:System.Threading.ThreadPool.SetMinThreads%2A> method to increase the minimum number of threads.</span></span> <span data-ttu-id="3aad5-140">Однако необоснованное увеличение этих значений может привести к снижению производительности.</span><span class="sxs-lookup"><span data-stu-id="3aad5-140">However, unnecessarily increasing these values can cause performance problems.</span></span> <span data-ttu-id="3aad5-141">Если одновременно запускается слишком много задач, все они могут выполняться слишком медленно.</span><span class="sxs-lookup"><span data-stu-id="3aad5-141">If too many tasks start at the same time, all of them might appear to be slow.</span></span> <span data-ttu-id="3aad5-142">В большинстве случаев пул потоков работает наилучшим образом, если он использует собственный алгоритм выделения потоков.</span><span class="sxs-lookup"><span data-stu-id="3aad5-142">In most cases the thread pool will perform better with its own algorithm for allocating threads.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="3aad5-143">В следующем примере основного потока приложения помещает в очередь метод с именем `ThreadProc` для выполнения в потоке пула потоков, бездействует в течение одной секунды, а затем завершает работу.</span><span class="sxs-lookup"><span data-stu-id="3aad5-143">In the following example, the main application thread  queues a method named `ThreadProc` to execute on a thread pool thread, sleeps for one second, and then exits.</span></span> <span data-ttu-id="3aad5-144">`ThreadProc` Метод просто отображает сообщение.</span><span class="sxs-lookup"><span data-stu-id="3aad5-144">The `ThreadProc` method simply displays a message.</span></span>  
  
 [!code-cpp[System.Threading.ThreadPool QueueUserWorkItem0#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Threading.ThreadPool QueueUserWorkItem0/CPP/source.cpp#1)]
 [!code-csharp[System.Threading.ThreadPool QueueUserWorkItem0#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Threading.ThreadPool QueueUserWorkItem0/CS/source.cs#1)]
 [!code-vb[System.Threading.ThreadPool QueueUserWorkItem0#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Threading.ThreadPool QueueUserWorkItem0/VB/source.vb#1)]  
  
 <span data-ttu-id="3aad5-145">Если закомментировать вызов <xref:System.Threading.Thread.Sleep%2A?displayProperty=nameWithType> метод, основной поток завершается прежде, чем метод выполняется в потоке пула потоков.</span><span class="sxs-lookup"><span data-stu-id="3aad5-145">If you comment out the call to the <xref:System.Threading.Thread.Sleep%2A?displayProperty=nameWithType> method, the main thread exits before         method runs on the thread pool thread.</span></span>  <span data-ttu-id="3aad5-146">Пул потоков использует фоновые потоки, которые не могут поддерживать приложения, если все основные потоки завершились.</span><span class="sxs-lookup"><span data-stu-id="3aad5-146">The thread pool uses background         threads, which do not keep the application running if all foreground threads have terminated.</span></span>  <span data-ttu-id="3aad5-147">(Это простой пример состояние гонки).</span><span class="sxs-lookup"><span data-stu-id="3aad5-147">(This         is a simple example of a race condition.)</span></span>  
  
 ]]></format>
    </remarks>
    <threadsafe>
      <span data-ttu-id="3aad5-148">Данный тип потокобезопасен.</span>
      <span class="sxs-lookup">
        <span data-stu-id="3aad5-148">This type is thread safe.</span>
      </span>
    </threadsafe>
  </Docs>
  <Members>
    <MemberGroup MemberName="BindHandle">
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="3aad5-149">Связывает дескриптор операционной системы с объектом <see cref="T:System.Threading.ThreadPool" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3aad5-149">Binds an operating system handle to the <see cref="T:System.Threading.ThreadPool" />.</span>
          </span>
        </summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="BindHandle">
      <MemberSignature Language="C#" Value="public static bool BindHandle (IntPtr osHandle);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool BindHandle(native int osHandle) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.ThreadPool.BindHandle(System.IntPtr)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function BindHandle (osHandle As IntPtr) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool BindHandle(IntPtr osHandle);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Threading.ThreadPool</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Obsolete("ThreadPool.BindHandle(IntPtr) has been deprecated.  Please use ThreadPool.BindHandle(SafeHandle) instead.", false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="osHandle" Type="System.IntPtr" />
      </Parameters>
      <Docs>
        <param name="osHandle">
          <span data-ttu-id="3aad5-150">Структура <see cref="T:System.IntPtr" />, хранящая дескриптор.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3aad5-150">An <see cref="T:System.IntPtr" /> that holds the handle.</span>
          </span>
          <span data-ttu-id="3aad5-151">Дескриптор должен быть открыт для перекрывающегося ввода-вывода в неуправляемой области.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3aad5-151">The handle must have been opened for overlapped I/O on the unmanaged side.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="3aad5-152">Связывает дескриптор операционной системы с объектом <see cref="T:System.Threading.ThreadPool" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3aad5-152">Binds an operating system handle to the <see cref="T:System.Threading.ThreadPool" />.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="3aad5-153">Значение <see langword="true" />, если дескриптор является связанным; в противном случае — значение <see langword="false" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3aad5-153">
              <see langword="true" /> if the handle is bound; otherwise, <see langword="false" />.</span>
          </span>
        </returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.Security.SecurityException">
          <span data-ttu-id="3aad5-154">У вызывающего объекта отсутствует необходимое разрешение.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3aad5-154">The caller does not have the required permission.</span>
          </span>
        </exception>
        <permission cref="T:System.Security.Permissions.SecurityPermission">
          <span data-ttu-id="3aad5-155">для возможности вызова неуправляемого кода.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3aad5-155">for the ability to call unmanaged code.</span>
          </span>
          <span data-ttu-id="3aad5-156">Связанное перечисление: <see cref="F:System.Security.Permissions.SecurityPermissionFlag.UnmanagedCode" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3aad5-156">Associated enumeration: <see cref="F:System.Security.Permissions.SecurityPermissionFlag.UnmanagedCode" />.</span>
          </span>
        </permission>
      </Docs>
    </Member>
    <Member MemberName="BindHandle">
      <MemberSignature Language="C#" Value="public static bool BindHandle (System.Runtime.InteropServices.SafeHandle osHandle);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool BindHandle(class System.Runtime.InteropServices.SafeHandle osHandle) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.ThreadPool.BindHandle(System.Runtime.InteropServices.SafeHandle)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function BindHandle (osHandle As SafeHandle) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool BindHandle(System::Runtime::InteropServices::SafeHandle ^ osHandle);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.ThreadPool</AssemblyName>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="osHandle" Type="System.Runtime.InteropServices.SafeHandle" />
      </Parameters>
      <Docs>
        <param name="osHandle">
          <span data-ttu-id="3aad5-157">Объект <see cref="T:System.Runtime.InteropServices.SafeHandle" />, содержащий дескриптор операционной системы.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3aad5-157">A <see cref="T:System.Runtime.InteropServices.SafeHandle" /> that holds the operating system handle.</span>
          </span>
          <span data-ttu-id="3aad5-158">Дескриптор должен быть открыт для перекрывающегося ввода-вывода в неуправляемой области.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3aad5-158">The handle must have been opened for overlapped I/O on the unmanaged side.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="3aad5-159">Связывает дескриптор операционной системы с объектом <see cref="T:System.Threading.ThreadPool" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3aad5-159">Binds an operating system handle to the <see cref="T:System.Threading.ThreadPool" />.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="3aad5-160">Значение <see langword="true" />, если дескриптор является связанным; в противном случае — значение <see langword="false" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3aad5-160">
              <see langword="true" /> if the handle is bound; otherwise, <see langword="false" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="3aad5-161">`osHandle` Параметр должен быть <xref:Microsoft.Win32.SafeHandles.SafeFileHandle>, который является производным от абстрактного <xref:System.Runtime.InteropServices.SafeHandle> класса.</span><span class="sxs-lookup"><span data-stu-id="3aad5-161">The `osHandle` parameter should be a <xref:Microsoft.Win32.SafeHandles.SafeFileHandle>, which derives from the abstract <xref:System.Runtime.InteropServices.SafeHandle> class.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="3aad5-162">Свойство <paramref name="osHandle" /> имеет значение <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3aad5-162">
              <paramref name="osHandle" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <permission cref="T:System.Security.Permissions.SecurityPermission">
          <span data-ttu-id="3aad5-163">для возможности вызова неуправляемого кода.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3aad5-163">for the ability to call unmanaged code.</span>
          </span>
          <span data-ttu-id="3aad5-164">Связанное перечисление: <see cref="F:System.Security.Permissions.SecurityPermissionFlag.UnmanagedCode" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3aad5-164">Associated enumeration: <see cref="F:System.Security.Permissions.SecurityPermissionFlag.UnmanagedCode" />.</span>
          </span>
        </permission>
      </Docs>
    </Member>
    <Member MemberName="GetAvailableThreads">
      <MemberSignature Language="C#" Value="public static void GetAvailableThreads (out int workerThreads, out int completionPortThreads);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void GetAvailableThreads([out] int32&amp; workerThreads, [out] int32&amp; completionPortThreads) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.ThreadPool.GetAvailableThreads(System.Int32@,System.Int32@)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub GetAvailableThreads (ByRef workerThreads As Integer, ByRef completionPortThreads As Integer)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void GetAvailableThreads([Runtime::InteropServices::Out] int % workerThreads, [Runtime::InteropServices::Out] int % completionPortThreads);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Threading.ThreadPool</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="workerThreads" Type="System.Int32&amp;" RefType="out" />
        <Parameter Name="completionPortThreads" Type="System.Int32&amp;" RefType="out" />
      </Parameters>
      <Docs>
        <param name="workerThreads">
          <span data-ttu-id="3aad5-165">Количество доступных рабочих потоков.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3aad5-165">The number of available worker threads.</span>
          </span>
        </param>
        <param name="completionPortThreads">
          <span data-ttu-id="3aad5-166">Количество доступных потоков асинхронного ввода-вывода.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3aad5-166">The number of available asynchronous I/O threads.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="3aad5-167">Возвращает разницу между максимальным числом потоков пула, возвращаемых методом <see cref="M:System.Threading.ThreadPool.GetMaxThreads(System.Int32@,System.Int32@)" />, и числом активных в данный момент потоков.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3aad5-167">Retrieves the difference between the maximum number of thread pool threads returned by the <see cref="M:System.Threading.ThreadPool.GetMaxThreads(System.Int32@,System.Int32@)" /> method, and the number currently active.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="3aad5-168">Когда <xref:System.Threading.ThreadPool.GetAvailableThreads%2A> возвращает переменную, указанную в `workerThreads` содержит число дополнительных рабочих потоков, которые могут быть запущены и переменную, указанную в `completionPortThreads` содержит число дополнительных потоков асинхронного ввода-вывода, может быть запущен.</span><span class="sxs-lookup"><span data-stu-id="3aad5-168">When <xref:System.Threading.ThreadPool.GetAvailableThreads%2A> returns, the variable specified by `workerThreads` contains the number of additional worker threads that can be started, and the variable specified by `completionPortThreads` contains the number of additional asynchronous I/O threads that can be started.</span></span>  
  
 <span data-ttu-id="3aad5-169">Если нет доступных потоков, запросы к пулу потоков дополнительных остаются в очереди, пока не станут доступными пула потоков.</span><span class="sxs-lookup"><span data-stu-id="3aad5-169">If there are no available threads, additional thread pool requests remain queued until thread pool threads become available.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="3aad5-170">Следующий пример отображает число рабочих потоков и ввода-вывода потоков, доступных при запуске простого приложения.</span><span class="sxs-lookup"><span data-stu-id="3aad5-170">The following example displays the number of worker threads and I/O threads available when a simple app is started.</span></span>  
  
 [!code-csharp[System.Threading.ThreadPool.GetAvailableThreads#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Threading.ThreadPool.GetAvailableThreads/CS/Example2.cs#2)]
 [!code-vb[System.Threading.ThreadPool.GetAvailableThreads#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Threading.ThreadPool.GetAvailableThreads/VB/Example2.vb#2)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Threading.ThreadPool.SetMinThreads(System.Int32,System.Int32)" />
        <altmember cref="M:System.Threading.ThreadPool.GetMinThreads(System.Int32@,System.Int32@)" />
        <altmember cref="M:System.Threading.ThreadPool.GetMaxThreads(System.Int32@,System.Int32@)" />
        <altmember cref="M:System.Threading.ThreadPool.SetMaxThreads(System.Int32,System.Int32)" />
      </Docs>
    </Member>
    <Member MemberName="GetMaxThreads">
      <MemberSignature Language="C#" Value="public static void GetMaxThreads (out int workerThreads, out int completionPortThreads);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void GetMaxThreads([out] int32&amp; workerThreads, [out] int32&amp; completionPortThreads) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.ThreadPool.GetMaxThreads(System.Int32@,System.Int32@)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub GetMaxThreads (ByRef workerThreads As Integer, ByRef completionPortThreads As Integer)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void GetMaxThreads([Runtime::InteropServices::Out] int % workerThreads, [Runtime::InteropServices::Out] int % completionPortThreads);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Threading.ThreadPool</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="workerThreads" Type="System.Int32&amp;" RefType="out" />
        <Parameter Name="completionPortThreads" Type="System.Int32&amp;" RefType="out" />
      </Parameters>
      <Docs>
        <param name="workerThreads">
          <span data-ttu-id="3aad5-171">Максимальное количество рабочих потоков в пуле потоков.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3aad5-171">The maximum number of worker threads in the thread pool.</span>
          </span>
        </param>
        <param name="completionPortThreads">
          <span data-ttu-id="3aad5-172">Максимальное количество потоков асинхронного ввода-вывода в пуле потоков.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3aad5-172">The maximum number of asynchronous I/O threads in the thread pool.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="3aad5-173">Возвращает количество запросов к пулу потоков, которые могут быть активными одновременно.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3aad5-173">Retrieves the number of requests to the thread pool that can be active concurrently.</span>
          </span>
          <span data-ttu-id="3aad5-174">Все запросы, превышающие это количество, остаются в очереди до тех пор, пока потоки пула не станут доступны.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3aad5-174">All requests above that number remain queued until thread pool threads become available.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="3aad5-175">Когда <xref:System.Threading.ThreadPool.GetMaxThreads%2A> возвращает переменную, указанную в `workerThreads` содержит максимальное число рабочих потоков, допустимых в пуле потоков, а переменная, указанная параметром `completionPortThreads` содержит максимальное количество потоков асинхронного ввода-вывода в пул потоков.</span><span class="sxs-lookup"><span data-stu-id="3aad5-175">When <xref:System.Threading.ThreadPool.GetMaxThreads%2A> returns, the variable specified by `workerThreads` contains the maximum number of worker threads allowed in the thread pool, and the variable specified by `completionPortThreads` contains the maximum number of asynchronous I/O threads allowed in the thread pool.</span></span>  
  
 <span data-ttu-id="3aad5-176">Можно использовать <xref:System.Threading.ThreadPool.GetAvailableThreads%2A> метод, чтобы определить фактическое количество потоков в пуле потоков в любой момент времени.</span><span class="sxs-lookup"><span data-stu-id="3aad5-176">You can use the <xref:System.Threading.ThreadPool.GetAvailableThreads%2A> method to determine the actual number of threads in the thread pool at any given time.</span></span>  
  
 <span data-ttu-id="3aad5-177">Можно использовать <xref:System.Threading.ThreadPool.SetMaxThreads%2A> Чтобы задать максимальное число рабочих потоков и потоков асинхронного ввода-вывода в пуле потоков.</span><span class="sxs-lookup"><span data-stu-id="3aad5-177">You can use the <xref:System.Threading.ThreadPool.SetMaxThreads%2A> to set the maximum number of worker threads and asynchronous I/O threads in the thread pool.</span></span>  
  
 <span data-ttu-id="3aad5-178">Можно поместить в очередь многие запросы к пулу потоков, сколько позволяет системная память.</span><span class="sxs-lookup"><span data-stu-id="3aad5-178">You can queue as many thread pool requests as system memory allows.</span></span> <span data-ttu-id="3aad5-179">Если запросов больше, чем потоки из пула потоков, дополнительные запросы остаются в очереди, пока не станут доступными пула потоков.</span><span class="sxs-lookup"><span data-stu-id="3aad5-179">If there are more requests than thread pool threads, the additional requests remain queued until thread pool threads become available.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="3aad5-180">В следующем примере кода показано, как получить число доступных и максимального числа потоков в пуле потоков.</span><span class="sxs-lookup"><span data-stu-id="3aad5-180">The following code example shows how to retrieve a count of the maximum and available number of threads in the thread pool.</span></span> <span data-ttu-id="3aad5-181">Рабочий элемент в очередь, использует `FileStream` для асинхронной записи в два файла.</span><span class="sxs-lookup"><span data-stu-id="3aad5-181">A work item is queued that uses `FileStream` to asynchronously write to two files.</span></span> <span data-ttu-id="3aad5-182">Методы обратного вызова истекло время ожидания перекрываются друг с другом.</span><span class="sxs-lookup"><span data-stu-id="3aad5-182">The callback methods are timed to overlap.</span></span> <span data-ttu-id="3aad5-183">Рабочий поток обрабатывает рабочий элемент, и в зависимости от скорости и количества процессоров на компьютере одного или двух потоков портов завершения обработки операций записи.</span><span class="sxs-lookup"><span data-stu-id="3aad5-183">A worker thread handles the work item and, depending on the speed and number of processors on the computer, one or two completion port threads handle the write operations.</span></span>  
  
 [!code-cpp[System.Threading.ThreadPool.GetAvailableThreads#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Threading.ThreadPool.GetAvailableThreads/CPP/source.cpp#1)]
 [!code-csharp[System.Threading.ThreadPool.GetAvailableThreads#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Threading.ThreadPool.GetAvailableThreads/CS/source.cs#1)]
 [!code-vb[System.Threading.ThreadPool.GetAvailableThreads#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Threading.ThreadPool.GetAvailableThreads/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Threading.ThreadPool.SetMinThreads(System.Int32,System.Int32)" />
        <altmember cref="M:System.Threading.ThreadPool.GetMinThreads(System.Int32@,System.Int32@)" />
        <altmember cref="M:System.Threading.ThreadPool.GetAvailableThreads(System.Int32@,System.Int32@)" />
        <altmember cref="M:System.Threading.ThreadPool.SetMaxThreads(System.Int32,System.Int32)" />
      </Docs>
    </Member>
    <Member MemberName="GetMinThreads">
      <MemberSignature Language="C#" Value="public static void GetMinThreads (out int workerThreads, out int completionPortThreads);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void GetMinThreads([out] int32&amp; workerThreads, [out] int32&amp; completionPortThreads) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.ThreadPool.GetMinThreads(System.Int32@,System.Int32@)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub GetMinThreads (ByRef workerThreads As Integer, ByRef completionPortThreads As Integer)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void GetMinThreads([Runtime::InteropServices::Out] int % workerThreads, [Runtime::InteropServices::Out] int % completionPortThreads);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Threading.ThreadPool</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="workerThreads" Type="System.Int32&amp;" RefType="out" />
        <Parameter Name="completionPortThreads" Type="System.Int32&amp;" RefType="out" />
      </Parameters>
      <Docs>
        <param name="workerThreads">
          <span data-ttu-id="3aad5-184">При возвращении метода содержит минимальное количество рабочих потоков, которые создаются пулом потоков по требованию.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3aad5-184">When this method returns, contains the minimum number of worker threads that the thread pool creates on demand.</span>
          </span>
        </param>
        <param name="completionPortThreads">
          <span data-ttu-id="3aad5-185">При возвращении метода содержит минимальное количество потоков асинхронного ввода-вывода, которые создаются пулом потоков по требованию.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3aad5-185">When this method returns, contains the minimum number of asynchronous I/O threads that the thread pool creates on demand.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="3aad5-186">Возвращает минимальное число потоков, создаваемых пулом потоков по требованию по мере поступления новых запросов перед переходом на алгоритм управления созданием и уничтожением потоков.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3aad5-186">Retrieves the minimum number of threads the thread pool creates on demand, as new requests are made, before switching to an algorithm for managing thread creation and destruction.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="3aad5-187">Пул потоков предоставляет новые рабочие потоки или потоки завершения ввода-вывода по запросу, пока не достигнет минимум для каждой категории.</span><span class="sxs-lookup"><span data-stu-id="3aad5-187">The thread pool provides new worker threads or I/O completion threads on demand until it reaches the minimum for each category.</span></span> <span data-ttu-id="3aad5-188">По умолчанию минимальное количество потоков равно числу процессоров в системе.</span><span class="sxs-lookup"><span data-stu-id="3aad5-188">By default, the minimum number of threads is set to the number of processors on a system.</span></span> <span data-ttu-id="3aad5-189">По достижении минимального пула потоков может создавать дополнительные потоки в этой категории или ожидать завершения некоторых задач.</span><span class="sxs-lookup"><span data-stu-id="3aad5-189">When the minimum is reached, the thread pool can create additional threads in that category or wait until some tasks complete.</span></span> <span data-ttu-id="3aad5-190">Начиная с версии [!INCLUDE[net_v40_short](~/includes/net-v40-short-md.md)], пул потоков создает и уничтожает потоки в целях оптимизации пропускной способности, которая определяется как количество задач, завершаемых за единицу времени.</span><span class="sxs-lookup"><span data-stu-id="3aad5-190">Beginning with the [!INCLUDE[net_v40_short](~/includes/net-v40-short-md.md)], the thread pool creates and destroys threads in order to optimize throughput, which is defined as the number of tasks that complete per unit of time.</span></span> <span data-ttu-id="3aad5-191">Слишком малое количество потоков может препятствовать оптимальному использованию доступных ресурсов, тогда как слишком большое их количество может усиливать конкуренцию за ресурсы.</span><span class="sxs-lookup"><span data-stu-id="3aad5-191">Too few threads might not make optimal use of available resources, whereas too many threads could increase resource contention.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="3aad5-192">Если потребность низкая, фактическое количество потоков из пула потоков может быть ниже минимальных значений.</span><span class="sxs-lookup"><span data-stu-id="3aad5-192">When demand is low, the actual number of thread pool threads can fall below the minimum values.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="3aad5-193">Следующий пример задает минимальное количество рабочих потоков до 4, а также сохраняет исходное значение минимальное количество потоков асинхронного завершения ввода-вывода.</span><span class="sxs-lookup"><span data-stu-id="3aad5-193">The following example sets the minimum number of worker threads to four, and preserves the original value for the minimum number of asynchronous I/O completion threads.</span></span>  
  
 [!code-cpp[System.Threading.ThreadPool.GetSetMinThreads#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Threading.ThreadPool.GetSetMinThreads/CPP/source.cpp#1)]
 [!code-csharp[System.Threading.ThreadPool.GetSetMinThreads#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Threading.ThreadPool.GetSetMinThreads/CS/source.cs#1)]
 [!code-vb[System.Threading.ThreadPool.GetSetMinThreads#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Threading.ThreadPool.GetSetMinThreads/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Threading.ThreadPool.SetMinThreads(System.Int32,System.Int32)" />
        <altmember cref="M:System.Threading.ThreadPool.GetMaxThreads(System.Int32@,System.Int32@)" />
        <altmember cref="M:System.Threading.ThreadPool.GetAvailableThreads(System.Int32@,System.Int32@)" />
      </Docs>
    </Member>
    <MemberGroup MemberName="QueueUserWorkItem">
      <AssemblyInfo>
        <AssemblyName>System.Threading.ThreadPool</AssemblyName>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="3aad5-194">Помещает метод в очередь на выполнение.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3aad5-194">Queues a method for execution.</span>
          </span>
          <span data-ttu-id="3aad5-195">Метод выполняется, когда становится доступен поток из пула потоков.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3aad5-195">The method executes when a thread pool thread becomes available.</span>
          </span>
        </summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="QueueUserWorkItem">
      <MemberSignature Language="C#" Value="public static bool QueueUserWorkItem (System.Threading.WaitCallback callBack);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool QueueUserWorkItem(class System.Threading.WaitCallback callBack) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.ThreadPool.QueueUserWorkItem(System.Threading.WaitCallback)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function QueueUserWorkItem (callBack As WaitCallback) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool QueueUserWorkItem(System::Threading::WaitCallback ^ callBack);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.ThreadPool</AssemblyName>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="callBack" Type="System.Threading.WaitCallback" />
      </Parameters>
      <Docs>
        <param name="callBack">
          <span data-ttu-id="3aad5-196">Делегат <see cref="T:System.Threading.WaitCallback" />, представляющий метод, который требуется выполнить.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3aad5-196">A <see cref="T:System.Threading.WaitCallback" /> that represents the method to be executed.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="3aad5-197">Помещает метод в очередь на выполнение.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3aad5-197">Queues a method for execution.</span>
          </span>
          <span data-ttu-id="3aad5-198">Метод выполняется, когда становится доступен поток из пула потоков.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3aad5-198">The method executes when a thread pool thread becomes available.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="3aad5-199">Значение <see langword="true" />, если метод успешно помещен в очередь. Если рабочий элемент не может быть помещен очередь, выдается исключение <see cref="T:System.NotSupportedException" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3aad5-199">
              <see langword="true" /> if the method is successfully queued; <see cref="T:System.NotSupportedException" /> is thrown if the work item could not be queued.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="3aad5-200">Можно разместить данные, необходимые для метода в очереди в поля экземпляра класса, в котором определен метод, или можно использовать <xref:System.Threading.ThreadPool.QueueUserWorkItem%28System.Threading.WaitCallback%2CSystem.Object%29> перегрузку, которая принимает объект, содержащий необходимые данные.</span><span class="sxs-lookup"><span data-stu-id="3aad5-200">You can place data required by the queued method in the instance fields of the class in which the method is defined, or you can use the <xref:System.Threading.ThreadPool.QueueUserWorkItem%28System.Threading.WaitCallback%2CSystem.Object%29> overload that accepts an object containing the necessary data.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="3aad5-201">Пользователи Visual Basic могут опускать <xref:System.Threading.WaitCallback> конструктор и просто использовать `AddressOf` оператор при передаче в метод обратного вызова, <xref:System.Threading.ThreadPool.QueueUserWorkItem%2A>.</span><span class="sxs-lookup"><span data-stu-id="3aad5-201">Visual Basic users can omit the <xref:System.Threading.WaitCallback> constructor, and simply use the `AddressOf` operator when passing the callback method to <xref:System.Threading.ThreadPool.QueueUserWorkItem%2A>.</span></span> <span data-ttu-id="3aad5-202">Visual Basic автоматически вызывает соответствующий конструктор делегата.</span><span class="sxs-lookup"><span data-stu-id="3aad5-202">Visual Basic automatically calls the correct delegate constructor.</span></span>  
  
## <a name="version-information"></a><span data-ttu-id="3aad5-203">Сведения о версии</span><span class="sxs-lookup"><span data-stu-id="3aad5-203">Version Information</span></span>  
 <span data-ttu-id="3aad5-204">В .NET Framework версии 2.0 <xref:System.Threading.Thread.CurrentPrincipal%2A?displayProperty=nameWithType> значение свойства распространяется на рабочих потоков в очереди с помощью <xref:System.Threading.ThreadPool.QueueUserWorkItem%2A> метод.</span><span class="sxs-lookup"><span data-stu-id="3aad5-204">In the .NET Framework version 2.0, the <xref:System.Threading.Thread.CurrentPrincipal%2A?displayProperty=nameWithType> property value is propagated to worker threads queued using the <xref:System.Threading.ThreadPool.QueueUserWorkItem%2A> method.</span></span> <span data-ttu-id="3aad5-205">В более ранних версиях информация об участнике не распространяются.</span><span class="sxs-lookup"><span data-stu-id="3aad5-205">In earlier versions, the principal information is not propagated.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="3aad5-206">В следующем примере используется <xref:System.Threading.ThreadPool.QueueUserWorkItem%28System.Threading.WaitCallback%29> перегрузка метода в очередь помещается задача, представленная `ThreadProc` метод для выполнения, когда поток становится доступной.</span><span class="sxs-lookup"><span data-stu-id="3aad5-206">The following example uses the <xref:System.Threading.ThreadPool.QueueUserWorkItem%28System.Threading.WaitCallback%29> method overload to queue a task, which is represented by the `ThreadProc` method, to execute when a thread becomes available.</span></span> <span data-ttu-id="3aad5-207">Сведения о задачах предоставляется с помощью этой перегрузки.</span><span class="sxs-lookup"><span data-stu-id="3aad5-207">No task information is supplied with this overload.</span></span> <span data-ttu-id="3aad5-208">Таким образом, сведения, позволяющие `ThreadProc` метод ограничена объект принадлежит метод.</span><span class="sxs-lookup"><span data-stu-id="3aad5-208">Therefore, the information that is available to the `ThreadProc` method is limited to the object the method belongs to.</span></span>  
  
 [!code-cpp[System.Threading.ThreadPool QueueUserWorkItem0#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Threading.ThreadPool QueueUserWorkItem0/CPP/source.cpp#1)]
 [!code-csharp[System.Threading.ThreadPool QueueUserWorkItem0#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Threading.ThreadPool QueueUserWorkItem0/CS/source.cs#1)]
 [!code-vb[System.Threading.ThreadPool QueueUserWorkItem0#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Threading.ThreadPool QueueUserWorkItem0/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="3aad5-209">Свойство <paramref name="callBack" /> имеет значение <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3aad5-209">
              <paramref name="callBack" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.NotSupportedException">
          <span data-ttu-id="3aad5-210">Среда CLR является размещенной, а основное приложение не поддерживает это действие.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3aad5-210">The common language runtime (CLR) is hosted, and the host does not support this action.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="QueueUserWorkItem">
      <MemberSignature Language="C#" Value="public static bool QueueUserWorkItem (System.Threading.WaitCallback callBack, object state);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool QueueUserWorkItem(class System.Threading.WaitCallback callBack, object state) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.ThreadPool.QueueUserWorkItem(System.Threading.WaitCallback,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function QueueUserWorkItem (callBack As WaitCallback, state As Object) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool QueueUserWorkItem(System::Threading::WaitCallback ^ callBack, System::Object ^ state);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.ThreadPool</AssemblyName>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="callBack" Type="System.Threading.WaitCallback" />
        <Parameter Name="state" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="callBack">
          <span data-ttu-id="3aad5-211">Делегат <see cref="T:System.Threading.WaitCallback" />, представляющий выполняемый метод.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3aad5-211">A <see cref="T:System.Threading.WaitCallback" /> representing the method to execute.</span>
          </span>
        </param>
        <param name="state">
          <span data-ttu-id="3aad5-212">Объект, содержащий данные, используемые методом.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3aad5-212">An object containing data to be used by the method.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="3aad5-213">Помещает метод в очередь на выполнение и указывает объект, содержащий данные для использования методом.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3aad5-213">Queues a method for execution, and specifies an object containing data to be used by the method.</span>
          </span>
          <span data-ttu-id="3aad5-214">Метод выполняется, когда становится доступен поток из пула потоков.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3aad5-214">The method executes when a thread pool thread becomes available.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="3aad5-215">Значение <see langword="true" />, если метод успешно помещен в очередь. Если рабочий элемент не может быть помещен очередь, выдается исключение <see cref="T:System.NotSupportedException" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3aad5-215">
              <see langword="true" /> if the method is successfully queued; <see cref="T:System.NotSupportedException" /> is thrown if the work item could not be queued.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="3aad5-216">Если метод обратного вызова требуются сложные данные, можно определить класс, содержащий данные.</span><span class="sxs-lookup"><span data-stu-id="3aad5-216">If the callback method requires complex data, you can define a class to contain the data.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="3aad5-217">Пользователи Visual Basic могут опускать <xref:System.Threading.WaitCallback> конструктор и просто использовать `AddressOf` оператор при передаче в метод обратного вызова, <xref:System.Threading.ThreadPool.QueueUserWorkItem%2A>.</span><span class="sxs-lookup"><span data-stu-id="3aad5-217">Visual Basic users can omit the <xref:System.Threading.WaitCallback> constructor, and simply use the `AddressOf` operator when passing the callback method to <xref:System.Threading.ThreadPool.QueueUserWorkItem%2A>.</span></span> <span data-ttu-id="3aad5-218">Visual Basic автоматически вызывает соответствующий конструктор делегата.</span><span class="sxs-lookup"><span data-stu-id="3aad5-218">Visual Basic automatically calls the correct delegate constructor.</span></span>  
  
## <a name="version-information"></a><span data-ttu-id="3aad5-219">Сведения о версии</span><span class="sxs-lookup"><span data-stu-id="3aad5-219">Version Information</span></span>  
 <span data-ttu-id="3aad5-220">В .NET Framework версии 2.0 <xref:System.Threading.Thread.CurrentPrincipal%2A?displayProperty=nameWithType> значение свойства распространяется на рабочих потоков в очереди с помощью <xref:System.Threading.ThreadPool.QueueUserWorkItem%2A> метод.</span><span class="sxs-lookup"><span data-stu-id="3aad5-220">In the .NET Framework version 2.0, the <xref:System.Threading.Thread.CurrentPrincipal%2A?displayProperty=nameWithType> property value is propagated to worker threads queued using the <xref:System.Threading.ThreadPool.QueueUserWorkItem%2A> method.</span></span> <span data-ttu-id="3aad5-221">В более ранних версиях информация об участнике не распространяются.</span><span class="sxs-lookup"><span data-stu-id="3aad5-221">In earlier versions, the principal information is not propagated.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="3aad5-222">В следующем примере показано, как создать объект, содержащий сведения о задаче.</span><span class="sxs-lookup"><span data-stu-id="3aad5-222">The following example shows how to create an object that contains task information.</span></span> <span data-ttu-id="3aad5-223">Также демонстрируется передача этого объекта задачу, которая стоит в очереди на выполнение в пуле потоков.</span><span class="sxs-lookup"><span data-stu-id="3aad5-223">It also demonstrates how to pass that object to a task that is queued for execution by the thread pool.</span></span>  
  
 [!code-cpp[System.Threading.ThreadPool QueueUserWorkItem1#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Threading.ThreadPool QueueUserWorkItem1/CPP/source.cpp#1)]
 [!code-csharp[System.Threading.ThreadPool QueueUserWorkItem1#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Threading.ThreadPool QueueUserWorkItem1/CS/source.cs#1)]
 [!code-vb[System.Threading.ThreadPool QueueUserWorkItem1#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Threading.ThreadPool QueueUserWorkItem1/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.NotSupportedException">
          <span data-ttu-id="3aad5-224">Среда CLR является размещенной, а основное приложение не поддерживает это действие.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3aad5-224">The common language runtime (CLR) is hosted, and the host does not support this action.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="3aad5-225">Свойство <paramref name="callBack" /> имеет значение <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3aad5-225">
              <paramref name="callBack" /> is <see langword="null" />.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="QueueUserWorkItem">
      <MemberSignature Language="C#" Value="public static bool QueueUserWorkItem (System.Threading.WaitCallback callBack, object state, bool preferLocal);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool QueueUserWorkItem(class System.Threading.WaitCallback callBack, object state, bool preferLocal) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.ThreadPool.QueueUserWorkItem(System.Threading.WaitCallback,System.Object,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function QueueUserWorkItem (callBack As WaitCallback, state As Object, preferLocal As Boolean) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool QueueUserWorkItem(System::Threading::WaitCallback ^ callBack, System::Object ^ state, bool preferLocal);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.ThreadPool</AssemblyName>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="callBack" Type="System.Threading.WaitCallback" />
        <Parameter Name="state" Type="System.Object" />
        <Parameter Name="preferLocal" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="callBack">To be added.</param>
        <param name="state">To be added.</param>
        <param name="preferLocal">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="RegisterWaitForSingleObject">
      <AssemblyInfo>
        <AssemblyName>System.Threading.ThreadPool</AssemblyName>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="3aad5-226">Регистрирует делегат, ожидающий объект <see cref="T:System.Threading.WaitHandle" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3aad5-226">Registers a delegate that is waiting for a <see cref="T:System.Threading.WaitHandle" />.</span>
          </span>
        </summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="RegisterWaitForSingleObject">
      <MemberSignature Language="C#" Value="public static System.Threading.RegisteredWaitHandle RegisterWaitForSingleObject (System.Threading.WaitHandle waitObject, System.Threading.WaitOrTimerCallback callBack, object state, int millisecondsTimeOutInterval, bool executeOnlyOnce);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Threading.RegisteredWaitHandle RegisterWaitForSingleObject(class System.Threading.WaitHandle waitObject, class System.Threading.WaitOrTimerCallback callBack, object state, int32 millisecondsTimeOutInterval, bool executeOnlyOnce) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.ThreadPool.RegisterWaitForSingleObject(System.Threading.WaitHandle,System.Threading.WaitOrTimerCallback,System.Object,System.Int32,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function RegisterWaitForSingleObject (waitObject As WaitHandle, callBack As WaitOrTimerCallback, state As Object, millisecondsTimeOutInterval As Integer, executeOnlyOnce As Boolean) As RegisteredWaitHandle" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Threading::RegisteredWaitHandle ^ RegisterWaitForSingleObject(System::Threading::WaitHandle ^ waitObject, System::Threading::WaitOrTimerCallback ^ callBack, System::Object ^ state, int millisecondsTimeOutInterval, bool executeOnlyOnce);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.ThreadPool</AssemblyName>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Threading.RegisteredWaitHandle</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="waitObject" Type="System.Threading.WaitHandle" />
        <Parameter Name="callBack" Type="System.Threading.WaitOrTimerCallback" />
        <Parameter Name="state" Type="System.Object" />
        <Parameter Name="millisecondsTimeOutInterval" Type="System.Int32" />
        <Parameter Name="executeOnlyOnce" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="waitObject">
          <span data-ttu-id="3aad5-227">Регистрируемый объект <see cref="T:System.Threading.WaitHandle" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3aad5-227">The <see cref="T:System.Threading.WaitHandle" /> to register.</span>
          </span>
          <span data-ttu-id="3aad5-228">Используйте объект <see cref="T:System.Threading.WaitHandle" />, отличный от <see cref="T:System.Threading.Mutex" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3aad5-228">Use a <see cref="T:System.Threading.WaitHandle" /> other than <see cref="T:System.Threading.Mutex" />.</span>
          </span>
        </param>
        <param name="callBack">
          <span data-ttu-id="3aad5-229">Делегат <see cref="T:System.Threading.WaitOrTimerCallback" />, который вызывается при получении сигнала объектом, указанным в параметре <c>waitObject</c>.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3aad5-229">The <see cref="T:System.Threading.WaitOrTimerCallback" /> delegate to call when the <c>waitObject</c> parameter is signaled.</span>
          </span>
        </param>
        <param name="state">
          <span data-ttu-id="3aad5-230">Передаваемый делегату объект.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3aad5-230">The object that is passed to the delegate.</span>
          </span>
        </param>
        <param name="millisecondsTimeOutInterval">
          <span data-ttu-id="3aad5-231">Время ожидания в миллисекундах.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3aad5-231">The time-out in milliseconds.</span>
          </span>
          <span data-ttu-id="3aad5-232">Если параметр <c>millisecondsTimeOutInterval</c> равен 0 (нулю), функция проверяет состояние объекта и немедленно возвращает значение.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3aad5-232">If the <c>millisecondsTimeOutInterval</c> parameter is 0 (zero), the function tests the object's state and returns immediately.</span>
          </span>
          <span data-ttu-id="3aad5-233">Если параметр <c>millisecondsTimeOutInterval</c> равен –1, время ожидания функции никогда не истекает.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3aad5-233">If <c>millisecondsTimeOutInterval</c> is -1, the function's time-out interval never elapses.</span>
          </span>
        </param>
        <param name="executeOnlyOnce">
          <span data-ttu-id="3aad5-234">Значение <see langword="true" /> указывает, что после вызова делегата поток не будет ожидать параметр <c>waitObject</c>; значение<see langword="false" /> указывает, что таймер сбрасывается всякий раз по завершении операции ожидания до тех пор, пока регистрация ожидания не будет отменена.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3aad5-234">
              <see langword="true" /> to indicate that the thread will no longer wait on the <c>waitObject</c> parameter after the delegate has been called; <see langword="false" /> to indicate that the timer is reset every time the wait operation completes until the wait is unregistered.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="3aad5-235">Регистрирует делегат для ожидания объекта <see cref="T:System.Threading.WaitHandle" />, задавая время ожидания в миллисекундах в виде 32-разрядного целого числа со знаком.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3aad5-235">Registers a delegate to wait for a <see cref="T:System.Threading.WaitHandle" />, specifying a 32-bit signed integer for the time-out in milliseconds.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="3aad5-236">Объект <see cref="T:System.Threading.RegisteredWaitHandle" />, инкапсулирующий собственный дескриптор.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3aad5-236">The <see cref="T:System.Threading.RegisteredWaitHandle" /> that encapsulates the native handle.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="3aad5-237">По окончании с помощью <xref:System.Threading.RegisteredWaitHandle> , возвращаемый этим методом, вызовите его <xref:System.Threading.RegisteredWaitHandle.Unregister%2A?displayProperty=nameWithType> метод для освобождения ссылки на дескриптор ожидания.</span><span class="sxs-lookup"><span data-stu-id="3aad5-237">When you are finished using the <xref:System.Threading.RegisteredWaitHandle> that is returned by this method, call its <xref:System.Threading.RegisteredWaitHandle.Unregister%2A?displayProperty=nameWithType> method to release references to the wait handle.</span></span> <span data-ttu-id="3aad5-238">Рекомендуется всегда вызывать <xref:System.Threading.RegisteredWaitHandle.Unregister%2A?displayProperty=nameWithType> метод, даже если указать `true` для `executeOnlyOnce`.</span><span class="sxs-lookup"><span data-stu-id="3aad5-238">We recommend that you always call the <xref:System.Threading.RegisteredWaitHandle.Unregister%2A?displayProperty=nameWithType> method, even if you specify `true` for `executeOnlyOnce`.</span></span> <span data-ttu-id="3aad5-239">Сборщик мусора работает более эффективно при вызове метода <xref:System.Threading.RegisteredWaitHandle.Unregister%2A?displayProperty=nameWithType> вместо метода в зависимости от зарегистрированного ожидающего дескриптора метода завершения.</span><span class="sxs-lookup"><span data-stu-id="3aad5-239">Garbage collection works more efficiently if you call the <xref:System.Threading.RegisteredWaitHandle.Unregister%2A?displayProperty=nameWithType> method instead of depending on the registered wait handle's finalizer.</span></span>  
  
 <span data-ttu-id="3aad5-240"><xref:System.Threading.ThreadPool.RegisterWaitForSingleObject%2A> Метод ставит в очередь указанный делегат в пул потоков.</span><span class="sxs-lookup"><span data-stu-id="3aad5-240">The <xref:System.Threading.ThreadPool.RegisterWaitForSingleObject%2A> method queues the specified delegate to the thread pool.</span></span> <span data-ttu-id="3aad5-241">Рабочий поток выполняет делегат, когда происходит одно из следующих:</span><span class="sxs-lookup"><span data-stu-id="3aad5-241">A worker thread will execute the delegate when one of the following occurs:</span></span>  
  
-   <span data-ttu-id="3aad5-242">Указанный объект находится в состоянии получения сигнала.</span><span class="sxs-lookup"><span data-stu-id="3aad5-242">The specified object is in the signaled state.</span></span>  
  
-   <span data-ttu-id="3aad5-243">Время ожидания истекло.</span><span class="sxs-lookup"><span data-stu-id="3aad5-243">The time-out interval elapses.</span></span>  
  
 <span data-ttu-id="3aad5-244"><xref:System.Threading.ThreadPool.RegisterWaitForSingleObject%2A> Метод проверяет текущее состояние указанного объекта <xref:System.Threading.WaitHandle>.</span><span class="sxs-lookup"><span data-stu-id="3aad5-244">The <xref:System.Threading.ThreadPool.RegisterWaitForSingleObject%2A> method checks the current state of the specified object's <xref:System.Threading.WaitHandle>.</span></span> <span data-ttu-id="3aad5-245">Если состояние объекта несигнальное, метод регистрирует операцию ожидания.</span><span class="sxs-lookup"><span data-stu-id="3aad5-245">If the object's state is unsignaled, the method registers a wait operation.</span></span> <span data-ttu-id="3aad5-246">Поток из пула потоков выполняет операцию ожидания.</span><span class="sxs-lookup"><span data-stu-id="3aad5-246">The wait operation is performed by a thread from the thread pool.</span></span> <span data-ttu-id="3aad5-247">Делегат выполняется рабочим потоком, когда состояние объекта становится сигнальным или истекает время ожидания.</span><span class="sxs-lookup"><span data-stu-id="3aad5-247">The delegate is executed by a worker thread when the object's state becomes signaled or the time-out interval elapses.</span></span> <span data-ttu-id="3aad5-248">Если `timeOutInterval` параметра не равно 0 (ноль) и `executeOnlyOnce` параметр `false`, таймер сбрасывается каждый раз событие сигнализирует или истекает время ожидания.</span><span class="sxs-lookup"><span data-stu-id="3aad5-248">If the `timeOutInterval` parameter is not 0 (zero) and the `executeOnlyOnce` parameter is `false`, the timer is reset every time the event is signaled or the time-out interval elapses.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="3aad5-249">С помощью <xref:System.Threading.Mutex> для `waitObject` не дает взаимное исключение для обратных вызовов, поскольку базовый интерфейс Win32 API использует значение по умолчанию `WT_EXECUTEDEFAULT` флаг, чтобы каждый обратный вызов назначается в отдельном потоке пула потоков.</span><span class="sxs-lookup"><span data-stu-id="3aad5-249">Using a <xref:System.Threading.Mutex> for `waitObject` does not provide mutual exclusion for the callbacks because the underlying Win32 API uses the default `WT_EXECUTEDEFAULT` flag, so each callback is dispatched on a separate thread pool thread.</span></span> <span data-ttu-id="3aad5-250">Вместо <xref:System.Threading.Mutex>, используйте <xref:System.Threading.Semaphore> и максимальное число 1.</span><span class="sxs-lookup"><span data-stu-id="3aad5-250">Instead of a <xref:System.Threading.Mutex>, use a <xref:System.Threading.Semaphore> with a maximum count of 1.</span></span>  
  
 <span data-ttu-id="3aad5-251">Чтобы отменить операцию ожидания, вызовите <xref:System.Threading.RegisteredWaitHandle.Unregister%2A?displayProperty=nameWithType> метод.</span><span class="sxs-lookup"><span data-stu-id="3aad5-251">To cancel the wait operation, call the <xref:System.Threading.RegisteredWaitHandle.Unregister%2A?displayProperty=nameWithType> method.</span></span>  
  
 <span data-ttu-id="3aad5-252">Ожидающий поток использует Win32 `WaitForMultipleObjects` функции для мониторинга зарегистрированные операции ожидания.</span><span class="sxs-lookup"><span data-stu-id="3aad5-252">The wait thread uses the Win32 `WaitForMultipleObjects` function to monitor registered wait operations.</span></span> <span data-ttu-id="3aad5-253">Таким образом, если необходимо использовать один и тот же дескриптор операционной системы в нескольких вызовах <xref:System.Threading.ThreadPool.RegisterWaitForSingleObject%2A>, необходимо дублировать дескриптор с помощью Win32 `DuplicateHandle` функции.</span><span class="sxs-lookup"><span data-stu-id="3aad5-253">Therefore, if you must use the same native operating system handle in multiple calls to <xref:System.Threading.ThreadPool.RegisterWaitForSingleObject%2A>, you must duplicate the handle using the Win32 `DuplicateHandle` function.</span></span> <span data-ttu-id="3aad5-254">Обратите внимание, что не следует посылать событие объекта, передаваемого <xref:System.Threading.ThreadPool.RegisterWaitForSingleObject%2A>, так как ожидающий поток может не обнаружить, что событие сигнализирует перед его изменением.</span><span class="sxs-lookup"><span data-stu-id="3aad5-254">Note that you should not pulse an event object passed to <xref:System.Threading.ThreadPool.RegisterWaitForSingleObject%2A>, because the wait thread might not detect that the event is signaled before it is reset.</span></span>  
  
 <span data-ttu-id="3aad5-255">Перед возвратом, эта функция изменяет состояние некоторых типов объектов синхронизации.</span><span class="sxs-lookup"><span data-stu-id="3aad5-255">Before returning, the function modifies the state of some types of synchronization objects.</span></span> <span data-ttu-id="3aad5-256">Изменение происходит только для объекта, чьи сигнальные состояния вызвали условия ожидания.</span><span class="sxs-lookup"><span data-stu-id="3aad5-256">Modification occurs only for the object whose signaled state caused the wait condition to be satisfied.</span></span> <span data-ttu-id="3aad5-257">Например счетчик семафора уменьшается на единицу.</span><span class="sxs-lookup"><span data-stu-id="3aad5-257">For example, the count of a semaphore is decreased by one.</span></span>  
  
## <a name="version-information"></a><span data-ttu-id="3aad5-258">Сведения о версии</span><span class="sxs-lookup"><span data-stu-id="3aad5-258">Version Information</span></span>  
 <span data-ttu-id="3aad5-259">Начиная с .NET Framework версии 2.0, <xref:System.Threading.Thread.CurrentPrincipal%2A?displayProperty=nameWithType> значение свойства распространяется на рабочих потоков в очереди с помощью <xref:System.Threading.ThreadPool.RegisterWaitForSingleObject%2A> метод.</span><span class="sxs-lookup"><span data-stu-id="3aad5-259">Starting with the .NET Framework version 2.0, the <xref:System.Threading.Thread.CurrentPrincipal%2A?displayProperty=nameWithType> property value is propagated to worker threads queued using the <xref:System.Threading.ThreadPool.RegisterWaitForSingleObject%2A> method.</span></span> <span data-ttu-id="3aad5-260">В более ранних версиях информация об участнике не распространяются.</span><span class="sxs-lookup"><span data-stu-id="3aad5-260">In earlier versions, the principal information is not propagated.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <span data-ttu-id="3aad5-261">Значение параметра <paramref name="millisecondsTimeOutInterval" /> меньше –1.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3aad5-261">The <paramref name="millisecondsTimeOutInterval" /> parameter is less than -1.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="RegisterWaitForSingleObject">
      <MemberSignature Language="C#" Value="public static System.Threading.RegisteredWaitHandle RegisterWaitForSingleObject (System.Threading.WaitHandle waitObject, System.Threading.WaitOrTimerCallback callBack, object state, long millisecondsTimeOutInterval, bool executeOnlyOnce);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Threading.RegisteredWaitHandle RegisterWaitForSingleObject(class System.Threading.WaitHandle waitObject, class System.Threading.WaitOrTimerCallback callBack, object state, int64 millisecondsTimeOutInterval, bool executeOnlyOnce) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.ThreadPool.RegisterWaitForSingleObject(System.Threading.WaitHandle,System.Threading.WaitOrTimerCallback,System.Object,System.Int64,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function RegisterWaitForSingleObject (waitObject As WaitHandle, callBack As WaitOrTimerCallback, state As Object, millisecondsTimeOutInterval As Long, executeOnlyOnce As Boolean) As RegisteredWaitHandle" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Threading::RegisteredWaitHandle ^ RegisterWaitForSingleObject(System::Threading::WaitHandle ^ waitObject, System::Threading::WaitOrTimerCallback ^ callBack, System::Object ^ state, long millisecondsTimeOutInterval, bool executeOnlyOnce);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.ThreadPool</AssemblyName>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Threading.RegisteredWaitHandle</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="waitObject" Type="System.Threading.WaitHandle" />
        <Parameter Name="callBack" Type="System.Threading.WaitOrTimerCallback" />
        <Parameter Name="state" Type="System.Object" />
        <Parameter Name="millisecondsTimeOutInterval" Type="System.Int64" />
        <Parameter Name="executeOnlyOnce" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="waitObject">
          <span data-ttu-id="3aad5-262">Регистрируемый объект <see cref="T:System.Threading.WaitHandle" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3aad5-262">The <see cref="T:System.Threading.WaitHandle" /> to register.</span>
          </span>
          <span data-ttu-id="3aad5-263">Используйте объект <see cref="T:System.Threading.WaitHandle" />, отличный от <see cref="T:System.Threading.Mutex" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3aad5-263">Use a <see cref="T:System.Threading.WaitHandle" /> other than <see cref="T:System.Threading.Mutex" />.</span>
          </span>
        </param>
        <param name="callBack">
          <span data-ttu-id="3aad5-264">Делегат <see cref="T:System.Threading.WaitOrTimerCallback" />, который вызывается при получении сигнала объектом, указанным в параметре <c>waitObject</c>.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3aad5-264">The <see cref="T:System.Threading.WaitOrTimerCallback" /> delegate to call when the <c>waitObject</c> parameter is signaled.</span>
          </span>
        </param>
        <param name="state">
          <span data-ttu-id="3aad5-265">Передаваемый делегату объект.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3aad5-265">The object passed to the delegate.</span>
          </span>
        </param>
        <param name="millisecondsTimeOutInterval">
          <span data-ttu-id="3aad5-266">Время ожидания в миллисекундах.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3aad5-266">The time-out in milliseconds.</span>
          </span>
          <span data-ttu-id="3aad5-267">Если параметр <c>millisecondsTimeOutInterval</c> равен 0 (нулю), функция проверяет состояние объекта и немедленно возвращает значение.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3aad5-267">If the <c>millisecondsTimeOutInterval</c> parameter is 0 (zero), the function tests the object's state and returns immediately.</span>
          </span>
          <span data-ttu-id="3aad5-268">Если параметр <c>millisecondsTimeOutInterval</c> равен –1, время ожидания функции никогда не истекает.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3aad5-268">If <c>millisecondsTimeOutInterval</c> is -1, the function's time-out interval never elapses.</span>
          </span>
        </param>
        <param name="executeOnlyOnce">
          <span data-ttu-id="3aad5-269">Значение <see langword="true" /> указывает, что после вызова делегата поток не будет ожидать параметр <c>waitObject</c>; значение<see langword="false" /> указывает, что таймер сбрасывается всякий раз по завершении операции ожидания до тех пор, пока регистрация ожидания не будет отменена.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3aad5-269">
              <see langword="true" /> to indicate that the thread will no longer wait on the <c>waitObject</c> parameter after the delegate has been called; <see langword="false" /> to indicate that the timer is reset every time the wait operation completes until the wait is unregistered.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="3aad5-270">Регистрирует делегат для ожидания объекта <see cref="T:System.Threading.WaitHandle" />, задавая время ожидания в миллисекундах в виде 64-разрядного целого числа со знаком.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3aad5-270">Registers a delegate to wait for a <see cref="T:System.Threading.WaitHandle" />, specifying a 64-bit signed integer for the time-out in milliseconds.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="3aad5-271">Объект <see cref="T:System.Threading.RegisteredWaitHandle" />, инкапсулирующий собственный дескриптор.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3aad5-271">The <see cref="T:System.Threading.RegisteredWaitHandle" /> that encapsulates the native handle.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="3aad5-272">По окончании с помощью <xref:System.Threading.RegisteredWaitHandle> , возвращаемый этим методом, вызовите его <xref:System.Threading.RegisteredWaitHandle.Unregister%2A?displayProperty=nameWithType> метод для освобождения ссылки на дескриптор ожидания.</span><span class="sxs-lookup"><span data-stu-id="3aad5-272">When you are finished using the <xref:System.Threading.RegisteredWaitHandle> that is returned by this method, call its <xref:System.Threading.RegisteredWaitHandle.Unregister%2A?displayProperty=nameWithType> method to release references to the wait handle.</span></span> <span data-ttu-id="3aad5-273">Рекомендуется всегда вызывать <xref:System.Threading.RegisteredWaitHandle.Unregister%2A?displayProperty=nameWithType> метод, даже если указать `true` для `executeOnlyOnce`.</span><span class="sxs-lookup"><span data-stu-id="3aad5-273">We recommend that you always call the <xref:System.Threading.RegisteredWaitHandle.Unregister%2A?displayProperty=nameWithType> method, even if you specify `true` for `executeOnlyOnce`.</span></span> <span data-ttu-id="3aad5-274">Сборщик мусора работает более эффективно при вызове метода <xref:System.Threading.RegisteredWaitHandle.Unregister%2A?displayProperty=nameWithType> вместо метода в зависимости от зарегистрированного ожидающего дескриптора метода завершения.</span><span class="sxs-lookup"><span data-stu-id="3aad5-274">Garbage collection works more efficiently if you call the <xref:System.Threading.RegisteredWaitHandle.Unregister%2A?displayProperty=nameWithType> method instead of depending on the registered wait handle's finalizer.</span></span>  
  
 <span data-ttu-id="3aad5-275"><xref:System.Threading.ThreadPool.RegisterWaitForSingleObject%2A> Метод ставит в очередь указанный делегат в пул потоков.</span><span class="sxs-lookup"><span data-stu-id="3aad5-275">The <xref:System.Threading.ThreadPool.RegisterWaitForSingleObject%2A> method queues the specified delegate to the thread pool.</span></span> <span data-ttu-id="3aad5-276">Рабочий поток выполняет делегат, когда происходит одно из следующих:</span><span class="sxs-lookup"><span data-stu-id="3aad5-276">A worker thread will execute the delegate when one of the following occurs:</span></span>  
  
-   <span data-ttu-id="3aad5-277">Указанный объект находится в состоянии получения сигнала.</span><span class="sxs-lookup"><span data-stu-id="3aad5-277">The specified object is in the signaled state.</span></span>  
  
-   <span data-ttu-id="3aad5-278">Время ожидания истекло.</span><span class="sxs-lookup"><span data-stu-id="3aad5-278">The time-out interval elapses.</span></span>  
  
 <span data-ttu-id="3aad5-279"><xref:System.Threading.ThreadPool.RegisterWaitForSingleObject%2A> Метод проверяет текущее состояние указанного объекта <xref:System.Threading.WaitHandle>.</span><span class="sxs-lookup"><span data-stu-id="3aad5-279">The <xref:System.Threading.ThreadPool.RegisterWaitForSingleObject%2A> method checks the current state of the specified object's <xref:System.Threading.WaitHandle>.</span></span> <span data-ttu-id="3aad5-280">Если состояние объекта несигнальное, метод регистрирует операцию ожидания.</span><span class="sxs-lookup"><span data-stu-id="3aad5-280">If the object's state is unsignaled, the method registers a wait operation.</span></span> <span data-ttu-id="3aad5-281">Поток из пула потоков выполняет операцию ожидания.</span><span class="sxs-lookup"><span data-stu-id="3aad5-281">The wait operation is performed by a thread from the thread pool.</span></span> <span data-ttu-id="3aad5-282">Делегат выполняется рабочим потоком, когда состояние объекта становится сигнальным или истекает время ожидания.</span><span class="sxs-lookup"><span data-stu-id="3aad5-282">The delegate is executed by a worker thread when the object's state becomes signaled or the time-out interval elapses.</span></span> <span data-ttu-id="3aad5-283">Если `timeOutInterval` параметра не равно 0 (ноль) и `executeOnlyOnce` параметр `false`, таймер сбрасывается каждый раз событие сигнализирует или истекает время ожидания.</span><span class="sxs-lookup"><span data-stu-id="3aad5-283">If the `timeOutInterval` parameter is not 0 (zero) and the `executeOnlyOnce` parameter is `false`, the timer is reset every time the event is signaled or the time-out interval elapses.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="3aad5-284">С помощью <xref:System.Threading.Mutex> для `waitObject` не дает взаимное исключение для обратных вызовов, поскольку базовый интерфейс Win32 API использует значение по умолчанию `WT_EXECUTEDEFAULT` флаг, чтобы каждый обратный вызов назначается в отдельном потоке пула потоков.</span><span class="sxs-lookup"><span data-stu-id="3aad5-284">Using a <xref:System.Threading.Mutex> for `waitObject` does not provide mutual exclusion for the callbacks because the underlying Win32 API uses the default `WT_EXECUTEDEFAULT` flag, so each callback is dispatched on a separate thread pool thread.</span></span> <span data-ttu-id="3aad5-285">Вместо <xref:System.Threading.Mutex>, используйте <xref:System.Threading.Semaphore> и максимальное число 1.</span><span class="sxs-lookup"><span data-stu-id="3aad5-285">Instead of a <xref:System.Threading.Mutex>, use a <xref:System.Threading.Semaphore> with a maximum count of 1.</span></span>  
  
 <span data-ttu-id="3aad5-286">Чтобы отменить операцию ожидания, вызовите <xref:System.Threading.RegisteredWaitHandle.Unregister%2A?displayProperty=nameWithType> метод.</span><span class="sxs-lookup"><span data-stu-id="3aad5-286">To cancel the wait operation, call the <xref:System.Threading.RegisteredWaitHandle.Unregister%2A?displayProperty=nameWithType> method.</span></span>  
  
 <span data-ttu-id="3aad5-287">Ожидающий поток использует Win32 `WaitForMultipleObjects` функции для мониторинга зарегистрированные операции ожидания.</span><span class="sxs-lookup"><span data-stu-id="3aad5-287">The wait thread uses the Win32 `WaitForMultipleObjects` function to monitor registered wait operations.</span></span> <span data-ttu-id="3aad5-288">Таким образом, если необходимо использовать один и тот же дескриптор операционной системы в нескольких вызовах <xref:System.Threading.ThreadPool.RegisterWaitForSingleObject%2A>, необходимо дублировать дескриптор с помощью Win32 `DuplicateHandle` функции.</span><span class="sxs-lookup"><span data-stu-id="3aad5-288">Therefore, if you must use the same native operating system handle in multiple calls to <xref:System.Threading.ThreadPool.RegisterWaitForSingleObject%2A>, you must duplicate the handle using the Win32 `DuplicateHandle` function.</span></span> <span data-ttu-id="3aad5-289">Обратите внимание, что не следует посылать событие объекта, передаваемого <xref:System.Threading.ThreadPool.RegisterWaitForSingleObject%2A>, так как ожидающий поток может не обнаружить, что событие сигнализирует перед его изменением.</span><span class="sxs-lookup"><span data-stu-id="3aad5-289">Note that you should not pulse an event object passed to <xref:System.Threading.ThreadPool.RegisterWaitForSingleObject%2A>, because the wait thread might not detect that the event is signaled before it is reset.</span></span>  
  
 <span data-ttu-id="3aad5-290">Перед возвратом, эта функция изменяет состояние некоторых типов объектов синхронизации.</span><span class="sxs-lookup"><span data-stu-id="3aad5-290">Before returning, the function modifies the state of some types of synchronization objects.</span></span> <span data-ttu-id="3aad5-291">Изменение происходит только для объекта, чьи сигнальные состояния вызвали условия ожидания.</span><span class="sxs-lookup"><span data-stu-id="3aad5-291">Modification occurs only for the object whose signaled state caused the wait condition to be satisfied.</span></span> <span data-ttu-id="3aad5-292">Например счетчик семафора уменьшается на единицу.</span><span class="sxs-lookup"><span data-stu-id="3aad5-292">For example, the count of a semaphore is decreased by one.</span></span>  
  
## <a name="version-information"></a><span data-ttu-id="3aad5-293">Сведения о версии</span><span class="sxs-lookup"><span data-stu-id="3aad5-293">Version Information</span></span>  
 <span data-ttu-id="3aad5-294">Начиная с .NET Framework версии 2.0, <xref:System.Threading.Thread.CurrentPrincipal%2A?displayProperty=nameWithType> значение свойства распространяется на рабочих потоков в очереди с помощью <xref:System.Threading.ThreadPool.RegisterWaitForSingleObject%2A> метод.</span><span class="sxs-lookup"><span data-stu-id="3aad5-294">Starting with the .NET Framework version 2.0, the <xref:System.Threading.Thread.CurrentPrincipal%2A?displayProperty=nameWithType> property value is propagated to worker threads queued using the <xref:System.Threading.ThreadPool.RegisterWaitForSingleObject%2A> method.</span></span> <span data-ttu-id="3aad5-295">В более ранних версиях информация об участнике не распространяются.</span><span class="sxs-lookup"><span data-stu-id="3aad5-295">In earlier versions, the principal information is not propagated.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <span data-ttu-id="3aad5-296">Значение параметра <paramref name="millisecondsTimeOutInterval" /> меньше –1.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3aad5-296">The <paramref name="millisecondsTimeOutInterval" /> parameter is less than -1.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="RegisterWaitForSingleObject">
      <MemberSignature Language="C#" Value="public static System.Threading.RegisteredWaitHandle RegisterWaitForSingleObject (System.Threading.WaitHandle waitObject, System.Threading.WaitOrTimerCallback callBack, object state, TimeSpan timeout, bool executeOnlyOnce);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Threading.RegisteredWaitHandle RegisterWaitForSingleObject(class System.Threading.WaitHandle waitObject, class System.Threading.WaitOrTimerCallback callBack, object state, valuetype System.TimeSpan timeout, bool executeOnlyOnce) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.ThreadPool.RegisterWaitForSingleObject(System.Threading.WaitHandle,System.Threading.WaitOrTimerCallback,System.Object,System.TimeSpan,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function RegisterWaitForSingleObject (waitObject As WaitHandle, callBack As WaitOrTimerCallback, state As Object, timeout As TimeSpan, executeOnlyOnce As Boolean) As RegisteredWaitHandle" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Threading::RegisteredWaitHandle ^ RegisterWaitForSingleObject(System::Threading::WaitHandle ^ waitObject, System::Threading::WaitOrTimerCallback ^ callBack, System::Object ^ state, TimeSpan timeout, bool executeOnlyOnce);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.ThreadPool</AssemblyName>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Threading.RegisteredWaitHandle</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="waitObject" Type="System.Threading.WaitHandle" />
        <Parameter Name="callBack" Type="System.Threading.WaitOrTimerCallback" />
        <Parameter Name="state" Type="System.Object" />
        <Parameter Name="timeout" Type="System.TimeSpan" />
        <Parameter Name="executeOnlyOnce" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="waitObject">
          <span data-ttu-id="3aad5-297">Регистрируемый объект <see cref="T:System.Threading.WaitHandle" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3aad5-297">The <see cref="T:System.Threading.WaitHandle" /> to register.</span>
          </span>
          <span data-ttu-id="3aad5-298">Используйте объект <see cref="T:System.Threading.WaitHandle" />, отличный от <see cref="T:System.Threading.Mutex" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3aad5-298">Use a <see cref="T:System.Threading.WaitHandle" /> other than <see cref="T:System.Threading.Mutex" />.</span>
          </span>
        </param>
        <param name="callBack">
          <span data-ttu-id="3aad5-299">Делегат <see cref="T:System.Threading.WaitOrTimerCallback" />, который вызывается при получении сигнала объектом, указанным в параметре <c>waitObject</c>.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3aad5-299">The <see cref="T:System.Threading.WaitOrTimerCallback" /> delegate to call when the <c>waitObject</c> parameter is signaled.</span>
          </span>
        </param>
        <param name="state">
          <span data-ttu-id="3aad5-300">Передаваемый делегату объект.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3aad5-300">The object passed to the delegate.</span>
          </span>
        </param>
        <param name="timeout">
          <span data-ttu-id="3aad5-301">Время ожидания, представленное объектом <see cref="T:System.TimeSpan" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3aad5-301">The time-out represented by a <see cref="T:System.TimeSpan" />.</span>
          </span>
          <span data-ttu-id="3aad5-302">Если параметр <c>timeout</c> равен 0 (нулю), функция проверяет состояние объекта и немедленно возвращает значение.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3aad5-302">If <c>timeout</c> is 0 (zero), the function tests the object's state and returns immediately.</span>
          </span>
          <span data-ttu-id="3aad5-303">Если параметр <c>timeout</c> равен –1, время ожидания функции никогда не истекает.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3aad5-303">If <c>timeout</c> is -1, the function's time-out interval never elapses.</span>
          </span>
        </param>
        <param name="executeOnlyOnce">
          <span data-ttu-id="3aad5-304">Значение <see langword="true" /> указывает, что после вызова делегата поток не будет ожидать параметр <c>waitObject</c>; значение<see langword="false" /> указывает, что таймер сбрасывается всякий раз по завершении операции ожидания до тех пор, пока регистрация ожидания не будет отменена.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3aad5-304">
              <see langword="true" /> to indicate that the thread will no longer wait on the <c>waitObject</c> parameter after the delegate has been called; <see langword="false" /> to indicate that the timer is reset every time the wait operation completes until the wait is unregistered.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="3aad5-305">Регистрирует делегат для ожидания объекта <see cref="T:System.Threading.WaitHandle" />, задавая значение <see cref="T:System.TimeSpan" /> для времени ожидания.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3aad5-305">Registers a delegate to wait for a <see cref="T:System.Threading.WaitHandle" />, specifying a <see cref="T:System.TimeSpan" /> value for the time-out.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="3aad5-306">Объект <see cref="T:System.Threading.RegisteredWaitHandle" />, инкапсулирующий собственный дескриптор.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3aad5-306">The <see cref="T:System.Threading.RegisteredWaitHandle" /> that encapsulates the native handle.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="3aad5-307">По окончании с помощью <xref:System.Threading.RegisteredWaitHandle> , возвращаемый этим методом, вызовите его <xref:System.Threading.RegisteredWaitHandle.Unregister%2A?displayProperty=nameWithType> метод для освобождения ссылки на дескриптор ожидания.</span><span class="sxs-lookup"><span data-stu-id="3aad5-307">When you are finished using the <xref:System.Threading.RegisteredWaitHandle> that is returned by this method, call its <xref:System.Threading.RegisteredWaitHandle.Unregister%2A?displayProperty=nameWithType> method to release references to the wait handle.</span></span> <span data-ttu-id="3aad5-308">Рекомендуется всегда вызывать <xref:System.Threading.RegisteredWaitHandle.Unregister%2A?displayProperty=nameWithType> метод, даже если указать `true` для `executeOnlyOnce`.</span><span class="sxs-lookup"><span data-stu-id="3aad5-308">We recommend that you always call the <xref:System.Threading.RegisteredWaitHandle.Unregister%2A?displayProperty=nameWithType> method, even if you specify `true` for `executeOnlyOnce`.</span></span> <span data-ttu-id="3aad5-309">Сборщик мусора работает более эффективно при вызове метода <xref:System.Threading.RegisteredWaitHandle.Unregister%2A?displayProperty=nameWithType> вместо метода в зависимости от зарегистрированного ожидающего дескриптора метода завершения.</span><span class="sxs-lookup"><span data-stu-id="3aad5-309">Garbage collection works more efficiently if you call the <xref:System.Threading.RegisteredWaitHandle.Unregister%2A?displayProperty=nameWithType> method instead of depending on the registered wait handle's finalizer.</span></span>  
  
 <span data-ttu-id="3aad5-310"><xref:System.Threading.ThreadPool.RegisterWaitForSingleObject%2A> Метод ставит в очередь указанный делегат в пул потоков.</span><span class="sxs-lookup"><span data-stu-id="3aad5-310">The <xref:System.Threading.ThreadPool.RegisterWaitForSingleObject%2A> method queues the specified delegate to the thread pool.</span></span> <span data-ttu-id="3aad5-311">Рабочий поток выполняет делегат, когда происходит одно из следующих:</span><span class="sxs-lookup"><span data-stu-id="3aad5-311">A worker thread will execute the delegate when one of the following occurs:</span></span>  
  
-   <span data-ttu-id="3aad5-312">Указанный объект находится в состоянии получения сигнала.</span><span class="sxs-lookup"><span data-stu-id="3aad5-312">The specified object is in the signaled state.</span></span>  
  
-   <span data-ttu-id="3aad5-313">Время ожидания истекло.</span><span class="sxs-lookup"><span data-stu-id="3aad5-313">The time-out interval elapses.</span></span>  
  
 <span data-ttu-id="3aad5-314"><xref:System.Threading.ThreadPool.RegisterWaitForSingleObject%2A> Метод проверяет текущее состояние указанного объекта <xref:System.Threading.WaitHandle>.</span><span class="sxs-lookup"><span data-stu-id="3aad5-314">The <xref:System.Threading.ThreadPool.RegisterWaitForSingleObject%2A> method checks the current state of the specified object's <xref:System.Threading.WaitHandle>.</span></span> <span data-ttu-id="3aad5-315">Если состояние объекта несигнальное, метод регистрирует операцию ожидания.</span><span class="sxs-lookup"><span data-stu-id="3aad5-315">If the object's state is unsignaled, the method registers a wait operation.</span></span> <span data-ttu-id="3aad5-316">Поток из пула потоков выполняет операцию ожидания.</span><span class="sxs-lookup"><span data-stu-id="3aad5-316">The wait operation is performed by a thread from the thread pool.</span></span> <span data-ttu-id="3aad5-317">Делегат выполняется рабочим потоком, когда состояние объекта становится сигнальным или истекает время ожидания.</span><span class="sxs-lookup"><span data-stu-id="3aad5-317">The delegate is executed by a worker thread when the object's state becomes signaled or the time-out interval elapses.</span></span> <span data-ttu-id="3aad5-318">Если `timeOutInterval` параметра не равно 0 (ноль) и `executeOnlyOnce` параметр `false`, таймер сбрасывается каждый раз событие сигнализирует или истекает время ожидания.</span><span class="sxs-lookup"><span data-stu-id="3aad5-318">If the `timeOutInterval` parameter is not 0 (zero) and the `executeOnlyOnce` parameter is `false`, the timer is reset every time the event is signaled or the time-out interval elapses.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="3aad5-319">С помощью <xref:System.Threading.Mutex> для `waitObject` не дает взаимное исключение для обратных вызовов, поскольку базовый интерфейс Win32 API использует значение по умолчанию `WT_EXECUTEDEFAULT` флаг, чтобы каждый обратный вызов назначается в отдельном потоке пула потоков.</span><span class="sxs-lookup"><span data-stu-id="3aad5-319">Using a <xref:System.Threading.Mutex> for `waitObject` does not provide mutual exclusion for the callbacks because the underlying Win32 API uses the default `WT_EXECUTEDEFAULT` flag, so each callback is dispatched on a separate thread pool thread.</span></span> <span data-ttu-id="3aad5-320">Вместо <xref:System.Threading.Mutex>, используйте <xref:System.Threading.Semaphore> и максимальное число 1.</span><span class="sxs-lookup"><span data-stu-id="3aad5-320">Instead of a <xref:System.Threading.Mutex>, use a <xref:System.Threading.Semaphore> with a maximum count of 1.</span></span>  
  
 <span data-ttu-id="3aad5-321">Чтобы отменить операцию ожидания, вызовите <xref:System.Threading.RegisteredWaitHandle.Unregister%2A?displayProperty=nameWithType> метод.</span><span class="sxs-lookup"><span data-stu-id="3aad5-321">To cancel the wait operation, call the <xref:System.Threading.RegisteredWaitHandle.Unregister%2A?displayProperty=nameWithType> method.</span></span>  
  
 <span data-ttu-id="3aad5-322">Ожидающий поток использует Win32 `WaitForMultipleObjects` функции для мониторинга зарегистрированные операции ожидания.</span><span class="sxs-lookup"><span data-stu-id="3aad5-322">The wait thread uses the Win32 `WaitForMultipleObjects` function to monitor registered wait operations.</span></span> <span data-ttu-id="3aad5-323">Таким образом, если необходимо использовать один и тот же дескриптор операционной системы в нескольких вызовах <xref:System.Threading.ThreadPool.RegisterWaitForSingleObject%2A>, необходимо дублировать дескриптор с помощью Win32 `DuplicateHandle` функции.</span><span class="sxs-lookup"><span data-stu-id="3aad5-323">Therefore, if you must use the same native operating system handle in multiple calls to <xref:System.Threading.ThreadPool.RegisterWaitForSingleObject%2A>, you must duplicate the handle using the Win32 `DuplicateHandle` function.</span></span> <span data-ttu-id="3aad5-324">Обратите внимание, что не следует посылать событие объекта, передаваемого <xref:System.Threading.ThreadPool.RegisterWaitForSingleObject%2A>, так как ожидающий поток может не обнаружить, что событие сигнализирует перед его изменением.</span><span class="sxs-lookup"><span data-stu-id="3aad5-324">Note that you should not pulse an event object passed to <xref:System.Threading.ThreadPool.RegisterWaitForSingleObject%2A>, because the wait thread might not detect that the event is signaled before it is reset.</span></span>  
  
 <span data-ttu-id="3aad5-325">Перед возвратом, эта функция изменяет состояние некоторых типов объектов синхронизации.</span><span class="sxs-lookup"><span data-stu-id="3aad5-325">Before returning, the function modifies the state of some types of synchronization objects.</span></span> <span data-ttu-id="3aad5-326">Изменение происходит только для объекта, чьи сигнальные состояния вызвали условия ожидания.</span><span class="sxs-lookup"><span data-stu-id="3aad5-326">Modification occurs only for the object whose signaled state caused the wait condition to be satisfied.</span></span> <span data-ttu-id="3aad5-327">Например счетчик семафора уменьшается на единицу.</span><span class="sxs-lookup"><span data-stu-id="3aad5-327">For example, the count of a semaphore is decreased by one.</span></span>  
  
## <a name="version-information"></a><span data-ttu-id="3aad5-328">Сведения о версии</span><span class="sxs-lookup"><span data-stu-id="3aad5-328">Version Information</span></span>  
 <span data-ttu-id="3aad5-329">Начиная с .NET Framework версии 2.0, <xref:System.Threading.Thread.CurrentPrincipal%2A?displayProperty=nameWithType> значение свойства распространяется на рабочих потоков в очереди с помощью <xref:System.Threading.ThreadPool.RegisterWaitForSingleObject%2A> метод.</span><span class="sxs-lookup"><span data-stu-id="3aad5-329">Starting with the .NET Framework version 2.0, the <xref:System.Threading.Thread.CurrentPrincipal%2A?displayProperty=nameWithType> property value is propagated to worker threads queued using the <xref:System.Threading.ThreadPool.RegisterWaitForSingleObject%2A> method.</span></span> <span data-ttu-id="3aad5-330">В более ранних версиях информация об участнике не распространяются.</span><span class="sxs-lookup"><span data-stu-id="3aad5-330">In earlier versions, the principal information is not propagated.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <span data-ttu-id="3aad5-331">Значение параметра <paramref name="timeout" /> меньше –1.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3aad5-331">The <paramref name="timeout" /> parameter is less than -1.</span>
          </span>
        </exception>
        <exception cref="T:System.NotSupportedException">
          <span data-ttu-id="3aad5-332">Значение параметра <paramref name="timeout" /> больше значения <see cref="F:System.Int32.MaxValue" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3aad5-332">The <paramref name="timeout" /> parameter is greater than <see cref="F:System.Int32.MaxValue" />.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="RegisterWaitForSingleObject">
      <MemberSignature Language="C#" Value="public static System.Threading.RegisteredWaitHandle RegisterWaitForSingleObject (System.Threading.WaitHandle waitObject, System.Threading.WaitOrTimerCallback callBack, object state, uint millisecondsTimeOutInterval, bool executeOnlyOnce);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Threading.RegisteredWaitHandle RegisterWaitForSingleObject(class System.Threading.WaitHandle waitObject, class System.Threading.WaitOrTimerCallback callBack, object state, unsigned int32 millisecondsTimeOutInterval, bool executeOnlyOnce) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.ThreadPool.RegisterWaitForSingleObject(System.Threading.WaitHandle,System.Threading.WaitOrTimerCallback,System.Object,System.UInt32,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function RegisterWaitForSingleObject (waitObject As WaitHandle, callBack As WaitOrTimerCallback, state As Object, millisecondsTimeOutInterval As UInteger, executeOnlyOnce As Boolean) As RegisteredWaitHandle" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Threading::RegisteredWaitHandle ^ RegisterWaitForSingleObject(System::Threading::WaitHandle ^ waitObject, System::Threading::WaitOrTimerCallback ^ callBack, System::Object ^ state, System::UInt32 millisecondsTimeOutInterval, bool executeOnlyOnce);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.ThreadPool</AssemblyName>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Threading.RegisteredWaitHandle</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="waitObject" Type="System.Threading.WaitHandle" />
        <Parameter Name="callBack" Type="System.Threading.WaitOrTimerCallback" />
        <Parameter Name="state" Type="System.Object" />
        <Parameter Name="millisecondsTimeOutInterval" Type="System.UInt32" />
        <Parameter Name="executeOnlyOnce" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="waitObject">
          <span data-ttu-id="3aad5-333">Регистрируемый объект <see cref="T:System.Threading.WaitHandle" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3aad5-333">The <see cref="T:System.Threading.WaitHandle" /> to register.</span>
          </span>
          <span data-ttu-id="3aad5-334">Используйте объект <see cref="T:System.Threading.WaitHandle" />, отличный от <see cref="T:System.Threading.Mutex" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3aad5-334">Use a <see cref="T:System.Threading.WaitHandle" /> other than <see cref="T:System.Threading.Mutex" />.</span>
          </span>
        </param>
        <param name="callBack">
          <span data-ttu-id="3aad5-335">Делегат <see cref="T:System.Threading.WaitOrTimerCallback" />, который вызывается при получении сигнала объектом, указанным в параметре <c>waitObject</c>.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3aad5-335">The <see cref="T:System.Threading.WaitOrTimerCallback" /> delegate to call when the <c>waitObject</c> parameter is signaled.</span>
          </span>
        </param>
        <param name="state">
          <span data-ttu-id="3aad5-336">Передаваемый делегату объект.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3aad5-336">The object passed to the delegate.</span>
          </span>
        </param>
        <param name="millisecondsTimeOutInterval">
          <span data-ttu-id="3aad5-337">Время ожидания в миллисекундах.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3aad5-337">The time-out in milliseconds.</span>
          </span>
          <span data-ttu-id="3aad5-338">Если параметр <c>millisecondsTimeOutInterval</c> равен 0 (нулю), функция проверяет состояние объекта и немедленно возвращает значение.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3aad5-338">If the <c>millisecondsTimeOutInterval</c> parameter is 0 (zero), the function tests the object's state and returns immediately.</span>
          </span>
          <span data-ttu-id="3aad5-339">Если параметр <c>millisecondsTimeOutInterval</c> равен –1, время ожидания функции никогда не истекает.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3aad5-339">If <c>millisecondsTimeOutInterval</c> is -1, the function's time-out interval never elapses.</span>
          </span>
        </param>
        <param name="executeOnlyOnce">
          <span data-ttu-id="3aad5-340">Значение <see langword="true" /> указывает, что после вызова делегата поток не будет ожидать параметр <c>waitObject</c>; значение<see langword="false" /> указывает, что таймер сбрасывается всякий раз по завершении операции ожидания до тех пор, пока регистрация ожидания не будет отменена.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3aad5-340">
              <see langword="true" /> to indicate that the thread will no longer wait on the <c>waitObject</c> parameter after the delegate has been called; <see langword="false" /> to indicate that the timer is reset every time the wait operation completes until the wait is unregistered.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="3aad5-341">Регистрирует делегат для ожидания объекта <see cref="T:System.Threading.WaitHandle" />, задавая время ожидания в миллисекундах в виде 32-разрядного целого числа без знака.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3aad5-341">Registers a delegate to wait for a <see cref="T:System.Threading.WaitHandle" />, specifying a 32-bit unsigned integer for the time-out in milliseconds.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="3aad5-342">Объект <see cref="T:System.Threading.RegisteredWaitHandle" />, который можно использовать для отмены зарегистрированной операции ожидания.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3aad5-342">The <see cref="T:System.Threading.RegisteredWaitHandle" /> that can be used to cancel the registered wait operation.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="3aad5-343">По окончании с помощью <xref:System.Threading.RegisteredWaitHandle> , возвращаемый этим методом, вызовите его <xref:System.Threading.RegisteredWaitHandle.Unregister%2A?displayProperty=nameWithType> метод для освобождения ссылки на дескриптор ожидания.</span><span class="sxs-lookup"><span data-stu-id="3aad5-343">When you are finished using the <xref:System.Threading.RegisteredWaitHandle> that is returned by this method, call its <xref:System.Threading.RegisteredWaitHandle.Unregister%2A?displayProperty=nameWithType> method to release references to the wait handle.</span></span> <span data-ttu-id="3aad5-344">Рекомендуется всегда вызывать <xref:System.Threading.RegisteredWaitHandle.Unregister%2A?displayProperty=nameWithType> метод, даже если указать `true` для `executeOnlyOnce`.</span><span class="sxs-lookup"><span data-stu-id="3aad5-344">We recommend that you always call the <xref:System.Threading.RegisteredWaitHandle.Unregister%2A?displayProperty=nameWithType> method, even if you specify `true` for `executeOnlyOnce`.</span></span> <span data-ttu-id="3aad5-345">Сборщик мусора работает более эффективно при вызове метода <xref:System.Threading.RegisteredWaitHandle.Unregister%2A?displayProperty=nameWithType> вместо метода в зависимости от зарегистрированного ожидающего дескриптора метода завершения.</span><span class="sxs-lookup"><span data-stu-id="3aad5-345">Garbage collection works more efficiently if you call the <xref:System.Threading.RegisteredWaitHandle.Unregister%2A?displayProperty=nameWithType> method instead of depending on the registered wait handle's finalizer.</span></span>  
  
 <span data-ttu-id="3aad5-346"><xref:System.Threading.ThreadPool.RegisterWaitForSingleObject%2A> Метод ставит в очередь указанный делегат в пул потоков.</span><span class="sxs-lookup"><span data-stu-id="3aad5-346">The <xref:System.Threading.ThreadPool.RegisterWaitForSingleObject%2A> method queues the specified delegate to the thread pool.</span></span> <span data-ttu-id="3aad5-347">Рабочий поток выполняет делегат, когда происходит одно из следующих:</span><span class="sxs-lookup"><span data-stu-id="3aad5-347">A worker thread will execute the delegate when one of the following occurs:</span></span>  
  
-   <span data-ttu-id="3aad5-348">Указанный объект находится в состоянии получения сигнала.</span><span class="sxs-lookup"><span data-stu-id="3aad5-348">The specified object is in the signaled state.</span></span>  
  
-   <span data-ttu-id="3aad5-349">Время ожидания истекло.</span><span class="sxs-lookup"><span data-stu-id="3aad5-349">The time-out interval elapses.</span></span>  
  
 <span data-ttu-id="3aad5-350"><xref:System.Threading.ThreadPool.RegisterWaitForSingleObject%2A> Метод проверяет текущее состояние указанного объекта <xref:System.Threading.WaitHandle>.</span><span class="sxs-lookup"><span data-stu-id="3aad5-350">The <xref:System.Threading.ThreadPool.RegisterWaitForSingleObject%2A> method checks the current state of the specified object's <xref:System.Threading.WaitHandle>.</span></span> <span data-ttu-id="3aad5-351">Если состояние объекта несигнальное, метод регистрирует операцию ожидания.</span><span class="sxs-lookup"><span data-stu-id="3aad5-351">If the object's state is unsignaled, the method registers a wait operation.</span></span> <span data-ttu-id="3aad5-352">Поток из пула потоков выполняет операцию ожидания.</span><span class="sxs-lookup"><span data-stu-id="3aad5-352">The wait operation is performed by a thread from the thread pool.</span></span> <span data-ttu-id="3aad5-353">Делегат выполняется рабочим потоком, когда состояние объекта становится сигнальным или истекает время ожидания.</span><span class="sxs-lookup"><span data-stu-id="3aad5-353">The delegate is executed by a worker thread when the object's state becomes signaled or the time-out interval elapses.</span></span> <span data-ttu-id="3aad5-354">Если `timeOutInterval` параметра не равно 0 (ноль) и `executeOnlyOnce` параметр `false`, таймер сбрасывается каждый раз событие сигнализирует или истекает время ожидания.</span><span class="sxs-lookup"><span data-stu-id="3aad5-354">If the `timeOutInterval` parameter is not 0 (zero) and the `executeOnlyOnce` parameter is `false`, the timer is reset every time the event is signaled or the time-out interval elapses.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="3aad5-355">С помощью <xref:System.Threading.Mutex> для `waitObject` не дает взаимное исключение для обратных вызовов, поскольку базовый интерфейс Win32 API использует значение по умолчанию `WT_EXECUTEDEFAULT` флаг, чтобы каждый обратный вызов назначается в отдельном потоке пула потоков.</span><span class="sxs-lookup"><span data-stu-id="3aad5-355">Using a <xref:System.Threading.Mutex> for `waitObject` does not provide mutual exclusion for the callbacks because the underlying Win32 API uses the default `WT_EXECUTEDEFAULT` flag, so each callback is dispatched on a separate thread pool thread.</span></span> <span data-ttu-id="3aad5-356">Вместо <xref:System.Threading.Mutex>, используйте <xref:System.Threading.Semaphore> и максимальное число 1.</span><span class="sxs-lookup"><span data-stu-id="3aad5-356">Instead of a <xref:System.Threading.Mutex>, use a <xref:System.Threading.Semaphore> with a maximum count of 1.</span></span>  
  
 <span data-ttu-id="3aad5-357">Чтобы отменить операцию ожидания, вызовите <xref:System.Threading.RegisteredWaitHandle.Unregister%2A?displayProperty=nameWithType> метод.</span><span class="sxs-lookup"><span data-stu-id="3aad5-357">To cancel the wait operation, call the <xref:System.Threading.RegisteredWaitHandle.Unregister%2A?displayProperty=nameWithType> method.</span></span>  
  
 <span data-ttu-id="3aad5-358">Ожидающий поток использует Win32 `WaitForMultipleObjects` функции для мониторинга зарегистрированные операции ожидания.</span><span class="sxs-lookup"><span data-stu-id="3aad5-358">The wait thread uses the Win32 `WaitForMultipleObjects` function to monitor registered wait operations.</span></span> <span data-ttu-id="3aad5-359">Таким образом, если необходимо использовать один и тот же дескриптор операционной системы в нескольких вызовах <xref:System.Threading.ThreadPool.RegisterWaitForSingleObject%2A>, необходимо дублировать дескриптор с помощью Win32 `DuplicateHandle` функции.</span><span class="sxs-lookup"><span data-stu-id="3aad5-359">Therefore, if you must use the same native operating system handle in multiple calls to <xref:System.Threading.ThreadPool.RegisterWaitForSingleObject%2A>, you must duplicate the handle using the Win32 `DuplicateHandle` function.</span></span> <span data-ttu-id="3aad5-360">Обратите внимание, что не следует посылать событие объекта, передаваемого <xref:System.Threading.ThreadPool.RegisterWaitForSingleObject%2A>, так как ожидающий поток может не обнаружить, что событие сигнализирует перед его изменением.</span><span class="sxs-lookup"><span data-stu-id="3aad5-360">Note that you should not pulse an event object passed to <xref:System.Threading.ThreadPool.RegisterWaitForSingleObject%2A>, because the wait thread might not detect that the event is signaled before it is reset.</span></span>  
  
 <span data-ttu-id="3aad5-361">Перед возвратом, эта функция изменяет состояние некоторых типов объектов синхронизации.</span><span class="sxs-lookup"><span data-stu-id="3aad5-361">Before returning, the function modifies the state of some types of synchronization objects.</span></span> <span data-ttu-id="3aad5-362">Изменение происходит только для объекта, чьи сигнальные состояния вызвали условия ожидания.</span><span class="sxs-lookup"><span data-stu-id="3aad5-362">Modification occurs only for the object whose signaled state caused the wait condition to be satisfied.</span></span> <span data-ttu-id="3aad5-363">Например счетчик семафора уменьшается на единицу.</span><span class="sxs-lookup"><span data-stu-id="3aad5-363">For example, the count of a semaphore is decreased by one.</span></span>  
  
## <a name="version-information"></a><span data-ttu-id="3aad5-364">Сведения о версии</span><span class="sxs-lookup"><span data-stu-id="3aad5-364">Version Information</span></span>  
 <span data-ttu-id="3aad5-365">Начиная с .NET Framework версии 2.0, <xref:System.Threading.Thread.CurrentPrincipal%2A?displayProperty=nameWithType> значение свойства распространяется на рабочих потоков в очереди с помощью <xref:System.Threading.ThreadPool.RegisterWaitForSingleObject%2A> метод.</span><span class="sxs-lookup"><span data-stu-id="3aad5-365">Starting with the .NET Framework version 2.0, the <xref:System.Threading.Thread.CurrentPrincipal%2A?displayProperty=nameWithType> property value is propagated to worker threads queued using the <xref:System.Threading.ThreadPool.RegisterWaitForSingleObject%2A> method.</span></span> <span data-ttu-id="3aad5-366">В более ранних версиях информация об участнике не распространяются.</span><span class="sxs-lookup"><span data-stu-id="3aad5-366">In earlier versions, the principal information is not propagated.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="3aad5-367">В следующем примере показано, как использовать <xref:System.Threading.ThreadPool.RegisterWaitForSingleObject%2A> для выполнения указанный метод обратного вызова, когда сигнал дескриптор ожидания, указанного метода.</span><span class="sxs-lookup"><span data-stu-id="3aad5-367">The following example shows how to use the <xref:System.Threading.ThreadPool.RegisterWaitForSingleObject%2A> method to execute a specified callback method when a specified wait handle is signaled.</span></span> <span data-ttu-id="3aad5-368">В этом примере метод обратного вызова является `WaitProc`, и дескриптора ожидания <xref:System.Threading.AutoResetEvent>.</span><span class="sxs-lookup"><span data-stu-id="3aad5-368">In this example, the callback method is `WaitProc`, and the wait handle is an <xref:System.Threading.AutoResetEvent>.</span></span>  
  
 <span data-ttu-id="3aad5-369">В примере определяется `TaskInfo` класс для хранения информации, который передается функции обратного вызова при его выполнении.</span><span class="sxs-lookup"><span data-stu-id="3aad5-369">The example defines a `TaskInfo` class to hold the information that is passed to the callback when it executes.</span></span> <span data-ttu-id="3aad5-370">В примере создается `TaskInfo` объекта и присваивает его некоторых строковых данных.</span><span class="sxs-lookup"><span data-stu-id="3aad5-370">The example creates a `TaskInfo` object and assigns it some string data.</span></span> <span data-ttu-id="3aad5-371"><xref:System.Threading.RegisteredWaitHandle> , Возвращаемый <xref:System.Threading.ThreadPool.RegisterWaitForSingleObject%2A> назначен метод `Handle` поле `TaskInfo` таким образом, метод обратного вызова имеет доступ к <xref:System.Threading.RegisteredWaitHandle>.</span><span class="sxs-lookup"><span data-stu-id="3aad5-371">The <xref:System.Threading.RegisteredWaitHandle> that is returned by the <xref:System.Threading.ThreadPool.RegisterWaitForSingleObject%2A> method is assigned to the `Handle` field of the `TaskInfo` object so that the callback method has access to the <xref:System.Threading.RegisteredWaitHandle>.</span></span>  
  
 <span data-ttu-id="3aad5-372">Помимо указания `TaskInfo` как объект, передаваемый в метод обратного вызова, вызов <xref:System.Threading.ThreadPool.RegisterWaitForSingleObject%2A> указывает метод <xref:System.Threading.AutoResetEvent> , задача будет ожидать, <xref:System.Threading.WaitOrTimerCallback> делегат, который представляет `WaitProc` метод обратного вызова интервал времени ожидания в одну секунду и нескольких обратных вызовов.</span><span class="sxs-lookup"><span data-stu-id="3aad5-372">In addition to specifying `TaskInfo` as the object to pass to the callback method, the call to the <xref:System.Threading.ThreadPool.RegisterWaitForSingleObject%2A> method specifies the <xref:System.Threading.AutoResetEvent> that the task will wait for, a <xref:System.Threading.WaitOrTimerCallback> delegate that represents the `WaitProc` callback method, a one second time-out interval, and multiple callbacks.</span></span>  
  
 <span data-ttu-id="3aad5-373">Когда главный поток сигнализирует <xref:System.Threading.AutoResetEvent> путем вызова его <xref:System.Threading.EventWaitHandle.Set%2A> метод, <xref:System.Threading.WaitOrTimerCallback> вызове делегата.</span><span class="sxs-lookup"><span data-stu-id="3aad5-373">When the main thread signals the <xref:System.Threading.AutoResetEvent> by calling its <xref:System.Threading.EventWaitHandle.Set%2A> method, the <xref:System.Threading.WaitOrTimerCallback> delegate is invoked.</span></span> <span data-ttu-id="3aad5-374">`WaitProc` Тесты метод <xref:System.Threading.RegisteredWaitHandle> для определения, является ли время ожидания истекло.</span><span class="sxs-lookup"><span data-stu-id="3aad5-374">The `WaitProc` method tests <xref:System.Threading.RegisteredWaitHandle> to determine whether a time-out occurred.</span></span> <span data-ttu-id="3aad5-375">Если был вызван обратный вызов был сигнал дескриптору ожидания, `WaitProc` отменяет регистрацию метод <xref:System.Threading.RegisteredWaitHandle>, остановка дополнительные обратные вызовы.</span><span class="sxs-lookup"><span data-stu-id="3aad5-375">If the callback was invoked because the wait handle was signaled, the `WaitProc` method unregisters the <xref:System.Threading.RegisteredWaitHandle>, stopping additional callbacks.</span></span> <span data-ttu-id="3aad5-376">В случае тайм-аут задача будет продолжать ожидать.</span><span class="sxs-lookup"><span data-stu-id="3aad5-376">In the case of a time-out, the task continues to wait.</span></span> <span data-ttu-id="3aad5-377">`WaitProc` Метод завершает сообщение в окно консоли.</span><span class="sxs-lookup"><span data-stu-id="3aad5-377">The `WaitProc` method ends by printing a message to the console.</span></span>  
  
 [!code-cpp[System.Threading.ThreadPool RegisterWaitForSingleObject0#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Threading.ThreadPool RegisterWaitForSingleObject0/CPP/source.cpp#1)]
 [!code-csharp[System.Threading.ThreadPool RegisterWaitForSingleObject0#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Threading.ThreadPool RegisterWaitForSingleObject0/CS/source.cs#1)]
 [!code-vb[System.Threading.ThreadPool RegisterWaitForSingleObject0#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Threading.ThreadPool RegisterWaitForSingleObject0/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <span data-ttu-id="3aad5-378">Значение параметра <paramref name="millisecondsTimeOutInterval" /> меньше –1.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3aad5-378">The <paramref name="millisecondsTimeOutInterval" /> parameter is less than -1.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="SetMaxThreads">
      <MemberSignature Language="C#" Value="public static bool SetMaxThreads (int workerThreads, int completionPortThreads);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool SetMaxThreads(int32 workerThreads, int32 completionPortThreads) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.ThreadPool.SetMaxThreads(System.Int32,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function SetMaxThreads (workerThreads As Integer, completionPortThreads As Integer) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool SetMaxThreads(int workerThreads, int completionPortThreads);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Threading.ThreadPool</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="workerThreads" Type="System.Int32" />
        <Parameter Name="completionPortThreads" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="workerThreads">
          <span data-ttu-id="3aad5-379">Максимальное количество рабочих потоков в пуле потоков.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3aad5-379">The maximum number of worker threads in the thread pool.</span>
          </span>
        </param>
        <param name="completionPortThreads">
          <span data-ttu-id="3aad5-380">Максимальное количество потоков асинхронного ввода-вывода в пуле потоков.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3aad5-380">The maximum number of asynchronous I/O threads in the thread pool.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="3aad5-381">Задает количество запросов к пулу потоков, которые могут быть активными одновременно.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3aad5-381">Sets the number of requests to the thread pool that can be active concurrently.</span>
          </span>
          <span data-ttu-id="3aad5-382">Все запросы, превышающие это количество, остаются в очереди до тех пор, пока потоки пула не станут доступны.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3aad5-382">All requests above that number remain queued until thread pool threads become available.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="3aad5-383">Значение <see langword="true" />, если изменение выполнено успешно; в противном случае — значение <see langword="false" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3aad5-383">
              <see langword="true" /> if the change is successful; otherwise, <see langword="false" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="3aad5-384">Максимальное число рабочих потоков или потоков завершения ввода-вывода в число невозможно задать меньше, чем количество процессоров на компьютере.</span><span class="sxs-lookup"><span data-stu-id="3aad5-384">You cannot set the maximum number of worker threads or I/O completion threads to a number smaller than the number of processors on the computer.</span></span> <span data-ttu-id="3aad5-385">Чтобы определить, сколько процессоров присутствуют, извлечь значение <xref:System.Environment.ProcessorCount%2A?displayProperty=nameWithType> свойства.</span><span class="sxs-lookup"><span data-stu-id="3aad5-385">To determine how many processors are present, retrieve the value of the <xref:System.Environment.ProcessorCount%2A?displayProperty=nameWithType> property.</span></span> <span data-ttu-id="3aad5-386">Кроме того нельзя задать максимальное число рабочих потоков или потоков завершения ввода-вывода в число меньше, чем соответствующий минимальное количество рабочих потоков или потоков завершения ввода-вывода.</span><span class="sxs-lookup"><span data-stu-id="3aad5-386">In addition, you cannot set the maximum number of worker threads or I/O completion threads to a number smaller than the corresponding minimum number of worker threads or I/O completion threads.</span></span> <span data-ttu-id="3aad5-387">Чтобы определить размер пула потоков с минимальным, вызовите <xref:System.Threading.ThreadPool.GetMinThreads%2A> метод.</span><span class="sxs-lookup"><span data-stu-id="3aad5-387">To determine the minimum thread pool size,  call the <xref:System.Threading.ThreadPool.GetMinThreads%2A> method.</span></span>  
  
 <span data-ttu-id="3aad5-388">Если среда находится, например Internet Information Services (IIS) или SQL Server, узел позволяет ограничить или запретить изменения размера пула потоков.</span><span class="sxs-lookup"><span data-stu-id="3aad5-388">If the common language runtime is hosted, for example by Internet Information Services (IIS) or SQL Server, the host can limit or prevent changes to the thread pool size.</span></span>  
  
 <span data-ttu-id="3aad5-389">Соблюдайте осторожность при изменении максимальное число потоков в пуле потоков.</span><span class="sxs-lookup"><span data-stu-id="3aad5-389">Use caution when changing the maximum number of threads in the thread pool.</span></span> <span data-ttu-id="3aad5-390">Во время может повыситься при использовании кода, изменения могут возникнуть неблагоприятное воздействие на библиотек кода, которые вы используете.</span><span class="sxs-lookup"><span data-stu-id="3aad5-390">While your code might benefit, the changes might have an adverse effect on code libraries you use.</span></span>  
  
 <span data-ttu-id="3aad5-391">Задание слишком большой размер пула потоков может привести к снижению производительности.</span><span class="sxs-lookup"><span data-stu-id="3aad5-391">Setting the thread pool size too large can cause performance problems.</span></span> <span data-ttu-id="3aad5-392">Если слишком много потоков выполняются одновременно, расходы на переключение между задачами становится важным фактором.</span><span class="sxs-lookup"><span data-stu-id="3aad5-392">If too many threads are executing at the same time, the task switching overhead becomes a significant factor.</span></span>  
  
 ]]></format>
        </remarks>
        <permission cref="T:System.Security.Permissions.SecurityPermission">
          <span data-ttu-id="3aad5-393">Для получения возможности управления потоками.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3aad5-393">for the ability to control threads.</span>
          </span>
          <span data-ttu-id="3aad5-394">Значение разрешения: <see cref="F:System.Security.Permissions.SecurityPermissionFlag.ControlThread" /></span>
          <span class="sxs-lookup">
            <span data-stu-id="3aad5-394">Permission value: <see cref="F:System.Security.Permissions.SecurityPermissionFlag.ControlThread" /></span>
          </span>
        </permission>
        <altmember cref="M:System.Threading.ThreadPool.GetMaxThreads(System.Int32@,System.Int32@)" />
        <altmember cref="M:System.Threading.ThreadPool.SetMinThreads(System.Int32,System.Int32)" />
        <altmember cref="M:System.Threading.ThreadPool.GetMinThreads(System.Int32@,System.Int32@)" />
        <altmember cref="M:System.Threading.ThreadPool.GetAvailableThreads(System.Int32@,System.Int32@)" />
      </Docs>
    </Member>
    <Member MemberName="SetMinThreads">
      <MemberSignature Language="C#" Value="public static bool SetMinThreads (int workerThreads, int completionPortThreads);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool SetMinThreads(int32 workerThreads, int32 completionPortThreads) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.ThreadPool.SetMinThreads(System.Int32,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function SetMinThreads (workerThreads As Integer, completionPortThreads As Integer) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool SetMinThreads(int workerThreads, int completionPortThreads);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Threading.ThreadPool</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="workerThreads" Type="System.Int32" />
        <Parameter Name="completionPortThreads" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="workerThreads">
          <span data-ttu-id="3aad5-395">Минимальное количество рабочих потоков, которые создаются пулом потоков по требованию.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3aad5-395">The minimum number of worker threads that the thread pool creates on demand.</span>
          </span>
        </param>
        <param name="completionPortThreads">
          <span data-ttu-id="3aad5-396">Минимальное количество потоков асинхронного ввода-вывода, которые создаются пулом потоков по требованию.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3aad5-396">The minimum number of asynchronous I/O threads that the thread pool creates on demand.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="3aad5-397">Задает минимальное число потоков, создаваемых пулом потоков по требованию по мере поступления новых запросов перед переходом на алгоритм управления созданием и уничтожением потоков.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3aad5-397">Sets the minimum number of threads the thread pool creates on demand, as new requests are made, before switching to an algorithm for managing thread creation and destruction.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="3aad5-398">Значение <see langword="true" />, если изменение выполнено успешно; в противном случае — значение <see langword="false" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3aad5-398">
              <see langword="true" /> if the change is successful; otherwise, <see langword="false" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="3aad5-399">Пул потоков предоставляет новые рабочие потоки или потоки завершения ввода-вывода по запросу, пока не достигнет минимум для каждой категории.</span><span class="sxs-lookup"><span data-stu-id="3aad5-399">The thread pool provides new worker threads or I/O completion threads on demand until it reaches the minimum for each category.</span></span> <span data-ttu-id="3aad5-400">По достижении минимального пула потоков может создавать дополнительные потоки в этой категории или ожидать завершения некоторых задач.</span><span class="sxs-lookup"><span data-stu-id="3aad5-400">When the minimum is reached, the thread pool can create additional threads in that category or wait until some tasks complete.</span></span> <span data-ttu-id="3aad5-401">Начиная с версии [!INCLUDE[net_v40_short](~/includes/net-v40-short-md.md)], пул потоков создает и уничтожает потоки в целях оптимизации пропускной способности, которая определяется как количество задач, завершаемых за единицу времени.</span><span class="sxs-lookup"><span data-stu-id="3aad5-401">Beginning with the [!INCLUDE[net_v40_short](~/includes/net-v40-short-md.md)], the thread pool creates and destroys threads in order to optimize throughput, which is defined as the number of tasks that complete per unit of time.</span></span> <span data-ttu-id="3aad5-402">Слишком малое количество потоков может препятствовать оптимальному использованию доступных ресурсов, тогда как слишком большое их количество может усиливать конкуренцию за ресурсы.</span><span class="sxs-lookup"><span data-stu-id="3aad5-402">Too few threads might not make optimal use of available resources, whereas too many threads could increase resource contention.</span></span>  
  
 <span data-ttu-id="3aad5-403">Если потребность низкая, фактическое количество потоков из пула потоков может быть ниже минимальных значений.</span><span class="sxs-lookup"><span data-stu-id="3aad5-403">When demand is low, the actual number of thread pool threads can fall below the minimum values.</span></span>  
  
 <span data-ttu-id="3aad5-404">Если указано отрицательное число или число, большее, чем максимальное число активных потоков из пула потоков (полученный с использованием <xref:System.Threading.ThreadPool.GetMaxThreads%2A>), <xref:System.Threading.ThreadPool.SetMinThreads%2A> возвращает `false` и не изменяет либо минимальных значений.</span><span class="sxs-lookup"><span data-stu-id="3aad5-404">If you specify a negative number or a number larger than the maximum number of active thread pool threads (obtained using <xref:System.Threading.ThreadPool.GetMaxThreads%2A>), <xref:System.Threading.ThreadPool.SetMinThreads%2A> returns `false` and does not change either of the minimum values.</span></span>  
  
> [!CAUTION]
>  <span data-ttu-id="3aad5-405">По умолчанию минимальное количество потоков равно числу процессоров в системе.</span><span class="sxs-lookup"><span data-stu-id="3aad5-405">By default, the minimum number of threads is set to the number of processors on a system.</span></span> <span data-ttu-id="3aad5-406">Можно использовать <xref:System.Threading.ThreadPool.SetMinThreads%2A> метод для увеличения минимального числа ofthreads.</span><span class="sxs-lookup"><span data-stu-id="3aad5-406">You can use the <xref:System.Threading.ThreadPool.SetMinThreads%2A> method to increase the minimum number ofthreads.</span></span> <span data-ttu-id="3aad5-407">Однако необоснованное увеличение этих значений может привести к снижению производительности.</span><span class="sxs-lookup"><span data-stu-id="3aad5-407">However, unnecessarily increasing these values can cause performance problems.</span></span> <span data-ttu-id="3aad5-408">Если одновременно запускается слишком много задач, все они могут выполняться слишком медленно.</span><span class="sxs-lookup"><span data-stu-id="3aad5-408">If too many tasks start at the same time, all of them might appear to be slow.</span></span> <span data-ttu-id="3aad5-409">В большинстве случаев пул потоков работает лучше использует собственный алгоритм выделения потоков.</span><span class="sxs-lookup"><span data-stu-id="3aad5-409">In most cases, the thread pool will perform better with its own algorithm for allocating threads.</span></span> <span data-ttu-id="3aad5-410">Снижение минимальным меньшего, чем число процессоров, также может вызвать снижение производительности.</span><span class="sxs-lookup"><span data-stu-id="3aad5-410">Reducing the minimum to less than the number of processors can also hurt performance.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="3aad5-411">Следующий пример задает минимальное количество рабочих потоков до 4, а также сохраняет исходное значение минимальное количество потоков асинхронного завершения ввода-вывода.</span><span class="sxs-lookup"><span data-stu-id="3aad5-411">The following example sets the minimum number of worker threads to four, and preserves the original value for the minimum number of asynchronous I/O completion threads.</span></span>  
  
 [!code-cpp[System.Threading.ThreadPool.GetSetMinThreads#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Threading.ThreadPool.GetSetMinThreads/CPP/source.cpp#1)]
 [!code-csharp[System.Threading.ThreadPool.GetSetMinThreads#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Threading.ThreadPool.GetSetMinThreads/CS/source.cs#1)]
 [!code-vb[System.Threading.ThreadPool.GetSetMinThreads#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Threading.ThreadPool.GetSetMinThreads/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <permission cref="T:System.Security.Permissions.SecurityPermission">
          <span data-ttu-id="3aad5-412">Для получения возможности управления потоками.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3aad5-412">for the ability to control threads.</span>
          </span>
          <span data-ttu-id="3aad5-413">Значение разрешения: <see cref="F:System.Security.Permissions.SecurityPermissionFlag.ControlThread" /></span>
          <span class="sxs-lookup">
            <span data-stu-id="3aad5-413">Permission value: <see cref="F:System.Security.Permissions.SecurityPermissionFlag.ControlThread" /></span>
          </span>
        </permission>
        <altmember cref="M:System.Threading.ThreadPool.GetMinThreads(System.Int32@,System.Int32@)" />
        <altmember cref="M:System.Threading.ThreadPool.GetMaxThreads(System.Int32@,System.Int32@)" />
        <altmember cref="M:System.Threading.ThreadPool.GetAvailableThreads(System.Int32@,System.Int32@)" />
      </Docs>
    </Member>
    <Member MemberName="UnsafeQueueNativeOverlapped">
      <MemberSignature Language="C#" Value="public static bool UnsafeQueueNativeOverlapped (System.Threading.NativeOverlapped* overlapped);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool UnsafeQueueNativeOverlapped(valuetype System.Threading.NativeOverlapped* overlapped) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.ThreadPool.UnsafeQueueNativeOverlapped(System.Threading.NativeOverlapped*)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool UnsafeQueueNativeOverlapped(System::Threading::NativeOverlapped* overlapped);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Threading.ThreadPool</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Security.SecurityCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="overlapped" Type="System.Threading.NativeOverlapped*" />
      </Parameters>
      <Docs>
        <param name="overlapped">
          <span data-ttu-id="3aad5-414">Помещаемая в очередь структура <see cref="T:System.Threading.NativeOverlapped" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3aad5-414">The <see cref="T:System.Threading.NativeOverlapped" /> structure to queue.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="3aad5-415">Помещает в очередь на выполнение операцию перекрывающегося ввода-вывода.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3aad5-415">Queues an overlapped I/O operation for execution.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="3aad5-416">Значение <see langword="true" />, если операция была успешна помещена в очередь порта завершения ввода-вывода; в противном случае значение <see langword="false" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3aad5-416">
              <see langword="true" /> if the operation was successfully queued to an I/O completion port; otherwise, <see langword="false" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="3aad5-417">Сведения об использовании собственного Win32 перекрывающегося ввода-вывода, см. в разделе <xref:System.Threading.Overlapped> класса <xref:System.Threading.NativeOverlapped> структуры и `OVERLAPPED` структуры в пакете SDK для платформы Win32.</span><span class="sxs-lookup"><span data-stu-id="3aad5-417">For information about using native Win32 overlapped I/O, see the <xref:System.Threading.Overlapped> class, the <xref:System.Threading.NativeOverlapped> structure, and the `OVERLAPPED` structure in the Win32 Platform SDK.</span></span>  
  
> [!CAUTION]
>  <span data-ttu-id="3aad5-418">С помощью <xref:System.Threading.ThreadPool.UnsafeQueueNativeOverlapped%2A> метод может случайно открываются брешь в системе безопасности.</span><span class="sxs-lookup"><span data-stu-id="3aad5-418">Using the <xref:System.Threading.ThreadPool.UnsafeQueueNativeOverlapped%2A> method could inadvertently open up a security hole.</span></span> <span data-ttu-id="3aad5-419">Управление доступом для кода сформирует его проверки разрешений всех вызывающих объектов разрешений в стеке.</span><span class="sxs-lookup"><span data-stu-id="3aad5-419">Code access security bases its permission checks on the permissions of all the callers on the stack.</span></span> <span data-ttu-id="3aad5-420">Когда работу в очереди пула потоков поток при помощи <xref:System.Threading.ThreadPool.UnsafeQueueNativeOverlapped%2A>, стек пула потоков не обладает контекстом вызывающих.</span><span class="sxs-lookup"><span data-stu-id="3aad5-420">When work is queued on a thread pool thread using <xref:System.Threading.ThreadPool.UnsafeQueueNativeOverlapped%2A>, the stack of the thread pool thread does not have the context of the actual callers.</span></span> <span data-ttu-id="3aad5-421">Вредоносный код, можно использовать этот параметр, чтобы избежать проверки разрешений.</span><span class="sxs-lookup"><span data-stu-id="3aad5-421">Malicious code might be able exploit this to avoid permission checks.</span></span>  
  
 ]]></format>
        </remarks>
        <permission cref="T:System.Security.SecurityCriticalAttribute">
          <span data-ttu-id="3aad5-422">требуется полное доверие для непосредственно вызывающего метода.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3aad5-422">Requires full trust for the immediate caller.</span>
          </span>
          <span data-ttu-id="3aad5-423">Этот член не может использоваться частично доверенным или прозрачным кодом.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3aad5-423">This member cannot be used by partially trusted or transparent code.</span>
          </span>
        </permission>
      </Docs>
    </Member>
    <Member MemberName="UnsafeQueueUserWorkItem">
      <MemberSignature Language="C#" Value="public static bool UnsafeQueueUserWorkItem (System.Threading.WaitCallback callBack, object state);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool UnsafeQueueUserWorkItem(class System.Threading.WaitCallback callBack, object state) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.ThreadPool.UnsafeQueueUserWorkItem(System.Threading.WaitCallback,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function UnsafeQueueUserWorkItem (callBack As WaitCallback, state As Object) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool UnsafeQueueUserWorkItem(System::Threading::WaitCallback ^ callBack, System::Object ^ state);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Threading.ThreadPool</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Security.SecurityCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="callBack" Type="System.Threading.WaitCallback" />
        <Parameter Name="state" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="callBack">
          <span data-ttu-id="3aad5-424">Метод <see cref="T:System.Threading.WaitCallback" />, представляющий делегат, который вызывается, когда потоку в пуле потоков назначается рабочий элемент.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3aad5-424">A <see cref="T:System.Threading.WaitCallback" /> that represents the delegate to invoke when a thread in the thread pool picks up the work item.</span>
          </span>
        </param>
        <param name="state">
          <span data-ttu-id="3aad5-425">Объект, передаваемый делегату при вызове его из пула потоков.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3aad5-425">The object that is passed to the delegate when serviced from the thread pool.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="3aad5-426">Помещает указанный делегат в очередь пула потоков, но не распространяет вызывающий стек на рабочий поток.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3aad5-426">Queues the specified delegate to the thread pool, but does not propagate the calling stack to the worker thread.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="3aad5-427">Значение <see langword="true" />, если метод завершается успешно. Если рабочий элемент не удалось поместить в очередь, создается исключение <see cref="T:System.OutOfMemoryException" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3aad5-427">
              <see langword="true" /> if the method succeeds; <see cref="T:System.OutOfMemoryException" /> is thrown if the work item could not be queued.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="3aad5-428">В отличие от <xref:System.Threading.ThreadPool.QueueUserWorkItem%2A> метод <xref:System.Threading.ThreadPool.UnsafeQueueUserWorkItem%2A> не распространяет вызывающий стек на рабочий поток.</span><span class="sxs-lookup"><span data-stu-id="3aad5-428">Unlike the <xref:System.Threading.ThreadPool.QueueUserWorkItem%2A> method, <xref:System.Threading.ThreadPool.UnsafeQueueUserWorkItem%2A> does not propagate the calling stack to the worker thread.</span></span> <span data-ttu-id="3aad5-429">Это позволяет коду терять стек вызовов и тем самым повысить свои привилегии безопасности.</span><span class="sxs-lookup"><span data-stu-id="3aad5-429">This allows code to lose the calling stack and thereby to elevate its security privileges.</span></span>  
  
> [!CAUTION]
>  <span data-ttu-id="3aad5-430">С помощью <xref:System.Threading.ThreadPool.UnsafeQueueUserWorkItem%2A> может случайно открываются брешь в системе безопасности.</span><span class="sxs-lookup"><span data-stu-id="3aad5-430">Using <xref:System.Threading.ThreadPool.UnsafeQueueUserWorkItem%2A> could inadvertently open up a security hole.</span></span> <span data-ttu-id="3aad5-431">Управление доступом для кода сформирует его проверки разрешений всех вызывающих объектов разрешений в стеке.</span><span class="sxs-lookup"><span data-stu-id="3aad5-431">Code access security bases its permission checks on the permissions of all the callers on the stack.</span></span> <span data-ttu-id="3aad5-432">Когда работу в очереди пула потоков поток при помощи <xref:System.Threading.ThreadPool.UnsafeQueueUserWorkItem%2A>, стек пула потоков не будет иметь контекста вызывающих.</span><span class="sxs-lookup"><span data-stu-id="3aad5-432">When work is queued on a thread pool thread using <xref:System.Threading.ThreadPool.UnsafeQueueUserWorkItem%2A>, the stack of the thread pool thread will not have the context of the actual callers.</span></span> <span data-ttu-id="3aad5-433">Вредоносный код, можно использовать этот параметр, чтобы избежать проверки разрешений.</span><span class="sxs-lookup"><span data-stu-id="3aad5-433">Malicious code might be able exploit this to avoid permission checks.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Security.SecurityException">
          <span data-ttu-id="3aad5-434">У вызывающего объекта отсутствует необходимое разрешение.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3aad5-434">The caller does not have the required permission.</span>
          </span>
        </exception>
        <exception cref="T:System.ApplicationException">
          <span data-ttu-id="3aad5-435">Возникла ситуация нехватки памяти.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3aad5-435">An out-of-memory condition was encountered.</span>
          </span>
        </exception>
        <exception cref="T:System.OutOfMemoryException">
          <span data-ttu-id="3aad5-436">Не удается поместить в очередь рабочий элемент.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3aad5-436">The work item could not be queued.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="3aad5-437">Свойство <paramref name="callBack" /> имеет значение <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3aad5-437">
              <paramref name="callBack" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <permission cref="T:System.Security.SecurityCriticalAttribute">
          <span data-ttu-id="3aad5-438">требуется полное доверие для непосредственно вызывающего метода.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3aad5-438">Requires full trust for the immediate caller.</span>
          </span>
          <span data-ttu-id="3aad5-439">Этот член не может использоваться частично доверенным или прозрачным кодом.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3aad5-439">This member cannot be used by partially trusted or transparent code.</span>
          </span>
        </permission>
      </Docs>
    </Member>
    <MemberGroup MemberName="UnsafeRegisterWaitForSingleObject">
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="3aad5-440">Регистрирует делегат для ожидания объекта <see cref="T:System.Threading.WaitHandle" />, но не распространяет вызывающий стек на рабочий поток.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3aad5-440">Registers a delegate to wait for a <see cref="T:System.Threading.WaitHandle" />, but does not propagate the calling stack to the worker thread.</span>
          </span>
        </summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="UnsafeRegisterWaitForSingleObject">
      <MemberSignature Language="C#" Value="public static System.Threading.RegisteredWaitHandle UnsafeRegisterWaitForSingleObject (System.Threading.WaitHandle waitObject, System.Threading.WaitOrTimerCallback callBack, object state, int millisecondsTimeOutInterval, bool executeOnlyOnce);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Threading.RegisteredWaitHandle UnsafeRegisterWaitForSingleObject(class System.Threading.WaitHandle waitObject, class System.Threading.WaitOrTimerCallback callBack, object state, int32 millisecondsTimeOutInterval, bool executeOnlyOnce) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.ThreadPool.UnsafeRegisterWaitForSingleObject(System.Threading.WaitHandle,System.Threading.WaitOrTimerCallback,System.Object,System.Int32,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function UnsafeRegisterWaitForSingleObject (waitObject As WaitHandle, callBack As WaitOrTimerCallback, state As Object, millisecondsTimeOutInterval As Integer, executeOnlyOnce As Boolean) As RegisteredWaitHandle" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Threading::RegisteredWaitHandle ^ UnsafeRegisterWaitForSingleObject(System::Threading::WaitHandle ^ waitObject, System::Threading::WaitOrTimerCallback ^ callBack, System::Object ^ state, int millisecondsTimeOutInterval, bool executeOnlyOnce);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Threading.ThreadPool</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Security.SecurityCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Threading.RegisteredWaitHandle</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="waitObject" Type="System.Threading.WaitHandle" />
        <Parameter Name="callBack" Type="System.Threading.WaitOrTimerCallback" />
        <Parameter Name="state" Type="System.Object" />
        <Parameter Name="millisecondsTimeOutInterval" Type="System.Int32" />
        <Parameter Name="executeOnlyOnce" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="waitObject">
          <span data-ttu-id="3aad5-441">Регистрируемый объект <see cref="T:System.Threading.WaitHandle" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3aad5-441">The <see cref="T:System.Threading.WaitHandle" /> to register.</span>
          </span>
          <span data-ttu-id="3aad5-442">Используйте объект <see cref="T:System.Threading.WaitHandle" />, отличный от <see cref="T:System.Threading.Mutex" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3aad5-442">Use a <see cref="T:System.Threading.WaitHandle" /> other than <see cref="T:System.Threading.Mutex" />.</span>
          </span>
        </param>
        <param name="callBack">
          <span data-ttu-id="3aad5-443">Делегат, который вызывается при получении сигнала объектом, указанным в параметре <c>waitObject</c>.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3aad5-443">The delegate to call when the <c>waitObject</c> parameter is signaled.</span>
          </span>
        </param>
        <param name="state">
          <span data-ttu-id="3aad5-444">Передаваемый делегату объект.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3aad5-444">The object that is passed to the delegate.</span>
          </span>
        </param>
        <param name="millisecondsTimeOutInterval">
          <span data-ttu-id="3aad5-445">Время ожидания в миллисекундах.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3aad5-445">The time-out in milliseconds.</span>
          </span>
          <span data-ttu-id="3aad5-446">Если параметр <c>millisecondsTimeOutInterval</c> равен 0 (нулю), функция проверяет состояние объекта и немедленно возвращает значение.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3aad5-446">If the <c>millisecondsTimeOutInterval</c> parameter is 0 (zero), the function tests the object's state and returns immediately.</span>
          </span>
          <span data-ttu-id="3aad5-447">Если параметр <c>millisecondsTimeOutInterval</c> равен –1, время ожидания функции никогда не истекает.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3aad5-447">If <c>millisecondsTimeOutInterval</c> is -1, the function's time-out interval never elapses.</span>
          </span>
        </param>
        <param name="executeOnlyOnce">
          <span data-ttu-id="3aad5-448">Значение <see langword="true" /> указывает, что после вызова делегата поток не будет ожидать параметр <c>waitObject</c>; значение<see langword="false" /> указывает, что таймер сбрасывается всякий раз по завершении операции ожидания до тех пор, пока регистрация ожидания не будет отменена.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3aad5-448">
              <see langword="true" /> to indicate that the thread will no longer wait on the <c>waitObject</c> parameter after the delegate has been called; <see langword="false" /> to indicate that the timer is reset every time the wait operation completes until the wait is unregistered.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="3aad5-449">Регистрирует делегат для ожидания объекта <see cref="T:System.Threading.WaitHandle" />, задавая время ожидания в миллисекундах в виде 32-разрядного целого числа со знаком.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3aad5-449">Registers a delegate to wait for a <see cref="T:System.Threading.WaitHandle" />, using a 32-bit signed integer for the time-out in milliseconds.</span>
          </span>
          <span data-ttu-id="3aad5-450">Этот метод не распространяет вызывающий стек на рабочий поток.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3aad5-450">This method does not propagate the calling stack to the worker thread.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="3aad5-451">Объект <see cref="T:System.Threading.RegisteredWaitHandle" />, который можно использовать для отмены зарегистрированной операции ожидания.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3aad5-451">The <see cref="T:System.Threading.RegisteredWaitHandle" /> object that can be used to cancel the registered wait operation.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="3aad5-452">В отличие от <xref:System.Threading.ThreadPool.RegisterWaitForSingleObject%2A> метод <xref:System.Threading.ThreadPool.UnsafeRegisterWaitForSingleObject%2A> не распространяет вызывающий стек на рабочий поток.</span><span class="sxs-lookup"><span data-stu-id="3aad5-452">Unlike the <xref:System.Threading.ThreadPool.RegisterWaitForSingleObject%2A> method, <xref:System.Threading.ThreadPool.UnsafeRegisterWaitForSingleObject%2A> does not propagate the calling stack to the worker thread.</span></span> <span data-ttu-id="3aad5-453">Это позволяет коду терять стек вызовов и тем самым повысить свои привилегии безопасности.</span><span class="sxs-lookup"><span data-stu-id="3aad5-453">This allows code to lose the calling stack and thereby to elevate its security privileges.</span></span>  
  
> [!CAUTION]
>  <span data-ttu-id="3aad5-454">С помощью <xref:System.Threading.ThreadPool.UnsafeRegisterWaitForSingleObject%2A> может случайно открываются брешь в системе безопасности.</span><span class="sxs-lookup"><span data-stu-id="3aad5-454">Using <xref:System.Threading.ThreadPool.UnsafeRegisterWaitForSingleObject%2A> could inadvertently open up a security hole.</span></span> <span data-ttu-id="3aad5-455">Управление доступом для кода сформирует его проверки разрешений всех вызывающих объектов разрешений в стеке.</span><span class="sxs-lookup"><span data-stu-id="3aad5-455">Code access security bases its permission checks on the permissions of all the callers on the stack.</span></span> <span data-ttu-id="3aad5-456">Когда работу в очереди пула потоков поток при помощи <xref:System.Threading.ThreadPool.UnsafeRegisterWaitForSingleObject%2A>, стек пула потоков не будет иметь контекста вызывающих.</span><span class="sxs-lookup"><span data-stu-id="3aad5-456">When work is queued on a thread pool thread using <xref:System.Threading.ThreadPool.UnsafeRegisterWaitForSingleObject%2A>, the stack of the thread pool thread will not have the context of the actual callers.</span></span> <span data-ttu-id="3aad5-457">Вредоносный код, можно использовать этот параметр, чтобы избежать проверки разрешений.</span><span class="sxs-lookup"><span data-stu-id="3aad5-457">Malicious code might be able exploit this to avoid permission checks.</span></span>  
  
 <span data-ttu-id="3aad5-458">С помощью <xref:System.Threading.Mutex> для `waitObject` не дает взаимное исключение для обратных вызовов, поскольку базовый интерфейс Win32 API использует значение по умолчанию `WT_EXECUTEDEFAULT` флаг, чтобы каждый обратный вызов назначается в отдельном потоке пула потоков.</span><span class="sxs-lookup"><span data-stu-id="3aad5-458">Using a <xref:System.Threading.Mutex> for `waitObject` does not provide mutual exclusion for the callbacks because the underlying Win32 API uses the default `WT_EXECUTEDEFAULT` flag, so each callback is dispatched on a separate thread pool thread.</span></span>  
  
 <span data-ttu-id="3aad5-459">По окончании с помощью <xref:System.Threading.RegisteredWaitHandle> , возвращаемый этим методом, вызовите его <xref:System.Threading.RegisteredWaitHandle.Unregister%2A?displayProperty=nameWithType> метод для освобождения ссылки на дескриптор ожидания.</span><span class="sxs-lookup"><span data-stu-id="3aad5-459">When you are finished using the <xref:System.Threading.RegisteredWaitHandle> that is returned by this method, call its <xref:System.Threading.RegisteredWaitHandle.Unregister%2A?displayProperty=nameWithType> method to release references to the wait handle.</span></span> <span data-ttu-id="3aad5-460">Рекомендуется всегда вызывать <xref:System.Threading.RegisteredWaitHandle.Unregister%2A?displayProperty=nameWithType> метод, даже если указать `true` для `executeOnlyOnce`.</span><span class="sxs-lookup"><span data-stu-id="3aad5-460">We recommend that you always call the <xref:System.Threading.RegisteredWaitHandle.Unregister%2A?displayProperty=nameWithType> method, even if you specify `true` for `executeOnlyOnce`.</span></span> <span data-ttu-id="3aad5-461">Сборщик мусора работает более эффективно при вызове метода <xref:System.Threading.RegisteredWaitHandle.Unregister%2A?displayProperty=nameWithType> вместо метода в зависимости от зарегистрированного ожидающего дескриптора метода завершения.</span><span class="sxs-lookup"><span data-stu-id="3aad5-461">Garbage collection works more efficiently if you call the <xref:System.Threading.RegisteredWaitHandle.Unregister%2A?displayProperty=nameWithType> method instead of depending on the registered wait handle's finalizer.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <span data-ttu-id="3aad5-462">Значение параметра <paramref name="millisecondsTimeOutInterval" /> меньше –1.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3aad5-462">The <paramref name="millisecondsTimeOutInterval" /> parameter is less than -1.</span>
          </span>
        </exception>
        <exception cref="T:System.Security.SecurityException">
          <span data-ttu-id="3aad5-463">У вызывающего объекта отсутствует необходимое разрешение.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3aad5-463">The caller does not have the required permission.</span>
          </span>
        </exception>
        <permission cref="T:System.Security.SecurityCriticalAttribute">
          <span data-ttu-id="3aad5-464">требуется полное доверие для непосредственно вызывающего метода.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3aad5-464">Requires full trust for the immediate caller.</span>
          </span>
          <span data-ttu-id="3aad5-465">Этот член не может использоваться частично доверенным или прозрачным кодом.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3aad5-465">This member cannot be used by partially trusted or transparent code.</span>
          </span>
        </permission>
      </Docs>
    </Member>
    <Member MemberName="UnsafeRegisterWaitForSingleObject">
      <MemberSignature Language="C#" Value="public static System.Threading.RegisteredWaitHandle UnsafeRegisterWaitForSingleObject (System.Threading.WaitHandle waitObject, System.Threading.WaitOrTimerCallback callBack, object state, long millisecondsTimeOutInterval, bool executeOnlyOnce);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Threading.RegisteredWaitHandle UnsafeRegisterWaitForSingleObject(class System.Threading.WaitHandle waitObject, class System.Threading.WaitOrTimerCallback callBack, object state, int64 millisecondsTimeOutInterval, bool executeOnlyOnce) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.ThreadPool.UnsafeRegisterWaitForSingleObject(System.Threading.WaitHandle,System.Threading.WaitOrTimerCallback,System.Object,System.Int64,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function UnsafeRegisterWaitForSingleObject (waitObject As WaitHandle, callBack As WaitOrTimerCallback, state As Object, millisecondsTimeOutInterval As Long, executeOnlyOnce As Boolean) As RegisteredWaitHandle" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Threading::RegisteredWaitHandle ^ UnsafeRegisterWaitForSingleObject(System::Threading::WaitHandle ^ waitObject, System::Threading::WaitOrTimerCallback ^ callBack, System::Object ^ state, long millisecondsTimeOutInterval, bool executeOnlyOnce);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Threading.ThreadPool</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Security.SecurityCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Threading.RegisteredWaitHandle</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="waitObject" Type="System.Threading.WaitHandle" />
        <Parameter Name="callBack" Type="System.Threading.WaitOrTimerCallback" />
        <Parameter Name="state" Type="System.Object" />
        <Parameter Name="millisecondsTimeOutInterval" Type="System.Int64" />
        <Parameter Name="executeOnlyOnce" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="waitObject">
          <span data-ttu-id="3aad5-466">Регистрируемый объект <see cref="T:System.Threading.WaitHandle" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3aad5-466">The <see cref="T:System.Threading.WaitHandle" /> to register.</span>
          </span>
          <span data-ttu-id="3aad5-467">Используйте объект <see cref="T:System.Threading.WaitHandle" />, отличный от <see cref="T:System.Threading.Mutex" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3aad5-467">Use a <see cref="T:System.Threading.WaitHandle" /> other than <see cref="T:System.Threading.Mutex" />.</span>
          </span>
        </param>
        <param name="callBack">
          <span data-ttu-id="3aad5-468">Делегат, который вызывается при получении сигнала объектом, указанным в параметре <c>waitObject</c>.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3aad5-468">The delegate to call when the <c>waitObject</c> parameter is signaled.</span>
          </span>
        </param>
        <param name="state">
          <span data-ttu-id="3aad5-469">Передаваемый делегату объект.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3aad5-469">The object that is passed to the delegate.</span>
          </span>
        </param>
        <param name="millisecondsTimeOutInterval">
          <span data-ttu-id="3aad5-470">Время ожидания в миллисекундах.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3aad5-470">The time-out in milliseconds.</span>
          </span>
          <span data-ttu-id="3aad5-471">Если параметр <c>millisecondsTimeOutInterval</c> равен 0 (нулю), функция проверяет состояние объекта и немедленно возвращает значение.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3aad5-471">If the <c>millisecondsTimeOutInterval</c> parameter is 0 (zero), the function tests the object's state and returns immediately.</span>
          </span>
          <span data-ttu-id="3aad5-472">Если параметр <c>millisecondsTimeOutInterval</c> равен –1, время ожидания функции никогда не истекает.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3aad5-472">If <c>millisecondsTimeOutInterval</c> is -1, the function's time-out interval never elapses.</span>
          </span>
        </param>
        <param name="executeOnlyOnce">
          <span data-ttu-id="3aad5-473">Значение <see langword="true" /> указывает, что после вызова делегата поток не будет ожидать параметр <c>waitObject</c>; значение<see langword="false" /> указывает, что таймер сбрасывается всякий раз по завершении операции ожидания до тех пор, пока регистрация ожидания не будет отменена.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3aad5-473">
              <see langword="true" /> to indicate that the thread will no longer wait on the <c>waitObject</c> parameter after the delegate has been called; <see langword="false" /> to indicate that the timer is reset every time the wait operation completes until the wait is unregistered.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="3aad5-474">Регистрирует делегат для ожидания объекта <see cref="T:System.Threading.WaitHandle" />, задавая время ожидания в миллисекундах в виде 64-разрядного целого числа со знаком.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3aad5-474">Registers a delegate to wait for a <see cref="T:System.Threading.WaitHandle" />, specifying a 64-bit signed integer for the time-out in milliseconds.</span>
          </span>
          <span data-ttu-id="3aad5-475">Этот метод не распространяет вызывающий стек на рабочий поток.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3aad5-475">This method does not propagate the calling stack to the worker thread.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="3aad5-476">Объект <see cref="T:System.Threading.RegisteredWaitHandle" />, который можно использовать для отмены зарегистрированной операции ожидания.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3aad5-476">The <see cref="T:System.Threading.RegisteredWaitHandle" /> object that can be used to cancel the registered wait operation.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="3aad5-477">В отличие от <xref:System.Threading.ThreadPool.RegisterWaitForSingleObject%2A> метод <xref:System.Threading.ThreadPool.UnsafeRegisterWaitForSingleObject%2A> не распространяет вызывающий стек на рабочий поток.</span><span class="sxs-lookup"><span data-stu-id="3aad5-477">Unlike the <xref:System.Threading.ThreadPool.RegisterWaitForSingleObject%2A> method, <xref:System.Threading.ThreadPool.UnsafeRegisterWaitForSingleObject%2A> does not propagate the calling stack to the worker thread.</span></span> <span data-ttu-id="3aad5-478">Это позволяет коду терять стек вызовов и тем самым повысить свои привилегии безопасности.</span><span class="sxs-lookup"><span data-stu-id="3aad5-478">This allows code to lose the calling stack and thereby to elevate its security privileges.</span></span>  
  
> [!CAUTION]
>  <span data-ttu-id="3aad5-479">С помощью <xref:System.Threading.ThreadPool.UnsafeRegisterWaitForSingleObject%2A> может случайно открываются брешь в системе безопасности.</span><span class="sxs-lookup"><span data-stu-id="3aad5-479">Using <xref:System.Threading.ThreadPool.UnsafeRegisterWaitForSingleObject%2A> could inadvertently open up a security hole.</span></span> <span data-ttu-id="3aad5-480">Управление доступом для кода сформирует его проверки разрешений всех вызывающих объектов разрешений в стеке.</span><span class="sxs-lookup"><span data-stu-id="3aad5-480">Code access security bases its permission checks on the permissions of all the callers on the stack.</span></span> <span data-ttu-id="3aad5-481">Когда работу в очереди пула потоков поток при помощи <xref:System.Threading.ThreadPool.UnsafeRegisterWaitForSingleObject%2A>, стек пула потоков не будет иметь контекста вызывающих.</span><span class="sxs-lookup"><span data-stu-id="3aad5-481">When work is queued on a thread pool thread using <xref:System.Threading.ThreadPool.UnsafeRegisterWaitForSingleObject%2A>, the stack of the thread pool thread will not have the context of the actual callers.</span></span> <span data-ttu-id="3aad5-482">Вредоносный код, можно использовать этот параметр, чтобы избежать проверки разрешений.</span><span class="sxs-lookup"><span data-stu-id="3aad5-482">Malicious code might be able exploit this to avoid permission checks.</span></span>  
  
 <span data-ttu-id="3aad5-483">С помощью <xref:System.Threading.Mutex> для `waitObject` не дает взаимное исключение для обратных вызовов, поскольку базовый интерфейс Win32 API использует значение по умолчанию `WT_EXECUTEDEFAULT` флаг, чтобы каждый обратный вызов назначается в отдельном потоке пула потоков.</span><span class="sxs-lookup"><span data-stu-id="3aad5-483">Using a <xref:System.Threading.Mutex> for `waitObject` does not provide mutual exclusion for the callbacks because the underlying Win32 API uses the default `WT_EXECUTEDEFAULT` flag, so each callback is dispatched on a separate thread pool thread.</span></span>  
  
 <span data-ttu-id="3aad5-484">По окончании с помощью <xref:System.Threading.RegisteredWaitHandle> , возвращаемый этим методом, вызовите его <xref:System.Threading.RegisteredWaitHandle.Unregister%2A?displayProperty=nameWithType> метод для освобождения ссылки на дескриптор ожидания.</span><span class="sxs-lookup"><span data-stu-id="3aad5-484">When you are finished using the <xref:System.Threading.RegisteredWaitHandle> that is returned by this method, call its <xref:System.Threading.RegisteredWaitHandle.Unregister%2A?displayProperty=nameWithType> method to release references to the wait handle.</span></span> <span data-ttu-id="3aad5-485">Рекомендуется всегда вызывать <xref:System.Threading.RegisteredWaitHandle.Unregister%2A?displayProperty=nameWithType> метод, даже если указать `true` для `executeOnlyOnce`.</span><span class="sxs-lookup"><span data-stu-id="3aad5-485">We recommend that you always call the <xref:System.Threading.RegisteredWaitHandle.Unregister%2A?displayProperty=nameWithType> method, even if you specify `true` for `executeOnlyOnce`.</span></span> <span data-ttu-id="3aad5-486">Сборщик мусора работает более эффективно при вызове метода <xref:System.Threading.RegisteredWaitHandle.Unregister%2A?displayProperty=nameWithType> вместо метода в зависимости от зарегистрированного ожидающего дескриптора метода завершения.</span><span class="sxs-lookup"><span data-stu-id="3aad5-486">Garbage collection works more efficiently if you call the <xref:System.Threading.RegisteredWaitHandle.Unregister%2A?displayProperty=nameWithType> method instead of depending on the registered wait handle's finalizer.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <span data-ttu-id="3aad5-487">Значение параметра <paramref name="millisecondsTimeOutInterval" /> меньше –1.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3aad5-487">The <paramref name="millisecondsTimeOutInterval" /> parameter is less than -1.</span>
          </span>
        </exception>
        <exception cref="T:System.Security.SecurityException">
          <span data-ttu-id="3aad5-488">У вызывающего объекта отсутствует необходимое разрешение.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3aad5-488">The caller does not have the required permission.</span>
          </span>
        </exception>
        <permission cref="T:System.Security.SecurityCriticalAttribute">
          <span data-ttu-id="3aad5-489">требуется полное доверие для непосредственно вызывающего метода.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3aad5-489">Requires full trust for the immediate caller.</span>
          </span>
          <span data-ttu-id="3aad5-490">Этот член не может использоваться частично доверенным или прозрачным кодом.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3aad5-490">This member cannot be used by partially trusted or transparent code.</span>
          </span>
        </permission>
      </Docs>
    </Member>
    <Member MemberName="UnsafeRegisterWaitForSingleObject">
      <MemberSignature Language="C#" Value="public static System.Threading.RegisteredWaitHandle UnsafeRegisterWaitForSingleObject (System.Threading.WaitHandle waitObject, System.Threading.WaitOrTimerCallback callBack, object state, TimeSpan timeout, bool executeOnlyOnce);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Threading.RegisteredWaitHandle UnsafeRegisterWaitForSingleObject(class System.Threading.WaitHandle waitObject, class System.Threading.WaitOrTimerCallback callBack, object state, valuetype System.TimeSpan timeout, bool executeOnlyOnce) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.ThreadPool.UnsafeRegisterWaitForSingleObject(System.Threading.WaitHandle,System.Threading.WaitOrTimerCallback,System.Object,System.TimeSpan,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function UnsafeRegisterWaitForSingleObject (waitObject As WaitHandle, callBack As WaitOrTimerCallback, state As Object, timeout As TimeSpan, executeOnlyOnce As Boolean) As RegisteredWaitHandle" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Threading::RegisteredWaitHandle ^ UnsafeRegisterWaitForSingleObject(System::Threading::WaitHandle ^ waitObject, System::Threading::WaitOrTimerCallback ^ callBack, System::Object ^ state, TimeSpan timeout, bool executeOnlyOnce);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Threading.ThreadPool</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Security.SecurityCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Threading.RegisteredWaitHandle</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="waitObject" Type="System.Threading.WaitHandle" />
        <Parameter Name="callBack" Type="System.Threading.WaitOrTimerCallback" />
        <Parameter Name="state" Type="System.Object" />
        <Parameter Name="timeout" Type="System.TimeSpan" />
        <Parameter Name="executeOnlyOnce" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="waitObject">
          <span data-ttu-id="3aad5-491">Регистрируемый объект <see cref="T:System.Threading.WaitHandle" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3aad5-491">The <see cref="T:System.Threading.WaitHandle" /> to register.</span>
          </span>
          <span data-ttu-id="3aad5-492">Используйте объект <see cref="T:System.Threading.WaitHandle" />, отличный от <see cref="T:System.Threading.Mutex" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3aad5-492">Use a <see cref="T:System.Threading.WaitHandle" /> other than <see cref="T:System.Threading.Mutex" />.</span>
          </span>
        </param>
        <param name="callBack">
          <span data-ttu-id="3aad5-493">Делегат, который вызывается при получении сигнала объектом, указанным в параметре <c>waitObject</c>.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3aad5-493">The delegate to call when the <c>waitObject</c> parameter is signaled.</span>
          </span>
        </param>
        <param name="state">
          <span data-ttu-id="3aad5-494">Передаваемый делегату объект.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3aad5-494">The object that is passed to the delegate.</span>
          </span>
        </param>
        <param name="timeout">
          <span data-ttu-id="3aad5-495">Время ожидания, представленное объектом <see cref="T:System.TimeSpan" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3aad5-495">The time-out represented by a <see cref="T:System.TimeSpan" />.</span>
          </span>
          <span data-ttu-id="3aad5-496">Если параметр <c>timeout</c> равен 0 (нулю), функция проверяет состояние объекта и немедленно возвращает значение.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3aad5-496">If <c>timeout</c> is 0 (zero), the function tests the object's state and returns immediately.</span>
          </span>
          <span data-ttu-id="3aad5-497">Если параметр <c>timeout</c> равен –1, время ожидания функции никогда не истекает.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3aad5-497">If <c>timeout</c> is -1, the function's time-out interval never elapses.</span>
          </span>
        </param>
        <param name="executeOnlyOnce">
          <span data-ttu-id="3aad5-498">Значение <see langword="true" /> указывает, что после вызова делегата поток не будет ожидать параметр <c>waitObject</c>; значение<see langword="false" /> указывает, что таймер сбрасывается всякий раз по завершении операции ожидания до тех пор, пока регистрация ожидания не будет отменена.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3aad5-498">
              <see langword="true" /> to indicate that the thread will no longer wait on the <c>waitObject</c> parameter after the delegate has been called; <see langword="false" /> to indicate that the timer is reset every time the wait operation completes until the wait is unregistered.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="3aad5-499">Регистрирует делегат для ожидания объекта <see cref="T:System.Threading.WaitHandle" />, задавая значение <see cref="T:System.TimeSpan" /> для времени ожидания. Этот метод не распространяет вызывающий стек на рабочий поток.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3aad5-499">Registers a delegate to wait for a <see cref="T:System.Threading.WaitHandle" />, specifying a <see cref="T:System.TimeSpan" /> value for the time-out. This method does not propagate the calling stack to the worker thread.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="3aad5-500">Объект <see cref="T:System.Threading.RegisteredWaitHandle" />, который можно использовать для отмены зарегистрированной операции ожидания.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3aad5-500">The <see cref="T:System.Threading.RegisteredWaitHandle" /> object that can be used to cancel the registered wait operation.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="3aad5-501">В отличие от <xref:System.Threading.ThreadPool.RegisterWaitForSingleObject%2A> метод <xref:System.Threading.ThreadPool.UnsafeRegisterWaitForSingleObject%2A> не распространяет вызывающий стек на рабочий поток.</span><span class="sxs-lookup"><span data-stu-id="3aad5-501">Unlike the <xref:System.Threading.ThreadPool.RegisterWaitForSingleObject%2A> method, <xref:System.Threading.ThreadPool.UnsafeRegisterWaitForSingleObject%2A> does not propagate the calling stack to the worker thread.</span></span> <span data-ttu-id="3aad5-502">Это позволяет коду терять стек вызовов и тем самым повысить свои привилегии безопасности.</span><span class="sxs-lookup"><span data-stu-id="3aad5-502">This allows code to lose the calling stack and thereby to elevate its security privileges.</span></span>  
  
> [!CAUTION]
>  <span data-ttu-id="3aad5-503">С помощью <xref:System.Threading.ThreadPool.UnsafeRegisterWaitForSingleObject%2A> может случайно открываются брешь в системе безопасности.</span><span class="sxs-lookup"><span data-stu-id="3aad5-503">Using <xref:System.Threading.ThreadPool.UnsafeRegisterWaitForSingleObject%2A> could inadvertently open up a security hole.</span></span> <span data-ttu-id="3aad5-504">Управление доступом для кода сформирует его проверки разрешений всех вызывающих объектов разрешений в стеке.</span><span class="sxs-lookup"><span data-stu-id="3aad5-504">Code access security bases its permission checks on the permissions of all the callers on the stack.</span></span> <span data-ttu-id="3aad5-505">Когда работу в очереди пула потоков поток при помощи <xref:System.Threading.ThreadPool.UnsafeRegisterWaitForSingleObject%2A>, стек пула потоков не будет иметь контекста вызывающих.</span><span class="sxs-lookup"><span data-stu-id="3aad5-505">When work is queued on a thread pool thread using <xref:System.Threading.ThreadPool.UnsafeRegisterWaitForSingleObject%2A>, the stack of the thread pool thread will not have the context of the actual callers.</span></span> <span data-ttu-id="3aad5-506">Вредоносный код, можно использовать этот параметр, чтобы избежать проверки разрешений.</span><span class="sxs-lookup"><span data-stu-id="3aad5-506">Malicious code might be able exploit this to avoid permission checks.</span></span>  
  
 <span data-ttu-id="3aad5-507">С помощью <xref:System.Threading.Mutex> для `waitObject` не дает взаимное исключение для обратных вызовов, поскольку базовый интерфейс Win32 API использует значение по умолчанию `WT_EXECUTEDEFAULT` флаг, чтобы каждый обратный вызов назначается в отдельном потоке пула потоков.</span><span class="sxs-lookup"><span data-stu-id="3aad5-507">Using a <xref:System.Threading.Mutex> for `waitObject` does not provide mutual exclusion for the callbacks because the underlying Win32 API uses the default `WT_EXECUTEDEFAULT` flag, so each callback is dispatched on a separate thread pool thread.</span></span>  
  
 <span data-ttu-id="3aad5-508">По окончании с помощью <xref:System.Threading.RegisteredWaitHandle> , возвращаемый этим методом, вызовите его <xref:System.Threading.RegisteredWaitHandle.Unregister%2A?displayProperty=nameWithType> метод для освобождения ссылки на дескриптор ожидания.</span><span class="sxs-lookup"><span data-stu-id="3aad5-508">When you are finished using the <xref:System.Threading.RegisteredWaitHandle> that is returned by this method, call its <xref:System.Threading.RegisteredWaitHandle.Unregister%2A?displayProperty=nameWithType> method to release references to the wait handle.</span></span> <span data-ttu-id="3aad5-509">Рекомендуется всегда вызывать <xref:System.Threading.RegisteredWaitHandle.Unregister%2A?displayProperty=nameWithType> метод, даже если указать `true` для `executeOnlyOnce`.</span><span class="sxs-lookup"><span data-stu-id="3aad5-509">We recommend that you always call the <xref:System.Threading.RegisteredWaitHandle.Unregister%2A?displayProperty=nameWithType> method, even if you specify `true` for `executeOnlyOnce`.</span></span> <span data-ttu-id="3aad5-510">Сборщик мусора работает более эффективно при вызове метода <xref:System.Threading.RegisteredWaitHandle.Unregister%2A?displayProperty=nameWithType> вместо метода в зависимости от зарегистрированного ожидающего дескриптора метода завершения.</span><span class="sxs-lookup"><span data-stu-id="3aad5-510">Garbage collection works more efficiently if you call the <xref:System.Threading.RegisteredWaitHandle.Unregister%2A?displayProperty=nameWithType> method instead of depending on the registered wait handle's finalizer.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <span data-ttu-id="3aad5-511">Значение параметра <paramref name="timeout" /> меньше –1.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3aad5-511">The <paramref name="timeout" /> parameter is less than -1.</span>
          </span>
        </exception>
        <exception cref="T:System.NotSupportedException">
          <span data-ttu-id="3aad5-512">Значение параметра <paramref name="timeout" /> больше значения <see cref="F:System.Int32.MaxValue" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3aad5-512">The <paramref name="timeout" /> parameter is greater than <see cref="F:System.Int32.MaxValue" />.</span>
          </span>
        </exception>
        <exception cref="T:System.Security.SecurityException">
          <span data-ttu-id="3aad5-513">У вызывающего объекта отсутствует необходимое разрешение.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3aad5-513">The caller does not have the required permission.</span>
          </span>
        </exception>
        <permission cref="T:System.Security.SecurityCriticalAttribute">
          <span data-ttu-id="3aad5-514">требуется полное доверие для непосредственно вызывающего метода.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3aad5-514">Requires full trust for the immediate caller.</span>
          </span>
          <span data-ttu-id="3aad5-515">Этот член не может использоваться частично доверенным или прозрачным кодом.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3aad5-515">This member cannot be used by partially trusted or transparent code.</span>
          </span>
        </permission>
      </Docs>
    </Member>
    <Member MemberName="UnsafeRegisterWaitForSingleObject">
      <MemberSignature Language="C#" Value="public static System.Threading.RegisteredWaitHandle UnsafeRegisterWaitForSingleObject (System.Threading.WaitHandle waitObject, System.Threading.WaitOrTimerCallback callBack, object state, uint millisecondsTimeOutInterval, bool executeOnlyOnce);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Threading.RegisteredWaitHandle UnsafeRegisterWaitForSingleObject(class System.Threading.WaitHandle waitObject, class System.Threading.WaitOrTimerCallback callBack, object state, unsigned int32 millisecondsTimeOutInterval, bool executeOnlyOnce) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.ThreadPool.UnsafeRegisterWaitForSingleObject(System.Threading.WaitHandle,System.Threading.WaitOrTimerCallback,System.Object,System.UInt32,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function UnsafeRegisterWaitForSingleObject (waitObject As WaitHandle, callBack As WaitOrTimerCallback, state As Object, millisecondsTimeOutInterval As UInteger, executeOnlyOnce As Boolean) As RegisteredWaitHandle" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Threading::RegisteredWaitHandle ^ UnsafeRegisterWaitForSingleObject(System::Threading::WaitHandle ^ waitObject, System::Threading::WaitOrTimerCallback ^ callBack, System::Object ^ state, System::UInt32 millisecondsTimeOutInterval, bool executeOnlyOnce);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Threading.ThreadPool</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Security.SecurityCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Threading.RegisteredWaitHandle</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="waitObject" Type="System.Threading.WaitHandle" />
        <Parameter Name="callBack" Type="System.Threading.WaitOrTimerCallback" />
        <Parameter Name="state" Type="System.Object" />
        <Parameter Name="millisecondsTimeOutInterval" Type="System.UInt32" />
        <Parameter Name="executeOnlyOnce" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="waitObject">
          <span data-ttu-id="3aad5-516">Регистрируемый объект <see cref="T:System.Threading.WaitHandle" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3aad5-516">The <see cref="T:System.Threading.WaitHandle" /> to register.</span>
          </span>
          <span data-ttu-id="3aad5-517">Используйте объект <see cref="T:System.Threading.WaitHandle" />, отличный от <see cref="T:System.Threading.Mutex" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3aad5-517">Use a <see cref="T:System.Threading.WaitHandle" /> other than <see cref="T:System.Threading.Mutex" />.</span>
          </span>
        </param>
        <param name="callBack">
          <span data-ttu-id="3aad5-518">Делегат, который вызывается при получении сигнала объектом, указанным в параметре <c>waitObject</c>.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3aad5-518">The delegate to call when the <c>waitObject</c> parameter is signaled.</span>
          </span>
        </param>
        <param name="state">
          <span data-ttu-id="3aad5-519">Передаваемый делегату объект.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3aad5-519">The object that is passed to the delegate.</span>
          </span>
        </param>
        <param name="millisecondsTimeOutInterval">
          <span data-ttu-id="3aad5-520">Время ожидания в миллисекундах.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3aad5-520">The time-out in milliseconds.</span>
          </span>
          <span data-ttu-id="3aad5-521">Если параметр <c>millisecondsTimeOutInterval</c> равен 0 (нулю), функция проверяет состояние объекта и немедленно возвращает значение.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3aad5-521">If the <c>millisecondsTimeOutInterval</c> parameter is 0 (zero), the function tests the object's state and returns immediately.</span>
          </span>
          <span data-ttu-id="3aad5-522">Если параметр <c>millisecondsTimeOutInterval</c> равен –1, время ожидания функции никогда не истекает.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3aad5-522">If <c>millisecondsTimeOutInterval</c> is -1, the function's time-out interval never elapses.</span>
          </span>
        </param>
        <param name="executeOnlyOnce">
          <span data-ttu-id="3aad5-523">Значение <see langword="true" /> указывает, что после вызова делегата поток не будет ожидать параметр <c>waitObject</c>; значение<see langword="false" /> указывает, что таймер сбрасывается всякий раз по завершении операции ожидания до тех пор, пока регистрация ожидания не будет отменена.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3aad5-523">
              <see langword="true" /> to indicate that the thread will no longer wait on the <c>waitObject</c> parameter after the delegate has been called; <see langword="false" /> to indicate that the timer is reset every time the wait operation completes until the wait is unregistered.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="3aad5-524">Регистрирует делегат для ожидания объекта <see cref="T:System.Threading.WaitHandle" />, задавая время ожидания в миллисекундах в виде 32-разрядного целого числа без знака.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3aad5-524">Registers a delegate to wait for a <see cref="T:System.Threading.WaitHandle" />, specifying a 32-bit unsigned integer for the time-out in milliseconds.</span>
          </span>
          <span data-ttu-id="3aad5-525">Этот метод не распространяет вызывающий стек на рабочий поток.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3aad5-525">This method does not propagate the calling stack to the worker thread.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="3aad5-526">Объект <see cref="T:System.Threading.RegisteredWaitHandle" />, который можно использовать для отмены зарегистрированной операции ожидания.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3aad5-526">The <see cref="T:System.Threading.RegisteredWaitHandle" /> object that can be used to cancel the registered wait operation.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="3aad5-527">В отличие от <xref:System.Threading.ThreadPool.RegisterWaitForSingleObject%2A> метод <xref:System.Threading.ThreadPool.UnsafeRegisterWaitForSingleObject%2A> не распространяет вызывающий стек на рабочий поток.</span><span class="sxs-lookup"><span data-stu-id="3aad5-527">Unlike the <xref:System.Threading.ThreadPool.RegisterWaitForSingleObject%2A> method, <xref:System.Threading.ThreadPool.UnsafeRegisterWaitForSingleObject%2A> does not propagate the calling stack to the worker thread.</span></span> <span data-ttu-id="3aad5-528">Это позволяет коду терять стек вызовов и тем самым повысить свои привилегии безопасности.</span><span class="sxs-lookup"><span data-stu-id="3aad5-528">This allows code to lose the calling stack and thereby to elevate its security privileges.</span></span>  
  
> [!CAUTION]
>  <span data-ttu-id="3aad5-529">С помощью <xref:System.Threading.ThreadPool.UnsafeRegisterWaitForSingleObject%2A> может случайно открываются брешь в системе безопасности.</span><span class="sxs-lookup"><span data-stu-id="3aad5-529">Using <xref:System.Threading.ThreadPool.UnsafeRegisterWaitForSingleObject%2A> could inadvertently open up a security hole.</span></span> <span data-ttu-id="3aad5-530">Управление доступом для кода сформирует его проверки разрешений всех вызывающих объектов разрешений в стеке.</span><span class="sxs-lookup"><span data-stu-id="3aad5-530">Code access security bases its permission checks on the permissions of all the callers on the stack.</span></span> <span data-ttu-id="3aad5-531">Когда работу в очереди пула потоков поток при помощи <xref:System.Threading.ThreadPool.UnsafeRegisterWaitForSingleObject%2A>, стек пула потоков не будет иметь контекста вызывающих.</span><span class="sxs-lookup"><span data-stu-id="3aad5-531">When work is queued on a thread pool thread using <xref:System.Threading.ThreadPool.UnsafeRegisterWaitForSingleObject%2A>, the stack of the thread pool thread will not have the context of the actual callers.</span></span> <span data-ttu-id="3aad5-532">Вредоносный код, можно использовать этот параметр, чтобы избежать проверки разрешений.</span><span class="sxs-lookup"><span data-stu-id="3aad5-532">Malicious code might be able exploit this to avoid permission checks.</span></span>  
  
 <span data-ttu-id="3aad5-533">С помощью <xref:System.Threading.Mutex> для `waitObject` не дает взаимное исключение для обратных вызовов, поскольку базовый интерфейс Win32 API использует значение по умолчанию `WT_EXECUTEDEFAULT` флаг, чтобы каждый обратный вызов назначается в отдельном потоке пула потоков.</span><span class="sxs-lookup"><span data-stu-id="3aad5-533">Using a <xref:System.Threading.Mutex> for `waitObject` does not provide mutual exclusion for the callbacks because the underlying Win32 API uses the default `WT_EXECUTEDEFAULT` flag, so each callback is dispatched on a separate thread pool thread.</span></span>  
  
 <span data-ttu-id="3aad5-534">По окончании с помощью <xref:System.Threading.RegisteredWaitHandle> , возвращаемый этим методом, вызовите его <xref:System.Threading.RegisteredWaitHandle.Unregister%2A?displayProperty=nameWithType> метод для освобождения ссылки на дескриптор ожидания.</span><span class="sxs-lookup"><span data-stu-id="3aad5-534">When you are finished using the <xref:System.Threading.RegisteredWaitHandle> that is returned by this method, call its <xref:System.Threading.RegisteredWaitHandle.Unregister%2A?displayProperty=nameWithType> method to release references to the wait handle.</span></span> <span data-ttu-id="3aad5-535">Рекомендуется всегда вызывать <xref:System.Threading.RegisteredWaitHandle.Unregister%2A?displayProperty=nameWithType> метод, даже если указать `true` для `executeOnlyOnce`.</span><span class="sxs-lookup"><span data-stu-id="3aad5-535">We recommend that you always call the <xref:System.Threading.RegisteredWaitHandle.Unregister%2A?displayProperty=nameWithType> method, even if you specify `true` for `executeOnlyOnce`.</span></span> <span data-ttu-id="3aad5-536">Сборщик мусора работает более эффективно при вызове метода <xref:System.Threading.RegisteredWaitHandle.Unregister%2A?displayProperty=nameWithType> вместо метода в зависимости от зарегистрированного ожидающего дескриптора метода завершения.</span><span class="sxs-lookup"><span data-stu-id="3aad5-536">Garbage collection works more efficiently if you call the <xref:System.Threading.RegisteredWaitHandle.Unregister%2A?displayProperty=nameWithType> method instead of depending on the registered wait handle's finalizer.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Security.SecurityException">
          <span data-ttu-id="3aad5-537">У вызывающего объекта отсутствует необходимое разрешение.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3aad5-537">The caller does not have the required permission.</span>
          </span>
        </exception>
        <permission cref="T:System.Security.SecurityCriticalAttribute">
          <span data-ttu-id="3aad5-538">требуется полное доверие для непосредственно вызывающего метода.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3aad5-538">Requires full trust for the immediate caller.</span>
          </span>
          <span data-ttu-id="3aad5-539">Этот член не может использоваться частично доверенным или прозрачным кодом.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3aad5-539">This member cannot be used by partially trusted or transparent code.</span>
          </span>
        </permission>
      </Docs>
    </Member>
  </Members>
</Type>