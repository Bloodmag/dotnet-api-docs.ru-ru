<Type Name="Timer" FullName="System.Threading.Timer">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="d0f264481ebfa384ad9cf9faa53a1002409139c6" />
    <Meta Name="ms.sourcegitcommit" Value="5a49536d99d2d0b54e4cb7280870903e043272df" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="ru-RU" />
    <Meta Name="ms.lasthandoff" Value="07/03/2018" />
    <Meta Name="ms.locfileid" Value="37609018" />
  </Metadata>
  <TypeSignature Language="C#" Value="public sealed class Timer : MarshalByRefObject, IDisposable" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed beforefieldinit Timer extends System.MarshalByRefObject implements class System.IDisposable" />
  <TypeSignature Language="DocId" Value="T:System.Threading.Timer" />
  <TypeSignature Language="VB.NET" Value="Public NotInheritable Class Timer&#xA;Inherits MarshalByRefObject&#xA;Implements IDisposable" />
  <TypeSignature Language="C++ CLI" Value="public ref class Timer sealed : MarshalByRefObject, IDisposable" />
  <TypeSignature Language="F#" Value="type Timer = class&#xA;    inherit MarshalByRefObject&#xA;    interface IDisposable" />
  <AssemblyInfo>
    <AssemblyName>System.Threading.Timer</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.1.0.0</AssemblyVersion>
    <AssemblyVersion>4.1.1.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>mscorlib</AssemblyName>
    <AssemblyVersion>1.0.5000.0</AssemblyVersion>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
    <BaseTypeName FrameworkAlternate="netframework-4.5">System.MarshalByRefObject</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>System.IDisposable</InterfaceName>
    </Interface>
  </Interfaces>
  <Attributes>
    <Attribute>
      <AttributeName>System.Runtime.InteropServices.ComVisible(true)</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>
      <span data-ttu-id="2f521-101">Предоставляет механизм для выполнения метода в потоке пула с заданными интервалами.</span>
      <span class="sxs-lookup">
        <span data-stu-id="2f521-101">Provides a mechanism for executing a method on a thread pool thread at specified intervals.</span>
      </span>
      <span data-ttu-id="2f521-102">Этот класс не наследуется.</span>
      <span class="sxs-lookup">
        <span data-stu-id="2f521-102">This class cannot be inherited.</span>
      </span>
    </summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="2f521-103">Используйте <xref:System.Threading.TimerCallback> делегат для указания метода, который необходимо <xref:System.Threading.Timer> для выполнения.</span><span class="sxs-lookup"><span data-stu-id="2f521-103">Use a <xref:System.Threading.TimerCallback> delegate to specify the method you want the <xref:System.Threading.Timer> to execute.</span></span> <span data-ttu-id="2f521-104">Подпись <xref:System.Threading.TimerCallback> делегат:</span><span class="sxs-lookup"><span data-stu-id="2f521-104">The signature of the <xref:System.Threading.TimerCallback> delegate is:</span></span>  
  
```csharp  
void TimerCallback(Object state)  
```  
  
```cpp  
void TimerCallback(Object state)  
```  
  
```vb  
Sub TimerCallback(state As Object)  
```  
  
 <span data-ttu-id="2f521-105">Делегат таймера указывается в том случае, если таймер создается и его нельзя изменить.</span><span class="sxs-lookup"><span data-stu-id="2f521-105">The timer delegate is specified when the timer is constructed, and cannot be changed.</span></span> <span data-ttu-id="2f521-106">Метод не выполняется в потоке, создавшем таймер; он выполняет в <xref:System.Threading.ThreadPool> потока, предоставленное системой.</span><span class="sxs-lookup"><span data-stu-id="2f521-106">The method does not execute on the thread that created the timer; it executes on a <xref:System.Threading.ThreadPool> thread supplied by the system.</span></span>  
  
> [!TIP]
> <span data-ttu-id="2f521-107">.NET включает в себя четыре класса с именем `Timer`, каждый из который предлагает различные функциональные возможности:</span><span class="sxs-lookup"><span data-stu-id="2f521-107">.NET includes four classes named `Timer`, each of which offers different functionality:</span></span>  
>
> - <span data-ttu-id="2f521-108"><xref:System.Timers.Timer?displayProperty=nameWithType>, который запускает событие и выполняет код в одном или приемники несколько событий с регулярными интервалами.</span><span class="sxs-lookup"><span data-stu-id="2f521-108"><xref:System.Timers.Timer?displayProperty=nameWithType>, which fires an event and executes the code in one or more event sinks at regular intervals.</span></span> <span data-ttu-id="2f521-109">Класс предназначен для использования в качестве сервера под управлением или компонента службы в многопоточной среде; он нет пользовательского интерфейса и не отображается во время выполнения.</span><span class="sxs-lookup"><span data-stu-id="2f521-109">The class is intended for use as a server-based or service component in a multithreaded environment; it has no user interface and is not visible at runtime.</span></span>
> - <span data-ttu-id="2f521-110"><xref:System.Threading.Timer?displayProperty=nameWithType>, который выполняет метод одного ответного вызова пула потоков с регулярными интервалами.</span><span class="sxs-lookup"><span data-stu-id="2f521-110"><xref:System.Threading.Timer?displayProperty=nameWithType>, which executes a single callback method on a thread pool thread at regular intervals.</span></span> <span data-ttu-id="2f521-111">Метод обратного вызова определяется в том случае, когда таймер создается и не может быть изменено.</span><span class="sxs-lookup"><span data-stu-id="2f521-111">The callback method is defined when the timer is instantiated and cannot be changed.</span></span> <span data-ttu-id="2f521-112">Как и <xref:System.Timers.Timer?displayProperty=nameWithType> класса, этот класс предназначен для использования в качестве компонента server или службы в многопоточной среде; у него отсутствует интерфейс пользователя, который не отображается во время выполнения.</span><span class="sxs-lookup"><span data-stu-id="2f521-112">Like the <xref:System.Timers.Timer?displayProperty=nameWithType> class, this class is intended for use as a server-based or service component in a multithreaded environment; it has no user interface and is not visible at runtime.</span></span>
> - <span data-ttu-id="2f521-113"><xref:System.Windows.Forms.Timer?displayProperty=nameWithType> (.NET framework только), компонент Windows Forms, который запускает событие и выполняет код в один или несколько приемников событий с регулярными интервалами.</span><span class="sxs-lookup"><span data-stu-id="2f521-113"><xref:System.Windows.Forms.Timer?displayProperty=nameWithType> (.NET Framework only), a Windows Forms component that fires an event and executes the code in one or more event sinks at regular intervals.</span></span> <span data-ttu-id="2f521-114">Компонент, у него отсутствует интерфейс пользователя и предназначен для использования в среде однопоточный; он выполняется в потоке пользовательского интерфейса.</span><span class="sxs-lookup"><span data-stu-id="2f521-114">The component has no user interface and is designed for use in a single-threaded environment; it executes on the UI thread.</span></span>
> - <span data-ttu-id="2f521-115"><xref:System.Web.UI.Timer?displayProperty=nameWithType> (.NET framework только), компонент ASP.NET, выполняющий обратную передачу асинхронный или синхронный веб-страницы с регулярным интервалом.</span><span class="sxs-lookup"><span data-stu-id="2f521-115"><xref:System.Web.UI.Timer?displayProperty=nameWithType> (.NET Framework only), an ASP.NET component that performs asynchronous or synchronous web page postbacks at a regular interval.</span></span>
  
 <span data-ttu-id="2f521-116">При создании таймера, можно указать время ожидания перед первым выполнением метода (ожидаемое время) и время ожидания между последовательными вызовами (период).</span><span class="sxs-lookup"><span data-stu-id="2f521-116">When you create a timer, you can specify an amount of time to wait before the first execution of the method (due time), and an amount of time to wait between subsequent executions (period).</span></span> <span data-ttu-id="2f521-117"><xref:System.Threading.Timer> Класс имеет тем же разрешением, что системные часы.</span><span class="sxs-lookup"><span data-stu-id="2f521-117">The <xref:System.Threading.Timer> class has the same resolution as the system clock.</span></span> <span data-ttu-id="2f521-118">Это означает, что если период меньше, чем разрешение системных часов, <xref:System.Threading.TimerCallback> делегат будет выполняться через интервалы, определенные путем разрешения системных часов, который составляет приблизительно 15 миллисекунд в системах Windows 7 и Windows 8.</span><span class="sxs-lookup"><span data-stu-id="2f521-118">This means that if the period is less than the resolution of the system clock, the <xref:System.Threading.TimerCallback> delegate will execute at intervals defined by the resolution of the system clock, which is approximately 15 milliseconds on Windows 7 and Windows 8 systems.</span></span> <span data-ttu-id="2f521-119">Вы можете изменить из-за времени и период, а также отключать таймер, с помощью <xref:System.Threading.Timer.Change%2A> метод.</span><span class="sxs-lookup"><span data-stu-id="2f521-119">You can change the due time and period, or disable the timer, by using the <xref:System.Threading.Timer.Change%2A> method.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="2f521-120">До тех пор, пока вы используете <xref:System.Threading.Timer>, необходимо хранить ссылку на него.</span><span class="sxs-lookup"><span data-stu-id="2f521-120">As long as you are using a <xref:System.Threading.Timer>, you must keep a reference to it.</span></span> <span data-ttu-id="2f521-121">Как и для любого управляемого объекта <xref:System.Threading.Timer> становятся подвергаются сборке мусора, когда на него нет ссылок.</span><span class="sxs-lookup"><span data-stu-id="2f521-121">As with any managed object, a <xref:System.Threading.Timer> is subject to garbage collection when there are no references to it.</span></span> <span data-ttu-id="2f521-122">Тот факт, <xref:System.Threading.Timer> — это все еще активен препятствует его сбора.</span><span class="sxs-lookup"><span data-stu-id="2f521-122">The fact that a <xref:System.Threading.Timer> is still active does not prevent it from being collected.</span></span>  
  
 <span data-ttu-id="2f521-123">Когда таймер не нужны, используйте <xref:System.Threading.Timer.Dispose%2A> метод, чтобы освободить ресурсы, удерживаемые таймера.</span><span class="sxs-lookup"><span data-stu-id="2f521-123">When a timer is no longer needed, use the <xref:System.Threading.Timer.Dispose%2A> method to free the resources held by the timer.</span></span> <span data-ttu-id="2f521-124">Обратите внимание, что обратные вызовы могут возникать после <xref:System.Threading.Timer.Dispose> перегруженный метод был вызван, так как таймер ставит в очередь обратные вызовы для выполнения по потокам пулов потоков.</span><span class="sxs-lookup"><span data-stu-id="2f521-124">Note that callbacks can occur after the <xref:System.Threading.Timer.Dispose> method overload has been called, because the timer queues callbacks for execution by thread pool threads.</span></span> <span data-ttu-id="2f521-125">Можно использовать <xref:System.Threading.Timer.Dispose%28System.Threading.WaitHandle%29> перегруженный метод для ожидания до завершения всех ответных вызовов.</span><span class="sxs-lookup"><span data-stu-id="2f521-125">You can use the <xref:System.Threading.Timer.Dispose%28System.Threading.WaitHandle%29> method overload to wait until all callbacks have completed.</span></span>  
  
 <span data-ttu-id="2f521-126">Метод обратного вызова, кем таймера должен быть реентерабельным, так как он вызывается для <xref:System.Threading.ThreadPool> потоков.</span><span class="sxs-lookup"><span data-stu-id="2f521-126">The callback method executed by the timer should be reentrant, because it is called on <xref:System.Threading.ThreadPool> threads.</span></span> <span data-ttu-id="2f521-127">Обратный вызов может выполняться одновременно в двух потоках пула потоков, если интервал таймера меньше, чем время, необходимое для выполнения обратного вызова, или в том случае, если используются все потоки пула потоков и обратный вызов помещается в очередь несколько раз.</span><span class="sxs-lookup"><span data-stu-id="2f521-127">The callback can be executed simultaneously on two thread pool threads if the timer interval is less than the time required to execute the callback, or if all thread pool threads are in use and the callback is queued multiple times.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="2f521-128"><xref:System.Threading.Timer?displayProperty=nameWithType> представляет собой упрощенный таймер, который использует методы обратного вызова и обслуживается из пула потоков.</span><span class="sxs-lookup"><span data-stu-id="2f521-128"><xref:System.Threading.Timer?displayProperty=nameWithType> is a simple, lightweight timer that uses callback methods and is served by thread pool threads.</span></span> <span data-ttu-id="2f521-129">Не рекомендуется для использования с Windows Forms, поскольку обратные вызовы не происходят в потоке пользовательского интерфейса.</span><span class="sxs-lookup"><span data-stu-id="2f521-129">It is not recommended for use with Windows Forms, because its callbacks do not occur on the user interface thread.</span></span> <span data-ttu-id="2f521-130"><xref:System.Windows.Forms.Timer?displayProperty=nameWithType> не лучшим выбором для работы с Windows Forms.</span><span class="sxs-lookup"><span data-stu-id="2f521-130"><xref:System.Windows.Forms.Timer?displayProperty=nameWithType> is a better choice for use with Windows Forms.</span></span> <span data-ttu-id="2f521-131">Для функции таймера на основе сервера, можно использовать <xref:System.Timers.Timer?displayProperty=nameWithType>, который вызывает события и предоставляет дополнительные возможности.</span><span class="sxs-lookup"><span data-stu-id="2f521-131">For server-based timer functionality, you might consider using <xref:System.Timers.Timer?displayProperty=nameWithType>, which raises events and has additional features.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="2f521-132">В следующем примере определяется `StatusChecker` класс, который включает в себя `CheckStatus` метод, сигнатура которого совпадает с как <xref:System.Threading.TimerCallback> делегировать.</span><span class="sxs-lookup"><span data-stu-id="2f521-132">The following example defines a `StatusChecker` class  that includes a `CheckStatus` method whose signature is the same as the <xref:System.Threading.TimerCallback> delegate.</span></span> <span data-ttu-id="2f521-133">`state` Аргумент `CheckStatus` метод <xref:System.Threading.AutoResetEvent> объект, используемый для синхронизации потока приложения и пула потоков, который выполняет делегат обратного вызова.</span><span class="sxs-lookup"><span data-stu-id="2f521-133">The  `state` argument of the `CheckStatus` method is an <xref:System.Threading.AutoResetEvent> object that is used to synchronize the application thread and the thread pool thread that executes the callback delegate.</span></span> <span data-ttu-id="2f521-134">`StatusChecker` Класс также включает две переменные состояния:</span><span class="sxs-lookup"><span data-stu-id="2f521-134">The `StatusChecker` class also includes two state variables:</span></span>  
  
 `invokeCount`  
 <span data-ttu-id="2f521-135">Указывает, сколько раз был вызван метод обратного вызова.</span><span class="sxs-lookup"><span data-stu-id="2f521-135">Indicates the number of times the callback method has been invoked.</span></span>  
  
 `maxCount`  
 <span data-ttu-id="2f521-136">Определяет максимальное количество раз, когда должен быть вызван метод обратного вызова.</span><span class="sxs-lookup"><span data-stu-id="2f521-136">Determines the maximum number of times the callback method should be invoked.</span></span>  
  
 <span data-ttu-id="2f521-137">Поток приложения создает таймер, который ожидает в течение одной секунды, а затем выполняет `CheckStatus` метод обратного вызова каждые 250 миллисекунд.</span><span class="sxs-lookup"><span data-stu-id="2f521-137">The application thread creates the timer, which waits one second and then executes  the `CheckStatus` callback method every 250 milliseconds.</span></span> <span data-ttu-id="2f521-138">Поток приложения блокируется до <xref:System.Threading.AutoResetEvent> объект переводится в сигнальное состояние.</span><span class="sxs-lookup"><span data-stu-id="2f521-138">The application thread then blocks until the <xref:System.Threading.AutoResetEvent> object is signaled.</span></span> <span data-ttu-id="2f521-139">Когда `CheckStatus` выполнении метода обратного вызова `maxCount` раз, он вызывает `AutoResetEvent.Set` метод для задания состояния <xref:System.Threading.AutoResetEvent> объект сигнальным.</span><span class="sxs-lookup"><span data-stu-id="2f521-139">When the `CheckStatus` callback method executes `maxCount` times, it calls the `AutoResetEvent.Set` method to set the state of the <xref:System.Threading.AutoResetEvent> object to signaled.</span></span> <span data-ttu-id="2f521-140">Первый раз, в этом случае поток приложения вызывает <xref:System.Threading.Timer.Change%28System.Int32%2CSystem.Int32%29> метод таким образом, метод обратного вызова теперь выполняется каждые полсекунды.</span><span class="sxs-lookup"><span data-stu-id="2f521-140">The first time this happens, the application thread calls the <xref:System.Threading.Timer.Change%28System.Int32%2CSystem.Int32%29> method so that the callback method now executes every half second.</span></span> <span data-ttu-id="2f521-141">Он снова блокируется до <xref:System.Threading.AutoResetEvent> объект переводится в сигнальное состояние.</span><span class="sxs-lookup"><span data-stu-id="2f521-141">It once again blocks until the <xref:System.Threading.AutoResetEvent> object is signaled.</span></span> <span data-ttu-id="2f521-142">В этом случае таймер уничтожается, вызвав его <xref:System.Threading.Timer.Dispose%2A> метод и приложение завершается.</span><span class="sxs-lookup"><span data-stu-id="2f521-142">When this happens, the timer is destroyed by calling its <xref:System.Threading.Timer.Dispose%2A> method, and the application terminates.</span></span>  
  
 [!code-cpp[System.Threading.Timer#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Threading.Timer/CPP/source.cpp#1)]
 [!code-csharp[System.Threading.Timer#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Threading.Timer/CS/source.cs#1)]
 [!code-vb[System.Threading.Timer#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Threading.Timer/VB/source.vb#1)]  
  
 ]]></format>
    </remarks>
    <threadsafe>
      <span data-ttu-id="2f521-143">Данный тип потокобезопасен.</span>
      <span class="sxs-lookup">
        <span data-stu-id="2f521-143">This type is thread safe.</span>
      </span>
    </threadsafe>
    <altmember cref="T:System.Threading.TimerCallback" />
  </Docs>
  <Members>
    <MemberGroup MemberName=".ctor">
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="2f521-144">Инициализирует новый экземпляр класса <see langword="Timer" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2f521-144">Initializes a new instance of the <see langword="Timer" /> class.</span>
          </span>
        </summary>
      </Docs>
    </MemberGroup>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public Timer (System.Threading.TimerCallback callback);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.Threading.TimerCallback callback) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Timer.#ctor(System.Threading.TimerCallback)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (callback As TimerCallback)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; Timer(System::Threading::TimerCallback ^ callback);" />
      <MemberSignature Language="F#" Value="new System.Threading.Timer : System.Threading.TimerCallback -&gt; System.Threading.Timer" Usage="new System.Threading.Timer callback" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Timer</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="callback" Type="System.Threading.TimerCallback" />
      </Parameters>
      <Docs>
        <param name="callback">
          <span data-ttu-id="2f521-145">Делегат <see cref="T:System.Threading.TimerCallback" />, представляющий выполняемый метод.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2f521-145">A <see cref="T:System.Threading.TimerCallback" /> delegate representing a method to be executed.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="2f521-146">Инициализирует новый экземпляр класса <see cref="T:System.Threading.Timer" /> с бесконечным периодом и бесконечным временем действия, используя созданный объект <see cref="T:System.Threading.Timer" /> в качестве объекта состояния.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2f521-146">Initializes a new instance of the <see cref="T:System.Threading.Timer" /> class with an infinite period and an infinite due time, using the newly created <see cref="T:System.Threading.Timer" /> object as the state object.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="2f521-147">Вызов этого конструктора, если вы хотите использовать <xref:System.Threading.Timer> сам объект как объект состояния.</span><span class="sxs-lookup"><span data-stu-id="2f521-147">Call this constructor when you want to use the <xref:System.Threading.Timer> object itself as the state object.</span></span> <span data-ttu-id="2f521-148">После создания таймера, используйте <xref:System.Threading.Timer.Change%2A> метод, чтобы задать интервал и время завершения.</span><span class="sxs-lookup"><span data-stu-id="2f521-148">After creating the timer, use the <xref:System.Threading.Timer.Change%2A> method to set the interval and due time.</span></span>  
  
 <span data-ttu-id="2f521-149">Этот конструктор указывает неограниченное время перед первой обратного вызова и неограниченный интервал между обратными вызовами, чтобы предотвратить появление перед первой обратного вызова <xref:System.Threading.Timer> объект присваивается объект состояния.</span><span class="sxs-lookup"><span data-stu-id="2f521-149">This constructor specifies an infinite due time before the first callback and an infinite interval between callbacks, in order to prevent the first callback from occurring before the <xref:System.Threading.Timer> object is assigned to the state object.</span></span>  
  
 <span data-ttu-id="2f521-150">Метод, указанный для `callback` должен быть реентерабельным, так как он вызывается для <xref:System.Threading.ThreadPool> потоков.</span><span class="sxs-lookup"><span data-stu-id="2f521-150">The method specified for `callback` should be reentrant, because it is called on <xref:System.Threading.ThreadPool> threads.</span></span> <span data-ttu-id="2f521-151">Метод может выполняться одновременно в двух потоках пула потоков, если интервал таймера меньше, чем время, необходимое для выполнения метода, или в том случае, если используются все потоки пула потоков и метод помещается в очередь несколько раз.</span><span class="sxs-lookup"><span data-stu-id="2f521-151">The method can be executed simultaneously on two thread pool threads if the timer interval is less than the time required to execute the method, or if all thread pool threads are in use and the method is queued multiple times.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="2f521-152">В следующем примере кода создается новый таймер, используя таймер в качестве объекта состояния.</span><span class="sxs-lookup"><span data-stu-id="2f521-152">The following code example creates a new timer, using the timer itself as the state object.</span></span> <span data-ttu-id="2f521-153"><xref:System.Threading.Timer.Change%2A> Метод используется для запуска таймера.</span><span class="sxs-lookup"><span data-stu-id="2f521-153">The <xref:System.Threading.Timer.Change%2A> method is used to start the timer.</span></span> <span data-ttu-id="2f521-154">Когда происходит обратный вызов таймера, объект состояния позволяет отключить таймер.</span><span class="sxs-lookup"><span data-stu-id="2f521-154">When the timer callback occurs, the state object is used to turn the timer off.</span></span>  
  
 [!code-csharp[TimerSelfCtor#1](~/samples/snippets/csharp/VS_Snippets_Misc/timerSelfCtor/CS/source.cs#1)]
 [!code-vb[TimerSelfCtor#1](~/samples/snippets/visualbasic/VS_Snippets_Misc/timerSelfCtor/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public Timer (System.Threading.TimerCallback callback, object state, int dueTime, int period);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.Threading.TimerCallback callback, object state, int32 dueTime, int32 period) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Timer.#ctor(System.Threading.TimerCallback,System.Object,System.Int32,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (callback As TimerCallback, state As Object, dueTime As Integer, period As Integer)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; Timer(System::Threading::TimerCallback ^ callback, System::Object ^ state, int dueTime, int period);" />
      <MemberSignature Language="F#" Value="new System.Threading.Timer : System.Threading.TimerCallback * obj * int * int -&gt; System.Threading.Timer" Usage="new System.Threading.Timer (callback, state, dueTime, period)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Timer</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="callback" Type="System.Threading.TimerCallback" />
        <Parameter Name="state" Type="System.Object" />
        <Parameter Name="dueTime" Type="System.Int32" />
        <Parameter Name="period" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="callback">
          <span data-ttu-id="2f521-155">Делегат <see cref="T:System.Threading.TimerCallback" />, представляющий выполняемый метод.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2f521-155">A <see cref="T:System.Threading.TimerCallback" /> delegate representing a method to be executed.</span>
          </span>
        </param>
        <param name="state">
          <span data-ttu-id="2f521-156">Объект, содержащий информацию, используемую методом ответного вызова или значение <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2f521-156">An object containing information to be used by the callback method, or <see langword="null" />.</span>
          </span>
        </param>
        <param name="dueTime">
          <span data-ttu-id="2f521-157">Количество времени до начала вызова параметра <c>callback</c>, в миллисекундах.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2f521-157">The amount of time to delay before <c>callback</c> is invoked, in milliseconds.</span>
          </span>
          <span data-ttu-id="2f521-158">Следует задать поле <see cref="F:System.Threading.Timeout.Infinite" /> для того, чтобы не допустить запуск таймера.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2f521-158">Specify <see cref="F:System.Threading.Timeout.Infinite" /> to prevent the timer from starting.</span>
          </span>
          <span data-ttu-id="2f521-159">Задайте значение ноль (0) для немедленного запуска таймера.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2f521-159">Specify zero (0) to start the timer immediately.</span>
          </span>
        </param>
        <param name="period">
          <span data-ttu-id="2f521-160">Временной интервал между вызовами параметра <c>callback</c>, в миллисекундах.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2f521-160">The time interval between invocations of <c>callback</c>, in milliseconds.</span>
          </span>
          <span data-ttu-id="2f521-161">Следует задать поле <see cref="F:System.Threading.Timeout.Infinite" /> для отключения периодической сигнализации.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2f521-161">Specify <see cref="F:System.Threading.Timeout.Infinite" /> to disable periodic signaling.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="2f521-162">Инициализирует новый экземпляр класса <see langword="Timer" />, используя указанное 32-разрядное знаковое целое число для задания временного интервала.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2f521-162">Initializes a new instance of the <see langword="Timer" /> class, using a 32-bit signed integer to specify the time interval.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="2f521-163">Делегат, заданный параметром `callback` вызывается один раз после `dueTime` истекает и затем каждый раз `period` прошествии времени.</span><span class="sxs-lookup"><span data-stu-id="2f521-163">The delegate specified by the `callback` parameter is invoked once after `dueTime` elapses, and thereafter each time the `period` time interval elapses.</span></span>  
  
 <span data-ttu-id="2f521-164">Если `dueTime` равно нулю (0), `callback` вызывается немедленно.</span><span class="sxs-lookup"><span data-stu-id="2f521-164">If `dueTime` is zero (0), `callback` is invoked immediately.</span></span> <span data-ttu-id="2f521-165">Если `dueTime` — <xref:System.Threading.Timeout.Infinite?displayProperty=nameWithType>, `callback` не используется; таймер отключен, но можно включить путем вызова <xref:System.Threading.Timer.Change%2A> метод.</span><span class="sxs-lookup"><span data-stu-id="2f521-165">If `dueTime` is <xref:System.Threading.Timeout.Infinite?displayProperty=nameWithType>, `callback` is not invoked; the timer is disabled, but can be re-enabled by calling the <xref:System.Threading.Timer.Change%2A> method.</span></span>  
  
 <span data-ttu-id="2f521-166">Так как <xref:System.Threading.Timer> класс имеет одинаковое разрешение как системных часов, являющийся примерно 15 миллисекунд в системах Windows 7 и Windows 8, `callback` выполняет делегат через интервалы, определенные путем разрешения системных часов, если `period`меньше, чем разрешение системных часов.</span><span class="sxs-lookup"><span data-stu-id="2f521-166">Because the <xref:System.Threading.Timer> class has the same resolution as the system clock, which is approximately 15 milliseconds on Windows 7 and Windows 8 systems, the `callback` delegate executes at intervals defined by the resolution of the system clock if `period` is less than the resolution of the system clock.</span></span> <span data-ttu-id="2f521-167">Если `period` равно нулю (0) или <xref:System.Threading.Timeout.Infinite?displayProperty=nameWithType> и `dueTime` не <xref:System.Threading.Timeout.Infinite?displayProperty=nameWithType>, `callback` вызывается один раз; периодическое поведение таймера отключена, но можно включить с помощью <xref:System.Threading.Timer.Change%2A> метод.</span><span class="sxs-lookup"><span data-stu-id="2f521-167">If `period` is zero (0) or <xref:System.Threading.Timeout.Infinite?displayProperty=nameWithType> and `dueTime` is not <xref:System.Threading.Timeout.Infinite?displayProperty=nameWithType>, `callback` is invoked once; the periodic behavior of the timer is disabled, but can be re-enabled using the <xref:System.Threading.Timer.Change%2A> method.</span></span>  
  
 <span data-ttu-id="2f521-168">Метод, указанный для `callback` должен быть реентерабельным, так как он вызывается для <xref:System.Threading.ThreadPool> потоков.</span><span class="sxs-lookup"><span data-stu-id="2f521-168">The method specified for `callback` should be reentrant, because it is called on <xref:System.Threading.ThreadPool> threads.</span></span> <span data-ttu-id="2f521-169">Метод может выполняться одновременно в двух потоках пула потоков, если интервал таймера меньше, чем время, необходимое для выполнения метода, или в том случае, если используются все потоки пула потоков и метод помещается в очередь несколько раз.</span><span class="sxs-lookup"><span data-stu-id="2f521-169">The method can be executed simultaneously on two thread pool threads if the timer interval is less than the time required to execute the method, or if all thread pool threads are in use and the method is queued multiple times.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="2f521-170">В следующем примере кода показано, как создать `TimerCallback` делегировать и инициализировать новый экземпляр класса `Timer` класса.</span><span class="sxs-lookup"><span data-stu-id="2f521-170">The following code example shows how to create a `TimerCallback` delegate and initialize a new instance of the `Timer` class.</span></span>  
  
 [!code-cpp[System.Threading.Timer#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Threading.Timer/CPP/source.cpp#1)]
 [!code-csharp[System.Threading.Timer#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Threading.Timer/CS/source.cs#1)]
 [!code-vb[System.Threading.Timer#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Threading.Timer/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <span data-ttu-id="2f521-171">Значение параметра <paramref name="dueTime" /> или <paramref name="period" /> отрицательно, и не равно <see cref="F:System.Threading.Timeout.Infinite" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2f521-171">The <paramref name="dueTime" /> or <paramref name="period" /> parameter is negative and is not equal to <see cref="F:System.Threading.Timeout.Infinite" />.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="2f521-172">Параметр <paramref name="callback" /> имеет значение <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2f521-172">The <paramref name="callback" /> parameter is <see langword="null" />.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public Timer (System.Threading.TimerCallback callback, object state, long dueTime, long period);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.Threading.TimerCallback callback, object state, int64 dueTime, int64 period) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Timer.#ctor(System.Threading.TimerCallback,System.Object,System.Int64,System.Int64)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (callback As TimerCallback, state As Object, dueTime As Long, period As Long)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; Timer(System::Threading::TimerCallback ^ callback, System::Object ^ state, long dueTime, long period);" />
      <MemberSignature Language="F#" Value="new System.Threading.Timer : System.Threading.TimerCallback * obj * int64 * int64 -&gt; System.Threading.Timer" Usage="new System.Threading.Timer (callback, state, dueTime, period)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Timer</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="callback" Type="System.Threading.TimerCallback" />
        <Parameter Name="state" Type="System.Object" />
        <Parameter Name="dueTime" Type="System.Int64" />
        <Parameter Name="period" Type="System.Int64" />
      </Parameters>
      <Docs>
        <param name="callback">
          <span data-ttu-id="2f521-173">Делегат <see cref="T:System.Threading.TimerCallback" />, представляющий выполняемый метод.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2f521-173">A <see cref="T:System.Threading.TimerCallback" /> delegate representing a method to be executed.</span>
          </span>
        </param>
        <param name="state">
          <span data-ttu-id="2f521-174">Объект, содержащий информацию, используемую методом ответного вызова или значение <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2f521-174">An object containing information to be used by the callback method, or <see langword="null" />.</span>
          </span>
        </param>
        <param name="dueTime">
          <span data-ttu-id="2f521-175">Количество времени до начала вызова параметра <c>callback</c>, в миллисекундах.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2f521-175">The amount of time to delay before <c>callback</c> is invoked, in milliseconds.</span>
          </span>
          <span data-ttu-id="2f521-176">Следует задать поле <see cref="F:System.Threading.Timeout.Infinite" /> для того, чтобы не допустить запуск таймера.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2f521-176">Specify <see cref="F:System.Threading.Timeout.Infinite" /> to prevent the timer from starting.</span>
          </span>
          <span data-ttu-id="2f521-177">Задайте значение ноль (0) для немедленного запуска таймера.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2f521-177">Specify zero (0) to start the timer immediately.</span>
          </span>
        </param>
        <param name="period">
          <span data-ttu-id="2f521-178">Временной интервал между вызовами параметра <c>callback</c>, в миллисекундах.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2f521-178">The time interval between invocations of <c>callback</c>, in milliseconds.</span>
          </span>
          <span data-ttu-id="2f521-179">Следует задать поле <see cref="F:System.Threading.Timeout.Infinite" /> для отключения периодической сигнализации.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2f521-179">Specify <see cref="F:System.Threading.Timeout.Infinite" /> to disable periodic signaling.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="2f521-180">Инициализирует новый экземпляр класса <see langword="Timer" />, используя указанное 64-разрядное знаковое целое число для измерения временных интервалов.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2f521-180">Initializes a new instance of the <see langword="Timer" /> class, using 64-bit signed integers to measure time intervals.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="2f521-181">Делегат, заданный параметром `callback` вызывается один раз после `dueTime` истекает и затем каждый раз `period` прошествии времени.</span><span class="sxs-lookup"><span data-stu-id="2f521-181">The delegate specified by the `callback` parameter is invoked once after `dueTime` elapses, and thereafter each time the `period` time interval elapses.</span></span>  
  
 <span data-ttu-id="2f521-182">Если `dueTime` равно нулю (0), `callback` вызывается немедленно.</span><span class="sxs-lookup"><span data-stu-id="2f521-182">If `dueTime` is zero (0), `callback` is invoked immediately.</span></span> <span data-ttu-id="2f521-183">Если `dueTime` — <xref:System.Threading.Timeout.Infinite?displayProperty=nameWithType>, `callback` не используется; таймер отключен, но можно включить путем вызова <xref:System.Threading.Timer.Change%2A> метод.</span><span class="sxs-lookup"><span data-stu-id="2f521-183">If `dueTime` is <xref:System.Threading.Timeout.Infinite?displayProperty=nameWithType>, `callback` is not invoked; the timer is disabled, but can be re-enabled by calling the <xref:System.Threading.Timer.Change%2A> method.</span></span>  
  
 <span data-ttu-id="2f521-184">Так как <xref:System.Threading.Timer> класс имеет одинаковое разрешение как системных часов, являющийся примерно 15 миллисекунд в системах Windows 7 и Windows 8, `callback` выполняет делегат через интервалы, определенные путем разрешения системных часов, если `period`меньше, чем разрешение системных часов.</span><span class="sxs-lookup"><span data-stu-id="2f521-184">Because the <xref:System.Threading.Timer> class has the same resolution as the system clock, which is approximately 15 milliseconds on Windows 7 and Windows 8 systems, the `callback` delegate executes at intervals defined by the resolution of the system clock if `period` is less than the resolution of the system clock.</span></span> <span data-ttu-id="2f521-185">Если `period` равно нулю (0) или <xref:System.Threading.Timeout.Infinite?displayProperty=nameWithType> и `dueTime` не <xref:System.Threading.Timeout.Infinite?displayProperty=nameWithType>, `callback` вызывается один раз; периодическое поведение таймера отключена, но можно включить с помощью <xref:System.Threading.Timer.Change%2A> метод.</span><span class="sxs-lookup"><span data-stu-id="2f521-185">If `period` is zero (0) or <xref:System.Threading.Timeout.Infinite?displayProperty=nameWithType> and `dueTime` is not <xref:System.Threading.Timeout.Infinite?displayProperty=nameWithType>, `callback` is invoked once; the periodic behavior of the timer is disabled, but can be re-enabled using the <xref:System.Threading.Timer.Change%2A> method.</span></span>  
  
 <span data-ttu-id="2f521-186">Метод, указанный для `callback` должен быть реентерабельным, так как он вызывается для <xref:System.Threading.ThreadPool> потоков.</span><span class="sxs-lookup"><span data-stu-id="2f521-186">The method specified for `callback` should be reentrant, because it is called on <xref:System.Threading.ThreadPool> threads.</span></span> <span data-ttu-id="2f521-187">Метод может выполняться одновременно в двух потоках пула потоков, если интервал таймера меньше, чем время, необходимое для выполнения метода, или в том случае, если используются все потоки пула потоков и метод помещается в очередь несколько раз.</span><span class="sxs-lookup"><span data-stu-id="2f521-187">The method can be executed simultaneously on two thread pool threads if the timer interval is less than the time required to execute the method, or if all thread pool threads are in use and the method is queued multiple times.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <span data-ttu-id="2f521-188">Значение параметра <paramref name="dueTime" /> или <paramref name="period" /> отрицательно, и не равно <see cref="F:System.Threading.Timeout.Infinite" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2f521-188">The <paramref name="dueTime" /> or <paramref name="period" /> parameter is negative and is not equal to <see cref="F:System.Threading.Timeout.Infinite" />.</span>
          </span>
        </exception>
        <exception cref="T:System.NotSupportedException">
          <span data-ttu-id="2f521-189">Значение параметра <paramref name="dueTime" /> или <paramref name="period" /> больше 4294967294.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2f521-189">The <paramref name="dueTime" /> or <paramref name="period" /> parameter is greater than 4294967294.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public Timer (System.Threading.TimerCallback callback, object state, TimeSpan dueTime, TimeSpan period);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.Threading.TimerCallback callback, object state, valuetype System.TimeSpan dueTime, valuetype System.TimeSpan period) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Timer.#ctor(System.Threading.TimerCallback,System.Object,System.TimeSpan,System.TimeSpan)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (callback As TimerCallback, state As Object, dueTime As TimeSpan, period As TimeSpan)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; Timer(System::Threading::TimerCallback ^ callback, System::Object ^ state, TimeSpan dueTime, TimeSpan period);" />
      <MemberSignature Language="F#" Value="new System.Threading.Timer : System.Threading.TimerCallback * obj * TimeSpan * TimeSpan -&gt; System.Threading.Timer" Usage="new System.Threading.Timer (callback, state, dueTime, period)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Timer</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="callback" Type="System.Threading.TimerCallback" />
        <Parameter Name="state" Type="System.Object" />
        <Parameter Name="dueTime" Type="System.TimeSpan" />
        <Parameter Name="period" Type="System.TimeSpan" />
      </Parameters>
      <Docs>
        <param name="callback">
          <span data-ttu-id="2f521-190">Делегат, представляющий выполняемый метод.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2f521-190">A delegate representing a method to be executed.</span>
          </span>
        </param>
        <param name="state">
          <span data-ttu-id="2f521-191">Объект, содержащий информацию, используемую методом ответного вызова или значение <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2f521-191">An object containing information to be used by the callback method, or <see langword="null" />.</span>
          </span>
        </param>
        <param name="dueTime">
          <span data-ttu-id="2f521-192">Количество времени, которое следует подождать до того, как параметр <c>callback</c> вызовет свои методы.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2f521-192">The amount of time to delay before the <c>callback</c> parameter invokes its methods.</span>
          </span>
          <span data-ttu-id="2f521-193">Следует задать минус одну (-1) миллисекунду для того, чтобы не допустить запуск таймера.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2f521-193">Specify negative one (-1) milliseconds to prevent the timer from starting.</span>
          </span>
          <span data-ttu-id="2f521-194">Задайте значение ноль (0) для немедленного запуска таймера.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2f521-194">Specify zero (0) to start the timer immediately.</span>
          </span>
        </param>
        <param name="period">
          <span data-ttu-id="2f521-195">Временной интервал между вызовами методов, на которые ссылается параметр <c>callback</c>.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2f521-195">The time interval between invocations of the methods referenced by <c>callback</c>.</span>
          </span>
          <span data-ttu-id="2f521-196">Следует задать минус одну (-1) миллисекунду для отключения периодической сигнализации.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2f521-196">Specify negative one (-1) milliseconds to disable periodic signaling.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="2f521-197">Инициализирует новый экземпляр класса <see langword="Timer" />, используя значения объекта <see cref="T:System.TimeSpan" /> для измерения временных интервалов.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2f521-197">Initializes a new instance of the <see langword="Timer" /> class, using <see cref="T:System.TimeSpan" /> values to measure time intervals.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="2f521-198">Делегат, заданный параметром `callback` вызывается один раз после `dueTime` истекает и затем каждый раз `period` прошествии времени.</span><span class="sxs-lookup"><span data-stu-id="2f521-198">The delegate specified by the `callback` parameter is invoked once after `dueTime` elapses, and thereafter each time the `period` time interval elapses.</span></span>  
  
 <span data-ttu-id="2f521-199">Если `dueTime` равно нулю (0), `callback` вызывается немедленно.</span><span class="sxs-lookup"><span data-stu-id="2f521-199">If `dueTime` is zero (0), `callback` is invoked immediately.</span></span> <span data-ttu-id="2f521-200">Если `dueTime` — минус один (-1) миллисекунду, `callback` не используется; таймер отключен, но можно включить путем вызова <xref:System.Threading.Timer.Change%2A> метод.</span><span class="sxs-lookup"><span data-stu-id="2f521-200">If `dueTime` is negative one (-1) milliseconds, `callback` is not invoked; the timer is disabled, but can be re-enabled by calling the <xref:System.Threading.Timer.Change%2A> method.</span></span>  
  
 <span data-ttu-id="2f521-201">Так как <xref:System.Threading.Timer> класс имеет одинаковое разрешение как системных часов, являющийся примерно 15 миллисекунд в системах Windows 7 и Windows 8, `callback` выполняет делегат через интервалы, определенные путем разрешения системных часов, если `period`меньше, чем разрешение системных часов.</span><span class="sxs-lookup"><span data-stu-id="2f521-201">Because the <xref:System.Threading.Timer> class has the same resolution as the system clock, which is approximately 15 milliseconds on Windows 7 and Windows 8 systems, the `callback` delegate executes at intervals defined by the resolution of the system clock if `period` is less than the resolution of the system clock.</span></span> <span data-ttu-id="2f521-202">Если `period` является ноль (0) или (-1) и `dueTime` положительно, `callback` вызывается один раз; периодическое поведение таймера отключена, но можно включить с помощью <xref:System.Threading.Timer.Change%2A> метод.</span><span class="sxs-lookup"><span data-stu-id="2f521-202">If `period` is zero (0) or negative one (-1) milliseconds and `dueTime` is positive, `callback` is invoked once; the periodic behavior of the timer is disabled, but can be re-enabled using the <xref:System.Threading.Timer.Change%2A> method.</span></span>  
  
 <span data-ttu-id="2f521-203">Метод, указанный для `callback` должен быть реентерабельным, так как он вызывается для <xref:System.Threading.ThreadPool> потоков.</span><span class="sxs-lookup"><span data-stu-id="2f521-203">The method specified for `callback` should be reentrant, because it is called on <xref:System.Threading.ThreadPool> threads.</span></span> <span data-ttu-id="2f521-204">Метод может выполняться одновременно в двух потоках пула потоков, если интервал таймера меньше, чем время, необходимое для выполнения метода, или в том случае, если используются все потоки пула потоков и метод помещается в очередь несколько раз.</span><span class="sxs-lookup"><span data-stu-id="2f521-204">The method can be executed simultaneously on two thread pool threads if the timer interval is less than the time required to execute the method, or if all thread pool threads are in use and the method is queued multiple times.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="2f521-205">В следующем примере кода показано, как создать `TimerCallback` делегировать и инициализировать новый экземпляр класса `Timer` класса.</span><span class="sxs-lookup"><span data-stu-id="2f521-205">The following code example shows how to create a `TimerCallback` delegate and initialize a new instance of the `Timer` class.</span></span>  
  
 [!code-cpp[System.Threading.Timer2#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Threading.Timer2/CPP/source2.cpp#1)]
 [!code-csharp[System.Threading.Timer2#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Threading.Timer2/CS/source2.cs#1)]
 [!code-vb[System.Threading.Timer2#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Threading.Timer2/VB/source2.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <span data-ttu-id="2f521-206">Число миллисекунд, заданное значением поля <paramref name="dueTime" /> или <paramref name="period" />, отрицательно и не равно <see cref="F:System.Threading.Timeout.Infinite" />, или больше, чем <see cref="F:System.Int32.MaxValue" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2f521-206">The number of milliseconds in the value of <paramref name="dueTime" /> or <paramref name="period" /> is negative and not equal to <see cref="F:System.Threading.Timeout.Infinite" />, or is greater than <see cref="F:System.Int32.MaxValue" />.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="2f521-207">Параметр <paramref name="callback" /> имеет значение <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2f521-207">The <paramref name="callback" /> parameter is <see langword="null" />.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public Timer (System.Threading.TimerCallback callback, object state, uint dueTime, uint period);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.Threading.TimerCallback callback, object state, unsigned int32 dueTime, unsigned int32 period) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Timer.#ctor(System.Threading.TimerCallback,System.Object,System.UInt32,System.UInt32)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (callback As TimerCallback, state As Object, dueTime As UInteger, period As UInteger)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; Timer(System::Threading::TimerCallback ^ callback, System::Object ^ state, System::UInt32 dueTime, System::UInt32 period);" />
      <MemberSignature Language="F#" Value="new System.Threading.Timer : System.Threading.TimerCallback * obj * uint32 * uint32 -&gt; System.Threading.Timer" Usage="new System.Threading.Timer (callback, state, dueTime, period)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Timer</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters>
        <Parameter Name="callback" Type="System.Threading.TimerCallback" />
        <Parameter Name="state" Type="System.Object" />
        <Parameter Name="dueTime" Type="System.UInt32" />
        <Parameter Name="period" Type="System.UInt32" />
      </Parameters>
      <Docs>
        <param name="callback">
          <span data-ttu-id="2f521-208">Делегат, представляющий выполняемый метод.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2f521-208">A delegate representing a method to be executed.</span>
          </span>
        </param>
        <param name="state">
          <span data-ttu-id="2f521-209">Объект, содержащий информацию, используемую методом ответного вызова или значение <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2f521-209">An object containing information to be used by the callback method, or <see langword="null" />.</span>
          </span>
        </param>
        <param name="dueTime">
          <span data-ttu-id="2f521-210">Количество времени до начала вызова параметра <c>callback</c>, в миллисекундах.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2f521-210">The amount of time to delay before <c>callback</c> is invoked, in milliseconds.</span>
          </span>
          <span data-ttu-id="2f521-211">Следует задать поле <see cref="F:System.Threading.Timeout.Infinite" /> для того, чтобы не допустить запуск таймера.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2f521-211">Specify <see cref="F:System.Threading.Timeout.Infinite" /> to prevent the timer from starting.</span>
          </span>
          <span data-ttu-id="2f521-212">Задайте значение ноль (0) для немедленного запуска таймера.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2f521-212">Specify zero (0) to start the timer immediately.</span>
          </span>
        </param>
        <param name="period">
          <span data-ttu-id="2f521-213">Временной интервал между вызовами параметра <c>callback</c>, в миллисекундах.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2f521-213">The time interval between invocations of <c>callback</c>, in milliseconds.</span>
          </span>
          <span data-ttu-id="2f521-214">Следует задать поле <see cref="F:System.Threading.Timeout.Infinite" /> для отключения периодической сигнализации.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2f521-214">Specify <see cref="F:System.Threading.Timeout.Infinite" /> to disable periodic signaling.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="2f521-215">Инициализирует новый экземпляр класса <see langword="Timer" />, используя указанное 32-разрядное незнаковое целое число для измерения временных интервалов.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2f521-215">Initializes a new instance of the <see langword="Timer" /> class, using 32-bit unsigned integers to measure time intervals.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="2f521-216">Делегат, заданный параметром `callback` вызывается один раз после `dueTime` истекает и затем каждый раз `period` прошествии времени.</span><span class="sxs-lookup"><span data-stu-id="2f521-216">The delegate specified by the `callback` parameter is invoked once after `dueTime` elapses, and thereafter each time the `period` time interval elapses.</span></span>  
  
 <span data-ttu-id="2f521-217">Если `dueTime` равно нулю (0), `callback` вызывается немедленно.</span><span class="sxs-lookup"><span data-stu-id="2f521-217">If `dueTime` is zero (0), `callback` is invoked immediately.</span></span> <span data-ttu-id="2f521-218">Если `dueTime` — <xref:System.Threading.Timeout.Infinite?displayProperty=nameWithType>, `callback` не используется; таймер отключен, но можно включить путем вызова <xref:System.Threading.Timer.Change%2A> метод.</span><span class="sxs-lookup"><span data-stu-id="2f521-218">If `dueTime` is <xref:System.Threading.Timeout.Infinite?displayProperty=nameWithType>, `callback` is not invoked; the timer is disabled, but can be re-enabled by calling the <xref:System.Threading.Timer.Change%2A> method.</span></span>  
  
 <span data-ttu-id="2f521-219">Так как <xref:System.Threading.Timer> класс имеет одинаковое разрешение как системных часов, являющийся примерно 15 миллисекунд в системах Windows 7 и Windows 8, `callback` выполняет делегат через интервалы, определенные путем разрешения системных часов, если `period`меньше, чем разрешение системных часов.</span><span class="sxs-lookup"><span data-stu-id="2f521-219">Because the <xref:System.Threading.Timer> class has the same resolution as the system clock, which is approximately 15 milliseconds on Windows 7 and Windows 8 systems, the `callback` delegate executes at intervals defined by the resolution of the system clock if `period` is less than the resolution of the system clock.</span></span> <span data-ttu-id="2f521-220">Если `period` равно нулю (0) или <xref:System.Threading.Timeout.Infinite?displayProperty=nameWithType> и `dueTime` не <xref:System.Threading.Timeout.Infinite?displayProperty=nameWithType>, `callback` вызывается один раз; периодическое поведение таймера отключена, но можно включить с помощью <xref:System.Threading.Timer.Change%2A> метод.</span><span class="sxs-lookup"><span data-stu-id="2f521-220">If `period` is zero (0) or <xref:System.Threading.Timeout.Infinite?displayProperty=nameWithType> and `dueTime` is not <xref:System.Threading.Timeout.Infinite?displayProperty=nameWithType>, `callback` is invoked once; the periodic behavior of the timer is disabled, but can be re-enabled using the <xref:System.Threading.Timer.Change%2A> method.</span></span>  
  
 <span data-ttu-id="2f521-221">Метод, указанный для `callback` должен быть реентерабельным, так как он вызывается для <xref:System.Threading.ThreadPool> потоков.</span><span class="sxs-lookup"><span data-stu-id="2f521-221">The method specified for `callback` should be reentrant, because it is called on <xref:System.Threading.ThreadPool> threads.</span></span> <span data-ttu-id="2f521-222">Метод может выполняться одновременно в двух потоках пула потоков, если интервал таймера меньше, чем время, необходимое для выполнения метода, или в том случае, если используются все потоки пула потоков и метод помещается в очередь несколько раз.</span><span class="sxs-lookup"><span data-stu-id="2f521-222">The method can be executed simultaneously on two thread pool threads if the timer interval is less than the time required to execute the method, or if all thread pool threads are in use and the method is queued multiple times.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <span data-ttu-id="2f521-223">Значение параметра <paramref name="dueTime" /> или <paramref name="period" /> отрицательно, и не равно <see cref="F:System.Threading.Timeout.Infinite" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2f521-223">The <paramref name="dueTime" /> or <paramref name="period" /> parameter is negative and is not equal to <see cref="F:System.Threading.Timeout.Infinite" />.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="2f521-224">Параметр <paramref name="callback" /> имеет значение <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2f521-224">The <paramref name="callback" /> parameter is <see langword="null" />.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <MemberGroup MemberName="Change">
      <AssemblyInfo>
        <AssemblyName>System.Threading.Timer</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="2f521-225">Меняет время запуска и интервал между вызовами метода таймера.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2f521-225">Changes the start time and the interval between method invocations for a timer.</span>
          </span>
        </summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Change">
      <MemberSignature Language="C#" Value="public bool Change (int dueTime, int period);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool Change(int32 dueTime, int32 period) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Timer.Change(System.Int32,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Function Change (dueTime As Integer, period As Integer) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool Change(int dueTime, int period);" />
      <MemberSignature Language="F#" Value="member this.Change : int * int -&gt; bool" Usage="timer.Change (dueTime, period)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Timer</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="dueTime" Type="System.Int32" />
        <Parameter Name="period" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="dueTime">
          <span data-ttu-id="2f521-226">Количество времени, в миллисекундах, которое должно пройти до вызова метода ответного вызова при создании объекта <see cref="T:System.Threading.Timer" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2f521-226">The amount of time to delay before the invoking the callback method specified when the <see cref="T:System.Threading.Timer" /> was constructed, in milliseconds.</span>
          </span>
          <span data-ttu-id="2f521-227">Следует задать поле <see cref="F:System.Threading.Timeout.Infinite" /> для того, чтобы не допустить повторный запуск таймера.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2f521-227">Specify <see cref="F:System.Threading.Timeout.Infinite" /> to prevent the timer from restarting.</span>
          </span>
          <span data-ttu-id="2f521-228">Задайте значение ноль (0) для немедленного перезапуска таймера.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2f521-228">Specify zero (0) to restart the timer immediately.</span>
          </span>
        </param>
        <param name="period">
          <span data-ttu-id="2f521-229">Временной интервал в миллисекундах между вызовами метода обратного вызова, определенный в конструкторе объекта <see cref="T:System.Threading.Timer" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2f521-229">The time interval between invocations of the callback method specified when the <see cref="T:System.Threading.Timer" /> was constructed, in milliseconds.</span>
          </span>
          <span data-ttu-id="2f521-230">Следует задать поле <see cref="F:System.Threading.Timeout.Infinite" /> для отключения периодической сигнализации.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2f521-230">Specify <see cref="F:System.Threading.Timeout.Infinite" /> to disable periodic signaling.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="2f521-231">Меняет время запуска и интервал между вызовами метода таймера, используя 32-разрядные знаковые целые числа для измерения временных интервалов.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2f521-231">Changes the start time and the interval between method invocations for a timer, using 32-bit signed integers to measure time intervals.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="2f521-232">Значение <see langword="true" />, если таймер успешно обновлен; в противном случае — значение <see langword="false" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2f521-232">
              <see langword="true" /> if the timer was successfully updated; otherwise, <see langword="false" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="2f521-233">Метод обратного вызова вызывается один раз после `dueTime` истекает и затем каждый раз интервал времени, заданный в параметре `period` пройдет указанное время.</span><span class="sxs-lookup"><span data-stu-id="2f521-233">The callback method is invoked once after `dueTime` elapses, and thereafter each time the time interval specified by `period` elapses.</span></span>  
  
 <span data-ttu-id="2f521-234">Если `dueTime` равно нулю (0), немедленно вызывается метод обратного вызова.</span><span class="sxs-lookup"><span data-stu-id="2f521-234">If `dueTime` is zero (0), the callback method is invoked immediately.</span></span> <span data-ttu-id="2f521-235">Если `dueTime` — <xref:System.Threading.Timeout.Infinite?displayProperty=nameWithType>, метод обратного вызова не вызывается; таймер отключен, но можно включить путем вызова <xref:System.Threading.Timer.Change%2A> и указав положительное значение для `dueTime`.</span><span class="sxs-lookup"><span data-stu-id="2f521-235">If `dueTime` is <xref:System.Threading.Timeout.Infinite?displayProperty=nameWithType>, the callback method is never invoked; the timer is disabled, but can be re-enabled by calling <xref:System.Threading.Timer.Change%2A> and specifying a positive value for `dueTime`.</span></span>  
  
 <span data-ttu-id="2f521-236">Если `period` равно нулю (0) или <xref:System.Threading.Timeout.Infinite?displayProperty=nameWithType>, и `dueTime` не <xref:System.Threading.Timeout.Infinite?displayProperty=nameWithType>, метод обратного вызова вызывается один раз; периодическое поведение таймера отключена, но можно включить путем вызова <xref:System.Threading.Timer.Change%2A> и указав положительное значение для `period`.</span><span class="sxs-lookup"><span data-stu-id="2f521-236">If `period` is zero (0) or <xref:System.Threading.Timeout.Infinite?displayProperty=nameWithType>, and `dueTime` is not <xref:System.Threading.Timeout.Infinite?displayProperty=nameWithType>, the callback method is invoked once; the periodic behavior of the timer is disabled, but can be re-enabled by calling <xref:System.Threading.Timer.Change%2A> and specifying a positive value for `period`.</span></span>  
  
 <span data-ttu-id="2f521-237"><xref:System.Threading.Timer.Change%2A> Метод может вызываться из <xref:System.Threading.TimerCallback> делегировать.</span><span class="sxs-lookup"><span data-stu-id="2f521-237">The <xref:System.Threading.Timer.Change%2A> method can be called from the <xref:System.Threading.TimerCallback> delegate.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="2f521-238">В следующем примере кода показано, как запустить `Timer` и после заданного количества вызовов, изменение периода.</span><span class="sxs-lookup"><span data-stu-id="2f521-238">The following code example demonstrates how to start a `Timer` and, after a set number of invocations, change its period.</span></span>  
  
 [!code-cpp[System.Threading.Timer#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Threading.Timer/CPP/source.cpp#1)]
 [!code-csharp[System.Threading.Timer#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Threading.Timer/CS/source.cs#1)]
 [!code-vb[System.Threading.Timer#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Threading.Timer/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ObjectDisposedException">
          <span data-ttu-id="2f521-239">Объект <see cref="T:System.Threading.Timer" /> уже был удален.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2f521-239">The <see cref="T:System.Threading.Timer" /> has already been disposed.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <span data-ttu-id="2f521-240">Значение параметра <paramref name="dueTime" /> или <paramref name="period" /> отрицательно, и не равно <see cref="F:System.Threading.Timeout.Infinite" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2f521-240">The <paramref name="dueTime" /> or <paramref name="period" /> parameter is negative and is not equal to <see cref="F:System.Threading.Timeout.Infinite" />.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="Change">
      <MemberSignature Language="C#" Value="public bool Change (long dueTime, long period);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool Change(int64 dueTime, int64 period) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Timer.Change(System.Int64,System.Int64)" />
      <MemberSignature Language="VB.NET" Value="Public Function Change (dueTime As Long, period As Long) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool Change(long dueTime, long period);" />
      <MemberSignature Language="F#" Value="member this.Change : int64 * int64 -&gt; bool" Usage="timer.Change (dueTime, period)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Timer</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="dueTime" Type="System.Int64" />
        <Parameter Name="period" Type="System.Int64" />
      </Parameters>
      <Docs>
        <param name="dueTime">
          <span data-ttu-id="2f521-241">Количество времени, в миллисекундах, которое должно пройти до вызова метода ответного вызова при создании объекта <see cref="T:System.Threading.Timer" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2f521-241">The amount of time to delay before the invoking the callback method specified when the <see cref="T:System.Threading.Timer" /> was constructed, in milliseconds.</span>
          </span>
          <span data-ttu-id="2f521-242">Следует задать поле <see cref="F:System.Threading.Timeout.Infinite" /> для того, чтобы не допустить повторный запуск таймера.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2f521-242">Specify <see cref="F:System.Threading.Timeout.Infinite" /> to prevent the timer from restarting.</span>
          </span>
          <span data-ttu-id="2f521-243">Задайте значение ноль (0) для немедленного перезапуска таймера.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2f521-243">Specify zero (0) to restart the timer immediately.</span>
          </span>
        </param>
        <param name="period">
          <span data-ttu-id="2f521-244">Временной интервал в миллисекундах между вызовами метода обратного вызова, определенный в конструкторе объекта <see cref="T:System.Threading.Timer" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2f521-244">The time interval between invocations of the callback method specified when the <see cref="T:System.Threading.Timer" /> was constructed, in milliseconds.</span>
          </span>
          <span data-ttu-id="2f521-245">Следует задать поле <see cref="F:System.Threading.Timeout.Infinite" /> для отключения периодической сигнализации.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2f521-245">Specify <see cref="F:System.Threading.Timeout.Infinite" /> to disable periodic signaling.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="2f521-246">Меняет время запуска и интервал между вызовами метода таймера, используя 64-разрядные знаковые целые числа для измерения временных интервалов.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2f521-246">Changes the start time and the interval between method invocations for a timer, using 64-bit signed integers to measure time intervals.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="2f521-247">Значение <see langword="true" />, если таймер успешно обновлен; в противном случае — значение <see langword="false" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2f521-247">
              <see langword="true" /> if the timer was successfully updated; otherwise, <see langword="false" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="2f521-248">Метод обратного вызова вызывается один раз после `dueTime` истекает и затем каждый раз интервал времени, заданный в параметре `period` пройдет указанное время.</span><span class="sxs-lookup"><span data-stu-id="2f521-248">The callback method is invoked once after `dueTime` elapses, and thereafter each time the time interval specified by `period` elapses.</span></span>  
  
 <span data-ttu-id="2f521-249">Если `dueTime` равно нулю (0), немедленно вызывается метод обратного вызова.</span><span class="sxs-lookup"><span data-stu-id="2f521-249">If `dueTime` is zero (0), the callback method is invoked immediately.</span></span> <span data-ttu-id="2f521-250">Если `dueTime` — <xref:System.Threading.Timeout.Infinite?displayProperty=nameWithType>, метод обратного вызова не вызывается; таймер отключен, но можно включить путем вызова <xref:System.Threading.Timer.Change%2A> и указав положительное значение для `dueTime`.</span><span class="sxs-lookup"><span data-stu-id="2f521-250">If `dueTime` is <xref:System.Threading.Timeout.Infinite?displayProperty=nameWithType>, the callback method is never invoked; the timer is disabled, but can be re-enabled by calling <xref:System.Threading.Timer.Change%2A> and specifying a positive value for `dueTime`.</span></span>  
  
 <span data-ttu-id="2f521-251">Если `period` равно нулю (0) или <xref:System.Threading.Timeout.Infinite?displayProperty=nameWithType>, и `dueTime` не <xref:System.Threading.Timeout.Infinite?displayProperty=nameWithType>, метод обратного вызова вызывается один раз; периодическое поведение таймера отключена, но можно включить путем вызова <xref:System.Threading.Timer.Change%2A> и указав положительное значение для `period`.</span><span class="sxs-lookup"><span data-stu-id="2f521-251">If `period` is zero (0) or <xref:System.Threading.Timeout.Infinite?displayProperty=nameWithType>, and `dueTime` is not <xref:System.Threading.Timeout.Infinite?displayProperty=nameWithType>, the callback method is invoked once; the periodic behavior of the timer is disabled, but can be re-enabled by calling <xref:System.Threading.Timer.Change%2A> and specifying a positive value for `period`.</span></span>  
  
 <span data-ttu-id="2f521-252"><xref:System.Threading.Timer.Change%2A> Метод может вызываться из <xref:System.Threading.TimerCallback> делегировать.</span><span class="sxs-lookup"><span data-stu-id="2f521-252">The <xref:System.Threading.Timer.Change%2A> method can be called from the <xref:System.Threading.TimerCallback> delegate.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ObjectDisposedException">
          <span data-ttu-id="2f521-253">Объект <see cref="T:System.Threading.Timer" /> уже был удален.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2f521-253">The <see cref="T:System.Threading.Timer" /> has already been disposed.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <span data-ttu-id="2f521-254">Значение параметра <paramref name="dueTime" /> или <paramref name="period" /> меньше -1.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2f521-254">The <paramref name="dueTime" /> or <paramref name="period" /> parameter is less than -1.</span>
          </span>
        </exception>
        <exception cref="T:System.NotSupportedException">
          <span data-ttu-id="2f521-255">Значение параметра <paramref name="dueTime" /> или <paramref name="period" /> больше 4294967294.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2f521-255">The <paramref name="dueTime" /> or <paramref name="period" /> parameter is greater than 4294967294.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="Change">
      <MemberSignature Language="C#" Value="public bool Change (TimeSpan dueTime, TimeSpan period);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool Change(valuetype System.TimeSpan dueTime, valuetype System.TimeSpan period) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Timer.Change(System.TimeSpan,System.TimeSpan)" />
      <MemberSignature Language="VB.NET" Value="Public Function Change (dueTime As TimeSpan, period As TimeSpan) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool Change(TimeSpan dueTime, TimeSpan period);" />
      <MemberSignature Language="F#" Value="member this.Change : TimeSpan * TimeSpan -&gt; bool" Usage="timer.Change (dueTime, period)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Timer</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="dueTime" Type="System.TimeSpan" />
        <Parameter Name="period" Type="System.TimeSpan" />
      </Parameters>
      <Docs>
        <param name="dueTime">
          <span data-ttu-id="2f521-256">Объект <see cref="T:System.TimeSpan" />, представляющий количество времени, в миллисекундах, которое должно пройти до вызова метода ответного вызова при создании объекта <see cref="T:System.Threading.Timer" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2f521-256">A <see cref="T:System.TimeSpan" /> representing the amount of time to delay before invoking the callback method specified when the <see cref="T:System.Threading.Timer" /> was constructed.</span>
          </span>
          <span data-ttu-id="2f521-257">Следует задать минус одну (-1) миллисекунду для того, чтобы не допустить повторный запуск таймера.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2f521-257">Specify negative one (-1) milliseconds to prevent the timer from restarting.</span>
          </span>
          <span data-ttu-id="2f521-258">Задайте значение ноль (0) для немедленного перезапуска таймера.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2f521-258">Specify zero (0) to restart the timer immediately.</span>
          </span>
        </param>
        <param name="period">
          <span data-ttu-id="2f521-259">Временной интервал между вызовами метода обратного вызова, определенный в конструкторе объекта <see cref="T:System.Threading.Timer" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2f521-259">The time interval between invocations of the callback method specified when the <see cref="T:System.Threading.Timer" /> was constructed.</span>
          </span>
          <span data-ttu-id="2f521-260">Следует задать минус одну (-1) миллисекунду для отключения периодической сигнализации.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2f521-260">Specify negative one (-1) milliseconds to disable periodic signaling.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="2f521-261">Меняет время запуска и интервал межу вызовами метода таймера, используя значения объекта <see cref="T:System.TimeSpan" /> для измерения временных интервалов.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2f521-261">Changes the start time and the interval between method invocations for a timer, using <see cref="T:System.TimeSpan" /> values to measure time intervals.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="2f521-262">Значение <see langword="true" />, если таймер успешно обновлен; в противном случае — значение <see langword="false" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2f521-262">
              <see langword="true" /> if the timer was successfully updated; otherwise, <see langword="false" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="2f521-263">Метод обратного вызова вызывается один раз после `dueTime` истекает и затем каждый раз интервал времени, заданный в параметре `period` пройдет указанное время.</span><span class="sxs-lookup"><span data-stu-id="2f521-263">The callback method is invoked once after `dueTime` elapses, and thereafter each time the time interval specified by `period` elapses.</span></span>  
  
 <span data-ttu-id="2f521-264">Если `dueTime` равно нулю (0), немедленно вызывается метод обратного вызова.</span><span class="sxs-lookup"><span data-stu-id="2f521-264">If `dueTime` is zero (0), the callback method is invoked immediately.</span></span> <span data-ttu-id="2f521-265">Если `dueTime` равен-1, метод обратного вызова не вызывается; таймер отключен, но можно включить путем вызова <xref:System.Threading.Timer.Change%2A> и указав положительное значение для `dueTime`.</span><span class="sxs-lookup"><span data-stu-id="2f521-265">If `dueTime` is negative one (-1) milliseconds, the callback method is never invoked; the timer is disabled, but can be re-enabled by calling <xref:System.Threading.Timer.Change%2A> and specifying a positive value for `dueTime`.</span></span>  
  
 <span data-ttu-id="2f521-266">Если `period` равен нулю (0) или минус один (-1) миллисекунду, и `dueTime` положительно, метод обратного вызова вызывается один раз; периодическое поведение таймера отключена, но можно включить путем вызова <xref:System.Threading.Timer.Change%2A> и указав значение больше ноль для `period`.</span><span class="sxs-lookup"><span data-stu-id="2f521-266">If `period` is zero (0) or negative one (-1) milliseconds, and `dueTime` is positive, the callback method is invoked once; the periodic behavior of the timer is disabled, but can be re-enabled by calling <xref:System.Threading.Timer.Change%2A> and specifying a value greater than zero for `period`.</span></span>  
  
 <span data-ttu-id="2f521-267"><xref:System.Threading.Timer.Change%2A> Метод может вызываться из <xref:System.Threading.TimerCallback> делегировать.</span><span class="sxs-lookup"><span data-stu-id="2f521-267">The <xref:System.Threading.Timer.Change%2A> method can be called from the <xref:System.Threading.TimerCallback> delegate.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="2f521-268">В следующем примере кода показано, как запустить `Timer` и после заданного количества вызовов, изменение периода.</span><span class="sxs-lookup"><span data-stu-id="2f521-268">The following code example demonstrates how to start a `Timer` and, after a set number of invocations, change its period.</span></span>  
  
 [!code-cpp[System.Threading.Timer2#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Threading.Timer2/CPP/source2.cpp#1)]
 [!code-csharp[System.Threading.Timer2#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Threading.Timer2/CS/source2.cs#1)]
 [!code-vb[System.Threading.Timer2#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Threading.Timer2/VB/source2.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ObjectDisposedException">
          <span data-ttu-id="2f521-269">Объект <see cref="T:System.Threading.Timer" /> уже был удален.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2f521-269">The <see cref="T:System.Threading.Timer" /> has already been disposed.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <span data-ttu-id="2f521-270">Значение параметра <paramref name="dueTime" /> или <paramref name="period" /> в миллисекундах меньше -1.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2f521-270">The <paramref name="dueTime" /> or <paramref name="period" /> parameter, in milliseconds, is less than -1.</span>
          </span>
        </exception>
        <exception cref="T:System.NotSupportedException">
          <span data-ttu-id="2f521-271">Значение параметра <paramref name="dueTime" /> или <paramref name="period" /> в миллисекундах больше 4294967294.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2f521-271">The <paramref name="dueTime" /> or <paramref name="period" /> parameter, in milliseconds, is greater than 4294967294.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="Change">
      <MemberSignature Language="C#" Value="public bool Change (uint dueTime, uint period);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool Change(unsigned int32 dueTime, unsigned int32 period) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Timer.Change(System.UInt32,System.UInt32)" />
      <MemberSignature Language="VB.NET" Value="Public Function Change (dueTime As UInteger, period As UInteger) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool Change(System::UInt32 dueTime, System::UInt32 period);" />
      <MemberSignature Language="F#" Value="member this.Change : uint32 * uint32 -&gt; bool" Usage="timer.Change (dueTime, period)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Timer</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="dueTime" Type="System.UInt32" />
        <Parameter Name="period" Type="System.UInt32" />
      </Parameters>
      <Docs>
        <param name="dueTime">
          <span data-ttu-id="2f521-272">Количество времени, в миллисекундах, которое должно пройти до вызова метода ответного вызова при создании объекта <see cref="T:System.Threading.Timer" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2f521-272">The amount of time to delay before the invoking the callback method specified when the <see cref="T:System.Threading.Timer" /> was constructed, in milliseconds.</span>
          </span>
          <span data-ttu-id="2f521-273">Следует задать поле <see cref="F:System.Threading.Timeout.Infinite" /> для того, чтобы не допустить повторный запуск таймера.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2f521-273">Specify <see cref="F:System.Threading.Timeout.Infinite" /> to prevent the timer from restarting.</span>
          </span>
          <span data-ttu-id="2f521-274">Задайте значение ноль (0) для немедленного перезапуска таймера.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2f521-274">Specify zero (0) to restart the timer immediately.</span>
          </span>
        </param>
        <param name="period">
          <span data-ttu-id="2f521-275">Временной интервал в миллисекундах между вызовами метода обратного вызова, определенный в конструкторе объекта <see cref="T:System.Threading.Timer" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2f521-275">The time interval between invocations of the callback method specified when the <see cref="T:System.Threading.Timer" /> was constructed, in milliseconds.</span>
          </span>
          <span data-ttu-id="2f521-276">Следует задать поле <see cref="F:System.Threading.Timeout.Infinite" /> для отключения периодической сигнализации.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2f521-276">Specify <see cref="F:System.Threading.Timeout.Infinite" /> to disable periodic signaling.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="2f521-277">Меняет время запуска и интервал между вызовами метода таймера, используя 32-разрядные целые числа без знака для измерения временных интервалов.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2f521-277">Changes the start time and the interval between method invocations for a timer, using 32-bit unsigned integers to measure time intervals.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="2f521-278">Значение <see langword="true" />, если таймер успешно обновлен; в противном случае — значение <see langword="false" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2f521-278">
              <see langword="true" /> if the timer was successfully updated; otherwise, <see langword="false" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="2f521-279">Метод обратного вызова вызывается один раз после `dueTime` истекает и затем каждый раз интервал времени, заданный в параметре `period` пройдет указанное время.</span><span class="sxs-lookup"><span data-stu-id="2f521-279">The callback method is invoked once after `dueTime` elapses, and thereafter each time the time interval specified by `period` elapses.</span></span>  
  
 <span data-ttu-id="2f521-280">Если `dueTime` равно нулю (0), немедленно вызывается метод обратного вызова.</span><span class="sxs-lookup"><span data-stu-id="2f521-280">If `dueTime` is zero (0), the callback method is invoked immediately.</span></span> <span data-ttu-id="2f521-281">Если `dueTime` — <xref:System.Threading.Timeout.Infinite?displayProperty=nameWithType>, метод обратного вызова не вызывается; таймер отключен, но можно включить путем вызова <xref:System.Threading.Timer.Change%2A> и указав положительное значение для `dueTime`.</span><span class="sxs-lookup"><span data-stu-id="2f521-281">If `dueTime` is <xref:System.Threading.Timeout.Infinite?displayProperty=nameWithType>, the callback method is never invoked; the timer is disabled, but can be re-enabled by calling <xref:System.Threading.Timer.Change%2A> and specifying a positive value for `dueTime`.</span></span>  
  
 <span data-ttu-id="2f521-282">Если `period` равно нулю (0) или <xref:System.Threading.Timeout.Infinite?displayProperty=nameWithType>, и `dueTime` не <xref:System.Threading.Timeout.Infinite?displayProperty=nameWithType>, метод обратного вызова вызывается один раз; периодическое поведение таймера отключена, но можно включить путем вызова <xref:System.Threading.Timer.Change%2A> и указав положительное значение для `period`.</span><span class="sxs-lookup"><span data-stu-id="2f521-282">If `period` is zero (0) or <xref:System.Threading.Timeout.Infinite?displayProperty=nameWithType>, and `dueTime` is not <xref:System.Threading.Timeout.Infinite?displayProperty=nameWithType>, the callback method is invoked once; the periodic behavior of the timer is disabled, but can be re-enabled by calling <xref:System.Threading.Timer.Change%2A> and specifying a positive value for `period`.</span></span>  
  
 <span data-ttu-id="2f521-283"><xref:System.Threading.Timer.Change%2A> Метод может вызываться из <xref:System.Threading.TimerCallback> делегировать.</span><span class="sxs-lookup"><span data-stu-id="2f521-283">The <xref:System.Threading.Timer.Change%2A> method can be called from the <xref:System.Threading.TimerCallback> delegate.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ObjectDisposedException">
          <span data-ttu-id="2f521-284">Объект <see cref="T:System.Threading.Timer" /> уже был удален.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2f521-284">The <see cref="T:System.Threading.Timer" /> has already been disposed.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <MemberGroup MemberName="Dispose">
      <AssemblyInfo>
        <AssemblyName>System.Threading.Timer</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="2f521-285">Освобождает все ресурсы, используемые экземпляром класса <see cref="T:System.Threading.Timer" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2f521-285">Releases all resources used by the current instance of <see cref="T:System.Threading.Timer" />.</span>
          </span>
        </summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Dispose">
      <MemberSignature Language="C#" Value="public void Dispose ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Dispose() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Timer.Dispose" />
      <MemberSignature Language="VB.NET" Value="Public Sub Dispose ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void Dispose();" />
      <MemberSignature Language="F#" Value="abstract member Dispose : unit -&gt; unit&#xA;override this.Dispose : unit -&gt; unit" Usage="timer.Dispose " />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.IDisposable.Dispose</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Timer</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="2f521-286">Освобождает все ресурсы, используемые экземпляром класса <see cref="T:System.Threading.Timer" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2f521-286">Releases all resources used by the current instance of <see cref="T:System.Threading.Timer" />.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="2f521-287">Вызов `Dispose` позволяет ресурсы, используемые <xref:System.Threading.Timer> перераспределить для других целей.</span><span class="sxs-lookup"><span data-stu-id="2f521-287">Calling `Dispose` allows the resources used by the <xref:System.Threading.Timer> to be reallocated for other purposes.</span></span> <span data-ttu-id="2f521-288">Дополнительные сведения о `Dispose`, см. в разделе [очистки неуправляемых ресурсов](~/docs/standard/garbage-collection/unmanaged.md).</span><span class="sxs-lookup"><span data-stu-id="2f521-288">For more information about `Dispose`, see [Cleaning Up Unmanaged Resources](~/docs/standard/garbage-collection/unmanaged.md).</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="2f521-289">Обратные вызовы может возникнуть после <xref:System.Threading.Timer.Dispose> перегруженный метод был вызван, так как таймер ставит в очередь обратные вызовы для выполнения по потокам пулов потоков.</span><span class="sxs-lookup"><span data-stu-id="2f521-289">Callbacks can occur after the <xref:System.Threading.Timer.Dispose> method overload has been called, because the timer queues callbacks for execution by thread pool threads.</span></span> <span data-ttu-id="2f521-290">Можно использовать <xref:System.Threading.Timer.Dispose%28System.Threading.WaitHandle%29> перегруженный метод для ожидания до завершения всех ответных вызовов.</span><span class="sxs-lookup"><span data-stu-id="2f521-290">You can use the <xref:System.Threading.Timer.Dispose%28System.Threading.WaitHandle%29> method overload to wait until all callbacks have completed.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="2f521-291">В следующем примере кода показано, как освободить ресурсы, удерживаемые `Timer`.</span><span class="sxs-lookup"><span data-stu-id="2f521-291">The following code example shows how to free the resources held by a `Timer`.</span></span>  
  
 [!code-cpp[System.Threading.Timer#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Threading.Timer/CPP/source.cpp#1)]
 [!code-csharp[System.Threading.Timer#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Threading.Timer/CS/source.cs#1)]
 [!code-vb[System.Threading.Timer#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Threading.Timer/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Dispose">
      <MemberSignature Language="C#" Value="public bool Dispose (System.Threading.WaitHandle notifyObject);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool Dispose(class System.Threading.WaitHandle notifyObject) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Timer.Dispose(System.Threading.WaitHandle)" />
      <MemberSignature Language="VB.NET" Value="Public Function Dispose (notifyObject As WaitHandle) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool Dispose(System::Threading::WaitHandle ^ notifyObject);" />
      <MemberSignature Language="F#" Value="member this.Dispose : System.Threading.WaitHandle -&gt; bool" Usage="timer.Dispose notifyObject" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Timer</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="notifyObject" Type="System.Threading.WaitHandle" />
      </Parameters>
      <Docs>
        <param name="notifyObject">
          <span data-ttu-id="2f521-292">Объект <see cref="T:System.Threading.WaitHandle" />, который должен получить сигнал при удалении объекта <see langword="Timer" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2f521-292">The <see cref="T:System.Threading.WaitHandle" /> to be signaled when the <see langword="Timer" /> has been disposed of.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="2f521-293">Освобождает все ресурсы, используемые текущим экземпляром класса <see cref="T:System.Threading.Timer" /> и передает сигнал, когда таймер удаляется.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2f521-293">Releases all resources used by the current instance of <see cref="T:System.Threading.Timer" /> and signals when the timer has been disposed of.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="2f521-294">
            <see langword="true" />, если функция выполнилась успешно; в противном случае — <see langword="false" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2f521-294">
              <see langword="true" /> if the function succeeds; otherwise, <see langword="false" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="2f521-295">Вызов `Dispose` позволяет ресурсы, используемые <xref:System.Threading.Timer> перераспределить для других целей.</span><span class="sxs-lookup"><span data-stu-id="2f521-295">Calling `Dispose` allows the resources used by the <xref:System.Threading.Timer> to be reallocated for other purposes.</span></span> <span data-ttu-id="2f521-296">Дополнительные сведения о `Dispose`, см. в разделе [очистки неуправляемых ресурсов](~/docs/standard/garbage-collection/unmanaged.md).</span><span class="sxs-lookup"><span data-stu-id="2f521-296">For more information about `Dispose`, see [Cleaning Up Unmanaged Resources](~/docs/standard/garbage-collection/unmanaged.md).</span></span>  
  
 <span data-ttu-id="2f521-297">После завершения этого метода, он сообщает о <xref:System.Threading.WaitHandle> определяется `notifyObject` параметра. Используйте эту перегрузку <xref:System.Threading.Timer.Dispose%2A> метод, если вы хотите иметь возможность заблокировать, пока не будете уверены, что таймер был удален.</span><span class="sxs-lookup"><span data-stu-id="2f521-297">When this method completes, it signals the <xref:System.Threading.WaitHandle> specified by the `notifyObject` parameter.Use this overload of the <xref:System.Threading.Timer.Dispose%2A> method if you want to be able to block until you are certain that the timer has been disposed.</span></span> <span data-ttu-id="2f521-298">Таймер не удаляется до завершения всех обратных вызовов в очереди.</span><span class="sxs-lookup"><span data-stu-id="2f521-298">The timer is not disposed until all currently queued callbacks have completed.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="2f521-299">Если обратный вызов использует <xref:System.Threading.Timer.Change%2A> метод, чтобы задать `dueTime` параметра равным нулю, может возникнуть состояние гонки при <xref:System.Threading.Timer.Dispose%28System.Threading.WaitHandle%29> вызывается перегрузка метода: Если таймер ставит в очередь новые обратного вызова перед <xref:System.Threading.Timer.Dispose%28System.Threading.WaitHandle%29> перегрузку метода обнаруживает, что существует Нет обратных вызовов поставлены в очередь, <xref:System.Threading.Timer.Dispose%28System.Threading.WaitHandle%29> продолжает блокировать; в противном случае таймер удаляется, хотя новый обратный вызов помещается в очередь и это <xref:System.ObjectDisposedException> возникает, когда новый обратного вызова вызывает <xref:System.Threading.Timer.Change%2A> метод.</span><span class="sxs-lookup"><span data-stu-id="2f521-299">If the callback uses the <xref:System.Threading.Timer.Change%2A> method to set the `dueTime` parameter to zero, a race condition can occur when the <xref:System.Threading.Timer.Dispose%28System.Threading.WaitHandle%29> method overload is called: If the timer queues a new callback before the <xref:System.Threading.Timer.Dispose%28System.Threading.WaitHandle%29> method overload detects that there are no callbacks queued, <xref:System.Threading.Timer.Dispose%28System.Threading.WaitHandle%29> continues to block; otherwise, the timer is disposed while the new callback is being queued, and an <xref:System.ObjectDisposedException> is thrown when the new callback calls the <xref:System.Threading.Timer.Change%2A> method.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="2f521-300">Параметр <paramref name="notifyObject" /> имеет значение <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2f521-300">The <paramref name="notifyObject" /> parameter is <see langword="null" />.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="Finalize">
      <MemberSignature Language="C#" Value="~Timer ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance void Finalize() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Timer.Finalize" />
      <MemberSignature Language="VB.NET" Value="Finalize ()" />
      <MemberSignature Language="C++ CLI" Value="!Timer ()" />
      <MemberSignature Language="F#" Value="override this.Finalize : unit -&gt; unit" Usage="timer.Finalize " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
  </Members>
</Type>