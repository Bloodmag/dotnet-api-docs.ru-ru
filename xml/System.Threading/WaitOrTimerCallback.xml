<Type Name="WaitOrTimerCallback" FullName="System.Threading.WaitOrTimerCallback">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="b5d797b515515af78c99d7bae5dc98c881fba73b" />
    <Meta Name="ms.sourcegitcommit" Value="d31dc2ede16f6f7bc64e90d9f897ff54c4e3869b" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="ru-RU" />
    <Meta Name="ms.lasthandoff" Value="04/03/2018" />
  </Metadata>
  <TypeSignature Language="C#" Value="public delegate void WaitOrTimerCallback(object state, bool timedOut);" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed WaitOrTimerCallback extends System.MulticastDelegate" />
  <TypeSignature Language="DocId" Value="T:System.Threading.WaitOrTimerCallback" />
  <TypeSignature Language="VB.NET" Value="Public Delegate Sub WaitOrTimerCallback(state As Object, timedOut As Boolean)" />
  <TypeSignature Language="C++ CLI" Value="public delegate void WaitOrTimerCallback(System::Object ^ state, bool timedOut);" />
  <AssemblyInfo>
    <AssemblyName>System.Threading.ThreadPool</AssemblyName>
    <AssemblyVersion>4.0.10.0</AssemblyVersion>
    <AssemblyVersion>4.1.0.0</AssemblyVersion>
    <AssemblyVersion>4.1.1.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>mscorlib</AssemblyName>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Delegate</BaseTypeName>
  </Base>
  <Attributes>
    <Attribute>
      <AttributeName>System.Runtime.InteropServices.ComVisible(true)</AttributeName>
    </Attribute>
  </Attributes>
  <Parameters>
    <Parameter Name="state" Type="System.Object" />
    <Parameter Name="timedOut" Type="System.Boolean" />
  </Parameters>
  <ReturnValue>
    <ReturnType>System.Void</ReturnType>
  </ReturnValue>
  <Docs>
    <param name="state">
      <span data-ttu-id="a07c9-101">Объект, содержащий информацию, используемую всякий раз методом обратного вызова при каждом выполнении.</span>
      <span class="sxs-lookup">
        <span data-stu-id="a07c9-101">An object containing information to be used by the callback method each time it executes.</span>
      </span>
    </param>
    <param name="timedOut">
      <span data-ttu-id="a07c9-102">Значение <see langword="true" />, если истекло время ожидания объекта <see cref="T:System.Threading.WaitHandle" />; <see langword="false" />, если объект получил сигнал.</span>
      <span class="sxs-lookup">
        <span data-stu-id="a07c9-102">
          <see langword="true" /> if the <see cref="T:System.Threading.WaitHandle" /> timed out; <see langword="false" /> if it was signaled.</span>
      </span>
    </param>
    <summary>
      <span data-ttu-id="a07c9-103">Представляет метод, который вызывается при получении объектом <see cref="T:System.Threading.WaitHandle" /> сигнала или истечении времени ожидания.</span>
      <span class="sxs-lookup">
        <span data-stu-id="a07c9-103">Represents a method to be called when a <see cref="T:System.Threading.WaitHandle" /> is signaled or times out.</span>
      </span>
    </summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="a07c9-104"><xref:System.Threading.WaitOrTimerCallback> Представляет метод обратного вызова, который должен выполняться при дескриптора ожидания зарегистрированного времени ожидания или получает сигнал.</span><span class="sxs-lookup"><span data-stu-id="a07c9-104"><xref:System.Threading.WaitOrTimerCallback> represents a callback method that you want to execute when a registered wait handle times out or is signaled.</span></span> <span data-ttu-id="a07c9-105">Этот делегат можно создать путем передачи в метод обратного вызова <xref:System.Threading.WaitOrTimerCallback> конструктор.</span><span class="sxs-lookup"><span data-stu-id="a07c9-105">Create the delegate by passing your callback method to the <xref:System.Threading.WaitOrTimerCallback> constructor.</span></span> <span data-ttu-id="a07c9-106">Метод должен иметь сигнатуру, показано ниже.</span><span class="sxs-lookup"><span data-stu-id="a07c9-106">Your method must have the signature shown here.</span></span>  
  
 <span data-ttu-id="a07c9-107">Создать зарегистрированный ожидающий дескриптор, передав <xref:System.Threading.WaitOrTimerCallback> делегата и <xref:System.Threading.WaitHandle> для <xref:System.Threading.ThreadPool.RegisterWaitForSingleObject%2A?displayProperty=nameWithType>.</span><span class="sxs-lookup"><span data-stu-id="a07c9-107">Create the registered wait handle by passing the <xref:System.Threading.WaitOrTimerCallback> delegate and a <xref:System.Threading.WaitHandle> to <xref:System.Threading.ThreadPool.RegisterWaitForSingleObject%2A?displayProperty=nameWithType>.</span></span> <span data-ttu-id="a07c9-108">Данный метод обратного вызова выполняется каждый раз <xref:System.Threading.WaitHandle> времени ожидания или получает сигнал.</span><span class="sxs-lookup"><span data-stu-id="a07c9-108">Your callback method executes each time the <xref:System.Threading.WaitHandle> times out or is signaled.</span></span>  
  
  
> [!NOTE]
>  <span data-ttu-id="a07c9-109">Пользователи Visual Basic могут опускать <xref:System.Threading.WaitOrTimerCallback> конструктор и просто использовать `AddressOf` оператор при передаче в метод обратного вызова, <xref:System.Threading.ThreadPool.RegisterWaitForSingleObject%2A>.</span><span class="sxs-lookup"><span data-stu-id="a07c9-109">Visual Basic users can omit the <xref:System.Threading.WaitOrTimerCallback> constructor, and simply use the `AddressOf` operator when passing the callback method to <xref:System.Threading.ThreadPool.RegisterWaitForSingleObject%2A>.</span></span> <span data-ttu-id="a07c9-110">Visual Basic автоматически вызывает соответствующий конструктор делегата.</span><span class="sxs-lookup"><span data-stu-id="a07c9-110">Visual Basic automatically calls the correct delegate constructor.</span></span>  
  
 <span data-ttu-id="a07c9-111">Если требуется передать информацию в метод обратного вызова, создайте объект, который содержит необходимые сведения и передать его в <xref:System.Threading.ThreadPool.RegisterWaitForSingleObject%2A> при создании зарегистрированного ожидающего дескриптора.</span><span class="sxs-lookup"><span data-stu-id="a07c9-111">If you want to pass information to your callback method, create an object that contains the necessary information and pass it to <xref:System.Threading.ThreadPool.RegisterWaitForSingleObject%2A> when you create the registered wait handle.</span></span> <span data-ttu-id="a07c9-112">Каждый раз, метод обратного вызова выполняется, `state` параметр содержит этот объект.</span><span class="sxs-lookup"><span data-stu-id="a07c9-112">Each time your callback method executes, the `state` parameter contains this object.</span></span>  
  
 <span data-ttu-id="a07c9-113">Дополнительные сведения об использовании методов обратного вызова для синхронизации потоков пула см. в разделе [пул управляемых потоков](~/docs/standard/threading/the-managed-thread-pool.md).</span><span class="sxs-lookup"><span data-stu-id="a07c9-113">For more information about using callback methods to synchronize thread pool threads, see [The Managed Thread Pool](~/docs/standard/threading/the-managed-thread-pool.md).</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="a07c9-114">В следующем примере показано, как использовать <xref:System.Threading.WaitOrTimerCallback> делегата, представляющего метод обратного вызова, который выполняется при дескриптором ожидания.</span><span class="sxs-lookup"><span data-stu-id="a07c9-114">The following example shows how to use the <xref:System.Threading.WaitOrTimerCallback> delegate to represent a callback method that is executed when a wait handle is signaled.</span></span>  
  
 <span data-ttu-id="a07c9-115">В примере также показано использование <xref:System.Threading.ThreadPool.RegisterWaitForSingleObject%2A> для выполнения указанный метод обратного вызова, когда сигнал дескриптор ожидания, указанного метода.</span><span class="sxs-lookup"><span data-stu-id="a07c9-115">The example also shows how to use the <xref:System.Threading.ThreadPool.RegisterWaitForSingleObject%2A> method to execute a specified callback method when a specified wait handle is signaled.</span></span> <span data-ttu-id="a07c9-116">В этом примере метод обратного вызова является `WaitProc` и дескриптора ожидания <xref:System.Threading.AutoResetEvent>.</span><span class="sxs-lookup"><span data-stu-id="a07c9-116">In this example, the callback method is `WaitProc` and the wait handle is an <xref:System.Threading.AutoResetEvent>.</span></span>  
  
 <span data-ttu-id="a07c9-117">В примере определяется `TaskInfo` класс для хранения информации, который передается функции обратного вызова при его выполнении.</span><span class="sxs-lookup"><span data-stu-id="a07c9-117">The example defines a `TaskInfo` class to hold the information that is passed to the callback when it executes.</span></span> <span data-ttu-id="a07c9-118">В примере создается `TaskInfo` объекта и присваивает его некоторых строковых данных.</span><span class="sxs-lookup"><span data-stu-id="a07c9-118">The example creates a `TaskInfo` object and assigns it some string data.</span></span> <span data-ttu-id="a07c9-119"><xref:System.Threading.RegisteredWaitHandle> , Возвращаемый <xref:System.Threading.ThreadPool.RegisterWaitForSingleObject%2A> назначен метод `Handle` поле `TaskInfo` объекта, чтобы метод обратного вызова имеет доступ к <xref:System.Threading.RegisteredWaitHandle>.</span><span class="sxs-lookup"><span data-stu-id="a07c9-119">The <xref:System.Threading.RegisteredWaitHandle> that is returned by the <xref:System.Threading.ThreadPool.RegisterWaitForSingleObject%2A> method is assigned to the `Handle` field of the `TaskInfo` object, so that the callback method has access to the <xref:System.Threading.RegisteredWaitHandle>.</span></span>  
  
 <span data-ttu-id="a07c9-120">В дополнение к `TaskInfo` объекта, вызов <xref:System.Threading.ThreadPool.RegisterWaitForSingleObject%2A> указывает метод <xref:System.Threading.AutoResetEvent> ожидает задачу, <xref:System.Threading.WaitOrTimerCallback> делегат, который представляет `WaitProc` метод обратного вызова, нескольких обратных вызовов и интервал времени ожидания в секунду .</span><span class="sxs-lookup"><span data-stu-id="a07c9-120">In addition to the `TaskInfo` object, the call to the <xref:System.Threading.ThreadPool.RegisterWaitForSingleObject%2A> method specifies the <xref:System.Threading.AutoResetEvent> the task waits on, a <xref:System.Threading.WaitOrTimerCallback> delegate that represents the `WaitProc` callback method, a one-second timeout interval, and multiple callbacks.</span></span>  
  
 <span data-ttu-id="a07c9-121">Когда главный поток сигнализирует <xref:System.Threading.AutoResetEvent> путем вызова его <xref:System.Threading.EventWaitHandle.Set%2A> метод, <xref:System.Threading.WaitOrTimerCallback> вызове делегата.</span><span class="sxs-lookup"><span data-stu-id="a07c9-121">When the main thread signals the <xref:System.Threading.AutoResetEvent> by calling its <xref:System.Threading.EventWaitHandle.Set%2A> method, the <xref:System.Threading.WaitOrTimerCallback> delegate is invoked.</span></span> <span data-ttu-id="a07c9-122">`WaitProc` Тесты метод <xref:System.Threading.RegisteredWaitHandle> для определения, истекло ли время ожидания.</span><span class="sxs-lookup"><span data-stu-id="a07c9-122">The `WaitProc` method tests <xref:System.Threading.RegisteredWaitHandle> to determine whether a timeout occurred.</span></span> <span data-ttu-id="a07c9-123">Если был вызван обратный вызов был сигнал дескриптору ожидания, `WaitProc` отменяет регистрацию метод <xref:System.Threading.RegisteredWaitHandle>, остановлена обратных вызовов.</span><span class="sxs-lookup"><span data-stu-id="a07c9-123">If the callback was invoked because the wait handle was signaled, the `WaitProc` method unregisters the <xref:System.Threading.RegisteredWaitHandle>, stopping further callbacks.</span></span> <span data-ttu-id="a07c9-124">В случае истечения времени ожидания задача продолжает ожидание.</span><span class="sxs-lookup"><span data-stu-id="a07c9-124">In the case of a timeout, the task continues waiting.</span></span> <span data-ttu-id="a07c9-125">`WaitProc` Метод завершает сообщение в окно консоли.</span><span class="sxs-lookup"><span data-stu-id="a07c9-125">The `WaitProc` method ends by printing a message to the console.</span></span>  
  
 [!code-cpp[System.Threading.ThreadPool RegisterWaitForSingleObject0#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Threading.ThreadPool RegisterWaitForSingleObject0/CPP/source.cpp#1)]
 [!code-csharp[System.Threading.ThreadPool RegisterWaitForSingleObject0#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Threading.ThreadPool RegisterWaitForSingleObject0/CS/source.cs#1)]
 [!code-vb[System.Threading.ThreadPool RegisterWaitForSingleObject0#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Threading.ThreadPool RegisterWaitForSingleObject0/VB/source.vb#1)]  
  
 ]]></format>
    </remarks>
  </Docs>
</Type>