<Type Name="Timer" FullName="System.Timers.Timer">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="618b69c9a4d91151391fe5e2c79054e0441f4aec" />
    <Meta Name="ms.sourcegitcommit" Value="d31dc2ede16f6f7bc64e90d9f897ff54c4e3869b" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="ru-RU" />
    <Meta Name="ms.lasthandoff" Value="04/03/2018" />
    <Meta Name="ms.locfileid" Value="30530808" />
  </Metadata>
  <TypeSignature Language="C#" Value="public class Timer : System.ComponentModel.Component, System.ComponentModel.ISupportInitialize" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit Timer extends System.ComponentModel.Component implements class System.ComponentModel.ISupportInitialize" />
  <TypeSignature Language="DocId" Value="T:System.Timers.Timer" />
  <TypeSignature Language="VB.NET" Value="Public Class Timer&#xA;Inherits Component&#xA;Implements ISupportInitialize" />
  <TypeSignature Language="C++ CLI" Value="public ref class Timer : System::ComponentModel::Component, System::ComponentModel::ISupportInitialize" />
  <AssemblyInfo>
    <AssemblyName>System</AssemblyName>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>System.ComponentModel.TypeConverter</AssemblyName>
    <AssemblyVersion>4.2.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.1.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.ComponentModel.Component</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>System.ComponentModel.ISupportInitialize</InterfaceName>
    </Interface>
  </Interfaces>
  <Attributes>
    <Attribute>
      <AttributeName>System.ComponentModel.DefaultEvent("Elapsed")</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName>System.ComponentModel.DefaultProperty("Interval")</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>Создает событие после заданного интервала с возможностью создания повторяющихся событий.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Timers.Timer> Компонент является серверным таймер, который вызывает <xref:System.Timers.Timer.Elapsed> событие в приложении после количество миллисекунд в <xref:System.Timers.Timer.Interval%2A> свойстве. Можно настроить <xref:System.Timers.Timer> объект для вызова события только один раз или несколько раз с помощью <xref:System.Timers.Timer.AutoReset%2A> свойство. Как правило <xref:System.Timers.Timer> объект объявлен на уровне класса, чтобы оно оставалось в области, при условии, что он необходим. Затем можно обработать его <xref:System.Timers.Timer.Elapsed> событие, чтобы обеспечить обработку. Например, предположим, имеется важный сервер, который должен храниться 24 часа в сутки, 7 дней в неделю. Можно создать службу, использующую <xref:System.Timers.Timer> объект периодически Проверьте сервер и убедитесь, что система работает. Если система не отвечает, служба может попытаться перезапустить сервер или уведомить администратора.  
  
> [!IMPORTANT]
> <xref:System.Timers.Timer> Класс доступен не для всех реализаций .NET и версии, например стандартных .NET версии 1.6 и более ранних версиях.
> В этих случаях можно использовать <xref:System.Threading.Timer?displayProperty=nameWithType> вместо этого класс.
  
 Этот тип реализует <xref:System.IDisposable> интерфейса. После завершения с помощью типа следует освободить его прямо или косвенно. Для удаления типа непосредственно вызвать его <xref:System.IDisposable.Dispose%2A> метод в `try` / `catch` блока. Чтобы удалить ее косвенно, использовать языковой конструкции, такие как `using` (в C#) или `Using` (в Visual Basic). Дополнительные сведения см. в разделе «С помощью объекта, реализует интерфейс IDisposable» в <xref:System.IDisposable> разделе интерфейса.  
  
 Сервер под управлением <xref:System.Timers.Timer?displayProperty=nameWithType> класс предназначен для использования с рабочими потоками в многопоточной среде. Серверные таймеры могут перемещаться между потоками для обработки возникающих <xref:System.Timers.Timer.Elapsed> события, возникающие в большую точность, чем таймеры Windows в вызове событий по времени.  
  
 <xref:System.Timers.Timer?displayProperty=nameWithType> Компонент создает <xref:System.Timers.Timer.Elapsed> события, в зависимости от значение (в миллисекундах) <xref:System.Timers.Timer.Interval%2A> свойство. Можно обработать это событие для выполнения обработки, что нужно. Например предположим, что имеется приложение электронной коммерции, непрерывно регистрирующее заказов на продажу в базу данных. Служба, составляющая инструкции по доставке обрабатывает пакет заказов, а не по отдельности. Можно использовать <xref:System.Timers.Timer> для начала пакетной обработки данных каждые 30 минут.  
  
> [!IMPORTANT]
>  Класс System.Timers.Timer имеет тем же разрешением, что системных часов. Это означает, что <xref:System.Timers.Timer.Elapsed> с интервалом, заданным путем разрешения системных часов, если активизируется событие <xref:System.Timers.Timer.Interval%2A> свойства меньше, чем разрешения системных часов. Дополнительные сведения см. в описании свойства <xref:System.Timers.Timer.Interval%2A>.  
  
 Когда <xref:System.Timers.Timer.AutoReset%2A> задано значение `false`, <xref:System.Timers.Timer?displayProperty=nameWithType> объекта вызывает <xref:System.Timers.Timer.Elapsed> событий только один раз после первого <xref:System.Timers.Timer.Interval%2A> прошло. Чтобы поддерживать вызов <xref:System.Timers.Timer.Elapsed> событий регулярно в интервал, заданный <xref:System.Timers.Timer.Interval%2A>, задайте <xref:System.Timers.Timer.AutoReset%2A> для `true`, который является значением по умолчанию.  
  
 <xref:System.Timers.Timer> Компонент перехватывает и подавляет все исключения, созданные обработчики событий для <xref:System.Timers.Timer.Elapsed> события. Это поведение может измениться в будущих выпусков платформы .NET Framework. Обратите внимание, что это не относится обработчиков событий, которые выполняются асинхронно и включают `await` оператора (в C#) или `Await` оператора (в Visual Basic). Исключения, создаваемые в эти обработчики событий, распространяются обратно в вызывающий поток, как показано в следующем примере. Дополнительные сведения о исключений в асинхронных методах см. в разделе [обработка исключений](~/docs/standard/parallel-programming/exception-handling-task-parallel-library.md).  
  
 [!code-csharp[System.Timers.Timer#3](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.timers.timer/cs/AsyncHandlerEx1.cs#3)]
 [!code-vb[System.Timers.Timer#3](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.timers.timer/vb/AsyncHandlerEx1.vb#3)]  
  
 Если <xref:System.Timers.Timer.SynchronizingObject%2A> свойство `null`, <xref:System.Timers.Timer.Elapsed> событие <xref:System.Threading.ThreadPool> потока. Если обработка <xref:System.Timers.Timer.Elapsed> больше времени, чем время события <xref:System.Timers.Timer.Interval%2A>, может быть снова вызывать событие на другом <xref:System.Threading.ThreadPool> потока. В этом случае обработчик событий должен быть реентерабельным.  
  
> [!NOTE]
>  Метод обработки событий может выполняться в одном потоке, в то же время, другой поток вызывает <xref:System.Timers.Timer.Stop%2A> метода или наборы <xref:System.Timers.Timer.Enabled%2A> свойства `false`. Это может привести к <xref:System.Timers.Timer.Elapsed> события после остановки таймера. Пример кода для <xref:System.Timers.Timer.Stop%2A> метод показывает один из способов избежать состояния гонок.  
  
 Даже если <xref:System.Timers.Timer.SynchronizingObject%2A> не `null`, <xref:System.Timers.Timer.Elapsed> события могут происходить после <xref:System.Timers.Timer.Dispose%2A> или <xref:System.Timers.Timer.Stop%2A> был вызван метод или после <xref:System.Timers.Timer.Enabled%2A> свойство значение `false`, так как сигнал для вызова <xref:System.Timers.Timer.Elapsed> событий всегда помещается в очередь для выполнения в потоке пула потоков. Один из способов устранения этой ситуации состязания является задать флаг, который определяет обработчик событий для <xref:System.Timers.Timer.Elapsed> событие, чтобы игнорировать последующие события.  
  
 При использовании <xref:System.Timers.Timer?displayProperty=nameWithType> назначить класс с элементом пользовательского интерфейса, таких как формы или элемента управления, не помещая таймера этого элемента пользовательского интерфейса формы или элемента управления, содержащего <xref:System.Timers.Timer> для <xref:System.Timers.Timer.SynchronizingObject%2A> свойства, таким образом, события маршалинг которого в потоке пользовательского интерфейса.  
  
 Список значений свойства по умолчанию для экземпляра <xref:System.Timers.Timer>, в разделе <xref:System.Timers.Timer.%23ctor%2A> конструктор.  
  
> [!TIP]
>  Имейте в виду, что .NET включает четыре класса с именем `Timer`, каждый из который предоставляет различные функциональные возможности:  
>   
> - <xref:System.Timers.Timer?displayProperty=nameWithType> (этот раздел): вызывает событие через определенные интервалы. Класс предназначен для использования в качестве сервера под управлением или компонент службы в многопоточной среде; он не имеет пользовательского интерфейса и не отображается во время выполнения.  
> - <xref:System.Threading.Timer?displayProperty=nameWithType>: выполняет метод обратного вызова один поток из пула потоков через регулярные интервалы. Метод обратного вызова определяется, когда таймер создается и не может быть изменено. Как <xref:System.Timers.Timer?displayProperty=nameWithType> класса, этот класс предназначен для использования в качестве компонента сервера или службы в многопоточной среде; он не имеет пользовательского интерфейса и не отображается во время выполнения.  
> - <xref:System.Windows.Forms.Timer?displayProperty=nameWithType> (Только в .NET framework): компонент Windows Forms, который вызывает событие через определенные интервалы. Компонент не имеет пользовательского интерфейса и предназначены для использования в среде с одним потоком.  
> - <xref:System.Web.UI.Timer?displayProperty=nameWithType> (Только в .NET framework): это компонент ASP.NET, который выполняет обратную передачу асинхронный или синхронный веб-страницы через равные промежутки времени.  

## Examples  
 В следующем примере создается `System.Timers.Timer` объект, который запускает его <xref:System.Timers.Timer.Elapsed?displayProperty=nameWithType> событий каждые две секунды (2 000 миллисекунд), задает обработчик события для события и запускает таймер. Обработчик событий выводит значение <xref:System.Timers.ElapsedEventArgs.SignalTime%2A?displayProperty=nameWithType> свойство каждый раз, оно создается.  
  
 [!code-csharp[System.Timers.Timer#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.timers.timer/cs/timer2a.cs#2)]
 [!code-vb[System.Timers.Timer#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.timers.timer/vb/timer2a.vb#2)]  
  
 ]]></format>
    </remarks>
    <threadsafe>Любые открытые <see langword="static" /> члены этого типа являются потокобезопасными. Потокобезопасность членов экземпляров не гарантируется.</threadsafe>
    <altmember cref="P:System.Timers.Timer.AutoReset" />
    <altmember cref="P:System.Timers.Timer.Interval" />
    <altmember cref="E:System.Timers.Timer.Elapsed" />
    <altmember cref="M:System.Timers.Timer.#ctor" />
    <altmember cref="T:System.Threading.Timer" />
  </Docs>
  <Members>
    <MemberGroup MemberName=".ctor">
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Инициализирует новый экземпляр класса <see cref="T:System.Timers.Timer" />.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public Timer ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Timers.Timer.#ctor" />
      <MemberSignature Language="VB.NET" Value="Public Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; Timer();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.ComponentModel.TypeConverter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary>Инициализирует новый экземпляр класса <see cref="T:System.Timers.Timer" /> и задает всем свойствам начальные значения.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Следующей таблице представлены исходные значения свойств для экземпляра класса <xref:System.Timers.Timer>.  
  
|Свойство.|Исходное значение|  
|--------------|-------------------|  
|<xref:System.Timers.Timer.AutoReset%2A>|`true`|  
|<xref:System.Timers.Timer.Enabled%2A>|`false`|  
|<xref:System.Timers.Timer.Interval%2A>|100 миллисекунд|  
|<xref:System.Timers.Timer.SynchronizingObject%2A>|Пустая ссылка (`Nothing` в Visual Basic).|  
  
   
  
## Examples  
 В следующем примере создается <xref:System.Timers.Timer> объект, который запускает его <xref:System.Timers.Timer.Elapsed?displayProperty=nameWithType> событий каждые две секунды (2000 мс), задает обработчик события для события и запускает таймер. Обработчик событий выводит значение <xref:System.Timers.ElapsedEventArgs.SignalTime%2A?displayProperty=nameWithType> свойство каждый раз, оно создается.  
  
 [!code-cpp[System.Timers.Timer#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.timers.timer/cpp/timer1.cpp#1)]
 [!code-csharp[System.Timers.Timer#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.timers.timer/cs/timer1.cs#1)]
 [!code-vb[System.Timers.Timer#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.timers.timer/vb/timer1.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Timers.Timer.AutoReset" />
        <altmember cref="P:System.Timers.Timer.Enabled" />
        <altmember cref="P:System.Timers.Timer.Interval" />
        <altmember cref="P:System.Timers.Timer.SynchronizingObject" />
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public Timer (double interval);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(float64 interval) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Timers.Timer.#ctor(System.Double)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (interval As Double)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; Timer(double interval);" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.ComponentModel.TypeConverter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="interval" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="interval">Время между событиями в миллисекундах. Значение должно быть больше нуля и меньше или равно <see cref="F:System.Int32.MaxValue" />.</param>
        <summary>Инициализирует новый экземпляр класса <see cref="T:System.Timers.Timer" /> и задает свойству <see cref="P:System.Timers.Timer.Interval" /> указанное значение в миллисекундах.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Этот конструктор задает <xref:System.Timers.Timer.Interval%2A> свойства нового экземпляра таймера, но не включает таймер.  
  
   
  
## Examples  
 В следующем примере создается <xref:System.Timers.Timer> объект, который запускает его <xref:System.Timers.Timer.Elapsed?displayProperty=nameWithType> событий каждые две секунды (2000 мс), задает обработчик события для события и запускает таймер. Обработчик событий выводит значение <xref:System.Timers.ElapsedEventArgs.SignalTime%2A?displayProperty=nameWithType> свойство каждый раз, оно создается.  
  
 [!code-csharp[System.Timers.Timer#3](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.timers.timer/cs/AsyncHandlerEx1.cs#3)]
 [!code-vb[System.Timers.Timer#3](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.timers.timer/vb/AsyncHandlerEx1.vb#3)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">Значение параметра <paramref name="interval" /> меньше или равно нулю, или больше <see cref="F:System.Int32.MaxValue" />.</exception>
        <altmember cref="P:System.Timers.Timer.Interval" />
      </Docs>
    </Member>
    <Member MemberName="AutoReset">
      <MemberSignature Language="C#" Value="public bool AutoReset { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool AutoReset" />
      <MemberSignature Language="DocId" Value="P:System.Timers.Timer.AutoReset" />
      <MemberSignature Language="VB.NET" Value="Public Property AutoReset As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool AutoReset { bool get(); void set(bool value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.ComponentModel.TypeConverter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Category("Behavior")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(true)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Timers.TimersDescription("Indicates whether the timer will be restarted when it is enabled.")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Возвращает или задает логическое значение, определяющее, должен ли объект <see cref="T:System.Timers.Timer" /> вызывать событие <see cref="E:System.Timers.Timer.Elapsed" /> один раз (<see langword="false" />) или неоднократно (<see langword="true" />).</summary>
        <value>
          Значение <see langword="true" />, если объект <see cref="T:System.Timers.Timer" /> должен вызывать событие <see cref="E:System.Timers.Timer.Elapsed" /> каждый раз по истечении интервала времени; <see langword="false" />, если событие <see cref="E:System.Timers.Timer.Elapsed" /> следует вызвать только один раз, когда пройдет указанное время. Значение по умолчанию: <see langword="true" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Если <xref:System.Timers.Timer> уже включена при <xref:System.Timers.Timer.Start%2A> вызывается метод, интервал сбрасывается. Если <xref:System.Timers.Timer.AutoReset%2A> — `false`, <xref:System.Timers.Timer.Start%2A> необходимо вызвать метод, чтобы снова запустить счетчик.  
  
 Интервал сброса влияет при <xref:System.Timers.Timer.Elapsed> события. Например, если задать интервал, равный 5 секунд, а затем задать <xref:System.Timers.Timer.Enabled%2A> свойства `true`, счетчик начнется в момент <xref:System.Timers.Timer.Enabled%2A> имеет значение. Если сбросить интервал на 10 секунд, когда прошло 3 секунды <xref:System.Timers.Timer.Elapsed> событие вызывается в первый раз 13 секунд после <xref:System.Timers.Timer.Enabled%2A> было задано значение `true`.  
  
   
  
## Examples  
 В следующем примере создается <xref:System.Timers.Timer> которого <xref:System.Timers.Timer.Elapsed> событие срабатывает после 1,5 секунд. Для своего обработчика событий, затем отображается «Hello World!» на консоли.  
  
 [!code-cpp[Classic Timer.Timer1 Example#1](~/samples/snippets/cpp/VS_Snippets_CLR_Classic/classic Timer.Timer1 Example/CPP/source.cpp#1)]
 [!code-csharp[Classic Timer.Timer1 Example#1](~/samples/snippets/csharp/VS_Snippets_CLR_Classic/classic Timer.Timer1 Example/CS/source.cs#1)]
 [!code-vb[Classic Timer.Timer1 Example#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_Classic/classic Timer.Timer1 Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Timers.Timer.Interval" />
        <altmember cref="P:System.Timers.Timer.Enabled" />
        <altmember cref="M:System.Timers.Timer.Start" />
        <altmember cref="E:System.Timers.Timer.Elapsed" />
      </Docs>
    </Member>
    <Member MemberName="BeginInit">
      <MemberSignature Language="C#" Value="public void BeginInit ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void BeginInit() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Timers.Timer.BeginInit" />
      <MemberSignature Language="VB.NET" Value="Public Sub BeginInit ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void BeginInit();" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.ComponentModel.ISupportInitialize.BeginInit</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.ComponentModel.TypeConverter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Начинает во время выполнения инициализацию класса <see cref="T:System.Timers.Timer" />, используемого в форме или другим компонентом.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 [!INCLUDE[vsprvslong](~/includes/vsprvslong-md.md)] Разработки, этот метод применяется в среде для запуска инициализации компонента, используемого в форме или другим компонентом. <xref:System.Timers.Timer.EndInit%2A> Метод завершает инициализацию. С помощью <xref:System.Timers.Timer.BeginInit%2A> и <xref:System.Timers.Timer.EndInit%2A> методы предотвращает использование до полной инициализации элемента управления.  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Timers.Timer.Enabled" />
        <altmember cref="M:System.Timers.Timer.EndInit" />
        <altmember cref="P:System.Timers.Timer.Interval" />
      </Docs>
    </Member>
    <Member MemberName="Close">
      <MemberSignature Language="C#" Value="public void Close ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Close() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Timers.Timer.Close" />
      <MemberSignature Language="VB.NET" Value="Public Sub Close ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Close();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.ComponentModel.TypeConverter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Освобождает ресурсы, используемые объектом <see cref="T:System.Timers.Timer" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Timers.Timer.Close%2A> В свою очередь вызывает метод `Dispose` метод.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Dispose">
      <MemberSignature Language="C#" Value="protected override void Dispose (bool disposing);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance void Dispose(bool disposing) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Timers.Timer.Dispose(System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Sub Dispose (disposing As Boolean)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; override void Dispose(bool disposing);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.ComponentModel.TypeConverter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="disposing" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="disposing">
          Значение <see langword="true" /> позволяет освободить как управляемые, так и неуправляемые ресурсы; значение <see langword="false" /> освобождает только неуправляемые ресурсы.</param>
        <summary>Освобождает все ресурсы, используемые текущим объектом <see cref="T:System.Timers.Timer" />.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Elapsed">
      <MemberSignature Language="C#" Value="public event System.Timers.ElapsedEventHandler Elapsed;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Timers.ElapsedEventHandler Elapsed" />
      <MemberSignature Language="DocId" Value="E:System.Timers.Timer.Elapsed" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event Elapsed As ElapsedEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event System::Timers::ElapsedEventHandler ^ Elapsed;" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.ComponentModel.TypeConverter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Category("Behavior")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Timers.TimersDescription("Occurs when the Interval has elapsed.")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Timers.ElapsedEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Происходит по истечении интервала времени.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Timers.Timer.Elapsed> Событие происходит, если <xref:System.Timers.Timer.Enabled%2A> свойство `true` и интервал времени (в миллисекундах), заданный <xref:System.Timers.Timer.Interval%2A> свойство истекает. Если <xref:System.Timers.Timer.AutoReset%2A> свойство `true`, повторно вызывать событие в интервал, заданный <xref:System.Timers.Timer.Interval%2A> свойство; в противном случае это событие возникает только один раз, при первом <xref:System.Timers.Timer.Interval%2A> значение истекает.  
  
 Если <xref:System.Timers.Timer.Interval%2A> задается после <xref:System.Timers.Timer> был запущен, счетчик сбрасывается. Например, если задать интервал, равный 5 секунд, а затем задать <xref:System.Timers.Timer.Enabled%2A> для `true`, счетчик начнется в момент <xref:System.Timers.Timer.Enabled%2A> имеет значение. Если сбросить интервал на 10 секунд, когда прошло 3 секунды <xref:System.Timers.Timer.Elapsed> событие вызывается в первый раз 13 секунд после <xref:System.Timers.Timer.Enabled%2A> было задано значение `true`.  
  
 Если <xref:System.Timers.Timer.SynchronizingObject%2A> свойство `null`, <xref:System.Timers.Timer.Elapsed> событие <xref:System.Threading.ThreadPool> потока. Если обработка <xref:System.Timers.Timer.Elapsed> больше времени, чем время события <xref:System.Timers.Timer.Interval%2A>, может быть снова вызывать событие на другом <xref:System.Threading.ThreadPool> потока. В этом случае обработчик событий должен быть реентерабельным.  
  
> [!NOTE]
>  Метод обработки событий может выполняться в одном потоке, в то же время, другой поток вызывает <xref:System.Timers.Timer.Stop%2A> метода или наборы <xref:System.Timers.Timer.Enabled%2A> свойства `false`. Это может привести к <xref:System.Timers.Timer.Elapsed> события после остановки таймера. Пример кода для <xref:System.Timers.Timer.Stop%2A> метод показывает один из способов избежать состояния гонок.  
  
 Даже если <xref:System.Timers.Timer.SynchronizingObject%2A> не `null`, <xref:System.Timers.Timer.Elapsed> события могут происходить после <xref:System.Timers.Timer.Dispose%2A> или <xref:System.Timers.Timer.Stop%2A> был вызван метод или после <xref:System.Timers.Timer.Enabled%2A> свойство значение `false`, так как сигнал для вызова <xref:System.Timers.Timer.Elapsed> событий всегда помещается в очередь для выполнения в потоке пула потоков. Один из способов устранения этой ситуации состязания является задать флаг, который определяет обработчик событий для <xref:System.Timers.Timer.Elapsed> событие, чтобы игнорировать последующие события.  
  
 <xref:System.Timers.Timer> Компонент перехватывает и подавляет все исключения, созданные обработчики событий для <xref:System.Timers.Timer.Elapsed> события. Это поведение может измениться в будущих выпусков платформы .NET Framework.  
  
   
  
## Examples  
 В следующем примере создается <xref:System.Timers.Timer> объект, который запускает его <xref:System.Timers.Timer.Elapsed?displayProperty=nameWithType> событий каждые две секунды (2000 мс), задает обработчик события для события и запускает таймер. Обработчик событий выводит значение <xref:System.Timers.ElapsedEventArgs.SignalTime%2A?displayProperty=nameWithType> свойство каждый раз, оно создается.  
  
 [!code-cpp[System.Timers.Timer#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.timers.timer/cpp/timer1.cpp#1)]
 [!code-csharp[System.Timers.Timer#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.timers.timer/cs/timer1.cs#1)]
 [!code-vb[System.Timers.Timer#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.timers.timer/vb/timer1.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Timers.Timer.Interval" />
        <altmember cref="P:System.Timers.Timer.AutoReset" />
        <altmember cref="E:System.Timers.Timer.Elapsed" />
        <altmember cref="T:System.Timers.ElapsedEventArgs" />
        <altmember cref="T:System.Timers.ElapsedEventHandler" />
        <altmember cref="P:System.Timers.Timer.Enabled" />
      </Docs>
    </Member>
    <Member MemberName="Enabled">
      <MemberSignature Language="C#" Value="public bool Enabled { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool Enabled" />
      <MemberSignature Language="DocId" Value="P:System.Timers.Timer.Enabled" />
      <MemberSignature Language="VB.NET" Value="Public Property Enabled As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool Enabled { bool get(); void set(bool value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.ComponentModel.TypeConverter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Category("Behavior")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Timers.TimersDescription("Indicates whether the timer is enabled to fire events at a defined interval.")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Возвращает или задает значение, определяющее, должен ли объект <see cref="T:System.Timers.Timer" /> вызывать событие <see cref="E:System.Timers.Timer.Elapsed" />.</summary>
        <value>
          Значение <see langword="true" />, если объект <see cref="T:System.Timers.Timer" /> должен вызывать событие <see cref="E:System.Timers.Timer.Elapsed" />; в противном случае — <see langword="false" />. Значение по умолчанию: <see langword="false" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Установка <xref:System.Timers.Timer.Enabled%2A> для `true` является таким же, как вызов <xref:System.Timers.Timer.Start%2A>, а параметр <xref:System.Timers.Timer.Enabled%2A> для `false` является таким же, как вызов <xref:System.Timers.Timer.Stop%2A>.  
  
> [!NOTE]
>  Сигнал для вызова <xref:System.Timers.Timer.Elapsed> событий всегда очередь для выполнения в <xref:System.Threading.ThreadPool> потока. Это может привести к <xref:System.Timers.Timer.Elapsed> события после <xref:System.Timers.Timer.Enabled%2A> свойству `false`. В примере кода для <xref:System.Timers.Timer.Stop%2A> метод показывает один из способов устранения этой ситуации состязания.  
  
 Если <xref:System.Timers.Timer.Enabled%2A> равно `true` и <xref:System.Timers.Timer.AutoReset%2A> равно `false`, <xref:System.Timers.Timer> вызывает <xref:System.Timers.Timer.Elapsed> события только один раз, при первом запуске интервал истечения.  
  
 Если интервал после <xref:System.Timers.Timer> был запущен, счетчик сбрасывается. Например, если задать интервал, равный 5 секунд, а затем задать <xref:System.Timers.Timer.Enabled%2A> свойства `true`, счетчик начнется в момент <xref:System.Timers.Timer.Enabled%2A> имеет значение. Если сбросить интервал на 10 секунд, когда прошло 3 секунды <xref:System.Timers.Timer.Elapsed> событие вызывается в первый раз 13 секунд после <xref:System.Timers.Timer.Enabled%2A> было задано значение `true`.  
  
> [!NOTE]
>  Некоторые визуальные конструкторы, например, в Microsoft Visual Studio, установите <xref:System.Timers.Timer.Enabled%2A> свойства `true` при вставке нового <xref:System.Timers.Timer>.  
  
   
  
## Examples  
 В следующем примере создается <xref:System.Timers.Timer> объект, который запускает его <xref:System.Timers.Timer.Elapsed?displayProperty=nameWithType> событий каждые две секунды (2000 мс), задает обработчик события для события и запускает таймер. Обработчик событий выводит значение <xref:System.Timers.ElapsedEventArgs.SignalTime%2A?displayProperty=nameWithType> свойство каждый раз, оно создается.  
  
 [!code-cpp[System.Timers.Timer#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.timers.timer/cpp/timer1.cpp#1)]
 [!code-csharp[System.Timers.Timer#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.timers.timer/cs/timer1.cs#1)]
 [!code-vb[System.Timers.Timer#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.timers.timer/vb/timer1.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ObjectDisposedException">Данное свойство задать нельзя, так как таймер удален.</exception>
        <exception cref="T:System.ArgumentException">Перед включением таймера свойству <see cref="P:System.Timers.Timer.Interval" /> задано значение больше <see cref="F:System.Int32.MaxValue" />.</exception>
        <altmember cref="P:System.Timers.Timer.Interval" />
        <altmember cref="P:System.Timers.Timer.AutoReset" />
        <altmember cref="M:System.Timers.Timer.Start" />
        <altmember cref="M:System.Timers.Timer.Stop" />
        <altmember cref="E:System.Timers.Timer.Elapsed" />
      </Docs>
    </Member>
    <Member MemberName="EndInit">
      <MemberSignature Language="C#" Value="public void EndInit ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void EndInit() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Timers.Timer.EndInit" />
      <MemberSignature Language="VB.NET" Value="Public Sub EndInit ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void EndInit();" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.ComponentModel.ISupportInitialize.EndInit</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.ComponentModel.TypeConverter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Заканчивает во время выполнения инициализацию класса <see cref="T:System.Timers.Timer" />, используемого в форме или другим компонентом.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 [!INCLUDE[vsprvslong](~/includes/vsprvslong-md.md)] Разработки, среда использует этот метод для завершения инициализации компонента, используемого в форме или другим компонентом. <xref:System.Timers.Timer.BeginInit%2A> Метод начинает инициализацию. С помощью <xref:System.Timers.Timer.BeginInit%2A> и <xref:System.Timers.Timer.EndInit%2A> методы предотвращает использование до полной инициализации элемента управления.  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Timers.Timer.BeginInit" />
        <altmember cref="P:System.Timers.Timer.Enabled" />
        <altmember cref="P:System.Timers.Timer.Interval" />
      </Docs>
    </Member>
    <Member MemberName="Interval">
      <MemberSignature Language="C#" Value="public double Interval { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance float64 Interval" />
      <MemberSignature Language="DocId" Value="P:System.Timers.Timer.Interval" />
      <MemberSignature Language="VB.NET" Value="Public Property Interval As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property double Interval { double get(); void set(double value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.ComponentModel.TypeConverter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Category("Behavior")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(100)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.SettingsBindable(true)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Timers.TimersDescription("The number of milliseconds between timer events.")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Возвращает или задает интервал в миллисекундах, по истечении которого возникает событие <see cref="E:System.Timers.Timer.Elapsed" />.</summary>
        <value>Время между событиями <see cref="E:System.Timers.Timer.Elapsed" /> в миллисекундах. Значение должно быть больше нуля и меньше или равно <see cref="F:System.Int32.MaxValue" />. Значение по умолчанию — 100 миллисекунд.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Вы используете <xref:System.Timers.Timer.Interval%2A> свойство для определения частоты, с которой <xref:System.Timers.Timer.Elapsed> событие. Поскольку <xref:System.Timers.Timer> класс зависит от системных часов, для них же разрешением, что системные часы. Это означает, что <xref:System.Timers.Timer.Elapsed> с интервалом, заданным путем разрешения системных часов, если активизируется событие <xref:System.Timers.Timer.Interval%2A> свойства меньше, чем разрешения системных часов. В следующем примере задается <xref:System.Timers.Timer.Interval%2A> равным 5 миллисекунд. При выполнении на [!INCLUDE[win7](~/includes/win7-md.md)] системы которого системных часов с разрешением примерно 15 миллисекунд, события примерно каждые 15 миллисекунд, а не каждые 5 миллисекунд.  
  
 [!code-csharp[System.Timers.Timer.Interval#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.timers.timer.interval/cs/interval2.cs#1)]
 [!code-vb[System.Timers.Timer.Interval#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.timers.timer.interval/vb/interval2.vb#1)]  
  
 Для определения разрешения системных часов в текущей системе, можно использовать следующий код:  
  
 [!code-csharp[System.Timers.Timer.Interval#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.timers.timer.interval/cs/resolution1.cs#2)]
 [!code-vb[System.Timers.Timer.Interval#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.timers.timer.interval/vb/resolution1.vb#2)]  
  
 Если вашему приложению требуется больше разрешения, предоставляемые чем <xref:System.Timers.Timer> класса или системных часов, используйте таймеры с высоким разрешением мультимедиа; см. раздел [как: использовать таймер высокого разрешения](http://msdn.microsoft.com/library/aa964692.aspx).  
  
 Если интервал после <xref:System.Timers.Timer> был запущен, счетчик сбрасывается. Например, если задать интервал, равный 5 секунд, а затем задать <xref:System.Timers.Timer.Enabled%2A> свойства `true`, счетчик начнется в момент <xref:System.Timers.Timer.Enabled%2A> имеет значение. Если сбросить интервал на 10 секунд, когда прошло 3 секунды <xref:System.Timers.Timer.Elapsed> событие вызывается в первый раз 13 секунд после <xref:System.Timers.Timer.Enabled%2A> было задано значение `true`.  
  
 Если <xref:System.Timers.Timer.Enabled%2A> равно `true` и <xref:System.Timers.Timer.AutoReset%2A> равно `false`, <xref:System.Timers.Timer> вызывает <xref:System.Timers.Timer.Elapsed> события только один раз, при первом запуске интервал истечения. <xref:System.Timers.Timer.Enabled%2A> Затем устанавливается `false`.  
  
> [!NOTE]
>  Если <xref:System.Timers.Timer.Enabled%2A> и <xref:System.Timers.Timer.AutoReset%2A> устанавливаются равными `false`, и таймер ранее была включена, параметр <xref:System.Timers.Timer.Interval%2A> свойству <xref:System.Timers.Timer.Elapsed> событие один раз, как если бы <xref:System.Timers.Timer.Enabled%2A> ранеебылозаданосвойство`true`. Чтобы задать интервал не порождает событие, можно временно перевести <xref:System.Timers.Timer.Enabled%2A> свойства `true`, задайте <xref:System.Timers.Timer.Interval%2A> свойства период времени и немедленно установить <xref:System.Timers.Timer.Enabled%2A> свойство обратно в `false`.  
  
   
  
## Examples  
 В следующем примере создается <xref:System.Timers.Timer> объект, который запускает его <xref:System.Timers.Timer.Elapsed?displayProperty=nameWithType> событий каждые две секунды (2000 мс), задает обработчик события для события и запускает таймер. Обработчик событий выводит значение <xref:System.Timers.ElapsedEventArgs.SignalTime%2A?displayProperty=nameWithType> свойство каждый раз, оно создается.  
  
 [!code-cpp[System.Timers.Timer#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.timers.timer/cpp/timer1.cpp#1)]
 [!code-csharp[System.Timers.Timer#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.timers.timer/cs/timer1.cs#1)]
 [!code-vb[System.Timers.Timer#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.timers.timer/vb/timer1.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">Интервал меньше или равен нулю.  
  
 - или -  
  
 Интервал больше, чем <see cref="F:System.Int32.MaxValue" />, а таймер в настоящий момент включен. (Если таймер в данный момент выключен, исключение не генерируется до его включения.)</exception>
        <altmember cref="P:System.Timers.Timer.AutoReset" />
        <altmember cref="P:System.Timers.Timer.Enabled" />
        <altmember cref="E:System.Timers.Timer.Elapsed" />
      </Docs>
    </Member>
    <Member MemberName="Site">
      <MemberSignature Language="C#" Value="public override System.ComponentModel.ISite Site { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.ComponentModel.ISite Site" />
      <MemberSignature Language="DocId" Value="P:System.Timers.Timer.Site" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Property Site As ISite" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property System::ComponentModel::ISite ^ Site { System::ComponentModel::ISite ^ get(); void set(System::ComponentModel::ISite ^ value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.ComponentModel.TypeConverter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.ComponentModel.ISite</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Возвращает или задает сайт, который привязывает <see cref="T:System.Timers.Timer" /> к его контейнеру в режиме конструктора.</summary>
        <value>Интерфейс <see cref="T:System.ComponentModel.ISite" />, представляющий сайт, который привязывает объект <see cref="T:System.Timers.Timer" /> к его контейнеру.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Узлы связывают <xref:System.ComponentModel.Component> для <xref:System.ComponentModel.Container> и разрешить связь между ними, а также предоставляет способ для управления компонентами контейнера.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Start">
      <MemberSignature Language="C#" Value="public void Start ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Start() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Timers.Timer.Start" />
      <MemberSignature Language="VB.NET" Value="Public Sub Start ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Start();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.ComponentModel.TypeConverter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Начинает вызывать событие <see cref="E:System.Timers.Timer.Elapsed" />, задавая для свойства <see cref="P:System.Timers.Timer.Enabled" /> значение <see langword="true" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Если <xref:System.Timers.Timer.Start%2A> вызывается и <xref:System.Timers.Timer.AutoReset%2A> равно `false`, <xref:System.Timers.Timer> вызывает <xref:System.Timers.Timer.Elapsed> события только один раз, первый интервал времени истекает. Если <xref:System.Timers.Timer.Start%2A> вызывается и <xref:System.Timers.Timer.AutoReset%2A> — `true`, <xref:System.Timers.Timer> вызывает <xref:System.Timers.Timer.Elapsed> первого события время окончания интервала и продолжает событие за определенный интервал времени.  
  
 Можно также запустить времени, задав <xref:System.Timers.Timer.Enabled%2A> для `true`.  
  
> [!NOTE]
>  Если <xref:System.Timers.Timer.AutoReset%2A> — `false`, <xref:System.Timers.Timer.Start%2A> необходимо вызвать метод, чтобы снова запустить счетчик.  
  
 Вызов <xref:System.Timers.Timer.Start%2A> метод при включенной таймера не оказывает влияния.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">Объект <see cref="T:System.Timers.Timer" /> создается с интервалом, равным или большим, чем <see cref="F:System.Int32.MaxValue" /> + 1, или же меньшим нуля.</exception>
        <altmember cref="P:System.Timers.Timer.Interval" />
        <altmember cref="P:System.Timers.Timer.AutoReset" />
        <altmember cref="P:System.Timers.Timer.Enabled" />
        <altmember cref="M:System.Timers.Timer.Stop" />
        <altmember cref="E:System.Timers.Timer.Elapsed" />
      </Docs>
    </Member>
    <Member MemberName="Stop">
      <MemberSignature Language="C#" Value="public void Stop ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Stop() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Timers.Timer.Stop" />
      <MemberSignature Language="VB.NET" Value="Public Sub Stop ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Stop();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.ComponentModel.TypeConverter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Прекращает вызывать событие <see cref="E:System.Timers.Timer.Elapsed" />, задавая для свойства <see cref="P:System.Timers.Timer.Enabled" /> значение <see langword="false" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Также можно остановить времени, задав <xref:System.Timers.Timer.Enabled%2A> для `false`.  
  
> [!NOTE]
>  Сигнал для вызова <xref:System.Timers.Timer.Elapsed> событий всегда очередь для выполнения в <xref:System.Threading.ThreadPool> потоков, поэтому метод обработки событий может выполняться в одном потоке, в то же время, вызов <xref:System.Timers.Timer.Stop%2A> метод выполняется в другом потоке. Это может привести к <xref:System.Timers.Timer.Elapsed> события после <xref:System.Timers.Timer.Stop%2A> вызывается метод. В примере кода ниже показан один из способов устранения этой ситуации состязания.  
  
   
  
## Examples  
 В следующем примере создается `System.Timers.Timer` объект, который запускает его <xref:System.Timers.Timer.Elapsed?displayProperty=nameWithType> событий каждые две секунды (2 000 миллисекунд), задает обработчик события для события и запускает таймер. Обработчик событий выводит значение <xref:System.Timers.ElapsedEventArgs.SignalTime%2A?displayProperty=nameWithType> свойство каждый раз, оно создается. Когда пользователь нажимает клавишу ВВОД, приложение вызывает <xref:System.Timers.Timer.Stop%2A> метод перед завершением работы приложения.  
  
 [!code-csharp[System.Timers.Timer#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.timers.timer/cs/timer2a.cs#2)]
 [!code-vb[System.Timers.Timer#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.timers.timer/vb/timer2a.vb#2)]  
  
 В следующем примере кода показан один из способов предотвращения поток, который вызывает <xref:System.Timers.Timer.Stop%2A> метод продолжение до в данный момент <xref:System.Timers.Timer.Elapsed> событий завершается и также во избежание два <xref:System.Timers.Timer.Elapsed> события выполнения обработчика событий, в то же время (часто обозначается как повторного входа).  
  
 В этом примере выполняется 100 тестовых запусков. При каждом запуске теста таймер запускается с интервалом 150 миллисекунд. Используется в обработчике событий <xref:System.Threading.Thread.Sleep%2A?displayProperty=nameWithType> метод для имитации задачу, которая случайным образом меняется в длину от 50 до 200 миллисекунд. Метод теста также запускает поток управления, который ожидает в течение секунды, а затем останавливает таймер. Если событие обрабатывается, во время остановки таймера, поток управления необходимо дождаться завершения события перед продолжением.  
  
 <xref:System.Threading.Interlocked.CompareExchange%28System.Int32%40%2CSystem.Int32%2CSystem.Int32%29?displayProperty=nameWithType> Избежать повторного входа и предотвратить продолжение, пока не завершится выполнение события в потоке управления используется перегрузка метода. Используется в обработчике событий <xref:System.Threading.Interlocked.CompareExchange%28System.Int32%40%2CSystem.Int32%2CSystem.Int32%29> метод, чтобы задать элемент управления переменной значение 1, но только в том случае, если значение в настоящее время равно нулю. Это атомарной операции. Если возвращаемое значение равно нулю, управляющая переменная уже равняется 1 и выполняется обработчик события. Если ненулевое значение, возвращаемое значение события просто удаляется избежать повторного входа. (Если необходимо выполнять каждое из событий <xref:System.Threading.Monitor> класс будет более эффективный способ синхронизировать события.) По окончании работы обработчика событий устанавливается переменная управления обратно нуля. Пример фиксирует общее число событий, произошло после, которые выполнены, которые были отброшены из-за реентерабельности <xref:System.Timers.Timer.Stop%2A> был вызван метод.  
  
 Поток управления использует <xref:System.Threading.Interlocked.CompareExchange%28System.Int32%40%2CSystem.Int32%2CSystem.Int32%29> метод, чтобы задать элемент управления переменной значение -1 (минус), но только в том случае, если значение в настоящее время равно нулю. Если атомарная операция возвращает ненулевое значение, событие в данный момент. Управляющий поток ожидает и повторяет попытку. Пример фиксирует число раз, когда поток управления было необходимо дождаться завершения события.  
  
 [!code-csharp[Timer.Stop#1](~/samples/snippets/csharp/VS_Snippets_CLR/Timer.Stop/CS/source.cs#1)]
 [!code-vb[Timer.Stop#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/Timer.Stop/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Timers.Timer.Enabled" />
        <altmember cref="M:System.Timers.Timer.Start" />
        <altmember cref="E:System.Timers.Timer.Elapsed" />
      </Docs>
    </Member>
    <Member MemberName="SynchronizingObject">
      <MemberSignature Language="C#" Value="public System.ComponentModel.ISynchronizeInvoke SynchronizingObject { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.ComponentModel.ISynchronizeInvoke SynchronizingObject" />
      <MemberSignature Language="DocId" Value="P:System.Timers.Timer.SynchronizingObject" />
      <MemberSignature Language="VB.NET" Value="Public Property SynchronizingObject As ISynchronizeInvoke" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::ComponentModel::ISynchronizeInvoke ^ SynchronizingObject { System::ComponentModel::ISynchronizeInvoke ^ get(); void set(System::ComponentModel::ISynchronizeInvoke ^ value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.ComponentModel.TypeConverter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(null)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Timers.TimersDescription("The object used to marshal the event handler calls issued when an interval has elapsed.")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.ComponentModel.ISynchronizeInvoke</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Получает или задает объект, используемый для маршалирования вызовов обработчика событий, осуществленных после истечения интервала времени.</summary>
        <value>
          <see cref="T:System.ComponentModel.ISynchronizeInvoke" />, представляющий объект, используемый для маршалинга вызовов обработчика событий, осуществленных после истечения интервала времени. Значение по умолчанию: <see langword="null" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Когда <xref:System.Timers.Timer.SynchronizingObject%2A> — `null`, метод, обрабатывающий <xref:System.Timers.Timer.Elapsed> событие вызывается в поток из пула потоков системы. Дополнительные сведения о системном пуле потоков см. в разделе <xref:System.Threading.ThreadPool>.  
  
 Если <xref:System.Timers.Timer.Elapsed> событие обрабатывается с помощью визуального компонента Windows Forms, например кнопку, обращение к компоненту через пул потоков системы, результат исключение или просто может работать не будут. Избежать подобного эффекта, задав <xref:System.Timers.Timer.SynchronizingObject%2A> в компонент Windows Forms, который вызывает метод, обрабатывающий <xref:System.Timers.Timer.Elapsed> событий для вызова в том же потоке, где компонент был создан.  
  
> [!NOTE]
>  Даже если <xref:System.Timers.Timer.SynchronizingObject%2A> свойство не `null`, <xref:System.Timers.Timer.Elapsed> события могут происходить после <xref:System.Timers.Timer.Dispose%2A> или <xref:System.Timers.Timer.Stop%2A> был вызван метод или после <xref:System.Timers.Timer.Enabled%2A> свойство значение `false`, так как сигнал для вызова <xref:System.Timers.Timer.Elapsed> событий всегда помещается в очередь для выполнения в потоке пула потоков. Один из способов устранения этой ситуации состязания является задать флаг, который определяет обработчик событий для <xref:System.Timers.Timer.Elapsed> событие, чтобы игнорировать последующие события.  
  
 Если <xref:System.Timers.Timer> используется в среде Visual Studio в конструктор Windows Forms, <xref:System.Timers.Timer.SynchronizingObject%2A> автоматически присваивается элемент управления, содержащий <xref:System.Timers.Timer>. Например, если поместить <xref:System.Timers.Timer> в конструктор для `Form1` (который наследуется от <xref:System.Windows.Forms.Form>), <xref:System.Timers.Timer.SynchronizingObject%2A> свойство <xref:System.Timers.Timer> устанавливается с экземпляром `Form1`.  
  
   
  
## Examples  
 Следующий пример представляет собой приложение Windows Forms служит в качестве файла очень простого текстового редактора. Если текст в текстовом поле не были сохранены, приложение запрашивает у пользователя минутные интервалы ли он или она хочет сохранить содержимое текстового поля.  Чтобы сделать это, <xref:System.Timers.Timer.Interval%2A> свойству в минуту (60 000 миллисекунд) и <xref:System.Timers.Timer.SynchronizingObject%2A> свойству <xref:System.Windows.Forms.Form> объекта.  
  
 [!code-csharp[System.Timers.Timer.SynchronizingObject#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/System.Timers.Timer.SynchronizingObject/cs/Form1.cs#1)]
 [!code-vb[System.Timers.Timer.SynchronizingObject#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/System.Timers.Timer.SynchronizingObject/vb/Form1.vb#1)]  
  
 В этом примере предполагается, добавьте следующие элементы управления в форму:  
  
-   Объект <xref:System.Windows.Forms.TextBox> управления с именем `TextBox1` (его имя по умолчанию).  
  
-   Объект <xref:System.Windows.Forms.Button> управления с именем `Button1` (его имя по умолчанию).  
  
-   Объект <xref:System.Windows.Forms.SaveFileDialog> управления с именем `SaveSaveFileDialog1` (его имя по умолчанию).  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Windows.Forms.Form" />
        <altmember cref="T:System.ComponentModel.ISynchronizeInvoke" />
        <altmember cref="T:System.Threading.ThreadPool" />
        <altmember cref="E:System.Timers.Timer.Elapsed" />
      </Docs>
    </Member>
  </Members>
</Type>