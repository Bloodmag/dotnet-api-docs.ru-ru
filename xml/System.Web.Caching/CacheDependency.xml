<Type Name="CacheDependency" FullName="System.Web.Caching.CacheDependency">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="971848a65c6d20655c657ffc94cd2e88f373bb0d" />
    <Meta Name="ms.sourcegitcommit" Value="d31dc2ede16f6f7bc64e90d9f897ff54c4e3869b" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="ru-RU" />
    <Meta Name="ms.lasthandoff" Value="04/03/2018" />
    <Meta Name="ms.locfileid" Value="30530848" />
  </Metadata>
  <TypeSignature Language="C#" Value="public class CacheDependency : IDisposable" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi CacheDependency extends System.Object implements class System.IDisposable" />
  <TypeSignature Language="DocId" Value="T:System.Web.Caching.CacheDependency" />
  <TypeSignature Language="VB.NET" Value="Public Class CacheDependency&#xA;Implements IDisposable" />
  <TypeSignature Language="C++ CLI" Value="public ref class CacheDependency : IDisposable" />
  <AssemblyInfo>
    <AssemblyName>System.Web</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>System.IDisposable</InterfaceName>
    </Interface>
  </Interfaces>
  <Docs>
    <summary>Устанавливает отношения зависимости между элементом, который хранится в объекте приложения ASP.NET <see cref="T:System.Web.Caching.Cache" />, и файлом, ключом кэша, массивом или другим объектом <see cref="T:System.Web.Caching.CacheDependency" />. Класс <see cref="T:System.Web.Caching.CacheDependency" /> отслеживает отношения зависимости на предмет изменений, автоматически удаляя кэшированный элемент.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Если добавить элемент в кэш, зависящий от другого объекта, например файла или массива файлов, зависимый элемент автоматически удаляется из кэша при изменении объекта. Например, предположим, вы создаете <xref:System.Data.DataSet> объекта на основе данных в XML-файл. Можно добавить <xref:System.Data.DataSet> в кэш с <xref:System.Web.Caching.CacheDependency> объект, который делает <xref:System.Data.DataSet> зависит от XML-файла. Изменение XML-файла, <xref:System.Data.DataSet> удаляется из кэша.  
  
 Можно добавить элементы с зависимостями кэш приложения с <xref:System.Web.Caching.Cache.Add%2A> и <xref:System.Web.Caching.Cache.Insert%2A?displayProperty=nameWithType> методы. Нельзя использовать <xref:System.Web.Caching.Cache.Item%2A> свойство для добавления элементов в кэш с зависимостями.  
  
 Чтобы задать зависимость, создайте экземпляр <xref:System.Web.Caching.CacheDependency> класса, указание файлов, разделов или каталоги, от которых зависит элемент, а затем передайте зависимостей для <xref:System.Web.Caching.Cache.Add%2A> или <xref:System.Web.Caching.Cache.Insert%2A?displayProperty=nameWithType> метод. <xref:System.Web.Caching.CacheDependency> Экземпляр может представлять один файл или каталог, массив файлов или каталогов или массив файлов или каталогов, а также массив ключей кэша (представляющих другие элементы, хранящиеся в <xref:System.Web.Caching.Cache> объекта).  
  
   
  
## Examples  
 В следующем примере кода показано использование <xref:System.Web.Caching.CacheDependency.HasChanged%2A> свойства, чтобы определить ли <xref:System.Web.Caching.CacheDependency> изменены с момента предыдущего запроса для элемента в <xref:System.Web.Caching.Cache>. `dt` Переданное значение `start` параметра равным <xref:System.DateTime.Now%2A?displayProperty=nameWithType>.  
  
 [!code-csharp[System.Web.Caching.CacheDependency_HasChanged#1](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.Caching.CacheDependency_HasChanged/CS/t.cs.aspx#1)]
 [!code-vb[System.Web.Caching.CacheDependency_HasChanged#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.Caching.CacheDependency_HasChanged/VB/t.vb.aspx#1)]  
  
 ]]></format>
    </remarks>
    <altmember cref="T:System.Web.Caching.Cache" />
    <altmember cref="M:System.Web.Caching.Cache.Insert(System.String,System.Object,System.Web.Caching.CacheDependency)" />
  </Docs>
  <Members>
    <MemberGroup MemberName=".ctor">
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Инициализирует новый экземпляр класса <see cref="T:System.Web.Caching.CacheDependency" />.</summary>
        <altmember cref="T:System.Web.Caching.Cache" />
        <altmember cref="M:System.Web.Caching.Cache.Insert(System.String,System.Object,System.Web.Caching.CacheDependency)" />
      </Docs>
    </MemberGroup>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="protected CacheDependency ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.Caching.CacheDependency.#ctor" />
      <MemberSignature Language="VB.NET" Value="Protected Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; CacheDependency();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary>Инициализирует новый экземпляр класса <see cref="T:System.Web.Caching.CacheDependency" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Если вы хотите создать собственный класс, от <xref:System.Web.Caching.CacheDependency>, реализация этой версии <xref:System.Web.Caching.CacheDependency.%23ctor%2A> конструктор.  
  
   
  
## Examples  
 В следующем примере кода является класс, реализующий этой версии <xref:System.Web.Caching.CacheDependency> конструктора, как все классы, производные от <xref:System.Web.Caching.CacheDependency> требуется.  
  
 [!code-vb[CacheDependency_Whidbey_Example1#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/CacheDependency_Whidbey_Example1/VB/cachedependencysample.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Web.Caching.Cache" />
        <altmember cref="M:System.Web.Caching.Cache.Insert(System.String,System.Object,System.Web.Caching.CacheDependency)" />
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public CacheDependency (string filename);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(string filename) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.Caching.CacheDependency.#ctor(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (filename As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; CacheDependency(System::String ^ filename);" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="filename" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="filename">Путь к файлу или каталогу, от которого зависит кэшированный объект. При изменении ресурса кэшированный объект становится устаревшим и удаляется из кэша.</param>
        <summary>Инициализирует новый экземпляр класса <see cref="T:System.Web.Caching.CacheDependency" />, отслеживающий изменения файла или каталога.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Если каталог или файл, указанный в `filename` параметр не найден в файловой системе, он будет рассматриваться как отсутствующие. Если каталог или файл отсутствует при добавлении объекта с зависимостью для <xref:System.Web.Caching.Cache>, кэшированный объект будет удален из <xref:System.Web.Caching.Cache> при создании каталога или файла.  
  
 Например, предположим, вы добавляете объект <xref:System.Web.Caching.Cache> с зависимостью от следующего пути к файлу: c:\stocks\xyz.dat. Если этот файл не найден при <xref:System.Web.Caching.CacheDependency> объект создается, но впоследствии будет создан, кэшированный объект удаляется при создании файла xyz.dat.  
  
   
  
## Examples  
 В следующем примере кода создается экземпляр <xref:System.Web.Caching.CacheDependency> класса с зависимостью от XML-файла. <xref:System.Web.Caching.Cache.Insert%2A?displayProperty=nameWithType> Метод затем добавляет элемент в <xref:System.Web.Caching.Cache> , зависит от этого файла.  
  
 [!code-csharp[Classic CacheDependency.CacheDependency Example#1](~/samples/snippets/csharp/VS_Snippets_WebNet/Classic CacheDependency.CacheDependency Example/CS/source.cs#1)]
 [!code-vb[Classic CacheDependency.CacheDependency Example#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/Classic CacheDependency.CacheDependency Example/VB/source.vb#1)]  
  
 Также можно использовать следующий способ для добавления элемента к <xref:System.Web.Caching.Cache> ссылки на файл.  
  
 [!code-csharp[Single File Dependency Cache entry#1](~/samples/snippets/csharp/VS_Snippets_WebNet/Single File Dependency Cache entry/CS/DependencySingleFilecs.aspx#1)]
 [!code-vb[Single File Dependency Cache entry#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/Single File Dependency Cache entry/VB/DependencySingleFilevb.aspx#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Web.Caching.Cache" />
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public CacheDependency (string[] filenames);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(string[] filenames) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.Caching.CacheDependency.#ctor(System.String[])" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (filenames As String())" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; CacheDependency(cli::array &lt;System::String ^&gt; ^ filenames);" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="filenames" Type="System.String[]" />
      </Parameters>
      <Docs>
        <param name="filenames">Массив путей (к файлам или каталогам), от которого зависит кэшированный объект. При изменении любого из ресурсов кэшированный объект становится устаревшим и удаляется из кэша.</param>
        <summary>Инициализирует новый экземпляр класса <see cref="T:System.Web.Caching.CacheDependency" />, отслеживающий изменения массива путей (к файлам или каталогам).</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Если любой из файлов или каталогов в массиве изменяется, либо удалить из массива, кэшированный элемент становится устаревшим и оно удаляется из приложения <xref:System.Web.Caching.Cache> объекта.  
  
 Кроме того Если любой из каталогов или файлов, указанных в `filenames` параметр не найден в файловой системе, он считается отсутствующим. Если каталог или файл отсутствует при добавлении объекта с зависимостью для <xref:System.Web.Caching.Cache>, кэшированный объект будет удален из <xref:System.Web.Caching.Cache> при создании этого файла или каталога.  
  
 Например, предположим, вы добавляете объект <xref:System.Web.Caching.Cache> с зависимостью от следующего пути к файлу: c:\stocks\xyz.dat. Если этот файл не найден при <xref:System.Web.Caching.CacheDependency> объект создается, но впоследствии будет создан, кэшированный объект удаляется при создании файла xyz.dat.  
  
> [!NOTE]
>  При создании массива, содержащего зависимости файлов, необходимо определить число файлов, что элемент добавляется к <xref:System.Web.Caching.Cache> зависит.  
  
   
  
## Examples  
 В следующем примере кода демонстрируется использование <xref:System.Web.Caching.Cache.Insert%2A?displayProperty=nameWithType> метод, чтобы добавить элемент в <xref:System.Web.Caching.Cache> с зависимостями от массива файлов. Также можно сделать элемент зависит от массив каталогов.  
  
 [!code-csharp[Multiple file based dependency#1](~/samples/snippets/csharp/VS_Snippets_WebNet/Multiple file based dependency/CS/DependencyMultiFilecs.aspx#1)]
 [!code-vb[Multiple file based dependency#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/Multiple file based dependency/VB/DependencyMultiFilevb.aspx#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Web.Caching.Cache" />
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public CacheDependency (string filename, DateTime start);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(string filename, valuetype System.DateTime start) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.Caching.CacheDependency.#ctor(System.String,System.DateTime)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (filename As String, start As DateTime)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; CacheDependency(System::String ^ filename, DateTime start);" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="filename" Type="System.String" />
        <Parameter Name="start" Type="System.DateTime" />
      </Parameters>
      <Docs>
        <param name="filename">Путь к файлу или каталогу, от которого зависит кэшированный объект. При изменении ресурса кэшированный объект становится устаревшим и удаляется из кэша.</param>
        <param name="start">Время, по которому проверяется дата последнего изменения каталога или файла.</param>
        <summary>Инициализирует новый экземпляр класса <see cref="T:System.Web.Caching.CacheDependency" />, отслеживающий изменения файла или каталога.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Если каталог или файл, указанный в `filename` параметр не найден в файловой системе, он будет рассматриваться как отсутствующие. Если каталог или файл отсутствует при добавлении объекта с зависимостью для <xref:System.Web.Caching.Cache>, кэшированный объект будет удален из <xref:System.Web.Caching.Cache> при создании каталога или файла.  
  
 Например, предположим, вы добавляете объект <xref:System.Web.Caching.Cache> с зависимостью от следующего пути к файлу: c:\stocks\xyz.dat. Если этот файл не найден при <xref:System.Web.Caching.CacheDependency> объект создается, но впоследствии будет создан, кэшированный объект удаляется при создании файла xyz.dat.  
  
> [!NOTE]
>  Отслеживание изменений начинается немедленно и не зависит от непосредственно `start` параметра. Используйте `start` параметр для передачи даты и времени в прошлом, для которого требуется проверить дату каталога последнего изменения или переданный файл `filename` параметра. Если дата последнего изменения дата является более поздней, чем дата и время установлено переданный `start` параметра, кэшированный элемент удаляется из <xref:System.Web.Caching.Cache>.  
  
   
  
## Examples  
 В следующем примере кода использует этот конструктор для создания экземпляра <xref:System.Web.Caching.CacheDependency> объекта, а затем вставляет элемент в <xref:System.Web.Caching.Cache> с этой зависимости. `dt` Переданное значение `start` параметра равным <xref:System.DateTime.Now%2A?displayProperty=nameWithType>.  
  
 [!code-csharp[System.Web.Caching.CacheDependency_HasChanged#1](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.Caching.CacheDependency_HasChanged/CS/t.cs.aspx#1)]
 [!code-vb[System.Web.Caching.CacheDependency_HasChanged#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.Caching.CacheDependency_HasChanged/VB/t.vb.aspx#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Web.Caching.Cache" />
        <altmember cref="M:System.Web.Caching.Cache.Insert(System.String,System.Object,System.Web.Caching.CacheDependency)" />
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public CacheDependency (string[] filenames, DateTime start);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(string[] filenames, valuetype System.DateTime start) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.Caching.CacheDependency.#ctor(System.String[],System.DateTime)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (filenames As String(), start As DateTime)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; CacheDependency(cli::array &lt;System::String ^&gt; ^ filenames, DateTime start);" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="filenames" Type="System.String[]" />
        <Parameter Name="start" Type="System.DateTime" />
      </Parameters>
      <Docs>
        <param name="filenames">Массив путей (к файлам или каталогам), от которого зависит кэшированный объект. При изменении любого из ресурсов кэшированный объект становится устаревшим и удаляется из кэша.</param>
        <param name="start">Время, по которому проверяется дата последнего изменения объектов массива.</param>
        <summary>Инициализирует новый экземпляр класса <see cref="T:System.Web.Caching.CacheDependency" />, отслеживающий изменения массива путей (к файлам или каталогам) и определяющий время начала отслеживания изменений.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Если любой из каталогов или файлов, указанных в `filenames` параметр не найден в файловой системе, он считается отсутствующим. Если каталог или файл отсутствует при добавлении объекта с зависимостью для <xref:System.Web.Caching.Cache>, кэшированный объект будет удален из <xref:System.Web.Caching.Cache> при создании этого файла или каталога.  
  
 Например, предположим, вы добавляете объект <xref:System.Web.Caching.Cache> с зависимостью от следующего пути к файлу: c:\stocks\xyz.dat. Если этот файл не найден при <xref:System.Web.Caching.CacheDependency> объект создается, но впоследствии будет создан, кэшированный объект удаляется при создании файла xyz.dat.  
  
> [!NOTE]
>  Отслеживание изменений начинается немедленно и не зависит от непосредственно `start` параметра. Используйте `start` переданный параметр для передачи даты и времени в прошлом, для которого требуется проверить дату последнего изменения массива `filenames` параметра. Если дата последнего изменения позже даты, даты любого объекта в массиве и переданный набор временного `start` параметра, кэшированный элемент удаляется из <xref:System.Web.Caching.Cache>.  
  
   
  
## Examples  
 В следующем примере кода создается <xref:System.Web.Caching.CacheDependency> объект, который передает два XML-файла и <xref:System.DateTime.Now%2A?displayProperty=nameWithType> значение, если объект включается в качестве аргумента параметра в <xref:System.Web.Caching.Cache.Insert%2A?displayProperty=nameWithType> вызова метода.  
  
 [!code-csharp[CacheDependency Constructor4#1](~/samples/snippets/csharp/VS_Snippets_WebNet/CacheDependency Constructor4/CS/depmultifilestimecs.aspx#1)]
 [!code-vb[CacheDependency Constructor4#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/CacheDependency Constructor4/VB/depmultifilestimevb.aspx#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Web.Caching.Cache" />
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public CacheDependency (string[] filenames, string[] cachekeys);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(string[] filenames, string[] cachekeys) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.Caching.CacheDependency.#ctor(System.String[],System.String[])" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (filenames As String(), cachekeys As String())" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; CacheDependency(cli::array &lt;System::String ^&gt; ^ filenames, cli::array &lt;System::String ^&gt; ^ cachekeys);" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="filenames" Type="System.String[]" />
        <Parameter Name="cachekeys" Type="System.String[]" />
      </Parameters>
      <Docs>
        <param name="filenames">Массив путей (к файлам или каталогам), от которого зависит кэшированный объект. При изменении любого из ресурсов кэшированный объект становится устаревшим и удаляется из кэша.</param>
        <param name="cachekeys">Массив ключей кэша, изменения которых отслеживает новый объект. При изменении любого из ключей кэша кэшированный объект, связанный с этой зависимостью, становится устаревшим и удаляется из кэша.</param>
        <summary>Инициализирует новый экземпляр класса <see cref="T:System.Web.Caching.CacheDependency" />, отслеживающий изменения массива путей (к файлам или каталогам), массива ключей кэша, или обоих сразу.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Кроме того Если любой из каталогов или файлов, указанных в `filenames` параметр не найден в файловой системе, он считается отсутствующим. Если каталог или файл отсутствует при добавлении объекта с зависимостью для <xref:System.Web.Caching.Cache>, кэшированный объект будет удален из <xref:System.Web.Caching.Cache> при создании этого файла или каталога.  
  
 Например, предположим, вы добавляете объект <xref:System.Web.Caching.Cache> с зависимостью от следующего пути к файлу: c:\stocks\xyz.dat. Если этот файл не найден при <xref:System.Web.Caching.CacheDependency> объект создается, но впоследствии будет создан, кэшированный объект удаляется при создании файла xyz.dat.  
  
 Однако `cachekeys` зависимостей не работает одинаково. Если хотя бы для одного значения `cachekeys` параметра не существует во время вставки, завершается неудачей. Обратите внимание, что исключение не создано для этого сценария.  
  
## Examples  
 В следующем фрагменте кода показано, как добавить элемент в пользовательское приложение <xref:System.Web.Caching.Cache> с зависимостью от ключа к другому элементу, помещаются в кэш. Поскольку этот метод использует синтаксис массива, необходимо определить число ключей в которой элемент добавляются к <xref:System.Web.Caching.Cache> является зависимым.  
  
 [!code-csharp[Key based dependency#1](~/samples/snippets/csharp/VS_Snippets_WebNet/Key based dependency/CS/DependencyKeycs.aspx#1)]
 [!code-vb[Key based dependency#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/Key based dependency/VB/DependencyKeyvb.aspx#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Web.Caching.Cache" />
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public CacheDependency (string[] filenames, string[] cachekeys, DateTime start);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(string[] filenames, string[] cachekeys, valuetype System.DateTime start) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.Caching.CacheDependency.#ctor(System.String[],System.String[],System.DateTime)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (filenames As String(), cachekeys As String(), start As DateTime)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; CacheDependency(cli::array &lt;System::String ^&gt; ^ filenames, cli::array &lt;System::String ^&gt; ^ cachekeys, DateTime start);" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="filenames" Type="System.String[]" />
        <Parameter Name="cachekeys" Type="System.String[]" />
        <Parameter Name="start" Type="System.DateTime" />
      </Parameters>
      <Docs>
        <param name="filenames">Массив путей (к файлам или каталогам), от которого зависит кэшированный объект. При изменении любого из ресурсов кэшированный объект становится устаревшим и удаляется из кэша.</param>
        <param name="cachekeys">Массив ключей кэша, изменения которых отслеживает новый объект. При изменении любого из ключей кэша кэшированный объект, связанный с этой зависимостью, становится устаревшим и удаляется из кэша.</param>
        <param name="start">Дата и время, по которым проверяется дата последнего изменения объектов, переданных в массивах <c>filenames</c> и <c>cachekeys</c>.</param>
        <summary>Инициализирует новый экземпляр класса <see cref="T:System.Web.Caching.CacheDependency" />, отслеживающий изменения массива путей (к файлам или каталогам), массива ключей кэша, или обоих сразу.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Кроме того Если любой из каталогов или файлов, указанных в `filenames` параметр не найден в файловой системе, он считается отсутствующим. Если каталог или файл отсутствует при добавлении объекта с зависимостью для <xref:System.Web.Caching.Cache>, кэшированный объект будет удален из <xref:System.Web.Caching.Cache> при создании этого файла или каталога.  
  
 Например, предположим, вы добавляете объект <xref:System.Web.Caching.Cache> с зависимостью от следующего пути к файлу: c:\stocks\xyz.dat. Если этот файл не найден при <xref:System.Web.Caching.CacheDependency> объект создается, но впоследствии будет создан, кэшированный объект удаляется при создании файла xyz.dat.  
  
 Однако `cachekeys` зависимостей не работает одинаково. Если хотя бы для одного значения `cachekeys` параметра не существует во время вставки, завершается неудачей. Обратите внимание, что исключение не создано для этого сценария.

> [!NOTE]
>  Отслеживание изменений начинается немедленно и не зависит от непосредственно `start` параметра. Используйте `start` переданный параметр для передачи даты и времени в прошлом, для которого требуется проверить дату последнего изменения любого объекта `filenames` или `cachekeys` параметров. Если дата последнего изменения любая из этих объектов позже даты, и переданный набор временного `start` параметра, кэшированный элемент удаляется из <xref:System.Web.Caching.Cache>.  
  
   
  
## Examples  
 В следующем примере кода создается `CreateDependency` метод. При вызове этот метод создает <xref:System.DateTime> объекта и <xref:System.Web.Caching.Cache.Item%2A?displayProperty=nameWithType> свойство используется для добавления элемента в кэш с `key` параметр `key1` и значение `Value 1`. Массив строк, `dependencyKey`, затем создается со значением `key1` также. Это <xref:System.Web.Caching.CacheDependency> конструктор создает <xref:System.Web.Caching.CacheDependency> объект, который передает `dependencyKey` и <xref:System.DateTime> объект в качестве аргументов параметра. <xref:System.Web.Caching.Cache.Insert%2A?displayProperty=nameWithType> Метод вызывается после этого с помощью <xref:System.Web.Caching.CacheDependency> объект в качестве параметра. Это приводит к добавлению в кэш с помощью объекта <xref:System.Web.Caching.Cache.Insert%2A> зависит от метода `key1` ключа.  
  
 [!code-csharp[CacheDependency Constructor6#1](~/samples/snippets/csharp/VS_Snippets_WebNet/CacheDependency Constructor6/CS/depkeytimecs.aspx#1)]
 [!code-vb[CacheDependency Constructor6#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/CacheDependency Constructor6/VB/depkeytimevb.aspx#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Web.Caching.Cache" />
        <altmember cref="M:System.Web.Caching.Cache.Insert(System.String,System.Object,System.Web.Caching.CacheDependency)" />
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public CacheDependency (string[] filenames, string[] cachekeys, System.Web.Caching.CacheDependency dependency);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(string[] filenames, string[] cachekeys, class System.Web.Caching.CacheDependency dependency) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.Caching.CacheDependency.#ctor(System.String[],System.String[],System.Web.Caching.CacheDependency)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (filenames As String(), cachekeys As String(), dependency As CacheDependency)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; CacheDependency(cli::array &lt;System::String ^&gt; ^ filenames, cli::array &lt;System::String ^&gt; ^ cachekeys, System::Web::Caching::CacheDependency ^ dependency);" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="filenames" Type="System.String[]" />
        <Parameter Name="cachekeys" Type="System.String[]" />
        <Parameter Name="dependency" Type="System.Web.Caching.CacheDependency" />
      </Parameters>
      <Docs>
        <param name="filenames">Массив путей (к файлам или каталогам), от которого зависит кэшированный объект. При изменении любого из ресурсов кэшированный объект становится устаревшим и удаляется из кэша.</param>
        <param name="cachekeys">Массив ключей кэша, изменения которых отслеживает новый объект. При изменении любого из ключей кэша кэшированный объект, связанный с этой зависимостью, становится устаревшим и удаляется из кэша.</param>
        <param name="dependency">Другой экземпляр класса <see cref="T:System.Web.Caching.CacheDependency" />, от которого зависит этот экземпляр.</param>
        <summary>Инициализирует новый экземпляр класса <see cref="T:System.Web.Caching.CacheDependency" />, отслеживающий изменения массива путей (к файлам или каталогам), массива ключей кэша, или обоих сразу. Он также становится зависимым от отдельного экземпляра класса <see cref="T:System.Web.Caching.CacheDependency" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Кроме того Если любой из каталогов или файлов, указанных в `filenames` параметр не найден в файловой системе, он считается отсутствующим. Если каталог или файл отсутствует при добавлении объекта с зависимостью для <xref:System.Web.Caching.Cache>, кэшированный объект будет удален из <xref:System.Web.Caching.Cache> при создании этого файла или каталога.  
  
 Например, предположим, вы добавляете объект <xref:System.Web.Caching.Cache> с зависимостью от следующего пути к файлу: c:\stocks\xyz.dat. Если этот файл не найден при <xref:System.Web.Caching.CacheDependency> объект создается, но впоследствии будет создан, кэшированный объект удаляется при создании файла xyz.dat.  
  
 Однако `cachekeys` зависимостей не работает одинаково. Если хотя бы для одного значения `cachekeys` параметра не существует во время вставки, завершается неудачей. Обратите внимание, что исключение не создано для этого сценария.
  
## Examples  
 В следующем примере кода создается `CreateDependency` метод. Когда этот метод вызывается, он использует <xref:System.Web.Caching.Cache.Item%2A?displayProperty=nameWithType> свойство, чтобы добавить элемент в кэш с `key` параметр `key1` и значение `Value 1`. Массив строк, `dependencyKey`, затем создается со значением `key1` также. <xref:System.Web.Caching.CacheDependency.%23ctor%2A?displayProperty=nameWithType> Конструктор используется для создания <xref:System.Web.Caching.CacheDependency> объекта, `dep1`, который передает `dependencyKey` как аргумент параметра. Второй <xref:System.Web.Caching.CacheDependency> объекта, `dep2`, создается с помощью этого конструктора с `dep1` передается в качестве третьего аргумента параметр. Эта вторая зависимость зависит от первой. <xref:System.Web.Caching.Cache.Insert%2A?displayProperty=nameWithType> Метод вызывается следующим при использовании второго <xref:System.Web.Caching.CacheDependency> объект в качестве параметра. Если при любых изменениях первая зависимость, станут недействительными кэшированного элемента.  
  
 [!code-csharp[CacheDependency Constructor7#1](~/samples/snippets/csharp/VS_Snippets_WebNet/CacheDependency Constructor7/CS/dependencycs.aspx#1)]
 [!code-vb[CacheDependency Constructor7#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/CacheDependency Constructor7/VB/dependencyvb.aspx#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public CacheDependency (string[] filenames, string[] cachekeys, System.Web.Caching.CacheDependency dependency, DateTime start);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(string[] filenames, string[] cachekeys, class System.Web.Caching.CacheDependency dependency, valuetype System.DateTime start) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.Caching.CacheDependency.#ctor(System.String[],System.String[],System.Web.Caching.CacheDependency,System.DateTime)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (filenames As String(), cachekeys As String(), dependency As CacheDependency, start As DateTime)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; CacheDependency(cli::array &lt;System::String ^&gt; ^ filenames, cli::array &lt;System::String ^&gt; ^ cachekeys, System::Web::Caching::CacheDependency ^ dependency, DateTime start);" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="filenames" Type="System.String[]" />
        <Parameter Name="cachekeys" Type="System.String[]" />
        <Parameter Name="dependency" Type="System.Web.Caching.CacheDependency" />
        <Parameter Name="start" Type="System.DateTime" />
      </Parameters>
      <Docs>
        <param name="filenames">Массив путей (к файлам или каталогам), от которого зависит кэшированный объект. При изменении любого из ресурсов кэшированный объект становится устаревшим и удаляется из кэша.</param>
        <param name="cachekeys">Массив ключей кэша, изменения которых отслеживает новый объект. При изменении любого из ключей кэша кэшированный объект, связанный с этой зависимостью, становится устаревшим и удаляется из кэша.</param>
        <param name="dependency">Другой экземпляр класса <see cref="T:System.Web.Caching.CacheDependency" />, от которого зависит этот экземпляр.</param>
        <param name="start">Время, по которому проверяется дата последнего изменения объектов массивов и объекта <see cref="T:System.Web.Caching.CacheDependency" />.</param>
        <summary>Инициализирует новый экземпляр класса <see cref="T:System.Web.Caching.CacheDependency" />, отслеживающий изменения массива путей (к файлам или каталогам), массива ключей кэша, или обоих сразу. Он также становится зависимым от другого экземпляра класса <see cref="T:System.Web.Caching.CacheDependency" /> и времени начала отслеживания изменений.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Кроме того Если любой из каталогов или файлов, указанных в `filenames` параметр не найден в файловой системе, он считается отсутствующим. Если каталог или файл отсутствует при добавлении объекта с зависимостью для <xref:System.Web.Caching.Cache>, кэшированный объект будет удален из <xref:System.Web.Caching.Cache> при создании этого файла или каталога.  
  
 Например, предположим, вы добавляете объект <xref:System.Web.Caching.Cache> с зависимостью от следующего пути к файлу: c:\stocks\xyz.dat. Если этот файл не найден при <xref:System.Web.Caching.CacheDependency> объект создается, но впоследствии будет создан, кэшированный объект удаляется при создании файла xyz.dat.  
 
 Однако `cachekeys` зависимостей не работает одинаково. Если хотя бы для одного значения `cachekeys` параметра не существует во время вставки, завершается неудачей. Обратите внимание, что исключение не создано для этого сценария.

> [!NOTE]
>  Отслеживание изменений начинается немедленно и не зависит от непосредственно `start` параметра. Используйте `start` переданный параметр для передачи даты и времени в прошлом, для которого требуется проверить дату последнего изменения любого объекта `filenames`, `cachekeys`, или `dependency` параметров. Если дата последнего изменения даты для любого из этих объектов позже даты и времени переданный `start` параметра, кэшированный элемент удаляется из <xref:System.Web.Caching.Cache>.  
  
   
  
## Examples  
 В следующем примере кода показан `CreateDependency` метод. При вызове этот метод создает <xref:System.DateTime> объекта и <xref:System.Web.Caching.Cache.Item%2A?displayProperty=nameWithType> свойство используется для добавления элемента в кэш с параметром ключа `key1` и значение `Value 1`. Массив строк, `dependencyKey`, затем создается значение по его индексу первый (и единственный) присвоено значение `key1` также. <xref:System.Web.Caching.CacheDependency.%23ctor%2A?displayProperty=nameWithType> Конструктор используется для создания <xref:System.Web.Caching.CacheDependency> объекта, `dep1`, который передает `dependencyKey` как аргумент параметра. Второй <xref:System.Web.Caching.CacheDependency> объекта, `dep2`, создается с помощью этого конструктора с `dep1` и <xref:System.DateTime> объект, переданный в качестве аргументов параметра. Эта вторая зависимость зависит от первой, и отслеживание зависимостей начинается 10 секунд после `CreateDependency` вызывается метод. <xref:System.Web.Caching.Cache.Insert%2A?displayProperty=nameWithType> Метод вызывается следующим при использовании второго <xref:System.Web.Caching.CacheDependency> объект в качестве параметра. Если при любых изменениях первая зависимость, станут недействительными кэшированного элемента.  
  
 [!code-csharp[CacheDependency Constructor8#1](~/samples/snippets/csharp/VS_Snippets_WebNet/CacheDependency Constructor8/CS/dependencytimecs.aspx#1)]
 [!code-vb[CacheDependency Constructor8#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/CacheDependency Constructor8/VB/dependencytimevb.aspx#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Web.Caching.Cache" />
        <altmember cref="M:System.Web.Caching.Cache.Insert(System.String,System.Object,System.Web.Caching.CacheDependency)" />
      </Docs>
    </Member>
    <Member MemberName="DependencyDispose">
      <MemberSignature Language="C#" Value="protected virtual void DependencyDispose ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void DependencyDispose() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.Caching.CacheDependency.DependencyDispose" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub DependencyDispose ()" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void DependencyDispose();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Освобождает ресурсы, используемые классом <see cref="T:System.Web.Caching.CacheDependency" /> и любыми классами, производными от <see cref="T:System.Web.Caching.CacheDependency" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Любой класс, производный от <xref:System.Web.Caching.CacheDependency> класса требуется реализовать этот метод для освобождения ресурсов, которые были использованы в производном классе.  
  
   
  
## Examples  
 В следующем примере кода показан класс, наследующий от <xref:System.Web.Caching.CacheDependency> класса и переопределяет <xref:System.Web.Caching.CacheDependency.DependencyDispose%2A> метод. При вызове этого метода он устанавливает настраиваемое логическое свойство с именем `Disposed` для `true`.  
  
 [!code-vb[CacheDependency_Whidbey_Example1#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/CacheDependency_Whidbey_Example1/VB/cachedependencysample.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Web.Caching.Cache" />
        <altmember cref="M:System.Web.Caching.Cache.Insert(System.String,System.Object,System.Web.Caching.CacheDependency)" />
      </Docs>
    </Member>
    <Member MemberName="Dispose">
      <MemberSignature Language="C#" Value="public void Dispose ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Dispose() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.Caching.CacheDependency.Dispose" />
      <MemberSignature Language="VB.NET" Value="Public Sub Dispose ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void Dispose();" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.IDisposable.Dispose</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Освобождает ресурсы, используемые объектом <see cref="T:System.Web.Caching.CacheDependency" />.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="FinishInit">
      <MemberSignature Language="C#" Value="protected internal void FinishInit ();" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblyhidebysig instance void FinishInit() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.Caching.CacheDependency.FinishInit" />
      <MemberSignature Language="VB.NET" Value="Protected Friend Sub FinishInit ()" />
      <MemberSignature Language="C++ CLI" Value="protected public:&#xA; void FinishInit();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Завершает инициализацию объекта <see cref="T:System.Web.Caching.CacheDependency" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Web.Caching.CacheDependency.FinishInit%2A> Метод завершения инициализации <xref:System.Web.Caching.CacheDependency> объекта. Этот метод вызывается для всех <xref:System.Web.Caching.CacheDependency> конструкторы.  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides">
          <para>
            <see cref="M:System.Web.Caching.CacheDependency.FinishInit" /> Метод должен вызываться в конце конструктор для производных классов для завершения инициализации <see cref="T:System.Web.Caching.CacheDependency" /> объекта.</para>
        </block>
        <altmember cref="T:System.Web.Caching.Cache" />
        <altmember cref="M:System.Web.Caching.Cache.Insert(System.String,System.Object,System.Web.Caching.CacheDependency)" />
      </Docs>
    </Member>
    <Member MemberName="GetFileDependencies">
      <MemberSignature Language="C#" Value="public virtual string[] GetFileDependencies ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance string[] GetFileDependencies() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.Caching.CacheDependency.GetFileDependencies" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetFileDependencies () As String()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual cli::array &lt;System::String ^&gt; ^ GetFileDependencies();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String[]</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Возвращает зависимости файлов.</summary>
        <returns>Зависимости файлов.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetUniqueID">
      <MemberSignature Language="C#" Value="public virtual string GetUniqueID ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance string GetUniqueID() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.Caching.CacheDependency.GetUniqueID" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetUniqueID () As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::String ^ GetUniqueID();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Извлекает уникальный идентификатор для объекта <see cref="T:System.Web.Caching.CacheDependency" />.</summary>
        <returns>Уникальный идентификатор объекта <see cref="T:System.Web.Caching.CacheDependency" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Этот метод может быть особенно полезен для отслеживания нескольких экземпляров <xref:System.Web.Caching.CacheDependency> класса, связанного с элементом или приложением.  
  
 Идентификатор представляет собой сочетание имени файла (для зависимости файлов) или имени ключа (для зависимости ключей кэша) и строка, этот метод присваивает зависимости. В классах, производных от <xref:System.Web.Caching.CacheDependency> класса, можно переопределить этот метод для настройки того, как он создает уникальный идентификатор.  
  
   
  
## Examples  
 В следующем примере кода создается <xref:System.Web.Caching.AggregateCacheDependency> объекта, с именем `aggDep`, с двумя <xref:System.Web.Caching.CacheDependency> объекты в массиве его. Один раз `aggDep` создается экземпляр, этот код вызывает <xref:System.Web.Caching.CacheDependency.GetUniqueID%2A> метод для создания уникального идентификатора для как зависимости, `aggDep` содержит и отображает страницу, содержащую идентификаторы. Затем добавляется элемент <xref:System.Web.Caching.Cache>, с использованием <xref:System.Web.Caching.Cache.Insert%2A> метод, с `aggDep` как зависимость.  
  
 [!code-vb[CachingSamples_AggregateCacheDependency1#3](~/samples/snippets/visualbasic/VS_Snippets_WebNet/CachingSamples_AggregateCacheDependency1/VB/aggregatecachedependencysamplevb.aspx#3)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Web.Caching.Cache" />
      </Docs>
    </Member>
    <Member MemberName="HasChanged">
      <MemberSignature Language="C#" Value="public bool HasChanged { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool HasChanged" />
      <MemberSignature Language="DocId" Value="P:System.Web.Caching.CacheDependency.HasChanged" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property HasChanged As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool HasChanged { bool get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Получает значение, указывающее, изменился ли объект <see cref="T:System.Web.Caching.CacheDependency" />.</summary>
        <value>
          <see langword="true" />, если объект <see cref="T:System.Web.Caching.CacheDependency" /> изменился; в противном случае <see langword="false" />. Значение по умолчанию: <see langword="false" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Можно добавить элемент к приложению ASP.NET <xref:System.Web.Caching.Cache> с <xref:System.Web.Caching.CacheDependency>. Когда <xref:System.Web.Caching.CacheDependency> элемент, добавляемый <xref:System.Web.Caching.Cache> недействительными и были удалены из кэша. Это свойство можно использовать, чтобы определить, является ли <xref:System.Web.Caching.CacheDependency> был изменен и повторно создать элемент в <xref:System.Web.Caching.Cache> , имела ли место.  
  
   
  
## Examples  
 В следующем примере кода показано использование <xref:System.Web.Caching.CacheDependency.HasChanged%2A> свойства, чтобы определить ли <xref:System.Web.Caching.CacheDependency> изменены с момента предыдущего запроса для элемента в <xref:System.Web.Caching.Cache>. `dt` Переданное значение `start` параметра равным <xref:System.DateTime.Now%2A?displayProperty=nameWithType>.  
  
 [!code-csharp[System.Web.Caching.CacheDependency_HasChanged#1](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.Caching.CacheDependency_HasChanged/CS/t.cs.aspx#1)]
 [!code-vb[System.Web.Caching.CacheDependency_HasChanged#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.Caching.CacheDependency_HasChanged/VB/t.vb.aspx#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Web.Caching.Cache" />
        <altmember cref="M:System.Web.Caching.Cache.Insert(System.String,System.Object,System.Web.Caching.CacheDependency)" />
      </Docs>
    </Member>
    <Member MemberName="ItemRemoved">
      <MemberSignature Language="C#" Value="public void ItemRemoved ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void ItemRemoved() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.Caching.CacheDependency.ItemRemoved" />
      <MemberSignature Language="VB.NET" Value="Public Sub ItemRemoved ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void ItemRemoved();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Вызывается при удалении отслеживаемой записи кэша.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="KeepDependenciesAlive">
      <MemberSignature Language="C#" Value="public void KeepDependenciesAlive ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void KeepDependenciesAlive() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.Caching.CacheDependency.KeepDependenciesAlive" />
      <MemberSignature Language="VB.NET" Value="Public Sub KeepDependenciesAlive ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void KeepDependenciesAlive();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Обновляет время последнего обращения к каждому элементу кэша, который зависит от этого элемента.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="NotifyDependencyChanged">
      <MemberSignature Language="C#" Value="protected void NotifyDependencyChanged (object sender, EventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig instance void NotifyDependencyChanged(object sender, class System.EventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.Caching.CacheDependency.NotifyDependencyChanged(System.Object,System.EventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Sub NotifyDependencyChanged (sender As Object, e As EventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; void NotifyDependencyChanged(System::Object ^ sender, EventArgs ^ e);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="sender" Type="System.Object" />
        <Parameter Name="e" Type="System.EventArgs" />
      </Parameters>
      <Docs>
        <param name="sender">Источник события.</param>
        <param name="e">Объект <see cref="T:System.EventArgs" />, содержащий данные о событии.</param>
        <summary>Уведомляет базовый объект <see cref="T:System.Web.Caching.CacheDependency" /> об изменении зависимости, представленной производным классом <see cref="T:System.Web.Caching.CacheDependency" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Любой класс, производный от <xref:System.Web.Caching.CacheDependency> класса необходимо реализовать этот метод.  
  
 При наследовании от <xref:System.Web.Caching.CacheDependency> , использовать базовую функциональность любой метод или свойство, которое не был переопределен. При создании экземпляра производного класса, он представляет файлы, ключи кэша, таблицы базы данных или других произвольных объектов, которые требуется сделать зависимой от кэшированного элемента. При изменении элемента зависимостей этот метод уведомляет базовую функциональность <xref:System.Web.Caching.CacheDependency> измененного элемента, класс, чтобы значения <xref:System.Web.Caching.CacheDependency.HasChanged%2A> и <xref:System.Web.Caching.CacheDependency.UtcLastModified%2A> свойства обновляться.  
  
   
  
## Examples  
 В следующем примере кода показан класс, наследующий от <xref:System.Web.Caching.CacheDependency> класса. Он создает открытый метод, `ResetDependency`, который использует <xref:System.Web.Caching.CacheDependency.SetUtcLastModified%2A> метод, чтобы изменить время, когда изменения зависимостей, а затем вызывает <xref:System.Web.Caching.CacheDependency.NotifyDependencyChanged%2A> метод.  
  
 [!code-vb[CacheDependency_Whidbey_Example1#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/CacheDependency_Whidbey_Example1/VB/cachedependencysample.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Web.Caching.Cache" />
        <altmember cref="M:System.Web.Caching.Cache.Insert(System.String,System.Object,System.Web.Caching.CacheDependency)" />
      </Docs>
    </Member>
    <Member MemberName="SetCacheDependencyChanged">
      <MemberSignature Language="C#" Value="public void SetCacheDependencyChanged (Action&lt;object,EventArgs&gt; dependencyChangedAction);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void SetCacheDependencyChanged(class System.Action`2&lt;object, class System.EventArgs&gt; dependencyChangedAction) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.Caching.CacheDependency.SetCacheDependencyChanged(System.Action{System.Object,System.EventArgs})" />
      <MemberSignature Language="VB.NET" Value="Public Sub SetCacheDependencyChanged (dependencyChangedAction As Action(Of Object, EventArgs))" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void SetCacheDependencyChanged(Action&lt;System::Object ^, EventArgs ^&gt; ^ dependencyChangedAction);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="dependencyChangedAction" Type="System.Action&lt;System.Object,System.EventArgs&gt;" />
      </Parameters>
      <Docs>
        <param name="dependencyChangedAction">Действие изменения зависимости.</param>
        <summary>Добавляет метод действия для обработки уведомления заинтересованной стороны об изменениях в этой зависимости.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="SetUtcLastModified">
      <MemberSignature Language="C#" Value="protected void SetUtcLastModified (DateTime utcLastModified);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig instance void SetUtcLastModified(valuetype System.DateTime utcLastModified) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.Caching.CacheDependency.SetUtcLastModified(System.DateTime)" />
      <MemberSignature Language="VB.NET" Value="Protected Sub SetUtcLastModified (utcLastModified As DateTime)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; void SetUtcLastModified(DateTime utcLastModified);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="utcLastModified" Type="System.DateTime" />
      </Parameters>
      <Docs>
        <param name="utcLastModified">Время последнего изменения зависимости.</param>
        <summary>Помечает время последнего изменения зависимости.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 В следующем примере кода показан класс, наследующий от <xref:System.Web.Caching.CacheDependency> класса. Он создает открытый метод, `ResetDependency`, который использует <xref:System.Web.Caching.CacheDependency.SetUtcLastModified%2A> метод, чтобы изменить время, когда изменения зависимостей, а затем вызывает <xref:System.Web.Caching.CacheDependency.NotifyDependencyChanged%2A> метод.  
  
 [!code-vb[CacheDependency_Whidbey_Example1#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/CacheDependency_Whidbey_Example1/VB/cachedependencysample.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Web.Caching.Cache" />
        <altmember cref="M:System.Web.Caching.Cache.Insert(System.String,System.Object,System.Web.Caching.CacheDependency)" />
      </Docs>
    </Member>
    <Member MemberName="TakeOwnership">
      <MemberSignature Language="C#" Value="public bool TakeOwnership ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool TakeOwnership() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.Caching.CacheDependency.TakeOwnership" />
      <MemberSignature Language="VB.NET" Value="Public Function TakeOwnership () As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool TakeOwnership();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Позволяет первому пользователю объявлять монопольный доступ к этой зависимости.</summary>
        <returns>
          <see langword="true" />
          <see langword="true" />, если элемент был первым владельцем; в противном случае значение <see langword="false" />. <see langword="false" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Этот метод объявляет, что используется зависимость. Если другой элемент уже вызван этот метод и владельца, `false` возвращается. Объект <xref:System.Web.Caching.CacheDependency> можно использовать только один кэш записи. При добавлении элемента в кэш с любой зависимости кэша указан кэш должен стать владельцем этих зависимостей, чтобы убедиться в том, что они не будут повторно использоваться где-то еще.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="UtcLastModified">
      <MemberSignature Language="C#" Value="public DateTime UtcLastModified { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.DateTime UtcLastModified" />
      <MemberSignature Language="DocId" Value="P:System.Web.Caching.CacheDependency.UtcLastModified" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property UtcLastModified As DateTime" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property DateTime UtcLastModified { DateTime get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.DateTime</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Получает время последнего изменения зависимости.</summary>
        <value>Время последнего изменения зависимости.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Это свойство измеряется в формате UTC (UTC) (также известный как среднее время по Гринвичу).  
  
   
  
## Examples  
 Следующий пример кода использует <xref:System.Web.Caching.AggregateCacheDependency> класса, чтобы добавить элемент, с двумя <xref:System.Web.Caching.CacheDependency> объекта зависимостей, к <xref:System.Web.Caching.Cache>. Когда запрос для <xref:System.Web.Caching.Cache> элемента, код проверяет, является ли элемент в <xref:System.Web.Caching.Cache>. Если это так, <xref:System.Web.Caching.CacheDependency.UtcLastModified%2A> свойство преобразуется в строку и отображаются на странице. Если это не так, элемент и его зависимости два создаются и добавляются к <xref:System.Web.Caching.Cache>.  
  
 [!code-vb[CachingSamples_AggregateCacheDependency1#2](~/samples/snippets/visualbasic/VS_Snippets_WebNet/CachingSamples_AggregateCacheDependency1/VB/aggregatecachedependencysamplevb.aspx#2)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Web.Caching.Cache" />
        <altmember cref="M:System.Web.Caching.Cache.Insert(System.String,System.Object,System.Web.Caching.CacheDependency)" />
      </Docs>
    </Member>
  </Members>
</Type>