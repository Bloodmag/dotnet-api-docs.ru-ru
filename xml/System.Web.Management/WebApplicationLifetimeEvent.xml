<Type Name="WebApplicationLifetimeEvent" FullName="System.Web.Management.WebApplicationLifetimeEvent">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="4efd6318a7c9c37584a85b3f368e7186461b380d" />
    <Meta Name="ms.sourcegitcommit" Value="d31dc2ede16f6f7bc64e90d9f897ff54c4e3869b" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="ru-RU" />
    <Meta Name="ms.lasthandoff" Value="04/03/2018" />
    <Meta Name="ms.locfileid" Value="30539638" />
  </Metadata>
  <TypeSignature Language="C#" Value="public class WebApplicationLifetimeEvent : System.Web.Management.WebManagementEvent" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit WebApplicationLifetimeEvent extends System.Web.Management.WebManagementEvent" />
  <TypeSignature Language="DocId" Value="T:System.Web.Management.WebApplicationLifetimeEvent" />
  <TypeSignature Language="VB.NET" Value="Public Class WebApplicationLifetimeEvent&#xA;Inherits WebManagementEvent" />
  <TypeSignature Language="C++ CLI" Value="public ref class WebApplicationLifetimeEvent : System::Web::Management::WebManagementEvent" />
  <AssemblyInfo>
    <AssemblyName>System.Web</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Web.Management.WebManagementEvent</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>Представляет значительное событие в жизненном цикле приложения.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Мониторинг состояния ASP.NET позволяет производства и операции персоналу управлять развернутыми веб-приложениями. <xref:System.Web.Management> Пространство имен содержит типы событий состояния, отвечающие за упаковку данных о состоянии работоспособности приложений, а также типы поставщика, ответственные за обработку этих данных. Он также содержит вспомогательные типы, которые помогут при управлении событиями состояния.  
  
 События жизненного цикла приложения включают события, такие как запуск приложения и события завершения работы. Если приложение завершается, можно определить причину, просмотрев соответствующее поле сообщения события.  
  
 Когда <xref:System.Web.Management.WebApplicationLifetimeEvent> встречается, наблюдение за работоспособностью ASP.NET обновляет счетчик производительности события жизненного цикла приложения. Эти события можно войти с добавления <xref:System.Web.Management.WebApplicationLifetimeEvent> объект `rules` подразделе `healthMonitoring` раздел файла конфигурации, как показано в следующем примере.  
  
```  
<rules>  
  <add name="Application Events"  
    eventName="Application Lifetime Events"  
    provider="EventLogProvider"  
    profile="Default"  
    minInterval="00:01:00" />  
</rules>  
  
```  
  
 События жизненного цикла приложения счетчик производительности, который содержит сумму всех событий жизненного цикла ASP.NET. Для просмотра этого счетчика производительности в системном мониторе (PerfMon) в **добавить счетчики** выберите **ASP.NET** из **объект производительности** раскрывающегося списка. Выберите **события жизненного цикла приложения** счетчик производительности и нажмите кнопку **добавить** кнопки. Дополнительные сведения см. в разделе «Использование системного монитора (PerfMon) с приложениями ASP.NET» на [MSDN](http://go.microsoft.com/fwlink/?linkid=37118). Если разрешить событий в журнал по стандарту <xref:System.Web.Management.EventLogWebEventProvider>, можно просмотреть в средстве просмотра событий, выбрав **приложения** журнала. Дополнительные сведения см. в разделе [средство просмотра событий](http://go.microsoft.com/fwlink/?linkid=24845&clcid=0x409) в документации по Windows Server 2003 на сайте TechNet.  
  
> [!CAUTION]
>  Поскольку <xref:System.Web.Management.WebApplicationLifetimeEvent> объекта является событием большого объема, ведение журнала он ресурсоемкая и может замедлить работу системы. Также могут вызвать другие события, будут перезаписаны в случае использования <xref:System.Web.Management.EventLogWebEventProvider> класса из-за большого объема событий и способ ведения журнала работы событий.  
  
> [!NOTE]
>  В большинстве случаев можно будет использовать типы мониторинга состояния ASP.NET как реализованные и управлять системой мониторинга состояния, указав значения в `healthMonitoring` раздел конфигурации. Также можно наследовать от типов наблюдение за работоспособностью, чтобы создавать собственные пользовательские события и поставщиков. Например, производные от <xref:System.Web.Management.WebApplicationLifetimeEvent> см. в описании примера, приведенного в этом разделе.  
  
   
  
## Examples  
 В следующем примере кода показано, как производные от <xref:System.Web.Management.WebApplicationLifetimeEvent> класса для создания пользовательского события.  
  
 [!code-csharp[System.Web.Management.WebApplicationLifetimeEvent#1](~/samples/snippets/csharp/VS_Snippets_WebNet/system.web.management.WebApplicationLifetimeEvent/CS/webapplicationlifetimeevent.cs#1)]
 [!code-vb[System.Web.Management.WebApplicationLifetimeEvent#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/system.web.management.WebApplicationLifetimeEvent/VB/webapplicationlifetimeevent.vb#1)]  
  
 В следующем фрагменте файла конфигурации показано, как настроить `healthMonitoring` раздел файла конфигурации, чтобы добавить `SampleWebApplicationLifetimeEvent` код, описанный выше наблюдение за работоспособностью системы ASP.NET. Чтобы добавить событие в системе, необходимо определить событие, добавив новую запись для `eventMappings` статьи и сопоставлении событие поставщику, добавив новую запись `rules` раздела.  
  
```  
<healthMonitoring  
  enabled="true"  
  heartBeatInterval="0">  
  
    <eventMappings>  
       <clear />  
       <!-- Configure the application lifetime event -->  
       <!-- object to handle the Web application events. -->  
       <add name="SampleApplicationLifetimeEvents"  
         type="System.Web.Management.SampleWebApplicationLifetimeEvent,  
         System.Web,Version=2.0.3600.0,  
         Culture=neutral,PublicKeyToken=b03f5f7f11d50a3a" />  
     </eventMappings>  
  
    <rules>  
      <clear/>  
       // Configure the connection between the   
       // application lifetime event object   
       // and the provider that must process it.  
       <add name="Custom Application Events"  
         eventName="SampleApplicationLifetimeEvents"  
         provider="EventLogProvider"  
         profile="Default"  
         minInterval="00:01:00" />  
    </rules>  
  
</healthMonitoring>  
```  
  
 ]]></format>
    </remarks>
    <block subset="none" type="overrides">
      <para>При форматировании данных пользовательское событие для отображения, переопределите <see cref="M:System.Web.Management.WebBaseEvent.FormatCustomEventDetails(System.Web.Management.WebEventFormatter)" /> метод вместо <see cref="Overload:System.Web.Management.WebBaseEvent.ToString" /> метод. Это позволит избежать перезаписи или изменения важной системной информации.</para>
    </block>
  </Docs>
  <Members>
    <MemberGroup MemberName=".ctor">
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Инициализирует новый экземпляр класса <see cref="T:System.Web.Management.WebApplicationLifetimeEvent" />.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="protected internal WebApplicationLifetimeEvent (string message, object eventSource, int eventCode);" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblyhidebysig specialname rtspecialname instance void .ctor(string message, object eventSource, int32 eventCode) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.Management.WebApplicationLifetimeEvent.#ctor(System.String,System.Object,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Protected Friend Sub New (message As String, eventSource As Object, eventCode As Integer)" />
      <MemberSignature Language="C++ CLI" Value="protected public:&#xA; WebApplicationLifetimeEvent(System::String ^ message, System::Object ^ eventSource, int eventCode);" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="message" Type="System.String" />
        <Parameter Name="eventSource" Type="System.Object" />
        <Parameter Name="eventCode" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="message">Сообщение, связанное с событием.</param>
        <param name="eventSource">Объект, являющийся источником события.</param>
        <param name="eventCode">Код, связанный с событием. При реализации пользовательского события код события должен превышать <see cref="F:System.Web.Management.WebEventCodes.WebExtendedBase" />.</param>
        <summary>Инициализирует класс <see cref="T:System.Web.Management.WebApplicationLifetimeEvent" />, используя предоставленные параметры.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Этот конструктор используется внутренне системой мониторинга состояния ASP.NET. Он никогда не будет использоваться для создания экземпляра <xref:System.Web.Management.WebApplicationLifetimeEvent> класс, но можно вызвать этот конструктор при реализации собственного типа события, который наследует от этого класса.  
  
> [!NOTE]
>  <xref:System.Web.Management.WebApplicationLifetimeEvent.%23ctor%2A> Конструктор не предназначен для использования непосредственно из программного кода. Вызывается ASP.NET. Можно вызвать <xref:System.Web.Management.WebApplicationLifetimeEvent.%23ctor%2A> конструктор при создании производной от <xref:System.Web.Management.WebApplicationLifetimeEvent> класса.  
  
   
  
## Examples  
 В следующем примере кода показано, как использовать <xref:System.Web.Management.WebApplicationLifetimeEvent.%23ctor%2A> в ASP.NET пользовательское событие работоспособности. Этот пример кода предназначен главным образом для отображения правильного синтаксиса.  
  
 [!code-csharp[System.Web.Management.WebApplicationLifetimeEvent#2](~/samples/snippets/csharp/VS_Snippets_WebNet/system.web.management.WebApplicationLifetimeEvent/CS/webapplicationlifetimeevent.cs#2)]
 [!code-vb[System.Web.Management.WebApplicationLifetimeEvent#2](~/samples/snippets/visualbasic/VS_Snippets_WebNet/system.web.management.WebApplicationLifetimeEvent/VB/webapplicationlifetimeevent.vb#2)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="protected internal WebApplicationLifetimeEvent (string message, object eventSource, int eventCode, int eventDetailCode);" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblyhidebysig specialname rtspecialname instance void .ctor(string message, object eventSource, int32 eventCode, int32 eventDetailCode) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.Management.WebApplicationLifetimeEvent.#ctor(System.String,System.Object,System.Int32,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Protected Friend Sub New (message As String, eventSource As Object, eventCode As Integer, eventDetailCode As Integer)" />
      <MemberSignature Language="C++ CLI" Value="protected public:&#xA; WebApplicationLifetimeEvent(System::String ^ message, System::Object ^ eventSource, int eventCode, int eventDetailCode);" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="message" Type="System.String" />
        <Parameter Name="eventSource" Type="System.Object" />
        <Parameter Name="eventCode" Type="System.Int32" />
        <Parameter Name="eventDetailCode" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="message">Сообщение, связанное с событием.</param>
        <param name="eventSource">Объект, являющийся источником события.</param>
        <param name="eventCode">Код, связанный с событием. При реализации пользовательского события код события должен превышать <see cref="F:System.Web.Management.WebEventCodes.WebExtendedBase" />.</param>
        <param name="eventDetailCode">Значение <see cref="T:System.Web.Management.WebEventCodes" />, указывающее подробный идентификатор для события.</param>
        <summary>Инициализирует класс <see cref="T:System.Web.Management.WebApplicationLifetimeEvent" />, используя предоставленные параметры.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Этот конструктор используется внутренне системой мониторинга состояния ASP.NET. Он никогда не будет использоваться для создания экземпляра <xref:System.Web.Management.WebApplicationLifetimeEvent> класс, но можно вызвать этот конструктор при реализации собственного типа события, который наследует от этого класса.  
  
> [!NOTE]
>  <xref:System.Web.Management.WebApplicationLifetimeEvent.%23ctor%2A> Конструктор не предназначен для использования непосредственно из программного кода. Вызывается ASP.NET. Можно вызвать <xref:System.Web.Management.WebApplicationLifetimeEvent.%23ctor%2A> конструктор при создании производной от <xref:System.Web.Management.WebApplicationLifetimeEvent> класса.  
  
   
  
## Examples  
 В следующем примере кода показано, как использовать <xref:System.Web.Management.WebApplicationLifetimeEvent.%23ctor%2A> в ASP.NET пользовательское событие работоспособности. Этот пример кода предназначен главным образом для отображения правильного синтаксиса.  
  
 [!code-csharp[System.Web.Management.WebApplicationLifetimeEvent#3](~/samples/snippets/csharp/VS_Snippets_WebNet/system.web.management.WebApplicationLifetimeEvent/CS/webapplicationlifetimeevent.cs#3)]
 [!code-vb[System.Web.Management.WebApplicationLifetimeEvent#3](~/samples/snippets/visualbasic/VS_Snippets_WebNet/system.web.management.WebApplicationLifetimeEvent/VB/webapplicationlifetimeevent.vb#3)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IncrementPerfCounters">
      <MemberSignature Language="C#" Value="protected internal override void IncrementPerfCounters ();" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblyhidebysig virtual instance void IncrementPerfCounters() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.Management.WebApplicationLifetimeEvent.IncrementPerfCounters" />
      <MemberSignature Language="VB.NET" Value="Protected Friend Overrides Sub IncrementPerfCounters ()" />
      <MemberSignature Language="C++ CLI" Value="protected public:&#xA; override void IncrementPerfCounters();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Используется для внутренних целей для увеличения значений счетчиков производительности.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
  </Members>
</Type>